{"content":"---\ntitle: \"Nullable Types (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"nullable types [C#]\"\n  - \"C# language, nullable types\"\n  - \"types [C#], nullable\"\nms.assetid: e473cb01-28ca-42be-9cea-f717055d72c6\ncaps.latest.revision: 44\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Nullable Types (C# Programming Guide)\nNullable types are instances of the <xref:System.Nullable%601?displayProperty=fullName> struct. A nullable type can represent the correct range of values for its underlying value type, plus an additional `null` value. For example, a `Nullable<Int32>`, pronounced \"Nullable of Int32,\" can be assigned any value from -2147483648 to 2147483647, or it can be assigned the `null` value. A `Nullable<bool>` can be assigned the values [true](../../../csharp/language-reference/keywords/true.md), [false](../../../csharp/language-reference/keywords/false.md), or [null](../../../csharp/language-reference/keywords/null.md). The ability to assign `null` to numeric and Boolean types is especially useful when you are dealing with databases and other data types that contain elements that may not be assigned a value. For example, a Boolean field in a database can store the values `true` or `false`, or it may be undefined.  \n  \n [!code-cs[csProgGuideTypes#3](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/index_1.cs)]  \n  \n The example will display the output:  \n  \n `num = Null`  \n  \n `Nullable object must have a value.`  \n  \n For more examples, see [Using Nullable Types](../../../csharp/programming-guide/nullable-types/using-nullable-types.md)  \n  \n## Nullable Types Overview  \n Nullable types have the following characteristics:  \n  \n-   Nullable types represent value-type variables that can be assigned the value of `null`. You cannot create a nullable type based on a reference type. (Reference types already support the `null` value.)  \n  \n-   The syntax `T?` is shorthand for <xref:System.Nullable%601>, where `T` is a value type. The two forms are interchangeable.  \n  \n-   Assign a value to a nullable type just as you would for an ordinary value type, for example `int? x = 10;` or `double? d = 4.108`. A nullable type can also be assigned the value `null`: `int? x = null.`  \n  \n-   Use the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=fullName> method to return either the assigned value, or the default value for the underlying type if the value is `null`, for example `int j = x.GetValueOrDefault();`  \n  \n-   Use the <xref:System.Nullable%601.HasValue%2A> and <xref:System.Nullable%601.Value%2A> read-only properties to test for null and retrieve the value, as shown in the following example: `if(x.HasValue) j = x.Value;`  \n  \n    -   The `HasValue` property returns `true` if the variable contains a value, or `false` if it is `null`.  \n  \n    -   The `Value` property returns a value if one is assigned. Otherwise, a <xref:System.InvalidOperationException?displayProperty=fullName> is thrown.  \n  \n    -   The default value for `HasValue` is `false`. The `Value` property has no default value.  \n  \n    -   You can also use the `==` and `!=` operators with a nullable type, as shown in the following example: `if (x != null) y = x;`  \n  \n-   Use the `??` operator to assign a default value that will be applied when a nullable type whose current value is `null` is assigned to a non-nullable type, for example `int? x = null; int y = x ?? -1;`  \n  \n-   Nested nullable types are not allowed. The following line will not compile: `Nullable<Nullable<int>> n;`  \n  \n## Related Sections  \n For more information:  \n  \n-   [Using Nullable Types](../../../csharp/programming-guide/nullable-types/using-nullable-types.md)  \n  \n-   [Boxing Nullable Types](../../../csharp/programming-guide/nullable-types/boxing-nullable-types.md)  \n  \n-   [?? Operator](../../../csharp/language-reference/operators/null-conditional-operator.md)  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.Nullable>   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C#](../../../csharp/csharp.md)   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [What exactly does 'lifted' mean?](http://go.microsoft.com/fwlink/?LinkId=112382)\n","nodes":[{"pos":[4,596],"embed":true,"restype":"x-metadata","content":"title: \"Nullable Types (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"nullable types [C#]\"\n  - \"C# language, nullable types\"\n  - \"types [C#], nullable\"\nms.assetid: e473cb01-28ca-42be-9cea-f717055d72c6\ncaps.latest.revision: 44\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Nullable Types (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,54],"content":"Nullable Types (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Nullable Types (C# Programming Guide) | Microsoft Docs","pos":[0,54]}]}],"path":["title"]}],"yml":true},{"pos":[603,640],"content":"Nullable Types (C# Programming Guide)","linkify":"Nullable Types (C# Programming Guide)","nodes":[{"content":"Nullable Types (C# Programming Guide)","pos":[0,37]}]},{"content":"Nullable types are instances of the <ph id=\"ph1\">&lt;xref:System.Nullable%601?displayProperty=fullName&gt;</ph> struct.","pos":[641,736],"source":"Nullable types are instances of the <xref:System.Nullable%601?displayProperty=fullName> struct."},{"content":"A nullable type can represent the correct range of values for its underlying value type, plus an additional <ph id=\"ph1\">`null`</ph> value.","pos":[737,858],"source":" A nullable type can represent the correct range of values for its underlying value type, plus an additional `null` value."},{"content":"For example, a <ph id=\"ph1\">`Nullable&lt;Int32&gt;`</ph>, pronounced \"Nullable of Int32,\" can be assigned any value from -2147483648 to 2147483647, or it can be assigned the <ph id=\"ph2\">`null`</ph> value.","pos":[859,1022],"source":" For example, a `Nullable<Int32>`, pronounced \"Nullable of Int32,\" can be assigned any value from -2147483648 to 2147483647, or it can be assigned the `null` value."},{"content":"A <ph id=\"ph1\">`Nullable&lt;bool&gt;`</ph> can be assigned the values <bpt id=\"p1\">[</bpt>true<ept id=\"p1\">](../../../csharp/language-reference/keywords/true.md)</ept>, <bpt id=\"p2\">[</bpt>false<ept id=\"p2\">](../../../csharp/language-reference/keywords/false.md)</ept>, or <bpt id=\"p3\">[</bpt>null<ept id=\"p3\">](../../../csharp/language-reference/keywords/null.md)</ept>.","pos":[1023,1256],"source":" A `Nullable<bool>` can be assigned the values [true](../../../csharp/language-reference/keywords/true.md), [false](../../../csharp/language-reference/keywords/false.md), or [null](../../../csharp/language-reference/keywords/null.md)."},{"content":"The ability to assign <ph id=\"ph1\">`null`</ph> to numeric and Boolean types is especially useful when you are dealing with databases and other data types that contain elements that may not be assigned a value.","pos":[1257,1448],"source":" The ability to assign `null` to numeric and Boolean types is especially useful when you are dealing with databases and other data types that contain elements that may not be assigned a value."},{"content":"For example, a Boolean field in a database can store the values <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>, or it may be undefined.","pos":[1449,1555],"source":" For example, a Boolean field in a database can store the values `true` or `false`, or it may be undefined."},{"content":"The example will display the output:","pos":[1679,1715]},{"pos":[1784,1903],"content":"For more examples, see <bpt id=\"p1\">[</bpt>Using Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/using-nullable-types.md)</ept>","source":"For more examples, see [Using Nullable Types](../../../csharp/programming-guide/nullable-types/using-nullable-types.md)"},{"pos":[1912,1935],"content":"Nullable Types Overview","linkify":"Nullable Types Overview","nodes":[{"content":"Nullable Types Overview","pos":[0,23]}]},{"content":"Nullable types have the following characteristics:","pos":[1939,1989]},{"content":"Nullable types represent value-type variables that can be assigned the value of <ph id=\"ph1\">`null`</ph>.","pos":[1999,2086],"source":"Nullable types represent value-type variables that can be assigned the value of `null`."},{"content":"You cannot create a nullable type based on a reference type.","pos":[2087,2147]},{"content":"(Reference types already support the <ph id=\"ph1\">`null`</ph> value.)","pos":[2148,2199],"source":" (Reference types already support the `null` value.)"},{"content":"The syntax <ph id=\"ph1\">`T?`</ph> is shorthand for <ph id=\"ph2\">&lt;xref:System.Nullable%601&gt;</ph>, where <ph id=\"ph3\">`T`</ph> is a value type.","pos":[2209,2296],"source":"The syntax `T?` is shorthand for <xref:System.Nullable%601>, where `T` is a value type."},{"content":"The two forms are interchangeable.","pos":[2297,2331]},{"content":"Assign a value to a nullable type just as you would for an ordinary value type, for example <ph id=\"ph1\">`int? x = 10;`</ph> or <ph id=\"ph2\">`double? d = 4.108`</ph>.","pos":[2341,2471],"source":"Assign a value to a nullable type just as you would for an ordinary value type, for example `int? x = 10;` or `double? d = 4.108`."},{"content":"A nullable type can also be assigned the value <ph id=\"ph1\">`null`</ph>: <ph id=\"ph2\">`int? x = null.`</ph>","pos":[2472,2543],"source":" A nullable type can also be assigned the value `null`: `int? x = null.`"},{"pos":[2553,2791],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=fullName&gt;</ph> method to return either the assigned value, or the default value for the underlying type if the value is <ph id=\"ph2\">`null`</ph>, for example <ph id=\"ph3\">`int j = x.GetValueOrDefault();`</ph>","source":"Use the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=fullName> method to return either the assigned value, or the default value for the underlying type if the value is `null`, for example `int j = x.GetValueOrDefault();`"},{"pos":[2801,3014],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> read-only properties to test for null and retrieve the value, as shown in the following example: <ph id=\"ph3\">`if(x.HasValue) j = x.Value;`</ph>","source":"Use the <xref:System.Nullable%601.HasValue%2A> and <xref:System.Nullable%601.Value%2A> read-only properties to test for null and retrieve the value, as shown in the following example: `if(x.HasValue) j = x.Value;`"},{"pos":[3028,3128],"content":"The <ph id=\"ph1\">`HasValue`</ph> property returns <ph id=\"ph2\">`true`</ph> if the variable contains a value, or <ph id=\"ph3\">`false`</ph> if it is <ph id=\"ph4\">`null`</ph>.","source":"The `HasValue` property returns `true` if the variable contains a value, or `false` if it is `null`."},{"content":"The <ph id=\"ph1\">`Value`</ph> property returns a value if one is assigned.","pos":[3142,3198],"source":"The `Value` property returns a value if one is assigned."},{"content":"Otherwise, a <ph id=\"ph1\">&lt;xref:System.InvalidOperationException?displayProperty=fullName&gt;</ph> is thrown.","pos":[3199,3287],"source":" Otherwise, a <xref:System.InvalidOperationException?displayProperty=fullName> is thrown."},{"content":"The default value for <ph id=\"ph1\">`HasValue`</ph> is <ph id=\"ph2\">`false`</ph>.","pos":[3301,3345],"source":"The default value for `HasValue` is `false`."},{"content":"The <ph id=\"ph1\">`Value`</ph> property has no default value.","pos":[3346,3388],"source":" The `Value` property has no default value."},{"pos":[3402,3527],"content":"You can also use the <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> operators with a nullable type, as shown in the following example: <ph id=\"ph3\">`if (x != null) y = x;`</ph>","source":"You can also use the `==` and `!=` operators with a nullable type, as shown in the following example: `if (x != null) y = x;`"},{"pos":[3537,3738],"content":"Use the <ph id=\"ph1\">`??`</ph> operator to assign a default value that will be applied when a nullable type whose current value is <ph id=\"ph2\">`null`</ph> is assigned to a non-nullable type, for example <ph id=\"ph3\">`int? x = null; int y = x ?? -1;`</ph>","source":"Use the `??` operator to assign a default value that will be applied when a nullable type whose current value is `null` is assigned to a non-nullable type, for example `int? x = null; int y = x ?? -1;`"},{"content":"Nested nullable types are not allowed.","pos":[3748,3786]},{"content":"The following line will not compile: <ph id=\"ph1\">`Nullable&lt;Nullable&lt;int&gt;&gt; n;`</ph>","pos":[3787,3852],"source":" The following line will not compile: `Nullable<Nullable<int>> n;`"},{"pos":[3861,3877],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"For more information:","pos":[3881,3902]},{"pos":[3912,4008],"content":"<bpt id=\"p1\">[</bpt>Using Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/using-nullable-types.md)</ept>","source":"[Using Nullable Types](../../../csharp/programming-guide/nullable-types/using-nullable-types.md)"},{"pos":[4018,4116],"content":"<bpt id=\"p1\">[</bpt>Boxing Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/boxing-nullable-types.md)</ept>","source":"[Boxing Nullable Types](../../../csharp/programming-guide/nullable-types/boxing-nullable-types.md)"},{"pos":[4126,4214],"content":"<bpt id=\"p1\">[</bpt>?? Operator<ept id=\"p1\">](../../../csharp/language-reference/operators/null-conditional-operator.md)</ept>","source":"[?? Operator](../../../csharp/language-reference/operators/null-conditional-operator.md)"},{"pos":[4223,4248],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4362,4370],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Nullable&gt;</ph>","pos":[4374,4396],"source":"<xref:System.Nullable> "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4401,4468],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](../../../csharp/csharp.md)</ept><ph id=\"ph1\"> </ph>","pos":[4472,4504],"source":"[C#](../../../csharp/csharp.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4508,4568],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>What exactly does 'lifted' mean?<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=112382)</ept>","pos":[4572,4653],"source":"[What exactly does 'lifted' mean?](http://go.microsoft.com/fwlink/?LinkId=112382)"}]}