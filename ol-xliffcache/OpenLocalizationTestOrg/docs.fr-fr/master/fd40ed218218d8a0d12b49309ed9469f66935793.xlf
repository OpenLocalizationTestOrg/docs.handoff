<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd40ed218218d8a0d12b49309ed9469f66935793</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\advanced\application-settings-for-custom-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24ea7d66a3c3c84c29fb6b23b12304b81f222211</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef416c9a2f535a6f678e72fd3954463b36a24cc4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Application Settings for Custom Controls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Application Settings for Custom Controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You must complete certain tasks to give your custom controls the ability to persist application settings when the controls are hosted in third-party applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Most of the documentation about the Application Settings feature is written under the assumption that you are creating a standalone application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, if you are creating a control that other developers will host in their applications, you need to take a few additional steps for your control to persist its settings properly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Application Settings and Custom Controls</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For your control to properly persist its settings, it must encapsulate the process by creating its own dedicated applications settings wrapper class, derived from <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Additionally, the main control class must implement the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The interface contains several properties as well as two methods, <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you add your control to a form using the <bpt id="p1">**</bpt>Windows Forms Designer<ept id="p1">**</ept> in Visual Studio, Windows Forms will call <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A&gt;</ph> automatically when the control is initialized; you must call <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> yourself in the <ph id="ph3">`Dispose`</ph> method of your control.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In addition, you should implement the following in order for application settings for custom controls to work properly in design-time environments such as Visual Studio:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A custom application settings class with a constructor that takes an <ph id="ph1">&lt;xref:System.ComponentModel.IComponent&gt;</ph> as a single parameter.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use this class to save and load all of your application settings.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you create a new instance of this class, pass your custom control using the constructor.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create this custom settings class after the control has been created and placed on a form, such as in the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For instructions on creating a custom settings class, see <bpt id="p1">[</bpt>How to: Create Application Settings<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-create-application-settings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Settings Keys and Shared Settings</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Some controls can be used multiple times within the same form.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Most of the time, you will want these controls to persist their own individual settings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>With the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> property on <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings&gt;</ph>, you can supply a unique string that acts to disambiguate multiple versions of a control on a form.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The simplest way to implement <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> is to use the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> property of the control for the <ph id="ph3">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When you load or save the control's settings, you pass the value of <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> on to the <ph id="ph2">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Application Settings uses this unique key when it persists the user's settings to XML.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code example shows how a <ph id="ph1">`&lt;userSettings&gt;`</ph> section may look for an instance of a custom control named <ph id="ph2">`CustomControl1`</ph> that saves a setting for its <ph id="ph3">`Text`</ph> property.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Any instances of a control that do not supply a value for <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> will share the same settings.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings&gt;</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Settings Architecture<ept id="p1">](../../../../docs/framework/winforms/advanced/application-settings-architecture.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>