<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="out-parameter-modifier.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">769d1ac0b6266c87e99605c76a25e016f15eb11c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\out-parameter-modifier.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8592cea01fd71a06b41c200b0f382a21668bb3b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">631e96b6e90a578b6a2c12faf6eb562e35f5f1d8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>out parameter modifier - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>out parameter modifier (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`out`</ph> keyword causes arguments to be passed by reference.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It makes the formal parameter an alias for the argument, which must be a variable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In other words, any operation on the parameter is made on the argument.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is like the <bpt id="p1">[</bpt>ref<ept id="p1">](ref.md)</ept> keyword, except that <ph id="ph1">`ref`</ph> requires that the variable be initialized before it is passed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is also like the <bpt id="p1">[</bpt>in<ept id="p1">](in-parameter-modifier.md)</ept> keyword, except that <ph id="ph1">`in`</ph> does not allow the called method to modify the argument value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To use an <ph id="ph1">`out`</ph> parameter, both the method definition and the calling method must explicitly use the <ph id="ph2">`out`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`out`</ph> keyword can also be used with a generic type parameter to specify that the type parameter is covariant.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information on the use of the <ph id="ph1">`out`</ph> keyword in this context, see <bpt id="p1">[</bpt>out (Generic Modifier)<ept id="p1">](out-generic-modifier.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Variables passed as <ph id="ph1">`out`</ph> arguments do not have to be initialized before being passed in a method call.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, the called method is required to assign a value before the method returns.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`in`</ph>, <ph id="ph2">`ref`</ph>, and <ph id="ph3">`out`</ph> keywords are not considered part of the method signature for the purpose of overload resolution.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, methods cannot be overloaded if the only difference is that one method takes a <ph id="ph1">`ref`</ph> or <ph id="ph2">`in`</ph> argument and the other takes an <ph id="ph3">`out`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code, for example, will not compile:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Overloading is legal, however, if one method takes a <ph id="ph1">`ref`</ph>, <ph id="ph2">`in`</ph>, or <ph id="ph3">`out`</ph> argument and the other has none of those modifiers, like this:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The compiler chooses the best overload by matching the parameter modifiers at the call site to the parameter modifiers used in the method call.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Properties are not variables and therefore cannot be passed as <ph id="ph1">`out`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can't use the <ph id="ph1">`in`</ph>, <ph id="ph2">`ref`</ph>, and <ph id="ph3">`out`</ph> keywords for the following kinds of methods:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Async methods, which you define by using the <bpt id="p1">[</bpt>async<ept id="p1">](../../../csharp/language-reference/keywords/async.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Iterator methods, which include a <bpt id="p1">[</bpt>yield return<ept id="p1">](../../../csharp/language-reference/keywords/yield.md)</ept> or <ph id="ph1">`yield break`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Declaring <ph id="ph1">`out`</ph> parameters</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Declaring a method with <ph id="ph1">`out`</ph> arguments is a classic workaround to return multiple values.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.0, consider <bpt id="p1">[</bpt>tuples<ept id="p1">](../../tuples.md)</ept> for similar scenarios.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`out`</ph> to return three variables with a single method call.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the third argument is assigned to null.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This enables methods to return values optionally.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Calling a method with an <ph id="ph1">`out`</ph> argument</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In C# 6 and earlier, you must declare a variable in a separate statement before you pass it as an <ph id="ph1">`out`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example declares a variable named <ph id="ph1">`number`</ph> before it is passed to the <bpt id="p1">[</bpt>Int32.TryParse<ept id="p1">](xref:System.Int32.TryParse(System.String,System.Int32@))</ept> method, which attempts to convert a string to a number.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, you can declare the <ph id="ph1">`out`</ph> variable in the argument list of the method call, rather than in a separate variable declaration.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This produces more compact, readable code, and also prevents you from inadvertently assigning a value to the variable before the method call.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example is like the previous example, except that it defines the <ph id="ph1">`number`</ph> variable in the call to the <bpt id="p1">[</bpt>Int32.TryParse<ept id="p1">](xref:System.Int32.TryParse(System.String,System.Int32@))</ept> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the previous example, the <ph id="ph1">`number`</ph> variable is strongly typed as an <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can also declare an implicitly typed local variable, as the following example does.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Method Parameters<ept id="p1">](../../../csharp/language-reference/keywords/method-parameters.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>