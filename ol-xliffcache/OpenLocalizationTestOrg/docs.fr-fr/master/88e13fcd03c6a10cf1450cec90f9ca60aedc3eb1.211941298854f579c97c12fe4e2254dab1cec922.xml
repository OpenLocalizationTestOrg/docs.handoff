{"content":"---\ntitle: \"Protected (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Protected\"\nhelpviewer_keywords: \n  - \"Protected Friend keyword combination\"\n  - \"Protected keyword [Visual Basic], and Friend\"\n  - \"Protected keyword [Visual Basic], syntax\"\n  - \"Protected access modifier\"\n  - \"Protected keyword [Visual Basic]\"\nms.assetid: 74ad3d56-309f-49d2-b60c-1d0157d010e8\n---\n# Protected (Visual Basic)\nA member access modifier that specifies that one or more declared programming elements are accessible only from within their own class or from a derived class.  \n  \n## Remarks  \n Sometimes a programming element declared in a class contains sensitive data or restricted code, and you want to limit access to the element. However, if the class is inheritable and you expect a hierarchy of derived classes, it might be necessary for these derived classes to access the data or code. In such a case, you want the element to be accessible both from the base class and from all derived classes. To limit access to an element in this manner, you can declare it with `Protected`.  \n\n> [!NOTE]\n> The `Protected` access modifier can be combined with two other modifiers:\n> - The [Protected Friend](protected-friend.md) modifier makes a class member accessible from within that class, from derived classes, and from the same assembly in which the class is defined. \n> - The [Private Protected](private-protected.md) modifier makes a class member accessible by derived types, but only within its containing assembly.\n  \n## Rules  \n  \n-   **Declaration Context.** You can use `Protected` only at the class level. This means the declaration context for a `Protected` element must be a class, and cannot be a source file, namespace, interface, module, structure, or procedure.  \n\n## Behavior  \n  \n-   **Access Level.** All code in a class can access its elements. Code in any class that derives from a base class can access all the `Protected` elements of the base class. This is true for all generations of derivation. This means that a class can access `Protected` elements of the base class of the base class, and so on.  \n  \n     Protected access is not a superset or subset of friend access.  \n  \n-   **Access Modifiers.** The keywords that specify access level are called *access modifiers*. For a comparison of the access modifiers, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n The `Protected` modifier can be used in these contexts:  \n  \n [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)  \n  \n [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)  \n  \n [Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)  \n  \n [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)  \n  \n [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)  \n  \n [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)  \n  \n [Event Statement](../../../visual-basic/language-reference/statements/event-statement.md)  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See also\n\n- [Public](../../../visual-basic/language-reference/modifiers/public.md)\n- [Friend](../../../visual-basic/language-reference/modifiers/friend.md)\n- [Private](../../../visual-basic/language-reference/modifiers/private.md)\n- [Private Protected](private-protected.md)\n- [Protected Friend](protected-friend.md)\n- [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)\n- [Procedures](../../../visual-basic/programming-guide/language-features/procedures/index.md)\n- [Structures](../../../visual-basic/programming-guide/language-features/data-types/structures.md)\n- [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)\n","nodes":[{"pos":[4,373],"embed":true,"restype":"x-metadata","content":"title: \"Protected (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Protected\"\nhelpviewer_keywords: \n  - \"Protected Friend keyword combination\"\n  - \"Protected keyword [Visual Basic], and Friend\"\n  - \"Protected keyword [Visual Basic], syntax\"\n  - \"Protected access modifier\"\n  - \"Protected keyword [Visual Basic]\"\nms.assetid: 74ad3d56-309f-49d2-b60c-1d0157d010e8","nodes":[{"content":"Protected (Visual Basic)","nodes":[{"pos":[0,24],"content":"Protected (Visual Basic)","nodes":[{"content":"Protected (Visual Basic)","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[380,404],"content":"Protected (Visual Basic)","linkify":"Protected (Visual Basic)","nodes":[{"content":"Protected (Visual Basic)","pos":[0,24]}]},{"content":"A member access modifier that specifies that one or more declared programming elements are accessible only from within their own class or from a derived class.","pos":[405,564]},{"pos":[573,580],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Sometimes a programming element declared in a class contains sensitive data or restricted code, and you want to limit access to the element.","pos":[584,724]},{"content":"However, if the class is inheritable and you expect a hierarchy of derived classes, it might be necessary for these derived classes to access the data or code.","pos":[725,884]},{"content":"In such a case, you want the element to be accessible both from the base class and from all derived classes.","pos":[885,993]},{"content":"To limit access to an element in this manner, you can declare it with <ph id=\"ph1\">`Protected`</ph>.","pos":[994,1076],"source":" To limit access to an element in this manner, you can declare it with `Protected`."},{"pos":[1082,1165],"content":"[!NOTE]\nThe `Protected` access modifier can be combined with two other modifiers:","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`Protected`</ph> access modifier can be combined with two other modifiers:","pos":[8,81],"source":"The `Protected` access modifier can be combined with two other modifiers:"}]},{"pos":[1170,1358],"content":"The <bpt id=\"p1\">[</bpt>Protected Friend<ept id=\"p1\">](protected-friend.md)</ept> modifier makes a class member accessible from within that class, from derived classes, and from the same assembly in which the class is defined.","source":"The [Protected Friend](protected-friend.md) modifier makes a class member accessible from within that class, from derived classes, and from the same assembly in which the class is defined."},{"pos":[1364,1509],"content":"The <bpt id=\"p1\">[</bpt>Private Protected<ept id=\"p1\">](private-protected.md)</ept> modifier makes a class member accessible by derived types, but only within its containing assembly.","source":"The [Private Protected](private-protected.md) modifier makes a class member accessible by derived types, but only within its containing assembly."},{"pos":[1516,1521],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Declaration Context.<ept id=\"p1\">**</ept>","pos":[1531,1555],"source":"**Declaration Context.**"},{"content":"You can use <ph id=\"ph1\">`Protected`</ph> only at the class level.","pos":[1556,1604],"source":" You can use `Protected` only at the class level."},{"content":"This means the declaration context for a <ph id=\"ph1\">`Protected`</ph> element must be a class, and cannot be a source file, namespace, interface, module, structure, or procedure.","pos":[1605,1766],"source":" This means the declaration context for a `Protected` element must be a class, and cannot be a source file, namespace, interface, module, structure, or procedure."},{"pos":[1773,1781],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Access Level.<ept id=\"p1\">**</ept>","pos":[1791,1808],"source":"**Access Level.**"},{"content":"All code in a class can access its elements.","pos":[1809,1853]},{"content":"Code in any class that derives from a base class can access all the <ph id=\"ph1\">`Protected`</ph> elements of the base class.","pos":[1854,1961],"source":" Code in any class that derives from a base class can access all the `Protected` elements of the base class."},{"content":"This is true for all generations of derivation.","pos":[1962,2009]},{"content":"This means that a class can access <ph id=\"ph1\">`Protected`</ph> elements of the base class of the base class, and so on.","pos":[2010,2113],"source":" This means that a class can access `Protected` elements of the base class of the base class, and so on."},{"content":"Protected access is not a superset or subset of friend access.","pos":[2124,2186]},{"content":"<bpt id=\"p1\">**</bpt>Access Modifiers.<ept id=\"p1\">**</ept>","pos":[2196,2217],"source":"**Access Modifiers.**"},{"content":"The keywords that specify access level are called <bpt id=\"p1\">*</bpt>access modifiers<ept id=\"p1\">*</ept>.","pos":[2218,2287],"source":" The keywords that specify access level are called *access modifiers*."},{"content":"For a comparison of the access modifiers, see <bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[2288,2460],"source":" For a comparison of the access modifiers, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[2467,2522],"content":"The <ph id=\"ph1\">`Protected`</ph> modifier can be used in these contexts:","source":"The `Protected` modifier can be used in these contexts:"},{"pos":[2529,2618],"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>","source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)"},{"pos":[2625,2714],"content":"<bpt id=\"p1\">[</bpt>Const Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/const-statement.md)</ept>","source":"[Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)"},{"pos":[2721,2814],"content":"<bpt id=\"p1\">[</bpt>Declare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept>","source":"[Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)"},{"pos":[2821,2916],"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>","source":"[Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)"},{"pos":[2923,3008],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[3015,3102],"content":"<bpt id=\"p1\">[</bpt>Enum Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/enum-statement.md)</ept>","source":"[Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)"},{"pos":[3109,3198],"content":"<bpt id=\"p1\">[</bpt>Event Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/event-statement.md)</ept>","source":"[Event Statement](../../../visual-basic/language-reference/statements/event-statement.md)"},{"pos":[3205,3300],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[3307,3404],"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept>","source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)"},{"pos":[3411,3506],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[3513,3610],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[3617,3702],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[3711,3719],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3723,3793],"content":"<bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>","source":"[Public](../../../visual-basic/language-reference/modifiers/public.md)"},{"pos":[3796,3866],"content":"<bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>","source":"[Friend](../../../visual-basic/language-reference/modifiers/friend.md)"},{"pos":[3869,3941],"content":"<bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/private.md)</ept>","source":"[Private](../../../visual-basic/language-reference/modifiers/private.md)"},{"pos":[3944,3985],"content":"<bpt id=\"p1\">[</bpt>Private Protected<ept id=\"p1\">](private-protected.md)</ept>","source":"[Private Protected](private-protected.md)"},{"pos":[3988,4027],"content":"<bpt id=\"p1\">[</bpt>Protected Friend<ept id=\"p1\">](protected-friend.md)</ept>","source":"[Protected Friend](protected-friend.md)"},{"pos":[4030,4155],"content":"<bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>","source":"[Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)"},{"pos":[4158,4249],"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/index.md)</ept>","source":"[Procedures](../../../visual-basic/programming-guide/language-features/procedures/index.md)"},{"pos":[4252,4348],"content":"<bpt id=\"p1\">[</bpt>Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept>","source":"[Structures](../../../visual-basic/programming-guide/language-features/data-types/structures.md)"},{"pos":[4351,4460],"content":"<bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>","source":"[Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)"}]}