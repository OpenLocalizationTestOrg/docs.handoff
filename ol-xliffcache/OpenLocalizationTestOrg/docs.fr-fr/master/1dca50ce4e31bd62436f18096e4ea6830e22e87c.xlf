<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1dca50ce4e31bd62436f18096e4ea6830e22e87c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\attributes\common-attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9798bfd295c25ec316142a6ed74a6fb67c5df7b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b806ccd0599acbbc9519f93f6c6c651114dbfaee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Common Attributes (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Common Attributes (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes the attributes that are most commonly used in C# programs.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Global Attributes<ept id="p1">](#Global)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Obsolete Attribute<ept id="p1">](#Obsolete)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conditional Attribute<ept id="p1">](#Conditional)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Caller Info Attributes<ept id="p1">](#CallerInfo)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Global"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Global Attributes</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Most attributes are applied to specific language elements such as classes or methods; however, some attributes are globalâ€”they apply to an entire assembly or module.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph> attribute can be used to embed version information into an assembly, like this:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Global attributes appear in the source code after any top-level <ph id="ph1">`using`</ph> directives and before any type, module, or namespace declarations.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Global attributes can appear in multiple source files, but the files must be compiled in a single compilation pass.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In C# projects, global attributes are put in the AssemblyInfo.cs file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Assembly attributes are values that provide information about an assembly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>They fall into the following categories:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Assembly identity attributes</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Informational attributes</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Assembly manifest attributes</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Assembly Identity Attributes</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Three attributes (with a strong name, if applicable) determine the identity of an assembly: name, version, and culture.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These attributes form the full name of the assembly and are required when you reference it in code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can set an assembly's version and culture using attributes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, the name value is set by the compiler, the Visual Studio IDE in the <bpt id="p1">[</bpt>Assembly Information Dialog Box<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/assembly-information-dialog-box)</ept>, or the Assembly Linker (Al.exe) when the assembly is created, based on the file that contains the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyFlagsAttribute&gt;</ph> attribute specifies whether multiple copies of the assembly can coexist.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following table shows the identity attributes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Fully describes the identity of an assembly.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies the version of an assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specifies which culture the assembly supports.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Specifies whether an assembly supports side-by-side execution on the same computer, in the same process, or in the same application domain.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Informational Attributes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can use informational attributes to provide additional company or product information for an assembly.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following table shows the informational attributes defined in the <ph id="ph1">&lt;xref:System.Reflection?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Defines a custom attribute that specifies a product name for an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Defines a custom attribute that specifies a trademark for an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Defines a custom attribute that specifies an informational version for an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Defines a custom attribute that specifies a company name for an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Defines a custom attribute that specifies a copyright for an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Instructs the compiler to use a specific version number for the Win32 file version resource.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Indicates whether the assembly is compliant with the Common Language Specification (CLS).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Assembly Manifest Attributes</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can use assembly manifest attributes to provide information in the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This includes title, description, default alias, and configuration.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following table shows the assembly manifest attributes defined in the <ph id="ph1">&lt;xref:System.Reflection?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Defines a custom attribute that specifies an assembly title for an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Defines a custom attribute that specifies an assembly description for an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Defines a custom attribute that specifies an assembly configuration (such as retail or debug) for an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Defines a friendly default alias for an assembly manifest</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Obsolete"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Obsolete Attribute</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Obsolete`</ph> attribute marks a program entity as one that is no longer recommended for use.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each use of an entity marked obsolete will subsequently generate a warning or an error, depending on how the attribute is configured.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this example the <ph id="ph1">`Obsolete`</ph> attribute is applied to class <ph id="ph2">`A`</ph> and to method <ph id="ph3">`B.OldMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because the second argument of the attribute constructor applied to <ph id="ph1">`B.OldMethod`</ph> is set to <ph id="ph2">`true`</ph>, this method will cause a compiler error, whereas using class <ph id="ph3">`A`</ph> will just produce a warning.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`B.NewMethod`</ph>, however, produces no warning or error.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The string provided as the first argument to attribute constructor will be displayed as part of the warning or error.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, when you use it with the previous definitions, the following code generates two warnings and one error:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Two warnings for class <ph id="ph1">`A`</ph> are generated: one for the declaration of the class reference, and one for the class constructor.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Obsolete`</ph> attribute can be used without arguments, but including an explanation of why the item is obsolete and what to use instead is recommended.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Obsolete`</ph> attribute is a single-use attribute and can be applied to any entity that allows attributes.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Obsolete`</ph> is an alias for <ph id="ph2">&lt;xref:System.ObsoleteAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Conditional"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Conditional Attribute</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Conditional`</ph> attribute makes the execution of a method dependent on a preprocessing identifier.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Conditional`</ph> attribute is an alias for <ph id="ph2">&lt;xref:System.Diagnostics.ConditionalAttribute&gt;</ph>, and can be applied to a method or an attribute class.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`Conditional`</ph> is applied to a method to enable or disable the display of program-specific diagnostic information:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`TRACE_ON`</ph> identifier is not defined, no trace output will be displayed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Conditional`</ph> attribute is often used with the <ph id="ph2">`DEBUG`</ph> identifier to enable trace and logging features for debug builds but not in release builds, like this:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When a method marked as conditional is called, the presence or absence of the specified preprocessing symbol determines whether the call is included or omitted.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the symbol is defined, the call is included; otherwise, the call is omitted.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`Conditional`</ph> is a cleaner, more elegant, and less error-prone alternative to enclosing methods inside <ph id="ph2">`#ifâ€¦#endif`</ph> blocks, like this:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A conditional method must be a method in a class or struct declaration and must not have a return value.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Using Multiple Identifiers</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a method has multiple <ph id="ph1">`Conditional`</ph> attributes, a call to the method is included if at least one of the conditional symbols is defined (in other words, the symbols are logically linked together by using the OR operator).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this example, the presence of either <ph id="ph1">`A`</ph> or <ph id="ph2">`B`</ph> will result in a method call:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To achieve the effect of logically linking symbols by using the AND operator, you can define serial conditional methods.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, the second method below will execute only if both <ph id="ph1">`A`</ph> and <ph id="ph2">`B`</ph> are defined:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Using Conditional with Attribute Classes</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Conditional`</ph> attribute can also be applied to an attribute class definition.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this example, the custom attribute <ph id="ph1">`Documentation`</ph> will only add information to the metadata if DEBUG is defined.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="CallerInfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Caller Info Attributes</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>By using Caller Info attributes, you can obtain information about the caller to a method.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can obtain the file path of the source code, the line number in the source code, and the member name of the caller.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To obtain member caller information, you use attributes that are applied to optional parameters.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Each optional parameter specifies a default value.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following table lists the Caller Info attributes that are defined in the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices?displayProperty=fullName&gt;</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Full path of the source file that contains the caller.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This is the path at compile time.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Line number in the source file from which the method is called.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Method name or property name of the caller.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Caller Information (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/caller-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information about the Caller Info attributes, see <bpt id="p1">[</bpt>Caller Information (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/caller-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection&gt;</ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Attribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Programming Guide<ept id="p1">](../../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Attributes<ept id="p1">](https://msdn.microsoft.com/library/5x6cd29c)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Reflection (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/reflection.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Accessing Attributes by Using Reflection (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>