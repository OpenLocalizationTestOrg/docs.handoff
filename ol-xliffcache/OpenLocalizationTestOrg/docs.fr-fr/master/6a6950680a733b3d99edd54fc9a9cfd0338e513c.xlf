<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a6950680a733b3d99edd54fc9a9cfd0338e513c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\anonymous-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8be0096240fe08bd4b4ceae92fed9ae9af37cb89</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b3431bc7c6876ea31dcdc192cbca27d8107d250</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Anonymous Types (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Anonymous Types (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Anonymous types provide a convenient way to encapsulate a set of read-only properties into a single object without having to explicitly define a type first.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The type name is generated by the compiler and is not available at the source code level.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The type of each property is inferred by the compiler.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You create anonymous types by using the <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new.md)</ept> operator together with an object initializer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about object initializers, see <bpt id="p1">[</bpt>Object and Collection Initializers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows an anonymous type that is initialized with two properties named <ph id="ph1">`Amount`</ph> and <ph id="ph2">`Message`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Anonymous types typically are used in the <bpt id="p1">[</bpt>select<ept id="p1">](../../../csharp/language-reference/keywords/select-clause.md)</ept> clause of a query expression to return a subset of the properties from each object in the source sequence.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about queries, see <bpt id="p1">[</bpt>LINQ Query Expressions<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Anonymous types contain one or more public read-only properties.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>No other kinds of class members, such as methods or events, are valid.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The expression that is used to initialize a property cannot be <ph id="ph1">`null`</ph>, an anonymous function, or a pointer type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The most common scenario is to initialize an anonymous type with properties from another type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the following example, assume that a class exists that is named <ph id="ph1">`Product`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`Product`</ph> includes <ph id="ph2">`Color`</ph> and <ph id="ph3">`Price`</ph> properties, together with other properties that you are not interested in.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Variable <ph id="ph1">`products`</ph> is a collection of <ph id="ph2">`Product`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The anonymous type declaration starts with the <ph id="ph1">`new`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The declaration initializes a new type that uses only two properties from <ph id="ph1">`Product`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This causes a smaller amount of data to be returned in the query.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you do not specify member names in the anonymous type, the compiler gives the anonymous type members the same name as the property being used to initialize them.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You must provide a name for a property that is being initialized with an expression, as shown in the previous example.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the following example, the names of the properties of the anonymous type are <ph id="ph1">`Color`</ph> and <ph id="ph2">`Price`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csRef30Features#81<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/anonymous-types_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Typically, when you use an anonymous type to initialize a variable, you declare the variable as an implicitly typed local variable by using <bpt id="p1">[</bpt>var<ept id="p1">](../../../csharp/language-reference/keywords/var.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type name cannot be specified in the variable declaration because only the compiler has access to the underlying name of the anonymous type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`var`</ph>, see <bpt id="p1">[</bpt>Implicitly Typed Local Variables<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can create an array of anonymously typed elements by combining an implicitly typed local variable and an implicitly typed array, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Anonymous types are <bpt id="p1">[</bpt>class<ept id="p1">](../../../csharp/language-reference/keywords/class.md)</ept> types that derive directly from <bpt id="p2">[</bpt>object<ept id="p2">](../../../csharp/language-reference/keywords/object.md)</ept>, and that cannot be cast to any type except <bpt id="p3">[</bpt>object<ept id="p3">](../../../csharp/language-reference/keywords/object.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The compiler provides a name for each anonymous type, although your application cannot access it.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>From the perspective of the common language runtime, an anonymous type is no different from any other reference type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If two or more anonymous object initializers in an assembly specify a sequence of properties that are in the same order and that have the same names and types, the compiler treats the objects as instances of the same type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>They share the same compiler-generated type information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You cannot declare a field, a property, an event, or the return type of a method as having an anonymous type.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Similarly, you cannot declare a formal parameter of a method, property, constructor, or indexer as having an anonymous type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To pass an anonymous type, or a collection that contains anonymous types, as an argument to a method, you can declare the parameter as type object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, doing this defeats the purpose of strong typing.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you must store query results or pass them outside the method boundary, consider using an ordinary named struct or class instead of an anonymous type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> methods on anonymous types are defined in terms of the <ph id="ph3">`Equals`</ph> and <ph id="ph4">`GetHashCode`</ph> methods of the properties, two instances of the same anonymous type are equal only if all their properties are equal.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Object and Collection Initializers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Getting Started with LINQ in C#<ept id="p1">](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ Query Expressions<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>