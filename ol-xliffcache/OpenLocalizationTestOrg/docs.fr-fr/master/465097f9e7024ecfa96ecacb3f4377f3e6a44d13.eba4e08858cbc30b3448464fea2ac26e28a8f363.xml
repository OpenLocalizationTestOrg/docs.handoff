{"content":"---\ntitle: \"Anonymous Functions (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"lambda expressions [C#], as anonymus functions\"\n  - \"anonymous functions [C#]\"\n  - \"anonymous methods [C#]\"\nms.assetid: 6ce3f04d-0c71-4728-9127-634c7e9a8365\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Anonymous Functions (C# Programming Guide)\nAn anonymous function is an \"inline\" statement or expression that can be used wherever a delegate type is expected. You can use it to initialize a named delegate or pass it instead of a named delegate type as a method parameter.  \n  \n There are two kinds of anonymous functions, which are discussed individually in the following topics:  \n  \n-   [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).  \n  \n-   [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)  \n  \n    > [!NOTE]\n    >  Lambda expressions can be bound to expression trees and also to delegates.  \n  \n## The Evolution of Delegates in C#  \n In C# 1.0, you created an instance of a delegate by explicitly initializing it with a method that was defined elsewhere in the code. C# 2.0 introduced the concept of anonymous methods as a way to write unnamed inline statement blocks that can be executed in a delegate invocation. C# 3.0 introduced lambda expressions, which are similar in concept to anonymous methods but more expressive and concise. These two features are known collectively as *anonymous functions*. In general, applications that target version 3.5 and later of the [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] should use lambda expressions.  \n  \n The following example demonstrates the evolution of delegate creation from C# 1.0 to C# 3.0:  \n  \n [!code-cs[csProgGuideLINQ#65](../../../csharp/programming-guide/arrays/codesnippet/CSharp/anonymous-functions_1.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [Statements, Expressions, and Operators](../../../csharp/programming-guide/statements-expressions-operators/index.md)   \n [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)   \n [Delegates](../../../csharp/programming-guide/delegates/index.md)   \n [Expression Trees](http://msdn.microsoft.com/library/fb1d3ed8-d5b0-4211-a71f-dd271529294b)","nodes":[{"pos":[12,71],"content":"Anonymous Functions (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Anonymous Functions (C# Programming Guide) | Microsoft Docs","pos":[0,59]}]},{"pos":[634,676],"content":"Anonymous Functions (C# Programming Guide)","linkify":"Anonymous Functions (C# Programming Guide)","nodes":[{"content":"Anonymous Functions (C# Programming Guide)","pos":[0,42]}]},{"content":"An anonymous function is an \"inline\" statement or expression that can be used wherever a delegate type is expected.","pos":[677,792]},{"content":"You can use it to initialize a named delegate or pass it instead of a named delegate type as a method parameter.","pos":[793,905]},{"content":"There are two kinds of anonymous functions, which are discussed individually in the following topics:","pos":[912,1013]},{"pos":[1023,1134],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.","source":"[Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)."},{"pos":[1144,1252],"content":"<bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>","source":"[Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)"},{"pos":[1264,1353],"content":"[!NOTE]\nLambda expressions can be bound to expression trees and also to delegates.","leadings":["","    >  "],"nodes":[{"content":"Lambda expressions can be bound to expression trees and also to delegates.","pos":[8,82]}]},{"pos":[1362,1394],"content":"The Evolution of Delegates in C#","linkify":"The Evolution of Delegates in C#","nodes":[{"content":"The Evolution of Delegates in C#","pos":[0,32]}]},{"content":"In C# 1.0, you created an instance of a delegate by explicitly initializing it with a method that was defined elsewhere in the code.","pos":[1398,1530]},{"content":"C# 2.0 introduced the concept of anonymous methods as a way to write unnamed inline statement blocks that can be executed in a delegate invocation.","pos":[1531,1678]},{"content":"C# 3.0 introduced lambda expressions, which are similar in concept to anonymous methods but more expressive and concise.","pos":[1679,1799]},{"content":"These two features are known collectively as <bpt id=\"p1\">*</bpt>anonymous functions<ept id=\"p1\">*</ept>.","pos":[1800,1867],"source":" These two features are known collectively as *anonymous functions*."},{"content":"In general, applications that target version 3.5 and later of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> should use lambda expressions.","pos":[1868,2048],"source":" In general, applications that target version 3.5 and later of the [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] should use lambda expressions."},{"content":"The following example demonstrates the evolution of delegate creation from C# 1.0 to C# 3.0:","pos":[2055,2147]},{"pos":[2154,2270],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#65<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/anonymous-functions_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#65](../../../csharp/programming-guide/arrays/codesnippet/CSharp/anonymous-functions_1.cs)]"},{"pos":[2279,2304],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2418,2426],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Statements, Expressions, and Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2430,2548],"source":"[Statements, Expressions, and Operators](../../../csharp/programming-guide/statements-expressions-operators/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Lambda Expressions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[2551,2663],"source":" [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2666,2733],"source":" [Delegates](../../../csharp/programming-guide/delegates/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Expression Trees<ept id=\"p1\">](http://msdn.microsoft.com/library/fb1d3ed8-d5b0-4211-a71f-dd271529294b)</ept>","pos":[2736,2827],"source":" [Expression Trees](http://msdn.microsoft.com/library/fb1d3ed8-d5b0-4211-a71f-dd271529294b)"}]}