<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">576a078e9be636b6cb8cf84da68295966b7f0d97</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\when.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b533f4fc49614ba8cb25ccda978b094c1e22834</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">657caaae174849be51f72cbb0b308ef530b185d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>when (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>when (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`when`</ph> contextual keyword to specify a filter condition in two contexts:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`catch`</ph> statement of a <bpt id="p1">[</bpt>try/catch<ept id="p1">](try-catch.md)</ept> or <bpt id="p2">[</bpt>try/catch/finally<ept id="p2">](try-catch-finally.md)</ept> block.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`case`</ph> label of a <bpt id="p1">[</bpt>switch<ept id="p1">](switch.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`when`</ph> in a <ph id="ph2">`catch`</ph> statement</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Starting with C# 6, <ph id="ph1">`When`</ph> can be used in a <ph id="ph2">`catch`</ph> statement to specify a condition that must be true for the handler for a specific exception to execute.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an expression that evaluates to a Boolean value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If it returns <ph id="ph1">`true`</ph>, the exception handler executes; if <ph id="ph2">`false`</ph>, it does not.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`when`</ph> keyword to conditionally execute handlers for an <ph id="ph2">@System.Net.HttpRequestException</ph> depending on the text of the exception message.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>when-with-catch<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/when/catch.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`when`</ph> in a <ph id="ph2">`switch`</ph> statement</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Starting with 7, <ph id="ph1">`case`</ph> labels no longer need be mutually exclusive, and the order in which <ph id="ph2">`case`</ph> labels appear in a <ph id="ph3">`switch`</ph> statement can determine which switch block executes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`when`</ph> keyword can be used to specify a filter condition that causes its associated case label to be true only if the filter condition is also true.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is a constant pattern or type pattern that is compared to the match expression, and <bpt id="p2">*</bpt>when-condition<ept id="p2">*</ept> is any Boolean expression.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`when`</ph> keyword to test for <ph id="ph2">`Shape`</ph> objects that have an area of zero, as well as to test for a variety of <ph id="ph3">`Shape`</ph> objects that have an area greater than zero.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>when-with-case#1<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/when/when.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>switch statement<ept id="p1">](switch.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">  [</bpt>try/catch statement<ept id="p1">](try-catch.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">  [</bpt>try/catch/finally statement<ept id="p1">](try-catch-finally.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>