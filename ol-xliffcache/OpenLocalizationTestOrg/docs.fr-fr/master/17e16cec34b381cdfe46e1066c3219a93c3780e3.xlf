<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="service-application-programming-architecture.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17e16cec34b381cdfe46e1066c3219a93c3780e3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-services\service-application-programming-architecture.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1fba892a9c2e7fdacebfcfc2c585c701ddeebd2b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa99d64ded9eb8f749e800b1c0acf6f17328b9fb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Service Application Programming Architecture</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Service Application Programming Architecture</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Service applications are based on a class that inherits from the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase?displayProperty=nameWithType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You override methods from this class and define functionality for them to determine how your service behaves.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The main classes involved in service creation are:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase?displayProperty=nameWithType&gt;</ph> — You override methods from the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class when creating a service and define the code to determine how your service functions in this inherited class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller?displayProperty=nameWithType&gt;</ph> —You use these classes to install and uninstall your service.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In addition, a class named <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> can be used to manipulate the service itself.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This class is not involved in the creation of a service, but can be used to start and stop the service, pass commands to it, and return a series of enumerations.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Defining Your Service's Behavior</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In your service class, you override base class functions that determine what happens when the state of your service is changed in the Services Control Manager.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class exposes the following methods, which you can override to add custom behavior.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Override to</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Indicate what actions should be taken when your service starts running.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You must write code in this procedure for your service to perform useful work.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Indicate what should happen when your service is paused.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Indicate what should happen when your service stops running.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Indicate what should happen when your service resumes normal functioning after being paused.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Indicate what should happen just prior to your system shutting down, if your service is running at that time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Indicate what should happen when your service receives a custom command.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information on custom commands, see MSDN online.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Indicate how the service should respond when a power management event is received, such as a low battery or suspended operation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These methods represent states that the service moves through in its lifetime; the service transitions from one state to the next.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, you will never get the service to respond to an <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> command before <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>There are several other properties and methods that are of interest.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is the main entry point for the service.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you create a service using the Windows Service template, code is inserted in your application's <ph id="ph1">`Main`</ph> method to run the service.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This code looks like this:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These examples use an array of type <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>, into which each service your application contains can be added, and then all of the services can be run together.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you are only creating a single service, however, you might choose not to use the array and simply declare a new object inheriting from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and then run it.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Write Services Programmatically<ept id="p1">](../../../docs/framework/windows-services/how-to-write-services-programmatically.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A series of properties on the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These determine what methods can be called on your service.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, when the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method on your service can be called.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods can be called.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you set one of these properties to <ph id="ph1">`true`</ph>, you should then override and define processing for the associated methods.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Your service must override at least <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to be useful.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can also use a component called the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> to communicate with and control the behavior of an existing service.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Windows Service Applications<ept id="p1">](../../../docs/framework/windows-services/introduction-to-windows-service-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create Windows Services<ept id="p1">](../../../docs/framework/windows-services/how-to-create-windows-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>