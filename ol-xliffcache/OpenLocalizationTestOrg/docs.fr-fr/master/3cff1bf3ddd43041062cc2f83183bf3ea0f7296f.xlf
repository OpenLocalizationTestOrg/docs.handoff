<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cff1bf3ddd43041062cc2f83183bf3ea0f7296f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\network-programming\using-streams-on-the-network.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc1b3d763a451751fede1da35229eb2903b4ddbf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9eb177bc0fb542542a6a0418c50af3a3141a601</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Streams on the Network | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Streams on the Network</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Network resources are represented in the .NET Framework as streams.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By treating streams generically, the .NET Framework offers the following capabilities:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A common way to send and receive Web data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Whatever the actual contents of the file — HTML, XML, or anything else — your application will use <ph id="ph1">&lt;xref:System.IO.Stream.Write%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A?displayProperty=fullName&gt;</ph> to send and receive data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Compatibility with streams across the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Streams are used throughout the .NET Framework, which has a rich infrastructure for handling them.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, you can modify an application that reads XML data from a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> to read data from a <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> instead by changing only the few lines of code that initialize the stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The major differences between the <bpt id="p1">**</bpt>NetworkStream<ept id="p1">**</ept> class and other streams are that <bpt id="p2">**</bpt>NetworkStream<ept id="p2">**</ept> is not seekable, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> property always returns <bpt id="p3">**</bpt>false<ept id="p3">**</ept>, and the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> methods throw a <ph id="ph4">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Processing of data as it arrives.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Streams provide access to data as it arrives from the network, rather than forcing your application to wait for an entire data set to be downloaded.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets&gt;</ph> namespace contains a <bpt id="p1">**</bpt>NetworkStream<ept id="p1">**</ept> class that implements the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class specifically for use with network resources.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Classes in the <ph id="ph1">&lt;xref:System.Net.Sockets&gt;</ph> namespace use the <bpt id="p1">**</bpt>NetworkStream<ept id="p1">**</ept> class to represent streams.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To send data to the network using the returned stream, call <ph id="ph1">&lt;xref:System.Net.WebRequest.GetRequestStream%2A&gt;</ph> on your <ph id="ph2">&lt;xref:System.Net.WebRequest&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> will send request headers to the server; then you can send data to the network resource by calling the <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> method on the returned stream.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Some protocols, such as HTTP, may require you to set protocol-specific properties before sending data.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following code example shows how to set HTTP-specific properties for sending data.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It assumes that the variable <ph id="ph1">`sendData`</ph> contains the data to send and that the variable <ph id="ph2">`sendLength`</ph> is the number of bytes of data to send.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To receive data from the network, call <ph id="ph1">&lt;xref:System.Net.WebResponse.GetResponseStream%2A&gt;</ph> on your <ph id="ph2">&lt;xref:System.Net.WebResponse&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can then read data from the network resource by calling the <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method on the returned stream.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When using streams from network resources, keep in mind the following points:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CanSeek<ept id="p1">**</ept> property always returns <bpt id="p2">**</bpt>false<ept id="p2">**</ept> since the <bpt id="p3">**</bpt>NetworkStream<ept id="p3">**</ept> class cannot change position in the stream.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Seek<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Position<ept id="p2">**</ept> methods throw a <bpt id="p3">**</bpt>NotSupportedException<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you use <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WebResponse<ept id="p2">**</ept>, stream instances created by calling <bpt id="p3">**</bpt>GetResponseStream<ept id="p3">**</ept> are read-only and stream instances created by calling <bpt id="p4">**</bpt>GetRequestStream<ept id="p4">**</ept> are write-only.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> class to make encoding easier.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code example uses a <bpt id="p1">**</bpt>StreamReader<ept id="p1">**</ept> to read an ASCII-encoded stream from a <bpt id="p2">**</bpt>WebResponse<ept id="p2">**</ept> (the example does not show creating the request).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The call to <bpt id="p1">**</bpt>GetResponse<ept id="p1">**</ept> can block if network resources are not available.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You should consider using an asynchronous request with the <ph id="ph1">&lt;xref:System.Net.WebRequest.BeginGetResponse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.WebRequest.EndGetResponse%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The call to <bpt id="p1">**</bpt>GetRequestStream<ept id="p1">**</ept> can block while the connection to the server is created.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You should consider using an asynchronous request for the stream with the <ph id="ph1">&lt;xref:System.Net.WebRequest.BeginGetRequestStream%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.WebRequest.EndGetRequestStream%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Request Data Using the WebRequest Class<ept id="p1">](../../../docs/framework/network-programming/how-to-request-data-using-the-webrequest-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Requesting Data<ept id="p1">](../../../docs/framework/network-programming/requesting-data.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>