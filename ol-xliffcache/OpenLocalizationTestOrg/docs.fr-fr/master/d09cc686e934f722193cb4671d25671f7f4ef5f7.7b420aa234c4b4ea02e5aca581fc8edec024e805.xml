{"content":"---\ntitle: \"Introduction to Generics - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"generics [C#], about generics\"\nms.assetid: a1ad761e-42f7-41dd-a62f-452a2de26b9d\n---\n# Introduction to Generics (C# Programming Guide)\nGeneric classes and methods combine reusability, type safety and efficiency in a way that their non-generic counterparts cannot. Generics are most frequently used with collections and the methods that operate on them. Version 2.0 of the .NET Framework class library provides a new namespace, <xref:System.Collections.Generic>, which contains several new generic-based collection classes. It is recommended that all applications that target the .NET Framework 2.0 and later use the new generic collection classes instead of the older non-generic counterparts such as <xref:System.Collections.ArrayList>. For more information, see [Generics in .NET](../../../standard/generics/index.md).  \n  \n Of course, you can also create custom generic types and methods to provide your own generalized solutions and design patterns that are type-safe and efficient. The following code example shows a simple generic linked-list class for demonstration purposes. (In most cases, you should use the <xref:System.Collections.Generic.List%601> class provided by the .NET Framework class library instead of creating your own.) The type parameter `T` is used in several locations where a concrete type would ordinarily be used to indicate the type of the item stored in the list. It is used in the following ways:  \n  \n-   As the type of a method parameter in the `AddHead` method.  \n  \n-   As the return type of the `Data` property in the nested `Node` class.  \n  \n-   As the type of the private member `data` in the nested class.  \n  \n Note that T is available to the nested `Node` class. When `GenericList<T>` is instantiated with a concrete type, for example as a `GenericList<int>`, each occurrence of `T` will be replaced with `int`.  \n  \n [!code-csharp[csProgGuideGenerics#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideGenerics/CS/Generics.cs#2)]  \n  \n The following code example shows how client code uses the generic `GenericList<T>` class to create a list of integers. Simply by changing the type argument, the following code could easily be modified to create lists of strings or any other custom type:  \n  \n [!code-csharp[csProgGuideGenerics#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideGenerics/CS/Generics.cs#3)]  \n  \n## See also\n\n- <xref:System.Collections.Generic>\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Generics](../../../csharp/programming-guide/generics/index.md)\n","nodes":[{"pos":[4,207],"embed":true,"restype":"x-metadata","content":"title: \"Introduction to Generics - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"generics [C#], about generics\"\nms.assetid: a1ad761e-42f7-41dd-a62f-452a2de26b9d","nodes":[{"content":"Introduction to Generics - C# Programming Guide","nodes":[{"pos":[0,47],"content":"Introduction to Generics - C# Programming Guide","nodes":[{"content":"Introduction to Generics - C# Programming Guide","pos":[0,47]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[214,261],"content":"Introduction to Generics (C# Programming Guide)","linkify":"Introduction to Generics (C# Programming Guide)","nodes":[{"content":"Introduction to Generics (C# Programming Guide)","pos":[0,47]}]},{"content":"Generic classes and methods combine reusability, type safety and efficiency in a way that their non-generic counterparts cannot.","pos":[262,390]},{"content":"Generics are most frequently used with collections and the methods that operate on them.","pos":[391,479]},{"content":"Version 2.0 of the .NET Framework class library provides a new namespace, <ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph>, which contains several new generic-based collection classes.","pos":[480,649],"source":" Version 2.0 of the .NET Framework class library provides a new namespace, <xref:System.Collections.Generic>, which contains several new generic-based collection classes."},{"content":"It is recommended that all applications that target the .NET Framework 2.0 and later use the new generic collection classes instead of the older non-generic counterparts such as <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[650,864],"source":" It is recommended that all applications that target the .NET Framework 2.0 and later use the new generic collection classes instead of the older non-generic counterparts such as <xref:System.Collections.ArrayList>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generics in .NET<ept id=\"p1\">](../../../standard/generics/index.md)</ept>.","pos":[865,947],"source":" For more information, see [Generics in .NET](../../../standard/generics/index.md)."},{"content":"Of course, you can also create custom generic types and methods to provide your own generalized solutions and design patterns that are type-safe and efficient.","pos":[954,1113]},{"content":"The following code example shows a simple generic linked-list class for demonstration purposes.","pos":[1114,1209]},{"content":"(In most cases, you should use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class provided by the .NET Framework class library instead of creating your own.) The type parameter <ph id=\"ph2\">`T`</ph> is used in several locations where a concrete type would ordinarily be used to indicate the type of the item stored in the list.","pos":[1210,1521],"source":" (In most cases, you should use the <xref:System.Collections.Generic.List%601> class provided by the .NET Framework class library instead of creating your own.) The type parameter `T` is used in several locations where a concrete type would ordinarily be used to indicate the type of the item stored in the list."},{"content":"It is used in the following ways:","pos":[1522,1555]},{"pos":[1565,1623],"content":"As the type of a method parameter in the <ph id=\"ph1\">`AddHead`</ph> method.","source":"As the type of a method parameter in the `AddHead` method."},{"pos":[1633,1702],"content":"As the return type of the <ph id=\"ph1\">`Data`</ph> property in the nested <ph id=\"ph2\">`Node`</ph> class.","source":"As the return type of the `Data` property in the nested `Node` class."},{"pos":[1712,1773],"content":"As the type of the private member <ph id=\"ph1\">`data`</ph> in the nested class.","source":"As the type of the private member `data` in the nested class."},{"content":"Note that T is available to the nested <ph id=\"ph1\">`Node`</ph> class.","pos":[1780,1832],"source":"Note that T is available to the nested `Node` class."},{"content":"When <ph id=\"ph1\">`GenericList&lt;T&gt;`</ph> is instantiated with a concrete type, for example as a <ph id=\"ph2\">`GenericList&lt;int&gt;`</ph>, each occurrence of <ph id=\"ph3\">`T`</ph> will be replaced with <ph id=\"ph4\">`int`</ph>.","pos":[1833,1981],"source":" When `GenericList<T>` is instantiated with a concrete type, for example as a `GenericList<int>`, each occurrence of `T` will be replaced with `int`."},{"content":"The following code example shows how client code uses the generic <ph id=\"ph1\">`GenericList&lt;T&gt;`</ph> class to create a list of integers.","pos":[2117,2235],"source":"The following code example shows how client code uses the generic `GenericList<T>` class to create a list of integers."},{"content":"Simply by changing the type argument, the following code could easily be modified to create lists of strings or any other custom type:","pos":[2236,2370]},{"pos":[2508,2516],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2556,2622],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2625,2688],"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/index.md)</ept>","source":"[Generics](../../../csharp/programming-guide/generics/index.md)"}]}