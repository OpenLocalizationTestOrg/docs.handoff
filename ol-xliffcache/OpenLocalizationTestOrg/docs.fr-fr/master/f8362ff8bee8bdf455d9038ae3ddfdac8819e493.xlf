<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="building-xml-schemas.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8362ff8bee8bdf455d9038ae3ddfdac8819e493</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\building-xml-schemas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b8e0b5e20b799a725a9c76f56c13a47c73594f7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40d9a3f07676b028227f3035dc082066861e9a72</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Building XML Schemas | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Building XML Schemas</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The classes in the <ph id="ph1">&lt;xref:System.Xml.Schema?displayProperty=fullName&gt;</ph> namespace map to the structures defined in the World Wide Web Consortium (W3C) XML Schema Recommendation and can be used to build XML schemas in-memory.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Building an XML Schema</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the code examples that follow, the SOM API is used to build a customer XML schema in-memory.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Creating Element and Attributes</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The code examples build the customer schema from the bottom up, creating the child elements, attributes, and their corresponding types first, and then the top-level elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the following code example, the <ph id="ph1">`FirstName`</ph> and <ph id="ph2">`LastName`</ph> elements, as well as the <ph id="ph3">`CustomerId`</ph> attribute of the customer schema are created using the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> and <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> classes of the SOM.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Apart from the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement.Name%2A&gt;</ph> properties of the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> classes, which correspond to the "name" attribute of the <ph id="ph4">`&lt;xs:element /&gt;`</ph> and <ph id="ph5">`&lt;xs:attribute /&gt;`</ph> elements in an XML schema, all other attributes allowed by the schema (<ph id="ph6">`defaultValue`</ph>, <ph id="ph7">`fixedValue`</ph>, <ph id="ph8">`form`</ph>, and so on) have corresponding properties in the <ph id="ph9">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> and <ph id="ph10">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating Schema Types</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The content of elements and attributes is defined by their types.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To create elements and attributes whose types are one of the built-in schema types, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement.SchemaTypeName%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> classes are set with the corresponding qualified name of the built-in type using the <ph id="ph4">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To create a user-defined type for elements and attributes, a new simple or complex type is created using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create unnamed simple or complex types that are anonymous children of an element or attribute (only simple types apply for attributes), set the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement.SchemaType%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> classes to the unnamed simple or complex type, instead of the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaElement.SchemaTypeName%2A&gt;</ph> property of the <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> or <ph id="ph6">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>XML schemas allow both anonymous and named simple types to be derived by restriction from other simple types (built-in or user-defined) or constructed as a list or union of other simple types.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSimpleTypeRestriction&gt;</ph> class is used to create a simple type by restricting the built-in <ph id="ph2">`xs:string`</ph> type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSimpleTypeList&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSimpleTypeUnion&gt;</ph> classes to create list or union types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType.Content%2A?displayProperty=fullName&gt;</ph> property denotes whether it is a simple type restriction, list, or union.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the following code example, the <ph id="ph1">`FirstName`</ph> element's type is the built-in type <ph id="ph2">`xs:string`</ph>, the <ph id="ph3">`LastName`</ph> element's type is a named simple type that is a restriction of the built-in type <ph id="ph4">`xs:string`</ph>, with a <ph id="ph5">`MaxLength`</ph> facet value of 20, and the <ph id="ph6">`CustomerId`</ph> attribute's type is the built-in type <ph id="ph7">`xs:positiveInteger`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Customer`</ph> element is an anonymous complex type whose particle is the sequence of the <ph id="ph2">`FirstName`</ph> and <ph id="ph3">`LastName`</ph> elements and whose attributes contains the <ph id="ph4">`CustomerId`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaChoice&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaAll&gt;</ph> classes as the particle of the complex type to replicate <ph id="ph3">`&lt;xs:choice /&gt;`</ph> or <ph id="ph4">`&lt;xs:all /&gt;`</ph> semantics.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creating and Compiling Schemas</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>At this point, the child elements and attributes, their corresponding types, and the top-level <ph id="ph1">`Customer`</ph> element have been created in-memory using the SOM API.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the following code example, the schema element is created using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> class, the top-level elements and types are added to it using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A?displayProperty=fullName&gt;</ph> property and the complete schema is compiled using the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> class and written to the console.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet.Compile%2A?displayProperty=fullName&gt;</ph> method validates the customer schema against the rules for an XML schema and makes post-schema-compilation properties available.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>All post-schema-compilation properties in the SOM API differ from the Post-Schema-Validation-Infoset.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> added to the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> is a delegate that calls the callback method <ph id="ph3">`ValidationCallback`</ph> to handle schema validation warnings and errors.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following is the complete code example, and the customer schema written to the console.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Schema Object Model Overview<ept id="p1">](../../../../docs/standard/data/xml/xml-schema-object-model-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reading and Writing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/reading-and-writing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Traversing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/traversing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Editing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/editing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Including or Importing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/including-or-importing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XmlSchemaSet for Schema Compilation<ept id="p1">](../../../../docs/standard/data/xml/xmlschemaset-for-schema-compilation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Post-Schema Compilation Infoset<ept id="p1">](../../../../docs/standard/data/xml/post-schema-compilation-infoset.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>