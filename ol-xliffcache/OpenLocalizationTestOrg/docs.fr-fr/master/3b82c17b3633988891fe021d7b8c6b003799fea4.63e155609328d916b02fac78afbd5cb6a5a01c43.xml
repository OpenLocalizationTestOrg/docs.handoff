{"content":"---\ntitle: \"ADO.NET and LINQ to SQL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 49ac6da0-f2e1-46fa-963e-1b6dcb63fef7\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# ADO.NET and LINQ to SQL\n[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] is part of the [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] family of technologies. It is based on services provided by the [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] provider model. You can therefore mix [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] code with existing [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] applications and migrate current [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] solutions to [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]. The following illustration provides a high-level view of the relationship.  \n  \n ![LINQ to SQL and ADO.NET](../../../../../../docs/framework/data/adonet/sql/linq/media/dlinq-3.png \"DLinq_3\")  \n  \n## Connections  \n You can supply an existing [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] connection when you create a [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] <xref:System.Data.Linq.DataContext>. All operations against the <xref:System.Data.Linq.DataContext> (including queries) use this provided connection. If the connection is already open, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] leaves it as is when you are finished with it.  \n  \n [!code-csharp[DLinqCommunicatingWithDatabase#4](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCommunicatingWithDatabase/cs/Program.cs#4)]\n [!code-vb[DLinqCommunicatingWithDatabase#4](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCommunicatingWithDatabase/vb/Module1.vb#4)]  \n  \n You can always access the connection and close it yourself by using the <xref:System.Data.Linq.DataContext.Connection%2A> property, as in the following code:  \n  \n [!code-csharp[DLinqAdoNet#1](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#1)]\n [!code-vb[DLinqAdoNet#1](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#1)]  \n  \n## Transactions  \n You can supply your <xref:System.Data.Linq.DataContext> with your own database transaction when your application has already initiated the transaction and you want your <xref:System.Data.Linq.DataContext> to be involved.  \n  \n The preferred method of doing transactions with the [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] is to use the <xref:System.Transactions.TransactionScope> object. By using this approach, you can make distributed transactions that work across databases and other memory-resident resource managers. Transaction scopes require few resources to start. They promote themselves to distributed transactions only when there are multiple connections within the scope of the transaction.  \n  \n [!code-csharp[DLinqAdoNet#2](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#2)]\n [!code-vb[DLinqAdoNet#2](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#2)]  \n  \n You cannot use this approach for all databases. For example, the SqlClient connection cannot promote system transactions when it works against a [!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)] server. Instead, it automatically enlists to a full, distributed transaction whenever it sees a transaction scope being used.  \n  \n## Direct SQL Commands  \n At times you can encounter situations where the ability of the <xref:System.Data.Linq.DataContext> to query or submit changes is insufficient for the specialized task you want to perform. In these circumstances you can use the <xref:System.Data.Linq.DataContext.ExecuteQuery%2A> method to issue SQL commands to the database and convert the query results to objects.  \n  \n For example, assume that the data for the `Customer` class is spread over two tables (customer1 and customer2). The following query returns a sequence of `Customer` objects:  \n  \n [!code-csharp[DLinqAdoNet#3](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#3)]\n [!code-vb[DLinqAdoNet#3](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#3)]  \n  \n As long as the column names in the tabular results match column properties of your entity class, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] creates your objects out of any SQL query.  \n  \n### Parameters  \n The <xref:System.Data.Linq.DataContext.ExecuteQuery%2A> method accepts parameters. The following code executes a parameterized query:  \n  \n [!code-csharp[DlinqAdoNet#4](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#4)]\n [!code-vb[DlinqAdoNet#4](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#4)]  \n  \n> [!NOTE]\n>  Parameters are expressed in the query text by using the same curly notation used by `Console.WriteLine()` and `String.Format()`. `String.Format()` takes the query string you provide and substitutes the curly-braced parameters with generated parameter names such as `@p0`, `@p1` â€¦, `@p(n)`.  \n  \n## See Also  \n [Background Information](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)   \n [How to: Reuse a Connection Between an ADO.NET Command and a DataContext](../../../../../../docs/framework/data/adonet/sql/linq/how-to-reuse-a-connection-between-an-ado-net-command-and-a-datacontext.md)","nodes":[{"pos":[12,52],"content":"ADO.NET and LINQ to SQL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ADO.NET and LINQ to SQL | Microsoft Docs","pos":[0,40]}]},{"pos":[361,384],"content":"ADO.NET and LINQ to SQL","linkify":"ADO.NET and LINQ to SQL","nodes":[{"content":"ADO.NET and LINQ to SQL","pos":[0,23]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> is part of the <ph id=\"ph2\">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> family of technologies.","pos":[385,555],"source":"[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] is part of the [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] family of technologies."},{"content":"It is based on services provided by the <ph id=\"ph1\">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> provider model.","pos":[556,675],"source":" It is based on services provided by the [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] provider model."},{"content":"You can therefore mix <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> code with existing <ph id=\"ph2\">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> applications and migrate current <ph id=\"ph3\">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> solutions to <ph id=\"ph4\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.","pos":[676,1027],"source":" You can therefore mix [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] code with existing [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] applications and migrate current [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] solutions to [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]."},{"content":"The following illustration provides a high-level view of the relationship.","pos":[1028,1102]},{"pos":[1109,1218],"content":"<bpt id=\"p1\">![</bpt>LINQ to SQL and ADO.NET<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../../../docs/framework/data/adonet/sql/linq/media/dlinq-3.png \"</bpt>DLinq_3<ept id=\"p2\">\")</ept>","source":"![LINQ to SQL and ADO.NET](../../../../../../docs/framework/data/adonet/sql/linq/media/dlinq-3.png \"DLinq_3\")"},{"pos":[1227,1238],"content":"Connections","linkify":"Connections","nodes":[{"content":"Connections","pos":[0,11]}]},{"content":"You can supply an existing <ph id=\"ph1\">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> connection when you create a <ph id=\"ph2\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> <ph id=\"ph3\">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.","pos":[1242,1466],"source":"You can supply an existing [!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)] connection when you create a [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] <xref:System.Data.Linq.DataContext>."},{"content":"All operations against the <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> (including queries) use this provided connection.","pos":[1467,1579],"source":" All operations against the <xref:System.Data.Linq.DataContext> (including queries) use this provided connection."},{"content":"If the connection is already open, <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> leaves it as is when you are finished with it.","pos":[1580,1729],"source":" If the connection is already open, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] leaves it as is when you are finished with it."},{"pos":[1736,2049],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqCommunicatingWithDatabase#4<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCommunicatingWithDatabase/cs/Program.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqCommunicatingWithDatabase#4<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCommunicatingWithDatabase/vb/Module1.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqCommunicatingWithDatabase#4](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCommunicatingWithDatabase/cs/Program.cs#4)]\n [!code-vb[DLinqCommunicatingWithDatabase#4](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCommunicatingWithDatabase/vb/Module1.vb#4)]"},{"content":"You can always access the connection and close it yourself by using the <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.Connection%2A&gt;</ph> property, as in the following code:","pos":[2056,2213],"source":"You can always access the connection and close it yourself by using the <xref:System.Data.Linq.DataContext.Connection%2A> property, as in the following code:"},{"pos":[2220,2457],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqAdoNet#1<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqAdoNet#1<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqAdoNet#1](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#1)]\n [!code-vb[DLinqAdoNet#1](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#1)]"},{"pos":[2466,2478],"content":"Transactions","linkify":"Transactions","nodes":[{"content":"Transactions","pos":[0,12]}]},{"content":"You can supply your <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> with your own database transaction when your application has already initiated the transaction and you want your <ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> to be involved.","pos":[2482,2702],"source":"You can supply your <xref:System.Data.Linq.DataContext> with your own database transaction when your application has already initiated the transaction and you want your <xref:System.Data.Linq.DataContext> to be involved."},{"content":"The preferred method of doing transactions with the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> is to use the <ph id=\"ph2\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object.","pos":[2709,2896],"source":"The preferred method of doing transactions with the [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] is to use the <xref:System.Transactions.TransactionScope> object."},{"content":"By using this approach, you can make distributed transactions that work across databases and other memory-resident resource managers.","pos":[2897,3030]},{"content":"Transaction scopes require few resources to start.","pos":[3031,3081]},{"content":"They promote themselves to distributed transactions only when there are multiple connections within the scope of the transaction.","pos":[3082,3211]},{"pos":[3218,3455],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqAdoNet#2<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqAdoNet#2<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqAdoNet#2](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#2)]\n [!code-vb[DLinqAdoNet#2](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#2)]"},{"content":"You cannot use this approach for all databases.","pos":[3462,3509]},{"content":"For example, the SqlClient connection cannot promote system transactions when it works against a <ph id=\"ph1\">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph> server.","pos":[3510,3670],"source":" For example, the SqlClient connection cannot promote system transactions when it works against a [!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)] server."},{"content":"Instead, it automatically enlists to a full, distributed transaction whenever it sees a transaction scope being used.","pos":[3671,3788]},{"pos":[3797,3816],"content":"Direct SQL Commands","linkify":"Direct SQL Commands","nodes":[{"content":"Direct SQL Commands","pos":[0,19]}]},{"content":"At times you can encounter situations where the ability of the <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> to query or submit changes is insufficient for the specialized task you want to perform.","pos":[3820,4007],"source":"At times you can encounter situations where the ability of the <xref:System.Data.Linq.DataContext> to query or submit changes is insufficient for the specialized task you want to perform."},{"content":"In these circumstances you can use the <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.ExecuteQuery%2A&gt;</ph> method to issue SQL commands to the database and convert the query results to objects.","pos":[4008,4185],"source":" In these circumstances you can use the <xref:System.Data.Linq.DataContext.ExecuteQuery%2A> method to issue SQL commands to the database and convert the query results to objects."},{"content":"For example, assume that the data for the <ph id=\"ph1\">`Customer`</ph> class is spread over two tables (customer1 and customer2).","pos":[4192,4303],"source":"For example, assume that the data for the `Customer` class is spread over two tables (customer1 and customer2)."},{"content":"The following query returns a sequence of <ph id=\"ph1\">`Customer`</ph> objects:","pos":[4304,4365],"source":" The following query returns a sequence of `Customer` objects:"},{"pos":[4372,4609],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqAdoNet#3<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqAdoNet#3<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqAdoNet#3](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#3)]\n [!code-vb[DLinqAdoNet#3](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#3)]"},{"pos":[4616,4823],"content":"As long as the column names in the tabular results match column properties of your entity class, <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> creates your objects out of any SQL query.","source":"As long as the column names in the tabular results match column properties of your entity class, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] creates your objects out of any SQL query."},{"pos":[4833,4843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.ExecuteQuery%2A&gt;</ph> method accepts parameters.","pos":[4847,4929],"source":"The <xref:System.Data.Linq.DataContext.ExecuteQuery%2A> method accepts parameters."},{"content":"The following code executes a parameterized query:","pos":[4930,4980]},{"pos":[4987,5224],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DlinqAdoNet#4<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DlinqAdoNet#4<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DlinqAdoNet#4](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqAdoNet/cs/Program.cs#4)]\n [!code-vb[DlinqAdoNet#4](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqAdoNet/vb/Module1.vb#4)]"},{"pos":[5232,5532],"content":"[!NOTE]\n Parameters are expressed in the query text by using the same curly notation used by `Console.WriteLine()` and `String.Format()`. `String.Format()` takes the query string you provide and substitutes the curly-braced parameters with generated parameter names such as `@p0`, `@p1` â€¦, `@p(n)`.","leadings":["","> "],"nodes":[{"content":" Parameters are expressed in the query text by using the same curly notation used by `Console.WriteLine()` and `String.Format()`. `String.Format()` takes the query string you provide and substitutes the curly-braced parameters with generated parameter names such as `@p0`, `@p1` â€¦, `@p(n)`.","pos":[8,298],"nodes":[{"content":"Parameters are expressed in the query text by using the same curly notation used by <ph id=\"ph1\">`Console.WriteLine()`</ph> and <ph id=\"ph2\">`String.Format()`</ph>.","pos":[1,129],"source":" Parameters are expressed in the query text by using the same curly notation used by `Console.WriteLine()` and `String.Format()`."},{"content":"<ph id=\"ph1\">`String.Format()`</ph> takes the query string you provide and substitutes the curly-braced parameters with generated parameter names such as <ph id=\"ph2\">`@p0`</ph>, <ph id=\"ph3\">`@p1`</ph> â€¦, <ph id=\"ph4\">`@p(n)`</ph>.","pos":[130,290],"source":"`String.Format()` takes the query string you provide and substitutes the curly-braced parameters with generated parameter names such as `@p0`, `@p1` â€¦, `@p(n)`."}]}]},{"pos":[5541,5549],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Background Information<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)</ept><ph id=\"ph1\"> </ph>","pos":[5553,5659],"source":"[Background Information](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Reuse a Connection Between an ADO.NET Command and a DataContext<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-reuse-a-connection-between-an-ado-net-command-and-a-datacontext.md)</ept>","pos":[5662,5865],"source":" [How to: Reuse a Connection Between an ADO.NET Command and a DataContext](../../../../../../docs/framework/data/adonet/sql/linq/how-to-reuse-a-connection-between-an-ado-net-command-and-a-datacontext.md)"}]}