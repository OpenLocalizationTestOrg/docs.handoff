<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-my-first-wpf-desktop-application.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbfc40bd1fcc97810ea1397731bd8c232297cbd1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\getting-started\walkthrough-my-first-wpf-desktop-application.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9c2c4303ea876c0f58ab24e33ebff45dd71e655</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39cd4d7ac159e8fb9e220e28b7df17b047f6dfff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Create a WPF application in Visual Studio</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: My first WPF desktop application</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article shows you how to develop a simple Windows Presentation Foundation (WPF) application that includes the elements that are common to most WPF applications: Extensible Application Markup Language (XAML) markup, code-behind, application definitions, controls, layout, data binding, and styles.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This walkthrough includes the following steps:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use XAML to design the appearance of the application's user interface (UI).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Write code to build the application's behavior.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create an application definition to manage the application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add controls and create the layout to compose the application UI.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create styles for a consistent appearance throughout an application's UI.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Bind the UI to data to both populate the UI from data and keep the data and UI synchronized.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By the end of the walkthrough, you'll have built a standalone Windows application that allows users to view expense reports for selected people.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The application is composed of several WPF pages that are hosted in a browser-style window.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The sample code that is used to build this walkthrough is available for both Visual Basic and C# at <bpt id="p1">[</bpt>Introduction to Building WPF Applications<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=160008)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017 or later</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information about installing the latest version of Visual Studio, see <bpt id="p1">[</bpt>Install Visual Studio<ept id="p1">](/visualstudio/install/install-visual-studio)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Create the application project</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first step is to create the application infrastructure, which includes an application definition, two pages, and an image.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a new WPF Application project in Visual Basic or Visual C# named <bpt id="p1">**</bpt><ph id="ph1">`ExpenseIt`</ph><ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Open Visual Studio and select <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>New<ept id="p2">**</ept><ph id="ph2"> &gt; </ph><bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog opens.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Under the <bpt id="p1">**</bpt>Installed<ept id="p1">**</ept> category, expand either the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept> node, and then select <bpt id="p4">**</bpt>Windows Desktop<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>WPF App (.NET Framework)<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Enter the name <bpt id="p1">**</bpt><ph id="ph1">`ExpenseIt`</ph><ept id="p1">**</ept> and then select <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>New Project dialog with WPF app selected</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Visual Studio creates the project and opens the designer for the default application window named <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This walkthrough uses the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control that is available in the .NET Framework 4 and later.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Be sure that your project targets the .NET Framework 4 or later.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Target a Version of the .NET Framework<ept id="p1">](/visualstudio/ide/how-to-target-a-version-of-the-dotnet-framework)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>Application.xaml<ept id="p1">*</ept> (Visual Basic) or <bpt id="p2">*</bpt>App.xaml<ept id="p2">*</ept> (C#).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This XAML file defines a WPF application and any application resources.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You also use this file to specify the UI that automatically shows when the application starts; in this case, <bpt id="p1">*</bpt>MainWindow.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Your XAML should look like this in Visual Basic:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Or like this in C#:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>MainWindow.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This XAML file is the main window of your application and displays content created in pages.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class defines the properties of a window, such as its title, size, or icon, and handles events, such as closing or hiding.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> element to a <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, as shown in the following XAML:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This app navigates to different content depending on the user input.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is why the main <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> needs to be changed to a <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> inherits all the properties of <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> element in the XAML file creates an instance of the <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Navigation overview<ept id="p1">](../app-development/navigation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Change the following properties on the <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> element:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Window.Title%2A&gt;</ph> property to "<ph id="ph2">`ExpenseIt`</ph>".</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> property to 500 pixels.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> property to 350 pixels.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> elements between the <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> tags.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Your XAML should look like this in Visual Basic:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Or like this in C#:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>MainWindow.xaml.vb<ept id="p1">*</ept> or <bpt id="p2">*</bpt>MainWindow.xaml.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This file is a code-behind file that contains code to handle the events declared in <bpt id="p1">*</bpt>MainWindow.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This file contains a partial class for the window defined in XAML.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you are using C#, change the <ph id="ph1">`MainWindow`</ph> class to derive from <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>(In Visual Basic, this happens automatically when you change the window in XAML.)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Your code should look like this:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can toggle the code language of the sample code between C# and Visual Basic in the <bpt id="p1">**</bpt>Language<ept id="p1">**</ept> drop-down on the upper right side of this article.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Add files to the application</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this section, you'll add two pages and an image to the application.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Add a new WPF page to the project, and name it <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click on the <bpt id="p2">**</bpt><ph id="ph1">`ExpenseIt`</ph><ept id="p2">**</ept> project node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept><ph id="ph2"> &gt; </ph><bpt id="p4">**</bpt>Page<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog, the <bpt id="p2">**</bpt>Page (WPF)<ept id="p2">**</ept> template is already selected.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enter the name <bpt id="p1">**</bpt><ph id="ph1">`ExpenseItHome`</ph><ept id="p1">**</ept>, and then select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This page is the first page that's displayed when the application is launched.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It will show a list of people to select from, to show an expense report for.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Controls.Page.Title%2A&gt;</ph> to "<ph id="ph2">`ExpenseIt - Home`</ph>".</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Your XAML should look like this in Visual Basic:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Or this in C#:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>MainWindow.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow.Source%2A&gt;</ph> property on the <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> to "<ph id="ph3">`ExpenseItHome.xaml`</ph>".</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This sets <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept> to be the first page opened when the application starts.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Your XAML should look like this in Visual Basic:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Or this in C#:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can also set the <bpt id="p1">**</bpt>Source<ept id="p1">**</ept> property in the <bpt id="p2">**</bpt>Miscellaneous<ept id="p2">**</ept> category of the <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Source property in Properties window</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Add another new WPF page to the project, and name it <bpt id="p1">*</bpt>ExpenseReportPage.xaml<ept id="p1">*</ept>::</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click on the <bpt id="p2">**</bpt><ph id="ph1">`ExpenseIt`</ph><ept id="p2">**</ept> project node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept><ph id="ph2"> &gt; </ph><bpt id="p4">**</bpt>Page<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog, the <bpt id="p2">**</bpt>Page (WPF)<ept id="p2">**</ept> template is already selected.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Enter the name <bpt id="p1">**</bpt>ExpenseReportPage<ept id="p1">**</ept>, and then select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This page will show the expense report for the person that is selected on the <bpt id="p1">**</bpt><ph id="ph1">`ExpenseItHome`</ph><ept id="p1">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>ExpenseReportPage.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Controls.Page.Title%2A&gt;</ph> to "<ph id="ph2">`ExpenseIt - View Expense`</ph>".</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Your XAML should look like this in Visual Basic:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Or this in C#:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>ExpenseItHome.xaml.vb<ept id="p1">*</ept> and <bpt id="p2">*</bpt>ExpenseReportPage.xaml.vb<ept id="p2">*</ept>, or <bpt id="p3">*</bpt>ExpenseItHome.xaml.cs<ept id="p3">*</ept> and <bpt id="p4">*</bpt>ExpenseReportPage.xaml.cs<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you create a new Page file, Visual Studio automatically creates a <bpt id="p1">*</bpt>code-behind<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>These code-behind files handle the logic for responding to user input.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Your code should look like this for <bpt id="p1">**</bpt><ph id="ph1">`ExpenseItHome`</ph><ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>And like this for <bpt id="p1">**</bpt>ExpenseReportPage<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Add an image named <bpt id="p1">*</bpt>watermark.png<ept id="p1">*</ept> to the project.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can create your own image, copy the file from the sample code, or get it <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/blob/master/docs/framework/wpf/getting-started/./media/watermark.png)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Right-click on the project node and select <bpt id="p1">**</bpt>Add<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Existing Item<ept id="p2">**</ept>, or press <bpt id="p3">**</bpt>Shift<ept id="p3">**</ept><ph id="ph2">+</ph><bpt id="p4">**</bpt>Alt<ept id="p4">**</ept><ph id="ph3">+</ph><bpt id="p5">**</bpt>A<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Existing Item<ept id="p1">**</ept> dialog, browse to the image file you want to use, and then select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Build and run the application</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To build and run the application, press <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> or select <bpt id="p2">**</bpt>Start Debugging<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>Debug<ept id="p3">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following illustration shows the application with the <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> buttons:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>ExpenseIt sample screenshot</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Close the application to return to Visual Studio.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Create the layout</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Layout provides an ordered way to place UI elements, and also manages the size and position of those elements when a UI is resized.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You typically create a layout with one of the following layout controls:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Each of these layout controls supports a special type of layout for its child elements.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ExpenseIt`</ph> pages can be resized, and each page has elements that are arranged horizontally and vertically alongside other elements.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Consequently, the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> is the ideal layout element for the application.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements, see <bpt id="p1">[</bpt>Panels overview<ept id="p1">](../controls/panels-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information about layout, see <bpt id="p1">[</bpt>Layout<ept id="p1">](../advanced/layout.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the section, you create a single-column table with three rows and a 10-pixel margin by adding column and row definitions to the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> in <bpt id="p1">*</bpt><ph id="ph2">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> property on the <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element to "10,0,10,10", which corresponds to left, top, right and bottom margins:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can also set the <bpt id="p1">**</bpt>Margin<ept id="p1">**</ept> values in the <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> window, under the <bpt id="p3">**</bpt>Layout<ept id="p3">**</ept> category:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Margin values in Properties window</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Add the following XAML between the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> tags to create the row and column definitions:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.RowDefinition.Height%2A&gt;</ph> of two rows is set to <ph id="ph2">&lt;xref:System.Windows.GridLength.Auto%2A&gt;</ph>, which means that the rows are sized based on the content in the rows.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref:System.Windows.Controls.RowDefinition.Height%2A&gt;</ph> is <ph id="ph2">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph> sizing, which means that the row height is a weighted proportion of the available space.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For example if two rows each have a <ph id="ph1">&lt;xref:System.Windows.Controls.RowDefinition.Height%2A&gt;</ph> of "*", they each have a height that is half of the available space.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> should now look like the following XAML:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Add controls</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>In this section, you'll update the home page UI to show a list of people that a user can select from to show the expense report for.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Controls are UI objects that allow users to interact with your application.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Controls<ept id="p1">](../controls/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To create this UI, you'll add the following elements to <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> (for the list of people).</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> (for the list header).</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> (to click to view the expense report for the person that is selected in the list).</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Each control is placed in a row of the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> by setting the <ph id="ph2">&lt;xref:System.Windows.Controls.Grid.Row%2A?displayProperty=nameWithType&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For more information about attached properties, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](../advanced/attached-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Add the following XAML somewhere between the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> tags:</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can also create the controls by dragging them from the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept> window onto the design window, and then setting their properties in the <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The following illustration shows the controls you just created:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>ExpenseIt sample screenshot</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Add an image and a title</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In this section, you'll update the home page UI with an image and a page title.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Add another column to the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid.ColumnDefinitions%2A&gt;</ph> with a fixed <ph id="ph2">&lt;xref:System.Windows.Controls.ColumnDefinition.Width%2A&gt;</ph> of 230 pixels:</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Add another row to the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid.RowDefinitions%2A&gt;</ph>, for a total of four rows:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Move the controls to the second column by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid.Column%2A?displayProperty=nameWithType&gt;</ph> property to 1 in each of the three controls (Border, ListBox, and Button).</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Move each control down a row, by incrementing its <ph id="ph1">&lt;xref:System.Windows.Controls.Grid.Row%2A?displayProperty=nameWithType&gt;</ph> value by 1.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The XAML for the three controls now looks like this:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Background%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> to be the <bpt id="p1">*</bpt>watermark.png<ept id="p1">*</ept> image file, by adding the following XAML somewhere between the <ph id="ph3">`&lt;Grid&gt;`</ph> and <ph id="ph4">`&lt;/Grid&gt;`</ph> tags:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Before the <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> element, add a <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph> with the content "View Expense Report".</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This is the title of the page.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The following illustration shows the results of what you just added:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>ExpenseIt sample screenshot</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Add code to handle events</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler to the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create a simple event handler<ept id="p1">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/bb675300(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml.vb`</ph><ept id="p1">*</ept> or <bpt id="p2">*</bpt><ph id="ph2">`ExpenseItHome.xaml.cs`</ph><ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`ExpenseItHome`</ph> class to add a button click event handler.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The event handler opens the <bpt id="p1">**</bpt>ExpenseReportPage<ept id="p1">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Create the UI for ExpenseReportPage</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ExpenseReportPage.xaml<ept id="p1">*</ept> displays the expense report for the person that's selected on the <bpt id="p2">**</bpt><ph id="ph1">`ExpenseItHome`</ph><ept id="p2">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In this section, you'll create the UI for <bpt id="p1">**</bpt>ExpenseReportPage<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>You'll also add background and fill colors to the various UI elements.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>ExpenseReportPage.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Add the following XAML between the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> tags:</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This UI is similar to <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>, except the report data is displayed in a <ph id="ph2">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If you get an error that the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> was not found or does not exist, make sure that your project targets the .NET Framework 4 or later.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Target a Version of the .NET Framework<ept id="p1">](/visualstudio/ide/how-to-target-a-version-of-the-dotnet-framework)</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>View<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The expense report page appears.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Also notice that the back navigation button is enabled.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The following illustration shows the UI elements added to <bpt id="p1">*</bpt>ExpenseReportPage.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>ExpenseIt sample screenshot</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Style controls</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The appearance of various elements is often the same for all elements of the same type in a UI.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>UI uses <bpt id="p1">[</bpt>styles<ept id="p1">](../controls/styling-and-templating.md)</ept> to make appearances reusable across multiple elements.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The reusability of styles helps to simplify XAML creation and management.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This section replaces the per-element attributes that were defined in previous steps with styles.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>Application.xaml<ept id="p1">*</ept> or <bpt id="p2">*</bpt>App.xaml<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Add the following XAML between the <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A?displayProperty=nameWithType&gt;</ph> tags:</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This XAML adds the following styles:</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`headerTextStyle`</ph>: To format the page title <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`labelStyle`</ph>: To format the <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`columnHeaderStyle`</ph>: To format the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.DataGridColumnHeader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`listHeaderStyle`</ph>: To format the list header <ph id="ph2">&lt;xref:System.Windows.Controls.Border&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`listHeaderTextStyle`</ph>: To format the list header <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`buttonStyle`</ph>: To format the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> on <ph id="ph3">`ExpenseItHome.xaml`</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Notice that the styles are resources and children of the <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A?displayProperty=nameWithType&gt;</ph> property element.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In this location, the styles are applied to all the elements in an application.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For an example of using resources in a .NET Framework application, see <bpt id="p1">[</bpt>Use Application Resources<ept id="p1">](../advanced/how-to-use-application-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Replace everything between the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> elements with the following XAML:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The properties such as <ph id="ph1">&lt;xref:System.Windows.VerticalAlignment&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.FontFamily&gt;</ph> that define the look of each control are removed and replaced by applying the styles.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`headerTextStyle`</ph> is applied to the "View Expense Report" <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>ExpenseReportPage.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Replace everything between the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> elements with the following XAML:</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This adds styles to the <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Border&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Bind data to a control</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>In this section, you'll create the XML data that is bound to various controls.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml`</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>After the opening <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element, add the following XAML to create an <ph id="ph2">&lt;xref:System.Windows.Data.XmlDataProvider&gt;</ph> that contains the data for each person:</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The data is created as a <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> resource.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Normally this would be loaded as a file, but for simplicity the data is added inline.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Within the <ph id="ph1">`&lt;Grid.Resources&gt;`</ph> element, add the following <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph>, which defines how to display the data in the <ph id="ph3">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>For more information about data templates, see <bpt id="p1">[</bpt>Data templating overview<ept id="p1">](../data/data-templating-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Replace the existing <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> with the following XAML:</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This XAML binds the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.ItemsSource%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> to the data source and applies the data template as the <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl.ItemTemplate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Connect data to controls</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Next, you'll add code to retrieve the name that's selected on the <bpt id="p1">**</bpt><ph id="ph1">`ExpenseItHome`</ph><ept id="p1">**</ept> page and pass it to the constructor of <bpt id="p2">**</bpt>ExpenseReportPage<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ExpenseReportPage<ept id="p1">**</ept> sets its data context with the passed item, which is what the controls defined in <bpt id="p2">*</bpt>ExpenseReportPage.xaml<ept id="p2">*</ept> bind to.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>ExpenseReportPage.xaml.vb<ept id="p1">*</ept> or <bpt id="p2">*</bpt>ExpenseReportPage.xaml.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Add a constructor that takes an object so you can pass the expense report data of the selected person.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt><ph id="ph1">`ExpenseItHome.xaml.vb`</ph><ept id="p1">*</ept> or <bpt id="p2">*</bpt><ph id="ph2">`ExpenseItHome.xaml.cs`</ph><ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler to call the new constructor passing the expense report data of the selected person.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Style data with data templates</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>In this section, you'll update the UI for each item in the data-bound lists by using data templates.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>ExpenseReportPage.xaml<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Bind the content of the "Name" and "Department" <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> elements to the appropriate data source property.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>For more information about data binding, see <bpt id="p1">[</bpt>Data binding overview<ept id="p1">](../data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>After the opening <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element, add the following data templates, which define how to display the expense report data:</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGridTextColumn&gt;</ph> elements with <ph id="ph2">&lt;xref:System.Windows.Controls.DataGridTemplateColumn&gt;</ph> under the <ph id="ph3">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> element and apply the templates to them.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Select a person and then select the <bpt id="p1">**</bpt>View<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The following illustration shows both pages of the <ph id="ph1">`ExpenseIt`</ph> application with controls, layout, styles, data binding, and data templates applied:</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>ExpenseIt sample screenshots</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This sample demonstrates a specific feature of WPF and doesn't follow all best practices for things like security, localization, and accessibility.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For comprehensive coverage of WPF and the .NET Framework application development best practices, see the following topics:</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessibility<ept id="p1">](../../ui-automation/accessibility-best-practices.md)</ept></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security<ept id="p1">](../security-wpf.md)</ept></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF globalization and localization<ept id="p1">](../advanced/wpf-globalization-and-localization-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF performance<ept id="p1">](../advanced/optimizing-wpf-application-performance.md)</ept></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>In this walkthrough you learned a number of techniques for creating a UI using Windows Presentation Foundation (WPF).</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>You should now have a basic understanding of the building blocks of a data-bound, .NET Framework application.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For more information about the WPF architecture and programming models, see the following topics:</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF architecture<ept id="p1">](../advanced/wpf-architecture.md)</ept></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML overview (WPF)<ept id="p1">](../advanced/xaml-overview-wpf.md)</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](../advanced/dependency-properties-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout<ept id="p1">](../advanced/layout.md)</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For more information about creating applications, see the following topics:</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application development<ept id="p1">](../app-development/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Controls<ept id="p1">](../controls/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data binding overview<ept id="p1">](../data/data-binding-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Graphics and multimedia<ept id="p1">](../graphics-multimedia/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Documents in WPF<ept id="p1">](../advanced/documents-in-wpf.md)</ept></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Panels overview<ept id="p1">](../controls/panels-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data templating overview<ept id="p1">](../data/data-templating-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Build a WPF application<ept id="p1">](../app-development/building-a-wpf-application-wpf.md)</ept></source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styles and templates<ept id="p1">](../controls/styles-and-templates.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>