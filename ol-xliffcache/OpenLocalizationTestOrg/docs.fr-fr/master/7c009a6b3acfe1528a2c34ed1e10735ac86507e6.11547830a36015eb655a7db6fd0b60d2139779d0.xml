{"content":"---\ntitle: \"*= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.*=\"\nhelpviewer_keywords: \n  - \"operator *=\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"*= operator [Visual Basic]\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 96c86509-6eb8-4682-8226-3852e049376f\n---\n# *= Operator (Visual Basic)\nMultiplies the value of a variable or property by the value of an expression and assigns the result to the variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty *= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric variable or property.  \n  \n `expression`  \n Required. Any numeric expression.  \n  \n## Remarks  \n The element on the left side of the `*=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `*=` operator first multiplies the value of the expression (on the right-hand side of the operator) by the value of the variable or property (on the left-hand side of the operator). The operator then assigns the result of that operation to the variable or property.  \n  \n## Overloading  \n The [* Operator](../../../visual-basic/language-reference/operators/multiplication-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `*` operator affects the behavior of the `*=` operator. If your code uses `*=` on a class or structure that overloads `*`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `*=` operator to multiply one `Integer` variable by a second and assign the result to the first variable.  \n  \n [!code-vb[VbVbalrOperators#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#5)]  \n  \n## See also\n\n- [* Operator](../../../visual-basic/language-reference/operators/multiplication-operator.md)\n- [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,365],"embed":true,"restype":"x-metadata","content":"title: \"*= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.*=\"\nhelpviewer_keywords: \n  - \"operator *=\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"*= operator [Visual Basic]\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 96c86509-6eb8-4682-8226-3852e049376f","nodes":[{"content":"*= Operator (Visual Basic)","nodes":[{"pos":[0,26],"content":"*= Operator (Visual Basic)","nodes":[{"content":"*= Operator (Visual Basic)","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[372,398],"content":"*= Operator (Visual Basic)","linkify":"*= Operator (Visual Basic)","nodes":[{"content":"*= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Multiplies the value of a variable or property by the value of an expression and assigns the result to the variable or property.","pos":[399,527]},{"pos":[536,542],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[601,606],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[634,643]},{"content":"Any numeric variable or property.","pos":[644,677]},{"content":"Required.","pos":[700,709]},{"content":"Any numeric expression.","pos":[710,733]},{"pos":[742,749],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`*=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[753,874],"source":"The element on the left side of the `*=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[875,985],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`*=`</ph> operator first multiplies the value of the expression (on the right-hand side of the operator) by the value of the variable or property (on the left-hand side of the operator).","pos":[992,1177],"source":"The `*=` operator first multiplies the value of the expression (on the right-hand side of the operator) by the value of the variable or property (on the left-hand side of the operator)."},{"content":"The operator then assigns the result of that operation to the variable or property.","pos":[1178,1261]},{"pos":[1270,1281],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>* Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/multiplication-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1285,1522],"source":"The [* Operator](../../../visual-basic/language-reference/operators/multiplication-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`*`</ph> operator affects the behavior of the <ph id=\"ph2\">`*=`</ph> operator.","pos":[1523,1594],"source":" Overloading the `*` operator affects the behavior of the `*=` operator."},{"content":"If your code uses <ph id=\"ph1\">`*=`</ph> on a class or structure that overloads <ph id=\"ph2\">`*`</ph>, be sure you understand its redefined behavior.","pos":[1595,1708],"source":" If your code uses `*=` on a class or structure that overloads `*`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[1709,1850],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[1859,1866],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1870,2006],"content":"The following example uses the <ph id=\"ph1\">`*=`</ph> operator to multiply one <ph id=\"ph2\">`Integer`</ph> variable by a second and assign the result to the first variable.","source":"The following example uses the `*=` operator to multiply one `Integer` variable by a second and assign the result to the first variable."},{"pos":[2137,2145],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2149,2240],"content":"<bpt id=\"p1\">[</bpt>* Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/multiplication-operator.md)</ept>","source":"[* Operator](../../../visual-basic/language-reference/operators/multiplication-operator.md)"},{"pos":[2243,2341],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>","source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)"},{"pos":[2344,2442],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[2445,2557],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[2560,2684],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[2687,2772],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}