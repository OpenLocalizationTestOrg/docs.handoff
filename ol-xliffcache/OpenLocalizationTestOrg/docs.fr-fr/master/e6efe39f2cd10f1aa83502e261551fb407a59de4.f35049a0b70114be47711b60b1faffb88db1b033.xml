{"content":"---\ntitle: \"Canceling Threads Cooperatively | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"threads, cancellation\"\nms.assetid: d2d6d5fd-e263-4fa0-847b-2fc3e0d82337\ncaps.latest.revision: 6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Canceling Threads Cooperatively\nPrior to the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)], the .NET Framework provided no built-in way to cancel a thread cooperatively after it was started. However, in [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)], you can use cancellation tokens to cancel threads, just as you can use them to cancel <xref:System.Threading.Tasks.Task?displayProperty=fullName> objects or PLINQ queries. Although the <xref:System.Threading.Thread?displayProperty=fullName> class does not offer built-in support for cancellation tokens, you can pass a token to a thread procedure by using the <xref:System.Threading.Thread> constructor that takes a <xref:System.Threading.ParameterizedThreadStart> delegate. The following example demonstrates how to do this.  \n  \n [!code-csharp[Cancellation#14](../../../samples/snippets/csharp/VS_Snippets_Misc/cancellation/cs/CooperativeThreads.cs#14)]\n [!code-vb[Cancellation#14](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cancellation/vb/CooperativeThreads.vb#14)]  \n  \n## See Also  \n [Using Threads and Threading](../../../docs/standard/threading/using-threads-and-threading.md)","nodes":[{"pos":[4,394],"embed":true,"restype":"x-metadata","content":"title: \"Canceling Threads Cooperatively | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"threads, cancellation\"\nms.assetid: d2d6d5fd-e263-4fa0-847b-2fc3e0d82337\ncaps.latest.revision: 6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"Canceling Threads Cooperatively | Microsoft Docs","nodes":[{"pos":[0,48],"content":"Canceling Threads Cooperatively | Microsoft Docs","nodes":[{"content":"Canceling Threads Cooperatively | Microsoft Docs","pos":[0,48]}]}],"path":["title"]}],"yml":true},{"pos":[401,432],"content":"Canceling Threads Cooperatively","linkify":"Canceling Threads Cooperatively","nodes":[{"content":"Canceling Threads Cooperatively","pos":[0,31]}]},{"content":"Prior to the <ph id=\"ph1\">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, the .NET Framework provided no built-in way to cancel a thread cooperatively after it was started.","pos":[433,608],"source":"Prior to the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)], the .NET Framework provided no built-in way to cancel a thread cooperatively after it was started."},{"content":"However, in <ph id=\"ph1\">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, you can use cancellation tokens to cancel threads, just as you can use them to cancel <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> objects or PLINQ queries.","pos":[609,856],"source":" However, in [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)], you can use cancellation tokens to cancel threads, just as you can use them to cancel <xref:System.Threading.Tasks.Task?displayProperty=fullName> objects or PLINQ queries."},{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Threading.Thread?displayProperty=fullName&gt;</ph> class does not offer built-in support for cancellation tokens, you can pass a token to a thread procedure by using the <ph id=\"ph2\">&lt;xref:System.Threading.Thread&gt;</ph> constructor that takes a <ph id=\"ph3\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate.","pos":[857,1159],"source":" Although the <xref:System.Threading.Thread?displayProperty=fullName> class does not offer built-in support for cancellation tokens, you can pass a token to a thread procedure by using the <xref:System.Threading.Thread> constructor that takes a <xref:System.Threading.ParameterizedThreadStart> delegate."},{"content":"The following example demonstrates how to do this.","pos":[1160,1210]},{"pos":[1475,1483],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1487,1581],"content":"<bpt id=\"p1\">[</bpt>Using Threads and Threading<ept id=\"p1\">](../../../docs/standard/threading/using-threads-and-threading.md)</ept>","source":"[Using Threads and Threading](../../../docs/standard/threading/using-threads-and-threading.md)"}]}