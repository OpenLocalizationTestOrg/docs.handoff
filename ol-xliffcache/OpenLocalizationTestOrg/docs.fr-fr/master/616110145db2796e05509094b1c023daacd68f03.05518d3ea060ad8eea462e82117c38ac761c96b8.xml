{"content":"---\ntitle: \"Object Data Type (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Object\"\n  - \"vb.Variant\"\nhelpviewer_keywords: \n  - \"object variables [Visual Basic], Object type\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Object data type\"\n  - \"Object data type [Visual Basic], reference\"\nms.assetid: 61ea4a7c-3b3d-48d4-adc4-eacfa91779b2\n---\n# Object Data Type\nHolds addresses that refer to objects. You can assign any reference type (string, array, class, or interface) to an `Object` variable. An `Object` variable can also refer to data of any value type (numeric, `Boolean`, `Char`, `Date`, structure, or enumeration).  \n  \n## Remarks  \n The `Object` data type can point to data of any data type, including any object instance your application recognizes. Use `Object` when you do not know at compile time what data type the variable might point to.  \n  \n The default value of `Object` is `Nothing` (a null reference).  \n  \n## Data Types  \n You can assign a variable, constant, or expression of any data type to an `Object` variable. To determine the data type an `Object` variable currently refers to, you can use the <xref:System.Type.GetTypeCode%2A> method of the <xref:System.Type?displayProperty=nameWithType> class. The following example illustrates this.  \n  \n```  \nDim myObject As Object  \n' Suppose myObject has now had something assigned to it.  \nDim datTyp As Integer  \ndatTyp = Type.GetTypeCode(myObject.GetType())  \n```  \n  \n The `Object` data type is a reference type. However, Visual Basic treats an `Object` variable as a value type when it refers to data of a value type.  \n  \n## Storage  \n Whatever data type it refers to, an `Object` variable does not contain the data value itself, but rather a pointer to the value. It always uses four bytes in computer memory, but this does not include the storage for the data representing the value of the variable. Because of the code that uses the pointer to locate the data, `Object` variables holding value types are slightly slower to access than explicitly typed variables.  \n  \n## Programming Tips  \n  \n-   **Interop Considerations.** If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that pointer types in other environments are not compatible with the Visual Basic `Object` type.  \n  \n-   **Performance.** A variable you declare with the `Object` type is flexible enough to contain a reference to any object. However, when you invoke a method or property on such a variable, you always incur *late binding* (at run time). To force *early binding* (at compile time) and better performance, declare the variable with a specific class name, or cast it to the specific data type.  \n  \n     When you declare an object variable, try to use a specific class type, for example <xref:System.OperatingSystem>, instead of the generalized `Object` type. You should also use the most specific class available, such as <xref:System.Windows.Forms.TextBox> instead of <xref:System.Windows.Forms.Control>, so that you can access its properties and methods. You can usually use the **Classes** list in the **Object Browser** to find available class names.  \n  \n-   **Widening.** All data types and all reference types widen to the `Object` data type. This means you can convert any type to `Object` without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error.  \n  \n     However, if you convert between value types and `Object`, Visual Basic performs operations called *boxing* and *unboxing*, which make execution slower.  \n  \n-   **Type Characters.** `Object` has no literal type character or identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Object?displayProperty=nameWithType> class.  \n  \n## Example  \n The following example illustrates an `Object` variable pointing to an object instance.  \n  \n```  \nDim objDb As Object  \nDim myCollection As New Collection()  \n' Suppose myCollection has now been populated.  \nobjDb = myCollection.Item(1)  \n```  \n  \n## See also\n\n- <xref:System.Object>\n- [Data Types](../../../visual-basic/language-reference/data-types/index.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)\n- [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n- [How to: Determine Whether Two Objects Are Related](../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-related.md)\n- [How to: Determine Whether Two Objects Are Identical](../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-identical.md)\n","nodes":[{"pos":[4,348],"embed":true,"restype":"x-metadata","content":"title: \"Object Data Type (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Object\"\n  - \"vb.Variant\"\nhelpviewer_keywords: \n  - \"object variables [Visual Basic], Object type\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Object data type\"\n  - \"Object data type [Visual Basic], reference\"\nms.assetid: 61ea4a7c-3b3d-48d4-adc4-eacfa91779b2","nodes":[{"content":"Object Data Type (Visual Basic)","nodes":[{"pos":[0,31],"content":"Object Data Type (Visual Basic)","nodes":[{"content":"Object Data Type (Visual Basic)","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[355,371],"content":"Object Data Type","linkify":"Object Data Type","nodes":[{"content":"Object Data Type","pos":[0,16]}]},{"content":"Holds addresses that refer to objects.","pos":[372,410]},{"content":"You can assign any reference type (string, array, class, or interface) to an <ph id=\"ph1\">`Object`</ph> variable.","pos":[411,506],"source":" You can assign any reference type (string, array, class, or interface) to an `Object` variable."},{"content":"An <ph id=\"ph1\">`Object`</ph> variable can also refer to data of any value type (numeric, <ph id=\"ph2\">`Boolean`</ph>, <ph id=\"ph3\">`Char`</ph>, <ph id=\"ph4\">`Date`</ph>, structure, or enumeration).","pos":[507,633],"source":" An `Object` variable can also refer to data of any value type (numeric, `Boolean`, `Char`, `Date`, structure, or enumeration)."},{"pos":[642,649],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Object`</ph> data type can point to data of any data type, including any object instance your application recognizes.","pos":[653,770],"source":"The `Object` data type can point to data of any data type, including any object instance your application recognizes."},{"content":"Use <ph id=\"ph1\">`Object`</ph> when you do not know at compile time what data type the variable might point to.","pos":[771,864],"source":" Use `Object` when you do not know at compile time what data type the variable might point to."},{"pos":[871,933],"content":"The default value of <ph id=\"ph1\">`Object`</ph> is <ph id=\"ph2\">`Nothing`</ph> (a null reference).","source":"The default value of `Object` is `Nothing` (a null reference)."},{"pos":[942,952],"content":"Data Types","linkify":"Data Types","nodes":[{"content":"Data Types","pos":[0,10]}]},{"content":"You can assign a variable, constant, or expression of any data type to an <ph id=\"ph1\">`Object`</ph> variable.","pos":[956,1048],"source":"You can assign a variable, constant, or expression of any data type to an `Object` variable."},{"content":"To determine the data type an <ph id=\"ph1\">`Object`</ph> variable currently refers to, you can use the <ph id=\"ph2\">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> class.","pos":[1049,1236],"source":" To determine the data type an `Object` variable currently refers to, you can use the <xref:System.Type.GetTypeCode%2A> method of the <xref:System.Type?displayProperty=nameWithType> class."},{"content":"The following example illustrates this.","pos":[1237,1276]},{"content":"The <ph id=\"ph1\">`Object`</ph> data type is a reference type.","pos":[1454,1497],"source":"The `Object` data type is a reference type."},{"content":"However, Visual Basic treats an <ph id=\"ph1\">`Object`</ph> variable as a value type when it refers to data of a value type.","pos":[1498,1603],"source":" However, Visual Basic treats an `Object` variable as a value type when it refers to data of a value type."},{"pos":[1612,1619],"content":"Storage","linkify":"Storage","nodes":[{"content":"Storage","pos":[0,7]}]},{"content":"Whatever data type it refers to, an <ph id=\"ph1\">`Object`</ph> variable does not contain the data value itself, but rather a pointer to the value.","pos":[1623,1751],"source":"Whatever data type it refers to, an `Object` variable does not contain the data value itself, but rather a pointer to the value."},{"content":"It always uses four bytes in computer memory, but this does not include the storage for the data representing the value of the variable.","pos":[1752,1888]},{"content":"Because of the code that uses the pointer to locate the data, <ph id=\"ph1\">`Object`</ph> variables holding value types are slightly slower to access than explicitly typed variables.","pos":[1889,2052],"source":" Because of the code that uses the pointer to locate the data, `Object` variables holding value types are slightly slower to access than explicitly typed variables."},{"pos":[2061,2077],"content":"Programming Tips","linkify":"Programming Tips","nodes":[{"content":"Programming Tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Interop Considerations.<ept id=\"p1\">**</ept>","pos":[2087,2114],"source":"**Interop Considerations.**"},{"content":"If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that pointer types in other environments are not compatible with the Visual Basic <ph id=\"ph1\">`Object`</ph> type.","pos":[2115,2338],"source":" If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that pointer types in other environments are not compatible with the Visual Basic `Object` type."},{"content":"<bpt id=\"p1\">**</bpt>Performance.<ept id=\"p1\">**</ept>","pos":[2348,2364],"source":"**Performance.**"},{"content":"A variable you declare with the <ph id=\"ph1\">`Object`</ph> type is flexible enough to contain a reference to any object.","pos":[2365,2467],"source":" A variable you declare with the `Object` type is flexible enough to contain a reference to any object."},{"content":"However, when you invoke a method or property on such a variable, you always incur <bpt id=\"p1\">*</bpt>late binding<ept id=\"p1\">*</ept> (at run time).","pos":[2468,2580],"source":" However, when you invoke a method or property on such a variable, you always incur *late binding* (at run time)."},{"content":"To force <bpt id=\"p1\">*</bpt>early binding<ept id=\"p1\">*</ept> (at compile time) and better performance, declare the variable with a specific class name, or cast it to the specific data type.","pos":[2581,2734],"source":" To force *early binding* (at compile time) and better performance, declare the variable with a specific class name, or cast it to the specific data type."},{"content":"When you declare an object variable, try to use a specific class type, for example <ph id=\"ph1\">&lt;xref:System.OperatingSystem&gt;</ph>, instead of the generalized <ph id=\"ph2\">`Object`</ph> type.","pos":[2745,2900],"source":"When you declare an object variable, try to use a specific class type, for example <xref:System.OperatingSystem>, instead of the generalized `Object` type."},{"content":"You should also use the most specific class available, such as <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> instead of <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control&gt;</ph>, so that you can access its properties and methods.","pos":[2901,3098],"source":" You should also use the most specific class available, such as <xref:System.Windows.Forms.TextBox> instead of <xref:System.Windows.Forms.Control>, so that you can access its properties and methods."},{"content":"You can usually use the <bpt id=\"p1\">**</bpt>Classes<ept id=\"p1\">**</ept> list in the <bpt id=\"p2\">**</bpt>Object Browser<ept id=\"p2\">**</ept> to find available class names.","pos":[3099,3196],"source":" You can usually use the **Classes** list in the **Object Browser** to find available class names."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3206,3219],"source":"**Widening.**"},{"content":"All data types and all reference types widen to the <ph id=\"ph1\">`Object`</ph> data type.","pos":[3220,3291],"source":" All data types and all reference types widen to the `Object` data type."},{"content":"This means you can convert any type to <ph id=\"ph1\">`Object`</ph> without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=nameWithType&gt;</ph> error.","pos":[3292,3430],"source":" This means you can convert any type to `Object` without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error."},{"pos":[3441,3592],"content":"However, if you convert between value types and <ph id=\"ph1\">`Object`</ph>, Visual Basic performs operations called <bpt id=\"p1\">*</bpt>boxing<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>unboxing<ept id=\"p2\">*</ept>, which make execution slower.","source":"However, if you convert between value types and `Object`, Visual Basic performs operations called *boxing* and *unboxing*, which make execution slower."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[3602,3622],"source":"**Type Characters.**"},{"content":"<ph id=\"ph1\">`Object`</ph> has no literal type character or identifier type character.","pos":[3623,3691],"source":"`Object` has no literal type character or identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3701,3720],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Object?displayProperty=nameWithType&gt;</ph> class.","pos":[3721,3829],"source":" The corresponding type in the .NET Framework is the <xref:System.Object?displayProperty=nameWithType> class."},{"pos":[3838,3845],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3849,3935],"content":"The following example illustrates an <ph id=\"ph1\">`Object`</ph> variable pointing to an object instance.","source":"The following example illustrates an `Object` variable pointing to an object instance."},{"pos":[4100,4108],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4135,4209],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[4212,4320],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[4323,4416],"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept>","source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)"},{"pos":[4419,4549],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"},{"pos":[4552,4724],"content":"<bpt id=\"p1\">[</bpt>How to: Determine Whether Two Objects Are Related<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-related.md)</ept>","source":"[How to: Determine Whether Two Objects Are Related](../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-related.md)"},{"pos":[4727,4903],"content":"<bpt id=\"p1\">[</bpt>How to: Determine Whether Two Objects Are Identical<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-identical.md)</ept>","source":"[How to: Determine Whether Two Objects Are Identical](../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-identical.md)"}]}