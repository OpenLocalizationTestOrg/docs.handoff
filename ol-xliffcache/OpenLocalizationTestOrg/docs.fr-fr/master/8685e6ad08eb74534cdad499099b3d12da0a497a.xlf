<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="arrays.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8685e6ad08eb74534cdad499099b3d12da0a497a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tour-of-csharp\arrays.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f391cbc65e131465619b657e4f3211514922a1d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98f7bf230dc034fd99c117e76cfa92e41780bf50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>C# Arrays - A tour of the C# language</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Arrays are the most basic collection type in the C# language</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Arrays</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">***</bpt>array<ept id="p1">***</ept> is a data structure that contains a number of variables that are accessed through computed indices.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The variables contained in an array, also called the <bpt id="p1">***</bpt>elements<ept id="p1">***</ept> of the array, are all of the same type, and this type is called the <bpt id="p2">***</bpt>element type<ept id="p2">***</ept> of the array.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Array types are reference types, and the declaration of an array variable simply sets aside space for a reference to an array instance.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Actual array instances are created dynamically at runtime using the new operator.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The new operation specifies the <bpt id="p1">***</bpt>length<ept id="p1">***</ept> of the new array instance, which is then fixed for the lifetime of the instance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The indices of the elements of an array range from <ph id="ph1">`0`</ph> to <ph id="ph2">`Length - 1`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`new`</ph> operator automatically initializes the elements of an array to their default value, which, for example, is zero for all numeric types and <ph id="ph2">`null`</ph> for all reference types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example creates an array of <ph id="ph1">`int`</ph> elements, initializes the array, and prints out the contents of the array.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This example creates and operates on a <bpt id="p1">***</bpt>single-dimensional array<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>C# also supports <bpt id="p1">***</bpt>multi-dimensional arrays<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The number of dimensions of an array type, also known as the <bpt id="p1">***</bpt>rank<ept id="p1">***</ept> of the array type, is one plus the number of commas written between the square brackets of the array type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example allocates a single-dimensional, a two-dimensional, and a three-dimensional array, respectively.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`a1`</ph> array contains 10 elements, the <ph id="ph2">`a2`</ph> array contains 50 (10 × 5) elements, and the <ph id="ph3">`a3`</ph> array contains 100 (10 × 5 × 2) elements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The element type of an array can be any type, including an array type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An array with elements of an array type is sometimes called a <bpt id="p1">***</bpt>jagged array<ept id="p1">***</ept> because the lengths of the element arrays do not all have to be the same.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example allocates an array of arrays of <ph id="ph1">`int`</ph>:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first line creates an array with three elements, each of type <ph id="ph1">`int[]`</ph> and each with an initial value of <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The subsequent lines then initialize the three elements with references to individual array instances of varying lengths.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The new operator permits the initial values of the array elements to be specified using an <bpt id="p1">***</bpt>array initializer<ept id="p1">***</ept>, which is a list of expressions written between the delimiters <ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example allocates and initializes an <ph id="ph1">`int[]`</ph> with three elements.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that the length of the array is inferred from the number of expressions between { and }.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Local variable and field declarations can be shortened further such that the array type does not have to be restated.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Both of the previous examples are equivalent to the following:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous<ept id="p1">](structs.md)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Next<ept id="p2">](interfaces.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>