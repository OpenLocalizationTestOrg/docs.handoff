{"content":"---\ntitle: \"Byte Data Type (Visual Basic)\"\nms.date: 01/31/2018\nf1_keywords: \n  - \"vb.Byte\"\nhelpviewer_keywords: \n  - \"Byte data type\"\n  - \"data types [Visual Basic], assigning\"\nms.assetid: eed44dff-eaee-4937-a89f-444e418e74f6\n---\n# Byte data type (Visual Basic)\nHolds unsigned 8-bit (1-byte) integers that range in value from 0 through 255.\n\n## Remarks\n\nUse the `Byte` data type to contain binary data.  \n  \nThe default value of `Byte` is 0.\n\n## Literal assignments\n\nYou can declare and initialize a `Byte` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal. If the integral literal is outside the range of a `Byte` (that is, if it is less than <xref:System.Byte.MinValue?displayProperty=nameWithType> or greater than <xref:System.Byte.MaxValue?displayProperty=nameWithType>), a compilation error occurs.\n\nIn the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [Integer](integer-data-type.md) to `byte` values.\n\n[!code-vb[Byte](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Byte)]\n\n> [!NOTE]\n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[Byte](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#ByteS)]  \n\nStarting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits. For example:\n\n```vb\nDim number As Byte = &H_6A\n```\n\n[!INCLUDE [supporting-underscores](../../../../includes/vb-separator-langversion.md)]\n\n## Programming tips\n\n-   **Negative Numbers.** Because `Byte` is an unsigned type, it cannot represent a negative number. If you use the unary minus (`-`) operator on an expression that evaluates to type `Byte`, Visual Basic converts the expression to `Short` first.\n  \n-   **Format Conversions.** When Visual Basic reads or writes files, or when it calls DLLs, methods, and properties, it can automatically convert between data formats. Binary data stored in `Byte` variables and arrays is preserved during such format conversions. You should not use a `String` variable for binary data, because its contents can be corrupted during conversion between ANSI and Unicode formats.\n\n-   **Widening.** The `Byte` data type widens to `Short`, `UShort`, `Integer`, `UInteger`, `Long`, `ULong`, `Decimal`, `Single`, or `Double`. This means you can convert `Byte` to any of these types without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error.\n  \n-   **Type Characters.** `Byte` has no literal type character or identifier type character.\n\n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Byte?displayProperty=nameWithType> structure.\n\n## Example\n\n In the following example, `b` is a `Byte` variable. The statements demonstrate the range of the variable and the application of bit-shift operators to it.\n\n [!code-vb[VbVbalrDataTypes#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDataTypes/VB/Class1.vb#16)]  \n\n## See also\n\n- <xref:System.Byte?displayProperty=nameWithType>\n- [Data Types](../../../visual-basic/language-reference/data-types/index.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)\n- [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n","nodes":[{"pos":[4,225],"embed":true,"restype":"x-metadata","content":"title: \"Byte Data Type (Visual Basic)\"\nms.date: 01/31/2018\nf1_keywords: \n  - \"vb.Byte\"\nhelpviewer_keywords: \n  - \"Byte data type\"\n  - \"data types [Visual Basic], assigning\"\nms.assetid: eed44dff-eaee-4937-a89f-444e418e74f6","nodes":[{"content":"Byte Data Type (Visual Basic)","nodes":[{"pos":[0,29],"content":"Byte Data Type (Visual Basic)","nodes":[{"content":"Byte Data Type (Visual Basic)","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[232,261],"content":"Byte data type (Visual Basic)","linkify":"Byte data type (Visual Basic)","nodes":[{"content":"Byte data type (Visual Basic)","pos":[0,29]}]},{"content":"Holds unsigned 8-bit (1-byte) integers that range in value from 0 through 255.","pos":[262,340]},{"pos":[345,352],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[354,402],"content":"Use the <ph id=\"ph1\">`Byte`</ph> data type to contain binary data.","source":"Use the `Byte` data type to contain binary data."},{"pos":[408,441],"content":"The default value of <ph id=\"ph1\">`Byte`</ph> is 0.","source":"The default value of `Byte` is 0."},{"pos":[446,465],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`Byte`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","pos":[467,646],"source":"You can declare and initialize a `Byte` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"If the integral literal is outside the range of a <ph id=\"ph1\">`Byte`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Byte.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Byte.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.","pos":[647,892],"source":" If the integral literal is outside the range of a `Byte` (that is, if it is less than <xref:System.Byte.MinValue?displayProperty=nameWithType> or greater than <xref:System.Byte.MaxValue?displayProperty=nameWithType>), a compilation error occurs."},{"pos":[894,1087],"content":"In the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>Integer<ept id=\"p1\">](integer-data-type.md)</ept> to <ph id=\"ph1\">`byte`</ph> values.","source":"In the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [Integer](integer-data-type.md) to `byte` values."},{"pos":[1206,1421],"content":"[!NOTE]\nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[8,213],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[1423,1580],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"content":"Starting with Visual Basic 15.5, you can also use the underscore character (<ph id=\"ph1\">`_`</ph>) as a leading separator between the prefix and the hexadecimal, binary, or octal digits.","pos":[1700,1868],"source":"Starting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits."},{"content":"For example:","pos":[1869,1881]},{"pos":[2011,2027],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Negative Numbers.<ept id=\"p1\">**</ept>","pos":[2033,2054],"source":"**Negative Numbers.**"},{"content":"Because <ph id=\"ph1\">`Byte`</ph> is an unsigned type, it cannot represent a negative number.","pos":[2055,2129],"source":" Because `Byte` is an unsigned type, it cannot represent a negative number."},{"content":"If you use the unary minus (<ph id=\"ph1\">`-`</ph>) operator on an expression that evaluates to type <ph id=\"ph2\">`Byte`</ph>, Visual Basic converts the expression to <ph id=\"ph3\">`Short`</ph> first.","pos":[2130,2274],"source":" If you use the unary minus (`-`) operator on an expression that evaluates to type `Byte`, Visual Basic converts the expression to `Short` first."},{"content":"<bpt id=\"p1\">**</bpt>Format Conversions.<ept id=\"p1\">**</ept>","pos":[2282,2305],"source":"**Format Conversions.**"},{"content":"When Visual Basic reads or writes files, or when it calls DLLs, methods, and properties, it can automatically convert between data formats.","pos":[2306,2445]},{"content":"Binary data stored in <ph id=\"ph1\">`Byte`</ph> variables and arrays is preserved during such format conversions.","pos":[2446,2540],"source":" Binary data stored in `Byte` variables and arrays is preserved during such format conversions."},{"content":"You should not use a <ph id=\"ph1\">`String`</ph> variable for binary data, because its contents can be corrupted during conversion between ANSI and Unicode formats.","pos":[2541,2686],"source":" You should not use a `String` variable for binary data, because its contents can be corrupted during conversion between ANSI and Unicode formats."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[2692,2705],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`Byte`</ph> data type widens to <ph id=\"ph2\">`Short`</ph>, <ph id=\"ph3\">`UShort`</ph>, <ph id=\"ph4\">`Integer`</ph>, <ph id=\"ph5\">`UInteger`</ph>, <ph id=\"ph6\">`Long`</ph>, <ph id=\"ph7\">`ULong`</ph>, <ph id=\"ph8\">`Decimal`</ph>, <ph id=\"ph9\">`Single`</ph>, or <ph id=\"ph10\">`Double`</ph>.","pos":[2706,2829],"source":" The `Byte` data type widens to `Short`, `UShort`, `Integer`, `UInteger`, `Long`, `ULong`, `Decimal`, `Single`, or `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`Byte`</ph> to any of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=nameWithType&gt;</ph> error.","pos":[2830,2976],"source":" This means you can convert `Byte` to any of these types without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[2984,3004],"source":"**Type Characters.**"},{"content":"<ph id=\"ph1\">`Byte`</ph> has no literal type character or identifier type character.","pos":[3005,3071],"source":"`Byte` has no literal type character or identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3077,3096],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Byte?displayProperty=nameWithType&gt;</ph> structure.","pos":[3097,3207],"source":" The corresponding type in the .NET Framework is the <xref:System.Byte?displayProperty=nameWithType> structure."},{"pos":[3212,3219],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, <ph id=\"ph1\">`b`</ph> is a <ph id=\"ph2\">`Byte`</ph> variable.","pos":[3222,3273],"source":"In the following example, `b` is a `Byte` variable."},{"content":"The statements demonstrate the range of the variable and the application of bit-shift operators to it.","pos":[3274,3376]},{"pos":[3503,3511],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3565,3639],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[3642,3750],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[3753,3846],"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept>","source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)"},{"pos":[3849,3979],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}