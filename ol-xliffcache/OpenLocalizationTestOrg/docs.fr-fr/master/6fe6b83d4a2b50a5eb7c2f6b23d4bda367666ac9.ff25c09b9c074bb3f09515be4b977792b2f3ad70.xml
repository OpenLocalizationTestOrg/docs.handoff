{"content":"---\ntitle: Classes and Objects in C# | A tour of the C# Language\ndescription: New to C#? Read this overview of classes, objects and inheritance\nkeywords: .NET, csharp, class, instance, object, inheritance, polymorphism\nauthor: BillWagner\nms.author: wiwagn\nms.date: 08/10/2016\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: 63a89bde-0f05-4bc4-b0cd-4f693854f0cd\n---\n# Classes and objects\n\n*Classes* are the most fundamental of C#’s types. A class is a data structure that combines state (fields) and actions (methods and other function members) in a single unit. A class provides a definition for dynamically created *instances* of the class, also known as *objects*. Classes support *inheritance* and *polymorphism*, mechanisms whereby *derived classes* can extend and specialize *base classes*.\n\nNew classes are created using class declarations. A class declaration starts with a header that specifies the attributes and modifiers of the class, the name of the class, the base class (if given), and the interfaces implemented by the class. The header is followed by the class body, which consists of a list of member declarations written between the delimiters `{` and `}`.\n\nThe following is a declaration of a simple class named `Point`:\n\n[!code-csharp[PointClass](../../../samples/snippets/csharp/tour/classes-and-objects/Point.cs#L3-L11)]\n\nInstances of classes are created using the `new` operator, which allocates memory for a new instance, invokes a constructor to initialize the instance, and returns a reference to the instance. The following statements create two Point objects and store references to those objects in two variables:\n\n[!code-csharp[PointExample](../../../samples/snippets/csharp/tour/classes-and-objects/Program.cs#L9-L10)]\n\nThe memory occupied by an object is automatically reclaimed when the object is no longer reachable. It is neither necessary nor possible to explicitly deallocate objects in C#.\n\n## Members\n\nThe members of a class are either static members or instance members. Static members belong to classes, and instance members belong to objects (instances of classes).\n\nThe following provides an overview of the kinds of members a class can contain.\n\n* Constants\n    - Constant values associated with the class\n* Fields\n    - Variables of the class\n* Methods\n    - Computations and actions that can be performed by the class\n* Properties\n    - Actions associated with reading and writing named properties of the class\n* Indexers\n    - Actions associated with indexing instances of the class like an array\n* Events\n    - Notifications that can be generated by the class\n* Operators\n    - Conversions and expression operators supported by the class\n* Constructors\n    - Actions required to initialize instances of the class or the class itself\n* Finalizers\n    - Actions to perform before instances of the class are permanently discarded\n* Types\n    - Nested types declared by the class\n\n## Accessibility\n\nEach member of a class has an associated accessibility, which controls the regions of program text that are able to access the member. There are five possible forms of accessibility. These are summarized below.\n\n* `public`\n    - Access not limited\n* `protected`\n    - Access limited to this class or classes derived from this class\n* `internal`\n    - Access limited to the current assembly (.exe, .dll, etc.)\n* `protected internal`\n    - Access limited to the containing class or classes derived from the containing class\n* `private`\n    - Access limited to this class\n\n## Type parameters\n\nA class definition may specify a set of type parameters by following the class name with angle brackets enclosing a list of type parameter names. The type parameters can then be used in the body of the class declarations to define the members of the class. In the following example, the type parameters of `Pair` are `TFirst` and `TSecond`:\n\n[!code-csharp[Pair](../../../samples/snippets/csharp/tour/classes-and-objects/Pair.cs#L3-L7)]\n\nA class type that is declared to take type parameters is called a *generic class type*. Struct, interface and delegate types can also be generic.\nWhen the generic class is used, type arguments must be provided for each of the type parameters:\n\n[!code-csharp[PairExample](../../../samples/snippets/csharp/tour/classes-and-objects/Program.cs#L15-L17)]\n\nA generic type with type arguments provided, like `Pair<int,string>` above, is called a *constructed type*.\n\n## Base classes\n\nA class declaration may specify a base class by following the class name and type parameters with a colon and the name of the base class. Omitting a base class specification is the same as deriving from type `object`. In the following example, the base class of `Point3D` is `Point`, and the base class of `Point` is `object`:\n\n[!code-csharp[Point3DClass](../../../samples/snippets/csharp/tour/classes-and-objects/Point.cs#L3-L20)]\n\nA class inherits the members of its base class. Inheritance means that a class implicitly contains all members of its base class, except for the instance and static constructors, and the finalizers of the base class. A derived class can add new members to those it inherits, but it cannot remove the definition of an inherited member. In the previous example, `Point3D` inherits the `x` and `y` fields from `Point`, and every `Point3D` instance contains three fields, `x`, `y`, and `z`.\n\nAn implicit conversion exists from a class type to any of its base class types. Therefore, a variable of a class type can reference an instance of that class or an instance of any derived class. For example, given the previous class declarations, a variable of type `Point` can reference either a `Point` or a `Point3D`:\n\n[!code-csharp[Point3DExample](../../../samples/snippets/csharp/tour/classes-and-objects/Program.cs#L22-L23)]\n\n## Fields\n\nA *field* is a variable that is associated with a class or with an instance of a class.\n\nA field declared with the static modifier defines a static field. A static field identifies exactly one storage location. No matter how many instances of a class are created, there is only ever one copy of a static field.\n\nA field declared without the static modifier defines an instance field. Every instance of a class contains a separate copy of all the instance fields of that class.\n\nIn the following example, each instance of the `Color` class has a separate copy of the `r`, `g`, and `b` instance fields, but there is only one copy of the `Black`, `White`, `Red`, `Green`, and `Blue` static fields:\n\n[!code-csharp[ColorClass](../../../samples/snippets/csharp/tour/classes-and-objects/Color.cs#L3-L17)]\n\nAs shown in the previous example, *read-only fields* may be declared with a `readonly` modifier. Assignment to a `readonly` field can only occur as part of the field’s declaration or in a constructor in the same class.\n\n## Methods\n\nA *method* is a member that implements a computation or action that can be performed by an object or class. *Static methods* are accessed through the class. *Instance methods* are accessed through instances of the class.\n\nMethods may have a list of *parameters*, which represent values or variable references passed to the method, and a *return type*, which specifies the type of the value computed and returned by the method. A method’s return type is `void` if it does not return a value.\n\nLike types, methods may also have a set of type parameters, for which type arguments must be specified when the method is called. Unlike types, the type arguments can often be inferred from the arguments of a method call and need not be explicitly given.\n\nThe *signature* of a method must be unique in the class in which the method is declared. The signature of a method consists of the name of the method, the number of type parameters and the number, modifiers, and types of its parameters. The signature of a method does not include the return type.\n\n### Parameters\n\nParameters are used to pass values or variable references to methods. The parameters of a method get their actual values from the *arguments* that are specified when the method is invoked. There are four kinds of parameters: value parameters, reference parameters, output parameters, and parameter arrays.\n\nA *value parameter* is used for passing input arguments. A value parameter corresponds to a local variable that gets its initial value from the argument that was passed for the parameter. Modifications to a value parameter do not affect the argument that was passed for the parameter. \n\nValue parameters can be optional, by specifying a default value so that corresponding arguments can be omitted.\n\nA *reference parameter* is used for passing arguments by reference. The argument passed for a reference parameter must be a variable with a definite value, and during execution of the method, the reference parameter represents the same storage location as the argument variable. A reference parameter is declared with the `ref` modifier. The following example shows the use of `ref` parameters.\n\n[!code-csharp[swapExample](../../../samples/snippets/csharp/tour/classes-and-objects/RefExample.cs#L3-L18)]\n\nAn *output parameter* is used for passing arguments by reference. It's similar to a reference parameter, except that it doesn't require that you explicitly assign a value to the caller-provided argument. An output parameter is declared with the `out` modifier. The following example shows the use of `out` parameters using the syntax introduced in C# 7.\n\n[!code-csharp[OutExample](../../../samples/snippets/csharp/tour/classes-and-objects/OutExample.cs#L3-L17)]\n\nA *parameter array* permits a variable number of arguments to be passed to a method. A parameter array is declared with the `params` modifier. Only the last parameter of a method can be a parameter array, and the type of a parameter array must be a single-dimensional array type. The Write and WriteLine methods of the `@System.Console` class are good examples of parameter array usage. They are declared as follows.\n\n[!code-csharp[ConsoleExample](../../../samples/snippets/csharp/tour/classes-and-objects/Program.cs#L78-L83)]\n\nWithin a method that uses a parameter array, the parameter array behaves exactly like a regular parameter of an array type. However, in an invocation of a method with a parameter array, it is possible to pass either a single argument of the parameter array type or any number of arguments of the element type of the parameter array. In the latter case, an array instance is automatically created and initialized with the given arguments. This example\n\n[!code-csharp[StringFormat](../../../samples/snippets/csharp/tour/classes-and-objects/Program.cs#L55-L55)]\n\nis equivalent to writing the following.\n\n[!code-csharp[StringFormat2](../../../samples/snippets/csharp/tour/classes-and-objects/Program.cs#L30-L35)]\n\n### Method body and local variables\n\nA method’s body specifies the statements to execute when the method is invoked.\n\nA method body can declare variables that are specific to the invocation of the method. Such variables are called *local variables*. A local variable declaration specifies a type name, a variable name, and possibly an initial value. The following example declares a local variable `i` with an initial value of zero and a local variable `j` with no initial value.\n\n[!code-csharp[Squares](../../../samples/snippets/csharp/tour/classes-and-objects/Squares.cs#L3-L17)]\n\nC# requires a local variable to be *definitely assigned* before its value can be obtained. For example, if the declaration of the previous `i` did not include an initial value, the compiler would report an error for the subsequent usages of `i` because `i` would not be definitely assigned at those points in the program.\n\nA method can use `return` statements to return control to its caller. In a method returning `void`, `return` statements cannot specify an expression. In a method returning non-void, `return` statements must include an expression that computes the return value.\n\n### Static and instance methods\n\nA method declared with a static modifier is a *static method*. A static method does not operate on a specific instance and can only directly access static members.\n\nA method declared without a static modifier is an *instance method*. An instance method operates on a specific instance and can access both static and instance members. The instance on which an instance method was invoked can be explicitly accessed as `this`. It is an error to refer to `this` in a static method.\n\nThe following `Entity` class has both static and instance members.\n\n[!code-csharp[Entity](../../../samples/snippets/csharp/tour/classes-and-objects/Entity.cs#L16-L36)]\n\nEach `Entity` instance contains a serial number (and presumably some other information that is not shown here). The `Entity` constructor (which is like an instance method) initializes the new instance with the next available serial number. Because the constructor is an instance member, it is permitted to access both the `serialNo` instance field and the `nextSerialNo` static field.\n\nThe `GetNextSerialNo` and `SetNextSerialNo` static methods can access the `nextSerialNo` static field, but it would be an error for them to directly access the `serialNo` instance field.\n\nThe following example shows the use of the Entity class.\n\n[!code-csharp[EntityExample](../../../samples/snippets/csharp/tour/classes-and-objects/Entity.cs#L3-L15)]\n\nNote that the `SetNextSerialNo` and `GetNextSerialNo` static methods are invoked on the class whereas the `GetSerialNo` instance method is invoked on instances of the class.\n\n### Virtual, override, and abstract methods\n\nWhen an instance method declaration includes a `virtual` modifier, the method is said to be a *virtual method*. When no virtual modifier is present, the method is said to be a *nonvirtual method*.\n\nWhen a virtual method is invoked, the *run-time type* of the instance for which that invocation takes place determines the actual method implementation to invoke. In a nonvirtual method invocation, the *compile-time type* of the instance is the determining factor.\n\nA virtual method can be *overridden* in a derived class. When an instance method declaration includes an override modifier, the method overrides an inherited virtual method with the same signature. Whereas a virtual method declaration introduces a new method, an override method declaration specializes an existing inherited virtual method by providing a new implementation of that method.\n\nAn *abstract method* is a virtual method with no implementation. An abstract method is declared with the abstract modifier and is permitted only in a class that is also declared abstract. An abstract method must be overridden in every non-abstract derived class.\n\nThe following example declares an abstract class, `Expression`, which represents an expression tree node, and three derived classes, `Constant`, `VariableReference`, and `Operation`, which implement expression tree nodes for constants, variable references, and arithmetic operations. (This is similar to, but not to be confused with the expression tree types).\n\n[!code-csharp[ExpressionClass](../../../samples/snippets/csharp/tour/classes-and-objects/Expressions.cs#L3-L61)]\n\nThe previous four classes can be used to model arithmetic expressions. For example, using instances of these classes, the expression `x + 3` can be represented as follows.\n\n[!code-csharp[ExpressionExample](../../../samples/snippets/csharp/tour/classes-and-objects/Program.cs#L40-L43)]\n\nThe `Evaluate` method of an `Expression` instance is invoked to evaluate the given expression and produce a `double` value. The method takes a `Dictionary` argument that contains variable names (as keys of the entries) and values (as values of the entries). Because `Evaluate` is an abstract method, non-abstract classes derived from `Expression` must override `Evaluate`.\n\nA `Constant`'s implementation of `Evaluate` simply returns the stored constant. A `VariableReference`'s implementation looks up the variable name in the dictionary and returns the resulting value. An `Operation`'s implementation first evaluates the left and right operands (by recursively invoking their `Evaluate` methods) and then performs the given arithmetic operation.\n\nThe following program uses the `Expression` classes to evaluate the expression `x * (y + 2)` for different values of `x` and `y`.\n\n[!code-csharp[ExpressionUsage](../../../samples/snippets/csharp/tour/classes-and-objects/Expressions.cs#L66-L89)]\n\n### Method overloading\n\nMethod *overloading* permits multiple methods in the same class to have the same name as long as they have unique signatures. When compiling an invocation of an overloaded method, the compiler uses *overload resolution* to determine the specific method to invoke. Overload resolution finds the one method that best matches the arguments or reports an error if no single best match can be found. The following example shows overload resolution in effect. The comment for each invocation in the `Main` method shows which method is actually invoked.\n\n[!code-csharp[OverloadUsage](../../../samples/snippets/csharp/tour/classes-and-objects/Overloading.cs#L3-L41)]\n\nAs shown by the example, a particular method can always be selected by explicitly casting the arguments to the exact parameter types and/or explicitly supplying type arguments.\n\n## Other function members\n\nMembers that contain executable code are collectively known as the *function members* of a class. The preceding section describes methods, which are the primary kind of function members. This section describes the other kinds of function members supported by C#: constructors, properties, indexers, events, operators, and finalizers.\n\nThe following shows a generic class called List<T>, which implements a growable list of objects. The class contains several examples of the most common kinds of function members.\n\n[!code-csharp[ListClass](../../../samples/snippets/csharp/tour/classes-and-objects/ListBasedExamples.cs#L4-L89)]\n\n### Constructors\n\nC# supports both instance and static constructors. An *instance constructor* is a member that implements the actions required to initialize an instance of a class. A *static constructor* is a member that implements the actions required to initialize a class itself when it is first loaded.\n\nA constructor is declared like a method with no return type and the same name as the containing class. If a constructor declaration includes a static modifier, it declares a static constructor. Otherwise, it declares an instance constructor.\n\nInstance constructors can be overloaded, and can have optional parameters. For example, the `List<T>` class declares two instance constructors, one with no parameters and one that takes an `int` parameter. Instance constructors are invoked using the `new` operator. The following statements allocate two `List<string>` instances using the constructor of the `List` class with and without the optional argument.\n\n[!code-csharp[ListExample1](../../../samples/snippets/csharp/tour/classes-and-objects/ListBasedExamples.cs#L95-L96)]\n\nUnlike other members, instance constructors are not inherited, and a class has no instance constructors other than those actually declared in the class. If no instance constructor is supplied for a class, then an empty one with no parameters is automatically provided.\n\n### Properties\n\n*Properties* are a natural extension of fields. Both are named members with associated types, and the syntax for accessing fields and properties is the same. However, unlike fields, properties do not denote storage locations. Instead, properties have *accessors* that specify the statements to be executed when their values are read or written.\n\nA property is declared like a field, except that the declaration ends with a get accessor and/or a set accessor written between the delimiters `{` and `}` instead of ending in a semicolon. A property that has both a get accessor and a set accessor is a *read-write property*, a property that has only a get accessor is a *read-only property*, and a property that has only a set accessor is a *write-only property*.\n\nA get accessor corresponds to a parameterless method with a return value of the property type. Except as the target of an assignment, when a property is referenced in an expression, the get accessor of the property is invoked to compute the value of the property.\n\nA set accessor corresponds to a method with a single parameter named value and no return type. When a property is referenced as the target of an assignment or as the operand of ++ or --, the set accessor is invoked with an argument that provides the new value.\n\nThe `List<T>` class declares two properties, Count and Capacity, which are read-only and read-write, respectively. The following is an example of use of these properties.\n\n[!code-csharp[ListExample2](../../../samples/snippets/csharp/tour/classes-and-objects/ListBasedExamples.cs#L101-L104)]\n\nSimilar to fields and methods, C# supports both instance properties and static properties. Static properties are declared with the static modifier, and instance properties are declared without it.\n\nThe accessor(s) of a property can be virtual. When a property declaration includes a `virtual`, `abstract`, or `override` modifier, it applies to the accessor(s) of the property.\n\n### Indexers\n\nAn *indexer* is a member that enables objects to be indexed in the same way as an array. An indexer is declared like a property except that the name of the member is this followed by a parameter list written between the delimiters `[` and `]`. The parameters are available in the accessor(s) of the indexer. Similar to properties, indexers can be read-write, read-only, and write-only, and the accessor(s) of an indexer can be virtual.\n\nThe `List` class declares a single read-write indexer that takes an `int` parameter. The indexer makes it possible to index `List` instances with `int` values. For example:\n\n[!code-csharp[ListExample3](../../../samples/snippets/csharp/tour/classes-and-objects/ListBasedExamples.cs#L109-L117)]\n\nIndexers can be overloaded, meaning that a class can declare multiple indexers as long as the number or types of their parameters differ.\n\n### Events\n\nAn *event* is a member that enables a class or object to provide notifications. An event is declared like a field except that the declaration includes an event keyword and the type must be a delegate type.\n\nWithin a class that declares an event member, the event behaves just like a field of a delegate type (provided the event is not abstract and does not declare accessors). The field stores a reference to a delegate that represents the event handlers that have been added to the event. If no event handlers are present, the field is `null`.\n\nThe `List<T>` class declares a single event member called `Changed`, which indicates that a new item has been added to the list. The Changed event is raised by the `OnChanged` virtual method, which first checks whether the event is `null` (meaning that no handlers are present). The notion of raising an event is precisely equivalent to invoking the delegate represented by the event—thus, there are no special language constructs for raising events.\n\nClients react to events through *event handlers*. Event handlers are attached using the `+=` operator and removed using the `-=` operator. The following example attaches an event handler to the `Changed` event of a `List<string>`.\n\n[!code-csharp[EventExample](../../../samples/snippets/csharp/tour/classes-and-objects/ListBasedExamples.cs#L132-L148)]\n\nFor advanced scenarios where control of the underlying storage of an event is desired, an event declaration can explicitly provide `add` and `remove` accessors, which are somewhat similar to the `set` accessor of a property.\n\n### Operators\n\nAn *operator* is a member that defines the meaning of applying a particular expression operator to instances of a class. Three kinds of operators can be defined: unary operators, binary operators, and conversion operators. All operators must be declared as `public` and `static`.\n\nThe `List<T>` class declares two operators, `operator ==` and `operator !=`, and thus gives new meaning to expressions that apply those operators to `List` instances. Specifically, the operators define equality of two `List<T>` instances as comparing each of the contained objects using their Equals methods. The following example uses the `==` operator to compare two `List<int>` instances.\n\n[!code-csharp[OperatorExample](../../../samples/snippets/csharp/tour/classes-and-objects/ListBasedExamples.cs#L121-L129)]\n\nThe first `Console.WriteLine` outputs `True` because the two lists contain the same number of objects with the same values in the same order. Had `List<T>` not defined `operator ==`, the first `Console.WriteLine` would have output `False` because `a` and `b` reference different `List<int>` instances.\n\n### Finalizers\n\nA *finalizer* is a member that implements the actions required to finalize an instance of a class. Finalizers cannot have parameters, they cannot have accessibility modifiers, and they cannot be invoked explicitly. The finalizer for an instance is invoked automatically during garbage collection.\n\nThe garbage collector is allowed wide latitude in deciding when to collect objects and run finalizers. Specifically, the timing of finalizer invocations is not deterministic, and finalizers may be executed on any thread. For these and other reasons, classes should implement finalizers only when no other solutions are feasible.\n\nThe `using` statement provides a better approach to object destruction.\n\n>[!div class=\"step-by-step\"]\n[Previous](statements.md)\n[Next](structs.md)\n","nodes":[{"pos":[4,405],"embed":true,"restype":"x-metadata","content":"title: Classes and Objects in C# | A tour of the C# Language\ndescription: New to C#? Read this overview of classes, objects and inheritance\nkeywords: .NET, csharp, class, instance, object, inheritance, polymorphism\nauthor: BillWagner\nms.author: wiwagn\nms.date: 08/10/2016\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: 63a89bde-0f05-4bc4-b0cd-4f693854f0cd","nodes":[{"content":"Classes and Objects in C# | A tour of the C# Language","nodes":[{"pos":[0,53],"content":"Classes and Objects in C# | A tour of the C# Language","nodes":[{"content":"Classes and Objects in C# | A tour of the C# Language","pos":[0,53]}]}],"path":["title"]},{"content":"New to C#? Read this overview of classes, objects and inheritance","nodes":[{"pos":[0,65],"content":"New to C#? Read this overview of classes, objects and inheritance","nodes":[{"content":"New to C#? Read this overview of classes, objects and inheritance","pos":[0,65],"nodes":[{"content":"New to C#?","pos":[0,10]},{"content":"Read this overview of classes, objects and inheritance","pos":[11,65]}]}]}],"path":["description"]},{"content":".NET, csharp, class, instance, object, inheritance, polymorphism","nodes":[{"pos":[0,64],"content":".NET, csharp, class, instance, object, inheritance, polymorphism","nodes":[{"content":".NET, csharp, class, instance, object, inheritance, polymorphism","pos":[0,64]}]}],"path":["keywords"]}],"yml":true},{"pos":[412,431],"content":"Classes and objects","linkify":"Classes and objects","nodes":[{"content":"Classes and objects","pos":[0,19]}]},{"content":"<bpt id=\"p1\">*</bpt>Classes<ept id=\"p1\">*</ept> are the most fundamental of C#’s types.","pos":[433,482],"source":"*Classes* are the most fundamental of C#’s types."},{"content":"A class is a data structure that combines state (fields) and actions (methods and other function members) in a single unit.","pos":[483,606]},{"content":"A class provides a definition for dynamically created <bpt id=\"p1\">*</bpt>instances<ept id=\"p1\">*</ept> of the class, also known as <bpt id=\"p2\">*</bpt>objects<ept id=\"p2\">*</ept>.","pos":[607,711],"source":" A class provides a definition for dynamically created *instances* of the class, also known as *objects*."},{"content":"Classes support <bpt id=\"p1\">*</bpt>inheritance<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>polymorphism<ept id=\"p2\">*</ept>, mechanisms whereby <bpt id=\"p3\">*</bpt>derived classes<ept id=\"p3\">*</ept> can extend and specialize <bpt id=\"p4\">*</bpt>base classes<ept id=\"p4\">*</ept>.","pos":[712,840],"source":" Classes support *inheritance* and *polymorphism*, mechanisms whereby *derived classes* can extend and specialize *base classes*."},{"content":"New classes are created using class declarations.","pos":[842,891]},{"content":"A class declaration starts with a header that specifies the attributes and modifiers of the class, the name of the class, the base class (if given), and the interfaces implemented by the class.","pos":[892,1085]},{"content":"The header is followed by the class body, which consists of a list of member declarations written between the delimiters <ph id=\"ph1\">`{`</ph> and <ph id=\"ph2\">`}`</ph>.","pos":[1086,1219],"source":" The header is followed by the class body, which consists of a list of member declarations written between the delimiters `{` and `}`."},{"pos":[1221,1284],"content":"The following is a declaration of a simple class named <ph id=\"ph1\">`Point`</ph>:","source":"The following is a declaration of a simple class named `Point`:"},{"content":"Instances of classes are created using the <ph id=\"ph1\">`new`</ph> operator, which allocates memory for a new instance, invokes a constructor to initialize the instance, and returns a reference to the instance.","pos":[1389,1581],"source":"Instances of classes are created using the `new` operator, which allocates memory for a new instance, invokes a constructor to initialize the instance, and returns a reference to the instance."},{"content":"The following statements create two Point objects and store references to those objects in two variables:","pos":[1582,1687]},{"content":"The memory occupied by an object is automatically reclaimed when the object is no longer reachable.","pos":[1796,1895]},{"content":"It is neither necessary nor possible to explicitly deallocate objects in C#.","pos":[1896,1972]},{"pos":[1977,1984],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"content":"The members of a class are either static members or instance members.","pos":[1986,2055]},{"content":"Static members belong to classes, and instance members belong to objects (instances of classes).","pos":[2056,2152]},{"content":"The following provides an overview of the kinds of members a class can contain.","pos":[2154,2233]},{"content":"Constants","pos":[2237,2246]},{"content":"Constant values associated with the class","pos":[2253,2294]},{"content":"Fields","pos":[2297,2303]},{"content":"Variables of the class","pos":[2310,2332]},{"content":"Methods","pos":[2335,2342]},{"content":"Computations and actions that can be performed by the class","pos":[2349,2408]},{"content":"Properties","pos":[2411,2421]},{"content":"Actions associated with reading and writing named properties of the class","pos":[2428,2501]},{"content":"Indexers","pos":[2504,2512]},{"content":"Actions associated with indexing instances of the class like an array","pos":[2519,2588]},{"content":"Events","pos":[2591,2597]},{"content":"Notifications that can be generated by the class","pos":[2604,2652]},{"content":"Operators","pos":[2655,2664]},{"content":"Conversions and expression operators supported by the class","pos":[2671,2730]},{"content":"Constructors","pos":[2733,2745]},{"content":"Actions required to initialize instances of the class or the class itself","pos":[2752,2825]},{"content":"Finalizers","pos":[2828,2838]},{"content":"Actions to perform before instances of the class are permanently discarded","pos":[2845,2919]},{"content":"Types","pos":[2922,2927]},{"content":"Nested types declared by the class","pos":[2934,2968]},{"pos":[2973,2986],"content":"Accessibility","linkify":"Accessibility","nodes":[{"content":"Accessibility","pos":[0,13]}]},{"content":"Each member of a class has an associated accessibility, which controls the regions of program text that are able to access the member.","pos":[2988,3122]},{"content":"There are five possible forms of accessibility.","pos":[3123,3170]},{"content":"These are summarized below.","pos":[3171,3198]},{"content":"Access not limited","pos":[3217,3235]},{"content":"Access limited to this class or classes derived from this class","pos":[3256,3319]},{"content":"Access limited to the current assembly (.exe, .dll, etc.)","pos":[3339,3396]},{"content":"Access limited to the containing class or classes derived from the containing class","pos":[3426,3509]},{"content":"Access limited to this class","pos":[3528,3556]},{"pos":[3561,3576],"content":"Type parameters","linkify":"Type parameters","nodes":[{"content":"Type parameters","pos":[0,15]}]},{"content":"A class definition may specify a set of type parameters by following the class name with angle brackets enclosing a list of type parameter names.","pos":[3578,3723]},{"content":"The type parameters can then be used in the body of the class declarations to define the members of the class.","pos":[3724,3834]},{"content":"In the following example, the type parameters of <ph id=\"ph1\">`Pair`</ph> are <ph id=\"ph2\">`TFirst`</ph> and <ph id=\"ph3\">`TSecond`</ph>:","pos":[3835,3918],"source":" In the following example, the type parameters of `Pair` are `TFirst` and `TSecond`:"},{"content":"A class type that is declared to take type parameters is called a <bpt id=\"p1\">*</bpt>generic class type<ept id=\"p1\">*</ept>.","pos":[4015,4102],"source":"A class type that is declared to take type parameters is called a *generic class type*."},{"content":"Struct, interface and delegate types can also be generic.","pos":[4103,4160]},{"content":"When the generic class is used, type arguments must be provided for each of the type parameters:","pos":[4161,4257],"source":"\nWhen the generic class is used, type arguments must be provided for each of the type parameters:"},{"pos":[4366,4473],"content":"A generic type with type arguments provided, like <ph id=\"ph1\">`Pair&lt;int,string&gt;`</ph> above, is called a <bpt id=\"p1\">*</bpt>constructed type<ept id=\"p1\">*</ept>.","source":"A generic type with type arguments provided, like `Pair<int,string>` above, is called a *constructed type*."},{"pos":[4478,4490],"content":"Base classes","linkify":"Base classes","nodes":[{"content":"Base classes","pos":[0,12]}]},{"content":"A class declaration may specify a base class by following the class name and type parameters with a colon and the name of the base class.","pos":[4492,4629]},{"content":"Omitting a base class specification is the same as deriving from type <ph id=\"ph1\">`object`</ph>.","pos":[4630,4709],"source":" Omitting a base class specification is the same as deriving from type `object`."},{"content":"In the following example, the base class of <ph id=\"ph1\">`Point3D`</ph> is <ph id=\"ph2\">`Point`</ph>, and the base class of <ph id=\"ph3\">`Point`</ph> is <ph id=\"ph4\">`object`</ph>:","pos":[4710,4818],"source":" In the following example, the base class of `Point3D` is `Point`, and the base class of `Point` is `object`:"},{"content":"A class inherits the members of its base class.","pos":[4925,4972]},{"content":"Inheritance means that a class implicitly contains all members of its base class, except for the instance and static constructors, and the finalizers of the base class.","pos":[4973,5141]},{"content":"A derived class can add new members to those it inherits, but it cannot remove the definition of an inherited member.","pos":[5142,5259]},{"content":"In the previous example, <ph id=\"ph1\">`Point3D`</ph> inherits the <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph> fields from <ph id=\"ph4\">`Point`</ph>, and every <ph id=\"ph5\">`Point3D`</ph> instance contains three fields, <ph id=\"ph6\">`x`</ph>, <ph id=\"ph7\">`y`</ph>, and <ph id=\"ph8\">`z`</ph>.","pos":[5260,5411],"source":" In the previous example, `Point3D` inherits the `x` and `y` fields from `Point`, and every `Point3D` instance contains three fields, `x`, `y`, and `z`."},{"content":"An implicit conversion exists from a class type to any of its base class types.","pos":[5413,5492]},{"content":"Therefore, a variable of a class type can reference an instance of that class or an instance of any derived class.","pos":[5493,5607]},{"content":"For example, given the previous class declarations, a variable of type <ph id=\"ph1\">`Point`</ph> can reference either a <ph id=\"ph2\">`Point`</ph> or a <ph id=\"ph3\">`Point3D`</ph>:","pos":[5608,5733],"source":" For example, given the previous class declarations, a variable of type `Point` can reference either a `Point` or a `Point3D`:"},{"pos":[5848,5854],"content":"Fields","linkify":"Fields","nodes":[{"content":"Fields","pos":[0,6]}]},{"pos":[5856,5943],"content":"A <bpt id=\"p1\">*</bpt>field<ept id=\"p1\">*</ept> is a variable that is associated with a class or with an instance of a class.","source":"A *field* is a variable that is associated with a class or with an instance of a class."},{"content":"A field declared with the static modifier defines a static field.","pos":[5945,6010]},{"content":"A static field identifies exactly one storage location.","pos":[6011,6066]},{"content":"No matter how many instances of a class are created, there is only ever one copy of a static field.","pos":[6067,6166]},{"content":"A field declared without the static modifier defines an instance field.","pos":[6168,6239]},{"content":"Every instance of a class contains a separate copy of all the instance fields of that class.","pos":[6240,6332]},{"pos":[6334,6550],"content":"In the following example, each instance of the <ph id=\"ph1\">`Color`</ph> class has a separate copy of the <ph id=\"ph2\">`r`</ph>, <ph id=\"ph3\">`g`</ph>, and <ph id=\"ph4\">`b`</ph> instance fields, but there is only one copy of the <ph id=\"ph5\">`Black`</ph>, <ph id=\"ph6\">`White`</ph>, <ph id=\"ph7\">`Red`</ph>, <ph id=\"ph8\">`Green`</ph>, and <ph id=\"ph9\">`Blue`</ph> static fields:","source":"In the following example, each instance of the `Color` class has a separate copy of the `r`, `g`, and `b` instance fields, but there is only one copy of the `Black`, `White`, `Red`, `Green`, and `Blue` static fields:"},{"content":"As shown in the previous example, <bpt id=\"p1\">*</bpt>read-only fields<ept id=\"p1\">*</ept> may be declared with a <ph id=\"ph1\">`readonly`</ph> modifier.","pos":[6655,6751],"source":"As shown in the previous example, *read-only fields* may be declared with a `readonly` modifier."},{"content":"Assignment to a <ph id=\"ph1\">`readonly`</ph> field can only occur as part of the field’s declaration or in a constructor in the same class.","pos":[6752,6873],"source":" Assignment to a `readonly` field can only occur as part of the field’s declaration or in a constructor in the same class."},{"pos":[6878,6885],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"A <bpt id=\"p1\">*</bpt>method<ept id=\"p1\">*</ept> is a member that implements a computation or action that can be performed by an object or class.","pos":[6887,6994],"source":"A *method* is a member that implements a computation or action that can be performed by an object or class."},{"content":"<bpt id=\"p1\">*</bpt>Static methods<ept id=\"p1\">*</ept> are accessed through the class.","pos":[6995,7043],"source":"*Static methods* are accessed through the class."},{"content":"<bpt id=\"p1\">*</bpt>Instance methods<ept id=\"p1\">*</ept> are accessed through instances of the class.","pos":[7044,7107],"source":"*Instance methods* are accessed through instances of the class."},{"content":"Methods may have a list of <bpt id=\"p1\">*</bpt>parameters<ept id=\"p1\">*</ept>, which represent values or variable references passed to the method, and a <bpt id=\"p2\">*</bpt>return type<ept id=\"p2\">*</ept>, which specifies the type of the value computed and returned by the method.","pos":[7109,7313],"source":"Methods may have a list of *parameters*, which represent values or variable references passed to the method, and a *return type*, which specifies the type of the value computed and returned by the method."},{"content":"A method’s return type is <ph id=\"ph1\">`void`</ph> if it does not return a value.","pos":[7314,7377],"source":" A method’s return type is `void` if it does not return a value."},{"content":"Like types, methods may also have a set of type parameters, for which type arguments must be specified when the method is called.","pos":[7379,7508]},{"content":"Unlike types, the type arguments can often be inferred from the arguments of a method call and need not be explicitly given.","pos":[7509,7633]},{"content":"The <bpt id=\"p1\">*</bpt>signature<ept id=\"p1\">*</ept> of a method must be unique in the class in which the method is declared.","pos":[7635,7723],"source":"The *signature* of a method must be unique in the class in which the method is declared."},{"content":"The signature of a method consists of the name of the method, the number of type parameters and the number, modifiers, and types of its parameters.","pos":[7724,7871]},{"content":"The signature of a method does not include the return type.","pos":[7872,7931]},{"pos":[7937,7947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameters are used to pass values or variable references to methods.","pos":[7949,8018]},{"content":"The parameters of a method get their actual values from the <bpt id=\"p1\">*</bpt>arguments<ept id=\"p1\">*</ept> that are specified when the method is invoked.","pos":[8019,8137],"source":" The parameters of a method get their actual values from the *arguments* that are specified when the method is invoked."},{"content":"There are four kinds of parameters: value parameters, reference parameters, output parameters, and parameter arrays.","pos":[8138,8254]},{"content":"A <bpt id=\"p1\">*</bpt>value parameter<ept id=\"p1\">*</ept> is used for passing input arguments.","pos":[8256,8312],"source":"A *value parameter* is used for passing input arguments."},{"content":"A value parameter corresponds to a local variable that gets its initial value from the argument that was passed for the parameter.","pos":[8313,8443]},{"content":"Modifications to a value parameter do not affect the argument that was passed for the parameter.","pos":[8444,8540]},{"content":"Value parameters can be optional, by specifying a default value so that corresponding arguments can be omitted.","pos":[8543,8654]},{"content":"A <bpt id=\"p1\">*</bpt>reference parameter<ept id=\"p1\">*</ept> is used for passing arguments by reference.","pos":[8656,8723],"source":"A *reference parameter* is used for passing arguments by reference."},{"content":"The argument passed for a reference parameter must be a variable with a definite value, and during execution of the method, the reference parameter represents the same storage location as the argument variable.","pos":[8724,8934]},{"content":"A reference parameter is declared with the <ph id=\"ph1\">`ref`</ph> modifier.","pos":[8935,8993],"source":" A reference parameter is declared with the `ref` modifier."},{"content":"The following example shows the use of <ph id=\"ph1\">`ref`</ph> parameters.","pos":[8994,9050],"source":" The following example shows the use of `ref` parameters."},{"content":"An <bpt id=\"p1\">*</bpt>output parameter<ept id=\"p1\">*</ept> is used for passing arguments by reference.","pos":[9161,9226],"source":"An *output parameter* is used for passing arguments by reference."},{"content":"It's similar to a reference parameter, except that it doesn't require that you explicitly assign a value to the caller-provided argument.","pos":[9227,9364]},{"content":"An output parameter is declared with the <ph id=\"ph1\">`out`</ph> modifier.","pos":[9365,9421],"source":" An output parameter is declared with the `out` modifier."},{"content":"The following example shows the use of <ph id=\"ph1\">`out`</ph> parameters using the syntax introduced in C# 7.","pos":[9422,9514],"source":" The following example shows the use of `out` parameters using the syntax introduced in C# 7."},{"content":"A <bpt id=\"p1\">*</bpt>parameter array<ept id=\"p1\">*</ept> permits a variable number of arguments to be passed to a method.","pos":[9624,9708],"source":"A *parameter array* permits a variable number of arguments to be passed to a method."},{"content":"A parameter array is declared with the <ph id=\"ph1\">`params`</ph> modifier.","pos":[9709,9766],"source":" A parameter array is declared with the `params` modifier."},{"content":"Only the last parameter of a method can be a parameter array, and the type of a parameter array must be a single-dimensional array type.","pos":[9767,9903]},{"content":"The Write and WriteLine methods of the <ph id=\"ph1\">`@System.Console`</ph> class are good examples of parameter array usage.","pos":[9904,10010],"source":" The Write and WriteLine methods of the `@System.Console` class are good examples of parameter array usage."},{"content":"They are declared as follows.","pos":[10011,10040]},{"content":"Within a method that uses a parameter array, the parameter array behaves exactly like a regular parameter of an array type.","pos":[10152,10275]},{"content":"However, in an invocation of a method with a parameter array, it is possible to pass either a single argument of the parameter array type or any number of arguments of the element type of the parameter array.","pos":[10276,10484]},{"content":"In the latter case, an array instance is automatically created and initialized with the given arguments.","pos":[10485,10589]},{"content":"This example","pos":[10590,10602]},{"content":"is equivalent to writing the following.","pos":[10712,10751]},{"pos":[10866,10897],"content":"Method body and local variables","linkify":"Method body and local variables","nodes":[{"content":"Method body and local variables","pos":[0,31]}]},{"content":"A method’s body specifies the statements to execute when the method is invoked.","pos":[10899,10978]},{"content":"A method body can declare variables that are specific to the invocation of the method.","pos":[10980,11066]},{"content":"Such variables are called <bpt id=\"p1\">*</bpt>local variables<ept id=\"p1\">*</ept>.","pos":[11067,11111],"source":" Such variables are called *local variables*."},{"content":"A local variable declaration specifies a type name, a variable name, and possibly an initial value.","pos":[11112,11211]},{"content":"The following example declares a local variable <ph id=\"ph1\">`i`</ph> with an initial value of zero and a local variable <ph id=\"ph2\">`j`</ph> with no initial value.","pos":[11212,11341],"source":" The following example declares a local variable `i` with an initial value of zero and a local variable `j` with no initial value."},{"content":"C# requires a local variable to be <bpt id=\"p1\">*</bpt>definitely assigned<ept id=\"p1\">*</ept> before its value can be obtained.","pos":[11445,11535],"source":"C# requires a local variable to be *definitely assigned* before its value can be obtained."},{"content":"For example, if the declaration of the previous <ph id=\"ph1\">`i`</ph> did not include an initial value, the compiler would report an error for the subsequent usages of <ph id=\"ph2\">`i`</ph> because <ph id=\"ph3\">`i`</ph> would not be definitely assigned at those points in the program.","pos":[11536,11766],"source":" For example, if the declaration of the previous `i` did not include an initial value, the compiler would report an error for the subsequent usages of `i` because `i` would not be definitely assigned at those points in the program."},{"content":"A method can use <ph id=\"ph1\">`return`</ph> statements to return control to its caller.","pos":[11768,11837],"source":"A method can use `return` statements to return control to its caller."},{"content":"In a method returning <ph id=\"ph1\">`void`</ph>, <ph id=\"ph2\">`return`</ph> statements cannot specify an expression.","pos":[11838,11917],"source":" In a method returning `void`, `return` statements cannot specify an expression."},{"content":"In a method returning non-void, <ph id=\"ph1\">`return`</ph> statements must include an expression that computes the return value.","pos":[11918,12028],"source":" In a method returning non-void, `return` statements must include an expression that computes the return value."},{"pos":[12034,12061],"content":"Static and instance methods","linkify":"Static and instance methods","nodes":[{"content":"Static and instance methods","pos":[0,27]}]},{"content":"A method declared with a static modifier is a <bpt id=\"p1\">*</bpt>static method<ept id=\"p1\">*</ept>.","pos":[12063,12125],"source":"A method declared with a static modifier is a *static method*."},{"content":"A static method does not operate on a specific instance and can only directly access static members.","pos":[12126,12226]},{"content":"A method declared without a static modifier is an <bpt id=\"p1\">*</bpt>instance method<ept id=\"p1\">*</ept>.","pos":[12228,12296],"source":"A method declared without a static modifier is an *instance method*."},{"content":"An instance method operates on a specific instance and can access both static and instance members.","pos":[12297,12396]},{"content":"The instance on which an instance method was invoked can be explicitly accessed as <ph id=\"ph1\">`this`</ph>.","pos":[12397,12487],"source":" The instance on which an instance method was invoked can be explicitly accessed as `this`."},{"content":"It is an error to refer to <ph id=\"ph1\">`this`</ph> in a static method.","pos":[12488,12541],"source":" It is an error to refer to `this` in a static method."},{"pos":[12543,12609],"content":"The following <ph id=\"ph1\">`Entity`</ph> class has both static and instance members.","source":"The following `Entity` class has both static and instance members."},{"content":"Each <ph id=\"ph1\">`Entity`</ph> instance contains a serial number (and presumably some other information that is not shown here).","pos":[12712,12823],"source":"Each `Entity` instance contains a serial number (and presumably some other information that is not shown here)."},{"content":"The <ph id=\"ph1\">`Entity`</ph> constructor (which is like an instance method) initializes the new instance with the next available serial number.","pos":[12824,12951],"source":" The `Entity` constructor (which is like an instance method) initializes the new instance with the next available serial number."},{"content":"Because the constructor is an instance member, it is permitted to access both the <ph id=\"ph1\">`serialNo`</ph> instance field and the <ph id=\"ph2\">`nextSerialNo`</ph> static field.","pos":[12952,13096],"source":" Because the constructor is an instance member, it is permitted to access both the `serialNo` instance field and the `nextSerialNo` static field."},{"pos":[13098,13284],"content":"The <ph id=\"ph1\">`GetNextSerialNo`</ph> and <ph id=\"ph2\">`SetNextSerialNo`</ph> static methods can access the <ph id=\"ph3\">`nextSerialNo`</ph> static field, but it would be an error for them to directly access the <ph id=\"ph4\">`serialNo`</ph> instance field.","source":"The `GetNextSerialNo` and `SetNextSerialNo` static methods can access the `nextSerialNo` static field, but it would be an error for them to directly access the `serialNo` instance field."},{"content":"The following example shows the use of the Entity class.","pos":[13286,13342]},{"pos":[13451,13624],"content":"Note that the <ph id=\"ph1\">`SetNextSerialNo`</ph> and <ph id=\"ph2\">`GetNextSerialNo`</ph> static methods are invoked on the class whereas the <ph id=\"ph3\">`GetSerialNo`</ph> instance method is invoked on instances of the class.","source":"Note that the `SetNextSerialNo` and `GetNextSerialNo` static methods are invoked on the class whereas the `GetSerialNo` instance method is invoked on instances of the class."},{"pos":[13630,13669],"content":"Virtual, override, and abstract methods","linkify":"Virtual, override, and abstract methods","nodes":[{"content":"Virtual, override, and abstract methods","pos":[0,39]}]},{"content":"When an instance method declaration includes a <ph id=\"ph1\">`virtual`</ph> modifier, the method is said to be a <bpt id=\"p1\">*</bpt>virtual method<ept id=\"p1\">*</ept>.","pos":[13671,13782],"source":"When an instance method declaration includes a `virtual` modifier, the method is said to be a *virtual method*."},{"content":"When no virtual modifier is present, the method is said to be a <bpt id=\"p1\">*</bpt>nonvirtual method<ept id=\"p1\">*</ept>.","pos":[13783,13867],"source":" When no virtual modifier is present, the method is said to be a *nonvirtual method*."},{"content":"When a virtual method is invoked, the <bpt id=\"p1\">*</bpt>run-time type<ept id=\"p1\">*</ept> of the instance for which that invocation takes place determines the actual method implementation to invoke.","pos":[13869,14031],"source":"When a virtual method is invoked, the *run-time type* of the instance for which that invocation takes place determines the actual method implementation to invoke."},{"content":"In a nonvirtual method invocation, the <bpt id=\"p1\">*</bpt>compile-time type<ept id=\"p1\">*</ept> of the instance is the determining factor.","pos":[14032,14133],"source":" In a nonvirtual method invocation, the *compile-time type* of the instance is the determining factor."},{"content":"A virtual method can be <bpt id=\"p1\">*</bpt>overridden<ept id=\"p1\">*</ept> in a derived class.","pos":[14135,14191],"source":"A virtual method can be *overridden* in a derived class."},{"content":"When an instance method declaration includes an override modifier, the method overrides an inherited virtual method with the same signature.","pos":[14192,14332]},{"content":"Whereas a virtual method declaration introduces a new method, an override method declaration specializes an existing inherited virtual method by providing a new implementation of that method.","pos":[14333,14524]},{"content":"An <bpt id=\"p1\">*</bpt>abstract method<ept id=\"p1\">*</ept> is a virtual method with no implementation.","pos":[14526,14590],"source":"An *abstract method* is a virtual method with no implementation."},{"content":"An abstract method is declared with the abstract modifier and is permitted only in a class that is also declared abstract.","pos":[14591,14713]},{"content":"An abstract method must be overridden in every non-abstract derived class.","pos":[14714,14788]},{"content":"The following example declares an abstract class, <ph id=\"ph1\">`Expression`</ph>, which represents an expression tree node, and three derived classes, <ph id=\"ph2\">`Constant`</ph>, <ph id=\"ph3\">`VariableReference`</ph>, and <ph id=\"ph4\">`Operation`</ph>, which implement expression tree nodes for constants, variable references, and arithmetic operations.","pos":[14790,15073],"source":"The following example declares an abstract class, `Expression`, which represents an expression tree node, and three derived classes, `Constant`, `VariableReference`, and `Operation`, which implement expression tree nodes for constants, variable references, and arithmetic operations."},{"content":"(This is similar to, but not to be confused with the expression tree types).","pos":[15074,15150]},{"content":"The previous four classes can be used to model arithmetic expressions.","pos":[15266,15336]},{"content":"For example, using instances of these classes, the expression <ph id=\"ph1\">`x + 3`</ph> can be represented as follows.","pos":[15337,15437],"source":" For example, using instances of these classes, the expression `x + 3` can be represented as follows."},{"content":"The <ph id=\"ph1\">`Evaluate`</ph> method of an <ph id=\"ph2\">`Expression`</ph> instance is invoked to evaluate the given expression and produce a <ph id=\"ph3\">`double`</ph> value.","pos":[15552,15675],"source":"The `Evaluate` method of an `Expression` instance is invoked to evaluate the given expression and produce a `double` value."},{"content":"The method takes a <ph id=\"ph1\">`Dictionary`</ph> argument that contains variable names (as keys of the entries) and values (as values of the entries).","pos":[15676,15809],"source":" The method takes a `Dictionary` argument that contains variable names (as keys of the entries) and values (as values of the entries)."},{"content":"Because <ph id=\"ph1\">`Evaluate`</ph> is an abstract method, non-abstract classes derived from <ph id=\"ph2\">`Expression`</ph> must override <ph id=\"ph3\">`Evaluate`</ph>.","pos":[15810,15924],"source":" Because `Evaluate` is an abstract method, non-abstract classes derived from `Expression` must override `Evaluate`."},{"content":"A <ph id=\"ph1\">`Constant`</ph>'s implementation of <ph id=\"ph2\">`Evaluate`</ph> simply returns the stored constant.","pos":[15926,16005],"source":"A `Constant`'s implementation of `Evaluate` simply returns the stored constant."},{"content":"A <ph id=\"ph1\">`VariableReference`</ph>'s implementation looks up the variable name in the dictionary and returns the resulting value.","pos":[16006,16122],"source":" A `VariableReference`'s implementation looks up the variable name in the dictionary and returns the resulting value."},{"content":"An <ph id=\"ph1\">`Operation`</ph>'s implementation first evaluates the left and right operands (by recursively invoking their <ph id=\"ph2\">`Evaluate`</ph> methods) and then performs the given arithmetic operation.","pos":[16123,16299],"source":" An `Operation`'s implementation first evaluates the left and right operands (by recursively invoking their `Evaluate` methods) and then performs the given arithmetic operation."},{"pos":[16301,16430],"content":"The following program uses the <ph id=\"ph1\">`Expression`</ph> classes to evaluate the expression <ph id=\"ph2\">`x * (y + 2)`</ph> for different values of <ph id=\"ph3\">`x`</ph> and <ph id=\"ph4\">`y`</ph>.","source":"The following program uses the `Expression` classes to evaluate the expression `x * (y + 2)` for different values of `x` and `y`."},{"pos":[16551,16569],"content":"Method overloading","linkify":"Method overloading","nodes":[{"content":"Method overloading","pos":[0,18]}]},{"content":"Method <bpt id=\"p1\">*</bpt>overloading<ept id=\"p1\">*</ept> permits multiple methods in the same class to have the same name as long as they have unique signatures.","pos":[16571,16696],"source":"Method *overloading* permits multiple methods in the same class to have the same name as long as they have unique signatures."},{"content":"When compiling an invocation of an overloaded method, the compiler uses <bpt id=\"p1\">*</bpt>overload resolution<ept id=\"p1\">*</ept> to determine the specific method to invoke.","pos":[16697,16834],"source":" When compiling an invocation of an overloaded method, the compiler uses *overload resolution* to determine the specific method to invoke."},{"content":"Overload resolution finds the one method that best matches the arguments or reports an error if no single best match can be found.","pos":[16835,16965]},{"content":"The following example shows overload resolution in effect.","pos":[16966,17024]},{"content":"The comment for each invocation in the <ph id=\"ph1\">`Main`</ph> method shows which method is actually invoked.","pos":[17025,17117],"source":" The comment for each invocation in the `Main` method shows which method is actually invoked."},{"content":"As shown by the example, a particular method can always be selected by explicitly casting the arguments to the exact parameter types and/or explicitly supplying type arguments.","pos":[17231,17407]},{"pos":[17412,17434],"content":"Other function members","linkify":"Other function members","nodes":[{"content":"Other function members","pos":[0,22]}]},{"content":"Members that contain executable code are collectively known as the <bpt id=\"p1\">*</bpt>function members<ept id=\"p1\">*</ept> of a class.","pos":[17436,17533],"source":"Members that contain executable code are collectively known as the *function members* of a class."},{"content":"The preceding section describes methods, which are the primary kind of function members.","pos":[17534,17622]},{"content":"This section describes the other kinds of function members supported by C#: constructors, properties, indexers, events, operators, and finalizers.","pos":[17623,17769]},{"content":"The following shows a generic class called List<ph id=\"ph1\">&lt;T&gt;</ph>, which implements a growable list of objects.","pos":[17771,17867],"source":"The following shows a generic class called List<T>, which implements a growable list of objects."},{"content":"The class contains several examples of the most common kinds of function members.","pos":[17868,17949]},{"pos":[18069,18081],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"content":"C# supports both instance and static constructors.","pos":[18083,18133]},{"content":"An <bpt id=\"p1\">*</bpt>instance constructor<ept id=\"p1\">*</ept> is a member that implements the actions required to initialize an instance of a class.","pos":[18134,18246],"source":" An *instance constructor* is a member that implements the actions required to initialize an instance of a class."},{"content":"A <bpt id=\"p1\">*</bpt>static constructor<ept id=\"p1\">*</ept> is a member that implements the actions required to initialize a class itself when it is first loaded.","pos":[18247,18372],"source":" A *static constructor* is a member that implements the actions required to initialize a class itself when it is first loaded."},{"content":"A constructor is declared like a method with no return type and the same name as the containing class.","pos":[18374,18476]},{"content":"If a constructor declaration includes a static modifier, it declares a static constructor.","pos":[18477,18567]},{"content":"Otherwise, it declares an instance constructor.","pos":[18568,18615]},{"content":"Instance constructors can be overloaded, and can have optional parameters.","pos":[18617,18691]},{"content":"For example, the <ph id=\"ph1\">`List&lt;T&gt;`</ph> class declares two instance constructors, one with no parameters and one that takes an <ph id=\"ph2\">`int`</ph> parameter.","pos":[18692,18822],"source":" For example, the `List<T>` class declares two instance constructors, one with no parameters and one that takes an `int` parameter."},{"content":"Instance constructors are invoked using the <ph id=\"ph1\">`new`</ph> operator.","pos":[18823,18882],"source":" Instance constructors are invoked using the `new` operator."},{"content":"The following statements allocate two <ph id=\"ph1\">`List&lt;string&gt;`</ph> instances using the constructor of the <ph id=\"ph2\">`List`</ph> class with and without the optional argument.","pos":[18883,19027],"source":" The following statements allocate two `List<string>` instances using the constructor of the `List` class with and without the optional argument."},{"content":"Unlike other members, instance constructors are not inherited, and a class has no instance constructors other than those actually declared in the class.","pos":[19147,19299]},{"content":"If no instance constructor is supplied for a class, then an empty one with no parameters is automatically provided.","pos":[19300,19415]},{"pos":[19421,19431],"content":"Properties","linkify":"Properties","nodes":[{"content":"Properties","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>Properties<ept id=\"p1\">*</ept> are a natural extension of fields.","pos":[19433,19480],"source":"*Properties* are a natural extension of fields."},{"content":"Both are named members with associated types, and the syntax for accessing fields and properties is the same.","pos":[19481,19590]},{"content":"However, unlike fields, properties do not denote storage locations.","pos":[19591,19658]},{"content":"Instead, properties have <bpt id=\"p1\">*</bpt>accessors<ept id=\"p1\">*</ept> that specify the statements to be executed when their values are read or written.","pos":[19659,19777],"source":" Instead, properties have *accessors* that specify the statements to be executed when their values are read or written."},{"content":"A property is declared like a field, except that the declaration ends with a get accessor and/or a set accessor written between the delimiters <ph id=\"ph1\">`{`</ph> and <ph id=\"ph2\">`}`</ph> instead of ending in a semicolon.","pos":[19779,19967],"source":"A property is declared like a field, except that the declaration ends with a get accessor and/or a set accessor written between the delimiters `{` and `}` instead of ending in a semicolon."},{"content":"A property that has both a get accessor and a set accessor is a <bpt id=\"p1\">*</bpt>read-write property<ept id=\"p1\">*</ept>, a property that has only a get accessor is a <bpt id=\"p2\">*</bpt>read-only property<ept id=\"p2\">*</ept>, and a property that has only a set accessor is a <bpt id=\"p3\">*</bpt>write-only property<ept id=\"p3\">*</ept>.","pos":[19968,20193],"source":" A property that has both a get accessor and a set accessor is a *read-write property*, a property that has only a get accessor is a *read-only property*, and a property that has only a set accessor is a *write-only property*."},{"content":"A get accessor corresponds to a parameterless method with a return value of the property type.","pos":[20195,20289]},{"content":"Except as the target of an assignment, when a property is referenced in an expression, the get accessor of the property is invoked to compute the value of the property.","pos":[20290,20458]},{"content":"A set accessor corresponds to a method with a single parameter named value and no return type.","pos":[20460,20554]},{"content":"When a property is referenced as the target of an assignment or as the operand of ++ or --, the set accessor is invoked with an argument that provides the new value.","pos":[20555,20720]},{"content":"The <ph id=\"ph1\">`List&lt;T&gt;`</ph> class declares two properties, Count and Capacity, which are read-only and read-write, respectively.","pos":[20722,20836],"source":"The `List<T>` class declares two properties, Count and Capacity, which are read-only and read-write, respectively."},{"content":"The following is an example of use of these properties.","pos":[20837,20892]},{"content":"Similar to fields and methods, C# supports both instance properties and static properties.","pos":[21014,21104]},{"content":"Static properties are declared with the static modifier, and instance properties are declared without it.","pos":[21105,21210]},{"content":"The accessor(s) of a property can be virtual.","pos":[21212,21257]},{"content":"When a property declaration includes a <ph id=\"ph1\">`virtual`</ph>, <ph id=\"ph2\">`abstract`</ph>, or <ph id=\"ph3\">`override`</ph> modifier, it applies to the accessor(s) of the property.","pos":[21258,21390],"source":" When a property declaration includes a `virtual`, `abstract`, or `override` modifier, it applies to the accessor(s) of the property."},{"pos":[21396,21404],"content":"Indexers","linkify":"Indexers","nodes":[{"content":"Indexers","pos":[0,8]}]},{"content":"An <bpt id=\"p1\">*</bpt>indexer<ept id=\"p1\">*</ept> is a member that enables objects to be indexed in the same way as an array.","pos":[21406,21494],"source":"An *indexer* is a member that enables objects to be indexed in the same way as an array."},{"content":"An indexer is declared like a property except that the name of the member is this followed by a parameter list written between the delimiters <ph id=\"ph1\">`[`</ph> and <ph id=\"ph2\">`]`</ph>.","pos":[21495,21649],"source":" An indexer is declared like a property except that the name of the member is this followed by a parameter list written between the delimiters `[` and `]`."},{"content":"The parameters are available in the accessor(s) of the indexer.","pos":[21650,21713]},{"content":"Similar to properties, indexers can be read-write, read-only, and write-only, and the accessor(s) of an indexer can be virtual.","pos":[21714,21841]},{"content":"The <ph id=\"ph1\">`List`</ph> class declares a single read-write indexer that takes an <ph id=\"ph2\">`int`</ph> parameter.","pos":[21843,21927],"source":"The `List` class declares a single read-write indexer that takes an `int` parameter."},{"content":"The indexer makes it possible to index <ph id=\"ph1\">`List`</ph> instances with <ph id=\"ph2\">`int`</ph> values.","pos":[21928,22002],"source":" The indexer makes it possible to index `List` instances with `int` values."},{"content":"For example:","pos":[22003,22015]},{"content":"Indexers can be overloaded, meaning that a class can declare multiple indexers as long as the number or types of their parameters differ.","pos":[22137,22274]},{"pos":[22280,22286],"content":"Events","linkify":"Events","nodes":[{"content":"Events","pos":[0,6]}]},{"content":"An <bpt id=\"p1\">*</bpt>event<ept id=\"p1\">*</ept> is a member that enables a class or object to provide notifications.","pos":[22288,22367],"source":"An *event* is a member that enables a class or object to provide notifications."},{"content":"An event is declared like a field except that the declaration includes an event keyword and the type must be a delegate type.","pos":[22368,22493]},{"content":"Within a class that declares an event member, the event behaves just like a field of a delegate type (provided the event is not abstract and does not declare accessors).","pos":[22495,22664]},{"content":"The field stores a reference to a delegate that represents the event handlers that have been added to the event.","pos":[22665,22777]},{"content":"If no event handlers are present, the field is <ph id=\"ph1\">`null`</ph>.","pos":[22778,22832],"source":" If no event handlers are present, the field is `null`."},{"content":"The <ph id=\"ph1\">`List&lt;T&gt;`</ph> class declares a single event member called <ph id=\"ph2\">`Changed`</ph>, which indicates that a new item has been added to the list.","pos":[22834,22962],"source":"The `List<T>` class declares a single event member called `Changed`, which indicates that a new item has been added to the list."},{"content":"The Changed event is raised by the <ph id=\"ph1\">`OnChanged`</ph> virtual method, which first checks whether the event is <ph id=\"ph2\">`null`</ph> (meaning that no handlers are present).","pos":[22963,23112],"source":" The Changed event is raised by the `OnChanged` virtual method, which first checks whether the event is `null` (meaning that no handlers are present)."},{"content":"The notion of raising an event is precisely equivalent to invoking the delegate represented by the event—thus, there are no special language constructs for raising events.","pos":[23113,23284]},{"content":"Clients react to events through <bpt id=\"p1\">*</bpt>event handlers<ept id=\"p1\">*</ept>.","pos":[23286,23335],"source":"Clients react to events through *event handlers*."},{"content":"Event handlers are attached using the <ph id=\"ph1\">`+=`</ph> operator and removed using the <ph id=\"ph2\">`-=`</ph> operator.","pos":[23336,23424],"source":" Event handlers are attached using the `+=` operator and removed using the `-=` operator."},{"content":"The following example attaches an event handler to the <ph id=\"ph1\">`Changed`</ph> event of a <ph id=\"ph2\">`List&lt;string&gt;`</ph>.","pos":[23425,23516],"source":" The following example attaches an event handler to the `Changed` event of a `List<string>`."},{"pos":[23638,23862],"content":"For advanced scenarios where control of the underlying storage of an event is desired, an event declaration can explicitly provide <ph id=\"ph1\">`add`</ph> and <ph id=\"ph2\">`remove`</ph> accessors, which are somewhat similar to the <ph id=\"ph3\">`set`</ph> accessor of a property.","source":"For advanced scenarios where control of the underlying storage of an event is desired, an event declaration can explicitly provide `add` and `remove` accessors, which are somewhat similar to the `set` accessor of a property."},{"pos":[23868,23877],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"content":"An <bpt id=\"p1\">*</bpt>operator<ept id=\"p1\">*</ept> is a member that defines the meaning of applying a particular expression operator to instances of a class.","pos":[23879,23999],"source":"An *operator* is a member that defines the meaning of applying a particular expression operator to instances of a class."},{"content":"Three kinds of operators can be defined: unary operators, binary operators, and conversion operators.","pos":[24000,24101]},{"content":"All operators must be declared as <ph id=\"ph1\">`public`</ph> and <ph id=\"ph2\">`static`</ph>.","pos":[24102,24158],"source":" All operators must be declared as `public` and `static`."},{"content":"The <ph id=\"ph1\">`List&lt;T&gt;`</ph> class declares two operators, <ph id=\"ph2\">`operator ==`</ph> and <ph id=\"ph3\">`operator !=`</ph>, and thus gives new meaning to expressions that apply those operators to <ph id=\"ph4\">`List`</ph> instances.","pos":[24160,24326],"source":"The `List<T>` class declares two operators, `operator ==` and `operator !=`, and thus gives new meaning to expressions that apply those operators to `List` instances."},{"content":"Specifically, the operators define equality of two <ph id=\"ph1\">`List&lt;T&gt;`</ph> instances as comparing each of the contained objects using their Equals methods.","pos":[24327,24468],"source":" Specifically, the operators define equality of two `List<T>` instances as comparing each of the contained objects using their Equals methods."},{"content":"The following example uses the <ph id=\"ph1\">`==`</ph> operator to compare two <ph id=\"ph2\">`List&lt;int&gt;`</ph> instances.","pos":[24469,24551],"source":" The following example uses the `==` operator to compare two `List<int>` instances."},{"content":"The first <ph id=\"ph1\">`Console.WriteLine`</ph> outputs <ph id=\"ph2\">`True`</ph> because the two lists contain the same number of objects with the same values in the same order.","pos":[24676,24817],"source":"The first `Console.WriteLine` outputs `True` because the two lists contain the same number of objects with the same values in the same order."},{"content":"Had <ph id=\"ph1\">`List&lt;T&gt;`</ph> not defined <ph id=\"ph2\">`operator ==`</ph>, the first <ph id=\"ph3\">`Console.WriteLine`</ph> would have output <ph id=\"ph4\">`False`</ph> because <ph id=\"ph5\">`a`</ph> and <ph id=\"ph6\">`b`</ph> reference different <ph id=\"ph7\">`List&lt;int&gt;`</ph> instances.","pos":[24818,24977],"source":" Had `List<T>` not defined `operator ==`, the first `Console.WriteLine` would have output `False` because `a` and `b` reference different `List<int>` instances."},{"pos":[24983,24993],"content":"Finalizers","linkify":"Finalizers","nodes":[{"content":"Finalizers","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">*</bpt>finalizer<ept id=\"p1\">*</ept> is a member that implements the actions required to finalize an instance of a class.","pos":[24995,25093],"source":"A *finalizer* is a member that implements the actions required to finalize an instance of a class."},{"content":"Finalizers cannot have parameters, they cannot have accessibility modifiers, and they cannot be invoked explicitly.","pos":[25094,25209]},{"content":"The finalizer for an instance is invoked automatically during garbage collection.","pos":[25210,25291]},{"content":"The garbage collector is allowed wide latitude in deciding when to collect objects and run finalizers.","pos":[25293,25395]},{"content":"Specifically, the timing of finalizer invocations is not deterministic, and finalizers may be executed on any thread.","pos":[25396,25513]},{"content":"For these and other reasons, classes should implement finalizers only when no other solutions are feasible.","pos":[25514,25621]},{"pos":[25623,25694],"content":"The <ph id=\"ph1\">`using`</ph> statement provides a better approach to object destruction.","source":"The `using` statement provides a better approach to object destruction."},{"content":"<bpt id=\"p1\">[</bpt>Previous<ept id=\"p1\">](statements.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt>Next<ept id=\"p2\">](structs.md)</ept>","pos":[25725,25769],"source":"[Previous](statements.md)\n[Next](structs.md)"}]}