<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cdb2e7c4a5fe9a32c64c9d0c4d07c4efb417d0f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\how-to-create-a-property.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">471a925f243dfdae6c780340b9a135e6fd31203f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b639ed9e019df74ff055289e66ffbd761140616</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create a Property (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Property (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You enclose a property definition between a <ph id="ph1">`Property`</ph> statement and an <ph id="ph2">`End Property`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Within this definition you define a <ph id="ph1">`Get`</ph> procedure, a <ph id="ph2">`Set`</ph> procedure, or both.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>All the property's code lies within these procedures.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Get`</ph> procedure retrieves the property's value, and the <ph id="ph2">`Set`</ph> procedure stores a value.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you want the property to have read/write access, you must define both procedures.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For a read-only property, you define only <ph id="ph1">`Get`</ph>, and for a write-only property, you define only <ph id="ph2">`Set`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To create a property</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Outside any property or procedure, use a <bpt id="p1">[</bpt>Property Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/property-statement.md)</ept>, followed by an <ph id="ph1">`End Property`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the property takes parameters, follow the <ph id="ph1">`Property`</ph> keyword with the name of the procedure, then the parameter list in parentheses.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Follow the parentheses with an <ph id="ph1">`As`</ph> clause to specify the data type of the property's value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You must specify the data type even for a write-only property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`Get`</ph> and <ph id="ph2">`Set`</ph> procedures, as appropriate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See the following directions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To create a Get procedure that retrieves a property value</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Between the <ph id="ph1">`Property`</ph> and <ph id="ph2">`End Property`</ph> statements, write a <bpt id="p1">[</bpt>Get Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/get-statement.md)</ept>, followed by an <ph id="ph3">`End Get`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You do not need to define any parameters for the <ph id="ph1">`Get`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Place the code statements to retrieve the property's value between the <ph id="ph1">`Get`</ph> and <ph id="ph2">`End Get`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This code can include other calculations and data manipulations in addition to generating and returning the property's value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`Return`</ph> statement to return the property's value to the calling code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You must write a <ph id="ph1">`Get`</ph> procedure for a read-write property and for a read-only property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You must not define a <ph id="ph1">`Get`</ph> procedure for a write-only property.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To create a Set procedure that writes a property's value</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Between the <ph id="ph1">`Property`</ph> and <ph id="ph2">`End Property`</ph> statements, write a <bpt id="p1">[</bpt>Set Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/set-statement.md)</ept>, followed by an <ph id="ph3">`End Set`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Set`</ph> statement, follow the <ph id="ph2">`Set`</ph> keyword with a parameter list in parentheses.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This parameter list must include at least a value parameter for the value passed by the calling code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The default name for this value parameter is <ph id="ph1">`Value`</ph>, but you can use a different name if appropriate.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The value parameter must have the same data type as the property itself.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Place the code statements to store a value in the property between the <ph id="ph1">`Set`</ph> and <ph id="ph2">`End Set`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This code can include other calculations and data manipulations in addition to validating and storing the property's value.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use the value parameter to accept the value supplied by the calling code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can either store this value directly in an assignment statement, or use it in an expression to calculate the internal value to be stored.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You must write a <ph id="ph1">`Set`</ph> procedure for a read-write property and for a write-only property.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You must not define a <ph id="ph1">`Set`</ph> procedure for a read-only property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example creates a read/write property that stores a full name as two constituent names, the first name and the last name.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When the calling code reads <ph id="ph1">`fullName`</ph>, the <ph id="ph2">`Get`</ph> procedure combines the two constituent names and returns the full name.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the calling code assigns a new full name, the <ph id="ph1">`Set`</ph> procedure attempts to break it into two constituent names.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If it does not find a space, it stores it all as the first name.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#8<ept id="p2">](./codesnippet/VisualBasic/how-to-create-a-property_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example shows typical calls to the property procedures of <ph id="ph1">`fullName`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first call sets the property value and the second call retrieves it.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#9<ept id="p2">](./codesnippet/VisualBasic/how-to-create-a-property_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Differences Between Properties and Variables in Visual Basic<ept id="p1">](./differences-between-properties-and-variables.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Declare a Property with Mixed Access Levels<ept id="p1">](./how-to-declare-a-property-with-mixed-access-levels.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Property Procedure<ept id="p1">](./how-to-call-a-property-procedure.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Declare and Call a Default Property in Visual Basic<ept id="p1">](./how-to-declare-and-call-a-default-property.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Put a Value in a Property<ept id="p1">](./how-to-put-a-value-in-a-property.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Get a Value from a Property<ept id="p1">](./how-to-get-a-value-from-a-property.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>