{"content":"---\ntitle: \"How to: Create and Use Assemblies Using the Command Line (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 408ddce3-89e3-4e12-8353-34a49beeb72b\ncaps.latest.revision: 4\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Create and Use Assemblies Using the Command Line (C#)\nAn assembly, or a dynamic linking library (DLL), is linked to your program at run time. To demonstrate building and using a DLL, consider the following scenario:  \n  \n-   `MathLibrary.DLL`: The library file that contains the methods to be called at run time. In this example, the DLL contains two methods, `Add` and `Multiply`.  \n  \n-   `Add`: The source file that contains the method `Add`. It returns the sum of its parameters. The class `AddClass` that contains the method `Add` is a member of the namespace `UtilityMethods`.  \n  \n-   `Mult`: The source code that contains the method `Multiply`. It returns the product of its parameters. The class `MultiplyClass` that contains the method `Multiply` is also a member of the namespace `UtilityMethods`.  \n  \n-   `TestCode`: The file that contains the `Main` method. It uses the methods in the DLL file to calculate the sum and the product of the run-time arguments.  \n  \n## Example  \n  \n```csharp  \n// File: Add.cs   \nnamespace UtilityMethods  \n{  \n    public class AddClass   \n    {  \n        public static long Add(long i, long j)   \n        {   \n            return (i + j);  \n        }  \n    }  \n}  \n```  \n  \n```csharp  \n// File: Mult.cs  \nnamespace UtilityMethods   \n{  \n    public class MultiplyClass  \n    {  \n        public static long Multiply(long x, long y)   \n        {  \n            return (x * y);   \n        }  \n    }  \n}  \n```  \n  \n```csharp  \n// File: TestCode.cs  \n  \nusing UtilityMethods;  \n  \nclass TestCode  \n{  \n    static void Main(string[] args)   \n    {  \n        System.Console.WriteLine(\"Calling methods from MathLibrary.DLL:\");  \n  \n        if (args.Length != 2)  \n        {  \n            System.Console.WriteLine(\"Usage: TestCode <num1> <num2>\");  \n            return;  \n        }  \n  \n        long num1 = long.Parse(args[0]);  \n        long num2 = long.Parse(args[1]);  \n  \n        long sum = AddClass.Add(num1, num2);  \n        long product = MultiplyClass.Multiply(num1, num2);  \n  \n        System.Console.WriteLine(\"{0} + {1} = {2}\", num1, num2, sum);  \n        System.Console.WriteLine(\"{0} * {1} = {2}\", num1, num2, product);  \n    }  \n}  \n/* Output (assuming 1234 and 5678 are entered as command-line arguments):  \n    Calling methods from MathLibrary.DLL:  \n    1234 + 5678 = 6912  \n    1234 * 5678 = 7006652          \n*/  \n```  \n  \n This file contains the algorithm that uses the DLL methods, `Add` and `Multiply`. It starts with parsing the arguments entered from the command line, `num1` and `num2`. Then it calculates the sum by using the `Add` method on the `AddClass` class, and the product by using the `Multiply` method on the `MultiplyClass` class.  \n  \n Notice that the `using` directive at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:  \n  \n```csharp  \nMultiplyClass.Multiply(num1, num2);  \n```  \n  \n Otherwise, you have to use the fully qualified names, as follows:  \n  \n```csharp  \nUtilityMethods.MultiplyClass.Multiply(num1, num2);  \n```  \n  \n## Execution  \n To run the program, enter the name of the EXE file, followed by two numbers, as follows:  \n  \n `TestCode 1234 5678`  \n  \n## Compiling the Code  \n To build the file `MathLibrary.DLL`, compile the two files `Add` and `Mult` by using the following command line.  \n  \n```csharp  \ncsc /target:library /out:MathLibrary.DLL Add.cs Mult.cs  \n```  \n  \n The [/target:library](../../../../csharp/language-reference/compiler-options/target-library-compiler-option.md) compiler option tells the compiler to output a DLL instead of an EXE file. The [/out](../../../../csharp/language-reference/compiler-options/out-compiler-option.md) compiler option followed by a file name is used to specify the DLL file name. Otherwise, the compiler uses the first file (`Add.cs`) as the name of the DLL.  \n  \n To build the executable file, `TestCode.exe`, use the following command line:  \n  \n```csharp  \ncsc /out:TestCode.exe /reference:MathLibrary.DLL TestCode.cs  \n```  \n  \n The **/out** compiler option tells the compiler to output an EXE file and specifies the name of the output file (`TestCode.exe`). This compiler option is optional. The [/reference](../../../../csharp/language-reference/compiler-options/reference-compiler-option.md) compiler option specifies the DLL file or files that this program uses. For more information, see [/reference](../../../../csharp/language-reference/compiler-options/reference-compiler-option.md).  \n  \n For more information about building from the command line, see [Command-line Building With csc.exe](../../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md).  \n  \n## See Also  \n [C# Programming Guide](../../../../csharp/programming-guide/index.md)   \n [Assemblies and the Global Assembly Cache (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/index.md)   \n [Creating a Class to Hold DLL Functions](../../../../framework/interop/creating-a-class-to-hold-dll-functions.md)","nodes":[{"pos":[4,442],"nodes":[{"content":"How to: Create and Use Assemblies Using the Command Line (C#) | Microsoft Docs","nodes":[{"pos":[0,78],"content":"How to: Create and Use Assemblies Using the Command Line (C#) | Microsoft Docs","nodes":[{"content":"How to: Create and Use Assemblies Using the Command Line (C#) | Microsoft Docs","pos":[0,78]}]}],"pos":[6,87],"yaml":true}],"content":"title: \"How to: Create and Use Assemblies Using the Command Line (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 408ddce3-89e3-4e12-8353-34a49beeb72b\ncaps.latest.revision: 4\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[449,510],"content":"How to: Create and Use Assemblies Using the Command Line (C#)","linkify":"How to: Create and Use Assemblies Using the Command Line (C#)","nodes":[{"content":"How to: Create and Use Assemblies Using the Command Line (C#)","pos":[0,61]}]},{"content":"An assembly, or a dynamic linking library (DLL), is linked to your program at run time.","pos":[511,598]},{"content":"To demonstrate building and using a DLL, consider the following scenario:","pos":[599,672]},{"content":"<ph id=\"ph1\">`MathLibrary.DLL`</ph>: The library file that contains the methods to be called at run time.","pos":[682,769],"source":"`MathLibrary.DLL`: The library file that contains the methods to be called at run time."},{"content":"In this example, the DLL contains two methods, <ph id=\"ph1\">`Add`</ph> and <ph id=\"ph2\">`Multiply`</ph>.","pos":[770,838],"source":" In this example, the DLL contains two methods, `Add` and `Multiply`."},{"content":"<ph id=\"ph1\">`Add`</ph>: The source file that contains the method <ph id=\"ph2\">`Add`</ph>.","pos":[848,902],"source":"`Add`: The source file that contains the method `Add`."},{"content":"It returns the sum of its parameters.","pos":[903,940]},{"content":"The class <ph id=\"ph1\">`AddClass`</ph> that contains the method <ph id=\"ph2\">`Add`</ph> is a member of the namespace <ph id=\"ph3\">`UtilityMethods`</ph>.","pos":[941,1039],"source":" The class `AddClass` that contains the method `Add` is a member of the namespace `UtilityMethods`."},{"content":"<ph id=\"ph1\">`Mult`</ph>: The source code that contains the method <ph id=\"ph2\">`Multiply`</ph>.","pos":[1049,1109],"source":"`Mult`: The source code that contains the method `Multiply`."},{"content":"It returns the product of its parameters.","pos":[1110,1151]},{"content":"The class <ph id=\"ph1\">`MultiplyClass`</ph> that contains the method <ph id=\"ph2\">`Multiply`</ph> is also a member of the namespace <ph id=\"ph3\">`UtilityMethods`</ph>.","pos":[1152,1265],"source":" The class `MultiplyClass` that contains the method `Multiply` is also a member of the namespace `UtilityMethods`."},{"content":"<ph id=\"ph1\">`TestCode`</ph>: The file that contains the <ph id=\"ph2\">`Main`</ph> method.","pos":[1275,1328],"source":"`TestCode`: The file that contains the `Main` method."},{"content":"It uses the methods in the DLL file to calculate the sum and the product of the run-time arguments.","pos":[1329,1428]},{"pos":[1437,1444],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This file contains the algorithm that uses the DLL methods, <ph id=\"ph1\">`Add`</ph> and <ph id=\"ph2\">`Multiply`</ph>.","pos":[2833,2914],"source":"This file contains the algorithm that uses the DLL methods, `Add` and `Multiply`."},{"content":"It starts with parsing the arguments entered from the command line, <ph id=\"ph1\">`num1`</ph> and <ph id=\"ph2\">`num2`</ph>.","pos":[2915,3001],"source":" It starts with parsing the arguments entered from the command line, `num1` and `num2`."},{"content":"Then it calculates the sum by using the <ph id=\"ph1\">`Add`</ph> method on the <ph id=\"ph2\">`AddClass`</ph> class, and the product by using the <ph id=\"ph3\">`Multiply`</ph> method on the <ph id=\"ph4\">`MultiplyClass`</ph> class.","pos":[3002,3156],"source":" Then it calculates the sum by using the `Add` method on the `AddClass` class, and the product by using the `Multiply` method on the `MultiplyClass` class."},{"pos":[3163,3330],"content":"Notice that the <ph id=\"ph1\">`using`</ph> directive at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:","source":"Notice that the `using` directive at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:"},{"content":"Otherwise, you have to use the fully qualified names, as follows:","pos":[3396,3461]},{"pos":[3544,3553],"content":"Execution","linkify":"Execution","nodes":[{"content":"Execution","pos":[0,9]}]},{"content":"To run the program, enter the name of the EXE file, followed by two numbers, as follows:","pos":[3557,3645]},{"pos":[3681,3699],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[3703,3815],"content":"To build the file <ph id=\"ph1\">`MathLibrary.DLL`</ph>, compile the two files <ph id=\"ph2\">`Add`</ph> and <ph id=\"ph3\">`Mult`</ph> by using the following command line.","source":"To build the file `MathLibrary.DLL`, compile the two files `Add` and `Mult` by using the following command line."},{"content":"The <bpt id=\"p1\">[</bpt>/target:library<ept id=\"p1\">](../../../../csharp/language-reference/compiler-options/target-library-compiler-option.md)</ept> compiler option tells the compiler to output a DLL instead of an EXE file.","pos":[3901,4087],"source":"The [/target:library](../../../../csharp/language-reference/compiler-options/target-library-compiler-option.md) compiler option tells the compiler to output a DLL instead of an EXE file."},{"content":"The <bpt id=\"p1\">[</bpt>/out<ept id=\"p1\">](../../../../csharp/language-reference/compiler-options/out-compiler-option.md)</ept> compiler option followed by a file name is used to specify the DLL file name.","pos":[4088,4255],"source":" The [/out](../../../../csharp/language-reference/compiler-options/out-compiler-option.md) compiler option followed by a file name is used to specify the DLL file name."},{"content":"Otherwise, the compiler uses the first file (<ph id=\"ph1\">`Add.cs`</ph>) as the name of the DLL.","pos":[4256,4334],"source":" Otherwise, the compiler uses the first file (`Add.cs`) as the name of the DLL."},{"pos":[4341,4418],"content":"To build the executable file, <ph id=\"ph1\">`TestCode.exe`</ph>, use the following command line:","source":"To build the executable file, `TestCode.exe`, use the following command line:"},{"content":"The <bpt id=\"p1\">**</bpt>/out<ept id=\"p1\">**</ept> compiler option tells the compiler to output an EXE file and specifies the name of the output file (<ph id=\"ph1\">`TestCode.exe`</ph>).","pos":[4509,4638],"source":"The **/out** compiler option tells the compiler to output an EXE file and specifies the name of the output file (`TestCode.exe`)."},{"content":"This compiler option is optional.","pos":[4639,4672]},{"content":"The <bpt id=\"p1\">[</bpt>/reference<ept id=\"p1\">](../../../../csharp/language-reference/compiler-options/reference-compiler-option.md)</ept> compiler option specifies the DLL file or files that this program uses.","pos":[4673,4846],"source":" The [/reference](../../../../csharp/language-reference/compiler-options/reference-compiler-option.md) compiler option specifies the DLL file or files that this program uses."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/reference<ept id=\"p1\">](../../../../csharp/language-reference/compiler-options/reference-compiler-option.md)</ept>.","pos":[4847,4971],"source":" For more information, see [/reference](../../../../csharp/language-reference/compiler-options/reference-compiler-option.md)."},{"pos":[4978,5172],"content":"For more information about building from the command line, see <bpt id=\"p1\">[</bpt>Command-line Building With csc.exe<ept id=\"p1\">](../../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.","source":"For more information about building from the command line, see [Command-line Building With csc.exe](../../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)."},{"pos":[5181,5189],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5193,5263],"source":"[C# Programming Guide](../../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Assemblies and the Global Assembly Cache (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5267,5386],"source":"[Assemblies and the Global Assembly Cache (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating a Class to Hold DLL Functions<ept id=\"p1\">](../../../../framework/interop/creating-a-class-to-hold-dll-functions.md)</ept>","pos":[5390,5503],"source":"[Creating a Class to Hold DLL Functions](../../../../framework/interop/creating-a-class-to-hold-dll-functions.md)"}]}