<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="character-escapes-in-regular-expressions.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2643e6ec1edf9cd69d7530def1e2605e1af20de4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\character-escapes-in-regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61a5d71a434391367a251f1e0323d00d02f63591</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">804a07741111baf3a2a21e079582648c50d6ad9f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Character Escapes in .NET Regular Expressions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about special characters and escaped characters in .NET regular expressions.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Character Escapes in Regular Expressions</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The backslash (<ph id="ph1">\\</ph>) in a regular expression indicates one of the following:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The character that follows it is a special character, as shown in the table in the following section.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\b`</ph> is an anchor that indicates that a regular expression match should begin on a word boundary, <ph id="ph2">`\t`</ph> represents a tab, and <ph id="ph3">`\x020`</ph> represents a space.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A character that otherwise would be interpreted as an unescaped language construct should be interpreted literally.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, a brace (<ph id="ph1">`{`</ph>) begins the definition of a quantifier, but a backslash followed by a brace (<ph id="ph2">`\{`</ph>) indicates that the regular expression engine should match the brace.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Similarly, a single backslash marks the beginning of an escaped language construct, but two backslashes (<ph id="ph1">`\\`</ph>) indicate that the regular expression engine should match the backslash.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Character escapes are recognized in regular expression patterns but not in replacement patterns.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Character Escapes in .NET</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table lists the character escapes supported by regular expressions in .NET.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Character or sequence</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All characters except for the following:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>$ ^ { [ ( &amp;#124; ) * + ?</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Characters other than those listed in the <bpt id="p1">**</bpt>Character or sequence<ept id="p1">**</ept> column have no special meaning in regular expressions; they match themselves.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The characters included in the <bpt id="p1">**</bpt>Character or sequence<ept id="p1">**</ept> column are special regular expression language elements.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To match them in a regular expression, they must be escaped or included in a <bpt id="p1">[</bpt>positive character group<ept id="p1">](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\$\d+`</ph> or <ph id="ph2">`[$]\d+`</ph> matches "$1200".</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Matches a bell (alarm) character, <ph id="ph1">`\u0007`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`[`</ph><bpt id="p1">*</bpt>character_group<ept id="p1">*</ept><ph id="ph2">`]`</ph> character class, matches a backspace, <ph id="ph3">`\u0008`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Character Classes<ept id="p1">](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)</ept>.) Outside a character class, <ph id="ph1">`\b`</ph> is an anchor that matches a word boundary.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Anchors<ept id="p1">](../../../docs/standard/base-types/anchors-in-regular-expressions.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Matches a tab, <ph id="ph1">`\u0009`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Matches a carriage return, <ph id="ph1">`\u000D`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`\r`</ph> is not equivalent to the newline character, <ph id="ph2">`\n`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Matches a vertical tab, <ph id="ph1">`\u000B`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Matches a form feed, <ph id="ph1">`\u000C`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Matches a new line, <ph id="ph1">`\u000A`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Matches an escape, <ph id="ph1">`\u001B`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\`</ph> <bpt id="p1">*</bpt>nnn<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Matches an ASCII character, where <bpt id="p1">*</bpt>nnn<ept id="p1">*</ept> consists of two or three digits that represent the octal character code.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\040`</ph> represents a space character.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This construct is interpreted as a backreference if it has only one digit (for example, <ph id="ph1">`\2`</ph>) or if it corresponds to the number of a capturing group.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Backreference Constructs<ept id="p1">](../../../docs/standard/base-types/backreference-constructs-in-regular-expressions.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\x`</ph> <bpt id="p1">*</bpt>nn<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Matches an ASCII character, where <bpt id="p1">*</bpt>nn<ept id="p1">*</ept> is a two-digit hexadecimal character code.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\c`</ph> <bpt id="p1">*</bpt>X<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Matches an ASCII control character, where X is the letter of the control character.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\cC`</ph> is CTRL-C.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\u`</ph> <bpt id="p1">*</bpt>nnnn<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Matches a UTF-16 code unit whose value is <bpt id="p1">*</bpt>nnnn<ept id="p1">*</ept> hexadecimal.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  The Perl 5 character escape that is used to specify Unicode is not supported by .NET.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Perl 5 character escape has the form <ph id="ph1">`\x{`</ph><bpt id="p1">*</bpt><ph id="ph2">####</ph><ept id="p1">*</ept><ph id="ph3">`…}`</ph>, where <bpt id="p2">*</bpt><ph id="ph4">####</ph><ept id="p2">*</ept><ph id="ph5">`…`</ph> is a series of hexadecimal digits.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Instead, use <ph id="ph1">`\u`</ph><bpt id="p1">*</bpt>nnnn<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When followed by a character that is not recognized as an escaped character, matches that character.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\*`</ph> matches an asterisk (*) and is the same as <ph id="ph2">`\x2A`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of character escapes in a regular expression.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It parses a string that contains the names of the world's largest cities and their populations in 2009.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Each city name is separated from its population by a tab (<ph id="ph1">`\t`</ph>) or a vertical bar (&amp;#124; or <ph id="ph2">`\u007c`</ph>).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Individual cities and their populations are separated from each other by a carriage return and line feed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The regular expression <ph id="ph1">`\G(.+)[\t|\u007c](.+)\r?\n`</ph> is interpreted as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Begin the match where the last match ended.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Match any character one or more times.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Match a tab (<ph id="ph1">`\t`</ph>) or a vertical bar (&amp;#124;).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Match any character one or more times.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a carriage return followed by a new line.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>