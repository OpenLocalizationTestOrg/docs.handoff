{"content":"---\ntitle: \"WriteableMetadataUpdateMode Enumeration\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"cpp\"\napi_name: \n  - \"WriteableMetadataUpdateMode\"\napi_location: \n  - \"mscordbi.dll\"\napi_type: \n  - \"COM\"\nms.assetid: 6758f4d3-6bc7-4c99-8582-e9be00566784\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# WriteableMetadataUpdateMode Enumeration\n[Supported in the .NET Framework 4.5.2 and later versions]  \n  \n Provides values that specify whether in-memory updates to metadata are visible to a debugger.  \n  \n## Syntax  \n  \n```cpp\ntypedef enum WriteableMetadataUpdateMode {  \n   LegacyCompatPolicy,  \n   AlwaysShowUpdates  \n} WriteableMetadataUpdateMode;  \n```  \n  \n## Members  \n  \n|Member name|Description|  \n|-----------------|-----------------|  \n|`LegacyCompatPolicy`|Maintain compatibility with previous versions of the .NET Framework when making in-memory updates to metadata visible. See the Remarks section for more information.|  \n|`AlwaysShowUpdates`|Make in-memory updates to metadata visible to the debugger.|  \n  \n## Remarks  \n A member of the `WriteableMetadataUpdateMode` enumeration can be passed to the [SetWriteableMetadataUpdateMode](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess7-setwriteablemetadataupdatemode-method.md) method to control whether in-memory updates to metadata in the target process are visible to the debugger.  \n  \n The `LegacyCompatPolicy` option enforces the same behavior as in versions of the .NET Framework before 4.5.2. This often means that metadata from updates is not visible. However, calls to a number of debugging methods implicitly coerce the debugger to make updates visible. For example, if the debugger passes [ICorDebugILFrame::GetLocalVariable](../../../../docs/framework/unmanaged-api/debugging/icordebugilframe-getlocalvariable-method.md) the index of a variable not found in the method's original metadata, all metadata for the module is updated to a snapshot matching the current state of the process. In other words, with the `LegacyCompatPolicy` option, the debugger might see none, some, or all of the available metadata updates, depending on how it uses other parts of the unmanaged debugging API.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorDebug.idl, CorDebug.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v452plus](../../../../includes/net-current-v452plus-md.md)]  \n  \n## See also\n\n- [Debugging Enumerations](../../../../docs/framework/unmanaged-api/debugging/debugging-enumerations.md)\n- [SetWriteableMetadataUpdateMode Method](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess7-setwriteablemetadataupdatemode-method.md)\n","nodes":[{"pos":[4,311],"embed":true,"restype":"x-metadata","content":"title: \"WriteableMetadataUpdateMode Enumeration\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"cpp\"\napi_name: \n  - \"WriteableMetadataUpdateMode\"\napi_location: \n  - \"mscordbi.dll\"\napi_type: \n  - \"COM\"\nms.assetid: 6758f4d3-6bc7-4c99-8582-e9be00566784\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"WriteableMetadataUpdateMode Enumeration","nodes":[{"pos":[0,39],"content":"WriteableMetadataUpdateMode Enumeration","nodes":[{"content":"WriteableMetadataUpdateMode Enumeration","pos":[0,39]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[318,357],"content":"WriteableMetadataUpdateMode Enumeration","linkify":"WriteableMetadataUpdateMode Enumeration","nodes":[{"content":"WriteableMetadataUpdateMode Enumeration","pos":[0,39]}]},{"content":"[Supported in the .NET Framework 4.5.2 and later versions]","pos":[358,416]},{"content":"Provides values that specify whether in-memory updates to metadata are visible to a debugger.","pos":[423,516]},{"pos":[525,531],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[682,689],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"content":"Member name","pos":[696,707]},{"content":"Description","pos":[708,719]},{"content":"Maintain compatibility with previous versions of the .NET Framework when making in-memory updates to metadata visible.","pos":[785,903]},{"content":"See the Remarks section for more information.","pos":[904,949]},{"content":"Make in-memory updates to metadata visible to the debugger.","pos":[974,1033]},{"pos":[1043,1050],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1054,1383],"content":"A member of the <ph id=\"ph1\">`WriteableMetadataUpdateMode`</ph> enumeration can be passed to the <bpt id=\"p1\">[</bpt>SetWriteableMetadataUpdateMode<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess7-setwriteablemetadataupdatemode-method.md)</ept> method to control whether in-memory updates to metadata in the target process are visible to the debugger.","source":"A member of the `WriteableMetadataUpdateMode` enumeration can be passed to the [SetWriteableMetadataUpdateMode](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess7-setwriteablemetadataupdatemode-method.md) method to control whether in-memory updates to metadata in the target process are visible to the debugger."},{"content":"The <ph id=\"ph1\">`LegacyCompatPolicy`</ph> option enforces the same behavior as in versions of the .NET Framework before 4.5.2.","pos":[1390,1499],"source":"The `LegacyCompatPolicy` option enforces the same behavior as in versions of the .NET Framework before 4.5.2."},{"content":"This often means that metadata from updates is not visible.","pos":[1500,1559]},{"content":"However, calls to a number of debugging methods implicitly coerce the debugger to make updates visible.","pos":[1560,1663]},{"content":"For example, if the debugger passes <bpt id=\"p1\">[</bpt>ICorDebugILFrame::GetLocalVariable<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/icordebugilframe-getlocalvariable-method.md)</ept> the index of a variable not found in the method's original metadata, all metadata for the module is updated to a snapshot matching the current state of the process.","pos":[1664,1997],"source":" For example, if the debugger passes [ICorDebugILFrame::GetLocalVariable](../../../../docs/framework/unmanaged-api/debugging/icordebugilframe-getlocalvariable-method.md) the index of a variable not found in the method's original metadata, all metadata for the module is updated to a snapshot matching the current state of the process."},{"content":"In other words, with the <ph id=\"ph1\">`LegacyCompatPolicy`</ph> option, the debugger might see none, some, or all of the available metadata updates, depending on how it uses other parts of the unmanaged debugging API.","pos":[1998,2197],"source":" In other words, with the `LegacyCompatPolicy` option, the debugger might see none, some, or all of the available metadata updates, depending on how it uses other parts of the unmanaged debugging API."},{"pos":[2206,2218],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2222,2326],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2333,2369],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorDebug.idl, CorDebug.h","source":"**Header:** CorDebug.idl, CorDebug.h"},{"pos":[2376,2401],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2408,2518],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v452plus](../../../../includes/net-current-v452plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v452plus](../../../../includes/net-current-v452plus-md.md)]"},{"pos":[2527,2535],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2539,2641],"content":"<bpt id=\"p1\">[</bpt>Debugging Enumerations<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/debugging-enumerations.md)</ept>","source":"[Debugging Enumerations](../../../../docs/framework/unmanaged-api/debugging/debugging-enumerations.md)"},{"pos":[2644,2794],"content":"<bpt id=\"p1\">[</bpt>SetWriteableMetadataUpdateMode Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess7-setwriteablemetadataupdatemode-method.md)</ept>","source":"[SetWriteableMetadataUpdateMode Method](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess7-setwriteablemetadataupdatemode-method.md)"}]}