<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-variance-in-delegates.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44a6153a9a1c0aa0aebb18710ea9e770fd4e57fe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\covariance-contravariance\using-variance-in-delegates.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">284935cfbc3019dbeb9b837d66249070b1ebef0b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be445b09c52b2b49fd2db872f24a0197048f86ec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Variance in Delegates (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Variance in Delegates (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you assign a method to a delegate, <bpt id="p1">*</bpt>covariance<ept id="p1">*</ept> and <bpt id="p2">*</bpt>contravariance<ept id="p2">*</ept> provide flexibility for matching a delegate type with a method signature.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Covariance permits a method to have return type that is more derived than that defined in the delegate.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Contravariance permits a method that has parameter types that are less derived than those in the delegate type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example 1: Covariance</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This example demonstrates how delegates can be used with methods that have return types that are derived from the return type in the delegate signature.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The data type returned by <ph id="ph1">`DogsHandler`</ph> is of type <ph id="ph2">`Dogs`</ph>, which derives from the <ph id="ph3">`Mammals`</ph> type that is defined in the delegate.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example 2: Contravariance</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This example demonstrates how delegates can be used with methods that have parameters of a type that are base types of the delegate signature parameter type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>With contravariance, you can use one event handler instead of separate handlers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, you can create an event handler that accepts an <ph id="ph1">`EventArgs`</ph> input parameter and use it with a <ph id="ph2">`Button.MouseClick`</ph> event that sends a <ph id="ph3">`MouseEventArgs`</ph> type as a parameter, and also with a <ph id="ph4">`TextBox.KeyDown`</ph> event that sends a <ph id="ph5">`KeyEventArgs`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Variance for Func and Action Generic Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>