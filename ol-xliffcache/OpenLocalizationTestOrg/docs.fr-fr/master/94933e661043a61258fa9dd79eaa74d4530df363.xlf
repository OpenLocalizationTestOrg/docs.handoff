<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-enable-a-command.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94933e661043a61258fa9dd79eaa74d4530df363</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\how-to-enable-a-command.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0efa93a0888ff88ab021b47c9dd77f43b84f491e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20376db5746126a810d15618a91d1cf0fcb07d29</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Enable a Command | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Enable a Command</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use commanding in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The example shows how to associate a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, create a <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>, and create the event handlers which implement the <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information on commanding, see the <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first section of code creates the <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>, which consists of a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> and a <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>, and creates a <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> that associates the command handlers with the <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> is associated with the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> command.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is added to the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBindingCollection&gt;</ph> of the root <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> event handlers are attached to this binding and associated with the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> command.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Without the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> there is no command logic, only a mechanism to invoke the command.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is clicked, the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> <ph id="ph3">&lt;xref:System.Windows.RoutedEvent&gt;</ph> is raised on the command target followed by the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.RoutedEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These events traverse the element tree looking for a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that particular command.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is worth noting that because <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> tunnel and bubble through the element tree, care must be taken in where the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is put.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is on a sibling of the command target or another node that is not on the route of the <ph id="ph2">&lt;xref:System.Windows.RoutedEvent&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> will not be accessed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The next section of code implements the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> handler calls a method to close the open file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> handler calls a method to determine whether a file is open.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If a file is open, <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>; otherwise, it is set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/commanding-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>