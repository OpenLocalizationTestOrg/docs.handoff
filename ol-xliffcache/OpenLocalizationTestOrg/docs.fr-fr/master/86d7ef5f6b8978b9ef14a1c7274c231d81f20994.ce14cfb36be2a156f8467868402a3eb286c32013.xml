{"content":"---\ntitle: \"Grouping Data (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: e414e9e4-343a-4e6e-858f-4a30c5e64492\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Grouping Data (C#)\nGrouping refers to the operation of putting data into groups so that the elements in each group share a common attribute.  \n  \n The following illustration shows the results of grouping a sequence of characters. The key for each group is the character.  \n  \n ![LINQ Grouping Operations](../../../../csharp/programming-guide/concepts/linq/media/linq_group.png \"LINQ_Group\")  \n  \n The standard query operator methods that group data elements are listed in the following section.  \n  \n## Methods  \n  \n|Method Name|Description|C# Query Expression Syntax|More Information|  \n|-----------------|-----------------|---------------------------------|----------------------|  \n|GroupBy|Groups elements that share a common attribute. Each group is represented by an <xref:System.Linq.IGrouping%602> object.|`group … by`<br /><br /> -or-<br /><br /> `group … by … into …`|<xref:System.Linq.Enumerable.GroupBy%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.GroupBy%2A?displayProperty=fullName>|  \n|ToLookup|Inserts elements into a <xref:System.Linq.Lookup%602> (a one-to-many dictionary) based on a key selector function.|Not applicable.|<xref:System.Linq.Enumerable.ToLookup%2A?displayProperty=fullName>|  \n  \n## Query Expression Syntax Example  \n The following code example uses the `group by` clause to group integers in a list according to whether they are even or odd.  \n  \n```csharp  \nList<int> numbers = new List<int>() { 35, 44, 200, 84, 3987, 4, 199, 329, 446, 208 };  \n  \nIEnumerable<IGrouping<int, int>> query = from number in numbers  \n                                         group number by number % 2;  \n  \nforeach (var group in query)  \n{  \n    Console.WriteLine(group.Key == 0 ? \"\\nEven numbers:\" : \"\\nOdd numbers:\");  \n    foreach (int i in group)  \n        Console.WriteLine(i);  \n}  \n  \n/* This code produces the following output:  \n  \n    Odd numbers:  \n    35  \n    3987  \n    199  \n    329  \n  \n    Even numbers:  \n    44  \n    200  \n    84  \n    4  \n    446  \n    208  \n*/  \n```  \n  \n## See Also  \n <xref:System.Linq>   \n [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)   \n [group clause](../../../../csharp/language-reference/keywords/group-clause.md)   \n [How to: Create a Nested Group](../../../../csharp/programming-guide/linq-query-expressions/how-to-create-a-nested-group.md)   \n [How to: Group Files by Extension (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md)   \n [How to: Group Query Results](../../../../csharp/programming-guide/linq-query-expressions/how-to-group-query-results.md)   \n [How to: Perform a Subquery on a Grouping Operation](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-a-subquery-on-a-grouping-operation.md)   \n [How to: Split a File Into Many Files by Using Groups (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md)","nodes":[{"pos":[12,47],"content":"Grouping Data (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Grouping Data (C#) | Microsoft Docs","pos":[0,35]}]},{"pos":[406,424],"content":"Grouping Data (C#)","linkify":"Grouping Data (C#)","nodes":[{"content":"Grouping Data (C#)","pos":[0,18]}]},{"content":"Grouping refers to the operation of putting data into groups so that the elements in each group share a common attribute.","pos":[425,546]},{"content":"The following illustration shows the results of grouping a sequence of characters.","pos":[553,635]},{"content":"The key for each group is the character.","pos":[636,676]},{"pos":[683,796],"content":"<bpt id=\"p1\">![</bpt>LINQ Grouping Operations<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../csharp/programming-guide/concepts/linq/media/linq_group.png \"</bpt>LINQ_Group<ept id=\"p2\">\")</ept>","source":"![LINQ Grouping Operations](../../../../csharp/programming-guide/concepts/linq/media/linq_group.png \"LINQ_Group\")"},{"content":"The standard query operator methods that group data elements are listed in the following section.","pos":[803,900]},{"pos":[909,916],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[923,934]},{"content":"Description","pos":[935,946]},{"content":"C# Query Expression Syntax","pos":[947,973]},{"content":"More Information","pos":[974,990]},{"content":"GroupBy","pos":[1092,1099]},{"content":"Groups elements that share a common attribute.","pos":[1100,1146]},{"content":"Each group is represented by an <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object.","pos":[1147,1219],"source":" Each group is represented by an <xref:System.Linq.IGrouping%602> object."},{"content":"-or-","pos":[1245,1249]},{"content":"ToLookup","pos":[1431,1439]},{"content":"Inserts elements into a <ph id=\"ph1\">&lt;xref:System.Linq.Lookup%602&gt;</ph> (a one-to-many dictionary) based on a key selector function.","pos":[1440,1554],"source":"Inserts elements into a <xref:System.Linq.Lookup%602> (a one-to-many dictionary) based on a key selector function."},{"content":"Not applicable.","pos":[1555,1570]},{"pos":[1647,1678],"content":"Query Expression Syntax Example","linkify":"Query Expression Syntax Example","nodes":[{"content":"Query Expression Syntax Example","pos":[0,31]}]},{"pos":[1682,1806],"content":"The following code example uses the <ph id=\"ph1\">`group by`</ph> clause to group integers in a list according to whether they are even or odd.","source":"The following code example uses the `group by` clause to group integers in a list according to whether they are even or odd."},{"pos":[2444,2452],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq&gt;</ph>","pos":[2456,2474],"source":"<xref:System.Linq> "},{"content":"<bpt id=\"p1\"> [</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[2478,2609],"source":" [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md) "},{"content":"<bpt id=\"p1\"> [</bpt>group clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/group-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2612,2692],"source":" [group clause](../../../../csharp/language-reference/keywords/group-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Create a Nested Group<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-create-a-nested-group.md)</ept><ph id=\"ph1\"> </ph>","pos":[2695,2821],"source":" [How to: Create a Nested Group](../../../../csharp/programming-guide/linq-query-expressions/how-to-create-a-nested-group.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Group Files by Extension (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[2824,2964],"source":" [How to: Group Files by Extension (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Group Query Results<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-group-query-results.md)</ept><ph id=\"ph1\"> </ph>","pos":[2967,3089],"source":" [How to: Group Query Results](../../../../csharp/programming-guide/linq-query-expressions/how-to-group-query-results.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Perform a Subquery on a Grouping Operation<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-a-subquery-on-a-grouping-operation.md)</ept><ph id=\"ph1\"> </ph>","pos":[3092,3260],"source":" [How to: Perform a Subquery on a Grouping Operation](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-a-subquery-on-a-grouping-operation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Split a File Into Many Files by Using Groups (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md)</ept>","pos":[3263,3442],"source":" [How to: Split a File Into Many Files by Using Groups (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md)"}]}