{"content":"---\ntitle: \"class (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"class_CSharpKeyword\"\n  - \"class\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"class keyword [C#]\"\nms.assetid: b95d8815-de18-4c3f-a8cc-a0a53bdf8690\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# class (C# Reference)\nClasses are declared using the keyword `class`, as shown in the following example:  \n  \n```  \n  \n      class TestClass  \n{  \n    // Methods, properties, fields, events, delegates   \n    // and nested classes go here.  \n}  \n```  \n  \n## Remarks  \n Only single inheritance is allowed in C#. In other words, a class can inherit implementation from one base class only. However, a class can implement more than one interface. The following table shows examples of class inheritance and interface implementation:  \n  \n|Inheritance|Example|  \n|-----------------|-------------|  \n|None|`class ClassA { }`|  \n|Single|`class DerivedClass: BaseClass { }`|  \n|None, implements two interfaces|`class ImplClass: IFace1, IFace2 { }`|  \n|Single, implements one interface|`class ImplDerivedClass: BaseClass, IFace1 { }`|  \n  \n Classes that you declare directly within a namespace, not nested within other classes, can be either [public](../../../csharp/language-reference/keywords/public.md) or [internal](../../../csharp/language-reference/keywords/internal.md). Classes are `internal` by default.  \n  \n Class members, including nested classes, can be [public](../../../csharp/language-reference/keywords/public.md), `protected internal`, [protected](../../../csharp/language-reference/keywords/protected.md), [internal](../../../csharp/language-reference/keywords/internal.md), or [private](../../../csharp/language-reference/keywords/private.md). Members are [private](../../../csharp/language-reference/keywords/private.md) by default.  \n  \n For more information, see [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md).  \n  \n You can declare generic classes that have type parameters. For more information, see [Generic Classes](../../../csharp/programming-guide/generics/generic-classes.md).  \n  \n A class can contain declarations of the following members:  \n  \n-   [Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)  \n  \n-   [Constants](../../../csharp/programming-guide/classes-and-structs/constants.md)  \n  \n-   [Fields](../../../csharp/programming-guide/classes-and-structs/fields.md)  \n  \n-   [Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)  \n\n-   [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)  \n  \n-   [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)  \n  \n-   [Indexers](../../../csharp/programming-guide/indexers/index.md)  \n  \n-   [Operators](../../../csharp/programming-guide/statements-expressions-operators/operators.md)  \n  \n-   [Events](../../../csharp/programming-guide/events/index.md)  \n  \n-   [Delegates](../../../csharp/programming-guide/delegates/index.md)  \n  \n-   [Classes](../../../csharp/programming-guide/classes-and-structs/classes.md)  \n  \n-   [Interfaces](../../../csharp/programming-guide/interfaces/index.md)  \n  \n-   [Structs](../../../csharp/programming-guide/classes-and-structs/structs.md)  \n  \n## Example  \n The following example demonstrates declaring class fields, constructors, and methods. It also demonstrates object instantiation and printing instance data. In this example, two classes are declared, the `Child` class, which contains two private fields (`name` and `age`) and two public methods. The second class, `StringTest`, is used to contain `Main`.  \n  \n [!code-cs[csrefKeywordsTypes#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/class_1.cs)]  \n  \n## Comments  \n Notice, in the preceding example, that the private fields (`name` and `age`) can only be accessed through the public methods of the `Child` class. For example, you cannot print the child's name, from the `Main` method, using a statement like this:  \n  \n```  \nConsole.Write(child1.name);   // Error  \n```  \n  \n Accessing private members of `Child` from `Main` would only be possible if `Main` were a member of the class.  \n  \n Types declared inside a class without an access modifier default to `private`, so the data members in this example would still be `private` if the keyword were removed.  \n  \n Finally, notice that for the object created using the default constructor (`child3`), the age field was initialized to zero by default.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)","nodes":[{"pos":[12,49],"content":"class (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"class (C# Reference) | Microsoft Docs","pos":[0,37]}]},{"pos":[597,617],"content":"class (C# Reference)","linkify":"class (C# Reference)","nodes":[{"content":"class (C# Reference)","pos":[0,20]}]},{"pos":[618,700],"content":"Classes are declared using the keyword <ph id=\"ph1\">`class`</ph>, as shown in the following example:","source":"Classes are declared using the keyword `class`, as shown in the following example:"},{"pos":[853,860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only single inheritance is allowed in C#.","pos":[864,905]},{"content":"In other words, a class can inherit implementation from one base class only.","pos":[906,982]},{"content":"However, a class can implement more than one interface.","pos":[983,1038]},{"content":"The following table shows examples of class inheritance and interface implementation:","pos":[1039,1124]},{"content":"Inheritance","pos":[1131,1142]},{"content":"Example","pos":[1143,1150]},{"content":"None","pos":[1191,1195]},{"content":"Single","pos":[1219,1225]},{"content":"None, implements two interfaces","pos":[1266,1297]},{"content":"Single, implements one interface","pos":[1340,1372]},{"content":"Classes that you declare directly within a namespace, not nested within other classes, can be either <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept> or <bpt id=\"p2\">[</bpt>internal<ept id=\"p2\">](../../../csharp/language-reference/keywords/internal.md)</ept>.","pos":[1428,1664],"source":"Classes that you declare directly within a namespace, not nested within other classes, can be either [public](../../../csharp/language-reference/keywords/public.md) or [internal](../../../csharp/language-reference/keywords/internal.md)."},{"content":"Classes are <ph id=\"ph1\">`internal`</ph> by default.","pos":[1665,1699],"source":" Classes are `internal` by default."},{"content":"Class members, including nested classes, can be <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept>, <ph id=\"ph1\">`protected internal`</ph>, <bpt id=\"p2\">[</bpt>protected<ept id=\"p2\">](../../../csharp/language-reference/keywords/protected.md)</ept>, <bpt id=\"p3\">[</bpt>internal<ept id=\"p3\">](../../../csharp/language-reference/keywords/internal.md)</ept>, or <bpt id=\"p4\">[</bpt>private<ept id=\"p4\">](../../../csharp/language-reference/keywords/private.md)</ept>.","pos":[1706,2050],"source":"Class members, including nested classes, can be [public](../../../csharp/language-reference/keywords/public.md), `protected internal`, [protected](../../../csharp/language-reference/keywords/protected.md), [internal](../../../csharp/language-reference/keywords/internal.md), or [private](../../../csharp/language-reference/keywords/private.md)."},{"content":"Members are <bpt id=\"p1\">[</bpt>private<ept id=\"p1\">](../../../csharp/language-reference/keywords/private.md)</ept> by default.","pos":[2051,2140],"source":" Members are [private](../../../csharp/language-reference/keywords/private.md) by default."},{"pos":[2147,2267],"content":"For more information, see <bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept>.","source":"For more information, see [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)."},{"content":"You can declare generic classes that have type parameters.","pos":[2274,2332]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generic Classes<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-classes.md)</ept>.","pos":[2333,2440],"source":" For more information, see [Generic Classes](../../../csharp/programming-guide/generics/generic-classes.md)."},{"content":"A class can contain declarations of the following members:","pos":[2447,2505]},{"pos":[2515,2600],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constructors.md)</ept>","source":"[Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)"},{"pos":[2610,2689],"content":"<bpt id=\"p1\">[</bpt>Constants<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constants.md)</ept>","source":"[Constants](../../../csharp/programming-guide/classes-and-structs/constants.md)"},{"pos":[2699,2772],"content":"<bpt id=\"p1\">[</bpt>Fields<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/fields.md)</ept>","source":"[Fields](../../../csharp/programming-guide/classes-and-structs/fields.md)"},{"pos":[2782,2864],"content":"<bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/destructors.md)</ept>","source":"[Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)"},{"pos":[2872,2947],"content":"<bpt id=\"p1\">[</bpt>Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept>","source":"[Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)"},{"pos":[2957,3038],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"},{"pos":[3048,3111],"content":"<bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md)</ept>","source":"[Indexers](../../../csharp/programming-guide/indexers/index.md)"},{"pos":[3121,3213],"content":"<bpt id=\"p1\">[</bpt>Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/operators.md)</ept>","source":"[Operators](../../../csharp/programming-guide/statements-expressions-operators/operators.md)"},{"pos":[3223,3282],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>","source":"[Events](../../../csharp/programming-guide/events/index.md)"},{"pos":[3292,3357],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept>","source":"[Delegates](../../../csharp/programming-guide/delegates/index.md)"},{"pos":[3367,3442],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/classes.md)</ept>","source":"[Classes](../../../csharp/programming-guide/classes-and-structs/classes.md)"},{"pos":[3452,3519],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](../../../csharp/programming-guide/interfaces/index.md)</ept>","source":"[Interfaces](../../../csharp/programming-guide/interfaces/index.md)"},{"pos":[3529,3604],"content":"<bpt id=\"p1\">[</bpt>Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/structs.md)</ept>","source":"[Structs](../../../csharp/programming-guide/classes-and-structs/structs.md)"},{"pos":[3613,3620],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates declaring class fields, constructors, and methods.","pos":[3624,3709]},{"content":"It also demonstrates object instantiation and printing instance data.","pos":[3710,3779]},{"content":"In this example, two classes are declared, the <ph id=\"ph1\">`Child`</ph> class, which contains two private fields (<ph id=\"ph2\">`name`</ph> and <ph id=\"ph3\">`age`</ph>) and two public methods.","pos":[3780,3918],"source":" In this example, two classes are declared, the `Child` class, which contains two private fields (`name` and `age`) and two public methods."},{"content":"The second class, <ph id=\"ph1\">`StringTest`</ph>, is used to contain <ph id=\"ph2\">`Main`</ph>.","pos":[3919,3977],"source":" The second class, `StringTest`, is used to contain `Main`."},{"pos":[3984,4091],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsTypes#5<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/class_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsTypes#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/class_1.cs)]"},{"pos":[4100,4108],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"Notice, in the preceding example, that the private fields (<ph id=\"ph1\">`name`</ph> and <ph id=\"ph2\">`age`</ph>) can only be accessed through the public methods of the <ph id=\"ph3\">`Child`</ph> class.","pos":[4112,4258],"source":"Notice, in the preceding example, that the private fields (`name` and `age`) can only be accessed through the public methods of the `Child` class."},{"content":"For example, you cannot print the child's name, from the <ph id=\"ph1\">`Main`</ph> method, using a statement like this:","pos":[4259,4359],"source":" For example, you cannot print the child's name, from the `Main` method, using a statement like this:"},{"pos":[4422,4531],"content":"Accessing private members of <ph id=\"ph1\">`Child`</ph> from <ph id=\"ph2\">`Main`</ph> would only be possible if <ph id=\"ph3\">`Main`</ph> were a member of the class.","source":"Accessing private members of `Child` from `Main` would only be possible if `Main` were a member of the class."},{"pos":[4538,4706],"content":"Types declared inside a class without an access modifier default to <ph id=\"ph1\">`private`</ph>, so the data members in this example would still be <ph id=\"ph2\">`private`</ph> if the keyword were removed.","source":"Types declared inside a class without an access modifier default to `private`, so the data members in this example would still be `private` if the keyword were removed."},{"pos":[4713,4848],"content":"Finally, notice that for the object created using the default constructor (<ph id=\"ph1\">`child3`</ph>), the age field was initialized to zero by default.","source":"Finally, notice that for the object created using the default constructor (`child3`), the age field was initialized to zero by default."},{"pos":[4857,4882],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4996,5004],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5008,5068],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5071,5139],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5142,5211],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept>","pos":[5214,5296],"source":" [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)"}]}