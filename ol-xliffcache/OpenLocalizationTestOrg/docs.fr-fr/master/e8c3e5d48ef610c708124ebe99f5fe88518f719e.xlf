<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8c3e5d48ef610c708124ebe99f5fe88518f719e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\how-to-implement-validation-with-the-datagrid-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c738317711292f662ed6b26bc50f1fec8bf01298</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d360f0a631bd0a1e45093ae9f264ea5b6148a8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Implement Validation with the DataGrid Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Implement Validation with the DataGrid Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control enables you to perform validation at both the cell and row level.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>With cell-level validation, you validate individual properties of a bound data object when a user updates a value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With row-level validation, you validate entire data objects when a user commits changes to a row.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also provide customized visual feedback for validation errors, or use the default visual feedback that the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control provides.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following procedures describe how to apply validation rules to <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> bindings and customize the visual feedback.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To validate individual cell values</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specify one or more validation rules on the binding used with a column.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is similar to validating data in simple controls, as described in <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example shows a <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control with four columns bound to different properties of a business object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Three of the columns specify the <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> by setting the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DataGrid_Validation#BasicXaml<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/window1.xaml#basicxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When a user enters an invalid value (such as a non-integer in the Course ID column), a red border appears around the cell.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can change this default validation feedback as described in the following procedure.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To customize cell validation feedback</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Set the column's <ph id="ph1">&lt;xref:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle%2A&gt;</ph> property to a style appropriate for the column's editing control.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because the editing controls are created at run time, you cannot use the <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A?displayProperty=fullName&gt;</ph> attached property like you would with simple controls.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example updates the previous example by adding an error style shared by the three columns with validation rules.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When a user enters an invalid value, the style changes the cell background color and adds a ToolTip.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Note the use of a trigger to determine whether there is a validation error.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is required because there is currently no dedicated error template for cells.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DataGrid_Validation#CellValidationXaml<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml#cellvalidationxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can implement more extensive customization by replacing the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGridColumn.CellStyle%2A&gt;</ph> used by the column.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To validate multiple values in a single row</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Implement a <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> subclass that checks multiple properties of the bound data object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In your <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method implementation, cast the <ph id="ph2">`value`</ph> parameter value to a <ph id="ph3">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can then access the data object through the <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup.Items%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this process to validate whether the <ph id="ph1">`StartDate`</ph> property value for a <ph id="ph2">`Course`</ph> object is earlier than its <ph id="ph3">`EndDate`</ph> property value.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataGrid_Validation#CourseValidationRule<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml.cs#coursevalidationrule)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataGrid_Validation#CourseValidationRule<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/datagrid_validation/vb/mainwindow.xaml.vb#coursevalidationrule)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add the validation rule to the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid.RowValidationRules%2A?displayProperty=fullName&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid.RowValidationRules%2A&gt;</ph> property provides direct access to the <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup.ValidationRules%2A&gt;</ph> property of a <ph id="ph3">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> instance that groups all the bindings used by the control.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid.RowValidationRules%2A&gt;</ph> property in XAML.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> so that the validation occurs only after the bound data object is updated.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DataGrid_Validation#RowValidationRulesXaml<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml#rowvalidationrulesxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When a user specifies an end date that is earlier than the start date, a red exclamation mark (!) appears in the row header.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can change this default validation feedback as described in the following procedure.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To customize row validation feedback</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid.RowValidationErrorTemplate%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This property enables you to customize row validation feedback for individual <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can also affect multiple controls by using an implicit row style to set the <ph id="ph1">&lt;xref:System.Windows.Controls.DataGridRow.ValidationErrorTemplate%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example replaces the default row validation feedback with a more visible indicator.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When a user enters an invalid value, a red circle with a white exclamation mark appears in the row header.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This occurs for both row and cell validation errors.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The associated error message is displayed in a ToolTip.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DataGrid_Validation#RowValidationFeedbackXaml<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml#rowvalidationfeedbackxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example provides a complete demonstration for cell and row validation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Course`</ph> class provides a sample data object that implements <ph id="ph2">&lt;xref:System.ComponentModel.IEditableObject&gt;</ph> to support transactions.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control interacts with <ph id="ph2">&lt;xref:System.ComponentModel.IEditableObject&gt;</ph> to enable users to revert changes by pressing ESC.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you are using Visual Basic, in the first line of MainWindow.xaml, replace <ph id="ph1">`x:Class="DataGridValidation.MainWindow"`</ph> with <ph id="ph2">`x:Class="MainWindow"`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To test the validation, try the following:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the Course ID column, enter a non-integer value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the End Date column, enter a date that is earlier than the Start Date.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Delete the value in Course ID, Start Date, or End Date.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To undo an invalid cell value, put the cursor back in the cell and press the ESC key.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To undo changes for an entire row when the current cell is in edit mode, press the ESC key twice.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When a validation error occurs, move your mouse pointer over the indicator in the row header to see the associated error message.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataGrid_Validation#FullCode<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml.cs#fullcode)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataGrid_Validation#FullCode<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/datagrid_validation/vb/mainwindow.xaml.vb#fullcode)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DataGrid_Validation#FullXaml<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml#fullxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataGrid<ept id="p1">](../../../../docs/framework/wpf/controls/datagrid.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implement Binding Validation<ept id="p1">](../../../../docs/framework/wpf/data/how-to-implement-binding-validation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implement Validation Logic on Custom Objects<ept id="p1">](../../../../docs/framework/wpf/data/how-to-implement-validation-logic-on-custom-objects.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>