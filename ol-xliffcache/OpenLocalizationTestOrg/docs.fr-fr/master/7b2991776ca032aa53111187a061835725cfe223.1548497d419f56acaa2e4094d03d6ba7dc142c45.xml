{"content":"---\ntitle: \"How to: access an array element with a pointer - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"pointers [C#], array access\"\nms.assetid: 6c46f2af-a730-4855-8638-f136d9abaa12\n---\n# How to: access an array element with a pointer (C# Programming Guide)\n\nIn an unsafe context, you can access an element in memory by using pointer element access, as shown in the following example:\n\n```csharp\nchar* charPointer = stackalloc char[123];\nfor (int i = 65; i < 123; i++)\n{\n    charPointer[i] = (char)i; //access array elements\n}\n```\n\nThe expression in square brackets must be implicitly convertible to `int`, `uint`, `long`, or `ulong`. The operation `p[e]` is equivalent to `*(p+e)`. Like C and C++, the pointer element access does not check for out-of-bounds errors.\n\n## Example\n\nIn this example, 123 memory locations are allocated to a character array, `charPointer`. The array is used to display the lowercase letters and the uppercase letters in two [for](../../../csharp/language-reference/keywords/for.md) loops.\n\nNotice that the expression `charPointer[i]` is equivalent to the expression `*(charPointer + i)`, and you can obtain the same result by using either of the two expressions.\n\n [!code-csharp[csProgGuidePointers#11](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers2.cs#11)]\n\n [!code-csharp[csProgGuidePointers#12](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers.cs#12)]\n\n**Uppercase letters:**  \n**ABCDEFGHIJKLMNOPQRSTUVWXYZ**  \n**Lowercase letters:**  \n**abcdefghijklmnopqrstuvwxyz**  \n\n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)\n- [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)\n- [Types](../../../csharp/language-reference/keywords/types.md)\n- [unsafe](../../../csharp/language-reference/keywords/unsafe.md)\n- [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)\n- [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)\n","nodes":[{"pos":[4,227],"embed":true,"restype":"x-metadata","content":"title: \"How to: access an array element with a pointer - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"pointers [C#], array access\"\nms.assetid: 6c46f2af-a730-4855-8638-f136d9abaa12","nodes":[{"content":"How to: access an array element with a pointer - C# Programming Guide","nodes":[{"pos":[0,69],"content":"How to: access an array element with a pointer - C# Programming Guide","nodes":[{"content":"How to: access an array element with a pointer - C# Programming Guide","pos":[0,69]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[234,303],"content":"How to: access an array element with a pointer (C# Programming Guide)","linkify":"How to: access an array element with a pointer (C# Programming Guide)","nodes":[{"content":"How to: access an array element with a pointer (C# Programming Guide)","pos":[0,69]}]},{"content":"In an unsafe context, you can access an element in memory by using pointer element access, as shown in the following example:","pos":[305,430]},{"content":"The expression in square brackets must be implicitly convertible to <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`uint`</ph>, <ph id=\"ph3\">`long`</ph>, or <ph id=\"ph4\">`ulong`</ph>.","pos":[578,680],"source":"The expression in square brackets must be implicitly convertible to `int`, `uint`, `long`, or `ulong`."},{"content":"The operation <ph id=\"ph1\">`p[e]`</ph> is equivalent to <ph id=\"ph2\">`*(p+e)`</ph>.","pos":[681,728],"source":" The operation `p[e]` is equivalent to `*(p+e)`."},{"content":"Like C and C++, the pointer element access does not check for out-of-bounds errors.","pos":[729,812]},{"pos":[817,824],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, 123 memory locations are allocated to a character array, <ph id=\"ph1\">`charPointer`</ph>.","pos":[826,914],"source":"In this example, 123 memory locations are allocated to a character array, `charPointer`."},{"content":"The array is used to display the lowercase letters and the uppercase letters in two <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../csharp/language-reference/keywords/for.md)</ept> loops.","pos":[915,1063],"source":" The array is used to display the lowercase letters and the uppercase letters in two [for](../../../csharp/language-reference/keywords/for.md) loops."},{"pos":[1065,1237],"content":"Notice that the expression <ph id=\"ph1\">`charPointer[i]`</ph> is equivalent to the expression <ph id=\"ph2\">`*(charPointer + i)`</ph>, and you can obtain the same result by using either of the two expressions.","source":"Notice that the expression `charPointer[i]` is equivalent to the expression `*(charPointer + i)`, and you can obtain the same result by using either of the two expressions."},{"content":"<bpt id=\"p1\">**</bpt>Uppercase letters:<ept id=\"p1\">**</ept>","pos":[1494,1516],"source":"**Uppercase letters:**"},{"content":"<bpt id=\"p1\">**</bpt>ABCDEFGHIJKLMNOPQRSTUVWXYZ<ept id=\"p1\">**</ept>","pos":[1519,1549],"source":"**ABCDEFGHIJKLMNOPQRSTUVWXYZ**"},{"content":"<bpt id=\"p1\">**</bpt>Lowercase letters:<ept id=\"p1\">**</ept>","pos":[1552,1574],"source":"**Lowercase letters:**"},{"content":"<bpt id=\"p1\">**</bpt>abcdefghijklmnopqrstuvwxyz<ept id=\"p1\">**</ept>","pos":[1577,1607],"source":"**abcdefghijklmnopqrstuvwxyz**"},{"pos":[1614,1622],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1626,1692],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1695,1795],"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept>","source":"[Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)"},{"pos":[1798,1886],"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept>","source":"[Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)"},{"pos":[1889,1950],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept>","source":"[Types](../../../csharp/language-reference/keywords/types.md)"},{"pos":[1953,2016],"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept>","source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md)"},{"pos":[2019,2100],"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept>","source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)"},{"pos":[2103,2174],"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","source":"[stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}