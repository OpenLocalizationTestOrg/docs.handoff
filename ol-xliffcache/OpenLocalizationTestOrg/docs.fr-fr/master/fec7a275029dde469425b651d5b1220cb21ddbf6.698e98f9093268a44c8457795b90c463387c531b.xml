{"content":"---\ntitle: \"Determining Object Type (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"classes [Visual Basic], discovering which an object belongs to\"\n  - \"types [Visual Basic], determining Visual Basic object types\"\n  - \"object variables, testing values\"\n  - \"TypeOf...Is expression, object type at run time\"\n  - \"TypeName function\"\n  - \"objects [Visual Basic], type determining\"\nms.assetid: d95e7ad1-cd63-41d6-9a28-d7a1380d49c1\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Determining Object Type (Visual Basic)\nGeneric object variables (that is, variables you declare as `Object`) can hold objects from any class. When using variables of type `Object`, you may need to take different actions based on the class of the object; for example, some objects might not support a particular property or method. [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides two means of determining which type of object is stored in an object variable: the `TypeName` function and the `TypeOf...Is` operator.  \n  \n## TypeName and TypeOf…Is  \n The `TypeName` function returns a string and is the best choice when you need to store or display the class name of an object, as shown in the following code fragment:  \n  \n [!code-vb[VbVbalrOOP#92](../../../../visual-basic/misc/codesnippet/VisualBasic/determining-object-type_1.vb)]  \n  \n The `TypeOf...Is` operator is the best choice for testing an object's type, because it is much faster than an equivalent string comparison using `TypeName`. The following code fragment uses `TypeOf...Is` within an `If...Then...Else` statement:  \n  \n [!code-vb[VbVbalrOOP#93](../../../../visual-basic/misc/codesnippet/VisualBasic/determining-object-type_2.vb)]  \n  \n A word of caution is due here. The `TypeOf...Is` operator returns `True` if an object is of a specific type, or is derived from a specific type. Almost everything you do with [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] involves objects, which include some elements not normally thought of as objects, such as strings and integers. These objects are derived from and inherit methods from <xref:System.Object>. When passed an `Integer` and evaluated with `Object`, the `TypeOf...Is` operator returns `True`. The following example reports that the parameter `InParam` is both an `Object` and an `Integer`:  \n  \n [!code-vb[VbVbalrOOP#94](../../../../visual-basic/misc/codesnippet/VisualBasic/determining-object-type_3.vb)]  \n  \n The following example uses both `TypeOf...Is` and `TypeName` to determine the type of object passed to it in the `Ctrl` argument. The `TestObject` procedure calls `ShowType` with three different kinds of controls.  \n  \n#### To run the example  \n  \n1.  Create a new Windows Application project and add a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.CheckBox> control, and a <xref:System.Windows.Forms.RadioButton> control to the form.  \n  \n2.  From the button on your form, call the `TestObject` procedure.  \n  \n3.  Add the following code to your form:  \n  \n     [!code-vb[VbVbalrOOP#95](../../../../visual-basic/misc/codesnippet/VisualBasic/determining-object-type_4.vb)]  \n  \n## See Also  \n <xref:Microsoft.VisualBasic.Information.TypeName%2A>   \n [Calling a Property or Method Using a String Name](../../../../visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md)   \n [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)   \n [If...Then...Else Statement](../../../../visual-basic/language-reference/statements/if-then-else-statement.md)   \n [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md)   \n [Integer Data Type](../../../../visual-basic/language-reference/data-types/integer-data-type.md)","nodes":[{"pos":[4,854],"embed":true,"restype":"x-metadata","content":"title: \"Determining Object Type (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"classes [Visual Basic], discovering which an object belongs to\"\n  - \"types [Visual Basic], determining Visual Basic object types\"\n  - \"object variables, testing values\"\n  - \"TypeOf...Is expression, object type at run time\"\n  - \"TypeName function\"\n  - \"objects [Visual Basic], type determining\"\nms.assetid: d95e7ad1-cd63-41d6-9a28-d7a1380d49c1\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Determining Object Type (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,55],"content":"Determining Object Type (Visual Basic) | Microsoft Docs","nodes":[{"content":"Determining Object Type (Visual Basic) | Microsoft Docs","pos":[0,55]}]}],"path":["title"]}],"yml":true},{"pos":[861,899],"content":"Determining Object Type (Visual Basic)","linkify":"Determining Object Type (Visual Basic)","nodes":[{"content":"Determining Object Type (Visual Basic)","pos":[0,38]}]},{"content":"Generic object variables (that is, variables you declare as <ph id=\"ph1\">`Object`</ph>) can hold objects from any class.","pos":[900,1002],"source":"Generic object variables (that is, variables you declare as `Object`) can hold objects from any class."},{"content":"When using variables of type <ph id=\"ph1\">`Object`</ph>, you may need to take different actions based on the class of the object; for example, some objects might not support a particular property or method.","pos":[1003,1191],"source":" When using variables of type `Object`, you may need to take different actions based on the class of the object; for example, some objects might not support a particular property or method."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> provides two means of determining which type of object is stored in an object variable: the <ph id=\"ph2\">`TypeName`</ph> function and the <ph id=\"ph3\">`TypeOf...Is`</ph> operator.","pos":[1192,1428],"source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides two means of determining which type of object is stored in an object variable: the `TypeName` function and the `TypeOf...Is` operator."},{"pos":[1437,1459],"content":"TypeName and TypeOf…Is","linkify":"TypeName and TypeOf…Is","nodes":[{"content":"TypeName and TypeOf…Is","pos":[0,22]}]},{"pos":[1463,1630],"content":"The <ph id=\"ph1\">`TypeName`</ph> function returns a string and is the best choice when you need to store or display the class name of an object, as shown in the following code fragment:","source":"The `TypeName` function returns a string and is the best choice when you need to store or display the class name of an object, as shown in the following code fragment:"},{"content":"The <ph id=\"ph1\">`TypeOf...Is`</ph> operator is the best choice for testing an object's type, because it is much faster than an equivalent string comparison using <ph id=\"ph2\">`TypeName`</ph>.","pos":[1753,1909],"source":"The `TypeOf...Is` operator is the best choice for testing an object's type, because it is much faster than an equivalent string comparison using `TypeName`."},{"content":"The following code fragment uses <ph id=\"ph1\">`TypeOf...Is`</ph> within an <ph id=\"ph2\">`If...Then...Else`</ph> statement:","pos":[1910,1996],"source":" The following code fragment uses `TypeOf...Is` within an `If...Then...Else` statement:"},{"content":"A word of caution is due here.","pos":[2119,2149]},{"content":"The <ph id=\"ph1\">`TypeOf...Is`</ph> operator returns <ph id=\"ph2\">`True`</ph> if an object is of a specific type, or is derived from a specific type.","pos":[2150,2263],"source":" The `TypeOf...Is` operator returns `True` if an object is of a specific type, or is derived from a specific type."},{"content":"Almost everything you do with <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> involves objects, which include some elements not normally thought of as objects, such as strings and integers.","pos":[2264,2498],"source":" Almost everything you do with [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] involves objects, which include some elements not normally thought of as objects, such as strings and integers."},{"content":"These objects are derived from and inherit methods from <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph>.","pos":[2499,2576],"source":" These objects are derived from and inherit methods from <xref:System.Object>."},{"content":"When passed an <ph id=\"ph1\">`Integer`</ph> and evaluated with <ph id=\"ph2\">`Object`</ph>, the <ph id=\"ph3\">`TypeOf...Is`</ph> operator returns <ph id=\"ph4\">`True`</ph>.","pos":[2577,2673],"source":" When passed an `Integer` and evaluated with `Object`, the `TypeOf...Is` operator returns `True`."},{"content":"The following example reports that the parameter <ph id=\"ph1\">`InParam`</ph> is both an <ph id=\"ph2\">`Object`</ph> and an <ph id=\"ph3\">`Integer`</ph>:","pos":[2674,2770],"source":" The following example reports that the parameter `InParam` is both an `Object` and an `Integer`:"},{"content":"The following example uses both <ph id=\"ph1\">`TypeOf...Is`</ph> and <ph id=\"ph2\">`TypeName`</ph> to determine the type of object passed to it in the <ph id=\"ph3\">`Ctrl`</ph> argument.","pos":[2893,3022],"source":"The following example uses both `TypeOf...Is` and `TypeName` to determine the type of object passed to it in the `Ctrl` argument."},{"content":"The <ph id=\"ph1\">`TestObject`</ph> procedure calls <ph id=\"ph2\">`ShowType`</ph> with three different kinds of controls.","pos":[3023,3106],"source":" The `TestObject` procedure calls `ShowType` with three different kinds of controls."},{"pos":[3117,3135],"content":"To run the example","linkify":"To run the example","nodes":[{"content":"To run the example","pos":[0,18]}]},{"content":"Create a new Windows Application project and add a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Button&gt;</ph> control, a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> control, and a <ph id=\"ph3\">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> control to the form.","pos":[3145,3354],"source":"Create a new Windows Application project and add a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.CheckBox> control, and a <xref:System.Windows.Forms.RadioButton> control to the form."},{"pos":[3364,3426],"content":"From the button on your form, call the <ph id=\"ph1\">`TestObject`</ph> procedure.","source":"From the button on your form, call the `TestObject` procedure."},{"content":"Add the following code to your form:","pos":[3436,3472]},{"pos":[3601,3609],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Information.TypeName%2A&gt;</ph>","pos":[3613,3665],"source":"<xref:Microsoft.VisualBasic.Information.TypeName%2A> "},{"content":"<bpt id=\"p1\">[</bpt>Calling a Property or Method Using a String Name<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md)</ept><ph id=\"ph1\"> </ph>","pos":[3670,3854],"source":"[Calling a Property or Method Using a String Name](../../../../visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md) "},{"content":"<bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[3858,3953],"source":"[Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>If...Then...Else Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/if-then-else-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3957,4068],"source":"[If...Then...Else Statement](../../../../visual-basic/language-reference/statements/if-then-else-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4072,4167],"source":"[String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integer Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>","pos":[4171,4267],"source":"[Integer Data Type](../../../../visual-basic/language-reference/data-types/integer-data-type.md)"}]}