{"content":"---\ntitle: \"Generic Interfaces\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"generic interfaces [.NET Framework]\"\n  - \"equality comparisons [.NET Framework]\"\n  - \"generics [.NET Framework], interfaces\"\n  - \"ordering comparisons [.NET Framework]\"\nms.assetid: 88bf5b04-d371-4edb-ba38-01ec7cabaacf\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Generic Interfaces\nThis topic provides an overview of generic interfaces that provide common functionality across families of generic types.  \n  \n## Generic Interfaces  \n Generic interfaces provide type-safe counterparts to nongeneric interfaces for ordering and equality comparisons and for functionality that is shared by generic collection types.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)], the type parameters of several generic interfaces are marked covariant or contravariant, providing greater flexibility in assigning and using types that implement these interfaces. See [Covariance and Contravariance](../../../docs/standard/generics/covariance-and-contravariance.md).  \n  \n### Equality and Ordering Comparisons  \n In the <xref:System> namespace, the <xref:System.IComparable%601?displayProperty=nameWithType> and <xref:System.IEquatable%601?displayProperty=nameWithType> generic interfaces, like their nongeneric counterparts, define methods for ordering comparisons and equality comparisons, respectively. Types implement these interfaces to provide the ability to perform such comparisons.  \n  \n In the <xref:System.Collections.Generic> namespace, the <xref:System.Collections.Generic.IComparer%601> and <xref:System.Collections.Generic.IEqualityComparer%601> generic interfaces offer a way to define an ordering or equality comparison for types that do not implement the <xref:System.IComparable%601?displayProperty=nameWithType> or <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, and they provide a way to redefine those relationships for types that do. These interfaces are used by methods and constructors of many of the generic collection classes. For example, you can pass a generic <xref:System.Collections.Generic.IComparer%601> object to the constructor of the <xref:System.Collections.Generic.SortedDictionary%602> class to specify a sort order for a type that does not implement generic <xref:System.IComparable%601?displayProperty=nameWithType>. There are overloads of the <xref:System.Array.Sort%2A?displayProperty=nameWithType> generic static method and the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> instance method for sorting arrays and lists using generic <xref:System.Collections.Generic.IComparer%601> implementations.  \n  \n The <xref:System.Collections.Generic.Comparer%601> and <xref:System.Collections.Generic.EqualityComparer%601> generic classes provide base classes for implementations of the <xref:System.Collections.Generic.IComparer%601> and <xref:System.Collections.Generic.IEqualityComparer%601> generic interfaces, and also provide default ordering and equality comparisons through their respective <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> properties.  \n  \n### Collection Functionality  \n The <xref:System.Collections.Generic.ICollection%601> generic interface is the basic interface for generic collection types. It provides basic functionality for adding, removing, copying, and enumerating elements. <xref:System.Collections.Generic.ICollection%601> inherits from both generic <xref:System.Collections.Generic.IEnumerable%601> and nongeneric <xref:System.Collections.IEnumerable>.  \n  \n The <xref:System.Collections.Generic.IList%601> generic interface extends the <xref:System.Collections.Generic.ICollection%601> generic interface with methods for indexed retrieval.  \n  \n The <xref:System.Collections.Generic.IDictionary%602> generic interface extends the <xref:System.Collections.Generic.ICollection%601> generic interface with methods for keyed retrieval. Generic dictionary types in the .NET Framework base class library also implement the nongeneric <xref:System.Collections.IDictionary> interface.  \n  \n The <xref:System.Collections.Generic.IEnumerable%601> generic interface provides a generic enumerator structure. The <xref:System.Collections.Generic.IEnumerator%601> generic interface implemented by generic enumerators inherits the nongeneric <xref:System.Collections.IEnumerator> interface; the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> members, which do not depend on the type parameter `T`, appear only on the nongeneric interface. This means that any consumer of the nongeneric interface can also consume the generic interface.  \n  \n## See also\n\n- <xref:System.Collections.Generic?displayProperty=nameWithType>\n- <xref:System.Collections.ObjectModel?displayProperty=nameWithType>\n- [Generics](../../../docs/standard/generics/index.md)\n- [Generic Collections in the .NET Framework](../../../docs/standard/generics/collections.md)\n- [Generic Delegates for Manipulating Arrays and Lists](../../../docs/standard/generics/delegates-for-manipulating-arrays-and-lists.md)\n- [Covariance and Contravariance](../../../docs/standard/generics/covariance-and-contravariance.md)\n","nodes":[{"pos":[4,366],"embed":true,"restype":"x-metadata","content":"title: \"Generic Interfaces\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"generic interfaces [.NET Framework]\"\n  - \"equality comparisons [.NET Framework]\"\n  - \"generics [.NET Framework], interfaces\"\n  - \"ordering comparisons [.NET Framework]\"\nms.assetid: 88bf5b04-d371-4edb-ba38-01ec7cabaacf\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Generic Interfaces","nodes":[{"pos":[0,18],"content":"Generic Interfaces","nodes":[{"content":"Generic Interfaces","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[373,391],"content":"Generic Interfaces","linkify":"Generic Interfaces","nodes":[{"content":"Generic Interfaces","pos":[0,18]}]},{"content":"This topic provides an overview of generic interfaces that provide common functionality across families of generic types.","pos":[392,513]},{"pos":[522,540],"content":"Generic Interfaces","linkify":"Generic Interfaces","nodes":[{"content":"Generic Interfaces","pos":[0,18]}]},{"content":"Generic interfaces provide type-safe counterparts to nongeneric interfaces for ordering and equality comparisons and for functionality that is shared by generic collection types.","pos":[544,722]},{"pos":[730,1106],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)], the type parameters of several generic interfaces are marked covariant or contravariant, providing greater flexibility in assigning and using types that implement these interfaces. See [Covariance and Contravariance](../../../docs/standard/generics/covariance-and-contravariance.md).","leadings":["","> "],"nodes":[{"content":"Starting with the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)], the type parameters of several generic interfaces are marked covariant or contravariant, providing greater flexibility in assigning and using types that implement these interfaces. See [Covariance and Contravariance](../../../docs/standard/generics/covariance-and-contravariance.md).","pos":[9,374],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, the type parameters of several generic interfaces are marked covariant or contravariant, providing greater flexibility in assigning and using types that implement these interfaces.","pos":[0,262],"source":"Starting with the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)], the type parameters of several generic interfaces are marked covariant or contravariant, providing greater flexibility in assigning and using types that implement these interfaces."},{"content":"See <bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](../../../docs/standard/generics/covariance-and-contravariance.md)</ept>.","pos":[263,365],"source":" See [Covariance and Contravariance](../../../docs/standard/generics/covariance-and-contravariance.md)."}]}]},{"pos":[1116,1149],"content":"Equality and Ordering Comparisons","linkify":"Equality and Ordering Comparisons","nodes":[{"content":"Equality and Ordering Comparisons","pos":[0,33]}]},{"content":"In the <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace, the <ph id=\"ph2\">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interfaces, like their nongeneric counterparts, define methods for ordering comparisons and equality comparisons, respectively.","pos":[1153,1445],"source":"In the <xref:System> namespace, the <xref:System.IComparable%601?displayProperty=nameWithType> and <xref:System.IEquatable%601?displayProperty=nameWithType> generic interfaces, like their nongeneric counterparts, define methods for ordering comparisons and equality comparisons, respectively."},{"content":"Types implement these interfaces to provide the ability to perform such comparisons.","pos":[1446,1530]},{"content":"In the <ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph> namespace, the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interfaces offer a way to define an ordering or equality comparison for types that do not implement the <ph id=\"ph4\">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interface, and they provide a way to redefine those relationships for types that do.","pos":[1537,2025],"source":"In the <xref:System.Collections.Generic> namespace, the <xref:System.Collections.Generic.IComparer%601> and <xref:System.Collections.Generic.IEqualityComparer%601> generic interfaces offer a way to define an ordering or equality comparison for types that do not implement the <xref:System.IComparable%601?displayProperty=nameWithType> or <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, and they provide a way to redefine those relationships for types that do."},{"content":"These interfaces are used by methods and constructors of many of the generic collection classes.","pos":[2026,2122]},{"content":"For example, you can pass a generic <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> object to the constructor of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> class to specify a sort order for a type that does not implement generic <ph id=\"ph3\">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph>.","pos":[2123,2427],"source":" For example, you can pass a generic <xref:System.Collections.Generic.IComparer%601> object to the constructor of the <xref:System.Collections.Generic.SortedDictionary%602> class to specify a sort order for a type that does not implement generic <xref:System.IComparable%601?displayProperty=nameWithType>."},{"content":"There are overloads of the <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> generic static method and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType&gt;</ph> instance method for sorting arrays and lists using generic <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementations.","pos":[2428,2745],"source":" There are overloads of the <xref:System.Array.Sort%2A?displayProperty=nameWithType> generic static method and the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> instance method for sorting arrays and lists using generic <xref:System.Collections.Generic.IComparer%601> implementations."},{"pos":[2752,3335],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.EqualityComparer%601&gt;</ph> generic classes provide base classes for implementations of the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interfaces, and also provide default ordering and equality comparisons through their respective <ph id=\"ph5\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph6\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> properties.","source":"The <xref:System.Collections.Generic.Comparer%601> and <xref:System.Collections.Generic.EqualityComparer%601> generic classes provide base classes for implementations of the <xref:System.Collections.Generic.IComparer%601> and <xref:System.Collections.Generic.IEqualityComparer%601> generic interfaces, and also provide default ordering and equality comparisons through their respective <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> properties."},{"pos":[3345,3369],"content":"Collection Functionality","linkify":"Collection Functionality","nodes":[{"content":"Collection Functionality","pos":[0,24]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> generic interface is the basic interface for generic collection types.","pos":[3373,3497],"source":"The <xref:System.Collections.Generic.ICollection%601> generic interface is the basic interface for generic collection types."},{"content":"It provides basic functionality for adding, removing, copying, and enumerating elements.","pos":[3498,3586]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> inherits from both generic <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and nongeneric <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","pos":[3587,3767],"source":"<xref:System.Collections.Generic.ICollection%601> inherits from both generic <xref:System.Collections.Generic.IEnumerable%601> and nongeneric <xref:System.Collections.IEnumerable>."},{"pos":[3774,3955],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface extends the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> generic interface with methods for indexed retrieval.","source":"The <xref:System.Collections.Generic.IList%601> generic interface extends the <xref:System.Collections.Generic.ICollection%601> generic interface with methods for indexed retrieval."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> generic interface extends the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> generic interface with methods for keyed retrieval.","pos":[3962,4147],"source":"The <xref:System.Collections.Generic.IDictionary%602> generic interface extends the <xref:System.Collections.Generic.ICollection%601> generic interface with methods for keyed retrieval."},{"content":"Generic dictionary types in the .NET Framework base class library also implement the nongeneric <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> interface.","pos":[4148,4292],"source":" Generic dictionary types in the .NET Framework base class library also implement the nongeneric <xref:System.Collections.IDictionary> interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> generic interface provides a generic enumerator structure.","pos":[4299,4411],"source":"The <xref:System.Collections.Generic.IEnumerable%601> generic interface provides a generic enumerator structure."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> generic interface implemented by generic enumerators inherits the nongeneric <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface; the <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> members, which do not depend on the type parameter <ph id=\"ph5\">`T`</ph>, appear only on the nongeneric interface.","pos":[4412,4793],"source":" The <xref:System.Collections.Generic.IEnumerator%601> generic interface implemented by generic enumerators inherits the nongeneric <xref:System.Collections.IEnumerator> interface; the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> members, which do not depend on the type parameter `T`, appear only on the nongeneric interface."},{"content":"This means that any consumer of the nongeneric interface can also consume the generic interface.","pos":[4794,4890]},{"pos":[4899,4907],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5045,5097],"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../../../docs/standard/generics/index.md)</ept>","source":"[Generics](../../../docs/standard/generics/index.md)"},{"pos":[5100,5191],"content":"<bpt id=\"p1\">[</bpt>Generic Collections in the .NET Framework<ept id=\"p1\">](../../../docs/standard/generics/collections.md)</ept>","source":"[Generic Collections in the .NET Framework](../../../docs/standard/generics/collections.md)"},{"pos":[5194,5327],"content":"<bpt id=\"p1\">[</bpt>Generic Delegates for Manipulating Arrays and Lists<ept id=\"p1\">](../../../docs/standard/generics/delegates-for-manipulating-arrays-and-lists.md)</ept>","source":"[Generic Delegates for Manipulating Arrays and Lists](../../../docs/standard/generics/delegates-for-manipulating-arrays-and-lists.md)"},{"pos":[5330,5427],"content":"<bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](../../../docs/standard/generics/covariance-and-contravariance.md)</ept>","source":"[Covariance and Contravariance](../../../docs/standard/generics/covariance-and-contravariance.md)"}]}