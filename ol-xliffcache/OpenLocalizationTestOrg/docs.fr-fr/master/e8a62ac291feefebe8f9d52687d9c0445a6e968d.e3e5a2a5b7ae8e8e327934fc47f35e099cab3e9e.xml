{"content":"---\ntitle: \"Method Implementation in Custom Controls | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"user controls [Windows Forms], method implementation\"\n  - \"custom controls [Windows Forms], overloading methods\"\n  - \"custom controls [Windows Forms], method implementation\"\n  - \"methods [Windows Forms]\"\n  - \"methods [Windows Forms], custom controls\"\nms.assetid: 35d14fca-4bb4-4a27-8211-1f7a98ea27de\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Method Implementation in Custom Controls\nA method is implemented in a control in the same manner a method would be implemented in any other component.  \n  \n In Visual Basic, if a method is required to return a value, it is implemented as a `Public Function`. If no value is returned, it is implemented as a `Public Sub`. Methods are declared using the following syntax:  \n  \n```vb  \nPublic Function ConvertMatterToEnergy(Matter as Integer) As Integer  \n   ' Conversion code goes here.  \nEnd Function  \n```  \n  \n Because functions return a value, they must specify a return type, such as integer, string, object, and so on. The arguments `Function` or `Sub` procedures take, if any, must also be specified.  \n  \n C# makes no distinction between functions and procedures, as Visual Basic does. A method either returns a value or returns `void`. The syntax for declaring a C# public method is:  \n  \n```csharp  \npublic int ConvertMatterToEnergy(int matter)  \n{  \n   // Conversion code goes here.  \n}  \n```  \n  \n When you declare a method, declare all of its arguments as explicit data types whenever possible. Arguments that take object references should be declared as specific class types — for example, `As Widget` instead of `As Object`. In Visual Basic, the default setting `Option Strict` automatically enforces this rule.  \n  \n Typed arguments allow many developer errors to be caught by the compiler, rather than at run time. The compiler always catches errors, whereas run-time testing is only as good as the test suite.  \n  \n## Overloaded Methods  \n If you want to allow users of your control to supply different combinations of parameters to a method, provide multiple overloads of the method, using explicit data types. Avoid creating parameters declared `As Object` that can contain any data type, as this can lead to errors that might not be caught in testing.  \n  \n> [!NOTE]\n>  The universal data type in the common language runtime is `Object` rather than `Variant`. `Variant` has been removed from the language.  \n  \n For example, the `Spin` method of a hypothetical `Widget` control might allow either direct specification of spin direction and speed, or specification of another `Widget` object from which angular momentum is to be absorbed:  \n  \n```vb  \nOverloads Public Sub Spin( _  \n   ByVal SpinDirection As SpinDirectionsEnum, _  \n   ByVal RevolutionsPerSecond As Double)  \n   ' Implementation code here.  \nEnd Sub  \nOverloads Public Sub Spin(ByVal Driver As Widget) _  \n   ' Implementation code here.  \nEnd Sub  \n```  \n  \n```csharp  \npublic void Spin(SpinDirectionsEnum spinDirection, double revolutionsPerSecond)  \n{  \n   // Implementation code here.  \n}  \n  \npublic void Spin(Widget driver)  \n{  \n   // Implementation code here.  \n}  \n```  \n  \n## See Also  \n [Events](../../../../docs/standard/events/index.md)   \n [Properties in Windows Forms Controls](../../../../docs/framework/winforms/controls/properties-in-windows-forms-controls.md)","nodes":[{"pos":[4,678],"nodes":[{"content":"Method Implementation in Custom Controls | Microsoft Docs","nodes":[{"pos":[0,57],"content":"Method Implementation in Custom Controls | Microsoft Docs","nodes":[{"content":"Method Implementation in Custom Controls | Microsoft Docs","pos":[0,57]}]}],"pos":[6,66],"yaml":true}],"content":"title: \"Method Implementation in Custom Controls | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"user controls [Windows Forms], method implementation\"\n  - \"custom controls [Windows Forms], overloading methods\"\n  - \"custom controls [Windows Forms], method implementation\"\n  - \"methods [Windows Forms]\"\n  - \"methods [Windows Forms], custom controls\"\nms.assetid: 35d14fca-4bb4-4a27-8211-1f7a98ea27de\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","yamlblock":true},{"pos":[685,725],"content":"Method Implementation in Custom Controls","linkify":"Method Implementation in Custom Controls","nodes":[{"content":"Method Implementation in Custom Controls","pos":[0,40]}]},{"content":"A method is implemented in a control in the same manner a method would be implemented in any other component.","pos":[726,835]},{"content":"In Visual Basic, if a method is required to return a value, it is implemented as a <ph id=\"ph1\">`Public Function`</ph>.","pos":[842,943],"source":"In Visual Basic, if a method is required to return a value, it is implemented as a `Public Function`."},{"content":"If no value is returned, it is implemented as a <ph id=\"ph1\">`Public Sub`</ph>.","pos":[944,1005],"source":" If no value is returned, it is implemented as a `Public Sub`."},{"content":"Methods are declared using the following syntax:","pos":[1006,1054]},{"content":"Because functions return a value, they must specify a return type, such as integer, string, object, and so on.","pos":[1197,1307]},{"content":"The arguments <ph id=\"ph1\">`Function`</ph> or <ph id=\"ph2\">`Sub`</ph> procedures take, if any, must also be specified.","pos":[1308,1390],"source":" The arguments `Function` or `Sub` procedures take, if any, must also be specified."},{"content":"C# makes no distinction between functions and procedures, as Visual Basic does.","pos":[1397,1476]},{"content":"A method either returns a value or returns <ph id=\"ph1\">`void`</ph>.","pos":[1477,1527],"source":" A method either returns a value or returns `void`."},{"content":"The syntax for declaring a C# public method is:","pos":[1528,1575]},{"content":"When you declare a method, declare all of its arguments as explicit data types whenever possible.","pos":[1693,1790]},{"content":"Arguments that take object references should be declared as specific class types — for example, <ph id=\"ph1\">`As Widget`</ph> instead of <ph id=\"ph2\">`As Object`</ph>.","pos":[1791,1922],"source":" Arguments that take object references should be declared as specific class types — for example, `As Widget` instead of `As Object`."},{"content":"In Visual Basic, the default setting <ph id=\"ph1\">`Option Strict`</ph> automatically enforces this rule.","pos":[1923,2009],"source":" In Visual Basic, the default setting `Option Strict` automatically enforces this rule."},{"content":"Typed arguments allow many developer errors to be caught by the compiler, rather than at run time.","pos":[2016,2114]},{"content":"The compiler always catches errors, whereas run-time testing is only as good as the test suite.","pos":[2115,2210]},{"pos":[2219,2237],"content":"Overloaded Methods","linkify":"Overloaded Methods","nodes":[{"content":"Overloaded Methods","pos":[0,18]}]},{"content":"If you want to allow users of your control to supply different combinations of parameters to a method, provide multiple overloads of the method, using explicit data types.","pos":[2241,2412]},{"content":"Avoid creating parameters declared <ph id=\"ph1\">`As Object`</ph> that can contain any data type, as this can lead to errors that might not be caught in testing.","pos":[2413,2555],"source":" Avoid creating parameters declared `As Object` that can contain any data type, as this can lead to errors that might not be caught in testing."},{"pos":[2563,2709],"content":"[!NOTE]\n The universal data type in the common language runtime is `Object` rather than `Variant`. `Variant` has been removed from the language.","leadings":["","> "],"nodes":[{"content":"The universal data type in the common language runtime is `Object` rather than `Variant`. `Variant` has been removed from the language.","pos":[9,144],"nodes":[{"content":"The universal data type in the common language runtime is <ph id=\"ph1\">`Object`</ph> rather than <ph id=\"ph2\">`Variant`</ph>.","pos":[0,89],"source":"The universal data type in the common language runtime is `Object` rather than `Variant`."},{"content":"<ph id=\"ph1\">`Variant`</ph> has been removed from the language.","pos":[90,135],"source":"`Variant` has been removed from the language."}]}]},{"pos":[2716,2941],"content":"For example, the <ph id=\"ph1\">`Spin`</ph> method of a hypothetical <ph id=\"ph2\">`Widget`</ph> control might allow either direct specification of spin direction and speed, or specification of another <ph id=\"ph3\">`Widget`</ph> object from which angular momentum is to be absorbed:","source":"For example, the `Spin` method of a hypothetical `Widget` control might allow either direct specification of spin direction and speed, or specification of another `Widget` object from which angular momentum is to be absorbed:"},{"pos":[3455,3463],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../../docs/standard/events/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3467,3519],"source":"[Events](../../../../docs/standard/events/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Properties in Windows Forms Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/properties-in-windows-forms-controls.md)</ept>","pos":[3523,3647],"source":"[Properties in Windows Forms Controls](../../../../docs/framework/winforms/controls/properties-in-windows-forms-controls.md)"}]}