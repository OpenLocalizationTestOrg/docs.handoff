{"content":"---\ntitle: \"How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 8c1c9f0c-95dd-4222-9be2-9ec026a13e81\n---\n# How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)\nThis example shows five queries related to file size in bytes:  \n  \n-   How to retrieve the size in bytes of the largest file.  \n  \n-   How to retrieve the size in bytes of the smallest file.  \n  \n-   How to retrieve the <xref:System.IO.FileInfo> object largest or smallest file from one or more folders under a specified root folder.  \n  \n-   How to retrieve a sequence such as the 10 largest files.  \n  \n-   How to order files into groups based on their file size in bytes, ignoring files that are less than a specified size.  \n  \n## Example  \n The following example contains five separate queries that show how to query and group files, depending on their file size in bytes. You can easily modify these examples to base the query on some other property of the <xref:System.IO.FileInfo> object.  \n  \n```vb  \nModule QueryBySize  \n    Sub Main()  \n  \n        ' Change the drive\\path if necessary  \n        Dim root As String = \"C:\\Program Files\\Microsoft Visual Studio 9.0\"  \n  \n        'Take a snapshot of the folder contents  \n        Dim dir As New System.IO.DirectoryInfo(root)  \n        Dim fileList = dir.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories)  \n  \n        ' Return the size of the largest file  \n        Dim maxSize = Aggregate aFile In fileList Into Max(GetFileLength(aFile))  \n  \n        'Dim maxSize = fileLengths.Max  \n        Console.WriteLine(\"The length of the largest file under {0} is {1}\", _  \n                          root, maxSize)  \n  \n        ' Return the FileInfo object of the largest file  \n        ' by sorting and selecting from the beginning of the list  \n        Dim filesByLengDesc = From file In fileList _  \n                              Let filelength = GetFileLength(file) _  \n                              Where filelength > 0 _  \n                              Order By filelength Descending _  \n                              Select file  \n  \n        Dim longestFile = filesByLengDesc.First  \n  \n        Console.WriteLine(\"The largest file under {0} is {1} with a length of {2} bytes\", _  \n                          root, longestFile.FullName, longestFile.Length)  \n  \n        Dim smallestFile = filesByLengDesc.Last  \n  \n        Console.WriteLine(\"The smallest file under {0} is {1} with a length of {2} bytes\", _  \n                                root, smallestFile.FullName, smallestFile.Length)  \n  \n        ' Return the FileInfos for the 10 largest files  \n        ' Based on a previous query, but nothing is executed  \n        ' until the For Each statement below.  \n        Dim tenLargest = From file In filesByLengDesc Take 10  \n  \n        Console.WriteLine(\"The 10 largest files under {0} are:\", root)  \n  \n        For Each fi As System.IO.FileInfo In tenLargest  \n            Console.WriteLine(\"{0}: {1} bytes\", fi.FullName, fi.Length)  \n        Next  \n  \n        ' Group files according to their size,  \n        ' leaving out the ones under 200K  \n        Dim sizeGroups = From file As System.IO.FileInfo In fileList _  \n                         Where file.Length > 0 _  \n                         Let groupLength = file.Length / 100000 _  \n                         Group file By groupLength Into fileGroup = Group _  \n                         Where groupLength >= 2 _  \n                         Order By groupLength Descending  \n  \n        For Each group In sizeGroups  \n            Console.WriteLine(group.groupLength + \"00000\")  \n  \n            For Each item As System.IO.FileInfo In group.fileGroup  \n                Console.WriteLine(\"   {0}: {1}\", item.Name, item.Length)  \n            Next  \n        Next  \n  \n        ' Keep the console window open in debug mode  \n        Console.WriteLine(\"Press any key to exit.\")  \n        Console.ReadKey()  \n  \n    End Sub  \n  \n    ' This method is used to catch the possible exception  \n    ' that can be raised when accessing the FileInfo.Length property.  \n    ' In this particular case, it is safe to ignore the exception.  \n    Function GetFileLength(ByVal fi As System.IO.FileInfo) As Long  \n        Dim retval As Long  \n        Try  \n            retval = fi.Length  \n        Catch ex As FileNotFoundException  \n            ' If a file is no longer present,  \n            ' just return zero bytes.   \n            retval = 0  \n        End Try  \n  \n        Return retval  \n    End Function  \nEnd Module  \n```  \n  \n To return one or more complete <xref:System.IO.FileInfo> objects, the query first must examine each one in the data source, and then sort them by the value of their Length property. Then it can return the single one or the sequence with the greatest lengths. Use <xref:System.Linq.Enumerable.First%2A> to return the first element in a list. Use <xref:System.Linq.Enumerable.Take%2A> to return the first n number of elements. Specify a descending sort order to put the smallest elements at the start of the list.  \n  \n The query calls out to a separate method to obtain the file size in bytes in order to consume the possible exception that will be raised in the case where a file was deleted on another thread in the time period since the <xref:System.IO.FileInfo> object was created in the call to `GetFiles`. Even through the <xref:System.IO.FileInfo> object has already been created, the exception can occur because a <xref:System.IO.FileInfo> object will try to refresh its <xref:System.IO.FileInfo.Length%2A> property by using the most current size in bytes the first time the property is accessed. By putting this operation in a try-catch block outside the query, we follow the rule of avoiding operations in queries that can cause side-effects. In general, great care must be taken when consuming exceptions, to make sure that an application is not left in an unknown state.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace.  \n  \n## See also\n\n- [LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)\n- [LINQ and File Directories (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)\n","nodes":[{"pos":[4,167],"embed":true,"restype":"x-metadata","content":"title: \"How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 8c1c9f0c-95dd-4222-9be2-9ec026a13e81","nodes":[{"content":"How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)","nodes":[{"pos":[0,85],"content":"How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)","nodes":[{"content":"How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)","pos":[0,85]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[174,259],"content":"How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)","linkify":"How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)","nodes":[{"content":"How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)","pos":[0,85]}]},{"content":"This example shows five queries related to file size in bytes:","pos":[260,322]},{"content":"How to retrieve the size in bytes of the largest file.","pos":[332,386]},{"content":"How to retrieve the size in bytes of the smallest file.","pos":[396,451]},{"pos":[461,594],"content":"How to retrieve the <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> object largest or smallest file from one or more folders under a specified root folder.","source":"How to retrieve the <xref:System.IO.FileInfo> object largest or smallest file from one or more folders under a specified root folder."},{"content":"How to retrieve a sequence such as the 10 largest files.","pos":[604,660]},{"content":"How to order files into groups based on their file size in bytes, ignoring files that are less than a specified size.","pos":[670,787]},{"pos":[796,803],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example contains five separate queries that show how to query and group files, depending on their file size in bytes.","pos":[807,938]},{"content":"You can easily modify these examples to base the query on some other property of the <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> object.","pos":[939,1057],"source":" You can easily modify these examples to base the query on some other property of the <xref:System.IO.FileInfo> object."},{"content":"To return one or more complete <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> objects, the query first must examine each one in the data source, and then sort them by the value of their Length property.","pos":[4587,4768],"source":"To return one or more complete <xref:System.IO.FileInfo> objects, the query first must examine each one in the data source, and then sort them by the value of their Length property."},{"content":"Then it can return the single one or the sequence with the greatest lengths.","pos":[4769,4845]},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%2A&gt;</ph> to return the first element in a list.","pos":[4846,4927],"source":" Use <xref:System.Linq.Enumerable.First%2A> to return the first element in a list."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> to return the first n number of elements.","pos":[4928,5011],"source":" Use <xref:System.Linq.Enumerable.Take%2A> to return the first n number of elements."},{"content":"Specify a descending sort order to put the smallest elements at the start of the list.","pos":[5012,5098]},{"content":"The query calls out to a separate method to obtain the file size in bytes in order to consume the possible exception that will be raised in the case where a file was deleted on another thread in the time period since the <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> object was created in the call to <ph id=\"ph2\">`GetFiles`</ph>.","pos":[5105,5397],"source":"The query calls out to a separate method to obtain the file size in bytes in order to consume the possible exception that will be raised in the case where a file was deleted on another thread in the time period since the <xref:System.IO.FileInfo> object was created in the call to `GetFiles`."},{"content":"Even through the <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> object has already been created, the exception can occur because a <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> object will try to refresh its <ph id=\"ph3\">&lt;xref:System.IO.FileInfo.Length%2A&gt;</ph> property by using the most current size in bytes the first time the property is accessed.","pos":[5398,5690],"source":" Even through the <xref:System.IO.FileInfo> object has already been created, the exception can occur because a <xref:System.IO.FileInfo> object will try to refresh its <xref:System.IO.FileInfo.Length%2A> property by using the most current size in bytes the first time the property is accessed."},{"content":"By putting this operation in a try-catch block outside the query, we follow the rule of avoiding operations in queries that can cause side-effects.","pos":[5691,5838]},{"content":"In general, great care must be taken when consuming exceptions, to make sure that an application is not left in an unknown state.","pos":[5839,5968]},{"pos":[5977,5995],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[5999,6162],"content":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <ph id=\"ph1\">`Imports`</ph> statement for the System.Linq namespace.","source":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace."},{"pos":[6171,6179],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6183,6292],"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept>","source":"[LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)"},{"pos":[6295,6424],"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","source":"[LINQ and File Directories (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)"}]}