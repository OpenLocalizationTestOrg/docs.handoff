<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="commanding-overview.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09afff40b6d6017151d655cd1921dbd71faf1995</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\commanding-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">961a4907752f5d656e406b7e02d5e3a02e7edf9e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4428c6930a9b2d65ec92df04e695168c35f734e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Commanding Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Commanding Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Commanding is an input mechanism in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> which provides input handling at a more semantic level than device input.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Examples of commands are the <bpt id="p1">**</bpt>Copy<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Cut<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Paste<ept id="p3">**</ept> operations found on many applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This overview defines what commands are in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, which classes are part of the commanding model, and how to use and create commands in your applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic contains the following sections:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What Are Commands?<ept id="p1">](#commands_at_10000_feet)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Simple Command Example in WPF<ept id="p1">](#simple_command)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Four Main Concepts in WPF Commanding<ept id="p1">](#Four_main_Concepts)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Library<ept id="p1">](#Command_Library)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Custom Commands<ept id="p1">](#creating_commands)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>What Are Commands?</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Commands have several purposes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first purpose is to separate the semantics and the object that invokes a command from the logic that executes the command.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This allows for multiple and disparate sources to invoke the same command logic, and it allows the command logic to be customized for different targets.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the editing operations <bpt id="p1">**</bpt>Copy<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Cut<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Paste<ept id="p3">**</ept>, which are found in many applications, can be invoked by using different user actions if they are implemented by using commands.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An application might allow a user to cut selected objects or text by either clicking a button, choosing an item in a menu, or using a key combination, such as CTRL+X.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By using commands, you can bind each type of user action to the same logic.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Another purpose of commands is to indicate whether an action is available.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To continue the example of cutting an object or text, the action only makes sense when something is selected.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If a user tries to cut an object or text without having anything selected, nothing would happen.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To indicate this to the user, many applications disable buttons and menu items so that the user knows whether it is possible to perform an action.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A command can indicate whether an action is possible by implementing the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A button can subscribe to the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event and be disabled if <ph id="ph2">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> returns <ph id="ph3">`false`</ph> or be enabled if <ph id="ph4">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> returns <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The semantics of a command can be consistent across applications and classes, but the logic of the action is specific to the particular object acted upon.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The key combination CTRL+X invokes the <bpt id="p1">**</bpt>Cut<ept id="p1">**</ept> command in text classes, image classes, and Web browsers, but the actual logic for performing the <bpt id="p2">**</bpt>Cut<ept id="p2">**</ept> operation is defined by the application that performs the cut.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> enables clients to implement the logic.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A text object may cut the selected text into the clipboard, while an image object may cut the selected image.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When an application handles the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> event, it has access to the target of the command and can take appropriate action depending on the target's type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Simple Command Example in WPF</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The simplest way to use a command in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is to use a predefined <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> from one of the command library classes; use a control that has native support for handling the command; and use a control that has native support for invoking a command.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command is one of the predefined commands in the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control has built in logic for handling the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>And the <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> class has native support for invoking commands.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example shows how to set up a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> so that when it is clicked it will invoke the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command on a <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, assuming the <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Four Main Concepts in WPF Commanding</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The routed command model in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> can be broken up into four main concepts: the command, the command source, the command target, and the command binding:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>command<ept id="p1">*</ept> is the action to be executed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>command source<ept id="p1">*</ept> is the object which invokes the command.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>command target<ept id="p1">*</ept> is the object that the command is being executed on.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>command binding<ept id="p1">*</ept> is the object which maps the command logic to the command.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the previous example, the <ph id="ph1">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command is the command, the <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> is the command source, the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is the command target, and the command binding is supplied by the <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It is worth noting that it is not always the case that the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is supplied by the control that is the command target class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Quite often the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> must be created by the application developer, or the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> might be attached to an ancestor of the command target.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Commands</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Commands in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> are created by implementing the <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> exposes two methods, <ph id="ph2">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph>, and an event, <ph id="ph4">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> performs the actions that are associated with the command.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> determines whether the command can execute on the current command target.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> is raised if the command manager that centralizes the commanding operations detects a change in the command source that might invalidate a command that has been raised but not yet executed by the command binding.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> implementation of <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is the <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> class and is the focus of this overview.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The main sources of input in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> are the mouse, the keyboard, ink, and routed commands.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The more device-oriented inputs use a <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> to notify objects in an application page that an input event has occurred.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is no different.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> methods of a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> do not contain the application logic for the command, but rather they raise routed events that tunnel and bubble through the element tree until they encounter an object with a <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> contains the handlers for these events and it is the handlers that perform the command.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information on event routing in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/routed-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> method on a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> raises the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events on the command target.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method on a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> raises the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> events on the command target.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>These events tunnel and bubble through the element tree until they encounter an object which has a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that particular command.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> supplies a set of common routed commands spread across several classes: <ph id="ph2">&lt;xref:System.Windows.Input.MediaCommands&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.NavigationCommands&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.ComponentCommands&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Documents.EditingCommands&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>These classes consist only of the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> objects and not the implementation logic of the command.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The implementation logic is the responsibility of the object on which the command is being executed on.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Command Sources</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A command source is the object which invokes the command.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Examples of command sources are <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Command sources in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> generally implement the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> exposes three properties: <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> is the command to execute when the command source is invoked.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is the object on which to execute the command.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It is worth noting that in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> property on <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> is only applicable when the <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is set on an <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is not set, the element with keyboard focus will be the command target.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph> is a user-defined data type used to pass information to the handlers implementing the command.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> classes that implement <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> are <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> invoke a command when they are clicked, and an <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> invokes a command when the <ph id="ph5">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> associated with it is performed.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> as a command source for the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Properties%2A&gt;</ph> command.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Typically, a command source will listen to the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This event informs the command source that the ability of the command to execute on the current command target may have changed.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The command source can query the current status of the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> by using the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The command source can then disable itself if the command cannot execute.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An example of this is a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> graying itself out when a command cannot execute.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> can be used as a command source.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Two types of input gestures in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> are the <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can think of a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> as a keyboard shortcut, such as CTRL+C.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> is comprised of a <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> is comprised of a <ph id="ph2">&lt;xref:System.Windows.Input.MouseAction&gt;</ph> and an optional set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In order for an <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> to act as a command source, it must be associated with a command.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>There are a few ways to accomplish this.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>One way is to use an <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> between a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Another way to associate an <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> to a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is to add the <ph id="ph3">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> to the <ph id="ph4">&lt;xref:System.Windows.Input.InputGestureCollection&gt;</ph> on the <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Input.InputGestureCollection&gt;</ph> of a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CommandBinding</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> associates a command with the event handlers that implement the command.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> class contains a <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> property, and <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> is the command that the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is being associated with.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The event handlers which are attached to the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> events implement the command logic.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The event handlers attached to the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> events determine if the command can execute on the current command target.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> on the root <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> of an application.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> associates the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> command with <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> handlers.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and a <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> are created.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> opens a <ph id="ph2">&lt;xref:System.Windows.MessageBox&gt;</ph> that displays a string saying the command has been executed.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is attached to a specific object, such as the root <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> of the application or a control.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The object that the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is attached to defines the scope of the binding.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> attached to an ancestor of the command target can be reached by the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> event, but a <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> attached to a descendant of the command target cannot be reached.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This is a direct consequence of the way a <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> tunnels and bubbles from the object that raises the event.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In some situations the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is attached to the command target itself, such as with the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> class and the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Cut%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> commands.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Quite often though, it is more convenient to attach the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to an ancestor of the command target, such as the main <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> or the Application object, especially if the same <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> can be used for multiple command targets.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>These are design decisions you will want to consider when you are creating your commanding infrastructure.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Command Target</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The command target is the element on which the command is executed.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>With regards to a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is the element at which routing of the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> starts.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>As noted previously, in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> property on <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> is only applicable when the <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is set on an <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The command source can explicitly set the command target.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If the command target is not defined, the element with keyboard focus will be used as the command target.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>One of the benefits of using the element with keyboard focus as the command target is that it allows the application developer to use the same command source to invoke a command on multiple targets without having to keep track of the command target.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> invokes the <bpt id="p1">**</bpt>Paste<ept id="p1">**</ept> command in an application that has a <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control and a <ph id="ph3">&lt;xref:System.Windows.Controls.PasswordBox&gt;</ph> control, the target can be either the <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Controls.PasswordBox&gt;</ph> depending on which control has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following example shows how to explicitly set the command target in markup and in code behind.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The CommandManager</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> serves a number of command related functions.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It provides a set of static methods for adding and removing <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> event handlers to and from a specific element.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>It provides a means to register <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects onto a specific class.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> also provides a means, through the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event, to notify a command when it should raise the <ph id="ph3">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> method forces the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This is useful for conditions that should disable/enable a command but are not conditions that the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> is aware of.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Command Library</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a set of predefined commands.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The command library consists of the following classes: <ph id="ph1">&lt;xref:System.Windows.Input.ApplicationCommands&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.NavigationCommands&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.MediaCommands&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Documents.EditingCommands&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Windows.Input.ComponentCommands&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>These classes provide commands such as <ph id="ph1">&lt;xref:System.Windows.Input.ApplicationCommands.Cut%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.NavigationCommands.BrowseBack%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.NavigationCommands.BrowseForward%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.MediaCommands.Play%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.MediaCommands.Stop%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Input.MediaCommands.Pause%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Many of these commands include a set of default input bindings.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, if you specify that your application handles the copy command, you automatically get the keyboard binding "CTRL+C" You also get bindings for other input devices, such as <ph id="ph1">[!INCLUDE[TLA2#tla_tpc](../../../../includes/tla2sharptla-tpc-md.md)]</ph> pen gestures and speech information.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>When you reference commands in the various command libraries using <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you can usually omit the class name of the library class that exposes the static command property.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Generally, the command names are unambiguous as strings, and the owning types exist to provide a logical grouping of commands but are not necessary for disambiguation.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For instance, you can specify <ph id="ph1">`Command="Cut"`</ph> rather than the more verbose <ph id="ph2">`Command="ApplicationCommands.Cut"`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This is a convenience mechanism that is built in to the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor for commands (more precisely, it is a type converter behavior of <ph id="ph3">&lt;xref:System.Windows.Input.ICommand&gt;</ph>, which the <ph id="ph4">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph5">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor references at load time).</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Creating Custom Commands</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the commands in the command library classes do not meet your needs, then you can create your own commands.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>There are two ways to create a custom command.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The first is to start from the ground up and implement the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The other way, and the more common approach, is to create a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedUICommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For an example of creating a custom <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, see <bpt id="p1">[</bpt>Create a Custom RoutedCommand Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159980)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Input Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/input-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/routed-events-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implement ICommandSource<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-implement-icommandsource.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Add a Command to a MenuItem<ept id="p1">](http://msdn.microsoft.com/en-us/013d68a0-5373-4a68-bd91-5de574307370)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a Custom RoutedCommand Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159980)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>