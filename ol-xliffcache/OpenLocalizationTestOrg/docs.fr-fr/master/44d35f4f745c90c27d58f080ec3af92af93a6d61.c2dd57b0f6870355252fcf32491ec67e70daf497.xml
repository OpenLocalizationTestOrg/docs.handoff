{"content":"---\ntitle: \"Layout | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"WPF layout system\"\n  - \"controls [WPF], layout system\"\n  - \"layout system [WPF]\"\nms.assetid: 3eecdced-3623-403a-a077-7595453a9221\ncaps.latest.revision: 31\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Layout\nThis topic describes the [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] layout system. Understanding how and when layout calculations occur is essential for creating user interfaces in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)].  \n  \n This topic contains the following sections:  \n  \n-   [Element Bounding Boxes](#LayoutSystem_BoundingBox)  \n  \n-   [The Layout System](#LayoutSystem_Overview)  \n  \n-   [Measuring and Arranging Children](#LayoutSystem_Measure_Arrange)  \n  \n-   [Panel Elements and Custom Layout Behaviors](#LayoutSystem_PanelsCustom)  \n  \n-   [Layout Performance Considerations](#LayoutSystem_Performance)  \n  \n-   [Sub-pixel Rendering and Layout Rounding](#LayoutSystem_LayoutRounding)  \n  \n-   [What's Next](#LayoutSystem_whatsnext)  \n  \n<a name=\"LayoutSystem_BoundingBox\"></a>   \n## Element Bounding Boxes  \n When thinking about layout in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], it is important to understand the bounding box that surrounds all elements. Each <xref:System.Windows.FrameworkElement> consumed by the layout system can be thought of as a rectangle that is slotted into the layout. The <xref:System.Windows.Controls.Primitives.LayoutInformation> class returns the boundaries of an element's layout allocation, or slot. The size of the rectangle is determined by calculating the available screen space, the size of any constraints, layout-specific properties (such as margin and padding), and the individual behavior of the parent <xref:System.Windows.Controls.Panel> element. Processing this data, the layout system is able to calculate the position of all the children of a particular <xref:System.Windows.Controls.Panel>. It is important to remember that sizing characteristics defined on the parent element, such as a <xref:System.Windows.Controls.Border>, affect its children.  \n  \n The following illustration shows a simple layout.  \n  \n ![A typical Grid, no bounding box superimposed.](../../../../docs/framework/wpf/advanced/media/boundingbox1.png \"boundingbox1\")  \n  \n This layout can be achieved by using the following [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)].  \n  \n [!code-xml[LayoutInformation#1](../../../../samples/snippets/csharp/VS_Snippets_Wpf/LayoutInformation/CSharp/Window1.xaml#1)]  \n  \n A single <xref:System.Windows.Controls.TextBlock> element is hosted within a <xref:System.Windows.Controls.Grid>. While the text fills only the upper-left corner of the first column, the allocated space for the <xref:System.Windows.Controls.TextBlock> is actually much larger. The bounding box of any <xref:System.Windows.FrameworkElement> can be retrieved by using the <xref:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot%2A> method. The following illustration shows the bounding box for the <xref:System.Windows.Controls.TextBlock> element.  \n  \n ![The bounding box of the TextBlock is now visible.](../../../../docs/framework/wpf/advanced/media/boundingbox2.png \"boundingbox2\")  \n  \n As shown by the yellow rectangle, the allocated space for the <xref:System.Windows.Controls.TextBlock> element is actually much larger than it appears. As additional elements are added to the <xref:System.Windows.Controls.Grid>, this allocation could shrink or expand, depending on the type and size of elements that are added.  \n  \n The layout slot of the <xref:System.Windows.Controls.TextBlock> is translated into a <xref:System.Windows.Shapes.Path> by using the <xref:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot%2A> method. This technique can be useful for displaying the bounding box of an element.  \n  \n [!code-csharp[LayoutInformation#2](../../../../samples/snippets/csharp/VS_Snippets_Wpf/LayoutInformation/CSharp/Window1.xaml.cs#2)]\n [!code-vb[LayoutInformation#2](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutInformation/VisualBasic/Window1.xaml.vb#2)]  \n  \n<a name=\"LayoutSystem_Overview\"></a>   \n## The Layout System  \n At its simplest, layout is a recursive system that leads to an element being sized, positioned, and drawn. More specifically, layout describes the process of measuring and arranging the members of a <xref:System.Windows.Controls.Panel> element's <xref:System.Windows.Controls.Panel.Children%2A> collection. Layout is an intensive process. The larger the <xref:System.Windows.Controls.Panel.Children%2A> collection, the greater the number of calculations that must be made. Complexity can also be introduced based on the layout behavior defined by the <xref:System.Windows.Controls.Panel> element that owns the collection. A relatively simple <xref:System.Windows.Controls.Panel>, such as <xref:System.Windows.Controls.Canvas>, can have significantly better performance than a more complex <xref:System.Windows.Controls.Panel>, such as <xref:System.Windows.Controls.Grid>.  \n  \n Each time that a child <xref:System.Windows.UIElement> changes its position, it has the potential to trigger a new pass by the layout system. Therefore, it is important to understand the events that can invoke the layout system, as unnecessary invocation can lead to poor application performance. The following describes the process that occurs when the layout system is invoked.  \n  \n1.  A child <xref:System.Windows.UIElement> begins the layout process by first having its core properties measured.  \n  \n2.  Sizing properties defined on <xref:System.Windows.FrameworkElement> are evaluated, such as <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, and <xref:System.Windows.FrameworkElement.Margin%2A>.  \n  \n3.  <xref:System.Windows.Controls.Panel>-specific logic is applied, such as <xref:System.Windows.Controls.Dock> direction or stacking <xref:System.Windows.Controls.StackPanel.Orientation%2A>.  \n  \n4.  Content is arranged after all children have been measured.  \n  \n5.  The <xref:System.Windows.Controls.Panel.Children%2A> collection is drawn on the screen.  \n  \n6.  The process is invoked again if additional <xref:System.Windows.Controls.Panel.Children%2A> are added to the collection, a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> is applied, or the <xref:System.Windows.UIElement.UpdateLayout%2A> method is called.  \n  \n This process and how it is invoked are defined in more detail in the following sections.  \n  \n<a name=\"LayoutSystem_Measure_Arrange\"></a>   \n## Measuring and Arranging Children  \n The layout system completes two passes for each member of the <xref:System.Windows.Controls.Panel.Children%2A> collection, a measure pass and an arrange pass. Each child <xref:System.Windows.Controls.Panel> provides its own <xref:System.Windows.FrameworkElement.MeasureOverride%2A> and <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> methods to achieve its own specific layout behavior.  \n  \n During the measure pass, each member of the <xref:System.Windows.Controls.Panel.Children%2A> collection is evaluated. The process begins with a call to the <xref:System.Windows.UIElement.Measure%2A> method. This method is called within the implementation of the parent <xref:System.Windows.Controls.Panel> element, and does not have to be called explicitly for layout to occur.  \n  \n First, native size properties of the <xref:System.Windows.UIElement> are evaluated, such as <xref:System.Windows.UIElement.Clip%2A> and <xref:System.Windows.UIElement.Visibility%2A>. This generates a value named `constraintSize` that is passed to <xref:System.Windows.FrameworkElement.MeasureCore%2A>.  \n  \n Secondly, framework properties defined on <xref:System.Windows.FrameworkElement> are processed, which affects the value of `constraintSize`. These properties generally describe the sizing characteristics of the underlying <xref:System.Windows.UIElement>, such as its <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Margin%2A>, and <xref:System.Windows.FrameworkElement.Style%2A>. Each of these properties can change the space that is necessary to display the element. <xref:System.Windows.FrameworkElement.MeasureOverride%2A> is then called with `constraintSize` as a parameter.  \n  \n> [!NOTE]\n>  There is a difference between the properties of <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A> and <xref:System.Windows.FrameworkElement.ActualWidth%2A>. For example, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property is a calculated value based on other height inputs and the layout system. The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties, such as <xref:System.Windows.FrameworkElement.Height%2A>, that are the basis of the input change.  \n>   \n>  Because <xref:System.Windows.FrameworkElement.ActualHeight%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system. The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.  \n  \n The ultimate goal of the measure pass is for the child to determine its <xref:System.Windows.UIElement.DesiredSize%2A>, which occurs during the <xref:System.Windows.FrameworkElement.MeasureCore%2A> call. The <xref:System.Windows.UIElement.DesiredSize%2A> value is stored by <xref:System.Windows.UIElement.Measure%2A> for use during the content arrange pass.  \n  \n The arrange pass begins with a call to the <xref:System.Windows.UIElement.Arrange%2A> method. During the arrange pass, the parent <xref:System.Windows.Controls.Panel> element generates a rectangle that represents the bounds of the child. This value is passed to the <xref:System.Windows.FrameworkElement.ArrangeCore%2A> method for processing.  \n  \n The <xref:System.Windows.FrameworkElement.ArrangeCore%2A> method evaluates the <xref:System.Windows.UIElement.DesiredSize%2A> of the child and evaluates any additional margins that may affect the rendered size of the element. <xref:System.Windows.FrameworkElement.ArrangeCore%2A> generates an `arrangeSize`, which is passed to the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> method of the <xref:System.Windows.Controls.Panel> as a parameter. <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> generates the `finalSize` of the child. Finally, the <xref:System.Windows.FrameworkElement.ArrangeCore%2A> method does a final evaluation of offset properties, such as margin and alignment, and puts the child within its layout slot. The child does not have to (and frequently does not) fill the entire allocated space. Control is then returned to the parent <xref:System.Windows.Controls.Panel> and the layout process is complete.  \n  \n<a name=\"LayoutSystem_PanelsCustom\"></a>   \n## Panel Elements and Custom Layout Behaviors  \n [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] includes a group of elements that derive from <xref:System.Windows.Controls.Panel>. These <xref:System.Windows.Controls.Panel> elements enable many complex layouts. For example, stacking elements can easily be achieved by using the <xref:System.Windows.Controls.StackPanel> element, while more complex and free flowing layouts are possible by using a <xref:System.Windows.Controls.Canvas>.  \n  \n The following table summarizes the available layout <xref:System.Windows.Controls.Panel> elements.  \n  \n|Panel name|Description|  \n|----------------|-----------------|  \n|<xref:System.Windows.Controls.Canvas>|Defines an area within which you can explicitly position child elements by coordinates relative to the <xref:System.Windows.Controls.Canvas> area.|  \n|<xref:System.Windows.Controls.DockPanel>|Defines an area within which you can arrange child elements either horizontally or vertically, relative to each other.|  \n|<xref:System.Windows.Controls.Grid>|Defines a flexible grid area that consists of columns and rows.|  \n|<xref:System.Windows.Controls.StackPanel>|Arranges child elements into a single line that can be oriented horizontally or vertically.|  \n|<xref:System.Windows.Controls.VirtualizingPanel>|Provides a framework for <xref:System.Windows.Controls.Panel> elements that virtualize their child data collection. This is an abstract class.|  \n|<xref:System.Windows.Controls.WrapPanel>|Positions child elements in sequential position from left to right, breaking content to the next line at the edge of the containing box. Subsequent ordering occurs sequentially from top to bottom or right to left, depending on the value of the <xref:System.Windows.Controls.WrapPanel.Orientation%2A> property.|  \n  \n For applications that require a layout that is not possible by using any of the predefined <xref:System.Windows.Controls.Panel> elements, custom layout behaviors can be achieved by inheriting from <xref:System.Windows.Controls.Panel> and overriding the <xref:System.Windows.FrameworkElement.MeasureOverride%2A> and <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> methods. For an example, see [Custom Radial Panel Sample](http://go.microsoft.com/fwlink/?LinkID=159982).  \n  \n<a name=\"LayoutSystem_Performance\"></a>   \n## Layout Performance Considerations  \n Layout is a recursive process. Each child element in a <xref:System.Windows.Controls.Panel.Children%2A> collection gets processed during each invocation of the layout system. As a result, triggering the layout system should be avoided when it is not necessary. The following considerations can help you achieve better performance.  \n  \n-   Be aware of which property value changes will force a recursive update by the layout system.  \n  \n     Dependency properties whose values can cause the layout system to be initialized are marked with public flags. <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> and <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> provide useful clues as to which property value changes will force a recursive update by the layout system. In general, any property that can affect the size of an element's bounding box should have a <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> flag set to true. For more information, see [Dependency Properties Overview](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md).  \n  \n-   When possible, use a <xref:System.Windows.UIElement.RenderTransform%2A> instead of a <xref:System.Windows.FrameworkElement.LayoutTransform%2A>.  \n  \n     A <xref:System.Windows.FrameworkElement.LayoutTransform%2A> can be a very useful way to affect the content of a [!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]. However, if the effect of the transform does not have to impact the position of other elements, it is best to use a <xref:System.Windows.UIElement.RenderTransform%2A> instead, because <xref:System.Windows.UIElement.RenderTransform%2A> does not invoke the layout system. <xref:System.Windows.FrameworkElement.LayoutTransform%2A> applies its transformation and forces a recursive layout update to account for the new position of the affected element.  \n  \n-   Avoid unnecessary calls to <xref:System.Windows.UIElement.UpdateLayout%2A>.  \n  \n     The <xref:System.Windows.UIElement.UpdateLayout%2A> method forces a recursive layout update, and is frequently not necessary. Unless you are sure that a full update is required, rely on the layout system to call this method for you.  \n  \n-   When working with a large <xref:System.Windows.Controls.Panel.Children%2A> collection, consider using a <xref:System.Windows.Controls.VirtualizingStackPanel> instead of a regular <xref:System.Windows.Controls.StackPanel>.  \n  \n     By virtualizing the child collection, the <xref:System.Windows.Controls.VirtualizingStackPanel> only keeps objects in memory that are currently within the parent's ViewPort. As a result, performance is substantially improved in most scenarios.  \n  \n<a name=\"LayoutSystem_LayoutRounding\"></a>   \n## Sub-pixel Rendering and Layout Rounding  \n The [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] graphics system uses device-independent units to enable resolution and device independence. Each device independent pixel automatically scales with the system's [!INCLUDE[TLA#tla_dpi](../../../../includes/tlasharptla-dpi-md.md)] setting. This provides [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] applications proper scaling for different [!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)] settings and makes the application automatically [!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)]-aware.  \n  \n However, this [!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)] independence can create irregular edge rendering because of anti-aliasing. These artifacts, typically seen as blurry or semi-transparent edges, can occur when the location of an edge falls in the middle of a device pixel instead of between device pixels. The layout system provides a way to adjust for this with layout rounding. Layout rounding is where the layout system rounds any non-integral pixel values during the layout pass.  \n  \n Layout rounding is disabled by default. To enable layout rounding, set the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property to `true` on any <xref:System.Windows.FrameworkElement>. Because it is a dependency property, the value will propagate to all the children in the visual tree. To enable layout rounding for the entire UI, set <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> to `true` on the root container. For an example, see <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>.  \n  \n<a name=\"LayoutSystem_whatsnext\"></a>   \n## What's Next  \n Understanding how elements are measured and arranged is the first step in understanding layout. For more information about the available <xref:System.Windows.Controls.Panel> elements, see [Panels Overview](../../../../docs/framework/wpf/controls/panels-overview.md). To better understand the various positioning properties that can affect layout, see [Alignment, Margins, and Padding Overview](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md). For an example of a custom <xref:System.Windows.Controls.Panel> element, see [Custom Radial Panel Sample](http://go.microsoft.com/fwlink/?LinkID=159982). When you are ready to put it all together in a light-weight application, see [Walkthrough: My First WPF Desktop Application](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md).  \n  \n## See Also  \n <xref:System.Windows.FrameworkElement>   \n <xref:System.Windows.UIElement>   \n [Panels Overview](../../../../docs/framework/wpf/controls/panels-overview.md)   \n [Alignment, Margins, and Padding Overview](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md)   \n [Layout and Design](../../../../docs/framework/wpf/advanced/optimizing-performance-layout-and-design.md)","nodes":[{"pos":[4,444],"nodes":[{"content":"Layout | Microsoft Docs","nodes":[{"pos":[0,23],"content":"Layout | Microsoft Docs","nodes":[{"content":"Layout | Microsoft Docs","pos":[0,23]}]}],"pos":[6,32],"yaml":true}],"content":"title: \"Layout | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"WPF layout system\"\n  - \"controls [WPF], layout system\"\n  - \"layout system [WPF]\"\nms.assetid: 3eecdced-3623-403a-a077-7595453a9221\ncaps.latest.revision: 31\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","yamlblock":true},{"pos":[451,457],"content":"Layout","linkify":"Layout","nodes":[{"content":"Layout","pos":[0,6]}]},{"content":"This topic describes the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> layout system.","pos":[458,577],"source":"This topic describes the [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] layout system."},{"content":"Understanding how and when layout calculations occur is essential for creating user interfaces in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.","pos":[578,758],"source":" Understanding how and when layout calculations occur is essential for creating user interfaces in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]."},{"content":"This topic contains the following sections:","pos":[765,808]},{"pos":[818,869],"content":"<bpt id=\"p1\">[</bpt>Element Bounding Boxes<ept id=\"p1\">](#LayoutSystem_BoundingBox)</ept>","source":"[Element Bounding Boxes](#LayoutSystem_BoundingBox)"},{"pos":[879,922],"content":"<bpt id=\"p1\">[</bpt>The Layout System<ept id=\"p1\">](#LayoutSystem_Overview)</ept>","source":"[The Layout System](#LayoutSystem_Overview)"},{"pos":[932,997],"content":"<bpt id=\"p1\">[</bpt>Measuring and Arranging Children<ept id=\"p1\">](#LayoutSystem_Measure_Arrange)</ept>","source":"[Measuring and Arranging Children](#LayoutSystem_Measure_Arrange)"},{"pos":[1007,1079],"content":"<bpt id=\"p1\">[</bpt>Panel Elements and Custom Layout Behaviors<ept id=\"p1\">](#LayoutSystem_PanelsCustom)</ept>","source":"[Panel Elements and Custom Layout Behaviors](#LayoutSystem_PanelsCustom)"},{"pos":[1089,1151],"content":"<bpt id=\"p1\">[</bpt>Layout Performance Considerations<ept id=\"p1\">](#LayoutSystem_Performance)</ept>","source":"[Layout Performance Considerations](#LayoutSystem_Performance)"},{"pos":[1161,1232],"content":"<bpt id=\"p1\">[</bpt>Sub-pixel Rendering and Layout Rounding<ept id=\"p1\">](#LayoutSystem_LayoutRounding)</ept>","source":"[Sub-pixel Rendering and Layout Rounding](#LayoutSystem_LayoutRounding)"},{"pos":[1242,1280],"content":"<bpt id=\"p1\">[</bpt>What's Next<ept id=\"p1\">](#LayoutSystem_whatsnext)</ept>","source":"[What's Next](#LayoutSystem_whatsnext)"},{"pos":[1332,1354],"content":"Element Bounding Boxes","linkify":"Element Bounding Boxes","nodes":[{"content":"Element Bounding Boxes","pos":[0,22]}]},{"content":"When thinking about layout in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, it is important to understand the bounding box that surrounds all elements.","pos":[1358,1546],"source":"When thinking about layout in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], it is important to understand the bounding box that surrounds all elements."},{"content":"Each <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> consumed by the layout system can be thought of as a rectangle that is slotted into the layout.","pos":[1547,1686],"source":" Each <xref:System.Windows.FrameworkElement> consumed by the layout system can be thought of as a rectangle that is slotted into the layout."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.LayoutInformation&gt;</ph> class returns the boundaries of an element's layout allocation, or slot.","pos":[1687,1823],"source":" The <xref:System.Windows.Controls.Primitives.LayoutInformation> class returns the boundaries of an element's layout allocation, or slot."},{"content":"The size of the rectangle is determined by calculating the available screen space, the size of any constraints, layout-specific properties (such as margin and padding), and the individual behavior of the parent <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element.","pos":[1824,2080],"source":" The size of the rectangle is determined by calculating the available screen space, the size of any constraints, layout-specific properties (such as margin and padding), and the individual behavior of the parent <xref:System.Windows.Controls.Panel> element."},{"content":"Processing this data, the layout system is able to calculate the position of all the children of a particular <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.","pos":[2081,2228],"source":" Processing this data, the layout system is able to calculate the position of all the children of a particular <xref:System.Windows.Controls.Panel>."},{"content":"It is important to remember that sizing characteristics defined on the parent element, such as a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Border&gt;</ph>, affect its children.","pos":[2229,2385],"source":" It is important to remember that sizing characteristics defined on the parent element, such as a <xref:System.Windows.Controls.Border>, affect its children."},{"content":"The following illustration shows a simple layout.","pos":[2392,2441]},{"pos":[2448,2575],"content":"<bpt id=\"p1\">![</bpt>A typical Grid, no bounding box superimposed.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/advanced/media/boundingbox1.png \"</bpt>boundingbox1<ept id=\"p2\">\")</ept>","source":"![A typical Grid, no bounding box superimposed.](../../../../docs/framework/wpf/advanced/media/boundingbox1.png \"boundingbox1\")"},{"pos":[2582,2705],"content":"This layout can be achieved by using the following <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.","source":"This layout can be achieved by using the following [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]."},{"pos":[2712,2837],"content":"<bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>LayoutInformation#1<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/LayoutInformation/CSharp/Window1.xaml#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-xml[LayoutInformation#1](../../../../samples/snippets/csharp/VS_Snippets_Wpf/LayoutInformation/CSharp/Window1.xaml#1)]"},{"content":"A single <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element is hosted within a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.","pos":[2844,2957],"source":"A single <xref:System.Windows.Controls.TextBlock> element is hosted within a <xref:System.Windows.Controls.Grid>."},{"content":"While the text fills only the upper-left corner of the first column, the allocated space for the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> is actually much larger.","pos":[2958,3120],"source":" While the text fills only the upper-left corner of the first column, the allocated space for the <xref:System.Windows.Controls.TextBlock> is actually much larger."},{"content":"The bounding box of any <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> can be retrieved by using the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot%2A&gt;</ph> method.","pos":[3121,3298],"source":" The bounding box of any <xref:System.Windows.FrameworkElement> can be retrieved by using the <xref:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot%2A> method."},{"content":"The following illustration shows the bounding box for the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element.","pos":[3299,3406],"source":" The following illustration shows the bounding box for the <xref:System.Windows.Controls.TextBlock> element."},{"pos":[3413,3544],"content":"<bpt id=\"p1\">![</bpt>The bounding box of the TextBlock is now visible.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/advanced/media/boundingbox2.png \"</bpt>boundingbox2<ept id=\"p2\">\")</ept>","source":"![The bounding box of the TextBlock is now visible.](../../../../docs/framework/wpf/advanced/media/boundingbox2.png \"boundingbox2\")"},{"content":"As shown by the yellow rectangle, the allocated space for the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element is actually much larger than it appears.","pos":[3551,3702],"source":"As shown by the yellow rectangle, the allocated space for the <xref:System.Windows.Controls.TextBlock> element is actually much larger than it appears."},{"content":"As additional elements are added to the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, this allocation could shrink or expand, depending on the type and size of elements that are added.","pos":[3703,3878],"source":" As additional elements are added to the <xref:System.Windows.Controls.Grid>, this allocation could shrink or expand, depending on the type and size of elements that are added."},{"content":"The layout slot of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> is translated into a <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Path&gt;</ph> by using the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot%2A&gt;</ph> method.","pos":[3885,4101],"source":"The layout slot of the <xref:System.Windows.Controls.TextBlock> is translated into a <xref:System.Windows.Shapes.Path> by using the <xref:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot%2A> method."},{"content":"This technique can be useful for displaying the bounding box of an element.","pos":[4102,4177]},{"pos":[4184,4454],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>LayoutInformation#2<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/LayoutInformation/CSharp/Window1.xaml.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>LayoutInformation#2<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutInformation/VisualBasic/Window1.xaml.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[LayoutInformation#2](../../../../samples/snippets/csharp/VS_Snippets_Wpf/LayoutInformation/CSharp/Window1.xaml.cs#2)]\n [!code-vb[LayoutInformation#2](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutInformation/VisualBasic/Window1.xaml.vb#2)]"},{"pos":[4503,4520],"content":"The Layout System","linkify":"The Layout System","nodes":[{"content":"The Layout System","pos":[0,17]}]},{"content":"At its simplest, layout is a recursive system that leads to an element being sized, positioned, and drawn.","pos":[4524,4630]},{"content":"More specifically, layout describes the process of measuring and arranging the members of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element's <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection.","pos":[4631,4830],"source":" More specifically, layout describes the process of measuring and arranging the members of a <xref:System.Windows.Controls.Panel> element's <xref:System.Windows.Controls.Panel.Children%2A> collection."},{"content":"Layout is an intensive process.","pos":[4831,4862]},{"content":"The larger the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection, the greater the number of calculations that must be made.","pos":[4863,4996],"source":" The larger the <xref:System.Windows.Controls.Panel.Children%2A> collection, the greater the number of calculations that must be made."},{"content":"Complexity can also be introduced based on the layout behavior defined by the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element that owns the collection.","pos":[4997,5145],"source":" Complexity can also be introduced based on the layout behavior defined by the <xref:System.Windows.Controls.Panel> element that owns the collection."},{"content":"A relatively simple <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, such as <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, can have significantly better performance than a more complex <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, such as <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.","pos":[5146,5395],"source":" A relatively simple <xref:System.Windows.Controls.Panel>, such as <xref:System.Windows.Controls.Canvas>, can have significantly better performance than a more complex <xref:System.Windows.Controls.Panel>, such as <xref:System.Windows.Controls.Grid>."},{"content":"Each time that a child <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> changes its position, it has the potential to trigger a new pass by the layout system.","pos":[5402,5543],"source":"Each time that a child <xref:System.Windows.UIElement> changes its position, it has the potential to trigger a new pass by the layout system."},{"content":"Therefore, it is important to understand the events that can invoke the layout system, as unnecessary invocation can lead to poor application performance.","pos":[5544,5698]},{"content":"The following describes the process that occurs when the layout system is invoked.","pos":[5699,5781]},{"content":"A child <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> begins the layout process by first having its core properties measured.","pos":[5791,5902],"source":"A child <xref:System.Windows.UIElement> begins the layout process by first having its core properties measured."},{"content":"Sizing properties defined on <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> are evaluated, such as <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>.","pos":[5912,6155],"source":"Sizing properties defined on <xref:System.Windows.FrameworkElement> are evaluated, such as <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, and <xref:System.Windows.FrameworkElement.Margin%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph>-specific logic is applied, such as <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Dock&gt;</ph> direction or stacking <ph id=\"ph3\">&lt;xref:System.Windows.Controls.StackPanel.Orientation%2A&gt;</ph>.","pos":[6165,6352],"source":"<xref:System.Windows.Controls.Panel>-specific logic is applied, such as <xref:System.Windows.Controls.Dock> direction or stacking <xref:System.Windows.Controls.StackPanel.Orientation%2A>."},{"content":"Content is arranged after all children have been measured.","pos":[6362,6420]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection is drawn on the screen.","pos":[6430,6517],"source":"The <xref:System.Windows.Controls.Panel.Children%2A> collection is drawn on the screen."},{"content":"The process is invoked again if additional <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> are added to the collection, a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> is applied, or the <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method is called.","pos":[6527,6792],"source":"The process is invoked again if additional <xref:System.Windows.Controls.Panel.Children%2A> are added to the collection, a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> is applied, or the <xref:System.Windows.UIElement.UpdateLayout%2A> method is called."},{"content":"This process and how it is invoked are defined in more detail in the following sections.","pos":[6799,6887]},{"pos":[6943,6975],"content":"Measuring and Arranging Children","linkify":"Measuring and Arranging Children","nodes":[{"content":"Measuring and Arranging Children","pos":[0,32]}]},{"content":"The layout system completes two passes for each member of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection, a measure pass and an arrange pass.","pos":[6979,7137],"source":"The layout system completes two passes for each member of the <xref:System.Windows.Controls.Panel.Children%2A> collection, a measure pass and an arrange pass."},{"content":"Each child <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> provides its own <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> methods to achieve its own specific layout behavior.","pos":[7138,7375],"source":" Each child <xref:System.Windows.Controls.Panel> provides its own <xref:System.Windows.FrameworkElement.MeasureOverride%2A> and <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> methods to achieve its own specific layout behavior."},{"content":"During the measure pass, each member of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection is evaluated.","pos":[7382,7499],"source":"During the measure pass, each member of the <xref:System.Windows.Controls.Panel.Children%2A> collection is evaluated."},{"content":"The process begins with a call to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> method.","pos":[7500,7588],"source":" The process begins with a call to the <xref:System.Windows.UIElement.Measure%2A> method."},{"content":"This method is called within the implementation of the parent <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element, and does not have to be called explicitly for layout to occur.","pos":[7589,7759],"source":" This method is called within the implementation of the parent <xref:System.Windows.Controls.Panel> element, and does not have to be called explicitly for layout to occur."},{"content":"First, native size properties of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> are evaluated, such as <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>.","pos":[7766,7948],"source":"First, native size properties of the <xref:System.Windows.UIElement> are evaluated, such as <xref:System.Windows.UIElement.Clip%2A> and <xref:System.Windows.UIElement.Visibility%2A>."},{"content":"This generates a value named <ph id=\"ph1\">`constraintSize`</ph> that is passed to <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.MeasureCore%2A&gt;</ph>.","pos":[7949,8067],"source":" This generates a value named `constraintSize` that is passed to <xref:System.Windows.FrameworkElement.MeasureCore%2A>."},{"content":"Secondly, framework properties defined on <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> are processed, which affects the value of <ph id=\"ph2\">`constraintSize`</ph>.","pos":[8074,8214],"source":"Secondly, framework properties defined on <xref:System.Windows.FrameworkElement> are processed, which affects the value of `constraintSize`."},{"content":"These properties generally describe the sizing characteristics of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>, such as its <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>.","pos":[8215,8542],"source":" These properties generally describe the sizing characteristics of the underlying <xref:System.Windows.UIElement>, such as its <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Margin%2A>, and <xref:System.Windows.FrameworkElement.Style%2A>."},{"content":"Each of these properties can change the space that is necessary to display the element.","pos":[8543,8630]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> is then called with <ph id=\"ph2\">`constraintSize`</ph> as a parameter.","pos":[8631,8741],"source":" <xref:System.Windows.FrameworkElement.MeasureOverride%2A> is then called with `constraintSize` as a parameter."},{"pos":[8749,9427],"content":"[!NOTE]\n There is a difference between the properties of <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A> and <xref:System.Windows.FrameworkElement.ActualWidth%2A>. For example, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property is a calculated value based on other height inputs and the layout system. The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties, such as <xref:System.Windows.FrameworkElement.Height%2A>, that are the basis of the input change.","leadings":["","> "],"nodes":[{"content":"There is a difference between the properties of <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A> and <xref:System.Windows.FrameworkElement.ActualWidth%2A>. For example, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property is a calculated value based on other height inputs and the layout system. The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties, such as <xref:System.Windows.FrameworkElement.Height%2A>, that are the basis of the input change.","pos":[9,676],"nodes":[{"content":"There is a difference between the properties of <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>.","pos":[0,266],"source":"There is a difference between the properties of <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A> and <xref:System.Windows.FrameworkElement.ActualWidth%2A>."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> property is a calculated value based on other height inputs and the layout system.","pos":[267,421],"source":" For example, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property is a calculated value based on other height inputs and the layout system."},{"content":"The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties, such as <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, that are the basis of the input change.","pos":[422,667],"source":" The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties, such as <xref:System.Windows.FrameworkElement.Height%2A>, that are the basis of the input change."}]}]},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.","pos":[9438,9666],"source":"Because <xref:System.Windows.FrameworkElement.ActualHeight%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system."},{"content":"The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.","pos":[9667,9792]},{"content":"The ultimate goal of the measure pass is for the child to determine its <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>, which occurs during the <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.MeasureCore%2A&gt;</ph> call.","pos":[9799,10002],"source":"The ultimate goal of the measure pass is for the child to determine its <xref:System.Windows.UIElement.DesiredSize%2A>, which occurs during the <xref:System.Windows.FrameworkElement.MeasureCore%2A> call."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> value is stored by <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> for use during the content arrange pass.","pos":[10003,10156],"source":" The <xref:System.Windows.UIElement.DesiredSize%2A> value is stored by <xref:System.Windows.UIElement.Measure%2A> for use during the content arrange pass."},{"content":"The arrange pass begins with a call to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> method.","pos":[10163,10256],"source":"The arrange pass begins with a call to the <xref:System.Windows.UIElement.Arrange%2A> method."},{"content":"During the arrange pass, the parent <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element generates a rectangle that represents the bounds of the child.","pos":[10257,10400],"source":" During the arrange pass, the parent <xref:System.Windows.Controls.Panel> element generates a rectangle that represents the bounds of the child."},{"content":"This value is passed to the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph> method for processing.","pos":[10401,10505],"source":" This value is passed to the <xref:System.Windows.FrameworkElement.ArrangeCore%2A> method for processing."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph> method evaluates the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> of the child and evaluates any additional margins that may affect the rendered size of the element.","pos":[10512,10737],"source":"The <xref:System.Windows.FrameworkElement.ArrangeCore%2A> method evaluates the <xref:System.Windows.UIElement.DesiredSize%2A> of the child and evaluates any additional margins that may affect the rendered size of the element."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph> generates an <ph id=\"ph2\">`arrangeSize`</ph>, which is passed to the <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> method of the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> as a parameter.","pos":[10738,10967],"source":" <xref:System.Windows.FrameworkElement.ArrangeCore%2A> generates an `arrangeSize`, which is passed to the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> method of the <xref:System.Windows.Controls.Panel> as a parameter."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> generates the <ph id=\"ph2\">`finalSize`</ph> of the child.","pos":[10968,11065],"source":" <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> generates the `finalSize` of the child."},{"content":"Finally, the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph> method does a final evaluation of offset properties, such as margin and alignment, and puts the child within its layout slot.","pos":[11066,11258],"source":" Finally, the <xref:System.Windows.FrameworkElement.ArrangeCore%2A> method does a final evaluation of offset properties, such as margin and alignment, and puts the child within its layout slot."},{"content":"The child does not have to (and frequently does not) fill the entire allocated space.","pos":[11259,11344]},{"content":"Control is then returned to the parent <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> and the layout process is complete.","pos":[11345,11456],"source":" Control is then returned to the parent <xref:System.Windows.Controls.Panel> and the layout process is complete."},{"pos":[11509,11551],"content":"Panel Elements and Custom Layout Behaviors","linkify":"Panel Elements and Custom Layout Behaviors","nodes":[{"content":"Panel Elements and Custom Layout Behaviors","pos":[0,42]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> includes a group of elements that derive from <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.","pos":[11555,11720],"source":"[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] includes a group of elements that derive from <xref:System.Windows.Controls.Panel>."},{"content":"These <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements enable many complex layouts.","pos":[11721,11801],"source":" These <xref:System.Windows.Controls.Panel> elements enable many complex layouts."},{"content":"For example, stacking elements can easily be achieved by using the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> element, while more complex and free flowing layouts are possible by using a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.","pos":[11802,12026],"source":" For example, stacking elements can easily be achieved by using the <xref:System.Windows.Controls.StackPanel> element, while more complex and free flowing layouts are possible by using a <xref:System.Windows.Controls.Canvas>."},{"content":"The following table summarizes the available layout <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements.","pos":[12033,12131],"source":"The following table summarizes the available layout <xref:System.Windows.Controls.Panel> elements."},{"content":"Panel name","pos":[12138,12148]},{"content":"Description","pos":[12149,12160]},{"content":"Defines an area within which you can explicitly position child elements by coordinates relative to the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> area.","pos":[12242,12388],"source":"Defines an area within which you can explicitly position child elements by coordinates relative to the <xref:System.Windows.Controls.Canvas> area."},{"content":"Defines an area within which you can arrange child elements either horizontally or vertically, relative to each other.","pos":[12434,12552]},{"content":"Defines a flexible grid area that consists of columns and rows.","pos":[12593,12656]},{"content":"Arranges child elements into a single line that can be oriented horizontally or vertically.","pos":[12703,12794]},{"content":"Provides a framework for <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements that virtualize their child data collection.","pos":[12848,12963],"source":"Provides a framework for <xref:System.Windows.Controls.Panel> elements that virtualize their child data collection."},{"content":"This is an abstract class.","pos":[12964,12990]},{"content":"Positions child elements in sequential position from left to right, breaking content to the next line at the edge of the containing box.","pos":[13036,13172]},{"content":"Subsequent ordering occurs sequentially from top to bottom or right to left, depending on the value of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.WrapPanel.Orientation%2A&gt;</ph> property.","pos":[13173,13345],"source":" Subsequent ordering occurs sequentially from top to bottom or right to left, depending on the value of the <xref:System.Windows.Controls.WrapPanel.Orientation%2A> property."},{"content":"For applications that require a layout that is not possible by using any of the predefined <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements, custom layout behaviors can be achieved by inheriting from <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> and overriding the <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> methods.","pos":[13353,13734],"source":"For applications that require a layout that is not possible by using any of the predefined <xref:System.Windows.Controls.Panel> elements, custom layout behaviors can be achieved by inheriting from <xref:System.Windows.Controls.Panel> and overriding the <xref:System.Windows.FrameworkElement.MeasureOverride%2A> and <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> methods."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>Custom Radial Panel Sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=159982)</ept>.","pos":[13735,13831],"source":" For an example, see [Custom Radial Panel Sample](http://go.microsoft.com/fwlink/?LinkID=159982)."},{"pos":[13883,13916],"content":"Layout Performance Considerations","linkify":"Layout Performance Considerations","nodes":[{"content":"Layout Performance Considerations","pos":[0,33]}]},{"content":"Layout is a recursive process.","pos":[13920,13950]},{"content":"Each child element in a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection gets processed during each invocation of the layout system.","pos":[13951,14094],"source":" Each child element in a <xref:System.Windows.Controls.Panel.Children%2A> collection gets processed during each invocation of the layout system."},{"content":"As a result, triggering the layout system should be avoided when it is not necessary.","pos":[14095,14180]},{"content":"The following considerations can help you achieve better performance.","pos":[14181,14250]},{"content":"Be aware of which property value changes will force a recursive update by the layout system.","pos":[14260,14352]},{"content":"Dependency properties whose values can cause the layout system to be initialized are marked with public flags.","pos":[14363,14473]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;</ph> provide useful clues as to which property value changes will force a recursive update by the layout system.","pos":[14474,14717],"source":" <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> and <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> provide useful clues as to which property value changes will force a recursive update by the layout system."},{"content":"In general, any property that can affect the size of an element's bounding box should have a <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph> flag set to true.","pos":[14718,14894],"source":" In general, any property that can affect the size of an element's bounding box should have a <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> flag set to true."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Dependency Properties Overview<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept>.","pos":[14895,15029],"source":" For more information, see [Dependency Properties Overview](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)."},{"content":"When possible, use a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> instead of a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>.","pos":[15039,15182],"source":"When possible, use a <xref:System.Windows.UIElement.RenderTransform%2A> instead of a <xref:System.Windows.FrameworkElement.LayoutTransform%2A>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> can be a very useful way to affect the content of a <ph id=\"ph2\">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>.","pos":[15193,15371],"source":"A <xref:System.Windows.FrameworkElement.LayoutTransform%2A> can be a very useful way to affect the content of a [!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]."},{"content":"However, if the effect of the transform does not have to impact the position of other elements, it is best to use a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> instead, because <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> does not invoke the layout system.","pos":[15372,15641],"source":" However, if the effect of the transform does not have to impact the position of other elements, it is best to use a <xref:System.Windows.UIElement.RenderTransform%2A> instead, because <xref:System.Windows.UIElement.RenderTransform%2A> does not invoke the layout system."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> applies its transformation and forces a recursive layout update to account for the new position of the affected element.","pos":[15642,15820],"source":" <xref:System.Windows.FrameworkElement.LayoutTransform%2A> applies its transformation and forces a recursive layout update to account for the new position of the affected element."},{"content":"Avoid unnecessary calls to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>.","pos":[15830,15905],"source":"Avoid unnecessary calls to <xref:System.Windows.UIElement.UpdateLayout%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method forces a recursive layout update, and is frequently not necessary.","pos":[15916,16041],"source":"The <xref:System.Windows.UIElement.UpdateLayout%2A> method forces a recursive layout update, and is frequently not necessary."},{"content":"Unless you are sure that a full update is required, rely on the layout system to call this method for you.","pos":[16042,16148]},{"content":"When working with a large <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection, consider using a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> instead of a regular <ph id=\"ph3\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.","pos":[16158,16379],"source":"When working with a large <xref:System.Windows.Controls.Panel.Children%2A> collection, consider using a <xref:System.Windows.Controls.VirtualizingStackPanel> instead of a regular <xref:System.Windows.Controls.StackPanel>."},{"content":"By virtualizing the child collection, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> only keeps objects in memory that are currently within the parent's ViewPort.","pos":[16390,16563],"source":"By virtualizing the child collection, the <xref:System.Windows.Controls.VirtualizingStackPanel> only keeps objects in memory that are currently within the parent's ViewPort."},{"content":"As a result, performance is substantially improved in most scenarios.","pos":[16564,16633]},{"pos":[16688,16727],"content":"Sub-pixel Rendering and Layout Rounding","linkify":"Sub-pixel Rendering and Layout Rounding","nodes":[{"content":"Sub-pixel Rendering and Layout Rounding","pos":[0,39]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> graphics system uses device-independent units to enable resolution and device independence.","pos":[16731,16908],"source":"The [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] graphics system uses device-independent units to enable resolution and device independence."},{"content":"Each device independent pixel automatically scales with the system's <ph id=\"ph1\">[!INCLUDE[TLA#tla_dpi](../../../../includes/tlasharptla-dpi-md.md)]</ph> setting.","pos":[16909,17054],"source":" Each device independent pixel automatically scales with the system's [!INCLUDE[TLA#tla_dpi](../../../../includes/tlasharptla-dpi-md.md)] setting."},{"content":"This provides <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications proper scaling for different <ph id=\"ph2\">[!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)]</ph> settings and makes the application automatically <ph id=\"ph3\">[!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)]</ph>-aware.","pos":[17055,17388],"source":" This provides [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] applications proper scaling for different [!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)] settings and makes the application automatically [!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)]-aware."},{"content":"However, this <ph id=\"ph1\">[!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)]</ph> independence can create irregular edge rendering because of anti-aliasing.","pos":[17395,17553],"source":"However, this [!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)] independence can create irregular edge rendering because of anti-aliasing."},{"content":"These artifacts, typically seen as blurry or semi-transparent edges, can occur when the location of an edge falls in the middle of a device pixel instead of between device pixels.","pos":[17554,17733]},{"content":"The layout system provides a way to adjust for this with layout rounding.","pos":[17734,17807]},{"content":"Layout rounding is where the layout system rounds any non-integral pixel values during the layout pass.","pos":[17808,17911]},{"content":"Layout rounding is disabled by default.","pos":[17918,17957]},{"content":"To enable layout rounding, set the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> on any <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.","pos":[17958,18118],"source":" To enable layout rounding, set the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property to `true` on any <xref:System.Windows.FrameworkElement>."},{"content":"Because it is a dependency property, the value will propagate to all the children in the visual tree.","pos":[18119,18220]},{"content":"To enable layout rounding for the entire UI, set <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> on the root container.","pos":[18221,18362],"source":" To enable layout rounding for the entire UI, set <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> to `true` on the root container."},{"content":"For an example, see <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph>.","pos":[18363,18443],"source":" For an example, see <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>."},{"pos":[18493,18504],"content":"What's Next","linkify":"What's Next","nodes":[{"content":"What's Next","pos":[0,11]}]},{"content":"Understanding how elements are measured and arranged is the first step in understanding layout.","pos":[18508,18603]},{"content":"For more information about the available <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements, see <bpt id=\"p1\">[</bpt>Panels Overview<ept id=\"p1\">](../../../../docs/framework/wpf/controls/panels-overview.md)</ept>.","pos":[18604,18774],"source":" For more information about the available <xref:System.Windows.Controls.Panel> elements, see [Panels Overview](../../../../docs/framework/wpf/controls/panels-overview.md)."},{"content":"To better understand the various positioning properties that can affect layout, see <bpt id=\"p1\">[</bpt>Alignment, Margins, and Padding Overview<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md)</ept>.","pos":[18775,18985],"source":" To better understand the various positioning properties that can affect layout, see [Alignment, Margins, and Padding Overview](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md)."},{"content":"For an example of a custom <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element, see <bpt id=\"p1\">[</bpt>Custom Radial Panel Sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=159982)</ept>.","pos":[18986,19139],"source":" For an example of a custom <xref:System.Windows.Controls.Panel> element, see [Custom Radial Panel Sample](http://go.microsoft.com/fwlink/?LinkID=159982)."},{"content":"When you are ready to put it all together in a light-weight application, see <bpt id=\"p1\">[</bpt>Walkthrough: My First WPF Desktop Application<ept id=\"p1\">](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept>.","pos":[19140,19361],"source":" When you are ready to put it all together in a light-weight application, see [Walkthrough: My First WPF Desktop Application](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)."},{"pos":[19370,19378],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>","pos":[19382,19420],"source":"<xref:System.Windows.FrameworkElement> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>","pos":[19425,19456],"source":"<xref:System.Windows.UIElement> "},{"content":"<bpt id=\"p1\">[</bpt>Panels Overview<ept id=\"p1\">](../../../../docs/framework/wpf/controls/panels-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[19461,19539],"source":"[Panels Overview](../../../../docs/framework/wpf/controls/panels-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Alignment, Margins, and Padding Overview<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[19543,19669],"source":"[Alignment, Margins, and Padding Overview](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Layout and Design<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/optimizing-performance-layout-and-design.md)</ept>","pos":[19673,19777],"source":"[Layout and Design](../../../../docs/framework/wpf/advanced/optimizing-performance-layout-and-design.md)"}]}