{"content":"---\ntitle: \"<< operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/12/2019\nf1_keywords: \n  - \"<<_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"left shift operator (<<) [C#]\"\n  - \"<< operator [C#]\"\nms.assetid: a654eb56-1ff7-4bf3-9064-b631be0cdccc\n---\n# \\<\\< operator (C# Reference)\n\nThe left-shift operator `<<` shifts its first operand left by the number of bits defined by its second operand. All integer types support the `<<` operator. However, the type of the second operand must be [int](../keywords/int.md) or a type that has a [predefined implicit numeric conversion](../keywords/implicit-numeric-conversions-table.md) to `int`.\n\nThe high-order bits that are outside the range of the result type are discarded, and the low-order empty bit positions are set to zero, as the following example shows:\n\n[!code-csharp-interactive[left shift example](~/samples/snippets/csharp/language-reference/operators/ShiftOperatorsExamples.cs#LeftShift)]\n\n## Shift count\n\nFor the expression `x << count`, the actual shift count depends on the type of `x` as follows:\n\n- If the type of `x` is [int](../keywords/int.md) or [uint](../keywords/uint.md), the shift count is given by the low-order *five* bits of the second operand. That is, the shift count is computed from `count & 0x1F` (or `count & 0b_1_1111`).\n\n- If the type of `x` is [long](../keywords/long.md) or [ulong](../keywords/ulong.md), the shift count is given by the low-order *six* bits of the second operand. That is, the shift count is computed from `count & 0x3F` (or `count & 0b_11_1111`).\n\nThe following example demonstrates that behavior:\n\n[!code-csharp-interactive[shift count example](~/samples/snippets/csharp/language-reference/operators/ShiftOperatorsExamples.cs#LeftShiftByLargeCount)]\n\n## Remarks\n\nShift operations never cause overflows and produce the same results in [checked and unchecked](../keywords/checked-and-unchecked.md) contexts.\n\n## Operator overloadability\n\nUser-defined types can [overload](../keywords/operator.md) the `<<` operator. If a user-defined type `T` overloads the `<<` operator, the type of the first operand must be `T` and the type of the second operand must be `int`. When the `<<` operator is overloaded, the [left-shift assignment operator](left-shift-assignment-operator.md) `<<=` is also implicitly overloaded.\n\n## C# language specification\n\nFor more information, see the [Shift operators](~/_csharplang/spec/expressions.md#shift-operators) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [>> operator](right-shift-operator.md)\n","nodes":[{"pos":[4,246],"embed":true,"restype":"x-metadata","content":"title: \"<< operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/12/2019\nf1_keywords: \n  - \"<<_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"left shift operator (<<) [C#]\"\n  - \"<< operator [C#]\"\nms.assetid: a654eb56-1ff7-4bf3-9064-b631be0cdccc","nodes":[{"content":"<< operator - C# Reference","nodes":[{"pos":[0,26],"content":"<< operator - C# Reference","nodes":[{"content":"&lt;&lt; operator - C# Reference","pos":[0,26],"source":"<< operator - C# Reference"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[253,281],"content":"\\<\\< operator (C# Reference)","linkify":"\\<\\< operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph><ph id=\"ph2\">\\&lt;</ph> operator (C# Reference)","pos":[0,28],"source":"\\<\\< operator (C# Reference)"}]},{"content":"The left-shift operator <ph id=\"ph1\">`&lt;&lt;`</ph> shifts its first operand left by the number of bits defined by its second operand.","pos":[283,394],"source":"The left-shift operator `<<` shifts its first operand left by the number of bits defined by its second operand."},{"content":"All integer types support the <ph id=\"ph1\">`&lt;&lt;`</ph> operator.","pos":[395,439],"source":" All integer types support the `<<` operator."},{"content":"However, the type of the second operand must be <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../keywords/int.md)</ept> or a type that has a <bpt id=\"p2\">[</bpt>predefined implicit numeric conversion<ept id=\"p2\">](../keywords/implicit-numeric-conversions-table.md)</ept> to <ph id=\"ph1\">`int`</ph>.","pos":[440,636],"source":" However, the type of the second operand must be [int](../keywords/int.md) or a type that has a [predefined implicit numeric conversion](../keywords/implicit-numeric-conversions-table.md) to `int`."},{"content":"The high-order bits that are outside the range of the result type are discarded, and the low-order empty bit positions are set to zero, as the following example shows:","pos":[638,805]},{"pos":[950,961],"content":"Shift count","linkify":"Shift count","nodes":[{"content":"Shift count","pos":[0,11]}]},{"pos":[963,1057],"content":"For the expression <ph id=\"ph1\">`x &lt;&lt; count`</ph>, the actual shift count depends on the type of <ph id=\"ph2\">`x`</ph> as follows:","source":"For the expression `x << count`, the actual shift count depends on the type of `x` as follows:"},{"content":"If the type of <ph id=\"ph1\">`x`</ph> is <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../keywords/int.md)</ept> or <bpt id=\"p2\">[</bpt>uint<ept id=\"p2\">](../keywords/uint.md)</ept>, the shift count is given by the low-order <bpt id=\"p3\">*</bpt>five<ept id=\"p3\">*</ept> bits of the second operand.","pos":[1061,1217],"source":"If the type of `x` is [int](../keywords/int.md) or [uint](../keywords/uint.md), the shift count is given by the low-order *five* bits of the second operand."},{"content":"That is, the shift count is computed from <ph id=\"ph1\">`count &amp; 0x1F`</ph> (or <ph id=\"ph2\">`count &amp; 0b_1_1111`</ph>).","pos":[1218,1300],"source":" That is, the shift count is computed from `count & 0x1F` (or `count & 0b_1_1111`)."},{"content":"If the type of <ph id=\"ph1\">`x`</ph> is <bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../keywords/long.md)</ept> or <bpt id=\"p2\">[</bpt>ulong<ept id=\"p2\">](../keywords/ulong.md)</ept>, the shift count is given by the low-order <bpt id=\"p3\">*</bpt>six<ept id=\"p3\">*</ept> bits of the second operand.","pos":[1304,1463],"source":"If the type of `x` is [long](../keywords/long.md) or [ulong](../keywords/ulong.md), the shift count is given by the low-order *six* bits of the second operand."},{"content":"That is, the shift count is computed from <ph id=\"ph1\">`count &amp; 0x3F`</ph> (or <ph id=\"ph2\">`count &amp; 0b_11_1111`</ph>).","pos":[1464,1547],"source":" That is, the shift count is computed from `count & 0x3F` (or `count & 0b_11_1111`)."},{"content":"The following example demonstrates that behavior:","pos":[1549,1598]},{"pos":[1756,1763],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1765,1907],"content":"Shift operations never cause overflows and produce the same results in <bpt id=\"p1\">[</bpt>checked and unchecked<ept id=\"p1\">](../keywords/checked-and-unchecked.md)</ept> contexts.","source":"Shift operations never cause overflows and produce the same results in [checked and unchecked](../keywords/checked-and-unchecked.md) contexts."},{"pos":[1912,1936],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"User-defined types can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../keywords/operator.md)</ept> the <ph id=\"ph1\">`&lt;&lt;`</ph> operator.","pos":[1938,2015],"source":"User-defined types can [overload](../keywords/operator.md) the `<<` operator."},{"content":"If a user-defined type <ph id=\"ph1\">`T`</ph> overloads the <ph id=\"ph2\">`&lt;&lt;`</ph> operator, the type of the first operand must be <ph id=\"ph3\">`T`</ph> and the type of the second operand must be <ph id=\"ph4\">`int`</ph>.","pos":[2016,2163],"source":" If a user-defined type `T` overloads the `<<` operator, the type of the first operand must be `T` and the type of the second operand must be `int`."},{"content":"When the <ph id=\"ph1\">`&lt;&lt;`</ph> operator is overloaded, the <bpt id=\"p1\">[</bpt>left-shift assignment operator<ept id=\"p1\">](left-shift-assignment-operator.md)</ept> <ph id=\"ph2\">`&lt;&lt;=`</ph> is also implicitly overloaded.","pos":[2164,2310],"source":" When the `<<` operator is overloaded, the [left-shift assignment operator](left-shift-assignment-operator.md) `<<=` is also implicitly overloaded."},{"pos":[2315,2340],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2342,2520],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Shift operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#shift-operators)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Shift operators](~/_csharplang/spec/expressions.md#shift-operators) section of the [C# language specification](../language-specification/index.md)."},{"pos":[2525,2533],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2537,2564],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2567,2623],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2626,2650],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[2653,2691],"content":"<bpt id=\"p1\">[</bpt>&gt;&gt; operator<ept id=\"p1\">](right-shift-operator.md)</ept>","source":"[>> operator](right-shift-operator.md)"}]}