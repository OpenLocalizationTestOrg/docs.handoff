<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14ab67e78a3b4c4819ddca36a406526e78f5485e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\expression-trees\debugging-expression-trees-in-visual-studio.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2108e3766bc1526607ffffbbaddef9c5af92524f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec66aec801ba90bbda7628456b1e8f0016bb195b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Debugging Expression Trees in Visual Studio (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Debugging Expression Trees in Visual Studio (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can analyze the structure and content of expression trees when you debug your applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To get a quick overview of the expression tree structure, you can use the <ph id="ph1">`DebugView`</ph> property, which is available only in debug mode.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about debugging, see <bpt id="p1">[</bpt>Debugging in Visual Studio<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To better represent the content of expression trees, the <ph id="ph1">`DebugView`</ph> property uses Visual Studio visualizers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Create Custom Visualizers<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To open a visualizer for an expression tree</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Click the magnifying glass icon that appears next to the <ph id="ph1">`DebugView`</ph> property of an expression tree in <bpt id="p1">**</bpt>DataTips<ept id="p1">**</ept>, a <bpt id="p2">**</bpt>Watch<ept id="p2">**</ept> window, the <bpt id="p3">**</bpt>Autos<ept id="p3">**</ept> window, or the <bpt id="p4">**</bpt>Locals<ept id="p4">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A list of visualizers is displayed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Click the visualizer you want to use.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each expression type is displayed in the visualizer as described in the following sections.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ParameterExpressions</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph> variable names are displayed with a "$" symbol at the beginning.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If a parameter does not have a name, it is assigned an automatically generated name, such as <ph id="ph1">`$var1`</ph> or <ph id="ph2">`$var2`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ConstantExpressions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> objects that represent integer values, strings, and <ph id="ph2">`null`</ph>, the value of the constant is displayed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For numeric types that have standard suffixes as C# literals, the suffix is added to the value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following table shows the suffixes associated with various numeric types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Suffix</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>U</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>L</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>UL</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>D</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>F</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>M</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>10</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>10D</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>BlockExpression</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the type of a <ph id="ph1">&lt;xref:System.Linq.Expressions.BlockExpression&gt;</ph> object differs from the type of the last expression in the block, the type is displayed in the <ph id="ph2">`DebugInfo`</ph> property in angle brackets (<ph id="ph3">\&lt;</ph> and &gt;).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Otherwise, the type of the <ph id="ph1">&lt;xref:System.Linq.Expressions.BlockExpression&gt;</ph> object is not displayed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>LambdaExpression</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> objects are displayed together with their delegate types.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If a lambda expression does not have a name, it is assigned an automatically generated name, such as <ph id="ph1">`#Lambda1`</ph> or <ph id="ph2">`#Lambda2`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>LabelExpression</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you specify a default value for the <ph id="ph1">&lt;xref:System.Linq.Expressions.LabelExpression&gt;</ph> object, this value is displayed before the <ph id="ph2">&lt;xref:System.Linq.Expressions.LabelTarget&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.Label`</ph> token indicates the start of the label.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.LabelTarget`</ph> token indicates the destination of the target to jump to.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If a label does not have a name, it is assigned an automatically generated name, such as <ph id="ph1">`#Label1`</ph> or <ph id="ph2">`#Label2`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Checked Operators</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Checked operators are displayed with the "#" symbol in front of the operator.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, the checked addition operator is displayed as <ph id="ph1">`#+`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/expression-trees/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Debugging in Visual Studio<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Create Custom Visualizers<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>