{"content":"---\ntitle: \"Value Types and Reference Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"reference data types\"\n  - \"reference types\"\n  - \"value types\"\n  - \"value data types\"\n  - \"types [Visual Basic]\"\n  - \"data types [Visual Basic], value types\"\n  - \"data types [Visual Basic], reference types\"\nms.assetid: fc82ce15-5a40-4c5c-a1e1-a556830e7391\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Value Types and Reference Types\nIn Visual Basic, data types are implemented based on their classification. The [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] data types can be classified according to whether a variable of a particular type stores its own data or a pointer to the data. If it stores its own data it is a *value type*; if it holds a pointer to data elsewhere in memory it is a *reference type*.  \n  \n## Value Types  \n A data type is a *value type* if it holds the data within its own memory allocation. Value types include the following:  \n  \n-   All numeric data types  \n  \n-   `Boolean`, `Char`, and `Date`  \n  \n-   All structures, even if their members are reference types  \n  \n-   Enumerations, since their underlying type is always `SByte`, `Short`, `Integer`, `Long`, `Byte`, `UShort`, `UInteger`, or `ULong`  \n  \n Every structure is a value type, even if it contains reference type members. For this reason, value types such as `Char` and `Integer` are implemented by .NET Framework structures.  \n  \n You can declare a value type by using the reserved keyword, for example, `Decimal`. You can also use the `New` keyword to initialize a value type. This is especially useful if the type has a constructor that takes parameters. An example of this is the <xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29> constructor, which builds a new `Decimal` value from the supplied parts.  \n  \n## Reference Types  \n A *reference type* contains a pointer to another memory location that holds the data. Reference types include the following:  \n  \n-   `String`  \n  \n-   All arrays, even if their elements are value types  \n  \n-   Class types, such as <xref:System.Windows.Forms.Form>  \n  \n-   Delegates  \n  \n A class is a *reference type*. For this reason, reference types such as `Object` and `String` are supported by [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] classes. Note that every array is a reference type, even if its members are value types.  \n  \n Since every reference type represents an underlying .NET Framework class, you must use the [New Operator](../../../../visual-basic/language-reference/operators/new-operator.md) keyword when you initialize it. The following statement initializes an array.  \n  \n```  \nDim totals() As Single = New Single(8) {}  \n```  \n  \n## Elements That Are Not Types  \n The following programming elements do not qualify as types, because you cannot specify any of them as a data type for a declared element:  \n  \n-   Namespaces  \n  \n-   Modules  \n  \n-   Events  \n  \n-   Properties and procedures  \n  \n-   Variables, constants, and fields  \n  \n## Working with the Object Data Type  \n You can assign either a reference type or a value type to a variable of the `Object` data type. An `Object` variable always holds a pointer to the data, never the data itself. However, if you assign a value type to an `Object` variable, it behaves as if it holds its own data. For more information, see [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md).  \n  \n You can find out whether an `Object` variable is acting as a reference type or a value type by passing it to the <xref:Microsoft.VisualBasic.Information.IsReference%2A> method in the <xref:Microsoft.VisualBasic.Information> class of the <xref:Microsoft.VisualBasic?displayProperty=fullName> namespace. <xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=fullName> returns `True` if the content of the `Object` variable represents a reference type.  \n  \n## See Also  \n [Nullable Value Types](../../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)   \n [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)   \n [Structure Statement](../../../../visual-basic/language-reference/statements/structure-statement.md)   \n [Efficient Use of Data Types](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)   \n [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)   \n [Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)","nodes":[{"pos":[12,60],"content":"Value Types and Reference Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Value Types and Reference Types | Microsoft Docs","pos":[0,48]}]},{"pos":[766,797],"content":"Value Types and Reference Types","linkify":"Value Types and Reference Types","nodes":[{"content":"Value Types and Reference Types","pos":[0,31]}]},{"content":"In Visual Basic, data types are implemented based on their classification.","pos":[798,872]},{"content":"The <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> data types can be classified according to whether a variable of a particular type stores its own data or a pointer to the data.","pos":[873,1097],"source":" The [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] data types can be classified according to whether a variable of a particular type stores its own data or a pointer to the data."},{"content":"If it stores its own data it is a <bpt id=\"p1\">*</bpt>value type<ept id=\"p1\">*</ept>; if it holds a pointer to data elsewhere in memory it is a <bpt id=\"p2\">*</bpt>reference type<ept id=\"p2\">*</ept>.","pos":[1098,1221],"source":" If it stores its own data it is a *value type*; if it holds a pointer to data elsewhere in memory it is a *reference type*."},{"pos":[1230,1241],"content":"Value Types","linkify":"Value Types","nodes":[{"content":"Value Types","pos":[0,11]}]},{"content":"A data type is a <bpt id=\"p1\">*</bpt>value type<ept id=\"p1\">*</ept> if it holds the data within its own memory allocation.","pos":[1245,1329],"source":"A data type is a *value type* if it holds the data within its own memory allocation."},{"content":"Value types include the following:","pos":[1330,1364]},{"content":"All numeric data types","pos":[1374,1396]},{"pos":[1406,1435],"content":"<ph id=\"ph1\">`Boolean`</ph>, <ph id=\"ph2\">`Char`</ph>, and <ph id=\"ph3\">`Date`</ph>","source":"`Boolean`, `Char`, and `Date`"},{"content":"All structures, even if their members are reference types","pos":[1445,1502]},{"pos":[1512,1641],"content":"Enumerations, since their underlying type is always <ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Short`</ph>, <ph id=\"ph3\">`Integer`</ph>, <ph id=\"ph4\">`Long`</ph>, <ph id=\"ph5\">`Byte`</ph>, <ph id=\"ph6\">`UShort`</ph>, <ph id=\"ph7\">`UInteger`</ph>, or <ph id=\"ph8\">`ULong`</ph>","source":"Enumerations, since their underlying type is always `SByte`, `Short`, `Integer`, `Long`, `Byte`, `UShort`, `UInteger`, or `ULong`"},{"content":"Every structure is a value type, even if it contains reference type members.","pos":[1648,1724]},{"content":"For this reason, value types such as <ph id=\"ph1\">`Char`</ph> and <ph id=\"ph2\">`Integer`</ph> are implemented by .NET Framework structures.","pos":[1725,1828],"source":" For this reason, value types such as `Char` and `Integer` are implemented by .NET Framework structures."},{"content":"You can declare a value type by using the reserved keyword, for example, <ph id=\"ph1\">`Decimal`</ph>.","pos":[1835,1918],"source":"You can declare a value type by using the reserved keyword, for example, `Decimal`."},{"content":"You can also use the <ph id=\"ph1\">`New`</ph> keyword to initialize a value type.","pos":[1919,1981],"source":" You can also use the `New` keyword to initialize a value type."},{"content":"This is especially useful if the type has a constructor that takes parameters.","pos":[1982,2060]},{"content":"An example of this is the <ph id=\"ph1\">&lt;xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29&gt;</ph> constructor, which builds a new <ph id=\"ph2\">`Decimal`</ph> value from the supplied parts.","pos":[2061,2268],"source":" An example of this is the <xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29> constructor, which builds a new `Decimal` value from the supplied parts."},{"pos":[2277,2292],"content":"Reference Types","linkify":"Reference Types","nodes":[{"content":"Reference Types","pos":[0,15]}]},{"content":"A <bpt id=\"p1\">*</bpt>reference type<ept id=\"p1\">*</ept> contains a pointer to another memory location that holds the data.","pos":[2296,2381],"source":"A *reference type* contains a pointer to another memory location that holds the data."},{"content":"Reference types include the following:","pos":[2382,2420]},{"content":"All arrays, even if their elements are value types","pos":[2448,2498]},{"content":"Class types, such as <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph>","pos":[2508,2561],"source":"Class types, such as <xref:System.Windows.Forms.Form>"},{"content":"Delegates","pos":[2571,2580]},{"content":"A class is a <bpt id=\"p1\">*</bpt>reference type<ept id=\"p1\">*</ept>.","pos":[2587,2617],"source":"A class is a *reference type*."},{"content":"For this reason, reference types such as <ph id=\"ph1\">`Object`</ph> and <ph id=\"ph2\">`String`</ph> are supported by <ph id=\"ph3\">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> classes.","pos":[2618,2793],"source":" For this reason, reference types such as `Object` and `String` are supported by [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] classes."},{"content":"Note that every array is a reference type, even if its members are value types.","pos":[2794,2873]},{"content":"Since every reference type represents an underlying .NET Framework class, you must use the <bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept> keyword when you initialize it.","pos":[2880,3088],"source":"Since every reference type represents an underlying .NET Framework class, you must use the [New Operator](../../../../visual-basic/language-reference/operators/new-operator.md) keyword when you initialize it."},{"content":"The following statement initializes an array.","pos":[3089,3134]},{"pos":[3202,3229],"content":"Elements That Are Not Types","linkify":"Elements That Are Not Types","nodes":[{"content":"Elements That Are Not Types","pos":[0,27]}]},{"content":"The following programming elements do not qualify as types, because you cannot specify any of them as a data type for a declared element:","pos":[3233,3370]},{"content":"Namespaces","pos":[3380,3390]},{"content":"Modules","pos":[3400,3407]},{"content":"Events","pos":[3417,3423]},{"content":"Properties and procedures","pos":[3433,3458]},{"content":"Variables, constants, and fields","pos":[3468,3500]},{"pos":[3509,3542],"content":"Working with the Object Data Type","linkify":"Working with the Object Data Type","nodes":[{"content":"Working with the Object Data Type","pos":[0,33]}]},{"content":"You can assign either a reference type or a value type to a variable of the <ph id=\"ph1\">`Object`</ph> data type.","pos":[3546,3641],"source":"You can assign either a reference type or a value type to a variable of the `Object` data type."},{"content":"An <ph id=\"ph1\">`Object`</ph> variable always holds a pointer to the data, never the data itself.","pos":[3642,3721],"source":" An `Object` variable always holds a pointer to the data, never the data itself."},{"content":"However, if you assign a value type to an <ph id=\"ph1\">`Object`</ph> variable, it behaves as if it holds its own data.","pos":[3722,3822],"source":" However, if you assign a value type to an `Object` variable, it behaves as if it holds its own data."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>.","pos":[3823,3944],"source":" For more information, see [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)."},{"content":"You can find out whether an <ph id=\"ph1\">`Object`</ph> variable is acting as a reference type or a value type by passing it to the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Information.IsReference%2A&gt;</ph> method in the <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Information&gt;</ph> class of the <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic?displayProperty=fullName&gt;</ph> namespace.","pos":[3951,4252],"source":"You can find out whether an `Object` variable is acting as a reference type or a value type by passing it to the <xref:Microsoft.VisualBasic.Information.IsReference%2A> method in the <xref:Microsoft.VisualBasic.Information> class of the <xref:Microsoft.VisualBasic?displayProperty=fullName> namespace."},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=fullName&gt;</ph> returns <ph id=\"ph2\">`True`</ph> if the content of the <ph id=\"ph3\">`Object`</ph> variable represents a reference type.","pos":[4253,4417],"source":"<xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=fullName> returns `True` if the content of the `Object` variable represents a reference type."},{"pos":[4426,4434],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Nullable Value Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4438,4558],"source":"[Nullable Value Types](../../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[4561,4690],"source":" [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Structure Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/structure-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[4693,4795],"source":" [Structure Statement](../../../../visual-basic/language-reference/statements/structure-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4798,4933],"source":" [Efficient Use of Data Types](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4936,5032],"source":" [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept>","pos":[5035,5130],"source":" [Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)"}]}