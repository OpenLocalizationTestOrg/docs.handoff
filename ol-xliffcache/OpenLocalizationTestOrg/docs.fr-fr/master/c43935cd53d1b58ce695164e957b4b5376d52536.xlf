<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-retrieval-and-cud-operations-in-n-tier-applications.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c43935cd53d1b58ce695164e957b4b5376d52536</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\data-retrieval-and-cud-operations-in-n-tier-applications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66939dc4a554e29b4b8f14030c927de26c7d6b2b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b6962cfe37fb0f3d0c1e570e5cb87a7b8609c57</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you serialize entity objects such as Customers or Orders to a client over a network, those entities are detached from their data context.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The data context no longer tracks their changes or their associations with other objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This is not an issue as long as the clients are only reading the data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is also relatively simple to enable clients to add new rows to a database.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, if your application requires that clients be able to update or delete data, then you must attach the entities to a new data context before you call <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In addition, if you are using an optimistic concurrency check with original values, then you will also need a way to provide the database both the original entity and the entity as modified.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Attach`</ph> methods are provided to enable you to put entities into a new data context after they have been detached.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Even if you are serializing proxy objects in place of the <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> entities, you still have to construct an entity on the data access layer (DAL), and attach it to a new <ph id="ph2">&lt;xref:System.Data.Linq.DataContext?displayProperty=nameWithType&gt;</ph>, in order to submit the data to the database.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> is completely indifferent about how entities are serialized.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph> and SQLMetal tools to generate classes that are serializable by using Windows Communication Foundation (WCF), see <bpt id="p1">[</bpt>How to: Make Entities Serializable<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-make-entities-serializable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Only call the <ph id="ph1">`Attach`</ph> methods on new or deserialized entities.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The only way for an entity to be detached from its original data context is for it to be serialized.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you try to attach an undetached entity to a new data context, and that entity still has deferred loaders from its previous data context, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> will thrown an exception.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An entity with deferred loaders from two different data contexts could cause unwanted results when you perform insert, update, and delete operations on that entity.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about deferred loaders, see <bpt id="p1">[</bpt>Deferred versus Immediate Loading<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/deferred-versus-immediate-loading.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieving Data</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Client Method Call</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following examples show a sample method call to the DAL from a Windows Forms client.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this example, the DAL is implemented as a Windows Service Library:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Middle Tier Implementation</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example shows an implementation of the interface method on the middle tier.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following are the two main points to note:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is declared at method scope.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The method returns an <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> collection of the actual results.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The serializer will execute the query to send the results back to the client/presentation tier.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To access the query results locally on the middle tier, you can force execution by calling <ph id="ph1">`ToList`</ph> or <ph id="ph2">`ToArray`</ph> on the query variable.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can then return that list or array as an <ph id="ph1">`IEnumerable`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An instance of a data context should have a lifetime of one "unit of work."</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In a loosely-coupled environment, a unit of work is typically small, perhaps one optimistic transaction, including a single call to <ph id="ph1">`SubmitChanges`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Therefore, the data context is created and disposed at method scope.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the unit of work includes calls to business rules logic, then generally you will want to keep the <ph id="ph1">`DataContext`</ph> instance for that whole operation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In any case, <ph id="ph1">`DataContext`</ph> instances are not intended to be kept alive for long periods of time across arbitrary numbers of transactions.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method will return Product objects but not the collection of Order_Detail objects that are associated with each Product.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> object to change this default behavior.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Control How Much Related Data Is Retrieved<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-control-how-much-related-data-is-retrieved.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Inserting Data</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To insert a new object, the presentation tier just calls the relevant method on the middle tier interface, and passes in the new object to insert.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In some cases, it may be more efficient for the client to pass in only some values and have the middle tier construct the full object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Middle Tier Implementation</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>On the middle tier, a new <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is created, the object is attached to the <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> by using the <ph id="ph3">&lt;xref:System.Data.Linq.Table%601.InsertOnSubmit%2A&gt;</ph> method, and the object is inserted when <ph id="ph4">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Exceptions, callbacks, and error conditions can be handled just as in any other Web service scenario.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Deleting Data</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To delete an existing object from the database, the presentation tier calls the relevant method on the middle tier interface, and passes in its copy that includes original values of the object to be deleted.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Delete operations involve optimistic concurrency checks, and the object to be deleted must first be attached to the new data context.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`Boolean`</ph> parameter is set to <ph id="ph2">`false`</ph> to indicate that the object does not have a timestamp (RowVersion).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If your database table does generate timestamps for each record, then concurrency checks are much simpler, especially for the client.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Just pass in either the original or modified object and set the <ph id="ph1">`Boolean`</ph> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In any case, on the middle tier it is typically necessary to catch the <ph id="ph1">&lt;xref:System.Data.Linq.ChangeConflictException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information about how to handle optimistic concurrency conflicts, see <bpt id="p1">[</bpt>Optimistic Concurrency: Overview<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/optimistic-concurrency-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When deleting entities that have foreign key constraints on associated tables, you must first delete all the objects in its <ph id="ph1">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> collections.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Updating Data</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> supports updates in these scenarios involving optimistic concurrency:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Optimistic concurrency based on timestamps or RowVersion numbers.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Optimistic concurrency based on original values of a subset of entity properties.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Optimistic concurrency based on the complete original and modified entities.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can also perform updates or deletes on an entity together with its relations, for example a Customer and a collection of its associated Order objects.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When you make modifications on the client to a graph of entity objects and their child (<ph id="ph1">`EntitySet`</ph>) collections, and the optimistic concurrency checks require original values, the client must provide those original values for each entity and <ph id="ph2">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you want to enable clients to make a set of related updates, deletes, and insertions in a single method call, you must provide the client a way to indicate what type of operation to perform on each entity.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>On the middle tier, you then must call the appropriate <ph id="ph1">&lt;xref:System.Data.Linq.ITable.Attach%2A&gt;</ph> method and then <ph id="ph2">&lt;xref:System.Data.Linq.ITable.InsertOnSubmit%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.Linq.ITable.DeleteAllOnSubmit%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Data.Linq.Table%601.InsertOnSubmit%2A&gt;</ph> (without <ph id="ph5">`Attach`</ph>, for insertions) for each entity before you call <ph id="ph6">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Do not retrieve data from the database as a way to obtain original values before you try updates.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information about optimistic concurrency, see <bpt id="p1">[</bpt>Optimistic Concurrency: Overview<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/optimistic-concurrency-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For detailed information about resolving optimistic concurrency change conflicts, see <bpt id="p1">[</bpt>How to: Manage Change Conflicts<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-manage-change-conflicts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate each scenario:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Optimistic concurrency with timestamps</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>With Subset of Original Values</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this approach, the client returns the complete serialized object, together with the values to be modified.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>With Complete Entities</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To update a collection, call <ph id="ph1">&lt;xref:System.Data.Linq.ITable.AttachAll%2A&gt;</ph> instead of <ph id="ph2">`Attach`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Expected Entity Members</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>As stated previously, only certain members of the entity object are required to be set before you call the <ph id="ph1">`Attach`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Entity members that are required to be set must fulfill the following criteria:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Be part of the entity’s identity.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Be expected to be modified.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Be a timestamp or have its <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A&gt;</ph> attribute set to something besides <ph id="ph2">`Never`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If a table uses a timestamp or version number for an optimistic concurrency check, you must set those members before you call <ph id="ph1">&lt;xref:System.Data.Linq.ITable.Attach%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A member is dedicated for optimistic concurrency checking when the <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute.IsVersion%2A&gt;</ph> property is set to true on that Column attribute.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Any requested updates will be submitted only if the version number or timestamp values are the same on the database.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A member is also used in the optimistic concurrency check as long as the member does not have <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A&gt;</ph> set to <ph id="ph2">`Never`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`Always`</ph> if no other value is specified.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If any one of these required members is missing, a <ph id="ph1">&lt;xref:System.Data.Linq.ChangeConflictException&gt;</ph> is thrown during <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> ("Row not found or changed").</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>State</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>After an entity object is attached to the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> instance, the object is considered to be in the <ph id="ph2">`PossiblyModified`</ph> state.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>There are three ways to force an attached object to be considered <ph id="ph1">`Modified`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Attach it as unmodified, and then directly modify the fields.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Attach it with the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601.Attach%2A&gt;</ph> overload that takes current and original object instances.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This supplies the change tracker with old and new values so that it will automatically know which fields have changed.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Attach it with the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601.Attach%2A&gt;</ph> overload that takes a second Boolean parameter (set to true).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This will tell the change tracker to consider the object modified without having to supply any original values.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In this approach, the object must have a version/timestamp field.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object States and Change-Tracking<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/object-states-and-change-tracking.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If an entity object already occurs in the ID Cache with the same identity as the object being attached, a <ph id="ph1">&lt;xref:System.Data.Linq.DuplicateKeyException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When you attach with an <ph id="ph1">`IEnumerable`</ph> set of objects, a <ph id="ph2">&lt;xref:System.Data.Linq.DuplicateKeyException&gt;</ph> is thrown when an already existing key is present.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remaining objects are not attached.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>N-Tier and Remote Applications with LINQ to SQL<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/n-tier-and-remote-applications-with-linq-to-sql.md)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Background Information<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>