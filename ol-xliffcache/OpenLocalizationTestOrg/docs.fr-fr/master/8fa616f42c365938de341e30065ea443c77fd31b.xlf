<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="double-buffered-graphics.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fa616f42c365938de341e30065ea443c77fd31b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\advanced\double-buffered-graphics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec9a3ac8ba3cbcaf6e225301fa94af5671020f16</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8f92f8ba984e4fec734102627b1c8b8aac8f861</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Double Buffered Graphics | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Double Buffered Graphics</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Flicker is a common problem when programming graphics.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Graphics operations that require multiple complex painting operations can cause the rendered images to appear to flicker or have an otherwise unacceptable appearance.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To address these problems, the .NET Framework provides access to double buffering.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Double buffering uses a memory buffer to address the flicker problems associated with multiple paint operations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When double buffering is enabled, all paint operations are first rendered to a memory buffer instead of the drawing surface on the screen.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>After all paint operations are completed, the memory buffer is copied directly to the drawing surface associated with it.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because only one graphics operation is performed on the screen, the image flickering associated with complex painting operations is eliminated.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Default Double Buffering</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The easiest way to use double buffering in your applications is to use the default double buffering for forms and controls that is provided by the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can enable default double buffering for your Windows Forms and authored Windows controls by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleBuffered%2A&gt;</ph> property to <ph id="ph2">`true`</ph> or by using the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Reduce Graphics Flicker with Double Buffering for Forms and Controls<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-reduce-graphics-flicker-with-double-buffering-for-forms-and-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Manually Managing Buffered Graphics</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more advanced double buffering scenarios, such as animation or advanced memory management, you can use the .NET Framework classes to implement your own double-buffering logic.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The class responsible for allocating and managing individual graphics buffers is the <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Every application domain has its own default <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> instance that manages all of the default double buffering for that application.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In most cases there will be only one application domain per application, so there is generally one default <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> per application.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Default <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> instances are managed by the <ph id="ph2">&lt;xref:System.Drawing.BufferedGraphicsManager&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can retrieve a reference to the default <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> instance by calling the <ph id="ph2">&lt;xref:System.Drawing.BufferedGraphicsManager.Current%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also create a dedicated <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> instance, which can improve performance for graphically intensive applications.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For information on how to create a <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> instance, see <bpt id="p1">[</bpt>How to: Manually Manage Buffered Graphics<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Manually Displaying Buffered Graphics</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use an instance of the <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> class to create graphics buffers by calling the <ph id="ph2">&lt;xref:System.Drawing.BufferedGraphicsContext.Allocate%2A?displayProperty=fullName&gt;</ph>, which returns an instance of the <ph id="ph3">&lt;xref:System.Drawing.BufferedGraphics&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphics&gt;</ph> object manages a memory buffer that is associated with a rendering surface, such as a form or control.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>After it is instantiated, the <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphics&gt;</ph> class manages rendering to an in-memory graphics buffer.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can render graphics to the memory buffer through the <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphics.Graphics%2A&gt;</ph>, which exposes a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object that directly represents the memory buffer.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can paint to this <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object just as you would to a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object that represents a drawing surface.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>After all the graphics have been drawn to the buffer, you can use the <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphics.Render%2A?displayProperty=fullName&gt;</ph> to copy the contents of the buffer to the drawing surface on the screen.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information on using the <ph id="ph1">&lt;xref:System.Drawing.BufferedGraphics&gt;</ph> class, see <bpt id="p1">[</bpt>Manually Rendering Buffered Graphics<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-manually-render-buffered-graphics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information on rendering graphics, see <bpt id="p1">[</bpt>Graphics and Drawing in Windows Forms<ept id="p1">](../../../../docs/framework/winforms/advanced/graphics-and-drawing-in-windows-forms.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Manually Render Buffered Graphics<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-manually-render-buffered-graphics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Reduce Graphics Flicker with Double Buffering for Forms and Controls<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-reduce-graphics-flicker-with-double-buffering-for-forms-and-controls.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Manually Manage Buffered Graphics<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Graphics and Drawing in Windows Forms<ept id="p1">](../../../../docs/framework/winforms/advanced/graphics-and-drawing-in-windows-forms.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>