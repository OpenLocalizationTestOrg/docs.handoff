{"content":"---\ntitle: \"When to Use an Enumeration (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"enumerations [Visual Basic]\"\nms.assetid: e6e47b5b-3ed9-452d-a481-9c3fed88519a\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# When to Use an Enumeration (Visual Basic)\nEnumerations offer an easy way to work with sets of related constants. An enumeration, or `Enum`, is a symbolic name for a set of values. Enumerations are treated as data types, and you can use them to create sets of constants for use with variables and properties.  \n  \n## When to Use an Enumeration  \n Whenever a procedure accepts a limited set of variables, consider using an enumeration. Enumerations make for clearer and more readable code, particularly when meaningful names are used.  \n  \n The benefits of using enumerations include:  \n  \n-   Reduces errors caused by transposing or mistyping numbers.  \n  \n-   Makes it easy to change values in the future.  \n  \n-   Makes code easier to read, which means it is less likely that errors will creep into it.  \n  \n-   Ensures forward compatibility. With enumerations, your code is less likely to fail if in the future someone changes the values corresponding to the member names.  \n  \n## Naming Enumerations  \n Use a naming convention for enumeration members. When [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] encounters an enumeration member name, an exception may be thrown if other referenced type libraries contain the same name. Use a unique prefix that identifies the values from your application or component.  \n  \n When referring to a member of an enumeration, you must qualify the member name with the enumeration name or else use the `Imports` statement. For more information, see [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md).  \n  \n## Predefined Enumerations  \n [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides a number of predefined enumerations, such as `FirstDayOfWeek` and `MsgBoxResul`t, to facilitate your code. For a list of these see [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md).  \n  \n## See Also  \n [How to: Declare an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)   \n [How to: Refer to an Enumeration Member](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)   \n [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)   \n [How to: Iterate Through An Enumeration in Visual Basic](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)   \n [How to: Determine the String Associated with an Enumeration Value](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)   \n [Enum Statement](../../../../visual-basic/language-reference/statements/enum-statement.md)   \n [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)","nodes":[{"pos":[12,70],"content":"When to Use an Enumeration (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"When to Use an Enumeration (Visual Basic) | Microsoft Docs","pos":[0,58]}]},{"pos":[599,640],"content":"When to Use an Enumeration (Visual Basic)","linkify":"When to Use an Enumeration (Visual Basic)","nodes":[{"content":"When to Use an Enumeration (Visual Basic)","pos":[0,41]}]},{"content":"Enumerations offer an easy way to work with sets of related constants.","pos":[641,711]},{"content":"An enumeration, or <ph id=\"ph1\">`Enum`</ph>, is a symbolic name for a set of values.","pos":[712,778],"source":" An enumeration, or `Enum`, is a symbolic name for a set of values."},{"content":"Enumerations are treated as data types, and you can use them to create sets of constants for use with variables and properties.","pos":[779,906]},{"pos":[915,941],"content":"When to Use an Enumeration","linkify":"When to Use an Enumeration","nodes":[{"content":"When to Use an Enumeration","pos":[0,26]}]},{"content":"Whenever a procedure accepts a limited set of variables, consider using an enumeration.","pos":[945,1032]},{"content":"Enumerations make for clearer and more readable code, particularly when meaningful names are used.","pos":[1033,1131]},{"content":"The benefits of using enumerations include:","pos":[1138,1181]},{"content":"Reduces errors caused by transposing or mistyping numbers.","pos":[1191,1249]},{"content":"Makes it easy to change values in the future.","pos":[1259,1304]},{"content":"Makes code easier to read, which means it is less likely that errors will creep into it.","pos":[1314,1402]},{"content":"Ensures forward compatibility.","pos":[1412,1442]},{"content":"With enumerations, your code is less likely to fail if in the future someone changes the values corresponding to the member names.","pos":[1443,1573]},{"pos":[1582,1601],"content":"Naming Enumerations","linkify":"Naming Enumerations","nodes":[{"content":"Naming Enumerations","pos":[0,19]}]},{"content":"Use a naming convention for enumeration members.","pos":[1605,1653]},{"content":"When <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> encounters an enumeration member name, an exception may be thrown if other referenced type libraries contain the same name.","pos":[1654,1875],"source":" When [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] encounters an enumeration member name, an exception may be thrown if other referenced type libraries contain the same name."},{"content":"Use a unique prefix that identifies the values from your application or component.","pos":[1876,1958]},{"content":"When referring to a member of an enumeration, you must qualify the member name with the enumeration name or else use the <ph id=\"ph1\">`Imports`</ph> statement.","pos":[1965,2106],"source":"When referring to a member of an enumeration, you must qualify the member name with the enumeration name or else use the `Imports` statement."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Enumerations and Name Qualification<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept>.","pos":[2107,2288],"source":" For more information, see [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)."},{"pos":[2297,2320],"content":"Predefined Enumerations","linkify":"Predefined Enumerations","nodes":[{"content":"Predefined Enumerations","pos":[0,23]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> provides a number of predefined enumerations, such as <ph id=\"ph2\">`FirstDayOfWeek`</ph> and <ph id=\"ph3\">`MsgBoxResul`</ph>t, to facilitate your code.","pos":[2324,2532],"source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides a number of predefined enumerations, such as `FirstDayOfWeek` and `MsgBoxResul`t, to facilitate your code."},{"content":"For a list of these see <bpt id=\"p1\">[</bpt>Constants and Enumerations<ept id=\"p1\">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept>.","pos":[2533,2661],"source":" For a list of these see [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)."},{"pos":[2670,2678],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Declare an Enumeration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)</ept><ph id=\"ph1\"> </ph>","pos":[2682,2824],"source":"[How to: Declare an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Refer to an Enumeration Member<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)</ept><ph id=\"ph1\"> </ph>","pos":[2827,2988],"source":" [How to: Refer to an Enumeration Member](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Enumerations and Name Qualification<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept><ph id=\"ph1\"> </ph>","pos":[2991,3147],"source":" [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Iterate Through An Enumeration in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)</ept><ph id=\"ph1\"> </ph>","pos":[3150,3327],"source":" [How to: Iterate Through An Enumeration in Visual Basic](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Determine the String Associated with an Enumeration Value<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)</ept><ph id=\"ph1\"> </ph>","pos":[3330,3545],"source":" [How to: Determine the String Associated with an Enumeration Value](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Enum Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/enum-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3548,3640],"source":" [Enum Statement](../../../../visual-basic/language-reference/statements/enum-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Constants and Enumerations<ept id=\"p1\">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept>","pos":[3643,3747],"source":" [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)"}]}