{"content":"---\ntitle: \"Channel Factory and Caching | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 954f030e-091c-4c0e-a7a2-10f9a6b1f529\ncaps.latest.revision: 3\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Channel Factory and Caching\nWCF client applications use the <xref:System.ServiceModel.ChannelFactory%601> class to create a communication channel with a WCF service.  Creating <xref:System.ServiceModel.ChannelFactory%601> instances incurs some overhead because it involves the following operations:  \n  \n-   Constructing the <xref:System.ServiceModel.Description.ContractDescription> tree  \n  \n-   Reflecting all of the required CLR types  \n  \n-   Constructing the channel stack  \n  \n-   Disposing of resources  \n  \n To help minimize this overhead, WCF can cache channel factories when you are using a WCF client proxy.  \n  \n> [!TIP]\n>  You have direct control over channel factory creation when you use the <xref:System.ServiceModel.ChannelFactory%601> class directly.  \n  \n WCF client proxies generated with [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) are derived from <xref:System.ServiceModel.ClientBase%601>. <xref:System.ServiceModel.ClientBase%601> defines a static <xref:System.ServiceModel.ClientBase%601.CacheSetting%2A> property that defines channel factory caching behavior. Cache settings are made for a specific type. For example, setting  `ClientBase<ITest>.CacheSettings` to one of the values defined below will affect only those proxy/ClientBase of type `ITest`. The cache setting for a particular <xref:System.ServiceModel.ClientBase%601> is immutable as soon as the first proxy/ClientBase instance is created.  \n  \n## Specifying Caching Behavior  \n Caching behavior is specified by setting the <xref:System.ServiceModel.ClientBase%601.CacheSetting> property to one of the following values.  \n  \n|Cache Setting Value|Description|  \n|-------------------------|-----------------|  \n|<xref:System.ServiceModel.CacheSetting.AlwaysOn>|All instances of <xref:System.ServiceModel.ClientBase%601> within the app-domain can participate in caching. The developer has determined that there are no adverse security implications to caching. Caching will not be turned off even if \"security-sensitive\" properties on <xref:System.ServiceModel.ClientBase%601> are accessed. The \"security-sensitive\" properties of <xref:System.ServiceModel.ClientBase%601> are <xref:System.ServiceModel.ClientBase%601.ClientCredentials%2A>, <xref:System.ServiceModel.ClientBase%601.Endpoint%2A> and <xref:System.ServiceModel.ClientBase%601.ChannelFactory%2A>.|  \n|<xref:System.ServiceModel.CacheSetting.Default>|Only instances of <xref:System.ServiceModel.ClientBase%601> created from endpoints defined in configuration files participate in caching within the app-domain. Any instances of <xref:System.ServiceModel.ClientBase%601> created programmatically within that app-domain will not participate in caching. Also, caching will be disabled for an instance of <xref:System.ServiceModel.ClientBase%601> once any of its \"security-sensitive\" properties is accessed.|  \n|<xref:System.ServiceModel.CacheSetting.AlwaysOff>|Caching is turned off for all instances of <xref:System.ServiceModel.ClientBase%601> of a particular type within the app-domain in question.|  \n  \n The following code snippets illustrate how to use the <xref:System.ServiceModel.ClientBase%601.CacheSetting%2A> property.  \n  \n```  \nclass Program   \n{   \n   static void Main(string[] args)   \n   {   \n      ClientBase<ITest>.CacheSettings = CacheSettings.AlwaysOn;   \n      foreach (string msg in messages)   \n      {   \n         using (TestClient proxy = new TestClient (new BasicHttpBinding(), new EndpointAddress(address)))   \n         {   \n            // ...  \n            proxy.Test(msg);   \n            // ...  \n         }   \n      }   \n   }   \n}  \n// Generated by SvcUtil.exe     \npublic partial class TestClient : System.ServiceModel.ClientBase, ITest { }  \n  \n```  \n  \n In the above code, all instances of `TestClient` will use the same channel factory.  \n  \n```  \nclass Program   \n{   \n   static void Main(string[] args)   \n   {   \n      ClientBase.CacheSettings = CacheSettings.Default;   \n      int i = 1;   \n      foreach (string msg in messages)   \n      {   \n         using (TestClient proxy = new TestClient (\"MyEndpoint\", new EndpointAddress(address)))   \n         {   \n            if (i == 4)   \n            {   \n               ServiceEndpoint endpoint = proxy.Endpoint;   \n               ... // use endpoint in some way   \n            }   \n            proxy.Test(msg);   \n         }   \n         i++;   \n   }   \n}   \n  \n// Generated by SvcUtil.exe     \npublic partial class TestClient : System.ServiceModel.ClientBase, ITest {}  \n```  \n  \n In the example above, all instances of `TestClient` would use the same channel factory except instance #4. Instance #4 would use a channel factory that is created specifically for its use. This setting would work for scenarios where a particular endpoint needs different security settings from the other endpoints of the same channel factory type (in this case `ITest`).  \n  \n```  \nclass Program   \n{   \n   static void Main(string[] args)   \n   {   \n      ClientBase.CacheSettings = CacheSettings.AlwaysOff;   \n      foreach (string msg in messages)   \n      {   \n         using (TestClient proxy = new TestClient (\"MyEndpoint\", new EndpointAddress(address)))   \n         {   \n            proxy.Test(msg);   \n         }           \n      }   \n   }  \n}  \n  \n// Generated by SvcUtil.exe   \npublic partial class TestClient : System.ServiceModel.ClientBase, ITest {}  \n```  \n  \n In the example above, all instances of `TestClient` would use different channel factories. This is useful when each endpoint has different security requirements and it makes no sense to cache.  \n  \n## See Also  \n <xref:System.ServiceModel.ClientBase%601>   \n [Building Clients](../../../../docs/framework/wcf/building-clients.md)   \n [Clients](../../../../docs/framework/wcf/feature-details/clients.md)   \n [Accessing Services Using a WCF Client](../../../../docs/framework/wcf/accessing-services-using-a-wcf-client.md)   \n [How to: Use the ChannelFactory](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md)","nodes":[{"pos":[4,347],"nodes":[{"content":"Channel Factory and Caching | Microsoft Docs","nodes":[{"pos":[0,44],"content":"Channel Factory and Caching | Microsoft Docs","nodes":[{"content":"Channel Factory and Caching | Microsoft Docs","pos":[0,44]}]}],"pos":[6,53],"yaml":true}],"content":"title: \"Channel Factory and Caching | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 954f030e-091c-4c0e-a7a2-10f9a6b1f529\ncaps.latest.revision: 3\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[354,381],"content":"Channel Factory and Caching","linkify":"Channel Factory and Caching","nodes":[{"content":"Channel Factory and Caching","pos":[0,27]}]},{"content":"WCF client applications use the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> class to create a communication channel with a WCF service.","pos":[382,519],"source":"WCF client applications use the <xref:System.ServiceModel.ChannelFactory%601> class to create a communication channel with a WCF service."},{"content":"Creating <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> instances incurs some overhead because it involves the following operations:","pos":[521,652],"source":"  Creating <xref:System.ServiceModel.ChannelFactory%601> instances incurs some overhead because it involves the following operations:"},{"content":"Constructing the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ContractDescription&gt;</ph> tree","pos":[662,742],"source":"Constructing the <xref:System.ServiceModel.Description.ContractDescription> tree"},{"content":"Reflecting all of the required CLR types","pos":[752,792]},{"content":"Constructing the channel stack","pos":[802,832]},{"content":"Disposing of resources","pos":[842,864]},{"content":"To help minimize this overhead, WCF can cache channel factories when you are using a WCF client proxy.","pos":[871,973]},{"pos":[981,1123],"content":"[!TIP]\n You have direct control over channel factory creation when you use the <xref:System.ServiceModel.ChannelFactory%601> class directly.","leadings":["","> "],"nodes":[{"content":"You have direct control over channel factory creation when you use the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> class directly.","pos":[8,140],"source":"You have direct control over channel factory creation when you use the <xref:System.ServiceModel.ChannelFactory%601> class directly."}]},{"content":"WCF client proxies generated with <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> are derived from <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph>.","pos":[1130,1356],"source":"WCF client proxies generated with [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) are derived from <xref:System.ServiceModel.ClientBase%601>."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> defines a static <ph id=\"ph2\">&lt;xref:System.ServiceModel.ClientBase%601.CacheSetting%2A&gt;</ph> property that defines channel factory caching behavior.","pos":[1357,1529],"source":" <xref:System.ServiceModel.ClientBase%601> defines a static <xref:System.ServiceModel.ClientBase%601.CacheSetting%2A> property that defines channel factory caching behavior."},{"content":"Cache settings are made for a specific type.","pos":[1530,1574]},{"content":"For example, setting  <ph id=\"ph1\">`ClientBase&lt;ITest&gt;.CacheSettings`</ph> to one of the values defined below will affect only those proxy/ClientBase of type <ph id=\"ph2\">`ITest`</ph>.","pos":[1575,1722],"source":" For example, setting  `ClientBase<ITest>.CacheSettings` to one of the values defined below will affect only those proxy/ClientBase of type `ITest`."},{"content":"The cache setting for a particular <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> is immutable as soon as the first proxy/ClientBase instance is created.","pos":[1723,1871],"source":" The cache setting for a particular <xref:System.ServiceModel.ClientBase%601> is immutable as soon as the first proxy/ClientBase instance is created."},{"pos":[1880,1907],"content":"Specifying Caching Behavior","linkify":"Specifying Caching Behavior","nodes":[{"content":"Specifying Caching Behavior","pos":[0,27]}]},{"content":"Caching behavior is specified by setting the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601.CacheSetting&gt;</ph> property to one of the following values.","pos":[1911,2051],"source":"Caching behavior is specified by setting the <xref:System.ServiceModel.ClientBase%601.CacheSetting> property to one of the following values."},{"content":"Cache Setting Value","pos":[2058,2077]},{"content":"Description","pos":[2078,2089]},{"content":"All instances of <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> within the app-domain can participate in caching.","pos":[2191,2299],"source":"All instances of <xref:System.ServiceModel.ClientBase%601> within the app-domain can participate in caching."},{"content":"The developer has determined that there are no adverse security implications to caching.","pos":[2300,2388]},{"content":"Caching will not be turned off even if \"security-sensitive\" properties on <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> are accessed.","pos":[2389,2518],"source":" Caching will not be turned off even if \"security-sensitive\" properties on <xref:System.ServiceModel.ClientBase%601> are accessed."},{"content":"The \"security-sensitive\" properties of <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> are <ph id=\"ph2\">&lt;xref:System.ServiceModel.ClientBase%601.ClientCredentials%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.ServiceModel.ClientBase%601.Endpoint%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceModel.ClientBase%601.ChannelFactory%2A&gt;</ph>.","pos":[2519,2786],"source":" The \"security-sensitive\" properties of <xref:System.ServiceModel.ClientBase%601> are <xref:System.ServiceModel.ClientBase%601.ClientCredentials%2A>, <xref:System.ServiceModel.ClientBase%601.Endpoint%2A> and <xref:System.ServiceModel.ClientBase%601.ChannelFactory%2A>."},{"content":"Only instances of <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> created from endpoints defined in configuration files participate in caching within the app-domain.","pos":[2839,2998],"source":"Only instances of <xref:System.ServiceModel.ClientBase%601> created from endpoints defined in configuration files participate in caching within the app-domain."},{"content":"Any instances of <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> created programmatically within that app-domain will not participate in caching.","pos":[2999,3138],"source":" Any instances of <xref:System.ServiceModel.ClientBase%601> created programmatically within that app-domain will not participate in caching."},{"content":"Also, caching will be disabled for an instance of <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> once any of its \"security-sensitive\" properties is accessed.","pos":[3139,3291],"source":" Also, caching will be disabled for an instance of <xref:System.ServiceModel.ClientBase%601> once any of its \"security-sensitive\" properties is accessed."},{"content":"Caching is turned off for all instances of <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> of a particular type within the app-domain in question.","pos":[3346,3486],"source":"Caching is turned off for all instances of <xref:System.ServiceModel.ClientBase%601> of a particular type within the app-domain in question."},{"content":"The following code snippets illustrate how to use the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601.CacheSetting%2A&gt;</ph> property.","pos":[3494,3615],"source":"The following code snippets illustrate how to use the <xref:System.ServiceModel.ClientBase%601.CacheSetting%2A> property."},{"pos":[4173,4256],"content":"In the above code, all instances of <ph id=\"ph1\">`TestClient`</ph> will use the same channel factory.","source":"In the above code, all instances of `TestClient` will use the same channel factory."},{"content":"In the example above, all instances of <ph id=\"ph1\">`TestClient`</ph> would use the same channel factory except instance #4.","pos":[4952,5058],"source":"In the example above, all instances of `TestClient` would use the same channel factory except instance #4."},{"content":"Instance #4 would use a channel factory that is created specifically for its use.","pos":[5059,5140]},{"content":"This setting would work for scenarios where a particular endpoint needs different security settings from the other endpoints of the same channel factory type (in this case <ph id=\"ph1\">`ITest`</ph>).","pos":[5141,5322],"source":" This setting would work for scenarios where a particular endpoint needs different security settings from the other endpoints of the same channel factory type (in this case `ITest`)."},{"content":"In the example above, all instances of <ph id=\"ph1\">`TestClient`</ph> would use different channel factories.","pos":[5826,5916],"source":"In the example above, all instances of `TestClient` would use different channel factories."},{"content":"This is useful when each endpoint has different security requirements and it makes no sense to cache.","pos":[5917,6018]},{"pos":[6027,6035],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph>","pos":[6039,6080],"source":"<xref:System.ServiceModel.ClientBase%601> "},{"content":"<bpt id=\"p1\">[</bpt>Building Clients<ept id=\"p1\">](../../../../docs/framework/wcf/building-clients.md)</ept><ph id=\"ph1\"> </ph>","pos":[6085,6156],"source":"[Building Clients](../../../../docs/framework/wcf/building-clients.md) "},{"content":"<bpt id=\"p1\">[</bpt>Clients<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/clients.md)</ept><ph id=\"ph1\"> </ph>","pos":[6160,6229],"source":"[Clients](../../../../docs/framework/wcf/feature-details/clients.md) "},{"content":"<bpt id=\"p1\">[</bpt>Accessing Services Using a WCF Client<ept id=\"p1\">](../../../../docs/framework/wcf/accessing-services-using-a-wcf-client.md)</ept><ph id=\"ph1\"> </ph>","pos":[6233,6346],"source":"[Accessing Services Using a WCF Client](../../../../docs/framework/wcf/accessing-services-using-a-wcf-client.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Use the ChannelFactory<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md)</ept>","pos":[6350,6463],"source":"[How to: Use the ChannelFactory](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md)"}]}