{"content":"---\ntitle: \"Custom Message Filter | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 98dd0af8-fce6-4255-ac32-42eb547eea67\ncaps.latest.revision: 14\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Custom Message Filter\nThis sample demonstrates how to replace the message filters that [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] uses to dispatch messages to endpoints.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n When the first message on a channel arrives at the server, the server must determine which (if any) of the endpoints associated with that URI should receive the message. This process is controlled by the <xref:System.ServiceModel.Dispatcher.MessageFilter> objects attached to the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher>.  \n  \n Each endpoint of a service has a single <xref:System.ServiceModel.Dispatcher.EndpointDispatcher>. The <xref:System.ServiceModel.Dispatcher.EndpointDispatcher> has both an <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A> and a <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A>. The union of these two filters is the message filter used for that endpoint.  \n  \n By default, the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A> for an endpoint matches any message that is addressed to an address that matches the service endpoint's <xref:System.ServiceModel.EndpointAddress>. By default, the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A> for an endpoint inspects the action of the incoming message and matches any message with an action that corresponds to one of the actions of the service endpoint contract's operations (only `IsInitiating`=`true` actions are considered). As a result, by default, the filter for an endpoint only matches if both the message's To header is the <xref:System.ServiceModel.EndpointAddress> of the endpoint and the message's action matches one of the endpoint operation's actions.  \n  \n These filters can be changed using a behavior. In the sample, the service creates an <xref:System.ServiceModel.Description.IEndpointBehavior> that replaces the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A> and <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A> on the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher>:  \n  \n```  \nclass FilteringEndpointBehavior : IEndpointBehavior …  \n```  \n  \n Two address filters are defined:  \n  \n```  \n// Matches any message whose To address contains the letter 'e'  \nclass MatchEAddressFilter : MessageFilter …  \n// Matches any message whose To address does not contain the letter 'e'  \nclass MatchNoEAddressFilter : MessageFilter  \n```  \n  \n The `FilteringEndpointBehavior` is made configurable and allows for two different variations.  \n  \n```  \npublic class FilteringEndpointBehaviorExtension : BehaviorExtensionElement  \n  \n```  \n  \n Variation 1 matches only addresses that contain an 'e' (but that have any Action) whereas Variation 2 matches only addresses that lack an 'e':  \n  \n```  \nif (Variation == 1)  \n    return new FilteringEndpointBehavior(  \n        new MatchEAddressFilter(), new MatchAllMessageFilter());  \nelse  \n    return new FilteringEndpointBehavior(  \n        new MatchNoEAddressFilter(), new MatchAllMessageFilter());  \n  \n```  \n  \n In the configuration file, the service registers the new behavior:  \n  \n```  \n<extensions>  \n    <behaviorExtensions>  \n        <add name=\"filteringEndpointBehavior\" type=\"Microsoft.ServiceModel.Samples.FilteringEndpointBehaviorExtension, service\" />  \n    </behaviorExtensions>  \n</extensions>      \n```  \n  \n Then the service creates `endpointBehavior` configurations for each variation:  \n  \n```  \n<endpointBehaviors>  \n    <behavior name=\"endpoint1\">  \n        <filteringEndpointBehavior variation=\"1\" />  \n    </behavior>  \n    <behavior name=\"endpoint2\">  \n        <filteringEndpointBehavior variation=\"2\" />  \n    </behavior>  \n</endpointBehaviors>  \n  \n```  \n  \n Finally, the service's endpoint references one of the `behaviorConfigurations`:  \n  \n```  \n<endpoint address=\"\"  \n        bindingConfiguration=\"ws\"  \n        listenUri=\"\"   \n        binding=\"wsHttpBinding\"  \n        contract=\"Microsoft.ServiceModel.Samples.IHello\"   \n        behaviorConfiguration=\"endpoint2\" />  \n  \n```  \n  \n The implementation of the client application is straightforward; it creates two channels to the service's URI (by passing in that value as the second (`via`) parameter to <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%29> and sends a single message on each channel, but it uses different endpoint addresses for each. As a result, the outbound messages from the client have different To designations, and the server responds accordingly, as demonstrated by the client's output:  \n  \n```  \nSending message to urn:e...  \nException: The message with To 'urn:e' cannot be processed at the receiver, due to an AddressFilter mismatch at the EndpointDispatcher.  Check that the sender and receiver's EndpointAddresses agree.  \n  \nSending message to urn:a...  \nHello  \n```  \n  \n Switching the variation in the server's configuration file causes the filter to be swapped and the client sees the opposite behavior (the message to `urn:e` succeeds, whereas the message to `urn:a` fails).  \n  \n```  \n<endpoint address=\"\"  \n          bindingConfiguration=\"ws\"  \n          listenUri=\"\"   \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.ServiceModel.Samples.IHello\"   \n          behaviorConfiguration=\"endpoint1\" />  \n  \n```  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Extensibility\\MessageFilter`  \n  \n### To set up, build, and run the sample  \n  \n1.  To build the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n2.  To run the sample in a single-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n3.  To run the sample in a cross-machine configuration, follow the instructions at [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md) and change the following line in Client.cs.  \n  \n    ```  \n    Uri serviceVia = new Uri(\"http://localhost/ServiceModelSamples/service.svc\");  \n    ```  \n  \n     Replace localhost with the name of server.  \n  \n    ```  \n    Uri serviceVia = new Uri(\"http://servermachinename/ServiceModelSamples/service.svc\");  \n    ```  \n  \n## See Also","nodes":[{"pos":[12,50],"content":"Custom Message Filter | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Custom Message Filter | Microsoft Docs","pos":[0,38]}]},{"pos":[349,370],"content":"Custom Message Filter","linkify":"Custom Message Filter","nodes":[{"content":"Custom Message Filter","pos":[0,21]}]},{"pos":[371,531],"content":"This sample demonstrates how to replace the message filters that <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> uses to dispatch messages to endpoints.","source":"This sample demonstrates how to replace the message filters that [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] uses to dispatch messages to endpoints."},{"pos":[539,646],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"content":"When the first message on a channel arrives at the server, the server must determine which (if any) of the endpoints associated with that URI should receive the message.","pos":[653,822]},{"content":"This process is controlled by the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.MessageFilter&gt;</ph> objects attached to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher&gt;</ph>.","pos":[823,990],"source":" This process is controlled by the <xref:System.ServiceModel.Dispatcher.MessageFilter> objects attached to the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher>."},{"content":"Each endpoint of a service has a single <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher&gt;</ph>.","pos":[997,1094],"source":"Each endpoint of a service has a single <xref:System.ServiceModel.Dispatcher.EndpointDispatcher>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher&gt;</ph> has both an <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A&gt;</ph> and a <ph id=\"ph3\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A&gt;</ph>.","pos":[1095,1323],"source":" The <xref:System.ServiceModel.Dispatcher.EndpointDispatcher> has both an <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A> and a <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A>."},{"content":"The union of these two filters is the message filter used for that endpoint.","pos":[1324,1400]},{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A&gt;</ph> for an endpoint matches any message that is addressed to an address that matches the service endpoint's <ph id=\"ph2\">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph>.","pos":[1407,1644],"source":"By default, the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A> for an endpoint matches any message that is addressed to an address that matches the service endpoint's <xref:System.ServiceModel.EndpointAddress>."},{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A&gt;</ph> for an endpoint inspects the action of the incoming message and matches any message with an action that corresponds to one of the actions of the service endpoint contract's operations (only <ph id=\"ph2\">`IsInitiating`</ph><ph id=\"ph3\">=</ph><ph id=\"ph4\">`true`</ph> actions are considered).","pos":[1645,1972],"source":" By default, the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A> for an endpoint inspects the action of the incoming message and matches any message with an action that corresponds to one of the actions of the service endpoint contract's operations (only `IsInitiating`=`true` actions are considered)."},{"content":"As a result, by default, the filter for an endpoint only matches if both the message's To header is the <ph id=\"ph1\">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> of the endpoint and the message's action matches one of the endpoint operation's actions.","pos":[1973,2209],"source":" As a result, by default, the filter for an endpoint only matches if both the message's To header is the <xref:System.ServiceModel.EndpointAddress> of the endpoint and the message's action matches one of the endpoint operation's actions."},{"content":"These filters can be changed using a behavior.","pos":[2216,2262]},{"content":"In the sample, the service creates an <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> that replaces the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A&gt;</ph> on the <ph id=\"ph4\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher&gt;</ph>:","pos":[2263,2593],"source":" In the sample, the service creates an <xref:System.ServiceModel.Description.IEndpointBehavior> that replaces the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A> and <xref:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter%2A> on the <xref:System.ServiceModel.Dispatcher.EndpointDispatcher>:"},{"content":"Two address filters are defined:","pos":[2671,2703]},{"pos":[2957,3050],"content":"The <ph id=\"ph1\">`FilteringEndpointBehavior`</ph> is made configurable and allows for two different variations.","source":"The `FilteringEndpointBehavior` is made configurable and allows for two different variations."},{"content":"Variation 1 matches only addresses that contain an 'e' (but that have any Action) whereas Variation 2 matches only addresses that lack an 'e':","pos":[3152,3294]},{"content":"In the configuration file, the service registers the new behavior:","pos":[3572,3638]},{"pos":[3883,3961],"content":"Then the service creates <ph id=\"ph1\">`endpointBehavior`</ph> configurations for each variation:","source":"Then the service creates `endpointBehavior` configurations for each variation:"},{"pos":[4243,4322],"content":"Finally, the service's endpoint references one of the <ph id=\"ph1\">`behaviorConfigurations`</ph>:","source":"Finally, the service's endpoint references one of the `behaviorConfigurations`:"},{"content":"The implementation of the client application is straightforward; it creates two channels to the service's URI (by passing in that value as the second (<ph id=\"ph1\">`via`</ph>) parameter to <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%29&gt;</ph> and sends a single message on each channel, but it uses different endpoint addresses for each.","pos":[4571,4947],"source":"The implementation of the client application is straightforward; it creates two channels to the service's URI (by passing in that value as the second (`via`) parameter to <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%29> and sends a single message on each channel, but it uses different endpoint addresses for each."},{"content":"As a result, the outbound messages from the client have different To designations, and the server responds accordingly, as demonstrated by the client's output:","pos":[4948,5107]},{"pos":[5401,5606],"content":"Switching the variation in the server's configuration file causes the filter to be swapped and the client sees the opposite behavior (the message to <ph id=\"ph1\">`urn:e`</ph> succeeds, whereas the message to <ph id=\"ph2\">`urn:a`</ph> fails).","source":"Switching the variation in the server's configuration file causes the filter to be swapped and the client sees the opposite behavior (the message to `urn:e` succeeds, whereas the message to `urn:a` fails)."},{"pos":[5866,5998],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[6052,6378],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[6379,6429]},{"pos":[6514,6550],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[6560,6730],"content":"To build the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[6740,6938],"content":"To run the sample in a single-machine configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[6948,7188],"content":"To run the sample in a cross-machine configuration, follow the instructions at <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept> and change the following line in Client.cs.","source":"To run the sample in a cross-machine configuration, follow the instructions at [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md) and change the following line in Client.cs."},{"content":"Replace localhost with the name of server.","pos":[7306,7348]},{"pos":[7472,7480],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}