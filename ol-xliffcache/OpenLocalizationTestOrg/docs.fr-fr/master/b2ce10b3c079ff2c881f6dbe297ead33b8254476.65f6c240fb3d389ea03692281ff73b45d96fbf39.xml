{"content":"---\ntitle: Microservices hosted in Docker | C#\ndescription: Learn to create asp.net core services that run in Docker containers\nkeywords: .NET, .NET Core, Docker, C#, ASP.NET, Microservice\nauthor: BillWagner\nms.author: wiwagn\nms.date: 02/03/2017\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-docker\nms.devlang: csharp\nms.assetid: 87e93838-a363-4813-b859-7356023d98ed\n---\n\n# Microservices hosted in Docker\n\n##Introduction\n\nThis tutorial details the tasks necessary to build and deploy\nan ASP.NET Core microservice in a Docker container. During the course\nof this tutorial, you'll learn:\n\n* How to generate an ASP.NET Core application using Yeoman\n* How to create a development Docker environment\n* How to build a Docker image based on an existing image.\n* How to deploy your service into a Docker container.\n\nAlong the way, you'll also see some C# language features:\n\n* How to convert C# objects into JSON payloads.\n* How to build immutable Data Transfer Objects\n* How to process incoming HTTP Requests and generate the HTTP Response\n* How to work with nullable value types\n\nYou can [view or download the sample app](https://github.com/dotnet/docs/tree/master/samples/csharp/getting-started/WeatherMicroservice) for this topic. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\n### Why Docker?\n\nDocker makes it easy to create standard machine images to\nhost your services in a data center, or the public cloud. Docker\nenables you to configure the image, and replicate it as needed to\nscale the installation of your application.\n\nAll the code in this tutorial will work in any .NET Core environment.\nThe additional tasks for a Docker installation will work for an ASP.NET\nCore application. \n\n## Prerequisites\nYou’ll need to setup your machine to run .NET core. You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage.\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container. \nYou’ll need to install your favorite code editor. The descriptions below\nuse [Visual Studio Code](https://code.visualstudio.com/) which is an open\nsource, cross platform editor. However, you can use whatever tools you are\ncomfortable with.\n\nYou'll also need to install the Docker engine. See the \n[Docker Installation page](http://www.docker.com/products/docker) \nfor instructions for your platform.\nDocker can be installed in many Linux distributions, macOS, or Windows. The page\nreferenced above contains sections to each of the available installations.\n\nMost components to be installed are done by a package manager. If you have node.js's package manager `npm` installed you can skip this step. \nOtherwise install the latest NodeJs from [nodejs.org](https://nodejs.org) which will install the npm package manager. \n\nAt this point you will need to install a number of command line tools that support\nASP.NET core development. The command line templates use Yeoman, Bower,\nGrunt, and Gulp. If you have them installed that is good, otherwise type the following into your favorite shell:\n\n`npm install -g yo bower grunt-cli gulp`\n\nThe `-g` option indicates that it is a global install, and those tools are\navailable system wide. (A local install scopes the package to a single\nproject). Once you've installed those core tools, you need to install\nthe yeoman asp.net template generators:\n\n`npm install -g generator-aspnet`\n\n## Create the Application\n\nNow that you've installed all the tools, create a new asp.net core\napplication. To use the command line generator, execute the following\nyeoman command in your favorite shell:\n\n`yo aspnet`\n\nThis command prompts you to select what Type of application you want to\ncreate. For this microservice, you want the simplest, most lightweight\nweb application possible, so select 'Empty Web Application'. The template\nwill prompt you for a name. Select 'WeatherMicroservice'. \n\nThe template creates eight files for you:\n\n* A .gitignore, customized for asp.net core applications.\n* A Startup.cs file. This contains the basis of the application.\n* A Program.cs file. This contains the entry point of the application.\n* A WeatherMicroservice.csproj file. This is the build file for the application.\n* A Dockerfile. This script creates a Docker image for the application.\n* A README.md. This contains links to other asp.net core resources.\n* A web.config file. This contains basic configuration information.\n* A runtimeconfig.template.json file. This contains debugging settings used by IDEs.\n\nNow you can run the template generated application. That's done using a series\nof tools from the command line. The `dotnet` command runs the tools necessary\nfor .NET development. Each verb executes a different command\n\nThe first step is to restore all the dependencies:\n\n```console\ndotnet restore\n```\n\nDotnet restore uses the NuGet package manager to install all the necessary packages\ninto the application directory. It also generates a project.json.lock file. This\nfile contains information about each package that is referenced. After restoring\nall the dependencies, you build the application:\n\n```console\ndotnet build\n```\n\nAnd once you build the application, you run it from the command line:\n\n```console\ndotnet run\n```\n\nThe default configuration listens to http://localhost:5000. You can open a\nbrowser and navigate to that page and see a \"Hello World!\" message.\n\n### Anatomy of an ASP.NET Core application\n\nNow that you've built the application, let's look at how this functionality\nis implemented. There are two of the generated files that are particularly\ninteresting at this point: project.json and Startup.cs. \n\nProject.json contains information about the project. The two nodes you'll\noften work with are 'dependencies' and 'frameworks'. The\ndependencies node lists all the packages that are needed for this application.\nAt the moment, this is a small node, needing only the packages that run the\nweb server.\n\nThe 'frameworks' node specifies the versions and configurations of the .NET\nframework that will run this application.\n\nThe application is implemented in Startup.cs. This file contains the startup\nclass.\n\nThe two methods are called by the asp.net core infrastructure to configure\nand run the application. The `ConfigureServices` method describes the services that are\nnecessary for this application. You're building a lean microservice, so it doesn't\nneed to configure any dependencies. The `Configure` method configures the handlers\nfor incoming HTTP Requests. The template generates a simple handler that responds\nto any request with the text 'Hello World!'.\n\n## Build a microservice\n\nThe service you're going to build will deliver weather reports from anywhere\naround the globe. In a production application, you'd call some service\nto retrieve weather data. For our sample, we'll generate a random weather\nforecast. \n\nThere are a number of tasks you'll need to perform in order to implement\nour random weather service:\n\n* Parse the incoming request to read the latitude and longitude.\n* Generate some random forecast data.\n* Convert that random forecast data from C# objects into JSON packets.\n* Set the response header to indicate that your service sends back JSON.\n* Write the response.\n\nThe next sections walk you through each of these steps.\n\n### Parsing the Query String.\n\nYou'll begin by parsing the query string. The service will accept \n'lat' and 'long' arguments on the query string in this form:\n\n`http://localhost:5000/?lat=-35.55&long=-12.35`  \n\nAll the changes you need to make are in the lambda expression\ndefined as the argument to `app.Run` in your startup class.\n\nThe argument on the lambda expression is the `HttpContext` for the\nrequest. One of its properties is the `Request` object. The `Request`\nobject has a `Query` property that contains a dictionary of all the\nvalues on the query string for the request. The first addition is to\nfind the latitude and longitude values:\n\n[!code-csharp[ReadQueryString](../../../samples/csharp/getting-started/WeatherMicroservice/Startup.cs#ReadQueryString \"read variables from the query string\")]\n\nThe Query dictionary values are `StringValue` type. That type can\ncontain a collection of strings. For your weather service, each\nvalue is a single string. That's why there's the call to `FirstOrDefault()`\nin the code above. \n\nNext, you need to convert the strings to doubles. The method you'll use\nto convert the string to a double is `double.TryParse()`:\n\n```csharp\nbool TryParse(string s, out double result);\n```\n\nThis method leverages C# out parameters to indicate if the input string\ncan be converted to a double. If the string does represent a valid\nrepresentation for a double, the method returns true, and the `result`\nargument contains the value. If the string does not represent a valid\ndouble, the method returns false.\n\nYou can adapt that API with the use of an *extension method* that returns\na *nullable double*. A *nullable value type* is a type that represents\nsome value type, and can also hold a missing, or null value. A nullable\ntype is represented by appending the `?` character to the type declaration. \n\nExtension methods are methods that are defined as static methods, but\nby adding the `this` modifier on the first parameter, can be called as\nthough they are members of that class. Extension methods may only be\ndefined in static classes. Here's the definition of the class containing\nthe extension method for parse:\n\n[!code-csharp[TryParseExtension](../../../samples/csharp/getting-started/WeatherMicroservice/Extensions.cs#TryParseExtension \"try parse to a nullable\")]\n\nThe `default(double?)` expression returns the default value for the\n`double?` type. That default value is the null (or missing) value.\n\nYou can use this extension method to convert the query string arguments\ninto the double type:\n\n[!code-csharp[UseTryParse](../../../samples/csharp/getting-started/WeatherMicroservice/Startup.cs#UseTryParse \"Use the try parse extension method\")]\n\nTo easily test the parsing code, update the response to include the values\nof the arguments:\n\n[!code-csharp[WriteResponse](../../../samples/csharp/getting-started/WeatherMicroservice/Startup.cs#WriteResponse \"Write the output response\")]\n\nAt this point, you can run the web application and see if your parsing\ncode is working. Add values to the web request in a browser, and you should see\nthe updated results.\n\n### Build a random weather forecast\n\nYour next task is to build a random weather forecast. Let's start with a data\ncontainer that holds the values you'd want for a weather forecast:\n\n```csharp\npublic class WeatherReport\n{\n    private static readonly string[] PossibleConditions = new string[]\n    {\n        \"Sunny\",\n        \"Mostly Sunny\",\n        \"Partly Sunny\",\n        \"Partly Cloudy\",\n        \"Mostly Cloudy\",\n        \"Rain\"\n    };\n\n    public int HiTemperature { get; }\n    public int LoTemperature { get; }\n    public int AverageWindSpeed { get; }\n    public string Conditions { get; }\n}\n```\n\nNext, build a constructor that randomly sets those values. This constructor uses\nthe values for the latitude and longitude to seed the Random number generator. That\nmeans the forecast for the same location is the same. If you change the arguments for\nthe latitude and longitude, you'll get a different forecast (because you start with a \ndifferent seed.)\n\n[!code-csharp[WeatherReportConstructor](../../../samples/csharp/getting-started/WeatherMicroservice/WeatherReport.cs#WeatherReportConstructor \"Weather Report Constructor\")]\n\nYou can now generate the 5-day forecast in your response method:\n\n[!code-csharp[GenerateRandomReport](../../../samples/csharp/getting-started/WeatherMicroservice/Startup.cs#GenerateRandomReport \"Generate a random weather report\")]\n\n### Build the JSON response.\n\nThe final code task on the server is to convert the WeatherReport array\ninto a JSON packet, and send that back to the client. Let's start by creating\nthe JSON packet. You'll add the NewtonSoft JSON Serializer to the\nlist of dependencies. You can do that using the `dotnet` CLI:\n\n```\ndotnet add package Newtonsoft.Json\n```\n\nThen, you can use the `JsonConvert` class to write the object to a string:\n\n[!code-csharp[ConvertToJson](../../../samples/csharp/getting-started/WeatherMicroservice/Startup.cs#ConvertToJSON \"Convert objects to JSON\")]\n\nThe code above converts the forecast object (a list of `WeatherForecast`\nobjects) into a JSON packet. After you've constructed the response packet,\nyou set the content type to `application/json`, and write the string.\n\nThe application now runs and returns random forecasts.\n\n## Build a Docker image\n\nOur final task is to run the application in Docker. We'll create a\nDocker container that runs a Docker image that represents our application.\n\nA ***Docker Image*** is a file that defines the environment for running the application.\n\nA ***Docker Container*** represents a running instance of a Docker image.\n\nBy analogy, you can think of the *Docker Image* as a *class*, and the\n*Docker Container* as an object, or an instance of that class.  \n\nThe Dockerfile created by the asp.net template will serve\nfor our purposes. Let's go over its contents.\n\nThe first line specifies the source image:\n\n```\nFROM microsoft/dotnet:1.1-sdk-msbuild\n```\n\nDocker allows you to configure a machine image based on a\nsource template. That means you don't have to supply all\nthe machine parameters when you start, you only need to\nsupply any changes. The changes here will be to include\nour application.\n\nIn this first sample, we'll use the `1.1-sdk-msbuild` version of\nthe dotnet image. This is the easiest way to create a working Docker\nenvironment. This image include the dotnet core runtime, and the dotnet SDK. \nThat makes it easier to get started and build, but does create a larger image.\n\nThe next five lines setup and build your application:\n\n```\nWORKDIR /app\n\n# copy csproj and restore as distinct layers\n\nCOPY WeatherMicroservice.csproj .\nRUN dotnet restore\n\n# copy and build everything else\n\nCOPY . .\n\n# RUN dotnet restore\nRUN dotnet publish -c Release -o out\n```\n\nThis will copy the project file from the  current directory to the docker VM, and restore\nall the packages. Using the dotnet CLI means that the Docker image must include the\n.NET Core SDK. After that, the rest of your application gets copied, and the dotnet\npublish command builds and packages your application.\n\nThe final line of the file runs the application:\n\n```\nENTRYPOINT [\"dotnet\", \"out/WeatherMicroservice.dll\", \"--server.urls\", \"http://0.0.0.0:5000\"]\n```\n\nThis configured port is referenced in the `--server.urls`\nargument to `dotnet` on the last  line of the Dockerfile. The `ENTRYPOINT` command\ninforms Docker  what command and command line options start the service. \n\n## Building and running the image in a container.\n\nLet's build an image and run the service inside a Docker container. You don't want\nall the files from your local directory copied into the image. Instead, you'll\nbuild the application in the container. You'll create a `.dockerignore` file\nto specify the directories that are not copied into the image. You don't want\nany of the build assets copied. Specify the build and publish directories\nin the `.dockerignore` file:\n\n```\nbin/*\nobj/*\nout/*\n```\n\nYou build the image\nusing the docker build command. Run the following command from the directory containing your code.\n\n```console\ndocker build -t weather-microservice .\n```\n\nThis command builds the container image based on all the information in your Dockerfile. The `-t`\nargument provides a tag, or name, for this container image. In the command line above, the\ntag used for the Docker container is `weather-microservice`. When this command completes,\nyou have a container ready to run your new service. \n\nRun the following command to start\nthe container and launch your service:\n\n```console\ndocker run -d -p 80:5000 --name hello-docker weather-microservice\n```\n\nThe `-d` option means to run the container detached from the current terminal. That means you\nwon't see the command output in your terminal. The `-p` option indicates the port mapping between\nthe service and the host. Here it says that any incoming request on port 80 should be forwarded\nto port 5000 on the container. Using 5000 matches the port your service is listening on from\nthe command line arguments specified in the Dockerfile above. The `--name` argument\nnames your running container. It's a convenient name you can use to work with that\ncontainer. \n\nYou can see if the image is running by checking the command:\n\n```console\ndocker ps\n```\n\nIf your container is running, you'll see a line that lists\nit in the running processes. (It may be the only one).\n\nYou can test your service by opening a browser and navigating to localhost, and\nspecifying a latitude and longitude:\n\n```\nhttp://localhost/?lat=35.5&long=40.75\n```\n\n## Attaching to a running container\n\nWhen you ran your sevice in a command window, you could see diagnostic information printed\nfor each request. You don't see that information when your container is running in detached\nmode. The Docker attach command enables you to attach to a running container so that you\ncan see the log information.  Run this command from a command window:\n\n```console\ndocker attach --sig-proxy=false hello-docker\n```\n\nThe `--sig-proxy=false` argument means that `Ctrl-C` commands do not get sent to the\ncontainer process, but rather stop the `docker attach` command. The final argument\nis the name given to the container in the `docker run` command. \n\n> [!NOTE]\n> You can also use the docker assigned container ID to refer to any container. If you\n> didn't specify a name for your container in `docker run` you must use the container id.\n\nOpen a browser and navigate to your service. You'll see the diagnostic messages in\nthe command windows from the attached running container.\n\nPress `Ctrl-C` to stop the attach process.\n\nWhen you are done working with your container, you can stop it:\n\n```console\ndocker stop hello-docker\n```\n\nThe container and image is still available for you to restart.  If you want to remove\nthe container from your machine, you use this command:\n\n```console\ndocker rm hello-docker\n```\n\nIf you want to remove unused images from your machine, you use this command:\n\n```console\ndocker rmi weather-microservice\n```\n\n## Conclusion \n\nIn this tutorial, you built an asp.net core microservice, and added a few\nsimple features.\n\nYou built a docker container image for that service, and ran that container on\nyour machine. You attached a terminal window to the service, and saw the\ndiagnostic messages from your service.\n\nAlong the way, you saw several features of the C# language in action.\n","nodes":[{"pos":[4,379],"embed":true,"restype":"x-metadata","content":"title: Microservices hosted in Docker | C#\ndescription: Learn to create asp.net core services that run in Docker containers\nkeywords: .NET, .NET Core, Docker, C#, ASP.NET, Microservice\nauthor: BillWagner\nms.author: wiwagn\nms.date: 02/03/2017\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-docker\nms.devlang: csharp\nms.assetid: 87e93838-a363-4813-b859-7356023d98ed","nodes":[{"content":"Microservices hosted in Docker | C#","nodes":[{"pos":[0,35],"content":"Microservices hosted in Docker | C#","nodes":[{"content":"Microservices hosted in Docker | C#","pos":[0,35]}]}],"path":["title"]},{"content":"Learn to create asp.net core services that run in Docker containers","nodes":[{"pos":[0,67],"content":"Learn to create asp.net core services that run in Docker containers","nodes":[{"content":"Learn to create asp.net core services that run in Docker containers","pos":[0,67]}]}],"path":["description"]},{"content":".NET, .NET Core, Docker, C#, ASP.NET, Microservice","nodes":[{"pos":[0,50],"content":".NET, .NET Core, Docker, C#, ASP.NET, Microservice","nodes":[{"content":".NET, .NET Core, Docker, C#, ASP.NET, Microservice","pos":[0,50]}]}],"path":["keywords"]}],"yml":true},{"pos":[387,417],"content":"Microservices hosted in Docker","linkify":"Microservices hosted in Docker","nodes":[{"content":"Microservices hosted in Docker","pos":[0,30]}]},{"pos":[421,433],"content":"Introduction","linkify":"Introduction","nodes":[{"content":"Introduction","pos":[0,12]}]},{"content":"This tutorial details the tasks necessary to build and deploy an ASP.NET Core microservice in a Docker container.","pos":[435,548],"source":"This tutorial details the tasks necessary to build and deploy\nan ASP.NET Core microservice in a Docker container."},{"content":"During the course of this tutorial, you'll learn:","pos":[549,598],"source":" During the course\nof this tutorial, you'll learn:"},{"content":"How to generate an ASP.NET Core application using Yeoman","pos":[602,658]},{"content":"How to create a development Docker environment","pos":[661,707]},{"content":"How to build a Docker image based on an existing image.","pos":[710,765]},{"content":"How to deploy your service into a Docker container.","pos":[768,819]},{"content":"Along the way, you'll also see some C# language features:","pos":[821,878]},{"content":"How to convert C# objects into JSON payloads.","pos":[882,927]},{"content":"How to build immutable Data Transfer Objects","pos":[930,974]},{"content":"How to process incoming HTTP Requests and generate the HTTP Response","pos":[977,1045]},{"content":"How to work with nullable value types","pos":[1048,1085]},{"content":"You can <bpt id=\"p1\">[</bpt>view or download the sample app<ept id=\"p1\">](https://github.com/dotnet/docs/tree/master/samples/csharp/getting-started/WeatherMicroservice)</ept> for this topic.","pos":[1087,1239],"source":"You can [view or download the sample app](https://github.com/dotnet/docs/tree/master/samples/csharp/getting-started/WeatherMicroservice) for this topic."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[1240,1365],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[1371,1382],"content":"Why Docker?","linkify":"Why Docker?","nodes":[{"content":"Why Docker?","pos":[0,11]}]},{"content":"Docker makes it easy to create standard machine images to host your services in a data center, or the public cloud.","pos":[1384,1499],"source":"Docker makes it easy to create standard machine images to\nhost your services in a data center, or the public cloud."},{"content":"Docker enables you to configure the image, and replicate it as needed to scale the installation of your application.","pos":[1500,1616],"source":" Docker\nenables you to configure the image, and replicate it as needed to\nscale the installation of your application."},{"content":"All the code in this tutorial will work in any .NET Core environment.","pos":[1618,1687]},{"content":"The additional tasks for a Docker installation will work for an ASP.NET Core application.","pos":[1688,1777],"source":"\nThe additional tasks for a Docker installation will work for an ASP.NET\nCore application."},{"pos":[1783,1796],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You’ll need to setup your machine to run .NET core.","pos":[1797,1848]},{"content":"You can find the installation instructions on the <bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> page.","pos":[1849,1952],"source":" You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage."},{"content":"You can run this application on Windows, Ubuntu Linux, macOS or in a Docker container.","pos":[1953,2039],"source":"\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container."},{"content":"You’ll need to install your favorite code editor.","pos":[2040,2090],"source":" \nYou’ll need to install your favorite code editor."},{"content":"The descriptions below use <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](https://code.visualstudio.com/)</ept> which is an open source, cross platform editor.","pos":[2091,2218],"source":" The descriptions below\nuse [Visual Studio Code](https://code.visualstudio.com/) which is an open\nsource, cross platform editor."},{"content":"However, you can use whatever tools you are comfortable with.","pos":[2219,2280],"source":" However, you can use whatever tools you are\ncomfortable with."},{"content":"You'll also need to install the Docker engine.","pos":[2282,2328]},{"content":"See the <bpt id=\"p1\">[</bpt>Docker Installation page<ept id=\"p1\">](http://www.docker.com/products/docker)</ept> for instructions for your platform.","pos":[2329,2440],"source":" See the \n[Docker Installation page](http://www.docker.com/products/docker) \nfor instructions for your platform."},{"content":"Docker can be installed in many Linux distributions, macOS, or Windows.","pos":[2441,2512],"source":"\nDocker can be installed in many Linux distributions, macOS, or Windows."},{"content":"The page referenced above contains sections to each of the available installations.","pos":[2513,2596],"source":" The page\nreferenced above contains sections to each of the available installations."},{"content":"Most components to be installed are done by a package manager.","pos":[2598,2660]},{"content":"If you have node.js's package manager <ph id=\"ph1\">`npm`</ph> installed you can skip this step.","pos":[2661,2738],"source":" If you have node.js's package manager `npm` installed you can skip this step."},{"content":"Otherwise install the latest NodeJs from <bpt id=\"p1\">[</bpt>nodejs.org<ept id=\"p1\">](https://nodejs.org)</ept> which will install the npm package manager.","pos":[2739,2857],"source":" \nOtherwise install the latest NodeJs from [nodejs.org](https://nodejs.org) which will install the npm package manager."},{"content":"At this point you will need to install a number of command line tools that support ASP.NET core development.","pos":[2860,2968],"source":"At this point you will need to install a number of command line tools that support\nASP.NET core development."},{"content":"The command line templates use Yeoman, Bower, Grunt, and Gulp.","pos":[2969,3031],"source":" The command line templates use Yeoman, Bower,\nGrunt, and Gulp."},{"content":"If you have them installed that is good, otherwise type the following into your favorite shell:","pos":[3032,3127]},{"content":"The <ph id=\"ph1\">`-g`</ph> option indicates that it is a global install, and those tools are available system wide.","pos":[3171,3268],"source":"The `-g` option indicates that it is a global install, and those tools are\navailable system wide."},{"content":"(A local install scopes the package to a single project).","pos":[3269,3326],"source":" (A local install scopes the package to a single\nproject)."},{"content":"Once you've installed those core tools, you need to install the yeoman asp.net template generators:","pos":[3327,3426],"source":" Once you've installed those core tools, you need to install\nthe yeoman asp.net template generators:"},{"pos":[3466,3488],"content":"Create the Application","linkify":"Create the Application","nodes":[{"content":"Create the Application","pos":[0,22]}]},{"content":"Now that you've installed all the tools, create a new asp.net core application.","pos":[3490,3569],"source":"Now that you've installed all the tools, create a new asp.net core\napplication."},{"content":"To use the command line generator, execute the following yeoman command in your favorite shell:","pos":[3570,3665],"source":" To use the command line generator, execute the following\nyeoman command in your favorite shell:"},{"content":"This command prompts you to select what Type of application you want to create.","pos":[3680,3759],"source":"This command prompts you to select what Type of application you want to\ncreate."},{"content":"For this microservice, you want the simplest, most lightweight web application possible, so select 'Empty Web Application'.","pos":[3760,3883],"source":" For this microservice, you want the simplest, most lightweight\nweb application possible, so select 'Empty Web Application'."},{"content":"The template will prompt you for a name.","pos":[3884,3924],"source":" The template\nwill prompt you for a name."},{"content":"Select 'WeatherMicroservice'.","pos":[3925,3954]},{"content":"The template creates eight files for you:","pos":[3957,3998]},{"content":"A .gitignore, customized for asp.net core applications.","pos":[4002,4057]},{"content":"A Startup.cs file.","pos":[4060,4078]},{"content":"This contains the basis of the application.","pos":[4079,4122]},{"content":"A Program.cs file.","pos":[4125,4143]},{"content":"This contains the entry point of the application.","pos":[4144,4193]},{"content":"A WeatherMicroservice.csproj file.","pos":[4196,4230]},{"content":"This is the build file for the application.","pos":[4231,4274]},{"content":"A Dockerfile.","pos":[4277,4290]},{"content":"This script creates a Docker image for the application.","pos":[4291,4346]},{"content":"A README.md.","pos":[4349,4361]},{"content":"This contains links to other asp.net core resources.","pos":[4362,4414]},{"content":"A web.config file.","pos":[4417,4435]},{"content":"This contains basic configuration information.","pos":[4436,4482]},{"content":"A runtimeconfig.template.json file.","pos":[4485,4520]},{"content":"This contains debugging settings used by IDEs.","pos":[4521,4567]},{"content":"Now you can run the template generated application.","pos":[4569,4620]},{"content":"That's done using a series of tools from the command line.","pos":[4621,4679],"source":" That's done using a series\nof tools from the command line."},{"content":"The <ph id=\"ph1\">`dotnet`</ph> command runs the tools necessary for .NET development.","pos":[4680,4747],"source":" The `dotnet` command runs the tools necessary\nfor .NET development."},{"content":"Each verb executes a different command","pos":[4748,4786]},{"content":"The first step is to restore all the dependencies:","pos":[4788,4838]},{"content":"Dotnet restore uses the NuGet package manager to install all the necessary packages into the application directory.","pos":[4871,4986],"source":"Dotnet restore uses the NuGet package manager to install all the necessary packages\ninto the application directory."},{"content":"It also generates a project.json.lock file.","pos":[4987,5030]},{"content":"This file contains information about each package that is referenced.","pos":[5031,5100],"source":" This\nfile contains information about each package that is referenced."},{"content":"After restoring all the dependencies, you build the application:","pos":[5101,5165],"source":" After restoring\nall the dependencies, you build the application:"},{"content":"And once you build the application, you run it from the command line:","pos":[5196,5265]},{"content":"The default configuration listens to http://localhost:5000.","pos":[5294,5353]},{"content":"You can open a browser and navigate to that page and see a \"Hello World!\"","pos":[5354,5427],"source":" You can open a\nbrowser and navigate to that page and see a \"Hello World!\""},{"content":"message.","pos":[5428,5436]},{"pos":[5442,5480],"content":"Anatomy of an ASP.NET Core application","linkify":"Anatomy of an ASP.NET Core application","nodes":[{"content":"Anatomy of an ASP.NET Core application","pos":[0,38]}]},{"content":"Now that you've built the application, let's look at how this functionality is implemented.","pos":[5482,5573],"source":"Now that you've built the application, let's look at how this functionality\nis implemented."},{"content":"There are two of the generated files that are particularly interesting at this point: project.json and Startup.cs.","pos":[5574,5688],"source":" There are two of the generated files that are particularly\ninteresting at this point: project.json and Startup.cs."},{"content":"Project.json contains information about the project.","pos":[5691,5743]},{"content":"The two nodes you'll often work with are 'dependencies' and 'frameworks'.","pos":[5744,5817],"source":" The two nodes you'll\noften work with are 'dependencies' and 'frameworks'."},{"content":"The dependencies node lists all the packages that are needed for this application.","pos":[5818,5900],"source":" The\ndependencies node lists all the packages that are needed for this application."},{"content":"At the moment, this is a small node, needing only the packages that run the web server.","pos":[5901,5988],"source":"\nAt the moment, this is a small node, needing only the packages that run the\nweb server."},{"pos":[5990,6107],"content":"The 'frameworks' node specifies the versions and configurations of the .NET framework that will run this application.","source":"The 'frameworks' node specifies the versions and configurations of the .NET\nframework that will run this application."},{"content":"The application is implemented in Startup.cs.","pos":[6109,6154]},{"content":"This file contains the startup class.","pos":[6155,6192],"source":" This file contains the startup\nclass."},{"content":"The two methods are called by the asp.net core infrastructure to configure and run the application.","pos":[6194,6293],"source":"The two methods are called by the asp.net core infrastructure to configure\nand run the application."},{"content":"The <ph id=\"ph1\">`ConfigureServices`</ph> method describes the services that are necessary for this application.","pos":[6294,6388],"source":" The `ConfigureServices` method describes the services that are\nnecessary for this application."},{"content":"You're building a lean microservice, so it doesn't need to configure any dependencies.","pos":[6389,6475],"source":" You're building a lean microservice, so it doesn't\nneed to configure any dependencies."},{"content":"The <ph id=\"ph1\">`Configure`</ph> method configures the handlers for incoming HTTP Requests.","pos":[6476,6550],"source":" The `Configure` method configures the handlers\nfor incoming HTTP Requests."},{"content":"The template generates a simple handler that responds to any request with the text 'Hello World!'.","pos":[6551,6649],"source":" The template generates a simple handler that responds\nto any request with the text 'Hello World!'."},{"pos":[6654,6674],"content":"Build a microservice","linkify":"Build a microservice","nodes":[{"content":"Build a microservice","pos":[0,20]}]},{"content":"The service you're going to build will deliver weather reports from anywhere around the globe.","pos":[6676,6770],"source":"The service you're going to build will deliver weather reports from anywhere\naround the globe."},{"content":"In a production application, you'd call some service to retrieve weather data.","pos":[6771,6849],"source":" In a production application, you'd call some service\nto retrieve weather data."},{"content":"For our sample, we'll generate a random weather forecast.","pos":[6850,6907],"source":" For our sample, we'll generate a random weather\nforecast."},{"pos":[6910,7010],"content":"There are a number of tasks you'll need to perform in order to implement our random weather service:","source":"There are a number of tasks you'll need to perform in order to implement\nour random weather service:"},{"content":"Parse the incoming request to read the latitude and longitude.","pos":[7014,7076]},{"content":"Generate some random forecast data.","pos":[7079,7114]},{"content":"Convert that random forecast data from C# objects into JSON packets.","pos":[7117,7185]},{"content":"Set the response header to indicate that your service sends back JSON.","pos":[7188,7258]},{"content":"Write the response.","pos":[7261,7280]},{"content":"The next sections walk you through each of these steps.","pos":[7282,7337]},{"pos":[7343,7368],"content":"Parsing the Query String.","linkify":"Parsing the Query String.","nodes":[{"content":"Parsing the Query String.","pos":[0,25]}]},{"content":"You'll begin by parsing the query string.","pos":[7370,7411]},{"content":"The service will accept 'lat' and 'long' arguments on the query string in this form:","pos":[7412,7497],"source":" The service will accept \n'lat' and 'long' arguments on the query string in this form:"},{"pos":[7550,7671],"content":"All the changes you need to make are in the lambda expression defined as the argument to <ph id=\"ph1\">`app.Run`</ph> in your startup class.","source":"All the changes you need to make are in the lambda expression\ndefined as the argument to `app.Run` in your startup class."},{"content":"The argument on the lambda expression is the <ph id=\"ph1\">`HttpContext`</ph> for the request.","pos":[7673,7748],"source":"The argument on the lambda expression is the `HttpContext` for the\nrequest."},{"content":"One of its properties is the <ph id=\"ph1\">`Request`</ph> object.","pos":[7749,7795],"source":" One of its properties is the `Request` object."},{"content":"The <ph id=\"ph1\">`Request`</ph> object has a <ph id=\"ph2\">`Query`</ph> property that contains a dictionary of all the values on the query string for the request.","pos":[7796,7921],"source":" The `Request`\nobject has a `Query` property that contains a dictionary of all the\nvalues on the query string for the request."},{"content":"The first addition is to find the latitude and longitude values:","pos":[7922,7986],"source":" The first addition is to\nfind the latitude and longitude values:"},{"content":"The Query dictionary values are <ph id=\"ph1\">`StringValue`</ph> type.","pos":[8148,8199],"source":"The Query dictionary values are `StringValue` type."},{"content":"That type can contain a collection of strings.","pos":[8200,8246],"source":" That type can\ncontain a collection of strings."},{"content":"For your weather service, each value is a single string.","pos":[8247,8303],"source":" For your weather service, each\nvalue is a single string."},{"content":"That's why there's the call to <ph id=\"ph1\">`FirstOrDefault()`</ph> in the code above.","pos":[8304,8372],"source":" That's why there's the call to `FirstOrDefault()`\nin the code above."},{"content":"Next, you need to convert the strings to doubles.","pos":[8375,8424]},{"content":"The method you'll use to convert the string to a double is <ph id=\"ph1\">`double.TryParse()`</ph>:","pos":[8425,8504],"source":" The method you'll use\nto convert the string to a double is `double.TryParse()`:"},{"content":"This method leverages C# out parameters to indicate if the input string can be converted to a double.","pos":[8565,8666],"source":"This method leverages C# out parameters to indicate if the input string\ncan be converted to a double."},{"content":"If the string does represent a valid representation for a double, the method returns true, and the <ph id=\"ph1\">`result`</ph> argument contains the value.","pos":[8667,8803],"source":" If the string does represent a valid\nrepresentation for a double, the method returns true, and the `result`\nargument contains the value."},{"content":"If the string does not represent a valid double, the method returns false.","pos":[8804,8878],"source":" If the string does not represent a valid\ndouble, the method returns false."},{"content":"You can adapt that API with the use of an <bpt id=\"p1\">*</bpt>extension method<ept id=\"p1\">*</ept> that returns a <bpt id=\"p2\">*</bpt>nullable double<ept id=\"p2\">*</ept>.","pos":[8880,8974],"source":"You can adapt that API with the use of an *extension method* that returns\na *nullable double*."},{"content":"A <bpt id=\"p1\">*</bpt>nullable value type<ept id=\"p1\">*</ept> is a type that represents some value type, and can also hold a missing, or null value.","pos":[8975,9085],"source":" A *nullable value type* is a type that represents\nsome value type, and can also hold a missing, or null value."},{"content":"A nullable type is represented by appending the <ph id=\"ph1\">`?`</ph> character to the type declaration.","pos":[9086,9172],"source":" A nullable\ntype is represented by appending the `?` character to the type declaration."},{"content":"Extension methods are methods that are defined as static methods, but by adding the <ph id=\"ph1\">`this`</ph> modifier on the first parameter, can be called as though they are members of that class.","pos":[9175,9354],"source":"Extension methods are methods that are defined as static methods, but\nby adding the `this` modifier on the first parameter, can be called as\nthough they are members of that class."},{"content":"Extension methods may only be defined in static classes.","pos":[9355,9411],"source":" Extension methods may only be\ndefined in static classes."},{"content":"Here's the definition of the class containing the extension method for parse:","pos":[9412,9489],"source":" Here's the definition of the class containing\nthe extension method for parse:"},{"content":"The <ph id=\"ph1\">`default(double?)`</ph> expression returns the default value for the <ph id=\"ph2\">`double?`</ph> type.","pos":[9645,9728],"source":"The `default(double?)` expression returns the default value for the\n`double?` type."},{"content":"That default value is the null (or missing) value.","pos":[9729,9779]},{"pos":[9781,9874],"content":"You can use this extension method to convert the query string arguments into the double type:","source":"You can use this extension method to convert the query string arguments\ninto the double type:"},{"pos":[10026,10118],"content":"To easily test the parsing code, update the response to include the values of the arguments:","source":"To easily test the parsing code, update the response to include the values\nof the arguments:"},{"content":"At this point, you can run the web application and see if your parsing code is working.","pos":[10265,10352],"source":"At this point, you can run the web application and see if your parsing\ncode is working."},{"content":"Add values to the web request in a browser, and you should see the updated results.","pos":[10353,10436],"source":" Add values to the web request in a browser, and you should see\nthe updated results."},{"pos":[10442,10473],"content":"Build a random weather forecast","linkify":"Build a random weather forecast","nodes":[{"content":"Build a random weather forecast","pos":[0,31]}]},{"content":"Your next task is to build a random weather forecast.","pos":[10475,10528]},{"content":"Let's start with a data container that holds the values you'd want for a weather forecast:","pos":[10529,10619],"source":" Let's start with a data\ncontainer that holds the values you'd want for a weather forecast:"},{"content":"Next, build a constructor that randomly sets those values.","pos":[11037,11095]},{"content":"This constructor uses the values for the latitude and longitude to seed the Random number generator.","pos":[11096,11196],"source":" This constructor uses\nthe values for the latitude and longitude to seed the Random number generator."},{"content":"That means the forecast for the same location is the same.","pos":[11197,11255],"source":" That\nmeans the forecast for the same location is the same."},{"content":"If you change the arguments for the latitude and longitude, you'll get a different forecast (because you start with a different seed.)","pos":[11256,11391],"source":" If you change the arguments for\nthe latitude and longitude, you'll get a different forecast (because you start with a \ndifferent seed.)"},{"content":"You can now generate the 5-day forecast in your response method:","pos":[11567,11631]},{"pos":[11803,11827],"content":"Build the JSON response.","linkify":"Build the JSON response.","nodes":[{"content":"Build the JSON response.","pos":[0,24]}]},{"content":"The final code task on the server is to convert the WeatherReport array into a JSON packet, and send that back to the client.","pos":[11829,11954],"source":"The final code task on the server is to convert the WeatherReport array\ninto a JSON packet, and send that back to the client."},{"content":"Let's start by creating the JSON packet.","pos":[11955,11995],"source":" Let's start by creating\nthe JSON packet."},{"content":"You'll add the NewtonSoft JSON Serializer to the list of dependencies.","pos":[11996,12066],"source":" You'll add the NewtonSoft JSON Serializer to the\nlist of dependencies."},{"content":"You can do that using the <ph id=\"ph1\">`dotnet`</ph> CLI:","pos":[12067,12106],"source":" You can do that using the `dotnet` CLI:"},{"pos":[12152,12226],"content":"Then, you can use the <ph id=\"ph1\">`JsonConvert`</ph> class to write the object to a string:","source":"Then, you can use the `JsonConvert` class to write the object to a string:"},{"content":"The code above converts the forecast object (a list of <ph id=\"ph1\">`WeatherForecast`</ph> objects) into a JSON packet.","pos":[12371,12472],"source":"The code above converts the forecast object (a list of `WeatherForecast`\nobjects) into a JSON packet."},{"content":"After you've constructed the response packet, you set the content type to <ph id=\"ph1\">`application/json`</ph>, and write the string.","pos":[12473,12588],"source":" After you've constructed the response packet,\nyou set the content type to `application/json`, and write the string."},{"content":"The application now runs and returns random forecasts.","pos":[12590,12644]},{"pos":[12649,12669],"content":"Build a Docker image","linkify":"Build a Docker image","nodes":[{"content":"Build a Docker image","pos":[0,20]}]},{"content":"Our final task is to run the application in Docker.","pos":[12671,12722]},{"content":"We'll create a Docker container that runs a Docker image that represents our application.","pos":[12723,12812],"source":" We'll create a\nDocker container that runs a Docker image that represents our application."},{"pos":[12814,12902],"content":"A <bpt id=\"p1\">***</bpt>Docker Image<ept id=\"p1\">***</ept> is a file that defines the environment for running the application.","source":"A ***Docker Image*** is a file that defines the environment for running the application."},{"pos":[12904,12977],"content":"A <bpt id=\"p1\">***</bpt>Docker Container<ept id=\"p1\">***</ept> represents a running instance of a Docker image.","source":"A ***Docker Container*** represents a running instance of a Docker image."},{"pos":[12979,13111],"content":"By analogy, you can think of the <bpt id=\"p1\">*</bpt>Docker Image<ept id=\"p1\">*</ept> as a <bpt id=\"p2\">*</bpt>class<ept id=\"p2\">*</ept>, and the <bpt id=\"p3\">*</bpt>Docker Container<ept id=\"p3\">*</ept> as an object, or an instance of that class.","source":"By analogy, you can think of the *Docker Image* as a *class*, and the\n*Docker Container* as an object, or an instance of that class."},{"content":"The Dockerfile created by the asp.net template will serve for our purposes.","pos":[13115,13190],"source":"The Dockerfile created by the asp.net template will serve\nfor our purposes."},{"content":"Let's go over its contents.","pos":[13191,13218]},{"content":"The first line specifies the source image:","pos":[13220,13262]},{"content":"Docker allows you to configure a machine image based on a source template.","pos":[13311,13385],"source":"Docker allows you to configure a machine image based on a\nsource template."},{"content":"That means you don't have to supply all the machine parameters when you start, you only need to supply any changes.","pos":[13386,13501],"source":" That means you don't have to supply all\nthe machine parameters when you start, you only need to\nsupply any changes."},{"content":"The changes here will be to include our application.","pos":[13502,13554],"source":" The changes here will be to include\nour application."},{"content":"In this first sample, we'll use the <ph id=\"ph1\">`1.1-sdk-msbuild`</ph> version of the dotnet image.","pos":[13556,13638],"source":"In this first sample, we'll use the `1.1-sdk-msbuild` version of\nthe dotnet image."},{"content":"This is the easiest way to create a working Docker environment.","pos":[13639,13702],"source":" This is the easiest way to create a working Docker\nenvironment."},{"content":"This image include the dotnet core runtime, and the dotnet SDK.","pos":[13703,13766]},{"content":"That makes it easier to get started and build, but does create a larger image.","pos":[13767,13846],"source":" \nThat makes it easier to get started and build, but does create a larger image."},{"content":"The next five lines setup and build your application:","pos":[13848,13901]},{"content":"This will copy the project file from the  current directory to the docker VM, and restore all the packages.","pos":[14128,14235],"source":"This will copy the project file from the  current directory to the docker VM, and restore\nall the packages."},{"content":"Using the dotnet CLI means that the Docker image must include the .NET Core SDK.","pos":[14236,14316],"source":" Using the dotnet CLI means that the Docker image must include the\n.NET Core SDK."},{"content":"After that, the rest of your application gets copied, and the dotnet publish command builds and packages your application.","pos":[14317,14439],"source":" After that, the rest of your application gets copied, and the dotnet\npublish command builds and packages your application."},{"content":"The final line of the file runs the application:","pos":[14441,14489]},{"content":"This configured port is referenced in the <ph id=\"ph1\">`--server.urls`</ph> argument to <ph id=\"ph2\">`dotnet`</ph> on the last  line of the Dockerfile.","pos":[14593,14708],"source":"This configured port is referenced in the `--server.urls`\nargument to `dotnet` on the last  line of the Dockerfile."},{"content":"The <ph id=\"ph1\">`ENTRYPOINT`</ph> command informs Docker  what command and command line options start the service.","pos":[14709,14806],"source":" The `ENTRYPOINT` command\ninforms Docker  what command and command line options start the service."},{"pos":[14812,14858],"content":"Building and running the image in a container.","linkify":"Building and running the image in a container.","nodes":[{"content":"Building and running the image in a container.","pos":[0,46]}]},{"content":"Let's build an image and run the service inside a Docker container.","pos":[14860,14927]},{"content":"You don't want all the files from your local directory copied into the image.","pos":[14928,15005],"source":" You don't want\nall the files from your local directory copied into the image."},{"content":"Instead, you'll build the application in the container.","pos":[15006,15061],"source":" Instead, you'll\nbuild the application in the container."},{"content":"You'll create a <ph id=\"ph1\">`.dockerignore`</ph> file to specify the directories that are not copied into the image.","pos":[15062,15161],"source":" You'll create a `.dockerignore` file\nto specify the directories that are not copied into the image."},{"content":"You don't want any of the build assets copied.","pos":[15162,15208],"source":" You don't want\nany of the build assets copied."},{"content":"Specify the build and publish directories in the <ph id=\"ph1\">`.dockerignore`</ph> file:","pos":[15209,15279],"source":" Specify the build and publish directories\nin the `.dockerignore` file:"},{"content":"You build the image using the docker build command.","pos":[15308,15359],"source":"You build the image\nusing the docker build command."},{"content":"Run the following command from the directory containing your code.","pos":[15360,15426]},{"content":"This command builds the container image based on all the information in your Dockerfile.","pos":[15483,15571]},{"content":"The <ph id=\"ph1\">`-t`</ph> argument provides a tag, or name, for this container image.","pos":[15572,15640],"source":" The `-t`\nargument provides a tag, or name, for this container image."},{"content":"In the command line above, the tag used for the Docker container is <ph id=\"ph1\">`weather-microservice`</ph>.","pos":[15641,15732],"source":" In the command line above, the\ntag used for the Docker container is `weather-microservice`."},{"content":"When this command completes, you have a container ready to run your new service.","pos":[15733,15813],"source":" When this command completes,\nyou have a container ready to run your new service."},{"pos":[15816,15889],"content":"Run the following command to start the container and launch your service:","source":"Run the following command to start\nthe container and launch your service:"},{"content":"The <ph id=\"ph1\">`-d`</ph> option means to run the container detached from the current terminal.","pos":[15973,16051],"source":"The `-d` option means to run the container detached from the current terminal."},{"content":"That means you won't see the command output in your terminal.","pos":[16052,16113],"source":" That means you\nwon't see the command output in your terminal."},{"content":"The <ph id=\"ph1\">`-p`</ph> option indicates the port mapping between the service and the host.","pos":[16114,16190],"source":" The `-p` option indicates the port mapping between\nthe service and the host."},{"content":"Here it says that any incoming request on port 80 should be forwarded to port 5000 on the container.","pos":[16191,16291],"source":" Here it says that any incoming request on port 80 should be forwarded\nto port 5000 on the container."},{"content":"Using 5000 matches the port your service is listening on from the command line arguments specified in the Dockerfile above.","pos":[16292,16415],"source":" Using 5000 matches the port your service is listening on from\nthe command line arguments specified in the Dockerfile above."},{"content":"The <ph id=\"ph1\">`--name`</ph> argument names your running container.","pos":[16416,16467],"source":" The `--name` argument\nnames your running container."},{"content":"It's a convenient name you can use to work with that container.","pos":[16468,16531],"source":" It's a convenient name you can use to work with that\ncontainer."},{"content":"You can see if the image is running by checking the command:","pos":[16534,16594]},{"content":"If your container is running, you'll see a line that lists it in the running processes.","pos":[16622,16709],"source":"If your container is running, you'll see a line that lists\nit in the running processes."},{"content":"(It may be the only one).","pos":[16710,16735]},{"pos":[16737,16853],"content":"You can test your service by opening a browser and navigating to localhost, and specifying a latitude and longitude:","source":"You can test your service by opening a browser and navigating to localhost, and\nspecifying a latitude and longitude:"},{"pos":[16905,16937],"content":"Attaching to a running container","linkify":"Attaching to a running container","nodes":[{"content":"Attaching to a running container","pos":[0,32]}]},{"content":"When you ran your sevice in a command window, you could see diagnostic information printed for each request.","pos":[16939,17047],"source":"When you ran your sevice in a command window, you could see diagnostic information printed\nfor each request."},{"content":"You don't see that information when your container is running in detached mode.","pos":[17048,17127],"source":" You don't see that information when your container is running in detached\nmode."},{"content":"The Docker attach command enables you to attach to a running container so that you can see the log information.","pos":[17128,17239],"source":" The Docker attach command enables you to attach to a running container so that you\ncan see the log information."},{"content":"Run this command from a command window:","pos":[17241,17280]},{"content":"The <ph id=\"ph1\">`--sig-proxy=false`</ph> argument means that <ph id=\"ph2\">`Ctrl-C`</ph> commands do not get sent to the container process, but rather stop the <ph id=\"ph3\">`docker attach`</ph> command.","pos":[17343,17491],"source":"The `--sig-proxy=false` argument means that `Ctrl-C` commands do not get sent to the\ncontainer process, but rather stop the `docker attach` command."},{"content":"The final argument is the name given to the container in the <ph id=\"ph1\">`docker run`</ph> command.","pos":[17492,17574],"source":" The final argument\nis the name given to the container in the `docker run` command."},{"pos":[17579,17762],"content":"[!NOTE]\nYou can also use the docker assigned container ID to refer to any container. If you\ndidn't specify a name for your container in `docker run` you must use the container id.","leadings":["","> ","> "],"nodes":[{"content":"You can also use the docker assigned container ID to refer to any container. If you\ndidn't specify a name for your container in `docker run` you must use the container id.","pos":[8,179],"nodes":[{"content":"You can also use the docker assigned container ID to refer to any container.","pos":[0,76]},{"content":"If you didn't specify a name for your container in <ph id=\"ph1\">`docker run`</ph> you must use the container id.","pos":[77,171],"source":" If you\ndidn't specify a name for your container in `docker run` you must use the container id."}]}]},{"content":"Open a browser and navigate to your service.","pos":[17764,17808]},{"content":"You'll see the diagnostic messages in the command windows from the attached running container.","pos":[17809,17903],"source":" You'll see the diagnostic messages in\nthe command windows from the attached running container."},{"pos":[17905,17947],"content":"Press <ph id=\"ph1\">`Ctrl-C`</ph> to stop the attach process.","source":"Press `Ctrl-C` to stop the attach process."},{"content":"When you are done working with your container, you can stop it:","pos":[17949,18012]},{"content":"The container and image is still available for you to restart.","pos":[18055,18117]},{"content":"If you want to remove the container from your machine, you use this command:","pos":[18119,18195],"source":"  If you want to remove\nthe container from your machine, you use this command:"},{"content":"If you want to remove unused images from your machine, you use this command:","pos":[18236,18312]},{"pos":[18365,18375],"content":"Conclusion","linkify":"Conclusion","nodes":[{"content":"Conclusion","pos":[0,10]}]},{"pos":[18378,18468],"content":"In this tutorial, you built an asp.net core microservice, and added a few simple features.","source":"In this tutorial, you built an asp.net core microservice, and added a few\nsimple features."},{"content":"You built a docker container image for that service, and ran that container on your machine.","pos":[18470,18562],"source":"You built a docker container image for that service, and ran that container on\nyour machine."},{"content":"You attached a terminal window to the service, and saw the diagnostic messages from your service.","pos":[18563,18660],"source":" You attached a terminal window to the service, and saw the\ndiagnostic messages from your service."},{"content":"Along the way, you saw several features of the C# language in action.","pos":[18662,18731]}]}