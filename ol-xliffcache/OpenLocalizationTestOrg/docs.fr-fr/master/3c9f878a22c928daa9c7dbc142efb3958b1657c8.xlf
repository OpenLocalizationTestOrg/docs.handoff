<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="wcf-analytic-tracing.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c9f878a22c928daa9c7dbc142efb3958b1657c8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\wcf-analytic-tracing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c30de969525fdc2669a46b4f58ac2cac28f1060a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6725543ecddbc045508e2ea23bf1e6bd7044cbc0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>WCF Analytic Tracing</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WCF Analytic Tracing</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to add your own tracing events into the stream of analytic traces that Windows Communication Foundation (WCF) writes to ETW in <ph id="ph1">[!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Analytic traces are meant to make it easy to get visibility into your services without paying a high performance penalty.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This sample shows how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Eventing?displayProperty=nameWithType&gt;</ph> APIs to write events that integrate with WCF services.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Diagnostics.Eventing?displayProperty=nameWithType&gt;</ph> APIs, see <ph id="ph2">&lt;xref:System.Diagnostics.Eventing?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To learn more about event tracing in Windows, see <bpt id="p1">[</bpt>Improve Debugging and Performance Tuning with ETW<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=166488)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Disposing EventProvider</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This sample uses the <ph id="ph1">&lt;xref:System.Diagnostics.Eventing.EventProvider?displayProperty=nameWithType&gt;</ph> class, which implements <ph id="ph2">&lt;xref:System.IDisposable?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When implementing tracing for a WCF service, it is likely that you may use the <ph id="ph1">&lt;xref:System.Diagnostics.Eventing.EventProvider&gt;</ph>’s resources for the lifetime of the service.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For this reason, and for readability, this sample never disposes of the wrapped <ph id="ph1">&lt;xref:System.Diagnostics.Eventing.EventProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If for some reason your service has different requirements for tracing and you must dispose of this resource, then you should modify this sample in accordance with the best practices for disposing of unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about disposing unmanaged resources, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=166436)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Self-Hosting vs. Web Hosting</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For Web-hosted services, WCF’s analytic traces provide a field, called "HostReference", which is used to identify the service that is emitting the traces.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The extensible user traces can participate in this model and this sample demonstrates best practices for doing so.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The format of a Web host reference when the pipe ‘&amp;#124;’ character actually appears in the resulting string can be any one of the following:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the application is not at the root.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>SiteName&gt;<ph id="ph2">\&lt;</ph>ApplicationVirtualPath&gt;&amp;#124;<ph id="ph3">\&lt;</ph>ServiceVirtualPath&gt;&amp;#124;<ph id="ph4">\&lt;</ph>ServiceName&gt;</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the application is at the root.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>SiteName&gt;&amp;#124;<ph id="ph2">\&lt;</ph>ServiceVirtualPath&gt;&amp;#124;<ph id="ph3">\&lt;</ph>ServiceName&gt;</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For self-hosted services, WCF’s analytic traces do not populate the "HostReference" field.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WCFUserEventProvider`</ph> class in this sample behaves consistently when used by a self-hosted service.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Custom Event Details</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>WCF’s ETW Event Provider manifest defines three events that are designed to be emitted by WCF service authors from within service code.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following table shows a breakdown of the three events.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Event</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Event ID</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>UserDefinedInformationEventOccurred</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Emit this event when something of note happens in your service that is not a problem.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, you might emit an event after successfully making a call to a database.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>301</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>UserDefinedWarningOccurred</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Emit this event when a problem occurs that may result in a failure in the future.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, you may emit a warning event when a call to a database fails but you were able to recover by falling back to a redundant data store.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>302</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>UserDefinedErrorOccurred</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Emit this event when your service fails to behave as expected.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, you might emit an event if a call to a database fails and you could not retrieve the data from elsewhere.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>303</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To use this sample</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Using Visual Studio 2012, open the WCFAnalyticTracingExtensibility.sln solution file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To build the solution, press CTRL+SHIFT+B.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To run the solution, press CTRL+F5.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the Web browser, click <bpt id="p1">**</bpt>Calculator.svc<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The URI of the WSDL document for the service should appear in the browser.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Copy that URI.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Run the WCF test client (WcfTestClient.exe).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The WCF test client (WcfTestClient.exe) is located at <ph id="ph1">`\&lt;Visual Studio 2012 Install Dir&gt;\Common7\IDE\WcfTestClient.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The default Visual Studio 2012 install dir is <ph id="ph1">`C:\Program Files\Microsoft Visual Studio 10.0`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Within the WCF test client, add the service by selecting <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, and then <bpt id="p2">**</bpt>Add Service<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add the endpoint address in the input box.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to close the dialog.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The ICalculator service is added in the left pane under <bpt id="p1">**</bpt>My Service Projects<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Open the Event Viewer application.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Before invoking the service, start Event Viewer and ensure that the event log is listening for tracking events emitted from the WCF service.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>Administrative Tools<ept id="p2">**</ept>, and then <bpt id="p3">**</bpt>Event Viewer<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Enable the <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> logs.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the tree view in Event Viewer, navigate to <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Applications and Services Logs<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Microsoft<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>, and then <bpt id="p5">**</bpt>Application Server-Applications<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Application Server-Applications<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>View<ept id="p2">**</ept>, and then <bpt id="p3">**</bpt>Show Analytic and Debug Logs<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Ensure that the <bpt id="p1">**</bpt>Show Analytic and Debug Logs<ept id="p1">**</ept> option is checked.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enable the <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept> log.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the tree view in Event Viewer, navigate to <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Applications and Services Logs<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Microsoft<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Application Server-Applications<ept id="p5">**</ept>, and then <bpt id="p6">**</bpt>Analytic<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept> and select <bpt id="p2">**</bpt>Enable Log<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Test the service using the WCF Test Client.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the WCF Test Client, double-click <bpt id="p1">**</bpt>Add()<ept id="p1">**</ept> under the ICalculator service node.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add()<ept id="p1">**</ept> method appears in the right pane with two parameters.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Type in 2 for the first parameter and 3 for the second parameter.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> to invoke the method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Go to the <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept> window that you have already opened.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Navigate to <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Applications and Services Logs<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Microsoft<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Application Server-Applications<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept> node and select <bpt id="p2">**</bpt>Refresh<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The events appear in the right pane.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Locate the event with the ID of 303 and double-click it to open it up and inspect its contents.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This event was emitted by the <ph id="ph1">`Add()`</ph> method of the ICalculator service and has a payload equal to "2+3=5".</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To clean up (Optional)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Navigate to <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Applications and Services Logs<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Microsoft<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>, and then <bpt id="p5">**</bpt>Application-Server-Applications<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept> and select <bpt id="p2">**</bpt>Disable Log<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Navigate to <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Applications and Services Logs<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Microsoft<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Application-Server-Applications<ept id="p5">**</ept>, and then <bpt id="p6">**</bpt>Analytic<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept> and select <bpt id="p2">**</bpt>Clear Log<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Clear<ept id="p1">**</ept> to clear the events.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Known Issue</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>There is a known issue in the <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept> where it may fail to decode ETW events.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You may see an error message that says: "The description for Event ID <ph id="ph1">\&lt;</ph>id&gt; from source Microsoft-Windows-Application Server-Applications cannot be found.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Either the component that raises this event is not installed on your local computer or the installation is corrupted.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can install or repair the component on the local computer."</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If you encounter this error, select <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Actions<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The event should then decode properly.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your computer.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id="ph1">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AppFabric Monitoring Samples<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=193959)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>