{"content":"---\ntitle: \"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"user-defined conversions [C#]\"\nms.assetid: 97839aef-8fbc-40d5-9769-6b569bc2710b\ncaps.latest.revision: 11\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)\nThis example defines two structs, `RomanNumeral` and `BinaryNumeral`, and demonstrates conversions between them.  \n  \n## Example  \n [!code-cs[csProgGuideStatements#13](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-implement-user-defined-conversions-between-structs_1.cs)]  \n  \n## Robust Programming  \n  \n-   In the previous example, the statement:  \n  \n     [!code-cs[csProgGuideStatements#14](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-implement-user-defined-conversions-between-structs_2.cs)]  \n  \n     performs a conversion from a `RomanNumeral` to a `BinaryNumeral`. Because there is no direct conversion from `RomanNumeral` to `BinaryNumeral`, a cast is used to convert from a `RomanNumeral` to an `int`, and another cast to convert from an `int` to a `BinaryNumeral`.  \n  \n-   Also the statement  \n  \n     [!code-cs[csProgGuideStatements#15](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-implement-user-defined-conversions-between-structs_3.cs)]  \n  \n     performs a conversion from a `BinaryNumeral` to a `RomanNumeral`. Because `RomanNumeral` defines an implicit conversion from `BinaryNumeral`, no cast is required.  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)","nodes":[{"pos":[4,589],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"user-defined conversions [C#]\"\nms.assetid: 97839aef-8fbc-40d5-9769-6b569bc2710b\ncaps.latest.revision: 11\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,98],"content":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide) | Microsoft Docs","pos":[0,98]}]}],"path":["title"]}],"yml":true},{"pos":[596,677],"content":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)","linkify":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)","nodes":[{"content":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)","pos":[0,81]}]},{"pos":[678,790],"content":"This example defines two structs, <ph id=\"ph1\">`RomanNumeral`</ph> and <ph id=\"ph2\">`BinaryNumeral`</ph>, and demonstrates conversions between them.","source":"This example defines two structs, `RomanNumeral` and `BinaryNumeral`, and demonstrates conversions between them."},{"pos":[799,806],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[992,1010],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"In the previous example, the statement:","pos":[1020,1059]},{"content":"performs a conversion from a <ph id=\"ph1\">`RomanNumeral`</ph> to a <ph id=\"ph2\">`BinaryNumeral`</ph>.","pos":[1254,1319],"source":"performs a conversion from a `RomanNumeral` to a `BinaryNumeral`."},{"content":"Because there is no direct conversion from <ph id=\"ph1\">`RomanNumeral`</ph> to <ph id=\"ph2\">`BinaryNumeral`</ph>, a cast is used to convert from a <ph id=\"ph3\">`RomanNumeral`</ph> to an <ph id=\"ph4\">`int`</ph>, and another cast to convert from an <ph id=\"ph5\">`int`</ph> to a <ph id=\"ph6\">`BinaryNumeral`</ph>.","pos":[1320,1522],"source":" Because there is no direct conversion from `RomanNumeral` to `BinaryNumeral`, a cast is used to convert from a `RomanNumeral` to an `int`, and another cast to convert from an `int` to a `BinaryNumeral`."},{"content":"Also the statement","pos":[1532,1550]},{"content":"performs a conversion from a <ph id=\"ph1\">`BinaryNumeral`</ph> to a <ph id=\"ph2\">`RomanNumeral`</ph>.","pos":[1745,1810],"source":"performs a conversion from a `BinaryNumeral` to a `RomanNumeral`."},{"content":"Because <ph id=\"ph1\">`RomanNumeral`</ph> defines an implicit conversion from <ph id=\"ph2\">`BinaryNumeral`</ph>, no cast is required.","pos":[1811,1907],"source":" Because `RomanNumeral` defines an implicit conversion from `BinaryNumeral`, no cast is required."},{"pos":[1916,1924],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1928,1988],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1992,2059],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Conversion Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)</ept>","pos":[2063,2177],"source":"[Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)"}]}