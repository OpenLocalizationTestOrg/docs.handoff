<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-801bb9d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce5f71ab3e797015a26dddbf0579c84dec580750</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tour-of-csharp\expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d655e5316f60ebfcd85a88ee3e1629d3764b3d0d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50163cd60bcf773aba35134b75880e48717b698a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C# Expressions | A tour of the C# language</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>expressions, operands, and operators are building blocks of the C# language</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, csharp, expression, operator, operand</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Expressions</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Expressions<ept id="p1">*</ept> are constructed from <bpt id="p2">*</bpt>operands<ept id="p2">*</ept> and <bpt id="p3">*</bpt>operators<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The operators of an expression indicate which operations to apply to the operands.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Examples of operators include <ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`*`</ph>, <ph id="ph4">`/`</ph>, and <ph id="ph5">`new`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Examples of operands include literals, fields, local variables, and expressions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When an expression contains multiple operators, the <bpt id="p1">*</bpt>precedence<ept id="p1">*</ept> of the operators controls the order in which the individual operators are evaluated.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the expression <ph id="ph1">`x + y * z`</ph> is evaluated as <ph id="ph2">`x + (y * z)`</ph> because the <ph id="ph3">`*`</ph> operator has higher precedence than the <ph id="ph4">`+`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When an operand occurs between two operators with the same precedence, the <bpt id="p1">*</bpt>associativity<ept id="p1">*</ept> of the operators controls the order in which the operations are performed:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Except for the assignment operators, all binary operators are <bpt id="p1">*</bpt>left-associative<ept id="p1">*</ept>, meaning that operations are performed from left to right.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`x + y + z`</ph> is evaluated as <ph id="ph2">`(x + y) + z`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The assignment operators and the conditional operator (<ph id="ph1">`?:`</ph>) are <bpt id="p1">*</bpt>right-associative<ept id="p1">*</ept>, meaning that operations are performed from right to left.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`x = y = z`</ph> is evaluated as <ph id="ph2">`x = (y = z)`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Precedence and associativity can be controlled using parentheses.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`x + y * z`</ph> first multiplies <ph id="ph2">`y`</ph> by <ph id="ph3">`z`</ph> and then adds the result to <ph id="ph4">`x`</ph>, but <ph id="ph5">`(x + y) * z`</ph> first adds <ph id="ph6">`x`</ph> and <ph id="ph7">`y`</ph> and then multiplies the result by <ph id="ph8">`z`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Most operators can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Operator overloading permits user-defined operator implementations to be specified for operations where one or both of the operands are of a user-defined class or struct type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following summarizes C#â€™s operators, listing the operator categories in order of precedence from highest to lowest.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Operators in the same category have equal precedence.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Under each category is a list of expressions in that category along with the description of that expression type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Primary</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x.m`</ph>: Member access</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x(...)`</ph>: Method and delegate invocation</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x[...]`</ph>: Array and indexer access</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x++`</ph>: Post-increment</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x--`</ph>: Post-decrement</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`new T(...)`</ph>: Object and delegate creation</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`new T(...){...}`</ph>: Object creation with initializer</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`new {...}`</ph>:  Anonymous object initializer</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`new T[...]`</ph>: Array creation</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`typeof(T)`</ph>: Obtain <ph id="ph2">@System.Type</ph> object for <ph id="ph3">`T`</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`checked(x)`</ph>: Evaluate expression in checked context</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`unchecked(x)`</ph>: Evaluate expression in unchecked context</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`default(T)`</ph>: Obtain default value of type <ph id="ph2">`T`</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`delegate {...}`</ph>: Anonymous function (anonymous method)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unary</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`+x`</ph>: Identity</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-x`</ph>: Negation</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`!x`</ph>: Logical negation</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`~x`</ph>: Bitwise negation</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`++x`</ph>: Pre-increment</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`--x`</ph>: Pre-decrement</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(T)x`</ph>: Explicitly convert <ph id="ph2">`x`</ph> to type <ph id="ph3">`T`</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`await x`</ph>: Asynchronously wait for <ph id="ph2">`x`</ph> to complete</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Multiplicative</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x * y`</ph>: Multiplication</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x / y`</ph>: Division</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x % y`</ph>: Remainder</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Additive</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x + y`</ph>: Addition, string concatenation, delegate combination</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x â€“ y`</ph>: Subtraction, delegate removal</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Shift</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x &lt;&lt; y`</ph>: Shift left</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x &gt;&gt; y`</ph>: Shift right</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Relational and type testing</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x &lt; y`</ph>: Less than</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x &gt; y`</ph>: Greater than</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x &lt;= y`</ph>: Less than or equal</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x &gt;= y`</ph>: Greater than or equal</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x is T`</ph>: Return <ph id="ph2">`true`</ph> if <ph id="ph3">`x`</ph> is a <ph id="ph4">`T`</ph>, <ph id="ph5">`false`</ph> otherwise</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x as T`</ph>: Return <ph id="ph2">`x`</ph> typed as <ph id="ph3">`T`</ph>, or <ph id="ph4">`null`</ph> if <ph id="ph5">`x`</ph> is not a <ph id="ph6">`T`</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Equality</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x == y`</ph>: Equal</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x != y`</ph>: Not equal</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Logical AND</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x &amp; y`</ph>: Integer bitwise AND, boolean logical AND</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Logical XOR</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x ^ y`</ph>: Integer bitwise XOR, boolean logical XOR</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Logical OR</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x | y`</ph>: Integer bitwise OR, boolean logical OR</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Conditional AND</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x &amp;&amp; y`</ph>: Evaluates <ph id="ph2">`y`</ph> only if <ph id="ph3">`x`</ph> is not <ph id="ph4">`false`</ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Conditional OR</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x || y`</ph>: Evaluates <ph id="ph2">`y`</ph> only if <ph id="ph3">`x`</ph> is not <ph id="ph4">`true`</ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Null coalescing</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x ?? y`</ph>: Evaluates to <ph id="ph2">`y`</ph> if <ph id="ph3">`x`</ph> is null, to <ph id="ph4">`x`</ph> otherwise</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Conditional</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x ? y : z`</ph>: Evaluates <ph id="ph2">`y`</ph> if <ph id="ph3">`x`</ph> is <ph id="ph4">`true`</ph>, <ph id="ph5">`z`</ph> if <ph id="ph6">`x`</ph> is <ph id="ph7">`false`</ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Assignment or anonymous function</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x = y`</ph>: Assignment</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x op= y`</ph>: Compound assignment; supported operators are</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`*=`</ph>   <ph id="ph2">`/=`</ph>   <ph id="ph3">`%=`</ph>   <ph id="ph4">`+=`</ph>   <ph id="ph5">`-=`</ph>   <ph id="ph6">`&lt;&lt;=`</ph>   <ph id="ph7">`&gt;&gt;=`</ph>   <ph id="ph8">`&amp;=`</ph>  <ph id="ph9">`^=`</ph>  <ph id="ph10">`|=`</ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(T x) =&gt; y`</ph>: Anonymous function (lambda expression)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous<ept id="p1">](types-and-variables.md)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Next<ept id="p2">](statements.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>