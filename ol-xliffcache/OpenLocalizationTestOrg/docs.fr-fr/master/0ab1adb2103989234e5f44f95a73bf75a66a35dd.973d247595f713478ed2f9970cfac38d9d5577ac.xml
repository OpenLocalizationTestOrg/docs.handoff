{"content":"---\ntitle: \"Using Namespaces (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.names\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"fully qualified names [C#]\"\n  - \"namespaces [C#], how to use\"\nms.assetid: 1fe8bf39-addc-438a-bd9e-86410e32381d\ncaps.latest.revision: 26\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using Namespaces (C# Programming Guide)\nNamespaces are heavily used within C# programs in two ways. Firstly, the .NET Framework classes use namespaces to organize its many classes. Secondly, declaring your own namespaces can help control the scope of class and method names in larger programming projects.  \n  \n## Accessing Namespaces  \n Most C# applications begin with a section of `using` directives. This section lists the namespaces that the application will be using frequently, and saves the programmer from specifying a fully qualified name every time that a method that is contained within is used.  \n  \n For example, by including the line:  \n  \n [!code-cs[csProgGuide#1](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_1.cs)]  \n  \n At the start of a program, the programmer can use the code:  \n  \n [!code-cs[csProgGuide#31](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_2.cs)]  \n  \n Instead of:  \n  \n [!code-cs[csProgGuide#30](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_3.cs)]  \n  \n## Namespace Aliases  \n The [using Directive](../../../csharp/language-reference/keywords/using-directive.md) can also be used to create an alias for a [namespace](../../../csharp/language-reference/keywords/namespace.md). For example, if you are using a previously written namespace that contains nested namespaces, you might want to declare an alias to provide a shorthand way of referencing one in particular, as in the following example:  \n  \n [!code-cs[csProgGuideNamespaces#7](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_4.cs)]  \n  \n## Using Namespaces to control scope  \n The `namespace` keyword is used to declare a scope. The ability to create scopes within your project helps organize code and lets you create globally-unique types. In the following example, a class titled `SampleClass` is defined in two namespaces, one nested inside the other. The [. Operator](../../../csharp/language-reference/operators/member-access-operator.md) is used to differentiate which method gets called.  \n  \n [!code-cs[csProgGuideNamespaces#8](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_5.cs)]  \n  \n## Fully Qualified Names  \n Namespaces and types have unique titles described by fully qualified names that indicate a logical hierarchy. For example, the statement `A.B` implies that `A` is the name of the namespace or type, and `B` is nested inside it.  \n  \n In the following example, there are nested classes and namespaces. The fully qualified name is indicated as a comment following each entity.  \n  \n [!code-cs[csProgGuideNamespaces#9](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_6.cs)]  \n  \n In the previous code segment:  \n  \n-   The namespace `N1` is a member of the global namespace. Its fully qualified name is `N1`.  \n  \n-   The namespace `N2` is a member of `N1`. Its fully qualified name is `N1.N2`.  \n  \n-   The class `C1` is a member of `N1`. Its fully qualified name is `N1.C1`.  \n  \n-   The class name `C2` is used two times in this code. However, the fully qualified names are unique. The first instance of `C2` is declared inside `C1`; therefore, its fully qualified name is: `N1.C1.C2`. The second instance of `C2` is declared inside a namespace `N2`; therefore, its fully qualified name is `N1.N2.C2`.  \n  \n Using the previous code segment, you can add a new class member, `C3`, to the namespace `N1.N2` as follows:  \n  \n [!code-cs[csProgGuideNamespaces#10](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_7.cs)]  \n  \n In general, use `::` to reference a namespace alias or `global::` to reference the global namespace and `.` to qualify types or members.  \n  \n It is an error to use `::` with an alias that references a type instead of a namespace. For example:  \n  \n [!code-cs[csProgGuideNamespaces#11](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_8.cs)]  \n  \n [!code-cs[csProgGuideNamespaces#12](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_9.cs)]  \n  \n Remember that the word `global` is not a predefined alias; therefore, `global.X` does not have any special meaning. It acquires a special meaning only when it is used with `::`.  \n  \n Compiler warning CS0440 is generated if you define an alias named global because `global::` always references the global namespace and not an alias. For example, the following line generates the warning:  \n  \n [!code-cs[csProgGuideNamespaces#13](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_10.cs)]  \n  \n Using `::` with aliases is a good idea and protects against the unexpected introduction of additional types. For example, consider this example:  \n  \n [!code-cs[csProgGuideNamespaces#14](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_11.cs)]  \n  \n [!code-cs[csProgGuideNamespaces#15](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_12.cs)]  \n  \n This works, but if a type named `Alias` were to subsequently be introduced, `Alias.` would bind to that type instead. Using `Alias::Exception` insures that `Alias` is treated as a namespace alias and not mistaken for a type.  \n  \n See the topic [How to: Use the Global Namespace Alias](../../../csharp/programming-guide/namespaces/how-to-use-the-global-namespace-alias.md) for more information regarding the `global` alias.  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Namespaces](../../../csharp/programming-guide/namespaces/index.md)   \n [Namespace Keywords](../../../csharp/language-reference/keywords/namespace-keywords.md)   \n [. Operator](../../../csharp/language-reference/operators/member-access-operator.md)   \n [:: Operator](../../../csharp/language-reference/operators/namespace-alias-qualifer.md)   \n [extern](../../../csharp/language-reference/keywords/extern.md)","nodes":[{"pos":[4,607],"nodes":[{"content":"Using Namespaces (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,56],"content":"Using Namespaces (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Using Namespaces (C# Programming Guide) | Microsoft Docs","pos":[0,56]}]}],"pos":[6,65],"yaml":true}],"content":"title: \"Using Namespaces (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.names\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"fully qualified names [C#]\"\n  - \"namespaces [C#], how to use\"\nms.assetid: 1fe8bf39-addc-438a-bd9e-86410e32381d\ncaps.latest.revision: 26\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[614,653],"content":"Using Namespaces (C# Programming Guide)","linkify":"Using Namespaces (C# Programming Guide)","nodes":[{"content":"Using Namespaces (C# Programming Guide)","pos":[0,39]}]},{"content":"Namespaces are heavily used within C# programs in two ways.","pos":[654,713]},{"content":"Firstly, the .NET Framework classes use namespaces to organize its many classes.","pos":[714,794]},{"content":"Secondly, declaring your own namespaces can help control the scope of class and method names in larger programming projects.","pos":[795,919]},{"pos":[928,948],"content":"Accessing Namespaces","linkify":"Accessing Namespaces","nodes":[{"content":"Accessing Namespaces","pos":[0,20]}]},{"content":"Most C# applications begin with a section of <ph id=\"ph1\">`using`</ph> directives.","pos":[952,1016],"source":"Most C# applications begin with a section of `using` directives."},{"content":"This section lists the namespaces that the application will be using frequently, and saves the programmer from specifying a fully qualified name every time that a method that is contained within is used.","pos":[1017,1220]},{"content":"For example, by including the line:","pos":[1227,1262]},{"pos":[1269,1387],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuide#1<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuide#1](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_1.cs)]"},{"content":"At the start of a program, the programmer can use the code:","pos":[1394,1453]},{"pos":[1460,1579],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuide#31<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuide#31](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_2.cs)]"},{"content":"Instead of:","pos":[1586,1597]},{"pos":[1604,1723],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuide#30<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuide#30](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_3.cs)]"},{"pos":[1732,1749],"content":"Namespace Aliases","linkify":"Namespace Aliases","nodes":[{"content":"Namespace Aliases","pos":[0,17]}]},{"content":"The <bpt id=\"p1\">[</bpt>using Directive<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-directive.md)</ept> can also be used to create an alias for a <bpt id=\"p2\">[</bpt>namespace<ept id=\"p2\">](../../../csharp/language-reference/keywords/namespace.md)</ept>.","pos":[1753,1951],"source":"The [using Directive](../../../csharp/language-reference/keywords/using-directive.md) can also be used to create an alias for a [namespace](../../../csharp/language-reference/keywords/namespace.md)."},{"content":"For example, if you are using a previously written namespace that contains nested namespaces, you might want to declare an alias to provide a shorthand way of referencing one in particular, as in the following example:","pos":[1952,2170]},{"pos":[2177,2299],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#7<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#7](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_4.cs)]"},{"pos":[2308,2341],"content":"Using Namespaces to control scope","linkify":"Using Namespaces to control scope","nodes":[{"content":"Using Namespaces to control scope","pos":[0,33]}]},{"content":"The <ph id=\"ph1\">`namespace`</ph> keyword is used to declare a scope.","pos":[2345,2396],"source":"The `namespace` keyword is used to declare a scope."},{"content":"The ability to create scopes within your project helps organize code and lets you create globally-unique types.","pos":[2397,2508]},{"content":"In the following example, a class titled <ph id=\"ph1\">`SampleClass`</ph> is defined in two namespaces, one nested inside the other.","pos":[2509,2622],"source":" In the following example, a class titled `SampleClass` is defined in two namespaces, one nested inside the other."},{"content":"The <bpt id=\"p1\">[</bpt>. Operator<ept id=\"p1\">](../../../csharp/language-reference/operators/member-access-operator.md)</ept> is used to differentiate which method gets called.","pos":[2623,2762],"source":" The [. Operator](../../../csharp/language-reference/operators/member-access-operator.md) is used to differentiate which method gets called."},{"pos":[2769,2891],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#8<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#8](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_5.cs)]"},{"pos":[2900,2921],"content":"Fully Qualified Names","linkify":"Fully Qualified Names","nodes":[{"content":"Fully Qualified Names","pos":[0,21]}]},{"content":"Namespaces and types have unique titles described by fully qualified names that indicate a logical hierarchy.","pos":[2925,3034]},{"content":"For example, the statement <ph id=\"ph1\">`A.B`</ph> implies that <ph id=\"ph2\">`A`</ph> is the name of the namespace or type, and <ph id=\"ph3\">`B`</ph> is nested inside it.","pos":[3035,3151],"source":" For example, the statement `A.B` implies that `A` is the name of the namespace or type, and `B` is nested inside it."},{"content":"In the following example, there are nested classes and namespaces.","pos":[3158,3224]},{"content":"The fully qualified name is indicated as a comment following each entity.","pos":[3225,3298]},{"pos":[3305,3427],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#9<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_6.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#9](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_6.cs)]"},{"content":"In the previous code segment:","pos":[3434,3463]},{"content":"The namespace <ph id=\"ph1\">`N1`</ph> is a member of the global namespace.","pos":[3473,3528],"source":"The namespace `N1` is a member of the global namespace."},{"content":"Its fully qualified name is <ph id=\"ph1\">`N1`</ph>.","pos":[3529,3562],"source":" Its fully qualified name is `N1`."},{"content":"The namespace <ph id=\"ph1\">`N2`</ph> is a member of <ph id=\"ph2\">`N1`</ph>.","pos":[3572,3611],"source":"The namespace `N2` is a member of `N1`."},{"content":"Its fully qualified name is <ph id=\"ph1\">`N1.N2`</ph>.","pos":[3612,3648],"source":" Its fully qualified name is `N1.N2`."},{"content":"The class <ph id=\"ph1\">`C1`</ph> is a member of <ph id=\"ph2\">`N1`</ph>.","pos":[3658,3693],"source":"The class `C1` is a member of `N1`."},{"content":"Its fully qualified name is <ph id=\"ph1\">`N1.C1`</ph>.","pos":[3694,3730],"source":" Its fully qualified name is `N1.C1`."},{"content":"The class name <ph id=\"ph1\">`C2`</ph> is used two times in this code.","pos":[3740,3791],"source":"The class name `C2` is used two times in this code."},{"content":"However, the fully qualified names are unique.","pos":[3792,3838]},{"content":"The first instance of <ph id=\"ph1\">`C2`</ph> is declared inside <ph id=\"ph2\">`C1`</ph>; therefore, its fully qualified name is: <ph id=\"ph3\">`N1.C1.C2`</ph>.","pos":[3839,3942],"source":" The first instance of `C2` is declared inside `C1`; therefore, its fully qualified name is: `N1.C1.C2`."},{"content":"The second instance of <ph id=\"ph1\">`C2`</ph> is declared inside a namespace <ph id=\"ph2\">`N2`</ph>; therefore, its fully qualified name is <ph id=\"ph3\">`N1.N2.C2`</ph>.","pos":[3943,4058],"source":" The second instance of `C2` is declared inside a namespace `N2`; therefore, its fully qualified name is `N1.N2.C2`."},{"pos":[4065,4172],"content":"Using the previous code segment, you can add a new class member, <ph id=\"ph1\">`C3`</ph>, to the namespace <ph id=\"ph2\">`N1.N2`</ph> as follows:","source":"Using the previous code segment, you can add a new class member, `C3`, to the namespace `N1.N2` as follows:"},{"pos":[4179,4302],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#10<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_7.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#10](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_7.cs)]"},{"pos":[4309,4445],"content":"In general, use <ph id=\"ph1\">`::`</ph> to reference a namespace alias or <ph id=\"ph2\">`global::`</ph> to reference the global namespace and <ph id=\"ph3\">`.`</ph> to qualify types or members.","source":"In general, use `::` to reference a namespace alias or `global::` to reference the global namespace and `.` to qualify types or members."},{"content":"It is an error to use <ph id=\"ph1\">`::`</ph> with an alias that references a type instead of a namespace.","pos":[4452,4539],"source":"It is an error to use `::` with an alias that references a type instead of a namespace."},{"content":"For example:","pos":[4540,4552]},{"pos":[4559,4682],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#11<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_8.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#11](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_8.cs)]"},{"pos":[4689,4812],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#12<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_9.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#12](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_9.cs)]"},{"content":"Remember that the word <ph id=\"ph1\">`global`</ph> is not a predefined alias; therefore, <ph id=\"ph2\">`global.X`</ph> does not have any special meaning.","pos":[4819,4934],"source":"Remember that the word `global` is not a predefined alias; therefore, `global.X` does not have any special meaning."},{"content":"It acquires a special meaning only when it is used with <ph id=\"ph1\">`::`</ph>.","pos":[4935,4996],"source":" It acquires a special meaning only when it is used with `::`."},{"content":"Compiler warning CS0440 is generated if you define an alias named global because <ph id=\"ph1\">`global::`</ph> always references the global namespace and not an alias.","pos":[5003,5151],"source":"Compiler warning CS0440 is generated if you define an alias named global because `global::` always references the global namespace and not an alias."},{"content":"For example, the following line generates the warning:","pos":[5152,5206]},{"pos":[5213,5337],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#13<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_10.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#13](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_10.cs)]"},{"content":"Using <ph id=\"ph1\">`::`</ph> with aliases is a good idea and protects against the unexpected introduction of additional types.","pos":[5344,5452],"source":"Using `::` with aliases is a good idea and protects against the unexpected introduction of additional types."},{"content":"For example, consider this example:","pos":[5453,5488]},{"pos":[5495,5619],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#14<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_11.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#14](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_11.cs)]"},{"pos":[5626,5750],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamespaces#15<ept id=\"p2\">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_12.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamespaces#15](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_12.cs)]"},{"content":"This works, but if a type named <ph id=\"ph1\">`Alias`</ph> were to subsequently be introduced, <ph id=\"ph2\">`Alias.`</ph> would bind to that type instead.","pos":[5757,5874],"source":"This works, but if a type named `Alias` were to subsequently be introduced, `Alias.` would bind to that type instead."},{"content":"Using <ph id=\"ph1\">`Alias::Exception`</ph> insures that <ph id=\"ph2\">`Alias`</ph> is treated as a namespace alias and not mistaken for a type.","pos":[5875,5981],"source":" Using `Alias::Exception` insures that `Alias` is treated as a namespace alias and not mistaken for a type."},{"pos":[5988,6180],"content":"See the topic <bpt id=\"p1\">[</bpt>How to: Use the Global Namespace Alias<ept id=\"p1\">](../../../csharp/programming-guide/namespaces/how-to-use-the-global-namespace-alias.md)</ept> for more information regarding the <ph id=\"ph1\">`global`</ph> alias.","source":"See the topic [How to: Use the Global Namespace Alias](../../../csharp/programming-guide/namespaces/how-to-use-the-global-namespace-alias.md) for more information regarding the `global` alias."},{"pos":[6189,6197],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[6201,6268],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Namespaces<ept id=\"p1\">](../../../csharp/programming-guide/namespaces/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[6272,6340],"source":"[Namespaces](../../../csharp/programming-guide/namespaces/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Namespace Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/namespace-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[6344,6432],"source":"[Namespace Keywords](../../../csharp/language-reference/keywords/namespace-keywords.md) "},{"content":"<bpt id=\"p1\">[</bpt>. Operator<ept id=\"p1\">](../../../csharp/language-reference/operators/member-access-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[6436,6521],"source":"[. Operator](../../../csharp/language-reference/operators/member-access-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>:: Operator<ept id=\"p1\">](../../../csharp/language-reference/operators/namespace-alias-qualifer.md)</ept><ph id=\"ph1\"> </ph>","pos":[6525,6613],"source":"[:: Operator](../../../csharp/language-reference/operators/namespace-alias-qualifer.md) "},{"content":"<bpt id=\"p1\">[</bpt>extern<ept id=\"p1\">](../../../csharp/language-reference/keywords/extern.md)</ept>","pos":[6617,6680],"source":"[extern](../../../csharp/language-reference/keywords/extern.md)"}]}