{"content":"---\ntitle: Build a Visual Basic .NET Standard class library in Visual Studio 2017\ndescription: Learn how to build a .NET Standard class library written in Visual Basic using Visual Studio 2017\nauthor: rpetrusha\nms.author: ronpet\nms.date: 08/07/2017\ndev_langs: \n  - \"vb\"\nms.custom: \"vs-dotnet, seodec18\"\n---\n# Build a .NET Standard library with Visual Basic and the .NET Core SDK in Visual Studio 2017\n\nA *class library* defines types and methods that are called by an application. A class library that targets the .NET Standard 2.0 allows your library to be called by any .NET implementation that supports that version of the .NET Standard. When you finish your class library, you can decide whether you want to distribute it as a third-party component or whether you want to include it as a bundled component with one or more applications.\n\n> [!NOTE]\n> For a list of the .NET Standard versions and the platforms they support, see [.NET Standard](../../standard/net-standard.md).\n\nIn this topic, you'll create a simple utility library that contains a single string-handling method. You'll implement it as an [extension method](../../visual-basic/programming-guide/language-features/procedures/extension-methods.md) so that you can call it as if it were a member of the <xref:System.String> class.\n\n## Creating a class library solution\n\nStart by creating a solution for your class library project and its related projects. A Visual Studio Solution just serves as a container for one or more projects. To create the solution:\n\n1. On the Visual Studio menu bar, choose **File** > **New** > **Project**.\n\n1. In the **New Project** dialog, expand the **Other Project Types** node, and select **Visual Studio Solutions**. Name the solution \"ClassLibraryProjects\" and select the **OK** button.\n\n   ![Visual Studio create new test project dialog](./media/library-with-visual-studio/new-project-dialog.png)\n\n## Creating the class library project\n\nCreate your class library project:\n\n1. In **Solution Explorer**, right-click on the **ClassLibraryProjects** solution file and from the context menu, select **Add** > **New Project**.\n\n1. In the **Add New Project** dialog, expand the **Visual Basic** node, then select the **.NET Standard** node followed by the **Class Library (.NET Standard)** project template. In the **Name** text box, enter \"StringLibrary\" as the name of the project. Select **OK** to create the class library project.\n\n   ![Visual Studio add new library project dialog](./media/vb-library-with-visual-studio/create-new-library-project.png)\n\n   The code window then opens in the Visual Studio development environment. \n \n   ![Visual Studio application window showing the default class library template code](./media/vb-library-with-visual-studio/visual-studio-library.png)\n\n1. Check to make sure that the library targets the correct version of the .NET Standard. Right-click on the library project in the **Solution Explorer** windows, then select **Properties**. The **Target Framework** text box shows that we're targeting .NET Standard 2.0.\n\n   ![Project properties for the class library](./media/library-with-visual-studio/library-project-properties.png)\n\n1. Also in the **Properties** dialog, clear the text in the **Root namespace** text box. For each project, Visual Basic automatically creates a namespace that corresponds to the project name, and any namespaces defined in source code files are parents of that namespace. We want to define a top-level namespace by using the [`namespace`](../../visual-basic/language-reference/statements/namespace-statement.md) keyword.\n  \n1. Replace the code in the code window with the following code and save the file:\n\n  [!CODE-vb[ClassLib#1](../../../samples/snippets/core/tutorials/vb-library-with-visual-studio/stringlibrary.vb)]\n\n   The class library, `UtilityLibraries.StringLibrary`, contains a method named `StartsWithUpper`, which returns a <xref:System.Boolean> value that indicates whether the current string instance begins with an uppercase character. The Unicode standard distinguishes uppercase characters from lowercase characters. The <xref:System.Char.IsUpper(System.Char)?displayProperty=nameWithType> method returns `true` if a character is uppercase.\n\n1. On the menu bar, select **Build** > **Build Solution**. The project should compile without error.\n\n   ![Output pane showing that the build succeeded](./media/library-with-visual-studio/output-pane-successful-build.png)\n\n## Next step\n\nYou've successfully built the library. Because you haven't called any of its methods, you don't know whether it works as expected. The next step in developing your library is to test it by using a [Unit Test Project](testing-library-with-visual-studio.md).\n","nodes":[{"pos":[4,302],"embed":true,"restype":"x-metadata","content":"title: Build a Visual Basic .NET Standard class library in Visual Studio 2017\ndescription: Learn how to build a .NET Standard class library written in Visual Basic using Visual Studio 2017\nauthor: rpetrusha\nms.author: ronpet\nms.date: 08/07/2017\ndev_langs: \n  - \"vb\"\nms.custom: \"vs-dotnet, seodec18\"","nodes":[{"content":"Build a Visual Basic .NET Standard class library in Visual Studio 2017","nodes":[{"pos":[0,70],"content":"Build a Visual Basic .NET Standard class library in Visual Studio 2017","nodes":[{"content":"Build a Visual Basic .NET Standard class library in Visual Studio 2017","pos":[0,70]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to build a .NET Standard class library written in Visual Basic using Visual Studio 2017","nodes":[{"pos":[0,97],"content":"Learn how to build a .NET Standard class library written in Visual Basic using Visual Studio 2017","nodes":[{"content":"Learn how to build a .NET Standard class library written in Visual Basic using Visual Studio 2017","pos":[0,97]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[309,400],"content":"Build a .NET Standard library with Visual Basic and the .NET Core SDK in Visual Studio 2017","linkify":"Build a .NET Standard library with Visual Basic and the .NET Core SDK in Visual Studio 2017","nodes":[{"content":"Build a .NET Standard library with Visual Basic and the .NET Core SDK in Visual Studio 2017","pos":[0,91]}]},{"content":"A <bpt id=\"p1\">*</bpt>class library<ept id=\"p1\">*</ept> defines types and methods that are called by an application.","pos":[402,480],"source":"A *class library* defines types and methods that are called by an application."},{"content":"A class library that targets the .NET Standard 2.0 allows your library to be called by any .NET implementation that supports that version of the .NET Standard.","pos":[481,640]},{"content":"When you finish your class library, you can decide whether you want to distribute it as a third-party component or whether you want to include it as a bundled component with one or more applications.","pos":[641,840]},{"pos":[844,979],"content":"[!NOTE]\nFor a list of the .NET Standard versions and the platforms they support, see [.NET Standard](../../standard/net-standard.md).","leadings":["","> "],"nodes":[{"content":"For a list of the .NET Standard versions and the platforms they support, see <bpt id=\"p1\">[</bpt>.NET Standard<ept id=\"p1\">](../../standard/net-standard.md)</ept>.","pos":[8,133],"source":"For a list of the .NET Standard versions and the platforms they support, see [.NET Standard](../../standard/net-standard.md)."}]},{"content":"In this topic, you'll create a simple utility library that contains a single string-handling method.","pos":[981,1081]},{"content":"You'll implement it as an <bpt id=\"p1\">[</bpt>extension method<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept> so that you can call it as if it were a member of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class.","pos":[1082,1296],"source":" You'll implement it as an [extension method](../../visual-basic/programming-guide/language-features/procedures/extension-methods.md) so that you can call it as if it were a member of the <xref:System.String> class."},{"pos":[1301,1334],"content":"Creating a class library solution","linkify":"Creating a class library solution","nodes":[{"content":"Creating a class library solution","pos":[0,33]}]},{"content":"Start by creating a solution for your class library project and its related projects.","pos":[1336,1421]},{"content":"A Visual Studio Solution just serves as a container for one or more projects.","pos":[1422,1499]},{"content":"To create the solution:","pos":[1500,1523]},{"pos":[1528,1599],"content":"On the Visual Studio menu bar, choose <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"On the Visual Studio menu bar, choose **File** > **New** > **Project**."},{"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog, expand the <bpt id=\"p2\">**</bpt>Other Project Types<ept id=\"p2\">**</ept> node, and select <bpt id=\"p3\">**</bpt>Visual Studio Solutions<ept id=\"p3\">**</ept>.","pos":[1604,1715],"source":"In the **New Project** dialog, expand the **Other Project Types** node, and select **Visual Studio Solutions**."},{"content":"Name the solution \"ClassLibraryProjects\" and select the <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> button.","pos":[1716,1786],"source":" Name the solution \"ClassLibraryProjects\" and select the **OK** button."},{"content":"Visual Studio create new test project dialog","pos":[1793,1837]},{"pos":[1902,1936],"content":"Creating the class library project","linkify":"Creating the class library project","nodes":[{"content":"Creating the class library project","pos":[0,34]}]},{"content":"Create your class library project:","pos":[1938,1972]},{"pos":[1977,2121],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click on the <bpt id=\"p2\">**</bpt>ClassLibraryProjects<ept id=\"p2\">**</ept> solution file and from the context menu, select <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p4\">**</bpt>New Project<ept id=\"p4\">**</ept>.","source":"In **Solution Explorer**, right-click on the **ClassLibraryProjects** solution file and from the context menu, select **Add** > **New Project**."},{"content":"In the <bpt id=\"p1\">**</bpt>Add New Project<ept id=\"p1\">**</ept> dialog, expand the <bpt id=\"p2\">**</bpt>Visual Basic<ept id=\"p2\">**</ept> node, then select the <bpt id=\"p3\">**</bpt>.NET Standard<ept id=\"p3\">**</ept> node followed by the <bpt id=\"p4\">**</bpt>Class Library (.NET Standard)<ept id=\"p4\">**</ept> project template.","pos":[2126,2301],"source":"In the **Add New Project** dialog, expand the **Visual Basic** node, then select the **.NET Standard** node followed by the **Class Library (.NET Standard)** project template."},{"content":"In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> text box, enter \"StringLibrary\" as the name of the project.","pos":[2302,2377],"source":" In the **Name** text box, enter \"StringLibrary\" as the name of the project."},{"content":"Select <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> to create the class library project.","pos":[2378,2428],"source":" Select **OK** to create the class library project."},{"content":"Visual Studio add new library project dialog","pos":[2435,2479]},{"content":"The code window then opens in the Visual Studio development environment.","pos":[2555,2627]},{"content":"Visual Studio application window showing the default class library template code","pos":[2636,2716]},{"content":"Check to make sure that the library targets the correct version of the .NET Standard.","pos":[2787,2872]},{"content":"Right-click on the library project in the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> windows, then select <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>.","pos":[2873,2973],"source":" Right-click on the library project in the **Solution Explorer** windows, then select **Properties**."},{"content":"The <bpt id=\"p1\">**</bpt>Target Framework<ept id=\"p1\">**</ept> text box shows that we're targeting .NET Standard 2.0.","pos":[2974,3053],"source":" The **Target Framework** text box shows that we're targeting .NET Standard 2.0."},{"content":"Project properties for the class library","pos":[3060,3100]},{"content":"Also in the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> dialog, clear the text in the <bpt id=\"p2\">**</bpt>Root namespace<ept id=\"p2\">**</ept> text box.","pos":[3173,3258],"source":"Also in the **Properties** dialog, clear the text in the **Root namespace** text box."},{"content":"For each project, Visual Basic automatically creates a namespace that corresponds to the project name, and any namespaces defined in source code files are parents of that namespace.","pos":[3259,3440]},{"content":"We want to define a top-level namespace by using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`namespace`</ph><ept id=\"p1\">](../../visual-basic/language-reference/statements/namespace-statement.md)</ept> keyword.","pos":[3441,3589],"source":" We want to define a top-level namespace by using the [`namespace`](../../visual-basic/language-reference/statements/namespace-statement.md) keyword."},{"content":"Replace the code in the code window with the following code and save the file:","pos":[3596,3674]},{"content":"The class library, <ph id=\"ph1\">`UtilityLibraries.StringLibrary`</ph>, contains a method named <ph id=\"ph2\">`StartsWithUpper`</ph>, which returns a <ph id=\"ph3\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the current string instance begins with an uppercase character.","pos":[3794,4020],"source":"The class library, `UtilityLibraries.StringLibrary`, contains a method named `StartsWithUpper`, which returns a <xref:System.Boolean> value that indicates whether the current string instance begins with an uppercase character."},{"content":"The Unicode standard distinguishes uppercase characters from lowercase characters.","pos":[4021,4103]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Char.IsUpper(System.Char)?displayProperty=nameWithType&gt;</ph> method returns <ph id=\"ph2\">`true`</ph> if a character is uppercase.","pos":[4104,4227],"source":" The <xref:System.Char.IsUpper(System.Char)?displayProperty=nameWithType> method returns `true` if a character is uppercase."},{"content":"On the menu bar, select <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept>.","pos":[4232,4287],"source":"On the menu bar, select **Build** > **Build Solution**."},{"content":"The project should compile without error.","pos":[4288,4329]},{"content":"Output pane showing that the build succeeded","pos":[4336,4380]},{"pos":[4455,4464],"content":"Next step","linkify":"Next step","nodes":[{"content":"Next step","pos":[0,9]}]},{"content":"You've successfully built the library.","pos":[4466,4504]},{"content":"Because you haven't called any of its methods, you don't know whether it works as expected.","pos":[4505,4596]},{"content":"The next step in developing your library is to test it by using a <bpt id=\"p1\">[</bpt>Unit Test Project<ept id=\"p1\">](testing-library-with-visual-studio.md)</ept>.","pos":[4597,4722],"source":" The next step in developing your library is to test it by using a [Unit Test Project](testing-library-with-visual-studio.md)."}]}