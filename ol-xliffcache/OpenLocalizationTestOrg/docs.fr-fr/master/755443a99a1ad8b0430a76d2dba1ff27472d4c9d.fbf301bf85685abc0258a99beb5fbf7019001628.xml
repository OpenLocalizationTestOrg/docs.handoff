{"content":"---\ntitle: \"Call Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Call\"\nhelpviewer_keywords: \n  - \"procedures [Visual Basic], Call statement\"\n  - \"Call statement [Visual Basic]\"\n  - \"procedures [Visual Basic], calling\"\nms.assetid: e5b31571-6867-406f-b8e7-a3f9aae4723a\n---\n# Call Statement (Visual Basic)\nTransfers control to a `Function`, `Sub`, or dynamic-link library (DLL) procedure.  \n  \n## Syntax  \n  \n```  \n[ Call ] procedureName [ (argumentList) ]  \n```  \n  \n## Parts  \n|||\n|---|---|\n|`procedureName`|Required. Name of the procedure to call.|\n|`argumentList`|Optional. List of variables or expressions representing arguments that are passed to the procedure when it is called. Multiple arguments are separated by commas. If you include `argumentList`, you must enclose it in parentheses.|\n|||\n  \n## Remarks  \n You can use the `Call` keyword when you call a procedure. For most procedure calls, you aren’t required to use this  keyword.  \n  \n You typically use the `Call` keyword when the called expression doesn’t start with an identifier. Use of the `Call` keyword for other uses isn’t recommended.  \n  \n If the procedure returns a value, the `Call` statement discards it.  \n  \n## Example  \n The following code shows two examples where the `Call` keyword is necessary to call a procedure. In both examples, the called expression doesn't start with an identifier.  \n  \n [!code-vb[VbVbalrStatements#97](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#97)]  \n  \n## See also\n\n- [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)\n- [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)\n- [Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)\n- [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)\n","nodes":[{"pos":[4,286],"embed":true,"restype":"x-metadata","content":"title: \"Call Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Call\"\nhelpviewer_keywords: \n  - \"procedures [Visual Basic], Call statement\"\n  - \"Call statement [Visual Basic]\"\n  - \"procedures [Visual Basic], calling\"\nms.assetid: e5b31571-6867-406f-b8e7-a3f9aae4723a","nodes":[{"content":"Call Statement (Visual Basic)","nodes":[{"pos":[0,29],"content":"Call Statement (Visual Basic)","nodes":[{"content":"Call Statement (Visual Basic)","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[293,322],"content":"Call Statement (Visual Basic)","linkify":"Call Statement (Visual Basic)","nodes":[{"content":"Call Statement (Visual Basic)","pos":[0,29]}]},{"pos":[323,405],"content":"Transfers control to a <ph id=\"ph1\">`Function`</ph>, <ph id=\"ph2\">`Sub`</ph>, or dynamic-link library (DLL) procedure.","source":"Transfers control to a `Function`, `Sub`, or dynamic-link library (DLL) procedure."},{"pos":[414,420],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[488,493],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[527,536]},{"content":"Name of the procedure to call.","pos":[537,567]},{"content":"Optional.","pos":[585,594]},{"content":"List of variables or expressions representing arguments that are passed to the procedure when it is called.","pos":[595,702]},{"content":"Multiple arguments are separated by commas.","pos":[703,746]},{"content":"If you include <ph id=\"ph1\">`argumentList`</ph>, you must enclose it in parentheses.","pos":[747,813],"source":" If you include `argumentList`, you must enclose it in parentheses."},{"pos":[825,832],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use the <ph id=\"ph1\">`Call`</ph> keyword when you call a procedure.","pos":[836,893],"source":"You can use the `Call` keyword when you call a procedure."},{"content":"For most procedure calls, you aren’t required to use this  keyword.","pos":[894,961]},{"content":"You typically use the <ph id=\"ph1\">`Call`</ph> keyword when the called expression doesn’t start with an identifier.","pos":[968,1065],"source":"You typically use the `Call` keyword when the called expression doesn’t start with an identifier."},{"content":"Use of the <ph id=\"ph1\">`Call`</ph> keyword for other uses isn’t recommended.","pos":[1066,1125],"source":" Use of the `Call` keyword for other uses isn’t recommended."},{"pos":[1132,1199],"content":"If the procedure returns a value, the <ph id=\"ph1\">`Call`</ph> statement discards it.","source":"If the procedure returns a value, the `Call` statement discards it."},{"pos":[1208,1215],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code shows two examples where the <ph id=\"ph1\">`Call`</ph> keyword is necessary to call a procedure.","pos":[1219,1315],"source":"The following code shows two examples where the `Call` keyword is necessary to call a procedure."},{"content":"In both examples, the called expression doesn't start with an identifier.","pos":[1316,1389]},{"pos":[1524,1532],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1536,1631],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[1634,1719],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[1722,1815],"content":"<bpt id=\"p1\">[</bpt>Declare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept>","source":"[Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)"},{"pos":[1818,1930],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"}]}