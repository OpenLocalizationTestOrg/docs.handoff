<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="types-of-string-manipulation-methods.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44eb101ebdfeb316958a659107190ef1fc84df44</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\strings\types-of-string-manipulation-methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ff1dbbfceff1ac43134d340638231e6e957513f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90f6cbf9cd23e31ea892f9cf31de129aa747ac81</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Types of String Manipulation Methods in Visual Basic</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Types of String Manipulation Methods in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are several different ways to analyze and manipulate your strings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Some of the methods are a part of the Visual Basic language, and others are inherent in the <ph id="ph1">`String`</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Visual Basic Language and the .NET Framework</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Visual Basic methods are used as inherent functions of the language.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>They may be used without qualification in your code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows typical use of a Visual Basic string-manipulation command:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`Mid`</ph> function performs a direct operation on <ph id="ph2">`aString`</ph> and assigns the value to <ph id="ph3">`bString`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For a list of Visual Basic string manipulation methods, see <bpt id="p1">[</bpt>String Manipulation Summary<ept id="p1">](../../../../visual-basic/language-reference/keywords/string-manipulation-summary.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Shared Methods and Instance Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can also manipulate strings with the methods of the <ph id="ph1">`String`</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There are two types of methods in <ph id="ph1">`String`</ph>: <bpt id="p1">*</bpt>shared<ept id="p1">*</ept> methods and <bpt id="p2">*</bpt>instance<ept id="p2">*</ept> methods.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Shared Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A shared method is a method that stems from the <ph id="ph1">`String`</ph> class itself and does not require an instance of that class to work.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These methods can be qualified with the name of the class (<ph id="ph1">`String`</ph>) rather than with an instance of the <ph id="ph2">`String`</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">&lt;xref:System.String.Copy%2A?displayProperty=nameWithType&gt;</ph> method is a static method, which acts upon an expression it is given and assigns the resulting value to <ph id="ph2">`bString`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Instance Methods</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Instance methods, by contrast, stem from a particular instance of <ph id="ph1">`String`</ph> and must be qualified with the instance name.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">&lt;xref:System.String.Substring%2A?displayProperty=nameWithType&gt;</ph> method is a method of the instance of <ph id="ph2">`String`</ph> (that is, <ph id="ph3">`aString`</ph>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It performs an operation on <ph id="ph1">`aString`</ph> and assigns that value to <ph id="ph2">`bString`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Strings in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>