{"content":"---\ntitle: \"illegalPrepareConstrainedRegion MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"PrepareConstrainedRegions method\"\n  - \"managed debugging assistants (MDAs), illegal PrepareConstrainedRegions\"\n  - \"try/catch exception handling, managed debugging assistants\"\n  - \"IllegalPrepareConstrainedRegions MDA\"\n  - \"MDAs (managed debugging assistants), illegal PrepareConstrainedRegions\"\nms.assetid: 2f9b5031-f910-4e01-a196-f89eab313eaf\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# illegalPrepareConstrainedRegion MDA\nThe `illegalPrepareConstrainedRegion` managed debugging assistant (MDA) is activated when a <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A?displayProperty=nameWithType> method call does not immediately precede the `try` statement of the exception handler. This restriction is at the MSIL level, so it is permissible to have non-code-generating source between the call and the `try`, such as comments.  \n  \n## Symptoms  \n A constrained execution region (CER) that is never treated as such, but as a simple exception handling block (`finally` or `catch`). As a consequence, the region does not run in the event of an out-of-memory condition or a thread abort.  \n  \n## Cause  \n The preparation pattern for a CER is not followed correctly.  This is an error event. The <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A> method call used to mark exception handlers as introducing a CER in their `catch`/`finally`/`fault`/`filter` blocks must be used immediately before the `try` statement.  \n  \n## Resolution  \n Ensure that the call to <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A> happens immediately before the `try` statement.  \n  \n## Effect on the Runtime  \n This MDA has no effect on the CLR.  \n  \n## Output  \n The MDA displays the name of the method calling the <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A> method, the MSIL offset, and a message indicating the call does not immediately precede the beginning of the try block.  \n  \n## Configuration  \n  \n```xml  \n<mdaConfig>  \n  <assistants>  \n    <illegalPrepareConstrainedRegion/>  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## Example  \n The following code example demonstrates the pattern that causes this MDA to be activated.  \n  \n```csharp\nvoid MethodWithInvalidPCR()  \n{  \n    RuntimeHelpers.PrepareConstrainedRegions();  \n    Object o = new Object();  \n    try  \n    {  \n        …  \n    }  \n    finally  \n    {  \n        …  \n    }  \n}  \n```  \n  \n## See also\n\n- <xref:System.Runtime.InteropServices.MarshalAsAttribute>\n- <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A>\n- [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)\n- [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)\n","nodes":[{"pos":[4,479],"embed":true,"restype":"x-metadata","content":"title: \"illegalPrepareConstrainedRegion MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"PrepareConstrainedRegions method\"\n  - \"managed debugging assistants (MDAs), illegal PrepareConstrainedRegions\"\n  - \"try/catch exception handling, managed debugging assistants\"\n  - \"IllegalPrepareConstrainedRegions MDA\"\n  - \"MDAs (managed debugging assistants), illegal PrepareConstrainedRegions\"\nms.assetid: 2f9b5031-f910-4e01-a196-f89eab313eaf\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"illegalPrepareConstrainedRegion MDA","nodes":[{"pos":[0,35],"content":"illegalPrepareConstrainedRegion MDA","nodes":[{"content":"illegalPrepareConstrainedRegion MDA","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[486,521],"content":"illegalPrepareConstrainedRegion MDA","linkify":"illegalPrepareConstrainedRegion MDA","nodes":[{"content":"illegalPrepareConstrainedRegion MDA","pos":[0,35]}]},{"content":"The <ph id=\"ph1\">`illegalPrepareConstrainedRegion`</ph> managed debugging assistant (MDA) is activated when a <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A?displayProperty=nameWithType&gt;</ph> method call does not immediately precede the <ph id=\"ph3\">`try`</ph> statement of the exception handler.","pos":[522,812],"source":"The `illegalPrepareConstrainedRegion` managed debugging assistant (MDA) is activated when a <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A?displayProperty=nameWithType> method call does not immediately precede the `try` statement of the exception handler."},{"content":"This restriction is at the MSIL level, so it is permissible to have non-code-generating source between the call and the <ph id=\"ph1\">`try`</ph>, such as comments.","pos":[813,957],"source":" This restriction is at the MSIL level, so it is permissible to have non-code-generating source between the call and the `try`, such as comments."},{"pos":[966,974],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"content":"A constrained execution region (CER) that is never treated as such, but as a simple exception handling block (<ph id=\"ph1\">`finally`</ph> or <ph id=\"ph2\">`catch`</ph>).","pos":[978,1110],"source":"A constrained execution region (CER) that is never treated as such, but as a simple exception handling block (`finally` or `catch`)."},{"content":"As a consequence, the region does not run in the event of an out-of-memory condition or a thread abort.","pos":[1111,1214]},{"pos":[1223,1228],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"The preparation pattern for a CER is not followed correctly.","pos":[1232,1292]},{"content":"This is an error event.","pos":[1294,1317]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A&gt;</ph> method call used to mark exception handlers as introducing a CER in their <ph id=\"ph2\">`catch`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`finally`</ph><ph id=\"ph5\">/</ph><ph id=\"ph6\">`fault`</ph><ph id=\"ph7\">/</ph><ph id=\"ph8\">`filter`</ph> blocks must be used immediately before the <ph id=\"ph9\">`try`</ph> statement.","pos":[1318,1573],"source":" The <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A> method call used to mark exception handlers as introducing a CER in their `catch`/`finally`/`fault`/`filter` blocks must be used immediately before the `try` statement."},{"pos":[1582,1592],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"pos":[1596,1750],"content":"Ensure that the call to <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A&gt;</ph> happens immediately before the <ph id=\"ph2\">`try`</ph> statement.","source":"Ensure that the call to <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A> happens immediately before the `try` statement."},{"pos":[1759,1780],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"This MDA has no effect on the CLR.","pos":[1784,1818]},{"pos":[1827,1833],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[1837,2091],"content":"The MDA displays the name of the method calling the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A&gt;</ph> method, the MSIL offset, and a message indicating the call does not immediately precede the beginning of the try block.","source":"The MDA displays the name of the method calling the <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions%2A> method, the MSIL offset, and a message indicating the call does not immediately precede the beginning of the try block."},{"pos":[2100,2113],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"pos":[2245,2252],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates the pattern that causes this MDA to be activated.","pos":[2256,2345]},{"pos":[2572,2580],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2728,2881],"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept>","source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)"},{"pos":[2884,2959],"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept>","source":"[Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)"}]}