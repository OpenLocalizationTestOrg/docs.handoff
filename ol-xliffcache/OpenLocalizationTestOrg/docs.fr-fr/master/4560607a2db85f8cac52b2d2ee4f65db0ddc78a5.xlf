<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-sessions.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4560607a2db85f8cac52b2d2ee4f65db0ddc78a5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\using-sessions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce136c9c850c4ce783e26a8f735a13c7fbb8e9d3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de1d9a684d0e60bd85d7f448918b10b514c4bb2e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Sessions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Sessions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> applications, a <bpt id="p1">*</bpt>session<ept id="p1">*</ept> correlates a group of messages into a conversation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> sessions are different than the session object available in <ph id="ph2">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> applications, support different behaviors, and are controlled in different ways.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes the features that sessions enable in <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> applications and how to use them.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Sessions in Windows Communication Foundation Applications</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When a service contract specifies that it requires a session, that contract is specifying that all calls (that is, the underlying message exchanges that support the calls) must be part of the same conversation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a contract specifies that it allows sessions but does not require one, clients can connect and either establish a session or not establish a session.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the session ends and a message is sent through the same channel an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> sessions have the following main conceptual features:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>They are explicitly initiated and terminated by the calling application (the WCF client).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Messages delivered during a session are processed in the order in which they are received.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Sessions correlate a group of messages into a conversation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Different types of correlation are possible.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For instance, one session-based channel may correlate messages based on a shared network connection while another session-based channel may correlate messages based on a shared tag in the message body.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The features that can be derived from the session depend on the nature of the correlation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is no general data store associated with a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> session.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you are familiar with the <ph id="ph1">&lt;xref:System.Web.SessionState.HttpSessionState?displayProperty=fullName&gt;</ph> class in <ph id="ph2">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> applications and the functionality it provides, you might notice the following differences between that kind of session and <ph id="ph3">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> sessions:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> sessions are always server-initiated.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> sessions are implicitly unordered.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> sessions provide a general data storage mechanism across requests.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This topic describes:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The default execution behavior when using session-based bindings in the service model layer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The types of features that the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> session-based, system-provided bindings provide.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>How to create a contract that declares a session requirement.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>How to understand and control the creation and termination of the session and the relationship of the session to the service instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Default Execution Behavior Using Sessions</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A binding that attempts to initiate a session is called a <bpt id="p1">*</bpt>session-based<ept id="p1">*</ept> binding.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Service contracts specify that they require, permit, or refuse session-based bindings by setting the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=fullName&gt;</ph> property on the service contract interface (or class) to one of the <ph id="ph2">&lt;xref:System.ServiceModel.SessionMode?displayProperty=fullName&gt;</ph> enumeration values.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By default, the value of this property is <ph id="ph1">&lt;xref:System.ServiceModel.SessionMode&gt;</ph>, which means that if a client uses a session-based binding with a <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service implementation, the service establishes and uses the session provided.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service accepts a client session, the following features are enabled by default:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>All calls between a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object are handled by the same service instance.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Different session-based bindings provide additional features.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>System-Provided Session Types</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A session-based binding supports the default association of a service instance with a particular session.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, different session-based bindings support different features in addition to enabling the session-based instancing control previously described.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> provides the following types of session-based application behavior:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=fullName&gt;</ph> supports security-based sessions, in which both ends of communication have agreed upon a specific secure conversation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Securing Services<ept id="p1">](../../../docs/framework/wcf/securing-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding?displayProperty=fullName&gt;</ph> binding, which contains support for both security sessions and reliable sessions, by default uses only a secure session that encrypts and digitally signs messages.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.NetTcpBinding?displayProperty=fullName&gt;</ph> binding supports TCP/IP-based sessions to ensure that all messages are correlated by the connection at the socket level.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=fullName&gt;</ph> element, which implements the WS-ReliableMessaging specification, provides support for reliable sessions in which messages can be configured to be delivered in order and exactly once, ensuring messages are received even when messages travel across multiple nodes during the conversation.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Reliable Sessions<ept id="p1">](../../../docs/framework/wcf/feature-details/reliable-sessions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding?displayProperty=fullName&gt;</ph> binding provides MSMQ datagram sessions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Queues in WCF<ept id="p1">](../../../docs/framework/wcf/feature-details/queues-in-wcf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property does not specify the type of session the contract requires, only that it requires one.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Creating a Contract That Requires a Session</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Creating a contract that requires a session states that the group of operations that the service contract declares must all be executed within the same session and that messages must be delivered in order.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To assert the level of session support that a service contract requires, set the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=fullName&gt;</ph> property on your service contract interface or class to the value of the <ph id="ph2">&lt;xref:System.ServiceModel.SessionMode?displayProperty=fullName&gt;</ph> enumeration to specify whether the contract:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Requires a session.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Allows a client to establish a session.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Prohibits a session.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property does not, however, specify the type of session-based behavior the contract requires.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It instructs <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> to confirm at runtime that the configured binding (which creates the communication channel) for the service does, does not, or can establish a session when implementing a service.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Again, the binding can satisfy that requirement with any type of session-based behavior it chooses—security, transport, reliable, or some combination.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The exact behavior depends on the <ph id="ph1">&lt;xref:System.ServiceModel.SessionMode?displayProperty=fullName&gt;</ph> value selected.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the configured binding of the service does not conform to the value of <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph>, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Bindings and the channels they create that support sessions are said to be session-based.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following service contract specifies that all operations in the <ph id="ph1">`ICalculatorSession`</ph> must be exchanged within a session.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>None of the operations returns a value to the caller except the <ph id="ph1">`Equals`</ph> method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`Equals`</ph> method takes no parameters and, therefore, can only return a non-zero value inside a session in which data has already been passed to the other operations.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This contract requires a session to function properly.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Without a session associated with a specific client, the service instance has no way of knowing what previous data this client has sent.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>S_Service_Session#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/s_service_session/cs/service.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>S_Service_Session#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CFX/s_service_session/vb/service.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If a service allows a session, then a session is established and used if the client initiates one; otherwise, no session is established.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Sessions and Service Instances</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you use the default instancing behavior in <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph>, all calls between a <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object are handled by the same service instance.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Therefore, at the application level, you can think of a session as enabling application behavior similar to local call behavior.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, when you create a local object:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A constructor is called.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>All subsequent calls made to the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object reference are processed by the same object instance.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A destructor is called when the object reference is destroyed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Sessions enable a similar behavior between clients and services as long as the default service instance behavior is used.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If a service contract requires or supports sessions, one or more contract operations can be marked as initiating or terminating a session by setting the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Initiating operations<ept id="p1">*</ept> are those that must be called as the first operation of a new session.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Non-initiating operations can be called only after at least one initiating operation has been called.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can therefore create a kind of session constructor for your service by declaring initiating operations designed to take input from clients appropriate to the beginning of the service instance.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>(The state is associated with the session, however, and not the service object.)</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Terminating operations<ept id="p1">*</ept>, conversely, are those that must be called as the last message in an existing session.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the default case, <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> recycles the service object and its context after the session with which the service was associated is closed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can, therefore, create a kind of destructor by declaring terminating operations designed to perform a function appropriate to the end of the service instance.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Although the default behavior bears a resemblance to local constructors and destructors, it is only a resemblance.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service operation can be an initiating or terminating operation, or both at the same time.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In addition, in the default case, initiating operations can be called any number of times in any order; no additional sessions are created once the session is established and associated with an instance unless you explicitly control the lifetime of the service instance (by manipulating the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;</ph> object).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Finally, the state is associated with the session and not the service object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`ICalculatorSession`</ph> contract used in the preceding example requires that the <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object first call the <ph id="ph3">`Clear`</ph> operation prior to any other operation and that the session with this <ph id="ph4">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object should terminate when it calls the <ph id="ph5">`Equals`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following code example shows a contract that enforces these requirements.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Clear`</ph> must be called first to initiate a session, and that session ends when <ph id="ph2">`Equals`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>SCA.IsInitiatingIsTerminating#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/sca.isinitiatingisterminating/cs/service.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>SCA.IsInitiatingIsTerminating#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CFX/sca.isinitiatingisterminating/vb/service.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Services do not start sessions with clients.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client applications, a direct relationship exists between the lifetime of the session-based channel and the lifetime of the session itself.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>As such, clients create new sessions by creating new session-based channels and tear down existing sessions by closing session-based channels gracefully.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A client starts a session with a service endpoint by calling one of the following:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName&gt;</ph> on the channel returned by a call to <ph id="ph2">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.Open%2A?displayProperty=fullName&gt;</ph> on the <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object generated by the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An initiating operation on either type of <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object (by default, all operations are initiating).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When the first operation is called, the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object automatically opens the channel and initiates a session.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Typically a client ends a session with a service endpoint by calling one of the following:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A?displayProperty=fullName&gt;</ph> on the channel returned by a call to <ph id="ph2">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.Close%2A?displayProperty=fullName&gt;</ph> on the <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object generated by Svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A terminating operation on either type of <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object (by default, no operations are terminating; the contract must explicitly specify a terminating operation).</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When the first operation is called, the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object automatically opens the channel and initiates a session.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For examples, see <bpt id="p1">[</bpt>How to: Create a Service That Requires Sessions<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-service-that-requires-sessions.md)</ept> as well as the <bpt id="p2">[</bpt>Default Service Behavior<ept id="p2">](../../../docs/framework/wcf/samples/default-service-behavior.md)</ept> and <bpt id="p3">[</bpt>Instancing<ept id="p3">](../../../docs/framework/wcf/samples/instancing.md)</ept> samples.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> clients and sessions, see <bpt id="p1">[</bpt>Accessing Services Using a WCF Client<ept id="p1">](../../../docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Sessions Interact with InstanceContext Settings</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>There is an interaction between the <ph id="ph1">&lt;xref:System.ServiceModel.SessionMode&gt;</ph> enumeration in a contract and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName&gt;</ph> property, which controls the association between channels and specific service objects.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Sessions, Instancing, and Concurrency<ept id="p1">](../../../docs/framework/wcf/feature-details/sessions-instancing-and-concurrency.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Sharing InstanceContext Objects</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can also control which session-based channel or call is associated with which <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object by performing that association yourself.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For a complete example, see <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Sessions and Streaming</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When you have a large amount of data to transfer, the streaming transfer mode in <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> is a feasible alternative to the default behavior of buffering and processing messages in memory in their entirety.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You may get unexpected behavior when streaming calls with a session-based binding.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>All streaming calls are made through a single channel (the datagram channel) that does not support sessions even if the binding being used is configured to use sessions.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If multiple clients make streaming calls to the same service object over a session-based binding, and the service object's concurrency mode is set to single and its instance context mode is set to <ph id="ph1">`PerSession`</ph>, all calls must go through the datagram channel and so only one call is processed at a time.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>One or more clients may then time out. You can work around this issue by either setting the service object's <ph id="ph1">`InstanceContextMode`</ph> to <ph id="ph2">`PerCall`</ph> or Concurrency to multiple.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>MaxConcurrentSessions have no effect in this case because there is only one "session" available.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>