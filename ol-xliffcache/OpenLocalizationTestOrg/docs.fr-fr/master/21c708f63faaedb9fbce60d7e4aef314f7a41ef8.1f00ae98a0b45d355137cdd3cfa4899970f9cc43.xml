{"content":"---\ntitle: \"Selecting a Collection Class\"\nms.date: \"03/18/2019\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"last-in-first-out collections\"\n  - \"first-in-first-out collections\"\n  - \"collections [.NET Framework], selecting collection class\"\n  - \"indexed collections\"\n  - \"Collections classes\"\n  - \"grouping data in collections, selecting collection class\"\nms.assetid: ba049f9a-ce87-4cc4-b319-3f75c8ddac8a\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Selecting a Collection Class\n\nBe sure to choose your collection class carefully. Using the wrong type can restrict your use of the collection.  \n\n> [!IMPORTANT]\n> Avoid using the types in the <xref:System.Collections> namespace. The generic and concurrent versions of the collections are recommended because of their greater type safety and other improvements.  \n\n Consider the following questions:  \n  \n- Do you need a sequential list where the element is typically discarded after its value is retrieved?  \n  \n  - If yes, consider using the <xref:System.Collections.Queue> class or the <xref:System.Collections.Generic.Queue%601> generic class if you need first-in, first-out (FIFO) behavior. Consider using the <xref:System.Collections.Stack> class or the <xref:System.Collections.Generic.Stack%601> generic class if you need last-in, first-out (LIFO) behavior. For safe access from multiple threads, use the concurrent versions, <xref:System.Collections.Concurrent.ConcurrentQueue%601> and <xref:System.Collections.Concurrent.ConcurrentStack%601>.  \n  \n  - If not, consider using the other collections.  \n  \n- Do you need to access the elements in a certain order, such as FIFO, LIFO, or random?  \n  \n  - The <xref:System.Collections.Queue> class and the <xref:System.Collections.Generic.Queue%601> or <xref:System.Collections.Concurrent.ConcurrentQueue%601> generic class offer FIFO access. For more information, see [When to Use a Thread-Safe Collection](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md).  \n  \n  - The <xref:System.Collections.Stack> class and the <xref:System.Collections.Generic.Stack%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> generic class offer LIFO access. For more information, see [When to Use a Thread-Safe Collection](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md).  \n  \n  - The <xref:System.Collections.Generic.LinkedList%601> generic class allows sequential access either from the head to the tail, or from the tail to the head.  \n  \n- Do you need to access each element by index?  \n  \n  - The <xref:System.Collections.ArrayList> and <xref:System.Collections.Specialized.StringCollection> classes and the <xref:System.Collections.Generic.List%601> generic class offer access to their elements by the zero-based index of the element.  \n  \n  - The <xref:System.Collections.Hashtable>, <xref:System.Collections.SortedList>, <xref:System.Collections.Specialized.ListDictionary>, and <xref:System.Collections.Specialized.StringDictionary> classes, and the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes offer access to their elements by the key of the element.  \n  \n  - The <xref:System.Collections.Specialized.NameObjectCollectionBase> and <xref:System.Collections.Specialized.NameValueCollection> classes, and the <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.Generic.SortedList%602> generic classes offer access to their elements by either the zero-based index or the key of the element.  \n  \n- Will each element contain one value, a combination of one key and one value, or a combination of one key and multiple values?  \n  \n  - One value: Use any of the collections based on the <xref:System.Collections.IList> interface or the <xref:System.Collections.Generic.IList%601> generic interface.  \n  \n  - One key and one value: Use any of the collections based on the <xref:System.Collections.IDictionary> interface or the <xref:System.Collections.Generic.IDictionary%602> generic interface.  \n  \n  - One value with embedded key: Use the <xref:System.Collections.ObjectModel.KeyedCollection%602> generic class.  \n  \n  - One key and multiple values: Use the <xref:System.Collections.Specialized.NameValueCollection> class.  \n  \n- Do you need to sort the elements differently from how they were entered?  \n  \n  - The <xref:System.Collections.Hashtable> class sorts its elements by their hash codes.  \n  \n  - The <xref:System.Collections.SortedList> class, and the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes sort their elements by the key. The sort order is based on the implementation of the <xref:System.Collections.IComparer> interface for the <xref:System.Collections.SortedList> class and on the implementation of the <xref:System.Collections.Generic.IComparer%601> generic interface for the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes. Of the two generic types, <xref:System.Collections.Generic.SortedDictionary%602> offers better performance than <xref:System.Collections.Generic.SortedList%602>, while <xref:System.Collections.Generic.SortedList%602> consumes less memory.  \n  \n  - <xref:System.Collections.ArrayList> provides a <xref:System.Collections.ArrayList.Sort%2A> method that takes an <xref:System.Collections.IComparer> implementation as a parameter. Its generic counterpart, the <xref:System.Collections.Generic.List%601> generic class, provides a <xref:System.Collections.Generic.List%601.Sort%2A> method that takes an implementation of the <xref:System.Collections.Generic.IComparer%601> generic interface as a parameter.  \n  \n- Do you need fast searches and retrieval of information?  \n  \n  - <xref:System.Collections.Specialized.ListDictionary> is faster than <xref:System.Collections.Hashtable> for small collections (10 items or fewer). The <xref:System.Collections.Generic.Dictionary%602> generic class provides faster lookup than the <xref:System.Collections.Generic.SortedDictionary%602> generic class. The multi-threaded implementation is <xref:System.Collections.Concurrent.ConcurrentDictionary%602>. <xref:System.Collections.Concurrent.ConcurrentBag%601> provides fast multi-threaded insertion for unordered data. For more information about both multi-threaded types, see [When to Use a Thread-Safe Collection](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md).  \n  \n- Do you need collections that accept only strings?  \n  \n  - <xref:System.Collections.Specialized.StringCollection> (based on <xref:System.Collections.IList>) and <xref:System.Collections.Specialized.StringDictionary> (based on <xref:System.Collections.IDictionary>) are in the <xref:System.Collections.Specialized> namespace.  \n  \n  - In addition, you can use any of the generic collection classes in the <xref:System.Collections.Generic> namespace as strongly typed string collections by specifying the <xref:System.String> class for their generic type arguments. For example, you can declare a variable to be of type [List\\<String>](xref:System.Collections.Generic.List%601) or [Dictionary<String,String>](xref:System.Collections.Generic.Dictionary%602).\n  \n## LINQ to Objects and PLINQ  \n LINQ to Objects enables developers to use LINQ queries to access in-memory objects as long as the object type implements <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>. LINQ queries provide a common pattern for accessing data, are typically more concise and readable than standard `foreach` loops, and provide filtering, ordering, and grouping capabilities. For more information, see [LINQ to Objects (C#)](../../csharp/programming-guide/concepts/linq/linq-to-objects.md) and [LINQ to Objects (Visual Basic)](../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md).  \n  \n PLINQ provides a parallel implementation of LINQ to Objects that can offer faster query execution in many scenarios, through more efficient use of multi-core computers. For more information, see [Parallel LINQ (PLINQ)](../../../docs/standard/parallel-programming/parallel-linq-plinq.md).  \n  \n## See also\n\n- <xref:System.Collections>\n- <xref:System.Collections.Specialized>\n- <xref:System.Collections.Generic>\n- [Thread-Safe Collections](../../../docs/standard/collections/thread-safe/index.md)\n","nodes":[{"pos":[4,453],"embed":true,"restype":"x-metadata","content":"title: \"Selecting a Collection Class\"\nms.date: \"03/18/2019\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"last-in-first-out collections\"\n  - \"first-in-first-out collections\"\n  - \"collections [.NET Framework], selecting collection class\"\n  - \"indexed collections\"\n  - \"Collections classes\"\n  - \"grouping data in collections, selecting collection class\"\nms.assetid: ba049f9a-ce87-4cc4-b319-3f75c8ddac8a\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Selecting a Collection Class","nodes":[{"pos":[0,28],"content":"Selecting a Collection Class","nodes":[{"content":"Selecting a Collection Class","pos":[0,28]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[460,488],"content":"Selecting a Collection Class","linkify":"Selecting a Collection Class","nodes":[{"content":"Selecting a Collection Class","pos":[0,28]}]},{"content":"Be sure to choose your collection class carefully.","pos":[490,540]},{"content":"Using the wrong type can restrict your use of the collection.","pos":[541,602]},{"pos":[608,820],"content":"[!IMPORTANT]\nAvoid using the types in the <xref:System.Collections> namespace. The generic and concurrent versions of the collections are recommended because of their greater type safety and other improvements.","leadings":["","> "],"nodes":[{"content":"Avoid using the types in the <xref:System.Collections> namespace. The generic and concurrent versions of the collections are recommended because of their greater type safety and other improvements.","pos":[13,210],"nodes":[{"content":"Avoid using the types in the <ph id=\"ph1\">&lt;xref:System.Collections&gt;</ph> namespace.","pos":[0,65],"source":"Avoid using the types in the <xref:System.Collections> namespace."},{"content":"The generic and concurrent versions of the collections are recommended because of their greater type safety and other improvements.","pos":[66,197]}]}]},{"content":"Consider the following questions:","pos":[825,858]},{"content":"Do you need a sequential list where the element is typically discarded after its value is retrieved?","pos":[866,966]},{"content":"If yes, consider using the <ph id=\"ph1\">&lt;xref:System.Collections.Queue&gt;</ph> class or the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class if you need first-in, first-out (FIFO) behavior.","pos":[976,1154],"source":"If yes, consider using the <xref:System.Collections.Queue> class or the <xref:System.Collections.Generic.Queue%601> generic class if you need first-in, first-out (FIFO) behavior."},{"content":"Consider using the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> class or the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class if you need last-in, first-out (LIFO) behavior.","pos":[1155,1324],"source":" Consider using the <xref:System.Collections.Stack> class or the <xref:System.Collections.Generic.Stack%601> generic class if you need last-in, first-out (LIFO) behavior."},{"content":"For safe access from multiple threads, use the concurrent versions, <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.","pos":[1325,1511],"source":" For safe access from multiple threads, use the concurrent versions, <xref:System.Collections.Concurrent.ConcurrentQueue%601> and <xref:System.Collections.Concurrent.ConcurrentStack%601>."},{"content":"If not, consider using the other collections.","pos":[1521,1566]},{"content":"Do you need to access the elements in a certain order, such as FIFO, LIFO, or random?","pos":[1574,1659]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Queue&gt;</ph> class and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> generic class offer FIFO access.","pos":[1669,1855],"source":"The <xref:System.Collections.Queue> class and the <xref:System.Collections.Generic.Queue%601> or <xref:System.Collections.Concurrent.ConcurrentQueue%601> generic class offer FIFO access."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>When to Use a Thread-Safe Collection<ept id=\"p1\">](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md)</ept>.","pos":[1856,2009],"source":" For more information, see [When to Use a Thread-Safe Collection](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> class and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> generic class offer LIFO access.","pos":[2019,2205],"source":"The <xref:System.Collections.Stack> class and the <xref:System.Collections.Generic.Stack%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> generic class offer LIFO access."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>When to Use a Thread-Safe Collection<ept id=\"p1\">](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md)</ept>.","pos":[2206,2359],"source":" For more information, see [When to Use a Thread-Safe Collection](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md)."},{"pos":[2369,2524],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> generic class allows sequential access either from the head to the tail, or from the tail to the head.","source":"The <xref:System.Collections.Generic.LinkedList%601> generic class allows sequential access either from the head to the tail, or from the tail to the head."},{"content":"Do you need to access each element by index?","pos":[2532,2576]},{"pos":[2586,2828],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.StringCollection&gt;</ph> classes and the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class offer access to their elements by the zero-based index of the element.","source":"The <xref:System.Collections.ArrayList> and <xref:System.Collections.Specialized.StringCollection> classes and the <xref:System.Collections.Generic.List%601> generic class offer access to their elements by the zero-based index of the element."},{"pos":[2838,3228],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Collections.Specialized.StringDictionary&gt;</ph> classes, and the <ph id=\"ph5\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> and <ph id=\"ph6\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic classes offer access to their elements by the key of the element.","source":"The <xref:System.Collections.Hashtable>, <xref:System.Collections.SortedList>, <xref:System.Collections.Specialized.ListDictionary>, and <xref:System.Collections.Specialized.StringDictionary> classes, and the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes offer access to their elements by the key of the element."},{"pos":[3238,3599],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameObjectCollectionBase&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> classes, and the <ph id=\"ph3\">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> generic classes offer access to their elements by either the zero-based index or the key of the element.","source":"The <xref:System.Collections.Specialized.NameObjectCollectionBase> and <xref:System.Collections.Specialized.NameValueCollection> classes, and the <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.Generic.SortedList%602> generic classes offer access to their elements by either the zero-based index or the key of the element."},{"content":"Will each element contain one value, a combination of one key and one value, or a combination of one key and multiple values?","pos":[3607,3732]},{"pos":[3742,3904],"content":"One value: Use any of the collections based on the <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph> interface or the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface.","source":"One value: Use any of the collections based on the <xref:System.Collections.IList> interface or the <xref:System.Collections.Generic.IList%601> generic interface."},{"pos":[3914,4100],"content":"One key and one value: Use any of the collections based on the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> interface or the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> generic interface.","source":"One key and one value: Use any of the collections based on the <xref:System.Collections.IDictionary> interface or the <xref:System.Collections.Generic.IDictionary%602> generic interface."},{"pos":[4110,4219],"content":"One value with embedded key: Use the <ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> generic class.","source":"One value with embedded key: Use the <xref:System.Collections.ObjectModel.KeyedCollection%602> generic class."},{"pos":[4229,4330],"content":"One key and multiple values: Use the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> class.","source":"One key and multiple values: Use the <xref:System.Collections.Specialized.NameValueCollection> class."},{"content":"Do you need to sort the elements differently from how they were entered?","pos":[4338,4410]},{"pos":[4420,4505],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> class sorts its elements by their hash codes.","source":"The <xref:System.Collections.Hashtable> class sorts its elements by their hash codes."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> class, and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic classes sort their elements by the key.","pos":[4515,4726],"source":"The <xref:System.Collections.SortedList> class, and the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes sort their elements by the key."},{"content":"The sort order is based on the implementation of the <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> interface for the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> class and on the implementation of the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> generic interface for the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic classes.","pos":[4727,5108],"source":" The sort order is based on the implementation of the <xref:System.Collections.IComparer> interface for the <xref:System.Collections.SortedList> class and on the implementation of the <xref:System.Collections.Generic.IComparer%601> generic interface for the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes."},{"content":"Of the two generic types, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> offers better performance than <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, while <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> consumes less memory.","pos":[5109,5347],"source":" Of the two generic types, <xref:System.Collections.Generic.SortedDictionary%602> offers better performance than <xref:System.Collections.Generic.SortedList%602>, while <xref:System.Collections.Generic.SortedList%602> consumes less memory."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> provides a <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> method that takes an <ph id=\"ph3\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation as a parameter.","pos":[5357,5535],"source":"<xref:System.Collections.ArrayList> provides a <xref:System.Collections.ArrayList.Sort%2A> method that takes an <xref:System.Collections.IComparer> implementation as a parameter."},{"content":"Its generic counterpart, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class, provides a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method that takes an implementation of the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> generic interface as a parameter.","pos":[5536,5809],"source":" Its generic counterpart, the <xref:System.Collections.Generic.List%601> generic class, provides a <xref:System.Collections.Generic.List%601.Sort%2A> method that takes an implementation of the <xref:System.Collections.Generic.IComparer%601> generic interface as a parameter."},{"content":"Do you need fast searches and retrieval of information?","pos":[5817,5872]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> is faster than <ph id=\"ph2\">&lt;xref:System.Collections.Hashtable&gt;</ph> for small collections (10 items or fewer).","pos":[5882,6028],"source":"<xref:System.Collections.Specialized.ListDictionary> is faster than <xref:System.Collections.Hashtable> for small collections (10 items or fewer)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> generic class provides faster lookup than the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic class.","pos":[6029,6197],"source":" The <xref:System.Collections.Generic.Dictionary%602> generic class provides faster lookup than the <xref:System.Collections.Generic.SortedDictionary%602> generic class."},{"content":"The multi-threaded implementation is <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph>.","pos":[6198,6297],"source":" The multi-threaded implementation is <xref:System.Collections.Concurrent.ConcurrentDictionary%602>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> provides fast multi-threaded insertion for unordered data.","pos":[6298,6411],"source":"<xref:System.Collections.Concurrent.ConcurrentBag%601> provides fast multi-threaded insertion for unordered data."},{"content":"For more information about both multi-threaded types, see <bpt id=\"p1\">[</bpt>When to Use a Thread-Safe Collection<ept id=\"p1\">](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md)</ept>.","pos":[6412,6597],"source":" For more information about both multi-threaded types, see [When to Use a Thread-Safe Collection](../../../docs/standard/collections/thread-safe/when-to-use-a-thread-safe-collection.md)."},{"content":"Do you need collections that accept only strings?","pos":[6605,6654]},{"pos":[6664,6929],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.StringCollection&gt;</ph> (based on <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph>) and <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.StringDictionary&gt;</ph> (based on <ph id=\"ph4\">&lt;xref:System.Collections.IDictionary&gt;</ph>) are in the <ph id=\"ph5\">&lt;xref:System.Collections.Specialized&gt;</ph> namespace.","source":"<xref:System.Collections.Specialized.StringCollection> (based on <xref:System.Collections.IList>) and <xref:System.Collections.Specialized.StringDictionary> (based on <xref:System.Collections.IDictionary>) are in the <xref:System.Collections.Specialized> namespace."},{"content":"In addition, you can use any of the generic collection classes in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph> namespace as strongly typed string collections by specifying the <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> class for their generic type arguments.","pos":[6939,7168],"source":"In addition, you can use any of the generic collection classes in the <xref:System.Collections.Generic> namespace as strongly typed string collections by specifying the <xref:System.String> class for their generic type arguments."},{"content":"For example, you can declare a variable to be of type <bpt id=\"p1\">[</bpt>List<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">](xref:System.Collections.Generic.List%601)</ept> or <bpt id=\"p2\">[</bpt>Dictionary&lt;String,String&gt;<ept id=\"p2\">](xref:System.Collections.Generic.Dictionary%602)</ept>.","pos":[7169,7360],"source":" For example, you can declare a variable to be of type [List\\<String>](xref:System.Collections.Generic.List%601) or [Dictionary<String,String>](xref:System.Collections.Generic.Dictionary%602)."},{"pos":[7367,7392],"content":"LINQ to Objects and PLINQ","linkify":"LINQ to Objects and PLINQ","nodes":[{"content":"LINQ to Objects and PLINQ","pos":[0,25]}]},{"content":"LINQ to Objects enables developers to use LINQ queries to access in-memory objects as long as the object type implements <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[7396,7608],"source":"LINQ to Objects enables developers to use LINQ queries to access in-memory objects as long as the object type implements <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>."},{"content":"LINQ queries provide a common pattern for accessing data, are typically more concise and readable than standard <ph id=\"ph1\">`foreach`</ph> loops, and provide filtering, ordering, and grouping capabilities.","pos":[7609,7797],"source":" LINQ queries provide a common pattern for accessing data, are typically more concise and readable than standard `foreach` loops, and provide filtering, ordering, and grouping capabilities."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>LINQ to Objects (C#)<ept id=\"p1\">](../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept> and <bpt id=\"p2\">[</bpt>LINQ to Objects (Visual Basic)<ept id=\"p2\">](../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept>.","pos":[7798,8020],"source":" For more information, see [LINQ to Objects (C#)](../../csharp/programming-guide/concepts/linq/linq-to-objects.md) and [LINQ to Objects (Visual Basic)](../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)."},{"content":"PLINQ provides a parallel implementation of LINQ to Objects that can offer faster query execution in many scenarios, through more efficient use of multi-core computers.","pos":[8027,8195]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Parallel LINQ (PLINQ)<ept id=\"p1\">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept>.","pos":[8196,8314],"source":" For more information, see [Parallel LINQ (PLINQ)](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)."},{"pos":[8323,8331],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8439,8521],"content":"<bpt id=\"p1\">[</bpt>Thread-Safe Collections<ept id=\"p1\">](../../../docs/standard/collections/thread-safe/index.md)</ept>","source":"[Thread-Safe Collections](../../../docs/standard/collections/thread-safe/index.md)"}]}