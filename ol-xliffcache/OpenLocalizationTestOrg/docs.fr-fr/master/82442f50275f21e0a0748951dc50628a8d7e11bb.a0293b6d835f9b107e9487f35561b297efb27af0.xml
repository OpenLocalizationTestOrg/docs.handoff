{"content":"---\ntitle: \"&amp;&amp; Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/06/2018\nf1_keywords: \n  - \"&&_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"&& operator [C#]\"\n  - \"logical AND operator [C#]\"\nms.assetid: 2e4f0a1c-92a3-40f8-8e3b-17b607f20c31\n---\n# &amp;&amp; Operator (C# Reference)\n\nThe conditional logical AND operator `&&`, also known as the \"short-circuiting\" logical AND operator, computes the logical AND of its [bool](../keywords/bool.md) operands. The result of `x && y` is `true` if both `x` and `y` evaluate to `true`. Otherwise, the result is `false`. If the first operand evaluates to `false`, the second operand is not evaluated and the result of operation is `false`. The following example demonstrates that behavior:\n\n[!code-csharp-interactive[conditional logical AND](~/samples/snippets/csharp/language-reference/operators/ConditionalLogicalOperatorsExamples.cs#And)]\n\nThe [logical AND operator](and-operator.md) `&` also computes the logical AND of its `bool` operands, but always evaluates both operands.\n\n## Operator overloadability\n\nA user-defined type cannot overload the conditional logical AND operator. However, if a user-defined type overloads the [logical AND](and-operator.md) and [true and false operators](../keywords/true-false-operators.md) in a certain way, the `&&` operation can be evaluated for the operands of that type. For more information, see the [User-defined conditional logical operators](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators) section of the [C# language specification](../language-specification/index.md).\n\n## C# language specification\n\nFor more information, see the [Conditional logical operators](~/_csharplang/spec/expressions.md#conditional-logical-operators) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [|| operator](conditional-or-operator.md)\n- [! operator](logical-negation-operator.md)\n- [& operator](and-operator.md)\n","nodes":[{"pos":[4,251],"embed":true,"restype":"x-metadata","content":"title: \"&amp;&amp; Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/06/2018\nf1_keywords: \n  - \"&&_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"&& operator [C#]\"\n  - \"logical AND operator [C#]\"\nms.assetid: 2e4f0a1c-92a3-40f8-8e3b-17b607f20c31","nodes":[{"content":"&amp;&amp; Operator - C# Reference","nodes":[{"pos":[0,34],"content":"&amp;&amp; Operator - C# Reference","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph><ph id=\"ph2\">&amp;amp;</ph> Operator - C# Reference","pos":[0,34],"source":"&amp;&amp; Operator - C# Reference"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[258,292],"content":"&amp;&amp; Operator (C# Reference)","linkify":"&amp;&amp; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph><ph id=\"ph2\">&amp;amp;</ph> Operator (C# Reference)","pos":[0,34],"source":"&amp;&amp; Operator (C# Reference)"}]},{"content":"The conditional logical AND operator <ph id=\"ph1\">`&amp;&amp;`</ph>, also known as the \"short-circuiting\" logical AND operator, computes the logical AND of its <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../keywords/bool.md)</ept> operands.","pos":[294,465],"source":"The conditional logical AND operator `&&`, also known as the \"short-circuiting\" logical AND operator, computes the logical AND of its [bool](../keywords/bool.md) operands."},{"content":"The result of <ph id=\"ph1\">`x &amp;&amp; y`</ph> is <ph id=\"ph2\">`true`</ph> if both <ph id=\"ph3\">`x`</ph> and <ph id=\"ph4\">`y`</ph> evaluate to <ph id=\"ph5\">`true`</ph>.","pos":[466,538],"source":" The result of `x && y` is `true` if both `x` and `y` evaluate to `true`."},{"content":"Otherwise, the result is <ph id=\"ph1\">`false`</ph>.","pos":[539,572],"source":" Otherwise, the result is `false`."},{"content":"If the first operand evaluates to <ph id=\"ph1\">`false`</ph>, the second operand is not evaluated and the result of operation is <ph id=\"ph2\">`false`</ph>.","pos":[573,691],"source":" If the first operand evaluates to `false`, the second operand is not evaluated and the result of operation is `false`."},{"content":"The following example demonstrates that behavior:","pos":[692,741]},{"pos":[895,1032],"content":"The <bpt id=\"p1\">[</bpt>logical AND operator<ept id=\"p1\">](and-operator.md)</ept> <ph id=\"ph1\">`&amp;`</ph> also computes the logical AND of its <ph id=\"ph2\">`bool`</ph> operands, but always evaluates both operands.","source":"The [logical AND operator](and-operator.md) `&` also computes the logical AND of its `bool` operands, but always evaluates both operands."},{"pos":[1037,1061],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"A user-defined type cannot overload the conditional logical AND operator.","pos":[1063,1136]},{"content":"However, if a user-defined type overloads the <bpt id=\"p1\">[</bpt>logical AND<ept id=\"p1\">](and-operator.md)</ept> and <bpt id=\"p2\">[</bpt>true and false operators<ept id=\"p2\">](../keywords/true-false-operators.md)</ept> in a certain way, the <ph id=\"ph1\">`&amp;&amp;`</ph> operation can be evaluated for the operands of that type.","pos":[1137,1366],"source":" However, if a user-defined type overloads the [logical AND](and-operator.md) and [true and false operators](../keywords/true-false-operators.md) in a certain way, the `&&` operation can be evaluated for the operands of that type."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>User-defined conditional logical operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[1367,1599],"source":" For more information, see the [User-defined conditional logical operators](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1604,1629],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1631,1837],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Conditional logical operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#conditional-logical-operators)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Conditional logical operators](~/_csharplang/spec/expressions.md#conditional-logical-operators) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1842,1850],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1854,1881],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1884,1940],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1943,1967],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[1970,2011],"content":"<bpt id=\"p1\">[</bpt>|| operator<ept id=\"p1\">](conditional-or-operator.md)</ept>","source":"[|| operator](conditional-or-operator.md)"},{"pos":[2014,2056],"content":"<bpt id=\"p1\">[</bpt>! operator<ept id=\"p1\">](logical-negation-operator.md)</ept>","source":"[! operator](logical-negation-operator.md)"},{"pos":[2059,2088],"content":"<bpt id=\"p1\">[</bpt>&amp; operator<ept id=\"p1\">](and-operator.md)</ept>","source":"[& operator](and-operator.md)"}]}