<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-send-data-using-the-webrequest-class.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">456dbdab3070e88fe0bc6572c998ce54e3c19c00</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\network-programming\how-to-send-data-using-the-webrequest-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbe37737f83c6aa88fab34b3a26c9fc624341be7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ef2d94cc4f6bcaf647c97105d5791be7210044c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Send data by using the WebRequest class</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Send data by using the WebRequest class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following procedure describes the steps to send data to a server.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This procedure is commonly used to post data to a Web page.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To send data to a host server</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> instance by calling <ph id="ph2">&lt;xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType&gt;</ph> with the URI of a resource, such as a script or ASP.NET page, that accepts data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides protocol-specific classes derived from the <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.WebResponse&gt;</ph> classes for URIs that begin with <bpt id="p1">*</bpt>http:<ept id="p1">*</ept>, <bpt id="p2">*</bpt>https:<ept id="p2">*</ept>, <bpt id="p3">*</bpt>ftp:<ept id="p3">*</ept>, and <bpt id="p4">*</bpt>file:<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you need to set or read protocol-specific properties, you must cast your <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.WebResponse&gt;</ph> object to a protocol-specific object type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Programming pluggable protocols<ept id="p1">](programming-pluggable-protocols.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Set any property values that you need in your <ph id="ph1">`WebRequest`</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, to enable authentication, set the <ph id="ph1">&lt;xref:System.Net.WebRequest.Credentials%2A?displayProperty=nameWithType&gt;</ph> property to an instance of the <ph id="ph2">&lt;xref:System.Net.NetworkCredential&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specify a protocol method that permits data to be sent with a request, such as the HTTP <ph id="ph1">`POST`</ph> method:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Web.HttpRequest.ContentLength&gt;</ph> property to the number of bytes you're including with your request.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Web.HttpRequest.ContentType&gt;</ph> property to an appropriate value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Get the stream that holds request data by calling the <ph id="ph1">&lt;xref:System.Net.WebRequest.GetRequestStream%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Write the data to the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object returned by the <ph id="ph2">`GetRequestStream`</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Close the request stream by calling the <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Send the request to the server by calling <ph id="ph1">&lt;xref:System.Net.WebRequest.GetResponse%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This method returns an object containing the server's response.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The returned <ph id="ph1">`WebResponse`</ph> object's type is determined by the scheme of the request's URI.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can access the properties of your <ph id="ph1">`WebResponse`</ph> object or cast it to a protocol-specific instance to read protocol-specific properties.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, to access the HTTP-specific properties of <ph id="ph1">&lt;xref:System.Net.HttpWebResponse&gt;</ph>, cast your <ph id="ph2">`WebResponse`</ph> object to an <ph id="ph3">&lt;xref:System.Net.HttpWebResponse&gt;</ph> reference.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code example shows how to display the HTTP-specific <ph id="ph1">&lt;xref:System.Net.HttpWebResponse.StatusDescription%2A?displayProperty=nameWithType&gt;</ph> property sent with a response:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To get the stream containing response data sent by the server, call the <ph id="ph1">&lt;xref:System.Net.WebResponse.GetResponseStream%2A?displayProperty=nameWithType&gt;</ph> method of your <ph id="ph2">`WebResponse`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>After you've read the data from the response object, either close it with the <ph id="ph1">&lt;xref:System.Net.WebResponse.Close%2A?displayProperty=nameWithType&gt;</ph> method or close the response stream with the <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you don't close either the response or the stream, your application can run out of server connections and become unable to process additional requests.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`WebResponse.Close`</ph> method calls <ph id="ph2">`Stream.Close`</ph> when it closes the response, it's not necessary to call <ph id="ph3">`Close`</ph> on both the response and stream objects, although doing so isn't harmful.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code example shows how to send data to a web server and read the data in its response:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating internet requests<ept id="p1">](creating-internet-requests.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using streams on the network<ept id="p1">](using-streams-on-the-network.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessing the internet through a proxy<ept id="p1">](accessing-the-internet-through-a-proxy.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Requesting data<ept id="p1">](requesting-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Request data by using the WebRequest class<ept id="p1">](how-to-request-data-using-the-webrequest-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>