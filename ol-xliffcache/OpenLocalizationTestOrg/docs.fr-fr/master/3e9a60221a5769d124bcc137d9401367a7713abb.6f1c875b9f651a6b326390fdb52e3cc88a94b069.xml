{"content":"---\ntitle: Select which .NET Core version to use\ndescription: Learn how .NET Core automatically finds and chooses runtime versions for your program. Additionally, this article teaches you how to force a specific version.\nauthor: billwagner\nms.author: wiwagn\nms.date: 06/27/2018\nms.custom: \"seodec18\"\n---\n\n# Select the .NET Core version to use\n\n[!INCLUDE [topic-appliesto-net-core-2plus](../../../includes/topic-appliesto-net-core-2plus.md)]\n\nThis article explains the policies used by the .NET Core tools, SDK, and runtime for selecting versions. These policies provide a balance between running applications using the specified versions and enabling ease of upgrading both developer and end-user machines. These policies perform the following actions:\n\n- Easy and efficient deployment of .NET Core, including security and reliability updates.\n- Use the latest tools and commands independent of target runtime.\n\nVersion selection occurs:\n\n- When you run an SDK command, [the SDK uses the latest installed version](#the-sdk-uses-the-latest-installed-version).\n- When you build an assembly, [target framework monikers define build time APIs](#target-framework-monikers-define-build-time-apis).\n- When you run a .NET Core application, [target framework dependent apps roll forward](#framework-dependent-apps-roll-forward).\n- When you publish a self-contained application, [self-contained deployments include the selected runtime](#self-contained-deployments-include-the-selected-runtime).\n\nThe rest of this document examines those four scenarios.\n\n## The SDK uses the latest installed version\n\nSDK commands include `dotnet new` and `dotnet run`. The .NET Core CLI must choose an SDK version for every `dotnet` command. It uses the latest SDK installed on the machine by default, even if:\n\n* The project targets an earlier version of the .NET Core runtime.\n* The latest version of the .NET Core SDK is a preview version.\n\nYou can take advantage of the latest SDK features and improvements while targeting earlier .NET Core runtime versions. You can target multiple runtime versions of .NET Core on different projects, using the same SDK tools for all projects.\n\nOn rare occasions, you may need to use an earlier version of the SDK. You specify that version in a [*global.json* file](../tools/global-json.md). The \"use latest\" policy means you only use *global.json* to specify a .NET Core SDK version earlier than the latest installed version.\n\n*global.json* can be placed anywhere in the file hierarchy. The CLI searches upward from the project directory for the first *global.json* it finds. You control which projects a given *global.json* applies to by its place in the file system. The .NET CLI searches for a *global.json* file iteratively navigating the path upward from the current working directory. The first *global.json* file found specifies the version used. If that version is installed, that version is used. If the SDK specified in the *global.json* is not found, the .NET CLI rolls forward to the latest SDK installed. Roll-forward is the same as the default behavior, when no *global.json* file is found.\n\nThe following example shows the *global.json* syntax:\n\n``` json\n{\n  \"sdk\": {\n    \"version\": \"2.0.0\"\n  }\n}\n```\n\nThe process for selecting an SDK version is:\n\n1. `dotnet` searches for a *global.json* file iteratively reverse-navigating the path upward from the current working directory.\n1. `dotnet` uses the SDK specified in the first *global.json* found.\n1. `dotnet` uses the latest installed SDK if no *global.json* is found.\n\nYou can learn more about selecting an SDK version in the [Matching rules](../tools/global-json.md#matching-rules) section of the article on *global.json*.\n\n## Target Framework Monikers define build time APIs\n\nYou build your project against APIs defined in a **Target Framework Moniker** (TFM). You specify the [target framework](../../standard/frameworks.md) in the project file. Set the `TargetFramework` element in your project file as shown in the following example:\n\n``` xml\n<TargetFramework>netcoreapp2.0</TargetFramework>\n```\n\nYou may build your project against multiple TFMs. Setting multiple target frameworks is more common for libraries but can be done with applications as well. You specify a `TargetFrameworks` property (plural of `TargetFramework`). The target frameworks are semicolon-delimited as shown in the following example:\n\n``` xml\n<TargetFrameworks>netcoreapp2.0;net47</TargetFrameworks>\n```\n\nA given SDK supports a fixed set of frameworks, capped to the target framework of the runtime it ships with. For example, the .NET Core 2.0 SDK includes the .NET Core 2.0 runtime, which is an implementation of the `netcoreapp2.0` target framework. The .NET Core 2.0 SDK supports `netcoreapp1.0`, `netcoreapp1.1`, and `netcoreapp2.0` but not `netcoreapp2.1` (or higher). You install the .NET Core 2.1 SDK to build for `netcoreapp2.1`.\n\n.NET Standard target frameworks are also capped to the target framework of the runtime the SDK ships with. The .NET Core 2.0 SDK is capped to `netstandard2.0`.\n\n## Framework-dependent apps roll forward\n\nWhen you run an application from source with [`dotnet run`](../tools/dotnet-run.md), from a [**framework-dependent deployment**](../deploying/index.md#framework-dependent-deployments-fdd) with [`dotnet myapp.dll`](../tools/dotnet.md#description), or from a [**framework-dependent executable**](../deploying/index.md#framework-dependent-executables-fde) with `myapp.exe`, the `dotnet` executable is the **host** for the application.\n\nThe host chooses the latest patch version installed on the machine. For example, if you specified `netcoreapp2.0` in your project file, and `2.0.4` is the latest .NET runtime installed, the `2.0.4` runtime is used.\n\nIf no acceptable `2.0.*` version is found, a new `2.*` version is used. For example, if you specified `netcoreapp2.0` and only `2.1.0` is installed, the application runs using the `2.1.0` runtime. This behavior is referred to as \"minor version roll-forward.\" Lower versions also won't be considered. When no acceptable runtime is installed, the application won't run.\n\nA few usage examples demonstrate the behavior:\n\n- 2.0.4 is required. 2.0.5 is the highest patch version installed. 2.0.5 is used.\n- 2.0.4 is required. No 2.0.* versions are installed. 1.1.1 is the highest runtime installed. An error message is displayed.\n- 2.0.4 is required. 2.0.0 is the highest version installed. An error message is displayed.\n- 2.0.4 is required. No 2.0.* versions are installed. 2.2.2 is the highest 2.x runtime version installed. 2.2.2 is used.\n- 2.0.4 is required. No 2.x versions are installed. 3.0.0 (not a currently available version) is installed. An error message is displayed.\n\nMinor version roll-forward has one side-effect that may affect end users. Consider the following scenario:\n\n- 2.0.4 is required. No 2.0.* versions are installed. 2.2.2 is installed. 2.2.2 is used.\n- 2.0.5 is later installed. 2.0.5 will be used for subsequent application launches, not 2.2.2. The latest patch of the required minor version is preferred over a higher minor version.\n- It's possible that 2.0.5 and 2.2.2 behave differently, particularly for scenarios like serializing binary data.\n\n## Self-contained deployments include the selected runtime\n\nYou can publish an application as a [**self-contained distribution**](../deploying/index.md#self-contained-deployments-scd). This approach bundles the .NET Core runtime and libraries with your application. Self-contained deployments don't have a dependency on runtime environments. Runtime version selection occurs at publishing time, not run time.\n\nThe publishing process selects the latest patch version of the given runtime family. For example, `dotnet publish` will select .NET Core 2.0.4 if it is the latest patch version in the .NET Core 2.0 runtime family. The target framework (including the latest installed security patches) is packaged with the application.\n\nIt's an error if the minimum version specified for an application isn't satisfied. `dotnet publish` binds to the latest runtime patch version (within a given major.minor version family). `dotnet publish` doesn't support the roll-forward semantics of `dotnet run`. For more information about patches and self-contained deployments, see the article on [runtime patch selection](../deploying/runtime-patch-selection.md) in deploying .NET Core applications.\n\nSelf-contained deployments may require a specific patch version. You can override the minimum runtime patch version (to higher or lower versions) in the project file, as shown in the following example:\n\n``` xml\n<RuntimeFrameworkVersion>2.0.4</RuntimeFrameworkVersion>\n```\n\nThe `RuntimeFrameworkVersion` element  overrides the default version policy. For self-contained deployments, the `RuntimeFrameworkVersion` specifies the *exact* runtime framework version. For framework-dependent applications, the `RuntimeFrameworkVersion` specifies the *minimum* required runtime framework version.\n","nodes":[{"pos":[4,299],"embed":true,"restype":"x-metadata","content":"title: Select which .NET Core version to use\ndescription: Learn how .NET Core automatically finds and chooses runtime versions for your program. Additionally, this article teaches you how to force a specific version.\nauthor: billwagner\nms.author: wiwagn\nms.date: 06/27/2018\nms.custom: \"seodec18\"","nodes":[{"content":"Select which .NET Core version to use","nodes":[{"pos":[0,37],"content":"Select which .NET Core version to use","nodes":[{"content":"Select which .NET Core version to use","pos":[0,37]}]}],"path":["title"],"nosxs":false},{"content":"Learn how .NET Core automatically finds and chooses runtime versions for your program. Additionally, this article teaches you how to force a specific version.","nodes":[{"pos":[0,158],"content":"Learn how .NET Core automatically finds and chooses runtime versions for your program. Additionally, this article teaches you how to force a specific version.","nodes":[{"content":"Learn how .NET Core automatically finds and chooses runtime versions for your program. Additionally, this article teaches you how to force a specific version.","pos":[0,158],"nodes":[{"content":"Learn how .NET Core automatically finds and chooses runtime versions for your program.","pos":[0,86]},{"content":"Additionally, this article teaches you how to force a specific version.","pos":[87,158]}]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[307,342],"content":"Select the .NET Core version to use","linkify":"Select the .NET Core version to use","nodes":[{"content":"Select the .NET Core version to use","pos":[0,35]}]},{"content":"This article explains the policies used by the .NET Core tools, SDK, and runtime for selecting versions.","pos":[442,546]},{"content":"These policies provide a balance between running applications using the specified versions and enabling ease of upgrading both developer and end-user machines.","pos":[547,706]},{"content":"These policies perform the following actions:","pos":[707,752]},{"content":"Easy and efficient deployment of .NET Core, including security and reliability updates.","pos":[756,843]},{"content":"Use the latest tools and commands independent of target runtime.","pos":[846,910]},{"content":"Version selection occurs:","pos":[912,937]},{"pos":[941,1058],"content":"When you run an SDK command, <bpt id=\"p1\">[</bpt>the SDK uses the latest installed version<ept id=\"p1\">](#the-sdk-uses-the-latest-installed-version)</ept>.","source":"When you run an SDK command, [the SDK uses the latest installed version](#the-sdk-uses-the-latest-installed-version)."},{"pos":[1061,1191],"content":"When you build an assembly, <bpt id=\"p1\">[</bpt>target framework monikers define build time APIs<ept id=\"p1\">](#target-framework-monikers-define-build-time-apis)</ept>.","source":"When you build an assembly, [target framework monikers define build time APIs](#target-framework-monikers-define-build-time-apis)."},{"pos":[1194,1319],"content":"When you run a .NET Core application, <bpt id=\"p1\">[</bpt>target framework dependent apps roll forward<ept id=\"p1\">](#framework-dependent-apps-roll-forward)</ept>.","source":"When you run a .NET Core application, [target framework dependent apps roll forward](#framework-dependent-apps-roll-forward)."},{"pos":[1322,1485],"content":"When you publish a self-contained application, <bpt id=\"p1\">[</bpt>self-contained deployments include the selected runtime<ept id=\"p1\">](#self-contained-deployments-include-the-selected-runtime)</ept>.","source":"When you publish a self-contained application, [self-contained deployments include the selected runtime](#self-contained-deployments-include-the-selected-runtime)."},{"content":"The rest of this document examines those four scenarios.","pos":[1487,1543]},{"pos":[1548,1589],"content":"The SDK uses the latest installed version","linkify":"The SDK uses the latest installed version","nodes":[{"content":"The SDK uses the latest installed version","pos":[0,41]}]},{"content":"SDK commands include <ph id=\"ph1\">`dotnet new`</ph> and <ph id=\"ph2\">`dotnet run`</ph>.","pos":[1591,1642],"source":"SDK commands include `dotnet new` and `dotnet run`."},{"content":"The .NET Core CLI must choose an SDK version for every <ph id=\"ph1\">`dotnet`</ph> command.","pos":[1643,1715],"source":" The .NET Core CLI must choose an SDK version for every `dotnet` command."},{"content":"It uses the latest SDK installed on the machine by default, even if:","pos":[1716,1784]},{"content":"The project targets an earlier version of the .NET Core runtime.","pos":[1788,1852]},{"content":"The latest version of the .NET Core SDK is a preview version.","pos":[1855,1916]},{"content":"You can take advantage of the latest SDK features and improvements while targeting earlier .NET Core runtime versions.","pos":[1918,2036]},{"content":"You can target multiple runtime versions of .NET Core on different projects, using the same SDK tools for all projects.","pos":[2037,2156]},{"content":"On rare occasions, you may need to use an earlier version of the SDK.","pos":[2158,2227]},{"content":"You specify that version in a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>global.json<ept id=\"p2\">*</ept> file<ept id=\"p1\">](../tools/global-json.md)</ept>.","pos":[2228,2304],"source":" You specify that version in a [*global.json* file](../tools/global-json.md)."},{"content":"The \"use latest\" policy means you only use <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> to specify a .NET Core SDK version earlier than the latest installed version.","pos":[2305,2439],"source":" The \"use latest\" policy means you only use *global.json* to specify a .NET Core SDK version earlier than the latest installed version."},{"content":"<bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> can be placed anywhere in the file hierarchy.","pos":[2441,2500],"source":"*global.json* can be placed anywhere in the file hierarchy."},{"content":"The CLI searches upward from the project directory for the first <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> it finds.","pos":[2501,2589],"source":" The CLI searches upward from the project directory for the first *global.json* it finds."},{"content":"You control which projects a given <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> applies to by its place in the file system.","pos":[2590,2682],"source":" You control which projects a given *global.json* applies to by its place in the file system."},{"content":"The .NET CLI searches for a <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> file iteratively navigating the path upward from the current working directory.","pos":[2683,2804],"source":" The .NET CLI searches for a *global.json* file iteratively navigating the path upward from the current working directory."},{"content":"The first <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> file found specifies the version used.","pos":[2805,2867],"source":" The first *global.json* file found specifies the version used."},{"content":"If that version is installed, that version is used.","pos":[2868,2919]},{"content":"If the SDK specified in the <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> is not found, the .NET CLI rolls forward to the latest SDK installed.","pos":[2920,3031],"source":" If the SDK specified in the *global.json* is not found, the .NET CLI rolls forward to the latest SDK installed."},{"content":"Roll-forward is the same as the default behavior, when no <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> file is found.","pos":[3032,3118],"source":" Roll-forward is the same as the default behavior, when no *global.json* file is found."},{"pos":[3120,3173],"content":"The following example shows the <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> syntax:","source":"The following example shows the *global.json* syntax:"},{"content":"The process for selecting an SDK version is:","pos":[3231,3275]},{"pos":[3280,3405],"content":"<ph id=\"ph1\">`dotnet`</ph> searches for a <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> file iteratively reverse-navigating the path upward from the current working directory.","source":"`dotnet` searches for a *global.json* file iteratively reverse-navigating the path upward from the current working directory."},{"pos":[3409,3474],"content":"<ph id=\"ph1\">`dotnet`</ph> uses the SDK specified in the first <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> found.","source":"`dotnet` uses the SDK specified in the first *global.json* found."},{"pos":[3478,3546],"content":"<ph id=\"ph1\">`dotnet`</ph> uses the latest installed SDK if no <bpt id=\"p1\">*</bpt>global.json<ept id=\"p1\">*</ept> is found.","source":"`dotnet` uses the latest installed SDK if no *global.json* is found."},{"pos":[3548,3702],"content":"You can learn more about selecting an SDK version in the <bpt id=\"p1\">[</bpt>Matching rules<ept id=\"p1\">](../tools/global-json.md#matching-rules)</ept> section of the article on <bpt id=\"p2\">*</bpt>global.json<ept id=\"p2\">*</ept>.","source":"You can learn more about selecting an SDK version in the [Matching rules](../tools/global-json.md#matching-rules) section of the article on *global.json*."},{"pos":[3707,3755],"content":"Target Framework Monikers define build time APIs","linkify":"Target Framework Monikers define build time APIs","nodes":[{"content":"Target Framework Monikers define build time APIs","pos":[0,48]}]},{"content":"You build your project against APIs defined in a <bpt id=\"p1\">**</bpt>Target Framework Moniker<ept id=\"p1\">**</ept> (TFM).","pos":[3757,3841],"source":"You build your project against APIs defined in a **Target Framework Moniker** (TFM)."},{"content":"You specify the <bpt id=\"p1\">[</bpt>target framework<ept id=\"p1\">](../../standard/frameworks.md)</ept> in the project file.","pos":[3842,3927],"source":" You specify the [target framework](../../standard/frameworks.md) in the project file."},{"content":"Set the <ph id=\"ph1\">`TargetFramework`</ph> element in your project file as shown in the following example:","pos":[3928,4017],"source":" Set the `TargetFramework` element in your project file as shown in the following example:"},{"content":"You may build your project against multiple TFMs.","pos":[4081,4130]},{"content":"Setting multiple target frameworks is more common for libraries but can be done with applications as well.","pos":[4131,4237]},{"content":"You specify a <ph id=\"ph1\">`TargetFrameworks`</ph> property (plural of <ph id=\"ph2\">`TargetFramework`</ph>).","pos":[4238,4310],"source":" You specify a `TargetFrameworks` property (plural of `TargetFramework`)."},{"content":"The target frameworks are semicolon-delimited as shown in the following example:","pos":[4311,4391]},{"content":"A given SDK supports a fixed set of frameworks, capped to the target framework of the runtime it ships with.","pos":[4463,4571]},{"content":"For example, the .NET Core 2.0 SDK includes the .NET Core 2.0 runtime, which is an implementation of the <ph id=\"ph1\">`netcoreapp2.0`</ph> target framework.","pos":[4572,4710],"source":" For example, the .NET Core 2.0 SDK includes the .NET Core 2.0 runtime, which is an implementation of the `netcoreapp2.0` target framework."},{"content":"The .NET Core 2.0 SDK supports <ph id=\"ph1\">`netcoreapp1.0`</ph>, <ph id=\"ph2\">`netcoreapp1.1`</ph>, and <ph id=\"ph3\">`netcoreapp2.0`</ph> but not <ph id=\"ph4\">`netcoreapp2.1`</ph> (or higher).","pos":[4711,4832],"source":" The .NET Core 2.0 SDK supports `netcoreapp1.0`, `netcoreapp1.1`, and `netcoreapp2.0` but not `netcoreapp2.1` (or higher)."},{"content":"You install the .NET Core 2.1 SDK to build for <ph id=\"ph1\">`netcoreapp2.1`</ph>.","pos":[4833,4896],"source":" You install the .NET Core 2.1 SDK to build for `netcoreapp2.1`."},{"content":".NET Standard target frameworks are also capped to the target framework of the runtime the SDK ships with.","pos":[4898,5004]},{"content":"The .NET Core 2.0 SDK is capped to <ph id=\"ph1\">`netstandard2.0`</ph>.","pos":[5005,5057],"source":" The .NET Core 2.0 SDK is capped to `netstandard2.0`."},{"pos":[5062,5099],"content":"Framework-dependent apps roll forward","linkify":"Framework-dependent apps roll forward","nodes":[{"content":"Framework-dependent apps roll forward","pos":[0,37]}]},{"pos":[5101,5532],"content":"When you run an application from source with <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet run`</ph><ept id=\"p1\">](../tools/dotnet-run.md)</ept>, from a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>framework-dependent deployment<ept id=\"p3\">**</ept><ept id=\"p2\">](../deploying/index.md#framework-dependent-deployments-fdd)</ept> with <bpt id=\"p4\">[</bpt><ph id=\"ph2\">`dotnet myapp.dll`</ph><ept id=\"p4\">](../tools/dotnet.md#description)</ept>, or from a <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>framework-dependent executable<ept id=\"p6\">**</ept><ept id=\"p5\">](../deploying/index.md#framework-dependent-executables-fde)</ept> with <ph id=\"ph3\">`myapp.exe`</ph>, the <ph id=\"ph4\">`dotnet`</ph> executable is the <bpt id=\"p7\">**</bpt>host<ept id=\"p7\">**</ept> for the application.","source":"When you run an application from source with [`dotnet run`](../tools/dotnet-run.md), from a [**framework-dependent deployment**](../deploying/index.md#framework-dependent-deployments-fdd) with [`dotnet myapp.dll`](../tools/dotnet.md#description), or from a [**framework-dependent executable**](../deploying/index.md#framework-dependent-executables-fde) with `myapp.exe`, the `dotnet` executable is the **host** for the application."},{"content":"The host chooses the latest patch version installed on the machine.","pos":[5534,5601]},{"content":"For example, if you specified <ph id=\"ph1\">`netcoreapp2.0`</ph> in your project file, and <ph id=\"ph2\">`2.0.4`</ph> is the latest .NET runtime installed, the <ph id=\"ph3\">`2.0.4`</ph> runtime is used.","pos":[5602,5748],"source":" For example, if you specified `netcoreapp2.0` in your project file, and `2.0.4` is the latest .NET runtime installed, the `2.0.4` runtime is used."},{"content":"If no acceptable <ph id=\"ph1\">`2.0.*`</ph> version is found, a new <ph id=\"ph2\">`2.*`</ph> version is used.","pos":[5750,5821],"source":"If no acceptable `2.0.*` version is found, a new `2.*` version is used."},{"content":"For example, if you specified <ph id=\"ph1\">`netcoreapp2.0`</ph> and only <ph id=\"ph2\">`2.1.0`</ph> is installed, the application runs using the <ph id=\"ph3\">`2.1.0`</ph> runtime.","pos":[5822,5946],"source":" For example, if you specified `netcoreapp2.0` and only `2.1.0` is installed, the application runs using the `2.1.0` runtime."},{"content":"This behavior is referred to as \"minor version roll-forward.\"","pos":[5947,6008]},{"content":"Lower versions also won't be considered.","pos":[6009,6049]},{"content":"When no acceptable runtime is installed, the application won't run.","pos":[6050,6117]},{"content":"A few usage examples demonstrate the behavior:","pos":[6119,6165]},{"content":"2.0.4 is required.","pos":[6169,6187]},{"content":"2.0.5 is the highest patch version installed.","pos":[6188,6233]},{"content":"2.0.5 is used.","pos":[6234,6248]},{"content":"2.0.4 is required.","pos":[6251,6269]},{"content":"No 2.0.* versions are installed.","pos":[6270,6302]},{"content":"1.1.1 is the highest runtime installed.","pos":[6303,6342]},{"content":"An error message is displayed.","pos":[6343,6373]},{"content":"2.0.4 is required.","pos":[6376,6394]},{"content":"2.0.0 is the highest version installed.","pos":[6395,6434]},{"content":"An error message is displayed.","pos":[6435,6465]},{"content":"2.0.4 is required.","pos":[6468,6486]},{"content":"No 2.0.* versions are installed.","pos":[6487,6519]},{"content":"2.2.2 is the highest 2.x runtime version installed.","pos":[6520,6571]},{"content":"2.2.2 is used.","pos":[6572,6586]},{"content":"2.0.4 is required.","pos":[6589,6607]},{"content":"No 2.x versions are installed.","pos":[6608,6638]},{"content":"3.0.0 (not a currently available version) is installed.","pos":[6639,6694]},{"content":"An error message is displayed.","pos":[6695,6725]},{"content":"Minor version roll-forward has one side-effect that may affect end users.","pos":[6727,6800]},{"content":"Consider the following scenario:","pos":[6801,6833]},{"content":"2.0.4 is required.","pos":[6837,6855]},{"content":"No 2.0.* versions are installed.","pos":[6856,6888]},{"content":"2.2.2 is installed.","pos":[6889,6908]},{"content":"2.2.2 is used.","pos":[6909,6923]},{"content":"2.0.5 is later installed.","pos":[6926,6951]},{"content":"2.0.5 will be used for subsequent application launches, not 2.2.2.","pos":[6952,7018]},{"content":"The latest patch of the required minor version is preferred over a higher minor version.","pos":[7019,7107]},{"content":"It's possible that 2.0.5 and 2.2.2 behave differently, particularly for scenarios like serializing binary data.","pos":[7110,7221]},{"pos":[7226,7281],"content":"Self-contained deployments include the selected runtime","linkify":"Self-contained deployments include the selected runtime","nodes":[{"content":"Self-contained deployments include the selected runtime","pos":[0,55]}]},{"content":"You can publish an application as a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>self-contained distribution<ept id=\"p2\">**</ept><ept id=\"p1\">](../deploying/index.md#self-contained-deployments-scd)</ept>.","pos":[7283,7407],"source":"You can publish an application as a [**self-contained distribution**](../deploying/index.md#self-contained-deployments-scd)."},{"content":"This approach bundles the .NET Core runtime and libraries with your application.","pos":[7408,7488]},{"content":"Self-contained deployments don't have a dependency on runtime environments.","pos":[7489,7564]},{"content":"Runtime version selection occurs at publishing time, not run time.","pos":[7565,7631]},{"content":"The publishing process selects the latest patch version of the given runtime family.","pos":[7633,7717]},{"content":"For example, <ph id=\"ph1\">`dotnet publish`</ph> will select .NET Core 2.0.4 if it is the latest patch version in the .NET Core 2.0 runtime family.","pos":[7718,7846],"source":" For example, `dotnet publish` will select .NET Core 2.0.4 if it is the latest patch version in the .NET Core 2.0 runtime family."},{"content":"The target framework (including the latest installed security patches) is packaged with the application.","pos":[7847,7951]},{"content":"It's an error if the minimum version specified for an application isn't satisfied.","pos":[7953,8035]},{"content":"<ph id=\"ph1\">`dotnet publish`</ph> binds to the latest runtime patch version (within a given major.minor version family).","pos":[8036,8139],"source":"`dotnet publish` binds to the latest runtime patch version (within a given major.minor version family)."},{"content":"<ph id=\"ph1\">`dotnet publish`</ph> doesn't support the roll-forward semantics of <ph id=\"ph2\">`dotnet run`</ph>.","pos":[8140,8216],"source":"`dotnet publish` doesn't support the roll-forward semantics of `dotnet run`."},{"content":"For more information about patches and self-contained deployments, see the article on <bpt id=\"p1\">[</bpt>runtime patch selection<ept id=\"p1\">](../deploying/runtime-patch-selection.md)</ept> in deploying .NET Core applications.","pos":[8217,8406],"source":" For more information about patches and self-contained deployments, see the article on [runtime patch selection](../deploying/runtime-patch-selection.md) in deploying .NET Core applications."},{"content":"Self-contained deployments may require a specific patch version.","pos":[8408,8472]},{"content":"You can override the minimum runtime patch version (to higher or lower versions) in the project file, as shown in the following example:","pos":[8473,8609]},{"content":"The <ph id=\"ph1\">`RuntimeFrameworkVersion`</ph> element  overrides the default version policy.","pos":[8681,8757],"source":"The `RuntimeFrameworkVersion` element  overrides the default version policy."},{"content":"For self-contained deployments, the <ph id=\"ph1\">`RuntimeFrameworkVersion`</ph> specifies the <bpt id=\"p1\">*</bpt>exact<ept id=\"p1\">*</ept> runtime framework version.","pos":[8758,8868],"source":" For self-contained deployments, the `RuntimeFrameworkVersion` specifies the *exact* runtime framework version."},{"content":"For framework-dependent applications, the <ph id=\"ph1\">`RuntimeFrameworkVersion`</ph> specifies the <bpt id=\"p1\">*</bpt>minimum<ept id=\"p1\">*</ept> required runtime framework version.","pos":[8869,8996],"source":" For framework-dependent applications, the `RuntimeFrameworkVersion` specifies the *minimum* required runtime framework version."}]}