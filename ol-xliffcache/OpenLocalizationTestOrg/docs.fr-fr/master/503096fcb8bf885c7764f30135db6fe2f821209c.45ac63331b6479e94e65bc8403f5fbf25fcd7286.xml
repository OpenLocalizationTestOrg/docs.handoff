{"content":"---\ntitle: \"Walkthrough: Creating a Custom Dataflow Block Type | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, creating custom dataflow blocks\"\n  - \"dataflow blocks, creating custom in TPL\"\nms.assetid: a6147146-0a6a-4d9b-ab0f-237b3c1ac691\ncaps.latest.revision: 8\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Walkthrough: Creating a Custom Dataflow Block Type\nAlthough the TPL Dataflow Library provides several dataflow block types that enable a variety of functionality, you can also create custom block types. This document describes how to create a dataflow block type that implements custom behavior.  \n  \n## Prerequisites  \n Read [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md) before you read this document.  \n  \n> [!TIP]\n>  The TPL Dataflow Library (<xref:System.Threading.Tasks.Dataflow?displayProperty=fullName> namespace) is not distributed with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)]. To install the <xref:System.Threading.Tasks.Dataflow> namespace, open your project in [!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)], choose **Manage NuGet Packages** from the Project menu, and search online for the `Microsoft.Tpl.Dataflow` package.  \n  \n## Defining the Sliding Window Dataflow Block  \n Consider a dataflow application that requires that input values be buffered and then output in a sliding window manner. For example, for the input values {0, 1, 2, 3, 4, 5} and a window size of three, a sliding window dataflow block produces the output arrays {0, 1, 2}, {1, 2, 3}, {2, 3, 4}, and {3, 4, 5}. The following sections describe two ways to create a dataflow block type that implements this custom behavior. The first technique uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method to combine the functionality of an <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> object and an <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> object into one propagator block. The second technique defines a class that derives from <xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602> and combines existing functionality to perform custom behavior.  \n  \n## Using the Encapsulate Method to Define the Sliding Window Dataflow Block  \n The following example uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method to create a propagator block from a target and a source. A propagator block enables a source block and a target block to act as a receiver and sender of data.  \n  \n This technique is useful when you require custom dataflow functionality, but you do not require a type that provides additional methods, properties, or fields.  \n  \n [!code-csharp[TPLDataflow_SlidingWindowBlock#1](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#1)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#1](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#1)]  \n  \n## Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block  \n The following example shows the `SlidingWindowBlock` class. This class derives from <xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602> so that it can act as both a source and a target of data. As in the previous example, the `SlidingWindowBlock` class is built on existing dataflow block types. However, the `SlidingWindowBlock` class also implements the methods that are required by the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>, <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>, and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock> interfaces. These methods all forward work to the predefined dataflow block type members. For example, the `Post` method defers work to the `m_target` data member, which is also an <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> object.  \n  \n This technique is useful when you require custom dataflow functionality, and also require a type that provides additional methods, properties, or fields. For example, the `SlidingWindowBlock` class also derives from <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601> so that it can provide the <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> and <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceiveAll%2A> methods. The `SlidingWindowBlock` class also demonstrates extensibility by providing the `WindowSize` property, which retrieves the number of elements in the sliding window.  \n  \n [!code-csharp[TPLDataflow_SlidingWindowBlock#2](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#2)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#2](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#2)]  \n  \n## The Complete Example  \n The following example shows the complete code for this walkthrough. It also demonstrates how to use the both sliding window blocks in a method that writes to the block, reads from it, and prints the results to the console.  \n  \n [!code-csharp[TPLDataflow_SlidingWindowBlock#100](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#100)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#100](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#100)]  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `SlidingWindowBlock.cs` (`SlidingWindowBlock.vb` for [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]) and then run the following command in a Visual Studio Command Prompt window.  \n  \n [!INCLUDE[csprcs](../../../includes/csprcs-md.md)]  \n  \n **csc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.cs**  \n  \n [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]  \n  \n **vbc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.vb**  \n  \n## Next Steps  \n  \n## See Also  \n [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)","nodes":[{"pos":[12,79],"content":"Walkthrough: Creating a Custom Dataflow Block Type | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Walkthrough: Creating a Custom Dataflow Block Type | Microsoft Docs","pos":[0,67]}]},{"pos":[537,587],"content":"Walkthrough: Creating a Custom Dataflow Block Type","linkify":"Walkthrough: Creating a Custom Dataflow Block Type","nodes":[{"content":"Walkthrough: Creating a Custom Dataflow Block Type","pos":[0,50]}]},{"content":"Although the TPL Dataflow Library provides several dataflow block types that enable a variety of functionality, you can also create custom block types.","pos":[588,739]},{"content":"This document describes how to create a dataflow block type that implements custom behavior.","pos":[740,832]},{"pos":[841,854],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[858,983],"content":"Read <bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept> before you read this document.","source":"Read [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md) before you read this document."},{"pos":[991,1451],"content":"[!TIP]\n The TPL Dataflow Library (<xref:System.Threading.Tasks.Dataflow?displayProperty=fullName> namespace) is not distributed with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)]. To install the <xref:System.Threading.Tasks.Dataflow> namespace, open your project in [!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)], choose **Manage NuGet Packages** from the Project menu, and search online for the `Microsoft.Tpl.Dataflow` package.","leadings":["","> "],"nodes":[{"content":" The TPL Dataflow Library (<xref:System.Threading.Tasks.Dataflow?displayProperty=fullName> namespace) is not distributed with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)]. To install the <xref:System.Threading.Tasks.Dataflow> namespace, open your project in [!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)], choose **Manage NuGet Packages** from the Project menu, and search online for the `Microsoft.Tpl.Dataflow` package.","pos":[7,458],"nodes":[{"content":"The TPL Dataflow Library (<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow?displayProperty=fullName&gt;</ph> namespace) is not distributed with the <ph id=\"ph2\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>.","pos":[1,183],"source":" The TPL Dataflow Library (<xref:System.Threading.Tasks.Dataflow?displayProperty=fullName> namespace) is not distributed with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)]."},{"content":"To install the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow&gt;</ph> namespace, open your project in <ph id=\"ph2\">[!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)]</ph>, choose <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept> from the Project menu, and search online for the <ph id=\"ph3\">`Microsoft.Tpl.Dataflow`</ph> package.","pos":[184,451],"source":" To install the <xref:System.Threading.Tasks.Dataflow> namespace, open your project in [!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)], choose **Manage NuGet Packages** from the Project menu, and search online for the `Microsoft.Tpl.Dataflow` package."}]}]},{"pos":[1460,1502],"content":"Defining the Sliding Window Dataflow Block","linkify":"Defining the Sliding Window Dataflow Block","nodes":[{"content":"Defining the Sliding Window Dataflow Block","pos":[0,42]}]},{"content":"Consider a dataflow application that requires that input values be buffered and then output in a sliding window manner.","pos":[1506,1625]},{"content":"For example, for the input values {0, 1, 2, 3, 4, 5} and a window size of three, a sliding window dataflow block produces the output arrays {0, 1, 2}, {1, 2, 3}, {2, 3, 4}, and {3, 4, 5}.","pos":[1626,1813]},{"content":"The following sections describe two ways to create a dataflow block type that implements this custom behavior.","pos":[1814,1924]},{"content":"The first technique uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A&gt;</ph> method to combine the functionality of an <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> object and an <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> object into one propagator block.","pos":[1925,2223],"source":" The first technique uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method to combine the functionality of an <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> object and an <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> object into one propagator block."},{"content":"The second technique defines a class that derives from <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602&gt;</ph> and combines existing functionality to perform custom behavior.","pos":[2224,2402],"source":" The second technique defines a class that derives from <xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602> and combines existing functionality to perform custom behavior."},{"pos":[2411,2483],"content":"Using the Encapsulate Method to Define the Sliding Window Dataflow Block","linkify":"Using the Encapsulate Method to Define the Sliding Window Dataflow Block","nodes":[{"content":"Using the Encapsulate Method to Define the Sliding Window Dataflow Block","pos":[0,72]}]},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A&gt;</ph> method to create a propagator block from a target and a source.","pos":[2487,2649],"source":"The following example uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method to create a propagator block from a target and a source."},{"content":"A propagator block enables a source block and a target block to act as a receiver and sender of data.","pos":[2650,2751]},{"content":"This technique is useful when you require custom dataflow functionality, but you do not require a type that provides additional methods, properties, or fields.","pos":[2758,2917]},{"pos":[2924,3241],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPLDataflow_SlidingWindowBlock#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPLDataflow_SlidingWindowBlock#1<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPLDataflow_SlidingWindowBlock#1](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#1)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#1](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#1)]"},{"pos":[3250,3324],"content":"Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block","linkify":"Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block","nodes":[{"content":"Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block","pos":[0,74]}]},{"content":"The following example shows the <ph id=\"ph1\">`SlidingWindowBlock`</ph> class.","pos":[3328,3387],"source":"The following example shows the `SlidingWindowBlock` class."},{"content":"This class derives from <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602&gt;</ph> so that it can act as both a source and a target of data.","pos":[3388,3529],"source":" This class derives from <xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602> so that it can act as both a source and a target of data."},{"content":"As in the previous example, the <ph id=\"ph1\">`SlidingWindowBlock`</ph> class is built on existing dataflow block types.","pos":[3530,3631],"source":" As in the previous example, the `SlidingWindowBlock` class is built on existing dataflow block types."},{"content":"However, the <ph id=\"ph1\">`SlidingWindowBlock`</ph> class also implements the methods that are required by the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Dataflow.IDataflowBlock&gt;</ph> interfaces.","pos":[3632,3908],"source":" However, the `SlidingWindowBlock` class also implements the methods that are required by the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>, <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>, and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock> interfaces."},{"content":"These methods all forward work to the predefined dataflow block type members.","pos":[3909,3986]},{"content":"For example, the <ph id=\"ph1\">`Post`</ph> method defers work to the <ph id=\"ph2\">`m_target`</ph> data member, which is also an <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> object.","pos":[3987,4141],"source":" For example, the `Post` method defers work to the `m_target` data member, which is also an <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> object."},{"content":"This technique is useful when you require custom dataflow functionality, and also require a type that provides additional methods, properties, or fields.","pos":[4148,4301]},{"content":"For example, the <ph id=\"ph1\">`SlidingWindowBlock`</ph> class also derives from <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601&gt;</ph> so that it can provide the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceiveAll%2A&gt;</ph> methods.","pos":[4302,4632],"source":" For example, the `SlidingWindowBlock` class also derives from <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601> so that it can provide the <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> and <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceiveAll%2A> methods."},{"content":"The <ph id=\"ph1\">`SlidingWindowBlock`</ph> class also demonstrates extensibility by providing the <ph id=\"ph2\">`WindowSize`</ph> property, which retrieves the number of elements in the sliding window.","pos":[4633,4797],"source":" The `SlidingWindowBlock` class also demonstrates extensibility by providing the `WindowSize` property, which retrieves the number of elements in the sliding window."},{"pos":[4804,5121],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPLDataflow_SlidingWindowBlock#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPLDataflow_SlidingWindowBlock#2<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPLDataflow_SlidingWindowBlock#2](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#2)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#2](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#2)]"},{"pos":[5130,5150],"content":"The Complete Example","linkify":"The Complete Example","nodes":[{"content":"The Complete Example","pos":[0,20]}]},{"content":"The following example shows the complete code for this walkthrough.","pos":[5154,5221]},{"content":"It also demonstrates how to use the both sliding window blocks in a method that writes to the block, reads from it, and prints the results to the console.","pos":[5222,5376]},{"pos":[5383,5708],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPLDataflow_SlidingWindowBlock#100<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#100)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPLDataflow_SlidingWindowBlock#100<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#100)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPLDataflow_SlidingWindowBlock#100](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#100)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#100](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#100)]"},{"pos":[5717,5735],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[5739,6019],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`SlidingWindowBlock.cs`</ph> (<ph id=\"ph2\">`SlidingWindowBlock.vb`</ph> for <ph id=\"ph3\">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>) and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `SlidingWindowBlock.cs` (`SlidingWindowBlock.vb` for [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]) and then run the following command in a Visual Studio Command Prompt window."},{"pos":[6083,6155],"content":"<bpt id=\"p1\">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.cs<ept id=\"p1\">**</ept>","source":"**csc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.cs**"},{"pos":[6219,6291],"content":"<bpt id=\"p1\">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.vb<ept id=\"p1\">**</ept>","source":"**vbc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.vb**"},{"pos":[6300,6310],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"pos":[6319,6327],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6331,6420],"content":"<bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept>","source":"[Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)"}]}