{"content":"---\ntitle: \"Numerics in .NET\"\nms.date: \"10/18/2018\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"SIMD\"\n  - \"System.Numerics.Vectors\"\n  - \"vectors\"\n  - \"scientific computing\"\n  - \"Complex\"\n  - \"numerics\"\n  - \"BigInteger\"\nms.assetid: dfebc18e-acde-4510-9fa7-9a0f4aa3bd11\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Numerics in .NET\n\n.NET provides a range of numeric integer and floating-point primitives, as well as <xref:System.Numerics.BigInteger?displayProperty=nameWithType>, which is an integral type with no theoretical upper or lower bound, <xref:System.Numerics.Complex?displayProperty=nameWithType>, which represents complex numbers, and a set of SIMD-enabled types in the <xref:System.Numerics> namespace.\n  \n## Integer types\n\n.NET supports both signed and unsigned 8-, 16-, 32-, and 64-bit integer types, which are listed in the following table:\n  \n|Type|Signed/Unsigned|Size (in bytes)|Minimum value|Maximum value|  \n|----------|----------------------|--------------------|-------------------|-------------------|  \n|<xref:System.Byte?displayProperty=nameWithType>|Unsigned|1|0|255|  \n|<xref:System.Int16?displayProperty=nameWithType>|Signed|2|-32,768|32,767|  \n|<xref:System.Int32?displayProperty=nameWithType>|Signed|4|-2,147,483,648|2,147,483,647|  \n|<xref:System.Int64?displayProperty=nameWithType>|Signed|8|-9,223,372,036,854,775,808|9,223,372,036,854,775,807|  \n|<xref:System.SByte?displayProperty=nameWithType>|Signed|1|-128|127|  \n|<xref:System.UInt16?displayProperty=nameWithType>|Unsigned|2|0|65,535|  \n|<xref:System.UInt32?displayProperty=nameWithType>|Unsigned|4|0|4,294,967,295|  \n|<xref:System.UInt64?displayProperty=nameWithType>|Unsigned|8|0|18,446,744,073,709,551,615|  \n  \nEach integer type supports a set of standard arithmetic operators. The <xref:System.Math?displayProperty=nameWithType> class provides methods for a broader set of mathematical functions.\n\nYou can also work with the individual bits in an integer value by using the <xref:System.BitConverter?displayProperty=nameWithType> class.  \n\n> [!NOTE]  \n> The unsigned integer types are not CLS-compliant. For more information, see [Language Independence and Language-Independent Components](language-independence-and-language-independent-components.md).\n\n## BigInteger\n\nThe <xref:System.Numerics.BigInteger?displayProperty=nameWithType> structure is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds. The methods of the <xref:System.Numerics.BigInteger> type closely parallel those of the other integral types.\n  \n## Floating-point types\n\n.NET includes three primitive floating-point types, which are listed in the following table:\n  \n|Type|Size (in bytes)|Approximate range|Precision|  \n|----------|--------|---------------------|--------------------|  \n|<xref:System.Single?displayProperty=nameWithType>|4|±1.5 x 10<sup>−45</sup> to ±3.4 x 10<sup>38</sup>|~6-9 digits|  \n|<xref:System.Double?displayProperty=nameWithType>|8|±5.0 × 10<sup>−324</sup> to ±1.7 × 10<sup>308</sup>|~15-17 digits|  \n|<xref:System.Decimal?displayProperty=nameWithType>|16|±1.0 x 10<sup>-28</sup> to ±7.9228 x 10<sup>28</sup>|28-29 digits|  \n  \nBoth <xref:System.Single> and <xref:System.Double> types support special values that represent not-a-number and infinity. For example, the <xref:System.Double> type provides the following values: <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>. You use the <xref:System.Double.IsNaN%2A?displayProperty=nameWithType>, <xref:System.Double.IsInfinity%2A?displayProperty=nameWithType>, <xref:System.Double.IsPositiveInfinity%2A?displayProperty=nameWithType>, and <xref:System.Double.IsNegativeInfinity%2A?displayProperty=nameWithType> methods to test for these special values.\n\nEach floating-point type supports a set of standard arithmetic operators. The <xref:System.Math?displayProperty=nameWithType> class provides methods for a broader set of mathematical functions. .NET Core 2.0 and later includes the <xref:System.MathF?displayProperty=nameWithType> class that provides methods which accept arguments of the <xref:System.Single> type.\n\nYou can also work with the individual bits in <xref:System.Double> and <xref:System.Single> values by using the <xref:System.BitConverter?displayProperty=nameWithType> class. The <xref:System.Decimal?displayProperty=nameWithType> structure has its own methods, <xref:System.Decimal.GetBits%2A?displayProperty=nameWithType> and <xref:System.Decimal.%23ctor%28System.Int32%5B%5D%29?displayProperty=nameWithType>, for working with a decimal value's individual bits, as well as its own set of methods for performing some additional mathematical operations.\n  \nThe <xref:System.Double> and <xref:System.Single> types are intended to be used for values that by their nature are imprecise (for example, the distance between two stars) and for applications in which a high degree of precision and small rounding error is not required. You should use the <xref:System.Decimal?displayProperty=nameWithType> type for cases in which greater precision is required and rounding errors should be minimized.\n\n> [!NOTE]\n> The <xref:System.Decimal> type doesn't eliminate the need for rounding. Rather, it minimizes errors due to rounding.\n  \n## Complex\n\nThe <xref:System.Numerics.Complex?displayProperty=nameWithType> structure represents a complex number, that is, a number with a real number part and an imaginary number part. It supports a standard set of arithmetic, comparison, equality, explicit and implicit conversion operators, as well as mathematical, algebraic, and trigonometric methods.  \n  \n## SIMD-enabled types\n\nThe <xref:System.Numerics> namespace includes a set of .NET SIMD-enabled types. SIMD (Single Instruction Multiple Data) operations can be parallelized at the hardware level. That increases the throughput of the vectorized computations, which are common in mathematical, scientific, and graphics apps.\n  \nThe .NET SIMD-enabled types include the following:\n\n- The <xref:System.Numerics.Vector2>, <xref:System.Numerics.Vector3>, and <xref:System.Numerics.Vector4> types, which represent vectors with 2, 3, and 4 <xref:System.Single> values.\n\n- Two matrix types, <xref:System.Numerics.Matrix3x2>, which represents a 3x2 matrix, and <xref:System.Numerics.Matrix4x4>, which represents a 4x4 matrix.\n\n- The <xref:System.Numerics.Plane> type, which represents a plane in three-dimensional space.\n\n- The <xref:System.Numerics.Quaternion> type, which represents a vector that is used to encode three-dimensional physical rotations.\n\n- The <xref:System.Numerics.Vector%601> type, which represents a vector of a specified numeric type and provides a broad set of operators that benefit from SIMD support. The count of a <xref:System.Numerics.Vector%601> instance is fixed, but its value <xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType> depends on the CPU of the machine, on which code is executed.\n  > [!NOTE]\n  > The <xref:System.Numerics.Vector%601> type is not included into the .NET Framework. You must install the [System.Numerics.Vectors](https://www.nuget.org/packages/System.Numerics.Vectors) NuGet package to get access to this type.\n  \nThe SIMD-enabled types are implemented in such a way that they can be used with non-SIMD-enabled hardware or JIT compilers. To take advantage of SIMD instructions, your 64-bit apps must be run by the runtime that uses the RyuJIT compiler, which is included in .NET Core and in the .NET Framework 4.6 and later versions. It adds SIMD support when targeting 64-bit processors.\n\n## See also\n\n- [Application Essentials](application-essentials.md)\n- [Standard Numeric Format Strings](base-types/standard-numeric-format-strings.md)\n","nodes":[{"pos":[4,321],"embed":true,"restype":"x-metadata","content":"title: \"Numerics in .NET\"\nms.date: \"10/18/2018\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"SIMD\"\n  - \"System.Numerics.Vectors\"\n  - \"vectors\"\n  - \"scientific computing\"\n  - \"Complex\"\n  - \"numerics\"\n  - \"BigInteger\"\nms.assetid: dfebc18e-acde-4510-9fa7-9a0f4aa3bd11\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Numerics in .NET","nodes":[{"pos":[0,16],"content":"Numerics in .NET","nodes":[{"content":"Numerics in .NET","pos":[0,16]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[328,344],"content":"Numerics in .NET","linkify":"Numerics in .NET","nodes":[{"content":"Numerics in .NET","pos":[0,16]}]},{"pos":[346,728],"content":".NET provides a range of numeric integer and floating-point primitives, as well as <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger?displayProperty=nameWithType&gt;</ph>, which is an integral type with no theoretical upper or lower bound, <ph id=\"ph2\">&lt;xref:System.Numerics.Complex?displayProperty=nameWithType&gt;</ph>, which represents complex numbers, and a set of SIMD-enabled types in the <ph id=\"ph3\">&lt;xref:System.Numerics&gt;</ph> namespace.","source":".NET provides a range of numeric integer and floating-point primitives, as well as <xref:System.Numerics.BigInteger?displayProperty=nameWithType>, which is an integral type with no theoretical upper or lower bound, <xref:System.Numerics.Complex?displayProperty=nameWithType>, which represents complex numbers, and a set of SIMD-enabled types in the <xref:System.Numerics> namespace."},{"pos":[735,748],"content":"Integer types","linkify":"Integer types","nodes":[{"content":"Integer types","pos":[0,13]}]},{"content":".NET supports both signed and unsigned 8-, 16-, 32-, and 64-bit integer types, which are listed in the following table:","pos":[750,869]},{"content":"Type","pos":[874,878]},{"content":"Signed/Unsigned","pos":[879,894]},{"content":"Size (in bytes)","pos":[895,910]},{"content":"Minimum value","pos":[911,924]},{"content":"Maximum value","pos":[925,938]},{"content":"Unsigned","pos":[1090,1098]},{"content":"1","pos":[1099,1100]},{"content":"0","pos":[1101,1102]},{"content":"255","pos":[1103,1106]},{"content":"Signed","pos":[1160,1166]},{"content":"2","pos":[1167,1168]},{"content":"-32,768","pos":[1169,1176]},{"content":"32,767","pos":[1177,1183]},{"content":"Signed","pos":[1237,1243]},{"content":"4","pos":[1244,1245]},{"content":"-2,147,483,648","pos":[1246,1260]},{"content":"2,147,483,647","pos":[1261,1274]},{"content":"Signed","pos":[1328,1334]},{"content":"8","pos":[1335,1336]},{"content":"-9,223,372,036,854,775,808","pos":[1337,1363]},{"content":"9,223,372,036,854,775,807","pos":[1364,1389]},{"content":"Signed","pos":[1443,1449]},{"content":"1","pos":[1450,1451]},{"content":"-128","pos":[1452,1456]},{"content":"127","pos":[1457,1460]},{"content":"Unsigned","pos":[1515,1523]},{"content":"2","pos":[1524,1525]},{"content":"0","pos":[1526,1527]},{"content":"65,535","pos":[1528,1534]},{"content":"Unsigned","pos":[1589,1597]},{"content":"4","pos":[1598,1599]},{"content":"0","pos":[1600,1601]},{"content":"4,294,967,295","pos":[1602,1615]},{"content":"Unsigned","pos":[1670,1678]},{"content":"8","pos":[1679,1680]},{"content":"0","pos":[1681,1682]},{"content":"18,446,744,073,709,551,615","pos":[1683,1709]},{"content":"Each integer type supports a set of standard arithmetic operators.","pos":[1716,1782]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Math?displayProperty=nameWithType&gt;</ph> class provides methods for a broader set of mathematical functions.","pos":[1783,1902],"source":" The <xref:System.Math?displayProperty=nameWithType> class provides methods for a broader set of mathematical functions."},{"pos":[1904,2042],"content":"You can also work with the individual bits in an integer value by using the <ph id=\"ph1\">&lt;xref:System.BitConverter?displayProperty=nameWithType&gt;</ph> class.","source":"You can also work with the individual bits in an integer value by using the <xref:System.BitConverter?displayProperty=nameWithType> class."},{"pos":[2048,2258],"content":"[!NOTE]  \nThe unsigned integer types are not CLS-compliant. For more information, see [Language Independence and Language-Independent Components](language-independence-and-language-independent-components.md).","leadings":["","> "],"nodes":[{"content":"The unsigned integer types are not CLS-compliant. For more information, see [Language Independence and Language-Independent Components](language-independence-and-language-independent-components.md).","pos":[10,208],"nodes":[{"content":"The unsigned integer types are not CLS-compliant.","pos":[0,49]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Language Independence and Language-Independent Components<ept id=\"p1\">](language-independence-and-language-independent-components.md)</ept>.","pos":[50,198],"source":" For more information, see [Language Independence and Language-Independent Components](language-independence-and-language-independent-components.md)."}]}]},{"pos":[2263,2273],"content":"BigInteger","linkify":"BigInteger","nodes":[{"content":"BigInteger","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger?displayProperty=nameWithType&gt;</ph> structure is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.","pos":[2275,2469],"source":"The <xref:System.Numerics.BigInteger?displayProperty=nameWithType> structure is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds."},{"content":"The methods of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> type closely parallel those of the other integral types.","pos":[2470,2579],"source":" The methods of the <xref:System.Numerics.BigInteger> type closely parallel those of the other integral types."},{"pos":[2586,2606],"content":"Floating-point types","linkify":"Floating-point types","nodes":[{"content":"Floating-point types","pos":[0,20]}]},{"content":".NET includes three primitive floating-point types, which are listed in the following table:","pos":[2608,2700]},{"content":"Type","pos":[2705,2709]},{"content":"Size (in bytes)","pos":[2710,2725]},{"content":"Approximate range","pos":[2726,2743]},{"content":"Precision","pos":[2744,2753]},{"content":"4","pos":[2875,2876]},{"pos":[2877,2926],"content":"±1.5 x 10<bpt id=\"p1\">&lt;sup&gt;</bpt>−45<ept id=\"p1\">&lt;/sup&gt;</ept> to ±3.4 x 10<bpt id=\"p2\">&lt;sup&gt;</bpt>38<ept id=\"p2\">&lt;/sup&gt;</ept>","source":"±1.5 x 10<sup>−45</sup> to ±3.4 x 10<sup>38</sup>"},{"content":"~6-9 digits","pos":[2927,2938]},{"content":"8","pos":[2993,2994]},{"pos":[2995,3046],"content":"±5.0 × 10<bpt id=\"p1\">&lt;sup&gt;</bpt>−324<ept id=\"p1\">&lt;/sup&gt;</ept> to ±1.7 × 10<bpt id=\"p2\">&lt;sup&gt;</bpt>308<ept id=\"p2\">&lt;/sup&gt;</ept>","source":"±5.0 × 10<sup>−324</sup> to ±1.7 × 10<sup>308</sup>"},{"content":"~15-17 digits","pos":[3047,3060]},{"content":"16","pos":[3116,3118]},{"pos":[3119,3171],"content":"±1.0 x 10<bpt id=\"p1\">&lt;sup&gt;</bpt>-28<ept id=\"p1\">&lt;/sup&gt;</ept> to ±7.9228 x 10<bpt id=\"p2\">&lt;sup&gt;</bpt>28<ept id=\"p2\">&lt;/sup&gt;</ept>","source":"±1.0 x 10<sup>-28</sup> to ±7.9228 x 10<sup>28</sup>"},{"content":"28-29 digits","pos":[3172,3184]},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Single&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> types support special values that represent not-a-number and infinity.","pos":[3191,3312],"source":"Both <xref:System.Single> and <xref:System.Double> types support special values that represent not-a-number and infinity."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> type provides the following values: <ph id=\"ph2\">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph>.","pos":[3313,3581],"source":" For example, the <xref:System.Double> type provides the following values: <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>."},{"content":"You use the <ph id=\"ph1\">&lt;xref:System.Double.IsNaN%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Double.IsInfinity%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Double.IsPositiveInfinity%2A?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Double.IsNegativeInfinity%2A?displayProperty=nameWithType&gt;</ph> methods to test for these special values.","pos":[3582,3909],"source":" You use the <xref:System.Double.IsNaN%2A?displayProperty=nameWithType>, <xref:System.Double.IsInfinity%2A?displayProperty=nameWithType>, <xref:System.Double.IsPositiveInfinity%2A?displayProperty=nameWithType>, and <xref:System.Double.IsNegativeInfinity%2A?displayProperty=nameWithType> methods to test for these special values."},{"content":"Each floating-point type supports a set of standard arithmetic operators.","pos":[3911,3984]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Math?displayProperty=nameWithType&gt;</ph> class provides methods for a broader set of mathematical functions.","pos":[3985,4104],"source":" The <xref:System.Math?displayProperty=nameWithType> class provides methods for a broader set of mathematical functions."},{"content":".NET Core 2.0 and later includes the <ph id=\"ph1\">&lt;xref:System.MathF?displayProperty=nameWithType&gt;</ph> class that provides methods which accept arguments of the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> type.","pos":[4105,4275],"source":" .NET Core 2.0 and later includes the <xref:System.MathF?displayProperty=nameWithType> class that provides methods which accept arguments of the <xref:System.Single> type."},{"content":"You can also work with the individual bits in <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> values by using the <ph id=\"ph3\">&lt;xref:System.BitConverter?displayProperty=nameWithType&gt;</ph> class.","pos":[4277,4451],"source":"You can also work with the individual bits in <xref:System.Double> and <xref:System.Single> values by using the <xref:System.BitConverter?displayProperty=nameWithType> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Decimal?displayProperty=nameWithType&gt;</ph> structure has its own methods, <ph id=\"ph2\">&lt;xref:System.Decimal.GetBits%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Decimal.%23ctor%28System.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph>, for working with a decimal value's individual bits, as well as its own set of methods for performing some additional mathematical operations.","pos":[4452,4829],"source":" The <xref:System.Decimal?displayProperty=nameWithType> structure has its own methods, <xref:System.Decimal.GetBits%2A?displayProperty=nameWithType> and <xref:System.Decimal.%23ctor%28System.Int32%5B%5D%29?displayProperty=nameWithType>, for working with a decimal value's individual bits, as well as its own set of methods for performing some additional mathematical operations."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> types are intended to be used for values that by their nature are imprecise (for example, the distance between two stars) and for applications in which a high degree of precision and small rounding error is not required.","pos":[4833,5103],"source":"The <xref:System.Double> and <xref:System.Single> types are intended to be used for values that by their nature are imprecise (for example, the distance between two stars) and for applications in which a high degree of precision and small rounding error is not required."},{"content":"You should use the <ph id=\"ph1\">&lt;xref:System.Decimal?displayProperty=nameWithType&gt;</ph> type for cases in which greater precision is required and rounding errors should be minimized.","pos":[5104,5268],"source":" You should use the <xref:System.Decimal?displayProperty=nameWithType> type for cases in which greater precision is required and rounding errors should be minimized."},{"pos":[5272,5398],"content":"[!NOTE]\nThe <xref:System.Decimal> type doesn't eliminate the need for rounding. Rather, it minimizes errors due to rounding.","leadings":["","> "],"nodes":[{"content":"The <xref:System.Decimal> type doesn't eliminate the need for rounding. Rather, it minimizes errors due to rounding.","pos":[8,124],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Decimal&gt;</ph> type doesn't eliminate the need for rounding.","pos":[0,71],"source":"The <xref:System.Decimal> type doesn't eliminate the need for rounding."},{"content":"Rather, it minimizes errors due to rounding.","pos":[72,116]}]}]},{"pos":[5405,5412],"content":"Complex","linkify":"Complex","nodes":[{"content":"Complex","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.Complex?displayProperty=nameWithType&gt;</ph> structure represents a complex number, that is, a number with a real number part and an imaginary number part.","pos":[5414,5588],"source":"The <xref:System.Numerics.Complex?displayProperty=nameWithType> structure represents a complex number, that is, a number with a real number part and an imaginary number part."},{"content":"It supports a standard set of arithmetic, comparison, equality, explicit and implicit conversion operators, as well as mathematical, algebraic, and trigonometric methods.","pos":[5589,5759]},{"pos":[5768,5786],"content":"SIMD-enabled types","linkify":"SIMD-enabled types","nodes":[{"content":"SIMD-enabled types","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics&gt;</ph> namespace includes a set of .NET SIMD-enabled types.","pos":[5788,5867],"source":"The <xref:System.Numerics> namespace includes a set of .NET SIMD-enabled types."},{"content":"SIMD (Single Instruction Multiple Data) operations can be parallelized at the hardware level.","pos":[5868,5961]},{"content":"That increases the throughput of the vectorized computations, which are common in mathematical, scientific, and graphics apps.","pos":[5962,6088]},{"content":"The .NET SIMD-enabled types include the following:","pos":[6092,6142]},{"pos":[6146,6325],"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.Vector2&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Numerics.Vector3&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Numerics.Vector4&gt;</ph> types, which represent vectors with 2, 3, and 4 <ph id=\"ph4\">&lt;xref:System.Single&gt;</ph> values.","source":"The <xref:System.Numerics.Vector2>, <xref:System.Numerics.Vector3>, and <xref:System.Numerics.Vector4> types, which represent vectors with 2, 3, and 4 <xref:System.Single> values."},{"pos":[6329,6480],"content":"Two matrix types, <ph id=\"ph1\">&lt;xref:System.Numerics.Matrix3x2&gt;</ph>, which represents a 3x2 matrix, and <ph id=\"ph2\">&lt;xref:System.Numerics.Matrix4x4&gt;</ph>, which represents a 4x4 matrix.","source":"Two matrix types, <xref:System.Numerics.Matrix3x2>, which represents a 3x2 matrix, and <xref:System.Numerics.Matrix4x4>, which represents a 4x4 matrix."},{"pos":[6484,6575],"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.Plane&gt;</ph> type, which represents a plane in three-dimensional space.","source":"The <xref:System.Numerics.Plane> type, which represents a plane in three-dimensional space."},{"pos":[6579,6709],"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.Quaternion&gt;</ph> type, which represents a vector that is used to encode three-dimensional physical rotations.","source":"The <xref:System.Numerics.Quaternion> type, which represents a vector that is used to encode three-dimensional physical rotations."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.Vector%601&gt;</ph> type, which represents a vector of a specified numeric type and provides a broad set of operators that benefit from SIMD support.","pos":[6713,6880],"source":"The <xref:System.Numerics.Vector%601> type, which represents a vector of a specified numeric type and provides a broad set of operators that benefit from SIMD support."},{"content":"The count of a <ph id=\"ph1\">&lt;xref:System.Numerics.Vector%601&gt;</ph> instance is fixed, but its value <ph id=\"ph2\">&lt;xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType&gt;</ph> depends on the CPU of the machine, on which code is executed.","pos":[6881,7096],"source":" The count of a <xref:System.Numerics.Vector%601> instance is fixed, but its value <xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType> depends on the CPU of the machine, on which code is executed."},{"pos":[7101,7341],"content":"[!NOTE]\nThe <xref:System.Numerics.Vector%601> type is not included into the .NET Framework. You must install the [System.Numerics.Vectors](https://www.nuget.org/packages/System.Numerics.Vectors) NuGet package to get access to this type.","leadings":["","  > "],"nodes":[{"content":"The <xref:System.Numerics.Vector%601> type is not included into the .NET Framework. You must install the [System.Numerics.Vectors](https://www.nuget.org/packages/System.Numerics.Vectors) NuGet package to get access to this type.","pos":[8,236],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.Vector%601&gt;</ph> type is not included into the .NET Framework.","pos":[0,83],"source":"The <xref:System.Numerics.Vector%601> type is not included into the .NET Framework."},{"content":"You must install the <bpt id=\"p1\">[</bpt>System.Numerics.Vectors<ept id=\"p1\">](https://www.nuget.org/packages/System.Numerics.Vectors)</ept> NuGet package to get access to this type.","pos":[84,228],"source":" You must install the [System.Numerics.Vectors](https://www.nuget.org/packages/System.Numerics.Vectors) NuGet package to get access to this type."}]}]},{"content":"The SIMD-enabled types are implemented in such a way that they can be used with non-SIMD-enabled hardware or JIT compilers.","pos":[7345,7468]},{"content":"To take advantage of SIMD instructions, your 64-bit apps must be run by the runtime that uses the RyuJIT compiler, which is included in .NET Core and in the .NET Framework 4.6 and later versions.","pos":[7469,7664]},{"content":"It adds SIMD support when targeting 64-bit processors.","pos":[7665,7719]},{"pos":[7724,7732],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7736,7787],"content":"<bpt id=\"p1\">[</bpt>Application Essentials<ept id=\"p1\">](application-essentials.md)</ept>","source":"[Application Essentials](application-essentials.md)"},{"pos":[7790,7870],"content":"<bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](base-types/standard-numeric-format-strings.md)</ept>","source":"[Standard Numeric Format Strings](base-types/standard-numeric-format-strings.md)"}]}