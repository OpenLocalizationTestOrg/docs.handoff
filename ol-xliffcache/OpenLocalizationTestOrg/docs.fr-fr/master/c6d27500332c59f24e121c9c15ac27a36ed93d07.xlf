<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-using-dataflow-in-a-windows-forms-application.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6d27500332c59f24e121c9c15ac27a36ed93d07</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\walkthrough-using-dataflow-in-a-windows-forms-application.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76a87bead997c15f107f16a66dbdf9694ed40099</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0eb496683f70b66de2fd43d1f810fa96f76fd3b6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Using Dataflow in a Windows Forms Application</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Using Dataflow in a Windows Forms Application</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document demonstrates how to create a network of dataflow blocks that perform image processing in a Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This example loads image files from the specified folder, creates a composite image, and displays the result.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The example uses the dataflow model to route images through the network.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the dataflow model, independent components of a program communicate with one another by sending messages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When a component receives a message, it performs some action and then passes the result to another component.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compare this with the control flow model, in which an application uses control structures, for example, conditional statements, loops, and so on, to control the order of operations in a program.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept> before you start this walkthrough.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This walkthrough contains the following sections:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating the Windows Forms Application<ept id="p1">](#winforms)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating the Dataflow Network<ept id="p1">](#network)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Connecting the Dataflow Network to the User Interface<ept id="p1">](#ui)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The Complete Example<ept id="p1">](#complete)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating the Windows Forms Application</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This section describes how to create the basic Windows Forms application and add controls to the main form.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To Create the Windows Forms Application</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Visual Studio, create a Visual C# or Visual Basic <bpt id="p1">**</bpt>Windows Forms Application<ept id="p1">**</ept> project.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this document, the project is named <ph id="ph1">`CompositeImages`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>On the form designer for the main form, Form1.cs (Form1.vb for Visual Basic), add a <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStrip&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripButton&gt;</ph> control to the <ph id="ph2">&lt;xref:System.Windows.Forms.ToolStrip&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripItem.DisplayStyle%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.ToolStripItemDisplayStyle.Text&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Forms.ToolStripItem.Text%2A&gt;</ph> property to <bpt id="p1">**</bpt>Choose Folder<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add a second <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripButton&gt;</ph> control to the <ph id="ph2">&lt;xref:System.Windows.Forms.ToolStrip&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripItem.DisplayStyle%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.ToolStripItemDisplayStyle.Text&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.ToolStripItem.Text%2A&gt;</ph> property to <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept>, and the <ph id="ph4">&lt;xref:System.Windows.Forms.ToolStripItem.Enabled%2A&gt;</ph> property to <ph id="ph5">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> object to the main form.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.DockStyle.Fill&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creating the Dataflow Network</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This section describes how to create the dataflow network that performs image processing.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To Create the Dataflow Network</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Add a reference to System.Threading.Tasks.Dataflow.dll to your project.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Ensure that Form1.cs (Form1.vb for Visual Basic) contains the following <ph id="ph1">`using`</ph> (<ph id="ph2">`Using`</ph> in Visual Basic) statements:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Add the following data members to the <ph id="ph1">`Form1`</ph> class:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add the following method, <ph id="ph1">`CreateImageProcessingNetwork`</ph>, to the <ph id="ph2">`Form1`</ph> class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This method creates the image processing network.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">`LoadBitmaps`</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">`CreateCompositeBitmap`</ph> method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The C# version of the <ph id="ph1">`CreateCompositeBitmap`</ph> method uses pointers to enable efficient processing of the <ph id="ph2">&lt;xref:System.Drawing.Bitmap?displayProperty=nameWithType&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Therefore, you must enable the <bpt id="p1">**</bpt>Allow unsafe code<ept id="p1">**</ept> option in your project in order to use the <bpt id="p2">[</bpt>unsafe<ept id="p2">](~/docs/csharp/language-reference/keywords/unsafe.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about how to enable unsafe code in a Visual C# project, see <bpt id="p1">[</bpt>Build Page, Project Designer (C#)<ept id="p1">](/visualstudio/ide/reference/build-page-project-designer-csharp)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following table describes the members of the network.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Takes a folder path as input and produces a collection of <ph id="ph1">&lt;xref:System.Drawing.Bitmap&gt;</ph> objects as output.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Takes a collection of <ph id="ph1">&lt;xref:System.Drawing.Bitmap&gt;</ph> objects as input and produces a composite bitmap as output.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Displays the composite bitmap on the form.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Displays an image to indicate that the operation is canceled and enables the user to select another folder.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To connect the dataflow blocks to form a network, this example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.LinkTo%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.LinkTo%2A&gt;</ph> method contains an overloaded version that takes a <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> object that determines whether the target block accepts or rejects a message.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This filtering mechanism enables message blocks to receive only certain values.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In this example, the network can branch in one of two ways.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The main branch loads the images from disk, creates the composite image, and displays that image on the form.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The alternate branch cancels the current operation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> objects enable the dataflow blocks along the main branch to switch to the alternative branch by rejecting certain messages.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, if the user cancels the operation, the dataflow block <ph id="ph1">`createCompositeBitmap`</ph> produces <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph> in Visual Basic) as its output.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The dataflow block <ph id="ph1">`displayCompositeBitmap`</ph> rejects <ph id="ph2">`null`</ph> input values, and therefore, the message is offered to <ph id="ph3">`operationCancelled`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The dataflow block <ph id="ph1">`operationCancelled`</ph> accepts all messages and therefore, displays an image to indicate that the operation is canceled.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following illustration shows the image processing network:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Illustration that shows the image processing network.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`displayCompositeBitmap`</ph> and <ph id="ph2">`operationCancelled`</ph> dataflow blocks act on the user interface, it is important that these actions occur on the user-interface thread.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To accomplish this, during construction, these objects each provide a <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&gt;</ph> object that has the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler%2A&gt;</ph> property set to <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext%2A?displayProperty=nameWithType&gt;</ph> method creates a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object that performs work on the current synchronization context.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`CreateImageProcessingNetwork`</ph> method is called from the handler of the <bpt id="p1">**</bpt>Choose Folder<ept id="p1">**</ept> button, which runs on the user-interface thread, the actions for the <ph id="ph2">`displayCompositeBitmap`</ph> and <ph id="ph3">`operationCancelled`</ph> dataflow blocks also run on the user-interface thread.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This example uses a shared cancellation token instead of setting the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken%2A&gt;</ph> property because the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken%2A&gt;</ph> property permanently cancels dataflow block execution.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A cancellation token enables this example to reuse the same dataflow network multiple times, even when the user cancels one or more operations.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For an example that uses <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken%2A&gt;</ph> to permanently cancel the execution of a dataflow block, see <bpt id="p1">[</bpt>How to: Cancel a Dataflow Block<ept id="p1">](../../../docs/standard/parallel-programming/how-to-cancel-a-dataflow-block.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Connecting the Dataflow Network to the User Interface</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This section describes how to connect the dataflow network to the user interface.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The creation of the composite image and cancellation of the operation are initiated from the <bpt id="p1">**</bpt>Choose Folder<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When the user chooses either of these buttons, the appropriate action is initiated in an asynchronous manner.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To Connect the Dataflow Network to the User Interface</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>On the form designer for the main form, create an event handler for the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripItem.Click&gt;</ph> event for the <bpt id="p1">**</bpt>Choose Folder<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripItem.Click&gt;</ph> event for the <bpt id="p1">**</bpt>Choose Folder<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>On the form designer for the main form, create an event handler for the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripItem.Click&gt;</ph> event for the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripItem.Click&gt;</ph> event for the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The Complete Example</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following example shows the complete code for this walkthrough.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following illustration shows typical output for the common \Sample Pictures\ folder.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The Windows Forms Application<ept id="p1">]</ept><bpt id="p2">(../../../docs/standard/parallel-programming/media/tpldataflow-compositeimages.gif "</bpt>TPLDataflow_CompositeImages<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>