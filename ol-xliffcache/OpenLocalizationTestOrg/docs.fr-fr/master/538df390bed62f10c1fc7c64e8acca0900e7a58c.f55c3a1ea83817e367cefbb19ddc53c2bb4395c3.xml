{"content":"---\ntitle: \"Compiler Warning (level 1) CS1911\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1911\"\nhelpviewer_keywords: \n  - \"CS1911\"\nms.assetid: 95e8a7a0-1c19-4930-a7e9-3ae4060e97d3\n---\n# Compiler Warning (level 1) CS1911\nAccess to member 'name' through a 'base' keyword from an anonymous method, lambda expression, query expression, or iterator results in unverifiable code. Consider moving the access into a helper method on the containing type.  \n  \n Calling virtual functions with the `base` keyword inside the method body of an iterator or anonymous methods will result in unverifiable code. Unverifiable code will fail to run in a partial trust environment.  \n  \n One resolution for CS1911 is to move the virtual function call to a helper function.  \n  \n## Example  \n The following sample generates CS1911.  \n  \n```csharp  \n// CS1911.cs  \n// compile with: /W:1  \nusing System;  \n  \ndelegate void D();  \ndelegate D RetD();  \n  \nclass B {  \n   protected virtual void M() {  \n      Console.WriteLine(\"B.M\");  \n   }  \n}  \n  \nclass Der : B {  \n   protected override void M() {  \n      Console.WriteLine(\"D.M\");  \n   }  \n  \n   void Test() { base.M(); }  \n   D Test2() { return new D(base.M); }  \n  \n   public D CallBaseM() {  \n      return delegate () { base.M(); };   // CS1911  \n  \n      // try the following line instead  \n      // return delegate () { Test(); };  \n   }  \n  \n   public RetD DelToBaseM() {  \n      return delegate () { return new D(base.M); };   // CS1911  \n  \n      // try the following line instead  \n      // return delegate () { return Test2(); };  \n   }  \n}  \n  \nclass Program {  \n   public static void Main() {  \n      Der der = new Der();  \n      D d = der.CallBaseM();  \n      d();  \n      RetD rd = der.DelToBaseM();  \n      rd()();  \n   }  \n}  \n```\n","nodes":[{"pos":[4,177],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Warning (level 1) CS1911\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1911\"\nhelpviewer_keywords: \n  - \"CS1911\"\nms.assetid: 95e8a7a0-1c19-4930-a7e9-3ae4060e97d3","nodes":[{"content":"Compiler Warning (level 1) CS1911","nodes":[{"pos":[0,33],"content":"Compiler Warning (level 1) CS1911","nodes":[{"content":"Compiler Warning (level 1) CS1911","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[184,217],"content":"Compiler Warning (level 1) CS1911","linkify":"Compiler Warning (level 1) CS1911","nodes":[{"content":"Compiler Warning (level 1) CS1911","pos":[0,33]}]},{"content":"Access to member 'name' through a 'base' keyword from an anonymous method, lambda expression, query expression, or iterator results in unverifiable code.","pos":[218,371]},{"content":"Consider moving the access into a helper method on the containing type.","pos":[372,443]},{"content":"Calling virtual functions with the <ph id=\"ph1\">`base`</ph> keyword inside the method body of an iterator or anonymous methods will result in unverifiable code.","pos":[450,592],"source":"Calling virtual functions with the `base` keyword inside the method body of an iterator or anonymous methods will result in unverifiable code."},{"content":"Unverifiable code will fail to run in a partial trust environment.","pos":[593,659]},{"content":"One resolution for CS1911 is to move the virtual function call to a helper function.","pos":[666,750]},{"pos":[759,766],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates CS1911.","pos":[770,808]}]}