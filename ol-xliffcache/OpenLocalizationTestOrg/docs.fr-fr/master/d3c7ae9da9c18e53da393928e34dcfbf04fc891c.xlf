<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-culture-affects-strings.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3c7ae9da9c18e53da393928e34dcfbf04fc891c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\strings\how-culture-affects-strings.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b2dfbe21d7036678b7649c87c1b92709599d1e9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ddb1a33d5f8455f34f19ec1f8b7accf6a76d1e3c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How Culture Affects Strings in Visual Basic</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How Culture Affects Strings in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This Help page discusses how Visual Basic uses culture information to perform string conversions and comparisons.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When to Use Culture-Specific Strings</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Typically, you should use culture-specific strings for all data presented to and read from users, and use culture-invariant strings for your application's internal data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, if your application asks users to enter a date as a string, it should expect users to format the strings according to their culture, and the application should convert the string appropriately.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If your application then presents that date in its user interface, it should present it in the user's culture.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, if the application uploads the date to a central server, it should format the string according to one specific culture, to prevent confusion between potentially different date formats.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Culture-Sensitive Functions</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>All of the Visual Basic string-conversion functions (except for the <ph id="ph1">`Str`</ph> and <ph id="ph2">`Val`</ph> functions) use the application's culture information to make sure that the conversions and comparisons are appropriate for the culture of the application's user.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The key to successfully using string-conversion functions in applications that run on computers with different culture settings is to understand which functions use a specific culture setting, and which use the current culture setting.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Notice that the application's culture settings are, by default, inherited from the culture settings of the operating system.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.Asc%2A&gt;</ph>, <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</ph>, <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Strings.Chr%2A&gt;</ph>, <ph id="ph4">&lt;xref:Microsoft.VisualBasic.Strings.ChrW%2A&gt;</ph>, <ph id="ph5">&lt;xref:Microsoft.VisualBasic.Strings.Format%2A&gt;</ph>, <ph id="ph6">&lt;xref:Microsoft.VisualBasic.Conversion.Hex%2A&gt;</ph>, <ph id="ph7">&lt;xref:Microsoft.VisualBasic.Conversion.Oct%2A&gt;</ph>, and <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Str`</ph> (converts numbers to strings) and <ph id="ph2">`Val`</ph> (converts strings to numbers) functions do not use the application's culture information when converting between strings and numbers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Instead, they recognize only the period (.) as a valid decimal separator.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The culturally-aware analogues of these functions are:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Conversions that use the current culture.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CStr`</ph> and <ph id="ph2">`Format`</ph> functions convert a number to a string, and the <ph id="ph3">`CDbl`</ph> and <ph id="ph4">`CInt`</ph> functions convert a string to a number.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Conversions that use a specific culture.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each number object has a <ph id="ph1">`ToString(IFormatProvider)`</ph> method that converts a number to a string, and a <ph id="ph2">`Parse(String, IFormatProvider)`</ph> method that converts a string to a number.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`Double`</ph> type provides the <ph id="ph2">&lt;xref:System.Double.ToString%28System.IFormatProvider%29&gt;</ph> and <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Conversion.Str%2A&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Conversion.Val%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Using a Specific Culture</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Imagine that you are developing an application that sends a date (formatted as a string) to a Web service.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this case, your application must use a specific culture for the string conversion.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To illustrate why, consider the result of using the date's <ph id="ph1">&lt;xref:System.DateTime.ToString&gt;</ph> method: If your application uses that method to format the date July 4, 2005, it returns "7/4/2005 12:00:00 AM" when run with the United States English (en-US) culture, but it returns "04.07.2005 00:00:00" when run with the German (de-DE) culture.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you need to perform a string conversion in a specific culture format, you should use the <ph id="ph1">`CultureInfo`</ph> class that is built into the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can create a new <ph id="ph1">`CultureInfo`</ph> object for a specific culture by passing the culture's name to the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.%23ctor%2A&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The supported culture names are listed in the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class Help page.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Alternatively, you can get an instance of the <bpt id="p1">*</bpt>invariant culture<ept id="p1">*</ept> from the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The invariant culture is based on the English culture, but there are some differences.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the invariant culture specifies a 24-hour clock instead of a 12-hour clock.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To convert a date to the culture's string, pass the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object to the date object's <ph id="ph2">&lt;xref:System.DateTime.ToString%28System.IFormatProvider%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the following code displays "07/04/2005 00:00:00", regardless of the application's culture settings.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Date literals are always interpreted according to the English culture.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Comparing Strings</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There are two important situations where string comparisons are needed:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sorting data for display to the user.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use operations based on the current culture so the strings sort appropriately.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Determining if two application-internal strings exactly match (typically for security purposes).<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use operations that disregard the current culture.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can perform both types of comparisons with the Visual Basic <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.StrComp%2A&gt;</ph> function.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specify the optional <ph id="ph1">`Compare`</ph> argument to control the type of comparison: <ph id="ph2">`Text`</ph> for most input and output <ph id="ph3">`Binary`</ph> for determining exact matches.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StrComp`</ph> function returns an integer that indicates the relationship between the two compared strings based on the sorting order.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A positive value for the result indicates that the first string is greater than the second string.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A negative result indicates the first string is smaller, and zero indicates equality between the strings.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> partner of the <ph id="ph2">`StrComp`</ph> function, the <ph id="ph3">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is a static, overloaded method of the base string class.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example illustrates how this method is used:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For finer control over how the comparisons are performed, you can use additional overloads of the <ph id="ph1">&lt;xref:System.String.Compare%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>With the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method, you can use the <ph id="ph2">`comparisonType`</ph> argument to specify which type of comparison to use.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Value for <ph id="ph1">`comparisonType`</ph> argument</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Type of comparison</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When to use</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Comparison based on strings' component bytes.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use this value when comparing: case-sensitive identifiers, security-related settings, or other non-linguistic identifiers where the bytes must match exactly.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Comparison based on strings' component bytes.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OrdinalIgnoreCase`</ph> uses the invariant culture information to determine when two characters differ only in capitalization.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use this value when comparing: case-insensitive identifiers, security-related settings, and data stored in Windows.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CurrentCulture`</ph> or <ph id="ph2">`CurrentCultureIgnoreCase`</ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Comparison based on the strings' interpretation in the current culture.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use these values when comparing: data that is displayed to the user, most user input, and other data that requires linguistic interpretation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InvariantCulture`</ph> or <ph id="ph2">`InvariantCultureIgnoreCase`</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Comparison based on the strings' interpretation in the invariant culture.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is different than the <ph id="ph1">`Ordinal`</ph> and <ph id="ph2">`OrdinalIgnoreCase`</ph>, because the invariant culture treats characters outside its accepted range as equivalent invariant characters.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Use these values only when comparing persisting data or displaying linguistically-relevant data that requires a fixed sort order.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method, and pass <ph id="ph2">`Ordinal`</ph> or <ph id="ph3">`OrdinalIgnoreCase`</ph> for the <ph id="ph4">`comparisonType`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Strings in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>