<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2da64aed060355d66153076b3919755d9011f566</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\on-error-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">facc49f39e584a5a8585487f26c2b89f46eb5996</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c5874a54057e23c4b5a61c6ea178f2d0a87f1e1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>On Error Statement (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>On Error Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Enables an error-handling routine and specifies the location of the routine within a procedure; can also be used to disable an error-handling routine.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Without an <ph id="ph1">`On Error`</ph> statement, any run-time error that occurs is fatal: an error message is displayed, and execution stops.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Whenever possible, we suggest you use structured exception handling in your code, rather than using unstructured exception handling and the <ph id="ph1">`On Error`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Error`</ph> keyword is also used in the <bpt id="p1">[</bpt>Error Statement<ept id="p1">](../../../visual-basic/language-reference/statements/error-statement.md)</ept>, which is supported for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GoTo`</ph> <ph id="ph2">`line`</ph></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Enables the error-handling routine that starts at the line specified in the required <ph id="ph1">`line`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`line`</ph> argument is any line label or line number.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If a run-time error occurs, control branches to the specified line, making the error handler active.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The specified line must be in the same procedure as the <ph id="ph1">`On Error`</ph> statement, or a compile-time error will occur.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GoTo`</ph> 0</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Disables enabled error handler in the current procedure and resets it to <ph id="ph1">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GoTo`</ph> -1</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Disables enabled exception in the current procedure and resets it to <ph id="ph1">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Specifies that when a run-time error occurs, control goes to the statement immediately following the statement where the error occurred, and execution continues from that point.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use this form rather than <ph id="ph1">`On Error GoTo`</ph> when accessing objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the <ph id="ph1">`On Error`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An "enabled" error handler is one that is turned on by an <ph id="ph1">`On Error`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An "active" error handler is an enabled handler that is in the process of handling an error.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If an error occurs while an error handler is active (between the occurrence of the error and a <ph id="ph1">`Resume`</ph>, <ph id="ph2">`Exit Sub`</ph>, <ph id="ph3">`Exit Function`</ph>, or <ph id="ph4">`Exit Property`</ph> statement), the current procedure's error handler cannot handle the error.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Control returns to the calling procedure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the calling procedure has an enabled error handler, it is activated to handle the error.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the calling procedure's error handler is also active, control passes back through previous calling procedures until an enabled, but inactive, error handler is found.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If no such error handler is found, the error is fatal at the point at which it actually occurred.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each time the error handler passes control back to a calling procedure, that procedure becomes the current procedure.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Once an error is handled by an error handler in any procedure, execution resumes in the current procedure at the point designated by the <ph id="ph1">`Resume`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An error-handling routine is not a <ph id="ph1">`Sub`</ph> procedure or a <ph id="ph2">`Function`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It is a section of code marked by a line label or a line number.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Number Property</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Error-handling routines rely on the value in the <ph id="ph1">`Number`</ph> property of the <ph id="ph2">`Err`</ph> object to determine the cause of the error.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The routine should test or save relevant property values in the <ph id="ph1">`Err`</ph> object before any other error can occur or before a procedure that might cause an error is called.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The property values in the <ph id="ph1">`Err`</ph> object reflect only the most recent error.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The error message associated with <ph id="ph1">`Err.Number`</ph> is contained in <ph id="ph2">`Err.Description`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Throw Statement</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An error that is raised with the <ph id="ph1">`Err.Raise`</ph> method sets the <ph id="ph2">`Exception`</ph> property to a newly created instance of the <ph id="ph3">&lt;xref:System.Exception&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In order to support the raising of exceptions of derived exception types, a <ph id="ph1">`Throw`</ph> statement is supported in the language.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This takes a single parameter that is the exception instance to be thrown.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example shows how these features can be used with the existing exception handling support:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrErrorHandling#17<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/on-error-statement_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`On Error GoTo`</ph> statement traps all errors, regardless of the exception class.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>On Error Resume Next</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`On Error Resume Next`</ph> causes execution to continue with the statement immediately following the statement that caused the run-time error, or with the statement immediately following the most recent call out of the procedure containing the <ph id="ph2">`On Error Resume Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This statement allows execution to continue despite a run-time error.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can place the error-handling routine where the error would occur rather than transferring control to another location within the procedure.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`On Error Resume Next`</ph> statement becomes inactive when another procedure is called, so you should execute an <ph id="ph2">`On Error Resume Next`</ph> statement in each called routine if you want inline error handling within that routine.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`On Error Resume Next`</ph> construct may be preferable to <ph id="ph2">`On Error GoTo`</ph> when handling errors generated during access to other objects.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Checking <ph id="ph1">`Err`</ph> after each interaction with an object removes ambiguity about which object was accessed by the code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can be sure which object placed the error code in <ph id="ph1">`Err.Number`</ph>, as well as which object originally generated the error (the object specified in <ph id="ph2">`Err.Source`</ph>).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>On Error GoTo 0</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`On Error GoTo 0`</ph> disables error handling in the current procedure.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It doesn't specify line 0 as the start of the error-handling code, even if the procedure contains a line numbered 0.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Without an <ph id="ph1">`On Error GoTo 0`</ph> statement, an error handler is automatically disabled when a procedure is exited.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>On Error GoTo -1</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`On Error GoTo -1`</ph> disables the exception in the current procedure.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It does not specify line -1 as the start of the error-handling code, even if the procedure contains a line numbered -1.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Without an <ph id="ph1">`On Error GoTo -1`</ph> statement, an exception is automatically disabled when a procedure is exited.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To prevent error-handling code from running when no error has occurred, place an <ph id="ph1">`Exit Sub`</ph>, <ph id="ph2">`Exit Function`</ph>, or <ph id="ph3">`Exit Property`</ph> statement immediately before the error-handling routine, as in the following fragment:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrErrorHandling#18<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/on-error-statement_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Here, the error-handling code follows the <ph id="ph1">`Exit Sub`</ph> statement and precedes the <ph id="ph2">`End Sub`</ph> statement to separate it from the procedure flow.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can place error-handling code anywhere in a procedure.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Untrapped Errors</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Untrapped errors in objects are returned to the controlling application when the object is running as an executable file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Within the development environment, untrapped errors are returned to the controlling application only if the proper options are set.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See your host application's documentation for a description of which options should be set during debugging, how to set them, and whether the host can create classes.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you create an object that accesses other objects, you should try to handle any unhandled errors they pass back.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you cannot, map the error codes in <ph id="ph1">`Err.Number`</ph> to one of your own errors and then pass them back to the caller of your object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You should specify your error by adding your error code to the <ph id="ph1">`VbObjectError`</ph> constant.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, if your error code is 1052, assign it as follows:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrErrorHandling#19<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/on-error-statement_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>System errors during calls to Windows dynamic-link libraries (DLLs) do not raise exceptions and cannot be trapped with Visual Basic error trapping.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When calling DLL functions, you should check each return value for success or failure (according to the API specifications), and in the event of a failure, check the value in the <ph id="ph1">`Err`</ph> object's <ph id="ph2">`LastDLLError`</ph> property.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This example first uses the <ph id="ph1">`On Error GoTo`</ph> statement to specify the location of an error-handling routine within a procedure.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In the example, an attempt to divide by zero generates error number 6.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The error is handled in the error-handling routine, and control is then returned to the statement that caused the error.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`On Error GoTo 0`</ph> statement turns off error trapping.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Then the <ph id="ph1">`On Error Resume Next`</ph> statement is used to defer error trapping so that the context for the error generated by the next statement can be known for certain.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`Err.Clear`</ph> is used to clear the <ph id="ph2">`Err`</ph> object's properties after the error is handled.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrErrorHandling#20<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/on-error-statement_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> <bpt id="p2">[</bpt>Microsoft.VisualBasic<ept id="p2">](../../../visual-basic/language-reference/runtime-library-members.md)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assembly:<ept id="p1">**</ept> Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.ErrObject.Number%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.ErrObject.Description%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>End Statement<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resume Statement<ept id="p1">](../../../visual-basic/language-reference/statements/resume-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Error Messages<ept id="p1">](../../../visual-basic/language-reference/error-messages/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>