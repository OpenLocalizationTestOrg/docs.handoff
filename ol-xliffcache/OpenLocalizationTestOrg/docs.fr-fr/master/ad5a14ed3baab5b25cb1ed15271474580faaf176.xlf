<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-ui-automation-for-automated-testing.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad5a14ed3baab5b25cb1ed15271474580faaf176</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\ui-automation\using-ui-automation-for-automated-testing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35eed857ec6defb26bf46df47bd16ddb4d9485ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06e8a662cee36dd39ce270e3fd50c30e5ec465d6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using UI Automation for Automated Testing</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using UI Automation for Automated Testing</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This documentation is intended for .NET Framework developers who want to use the managed <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> classes defined in the <ph id="ph2">&lt;xref:System.Windows.Automation&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For the latest information about <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, see <bpt id="p1">[</bpt>Windows Automation API: UI Automation<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=156746)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This overview describes how <ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> can be useful as a framework for programmatic access in automated testing scenarios.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> provides a unified object model that enables all <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../includes/tlasharptla-ui-md.md)]</ph> frameworks to expose complex and rich functionality in an accessible and easily automated manner.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> was developed as a successor to <ph id="ph2">[!INCLUDE[TLA#tla_aa](../../../includes/tlasharptla-aa-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_aa](../../../includes/tla2sharptla-aa-md.md)]</ph> is an existing framework designed to provide a solution for making controls and applications accessible.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_aa](../../../includes/tla2sharptla-aa-md.md)]</ph> was not designed with test automation in mind even though it evolved into that role due to the very similar requirements of accessibility and automation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, in addition to providing more refined solutions for accessibility, is also specifically designed to provide robust functionality for automated testing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[TLA2#tla_aa](../../../includes/tla2sharptla-aa-md.md)]</ph> relies on a single interface to both expose information about the UI and collect the information needed by AT products; <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> separates the two models.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Both a provider and client are required to implement <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> for it to be useful as an automated test tool.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>UI Automation providers are applications such as Microsoft Word, Excel, and other third-party applications or controls based on the <ph id="ph1">[!INCLUDE[TLA#tla_win](../../../includes/tlasharptla-win-md.md)]</ph> operating system.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>UI Automation clients include automated test scripts and assistive technology applications.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The intent of this overview is to showcase the new and improved automated testing capabilities of <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This overview is not intended to provide information on accessibility features and will not address accessibility other than where necessary.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>UI Automation in a Provider</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> to be automated, a developer of an application or control must look at what actions an end-user can perform on the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> object using standard keyboard and mouse interaction.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Once these key actions have been identified, the corresponding <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> control patterns (that is, the control patterns that mirror the functionality and behavior of the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> element) should be implemented on the control.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, user interaction with a combo box control (such as the run dialog) typically involves expanding and collapsing the combo box to hide or display a list of items, selecting an item from that list, or adding a new value via keyboard input.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>With other accessibility models, developers must gather information directly from individual buttons, menus, or other controls.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Unfortunately, every control type comes in dozens of minor variations.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In other words, even though ten variations of a pushbutton may all work the same way and perform the same function, they must all be treated as unique controls.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>There is no way to know that these controls are functionally equivalent.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Control patterns were developed to represent these common control behaviors.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>UI Automation Control Patterns Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-patterns-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Implementing UI Automation</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, without the unified model provided by <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, test tools and developers are required to know framework-specific information in order to expose properties and behaviors of controls in that framework.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Since there can be several different UI frameworks present at any single time within Windows operating systems, including <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../includes/tla2sharptla-win32-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../includes/tlasharptla-winforms-md.md)]</ph>, and Windows Presentation Foundation (WPF), it can be a daunting task to test multiple applications with controls that seem similar.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, the following table outlines the framework-specific property names required to retrieve the name (or text) associated with a button control and shows the single equivalent <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>UI Automation Control Type</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>UI Framework</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Framework Specific Property</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>UI Automation Property</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Button</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Windows Presentation Foundation</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Content</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>NameProperty</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Button</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Win32</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Caption</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>NameProperty</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Image</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>HTML</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>alt</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>NameProperty</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>UI Automation providers are responsible for mapping the framework-specific properties of their controls to the equivalent <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> properties.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Information on implementing <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> in a provider can be found at <bpt id="p1">[</bpt>UI Automation Providers for Managed Code<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-providers-for-managed-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Information on implementing control patterns is available at <bpt id="p1">[</bpt>UI Automation Control Patterns<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-patterns.md)</ept> and <bpt id="p2">[</bpt>UI Automation Text Pattern<ept id="p2">](../../../docs/framework/ui-automation/ui-automation-text-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>UI Automation in a Client</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The goal of many automated test tools and scenarios is the consistent and repeatable manipulation of the user interface.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This can involve unit testing specific controls through to the recording and playback of test scripts that iterate through a series of generic actions on a group of controls.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A complication that arises from automated applications is the difficulty synchronizing a test with a dynamic target.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, a list box control, such as one contained in the Windows Task Manager, that displays a list of currently running applications.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Since the items in the list box are dynamically updated outside the control of the test application, attempting to repeat the selection of a specific item in the list box with any consistency is impossible.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Similar issues can also arise when attempting to repeat simple focus changes in a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> that is outside the control of the test application.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Programmatic Access</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Programmatic access provides the ability to imitate, through code, any interaction and experience exposed by traditional mouse and keyboard input.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> enables programmatic access through five components:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree facilitates navigation through the structure of the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The tree is built from the collection of hWnd's.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>UI Automation Tree Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-tree-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Automation elements are individual components in the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These can often be more granular than an hWnd.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>UI Automation Control Types Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-types-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Automation properties provide specific information about <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> elements.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>UI Automation Properties Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Control patterns define a particular aspect of a control's functionality; they can consist of property, method, event, and structure information.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>UI Automation Control Patterns Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-patterns-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Automation events provide event notifications and information.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>UI Automation Events Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Key Properties for Test Automation</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The ability to uniquely identify and subsequently locate any control within the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> provides the basis for automated test applications to operate on that <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>There are several <ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> properties used by clients and providers that assist in this.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>AutomationID</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Uniquely identifies an automation element from its siblings.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationIdProperty&gt;</ph> is not localized, unlike a property such as <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement.NameProperty&gt;</ph> that is typically localized if a product gets shipped in multiple languages.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Use the AutomationID Property<ept id="p1">](../../../docs/framework/ui-automation/use-the-automationid-property.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationIdProperty&gt;</ph> does not guarantee a unique identity throughout the automation tree.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, an application may contain a menu control with multiple top-level menu items that, in turn, have multiple child menu items.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>These secondary menu items may be identified by a generic scheme such as "Item1, Item 2, Item3, etc.", allowing duplicate identifiers for children across top-level menu items.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>ControlType</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Identifies the type of control represented by an automation element.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Significant information can be inferred from knowledge of the control type.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>UI Automation Control Types Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-types-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>NameProperty</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This is a text string that identifies or explains a control.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.NameProperty&gt;</ph> should be used with caution since it can be localized.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>UI Automation Properties Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Implementing UI Automation in a Test Application</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Add the UI Automation References.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> dll's necessary for UI Automation clients are listed here.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>-   UIAutomationClient.dll provides access to the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> client-side APIs.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>-   UIAutomationClientSideProvider.dll provides the ability to automate <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../includes/tla2sharptla-win32-md.md)]</ph> controls.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>UI Automation Support for Standard Controls<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-support-for-standard-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>-   UIAutomationTypes.dll provides access to the specific types defined in <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">&lt;xref:System.Windows.Automation&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This namespace contains everything UI Automation clients need to use the capabilities of <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> except text handling.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">&lt;xref:System.Windows.Automation.Text&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This namespace contains everything a UI Automation clients need to use the capabilities of <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> text handling.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Find controls of interest</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Automated test scripts locate UI Automation elements that represent controls of interest within the automation tree.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>There are multiple ways to obtain UI Automation elements with code.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>-   Query the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> using a <ph id="ph2">&lt;xref:System.Windows.Automation.Condition&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This is typically where the language-neutral <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationIdProperty&gt;</ph> is used.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  An <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationIdProperty&gt;</ph> can be obtained using a tool such as Inspect.exe that is able to itemize the <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> properties of a control.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>-   Use the <ph id="ph1">&lt;xref:System.Windows.Automation.TreeWalker&gt;</ph> class to traverse the entire <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree or a subset thereof.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>-   Track focus.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>-   Use the hWnd of the control.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>-   Use screen location, such as the location of the mouse cursor.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Obtaining UI Automation Elements<ept id="p1">](../../../docs/framework/ui-automation/obtaining-ui-automation-elements.md)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Obtain Control Patterns</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Control patterns expose common behaviors for functionally similar controls.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>After locating the controls that require testing, automated test scripts obtain the control patterns of interest from those UI Automation elements.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Automation.InvokePattern&gt;</ph> control pattern for typical button functionality or the <ph id="ph2">&lt;xref:System.Windows.Automation.WindowPattern&gt;</ph> control pattern for window functionality.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>UI Automation Control Patterns Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-patterns-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Automate the UI</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Automated test scripts can now control any <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> of interest from a <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> framework using the information and functionality exposed by the <ph id="ph3">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> control patterns.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Related Tools and Technologies</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>There are a number of related tools and technologies that support automated testing with <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Inspect.exe is a <ph id="ph1">[!INCLUDE[TLA#tla_gui](../../../includes/tlasharptla-gui-md.md)]</ph> application that can be used to gather <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> information for both provider and client development and debugging.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Inspect.exe is included in the <ph id="ph1">[!INCLUDE[TLA#tla_winfxsdk](../../../includes/tlasharptla-winfxsdk-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>MSAABridge exposes <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> information to <ph id="ph2">[!INCLUDE[TLA2#tla_aa](../../../includes/tla2sharptla-aa-md.md)]</ph> clients.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The primary goal of bridging <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> to <ph id="ph2">[!INCLUDE[TLA2#tla_aa](../../../includes/tla2sharptla-aa-md.md)]</ph> is to allow existing <ph id="ph3">[!INCLUDE[TLA2#tla_aa](../../../includes/tla2sharptla-aa-md.md)]</ph> clients the ability to interact with any framework that has implemented <ph id="ph4">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Security</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For security information, see <bpt id="p1">[</bpt>UI Automation Security Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-security-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UI Automation Fundamentals<ept id="p1">](../../../docs/framework/ui-automation/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>