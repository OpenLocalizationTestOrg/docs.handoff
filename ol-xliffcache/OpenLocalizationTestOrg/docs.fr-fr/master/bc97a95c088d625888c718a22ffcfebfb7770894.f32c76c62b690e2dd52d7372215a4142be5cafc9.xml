{"content":"---\ntitle: \"Compiler Error CS1954\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1954\"\nhelpviewer_keywords: \n  - \"CS1954\"\nms.assetid: bdec399e-c43d-46d3-a01b-ef3572786fe5\n---\n# Compiler Error CS1954\nThe best overloaded method match 'method' for the collection initializer element cannot be used. Collection initializer 'Add' methods cannot have ref or out parameters.  \n  \n For a collection class to be initialized by using a collection initializer, the class must have a public `Add` method that is not a `ref` or `out` parameter.  \n  \n## To correct this error  \n  \n-   If you can modify the source code of the collection class, provide an `Add` method that does not take a `ref` or `out` parameter.  \n  \n-   If you cannot modify the collection class, initialize it with the constructors it provides. You cannot use a collection initializer with it.  \n  \n## Example  \n The following example produces CS1954 because the only available overload of the `Add` list in `MyList` has a `ref` parameter.  \n  \n```csharp  \n// cs1954.cs  \nusing System.Collections.Generic;  \nclass MyList<T> : IEnumerable<T>  \n{  \n    List<T> _list;  \n    public void Add(ref T item)  \n    {  \n        _list.Add(item);  \n    }  \n  \n    public System.Collections.Generic.IEnumerator<T> GetEnumerator()  \n    {  \n        int index = 0;  \n        T current = _list[index];  \n        while (current != null)  \n        {  \n            yield return _list[index++];  \n        }  \n    }  \n  \n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()  \n    {  \n        return GetEnumerator();  \n    }  \n}  \n  \npublic class MyClass  \n{  \n    public string tree { get; set; }  \n}  \nclass Program  \n{  \n    static void Main(string[] args)  \n    {  \n        MyList<MyClass> myList = new MyList<MyClass> { new MyClass { tree = \"maple\" } }; // CS1954  \n    }  \n}  \n```  \n  \n## See also\n\n- [Object and Collection Initializers](../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS1954\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1954\"\nhelpviewer_keywords: \n  - \"CS1954\"\nms.assetid: bdec399e-c43d-46d3-a01b-ef3572786fe5","nodes":[{"content":"Compiler Error CS1954","nodes":[{"pos":[0,21],"content":"Compiler Error CS1954","nodes":[{"content":"Compiler Error CS1954","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,193],"content":"Compiler Error CS1954","linkify":"Compiler Error CS1954","nodes":[{"content":"Compiler Error CS1954","pos":[0,21]}]},{"content":"The best overloaded method match 'method' for the collection initializer element cannot be used.","pos":[194,290]},{"content":"Collection initializer 'Add' methods cannot have ref or out parameters.","pos":[291,362]},{"pos":[369,526],"content":"For a collection class to be initialized by using a collection initializer, the class must have a public <ph id=\"ph1\">`Add`</ph> method that is not a <ph id=\"ph2\">`ref`</ph> or <ph id=\"ph3\">`out`</ph> parameter.","source":"For a collection class to be initialized by using a collection initializer, the class must have a public `Add` method that is not a `ref` or `out` parameter."},{"pos":[535,556],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[566,695],"content":"If you can modify the source code of the collection class, provide an <ph id=\"ph1\">`Add`</ph> method that does not take a <ph id=\"ph2\">`ref`</ph> or <ph id=\"ph3\">`out`</ph> parameter.","source":"If you can modify the source code of the collection class, provide an `Add` method that does not take a `ref` or `out` parameter."},{"content":"If you cannot modify the collection class, initialize it with the constructors it provides.","pos":[705,796]},{"content":"You cannot use a collection initializer with it.","pos":[797,845]},{"pos":[854,861],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[865,991],"content":"The following example produces CS1954 because the only available overload of the <ph id=\"ph1\">`Add`</ph> list in <ph id=\"ph2\">`MyList`</ph> has a <ph id=\"ph3\">`ref`</ph> parameter.","source":"The following example produces CS1954 because the only available overload of the `Add` list in `MyList` has a `ref` parameter."},{"pos":[1854,1862],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1866,1992],"content":"<bpt id=\"p1\">[</bpt>Object and Collection Initializers<ept id=\"p1\">](../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>","source":"[Object and Collection Initializers](../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)"}]}