{"content":"---\ntitle: \"Tlbimp.exe (Type Library Importer) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"type libraries [.NET Framework], importing\"\n  - \"importing type library\"\n  - \"Tlbimp.exe\"\n  - \"type definition conversion\"\n  - \"Type Library Importer\"\n  - \"type libraries\"\n  - \"converting type definitions\"\nms.assetid: ec0a8d63-11b3-4acd-b398-da1e37e97382\ncaps.latest.revision: 29\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Tlbimp.exe (Type Library Importer)\nThe Type Library Importer converts the type definitions found within a COM type library into equivalent definitions in a common language runtime assembly. The output of Tlbimp.exe is a binary file (an assembly) that contains runtime metadata for the types defined within the original type library. You can examine this file with tools such as [Ildasm.exe](../../../docs/framework/tools/ildasm-exe-il-disassembler.md).  \n  \n This tool is automatically installed with Visual Studio. To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7). For more information, see [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md).  \n  \n At the command prompt, type the following:  \n  \n## Syntax  \n  \n```  \n  \ntlbimp tlbFile [options]  \n```  \n  \n#### Parameters  \n  \n|Argument|Description|  \n|--------------|-----------------|  \n|*tlbFile*|The name of any file that contains a COM type library.|  \n  \n|Option|Description|  \n|------------|-----------------|  \n|**/asmversion:** *versionnumber*|Specifies the version number of the assembly to produce. Specify *versionnumber* in the format *major.minor.build.revision*.|  \n|**/company:** `companyinformation`|Adds company information to the output assembly.|  \n|**/copyright:** `copyrightinformation`|Adds copyright information to the output assembly. This information can be viewed in the **File Properties** dialog box for the assembly.|  \n|**/delaysign**|Specifies to Tlbimp.exe to sign the resulting assembly with a strong name using delayed signing. You must specify this option with either the **/keycontainer:**, **/keyfile:**, or **/publickey:** option. For more information on the delayed signing process, see [Delay Signing an Assembly](../../../docs/framework/app-domains/delay-sign-assembly.md).|  \n|**/help**|Displays command syntax and options for the tool.|  \n|**/keycontainer:** *containername*|Signs the resulting assembly with a strong name using the public/private key pair found in the key container specified by *containername*.|  \n|**/keyfile:** *filename*|Signs the resulting assembly with a strong name using the publisher's official public/private key pair found in *filename*.|  \n|**/machine:** `machinetype`|Creates an assembly that targets the specified machine type (microprocessor). Supported machine types: x86, x64, Itanium, and Agnostic.|  \n|**/namespace:** *namespace*|Specifies the namespace in which to produce the assembly.|  \n|**/noclassmembers**|Prevents Tlbimp.exe from adding members to classes. This avoids a potential <xref:System.TypeLoadException>.|  \n|**/nologo**|Suppresses the Microsoft startup banner display.|  \n|**/out:** *filename*|Specifies the name of the output file, assembly, and namespace in which to write the metadata definitions. The **/out** option has no effect on the assembly's namespace if the type library specifies the Interface Definition Language (IDL) custom attribute that explicitly controls the assembly's namespace. If you do not specify this option, Tlbimp.exe writes the metadata to a file with the same name as the actual type library defined within the input file and assigns it a .dll extension. If the output file is the same name as the input file, the tool generates an error to prevent overwriting the type library.|  \n|**/primary**|Produces a primary interop assembly for the specified type library. Information is added to the assembly indicating that the publisher of the type library produced the assembly. By specifying a primary interop assembly, you differentiate a publisher's assembly from any other assemblies that are created from the type library using Tlbimp.exe. You should only use the **/primary** option if you are the publisher of the type library that you are importing with Tlbimp.exe. Note that you must sign a primary interop assembly with a [strong name](../../../docs/framework/app-domains/strong-named-assemblies.md). For more information, see [Primary Interop Assemblies](http://msdn.microsoft.com/en-us/b977a8be-59a0-40a0-a806-b11ffba5c080).|  \n|**/product:** `productinformation`|Adds product information to the output assembly. This information can be viewed in the **File Properties** dialog box for the assembly.|  \n|**/productversion:** `productversioninformation`|Adds product version information to the output assembly. There are no format restrictions. This information can be viewed in the **File Properties** dialog box for the assembly.|  \n|**/publickey:** *filename*|Specifies the file containing the public key to use to sign the resulting assembly. If you specify the **/keyfile:** or **/keycontainer:** option instead of **/publickey:**, Tlbimp.exe generates the public key from the public/private key pair supplied with **/keyfile:** or **/keycontainer:**. The **/publickey:** option supports test key and delay signing scenarios. The file is in the format generated by Sn.exe. For more information, see the **-p** option of Sn.exe in [Strong Name Tool (Sn.exe)](../../../docs/framework/tools/sn-exe-strong-name-tool.md).|  \n|**/reference:** *filename*|Specifies the assembly file to use to resolve references to types defined outside the current type library. If you do not specify the **/reference** option, Tlbimp.exe automatically recursively imports any external type library that the type library being imported references. If you specify the **/reference** option, the tool attempts to resolve external types in the referenced assemblies before it imports other type libraries.|  \n|**/silence:** `warningnumber`|Suppresses the display of the specified warning. This option cannot be used with **/silent**.|  \n|**/silent**|Suppresses the display of success messages. This option cannot be used with **/silence**.|  \n|**/strictref**|Does not import a type library if the tool cannot resolve all references within the current assembly, the assemblies specified with the **/reference** option, or registered primary interop assemblies (PIAs).|  \n|**/strictref:nopia**|Same as **/strictref**, but ignores PIAs.|  \n|**/sysarray**|Specifies to the tool to import a COM style SafeArray as a managed <xref:System.Array> type.|  \n|**/tlbreference:** *filename*|Specifies the type library file to use to resolve type library references without consulting the registry.<br /><br /> Note that this option will not load some older type library formats.  However, you can still load older type library formats implicitly through the registry or current directory.|  \n|**/trademark:** `trademarkinformation`|Adds trademark information to the output assembly. This information can be viewed in the **File Properties** dialog box for the assembly.|  \n|**/transform:** *transformname*|Transforms metadata as specified by the *transformname* parameter.<br /><br /> Specify **dispret** for the *transformname* parameter to transform [out, retval] parameters of methods on dispatch-only interfaces (dispinterfaces) into return values.<br /><br /> For more information about this option, see the examples later in this topic.|  \n|**/unsafe**|Produces interfaces without .NET Framework security checks. Calling a method that is exposed in this way might pose a security risk. You should not use this option unless you are aware of the risks of exposing such code.|  \n|**/verbose**|Specifies verbose mode; displays additional information about the imported type library.|  \n|**/VariantBoolFieldToBool**|Converts `VARIANT_BOOL` fields in structures to <xref:System.Boolean>.|  \n|**/?**|Displays command syntax and options for the tool.|  \n  \n> [!NOTE]\n>  The command-line options for Tlbimp.exe are case-insensitive and can be supplied in any order. You only need to specify enough of the option to uniquely identify it. Therefore, **/n** is equivalent to **/nologo** and **/ou:** *outfile.dll* is equivalent to **/out:** *outfile.dll*.  \n  \n## Remarks  \n Tlbimp.exe performs conversions on an entire type library at one time. You cannot use the tool to generate type information for a subset of the types defined within a single type library.  \n  \n It is often useful or necessary to be able to assign [strong names](../../../docs/framework/app-domains/strong-named-assemblies.md) to assemblies. Therefore, Tlbimp.exe includes options for supplying the information necessary to generate strongly named assemblies. Both the **/keyfile:** and **/keycontainer:** options sign assemblies with strong names. Therefore, it is logical to supply only one of these options at a time.  \n  \n You can specify multiple reference assemblies by using the **/reference** option multiple times.  \n  \n A resource ID can optionally be appended to a type library file when importing a type library from a module containing multiple type libraries. Tlbimp.exe is able to locate this file only if it is in the current directory or if you specify the full path. See the example later in this topic.  \n  \n## Examples  \n The following command generates an assembly with the same name as the type library found in `myTest.tlb` and with the .dll extension.  \n  \n```  \ntlbimp myTest.tlb   \n```  \n  \n The following command generates an assembly with the name `myTest.dll`.  \n  \n```  \ntlbimp  myTest.tlb  /out:myTest.dll  \n```  \n  \n The following command generates an assembly with the same name as the type library specified by `MyModule.dll\\1` and with the .dll extension. `MyModule.dll\\1` must be located in the current directory.  \n  \n```  \ntlbimp MyModule.dll\\1  \n```  \n  \n The following command generates an assembly with the name `myTestLib.dll` for the type library `TestLib.dll`. The **/transform:dispret** option transforms any [out, retval] parameters of methods on dispinterfaces in the type library into return values in the managed library.  \n  \n```  \ntlbimp TestLib.dll /transform:dispret /out:myTestLib.dll  \n```  \n  \n The type library `TestLib.dll`, in the preceding example, includes a dispinterface method named `SomeMethod` that returns void and has an [out, retval] parameter. The following code is the input type library method signature for `SomeMethod` in `TestLib.dll`.  \n  \n```  \nvoid SomeMethod([out, retval] VARIANT_BOOL*);  \n```  \n  \n Specifying the **/transform:dispret** option causes Tlbimp.exe to transform the `[out, retval]` parameter of `SomeMethod` into a `bool` return value. The following is the method signature that Tlbimp.exe produces for `SomeMethod` in the managed library `myTestLib.dll` when the **/transform:dispret** option is specified.  \n  \n```csharp  \nbool SomeMethod();  \n```  \n  \n If you use Tlbimp.exe to produce a managed library for `TestLib.dll` without specifying the **/transform:dispret**, the tool produces the following method signature for `SomeMethod` in the managed library `myTestLib.dll`.  \n  \n```csharp  \nvoid SomeMethod(out bool x);  \n```  \n  \n## See Also  \n [Tools](../../../docs/framework/tools/index.md)   \n [Tlbexp.exe (Type Library Exporter)](../../../docs/framework/tools/tlbexp-exe-type-library-exporter.md)   \n [Importing a Type Library as an Assembly](../../../docs/framework/interop/importing-a-type-library-as-an-assembly.md)   \n [Type Library to Assembly Conversion Summary](http://msdn.microsoft.com/en-us/bf3f90c5-4770-4ab8-895c-3ba1055cc958)   \n [Ildasm.exe (IL Disassembler)](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)   \n [Sn.exe (Strong Name Tool)](../../../docs/framework/tools/sn-exe-strong-name-tool.md)   \n [Strong-Named Assemblies](../../../docs/framework/app-domains/strong-named-assemblies.md)   \n [Attributes for Importing Type Libraries into Interop Assemblies](http://msdn.microsoft.com/en-us/81e587b8-393f-43e1-9add-c4b05e65cbfd)   \n [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)","nodes":[{"pos":[4,650],"nodes":[{"content":"Tlbimp.exe (Type Library Importer) | Microsoft Docs","nodes":[{"pos":[0,51],"content":"Tlbimp.exe (Type Library Importer) | Microsoft Docs","nodes":[{"content":"Tlbimp.exe (Type Library Importer) | Microsoft Docs","pos":[0,51]}]}],"pos":[6,60],"yaml":true}],"content":"title: \"Tlbimp.exe (Type Library Importer) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"type libraries [.NET Framework], importing\"\n  - \"importing type library\"\n  - \"Tlbimp.exe\"\n  - \"type definition conversion\"\n  - \"Type Library Importer\"\n  - \"type libraries\"\n  - \"converting type definitions\"\nms.assetid: ec0a8d63-11b3-4acd-b398-da1e37e97382\ncaps.latest.revision: 29\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[657,691],"content":"Tlbimp.exe (Type Library Importer)","linkify":"Tlbimp.exe (Type Library Importer)","nodes":[{"content":"Tlbimp.exe (Type Library Importer)","pos":[0,34]}]},{"content":"The Type Library Importer converts the type definitions found within a COM type library into equivalent definitions in a common language runtime assembly.","pos":[692,846]},{"content":"The output of Tlbimp.exe is a binary file (an assembly) that contains runtime metadata for the types defined within the original type library.","pos":[847,989]},{"content":"You can examine this file with tools such as <bpt id=\"p1\">[</bpt>Ildasm.exe<ept id=\"p1\">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.","pos":[990,1109],"source":" You can examine this file with tools such as [Ildasm.exe](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)."},{"content":"This tool is automatically installed with Visual Studio.","pos":[1116,1172]},{"content":"To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7).","pos":[1173,1274]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Command Prompts<ept id=\"p1\">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.","pos":[1275,1385],"source":" For more information, see [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)."},{"content":"At the command prompt, type the following:","pos":[1392,1434]},{"pos":[1443,1449],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1505,1515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Argument","pos":[1522,1530]},{"content":"Description","pos":[1531,1542]},{"pos":[1584,1593],"content":"<bpt id=\"p1\">*</bpt>tlbFile<ept id=\"p1\">*</ept>","source":"*tlbFile*"},{"content":"The name of any file that contains a COM type library.","pos":[1594,1648]},{"content":"Option","pos":[1656,1662]},{"content":"Description","pos":[1663,1674]},{"pos":[1714,1746],"content":"<bpt id=\"p1\">**</bpt>/asmversion:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>versionnumber<ept id=\"p2\">*</ept>","source":"**/asmversion:** *versionnumber*"},{"content":"Specifies the version number of the assembly to produce.","pos":[1747,1803]},{"content":"Specify <bpt id=\"p1\">*</bpt>versionnumber<ept id=\"p1\">*</ept> in the format <bpt id=\"p2\">*</bpt>major.minor.build.revision<ept id=\"p2\">*</ept>.","pos":[1804,1871],"source":" Specify *versionnumber* in the format *major.minor.build.revision*."},{"pos":[1876,1910],"content":"<bpt id=\"p1\">**</bpt>/company:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`companyinformation`</ph>","source":"**/company:** `companyinformation`"},{"content":"Adds company information to the output assembly.","pos":[1911,1959]},{"pos":[1964,2002],"content":"<bpt id=\"p1\">**</bpt>/copyright:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`copyrightinformation`</ph>","source":"**/copyright:** `copyrightinformation`"},{"content":"Adds copyright information to the output assembly.","pos":[2003,2053]},{"content":"This information can be viewed in the <bpt id=\"p1\">**</bpt>File Properties<ept id=\"p1\">**</ept> dialog box for the assembly.","pos":[2054,2140],"source":" This information can be viewed in the **File Properties** dialog box for the assembly."},{"pos":[2145,2159],"content":"<bpt id=\"p1\">**</bpt>/delaysign<ept id=\"p1\">**</ept>","source":"**/delaysign**"},{"content":"Specifies to Tlbimp.exe to sign the resulting assembly with a strong name using delayed signing.","pos":[2160,2256]},{"content":"You must specify this option with either the <bpt id=\"p1\">**</bpt>/keycontainer:<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>/keyfile:<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>/publickey:<ept id=\"p3\">**</ept> option.","pos":[2257,2363],"source":" You must specify this option with either the **/keycontainer:**, **/keyfile:**, or **/publickey:** option."},{"content":"For more information on the delayed signing process, see <bpt id=\"p1\">[</bpt>Delay Signing an Assembly<ept id=\"p1\">](../../../docs/framework/app-domains/delay-sign-assembly.md)</ept>.","pos":[2364,2509],"source":" For more information on the delayed signing process, see [Delay Signing an Assembly](../../../docs/framework/app-domains/delay-sign-assembly.md)."},{"pos":[2514,2523],"content":"<bpt id=\"p1\">**</bpt>/help<ept id=\"p1\">**</ept>","source":"**/help**"},{"content":"Displays command syntax and options for the tool.","pos":[2524,2573]},{"pos":[2578,2612],"content":"<bpt id=\"p1\">**</bpt>/keycontainer:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>containername<ept id=\"p2\">*</ept>","source":"**/keycontainer:** *containername*"},{"pos":[2613,2751],"content":"Signs the resulting assembly with a strong name using the public/private key pair found in the key container specified by <bpt id=\"p1\">*</bpt>containername<ept id=\"p1\">*</ept>.","source":"Signs the resulting assembly with a strong name using the public/private key pair found in the key container specified by *containername*."},{"pos":[2756,2780],"content":"<bpt id=\"p1\">**</bpt>/keyfile:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>filename<ept id=\"p2\">*</ept>","source":"**/keyfile:** *filename*"},{"pos":[2781,2904],"content":"Signs the resulting assembly with a strong name using the publisher's official public/private key pair found in <bpt id=\"p1\">*</bpt>filename<ept id=\"p1\">*</ept>.","source":"Signs the resulting assembly with a strong name using the publisher's official public/private key pair found in *filename*."},{"pos":[2909,2936],"content":"<bpt id=\"p1\">**</bpt>/machine:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`machinetype`</ph>","source":"**/machine:** `machinetype`"},{"content":"Creates an assembly that targets the specified machine type (microprocessor).","pos":[2937,3014]},{"content":"Supported machine types: x86, x64, Itanium, and Agnostic.","pos":[3015,3072]},{"pos":[3077,3104],"content":"<bpt id=\"p1\">**</bpt>/namespace:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>namespace<ept id=\"p2\">*</ept>","source":"**/namespace:** *namespace*"},{"content":"Specifies the namespace in which to produce the assembly.","pos":[3105,3162]},{"pos":[3167,3186],"content":"<bpt id=\"p1\">**</bpt>/noclassmembers<ept id=\"p1\">**</ept>","source":"**/noclassmembers**"},{"content":"Prevents Tlbimp.exe from adding members to classes.","pos":[3187,3238]},{"content":"This avoids a potential <ph id=\"ph1\">&lt;xref:System.TypeLoadException&gt;</ph>.","pos":[3239,3295],"source":" This avoids a potential <xref:System.TypeLoadException>."},{"pos":[3300,3311],"content":"<bpt id=\"p1\">**</bpt>/nologo<ept id=\"p1\">**</ept>","source":"**/nologo**"},{"content":"Suppresses the Microsoft startup banner display.","pos":[3312,3360]},{"pos":[3365,3385],"content":"<bpt id=\"p1\">**</bpt>/out:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>filename<ept id=\"p2\">*</ept>","source":"**/out:** *filename*"},{"content":"Specifies the name of the output file, assembly, and namespace in which to write the metadata definitions.","pos":[3386,3492]},{"content":"The <bpt id=\"p1\">**</bpt>/out<ept id=\"p1\">**</ept> option has no effect on the assembly's namespace if the type library specifies the Interface Definition Language (IDL) custom attribute that explicitly controls the assembly's namespace.","pos":[3493,3692],"source":" The **/out** option has no effect on the assembly's namespace if the type library specifies the Interface Definition Language (IDL) custom attribute that explicitly controls the assembly's namespace."},{"content":"If you do not specify this option, Tlbimp.exe writes the metadata to a file with the same name as the actual type library defined within the input file and assigns it a .dll extension.","pos":[3693,3877]},{"content":"If the output file is the same name as the input file, the tool generates an error to prevent overwriting the type library.","pos":[3878,4001]},{"pos":[4006,4018],"content":"<bpt id=\"p1\">**</bpt>/primary<ept id=\"p1\">**</ept>","source":"**/primary**"},{"content":"Produces a primary interop assembly for the specified type library.","pos":[4019,4086]},{"content":"Information is added to the assembly indicating that the publisher of the type library produced the assembly.","pos":[4087,4196]},{"content":"By specifying a primary interop assembly, you differentiate a publisher's assembly from any other assemblies that are created from the type library using Tlbimp.exe.","pos":[4197,4362]},{"content":"You should only use the <bpt id=\"p1\">**</bpt>/primary<ept id=\"p1\">**</ept> option if you are the publisher of the type library that you are importing with Tlbimp.exe.","pos":[4363,4491],"source":" You should only use the **/primary** option if you are the publisher of the type library that you are importing with Tlbimp.exe."},{"content":"Note that you must sign a primary interop assembly with a <bpt id=\"p1\">[</bpt>strong name<ept id=\"p1\">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept>.","pos":[4492,4628],"source":" Note that you must sign a primary interop assembly with a [strong name](../../../docs/framework/app-domains/strong-named-assemblies.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Primary Interop Assemblies<ept id=\"p1\">](http://msdn.microsoft.com/en-us/b977a8be-59a0-40a0-a806-b11ffba5c080)</ept>.","pos":[4629,4754],"source":" For more information, see [Primary Interop Assemblies](http://msdn.microsoft.com/en-us/b977a8be-59a0-40a0-a806-b11ffba5c080)."},{"pos":[4759,4793],"content":"<bpt id=\"p1\">**</bpt>/product:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`productinformation`</ph>","source":"**/product:** `productinformation`"},{"content":"Adds product information to the output assembly.","pos":[4794,4842]},{"content":"This information can be viewed in the <bpt id=\"p1\">**</bpt>File Properties<ept id=\"p1\">**</ept> dialog box for the assembly.","pos":[4843,4929],"source":" This information can be viewed in the **File Properties** dialog box for the assembly."},{"pos":[4934,4982],"content":"<bpt id=\"p1\">**</bpt>/productversion:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`productversioninformation`</ph>","source":"**/productversion:** `productversioninformation`"},{"content":"Adds product version information to the output assembly.","pos":[4983,5039]},{"content":"There are no format restrictions.","pos":[5040,5073]},{"content":"This information can be viewed in the <bpt id=\"p1\">**</bpt>File Properties<ept id=\"p1\">**</ept> dialog box for the assembly.","pos":[5074,5160],"source":" This information can be viewed in the **File Properties** dialog box for the assembly."},{"pos":[5165,5191],"content":"<bpt id=\"p1\">**</bpt>/publickey:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>filename<ept id=\"p2\">*</ept>","source":"**/publickey:** *filename*"},{"content":"Specifies the file containing the public key to use to sign the resulting assembly.","pos":[5192,5275]},{"content":"If you specify the <bpt id=\"p1\">**</bpt>/keyfile:<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>/keycontainer:<ept id=\"p2\">**</ept> option instead of <bpt id=\"p3\">**</bpt>/publickey:<ept id=\"p3\">**</ept>, Tlbimp.exe generates the public key from the public/private key pair supplied with <bpt id=\"p4\">**</bpt>/keyfile:<ept id=\"p4\">**</ept> or <bpt id=\"p5\">**</bpt>/keycontainer:<ept id=\"p5\">**</ept>.","pos":[5276,5485],"source":" If you specify the **/keyfile:** or **/keycontainer:** option instead of **/publickey:**, Tlbimp.exe generates the public key from the public/private key pair supplied with **/keyfile:** or **/keycontainer:**."},{"content":"The <bpt id=\"p1\">**</bpt>/publickey:<ept id=\"p1\">**</ept> option supports test key and delay signing scenarios.","pos":[5486,5559],"source":" The **/publickey:** option supports test key and delay signing scenarios."},{"content":"The file is in the format generated by Sn.exe.","pos":[5560,5606]},{"content":"For more information, see the <bpt id=\"p1\">**</bpt>-p<ept id=\"p1\">**</ept> option of Sn.exe in <bpt id=\"p2\">[</bpt>Strong Name Tool (Sn.exe)<ept id=\"p2\">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept>.","pos":[5607,5750],"source":" For more information, see the **-p** option of Sn.exe in [Strong Name Tool (Sn.exe)](../../../docs/framework/tools/sn-exe-strong-name-tool.md)."},{"pos":[5755,5781],"content":"<bpt id=\"p1\">**</bpt>/reference:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>filename<ept id=\"p2\">*</ept>","source":"**/reference:** *filename*"},{"content":"Specifies the assembly file to use to resolve references to types defined outside the current type library.","pos":[5782,5889]},{"content":"If you do not specify the <bpt id=\"p1\">**</bpt>/reference<ept id=\"p1\">**</ept> option, Tlbimp.exe automatically recursively imports any external type library that the type library being imported references.","pos":[5890,6058],"source":" If you do not specify the **/reference** option, Tlbimp.exe automatically recursively imports any external type library that the type library being imported references."},{"content":"If you specify the <bpt id=\"p1\">**</bpt>/reference<ept id=\"p1\">**</ept> option, the tool attempts to resolve external types in the referenced assemblies before it imports other type libraries.","pos":[6059,6213],"source":" If you specify the **/reference** option, the tool attempts to resolve external types in the referenced assemblies before it imports other type libraries."},{"pos":[6218,6247],"content":"<bpt id=\"p1\">**</bpt>/silence:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`warningnumber`</ph>","source":"**/silence:** `warningnumber`"},{"content":"Suppresses the display of the specified warning.","pos":[6248,6296]},{"content":"This option cannot be used with <bpt id=\"p1\">**</bpt>/silent<ept id=\"p1\">**</ept>.","pos":[6297,6341],"source":" This option cannot be used with **/silent**."},{"pos":[6346,6357],"content":"<bpt id=\"p1\">**</bpt>/silent<ept id=\"p1\">**</ept>","source":"**/silent**"},{"content":"Suppresses the display of success messages.","pos":[6358,6401]},{"content":"This option cannot be used with <bpt id=\"p1\">**</bpt>/silence<ept id=\"p1\">**</ept>.","pos":[6402,6447],"source":" This option cannot be used with **/silence**."},{"pos":[6452,6466],"content":"<bpt id=\"p1\">**</bpt>/strictref<ept id=\"p1\">**</ept>","source":"**/strictref**"},{"pos":[6467,6674],"content":"Does not import a type library if the tool cannot resolve all references within the current assembly, the assemblies specified with the <bpt id=\"p1\">**</bpt>/reference<ept id=\"p1\">**</ept> option, or registered primary interop assemblies (PIAs).","source":"Does not import a type library if the tool cannot resolve all references within the current assembly, the assemblies specified with the **/reference** option, or registered primary interop assemblies (PIAs)."},{"pos":[6679,6699],"content":"<bpt id=\"p1\">**</bpt>/strictref:nopia<ept id=\"p1\">**</ept>","source":"**/strictref:nopia**"},{"pos":[6700,6741],"content":"Same as <bpt id=\"p1\">**</bpt>/strictref<ept id=\"p1\">**</ept>, but ignores PIAs.","source":"Same as **/strictref**, but ignores PIAs."},{"pos":[6746,6759],"content":"<bpt id=\"p1\">**</bpt>/sysarray<ept id=\"p1\">**</ept>","source":"**/sysarray**"},{"content":"Specifies to the tool to import a COM style SafeArray as a managed <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> type.","pos":[6760,6852],"source":"Specifies to the tool to import a COM style SafeArray as a managed <xref:System.Array> type."},{"pos":[6857,6886],"content":"<bpt id=\"p1\">**</bpt>/tlbreference:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>filename<ept id=\"p2\">*</ept>","source":"**/tlbreference:** *filename*"},{"content":"Specifies the type library file to use to resolve type library references without consulting the registry.","pos":[6887,6993]},{"content":"Note that this option will not load some older type library formats.","pos":[7006,7074]},{"content":"However, you can still load older type library formats implicitly through the registry or current directory.","pos":[7076,7184]},{"pos":[7189,7227],"content":"<bpt id=\"p1\">**</bpt>/trademark:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`trademarkinformation`</ph>","source":"**/trademark:** `trademarkinformation`"},{"content":"Adds trademark information to the output assembly.","pos":[7228,7278]},{"content":"This information can be viewed in the <bpt id=\"p1\">**</bpt>File Properties<ept id=\"p1\">**</ept> dialog box for the assembly.","pos":[7279,7365],"source":" This information can be viewed in the **File Properties** dialog box for the assembly."},{"pos":[7370,7401],"content":"<bpt id=\"p1\">**</bpt>/transform:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>transformname<ept id=\"p2\">*</ept>","source":"**/transform:** *transformname*"},{"content":"Transforms metadata as specified by the <bpt id=\"p1\">*</bpt>transformname<ept id=\"p1\">*</ept> parameter.","pos":[7402,7468],"source":"Transforms metadata as specified by the *transformname* parameter."},{"content":"Specify <bpt id=\"p1\">**</bpt>dispret<ept id=\"p1\">**</ept> for the <bpt id=\"p2\">*</bpt>transformname<ept id=\"p2\">*</ept> parameter to transform [out, retval] parameters of methods on dispatch-only interfaces (dispinterfaces) into return values.","pos":[7481,7648],"source":"Specify **dispret** for the *transformname* parameter to transform [out, retval] parameters of methods on dispatch-only interfaces (dispinterfaces) into return values."},{"content":"For more information about this option, see the examples later in this topic.","pos":[7661,7738]},{"pos":[7743,7754],"content":"<bpt id=\"p1\">**</bpt>/unsafe<ept id=\"p1\">**</ept>","source":"**/unsafe**"},{"content":"Produces interfaces without .NET Framework security checks.","pos":[7755,7814]},{"content":"Calling a method that is exposed in this way might pose a security risk.","pos":[7815,7887]},{"content":"You should not use this option unless you are aware of the risks of exposing such code.","pos":[7888,7975]},{"pos":[7980,7992],"content":"<bpt id=\"p1\">**</bpt>/verbose<ept id=\"p1\">**</ept>","source":"**/verbose**"},{"content":"Specifies verbose mode; displays additional information about the imported type library.","pos":[7993,8081]},{"pos":[8086,8113],"content":"<bpt id=\"p1\">**</bpt>/VariantBoolFieldToBool<ept id=\"p1\">**</ept>","source":"**/VariantBoolFieldToBool**"},{"pos":[8114,8184],"content":"Converts <ph id=\"ph1\">`VARIANT_BOOL`</ph> fields in structures to <ph id=\"ph2\">&lt;xref:System.Boolean&gt;</ph>.","source":"Converts `VARIANT_BOOL` fields in structures to <xref:System.Boolean>."},{"pos":[8189,8195],"content":"<bpt id=\"p1\">**</bpt>/?<ept id=\"p1\">**</ept>","source":"**/?**"},{"content":"Displays command syntax and options for the tool.","pos":[8196,8245]},{"pos":[8254,8546],"content":"[!NOTE]\n The command-line options for Tlbimp.exe are case-insensitive and can be supplied in any order. You only need to specify enough of the option to uniquely identify it. Therefore, **/n** is equivalent to **/nologo** and **/ou:** *outfile.dll* is equivalent to **/out:** *outfile.dll*.","leadings":["","> "],"nodes":[{"content":"The command-line options for Tlbimp.exe are case-insensitive and can be supplied in any order. You only need to specify enough of the option to uniquely identify it. Therefore, **/n** is equivalent to **/nologo** and **/ou:** *outfile.dll* is equivalent to **/out:** *outfile.dll*.","pos":[9,290],"nodes":[{"content":"The command-line options for Tlbimp.exe are case-insensitive and can be supplied in any order.","pos":[0,94]},{"content":"You only need to specify enough of the option to uniquely identify it.","pos":[95,165]},{"content":"Therefore, <bpt id=\"p1\">**</bpt><ph id=\"ph1\">/n</ph><ept id=\"p1\">**</ept> is equivalent to <bpt id=\"p2\">**</bpt>/nologo<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>/ou:<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>outfile.dll<ept id=\"p4\">*</ept> is equivalent to <bpt id=\"p5\">**</bpt>/out:<ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>outfile.dll<ept id=\"p6\">*</ept>.","pos":[166,281],"source":" Therefore, **/n** is equivalent to **/nologo** and **/ou:** *outfile.dll* is equivalent to **/out:** *outfile.dll*."}]}]},{"pos":[8555,8562],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Tlbimp.exe performs conversions on an entire type library at one time.","pos":[8566,8636]},{"content":"You cannot use the tool to generate type information for a subset of the types defined within a single type library.","pos":[8637,8753]},{"content":"It is often useful or necessary to be able to assign <bpt id=\"p1\">[</bpt>strong names<ept id=\"p1\">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept> to assemblies.","pos":[8760,8906],"source":"It is often useful or necessary to be able to assign [strong names](../../../docs/framework/app-domains/strong-named-assemblies.md) to assemblies."},{"content":"Therefore, Tlbimp.exe includes options for supplying the information necessary to generate strongly named assemblies.","pos":[8907,9024]},{"content":"Both the <bpt id=\"p1\">**</bpt>/keyfile:<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/keycontainer:<ept id=\"p2\">**</ept> options sign assemblies with strong names.","pos":[9025,9113],"source":" Both the **/keyfile:** and **/keycontainer:** options sign assemblies with strong names."},{"content":"Therefore, it is logical to supply only one of these options at a time.","pos":[9114,9185]},{"pos":[9192,9288],"content":"You can specify multiple reference assemblies by using the <bpt id=\"p1\">**</bpt>/reference<ept id=\"p1\">**</ept> option multiple times.","source":"You can specify multiple reference assemblies by using the **/reference** option multiple times."},{"content":"A resource ID can optionally be appended to a type library file when importing a type library from a module containing multiple type libraries.","pos":[9295,9438]},{"content":"Tlbimp.exe is able to locate this file only if it is in the current directory or if you specify the full path.","pos":[9439,9549]},{"content":"See the example later in this topic.","pos":[9550,9586]},{"pos":[9595,9603],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[9607,9740],"content":"The following command generates an assembly with the same name as the type library found in <ph id=\"ph1\">`myTest.tlb`</ph> and with the .dll extension.","source":"The following command generates an assembly with the same name as the type library found in `myTest.tlb` and with the .dll extension."},{"pos":[9783,9854],"content":"The following command generates an assembly with the name <ph id=\"ph1\">`myTest.dll`</ph>.","source":"The following command generates an assembly with the name `myTest.dll`."},{"content":"The following command generates an assembly with the same name as the type library specified by <ph id=\"ph1\">`MyModule.dll\\1`</ph> and with the .dll extension.","pos":[9914,10055],"source":"The following command generates an assembly with the same name as the type library specified by `MyModule.dll\\1` and with the .dll extension."},{"content":"<ph id=\"ph1\">`MyModule.dll\\1`</ph> must be located in the current directory.","pos":[10056,10114],"source":"`MyModule.dll\\1` must be located in the current directory."},{"content":"The following command generates an assembly with the name <ph id=\"ph1\">`myTestLib.dll`</ph> for the type library <ph id=\"ph2\">`TestLib.dll`</ph>.","pos":[10160,10269],"source":"The following command generates an assembly with the name `myTestLib.dll` for the type library `TestLib.dll`."},{"content":"The <bpt id=\"p1\">**</bpt>/transform:dispret<ept id=\"p1\">**</ept> option transforms any [out, retval] parameters of methods on dispinterfaces in the type library into return values in the managed library.","pos":[10270,10435],"source":" The **/transform:dispret** option transforms any [out, retval] parameters of methods on dispinterfaces in the type library into return values in the managed library."},{"content":"The type library <ph id=\"ph1\">`TestLib.dll`</ph>, in the preceding example, includes a dispinterface method named <ph id=\"ph2\">`SomeMethod`</ph> that returns void and has an [out, retval] parameter.","pos":[10516,10678],"source":"The type library `TestLib.dll`, in the preceding example, includes a dispinterface method named `SomeMethod` that returns void and has an [out, retval] parameter."},{"content":"The following code is the input type library method signature for <ph id=\"ph1\">`SomeMethod`</ph> in <ph id=\"ph2\">`TestLib.dll`</ph>.","pos":[10679,10775],"source":" The following code is the input type library method signature for `SomeMethod` in `TestLib.dll`."},{"content":"Specifying the <bpt id=\"p1\">**</bpt>/transform:dispret<ept id=\"p1\">**</ept> option causes Tlbimp.exe to transform the <ph id=\"ph1\">`[out, retval]`</ph> parameter of <ph id=\"ph2\">`SomeMethod`</ph> into a <ph id=\"ph3\">`bool`</ph> return value.","pos":[10845,10994],"source":"Specifying the **/transform:dispret** option causes Tlbimp.exe to transform the `[out, retval]` parameter of `SomeMethod` into a `bool` return value."},{"content":"The following is the method signature that Tlbimp.exe produces for <ph id=\"ph1\">`SomeMethod`</ph> in the managed library <ph id=\"ph2\">`myTestLib.dll`</ph> when the <bpt id=\"p1\">**</bpt>/transform:dispret<ept id=\"p1\">**</ept> option is specified.","pos":[10995,11166],"source":" The following is the method signature that Tlbimp.exe produces for `SomeMethod` in the managed library `myTestLib.dll` when the **/transform:dispret** option is specified."},{"pos":[11215,11436],"content":"If you use Tlbimp.exe to produce a managed library for <ph id=\"ph1\">`TestLib.dll`</ph> without specifying the <bpt id=\"p1\">**</bpt>/transform:dispret<ept id=\"p1\">**</ept>, the tool produces the following method signature for <ph id=\"ph2\">`SomeMethod`</ph> in the managed library <ph id=\"ph3\">`myTestLib.dll`</ph>.","source":"If you use Tlbimp.exe to produce a managed library for `TestLib.dll` without specifying the **/transform:dispret**, the tool produces the following method signature for `SomeMethod` in the managed library `myTestLib.dll`."},{"pos":[11497,11505],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Tools<ept id=\"p1\">](../../../docs/framework/tools/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[11509,11557],"source":"[Tools](../../../docs/framework/tools/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Tlbexp.exe (Type Library Exporter)<ept id=\"p1\">](../../../docs/framework/tools/tlbexp-exe-type-library-exporter.md)</ept><ph id=\"ph1\"> </ph>","pos":[11561,11665],"source":"[Tlbexp.exe (Type Library Exporter)](../../../docs/framework/tools/tlbexp-exe-type-library-exporter.md) "},{"content":"<bpt id=\"p1\">[</bpt>Importing a Type Library as an Assembly<ept id=\"p1\">](../../../docs/framework/interop/importing-a-type-library-as-an-assembly.md)</ept><ph id=\"ph1\"> </ph>","pos":[11669,11787],"source":"[Importing a Type Library as an Assembly](../../../docs/framework/interop/importing-a-type-library-as-an-assembly.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Library to Assembly Conversion Summary<ept id=\"p1\">](http://msdn.microsoft.com/en-us/bf3f90c5-4770-4ab8-895c-3ba1055cc958)</ept><ph id=\"ph1\"> </ph>","pos":[11791,11907],"source":"[Type Library to Assembly Conversion Summary](http://msdn.microsoft.com/en-us/bf3f90c5-4770-4ab8-895c-3ba1055cc958) "},{"content":"<bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept><ph id=\"ph1\"> </ph>","pos":[11911,12003],"source":"[Ildasm.exe (IL Disassembler)](../../../docs/framework/tools/ildasm-exe-il-disassembler.md) "},{"content":"<bpt id=\"p1\">[</bpt>Sn.exe (Strong Name Tool)<ept id=\"p1\">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept><ph id=\"ph1\"> </ph>","pos":[12007,12093],"source":"[Sn.exe (Strong Name Tool)](../../../docs/framework/tools/sn-exe-strong-name-tool.md) "},{"content":"<bpt id=\"p1\">[</bpt>Strong-Named Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[12097,12187],"source":"[Strong-Named Assemblies](../../../docs/framework/app-domains/strong-named-assemblies.md) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes for Importing Type Libraries into Interop Assemblies<ept id=\"p1\">](http://msdn.microsoft.com/en-us/81e587b8-393f-43e1-9add-c4b05e65cbfd)</ept><ph id=\"ph1\"> </ph>","pos":[12191,12327],"source":"[Attributes for Importing Type Libraries into Interop Assemblies](http://msdn.microsoft.com/en-us/81e587b8-393f-43e1-9add-c4b05e65cbfd) "},{"content":"<bpt id=\"p1\">[</bpt>Command Prompts<ept id=\"p1\">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>","pos":[12331,12414],"source":"[Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)"}]}