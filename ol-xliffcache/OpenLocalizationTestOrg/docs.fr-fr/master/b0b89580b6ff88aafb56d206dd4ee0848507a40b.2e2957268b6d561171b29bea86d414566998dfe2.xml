{"content":"---\ntitle: \"private protected - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/15/2017\nauthor: \"sputier\"\n---\n# private protected (C# Reference)\n\nThe `private protected` keyword combination is a member access modifier. A private protected member is accessible by types derived from the containing class, but only within its containing assembly. For a comparison of `private protected` with the other access modifiers, see [Accessibility Levels](accessibility-levels.md).\n\n> [!NOTE]\n> The `private protected` access modifier is valid in C# version 7.2 and later.\n\n## Example\n\nA private protected member of a base class is accessible from derived types in its containing assembly only if the static type of the variable is the derived class type. For example, consider the following code segment:  \n\n```csharp\n// Assembly1.cs  \n// Compile with: /target:library  \npublic class BaseClass\n{\n    private protected int myValue = 0;\n}\n\npublic class DerivedClass1 : BaseClass\n{\n    void Access()\n    {\n        BaseClass baseObject = new BaseClass();\n\n        // Error CS1540, because myValue can only be accessed by\n        // classes derived from BaseClass.\n        // baseObject.myValue = 5;  \n\n        // OK, accessed through the current derived class instance\n        myValue = 5;\n    }\n}\n```\n\n```csharp\n// Assembly2.cs  \n// Compile with: /reference:Assembly1.dll  \nclass DerivedClass2 : BaseClass\n{\n    void Access()\n    {\n        // Error CS0122, because myValue can only be\n        // accessed by types in Assembly1\n        // myValue = 10;\n    }\n}\n```\n\nThis example contains two files, `Assembly1.cs` and `Assembly2.cs`.\nThe first file contains a public base class, `BaseClass`, and a type derived from it, `DerivedClass1`. `BaseClass` owns a private protected member, `myValue`, which `DerivedClass1` tries to access in two ways. The first attempt to access `myValue` through an instance of `BaseClass` will produce an error. However, the attempt to use it as an inherited member in `DerivedClass1` will succeed.\nIn the second file, an attempt to access `myValue` as an inherited member of `DerivedClass2` will produce an error, as it is only accessible by derived types in Assembly1.\n\nStruct members cannot be `private protected` because the struct cannot be inherited.  \n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Access Modifiers](access-modifiers.md)\n- [Accessibility Levels](accessibility-levels.md)\n- [Modifiers](modifiers.md)\n- [public](public.md)\n- [private](private.md)\n- [internal](internal.md)\n- [Security concerns for internal virtual keywords](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/heyd8kky(v=vs.100))","nodes":[{"pos":[4,104],"embed":true,"restype":"x-metadata","content":"title: \"private protected - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/15/2017\nauthor: \"sputier\"","nodes":[{"content":"private protected - C# Reference","nodes":[{"pos":[0,32],"content":"private protected - C# Reference","nodes":[{"content":"private protected - C# Reference","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[111,143],"content":"private protected (C# Reference)","linkify":"private protected (C# Reference)","nodes":[{"content":"private protected (C# Reference)","pos":[0,32]}]},{"content":"The <ph id=\"ph1\">`private protected`</ph> keyword combination is a member access modifier.","pos":[145,217],"source":"The `private protected` keyword combination is a member access modifier."},{"content":"A private protected member is accessible by types derived from the containing class, but only within its containing assembly.","pos":[218,343]},{"content":"For a comparison of <ph id=\"ph1\">`private protected`</ph> with the other access modifiers, see <bpt id=\"p1\">[</bpt>Accessibility Levels<ept id=\"p1\">](accessibility-levels.md)</ept>.","pos":[344,469],"source":" For a comparison of `private protected` with the other access modifiers, see [Accessibility Levels](accessibility-levels.md)."},{"pos":[473,560],"content":"[!NOTE]\nThe `private protected` access modifier is valid in C# version 7.2 and later.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`private protected`</ph> access modifier is valid in C# version 7.2 and later.","pos":[8,85],"source":"The `private protected` access modifier is valid in C# version 7.2 and later."}]},{"pos":[565,572],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"A private protected member of a base class is accessible from derived types in its containing assembly only if the static type of the variable is the derived class type.","pos":[574,743]},{"content":"For example, consider the following code segment:","pos":[744,793]},{"content":"This example contains two files, <ph id=\"ph1\">`Assembly1.cs`</ph> and <ph id=\"ph2\">`Assembly2.cs`</ph>.","pos":[1551,1618],"source":"This example contains two files, `Assembly1.cs` and `Assembly2.cs`."},{"content":"The first file contains a public base class, <ph id=\"ph1\">`BaseClass`</ph>, and a type derived from it, <ph id=\"ph2\">`DerivedClass1`</ph>.","pos":[1619,1721],"source":"\nThe first file contains a public base class, `BaseClass`, and a type derived from it, `DerivedClass1`."},{"content":"<ph id=\"ph1\">`BaseClass`</ph> owns a private protected member, <ph id=\"ph2\">`myValue`</ph>, which <ph id=\"ph3\">`DerivedClass1`</ph> tries to access in two ways.","pos":[1722,1828],"source":"`BaseClass` owns a private protected member, `myValue`, which `DerivedClass1` tries to access in two ways."},{"content":"The first attempt to access <ph id=\"ph1\">`myValue`</ph> through an instance of <ph id=\"ph2\">`BaseClass`</ph> will produce an error.","pos":[1829,1924],"source":" The first attempt to access `myValue` through an instance of `BaseClass` will produce an error."},{"content":"However, the attempt to use it as an inherited member in <ph id=\"ph1\">`DerivedClass1`</ph> will succeed.","pos":[1925,2011],"source":" However, the attempt to use it as an inherited member in `DerivedClass1` will succeed."},{"content":"In the second file, an attempt to access <ph id=\"ph1\">`myValue`</ph> as an inherited member of <ph id=\"ph2\">`DerivedClass2`</ph> will produce an error, as it is only accessible by derived types in Assembly1.","pos":[2012,2183],"source":"\nIn the second file, an attempt to access `myValue` as an inherited member of `DerivedClass2` will produce an error, as it is only accessible by derived types in Assembly1."},{"pos":[2185,2269],"content":"Struct members cannot be <ph id=\"ph1\">`private protected`</ph> because the struct cannot be inherited.","source":"Struct members cannot be `private protected` because the struct cannot be inherited."},{"pos":[2276,2301],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2369,2377],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2381,2408],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2411,2467],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2470,2493],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[2496,2535],"content":"<bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](access-modifiers.md)</ept>","source":"[Access Modifiers](access-modifiers.md)"},{"pos":[2538,2585],"content":"<bpt id=\"p1\">[</bpt>Accessibility Levels<ept id=\"p1\">](accessibility-levels.md)</ept>","source":"[Accessibility Levels](accessibility-levels.md)"},{"pos":[2588,2613],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](modifiers.md)</ept>","source":"[Modifiers](modifiers.md)"},{"pos":[2616,2635],"content":"<bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](public.md)</ept>","source":"[public](public.md)"},{"pos":[2638,2659],"content":"<bpt id=\"p1\">[</bpt>private<ept id=\"p1\">](private.md)</ept>","source":"[private](private.md)"},{"pos":[2662,2685],"content":"<bpt id=\"p1\">[</bpt>internal<ept id=\"p1\">](internal.md)</ept>","source":"[internal](internal.md)"},{"pos":[2688,2826],"content":"<bpt id=\"p1\">[</bpt>Security concerns for internal virtual keywords<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/heyd8kky(v=vs.100))</ept>","source":"[Security concerns for internal virtual keywords](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/heyd8kky(v=vs.100))"}]}