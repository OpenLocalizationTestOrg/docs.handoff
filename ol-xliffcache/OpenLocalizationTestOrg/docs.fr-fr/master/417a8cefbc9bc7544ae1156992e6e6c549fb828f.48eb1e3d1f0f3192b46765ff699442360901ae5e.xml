{"content":"---\ntitle: C# foreach statement\nms.date: 06/29/2018\nf1_keywords:\n  - \"foreach\"\n  - \"foreach_CSharpKeyword\"\nhelpviewer_keywords:\n  - \"foreach keyword [C#]\"\n  - \"foreach statement [C#]\"\n  - \"in keyword [C#]\"\nms.assetid: 5a9c5ddc-5fd3-457a-9bb6-9abffcd874ec\n---\n# foreach, in (C# reference)\n\nThe `foreach` statement executes a statement or a block of statements for each element in an instance of the type that implements the <xref:System.Collections.IEnumerable?displayProperty=nameWithType> or <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface. The `foreach` statement is not limited to those types and can be applied to an instance of any type that satisfies the following conditions:\n\n- has the public parameterless `GetEnumerator` method whose return type is either class, struct, or interface type,\n- the return type of the `GetEnumerator` method has the public `Current` property and the public parameterless `MoveNext` method whose return type is <xref:System.Boolean>.\n\nBeginning with C# 7.3, if the enumerator's `Current` property returns a [reference return value](ref.md#reference-return-values) (`ref T` where `T` is the type of the collection element), you can declare the iteration variable with the `ref` or `ref readonly` modifier.\n\nAt any point within the `foreach` statement block, you can break out of the loop by using the [break](break.md) statement, or step to the next iteration in the loop by using the [continue](continue.md) statement. You also can exit a `foreach` loop by the [goto](goto.md), [return](return.md), or [throw](throw.md) statements.\n\n## Examples\n\n[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]\n\nThe following example shows usage of the `foreach` statement with an instance of the <xref:System.Collections.Generic.List%601> type that implements the <xref:System.Collections.Generic.IEnumerable%601> interface:\n\n[!code-csharp-interactive[list example](~/samples/snippets/csharp/keywords/IterationKeywordsExamples.cs#1)]\n\nThe next example uses the `foreach` statement with an instance of the <xref:System.Span%601?displayProperty=nameWithType> type, which doesn't implement any interfaces:\n\n[!code-csharp-interactive[span example](~/samples/snippets/csharp/keywords/IterationKeywordsExamples.cs#2)]\n\nThe following example uses a `ref` iteration variable to set the value of each item in a stackalloc array. The `ref readonly` version iterates the collection to print all the values. The `readonly` declaration uses an implicit local variable declaration. Implicit variable declarations can be used with either `ref` or `ref readonly` declarations, as can explicitly typed variable declarations.\n\n[!code-csharp-interactive[ref span example](~/samples/snippets/csharp/keywords/IterationKeywordsExamples.cs#RefSpan)]\n\n## C# language specification\n\nFor more information, see [The foreach statement](~/_csharplang/spec/statements.md#the-foreach-statement) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Iteration Statements](iteration-statements.md)\n- [Using foreach with arrays](../../programming-guide/arrays/using-foreach-with-arrays.md)\n- [for statement](for.md)\n","nodes":[{"pos":[4,254],"embed":true,"restype":"x-metadata","content":"title: C# foreach statement\nms.date: 06/29/2018\nf1_keywords:\n  - \"foreach\"\n  - \"foreach_CSharpKeyword\"\nhelpviewer_keywords:\n  - \"foreach keyword [C#]\"\n  - \"foreach statement [C#]\"\n  - \"in keyword [C#]\"\nms.assetid: 5a9c5ddc-5fd3-457a-9bb6-9abffcd874ec","nodes":[{"content":"C# foreach statement","nodes":[{"pos":[0,20],"content":"C# foreach statement","nodes":[{"content":"C# foreach statement","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[261,287],"content":"foreach, in (C# reference)","linkify":"foreach, in (C# reference)","nodes":[{"content":"foreach, in (C# reference)","pos":[0,26]}]},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement executes a statement or a block of statements for each element in an instance of the type that implements the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType&gt;</ph> interface.","pos":[289,582],"source":"The `foreach` statement executes a statement or a block of statements for each element in an instance of the type that implements the <xref:System.Collections.IEnumerable?displayProperty=nameWithType> or <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface."},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement is not limited to those types and can be applied to an instance of any type that satisfies the following conditions:","pos":[583,723],"source":" The `foreach` statement is not limited to those types and can be applied to an instance of any type that satisfies the following conditions:"},{"pos":[727,840],"content":"has the public parameterless <ph id=\"ph1\">`GetEnumerator`</ph> method whose return type is either class, struct, or interface type,","source":"has the public parameterless `GetEnumerator` method whose return type is either class, struct, or interface type,"},{"pos":[843,1013],"content":"the return type of the <ph id=\"ph1\">`GetEnumerator`</ph> method has the public <ph id=\"ph2\">`Current`</ph> property and the public parameterless <ph id=\"ph3\">`MoveNext`</ph> method whose return type is <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph>.","source":"the return type of the `GetEnumerator` method has the public `Current` property and the public parameterless `MoveNext` method whose return type is <xref:System.Boolean>."},{"pos":[1015,1284],"content":"Beginning with C# 7.3, if the enumerator's <ph id=\"ph1\">`Current`</ph> property returns a <bpt id=\"p1\">[</bpt>reference return value<ept id=\"p1\">](ref.md#reference-return-values)</ept> (<ph id=\"ph2\">`ref T`</ph> where <ph id=\"ph3\">`T`</ph> is the type of the collection element), you can declare the iteration variable with the <ph id=\"ph4\">`ref`</ph> or <ph id=\"ph5\">`ref readonly`</ph> modifier.","source":"Beginning with C# 7.3, if the enumerator's `Current` property returns a [reference return value](ref.md#reference-return-values) (`ref T` where `T` is the type of the collection element), you can declare the iteration variable with the `ref` or `ref readonly` modifier."},{"content":"At any point within the <ph id=\"ph1\">`foreach`</ph> statement block, you can break out of the loop by using the <bpt id=\"p1\">[</bpt>break<ept id=\"p1\">](break.md)</ept> statement, or step to the next iteration in the loop by using the <bpt id=\"p2\">[</bpt>continue<ept id=\"p2\">](continue.md)</ept> statement.","pos":[1286,1498],"source":"At any point within the `foreach` statement block, you can break out of the loop by using the [break](break.md) statement, or step to the next iteration in the loop by using the [continue](continue.md) statement."},{"content":"You also can exit a <ph id=\"ph1\">`foreach`</ph> loop by the <bpt id=\"p1\">[</bpt>goto<ept id=\"p1\">](goto.md)</ept>, <bpt id=\"p2\">[</bpt>return<ept id=\"p2\">](return.md)</ept>, or <bpt id=\"p3\">[</bpt>throw<ept id=\"p3\">](throw.md)</ept> statements.","pos":[1499,1611],"source":" You also can exit a `foreach` loop by the [goto](goto.md), [return](return.md), or [throw](throw.md) statements."},{"pos":[1616,1624],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1695,1908],"content":"The following example shows usage of the <ph id=\"ph1\">`foreach`</ph> statement with an instance of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> type that implements the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface:","source":"The following example shows usage of the `foreach` statement with an instance of the <xref:System.Collections.Generic.List%601> type that implements the <xref:System.Collections.Generic.IEnumerable%601> interface:"},{"pos":[2019,2186],"content":"The next example uses the <ph id=\"ph1\">`foreach`</ph> statement with an instance of the <ph id=\"ph2\">&lt;xref:System.Span%601?displayProperty=nameWithType&gt;</ph> type, which doesn't implement any interfaces:","source":"The next example uses the `foreach` statement with an instance of the <xref:System.Span%601?displayProperty=nameWithType> type, which doesn't implement any interfaces:"},{"content":"The following example uses a <ph id=\"ph1\">`ref`</ph> iteration variable to set the value of each item in a stackalloc array.","pos":[2297,2403],"source":"The following example uses a `ref` iteration variable to set the value of each item in a stackalloc array."},{"content":"The <ph id=\"ph1\">`ref readonly`</ph> version iterates the collection to print all the values.","pos":[2404,2479],"source":" The `ref readonly` version iterates the collection to print all the values."},{"content":"The <ph id=\"ph1\">`readonly`</ph> declaration uses an implicit local variable declaration.","pos":[2480,2551],"source":" The `readonly` declaration uses an implicit local variable declaration."},{"content":"Implicit variable declarations can be used with either <ph id=\"ph1\">`ref`</ph> or <ph id=\"ph2\">`ref readonly`</ph> declarations, as can explicitly typed variable declarations.","pos":[2552,2691],"source":" Implicit variable declarations can be used with either `ref` or `ref readonly` declarations, as can explicitly typed variable declarations."},{"pos":[2815,2840],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2842,3027],"content":"For more information, see <bpt id=\"p1\">[</bpt>The foreach statement<ept id=\"p1\">](~/_csharplang/spec/statements.md#the-foreach-statement)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see [The foreach statement](~/_csharplang/spec/statements.md#the-foreach-statement) section of the [C# language specification](../language-specification/index.md)."},{"pos":[3032,3040],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3044,3071],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[3074,3130],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[3133,3156],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[3159,3206],"content":"<bpt id=\"p1\">[</bpt>Iteration Statements<ept id=\"p1\">](iteration-statements.md)</ept>","source":"[Iteration Statements](iteration-statements.md)"},{"pos":[3209,3297],"content":"<bpt id=\"p1\">[</bpt>Using foreach with arrays<ept id=\"p1\">](../../programming-guide/arrays/using-foreach-with-arrays.md)</ept>","source":"[Using foreach with arrays](../../programming-guide/arrays/using-foreach-with-arrays.md)"},{"pos":[3300,3323],"content":"<bpt id=\"p1\">[</bpt>for statement<ept id=\"p1\">](for.md)</ept>","source":"[for statement](for.md)"}]}