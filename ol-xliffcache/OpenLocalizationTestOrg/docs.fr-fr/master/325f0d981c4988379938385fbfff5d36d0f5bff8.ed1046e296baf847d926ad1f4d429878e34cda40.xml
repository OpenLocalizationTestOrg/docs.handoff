{"content":"---\ntitle: \"How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 66053f21-9217-473c-a6f3-a0897be07756\n---\n# How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)\nThis topic presents an example that opens an Office Open XML document, and retrieves a collection of all of the paragraphs in the document.  \n  \n For more information on Office Open XML, see [Eric White's Blog](http://www.ericwhite.com).  \n  \n## Example  \n This example opens an Office Open XML package, uses the relationships within the Open XML package to find the document and the style parts. It then queries the document, projecting a collection of an anonymous type that contains the paragraph <xref:System.Xml.Linq.XElement> node, the style name of each paragraph, and the text of each paragraph.  \n  \n The example uses an extension method named `StringConcatenate`, which is also supplied in the example.  \n  \n For a detailed tutorial that explains how this example works, see [Pure Functional Transformations of XML (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/pure-functional-transformations-of-xml.md).  \n  \n This example uses classes found in the WindowsBase assembly. It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace.  \n  \n```vb  \nImports <xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\">  \n  \nModule Module1  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(ByVal source As IEnumerable(Of String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As String In source  \n            sb.Append(s)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item))  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As T In source  \n            sb.Append(s).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String), ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item)).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    Public Function ParagraphText(ByVal e As XElement) As String  \n        Dim w As XNamespace = e.Name.Namespace  \n        Return (e.<w:r>.<w:t>).StringConcatenate(Function(element) CStr(element))  \n    End Function  \n  \n    ' Following function is required because VB does not support short circuit evaluation  \n    Private Function GetStyleOfParagraph(ByVal styleNode As XElement, ByVal defaultStyle As String) _  \n                As String  \n        If (styleNode Is Nothing) Then  \n            Return defaultStyle  \n        Else  \n            Return styleNode.@w:val  \n        End If  \n    End Function  \n  \n    Sub Main()  \n        Dim fileName = \"SampleDoc.docx\"  \n  \n        Dim documentRelationshipType = _  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"  \n        Dim stylesRelationshipType = _  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\"  \n        Dim wordmlNamespace = _  \n          \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"  \n  \n        Dim xDoc As XDocument = Nothing  \n        Dim styleDoc As XDocument = Nothing  \n        Using wdPackage As Package = Package.Open(fileName, FileMode.Open, FileAccess.Read)  \n            Dim docPackageRelationship As PackageRelationship = _  \n              wdPackage _  \n              .GetRelationshipsByType(documentRelationshipType) _  \n              .FirstOrDefault()  \n            If (docPackageRelationship IsNot Nothing) Then  \n                Dim documentUri As Uri = _  \n                  PackUriHelper _  \n                  .ResolvePartUri(New Uri(\"/\", UriKind.Relative), docPackageRelationship.TargetUri)  \n                Dim documentPart As PackagePart = wdPackage.GetPart(documentUri)  \n  \n                '  Load the document XML in the part into an XDocument instance.  \n                xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()))  \n  \n                '  Find the styles part. There will only be one.  \n                Dim styleRelation As PackageRelationship = documentPart.GetRelationshipsByType(stylesRelationshipType).FirstOrDefault()  \n                If (styleRelation IsNot Nothing) Then  \n                    Dim styleUri As Uri = PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri)  \n                    Dim stylePart As PackagePart = wdPackage.GetPart(styleUri)  \n  \n                    '  Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()))  \n                End If  \n            End If  \n        End Using  \n  \n        Dim defaultStyle As String = _  \n            ( _  \n                From style In styleDoc.Root.<w:style> _  \n                Where style.@w:type = \"paragraph\" And _  \n                      style.@w:default = \"1\" _  \n                Select style _  \n            ).First().@w:styleId  \n  \n        ' Find all paragraphs in the document.  \n        Dim paragraphs = _  \n            From para In xDoc.Root.<w:body>...<w:p> _  \n        Let styleNode As XElement = para.<w:pPr>.<w:pStyle>.FirstOrDefault _  \n        Select New With { _  \n            .ParagraphNode = para, _  \n            .StyleName = GetStyleOfParagraph(styleNode, defaultStyle) _  \n        }  \n  \n        ' Retrieve the text of each paragraph.  \n        Dim paraWithText = _  \n            From para In paragraphs _  \n            Select New With { _  \n                .ParagraphNode = para.ParagraphNode, _  \n                .StyleName = para.StyleName, _  \n                .Text = ParagraphText(para.ParagraphNode) _  \n            }  \n  \n        For Each p In paraWithText  \n            Console.WriteLine(\"StyleName:{0} >{1}<\", p.StyleName, p.Text)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n When run with the sample Open XML document described in [Creating the Source Office Open XML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md), this example produces the following output:  \n  \n```  \nStyleName:Heading1 >Parsing WordprocessingML with LINQ to XML<  \nStyleName:Normal ><  \nStyleName:Normal >The following example prints to the console.<  \nStyleName:Normal ><  \nStyleName:Code >using System;<  \nStyleName:Code ><  \nStyleName:Code >class Program {<  \nStyleName:Code >    public static void (string[] args) {<  \nStyleName:Code >        Console.WriteLine(\"Hello World\");<  \nStyleName:Code >    }<  \nStyleName:Code >}<  \nStyleName:Normal ><  \nStyleName:Normal >This example produces the following output:<  \nStyleName:Normal ><  \nStyleName:Code >Hello World<  \n```  \n  \n## See also\n\n- [Advanced Query Techniques (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)\n","nodes":[{"pos":[4,157],"embed":true,"restype":"x-metadata","content":"title: \"How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 66053f21-9217-473c-a6f3-a0897be07756","nodes":[{"content":"How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)","nodes":[{"pos":[0,75],"content":"How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)","nodes":[{"content":"How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)","pos":[0,75]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[164,239],"content":"How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)","linkify":"How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)","nodes":[{"content":"How to: Retrieve Paragraphs from an Office Open XML Document (Visual Basic)","pos":[0,75]}]},{"content":"This topic presents an example that opens an Office Open XML document, and retrieves a collection of all of the paragraphs in the document.","pos":[240,379]},{"pos":[386,477],"content":"For more information on Office Open XML, see <bpt id=\"p1\">[</bpt>Eric White's Blog<ept id=\"p1\">](http://www.ericwhite.com)</ept>.","source":"For more information on Office Open XML, see [Eric White's Blog](http://www.ericwhite.com)."},{"pos":[486,493],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example opens an Office Open XML package, uses the relationships within the Open XML package to find the document and the style parts.","pos":[497,636]},{"content":"It then queries the document, projecting a collection of an anonymous type that contains the paragraph <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> node, the style name of each paragraph, and the text of each paragraph.","pos":[637,843],"source":" It then queries the document, projecting a collection of an anonymous type that contains the paragraph <xref:System.Xml.Linq.XElement> node, the style name of each paragraph, and the text of each paragraph."},{"pos":[850,952],"content":"The example uses an extension method named <ph id=\"ph1\">`StringConcatenate`</ph>, which is also supplied in the example.","source":"The example uses an extension method named `StringConcatenate`, which is also supplied in the example."},{"pos":[959,1181],"content":"For a detailed tutorial that explains how this example works, see <bpt id=\"p1\">[</bpt>Pure Functional Transformations of XML (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/pure-functional-transformations-of-xml.md)</ept>.","source":"For a detailed tutorial that explains how this example works, see [Pure Functional Transformations of XML (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/pure-functional-transformations-of-xml.md)."},{"content":"This example uses classes found in the WindowsBase assembly.","pos":[1188,1248]},{"content":"It uses types in the <ph id=\"ph1\">&lt;xref:System.IO.Packaging?displayProperty=nameWithType&gt;</ph> namespace.","pos":[1249,1336],"source":" It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace."},{"pos":[6798,7066],"content":"When run with the sample Open XML document described in <bpt id=\"p1\">[</bpt>Creating the Source Office Open XML Document (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>, this example produces the following output:","source":"When run with the sample Open XML document described in [Creating the Source Office Open XML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md), this example produces the following output:"},{"pos":[7660,7668],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7672,7827],"content":"<bpt id=\"p1\">[</bpt>Advanced Query Techniques (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)</ept>","source":"[Advanced Query Techniques (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)"}]}