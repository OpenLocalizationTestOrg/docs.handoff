{"content":"---\ntitle: \"Implicit numeric conversions table - C# Reference\"\nms.custom: seodec18\n\nms.date: 09/05/2018\nhelpviewer_keywords: \n  - \"conversions [C#], implicit numeric\"\n  - \"implicit numeric conversions [C#]\"\n  - \"numeric conversions [C#], implicit\"\n  - \"types [C#], implicit numeric conversions\"\nms.assetid: 72eb5a94-0491-48bf-8032-d7ebfdfeb8d8\n---\n# Implicit numeric conversions table (C# Reference)\n\nThe following table shows the predefined implicit conversions between .NET numeric types.\n  \n|From|To|  \n|----------|--------|  \n|[sbyte](sbyte.md)|`short`, `int`, `long`, `float`, `double`, or `decimal`|  \n|[byte](byte.md)|`short`, `ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`|  \n|[char](char.md)|`ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`|  \n|[short](short.md)|`int`, `long`, `float`, `double`, or `decimal`|  \n|[ushort](ushort.md)|`int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`|  \n|[int](int.md)|`long`, `float`, `double`, or `decimal`|  \n|[uint](uint.md)|`long`, `ulong`, `float`, `double`, or `decimal`|  \n|[long](long.md)|`float`, `double`, or `decimal`|  \n|[ulong](ulong.md)|`float`, `double`, or `decimal`|  \n|[float](float.md)|`double`|  \n  \n## Remarks  \n\n- Any [integral type](integral-types-table.md) is implicitly convertible to any [floating-point type](floating-point-types-table.md).\n\n- Precision but not magnitude might be lost in the conversions from `int`, `uint`, `long`, or `ulong` to `float` and from `long` or `ulong` to `double`.  \n  \n- There are no implicit conversions to the `char`, `byte`, and `sbyte` types.  \n\n- There are no implicit conversions from the `double` and `decimal` types.\n  \n- There are no implicit conversions between the `decimal` type and the `float` or `double` types.  \n  \n- A value of a constant expression of type `int` (for example, a value represented by an integral literal) can be converted to `sbyte`, `byte`, `short`, `ushort`, `uint`, or `ulong`, provided it's within the range of the destination type:\n\n  ```csharp\n  byte a = 13;    // Compiles\n  byte b = 300;   // CS0031: Constant value '300' cannot be converted to a 'byte'\n  ```\n\nFor more information about implicit conversions, see the [Implicit conversions](~/_csharplang/spec/conversions.md#implicit-conversions) section of the [C# language specification](../language-specification/index.md).\n  \n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [Integral types table](integral-types-table.md)\n- [Floating-point types table](floating-point-types-table.md)\n- [Built-in types table](built-in-types-table.md)\n- [Explicit numeric conversions table](explicit-numeric-conversions-table.md)\n- [Casting and type conversions](../../programming-guide/types/casting-and-type-conversions.md)\n","nodes":[{"pos":[4,343],"embed":true,"restype":"x-metadata","content":"title: \"Implicit numeric conversions table - C# Reference\"\nms.custom: seodec18\n\nms.date: 09/05/2018\nhelpviewer_keywords: \n  - \"conversions [C#], implicit numeric\"\n  - \"implicit numeric conversions [C#]\"\n  - \"numeric conversions [C#], implicit\"\n  - \"types [C#], implicit numeric conversions\"\nms.assetid: 72eb5a94-0491-48bf-8032-d7ebfdfeb8d8","nodes":[{"content":"Implicit numeric conversions table - C# Reference","nodes":[{"pos":[0,49],"content":"Implicit numeric conversions table - C# Reference","nodes":[{"content":"Implicit numeric conversions table - C# Reference","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[350,399],"content":"Implicit numeric conversions table (C# Reference)","linkify":"Implicit numeric conversions table (C# Reference)","nodes":[{"content":"Implicit numeric conversions table (C# Reference)","pos":[0,49]}]},{"content":"The following table shows the predefined implicit conversions between .NET numeric types.","pos":[401,490]},{"content":"From","pos":[495,499]},{"content":"To","pos":[500,502]},{"pos":[531,548],"content":"<bpt id=\"p1\">[</bpt>sbyte<ept id=\"p1\">](sbyte.md)</ept>","source":"[sbyte](sbyte.md)"},{"pos":[549,604],"content":"<ph id=\"ph1\">`short`</ph>, <ph id=\"ph2\">`int`</ph>, <ph id=\"ph3\">`long`</ph>, <ph id=\"ph4\">`float`</ph>, <ph id=\"ph5\">`double`</ph>, or <ph id=\"ph6\">`decimal`</ph>","source":"`short`, `int`, `long`, `float`, `double`, or `decimal`"},{"pos":[609,624],"content":"<bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](byte.md)</ept>","source":"[byte](byte.md)"},{"pos":[625,707],"content":"<ph id=\"ph1\">`short`</ph>, <ph id=\"ph2\">`ushort`</ph>, <ph id=\"ph3\">`int`</ph>, <ph id=\"ph4\">`uint`</ph>, <ph id=\"ph5\">`long`</ph>, <ph id=\"ph6\">`ulong`</ph>, <ph id=\"ph7\">`float`</ph>, <ph id=\"ph8\">`double`</ph>, or <ph id=\"ph9\">`decimal`</ph>","source":"`short`, `ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`"},{"pos":[712,727],"content":"<bpt id=\"p1\">[</bpt>char<ept id=\"p1\">](char.md)</ept>","source":"[char](char.md)"},{"pos":[728,801],"content":"<ph id=\"ph1\">`ushort`</ph>, <ph id=\"ph2\">`int`</ph>, <ph id=\"ph3\">`uint`</ph>, <ph id=\"ph4\">`long`</ph>, <ph id=\"ph5\">`ulong`</ph>, <ph id=\"ph6\">`float`</ph>, <ph id=\"ph7\">`double`</ph>, or <ph id=\"ph8\">`decimal`</ph>","source":"`ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`"},{"pos":[806,823],"content":"<bpt id=\"p1\">[</bpt>short<ept id=\"p1\">](short.md)</ept>","source":"[short](short.md)"},{"pos":[824,870],"content":"<ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`long`</ph>, <ph id=\"ph3\">`float`</ph>, <ph id=\"ph4\">`double`</ph>, or <ph id=\"ph5\">`decimal`</ph>","source":"`int`, `long`, `float`, `double`, or `decimal`"},{"pos":[875,894],"content":"<bpt id=\"p1\">[</bpt>ushort<ept id=\"p1\">](ushort.md)</ept>","source":"[ushort](ushort.md)"},{"pos":[895,958],"content":"<ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`uint`</ph>, <ph id=\"ph3\">`long`</ph>, <ph id=\"ph4\">`ulong`</ph>, <ph id=\"ph5\">`float`</ph>, <ph id=\"ph6\">`double`</ph>, or <ph id=\"ph7\">`decimal`</ph>","source":"`int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`"},{"pos":[963,976],"content":"<bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>","source":"[int](int.md)"},{"pos":[977,1016],"content":"<ph id=\"ph1\">`long`</ph>, <ph id=\"ph2\">`float`</ph>, <ph id=\"ph3\">`double`</ph>, or <ph id=\"ph4\">`decimal`</ph>","source":"`long`, `float`, `double`, or `decimal`"},{"pos":[1021,1036],"content":"<bpt id=\"p1\">[</bpt>uint<ept id=\"p1\">](uint.md)</ept>","source":"[uint](uint.md)"},{"pos":[1037,1085],"content":"<ph id=\"ph1\">`long`</ph>, <ph id=\"ph2\">`ulong`</ph>, <ph id=\"ph3\">`float`</ph>, <ph id=\"ph4\">`double`</ph>, or <ph id=\"ph5\">`decimal`</ph>","source":"`long`, `ulong`, `float`, `double`, or `decimal`"},{"pos":[1090,1105],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](long.md)</ept>","source":"[long](long.md)"},{"pos":[1106,1137],"content":"<ph id=\"ph1\">`float`</ph>, <ph id=\"ph2\">`double`</ph>, or <ph id=\"ph3\">`decimal`</ph>","source":"`float`, `double`, or `decimal`"},{"pos":[1142,1159],"content":"<bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](ulong.md)</ept>","source":"[ulong](ulong.md)"},{"pos":[1160,1191],"content":"<ph id=\"ph1\">`float`</ph>, <ph id=\"ph2\">`double`</ph>, or <ph id=\"ph3\">`decimal`</ph>","source":"`float`, `double`, or `decimal`"},{"pos":[1196,1213],"content":"<bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](float.md)</ept>","source":"[float](float.md)"},{"pos":[1232,1239],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1245,1376],"content":"Any <bpt id=\"p1\">[</bpt>integral type<ept id=\"p1\">](integral-types-table.md)</ept> is implicitly convertible to any <bpt id=\"p2\">[</bpt>floating-point type<ept id=\"p2\">](floating-point-types-table.md)</ept>.","source":"Any [integral type](integral-types-table.md) is implicitly convertible to any [floating-point type](floating-point-types-table.md)."},{"pos":[1380,1530],"content":"Precision but not magnitude might be lost in the conversions from <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`uint`</ph>, <ph id=\"ph3\">`long`</ph>, or <ph id=\"ph4\">`ulong`</ph> to <ph id=\"ph5\">`float`</ph> and from <ph id=\"ph6\">`long`</ph> or <ph id=\"ph7\">`ulong`</ph> to <ph id=\"ph8\">`double`</ph>.","source":"Precision but not magnitude might be lost in the conversions from `int`, `uint`, `long`, or `ulong` to `float` and from `long` or `ulong` to `double`."},{"pos":[1538,1613],"content":"There are no implicit conversions to the <ph id=\"ph1\">`char`</ph>, <ph id=\"ph2\">`byte`</ph>, and <ph id=\"ph3\">`sbyte`</ph> types.","source":"There are no implicit conversions to the `char`, `byte`, and `sbyte` types."},{"pos":[1619,1691],"content":"There are no implicit conversions from the <ph id=\"ph1\">`double`</ph> and <ph id=\"ph2\">`decimal`</ph> types.","source":"There are no implicit conversions from the `double` and `decimal` types."},{"pos":[1697,1792],"content":"There are no implicit conversions between the <ph id=\"ph1\">`decimal`</ph> type and the <ph id=\"ph2\">`float`</ph> or <ph id=\"ph3\">`double`</ph> types.","source":"There are no implicit conversions between the `decimal` type and the `float` or `double` types."},{"pos":[1800,2036],"content":"A value of a constant expression of type <ph id=\"ph1\">`int`</ph> (for example, a value represented by an integral literal) can be converted to <ph id=\"ph2\">`sbyte`</ph>, <ph id=\"ph3\">`byte`</ph>, <ph id=\"ph4\">`short`</ph>, <ph id=\"ph5\">`ushort`</ph>, <ph id=\"ph6\">`uint`</ph>, or <ph id=\"ph7\">`ulong`</ph>, provided it's within the range of the destination type:","source":"A value of a constant expression of type `int` (for example, a value represented by an integral literal) can be converted to `sbyte`, `byte`, `short`, `ushort`, `uint`, or `ulong`, provided it's within the range of the destination type:"},{"pos":[2169,2384],"content":"For more information about implicit conversions, see the <bpt id=\"p1\">[</bpt>Implicit conversions<ept id=\"p1\">](~/_csharplang/spec/conversions.md#implicit-conversions)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information about implicit conversions, see the [Implicit conversions](~/_csharplang/spec/conversions.md#implicit-conversions) section of the [C# language specification](../language-specification/index.md)."},{"pos":[2391,2399],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2403,2430],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2433,2489],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2492,2539],"content":"<bpt id=\"p1\">[</bpt>Integral types table<ept id=\"p1\">](integral-types-table.md)</ept>","source":"[Integral types table](integral-types-table.md)"},{"pos":[2542,2601],"content":"<bpt id=\"p1\">[</bpt>Floating-point types table<ept id=\"p1\">](floating-point-types-table.md)</ept>","source":"[Floating-point types table](floating-point-types-table.md)"},{"pos":[2604,2651],"content":"<bpt id=\"p1\">[</bpt>Built-in types table<ept id=\"p1\">](built-in-types-table.md)</ept>","source":"[Built-in types table](built-in-types-table.md)"},{"pos":[2654,2729],"content":"<bpt id=\"p1\">[</bpt>Explicit numeric conversions table<ept id=\"p1\">](explicit-numeric-conversions-table.md)</ept>","source":"[Explicit numeric conversions table](explicit-numeric-conversions-table.md)"},{"pos":[2732,2825],"content":"<bpt id=\"p1\">[</bpt>Casting and type conversions<ept id=\"p1\">](../../programming-guide/types/casting-and-type-conversions.md)</ept>","source":"[Casting and type conversions](../../programming-guide/types/casting-and-type-conversions.md)"}]}