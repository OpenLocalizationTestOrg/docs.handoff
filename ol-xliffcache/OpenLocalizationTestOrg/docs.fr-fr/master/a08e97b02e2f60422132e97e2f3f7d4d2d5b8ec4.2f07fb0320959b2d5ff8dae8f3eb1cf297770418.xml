{"content":"---\ntitle: \"How to: Extract a Protocol and Port Number from a URL\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"searching with regular expressions, examples\"\n  - \"parsing text with regular expressions, examples\"\n  - \"regular expressions, examples\"\n  - \".NET Framework regular expressions, examples\"\n  - \"regular expressions [.NET Framework], examples\"\n  - \"pattern-matching with regular expressions, examples\"\nms.assetid: ab7f62b3-6d2c-4efb-8ac6-28600df5fd5c\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Extract a Protocol and Port Number from a URL\nThe following example extracts a protocol and port number from a URL.  \n  \n## Example  \n The example uses the <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType> method to return the protocol followed by a colon followed by the port number.  \n  \n [!code-csharp[RegularExpressions.Examples.Protocol#1](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/cs/Example.cs#1)]\n [!code-vb[RegularExpressions.Examples.Protocol#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/vb/Example.vb#1)]  \n  \n The regular expression pattern `^(?<proto>\\w+)://[^/]+?(?<port>:\\d+)?/` can be interpreted as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`^`|Begin the match at the start of the string.|  \n|`(?<proto>\\w+)`|Match one or more word characters. Name this group `proto`.|  \n|`://`|Match a colon followed by two slash marks.|  \n|`[^/]+?`|Match one or more occurrences (but as few as possible) of any character other than a slash mark.|  \n|`(?<port>:\\d+)?`|Match zero or one occurrence of a colon followed by one or more digit characters. Name this group `port`.|  \n|`/`|Match a slash mark.|  \n  \n The <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType> method expands the `${proto}${port}` replacement sequence, which concatenates the value of the two named groups captured in the regular expression pattern. It is a convenient alternative to explicitly concatenating the strings retrieved from the collection object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.  \n  \n The example uses the <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType> method with two substitutions, `${proto}` and `${port}`, to include the captured groups in the output string. You can retrieve the captured groups from the match's <xref:System.Text.RegularExpressions.GroupCollection> object instead, as the following code shows.  \n  \n [!code-csharp[RegularExpressions.Examples.Protocol#2](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/cs/example2.cs#2)]\n [!code-vb[RegularExpressions.Examples.Protocol#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/vb/example2.vb#2)]  \n  \n## See also\n\n- [.NET Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)\n","nodes":[{"pos":[4,567],"embed":true,"restype":"x-metadata","content":"title: \"How to: Extract a Protocol and Port Number from a URL\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"searching with regular expressions, examples\"\n  - \"parsing text with regular expressions, examples\"\n  - \"regular expressions, examples\"\n  - \".NET Framework regular expressions, examples\"\n  - \"regular expressions [.NET Framework], examples\"\n  - \"pattern-matching with regular expressions, examples\"\nms.assetid: ab7f62b3-6d2c-4efb-8ac6-28600df5fd5c\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Extract a Protocol and Port Number from a URL","nodes":[{"pos":[0,53],"content":"How to: Extract a Protocol and Port Number from a URL","nodes":[{"content":"How to: Extract a Protocol and Port Number from a URL","pos":[0,53]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[574,627],"content":"How to: Extract a Protocol and Port Number from a URL","linkify":"How to: Extract a Protocol and Port Number from a URL","nodes":[{"content":"How to: Extract a Protocol and Port Number from a URL","pos":[0,53]}]},{"content":"The following example extracts a protocol and port number from a URL.","pos":[628,697]},{"pos":[706,713],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[717,899],"content":"The example uses the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType&gt;</ph> method to return the protocol followed by a colon followed by the port number.","source":"The example uses the <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType> method to return the protocol followed by a colon followed by the port number."},{"pos":[1230,1353],"content":"The regular expression pattern <ph id=\"ph1\">`^(?&lt;proto&gt;\\w+)://[^/]+?(?&lt;port&gt;:\\d+)?/`</ph> can be interpreted as shown in the following table.","source":"The regular expression pattern `^(?<proto>\\w+)://[^/]+?(?<port>:\\d+)?/` can be interpreted as shown in the following table."},{"content":"Pattern","pos":[1360,1367]},{"content":"Description","pos":[1368,1379]},{"content":"Begin the match at the start of the string.","pos":[1424,1467]},{"content":"Match one or more word characters.","pos":[1488,1522]},{"content":"Name this group <ph id=\"ph1\">`proto`</ph>.","pos":[1523,1547],"source":" Name this group `proto`."},{"content":"Match a colon followed by two slash marks.","pos":[1558,1600]},{"content":"Match one or more occurrences (but as few as possible) of any character other than a slash mark.","pos":[1614,1710]},{"content":"Match zero or one occurrence of a colon followed by one or more digit characters.","pos":[1732,1813]},{"content":"Name this group <ph id=\"ph1\">`port`</ph>.","pos":[1814,1837],"source":" Name this group `port`."},{"content":"Match a slash mark.","pos":[1846,1865]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType&gt;</ph> method expands the <ph id=\"ph2\">`${proto}${port}`</ph> replacement sequence, which concatenates the value of the two named groups captured in the regular expression pattern.","pos":[1873,2115],"source":"The <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType> method expands the `${proto}${port}` replacement sequence, which concatenates the value of the two named groups captured in the regular expression pattern."},{"content":"It is a convenient alternative to explicitly concatenating the strings retrieved from the collection object returned by the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[2116,2332],"source":" It is a convenient alternative to explicitly concatenating the strings retrieved from the collection object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property."},{"content":"The example uses the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType&gt;</ph> method with two substitutions, <ph id=\"ph2\">`${proto}`</ph> and <ph id=\"ph3\">`${port}`</ph>, to include the captured groups in the output string.","pos":[2339,2552],"source":"The example uses the <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType> method with two substitutions, `${proto}` and `${port}`, to include the captured groups in the output string."},{"content":"You can retrieve the captured groups from the match's <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object instead, as the following code shows.","pos":[2553,2705],"source":" You can retrieve the captured groups from the match's <xref:System.Text.RegularExpressions.GroupCollection> object instead, as the following code shows."},{"pos":[3040,3048],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3052,3136],"content":"<bpt id=\"p1\">[</bpt>.NET Regular Expressions<ept id=\"p1\">](../../../docs/standard/base-types/regular-expressions.md)</ept>","source":"[.NET Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)"}]}