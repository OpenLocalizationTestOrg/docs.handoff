{"content":"---\ntitle: \"How to: Populate an XML Tree from the File System (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 34eec79e-7945-4ba8-9f74-d05bb8ec67f6\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Populate an XML Tree from the File System (Visual Basic)\nA common and useful application of XML trees is as a hierarchical name/value data store. You can populate an XML tree with hierarchical data, and then query it, transform it, and if necessary, serialize it. In this usage scenario, many of the XML specific semantics, such as namespaces and white space behavior, are not important. Instead, you are using the XML tree as a small, in memory, single user hierarchical database.  \n  \n## Example  \n The following example populates an XML tree from the local file system using recursion. It then queries the tree, calculating the total of the sizes of all files in the tree.  \n  \n```vb  \nModule Module1  \n    Function CreateFileSystemXmlTree(ByVal source As String) As XElement  \n        Dim di As DirectoryInfo = New DirectoryInfo(source)  \n        Return <Dir Name=<%= di.Name %>>  \n                   <%= From d In Directory.GetDirectories(source) _  \n                       Select CreateFileSystemXmlTree(d) %>  \n                   <%= From fi In di.GetFiles() _  \n                       Select <File>  \n                                  <Name><%= fi.Name %></Name>  \n                                  <Length><%= fi.Length %></Length>  \n                              </File> %>  \n               </Dir>  \n    End Function  \n  \n    Sub Main()  \n        Dim fileSystemTree As XElement = CreateFileSystemXmlTree(\"C:/Tmp\")  \n        Console.WriteLine(fileSystemTree)  \n        Console.WriteLine(\"------\")  \n        Dim totalFileSize As Long = _  \n            ( _  \n                From f In fileSystemTree...<File> _  \n                Select CLng(f.<Length>(0)) _  \n            ).Sum()  \n        Console.WriteLine(\"Total File Size:{0}\", totalFileSize)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces output similar to the following:  \n  \n```xml  \n<Dir Name=\"Tmp\">  \n  <Dir Name=\"ConsoleApplication1\">  \n    <Dir Name=\"bin\">  \n      <Dir Name=\"Debug\">  \n        <File>  \n          <Name>ConsoleApplication1.exe</Name>  \n          <Length>4608</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.pdb</Name>  \n          <Length>11776</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.vshost.exe</Name>  \n          <Length>9568</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.vshost.exe.manifest</Name>  \n          <Length>473</Length>  \n        </File>  \n      </Dir>  \n    </Dir>  \n    <Dir Name=\"obj\">  \n      <Dir Name=\"Debug\">  \n        <Dir Name=\"TempPE\" />  \n        <File>  \n          <Name>ConsoleApplication1.csproj.FileListAbsolute.txt</Name>  \n          <Length>322</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.exe</Name>  \n          <Length>4608</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.pdb</Name>  \n          <Length>11776</Length>  \n        </File>  \n      </Dir>  \n    </Dir>  \n    <Dir Name=\"Properties\">  \n      <File>  \n        <Name>AssemblyInfo.cs</Name>  \n        <Length>1454</Length>  \n      </File>  \n    </Dir>  \n    <File>  \n      <Name>ConsoleApplication1.csproj</Name>  \n      <Length>2546</Length>  \n    </File>  \n    <File>  \n      <Name>ConsoleApplication1.sln</Name>  \n      <Length>937</Length>  \n    </File>  \n    <File>  \n      <Name>ConsoleApplication1.suo</Name>  \n      <Length>10752</Length>  \n    </File>  \n    <File>  \n      <Name>Program.cs</Name>  \n      <Length>269</Length>  \n    </File>  \n  </Dir>  \n</Dir>  \n------  \nTotal File Size:59089  \n```  \n  \n## See Also  \n [Advanced Query Techniques (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)","nodes":[{"pos":[12,93],"content":"How to: Populate an XML Tree from the File System (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Populate an XML Tree from the File System (Visual Basic) | Microsoft Docs","pos":[0,81]}]},{"pos":[400,464],"content":"How to: Populate an XML Tree from the File System (Visual Basic)","linkify":"How to: Populate an XML Tree from the File System (Visual Basic)","nodes":[{"content":"How to: Populate an XML Tree from the File System (Visual Basic)","pos":[0,64]}]},{"content":"A common and useful application of XML trees is as a hierarchical name/value data store.","pos":[465,553]},{"content":"You can populate an XML tree with hierarchical data, and then query it, transform it, and if necessary, serialize it.","pos":[554,671]},{"content":"In this usage scenario, many of the XML specific semantics, such as namespaces and white space behavior, are not important.","pos":[672,795]},{"content":"Instead, you are using the XML tree as a small, in memory, single user hierarchical database.","pos":[796,889]},{"pos":[898,905],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example populates an XML tree from the local file system using recursion.","pos":[909,996]},{"content":"It then queries the tree, calculating the total of the sizes of all files in the tree.","pos":[997,1083]},{"content":"This example produces output similar to the following:","pos":[2200,2254]},{"pos":[3993,4001],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4005,4160],"content":"<bpt id=\"p1\">[</bpt>Advanced Query Techniques (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)</ept>","source":"[Advanced Query Techniques (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)"}]}