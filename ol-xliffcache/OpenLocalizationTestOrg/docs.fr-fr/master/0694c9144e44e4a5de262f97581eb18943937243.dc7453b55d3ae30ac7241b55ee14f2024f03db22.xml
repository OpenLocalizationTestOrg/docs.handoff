{"content":"---\ntitle: \"Finding the Default Paragraph Style (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 9d094a4a-ec8c-41b0-b7ab-a3deb2a01d45\n---\n# Finding the Default Paragraph Style (Visual Basic)\nThe first task in the Manipulating Information in a WordprocessingML Document tutorial is to find the default style of paragraphs in the document.  \n  \n## Example  \n  \n### Description  \n The following example opens an Office Open XML WordprocessingML document, finds the document and style parts of the package, and then executes a query that finds the default style name. For information about Office Open XML document packages, and the parts they consist of, see [Details of Office Open XML WordprocessingML Documents (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/details-of-office-open-xml-wordprocessingml-documents.md).  \n  \n The query finds a node named `w:style` that has an attribute named `w:type` with a value of \"paragraph\", and also has an attribute named `w:default` with a value of \"1\". Because there will be only one XML node with these attributes, the query uses the <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> operator to convert a collection to a singleton. It then gets the value of the attribute with the name `w:styleId`.  \n  \n This example uses classes from the WindowsBase assembly. It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace.  \n  \n### Code  \n  \n```vb  \nImports <xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\">  \n  \nModule Module1  \n  \n    Sub Main()  \n  \n        Const fileName As String = \"SampleDoc.docx\"  \n  \n        Const documentRelationshipType As String = _  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"  \n        Const stylesRelationshipType As String = _  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\"  \n  \n        Dim xDoc As XDocument = Nothing  \n        Dim styleDoc As XDocument = Nothing  \n  \n        Using wdPackage As Package = Package.Open(fileName, FileMode.Open, FileAccess.Read)  \n            Dim docPackageRelationship As PackageRelationship = _  \n              wdPackage.GetRelationshipsByType(documentRelationshipType).FirstOrDefault()  \n            If docPackageRelationship IsNot Nothing Then  \n                Dim documentUri As Uri = PackUriHelper.ResolvePartUri(New Uri(\"/\", UriKind.Relative), _  \n                  docPackageRelationship.TargetUri)  \n                Dim documentPart As PackagePart = wdPackage.GetPart(documentUri)  \n  \n                ' Load the document XML in the part into an XDocument instance.  \n                xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()))  \n  \n                ' Find the styles part. There will only be one.  \n                Dim styleRelation As PackageRelationship = _  \n                  documentPart.GetRelationshipsByType(stylesRelationshipType).FirstOrDefault()  \n                If styleRelation IsNot Nothing Then  \n                    Dim styleUri As Uri = _  \n                      PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri)  \n                    Dim stylePart As PackagePart = wdPackage.GetPart(styleUri)  \n  \n                    ' Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()))  \n                End If  \n            End If  \n        End Using  \n  \n        ' The following query finds all the paragraphs that have the default style.  \n        Dim defParas As IEnumerable(Of XElement) = _  \n            From style In styleDoc.Root.<w:style> _  \n            Where style.@w:type.Equals(\"paragraph\") And _  \n                   style.@w:default.Equals(\"1\") _  \n            Select style  \n        ' Then find the style of the first.  \n        Dim defaultStyle As String = defParas.First().@w:styleId  \n  \n        Console.WriteLine(\"The default style is: \" & defaultStyle)  \n    End Sub  \nEnd Module  \n```  \n  \n### Comments  \n This example produces the following output:  \n  \n```  \nThe default style is: Normal  \n```  \n  \n## Next Steps  \n In the next example, you'll create a similar query that finds all the paragraphs in a document and their styles:  \n  \n-   [Retrieving the Paragraphs and Their Styles (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/retrieving-the-paragraphs-and-their-styles.md)  \n  \n## See also\n\n- [Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)\n","nodes":[{"pos":[4,132],"embed":true,"restype":"x-metadata","content":"title: \"Finding the Default Paragraph Style (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 9d094a4a-ec8c-41b0-b7ab-a3deb2a01d45","nodes":[{"content":"Finding the Default Paragraph Style (Visual Basic)","nodes":[{"pos":[0,50],"content":"Finding the Default Paragraph Style (Visual Basic)","nodes":[{"content":"Finding the Default Paragraph Style (Visual Basic)","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[139,189],"content":"Finding the Default Paragraph Style (Visual Basic)","linkify":"Finding the Default Paragraph Style (Visual Basic)","nodes":[{"content":"Finding the Default Paragraph Style (Visual Basic)","pos":[0,50]}]},{"content":"The first task in the Manipulating Information in a WordprocessingML Document tutorial is to find the default style of paragraphs in the document.","pos":[190,336]},{"pos":[345,352],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[362,373],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"The following example opens an Office Open XML WordprocessingML document, finds the document and style parts of the package, and then executes a query that finds the default style name.","pos":[377,562]},{"content":"For information about Office Open XML document packages, and the parts they consist of, see <bpt id=\"p1\">[</bpt>Details of Office Open XML WordprocessingML Documents (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/details-of-office-open-xml-wordprocessingml-documents.md)</ept>.","pos":[563,841],"source":" For information about Office Open XML document packages, and the parts they consist of, see [Details of Office Open XML WordprocessingML Documents (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/details-of-office-open-xml-wordprocessingml-documents.md)."},{"content":"The query finds a node named <ph id=\"ph1\">`w:style`</ph> that has an attribute named <ph id=\"ph2\">`w:type`</ph> with a value of \"paragraph\", and also has an attribute named <ph id=\"ph3\">`w:default`</ph> with a value of \"1\".","pos":[848,1017],"source":"The query finds a node named `w:style` that has an attribute named `w:type` with a value of \"paragraph\", and also has an attribute named `w:default` with a value of \"1\"."},{"content":"Because there will be only one XML node with these attributes, the query uses the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph> operator to convert a collection to a singleton.","pos":[1018,1216],"source":" Because there will be only one XML node with these attributes, the query uses the <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> operator to convert a collection to a singleton."},{"content":"It then gets the value of the attribute with the name <ph id=\"ph1\">`w:styleId`</ph>.","pos":[1217,1283],"source":" It then gets the value of the attribute with the name `w:styleId`."},{"content":"This example uses classes from the WindowsBase assembly.","pos":[1290,1346]},{"content":"It uses types in the <ph id=\"ph1\">&lt;xref:System.IO.Packaging?displayProperty=nameWithType&gt;</ph> namespace.","pos":[1347,1434],"source":" It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace."},{"pos":[1444,1448],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[4062,4070],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"This example produces the following output:","pos":[4074,4117]},{"pos":[4172,4182],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"content":"In the next example, you'll create a similar query that finds all the paragraphs in a document and their styles:","pos":[4186,4298]},{"pos":[4308,4471],"content":"<bpt id=\"p1\">[</bpt>Retrieving the Paragraphs and Their Styles (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/retrieving-the-paragraphs-and-their-styles.md)</ept>","source":"[Retrieving the Paragraphs and Their Styles (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/retrieving-the-paragraphs-and-their-styles.md)"},{"pos":[4480,4488],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4492,4692],"content":"<bpt id=\"p1\">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept>","source":"[Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)"}]}