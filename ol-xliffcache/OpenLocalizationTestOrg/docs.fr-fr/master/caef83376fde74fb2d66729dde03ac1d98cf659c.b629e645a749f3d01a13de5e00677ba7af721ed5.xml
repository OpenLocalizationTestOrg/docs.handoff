{"content":"---\ntitle: \"How to: Add Controls Without a User Interface to Windows Forms | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"NonVisualSelection\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"invisible controls\"\n  - \"Windows Forms controls, adding to form\"\n  - \"controls [Windows Forms], nonvisual\"\n  - \"Windows Forms controls, nonvisual\"\n  - \"nonvisual controls\"\nms.assetid: 52134d9c-cff6-4eed-8e2b-3d5eb3bd494e\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Add Controls Without a User Interface to Windows Forms\nA nonvisual control (or component) provides functionality to your application. Unlike other controls, components do not provide a user interface to the user and thus do not need to be displayed on the Windows Forms Designer surface. When a component is added to a form, the Windows Forms Designer displays a resizable tray at the bottom of the form where all components are displayed. Once a control has been added to the component tray, you can select the component and set its properties as you would any other control on the form.  \n  \n> [!NOTE]\n>  The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).  \n  \n### To add a component to a Windows Form  \n  \n1.  Open the form. For details, see [How to: Display Windows Forms in the Designer](http://msdn.microsoft.com/en-us/bf3f1e5b-ea07-4529-85c6-6af3ded0cec5).  \n  \n2.  In the **Toolbox**, click a component and drag it to your form.  \n  \n     Your component appears in the component tray.  \n  \n Furthermore, components can be added to a form at run time. This is a common scenario, especially because components do not have a visual expression, unlike controls that have a user interface. In the example below, a <xref:System.Windows.Forms.Timer> component is added at run time. (Note that [!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)] contains a number of different timers; in this case, use a Windows Forms <xref:System.Windows.Forms.Timer> component. For more information about the different timers in [!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)], see [Introduction to Server-Based Timers](http://msdn.microsoft.com/en-us/adc0bc0a-a519-4812-bafc-fb9d1a5801fc).)  \n  \n> [!CAUTION]\n>  Components often have control-specific properties that must be set for the component to function effectively. In the case of the <xref:System.Windows.Forms.Timer> component below, you set the `Interval` property. Be sure, when adding components to your project, that you set the properties necessary for that component.  \n  \n#### To add a component to a Windows Form programmatically  \n  \n1.  Create an instance of the <xref:System.Windows.Forms.Timer> class in code.  \n  \n2.  Set the `Interval` property to determine the time between ticks of the timer.  \n  \n3.  Configure any other necessary properties for your component.  \n  \n     The following code shows the creation of a <xref:System.Windows.Forms.Timer> with its `Interval` property set.  \n  \n    ```vb  \n    Public Sub CreateTimer()  \n       Dim timerKeepTrack As New System.Windows.Forms.Timer  \n       timerKeepTrack.Interval = 1000  \n    End Sub  \n  \n    ```  \n  \n    ```csharp  \n    public void createTimer()  \n    {  \n       System.Windows.Forms.Timer timerKeepTrack = new  \n           System.Windows.Forms.Timer();  \n       timerKeepTrack.Interval = 1000;  \n    }  \n  \n    ```  \n  \n    ```cpp  \n    public:  \n       void createTimer()  \n       {  \n          System::Windows::Forms::Timer^ timerKeepTrack = gcnew  \n             System::Windows::Forms::Timer();  \n          timerKeepTrack->Interval = 1000;  \n       }  \n    ```  \n  \n    > [!IMPORTANT]\n    >  You might expose your local computer to a security risk through the network by referencing a malicious UserControl. This would only be a concern in the case of a malicious person creating a damaging custom control, followed by you mistakenly adding it to your project.  \n  \n## See Also  \n [Windows Forms Controls](../../../../docs/framework/winforms/controls/index.md)   \n [How to: Add Controls to Windows Forms](../../../../docs/framework/winforms/controls/how-to-add-controls-to-windows-forms.md)   \n [How to: Add ActiveX Controls to Windows Forms](../../../../docs/framework/winforms/controls/how-to-add-activex-controls-to-windows-forms.md)   \n [How to: Copy Controls Between Windows Forms](../../../../docs/framework/winforms/controls/how-to-copy-controls-between-windows-forms.md)   \n [Putting Controls on Windows Forms](../../../../docs/framework/winforms/controls/putting-controls-on-windows-forms.md)   \n [Labeling Individual Windows Forms Controls and Providing Shortcuts to Them](../../../../docs/framework/winforms/controls/labeling-individual-windows-forms-controls-and-providing-shortcuts-to-them.md)   \n [Controls to Use on Windows Forms](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md)   \n [Windows Forms Controls by Function](../../../../docs/framework/winforms/controls/windows-forms-controls-by-function.md)","nodes":[{"pos":[12,91],"content":"How to: Add Controls Without a User Interface to Windows Forms | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Add Controls Without a User Interface to Windows Forms | Microsoft Docs","pos":[0,79]}]},{"pos":[667,729],"content":"How to: Add Controls Without a User Interface to Windows Forms","linkify":"How to: Add Controls Without a User Interface to Windows Forms","nodes":[{"content":"How to: Add Controls Without a User Interface to Windows Forms","pos":[0,62]}]},{"content":"A nonvisual control (or component) provides functionality to your application.","pos":[730,808]},{"content":"Unlike other controls, components do not provide a user interface to the user and thus do not need to be displayed on the Windows Forms Designer surface.","pos":[809,962]},{"content":"When a component is added to a form, the Windows Forms Designer displays a resizable tray at the bottom of the form where all components are displayed.","pos":[963,1114]},{"content":"Once a control has been added to the component tray, you can select the component and set its properties as you would any other control on the form.","pos":[1115,1263]},{"pos":[1271,1647],"content":"[!NOTE]\n The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).","leadings":["","> "],"nodes":[{"content":" The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).","pos":[8,374],"nodes":[{"content":"The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition.","pos":[1,131]},{"content":"To change your settings, choose <bpt id=\"p1\">**</bpt>Import and Export Settings<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept> menu.","pos":[132,217],"source":" To change your settings, choose **Import and Export Settings** on the **Tools** menu."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Customizing Development Settings in Visual Studio<ept id=\"p1\">](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)</ept>.","pos":[218,366],"source":" For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)."}]}]},{"pos":[1657,1693],"content":"To add a component to a Windows Form","linkify":"To add a component to a Windows Form","nodes":[{"content":"To add a component to a Windows Form","pos":[0,36]}]},{"content":"Open the form.","pos":[1703,1717]},{"content":"For details, see <bpt id=\"p1\">[</bpt>How to: Display Windows Forms in the Designer<ept id=\"p1\">](http://msdn.microsoft.com/en-us/bf3f1e5b-ea07-4529-85c6-6af3ded0cec5)</ept>.","pos":[1718,1853],"source":" For details, see [How to: Display Windows Forms in the Designer](http://msdn.microsoft.com/en-us/bf3f1e5b-ea07-4529-85c6-6af3ded0cec5)."},{"pos":[1863,1926],"content":"In the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, click a component and drag it to your form.","source":"In the **Toolbox**, click a component and drag it to your form."},{"content":"Your component appears in the component tray.","pos":[1937,1982]},{"content":"Furthermore, components can be added to a form at run time.","pos":[1989,2048]},{"content":"This is a common scenario, especially because components do not have a visual expression, unlike controls that have a user interface.","pos":[2049,2182]},{"content":"In the example below, a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component is added at run time.","pos":[2183,2272],"source":" In the example below, a <xref:System.Windows.Forms.Timer> component is added at run time."},{"content":"(Note that <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)]</ph> contains a number of different timers; in this case, use a Windows Forms <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component.","pos":[2273,2455],"source":" (Note that [!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)] contains a number of different timers; in this case, use a Windows Forms <xref:System.Windows.Forms.Timer> component."},{"content":"For more information about the different timers in <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Introduction to Server-Based Timers<ept id=\"p1\">](http://msdn.microsoft.com/en-us/adc0bc0a-a519-4812-bafc-fb9d1a5801fc)</ept>.)","pos":[2456,2675],"source":" For more information about the different timers in [!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)], see [Introduction to Server-Based Timers](http://msdn.microsoft.com/en-us/adc0bc0a-a519-4812-bafc-fb9d1a5801fc).)"},{"pos":[2683,3016],"content":"[!CAUTION]\n Components often have control-specific properties that must be set for the component to function effectively. In the case of the <xref:System.Windows.Forms.Timer> component below, you set the `Interval` property. Be sure, when adding components to your project, that you set the properties necessary for that component.","leadings":["","> "],"nodes":[{"content":" Components often have control-specific properties that must be set for the component to function effectively. In the case of the <xref:System.Windows.Forms.Timer> component below, you set the `Interval` property. Be sure, when adding components to your project, that you set the properties necessary for that component.","pos":[11,331],"nodes":[{"content":"Components often have control-specific properties that must be set for the component to function effectively.","pos":[1,110]},{"content":"In the case of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component below, you set the <ph id=\"ph2\">`Interval`</ph> property.","pos":[111,213],"source":" In the case of the <xref:System.Windows.Forms.Timer> component below, you set the `Interval` property."},{"content":"Be sure, when adding components to your project, that you set the properties necessary for that component.","pos":[214,320]}]}]},{"pos":[3027,3080],"content":"To add a component to a Windows Form programmatically","linkify":"To add a component to a Windows Form programmatically","nodes":[{"content":"To add a component to a Windows Form programmatically","pos":[0,53]}]},{"content":"Create an instance of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> class in code.","pos":[3090,3164],"source":"Create an instance of the <xref:System.Windows.Forms.Timer> class in code."},{"pos":[3174,3251],"content":"Set the <ph id=\"ph1\">`Interval`</ph> property to determine the time between ticks of the timer.","source":"Set the `Interval` property to determine the time between ticks of the timer."},{"content":"Configure any other necessary properties for your component.","pos":[3261,3321]},{"pos":[3332,3442],"content":"The following code shows the creation of a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> with its <ph id=\"ph2\">`Interval`</ph> property set.","source":"The following code shows the creation of a <xref:System.Windows.Forms.Timer> with its `Interval` property set."},{"pos":[4099,4387],"content":"[!IMPORTANT]\nYou might expose your local computer to a security risk through the network by referencing a malicious UserControl. This would only be a concern in the case of a malicious person creating a damaging custom control, followed by you mistakenly adding it to your project.","leadings":["","    >  "],"nodes":[{"content":"You might expose your local computer to a security risk through the network by referencing a malicious UserControl. This would only be a concern in the case of a malicious person creating a damaging custom control, followed by you mistakenly adding it to your project.","pos":[13,281],"nodes":[{"content":"You might expose your local computer to a security risk through the network by referencing a malicious UserControl.","pos":[0,115]},{"content":"This would only be a concern in the case of a malicious person creating a damaging custom control, followed by you mistakenly adding it to your project.","pos":[116,268]}]}]},{"pos":[4396,4404],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Windows Forms Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4408,4488],"source":"[Windows Forms Controls](../../../../docs/framework/winforms/controls/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Add Controls to Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-add-controls-to-windows-forms.md)</ept><ph id=\"ph1\"> </ph>","pos":[4491,4618],"source":" [How to: Add Controls to Windows Forms](../../../../docs/framework/winforms/controls/how-to-add-controls-to-windows-forms.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Add ActiveX Controls to Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-add-activex-controls-to-windows-forms.md)</ept><ph id=\"ph1\"> </ph>","pos":[4621,4764],"source":" [How to: Add ActiveX Controls to Windows Forms](../../../../docs/framework/winforms/controls/how-to-add-activex-controls-to-windows-forms.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Copy Controls Between Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-copy-controls-between-windows-forms.md)</ept><ph id=\"ph1\"> </ph>","pos":[4767,4906],"source":" [How to: Copy Controls Between Windows Forms](../../../../docs/framework/winforms/controls/how-to-copy-controls-between-windows-forms.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Putting Controls on Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/controls/putting-controls-on-windows-forms.md)</ept><ph id=\"ph1\"> </ph>","pos":[4909,5029],"source":" [Putting Controls on Windows Forms](../../../../docs/framework/winforms/controls/putting-controls-on-windows-forms.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Labeling Individual Windows Forms Controls and Providing Shortcuts to Them<ept id=\"p1\">](../../../../docs/framework/winforms/controls/labeling-individual-windows-forms-controls-and-providing-shortcuts-to-them.md)</ept><ph id=\"ph1\"> </ph>","pos":[5032,5234],"source":" [Labeling Individual Windows Forms Controls and Providing Shortcuts to Them](../../../../docs/framework/winforms/controls/labeling-individual-windows-forms-controls-and-providing-shortcuts-to-them.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Controls to Use on Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md)</ept><ph id=\"ph1\"> </ph>","pos":[5237,5355],"source":" [Controls to Use on Windows Forms](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Windows Forms Controls by Function<ept id=\"p1\">](../../../../docs/framework/winforms/controls/windows-forms-controls-by-function.md)</ept>","pos":[5358,5479],"source":" [Windows Forms Controls by Function](../../../../docs/framework/winforms/controls/windows-forms-controls-by-function.md)"}]}