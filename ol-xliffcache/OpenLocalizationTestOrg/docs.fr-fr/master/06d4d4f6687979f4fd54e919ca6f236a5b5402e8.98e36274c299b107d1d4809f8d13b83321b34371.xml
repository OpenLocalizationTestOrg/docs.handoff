{"content":"---\ntitle: \"How to: Create a workflow service that consumes an existing service contract\"\nms.date: \"03/30/2017\"\nms.assetid: 11d11b59-acc4-48bf-8e4b-e97b516aa0a9\n---\n# How to: Create a workflow service that consumes an existing service contract\n[!INCLUDE[net_v45](../../../includes/net-v45-md.md)] features better integration between web services and workflows in the form of contract-first workflow development. The contract-first workflow development tool allows you to design the contract in code first. The tool then automatically generates an activity template in the toolbox for the operations in the contract.  \n  \n> [!NOTE]\n>  This topic provides step-by-step guidance on creating a contract-first workflow service. For more information about contract-first workflow service development, see [Contract First Workflow Service Development](contract-first-workflow-service-development.md).  \n  \n### Creating the workflow project  \n  \n1.  In Visual Studio, select **File**, **New Project**. Select the **WCF** node under the **C#** node in the **Templates** tree, and select the **WCF Workflow Service Application** template.  \n  \n2.  Name the new project `ContractFirst` and click **Ok**.  \n  \n### Creating the service contract  \n  \n1.  Right-click the project in **Solution Explorer** and select **Add**, **New Item…**. Select the **Code** node on the left, and the **Class** template on the right. Name the new class `IBookService` and click **Ok**.  \n  \n2.  In the top of the code window that appears, add a Using statement to `System.Servicemodel`.  \n  \n    ```  \n    using System.ServiceModel;  \n    ```  \n  \n3.  Change the sample class definition to the following interface definition.  \n  \n    ```  \n    [ServiceContract]  \n        public interface IBookService  \n        {  \n            [OperationContract]  \n            void Buy(string bookName);  \n  \n            [OperationContract(IsOneWay=true)]  \n            void Checkout();  \n        }  \n    ```  \n  \n4.  Build the project by pressing **Ctrl+Shift+B**.  \n  \n### Importing the service contract  \n  \n1.  Right-click the project in **Solution Explorer** and select **Import Service Contract**. Under **\\<Current Project>**, open all sub-nodes and select **IBookService**. Click **OK**.  \n  \n2.  A dialog will open, alerting you that the operation completed successfully, and that the generated activities will appear in the toolbox after you build the project. Click **OK**.  \n  \n3.  Build the project by pressing **Ctrl+Shift+B**, so that the imported activities will appear in the toolbox.  \n  \n4.  In **Solution Explorer**, open Service1.xamlx. The workflow service will appear in the designer.  \n  \n5.  Select the **Sequence** activity. In the Properties window, click the **…** button in the **ImplementedContract** property. In the **Type Collection Editor** window that appears, click the **Type** dropdown, and select the **Browse for Types…** entry. In the **Browse and Select a .NET Type** dialog, under **\\<Current Project>**, open all sub-nodes and select **IBookService**. Click **OK**. In the **Type Collection Editor** dialog, click **OK**.  \n  \n6.  Select and delete the **ReceiveRequest** and **SendResponse** activities.  \n  \n7.  From the toolbox, drag a **Buy_ReceiveAndSendReply** and a **Checkout_Receive** activity onto the **Sequential Service** activity.\n","nodes":[{"pos":[4,160],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a workflow service that consumes an existing service contract\"\nms.date: \"03/30/2017\"\nms.assetid: 11d11b59-acc4-48bf-8e4b-e97b516aa0a9","nodes":[{"content":"How to: Create a workflow service that consumes an existing service contract","nodes":[{"pos":[0,76],"content":"How to: Create a workflow service that consumes an existing service contract","nodes":[{"content":"How to: Create a workflow service that consumes an existing service contract","pos":[0,76]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[167,243],"content":"How to: Create a workflow service that consumes an existing service contract","linkify":"How to: Create a workflow service that consumes an existing service contract","nodes":[{"content":"How to: Create a workflow service that consumes an existing service contract","pos":[0,76]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> features better integration between web services and workflows in the form of contract-first workflow development.","pos":[244,411],"source":"[!INCLUDE[net_v45](../../../includes/net-v45-md.md)] features better integration between web services and workflows in the form of contract-first workflow development."},{"content":"The contract-first workflow development tool allows you to design the contract in code first.","pos":[412,505]},{"content":"The tool then automatically generates an activity template in the toolbox for the operations in the contract.","pos":[506,615]},{"pos":[623,893],"content":"[!NOTE]\n This topic provides step-by-step guidance on creating a contract-first workflow service. For more information about contract-first workflow service development, see [Contract First Workflow Service Development](contract-first-workflow-service-development.md).","leadings":["","> "],"nodes":[{"content":"This topic provides step-by-step guidance on creating a contract-first workflow service. For more information about contract-first workflow service development, see [Contract First Workflow Service Development](contract-first-workflow-service-development.md).","pos":[9,268],"nodes":[{"content":"This topic provides step-by-step guidance on creating a contract-first workflow service.","pos":[0,88]},{"content":"For more information about contract-first workflow service development, see <bpt id=\"p1\">[</bpt>Contract First Workflow Service Development<ept id=\"p1\">](contract-first-workflow-service-development.md)</ept>.","pos":[89,259],"source":" For more information about contract-first workflow service development, see [Contract First Workflow Service Development](contract-first-workflow-service-development.md)."}]}]},{"pos":[903,932],"content":"Creating the workflow project","linkify":"Creating the workflow project","nodes":[{"content":"Creating the workflow project","pos":[0,29]}]},{"content":"In Visual Studio, select <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>New Project<ept id=\"p2\">**</ept>.","pos":[942,993],"source":"In Visual Studio, select **File**, **New Project**."},{"content":"Select the <bpt id=\"p1\">**</bpt>WCF<ept id=\"p1\">**</ept> node under the <bpt id=\"p2\">**</bpt>C#<ept id=\"p2\">**</ept> node in the <bpt id=\"p3\">**</bpt>Templates<ept id=\"p3\">**</ept> tree, and select the <bpt id=\"p4\">**</bpt>WCF Workflow Service Application<ept id=\"p4\">**</ept> template.","pos":[994,1128],"source":" Select the **WCF** node under the **C#** node in the **Templates** tree, and select the **WCF Workflow Service Application** template."},{"pos":[1138,1192],"content":"Name the new project <ph id=\"ph1\">`ContractFirst`</ph> and click <bpt id=\"p1\">**</bpt>Ok<ept id=\"p1\">**</ept>.","source":"Name the new project `ContractFirst` and click **Ok**."},{"pos":[1202,1231],"content":"Creating the service contract","linkify":"Creating the service contract","nodes":[{"content":"Creating the service contract","pos":[0,29]}]},{"content":"Right-click the project in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>New Item…<ept id=\"p3\">**</ept>.","pos":[1241,1324],"source":"Right-click the project in **Solution Explorer** and select **Add**, **New Item…**."},{"content":"Select the <bpt id=\"p1\">**</bpt>Code<ept id=\"p1\">**</ept> node on the left, and the <bpt id=\"p2\">**</bpt>Class<ept id=\"p2\">**</ept> template on the right.","pos":[1325,1403],"source":" Select the **Code** node on the left, and the **Class** template on the right."},{"content":"Name the new class <ph id=\"ph1\">`IBookService`</ph> and click <bpt id=\"p1\">**</bpt>Ok<ept id=\"p1\">**</ept>.","pos":[1404,1455],"source":" Name the new class `IBookService` and click **Ok**."},{"pos":[1465,1556],"content":"In the top of the code window that appears, add a Using statement to <ph id=\"ph1\">`System.Servicemodel`</ph>.","source":"In the top of the code window that appears, add a Using statement to `System.Servicemodel`."},{"content":"Change the sample class definition to the following interface definition.","pos":[1622,1695]},{"pos":[1974,2021],"content":"Build the project by pressing <bpt id=\"p1\">**</bpt>Ctrl+Shift+B<ept id=\"p1\">**</ept>.","source":"Build the project by pressing **Ctrl+Shift+B**."},{"pos":[2031,2061],"content":"Importing the service contract","linkify":"Importing the service contract","nodes":[{"content":"Importing the service contract","pos":[0,30]}]},{"content":"Right-click the project in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Import Service Contract<ept id=\"p2\">**</ept>.","pos":[2071,2159],"source":"Right-click the project in **Solution Explorer** and select **Import Service Contract**."},{"content":"Under <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>Current Project&gt;<ept id=\"p1\">**</ept>, open all sub-nodes and select <bpt id=\"p2\">**</bpt>IBookService<ept id=\"p2\">**</ept>.","pos":[2160,2237],"source":" Under **\\<Current Project>**, open all sub-nodes and select **IBookService**."},{"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[2238,2251],"source":" Click **OK**."},{"content":"A dialog will open, alerting you that the operation completed successfully, and that the generated activities will appear in the toolbox after you build the project.","pos":[2261,2426]},{"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[2427,2440],"source":" Click **OK**."},{"pos":[2450,2557],"content":"Build the project by pressing <bpt id=\"p1\">**</bpt>Ctrl+Shift+B<ept id=\"p1\">**</ept>, so that the imported activities will appear in the toolbox.","source":"Build the project by pressing **Ctrl+Shift+B**, so that the imported activities will appear in the toolbox."},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, open Service1.xamlx.","pos":[2567,2613],"source":"In **Solution Explorer**, open Service1.xamlx."},{"content":"The workflow service will appear in the designer.","pos":[2614,2663]},{"content":"Select the <bpt id=\"p1\">**</bpt>Sequence<ept id=\"p1\">**</ept> activity.","pos":[2673,2706],"source":"Select the **Sequence** activity."},{"content":"In the Properties window, click the <bpt id=\"p1\">**</bpt>…<ept id=\"p1\">**</ept>","pos":[2707,2748],"source":" In the Properties window, click the **…**"},{"content":"button in the <bpt id=\"p1\">**</bpt>ImplementedContract<ept id=\"p1\">**</ept> property.","pos":[2749,2796],"source":" button in the **ImplementedContract** property."},{"content":"In the <bpt id=\"p1\">**</bpt>Type Collection Editor<ept id=\"p1\">**</ept> window that appears, click the <bpt id=\"p2\">**</bpt>Type<ept id=\"p2\">**</ept> dropdown, and select the <bpt id=\"p3\">**</bpt>Browse for Types…<ept id=\"p3\">**</ept>","pos":[2797,2917],"source":" In the **Type Collection Editor** window that appears, click the **Type** dropdown, and select the **Browse for Types…**"},{"content":"entry.","pos":[2918,2924]},{"content":"In the <bpt id=\"p1\">**</bpt>Browse and Select a .NET Type<ept id=\"p1\">**</ept> dialog, under <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\&lt;</ph>Current Project&gt;<ept id=\"p2\">**</ept>, open all sub-nodes and select <bpt id=\"p3\">**</bpt>IBookService<ept id=\"p3\">**</ept>.","pos":[2925,3051],"source":" In the **Browse and Select a .NET Type** dialog, under **\\<Current Project>**, open all sub-nodes and select **IBookService**."},{"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[3052,3065],"source":" Click **OK**."},{"content":"In the <bpt id=\"p1\">**</bpt>Type Collection Editor<ept id=\"p1\">**</ept> dialog, click <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","pos":[3066,3121],"source":" In the **Type Collection Editor** dialog, click **OK**."},{"pos":[3131,3204],"content":"Select and delete the <bpt id=\"p1\">**</bpt>ReceiveRequest<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>SendResponse<ept id=\"p2\">**</ept> activities.","source":"Select and delete the **ReceiveRequest** and **SendResponse** activities."},{"pos":[3214,3344],"content":"From the toolbox, drag a <bpt id=\"p1\">**</bpt>Buy_ReceiveAndSendReply<ept id=\"p1\">**</ept> and a <bpt id=\"p2\">**</bpt>Checkout_Receive<ept id=\"p2\">**</ept> activity onto the <bpt id=\"p3\">**</bpt>Sequential Service<ept id=\"p3\">**</ept> activity.","source":"From the toolbox, drag a **Buy_ReceiveAndSendReply** and a **Checkout_Receive** activity onto the **Sequential Service** activity."}]}