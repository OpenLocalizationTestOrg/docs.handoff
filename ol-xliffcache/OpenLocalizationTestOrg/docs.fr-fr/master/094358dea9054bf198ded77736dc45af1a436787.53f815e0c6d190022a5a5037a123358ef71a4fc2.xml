{"content":"---\ntitle: \"where (generic type constraint) - C# Reference\"\nms.custom: seodec18\n\nms.date: 04/12/2018\nf1_keywords: \n  - \"whereconstraint\"\n  - \"whereconstraint_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"where (generic type constraint) [C#]\"\n---\n# where (generic type constraint) (C# Reference)\n\nThe `where` clause in a generic definition specifies constraints on the types that are used as arguments for type parameters in a generic type, method, delegate, or local function. Constraints can specify interfaces, base classes, or require a generic type to be a reference, value or unmanaged type. They declare capabilities that the type argument must possess.\n\nFor example, you can declare a generic class, `MyGenericClass`, such that the type parameter `T` implements the <xref:System.IComparable%601> interface:\n\n[!code-csharp[using an interface constraint](../../../../samples/snippets/csharp/keywords/GenericWhereConstraints.cs#1)]\n\n> [!NOTE]\n> For more information on the where clause in a query expression, see [where clause](where-clause.md).\n\nThe `where` clause can also include a base class constraint. The base class constraint states that a type to be used as a type argument for that generic type has the specified class as a base class (or is that base class) to be used as a type argument for that generic type. If the base class constraint is used, it must appear before any other constraints on that type parameter. Some types are disallowed as a base class constraint: <xref:System.Object>, <xref:System.Array>, and <xref:System.ValueType>. Prior to C# 7.3, <xref:System.Enum>, <xref:System.Delegate>, and <xref:System.MulticastDelegate> were also disallowed as base class constraints. The following example shows the types that can now be specified as a base class:\n\n[!code-csharp[using an interface constraint](../../../../samples/snippets/csharp/keywords/GenericWhereConstraints.cs#2)]\n\nThe `where` clause can specify that the type is a `class` or a `struct`. The `struct` constraint removes the need to specify a base class constraint of `System.ValueType`. The `System.ValueType` type may not be used as a base class constraint. The following example shows both the `class` and `struct` constraints:\n\n[!code-csharp[using the class and struct constraints](../../../../samples/snippets/csharp/keywords/GenericWhereConstraints.cs#3)]\n\nThe `where` clause may also include an `unmanaged` constraint. The `unmanaged` constraint limits the type parameter to types known as **unmanaged types**. An **unmanaged type** is a type that isn't a reference type and doesn't contain reference type fields at any level of nesting. The `unmanaged` constraint makes it easier to write low-level interop code in C#. This constraint enables reusable routines across all unmanaged types. The `unmanaged` constraint can't be combined with the `class` or `struct` constraint. The `unmanaged` constraint enforces that the type must be a `struct`:\n\n[!code-csharp[using the unmanaged constraint](../../../../samples/snippets/csharp/keywords/GenericWhereConstraints.cs#4)]\n\nThe `where` clause may also include a constructor constraint, `new()`. That constraint makes it possible to create an instance of a type parameter using the `new` operator. The [new() Constraint](new-constraint.md) lets the compiler know that any type argument supplied must have an accessible parameterless--or default-- constructor. For example:\n\n[!code-csharp[using the new constraint](../../../../samples/snippets/csharp/keywords/GenericWhereConstraints.cs#5)]\n\nThe `new()` constraint appears last in the `where` clause. The `new()` constraint can't be combined with the `struct` or `unmanaged` constraints. All types satisfying those constraints must have an accessible parameterless constructor, making the `new()` constraint redundant.\n\nWith multiple type parameters, use one `where` clause for each type parameter, for example:\n\n[!code-csharp[using multiple where constraints](../../../../samples/snippets/csharp/keywords/GenericWhereConstraints.cs#6)]\n\nYou can also attach constraints to type parameters of generic methods, as shown in the following example:\n\n[!code-csharp[where constraints with generic methods](../../../../samples/snippets/csharp/keywords/GenericWhereConstraints.cs#7)]\n\nNotice that the syntax to describe type parameter constraints on delegates is the same as that of methods:\n\n[!code-csharp[where constraints with generic methods](../../../../samples/snippets/csharp/keywords/GenericWhereConstraints.cs#8)]\n\nFor information on generic delegates, see [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md).\n\nFor details on the syntax and use of constraints, see [Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md).\n\n## C# language specification\n\n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md)\n- [new Constraint](../../../csharp/language-reference/keywords/new-constraint.md)\n- [Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)","nodes":[{"pos":[4,237],"embed":true,"restype":"x-metadata","content":"title: \"where (generic type constraint) - C# Reference\"\nms.custom: seodec18\n\nms.date: 04/12/2018\nf1_keywords: \n  - \"whereconstraint\"\n  - \"whereconstraint_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"where (generic type constraint) [C#]\"","nodes":[{"content":"where (generic type constraint) - C# Reference","nodes":[{"pos":[0,46],"content":"where (generic type constraint) - C# Reference","nodes":[{"content":"where (generic type constraint) - C# Reference","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[244,290],"content":"where (generic type constraint) (C# Reference)","linkify":"where (generic type constraint) (C# Reference)","nodes":[{"content":"where (generic type constraint) (C# Reference)","pos":[0,46]}]},{"content":"The <ph id=\"ph1\">`where`</ph> clause in a generic definition specifies constraints on the types that are used as arguments for type parameters in a generic type, method, delegate, or local function.","pos":[292,472],"source":"The `where` clause in a generic definition specifies constraints on the types that are used as arguments for type parameters in a generic type, method, delegate, or local function."},{"content":"Constraints can specify interfaces, base classes, or require a generic type to be a reference, value or unmanaged type.","pos":[473,592]},{"content":"They declare capabilities that the type argument must possess.","pos":[593,655]},{"pos":[657,809],"content":"For example, you can declare a generic class, <ph id=\"ph1\">`MyGenericClass`</ph>, such that the type parameter <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> interface:","source":"For example, you can declare a generic class, `MyGenericClass`, such that the type parameter `T` implements the <xref:System.IComparable%601> interface:"},{"pos":[935,1045],"content":"[!NOTE]\nFor more information on the where clause in a query expression, see [where clause](where-clause.md).","leadings":["","> "],"nodes":[{"content":"For more information on the where clause in a query expression, see <bpt id=\"p1\">[</bpt>where clause<ept id=\"p1\">](where-clause.md)</ept>.","pos":[8,108],"source":"For more information on the where clause in a query expression, see [where clause](where-clause.md)."}]},{"content":"The <ph id=\"ph1\">`where`</ph> clause can also include a base class constraint.","pos":[1047,1107],"source":"The `where` clause can also include a base class constraint."},{"content":"The base class constraint states that a type to be used as a type argument for that generic type has the specified class as a base class (or is that base class) to be used as a type argument for that generic type.","pos":[1108,1321]},{"content":"If the base class constraint is used, it must appear before any other constraints on that type parameter.","pos":[1322,1427]},{"content":"Some types are disallowed as a base class constraint: <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Array&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.ValueType&gt;</ph>.","pos":[1428,1553],"source":" Some types are disallowed as a base class constraint: <xref:System.Object>, <xref:System.Array>, and <xref:System.ValueType>."},{"content":"Prior to C# 7.3, <ph id=\"ph1\">&lt;xref:System.Enum&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Delegate&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.MulticastDelegate&gt;</ph> were also disallowed as base class constraints.","pos":[1554,1698],"source":" Prior to C# 7.3, <xref:System.Enum>, <xref:System.Delegate>, and <xref:System.MulticastDelegate> were also disallowed as base class constraints."},{"content":"The following example shows the types that can now be specified as a base class:","pos":[1699,1779]},{"content":"The <ph id=\"ph1\">`where`</ph> clause can specify that the type is a <ph id=\"ph2\">`class`</ph> or a <ph id=\"ph3\">`struct`</ph>.","pos":[1903,1975],"source":"The `where` clause can specify that the type is a `class` or a `struct`."},{"content":"The <ph id=\"ph1\">`struct`</ph> constraint removes the need to specify a base class constraint of <ph id=\"ph2\">`System.ValueType`</ph>.","pos":[1976,2074],"source":" The `struct` constraint removes the need to specify a base class constraint of `System.ValueType`."},{"content":"The <ph id=\"ph1\">`System.ValueType`</ph> type may not be used as a base class constraint.","pos":[2075,2146],"source":" The `System.ValueType` type may not be used as a base class constraint."},{"content":"The following example shows both the <ph id=\"ph1\">`class`</ph> and <ph id=\"ph2\">`struct`</ph> constraints:","pos":[2147,2217],"source":" The following example shows both the `class` and `struct` constraints:"},{"content":"The <ph id=\"ph1\">`where`</ph> clause may also include an <ph id=\"ph2\">`unmanaged`</ph> constraint.","pos":[2350,2412],"source":"The `where` clause may also include an `unmanaged` constraint."},{"content":"The <ph id=\"ph1\">`unmanaged`</ph> constraint limits the type parameter to types known as <bpt id=\"p1\">**</bpt>unmanaged types<ept id=\"p1\">**</ept>.","pos":[2413,2504],"source":" The `unmanaged` constraint limits the type parameter to types known as **unmanaged types**."},{"content":"An <bpt id=\"p1\">**</bpt>unmanaged type<ept id=\"p1\">**</ept> is a type that isn't a reference type and doesn't contain reference type fields at any level of nesting.","pos":[2505,2631],"source":" An **unmanaged type** is a type that isn't a reference type and doesn't contain reference type fields at any level of nesting."},{"content":"The <ph id=\"ph1\">`unmanaged`</ph> constraint makes it easier to write low-level interop code in C#.","pos":[2632,2713],"source":" The `unmanaged` constraint makes it easier to write low-level interop code in C#."},{"content":"This constraint enables reusable routines across all unmanaged types.","pos":[2714,2783]},{"content":"The <ph id=\"ph1\">`unmanaged`</ph> constraint can't be combined with the <ph id=\"ph2\">`class`</ph> or <ph id=\"ph3\">`struct`</ph> constraint.","pos":[2784,2869],"source":" The `unmanaged` constraint can't be combined with the `class` or `struct` constraint."},{"content":"The <ph id=\"ph1\">`unmanaged`</ph> constraint enforces that the type must be a <ph id=\"ph2\">`struct`</ph>:","pos":[2870,2939],"source":" The `unmanaged` constraint enforces that the type must be a `struct`:"},{"content":"The <ph id=\"ph1\">`where`</ph> clause may also include a constructor constraint, <ph id=\"ph2\">`new()`</ph>.","pos":[3064,3134],"source":"The `where` clause may also include a constructor constraint, `new()`."},{"content":"That constraint makes it possible to create an instance of a type parameter using the <ph id=\"ph1\">`new`</ph> operator.","pos":[3135,3236],"source":" That constraint makes it possible to create an instance of a type parameter using the `new` operator."},{"content":"The <bpt id=\"p1\">[</bpt>new() Constraint<ept id=\"p1\">](new-constraint.md)</ept> lets the compiler know that any type argument supplied must have an accessible parameterless--or default-- constructor.","pos":[3237,3398],"source":" The [new() Constraint](new-constraint.md) lets the compiler know that any type argument supplied must have an accessible parameterless--or default-- constructor."},{"content":"For example:","pos":[3399,3411]},{"content":"The <ph id=\"ph1\">`new()`</ph> constraint appears last in the <ph id=\"ph2\">`where`</ph> clause.","pos":[3530,3588],"source":"The `new()` constraint appears last in the `where` clause."},{"content":"The <ph id=\"ph1\">`new()`</ph> constraint can't be combined with the <ph id=\"ph2\">`struct`</ph> or <ph id=\"ph3\">`unmanaged`</ph> constraints.","pos":[3589,3675],"source":" The `new()` constraint can't be combined with the `struct` or `unmanaged` constraints."},{"content":"All types satisfying those constraints must have an accessible parameterless constructor, making the <ph id=\"ph1\">`new()`</ph> constraint redundant.","pos":[3676,3806],"source":" All types satisfying those constraints must have an accessible parameterless constructor, making the `new()` constraint redundant."},{"pos":[3808,3899],"content":"With multiple type parameters, use one <ph id=\"ph1\">`where`</ph> clause for each type parameter, for example:","source":"With multiple type parameters, use one `where` clause for each type parameter, for example:"},{"content":"You can also attach constraints to type parameters of generic methods, as shown in the following example:","pos":[4026,4131]},{"content":"Notice that the syntax to describe type parameter constraints on delegates is the same as that of methods:","pos":[4264,4370]},{"pos":[4503,4630],"content":"For information on generic delegates, see <bpt id=\"p1\">[</bpt>Generic Delegates<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-delegates.md)</ept>.","source":"For information on generic delegates, see [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md)."},{"pos":[4632,4797],"content":"For details on the syntax and use of constraints, see <bpt id=\"p1\">[</bpt>Constraints on Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)</ept>.","source":"For details on the syntax and use of constraints, see [Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)."},{"pos":[4802,4827],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[4894,4902],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4906,4965],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[4968,5034],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[5037,5135],"content":"<bpt id=\"p1\">[</bpt>Introduction to Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/introduction-to-generics.md)</ept>","source":"[Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md)"},{"pos":[5138,5217],"content":"<bpt id=\"p1\">[</bpt>new Constraint<ept id=\"p1\">](../../../csharp/language-reference/keywords/new-constraint.md)</ept>","source":"[new Constraint](../../../csharp/language-reference/keywords/new-constraint.md)"},{"pos":[5220,5330],"content":"<bpt id=\"p1\">[</bpt>Constraints on Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)</ept>","source":"[Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)"}]}