<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="cancel-remaining-async-tasks-after-one-is-complete.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0edcc969caaeae46240f048e76fbe153041873e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\cancel-remaining-async-tasks-after-one-is-complete.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a93960e08a8f7d3ba9e192f8e9fec87719095cd4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a65d49564c2b15e08ee045ed112943dee2565d0a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Cancel Remaining Async Tasks after One Is Complete (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Cancel Remaining Async Tasks after One Is Complete (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>By using the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=nameWithType&gt;</ph> method together with a <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph>, you can cancel all remaining tasks when one task is complete.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WhenAny`</ph> method takes an argument that’s a collection of tasks.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The method starts all the tasks and returns a single task.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The single task is complete when any task in the collection is complete.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use a cancellation token in conjunction with <ph id="ph1">`WhenAny`</ph> to hold onto the first task to finish from the collection of tasks and to cancel the remaining tasks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each task downloads the contents of a website.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The example displays the length of the contents of the first download to complete and cancels the other downloads.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Downloading the Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can download the complete Windows Presentation Foundation (WPF) project from <bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](https://code.msdn.microsoft.com/Async-Fine-Tuning-Your-a676abea)</ept> and then follow these steps.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Decompress the file that you downloaded, and then start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project/Solution<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Open Project<ept id="p1">**</ept> dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for the <bpt id="p2">**</bpt>CancelAfterOneTask<ept id="p2">**</ept> project, and then choose <bpt id="p3">**</bpt>Set as StartUp Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the project.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Choose the Ctrl+F5 keys to run the project without debugging it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Run the program several times to verify that different downloads finish first.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you don't want to download the project, you can review the MainWindow.xaml.vb file at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Building the Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The example in this topic adds to the project that's developed in <bpt id="p1">[</bpt>Cancel an Async Task or a List of Tasks<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)</ept> to cancel a list of tasks.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The example uses the same UI, although the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button isn’t used explicitly.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To build the example yourself, step by step, follow the instructions in the "Downloading the Example" section, but choose <bpt id="p1">**</bpt>CancelAListOfTasks<ept id="p1">**</ept> as the <bpt id="p2">**</bpt>StartUp Project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add the changes in this topic to that project.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the MainWindow.xaml.vb file of the <bpt id="p1">**</bpt>CancelAListOfTasks<ept id="p1">**</ept> project, start the transition by moving the processing steps for each website from the loop in <ph id="ph1">`AccessTheWebAsync`</ph> to the following async method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`AccessTheWebAsync`</ph>, this example uses a query, the  <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> method, and the <ph id="ph3">`WhenAny`</ph> method to create and start an array of tasks.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The application of <ph id="ph1">`WhenAny`</ph> to the array returns a single task that, when awaited, evaluates to the first task to reach completion in the array of tasks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Make the following changes in <ph id="ph1">`AccessTheWebAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Asterisks mark the changes in the code file.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Comment out or delete the loop.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create a query that, when executed, produces a collection of generic tasks.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each call to <ph id="ph1">`ProcessURLAsync`</ph> returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> where <ph id="ph3">`TResult`</ph> is an integer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`ToArray`</ph> to execute the query and start the tasks.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The application of the <ph id="ph1">`WhenAny`</ph> method in the next step would execute the query and start the tasks without using <ph id="ph2">`ToArray`</ph>, but other methods might not.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The safest practice is to force execution of the query explicitly.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`WhenAny`</ph> on the collection of tasks.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WhenAny`</ph> returns a <ph id="ph2">`Task(Of Task(Of Integer))`</ph> or <ph id="ph3">`Task&lt;Task&lt;int&gt;&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>That is, <ph id="ph1">`WhenAny`</ph> returns a task that evaluates to a single <ph id="ph2">`Task(Of Integer)`</ph> or <ph id="ph3">`Task&lt;int&gt;`</ph> when it’s awaited.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>That single task is the first task in the collection to finish.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The task that finished first is assigned to <ph id="ph1">`firstFinishedTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`firstFinishedTask`</ph> is <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> where <ph id="ph3">`TResult`</ph> is an integer because that's the return type of <ph id="ph4">`ProcessURLAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this example, you’re interested only in the task that finishes first.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Therefore, use <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> to cancel the remaining tasks.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Finally, await <ph id="ph1">`firstFinishedTask`</ph> to retrieve the length of the downloaded content.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Run the program several times to verify that different downloads finish first.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Complete Example</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following code is the complete MainWindow.xaml.vb or MainWindow.xaml.cs file for the example.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Asterisks mark the elements that were added for this example.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Notice that you must add a reference for <ph id="ph1">&lt;xref:System.Net.Http&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can download the project from <bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](https://code.msdn.microsoft.com/Async-Fine-Tuning-Your-a676abea)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fine-Tuning Your Async Application (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](https://code.msdn.microsoft.com/Async-Fine-Tuning-Your-a676abea)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>