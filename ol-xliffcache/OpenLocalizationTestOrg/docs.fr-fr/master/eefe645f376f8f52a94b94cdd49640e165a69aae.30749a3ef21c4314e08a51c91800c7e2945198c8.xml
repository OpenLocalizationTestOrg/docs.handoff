{"content":"---\ntitle: \"How to: Project a New Type (LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: 48145cf9-1e0b-4e73-bbfd-28fc04800dc4\n---\n# How to: Project a New Type (LINQ to XML) (C#)\nOther examples in this section have shown queries that return results as <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, <xref:System.Collections.Generic.IEnumerable%601> of `string`, and <xref:System.Collections.Generic.IEnumerable%601> of `int`. These are common result types, but they are not appropriate for every scenario. In many cases you will want your queries to return an <xref:System.Collections.Generic.IEnumerable%601> of some other type.  \n  \n## Example  \n This example shows how to instantiate objects in the `select` clause. The code first defines a new class with a constructor, and then modifies the `select` statement so that the expression is a new instance of the new class.  \n  \n This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md).  \n  \n```csharp  \nclass NameQty {  \n    public string name;  \n    public int qty;  \n    public NameQty(string n, int q)  \n    {  \n        name = n;  \n        qty = q;  \n    }  \n};  \n  \nclass Program {  \n    public static void Main() {  \n        XElement po = XElement.Load(\"PurchaseOrder.xml\");  \n  \n        IEnumerable<NameQty> nqList =  \n            from n in po.Descendants(\"Item\")  \n            select new NameQty(  \n                    (string)n.Element(\"ProductName\"),  \n                    (int)n.Element(\"Quantity\")  \n                );  \n  \n        foreach (NameQty n in nqList)  \n            Console.WriteLine(n.name + \":\" + n.qty);  \n    }  \n}  \n```  \n  \n This example uses the `M:System.Xml.Linq.XElement.Element` method that was introduced in the topic [How to: Retrieve a Single Child Element (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-child-element-linq-to-xml.md). It also uses casts to retrieve the values of the elements that are returned by the `M:System.Xml.Linq.XElement.Element` method.  \n  \n This example produces the following output:  \n  \n```  \nLawnmower:1  \nBaby Monitor:2  \n```  \n  \n## See also\n\n- [Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)\n","nodes":[{"pos":[4,127],"embed":true,"restype":"x-metadata","content":"title: \"How to: Project a New Type (LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: 48145cf9-1e0b-4e73-bbfd-28fc04800dc4","nodes":[{"content":"How to: Project a New Type (LINQ to XML) (C#)","nodes":[{"pos":[0,45],"content":"How to: Project a New Type (LINQ to XML) (C#)","nodes":[{"content":"How to: Project a New Type (LINQ to XML) (C#)","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[134,179],"content":"How to: Project a New Type (LINQ to XML) (C#)","linkify":"How to: Project a New Type (LINQ to XML) (C#)","nodes":[{"content":"How to: Project a New Type (LINQ to XML) (C#)","pos":[0,45]}]},{"content":"Other examples in this section have shown queries that return results as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph4\">`string`</ph>, and <ph id=\"ph5\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph6\">`int`</ph>.","pos":[180,465],"source":"Other examples in this section have shown queries that return results as <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, <xref:System.Collections.Generic.IEnumerable%601> of `string`, and <xref:System.Collections.Generic.IEnumerable%601> of `int`."},{"content":"These are common result types, but they are not appropriate for every scenario.","pos":[466,545]},{"content":"In many cases you will want your queries to return an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of some other type.","pos":[546,669],"source":" In many cases you will want your queries to return an <xref:System.Collections.Generic.IEnumerable%601> of some other type."},{"pos":[678,685],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows how to instantiate objects in the <ph id=\"ph1\">`select`</ph> clause.","pos":[689,758],"source":"This example shows how to instantiate objects in the `select` clause."},{"content":"The code first defines a new class with a constructor, and then modifies the <ph id=\"ph1\">`select`</ph> statement so that the expression is a new instance of the new class.","pos":[759,913],"source":" The code first defines a new class with a constructor, and then modifies the `select` statement so that the expression is a new instance of the new class."},{"pos":[920,1130],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)."},{"content":"This example uses the <ph id=\"ph1\">`M:System.Xml.Linq.XElement.Element`</ph> method that was introduced in the topic <bpt id=\"p1\">[</bpt>How to: Retrieve a Single Child Element (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-child-element-linq-to-xml.md)</ept>.","pos":[1797,2063],"source":"This example uses the `M:System.Xml.Linq.XElement.Element` method that was introduced in the topic [How to: Retrieve a Single Child Element (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-child-element-linq-to-xml.md)."},{"content":"It also uses casts to retrieve the values of the elements that are returned by the <ph id=\"ph1\">`M:System.Xml.Linq.XElement.Element`</ph> method.","pos":[2064,2191],"source":" It also uses casts to retrieve the values of the elements that are returned by the `M:System.Xml.Linq.XElement.Element` method."},{"content":"This example produces the following output:","pos":[2198,2241]},{"pos":[2296,2304],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2308,2459],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}