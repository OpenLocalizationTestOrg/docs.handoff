{"content":"---\ntitle: String Interpolation | C#\ndescription: Learn how string interpolation works in C# 6\nkeywords: .NET, .NET Core, C#, string\nauthor: mgroves\nms.author: wiwagn\nms.date: 03/06/2017\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: f8806f6b-3ac7-4ee6-9b3e-c524d5301ae9\n---\n\n# String Interpolation in C# #\n\nString Interpolation is the way that placeholders in a string are replaced by the value of a string variable. Before C# 6, the way to do this is with `System.String.Format`. This works okay, but since it uses numbered placeholders, it can be harder to read and more verbose.\n\nOther programming languages have had string interpolation built into the language for a while. For instance, in PHP:\n\n```php\n$name = \"Jonas\";\necho \"My name is $name.\";\n// This will output \"My name is Jonas.\"\n```\n\nIn C# 6, we finally have that style of string interpolation. You can use a `$` before a string to indicate that it should substitute variables/expressions for their values.\n\n## Prerequisites\nYou’ll need to set up your machine to run .NET core. You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage.\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container. \nYou’ll need to install your favorite code editor. The descriptions below\nuse [Visual Studio Code](https://code.visualstudio.com/) which is an open\nsource, cross platform editor. However, you can use whatever tools you are\ncomfortable with.\n\n## Create the Application\n\nNow that you've installed all the tools, create a new .NET Core\napplication. To use the command line generator, create a directory for your project, such as `interpolated`, and execute the following command in your favorite shell:\n\n```\ndotnet new console\n```\n\nThis command will create a barebones .NET core project with a project file, *interpolated.csproj*, and a source code file, *Program.cs*. You will need to execute `dotnet restore` to restore the dependencies needed to compile this project.\n\nTo execute the program, use `dotnet run`. You should see \"Hello, World\" output to the console.\n\n## Intro to String Interpolation\n\nWith `System.String.Format`, you specify \"placeholders\" in a string that are replaced by the parameters following the string. For instance:\n\n[!code-csharp[String.Format example](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#StringFormatExample)]  \n\nThat will output \"My name is Matt Groves\".\n\nIn C# 6, instead of using `String.Format`, you define an interpolated string by prepending it with the `$` symbol, and then using the variables directly in the string. For instance:\n\n[!code-csharp[Interpolation example](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#InterpolationExample)]  \n\nYou don't have to use just variables. You can use any expression within the brackets. For instance:\n\n[!code-csharp[Interpolation expression example](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#InterpolationExpressionExample)]  \n\nWhich would output:\n\n```\nThis is line number 1\nThis is line number 2\nThis is line number 3\nThis is line number 4\nThis is line number 5\n```\n\n## How string interpolation works\n\nBehind the scenes, this string interpolation syntax is translated into String.Format by the compiler. So, you can do the [same type of stuff you've done before with String.Format](https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx).\n\nFor instance, you can add padding and numeric formatting:\n\n[!code-csharp[Interpolation formatting example](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#InterpolationFormattingExample)]  \n\nThe above would output something like:\n\n```\n998        5,177.67\n999        6,719.30\n1000       9,910.61\n1001       529.34\n1002       1,349.86\n1003       2,660.82\n1004       6,227.77\n```\n\nIf a variable name is not found, then a compile time error will be generated.\n\nFor instance:\n\n```csharp\nvar animal = \"fox\";\nvar localizeMe = $\"The {adj} brown {animal} jumped over the lazy {otheranimal}\";\nvar adj = \"quick\";\nConsole.WriteLine(localizeMe);\n```\n\nIf you compile this, you'll get errors:\n \n* `Cannot use local variable 'adj' before it is declared` - the `adj` variable wasn't declared until *after* the interpolated string.\n* `The name 'otheranimal' does not exist in the current context` - a variable called `otheranimal` was never even declared\n\n## Localization and Internationalization\n\nAn interpolated string supports `IFormattable` and `FormattableString`, which can be useful for internationalization.\n\nBy default, an interpolated string uses the current culture. To use a different culture, you could cast it as `IFormattable`\n\nFor instance:\n\n[!code-csharp[Interpolation internationalization example](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#InterpolationInternationalizationExample)]  \n\n## Conclusion \n\nIn this tutorial, you learned how to use string interpolation features of C# 6. It's basically a more concise way of writing simple `String.Format` statements, with some caveats for more advanced uses of it.\n","nodes":[{"pos":[4,316],"embed":true,"restype":"x-metadata","content":"title: String Interpolation | C#\ndescription: Learn how string interpolation works in C# 6\nkeywords: .NET, .NET Core, C#, string\nauthor: mgroves\nms.author: wiwagn\nms.date: 03/06/2017\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: f8806f6b-3ac7-4ee6-9b3e-c524d5301ae9","nodes":[{"content":"String Interpolation | C#","nodes":[{"pos":[0,25],"content":"String Interpolation | C#","nodes":[{"content":"String Interpolation | C#","pos":[0,25]}]}],"path":["title"]},{"content":"Learn how string interpolation works in C# 6","nodes":[{"pos":[0,44],"content":"Learn how string interpolation works in C# 6","nodes":[{"content":"Learn how string interpolation works in C# 6","pos":[0,44]}]}],"path":["description"]},{"content":".NET, .NET Core, C#, string","nodes":[{"pos":[0,27],"content":".NET, .NET Core, C#, string","nodes":[{"content":".NET, .NET Core, C#, string","pos":[0,27]}]}],"path":["keywords"]}],"yml":true},{"pos":[324,350],"content":"String Interpolation in C#","linkify":"String Interpolation in C#","nodes":[{"content":"String Interpolation in C#","pos":[0,26]}]},{"content":"String Interpolation is the way that placeholders in a string are replaced by the value of a string variable.","pos":[354,463]},{"content":"Before C# 6, the way to do this is with <ph id=\"ph1\">`System.String.Format`</ph>.","pos":[464,527],"source":" Before C# 6, the way to do this is with `System.String.Format`."},{"content":"This works okay, but since it uses numbered placeholders, it can be harder to read and more verbose.","pos":[528,628]},{"content":"Other programming languages have had string interpolation built into the language for a while.","pos":[630,724]},{"content":"For instance, in PHP:","pos":[725,746]},{"content":"In C# 6, we finally have that style of string interpolation.","pos":[843,903]},{"content":"You can use a <ph id=\"ph1\">`$`</ph> before a string to indicate that it should substitute variables/expressions for their values.","pos":[904,1015],"source":" You can use a `$` before a string to indicate that it should substitute variables/expressions for their values."},{"pos":[1020,1033],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You’ll need to set up your machine to run .NET core.","pos":[1034,1086]},{"content":"You can find the installation instructions on the <bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> page.","pos":[1087,1190],"source":" You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage."},{"content":"You can run this application on Windows, Ubuntu Linux, macOS or in a Docker container.","pos":[1191,1277],"source":"\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container."},{"content":"You’ll need to install your favorite code editor.","pos":[1278,1328],"source":" \nYou’ll need to install your favorite code editor."},{"content":"The descriptions below use <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](https://code.visualstudio.com/)</ept> which is an open source, cross platform editor.","pos":[1329,1456],"source":" The descriptions below\nuse [Visual Studio Code](https://code.visualstudio.com/) which is an open\nsource, cross platform editor."},{"content":"However, you can use whatever tools you are comfortable with.","pos":[1457,1518],"source":" However, you can use whatever tools you are\ncomfortable with."},{"pos":[1523,1545],"content":"Create the Application","linkify":"Create the Application","nodes":[{"content":"Create the Application","pos":[0,22]}]},{"content":"Now that you've installed all the tools, create a new .NET Core application.","pos":[1547,1623],"source":"Now that you've installed all the tools, create a new .NET Core\napplication."},{"content":"To use the command line generator, create a directory for your project, such as <ph id=\"ph1\">`interpolated`</ph>, and execute the following command in your favorite shell:","pos":[1624,1777],"source":" To use the command line generator, create a directory for your project, such as `interpolated`, and execute the following command in your favorite shell:"},{"content":"This command will create a barebones .NET core project with a project file, <bpt id=\"p1\">*</bpt>interpolated.csproj<ept id=\"p1\">*</ept>, and a source code file, <bpt id=\"p2\">*</bpt>Program.cs<ept id=\"p2\">*</ept>.","pos":[1807,1943],"source":"This command will create a barebones .NET core project with a project file, *interpolated.csproj*, and a source code file, *Program.cs*."},{"content":"You will need to execute <ph id=\"ph1\">`dotnet restore`</ph> to restore the dependencies needed to compile this project.","pos":[1944,2045],"source":" You will need to execute `dotnet restore` to restore the dependencies needed to compile this project."},{"content":"To execute the program, use <ph id=\"ph1\">`dotnet run`</ph>.","pos":[2047,2088],"source":"To execute the program, use `dotnet run`."},{"content":"You should see \"Hello, World\" output to the console.","pos":[2089,2141]},{"pos":[2146,2175],"content":"Intro to String Interpolation","linkify":"Intro to String Interpolation","nodes":[{"content":"Intro to String Interpolation","pos":[0,29]}]},{"content":"With <ph id=\"ph1\">`System.String.Format`</ph>, you specify \"placeholders\" in a string that are replaced by the parameters following the string.","pos":[2177,2302],"source":"With `System.String.Format`, you specify \"placeholders\" in a string that are replaced by the parameters following the string."},{"content":"For instance:","pos":[2303,2316]},{"content":"That will output \"My name is Matt Groves\".","pos":[2446,2488]},{"content":"In C# 6, instead of using <ph id=\"ph1\">`String.Format`</ph>, you define an interpolated string by prepending it with the <ph id=\"ph2\">`$`</ph> symbol, and then using the variables directly in the string.","pos":[2490,2657],"source":"In C# 6, instead of using `String.Format`, you define an interpolated string by prepending it with the `$` symbol, and then using the variables directly in the string."},{"content":"For instance:","pos":[2658,2671]},{"content":"You don't have to use just variables.","pos":[2802,2839]},{"content":"You can use any expression within the brackets.","pos":[2840,2887]},{"content":"For instance:","pos":[2888,2901]},{"content":"Which would output:","pos":[3053,3072]},{"pos":[3196,3226],"content":"How string interpolation works","linkify":"How string interpolation works","nodes":[{"content":"How string interpolation works","pos":[0,30]}]},{"content":"Behind the scenes, this string interpolation syntax is translated into String.Format by the compiler.","pos":[3228,3329]},{"content":"So, you can do the <bpt id=\"p1\">[</bpt>same type of stuff you've done before with String.Format<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx)</ept>.","pos":[3330,3474],"source":" So, you can do the [same type of stuff you've done before with String.Format](https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx)."},{"content":"For instance, you can add padding and numeric formatting:","pos":[3476,3533]},{"content":"The above would output something like:","pos":[3685,3723]},{"content":"If a variable name is not found, then a compile time error will be generated.","pos":[3872,3949]},{"content":"For instance:","pos":[3951,3964]},{"content":"If you compile this, you'll get errors:","pos":[4132,4171]},{"pos":[4176,4307],"content":"<ph id=\"ph1\">`Cannot use local variable 'adj' before it is declared`</ph> - the <ph id=\"ph2\">`adj`</ph> variable wasn't declared until <bpt id=\"p1\">*</bpt>after<ept id=\"p1\">*</ept> the interpolated string.","source":"`Cannot use local variable 'adj' before it is declared` - the `adj` variable wasn't declared until *after* the interpolated string."},{"pos":[4310,4430],"content":"<ph id=\"ph1\">`The name 'otheranimal' does not exist in the current context`</ph> - a variable called <ph id=\"ph2\">`otheranimal`</ph> was never even declared","source":"`The name 'otheranimal' does not exist in the current context` - a variable called `otheranimal` was never even declared"},{"pos":[4435,4472],"content":"Localization and Internationalization","linkify":"Localization and Internationalization","nodes":[{"content":"Localization and Internationalization","pos":[0,37]}]},{"pos":[4474,4591],"content":"An interpolated string supports <ph id=\"ph1\">`IFormattable`</ph> and <ph id=\"ph2\">`FormattableString`</ph>, which can be useful for internationalization.","source":"An interpolated string supports `IFormattable` and `FormattableString`, which can be useful for internationalization."},{"content":"By default, an interpolated string uses the current culture.","pos":[4593,4653]},{"content":"To use a different culture, you could cast it as <ph id=\"ph1\">`IFormattable`</ph>","pos":[4654,4717],"source":" To use a different culture, you could cast it as `IFormattable`"},{"content":"For instance:","pos":[4719,4732]},{"pos":[4907,4917],"content":"Conclusion","linkify":"Conclusion","nodes":[{"content":"Conclusion","pos":[0,10]}]},{"content":"In this tutorial, you learned how to use string interpolation features of C# 6.","pos":[4920,4999]},{"content":"It's basically a more concise way of writing simple <ph id=\"ph1\">`String.Format`</ph> statements, with some caveats for more advanced uses of it.","pos":[5000,5127],"source":" It's basically a more concise way of writing simple `String.Format` statements, with some caveats for more advanced uses of it."}]}