{"content":"---\ntitle: Iterators\ndescription: Learn how to use built-in C# iterators and how to create your own custom iterator methods.\nms.date: 06/20/2016\nms.assetid: 5cf36f45-f91a-4fca-a0b7-87f233e108e9\n---\n\n# Iterators\n\nAlmost every program you write will have some need to iterate\nover a collection. You'll write code that examines every item in\na collection. \n\nYou'll also create iterator methods which are methods that produces an\niterator for the elements of that class. These can be used for:\n\n+ Performing an action on each item in a collection.\n+ Enumerating a custom collection.\n+ Extending [LINQ](linq/index.md) or other libraries.\n+ Creating a data pipeline where data flows efficiently through iterator\nmethods.\n\nThe C# language provides\nfeatures for both these scenarios. This article provides an overview\nof those features.\n\nThis tutorial has multiple steps. After each step, you can run the application and see the progress. You can also [view or download the completed sample](https://github.com/dotnet/samples/blob/master/csharp/iterators) for this topic. For download instructions, see [Samples and Tutorials](../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\n## Iterating with foreach\n\nEnumerating a collection is simple: The `foreach` keyword enumerates\na collection, executing the embedded statement once for each element\nin the collection:\n \n```csharp\nforeach (var item in collection)\n{\n   Console.WriteLine(item.ToString());\n}\n```\n\nThat's all there is to it. To iterate over all the contents of a collection,\nthe `foreach` statement is all you need. The `foreach` statement isn't magic,\nthough. It relies on two generic interfaces defined in the .NET core library in order\nto generate the code necessary to iterate a collection: `IEnumerable<T>` and\n`IEnumerator<T>`. This mechanism is explained in more detail below.\n\nBoth of these interfaces also have non-generic counterparts: `IEnumerable` and \n`IEnumerator`. The [generic](programming-guide/generics/index.md) versions are preferred for modern code.\n\n## Enumeration sources with iterator methods\n\nAnother great feature of the C# language enables you to build methods that create\na source for an enumeration. These are referred to as *iterator methods*. An iterator\nmethod defines how to generate the objects in a sequence when requested. You\nuse the `yield return` contextual keywords to define an iterator method. \n\nYou could write this method to produce the sequence of integers from 0 through 9:\n\n```csharp\npublic IEnumerable<int> GetSingleDigitNumbers()\n{\n    yield return 0;\n    yield return 1;\n    yield return 2;\n    yield return 3;\n    yield return 4;\n    yield return 5;\n    yield return 6;\n    yield return 7;\n    yield return 8;\n    yield return 9;\n}\n```\n\nThe code above shows distinct `yield return` statements to highlight the fact that\nyou can use multiple discrete `yield return` statements in an iterator method.\nYou can (and often do) use other language constructs to simplify the code of an\niterator method. The method definition below produces the exact same sequence\nof numbers:\n\n```csharp\npublic IEnumerable<int> GetSingleDigitNumbers()\n{\n    int index = 0;\n    while (index++ < 10)\n        yield return index;\n}\n```\n\nYou don't have to decide one or the other. You can have as many `yield return`\nstatements as necessary to meet the needs of your method:\n\n```csharp\npublic IEnumerable<int> GetSingleDigitNumbers()\n{\n    int index = 0;\n    while (index++ < 10)\n        yield return index;\n        \n    yield return 50;\n    \n    index = 100;\n    while (index++ < 110)\n        yield return index;\n}\n```\n\nThat's the basic syntax. Let's consider a real world example where you would\nwrite an iterator method. Imagine you're on an IoT project and the device\nsensors generate a very large stream of data. To get a feel for the data, you\nmight write a method that samples every Nth data element. This small iterator\nmethod does the trick:\n\n```csharp\npublic static IEnumerable<T> Sample(this IEnumerable<T> sourceSequence, int interval)\n{\n    int index = 0;\n    foreach (T item in sourceSequence)\n    {\n        if (index++ % interval == 0)\n            yield return item;\n    }\n}\n```\n\nThere is one important restriction on iterator methods: you can't have both a\n`return` statement and a `yield return` statement in the same method. The following\nwill not compile:\n\n```csharp\npublic IEnumerable<int> GetSingleDigitNumbers()\n{\n    int index = 0;\n    while (index++ < 10)\n        yield return index;\n        \n    yield return 50;\n   \n    // generates a compile time error: \n    var items = new int[] {100, 101, 102, 103, 104, 105, 106, 107, 108, 109 };\n    return items;  \n}\n```\n\nThis restriction normally isn't a problem. You have a choice of either using\n`yield return` throughout the method, or separating the original method into\nmultiple methods, some using `return`, and some using `yield return`.\n\nYou can modify the last method slightly to use `yield return` everywhere:\n\n```csharp\npublic IEnumerable<int> GetSingleDigitNumbers()\n{\n    int index = 0;\n    while (index++ < 10)\n        yield return index;\n        \n    yield return 50;\n   \n    var items = new int[] {100, 101, 102, 103, 104, 105, 106, 107, 108, 109 };\n    foreach (var item in items)\n        yield return item;\n}\n```\n \nSometimes, the right answer is to split an iterator method into two different\nmethods. One that uses `return`, and a second that uses `yield return`. Consider\na situation where you might want to return an empty collection, or the first 5\nodd numbers, based on a boolean argument. You could write that as these two\nmethods:\n\n```csharp\npublic IEnumerable<int> GetSingleDigitOddNumbers(bool getCollection)\n{\n    if (getCollection == false)\n        return new int[0];\n    else\n        return IteratorMethod();\n}\n\nprivate IEnumerable<int> IteratorMethod()\n{\n    int index = 0;\n    while (index++ < 10)\n        if (index % 2 == 1)\n            yield return index;\n}\n```\n \nLook at the methods above. The first uses the standard `return` statement to return\neither an empty collection, or the iterator created by the second method. The second\nmethod uses the `yield return` statement to create the requested sequence.\n\n## Deeper Dive into `foreach`\n\nThe `foreach` statement expands into a standard idiom that uses the\n`IEnumerable<T>` and `IEnumerator<T>` interfaces to iterate across all\nelements of a collection. It also  minimizes errors developers make\nby not properly managing resources. \n\nThe compiler translates the `foreach` loop shown in the first\nexample into something similar to this construct:\n\n```csharp\nIEnumerator<int> enumerator = collection.GetEnumerator();\nwhile (enumerator.MoveNext())\n{\n    var item = enumerator.Current;\n    Console.WriteLine(item.ToString());\n}\n```\n\nThe construct above represents the code generated by the C# compiler as of\nversion 5 and above. Prior to version 5, the `item` variable had a different scope:\n\n```csharp\n// C# versions 1 through 4:\nIEnumerator<int> enumerator = collection.GetEnumerator();\nint item = default(int);\nwhile (enumerator.MoveNext())\n{\n    item = enumerator.Current;\n    Console.WriteLine(item.ToString());\n}\n```\n\nThis was changed because the earlier behavior could lead to subtle and hard\nto diagnose bugs involving lambda expressions. For more information about lambda expressions, see [Lambda expressions](./programming-guide/statements-expressions-operators/lambda-expressions.md).\n\nThe exact code generated by the compiler is somewhat more complicated, and\nhandles situations where the object returned by `GetEnumerator()` implements\nthe `IDisposable` interface. The full expansion generates code more like this:\n\n```csharp\n{\n    var enumerator = collection.GetEnumerator();\n    try \n    {\n        while (enumerator.MoveNext())\n        {\n            var item = enumerator.Current;\n            Console.WriteLine(item.ToString());\n        }\n    } finally \n    {\n        // dispose of enumerator.\n    }\n}\n```\n\nThe manner in which the enumerator is disposed of depends on the characteristics of\nthe type of `enumerator`. In the general case, the `finally` clause expands to:\n\n```csharp\nfinally \n{\n   (enumerator as IDisposable)?.Dispose();\n} \n```\n\nHowever, if the type of `enumerator` is a sealed type and there is no implicit\nconversion from the type of `enumerator` to `IDisposable`, the `finally` clause\nexpands to an empty block:\n```csharp\nfinally \n{\n} \n```\n\nIf there is an implicit conversion from the type of `enumerator` to `IDisposable`,\nand `enumerator` is a non-nullable value type, the `finally` clause expands to:\n\n```csharp\nfinally \n{\n   ((IDisposable)enumerator).Dispose();\n} \n```\n\nThankfully, you don't need to remember all these details. The `foreach` statement\nhandles all those nuances for you. The compiler will generate the correct code for\nany of these constructs. \n","nodes":[{"pos":[4,193],"embed":true,"restype":"x-metadata","content":"title: Iterators\ndescription: Learn how to use built-in C# iterators and how to create your own custom iterator methods.\nms.date: 06/20/2016\nms.assetid: 5cf36f45-f91a-4fca-a0b7-87f233e108e9","nodes":[{"content":"Iterators","nodes":[{"pos":[0,9],"content":"Iterators","nodes":[{"content":"Iterators","pos":[0,9]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to use built-in C# iterators and how to create your own custom iterator methods.","nodes":[{"pos":[0,90],"content":"Learn how to use built-in C# iterators and how to create your own custom iterator methods.","nodes":[{"content":"Learn how to use built-in C# iterators and how to create your own custom iterator methods.","pos":[0,90]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[201,210],"content":"Iterators","linkify":"Iterators","nodes":[{"content":"Iterators","pos":[0,9]}]},{"content":"Almost every program you write will have some need to iterate over a collection.","pos":[212,292],"source":"Almost every program you write will have some need to iterate\nover a collection."},{"content":"You'll write code that examines every item in a collection.","pos":[293,352],"source":" You'll write code that examines every item in\na collection."},{"content":"You'll also create iterator methods which are methods that produces an iterator for the elements of that class.","pos":[355,466],"source":"You'll also create iterator methods which are methods that produces an\niterator for the elements of that class."},{"content":"These can be used for:","pos":[467,489]},{"content":"Performing an action on each item in a collection.","pos":[493,543]},{"content":"Enumerating a custom collection.","pos":[546,578]},{"pos":[581,632],"content":"Extending <bpt id=\"p1\">[</bpt>LINQ<ept id=\"p1\">](linq/index.md)</ept> or other libraries.","source":"Extending [LINQ](linq/index.md) or other libraries."},{"pos":[635,714],"content":"Creating a data pipeline where data flows efficiently through iterator methods.","source":"Creating a data pipeline where data flows efficiently through iterator\nmethods."},{"content":"The C# language provides features for both these scenarios.","pos":[716,775],"source":"The C# language provides\nfeatures for both these scenarios."},{"content":"This article provides an overview of those features.","pos":[776,828],"source":" This article provides an overview\nof those features."},{"content":"This tutorial has multiple steps.","pos":[830,863]},{"content":"After each step, you can run the application and see the progress.","pos":[864,930]},{"content":"You can also <bpt id=\"p1\">[</bpt>view or download the completed sample<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/csharp/iterators)</ept> for this topic.","pos":[931,1063],"source":" You can also [view or download the completed sample](https://github.com/dotnet/samples/blob/master/csharp/iterators) for this topic."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[1064,1186],"source":" For download instructions, see [Samples and Tutorials](../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[1191,1213],"content":"Iterating with foreach","linkify":"Iterating with foreach","nodes":[{"content":"Iterating with foreach","pos":[0,22]}]},{"pos":[1215,1371],"content":"Enumerating a collection is simple: The <ph id=\"ph1\">`foreach`</ph> keyword enumerates a collection, executing the embedded statement once for each element in the collection:","source":"Enumerating a collection is simple: The `foreach` keyword enumerates\na collection, executing the embedded statement once for each element\nin the collection:"},{"content":"That's all there is to it.","pos":[1465,1491]},{"content":"To iterate over all the contents of a collection, the <ph id=\"ph1\">`foreach`</ph> statement is all you need.","pos":[1492,1582],"source":" To iterate over all the contents of a collection,\nthe `foreach` statement is all you need."},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement isn't magic, though.","pos":[1583,1627],"source":" The `foreach` statement isn't magic,\nthough."},{"content":"It relies on two generic interfaces defined in the .NET core library in order to generate the code necessary to iterate a collection: <ph id=\"ph1\">`IEnumerable&lt;T&gt;`</ph> and <ph id=\"ph2\">`IEnumerator&lt;T&gt;`</ph>.","pos":[1628,1800],"source":" It relies on two generic interfaces defined in the .NET core library in order\nto generate the code necessary to iterate a collection: `IEnumerable<T>` and\n`IEnumerator<T>`."},{"content":"This mechanism is explained in more detail below.","pos":[1801,1850]},{"content":"Both of these interfaces also have non-generic counterparts: <ph id=\"ph1\">`IEnumerable`</ph> and <ph id=\"ph2\">`IEnumerator`</ph>.","pos":[1852,1946],"source":"Both of these interfaces also have non-generic counterparts: `IEnumerable` and \n`IEnumerator`."},{"content":"The <bpt id=\"p1\">[</bpt>generic<ept id=\"p1\">](programming-guide/generics/index.md)</ept> versions are preferred for modern code.","pos":[1947,2037],"source":" The [generic](programming-guide/generics/index.md) versions are preferred for modern code."},{"pos":[2042,2083],"content":"Enumeration sources with iterator methods","linkify":"Enumeration sources with iterator methods","nodes":[{"content":"Enumeration sources with iterator methods","pos":[0,41]}]},{"content":"Another great feature of the C# language enables you to build methods that create a source for an enumeration.","pos":[2085,2195],"source":"Another great feature of the C# language enables you to build methods that create\na source for an enumeration."},{"content":"These are referred to as <bpt id=\"p1\">*</bpt>iterator methods<ept id=\"p1\">*</ept>.","pos":[2196,2240],"source":" These are referred to as *iterator methods*."},{"content":"An iterator method defines how to generate the objects in a sequence when requested.","pos":[2241,2325],"source":" An iterator\nmethod defines how to generate the objects in a sequence when requested."},{"content":"You use the <ph id=\"ph1\">`yield return`</ph> contextual keywords to define an iterator method.","pos":[2326,2402],"source":" You\nuse the `yield return` contextual keywords to define an iterator method."},{"content":"You could write this method to produce the sequence of integers from 0 through 9:","pos":[2405,2486]},{"content":"The code above shows distinct <ph id=\"ph1\">`yield return`</ph> statements to highlight the fact that you can use multiple discrete <ph id=\"ph2\">`yield return`</ph> statements in an iterator method.","pos":[2755,2916],"source":"The code above shows distinct `yield return` statements to highlight the fact that\nyou can use multiple discrete `yield return` statements in an iterator method."},{"content":"You can (and often do) use other language constructs to simplify the code of an iterator method.","pos":[2917,3013],"source":"\nYou can (and often do) use other language constructs to simplify the code of an\niterator method."},{"content":"The method definition below produces the exact same sequence of numbers:","pos":[3014,3086],"source":" The method definition below produces the exact same sequence\nof numbers:"},{"content":"You don't have to decide one or the other.","pos":[3227,3269]},{"content":"You can have as many <ph id=\"ph1\">`yield return`</ph> statements as necessary to meet the needs of your method:","pos":[3270,3363],"source":" You can have as many `yield return`\nstatements as necessary to meet the needs of your method:"},{"content":"That's the basic syntax.","pos":[3610,3634]},{"content":"Let's consider a real world example where you would write an iterator method.","pos":[3635,3712],"source":" Let's consider a real world example where you would\nwrite an iterator method."},{"content":"Imagine you're on an IoT project and the device sensors generate a very large stream of data.","pos":[3713,3806],"source":" Imagine you're on an IoT project and the device\nsensors generate a very large stream of data."},{"content":"To get a feel for the data, you might write a method that samples every Nth data element.","pos":[3807,3896],"source":" To get a feel for the data, you\nmight write a method that samples every Nth data element."},{"content":"This small iterator method does the trick:","pos":[3897,3939],"source":" This small iterator\nmethod does the trick:"},{"content":"There is one important restriction on iterator methods: you can't have both a <ph id=\"ph1\">`return`</ph> statement and a <ph id=\"ph2\">`yield return`</ph> statement in the same method.","pos":[4184,4331],"source":"There is one important restriction on iterator methods: you can't have both a\n`return` statement and a `yield return` statement in the same method."},{"content":"The following will not compile:","pos":[4332,4363],"source":" The following\nwill not compile:"},{"content":"This restriction normally isn't a problem.","pos":[4677,4719]},{"content":"You have a choice of either using <ph id=\"ph1\">`yield return`</ph> throughout the method, or separating the original method into multiple methods, some using <ph id=\"ph2\">`return`</ph>, and some using <ph id=\"ph3\">`yield return`</ph>.","pos":[4720,4900],"source":" You have a choice of either using\n`yield return` throughout the method, or separating the original method into\nmultiple methods, some using `return`, and some using `yield return`."},{"pos":[4902,4975],"content":"You can modify the last method slightly to use <ph id=\"ph1\">`yield return`</ph> everywhere:","source":"You can modify the last method slightly to use `yield return` everywhere:"},{"content":"Sometimes, the right answer is to split an iterator method into two different methods.","pos":[5289,5375],"source":"Sometimes, the right answer is to split an iterator method into two different\nmethods."},{"content":"One that uses <ph id=\"ph1\">`return`</ph>, and a second that uses <ph id=\"ph2\">`yield return`</ph>.","pos":[5376,5438],"source":" One that uses `return`, and a second that uses `yield return`."},{"content":"Consider a situation where you might want to return an empty collection, or the first 5 odd numbers, based on a boolean argument.","pos":[5439,5568],"source":" Consider\na situation where you might want to return an empty collection, or the first 5\nodd numbers, based on a boolean argument."},{"content":"You could write that as these two methods:","pos":[5569,5611],"source":" You could write that as these two\nmethods:"},{"content":"Look at the methods above.","pos":[5954,5980]},{"content":"The first uses the standard <ph id=\"ph1\">`return`</ph> statement to return either an empty collection, or the iterator created by the second method.","pos":[5981,6111],"source":" The first uses the standard `return` statement to return\neither an empty collection, or the iterator created by the second method."},{"content":"The second method uses the <ph id=\"ph1\">`yield return`</ph> statement to create the requested sequence.","pos":[6112,6197],"source":" The second\nmethod uses the `yield return` statement to create the requested sequence."},{"pos":[6202,6228],"content":"Deeper Dive into <ph id=\"ph1\">`foreach`</ph>","linkify":"Deeper Dive into `foreach`","source":"Deeper Dive into `foreach`"},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement expands into a standard idiom that uses the <ph id=\"ph2\">`IEnumerable&lt;T&gt;`</ph> and <ph id=\"ph3\">`IEnumerator&lt;T&gt;`</ph> interfaces to iterate across all elements of a collection.","pos":[6230,6394],"source":"The `foreach` statement expands into a standard idiom that uses the\n`IEnumerable<T>` and `IEnumerator<T>` interfaces to iterate across all\nelements of a collection."},{"content":"It also  minimizes errors developers make by not properly managing resources.","pos":[6395,6472],"source":" It also  minimizes errors developers make\nby not properly managing resources."},{"pos":[6475,6586],"content":"The compiler translates the <ph id=\"ph1\">`foreach`</ph> loop shown in the first example into something similar to this construct:","source":"The compiler translates the `foreach` loop shown in the first\nexample into something similar to this construct:"},{"content":"The construct above represents the code generated by the C# compiler as of version 5 and above.","pos":[6770,6865],"source":"The construct above represents the code generated by the C# compiler as of\nversion 5 and above."},{"content":"Prior to version 5, the <ph id=\"ph1\">`item`</ph> variable had a different scope:","pos":[6866,6928],"source":" Prior to version 5, the `item` variable had a different scope:"},{"content":"This was changed because the earlier behavior could lead to subtle and hard to diagnose bugs involving lambda expressions.","pos":[7161,7283],"source":"This was changed because the earlier behavior could lead to subtle and hard\nto diagnose bugs involving lambda expressions."},{"content":"For more information about lambda expressions, see <bpt id=\"p1\">[</bpt>Lambda expressions<ept id=\"p1\">](./programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.","pos":[7284,7432],"source":" For more information about lambda expressions, see [Lambda expressions](./programming-guide/statements-expressions-operators/lambda-expressions.md)."},{"content":"The exact code generated by the compiler is somewhat more complicated, and handles situations where the object returned by <ph id=\"ph1\">`GetEnumerator()`</ph> implements the <ph id=\"ph2\">`IDisposable`</ph> interface.","pos":[7434,7614],"source":"The exact code generated by the compiler is somewhat more complicated, and\nhandles situations where the object returned by `GetEnumerator()` implements\nthe `IDisposable` interface."},{"content":"The full expansion generates code more like this:","pos":[7615,7664]},{"content":"The manner in which the enumerator is disposed of depends on the characteristics of the type of <ph id=\"ph1\">`enumerator`</ph>.","pos":[7959,8068],"source":"The manner in which the enumerator is disposed of depends on the characteristics of\nthe type of `enumerator`."},{"content":"In the general case, the <ph id=\"ph1\">`finally`</ph> clause expands to:","pos":[8069,8122],"source":" In the general case, the `finally` clause expands to:"},{"pos":[8196,8381],"content":"However, if the type of <ph id=\"ph1\">`enumerator`</ph> is a sealed type and there is no implicit conversion from the type of <ph id=\"ph2\">`enumerator`</ph> to <ph id=\"ph3\">`IDisposable`</ph>, the <ph id=\"ph4\">`finally`</ph> clause expands to an empty block:","source":"However, if the type of `enumerator` is a sealed type and there is no implicit\nconversion from the type of `enumerator` to `IDisposable`, the `finally` clause\nexpands to an empty block:"},{"pos":[8411,8573],"content":"If there is an implicit conversion from the type of <ph id=\"ph1\">`enumerator`</ph> to <ph id=\"ph2\">`IDisposable`</ph>, and <ph id=\"ph3\">`enumerator`</ph> is a non-nullable value type, the <ph id=\"ph4\">`finally`</ph> clause expands to:","source":"If there is an implicit conversion from the type of `enumerator` to `IDisposable`,\nand `enumerator` is a non-nullable value type, the `finally` clause expands to:"},{"content":"Thankfully, you don't need to remember all these details.","pos":[8644,8701]},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement handles all those nuances for you.","pos":[8702,8760],"source":" The `foreach` statement\nhandles all those nuances for you."},{"content":"The compiler will generate the correct code for any of these constructs.","pos":[8761,8833],"source":" The compiler will generate the correct code for\nany of these constructs."}]}