{"content":"---\ntitle: \"How to: Perform an XSLT Transformation by Using an Assembly\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 76ee440b-d134-4f8f-8262-b917ad6dcbf6\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# How to: Perform an XSLT Transformation by Using an Assembly\nThe XSLT compiler (xsltc.exe) compiles XSLT style sheets and generates an assembly. The assembly can be passed directly into the <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Type%29?displayProperty=nameWithType> method.  \n  \n### To copy the XML and XSLT files to your local computer  \n  \n-   Copy the XSLT file to your local computer and name it Transform.xsl.  \n  \n    ```xml  \n    <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"  \n      xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"  \n      xmlns:user=\"urn:my-scripts\">  \n      <msxsl:script language=\"C#\" implements-prefix=\"user\">  \n        <![CDATA[  \n      public string discount(string price){  \n        char[] trimChars = { '$' };  \n        //trim leading $, convert price to type double  \n        double discount_value = Convert.ToDouble(price.TrimStart(trimChars));  \n        //apply 10% discount and round appropriately  \n        discount_value = .9*discount_value;  \n        //convert value to decimal and format as currency  \n        string discount_price = discount_value.ToString(\"C\");  \n        return discount_price;  \n      }  \n      ]]>  \n      </msxsl:script>  \n      <xsl:template match=\"catalog\">  \n        <html>  \n          <head></head>  \n          <body>  \n            <table border=\"1\">  \n              <tr>  \n                <th align=\"left\">Title</th>  \n                <th align=\"left\">Author</th>  \n                <th align=\"left\">Genre</th>  \n                <th align=\"left\">Publish Date</th>  \n                <th align=\"left\">Price</th>  \n              </tr>  \n              <xsl:for-each select=\"book\">  \n                <tr>  \n                  <td>  \n                    <xsl:value-of select=\"title\"/>  \n                  </td>  \n                  <td>  \n                    <xsl:value-of select=\"author\"/>  \n                  </td>  \n                  <td>  \n                    <xsl:value-of select=\"genre\"/>  \n                  </td>  \n                  <td>  \n                    <xsl:value-of select=\"publish_date\"/>  \n                  </td>  \n                  <xsl:choose>  \n                    <xsl:when test=\"genre = 'Fantasy'\">  \n                      <td>  \n                        <xsl:value-of select=\"user:discount(price)\"/>  \n                      </td>  \n                    </xsl:when>  \n                    <xsl:otherwise>  \n                      <td>  \n                        <xsl:value-of select=\"price\"/>  \n                      </td>  \n                    </xsl:otherwise>  \n                  </xsl:choose>  \n                </tr>  \n              </xsl:for-each>  \n            </table>  \n          </body>  \n        </html>  \n      </xsl:template>  \n    </xsl:stylesheet>  \n    ```  \n  \n-   Copy the XML file to your local computer and name it `books.xml`.  \n  \n    ```xml  \n    <?xml version=\"1.0\"?>  \n    <catalog>  \n       <book id=\"bk101\">  \n          <author>Gambardella, Matthew</author>  \n          <title>XML Developer's Guide</title>  \n          <genre>Computer</genre>  \n          <price>$44.95</price>  \n          <publish_date>2000-10-01</publish_date>  \n       </book>  \n       <book id=\"bk102\">  \n          <author>Ralls, Kim</author>  \n          <title>Midnight Rain</title>  \n          <genre>Fantasy</genre>  \n          <price>$5.95</price>  \n          <publish_date>2000-12-16</publish_date>  \n       </book>  \n       <book id=\"bk103\">  \n          <author>Corets, Eva</author>  \n          <title>Maeve Ascendant</title>  \n          <genre>Fantasy</genre>  \n          <price>$5.95</price>  \n          <publish_date>2000-11-17</publish_date>  \n       </book>  \n       <book id=\"bk106\">  \n          <author>Randall, Cynthia</author>  \n          <title>Lover Birds</title>  \n          <genre>Romance</genre>  \n          <price>$4.95</price>  \n          <publish_date>2000-09-02</publish_date>  \n       </book>  \n       <book id=\"bk107\">  \n          <author>Thurman, Paula</author>  \n          <title>Splish Splash</title>  \n          <genre>Romance</genre>  \n          <price>$4.95</price>  \n          <publish_date>2000-11-02</publish_date>  \n       </book>  \n    </catalog>  \n    ```  \n  \n### To compile the style sheet with the script enabled.  \n  \n1.  Executing the following command from the command line creates two assemblies named `Transform.dll` and `Transform_Script1.dll` (This is the default behavior. Unless otherwise specified, the name of the class and the assembly defaults to the name of the main style sheet):  \n  \n    ```  \n    xsltc /settings:script+ Transform.xsl  \n    ```  \n  \n The following command explicitly sets the class name to Transform:  \n  \n```  \nxsltc /settings:script+ /class:Transform Transform.xsl  \n```  \n  \n### To include the compiled assembly as a reference when you compile your code.  \n  \n1.  You can include an assembly in Visual Studio by adding a reference in the Solution Explorer, or from the command line.  \n  \n2.  For the command line with C#, use the following:  \n  \n    ```  \n    csc myCode.cs /r:system.dll;system.xml.dll;Transform.dll  \n    ```  \n  \n3.  For the command line with Visual Basic, use the following  \n  \n    ```  \n    vbc myCode.vb /r:system.dll;system.xml.dll;Transform.dll  \n    ```  \n  \n### To use the compiled assembly in your code.  \n  \n1.  The following example shows how to execute the XSLT transformation by using the compiled style sheet.  \n  \n [!code-csharp[XslTransform_XSLTC#1](../../../../samples/snippets/csharp/VS_Snippets_Data/XslTransform_XSLTC/CS/XslTransform_XSLTC.cs#1)]\n [!code-vb[XslTransform_XSLTC#1](../../../../samples/snippets/visualbasic/VS_Snippets_Data/XslTransform_XSLTC/VB/XslTransform_XSLTC.vb#1)]  \n  \n To dynamically link to the compiled assembly, replace  \n  \n```  \nxslt.Load(typeof(Transform))  \n```  \n  \n with  \n  \n```  \nxslt.Load(System.Reflection.Assembly.Load(\"Transform\").GetType(\"Transform\"))  \n```  \n  \n in the example above. For more information on the Assembly.Load method, see <xref:System.Reflection.Assembly.Load%2A>  \n  \n## See also\n\n- <xref:System.Xml.Xsl.XslCompiledTransform>\n- [XSLT Compiler (xsltc.exe)](../../../../docs/standard/data/xml/xslt-compiler-xsltc-exe.md)\n- [XSLT Transformations](../../../../docs/standard/data/xml/xslt-transformations.md)\n- [Command-line Building With csc.exe](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)\n","nodes":[{"pos":[4,245],"embed":true,"restype":"x-metadata","content":"title: \"How to: Perform an XSLT Transformation by Using an Assembly\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 76ee440b-d134-4f8f-8262-b917ad6dcbf6\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"How to: Perform an XSLT Transformation by Using an Assembly","nodes":[{"pos":[0,59],"content":"How to: Perform an XSLT Transformation by Using an Assembly","nodes":[{"content":"How to: Perform an XSLT Transformation by Using an Assembly","pos":[0,59]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[252,311],"content":"How to: Perform an XSLT Transformation by Using an Assembly","linkify":"How to: Perform an XSLT Transformation by Using an Assembly","nodes":[{"content":"How to: Perform an XSLT Transformation by Using an Assembly","pos":[0,59]}]},{"content":"The XSLT compiler (xsltc.exe) compiles XSLT style sheets and generates an assembly.","pos":[312,395]},{"content":"The assembly can be passed directly into the <ph id=\"ph1\">&lt;xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Type%29?displayProperty=nameWithType&gt;</ph> method.","pos":[396,542],"source":" The assembly can be passed directly into the <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Type%29?displayProperty=nameWithType> method."},{"pos":[552,605],"content":"To copy the XML and XSLT files to your local computer","linkify":"To copy the XML and XSLT files to your local computer","nodes":[{"content":"To copy the XML and XSLT files to your local computer","pos":[0,53]}]},{"content":"Copy the XSLT file to your local computer and name it Transform.xsl.","pos":[615,683]},{"pos":[3056,3121],"content":"Copy the XML file to your local computer and name it <ph id=\"ph1\">`books.xml`</ph>.","source":"Copy the XML file to your local computer and name it `books.xml`."},{"pos":[4474,4525],"content":"To compile the style sheet with the script enabled.","linkify":"To compile the style sheet with the script enabled.","nodes":[{"content":"To compile the style sheet with the script enabled.","pos":[0,51]}]},{"content":"Executing the following command from the command line creates two assemblies named <ph id=\"ph1\">`Transform.dll`</ph> and <ph id=\"ph2\">`Transform_Script1.dll`</ph> (This is the default behavior.","pos":[4535,4692],"source":"Executing the following command from the command line creates two assemblies named `Transform.dll` and `Transform_Script1.dll` (This is the default behavior."},{"content":"Unless otherwise specified, the name of the class and the assembly defaults to the name of the main style sheet):","pos":[4693,4806]},{"content":"The following command explicitly sets the class name to Transform:","pos":[4880,4946]},{"pos":[5028,5103],"content":"To include the compiled assembly as a reference when you compile your code.","linkify":"To include the compiled assembly as a reference when you compile your code.","nodes":[{"content":"To include the compiled assembly as a reference when you compile your code.","pos":[0,75]}]},{"content":"You can include an assembly in Visual Studio by adding a reference in the Solution Explorer, or from the command line.","pos":[5113,5231]},{"content":"For the command line with C#, use the following:","pos":[5241,5289]},{"content":"For the command line with Visual Basic, use the following","pos":[5385,5442]},{"pos":[5538,5580],"content":"To use the compiled assembly in your code.","linkify":"To use the compiled assembly in your code.","nodes":[{"content":"To use the compiled assembly in your code.","pos":[0,42]}]},{"content":"The following example shows how to execute the XSLT transformation by using the compiled style sheet.","pos":[5590,5691]},{"pos":[5698,5973],"content":"[!code-csharp[XslTransform_XSLTC#1](../../../../samples/snippets/csharp/VS_Snippets_Data/XslTransform_XSLTC/CS/XslTransform_XSLTC.cs#1)]\n[!code-vb[XslTransform_XSLTC#1](../../../../samples/snippets/visualbasic/VS_Snippets_Data/XslTransform_XSLTC/VB/XslTransform_XSLTC.vb#1)]","leadings":[""," "],"nodes":[]},{"content":"To dynamically link to the compiled assembly, replace","pos":[5980,6033]},{"content":"with","pos":[6086,6090]},{"content":"in the example above.","pos":[6191,6212]},{"content":"For more information on the Assembly.Load method, see <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>","pos":[6213,6308],"source":" For more information on the Assembly.Load method, see <xref:System.Reflection.Assembly.Load%2A>"},{"pos":[6317,6325],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6374,6464],"content":"<bpt id=\"p1\">[</bpt>XSLT Compiler (xsltc.exe)<ept id=\"p1\">](../../../../docs/standard/data/xml/xslt-compiler-xsltc-exe.md)</ept>","source":"[XSLT Compiler (xsltc.exe)](../../../../docs/standard/data/xml/xslt-compiler-xsltc-exe.md)"},{"pos":[6467,6549],"content":"<bpt id=\"p1\">[</bpt>XSLT Transformations<ept id=\"p1\">](../../../../docs/standard/data/xml/xslt-transformations.md)</ept>","source":"[XSLT Transformations](../../../../docs/standard/data/xml/xslt-transformations.md)"},{"pos":[6552,6677],"content":"<bpt id=\"p1\">[</bpt>Command-line Building With csc.exe<ept id=\"p1\">](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>","source":"[Command-line Building With csc.exe](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)"}]}