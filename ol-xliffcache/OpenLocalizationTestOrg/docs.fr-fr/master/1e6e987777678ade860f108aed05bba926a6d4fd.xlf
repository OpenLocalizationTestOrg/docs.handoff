<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e6e987777678ade860f108aed05bba926a6d4fd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\testing-with-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">926fc55913bb45586cd9e1a7fd00d479613b84a2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b44cb0d87e8db68ee6928082bdd865d08cbe6af3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to organize and test .NET Core projects from the command line.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, unit testing, .NET CLI, xUnit</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial follows <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line<ept id="p1">](using-with-xplat-cli.md)</ept>, taking you beyond the creation of a simple console app to develop advanced and well-organized applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>After showing you how to use folders to organize your code, this tutorial shows you how to extend a console application with the <bpt id="p1">[</bpt>xUnit<ept id="p1">](https://xunit.github.io/)</ept> testing framework.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using folders to organize code</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you want to introduce new types into a console app, you can do so by adding files containing the types to the app.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example if you add files containing <ph id="ph1">`AccountInformation`</ph> and <ph id="ph2">`MonthlyReportRecords`</ph> types to your project, the project file structure is flat and easy to navigate:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, this only works well when the size of your project is relatively small.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Can you imagine what will happen if you add 20 types to the project?</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The project definitely wouldn't be easy to navigate and maintain with that many files littering the project's root directory.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To organize the project, create a new folder and name it <bpt id="p1">*</bpt>Models<ept id="p1">*</ept> to hold the type files.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Place the type files into the <bpt id="p1">*</bpt>Models<ept id="p1">*</ept> folder:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Projects that logically group files into folders are easy to navigate and maintain.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the next section, you create a more complex sample with folders and unit testing.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Organizing and testing using the NewTypes Pets Sample</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Building the sample</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For the following steps, you can either follow along using the <bpt id="p1">[</bpt>NewTypes Pets Sample<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept> or create your own files and folders.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The types are logically organized into a folder structure that permits the addition of more types later, and tests are also logically placed in folders permitting the addition of more tests later.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The sample contains two types, <ph id="ph1">`Dog`</ph> and <ph id="ph2">`Cat`</ph>, and has them implement a common interface, <ph id="ph3">`IPet`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`NewTypes`</ph> project, your goal is to organize the pet-related types into a <bpt id="p1">*</bpt>Pets<ept id="p1">*</ept> folder.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If another set of types is added later, <bpt id="p1">*</bpt>WildAnimals<ept id="p1">*</ept> for example, they're placed in the <bpt id="p2">*</bpt>NewTypes<ept id="p2">*</ept> folder alongside the <bpt id="p3">*</bpt>Pets<ept id="p3">*</ept> folder.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>WildAnimals<ept id="p1">*</ept> folder may contain types for animals that aren't pets, such as <ph id="ph1">`Squirrel`</ph> and <ph id="ph2">`Rabbit`</ph> types.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this way as types are added, the project remains well organized.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create the following folder structure with file content indicated:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>IPet.cs<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>IPet interface<ept id="p2">](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/Pets/IPet.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Dog.cs<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Dog class<ept id="p2">](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/Pets/Dog.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Cat.cs<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Cat class<ept id="p2">](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/Pets/Cat.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Main<ept id="p2">](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/Program.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>NewTypes.csproj<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NewTypes csproj<ept id="p2">](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/NewTypes.csproj)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Execute the following commands:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Obtain the following output:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Optional exercise: You can add a new pet type, such as a <ph id="ph1">`Bird`</ph>, by extending this project.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Make the bird's <ph id="ph1">`TalkToOwner`</ph> method give a <ph id="ph2">`Tweet!`</ph> to the owner.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Run the app again.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The output will include <ph id="ph1">`Tweet!`</ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Testing the sample</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NewTypes`</ph> project is in place, and you've organized it by keeping the pets-related types in a folder.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Next, create your test project and start writing tests with the <bpt id="p1">[</bpt>xUnit<ept id="p1">](https://xunit.github.io/)</ept> test framework.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Unit testing allows you to automatically check the bevahior of your pet types to confirm that they're operating properly.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Create a <bpt id="p1">*</bpt>test<ept id="p1">*</ept> folder with a <bpt id="p2">*</bpt>NewTypesTests<ept id="p2">*</ept> folder within it.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>At a command prompt from the <bpt id="p1">*</bpt>NewTypesTests<ept id="p1">*</ept> folder, execute <ph id="ph1">`dotnet new xunit`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This produces two files: <bpt id="p1">*</bpt>NewTypesTests.csproj<ept id="p1">*</ept> and <bpt id="p2">*</bpt>UnitTest1.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The test project cannot currently test the types in <ph id="ph1">`NewTypes`</ph> and requires a project reference to the <ph id="ph2">`NewTypes`</ph> project.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To add a project reference, use the <bpt id="p1">[</bpt><ph id="ph1">`dotnet add reference`</ph><ept id="p1">](../tools/dotnet-add-reference.md)</ept> command:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You also have the option of manually adding the project reference by adding an <ph id="ph1">`&lt;ItemGroup&gt;`</ph> node to the <bpt id="p1">*</bpt>NewTypesTests.csproj<ept id="p1">*</ept> file:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>NewTypesTests.csproj<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NewTypesTests csproj<ept id="p2">](../../../samples/core/console-apps/NewTypesMsBuild/test/NewTypesTests/NewTypesTests.csproj)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>NewTypesTests.csproj<ept id="p1">*</ept> file contains the following:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Package reference to <ph id="ph1">`Microsoft.NET.Test.Sdk`</ph>, the .NET testing infrastructure</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Package reference to <ph id="ph1">`xunit`</ph>, the xUnit testing framework</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Package reference to <ph id="ph1">`xunit.runner.visualstudio`</ph>, the test runner</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Project reference to <ph id="ph1">`NewTypes`</ph>, the code to test</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Change the name of <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> to <bpt id="p2">*</bpt>PetTests.cs<ept id="p2">*</ept> and replace the code in the file with the following:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Optional exercise: If you added a <ph id="ph1">`Bird`</ph> type earlier that yields a <ph id="ph2">`Tweet!`</ph> to the owner, add a test method to the <bpt id="p1">*</bpt>PetTests.cs<ept id="p1">*</ept> file, <ph id="ph3">`BirdTalkToOwnerReturnsTweet`</ph>, to check that the <ph id="ph4">`TalkToOwner`</ph> method works correctly for the <ph id="ph5">`Bird`</ph> type.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Although you expect that the <ph id="ph1">`expected`</ph> and <ph id="ph2">`actual`</ph> values are equal, the initial assertions with the <ph id="ph3">`Assert.NotEqual`</ph> checks specify that they are <bpt id="p1">*</bpt>not equal<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Always initially create your tests to fail once in order to check the logic of the tests.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This is an important step in test-driven design (TDD) methodology.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>After you confirm the tests fail, you adjust the assertions to allow them to pass.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following shows the complete project structure:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Start in the <bpt id="p1">*</bpt>test/NewTypesTests<ept id="p1">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Restore the test project with the <bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> command.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Run the tests with the <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> command.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This command starts the test runner specified in the project file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>As expected, testing fails, and the console displays the following output:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Change the assertions of your tests from <ph id="ph1">`Assert.NotEqual`</ph> to <ph id="ph2">`Assert.Equal`</ph>:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>PetTests class<ept id="p2">](../../../samples/core/console-apps/NewTypesMsBuild/test/NewTypesTests/PetTests.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Re-run the tests with the <ph id="ph1">`dotnet test`</ph> command and obtain the following output:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Testing passes.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The pet types' methods return the correct values when talking to the owner.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You've learned techniques for organizing and testing projects using xUnit.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Go forward with these techniques applying them in your own projects.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Happy coding!<ept id="p1">*</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>