{"content":"---\ntitle: \"Variables in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"variables [Visual Basic]\"\n  - \"values [Visual Basic], storing\"\nms.assetid: 4cfaa06d-4ae3-4307-897b-cf599dc24caa\ncaps.latest.revision: 27\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Variables in Visual Basic\nYou often have to store values when you perform calculations with [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]. For example, you might want to calculate several values, compare them, and perform different operations on them, depending on the result of the comparison. You have to retain the values if you want to compare them.  \n  \n## Usage  \n [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)], just like most programming languages, uses variables for storing values. A *variable* has a name (the word that you use to refer to the value that the variable contains). A variable also has a data type (which determines the kind of data that the variable can store). A variable can represent an array if it has to store an indexed set of closely related data items.  \n  \n Local type inference enables you to declare variables without explicitly stating a data type. Instead, the compiler infers the type of the variable from the type of the initialization expression. For more information, see [Local Type Inference](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md) and [Option Infer Statement](../../../../visual-basic/language-reference/statements/option-infer-statement.md).  \n  \n## Assigning Values  \n You use assignment statements to perform calculations and assign the result to a variable, as the following example shows.  \n  \n [!code-vb[VbVbalrVariables#1](../../../../visual-basic/programming-guide/language-features/variables/codesnippet/VisualBasic/index_1.vb)]  \n  \n> [!NOTE]\n>  The equal sign (`=`) in this example is an assignment operator, not an equality operator. The value is being assigned to the variable `applesSold`.  \n  \n For more information, see [How to: Move Data Into and Out of a Variable](../../../../visual-basic/programming-guide/language-features/variables/how-to-move-data-into-and-out-of-a-variable.md).  \n  \n## Variables and Properties  \n Like a variable, a *property* represents a value that you can access. However, it is more complex than a variable. A property uses code blocks that control how to set and retrieve its value. For more information, see [Differences Between Properties and Variables in Visual Basic](../../../../visual-basic/programming-guide/language-features/procedures/differences-between-properties-and-variables.md).  \n  \n## See Also  \n [Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)   \n [Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)   \n [Troubleshooting Variables](../../../../visual-basic/programming-guide/language-features/variables/troubleshooting-variables.md)   \n [How to: Move Data Into and Out of a Variable](../../../../visual-basic/programming-guide/language-features/variables/how-to-move-data-into-and-out-of-a-variable.md)   \n [Differences Between Properties and Variables in Visual Basic](../../../../visual-basic/programming-guide/language-features/procedures/differences-between-properties-and-variables.md)   \n [Local Type Inference](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)","nodes":[{"pos":[4,627],"embed":true,"restype":"x-metadata","content":"title: \"Variables in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"variables [Visual Basic]\"\n  - \"values [Visual Basic], storing\"\nms.assetid: 4cfaa06d-4ae3-4307-897b-cf599dc24caa\ncaps.latest.revision: 27\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Variables in Visual Basic | Microsoft Docs","nodes":[{"pos":[0,42],"content":"Variables in Visual Basic | Microsoft Docs","nodes":[{"content":"Variables in Visual Basic | Microsoft Docs","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[634,659],"content":"Variables in Visual Basic","linkify":"Variables in Visual Basic","nodes":[{"content":"Variables in Visual Basic","pos":[0,25]}]},{"content":"You often have to store values when you perform calculations with <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.","pos":[660,819],"source":"You often have to store values when you perform calculations with [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]."},{"content":"For example, you might want to calculate several values, compare them, and perform different operations on them, depending on the result of the comparison.","pos":[820,975]},{"content":"You have to retain the values if you want to compare them.","pos":[976,1034]},{"pos":[1043,1048],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":", just like most programming languages, uses variables for storing values.","pos":[1144,1218]},{"content":"A <bpt id=\"p1\">*</bpt>variable<ept id=\"p1\">*</ept> has a name (the word that you use to refer to the value that the variable contains).","pos":[1219,1316],"source":" A *variable* has a name (the word that you use to refer to the value that the variable contains)."},{"content":"A variable also has a data type (which determines the kind of data that the variable can store).","pos":[1317,1413]},{"content":"A variable can represent an array if it has to store an indexed set of closely related data items.","pos":[1414,1512]},{"content":"Local type inference enables you to declare variables without explicitly stating a data type.","pos":[1519,1612]},{"content":"Instead, the compiler infers the type of the variable from the type of the initialization expression.","pos":[1613,1714]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept> and <bpt id=\"p2\">[</bpt>Option Infer Statement<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>.","pos":[1715,1971],"source":" For more information, see [Local Type Inference](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md) and [Option Infer Statement](../../../../visual-basic/language-reference/statements/option-infer-statement.md)."},{"pos":[1980,1996],"content":"Assigning Values","linkify":"Assigning Values","nodes":[{"content":"Assigning Values","pos":[0,16]}]},{"content":"You use assignment statements to perform calculations and assign the result to a variable, as the following example shows.","pos":[2000,2122]},{"pos":[2274,2432],"content":"[!NOTE]\n The equal sign (`=`) in this example is an assignment operator, not an equality operator. The value is being assigned to the variable `applesSold`.","leadings":["","> "],"nodes":[{"content":"The equal sign (`=`) in this example is an assignment operator, not an equality operator. The value is being assigned to the variable `applesSold`.","pos":[9,156],"nodes":[{"content":"The equal sign (<ph id=\"ph1\">`=`</ph>) in this example is an assignment operator, not an equality operator.","pos":[0,89],"source":"The equal sign (`=`) in this example is an assignment operator, not an equality operator."},{"content":"The value is being assigned to the variable <ph id=\"ph1\">`applesSold`</ph>.","pos":[90,147],"source":" The value is being assigned to the variable `applesSold`."}]}]},{"pos":[2439,2631],"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Move Data Into and Out of a Variable<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/how-to-move-data-into-and-out-of-a-variable.md)</ept>.","source":"For more information, see [How to: Move Data Into and Out of a Variable](../../../../visual-basic/programming-guide/language-features/variables/how-to-move-data-into-and-out-of-a-variable.md)."},{"pos":[2640,2664],"content":"Variables and Properties","linkify":"Variables and Properties","nodes":[{"content":"Variables and Properties","pos":[0,24]}]},{"content":"Like a variable, a <bpt id=\"p1\">*</bpt>property<ept id=\"p1\">*</ept> represents a value that you can access.","pos":[2668,2737],"source":"Like a variable, a *property* represents a value that you can access."},{"content":"However, it is more complex than a variable.","pos":[2738,2782]},{"content":"A property uses code blocks that control how to set and retrieve its value.","pos":[2783,2858]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Differences Between Properties and Variables in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/differences-between-properties-and-variables.md)</ept>.","pos":[2859,3069],"source":" For more information, see [Differences Between Properties and Variables in Visual Basic](../../../../visual-basic/programming-guide/language-features/procedures/differences-between-properties-and-variables.md)."},{"pos":[3078,3086],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Variable Declaration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept><ph id=\"ph1\"> </ph>","pos":[3090,3209],"source":"[Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md) "},{"content":"<bpt id=\"p1\">[</bpt>Object Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)</ept><ph id=\"ph1\"> </ph>","pos":[3213,3324],"source":"[Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md) "},{"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/troubleshooting-variables.md)</ept><ph id=\"ph1\"> </ph>","pos":[3328,3457],"source":"[Troubleshooting Variables](../../../../visual-basic/programming-guide/language-features/variables/troubleshooting-variables.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Move Data Into and Out of a Variable<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/how-to-move-data-into-and-out-of-a-variable.md)</ept><ph id=\"ph1\"> </ph>","pos":[3461,3627],"source":"[How to: Move Data Into and Out of a Variable](../../../../visual-basic/programming-guide/language-features/variables/how-to-move-data-into-and-out-of-a-variable.md) "},{"content":"<bpt id=\"p1\">[</bpt>Differences Between Properties and Variables in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/differences-between-properties-and-variables.md)</ept><ph id=\"ph1\"> </ph>","pos":[3631,3815],"source":"[Differences Between Properties and Variables in Visual Basic](../../../../visual-basic/programming-guide/language-features/procedures/differences-between-properties-and-variables.md) "},{"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>","pos":[3819,3937],"source":"[Local Type Inference](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)"}]}