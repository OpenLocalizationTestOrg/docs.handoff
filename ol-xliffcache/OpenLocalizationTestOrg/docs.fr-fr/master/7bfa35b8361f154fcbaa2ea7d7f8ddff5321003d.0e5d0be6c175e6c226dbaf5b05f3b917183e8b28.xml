{"content":"---\ntitle: \"Asynchronous File I/O\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"streams, synchronous streams\"\n  - \"asynchronous I/O\"\n  - \"synchronous I/O\"\n  - \"streams, asynchronous streams\"\n  - \"I/O [.NET Framework], asynchronous I/O\"\n  - \"Stream class, synchronous I/O\"\n  - \"data streams, asynchronous streams\"\n  - \"Stream class, asynchronous I/O\"\n  - \"multiple I/O requests\"\n  - \"data streams, synchronous streams\"\nms.assetid: dbdd55e7-d6b9-4f9e-8abb-ab0edd4457f7\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Asynchronous File I/O\n\nAsynchronous operations enable you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../../../includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.\n\nStarting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], the I/O types include async methods to simplify asynchronous operations. An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, <xref:System.IO.Stream.FlushAsync%2A>, <xref:System.IO.TextReader.ReadLineAsync%2A>, and <xref:System.IO.TextReader.ReadToEndAsync%2A>. These async methods are implemented on stream classes, such as <xref:System.IO.Stream>, <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>, and on classes that are used for reading from or writing to streams, such <xref:System.IO.TextReader> and <xref:System.IO.TextWriter>.\n\nIn the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] to support legacy code; however, the async methods help you implement asynchronous I/O operations more easily.\n\nC# and Visual Basic each have two keywords for asynchronous programming:\n\n- `Async` (Visual Basic) or `async` (C#) modifier, which is used to mark a method that contains an asynchronous operation.\n\n- `Await` (Visual Basic) or `await` (C#) operator, which is applied to the result of an async method.\n\nTo implement asynchronous I/O operations, use these keywords in conjunction with the async methods, as shown in the following examples. For more information, see [Asynchronous programming with async and await (C#)](../../csharp/programming-guide/concepts/async/index.md) or [Asynchronous Programming with Async and Await (Visual Basic)](../../visual-basic/programming-guide/concepts/async/index.md).\n\nThe following example demonstrates how to use two <xref:System.IO.FileStream> objects to copy files asynchronously from one directory to another. Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method.\n\n[!code-csharp[Asynchronous_File_IO_async#1](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]\n[!code-vb[Asynchronous_File_IO_async#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]\n\nThe next example is similar to the previous one but uses <xref:System.IO.StreamReader> and <xref:System.IO.StreamWriter> objects to read and write the contents of a text file asynchronously.\n\n[!code-csharp[Asynchronous_File_IO_async#2](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example2.cs#2)]\n[!code-vb[Asynchronous_File_IO_async#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example2.vb#2)]\n\nThe next example shows the code-behind file and the XAML file that are used to open a file as a <xref:System.IO.Stream> in a [!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)] app, and read its contents by using an instance of the <xref:System.IO.StreamReader> class. It uses asynchronous methods to open the file as a stream and to read its contents.\n\n[!code-csharp[System.IO.WindowsRuntimeStorageExtensions#2](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml.cs#2)]\n[!code-vb[System.IO.WindowsRuntimeStorageExtensions#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage.xaml.vb#2)]\n\n[!code-xaml[System.IO.WindowsRuntimeStorageExtensions#1](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml#1)]\n\n## See also\n\n- <xref:System.IO.Stream>\n- [File and Stream I/O](index.md)\n- [Asynchronous programming with async and await (C#)](../../csharp/programming-guide/concepts/async/index.md)\n- [Asynchronous Programming with Async and Await (Visual Basic)](../../visual-basic/programming-guide/concepts/async/index.md)","nodes":[{"pos":[4,570],"embed":true,"restype":"x-metadata","content":"title: \"Asynchronous File I/O\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"streams, synchronous streams\"\n  - \"asynchronous I/O\"\n  - \"synchronous I/O\"\n  - \"streams, asynchronous streams\"\n  - \"I/O [.NET Framework], asynchronous I/O\"\n  - \"Stream class, synchronous I/O\"\n  - \"data streams, asynchronous streams\"\n  - \"Stream class, asynchronous I/O\"\n  - \"multiple I/O requests\"\n  - \"data streams, synchronous streams\"\nms.assetid: dbdd55e7-d6b9-4f9e-8abb-ab0edd4457f7\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Asynchronous File I/O","nodes":[{"pos":[0,21],"content":"Asynchronous File I/O","nodes":[{"content":"Asynchronous File I/O","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[577,598],"content":"Asynchronous File I/O","linkify":"Asynchronous File I/O","nodes":[{"content":"Asynchronous File I/O","pos":[0,21]}]},{"content":"Asynchronous operations enable you to perform resource-intensive I/O operations without blocking the main thread.","pos":[600,713]},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](../../../includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[714,1042],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../../../includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, the I/O types include async methods to simplify asynchronous operations.","pos":[1044,1188],"source":"Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], the I/O types include async methods to simplify asynchronous operations."},{"content":"An async method contains <ph id=\"ph1\">`Async`</ph> in its name, such as <ph id=\"ph2\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph>, and <ph id=\"ph7\">&lt;xref:System.IO.TextReader.ReadToEndAsync%2A&gt;</ph>.","pos":[1189,1495],"source":" An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, <xref:System.IO.Stream.FlushAsync%2A>, <xref:System.IO.TextReader.ReadLineAsync%2A>, and <xref:System.IO.TextReader.ReadToEndAsync%2A>."},{"content":"These async methods are implemented on stream classes, such as <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream&gt;</ph>, and on classes that are used for reading from or writing to streams, such <ph id=\"ph4\">&lt;xref:System.IO.TextReader&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.IO.TextWriter&gt;</ph>.","pos":[1496,1782],"source":" These async methods are implemented on stream classes, such as <xref:System.IO.Stream>, <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>, and on classes that are used for reading from or writing to streams, such <xref:System.IO.TextReader> and <xref:System.IO.TextWriter>."},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.","pos":[1784,1979],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> to support legacy code; however, the async methods help you implement asynchronous I/O operations more easily.","pos":[1980,2184],"source":" These methods are still available in the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] to support legacy code; however, the async methods help you implement asynchronous I/O operations more easily."},{"content":"C# and Visual Basic each have two keywords for asynchronous programming:","pos":[2186,2258]},{"pos":[2262,2382],"content":"<ph id=\"ph1\">`Async`</ph> (Visual Basic) or <ph id=\"ph2\">`async`</ph> (C#) modifier, which is used to mark a method that contains an asynchronous operation.","source":"`Async` (Visual Basic) or `async` (C#) modifier, which is used to mark a method that contains an asynchronous operation."},{"pos":[2386,2485],"content":"<ph id=\"ph1\">`Await`</ph> (Visual Basic) or <ph id=\"ph2\">`await`</ph> (C#) operator, which is applied to the result of an async method.","source":"`Await` (Visual Basic) or `await` (C#) operator, which is applied to the result of an async method."},{"content":"To implement asynchronous I/O operations, use these keywords in conjunction with the async methods, as shown in the following examples.","pos":[2487,2622]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous programming with async and await (C#)<ept id=\"p1\">](../../csharp/programming-guide/concepts/async/index.md)</ept> or <bpt id=\"p2\">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id=\"p2\">](../../visual-basic/programming-guide/concepts/async/index.md)</ept>.","pos":[2623,2886],"source":" For more information, see [Asynchronous programming with async and await (C#)](../../csharp/programming-guide/concepts/async/index.md) or [Asynchronous Programming with Async and Await (Visual Basic)](../../visual-basic/programming-guide/concepts/async/index.md)."},{"content":"The following example demonstrates how to use two <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> objects to copy files asynchronously from one directory to another.","pos":[2888,3033],"source":"The following example demonstrates how to use two <xref:System.IO.FileStream> objects to copy files asynchronously from one directory to another."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id=\"ph3\">`async`</ph> modifier because it calls an asynchronous method.","pos":[3034,3240],"source":" Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method."},{"pos":[3520,3710],"content":"The next example is similar to the previous one but uses <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter&gt;</ph> objects to read and write the contents of a text file asynchronously.","source":"The next example is similar to the previous one but uses <xref:System.IO.StreamReader> and <xref:System.IO.StreamWriter> objects to read and write the contents of a text file asynchronously."},{"content":"The next example shows the code-behind file and the XAML file that are used to open a file as a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> in a <ph id=\"ph2\">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app, and read its contents by using an instance of the <ph id=\"ph3\">&lt;xref:System.IO.StreamReader&gt;</ph> class.","pos":[3992,4281],"source":"The next example shows the code-behind file and the XAML file that are used to open a file as a <xref:System.IO.Stream> in a [!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)] app, and read its contents by using an instance of the <xref:System.IO.StreamReader> class."},{"content":"It uses asynchronous methods to open the file as a stream and to read its contents.","pos":[4282,4365]},{"pos":[4914,4922],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4952,4983],"content":"<bpt id=\"p1\">[</bpt>File and Stream I/O<ept id=\"p1\">](index.md)</ept>","source":"[File and Stream I/O](index.md)"},{"pos":[4986,5094],"content":"<bpt id=\"p1\">[</bpt>Asynchronous programming with async and await (C#)<ept id=\"p1\">](../../csharp/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous programming with async and await (C#)](../../csharp/programming-guide/concepts/async/index.md)"},{"pos":[5097,5221],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id=\"p1\">](../../visual-basic/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous Programming with Async and Await (Visual Basic)](../../visual-basic/programming-guide/concepts/async/index.md)"}]}