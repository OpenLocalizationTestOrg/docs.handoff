{"content":"---\ntitle: dotnet-pack command - .NET Core CLI | Microsoft Docs\ndescription: The dotnet-pack command creates NuGet packages for your .NET Core project.\nkeywords: dotnet-pack, CLI, CLI command, .NET Core\nauthor: blackdwarf\nms.author: mairaw\nms.date: 03/15/2017\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-cli\nms.devlang: dotnet\nms.assetid: 8dbbb3f7-b817-4161-a6c8-a3489d05e051\n---\n\n# dotnet-pack\n\n## Name\n\n`dotnet-pack` - Packs the code into a NuGet package.\n\n## Synopsis\n\n`dotnet pack [<PROJECT>] [-o|--output] [--no-build] [--include-symbols] [--include-source] [-c|--configuration] [--version-suffix <VERSION_SUFFIX>] [-s|--serviceable] [-v|--verbosity] [-h|--help]`\n\n## Description\n\nThe `dotnet pack` command builds the project and creates NuGet packages. The result of this command is a NuGet package. If the `--include-symbols` option is present, another package containing the debug symbols is created. \n\nNuGet dependencies of the packed project are added to the *.nuspec* file, so they're properly resolved when the package is installed. Project-to-project references aren't packaged inside the project. Currently, you must have a package per project if you have project-to-project dependencies.\n\nBy default, `dotnet pack` builds the project first. If you wish to avoid this behavior, pass the `--no-build` option. This is often useful in Continuous Integration (CI) build scenarios where you know the code was previously built.\n\nYou can provide MSBuild properties to the `dotnet pack` command for the packing process. For more information, see [NuGet metadata properties](csproj.md#nuget-metadata-properties) and the [MSBuild Command-Line Reference](/visualstudio/msbuild/msbuild-command-line-reference).\n\n## Arguments\n\n`PROJECT` \n    \nThe project to pack. It's either a path to a [csproj file](csproj.md) or to a directory. If omitted, it defaults to the current directory. \n\n## Options\n\n`-h|--help`\n\nPrints out a short help for the command.  \n\n`-o|--output <OUTPUT_DIRECTORY>`\n\nPlaces the built packages in the directory specified. \n\n`--no-build`\n\nDon't build the project before packing. \n\n`--include-symbols`\n\nGenerates the symbols `nupkg`. \n\n`--include-source`\n\nIncludes the source files in the NuGet package. The sources files are included in the `src` folder within the `nupkg`. \n\n`-c|--configuration <CONFIGURATION>`\n\nConfiguration to use when building the project. If not specified, configuration defaults to `Debug`.\n\n`--version-suffix <VERSION_SUFFIX>`\n\nDefines the value for the `$(VersionSuffix)` MSBuild property in the project.\n\n`-s|--serviceable`\n\nSets the serviceable flag in the package. For more information, see [.NET Blog: .NET 4.5.1 Supports Microsoft Security Updates for .NET NuGet Libraries](https://aka.ms/nupkgservicing).\n\n`--verbosity <LEVEL>`\n\nSets the verbosity level of the command. Allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`.\n\n## Examples\n\nPack the project in the current directory:\n\n`dotnet pack`\n\nPack the `app1` project:\n\n`dotnet pack ~/projects/app1/project.csproj`\n    \nPack the project in the current directory and place the resulting packages into the `nupkgs` folder:\n\n`dotnet pack --output nupkgs`\n\nPack the project in the current directory into the `nupkgs` folder and skip the build step:\n\n`dotnet pack --no-build --output nupkgs`\n\nWith the project's version suffix configured as `<VersionSuffix>$(VersionSuffix)</VersionSuffix>` in the *.csproj* file, pack the current project and update the resulting package version with the given suffix:\n\n`dotnet pack --version-suffix \"ci-1234\"`\n\nSet the package version to `2.1.0` with the `PackageVersion` MSBuild property:\n\n`dotnet pack /p:PackageVersion=2.1.0`\n","nodes":[{"pos":[11,63],"content":"dotnet-pack command - .NET Core CLI | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"dotnet-pack command - .NET Core CLI | Microsoft Docs","pos":[0,52]}]},{"pos":[77,151],"content":"The dotnet-pack command creates NuGet packages for your .NET Core project.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dotnet-pack command creates NuGet packages for your .NET Core project.","pos":[0,74]}]},{"pos":[162,202],"content":"dotnet-pack, CLI, CLI command, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":"dotnet-pack, CLI, CLI command, .NET Core","pos":[0,40]}]},{"pos":[398,409],"content":"dotnet-pack","linkify":"dotnet-pack","nodes":[{"content":"dotnet-pack","pos":[0,11]}]},{"pos":[414,418],"content":"Name","linkify":"Name","nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[420,472],"content":"<ph id=\"ph1\">`dotnet-pack`</ph> - Packs the code into a NuGet package.","source":"`dotnet-pack` - Packs the code into a NuGet package."},{"pos":[477,485],"content":"Synopsis","linkify":"Synopsis","nodes":[{"content":"Synopsis","pos":[0,8]}]},{"pos":[688,699],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`dotnet pack`</ph> command builds the project and creates NuGet packages.","pos":[701,773],"source":"The `dotnet pack` command builds the project and creates NuGet packages."},{"content":"The result of this command is a NuGet package.","pos":[774,820]},{"content":"If the <ph id=\"ph1\">`--include-symbols`</ph> option is present, another package containing the debug symbols is created.","pos":[821,923],"source":" If the `--include-symbols` option is present, another package containing the debug symbols is created."},{"content":"NuGet dependencies of the packed project are added to the <bpt id=\"p1\">*</bpt>.nuspec<ept id=\"p1\">*</ept> file, so they're properly resolved when the package is installed.","pos":[926,1059],"source":"NuGet dependencies of the packed project are added to the *.nuspec* file, so they're properly resolved when the package is installed."},{"content":"Project-to-project references aren't packaged inside the project.","pos":[1060,1125]},{"content":"Currently, you must have a package per project if you have project-to-project dependencies.","pos":[1126,1217]},{"content":"By default, <ph id=\"ph1\">`dotnet pack`</ph> builds the project first.","pos":[1219,1270],"source":"By default, `dotnet pack` builds the project first."},{"content":"If you wish to avoid this behavior, pass the <ph id=\"ph1\">`--no-build`</ph> option.","pos":[1271,1336],"source":" If you wish to avoid this behavior, pass the `--no-build` option."},{"content":"This is often useful in Continuous Integration (CI) build scenarios where you know the code was previously built.","pos":[1337,1450]},{"content":"You can provide MSBuild properties to the <ph id=\"ph1\">`dotnet pack`</ph> command for the packing process.","pos":[1452,1540],"source":"You can provide MSBuild properties to the `dotnet pack` command for the packing process."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NuGet metadata properties<ept id=\"p1\">](csproj.md#nuget-metadata-properties)</ept> and the <bpt id=\"p2\">[</bpt>MSBuild Command-Line Reference<ept id=\"p2\">](/visualstudio/msbuild/msbuild-command-line-reference)</ept>.","pos":[1541,1727],"source":" For more information, see [NuGet metadata properties](csproj.md#nuget-metadata-properties) and the [MSBuild Command-Line Reference](/visualstudio/msbuild/msbuild-command-line-reference)."},{"pos":[1732,1741],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"The project to pack.","pos":[1759,1779]},{"content":"It's either a path to a <bpt id=\"p1\">[</bpt>csproj file<ept id=\"p1\">](csproj.md)</ept> or to a directory.","pos":[1780,1847],"source":" It's either a path to a [csproj file](csproj.md) or to a directory."},{"content":"If omitted, it defaults to the current directory.","pos":[1848,1897]},{"pos":[1903,1910],"content":"Options","linkify":"Options","nodes":[{"content":"Options","pos":[0,7]}]},{"content":"Prints out a short help for the command.","pos":[1925,1965]},{"content":"Places the built packages in the directory specified.","pos":[2003,2056]},{"content":"Don't build the project before packing.","pos":[2073,2112]},{"pos":[2136,2166],"content":"Generates the symbols <ph id=\"ph1\">`nupkg`</ph>.","source":"Generates the symbols `nupkg`."},{"content":"Includes the source files in the NuGet package.","pos":[2189,2236]},{"content":"The sources files are included in the <ph id=\"ph1\">`src`</ph> folder within the <ph id=\"ph2\">`nupkg`</ph>.","pos":[2237,2307],"source":" The sources files are included in the `src` folder within the `nupkg`."},{"content":"Configuration to use when building the project.","pos":[2348,2395]},{"content":"If not specified, configuration defaults to <ph id=\"ph1\">`Debug`</ph>.","pos":[2396,2448],"source":" If not specified, configuration defaults to `Debug`."},{"pos":[2487,2564],"content":"Defines the value for the <ph id=\"ph1\">`$(VersionSuffix)`</ph> MSBuild property in the project.","source":"Defines the value for the `$(VersionSuffix)` MSBuild property in the project."},{"content":"Sets the serviceable flag in the package.","pos":[2586,2627]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>.NET Blog: .NET 4.5.1 Supports Microsoft Security Updates for .NET NuGet Libraries<ept id=\"p1\">](https://aka.ms/nupkgservicing)</ept>.","pos":[2628,2770],"source":" For more information, see [.NET Blog: .NET 4.5.1 Supports Microsoft Security Updates for .NET NuGet Libraries](https://aka.ms/nupkgservicing)."},{"content":"Sets the verbosity level of the command.","pos":[2795,2835]},{"content":"Allowed values are <ph id=\"ph1\">`q[uiet]`</ph>, <ph id=\"ph2\">`m[inimal]`</ph>, <ph id=\"ph3\">`n[ormal]`</ph>, <ph id=\"ph4\">`d[etailed]`</ph>, and <ph id=\"ph5\">`diag[nostic]`</ph>.","pos":[2836,2924],"source":" Allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`."},{"pos":[2929,2937],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Pack the project in the current directory:","pos":[2939,2981]},{"pos":[2998,3022],"content":"Pack the <ph id=\"ph1\">`app1`</ph> project:","source":"Pack the `app1` project:"},{"pos":[3074,3174],"content":"Pack the project in the current directory and place the resulting packages into the <ph id=\"ph1\">`nupkgs`</ph> folder:","source":"Pack the project in the current directory and place the resulting packages into the `nupkgs` folder:"},{"pos":[3207,3298],"content":"Pack the project in the current directory into the <ph id=\"ph1\">`nupkgs`</ph> folder and skip the build step:","source":"Pack the project in the current directory into the `nupkgs` folder and skip the build step:"},{"pos":[3342,3551],"content":"With the project's version suffix configured as <ph id=\"ph1\">`&lt;VersionSuffix&gt;$(VersionSuffix)&lt;/VersionSuffix&gt;`</ph> in the <bpt id=\"p1\">*</bpt>.csproj<ept id=\"p1\">*</ept> file, pack the current project and update the resulting package version with the given suffix:","source":"With the project's version suffix configured as `<VersionSuffix>$(VersionSuffix)</VersionSuffix>` in the *.csproj* file, pack the current project and update the resulting package version with the given suffix:"},{"pos":[3595,3673],"content":"Set the package version to <ph id=\"ph1\">`2.1.0`</ph> with the <ph id=\"ph2\">`PackageVersion`</ph> MSBuild property:","source":"Set the package version to `2.1.0` with the `PackageVersion` MSBuild property:"}]}