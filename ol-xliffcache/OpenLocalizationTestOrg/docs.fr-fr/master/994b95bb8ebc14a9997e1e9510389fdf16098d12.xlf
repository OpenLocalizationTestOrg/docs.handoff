<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="sessions-instancing-and-concurrency.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">994b95bb8ebc14a9997e1e9510389fdf16098d12</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\sessions-instancing-and-concurrency.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8705db32d4fc2ee62d81457f5c9fed2e9411aa5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b1e37396c3c1b9db9581b145471e7b76280b977</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Sessions, Instancing, and Concurrency</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Sessions, Instancing, and Concurrency</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>session<ept id="p1">*</ept> is a correlation of all messages sent between two endpoints.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Instancing<ept id="p1">*</ept> refers to controlling the lifetime of user-defined service objects and their related <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Concurrency<ept id="p1">*</ept> is the term given to the control of the number of threads executing in an <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> at the same time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic describes these settings, how to use them, and the various interactions between them.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Sessions</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When a service contract sets the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType&gt;</ph> property to <ph id="ph2">&lt;xref:System.ServiceModel.SessionMode.Required?displayProperty=nameWithType&gt;</ph>, that contract is saying that all calls (that is, the underlying message exchanges that support the calls) must be part of the same conversation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a contract specifies that it allows sessions but does not require one, clients can connect and either establish a session or not.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the session ends and a message is sent over the same session-based channel an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>WCF sessions have the following main conceptual features:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>They are explicitly initiated and terminated by the calling application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Messages delivered during a session are processed in the order in which they are received.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Sessions correlate a group of messages into a conversation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The meaning of that correlation is an abstraction.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For instance, one session-based channel may correlate messages based on a shared network connection while another session-based channel may correlate messages based on a shared tag in the message body.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The features that can be derived from the session depend on the nature of the correlation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There is no general data store associated with a WCF session.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you are familiar with the <ph id="ph1">&lt;xref:System.Web.SessionState.HttpSessionState?displayProperty=nameWithType&gt;</ph> class in <ph id="ph2">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> applications and the functionality it provides, you might notice the following differences between that kind of session and WCF sessions:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> sessions are always server-initiated.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> sessions are implicitly unordered.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> sessions provide a general data storage mechanism across requests.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Client applications and service applications interact with sessions in different ways.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Client applications initiate sessions and then receive and process the messages sent within the session.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Service applications can use sessions as an extensibility point to add additional behavior.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is done by working directly with the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> or implementing a custom instance context provider.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Instancing</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The instancing behavior (set by using the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property) controls how the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is created in response to incoming messages.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By default, each <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is associated with one user-defined service object, so (in the default case) setting the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> property also controls the instancing of user-defined service objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> enumeration defines the instancing modes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following instancing modes are available:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode.PerCall&gt;</ph>: A new <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> (and therefore service object) is created for each client request.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode.PerSession&gt;</ph>: A new <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> (and therefore service object) is created for each new client session and maintained for the lifetime of that session (this requires a binding that supports sessions).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>: A single <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> (and therefore service object) handles all client requests for the lifetime of the application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following code example shows the default <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> value, <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.PerSession&gt;</ph> being explicitly set on a service class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>And while the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property controls how often the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is released, the <ph id="ph3">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete%2A?displayProperty=nameWithType&gt;</ph> properties control when the service object is released.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Well-Known Singleton Services</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>One variation on single instance service objects is sometimes useful: you can create a service object yourself and create the service host using that object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To do so, you must also set the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property to <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph> or an exception is thrown when the service host is opened.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29?displayProperty=nameWithType&gt;</ph> constructor to create such a service.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It provides an alternative to implementing a custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType&gt;</ph> when you wish to provide a specific object instance for use by a singleton service.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can use this overload when your service implementation type is difficult to construct (for example, if it does not implement a default parameterless public constructor).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Note that when an object is provided to this constructor, some features related to the Windows Communication Foundation (WCF) instancing behavior work differently.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A?displayProperty=nameWithType&gt;</ph> has no effect when a singleton object instance is provided.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Similarly, any other instance-release mechanism is ignored.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> always behaves as if the <ph id="ph2">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A?displayProperty=nameWithType&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.None?displayProperty=nameWithType&gt;</ph> for all operations.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Sharing InstanceContext Objects</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can also control which sessionful channel or call is associated with which <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object by performing that association yourself.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Concurrency</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Concurrency is the control of the number of threads active in an <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> at any one time.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is controlled by using the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A?displayProperty=nameWithType&gt;</ph> with the <ph id="ph2">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following three concurrency modes are available:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode.Single&gt;</ph>: Each instance context is allowed to have a maximum of one thread processing messages in the instance context at a time.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Other threads wishing to use the same instance context must block until the original thread exits the instance context.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode.Multiple&gt;</ph>: Each service instance can have multiple threads processing messages concurrently.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The service implementation must be thread-safe to use this concurrency mode.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode.Reentrant&gt;</ph>: Each service instance processes one message at a time, but accepts re-entrant operation calls.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The service only accepts these calls when it is calling out through a WCF client object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Understanding and developing code that safely uses more than one thread can be difficult to write successfully.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Before using <ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode.Multiple&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.ConcurrencyMode.Reentrant&gt;</ph> values, ensure that your service is properly designed for these modes.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The use of concurrency is related to the instancing mode.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode.PerCall&gt;</ph> instancing, concurrency is not relevant, because each message is processed by a new <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> and, therefore, never more than one thread is active in the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates setting the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.ServiceModel.ConcurrencyMode.Multiple&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sessions Interact with InstanceContext Settings</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Sessions and <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> interact depending upon the combination of the value of the <ph id="ph2">&lt;xref:System.ServiceModel.SessionMode&gt;</ph> enumeration in a contract and the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property on the service implementation, which controls the association between channels and specific service objects.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following table shows the result of an incoming channel either supporting sessions or not supporting sessions given a service's combination of the values of the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType&gt;</ph> property and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>InstanceContextMode value</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>PerCall</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: A session and <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each call.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An exception is thrown.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: A session and <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each call.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each call.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: An exception is thrown.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each call.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>PerSession</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: A session and <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each channel.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An exception is thrown.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: A session and <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each channel.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each call.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: An exception is thrown.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each call.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Single</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: A session and one <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for all calls.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An exception is thrown.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: A session and <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for the created or user-specified singleton.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for the created or user-specified singleton.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionful channel: An exception is thrown.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>-   Behavior with sessionless channel: An <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> for each created singleton or for the user-specified singleton.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Sessions<ept id="p1">](../../../../docs/framework/wcf/using-sessions.md)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Service That Requires Sessions<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-service-that-requires-sessions.md)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Control Service Instancing<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-control-service-instancing.md)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concurrency<ept id="p1">](../../../../docs/framework/wcf/samples/concurrency.md)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Instancing<ept id="p1">](../../../../docs/framework/wcf/samples/instancing.md)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Session<ept id="p1">](../../../../docs/framework/wcf/samples/session.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>