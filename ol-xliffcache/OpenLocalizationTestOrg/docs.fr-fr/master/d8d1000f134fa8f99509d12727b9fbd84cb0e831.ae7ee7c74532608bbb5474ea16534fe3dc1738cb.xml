{"content":"---\ntitle: \"Zero-based vs. One-based String Access in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"strings [Visual Basic], indexing\"\nms.assetid: 0ed39f35-d68e-421d-ae14-460a5c0373b8\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Zero-based vs. One-based String Access in Visual Basic\nThis topic compares how [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] and the [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] provide access to the characters in a string. The [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] always provides zero-based access to the characters in a string, whereas [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides zero-based and one-based access, depending on the function.  \n  \n## One-Based  \n For an example of a one-based [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] function, consider the `Mid` function. It takes an argument that indicates the character position at which the substring will start, starting with position 1. The [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] <xref:System.String.Substring%2A?displayProperty=fullName> method takes an index of the character in the string at which the substring is to start, starting with position 0. Thus, if you have a string \"ABCDE\", the individual characters are numbered 1,2,3,4,5 for use with the `Mid` function, but 0,1,2,3,4 for use with the <xref:System.String.Substring%2A?displayProperty=fullName> method.  \n  \n## Zero-Based  \n For an example of a zero-based [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] function, consider the `Split` function. It splits a string and returns an array containing the substrings. The [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] <xref:System.String.Split%2A?displayProperty=fullName> method also splits a string and returns an array containing the substrings. Because the `Split` function and <xref:System.String.Split%2A> method return [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] arrays, they must be zero-based.  \n  \n## See Also  \n <xref:Microsoft.VisualBasic.Strings.Mid%2A>   \n <xref:Microsoft.VisualBasic.Strings.Split%2A>   \n <xref:System.String.Substring%2A>   \n <xref:System.String.Split%2A>   \n [Introduction to Strings in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)","nodes":[{"pos":[12,83],"content":"Zero-based vs. One-based String Access in Visual Basic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Zero-based vs. One-based String Access in Visual Basic | Microsoft Docs","pos":[0,71]}]},{"pos":[634,688],"content":"Zero-based vs. One-based String Access in Visual Basic","linkify":"Zero-based vs. One-based String Access in Visual Basic","nodes":[{"content":"Zero-based vs. One-based String Access in Visual Basic","pos":[0,54]}]},{"content":"This topic compares how <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> and the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> provide access to the characters in a string.","pos":[689,946],"source":"This topic compares how [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] and the [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] provide access to the characters in a string."},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> always provides zero-based access to the characters in a string, whereas <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> provides zero-based and one-based access, depending on the function.","pos":[947,1272],"source":" The [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] always provides zero-based access to the characters in a string, whereas [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides zero-based and one-based access, depending on the function."},{"pos":[1281,1290],"content":"One-Based","linkify":"One-Based","nodes":[{"content":"One-Based","pos":[0,9]}]},{"content":"For an example of a one-based <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> function, consider the <ph id=\"ph2\">`Mid`</ph> function.","pos":[1294,1455],"source":"For an example of a one-based [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] function, consider the `Mid` function."},{"content":"It takes an argument that indicates the character position at which the substring will start, starting with position 1.","pos":[1456,1575]},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> <ph id=\"ph2\">&lt;xref:System.String.Substring%2A?displayProperty=fullName&gt;</ph> method takes an index of the character in the string at which the substring is to start, starting with position 0.","pos":[1576,1840],"source":" The [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] <xref:System.String.Substring%2A?displayProperty=fullName> method takes an index of the character in the string at which the substring is to start, starting with position 0."},{"content":"Thus, if you have a string \"ABCDE\", the individual characters are numbered 1,2,3,4,5 for use with the <ph id=\"ph1\">`Mid`</ph> function, but 0,1,2,3,4 for use with the <ph id=\"ph2\">&lt;xref:System.String.Substring%2A?displayProperty=fullName&gt;</ph> method.","pos":[1841,2056],"source":" Thus, if you have a string \"ABCDE\", the individual characters are numbered 1,2,3,4,5 for use with the `Mid` function, but 0,1,2,3,4 for use with the <xref:System.String.Substring%2A?displayProperty=fullName> method."},{"pos":[2065,2075],"content":"Zero-Based","linkify":"Zero-Based","nodes":[{"content":"Zero-Based","pos":[0,10]}]},{"content":"For an example of a zero-based <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> function, consider the <ph id=\"ph2\">`Split`</ph> function.","pos":[2079,2243],"source":"For an example of a zero-based [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] function, consider the `Split` function."},{"content":"It splits a string and returns an array containing the substrings.","pos":[2244,2310]},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> <ph id=\"ph2\">&lt;xref:System.String.Split%2A?displayProperty=fullName&gt;</ph> method also splits a string and returns an array containing the substrings.","pos":[2311,2532],"source":" The [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] <xref:System.String.Split%2A?displayProperty=fullName> method also splits a string and returns an array containing the substrings."},{"content":"Because the <ph id=\"ph1\">`Split`</ph> function and <ph id=\"ph2\">&lt;xref:System.String.Split%2A&gt;</ph> method return <ph id=\"ph3\">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> arrays, they must be zero-based.","pos":[2533,2729],"source":" Because the `Split` function and <xref:System.String.Split%2A> method return [!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)] arrays, they must be zero-based."},{"pos":[2738,2746],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Mid%2A&gt;</ph>","pos":[2750,2793],"source":"<xref:Microsoft.VisualBasic.Strings.Mid%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Split%2A&gt;</ph>","pos":[2798,2843],"source":" <xref:Microsoft.VisualBasic.Strings.Split%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.String.Substring%2A&gt;</ph>","pos":[2848,2881],"source":" <xref:System.String.Substring%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph>","pos":[2886,2915],"source":" <xref:System.String.Split%2A> "},{"content":"<bpt id=\"p1\"> [</bpt>Introduction to Strings in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept>","pos":[2919,3058],"source":" [Introduction to Strings in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)"}]}