{"content":"---\ntitle: \"Retrieving Data Using a DataReader\"\nms.date: \"10/29/2018\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 97afc121-fb8b-465b-bab3-6d844420badb\n---\n# Retrieve data using a DataReader\nTo retrieve data using a **DataReader**, create an instance of the **Command** object, and then create a **DataReader** by calling **Command.ExecuteReader** to retrieve rows from a data source. The **DataReader** provides an unbuffered stream of data that allows procedural logic to efficiently process results from a data source sequentially. The **DataReader** is a good choice when you're retrieving large amounts of data because the data is not cached in memory.\n\nThe following example illustrates using a **DataReader**, where `reader` represents a valid DataReader and `command` represents a valid Command object.  \n\n```csharp\nreader = command.ExecuteReader();  \n```\n\n```vb\nreader = command.ExecuteReader()\n```  \n\nUse the **DataReader.Read** method to obtain a row from the query results. You can access each column of the returned row by passing the name or ordinal number of the column to the **DataReader**. However, for best performance, the **DataReader** provides a series of methods that allow you to access column values in their native data types (**GetDateTime**, **GetDouble**, **GetGuid**, **GetInt32**, and so on). For a list of typed accessor methods for data provider-specific **DataReaders**, see <xref:System.Data.OleDb.OleDbDataReader> and <xref:System.Data.SqlClient.SqlDataReader>. Using the typed accessor methods when you know the underlying data type reduces the amount of type conversion required when retrieving the column value.  \n  \n The following example iterates through a **DataReader** object and returns two columns from each row.  \n  \n [!code-csharp[DataWorks SqlClient.HasRows#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.HasRows/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.HasRows#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.HasRows/VB/source.vb#1)]  \n  \n## Closing the DataReader  \n Always call the **Close** method when you have finished using the **DataReader** object.  \n  \n If your **Command** contains output parameters or return values, those values are not available until the **DataReader** is closed.  \n  \n While a **DataReader** is open, the **Connection** is in use exclusively by that **DataReader**. You cannot execute any commands for the **Connection**, including creating another **DataReader**, until the original **DataReader** is closed.  \n  \n> [!NOTE]\n>  Do not call **Close** or **Dispose** on a **Connection**, a **DataReader**, or any other managed object in the **Finalize** method of your class. In a finalizer, only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a **Finalize** method in your class definition. For more information, see [Garbage Collection](../../../../docs/standard/garbage-collection/index.md).  \n  \n## Retrieving multiple result sets using NextResult  \n If the **DataReader** returns multiple result sets, call the **NextResult** method to iterate through the result sets sequentially. The following example shows the <xref:System.Data.SqlClient.SqlDataReader> processing the results of two SELECT statements using the <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> method.  \n  \n [!code-csharp[DataWorks SqlClient.NextResult#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.NextResult/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.NextResult#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.NextResult/VB/source.vb#1)]  \n  \n## Getting schema information from the DataReader  \n While a **DataReader** is open, you can retrieve schema information about the current result set using the **GetSchemaTable** method. **GetSchemaTable** returns a <xref:System.Data.DataTable> object populated with rows and columns that contain the schema information for the current result set. The **DataTable** contains one row for each column of the result set. Each column of the schema table maps to a property of the columns returned in the rows of the result set, where the **ColumnName** is the name of the property and the value of the column is the value of the property. The following example writes out the schema information for **DataReader**.  \n  \n [!code-csharp[DataWorks SqlClient.GetSchemaTable#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.GetSchemaTable/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.GetSchemaTable#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.GetSchemaTable/VB/source.vb#1)]  \n  \n## Working with OLE DB chapters  \n Hierarchical rowsets, or chapters (OLE DB type **DBTYPE_HCHAPTER**, ADO type **adChapter**), can be retrieved using the <xref:System.Data.OleDb.OleDbDataReader>. When a query that includes a chapter is returned as a **DataReader**, the chapter is returned as a column in that **DataReader** and is exposed as a **DataReader** object.  \n  \n The ADO.NET **DataSet** can also be used to represent hierarchical rowsets by using parent-child relationships between tables. For more information, see [DataSets, DataTables, and DataViews](../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md).  \n  \n The following code example uses the MSDataShape Provider to generate a chapter column of orders for each customer in a list of customers.  \n  \n```vb  \nUsing connection As OleDbConnection = New OleDbConnection(\n    \"Provider=MSDataShape;Data Provider=SQLOLEDB;\" &\n    \"Data Source=localhost;Integrated Security=SSPI;Initial Catalog=northwind\")\n\n    Using custCMD As OleDbCommand = New OleDbCommand(\n        \"SHAPE {SELECT CustomerID, CompanyName FROM Customers} \" &\n        \"APPEND ({SELECT CustomerID, OrderID FROM Orders} AS CustomerOrders \" &\n        \"RELATE CustomerID TO CustomerID)\", connection)\n\n        connection.Open()\n\n        Using custReader As OleDbDataReader = custCMD.ExecuteReader()\n\n            Do While custReader.Read()\n                Console.WriteLine(\"Orders for \" & custReader.GetString(1))\n                ' custReader.GetString(1) = CompanyName  \n\n                Using orderReader As OleDbDataReader = custReader.GetValue(2)\n                    ' custReader.GetValue(2) = Orders chapter as DataReader  \n\n                    Do While orderReader.Read()\n                        Console.WriteLine(vbTab & orderReader.GetInt32(1))\n                        ' orderReader.GetInt32(1) = OrderID  \n                    Loop\n                    orderReader.Close()\n                End Using\n            Loop\n            ' Make sure to always close readers and connections.  \n            custReader.Close()\n        End Using\n    End Using\nEnd Using\n```  \n  \n```csharp  \nusing (OleDbConnection connection = new OleDbConnection(\n    \"Provider=MSDataShape;Data Provider=SQLOLEDB;\" +\n    \"Data Source=localhost;Integrated Security=SSPI;Initial Catalog=northwind\"))\n{\n    using (OleDbCommand custCMD = new OleDbCommand(\n        \"SHAPE {SELECT CustomerID, CompanyName FROM Customers} \" +\n        \"APPEND ({SELECT CustomerID, OrderID FROM Orders} AS CustomerOrders \" +\n        \"RELATE CustomerID TO CustomerID)\", connection))\n    {\n        connection.Open();\n\n        using (OleDbDataReader custReader = custCMD.ExecuteReader())\n        {\n\n            while (custReader.Read())\n            {\n                Console.WriteLine(\"Orders for \" + custReader.GetString(1));\n                // custReader.GetString(1) = CompanyName  \n\n                using (OleDbDataReader orderReader = (OleDbDataReader)custReader.GetValue(2))\n                {\n                    // custReader.GetValue(2) = Orders chapter as DataReader  \n\n                    while (orderReader.Read())\n                        Console.WriteLine(\"\\t\" + orderReader.GetInt32(1));\n                    // orderReader.GetInt32(1) = OrderID  \n                    orderReader.Close();\n                }\n            }\n            // Make sure to always close readers and connections.  \n            custReader.Close();\n        }\n    }\n}\n```  \n  \n## Returning results with Oracle REF CURSORs  \n The .NET Framework Data Provider for Oracle supports the use of Oracle REF CURSORs to return a query result. An Oracle REF CURSOR is returned as an <xref:System.Data.OracleClient.OracleDataReader>.  \n  \n You can retrieve an <xref:System.Data.OracleClient.OracleDataReader> object that represents an Oracle REF CURSOR by using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method. You can also specify an <xref:System.Data.OracleClient.OracleCommand> that returns one or more Oracle REF CURSORs as the **SelectCommand** for an <xref:System.Data.OracleClient.OracleDataAdapter> used to fill a <xref:System.Data.DataSet>.  \n  \n To access a REF CURSOR returned from an Oracle data source, create an <xref:System.Data.OracleClient.OracleCommand> for your query and add an output parameter that references the REF CURSOR to the <xref:System.Data.OracleClient.OracleCommand.Parameters> collection of your <xref:System.Data.OracleClient.OracleCommand>. The name of the parameter must match the name of the REF CURSOR parameter in your query. Set the type of the parameter to <xref:System.Data.OracleClient.OracleType.Cursor?displayProperty=nameWithType>. The <xref:System.Data.OracleClient.OracleCommand.ExecuteReader?displayProperty=nameWithType> method of your <xref:System.Data.OracleClient.OracleCommand> returns an <xref:System.Data.OracleClient.OracleDataReader> for the REF CURSOR.  \n  \n If your <xref:System.Data.OracleClient.OracleCommand> returns multiple REF CURSORS, add multiple output parameters. You can access the different REF CURSORs by calling the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader?displayProperty=nameWithType> method. The call to <xref:System.Data.OracleClient.OracleCommand.ExecuteReader> returns an <xref:System.Data.OracleClient.OracleDataReader> referencing the first REF CURSOR. You can then call the <xref:System.Data.OracleClient.OracleDataReader.NextResult?displayProperty=nameWithType> method to access subsequent REF CURSORs. Although the parameters in your <xref:System.Data.OracleClient.OracleCommand.Parameters?displayProperty=nameWithType> collection match the REF CURSOR output parameters by name, the <xref:System.Data.OracleClient.OracleDataReader> accesses them in the order in which they were added to the <xref:System.Data.OracleClient.OracleCommand.Parameters> collection.  \n  \n For example, consider the following Oracle package and package body.  \n  \n```sql\nCREATE OR REPLACE PACKAGE CURSPKG AS   \n  TYPE T_CURSOR IS REF CURSOR;   \n  PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,   \n    DEPTCURSOR OUT T_CURSOR);   \nEND CURSPKG;  \n  \nCREATE OR REPLACE PACKAGE BODY CURSPKG AS   \n  PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,   \n    DEPTCURSOR OUT T_CURSOR)   \n  IS   \n  BEGIN   \n    OPEN EMPCURSOR FOR SELECT * FROM DEMO.EMPLOYEE;   \n    OPEN DEPTCURSOR FOR SELECT * FROM DEMO.DEPARTMENT;   \n  END OPEN_TWO_CURSORS;   \nEND CURSPKG;   \n```  \n  \n The following code creates an <xref:System.Data.OracleClient.OracleCommand> that returns the REF CURSORs from the previous Oracle package by adding two parameters of type <xref:System.Data.OracleClient.OracleType.Cursor?displayProperty=nameWithType> to the <xref:System.Data.OracleClient.OracleCommand.Parameters?displayProperty=nameWithType> collection.  \n  \n```vb  \nDim cursCmd As OracleCommand = New OracleCommand(\"CURSPKG.OPEN_TWO_CURSORS\", oraConn)  \ncursCmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output  \ncursCmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output  \n```  \n  \n```csharp  \nOracleCommand cursCmd = new OracleCommand(\"CURSPKG.OPEN_TWO_CURSORS\", oraConn);  \ncursCmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output;  \ncursCmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output;  \n```  \n  \n The following code returns the results of the previous command using the <xref:System.Data.OracleClient.OracleDataReader.Read> and <xref:System.Data.OracleClient.OracleDataReader.NextResult> methods of the <xref:System.Data.OracleClient.OracleDataReader>. The REF CURSOR parameters are returned in order.  \n  \n```vb  \noraConn.Open()  \n  \nDim cursCmd As OracleCommand = New OracleCommand(\"CURSPKG.OPEN_TWO_CURSORS\", oraConn)  \ncursCmd.CommandType = CommandType.StoredProcedure  \ncursCmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output  \ncursCmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output  \n  \nDim reader As OracleDataReader = cursCmd.ExecuteReader()  \n  \nConsole.WriteLine(vbCrLf & \"Emp ID\" & vbTab & \"Name\")  \n  \nDo While reader.Read()  \n  Console.WriteLine(\"{0}\" & vbTab & \"{1}, {2}\", reader.GetOracleNumber(0), reader.GetString(1), reader.GetString(2))  \nLoop  \n  \nreader.NextResult()  \n  \nConsole.WriteLine(vbCrLf & \"Dept ID\" & vbTab & \"Name\")  \n  \nDo While reader.Read()  \n  Console.WriteLine(\"{0}\" & vbTab & \"{1}\", reader.GetOracleNumber(0), reader.GetString(1))  \nLoop  \n' Make sure to always close readers and connections.  \nreader.Close()  \noraConn.Close()  \n```  \n  \n```csharp  \noraConn.Open();  \n  \nOracleCommand cursCmd = new OracleCommand(\"CURSPKG.OPEN_TWO_CURSORS\", oraConn);  \ncursCmd.CommandType = CommandType.StoredProcedure;  \ncursCmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output;  \ncursCmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output;  \n  \nOracleDataReader reader = cursCmd.ExecuteReader();  \n  \nConsole.WriteLine(\"\\nEmp ID\\tName\");  \n  \nwhile (reader.Read())  \n  Console.WriteLine(\"{0}\\t{1}, {2}\", reader.GetOracleNumber(0), reader.GetString(1), reader.GetString(2));  \n  \nreader.NextResult();  \n  \nConsole.WriteLine(\"\\nDept ID\\tName\");  \n  \nwhile (reader.Read())  \n  Console.WriteLine(\"{0}\\t{1}\", reader.GetOracleNumber(0), reader.GetString(1));  \n// Make sure to always close readers and connections.  \nreader.Close();  \noraConn.Close();  \n```  \n  \n The following example uses the previous command to populate a <xref:System.Data.DataSet> with the results of the Oracle package.  \n  \n```vb  \nDim ds As DataSet = New DataSet()  \n  \nDim adapter As OracleDataAdapter = New OracleDataAdapter(cursCmd)  \nadapter.TableMappings.Add(\"Table\", \"Employees\")  \nadapter.TableMappings.Add(\"Table1\", \"Departments\")  \n  \nadapter.Fill(ds)  \n```  \n  \n```csharp  \nDataSet ds = new DataSet();  \n  \nOracleDataAdapter adapter = new OracleDataAdapter(cursCmd);  \nadapter.TableMappings.Add(\"Table\", \"Employees\");  \nadapter.TableMappings.Add(\"Table1\", \"Departments\");  \n  \nadapter.Fill(ds);  \n```\n\n> [!NOTE]\n>  To avoid an **OverflowException**, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a <xref:System.Data.DataRow>. You can use the <xref:System.Data.Common.DataAdapter.FillError> event to determine if an **OverflowException** has occurred. For more information on the <xref:System.Data.Common.DataAdapter.FillError> event, see [Handling DataAdapter Events](../../../../docs/framework/data/adonet/handling-dataadapter-events.md).  \n  \n## See also\n\n- [DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)\n- [Commands and Parameters](../../../../docs/framework/data/adonet/commands-and-parameters.md)\n- [Retrieving Database Schema Information](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,152],"embed":true,"restype":"x-metadata","content":"title: \"Retrieving Data Using a DataReader\"\nms.date: \"10/29/2018\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 97afc121-fb8b-465b-bab3-6d844420badb","nodes":[{"content":"Retrieving Data Using a DataReader","nodes":[{"pos":[0,34],"content":"Retrieving Data Using a DataReader","nodes":[{"content":"Retrieving Data Using a DataReader","pos":[0,34]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[159,191],"content":"Retrieve data using a DataReader","linkify":"Retrieve data using a DataReader","nodes":[{"content":"Retrieve data using a DataReader","pos":[0,32]}]},{"content":"To retrieve data using a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>, create an instance of the <bpt id=\"p2\">**</bpt>Command<ept id=\"p2\">**</ept> object, and then create a <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept> by calling <bpt id=\"p4\">**</bpt>Command.ExecuteReader<ept id=\"p4\">**</ept> to retrieve rows from a data source.","pos":[192,385],"source":"To retrieve data using a **DataReader**, create an instance of the **Command** object, and then create a **DataReader** by calling **Command.ExecuteReader** to retrieve rows from a data source."},{"content":"The <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> provides an unbuffered stream of data that allows procedural logic to efficiently process results from a data source sequentially.","pos":[386,535],"source":" The **DataReader** provides an unbuffered stream of data that allows procedural logic to efficiently process results from a data source sequentially."},{"content":"The <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> is a good choice when you're retrieving large amounts of data because the data is not cached in memory.","pos":[536,658],"source":" The **DataReader** is a good choice when you're retrieving large amounts of data because the data is not cached in memory."},{"pos":[660,811],"content":"The following example illustrates using a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>, where <ph id=\"ph1\">`reader`</ph> represents a valid DataReader and <ph id=\"ph2\">`command`</ph> represents a valid Command object.","source":"The following example illustrates using a **DataReader**, where `reader` represents a valid DataReader and `command` represents a valid Command object."},{"content":"Use the <bpt id=\"p1\">**</bpt>DataReader.Read<ept id=\"p1\">**</ept> method to obtain a row from the query results.","pos":[912,986],"source":"Use the **DataReader.Read** method to obtain a row from the query results."},{"content":"You can access each column of the returned row by passing the name or ordinal number of the column to the <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>.","pos":[987,1108],"source":" You can access each column of the returned row by passing the name or ordinal number of the column to the **DataReader**."},{"content":"However, for best performance, the <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> provides a series of methods that allow you to access column values in their native data types (<bpt id=\"p2\">**</bpt>GetDateTime<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>GetDouble<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>GetGuid<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>GetInt32<ept id=\"p5\">**</ept>, and so on).","pos":[1109,1325],"source":" However, for best performance, the **DataReader** provides a series of methods that allow you to access column values in their native data types (**GetDateTime**, **GetDouble**, **GetGuid**, **GetInt32**, and so on)."},{"content":"For a list of typed accessor methods for data provider-specific <bpt id=\"p1\">**</bpt>DataReaders<ept id=\"p1\">**</ept>, see <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbDataReader&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph>.","pos":[1326,1499],"source":" For a list of typed accessor methods for data provider-specific **DataReaders**, see <xref:System.Data.OleDb.OleDbDataReader> and <xref:System.Data.SqlClient.SqlDataReader>."},{"content":"Using the typed accessor methods when you know the underlying data type reduces the amount of type conversion required when retrieving the column value.","pos":[1500,1652]},{"pos":[1659,1760],"content":"The following example iterates through a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> object and returns two columns from each row.","source":"The following example iterates through a **DataReader** object and returns two columns from each row."},{"pos":[2069,2091],"content":"Closing the DataReader","linkify":"Closing the DataReader","nodes":[{"content":"Closing the DataReader","pos":[0,22]}]},{"pos":[2095,2183],"content":"Always call the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> method when you have finished using the <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept> object.","source":"Always call the **Close** method when you have finished using the **DataReader** object."},{"pos":[2190,2321],"content":"If your <bpt id=\"p1\">**</bpt>Command<ept id=\"p1\">**</ept> contains output parameters or return values, those values are not available until the <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept> is closed.","source":"If your **Command** contains output parameters or return values, those values are not available until the **DataReader** is closed."},{"content":"While a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> is open, the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> is in use exclusively by that <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept>.","pos":[2328,2424],"source":"While a **DataReader** is open, the **Connection** is in use exclusively by that **DataReader**."},{"content":"You cannot execute any commands for the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept>, including creating another <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept>, until the original <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept> is closed.","pos":[2425,2568],"source":" You cannot execute any commands for the **Connection**, including creating another **DataReader**, until the original **DataReader** is closed."},{"pos":[2576,3030],"content":"[!NOTE]\n Do not call **Close** or **Dispose** on a **Connection**, a **DataReader**, or any other managed object in the **Finalize** method of your class. In a finalizer, only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a **Finalize** method in your class definition. For more information, see [Garbage Collection](../../../../docs/standard/garbage-collection/index.md).","leadings":["","> "],"nodes":[{"content":"Do not call **Close** or **Dispose** on a **Connection**, a **DataReader**, or any other managed object in the **Finalize** method of your class. In a finalizer, only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a **Finalize** method in your class definition. For more information, see [Garbage Collection](../../../../docs/standard/garbage-collection/index.md).","pos":[9,452],"nodes":[{"content":"Do not call <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Dispose<ept id=\"p2\">**</ept> on a <bpt id=\"p3\">**</bpt>Connection<ept id=\"p3\">**</ept>, a <bpt id=\"p4\">**</bpt>DataReader<ept id=\"p4\">**</ept>, or any other managed object in the <bpt id=\"p5\">**</bpt>Finalize<ept id=\"p5\">**</ept> method of your class.","pos":[0,145],"source":"Do not call **Close** or **Dispose** on a **Connection**, a **DataReader**, or any other managed object in the **Finalize** method of your class."},{"content":"In a finalizer, only release unmanaged resources that your class owns directly.","pos":[146,225]},{"content":"If your class does not own any unmanaged resources, do not include a <bpt id=\"p1\">**</bpt>Finalize<ept id=\"p1\">**</ept> method in your class definition.","pos":[226,340],"source":" If your class does not own any unmanaged resources, do not include a **Finalize** method in your class definition."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](../../../../docs/standard/garbage-collection/index.md)</ept>.","pos":[341,443],"source":" For more information, see [Garbage Collection](../../../../docs/standard/garbage-collection/index.md)."}]}]},{"pos":[3039,3087],"content":"Retrieving multiple result sets using NextResult","linkify":"Retrieving multiple result sets using NextResult","nodes":[{"content":"Retrieving multiple result sets using NextResult","pos":[0,48]}]},{"content":"If the <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> returns multiple result sets, call the <bpt id=\"p2\">**</bpt>NextResult<ept id=\"p2\">**</ept> method to iterate through the result sets sequentially.","pos":[3091,3222],"source":"If the **DataReader** returns multiple result sets, call the **NextResult** method to iterate through the result sets sequentially."},{"content":"The following example shows the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> processing the results of two SELECT statements using the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A&gt;</ph> method.","pos":[3223,3420],"source":" The following example shows the <xref:System.Data.SqlClient.SqlDataReader> processing the results of two SELECT statements using the <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> method."},{"pos":[3741,3787],"content":"Getting schema information from the DataReader","linkify":"Getting schema information from the DataReader","nodes":[{"content":"Getting schema information from the DataReader","pos":[0,46]}]},{"content":"While a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> is open, you can retrieve schema information about the current result set using the <bpt id=\"p2\">**</bpt>GetSchemaTable<ept id=\"p2\">**</ept> method.","pos":[3791,3924],"source":"While a **DataReader** is open, you can retrieve schema information about the current result set using the **GetSchemaTable** method."},{"content":"<bpt id=\"p1\">**</bpt>GetSchemaTable<ept id=\"p1\">**</ept> returns a <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> object populated with rows and columns that contain the schema information for the current result set.","pos":[3925,4085],"source":"**GetSchemaTable** returns a <xref:System.Data.DataTable> object populated with rows and columns that contain the schema information for the current result set."},{"content":"The <bpt id=\"p1\">**</bpt>DataTable<ept id=\"p1\">**</ept> contains one row for each column of the result set.","pos":[4086,4155],"source":" The **DataTable** contains one row for each column of the result set."},{"content":"Each column of the schema table maps to a property of the columns returned in the rows of the result set, where the <bpt id=\"p1\">**</bpt>ColumnName<ept id=\"p1\">**</ept> is the name of the property and the value of the column is the value of the property.","pos":[4156,4372],"source":" Each column of the schema table maps to a property of the columns returned in the rows of the result set, where the **ColumnName** is the name of the property and the value of the column is the value of the property."},{"content":"The following example writes out the schema information for <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>.","pos":[4373,4448],"source":" The following example writes out the schema information for **DataReader**."},{"pos":[4785,4813],"content":"Working with OLE DB chapters","linkify":"Working with OLE DB chapters","nodes":[{"content":"Working with OLE DB chapters","pos":[0,28]}]},{"content":"Hierarchical rowsets, or chapters (OLE DB type <bpt id=\"p1\">**</bpt>DBTYPE_HCHAPTER<ept id=\"p1\">**</ept>, ADO type <bpt id=\"p2\">**</bpt>adChapter<ept id=\"p2\">**</ept>), can be retrieved using the <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbDataReader&gt;</ph>.","pos":[4817,4978],"source":"Hierarchical rowsets, or chapters (OLE DB type **DBTYPE_HCHAPTER**, ADO type **adChapter**), can be retrieved using the <xref:System.Data.OleDb.OleDbDataReader>."},{"content":"When a query that includes a chapter is returned as a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>, the chapter is returned as a column in that <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept> and is exposed as a <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept> object.","pos":[4979,5150],"source":" When a query that includes a chapter is returned as a **DataReader**, the chapter is returned as a column in that **DataReader** and is exposed as a **DataReader** object."},{"content":"The ADO.NET <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> can also be used to represent hierarchical rowsets by using parent-child relationships between tables.","pos":[5157,5283],"source":"The ADO.NET **DataSet** can also be used to represent hierarchical rowsets by using parent-child relationships between tables."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>DataSets, DataTables, and DataViews<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept>.","pos":[5284,5424],"source":" For more information, see [DataSets, DataTables, and DataViews](../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)."},{"content":"The following code example uses the MSDataShape Provider to generate a chapter column of orders for each customer in a list of customers.","pos":[5431,5568]},{"pos":[8242,8283],"content":"Returning results with Oracle REF CURSORs","linkify":"Returning results with Oracle REF CURSORs","nodes":[{"content":"Returning results with Oracle REF CURSORs","pos":[0,41]}]},{"content":"The .NET Framework Data Provider for Oracle supports the use of Oracle REF CURSORs to return a query result.","pos":[8287,8395]},{"content":"An Oracle REF CURSOR is returned as an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.","pos":[8396,8484],"source":" An Oracle REF CURSOR is returned as an <xref:System.Data.OracleClient.OracleDataReader>."},{"content":"You can retrieve an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> object that represents an Oracle REF CURSOR by using the <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph> method.","pos":[8491,8687],"source":"You can retrieve an <xref:System.Data.OracleClient.OracleDataReader> object that represents an Oracle REF CURSOR by using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method."},{"content":"You can also specify an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> that returns one or more Oracle REF CURSORs as the <bpt id=\"p1\">**</bpt>SelectCommand<ept id=\"p1\">**</ept> for an <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> used to fill a <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[8688,8926],"source":" You can also specify an <xref:System.Data.OracleClient.OracleCommand> that returns one or more Oracle REF CURSORs as the **SelectCommand** for an <xref:System.Data.OracleClient.OracleDataAdapter> used to fill a <xref:System.Data.DataSet>."},{"content":"To access a REF CURSOR returned from an Oracle data source, create an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> for your query and add an output parameter that references the REF CURSOR to the <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleCommand.Parameters&gt;</ph> collection of your <ph id=\"ph3\">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph>.","pos":[8933,9252],"source":"To access a REF CURSOR returned from an Oracle data source, create an <xref:System.Data.OracleClient.OracleCommand> for your query and add an output parameter that references the REF CURSOR to the <xref:System.Data.OracleClient.OracleCommand.Parameters> collection of your <xref:System.Data.OracleClient.OracleCommand>."},{"content":"The name of the parameter must match the name of the REF CURSOR parameter in your query.","pos":[9253,9341]},{"content":"Set the type of the parameter to <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleType.Cursor?displayProperty=nameWithType&gt;</ph>.","pos":[9342,9454],"source":" Set the type of the parameter to <xref:System.Data.OracleClient.OracleType.Cursor?displayProperty=nameWithType>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader?displayProperty=nameWithType&gt;</ph> method of your <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> returns an <ph id=\"ph3\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> for the REF CURSOR.","pos":[9455,9688],"source":" The <xref:System.Data.OracleClient.OracleCommand.ExecuteReader?displayProperty=nameWithType> method of your <xref:System.Data.OracleClient.OracleCommand> returns an <xref:System.Data.OracleClient.OracleDataReader> for the REF CURSOR."},{"content":"If your <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> returns multiple REF CURSORS, add multiple output parameters.","pos":[9695,9810],"source":"If your <xref:System.Data.OracleClient.OracleCommand> returns multiple REF CURSORS, add multiple output parameters."},{"content":"You can access the different REF CURSORs by calling the <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader?displayProperty=nameWithType&gt;</ph> method.","pos":[9811,9963],"source":" You can access the different REF CURSORs by calling the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader?displayProperty=nameWithType> method."},{"content":"The call to <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader&gt;</ph> returns an <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> referencing the first REF CURSOR.","pos":[9964,10129],"source":" The call to <xref:System.Data.OracleClient.OracleCommand.ExecuteReader> returns an <xref:System.Data.OracleClient.OracleDataReader> referencing the first REF CURSOR."},{"content":"You can then call the <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleDataReader.NextResult?displayProperty=nameWithType&gt;</ph> method to access subsequent REF CURSORs.","pos":[10130,10281],"source":" You can then call the <xref:System.Data.OracleClient.OracleDataReader.NextResult?displayProperty=nameWithType> method to access subsequent REF CURSORs."},{"content":"Although the parameters in your <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand.Parameters?displayProperty=nameWithType&gt;</ph> collection match the REF CURSOR output parameters by name, the <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> accesses them in the order in which they were added to the <ph id=\"ph3\">&lt;xref:System.Data.OracleClient.OracleCommand.Parameters&gt;</ph> collection.","pos":[10282,10639],"source":" Although the parameters in your <xref:System.Data.OracleClient.OracleCommand.Parameters?displayProperty=nameWithType> collection match the REF CURSOR output parameters by name, the <xref:System.Data.OracleClient.OracleDataReader> accesses them in the order in which they were added to the <xref:System.Data.OracleClient.OracleCommand.Parameters> collection."},{"content":"For example, consider the following Oracle package and package body.","pos":[10646,10714]},{"pos":[11228,11582],"content":"The following code creates an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> that returns the REF CURSORs from the previous Oracle package by adding two parameters of type <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleType.Cursor?displayProperty=nameWithType&gt;</ph> to the <ph id=\"ph3\">&lt;xref:System.Data.OracleClient.OracleCommand.Parameters?displayProperty=nameWithType&gt;</ph> collection.","source":"The following code creates an <xref:System.Data.OracleClient.OracleCommand> that returns the REF CURSORs from the previous Oracle package by adding two parameters of type <xref:System.Data.OracleClient.OracleType.Cursor?displayProperty=nameWithType> to the <xref:System.Data.OracleClient.OracleCommand.Parameters?displayProperty=nameWithType> collection."},{"content":"The following code returns the results of the previous command using the <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleDataReader.Read&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleDataReader.NextResult&gt;</ph> methods of the <ph id=\"ph3\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.","pos":[12181,12436],"source":"The following code returns the results of the previous command using the <xref:System.Data.OracleClient.OracleDataReader.Read> and <xref:System.Data.OracleClient.OracleDataReader.NextResult> methods of the <xref:System.Data.OracleClient.OracleDataReader>."},{"content":"The REF CURSOR parameters are returned in order.","pos":[12437,12485]},{"pos":[14314,14442],"content":"The following example uses the previous command to populate a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> with the results of the Oracle package.","source":"The following example uses the previous command to populate a <xref:System.Data.DataSet> with the results of the Oracle package."},{"pos":[14939,15464],"content":"[!NOTE]\n To avoid an **OverflowException**, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a <xref:System.Data.DataRow>. You can use the <xref:System.Data.Common.DataAdapter.FillError> event to determine if an **OverflowException** has occurred. For more information on the <xref:System.Data.Common.DataAdapter.FillError> event, see [Handling DataAdapter Events](../../../../docs/framework/data/adonet/handling-dataadapter-events.md).","leadings":["","> "],"nodes":[{"content":"To avoid an **OverflowException**, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a <xref:System.Data.DataRow>. You can use the <xref:System.Data.Common.DataAdapter.FillError> event to determine if an **OverflowException** has occurred. For more information on the <xref:System.Data.Common.DataAdapter.FillError> event, see [Handling DataAdapter Events](../../../../docs/framework/data/adonet/handling-dataadapter-events.md).","pos":[9,523],"nodes":[{"content":"To avoid an <bpt id=\"p1\">**</bpt>OverflowException<ept id=\"p1\">**</ept>, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph>.","pos":[0,200],"source":"To avoid an **OverflowException**, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a <xref:System.Data.DataRow>."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Data.Common.DataAdapter.FillError&gt;</ph> event to determine if an <bpt id=\"p1\">**</bpt>OverflowException<ept id=\"p1\">**</ept> has occurred.","pos":[201,325],"source":" You can use the <xref:System.Data.Common.DataAdapter.FillError> event to determine if an **OverflowException** has occurred."},{"content":"For more information on the <ph id=\"ph1\">&lt;xref:System.Data.Common.DataAdapter.FillError&gt;</ph> event, see <bpt id=\"p1\">[</bpt>Handling DataAdapter Events<ept id=\"p1\">](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)</ept>.","pos":[326,514],"source":" For more information on the <xref:System.Data.Common.DataAdapter.FillError> event, see [Handling DataAdapter Events](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)."}]}]},{"pos":[15473,15481],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[15485,15587],"content":"<bpt id=\"p1\">[</bpt>DataAdapters and DataReaders<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept>","source":"[DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)"},{"pos":[15590,15682],"content":"<bpt id=\"p1\">[</bpt>Commands and Parameters<ept id=\"p1\">](../../../../docs/framework/data/adonet/commands-and-parameters.md)</ept>","source":"[Commands and Parameters](../../../../docs/framework/data/adonet/commands-and-parameters.md)"},{"pos":[15685,15807],"content":"<bpt id=\"p1\">[</bpt>Retrieving Database Schema Information<ept id=\"p1\">](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)</ept>","source":"[Retrieving Database Schema Information](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)"},{"pos":[15810,15914],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}