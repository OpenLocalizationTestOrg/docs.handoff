{"content":"---\ntitle: \"<bindingElementExtensions>\"\nms.date: \"03/30/2017\"\nms.assetid: bb597fc0-c947-451c-afda-bf23d42f4f4d\n---\n# \\<bindingElementExtensions>\nThis section enables the use of a custom binding element from a machine or application configuration file. You can add a custom binding element to this collection by using the `add` keyword, and setting the `type` attribute of the element to a binding element extension, as well as the `name` attribute to the custom binding element.  \n  \n Binding extensions enable the user to create user-defined binding elements for use as part of custom bindings. Programmatically, a binding extension is a type that implements the abstract class <xref:System.ServiceModel.Channels.BindingElement>. In the configuration file, the `bindingElementExtensions` section is used to define an extension element.  \n  \n The following example uses the `add` element, as well as the `name` attribute to add a binding extension to the `bindingElementExtensions` section of the configuration file.  \n  \n```xml  \n<system.serviceModel>\n  <extensions>\n    <bindingElementExtensions>\n      <add name=\"udpTransport\"\n           type=\"Microsoft.ServiceModel.Samples.UdpTransportSection, UdpTransport,\n                 Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" />\n    </bindingElementExtensions>\n  </extensions>\n</system.serviceModel>\n```  \n  \n To add configuration abilities to the element, the user needs to write and register a `bindingElementExtensionSection` element. For more information on this, see the <xref:System.Configuration> documentation.  \n  \n After the element and its configuration type are defined, the extension can be used as part of a custom binding as shown in the following example.  \n  \n```xml  \n<customBinding>\n  <binding name=\"test2\">\n    <udpTransport />\n    <binaryMessageEncoding maxReadPoolSize=\"211\"\n                           maxWritePoolSize=\"2132\"\n                           maxSessionSize=\"3141\" />\n  </binding>\n</customBinding>\n```  \n  \n## See also\n\n- <xref:System.ServiceModel.Configuration.BindingElementExtensionElement>\n- [Extending Bindings](../../../../../docs/framework/wcf/extending/extending-bindings.md)\n","nodes":[{"pos":[4,110],"embed":true,"restype":"x-metadata","content":"title: \"<bindingElementExtensions>\"\nms.date: \"03/30/2017\"\nms.assetid: bb597fc0-c947-451c-afda-bf23d42f4f4d","nodes":[{"content":"<bindingElementExtensions>","nodes":[],"path":["title"],"nosxs":false}],"yml":true},{"pos":[117,144],"content":"\\<bindingElementExtensions>","linkify":"\\<bindingElementExtensions>","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph>bindingElementExtensions&gt;","pos":[0,27],"source":"\\<bindingElementExtensions>"}]},{"content":"This section enables the use of a custom binding element from a machine or application configuration file.","pos":[145,251]},{"content":"You can add a custom binding element to this collection by using the <ph id=\"ph1\">`add`</ph> keyword, and setting the <ph id=\"ph2\">`type`</ph> attribute of the element to a binding element extension, as well as the <ph id=\"ph3\">`name`</ph> attribute to the custom binding element.","pos":[252,478],"source":" You can add a custom binding element to this collection by using the `add` keyword, and setting the `type` attribute of the element to a binding element extension, as well as the `name` attribute to the custom binding element."},{"content":"Binding extensions enable the user to create user-defined binding elements for use as part of custom bindings.","pos":[485,595]},{"content":"Programmatically, a binding extension is a type that implements the abstract class <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.BindingElement&gt;</ph>.","pos":[596,730],"source":" Programmatically, a binding extension is a type that implements the abstract class <xref:System.ServiceModel.Channels.BindingElement>."},{"content":"In the configuration file, the <ph id=\"ph1\">`bindingElementExtensions`</ph> section is used to define an extension element.","pos":[731,836],"source":" In the configuration file, the `bindingElementExtensions` section is used to define an extension element."},{"pos":[843,1016],"content":"The following example uses the <ph id=\"ph1\">`add`</ph> element, as well as the <ph id=\"ph2\">`name`</ph> attribute to add a binding extension to the <ph id=\"ph3\">`bindingElementExtensions`</ph> section of the configuration file.","source":"The following example uses the `add` element, as well as the `name` attribute to add a binding extension to the `bindingElementExtensions` section of the configuration file."},{"content":"To add configuration abilities to the element, the user needs to write and register a <ph id=\"ph1\">`bindingElementExtensionSection`</ph> element.","pos":[1369,1496],"source":"To add configuration abilities to the element, the user needs to write and register a `bindingElementExtensionSection` element."},{"content":"For more information on this, see the <ph id=\"ph1\">&lt;xref:System.Configuration&gt;</ph> documentation.","pos":[1497,1577],"source":" For more information on this, see the <xref:System.Configuration> documentation."},{"content":"After the element and its configuration type are defined, the extension can be used as part of a custom binding as shown in the following example.","pos":[1584,1730]},{"pos":[2001,2009],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2087,2174],"content":"<bpt id=\"p1\">[</bpt>Extending Bindings<ept id=\"p1\">](../../../../../docs/framework/wcf/extending/extending-bindings.md)</ept>","source":"[Extending Bindings](../../../../../docs/framework/wcf/extending/extending-bindings.md)"}]}