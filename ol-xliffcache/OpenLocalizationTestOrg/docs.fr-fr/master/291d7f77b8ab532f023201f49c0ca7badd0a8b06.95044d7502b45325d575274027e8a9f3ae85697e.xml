{"content":"---\ntitle: \"*= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.*=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"operator *=\"\n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"*= operator [Visual Basic]\"\n  - \"compound assignment statements\"\nms.assetid: 96c86509-6eb8-4682-8226-3852e049376f\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# *= Operator (Visual Basic)\nMultiplies the value of a variable or property by the value of an expression and assigns the result to the variable or property.  \n  \n## Syntax  \n  \n```  \n  \nvariableorproperty *= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric variable or property.  \n  \n `expression`  \n Required. Any numeric expression.  \n  \n## Remarks  \n The element on the left side of the `*=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `*=` operator first multiplies the value of the expression (on the right-hand side of the operator) by the value of the variable or property (on the left-hand side of the operator). The operator then assigns the result of that operation to the variable or property.  \n  \n## Overloading  \n The [* Operator](../../../visual-basic/language-reference/operators/multiplication-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `*` operator affects the behavior of the `*=` operator. If your code uses `*=` on a class or structure that overloads `*`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `*=` operator to multiply one `Integer` variable by a second and assign the result to the first variable.  \n  \n [!code-vb[VbVbalrOperators#5](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/multiplication-assignment-operator_1.vb)]  \n  \n## See Also  \n [* Operator](../../../visual-basic/language-reference/operators/multiplication-operator.md)   \n [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)","nodes":[{"pos":[4,735],"nodes":[{"content":"*= Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"*= Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"*= Operator (Visual Basic) | Microsoft Docs","pos":[0,43]}]}],"pos":[6,52],"yaml":true}],"content":"title: \"*= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.*=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"operator *=\"\n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"*= operator [Visual Basic]\"\n  - \"compound assignment statements\"\nms.assetid: 96c86509-6eb8-4682-8226-3852e049376f\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[742,768],"content":"*= Operator (Visual Basic)","linkify":"*= Operator (Visual Basic)","nodes":[{"content":"*= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Multiplies the value of a variable or property by the value of an expression and assigns the result to the variable or property.","pos":[769,897]},{"pos":[906,912],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[974,979],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1007,1016]},{"content":"Any numeric variable or property.","pos":[1017,1050]},{"content":"Required.","pos":[1073,1082]},{"content":"Any numeric expression.","pos":[1083,1106]},{"pos":[1115,1122],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`*=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[1126,1247],"source":"The element on the left side of the `*=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[1248,1358],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`*=`</ph> operator first multiplies the value of the expression (on the right-hand side of the operator) by the value of the variable or property (on the left-hand side of the operator).","pos":[1365,1550],"source":"The `*=` operator first multiplies the value of the expression (on the right-hand side of the operator) by the value of the variable or property (on the left-hand side of the operator)."},{"content":"The operator then assigns the result of that operation to the variable or property.","pos":[1551,1634]},{"pos":[1643,1654],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>* Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/multiplication-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1658,1895],"source":"The [* Operator](../../../visual-basic/language-reference/operators/multiplication-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`*`</ph> operator affects the behavior of the <ph id=\"ph2\">`*=`</ph> operator.","pos":[1896,1967],"source":" Overloading the `*` operator affects the behavior of the `*=` operator."},{"content":"If your code uses <ph id=\"ph1\">`*=`</ph> on a class or structure that overloads <ph id=\"ph2\">`*`</ph>, be sure you understand its redefined behavior.","pos":[1968,2081],"source":" If your code uses `*=` on a class or structure that overloads `*`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2082,2223],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2232,2239],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2243,2379],"content":"The following example uses the <ph id=\"ph1\">`*=`</ph> operator to multiply one <ph id=\"ph2\">`Integer`</ph> variable by a second and assign the result to the first variable.","source":"The following example uses the `*=` operator to multiply one `Integer` variable by a second and assign the result to the first variable."},{"pos":[2386,2532],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#5<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/multiplication-assignment-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#5](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/multiplication-assignment-operator_1.vb)]"},{"pos":[2541,2549],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>* Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/multiplication-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2553,2645],"source":"[* Operator](../../../visual-basic/language-reference/operators/multiplication-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2649,2748],"source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2752,2851],"source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[2855,2968],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[2972,3097],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","pos":[3101,3186],"source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}