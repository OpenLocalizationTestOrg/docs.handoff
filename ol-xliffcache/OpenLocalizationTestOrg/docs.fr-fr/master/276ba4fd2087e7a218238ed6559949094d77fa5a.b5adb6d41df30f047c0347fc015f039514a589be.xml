{"content":"---\ntitle: \"FunctionIDMapper Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"FunctionIDMapper\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"FunctionIDMapper\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"FunctionIDMapper function [.NET Framework profiling]\"\nms.assetid: b8205b60-1893-4303-8cff-7ac5a00892aa\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 9\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# FunctionIDMapper Function\nNotifies the profiler that the given identifier of a function may be remapped to an alternative ID to be used in the [FunctionEnter2](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md), [FunctionLeave2](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md), and [FunctionTailcall2](../../../../docs/framework/unmanaged-api/profiling/functiontailcall2-function.md) callbacks for that function. `FunctionIDMapper` also enables the profiler to indicate whether it wants to receive callbacks for that function.  \n  \n## Syntax  \n  \n```  \nUINT_PTR __stdcall FunctionIDMapper (  \n    [in]  FunctionID  funcId,   \n    [out] BOOL       *pbHookFunction  \n);  \n```  \n  \n#### Parameters  \n `funcId`  \n [in] The function identifier to be remapped.  \n  \n `pbHookFunction`  \n [out] A pointer to a value that the profiler sets to `true` if it wants to receive `FunctionEnter2`, `FunctionLeave2`, and `FunctionTailcall2` callbacks; otherwise, it sets this value to `false`.  \n  \n## Return Value  \n The profiler returns a value that the execution engine uses as an alternative function identifier. The return value cannot be null unless `false` is returned in `pbHookFunction`. Otherwise, a null return value will produce unpredictable results, including possibly halting the process.  \n  \n## Remarks  \n The `FunctionIDMapper` function is a callback. It is implemented by the profiler to remap a function ID to some other identifier that is more useful for the profiler. The `FunctionIDMapper` returns the alternate ID to be used for any given function. The execution engine then honors the profiler's request by passing this alternate ID, in addition to the traditional function ID, back to the profiler in the `clientData` parameter of the `FunctionEnter2`, `FunctionLeave2`, and `FunctionTailcall2` hooks, to identify the function for which the hook is being called.  \n  \n You can use the [ICorProfilerInfo::SetFunctionIDMapper](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setfunctionidmapper-method.md) method to specify the implementation of the `FunctionIDMapper` function. You can call the `ICorProfilerInfo::SetFunctionIDMapper` method only once, and we recommend that you do so in the [ICorProfilerCallback::Initialize](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-initialize-method.md) callback.  \n  \n By default, it is assumed that a profiler that sets the COR_PRF_MONITOR_ENTERLEAVE flag by using [ICorProfilerInfo::SetEventMask](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-seteventmask-method.md), and which sets hooks via [ICorProfilerInfo::SetEnterLeaveFunctionHooks](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setenterleavefunctionhooks-method.md) or [ICorProfilerInfo2::SetEnterLeaveFunctionHooks2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method.md), should receive the `FunctionEnter2`, `FunctionLeave2`, and `FunctionTailcall2` callbacks for every function. However, profilers may implement `FunctionIDMapper` to selectively avoid receiving these callbacks for certain functions by setting `pbHookFunction` to `false`.  \n  \n Profilers should be tolerant of cases where multiple threads of a profiled application are calling the same method/function simultaneously. In such cases, the profiler may receive multiple `FunctionIDMapper` callbacks for the same `FunctionID`. The profiler should be certain to return the same values from this callback when it is called multiple times with the same `FunctionID`.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]  \n  \n## See Also  \n [SetFunctionIDMapper Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setfunctionidmapper-method.md)   \n [FunctionIDMapper2 Function](../../../../docs/framework/unmanaged-api/profiling/functionidmapper2-function.md)   \n [FunctionEnter2 Function](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md)   \n [FunctionLeave2 Function](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)   \n [FunctionTailcall2 Function](../../../../docs/framework/unmanaged-api/profiling/functiontailcall2-function.md)   \n [Profiling Global Static Functions](../../../../docs/framework/unmanaged-api/profiling/profiling-global-static-functions.md)","nodes":[{"pos":[4,604],"embed":true,"restype":"x-metadata","content":"title: \"FunctionIDMapper Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"FunctionIDMapper\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"FunctionIDMapper\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"FunctionIDMapper function [.NET Framework profiling]\"\nms.assetid: b8205b60-1893-4303-8cff-7ac5a00892aa\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 9\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"FunctionIDMapper Function | Microsoft Docs","nodes":[{"pos":[0,42],"content":"FunctionIDMapper Function | Microsoft Docs","nodes":[{"content":"FunctionIDMapper Function | Microsoft Docs","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[611,636],"content":"FunctionIDMapper Function","linkify":"FunctionIDMapper Function","nodes":[{"content":"FunctionIDMapper Function","pos":[0,25]}]},{"content":"Notifies the profiler that the given identifier of a function may be remapped to an alternative ID to be used in the <bpt id=\"p1\">[</bpt>FunctionEnter2<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md)</ept>, <bpt id=\"p2\">[</bpt>FunctionLeave2<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)</ept>, and <bpt id=\"p3\">[</bpt>FunctionTailcall2<ept id=\"p3\">](../../../../docs/framework/unmanaged-api/profiling/functiontailcall2-function.md)</ept> callbacks for that function.","pos":[637,1082],"source":"Notifies the profiler that the given identifier of a function may be remapped to an alternative ID to be used in the [FunctionEnter2](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md), [FunctionLeave2](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md), and [FunctionTailcall2](../../../../docs/framework/unmanaged-api/profiling/functiontailcall2-function.md) callbacks for that function."},{"content":"<ph id=\"ph1\">`FunctionIDMapper`</ph> also enables the profiler to indicate whether it wants to receive callbacks for that function.","pos":[1083,1196],"source":"`FunctionIDMapper` also enables the profiler to indicate whether it wants to receive callbacks for that function."},{"pos":[1205,1211],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1354,1364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The function identifier to be remapped.","pos":[1380,1424]},{"content":"[out] A pointer to a value that the profiler sets to <ph id=\"ph1\">`true`</ph> if it wants to receive <ph id=\"ph2\">`FunctionEnter2`</ph>, <ph id=\"ph3\">`FunctionLeave2`</ph>, and <ph id=\"ph4\">`FunctionTailcall2`</ph> callbacks; otherwise, it sets this value to <ph id=\"ph5\">`false`</ph>.","pos":[1451,1646],"source":"[out] A pointer to a value that the profiler sets to `true` if it wants to receive `FunctionEnter2`, `FunctionLeave2`, and `FunctionTailcall2` callbacks; otherwise, it sets this value to `false`."},{"pos":[1655,1667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The profiler returns a value that the execution engine uses as an alternative function identifier.","pos":[1671,1769]},{"content":"The return value cannot be null unless <ph id=\"ph1\">`false`</ph> is returned in <ph id=\"ph2\">`pbHookFunction`</ph>.","pos":[1770,1849],"source":" The return value cannot be null unless `false` is returned in `pbHookFunction`."},{"content":"Otherwise, a null return value will produce unpredictable results, including possibly halting the process.","pos":[1850,1956]},{"pos":[1965,1972],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`FunctionIDMapper`</ph> function is a callback.","pos":[1976,2022],"source":"The `FunctionIDMapper` function is a callback."},{"content":"It is implemented by the profiler to remap a function ID to some other identifier that is more useful for the profiler.","pos":[2023,2142]},{"content":"The <ph id=\"ph1\">`FunctionIDMapper`</ph> returns the alternate ID to be used for any given function.","pos":[2143,2225],"source":" The `FunctionIDMapper` returns the alternate ID to be used for any given function."},{"content":"The execution engine then honors the profiler's request by passing this alternate ID, in addition to the traditional function ID, back to the profiler in the <ph id=\"ph1\">`clientData`</ph> parameter of the <ph id=\"ph2\">`FunctionEnter2`</ph>, <ph id=\"ph3\">`FunctionLeave2`</ph>, and <ph id=\"ph4\">`FunctionTailcall2`</ph> hooks, to identify the function for which the hook is being called.","pos":[2226,2541],"source":" The execution engine then honors the profiler's request by passing this alternate ID, in addition to the traditional function ID, back to the profiler in the `clientData` parameter of the `FunctionEnter2`, `FunctionLeave2`, and `FunctionTailcall2` hooks, to identify the function for which the hook is being called."},{"content":"You can use the <bpt id=\"p1\">[</bpt>ICorProfilerInfo::SetFunctionIDMapper<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setfunctionidmapper-method.md)</ept> method to specify the implementation of the <ph id=\"ph1\">`FunctionIDMapper`</ph> function.","pos":[2548,2775],"source":"You can use the [ICorProfilerInfo::SetFunctionIDMapper](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setfunctionidmapper-method.md) method to specify the implementation of the `FunctionIDMapper` function."},{"content":"You can call the <ph id=\"ph1\">`ICorProfilerInfo::SetFunctionIDMapper`</ph> method only once, and we recommend that you do so in the <bpt id=\"p1\">[</bpt>ICorProfilerCallback::Initialize<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-initialize-method.md)</ept> callback.","pos":[2776,3028],"source":" You can call the `ICorProfilerInfo::SetFunctionIDMapper` method only once, and we recommend that you do so in the [ICorProfilerCallback::Initialize](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-initialize-method.md) callback."},{"content":"By default, it is assumed that a profiler that sets the COR_PRF_MONITOR_ENTERLEAVE flag by using <bpt id=\"p1\">[</bpt>ICorProfilerInfo::SetEventMask<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-seteventmask-method.md)</ept>, and which sets hooks via <bpt id=\"p2\">[</bpt>ICorProfilerInfo::SetEnterLeaveFunctionHooks<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setenterleavefunctionhooks-method.md)</ept> or <bpt id=\"p3\">[</bpt>ICorProfilerInfo2::SetEnterLeaveFunctionHooks2<ept id=\"p3\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method.md)</ept>, should receive the <ph id=\"ph1\">`FunctionEnter2`</ph>, <ph id=\"ph2\">`FunctionLeave2`</ph>, and <ph id=\"ph3\">`FunctionTailcall2`</ph> callbacks for every function.","pos":[3035,3705],"source":"By default, it is assumed that a profiler that sets the COR_PRF_MONITOR_ENTERLEAVE flag by using [ICorProfilerInfo::SetEventMask](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-seteventmask-method.md), and which sets hooks via [ICorProfilerInfo::SetEnterLeaveFunctionHooks](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setenterleavefunctionhooks-method.md) or [ICorProfilerInfo2::SetEnterLeaveFunctionHooks2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method.md), should receive the `FunctionEnter2`, `FunctionLeave2`, and `FunctionTailcall2` callbacks for every function."},{"content":"However, profilers may implement <ph id=\"ph1\">`FunctionIDMapper`</ph> to selectively avoid receiving these callbacks for certain functions by setting <ph id=\"ph2\">`pbHookFunction`</ph> to <ph id=\"ph3\">`false`</ph>.","pos":[3706,3866],"source":" However, profilers may implement `FunctionIDMapper` to selectively avoid receiving these callbacks for certain functions by setting `pbHookFunction` to `false`."},{"content":"Profilers should be tolerant of cases where multiple threads of a profiled application are calling the same method/function simultaneously.","pos":[3873,4012]},{"content":"In such cases, the profiler may receive multiple <ph id=\"ph1\">`FunctionIDMapper`</ph> callbacks for the same <ph id=\"ph2\">`FunctionID`</ph>.","pos":[4013,4117],"source":" In such cases, the profiler may receive multiple `FunctionIDMapper` callbacks for the same `FunctionID`."},{"content":"The profiler should be certain to return the same values from this callback when it is called multiple times with the same <ph id=\"ph1\">`FunctionID`</ph>.","pos":[4118,4254],"source":" The profiler should be certain to return the same values from this callback when it is called multiple times with the same `FunctionID`."},{"pos":[4263,4275],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4279,4383],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[4390,4413],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl","source":"**Header:** CorProf.idl"},{"pos":[4420,4445],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[4452,4480],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept>","source":"**.NET Framework Versions:**"},{"pos":[4569,4577],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>SetFunctionIDMapper Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setfunctionidmapper-method.md)</ept><ph id=\"ph1\"> </ph>","pos":[4581,4709],"source":"[SetFunctionIDMapper Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setfunctionidmapper-method.md) "},{"content":"<bpt id=\"p1\">[</bpt>FunctionIDMapper2 Function<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functionidmapper2-function.md)</ept><ph id=\"ph1\"> </ph>","pos":[4713,4824],"source":"[FunctionIDMapper2 Function](../../../../docs/framework/unmanaged-api/profiling/functionidmapper2-function.md) "},{"content":"<bpt id=\"p1\">[</bpt>FunctionEnter2 Function<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md)</ept><ph id=\"ph1\"> </ph>","pos":[4828,4933],"source":"[FunctionEnter2 Function](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md) "},{"content":"<bpt id=\"p1\">[</bpt>FunctionLeave2 Function<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)</ept><ph id=\"ph1\"> </ph>","pos":[4937,5042],"source":"[FunctionLeave2 Function](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md) "},{"content":"<bpt id=\"p1\">[</bpt>FunctionTailcall2 Function<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functiontailcall2-function.md)</ept><ph id=\"ph1\"> </ph>","pos":[5046,5157],"source":"[FunctionTailcall2 Function](../../../../docs/framework/unmanaged-api/profiling/functiontailcall2-function.md) "},{"content":"<bpt id=\"p1\">[</bpt>Profiling Global Static Functions<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/profiling-global-static-functions.md)</ept>","pos":[5161,5285],"source":"[Profiling Global Static Functions](../../../../docs/framework/unmanaged-api/profiling/profiling-global-static-functions.md)"}]}