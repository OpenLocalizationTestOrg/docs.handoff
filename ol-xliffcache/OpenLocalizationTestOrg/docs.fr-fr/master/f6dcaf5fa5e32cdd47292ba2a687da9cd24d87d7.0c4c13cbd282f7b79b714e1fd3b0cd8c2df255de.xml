{"content":"---\ntitle: \"Passing Arrays as Arguments (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"arrays [C#], passing as arguments\"\nms.assetid: f3a0971e-c87c-4a1f-8262-bc0a3b712772\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Passing Arrays as Arguments (C# Programming Guide)\nArrays can be passed as arguments to method parameters. Because arrays are reference types, the method can change the value of the elements.  \n  \n## Passing Single-Dimensional Arrays As Arguments  \n You can pass an initialized single-dimensional array to a method. For example, the following statement sends an array to a print method.  \n  \n [!code-cs[csProgGuideArrays#34](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_1.cs)]  \n  \n The following code shows a partial implementation of the print method.  \n  \n [!code-cs[csProgGuideArrays#33](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_2.cs)]  \n  \n You can initialize and pass a new array in one step, as is shown in the following example.  \n  \n [!code-cs[CsProgGuideArrays#35](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_3.cs)]  \n  \n## Example  \n  \n### Description  \n In the following example, an array of strings is initialized and passed as an argument to a `PrintArray` method for strings. The method displays the elements of the array. Next, methods `ChangeArray` and `ChangeArrayElement` are called to demonstrate that sending an array argument by value does not prevent changes to the array elements.  \n  \n### Code  \n [!code-cs[csProgGuideArrays#30](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_4.cs)]  \n  \n## Passing Multidimensional Arrays As Arguments  \n You pass an initialized multidimensional array to a method in the same way that you pass a one-dimensional array.  \n  \n [!code-cs[csProgGuideArrays#41](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_5.cs)]  \n  \n The following code shows a partial declaration of a print method that accepts a two-dimensional array as its argument.  \n  \n [!code-cs[csProgGuideArrays#36](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_6.cs)]  \n  \n You can initialize and pass a new array in one step, as is shown in the following example.  \n  \n [!code-cs[csProgGuideArrays#32](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_7.cs)]  \n  \n## Example  \n  \n### Description  \n In the following example, a two-dimensional array of integers is initialized and passed to the `Print2DArray` method. The method displays the elements of the array.  \n  \n### Code  \n [!code-cs[csProgGuideArrays#31](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_8.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Arrays](../../../csharp/programming-guide/arrays/index.md)   \n [Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)   \n [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)   \n [Jagged Arrays](../../../csharp/programming-guide/arrays/jagged-arrays.md)","nodes":[{"pos":[12,79],"content":"Passing Arrays as Arguments (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Passing Arrays as Arguments (C# Programming Guide) | Microsoft Docs","pos":[0,67]}]},{"pos":[569,619],"content":"Passing Arrays as Arguments (C# Programming Guide)","linkify":"Passing Arrays as Arguments (C# Programming Guide)","nodes":[{"content":"Passing Arrays as Arguments (C# Programming Guide)","pos":[0,50]}]},{"content":"Arrays can be passed as arguments to method parameters.","pos":[620,675]},{"content":"Because arrays are reference types, the method can change the value of the elements.","pos":[676,760]},{"pos":[769,815],"content":"Passing Single-Dimensional Arrays As Arguments","linkify":"Passing Single-Dimensional Arrays As Arguments","nodes":[{"content":"Passing Single-Dimensional Arrays As Arguments","pos":[0,46]}]},{"content":"You can pass an initialized single-dimensional array to a method.","pos":[819,884]},{"content":"For example, the following statement sends an array to a print method.","pos":[885,955]},{"pos":[962,1088],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#34<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#34](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_1.cs)]"},{"content":"The following code shows a partial implementation of the print method.","pos":[1095,1165]},{"pos":[1172,1298],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#33<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#33](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_2.cs)]"},{"content":"You can initialize and pass a new array in one step, as is shown in the following example.","pos":[1305,1395]},{"pos":[1402,1528],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CsProgGuideArrays#35<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[CsProgGuideArrays#35](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_3.cs)]"},{"pos":[1537,1544],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1554,1565],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"In the following example, an array of strings is initialized and passed as an argument to a <ph id=\"ph1\">`PrintArray`</ph> method for strings.","pos":[1569,1693],"source":"In the following example, an array of strings is initialized and passed as an argument to a `PrintArray` method for strings."},{"content":"The method displays the elements of the array.","pos":[1694,1740]},{"content":"Next, methods <ph id=\"ph1\">`ChangeArray`</ph> and <ph id=\"ph2\">`ChangeArrayElement`</ph> are called to demonstrate that sending an array argument by value does not prevent changes to the array elements.","pos":[1741,1907],"source":" Next, methods `ChangeArray` and `ChangeArrayElement` are called to demonstrate that sending an array argument by value does not prevent changes to the array elements."},{"pos":[1917,1921],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[1925,2051],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#30<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#30](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_4.cs)]"},{"pos":[2060,2104],"content":"Passing Multidimensional Arrays As Arguments","linkify":"Passing Multidimensional Arrays As Arguments","nodes":[{"content":"Passing Multidimensional Arrays As Arguments","pos":[0,44]}]},{"content":"You pass an initialized multidimensional array to a method in the same way that you pass a one-dimensional array.","pos":[2108,2221]},{"pos":[2228,2354],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#41<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#41](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_5.cs)]"},{"content":"The following code shows a partial declaration of a print method that accepts a two-dimensional array as its argument.","pos":[2361,2479]},{"pos":[2486,2612],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#36<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_6.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#36](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_6.cs)]"},{"content":"You can initialize and pass a new array in one step, as is shown in the following example.","pos":[2619,2709]},{"pos":[2716,2842],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#32<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_7.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#32](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_7.cs)]"},{"pos":[2851,2858],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2868,2879],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"In the following example, a two-dimensional array of integers is initialized and passed to the <ph id=\"ph1\">`Print2DArray`</ph> method.","pos":[2883,3000],"source":"In the following example, a two-dimensional array of integers is initialized and passed to the `Print2DArray` method."},{"content":"The method displays the elements of the array.","pos":[3001,3047]},{"pos":[3057,3061],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[3065,3191],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#31<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_8.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#31](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-as-arguments_8.cs)]"},{"pos":[3200,3208],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3212,3279],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3282,3343],"source":" [Arrays](../../../csharp/programming-guide/arrays/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Single-Dimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)</ept><ph id=\"ph1\"> </ph>","pos":[3346,3446],"source":" [Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Multidimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)</ept><ph id=\"ph1\"> </ph>","pos":[3449,3545],"source":" [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Jagged Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/jagged-arrays.md)</ept>","pos":[3548,3623],"source":" [Jagged Arrays](../../../csharp/programming-guide/arrays/jagged-arrays.md)"}]}