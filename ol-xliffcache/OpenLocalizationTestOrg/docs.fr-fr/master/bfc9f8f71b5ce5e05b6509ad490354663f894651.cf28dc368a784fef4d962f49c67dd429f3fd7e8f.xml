{"content":"---\ntitle: \"Namespaces in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.global\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"assemblies [Visual Basic], namespaces\"\n  - \"name collisions\"\n  - \"Global keyword [Visual Basic]\"\n  - \"namespace pollution\"\n  - \"names, avoiding conflicts\"\n  - \"naming conflicts, namespaces\"\n  - \"namespaces, assemblies\"\n  - \"Visual Basic code, namespaces\"\n  - \"fully qualified names\"\n  - \"naming conventions, naming conflicts\"\n  - \"namespaces\"\nms.assetid: cffac744-ab8c-4f1f-ba50-732c22ab4b88\ncaps.latest.revision: 27\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Namespaces in Visual Basic\nNamespaces organize the objects defined in an assembly. Assemblies can contain multiple namespaces, which can in turn contain other namespaces. Namespaces prevent ambiguity and simplify references when using large groups of objects such as class libraries.  \n  \n For example, the [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] defines the <xref:System.Windows.Forms.ListBox> class in the <xref:System.Windows.Forms?displayProperty=fullName> namespace. The following code fragment shows how to declare a variable using the fully qualified name for this class:  \n  \n [!code-vb[VbVbalrApplication#6](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_1.vb)]  \n  \n## Avoiding Name Collisions  \n [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] namespaces address a problem sometimes called *namespace pollution*, in which the developer of a class library is hampered by the use of similar names in another library. These conflicts with existing components are sometimes called *name collisions*.  \n  \n For example, if you create a new class named `ListBox`, you can use it inside your project without qualification. However, if you want to use the [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] <xref:System.Windows.Forms.ListBox> class in the same project, you must use a fully qualified reference to make the reference unique. If the reference is not unique, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] produces an error stating that the name is ambiguous. The following code example demonstrates how to declare these objects:  \n  \n [!code-vb[VbVbalrApplication#7](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_2.vb)]  \n  \n The following illustration shows two namespace hierarchies, both containing an object named `ListBox`.  \n  \n ![Namespace Hierarchy](../../../visual-basic/programming-guide/program-structure/media/vanamespacehierarchy.gif \"vaNamespaceHierarchy\")  \n  \n By default, every executable file you create with [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] contains a namespace with the same name as your project. For example, if you define an object within a project named `ListBoxProject`, the executable file ListBoxProject.exe contains a namespace called `ListBoxProject`.  \n  \n Multiple assemblies can use the same namespace. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] treats them as a single set of names. For example, you can define classes for a namespace called `SomeNameSpace` in an assembly named `Assemb1`, and define additional classes for the same namespace from an assembly named `Assemb2`.  \n  \n## Fully Qualified Names  \n Fully qualified names are object references that are prefixed with the name of the namespace in which the object is defined. You can use objects defined in other projects if you create a reference to the class (by choosing **Add Reference** from the **Project** menu) and then use the fully qualified name for the object in your code. The following code fragment shows how to use the fully qualified name for an object from another project's namespace:  \n  \n [!code-vb[VbVbalrApplication#8](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_3.vb)]  \n  \n Fully qualified names prevent naming conflicts because they make it possible for the compiler to determine which object is being used. However, the names themselves can get long and cumbersome. To get around this, you can use the `Imports` statement to define an *alias*â€”an abbreviated name you can use in place of a fully qualified name. For example, the following code example creates aliases for two fully qualified names, and uses these aliases to define two objects.  \n  \n [!code-vb[VbVbalrApplication#9](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_4.vb)]  \n  \n [!code-vb[VbVbalrApplication#10](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_5.vb)]  \n  \n If you use the `Imports` statement without an alias, you can use all the names in that namespace without qualification, provided they are unique to the project. If your project contains `Imports` statements for namespaces that contain items with the same name, you must fully qualify that name when you use it. Suppose, for example, your project contained the following two `Imports` statements:  \n  \n [!code-vb[VbVbalrApplication#11](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_6.vb)]  \n  \n If you attempt to use `Class1` without fully qualifying it, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] produces an error stating that the name `Class1` is ambiguous.  \n  \n## Namespace Level Statements  \n Within a namespace, you can define items such as modules, interfaces, classes, delegates, enumerations, structures, and other namespaces. You cannot define items such as properties, procedures, variables and events at the namespace level. These items must be declared within containers such as modules, structures, or classes.  \n  \n## Global Keyword in Fully Qualified Names  \n If you have defined a nested hierarchy of namespaces, code inside that hierarchy might be blocked from accessing the <xref:System?displayProperty=fullName> namespace of the .NET Framework. The following example illustrates a hierarchy in which the `SpecialSpace.System` namespace blocks access to <xref:System?displayProperty=fullName>.  \n  \n```vb  \nNamespace SpecialSpace  \n    Namespace System  \n        Class abc  \n            Function getValue() As System.Int32  \n                Dim n As System.Int32  \n                Return n  \n            End Function  \n        End Class  \n    End Namespace  \nEnd Namespace  \n```  \n  \n As a result, the Visual Basic compiler cannot successfully resolve the reference to <xref:System.Int32?displayProperty=fullName>, because `SpecialSpace.System` does not define `Int32`. You can use the `Global` keyword to start the qualification chain at the outermost level of the .NET Framework class library. This allows you to specify the <xref:System?displayProperty=fullName> namespace or any other namespace in the class library. The following example illustrates this.  \n  \n```vb  \nNamespace SpecialSpace  \n    Namespace System  \n        Class abc  \n            Function getValue() As Global.System.Int32  \n                Dim n As Global.System.Int32  \n                Return n  \n            End Function  \n        End Class  \n    End Namespace  \nEnd Namespace  \n```  \n  \n You can use `Global` to access other root-level namespaces, such as <xref:Microsoft.VisualBasic?displayProperty=fullName>, and any namespace associated with your project.  \n  \n## Global Keyword in Namespace Statements  \n You can also use the `Global` keyword in a [Namespace Statement](../../../visual-basic/language-reference/statements/namespace-statement.md). This lets you define a namespace out of the root namespace of your project.  \n  \n All namespaces in your project are based on the root namespace for the project.  Visual Studio assigns your project name as the default root namespace for all code in your project. For example, if your project is named `ConsoleApplication1`, its programming elements belong to namespace `ConsoleApplication1`. If you declare `Namespace Magnetosphere`, references to `Magnetosphere` in the project will access `ConsoleApplication1.Magnetosphere`.  \n  \n The following examples use the `Global` keyword to declare a namespace out of the root namespace for the project.  \n  \n [!code-vb[VbVbalrApplication#22](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_7.vb)]  \n  \n In a namespace declaration, `Global` cannot be nested in another namespace.  \n  \n You can use the [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic) to view and modify the **Root Namespace** of the project.  For new projects, the **Root Namespace** defaults to the project name. To cause `Global` to be the top-level namespace, you can clear the **Root Namespace** entry so that the box is empty. Clearing **Root Namespace** removes the need for the `Global` keyword in namespace declarations.  \n  \n If a `Namespace` statement declares a name that is also a namespace in the .NET Framework, the .NET Framework namespace becomes unavailable if the `Global` keyword is not used in a fully qualified name. To enable access to that .NET Framework namespace without using the `Global` keyword, you can include the `Global` keyword in the `Namespace` statement.  \n  \n The following example has the `Global` keyword in the `System.Text` namespace declaration.  \n  \n If the `Global` keyword was not present in the namespace declaration, <xref:System.Text.StringBuilder> could not be accessed without specifying `Global.System.Text.StringBuilder`. For a project named `ConsoleApplication1`, references to `System.Text` would access `ConsoleApplication1.System.Text` if the `Global` keyword was not used.  \n  \n [!code-vb[VbVbalrApplication#21](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_8.vb)]  \n  \n## See Also  \n <xref:System.Windows.Forms.ListBox>   \n <xref:System.Windows.Forms?displayProperty=fullName>   \n [Assemblies and the Global Assembly Cache](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)   \n [How to: Create and Use Assemblies Using the Command Line](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)   \n [References and the Imports Statement](../../../visual-basic/programming-guide/program-structure/references-and-the-imports-statement.md)   \n [Imports Statement (.NET Namespace and Type)](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)   \n [Writing Code in Office Solutions](https://msdn.microsoft.com/library/bb608596)","nodes":[{"pos":[12,55],"content":"Namespaces in Visual Basic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Namespaces in Visual Basic | Microsoft Docs","pos":[0,43]}]},{"pos":[954,980],"content":"Namespaces in Visual Basic","linkify":"Namespaces in Visual Basic","nodes":[{"content":"Namespaces in Visual Basic","pos":[0,26]}]},{"content":"Namespaces organize the objects defined in an assembly.","pos":[981,1036]},{"content":"Assemblies can contain multiple namespaces, which can in turn contain other namespaces.","pos":[1037,1124]},{"content":"Namespaces prevent ambiguity and simplify references when using large groups of objects such as class libraries.","pos":[1125,1237]},{"content":"For example, the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> defines the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> class in the <ph id=\"ph3\">&lt;xref:System.Windows.Forms?displayProperty=fullName&gt;</ph> namespace.","pos":[1244,1469],"source":"For example, the [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] defines the <xref:System.Windows.Forms.ListBox> class in the <xref:System.Windows.Forms?displayProperty=fullName> namespace."},{"content":"The following code fragment shows how to declare a variable using the fully qualified name for this class:","pos":[1470,1576]},{"pos":[1583,1714],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#6<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#6](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_1.vb)]"},{"pos":[1723,1747],"content":"Avoiding Name Collisions","linkify":"Avoiding Name Collisions","nodes":[{"content":"Avoiding Name Collisions","pos":[0,24]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> namespaces address a problem sometimes called <bpt id=\"p1\">*</bpt>namespace pollution<ept id=\"p1\">*</ept>, in which the developer of a class library is hampered by the use of similar names in another library.","pos":[1751,2005],"source":"[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] namespaces address a problem sometimes called *namespace pollution*, in which the developer of a class library is hampered by the use of similar names in another library."},{"content":"These conflicts with existing components are sometimes called <bpt id=\"p1\">*</bpt>name collisions<ept id=\"p1\">*</ept>.","pos":[2006,2086],"source":" These conflicts with existing components are sometimes called *name collisions*."},{"content":"For example, if you create a new class named <ph id=\"ph1\">`ListBox`</ph>, you can use it inside your project without qualification.","pos":[2093,2206],"source":"For example, if you create a new class named `ListBox`, you can use it inside your project without qualification."},{"content":"However, if you want to use the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> class in the same project, you must use a fully qualified reference to make the reference unique.","pos":[2207,2456],"source":" However, if you want to use the [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] <xref:System.Windows.Forms.ListBox> class in the same project, you must use a fully qualified reference to make the reference unique."},{"content":"If the reference is not unique, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> produces an error stating that the name is ambiguous.","pos":[2457,2632],"source":" If the reference is not unique, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] produces an error stating that the name is ambiguous."},{"content":"The following code example demonstrates how to declare these objects:","pos":[2633,2702]},{"pos":[2709,2840],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#7<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#7](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_2.vb)]"},{"pos":[2847,2949],"content":"The following illustration shows two namespace hierarchies, both containing an object named <ph id=\"ph1\">`ListBox`</ph>.","source":"The following illustration shows two namespace hierarchies, both containing an object named `ListBox`."},{"pos":[2956,3091],"content":"<bpt id=\"p1\">![</bpt>Namespace Hierarchy<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../visual-basic/programming-guide/program-structure/media/vanamespacehierarchy.gif \"</bpt>vaNamespaceHierarchy<ept id=\"p2\">\")</ept>","source":"![Namespace Hierarchy](../../../visual-basic/programming-guide/program-structure/media/vanamespacehierarchy.gif \"vaNamespaceHierarchy\")"},{"content":"By default, every executable file you create with <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> contains a namespace with the same name as your project.","pos":[3098,3294],"source":"By default, every executable file you create with [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] contains a namespace with the same name as your project."},{"content":"For example, if you define an object within a project named <ph id=\"ph1\">`ListBoxProject`</ph>, the executable file ListBoxProject.exe contains a namespace called <ph id=\"ph2\">`ListBoxProject`</ph>.","pos":[3295,3457],"source":" For example, if you define an object within a project named `ListBoxProject`, the executable file ListBoxProject.exe contains a namespace called `ListBoxProject`."},{"content":"Multiple assemblies can use the same namespace.","pos":[3464,3511]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> treats them as a single set of names.","pos":[3512,3639],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] treats them as a single set of names."},{"content":"For example, you can define classes for a namespace called <ph id=\"ph1\">`SomeNameSpace`</ph> in an assembly named <ph id=\"ph2\">`Assemb1`</ph>, and define additional classes for the same namespace from an assembly named <ph id=\"ph3\">`Assemb2`</ph>.","pos":[3640,3833],"source":" For example, you can define classes for a namespace called `SomeNameSpace` in an assembly named `Assemb1`, and define additional classes for the same namespace from an assembly named `Assemb2`."},{"pos":[3842,3863],"content":"Fully Qualified Names","linkify":"Fully Qualified Names","nodes":[{"content":"Fully Qualified Names","pos":[0,21]}]},{"content":"Fully qualified names are object references that are prefixed with the name of the namespace in which the object is defined.","pos":[3867,3991]},{"content":"You can use objects defined in other projects if you create a reference to the class (by choosing <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Project<ept id=\"p2\">**</ept> menu) and then use the fully qualified name for the object in your code.","pos":[3992,4201],"source":" You can use objects defined in other projects if you create a reference to the class (by choosing **Add Reference** from the **Project** menu) and then use the fully qualified name for the object in your code."},{"content":"The following code fragment shows how to use the fully qualified name for an object from another project's namespace:","pos":[4202,4319]},{"pos":[4326,4457],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#8<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#8](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_3.vb)]"},{"content":"Fully qualified names prevent naming conflicts because they make it possible for the compiler to determine which object is being used.","pos":[4464,4598]},{"content":"However, the names themselves can get long and cumbersome.","pos":[4599,4657]},{"content":"To get around this, you can use the <ph id=\"ph1\">`Imports`</ph> statement to define an <bpt id=\"p1\">*</bpt>alias<ept id=\"p1\">*</ept>â€”an abbreviated name you can use in place of a fully qualified name.","pos":[4658,4802],"source":" To get around this, you can use the `Imports` statement to define an *alias*â€”an abbreviated name you can use in place of a fully qualified name."},{"content":"For example, the following code example creates aliases for two fully qualified names, and uses these aliases to define two objects.","pos":[4803,4935]},{"pos":[4942,5073],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#9<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_4.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#9](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_4.vb)]"},{"pos":[5080,5212],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#10<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_5.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#10](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_5.vb)]"},{"content":"If you use the <ph id=\"ph1\">`Imports`</ph> statement without an alias, you can use all the names in that namespace without qualification, provided they are unique to the project.","pos":[5219,5379],"source":"If you use the `Imports` statement without an alias, you can use all the names in that namespace without qualification, provided they are unique to the project."},{"content":"If your project contains <ph id=\"ph1\">`Imports`</ph> statements for namespaces that contain items with the same name, you must fully qualify that name when you use it.","pos":[5380,5529],"source":" If your project contains `Imports` statements for namespaces that contain items with the same name, you must fully qualify that name when you use it."},{"content":"Suppose, for example, your project contained the following two <ph id=\"ph1\">`Imports`</ph> statements:","pos":[5530,5614],"source":" Suppose, for example, your project contained the following two `Imports` statements:"},{"pos":[5621,5753],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#11<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_6.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#11](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_6.vb)]"},{"pos":[5760,5972],"content":"If you attempt to use <ph id=\"ph1\">`Class1`</ph> without fully qualifying it, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> produces an error stating that the name <ph id=\"ph3\">`Class1`</ph> is ambiguous.","source":"If you attempt to use `Class1` without fully qualifying it, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] produces an error stating that the name `Class1` is ambiguous."},{"pos":[5981,6007],"content":"Namespace Level Statements","linkify":"Namespace Level Statements","nodes":[{"content":"Namespace Level Statements","pos":[0,26]}]},{"content":"Within a namespace, you can define items such as modules, interfaces, classes, delegates, enumerations, structures, and other namespaces.","pos":[6011,6148]},{"content":"You cannot define items such as properties, procedures, variables and events at the namespace level.","pos":[6149,6249]},{"content":"These items must be declared within containers such as modules, structures, or classes.","pos":[6250,6337]},{"pos":[6346,6385],"content":"Global Keyword in Fully Qualified Names","linkify":"Global Keyword in Fully Qualified Names","nodes":[{"content":"Global Keyword in Fully Qualified Names","pos":[0,39]}]},{"content":"If you have defined a nested hierarchy of namespaces, code inside that hierarchy might be blocked from accessing the <ph id=\"ph1\">&lt;xref:System?displayProperty=fullName&gt;</ph> namespace of the .NET Framework.","pos":[6389,6577],"source":"If you have defined a nested hierarchy of namespaces, code inside that hierarchy might be blocked from accessing the <xref:System?displayProperty=fullName> namespace of the .NET Framework."},{"content":"The following example illustrates a hierarchy in which the <ph id=\"ph1\">`SpecialSpace.System`</ph> namespace blocks access to <ph id=\"ph2\">&lt;xref:System?displayProperty=fullName&gt;</ph>.","pos":[6578,6725],"source":" The following example illustrates a hierarchy in which the `SpecialSpace.System` namespace blocks access to <xref:System?displayProperty=fullName>."},{"content":"As a result, the Visual Basic compiler cannot successfully resolve the reference to <ph id=\"ph1\">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>, because <ph id=\"ph2\">`SpecialSpace.System`</ph> does not define <ph id=\"ph3\">`Int32`</ph>.","pos":[7017,7201],"source":"As a result, the Visual Basic compiler cannot successfully resolve the reference to <xref:System.Int32?displayProperty=fullName>, because `SpecialSpace.System` does not define `Int32`."},{"content":"You can use the <ph id=\"ph1\">`Global`</ph> keyword to start the qualification chain at the outermost level of the .NET Framework class library.","pos":[7202,7327],"source":" You can use the `Global` keyword to start the qualification chain at the outermost level of the .NET Framework class library."},{"content":"This allows you to specify the <ph id=\"ph1\">&lt;xref:System?displayProperty=fullName&gt;</ph> namespace or any other namespace in the class library.","pos":[7328,7452],"source":" This allows you to specify the <xref:System?displayProperty=fullName> namespace or any other namespace in the class library."},{"content":"The following example illustrates this.","pos":[7453,7492]},{"pos":[7798,7968],"content":"You can use <ph id=\"ph1\">`Global`</ph> to access other root-level namespaces, such as <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic?displayProperty=fullName&gt;</ph>, and any namespace associated with your project.","source":"You can use `Global` to access other root-level namespaces, such as <xref:Microsoft.VisualBasic?displayProperty=fullName>, and any namespace associated with your project."},{"pos":[7977,8015],"content":"Global Keyword in Namespace Statements","linkify":"Global Keyword in Namespace Statements","nodes":[{"content":"Global Keyword in Namespace Statements","pos":[0,38]}]},{"content":"You can also use the <ph id=\"ph1\">`Global`</ph> keyword in a <bpt id=\"p1\">[</bpt>Namespace Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/namespace-statement.md)</ept>.","pos":[8019,8160],"source":"You can also use the `Global` keyword in a [Namespace Statement](../../../visual-basic/language-reference/statements/namespace-statement.md)."},{"content":"This lets you define a namespace out of the root namespace of your project.","pos":[8161,8236]},{"content":"All namespaces in your project are based on the root namespace for the project.","pos":[8243,8322]},{"content":"Visual Studio assigns your project name as the default root namespace for all code in your project.","pos":[8324,8423]},{"content":"For example, if your project is named <ph id=\"ph1\">`ConsoleApplication1`</ph>, its programming elements belong to namespace <ph id=\"ph2\">`ConsoleApplication1`</ph>.","pos":[8424,8552],"source":" For example, if your project is named `ConsoleApplication1`, its programming elements belong to namespace `ConsoleApplication1`."},{"content":"If you declare <ph id=\"ph1\">`Namespace Magnetosphere`</ph>, references to <ph id=\"ph2\">`Magnetosphere`</ph> in the project will access <ph id=\"ph3\">`ConsoleApplication1.Magnetosphere`</ph>.","pos":[8553,8688],"source":" If you declare `Namespace Magnetosphere`, references to `Magnetosphere` in the project will access `ConsoleApplication1.Magnetosphere`."},{"pos":[8695,8808],"content":"The following examples use the <ph id=\"ph1\">`Global`</ph> keyword to declare a namespace out of the root namespace for the project.","source":"The following examples use the `Global` keyword to declare a namespace out of the root namespace for the project."},{"pos":[8815,8947],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#22<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_7.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#22](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_7.vb)]"},{"pos":[8954,9029],"content":"In a namespace declaration, <ph id=\"ph1\">`Global`</ph> cannot be nested in another namespace.","source":"In a namespace declaration, `Global` cannot be nested in another namespace."},{"content":"You can use the <bpt id=\"p1\">[</bpt>Application Page, Project Designer (Visual Basic)<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)</ept> to view and modify the <bpt id=\"p2\">**</bpt>Root Namespace<ept id=\"p2\">**</ept> of the project.","pos":[9036,9263],"source":"You can use the [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic) to view and modify the **Root Namespace** of the project."},{"content":"For new projects, the <bpt id=\"p1\">**</bpt>Root Namespace<ept id=\"p1\">**</ept> defaults to the project name.","pos":[9265,9335],"source":"  For new projects, the **Root Namespace** defaults to the project name."},{"content":"To cause <ph id=\"ph1\">`Global`</ph> to be the top-level namespace, you can clear the <bpt id=\"p1\">**</bpt>Root Namespace<ept id=\"p1\">**</ept> entry so that the box is empty.","pos":[9336,9453],"source":" To cause `Global` to be the top-level namespace, you can clear the **Root Namespace** entry so that the box is empty."},{"content":"Clearing <bpt id=\"p1\">**</bpt>Root Namespace<ept id=\"p1\">**</ept> removes the need for the <ph id=\"ph1\">`Global`</ph> keyword in namespace declarations.","pos":[9454,9550],"source":" Clearing **Root Namespace** removes the need for the `Global` keyword in namespace declarations."},{"content":"If a <ph id=\"ph1\">`Namespace`</ph> statement declares a name that is also a namespace in the .NET Framework, the .NET Framework namespace becomes unavailable if the <ph id=\"ph2\">`Global`</ph> keyword is not used in a fully qualified name.","pos":[9557,9759],"source":"If a `Namespace` statement declares a name that is also a namespace in the .NET Framework, the .NET Framework namespace becomes unavailable if the `Global` keyword is not used in a fully qualified name."},{"content":"To enable access to that .NET Framework namespace without using the <ph id=\"ph1\">`Global`</ph> keyword, you can include the <ph id=\"ph2\">`Global`</ph> keyword in the <ph id=\"ph3\">`Namespace`</ph> statement.","pos":[9760,9912],"source":" To enable access to that .NET Framework namespace without using the `Global` keyword, you can include the `Global` keyword in the `Namespace` statement."},{"pos":[9919,10009],"content":"The following example has the <ph id=\"ph1\">`Global`</ph> keyword in the <ph id=\"ph2\">`System.Text`</ph> namespace declaration.","source":"The following example has the `Global` keyword in the `System.Text` namespace declaration."},{"content":"If the <ph id=\"ph1\">`Global`</ph> keyword was not present in the namespace declaration, <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> could not be accessed without specifying <ph id=\"ph3\">`Global.System.Text.StringBuilder`</ph>.","pos":[10016,10195],"source":"If the `Global` keyword was not present in the namespace declaration, <xref:System.Text.StringBuilder> could not be accessed without specifying `Global.System.Text.StringBuilder`."},{"content":"For a project named <ph id=\"ph1\">`ConsoleApplication1`</ph>, references to <ph id=\"ph2\">`System.Text`</ph> would access <ph id=\"ph3\">`ConsoleApplication1.System.Text`</ph> if the <ph id=\"ph4\">`Global`</ph> keyword was not used.","pos":[10196,10351],"source":" For a project named `ConsoleApplication1`, references to `System.Text` would access `ConsoleApplication1.System.Text` if the `Global` keyword was not used."},{"pos":[10358,10490],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#21<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_8.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#21](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_8.vb)]"},{"pos":[10499,10507],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Assemblies and the Global Assembly Cache<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[10607,10725],"source":" [Assemblies and the Global Assembly Cache](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Create and Use Assemblies Using the Command Line<ept id=\"p1\">](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)</ept><ph id=\"ph1\"> </ph>","pos":[10728,10860],"source":" [How to: Create and Use Assemblies Using the Command Line](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4) "},{"content":"<bpt id=\"p1\"> [</bpt>References and the Imports Statement<ept id=\"p1\">](../../../visual-basic/programming-guide/program-structure/references-and-the-imports-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10863,11002],"source":" [References and the Imports Statement](../../../visual-basic/programming-guide/program-structure/references-and-the-imports-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Imports Statement (.NET Namespace and Type)<ept id=\"p1\">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[11005,11149],"source":" [Imports Statement (.NET Namespace and Type)](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Writing Code in Office Solutions<ept id=\"p1\">](https://msdn.microsoft.com/library/bb608596)</ept>","pos":[11152,11232],"source":" [Writing Code in Office Solutions](https://msdn.microsoft.com/library/bb608596)"}]}