{"content":"---\ntitle: \"Events and Callbacks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"events [.NET Framework], extensibility\"\n  - \"methods [.NET Framework], callback\"\n  - \"callback methods\"\n  - \"callbacks\"\nms.assetid: 48b55c60-495f-4089-9396-97f9122bba7c\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Events and Callbacks\nCallbacks are extensibility points that allow a framework to call back into user code through a delegate. These delegates are usually passed to the framework through a parameter of a method.  \n  \n Events are a special case of callbacks that supports convenient and consistent syntax for supplying the delegate (an event handler). In addition, Visual Studio’s statement completion and designers provide help in using event-based APIs. (See [Event Design](../../../docs/standard/design-guidelines/event.md).)  \n  \n **✓ CONSIDER** using callbacks to allow users to provide custom code to be executed by the framework.  \n  \n **✓ CONSIDER** using events to allow users to customize the behavior of a framework without the need for understanding object-oriented design.  \n  \n **✓ DO** prefer events over plain callbacks, because they are more familiar to a broader range of developers and are integrated with Visual Studio statement completion.  \n  \n **X AVOID** using callbacks in performance-sensitive APIs.  \n  \n **✓ DO** use the new `Func<...>`, `Action<...>`, or `Expression<...>` types instead of custom delegates, when defining APIs with callbacks.  \n  \n `Func<...>` and `Action<...>` represent generic delegates. `Expression<...>` represents function definitions that can be compiled and subsequently invoked at runtime but can also be serialized and passed to remote processes.  \n  \n **✓ DO** measure and understand performance implications of using `Expression<...>`, instead of using `Func<...>` and `Action<...>` delegates.  \n  \n `Expression<...>` types are in most cases logically equivalent to `Func<...>` and `Action<...>` delegates. The main difference between them is that the delegates are intended to be used in local process scenarios; expressions are intended for cases where it’s beneficial and possible to evaluate the expression in a remote process or machine.  \n  \n **✓ DO** understand that by calling a delegate, you are executing arbitrary code and that could have security, correctness, and compatibility repercussions.  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See Also  \n [Designing for Extensibility](../../../docs/standard/design-guidelines/designing-for-extensibility.md)   \n [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)","nodes":[{"pos":[4,538],"nodes":[{"content":"Events and Callbacks | Microsoft Docs","nodes":[{"pos":[0,37],"content":"Events and Callbacks | Microsoft Docs","nodes":[{"content":"Events and Callbacks | Microsoft Docs","pos":[0,37]}]}],"pos":[6,46],"yaml":true}],"content":"title: \"Events and Callbacks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"events [.NET Framework], extensibility\"\n  - \"methods [.NET Framework], callback\"\n  - \"callback methods\"\n  - \"callbacks\"\nms.assetid: 48b55c60-495f-4089-9396-97f9122bba7c\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[545,565],"content":"Events and Callbacks","linkify":"Events and Callbacks","nodes":[{"content":"Events and Callbacks","pos":[0,20]}]},{"content":"Callbacks are extensibility points that allow a framework to call back into user code through a delegate.","pos":[566,671]},{"content":"These delegates are usually passed to the framework through a parameter of a method.","pos":[672,756]},{"content":"Events are a special case of callbacks that supports convenient and consistent syntax for supplying the delegate (an event handler).","pos":[763,895]},{"content":"In addition, Visual Studio’s statement completion and designers provide help in using event-based APIs.","pos":[896,999]},{"content":"(See <bpt id=\"p1\">[</bpt>Event Design<ept id=\"p1\">](../../../docs/standard/design-guidelines/event.md)</ept>.)","pos":[1000,1072],"source":" (See [Event Design](../../../docs/standard/design-guidelines/event.md).)"},{"pos":[1079,1180],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> using callbacks to allow users to provide custom code to be executed by the framework.","source":"**✓ CONSIDER** using callbacks to allow users to provide custom code to be executed by the framework."},{"pos":[1187,1329],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> using events to allow users to customize the behavior of a framework without the need for understanding object-oriented design.","source":"**✓ CONSIDER** using events to allow users to customize the behavior of a framework without the need for understanding object-oriented design."},{"pos":[1336,1504],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> prefer events over plain callbacks, because they are more familiar to a broader range of developers and are integrated with Visual Studio statement completion.","source":"**✓ DO** prefer events over plain callbacks, because they are more familiar to a broader range of developers and are integrated with Visual Studio statement completion."},{"pos":[1511,1569],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> using callbacks in performance-sensitive APIs.","source":"**X AVOID** using callbacks in performance-sensitive APIs."},{"pos":[1576,1715],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use the new <ph id=\"ph1\">`Func&lt;...&gt;`</ph>, <ph id=\"ph2\">`Action&lt;...&gt;`</ph>, or <ph id=\"ph3\">`Expression&lt;...&gt;`</ph> types instead of custom delegates, when defining APIs with callbacks.","source":"**✓ DO** use the new `Func<...>`, `Action<...>`, or `Expression<...>` types instead of custom delegates, when defining APIs with callbacks."},{"content":"<ph id=\"ph1\">`Func&lt;...&gt;`</ph> and <ph id=\"ph2\">`Action&lt;...&gt;`</ph> represent generic delegates.","pos":[1722,1780],"source":"`Func<...>` and `Action<...>` represent generic delegates."},{"content":"<ph id=\"ph1\">`Expression&lt;...&gt;`</ph> represents function definitions that can be compiled and subsequently invoked at runtime but can also be serialized and passed to remote processes.","pos":[1781,1946],"source":"`Expression<...>` represents function definitions that can be compiled and subsequently invoked at runtime but can also be serialized and passed to remote processes."},{"pos":[1953,2095],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> measure and understand performance implications of using <ph id=\"ph1\">`Expression&lt;...&gt;`</ph>, instead of using <ph id=\"ph2\">`Func&lt;...&gt;`</ph> and <ph id=\"ph3\">`Action&lt;...&gt;`</ph> delegates.","source":"**✓ DO** measure and understand performance implications of using `Expression<...>`, instead of using `Func<...>` and `Action<...>` delegates."},{"content":"<ph id=\"ph1\">`Expression&lt;...&gt;`</ph> types are in most cases logically equivalent to <ph id=\"ph2\">`Func&lt;...&gt;`</ph> and <ph id=\"ph3\">`Action&lt;...&gt;`</ph> delegates.","pos":[2102,2208],"source":"`Expression<...>` types are in most cases logically equivalent to `Func<...>` and `Action<...>` delegates."},{"content":"The main difference between them is that the delegates are intended to be used in local process scenarios; expressions are intended for cases where it’s beneficial and possible to evaluate the expression in a remote process or machine.","pos":[2209,2444]},{"pos":[2451,2607],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> understand that by calling a delegate, you are executing arbitrary code and that could have security, correctness, and compatibility repercussions.","source":"**✓ DO** understand that by calling a delegate, you are executing arbitrary code and that could have security, correctness, and compatibility repercussions."},{"pos":[2614,2681],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[2688,3092],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[3101,3109],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Designing for Extensibility<ept id=\"p1\">](../../../docs/standard/design-guidelines/designing-for-extensibility.md)</ept><ph id=\"ph1\"> </ph>","pos":[3113,3216],"source":"[Designing for Extensibility](../../../docs/standard/design-guidelines/designing-for-extensibility.md) "},{"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept>","pos":[3220,3300],"source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)"}]}