{"content":"---\ntitle: \"Example: Handling Exceptions When Binding Data\"\nms.date: \"03/30/2017\"\nms.assetid: bd63ed96-9853-46dc-ade5-7bd1b0f39110\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Example: Handling Exceptions When Binding Data\n> [!NOTE]\n>  This topic refers to the .NET Native Developer Preview, which is pre-release software. You can download the preview from the [Microsoft Connect website](https://go.microsoft.com/fwlink/?LinkId=394611) (requires registration).  \n  \n The following example shows how to resolve a [MissingMetadataException](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md) exception that is thrown when an app compiled with the [!INCLUDE[net_native](../../../includes/net-native-md.md)] tool chain tries to bind data. Here’s the exception information:  \n  \n```  \nThis operation cannot be carried out as metadata for the following type was removed for performance reasons:   \nApp.ViewModels.MainPageVM  \n```  \n  \n Here's the associated call stack:  \n  \n```  \nReflection::Execution::ReflectionDomainSetupImplementation.CreateNonInvokabilityException+0x238  \nReflection::Core::ReflectionDomain.CreateNonInvokabilityException+0x2e  \nReflection::Core::Execution::ExecutionEnvironment.+0x316  \nSystem::Reflection::Runtime::PropertyInfos::RuntimePropertyInfo.GetValue+0x1cb  \nSystem::Reflection::PropertyInfo.GetValue+0x22  \nSystem::Runtime::InteropServices::WindowsRuntime::CustomPropertyImpl.GetValue+0x42  \nApp!$66_Interop::McgNative.Func_IInspectable_IInspectable+0x158  \nApp!$66_Interop::McgNative::__vtable_Windows_UI_Xaml_Data__ICustomProperty.GetValue__STUB+0x46  \nWindows_UI_Xaml!DirectUI::PropertyProviderPropertyAccess::GetValue+0x3f   \nWindows_UI_Xaml!DirectUI::PropertyAccessPathStep::GetValue+0x31   \nWindows_UI_Xaml!DirectUI::PropertyPathListener::ConnectPathStep+0x113  \n```  \n  \n## What was the app doing?  \n At the base of the stack, frames from the <xref:Windows.UI.Xaml?displayProperty=nameWithType> namespace indicate that the XAML rendering engine was running.   The use of the <xref:System.Reflection.PropertyInfo.GetValue%2A?displayProperty=nameWithType> method indicates a reflection-based lookup of a property’s value on the type whose metadata was removed.  \n  \n The first step in providing a metadata directive would be to add `serialize` metadata for the type so that its properties are all accessible:  \n  \n```xml  \n<Type Name=\"App.ViewModels.MainPageVM\" Serialize=\"Required Public\" />  \n```  \n  \n## Is this an isolated case?  \n In this scenario, if data binding has incomplete metadata for one `ViewModel`, it may for others, too.  If the code is structured in a way that the app’s view models are all in the `App.ViewModels` namespace, you could use a more general runtime directive:  \n  \n```xml  \n<Namespace Name=\"App.ViewModels \" Serialize=\"Required Public\" />  \n```  \n  \n## Could the code be rewritten to not use reflection?  \n Because data binding is reflection-intensive, changing the code to avoid reflection isn’t feasible.  \n  \n However, there are ways to specify the `ViewModel` to the XAML page so that the tool chain can associate property bindings with the correct type at compile time and keep the metadata without using a runtime directive.  For example, you could apply the <xref:Windows.UI.Xaml.Data.BindableAttribute?displayProperty=nameWithType> attribute on properties. This causes the XAML compiler to generate the required lookup information and avoids requiring a runtime directive in the Default.rd.xml file.  \n  \n## See also\n\n- [Getting Started](../../../docs/framework/net-native/getting-started-with-net-native.md)\n- [Example: Troubleshooting Dynamic Programming](../../../docs/framework/net-native/example-troubleshooting-dynamic-programming.md)\n","nodes":[{"pos":[4,170],"embed":true,"restype":"x-metadata","content":"title: \"Example: Handling Exceptions When Binding Data\"\nms.date: \"03/30/2017\"\nms.assetid: bd63ed96-9853-46dc-ade5-7bd1b0f39110\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Example: Handling Exceptions When Binding Data","nodes":[{"pos":[0,46],"content":"Example: Handling Exceptions When Binding Data","nodes":[{"content":"Example: Handling Exceptions When Binding Data","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[177,223],"content":"Example: Handling Exceptions When Binding Data","linkify":"Example: Handling Exceptions When Binding Data","nodes":[{"content":"Example: Handling Exceptions When Binding Data","pos":[0,46]}]},{"pos":[226,462],"content":"[!NOTE]\n This topic refers to the .NET Native Developer Preview, which is pre-release software. You can download the preview from the [Microsoft Connect website](https://go.microsoft.com/fwlink/?LinkId=394611) (requires registration).","leadings":["","> "],"nodes":[{"content":"This topic refers to the .NET Native Developer Preview, which is pre-release software. You can download the preview from the [Microsoft Connect website](https://go.microsoft.com/fwlink/?LinkId=394611) (requires registration).","pos":[9,234],"nodes":[{"content":"This topic refers to the .NET Native Developer Preview, which is pre-release software.","pos":[0,86]},{"content":"You can download the preview from the <bpt id=\"p1\">[</bpt>Microsoft Connect website<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=394611)</ept> (requires registration).","pos":[87,225],"source":" You can download the preview from the [Microsoft Connect website](https://go.microsoft.com/fwlink/?LinkId=394611) (requires registration)."}]}]},{"content":"The following example shows how to resolve a <bpt id=\"p1\">[</bpt>MissingMetadataException<ept id=\"p1\">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept> exception that is thrown when an app compiled with the <ph id=\"ph1\">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tool chain tries to bind data.","pos":[469,766],"source":"The following example shows how to resolve a [MissingMetadataException](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md) exception that is thrown when an app compiled with the [!INCLUDE[net_native](../../../includes/net-native-md.md)] tool chain tries to bind data."},{"content":"Here’s the exception information:","pos":[767,800]},{"content":"Here's the associated call stack:","pos":[962,995]},{"pos":[1841,1864],"content":"What was the app doing?","linkify":"What was the app doing?","nodes":[{"content":"What was the app doing?","pos":[0,23]}]},{"content":"At the base of the stack, frames from the <ph id=\"ph1\">&lt;xref:Windows.UI.Xaml?displayProperty=nameWithType&gt;</ph> namespace indicate that the XAML rendering engine was running.","pos":[1868,2024],"source":"At the base of the stack, frames from the <xref:Windows.UI.Xaml?displayProperty=nameWithType> namespace indicate that the XAML rendering engine was running."},{"content":"The use of the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A?displayProperty=nameWithType&gt;</ph> method indicates a reflection-based lookup of a property’s value on the type whose metadata was removed.","pos":[2027,2225],"source":"   The use of the <xref:System.Reflection.PropertyInfo.GetValue%2A?displayProperty=nameWithType> method indicates a reflection-based lookup of a property’s value on the type whose metadata was removed."},{"pos":[2232,2373],"content":"The first step in providing a metadata directive would be to add <ph id=\"ph1\">`serialize`</ph> metadata for the type so that its properties are all accessible:","source":"The first step in providing a metadata directive would be to add `serialize` metadata for the type so that its properties are all accessible:"},{"pos":[2472,2497],"content":"Is this an isolated case?","linkify":"Is this an isolated case?","nodes":[{"content":"Is this an isolated case?","pos":[0,25]}]},{"content":"In this scenario, if data binding has incomplete metadata for one <ph id=\"ph1\">`ViewModel`</ph>, it may for others, too.","pos":[2501,2603],"source":"In this scenario, if data binding has incomplete metadata for one `ViewModel`, it may for others, too."},{"content":"If the code is structured in a way that the app’s view models are all in the <ph id=\"ph1\">`App.ViewModels`</ph> namespace, you could use a more general runtime directive:","pos":[2605,2757],"source":"  If the code is structured in a way that the app’s view models are all in the `App.ViewModels` namespace, you could use a more general runtime directive:"},{"pos":[2851,2901],"content":"Could the code be rewritten to not use reflection?","linkify":"Could the code be rewritten to not use reflection?","nodes":[{"content":"Could the code be rewritten to not use reflection?","pos":[0,50]}]},{"content":"Because data binding is reflection-intensive, changing the code to avoid reflection isn’t feasible.","pos":[2905,3004]},{"content":"However, there are ways to specify the <ph id=\"ph1\">`ViewModel`</ph> to the XAML page so that the tool chain can associate property bindings with the correct type at compile time and keep the metadata without using a runtime directive.","pos":[3011,3228],"source":"However, there are ways to specify the `ViewModel` to the XAML page so that the tool chain can associate property bindings with the correct type at compile time and keep the metadata without using a runtime directive."},{"content":"For example, you could apply the <ph id=\"ph1\">&lt;xref:Windows.UI.Xaml.Data.BindableAttribute?displayProperty=nameWithType&gt;</ph> attribute on properties.","pos":[3230,3362],"source":"  For example, you could apply the <xref:Windows.UI.Xaml.Data.BindableAttribute?displayProperty=nameWithType> attribute on properties."},{"content":"This causes the XAML compiler to generate the required lookup information and avoids requiring a runtime directive in the Default.rd.xml file.","pos":[3363,3505]},{"pos":[3514,3522],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3526,3614],"content":"<bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](../../../docs/framework/net-native/getting-started-with-net-native.md)</ept>","source":"[Getting Started](../../../docs/framework/net-native/getting-started-with-net-native.md)"},{"pos":[3617,3746],"content":"<bpt id=\"p1\">[</bpt>Example: Troubleshooting Dynamic Programming<ept id=\"p1\">](../../../docs/framework/net-native/example-troubleshooting-dynamic-programming.md)</ept>","source":"[Example: Troubleshooting Dynamic Programming](../../../docs/framework/net-native/example-troubleshooting-dynamic-programming.md)"}]}