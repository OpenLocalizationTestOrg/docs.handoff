{"content":"---\ntitle: \"* Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"*_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"multiplication operator (*) [C#]\"\n  - \"* operator [C#]\"\nms.assetid: abd9a5f0-9b24-431e-971a-09ee1c45c50e\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# * Operator (C# Reference)\nThe multiplication operator (`*`), which computes the product of its operands.  Also, the dereference operator, which allows reading and writing to a pointer.  \n  \n## Remarks  \n All numeric types have predefined multiplication operators.  \n  \n The `*` operator is also used to declare pointer types and to dereference pointers. This operator can only be used in unsafe contexts, denoted by the use of the [unsafe](../../../csharp/language-reference/keywords/unsafe.md) keyword, and requiring the [/unsafe](../../../csharp/language-reference/compiler-options/unsafe-compiler-option.md) compiler option.  The dereference operator is also known as the indirection operator.  \n  \n User-defined types can overload the binary `*` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)). When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.  \n  \n## Example  \n [!code-cs[csRefOperators#50](../../../csharp/language-reference/operators/codesnippet/CSharp/multiplication-operator_1.cs)]  \n  \n## Example  \n [!code-cs[csRefOperators#51](../../../csharp/language-reference/operators/codesnippet/CSharp/multiplication-operator_2.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[12,54],"content":"* Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Operator (C# Reference) | Microsoft Docs","pos":[2,42]}]},{"pos":[596,621],"content":"* Operator (C# Reference)","linkify":"* Operator (C# Reference)","nodes":[{"content":"* Operator (C# Reference)","pos":[0,25]}]},{"content":"The multiplication operator (<ph id=\"ph1\">`*`</ph>), which computes the product of its operands.","pos":[622,700],"source":"The multiplication operator (`*`), which computes the product of its operands."},{"content":"Also, the dereference operator, which allows reading and writing to a pointer.","pos":[702,780]},{"pos":[789,796],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All numeric types have predefined multiplication operators.","pos":[800,859]},{"content":"The <ph id=\"ph1\">`*`</ph> operator is also used to declare pointer types and to dereference pointers.","pos":[866,949],"source":"The `*` operator is also used to declare pointer types and to dereference pointers."},{"content":"This operator can only be used in unsafe contexts, denoted by the use of the <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept> keyword, and requiring the <bpt id=\"p2\">[</bpt>/unsafe<ept id=\"p2\">](../../../csharp/language-reference/compiler-options/unsafe-compiler-option.md)</ept> compiler option.","pos":[950,1223],"source":" This operator can only be used in unsafe contexts, denoted by the use of the [unsafe](../../../csharp/language-reference/keywords/unsafe.md) keyword, and requiring the [/unsafe](../../../csharp/language-reference/compiler-options/unsafe-compiler-option.md) compiler option."},{"content":"The dereference operator is also known as the indirection operator.","pos":[1225,1292]},{"content":"User-defined types can overload the binary <ph id=\"ph1\">`*`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","pos":[1299,1429],"source":"User-defined types can overload the binary `*` operator (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"content":"When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.","pos":[1430,1545]},{"pos":[1554,1561],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1565,1688],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#50<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/multiplication-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#50](../../../csharp/language-reference/operators/codesnippet/CSharp/multiplication-operator_1.cs)]"},{"pos":[1697,1704],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1708,1831],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#51<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/multiplication-operator_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#51](../../../csharp/language-reference/operators/codesnippet/CSharp/multiplication-operator_2.cs)]"},{"pos":[1840,1848],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1852,1912],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1915,1983],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1986,2079],"source":" [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[2082,2152],"source":" [C# Operators](../../../csharp/language-reference/operators/index.md)"}]}