{"content":"---\ntitle: \"[] operator - C# Reference\"\nms.custom: seodec18\nms.date: 01/10/2019\nf1_keywords: \n  - \"[]_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"subscript operator [C#]\"\n  - \"square brackets [ ] operator [C#]\"\n  - \"[] operator [C#]\"\n  - \"indexing operator [C#]\"\nms.assetid: 5c16bb45-88f7-45ff-b42c-1af1972b042c\n---\n# [] operator (C# Reference)\n\nSquare brackets, `[]`, are typically used for array, indexer, or pointer element access.\n\nFor more information about pointer element access, see [How to: access an array element with a pointer](../../programming-guide/unsafe-code-pointers/how-to-access-an-array-element-with-a-pointer.md).\n\nYou also use square brackets to specify [attributes](../../programming-guide/concepts/attributes/index.md):\n\n```csharp\n[System.Diagnostics.Conditional(\"DEBUG\")]\nvoid TraceMethod() {}\n```\n\n## Array access\n\nThe following example demonstrates how to access array elements:\n\n[!code-csharp-interactive[array access](~/samples/snippets/csharp/language-reference/operators/IndexOperatorExamples.cs#Arrays)]\n\nIf an array index is outside the bounds of the corresponding dimension of an array, an <xref:System.IndexOutOfRangeException> is thrown.\n\nAs the preceding example shows, you also use square brackets in declaration of an array type and instantiation of array instances.\n\nFor more information about arrays, see [Arrays](../../programming-guide/arrays/index.md).\n\n## Indexer access\n\nThe following example uses .NET <xref:System.Collections.Generic.Dictionary%602> type to demonstrate indexer access:\n\n[!code-csharp-interactive[indexer access](~/samples/snippets/csharp/language-reference/operators/IndexOperatorExamples.cs#Indexers)]\n\nIndexers allow you to index instances of a user-defined type in the similar way as array indexing. Unlike array indices, which must be integer, the indexer arguments can be declared to be of any type.\n\nFor more information about indexers, see [Indexers](../../programming-guide/indexers/index.md).\n\n## Operator overloadability\n\nElement access `[]` is not considered an overloadable operator. Use [indexers](../../programming-guide/indexers/index.md) to support indexing with user-defined types.\n\n## C# language specification\n\nFor more information, see the [Element access](~/_csharplang/spec/expressions.md#element-access) and [Pointer element access](~/_csharplang/spec/unsafe-code.md#pointer-element-access) sections of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [Arrays](../../programming-guide/arrays/index.md)\n- [Indexers](../../programming-guide/indexers/index.md)\n- [Pointer types](../../programming-guide/unsafe-code-pointers/pointer-types.md)\n- [Attributes](../../programming-guide/concepts/attributes/index.md)\n- [?. and ?[] operators](null-conditional-operators.md)","nodes":[{"pos":[4,309],"embed":true,"restype":"x-metadata","content":"title: \"[] operator - C# Reference\"\nms.custom: seodec18\nms.date: 01/10/2019\nf1_keywords: \n  - \"[]_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"subscript operator [C#]\"\n  - \"square brackets [ ] operator [C#]\"\n  - \"[] operator [C#]\"\n  - \"indexing operator [C#]\"\nms.assetid: 5c16bb45-88f7-45ff-b42c-1af1972b042c","nodes":[{"content":"[] operator - C# Reference","nodes":[{"pos":[0,26],"content":"[] operator - C# Reference","nodes":[{"content":"[] operator - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[316,342],"content":"[] operator (C# Reference)","linkify":"[] operator (C# Reference)","nodes":[{"content":"[] operator (C# Reference)","pos":[0,26]}]},{"pos":[344,432],"content":"Square brackets, <ph id=\"ph1\">`[]`</ph>, are typically used for array, indexer, or pointer element access.","source":"Square brackets, `[]`, are typically used for array, indexer, or pointer element access."},{"pos":[434,633],"content":"For more information about pointer element access, see <bpt id=\"p1\">[</bpt>How to: access an array element with a pointer<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/how-to-access-an-array-element-with-a-pointer.md)</ept>.","source":"For more information about pointer element access, see [How to: access an array element with a pointer](../../programming-guide/unsafe-code-pointers/how-to-access-an-array-element-with-a-pointer.md)."},{"pos":[635,742],"content":"You also use square brackets to specify <bpt id=\"p1\">[</bpt>attributes<ept id=\"p1\">](../../programming-guide/concepts/attributes/index.md)</ept>:","source":"You also use square brackets to specify [attributes](../../programming-guide/concepts/attributes/index.md):"},{"pos":[826,838],"content":"Array access","linkify":"Array access","nodes":[{"content":"Array access","pos":[0,12]}]},{"content":"The following example demonstrates how to access array elements:","pos":[840,904]},{"pos":[1036,1172],"content":"If an array index is outside the bounds of the corresponding dimension of an array, an <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> is thrown.","source":"If an array index is outside the bounds of the corresponding dimension of an array, an <xref:System.IndexOutOfRangeException> is thrown."},{"content":"As the preceding example shows, you also use square brackets in declaration of an array type and instantiation of array instances.","pos":[1174,1304]},{"pos":[1306,1395],"content":"For more information about arrays, see <bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../programming-guide/arrays/index.md)</ept>.","source":"For more information about arrays, see [Arrays](../../programming-guide/arrays/index.md)."},{"pos":[1400,1414],"content":"Indexer access","linkify":"Indexer access","nodes":[{"content":"Indexer access","pos":[0,14]}]},{"pos":[1416,1532],"content":"The following example uses .NET <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> type to demonstrate indexer access:","source":"The following example uses .NET <xref:System.Collections.Generic.Dictionary%602> type to demonstrate indexer access:"},{"content":"Indexers allow you to index instances of a user-defined type in the similar way as array indexing.","pos":[1668,1766]},{"content":"Unlike array indices, which must be integer, the indexer arguments can be declared to be of any type.","pos":[1767,1868]},{"pos":[1870,1965],"content":"For more information about indexers, see <bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../programming-guide/indexers/index.md)</ept>.","source":"For more information about indexers, see [Indexers](../../programming-guide/indexers/index.md)."},{"pos":[1970,1994],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"Element access <ph id=\"ph1\">`[]`</ph> is not considered an overloadable operator.","pos":[1996,2059],"source":"Element access `[]` is not considered an overloadable operator."},{"content":"Use <bpt id=\"p1\">[</bpt>indexers<ept id=\"p1\">](../../programming-guide/indexers/index.md)</ept> to support indexing with user-defined types.","pos":[2060,2162],"source":" Use [indexers](../../programming-guide/indexers/index.md) to support indexing with user-defined types."},{"pos":[2167,2192],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2194,2458],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Element access<ept id=\"p1\">](~/_csharplang/spec/expressions.md#element-access)</ept> and <bpt id=\"p2\">[</bpt>Pointer element access<ept id=\"p2\">](~/_csharplang/spec/unsafe-code.md#pointer-element-access)</ept> sections of the <bpt id=\"p3\">[</bpt>C# language specification<ept id=\"p3\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Element access](~/_csharplang/spec/expressions.md#element-access) and [Pointer element access](~/_csharplang/spec/unsafe-code.md#pointer-element-access) sections of the [C# language specification](../language-specification/index.md)."},{"pos":[2463,2471],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2475,2502],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2505,2561],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2564,2588],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[2591,2640],"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../programming-guide/arrays/index.md)</ept>","source":"[Arrays](../../programming-guide/arrays/index.md)"},{"pos":[2643,2696],"content":"<bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../programming-guide/indexers/index.md)</ept>","source":"[Indexers](../../programming-guide/indexers/index.md)"},{"pos":[2699,2777],"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/pointer-types.md)</ept>","source":"[Pointer types](../../programming-guide/unsafe-code-pointers/pointer-types.md)"},{"pos":[2780,2846],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](../../programming-guide/concepts/attributes/index.md)</ept>","source":"[Attributes](../../programming-guide/concepts/attributes/index.md)"},{"pos":[2849,2902],"content":"<bpt id=\"p1\">[</bpt>?. and ?[] operators<ept id=\"p1\">](null-conditional-operators.md)</ept>","source":"[?. and ?[] operators](null-conditional-operators.md)"}]}