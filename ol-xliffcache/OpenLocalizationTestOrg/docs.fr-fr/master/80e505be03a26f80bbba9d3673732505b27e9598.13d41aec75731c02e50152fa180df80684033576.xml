{"content":"---\ntitle: \"How to: Debug Empty Query Results Sets (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: b242c90a-d2b8-4309-8a1e-e4e70736c727\n---\n# How to: Debug Empty Query Results Sets (Visual Basic)\nOne of the most common problems when querying XML trees is that if the XML tree has a default namespace, the developer sometimes writes the query as though the XML were not in a namespace.  \n  \n The first set of examples in this topic shows a typical way that XML in a default namespace is loaded, and is queried improperly.  \n  \n The second set of examples show the necessary corrections so that you can query XML in a namespace.  \n  \n For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n## Example  \n This example shows creation of XML in a namespace, and a query that returns an empty result set.  \n  \n```vb  \nDim root As XElement = _  \n    <Root xmlns='http://www.adventure-works.com'>  \n        <Child>1</Child>  \n        <Child>2</Child>  \n        <Child>3</Child>  \n        <AnotherChild>4</AnotherChild>  \n        <AnotherChild>5</AnotherChild>  \n        <AnotherChild>6</AnotherChild>  \n    </Root>  \nDim c1 As IEnumerable(Of XElement) = _  \n        From el In root.<Child> _  \n        Select el  \nConsole.WriteLine(\"Result set follows:\")  \nFor Each el As XElement In c1  \n    Console.WriteLine(el.Value)  \nNext  \nConsole.WriteLine(\"End of result set\")  \n```  \n  \n This example produces the following result:  \n  \n```  \nResult set follows:  \nEnd of result set  \n```  \n  \n## Example  \n This example shows creation of XML in a namespace, and a query that is coded properly.  \n  \n The solution is to declare and initialize a global default namespace. This places all XML properties in the default namespace. No other modifications are required to the example to make it work properly.  \n  \n```vb  \nImports <xmlns=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            <Root xmlns='http://www.adventure-works.com'>  \n                <Child>1</Child>  \n                <Child>2</Child>  \n                <Child>3</Child>  \n                <AnotherChild>4</AnotherChild>  \n                <AnotherChild>5</AnotherChild>  \n                <AnotherChild>6</AnotherChild>  \n            </Root>  \n        Dim c1 As IEnumerable(Of XElement) = _  \n                From el In root.<Child> _  \n                Select el  \n        Console.WriteLine(\"Result set follows:\")  \n        For Each el As XElement In c1  \n            Console.WriteLine(CInt(el))  \n        Next  \n        Console.WriteLine(\"End of result set\")  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following result:  \n  \n```  \nResult set follows:  \n1  \n2  \n3  \nEnd of result set  \n```  \n  \n## See also\n\n- [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)\n","nodes":[{"pos":[4,135],"embed":true,"restype":"x-metadata","content":"title: \"How to: Debug Empty Query Results Sets (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: b242c90a-d2b8-4309-8a1e-e4e70736c727","nodes":[{"content":"How to: Debug Empty Query Results Sets (Visual Basic)","nodes":[{"pos":[0,53],"content":"How to: Debug Empty Query Results Sets (Visual Basic)","nodes":[{"content":"How to: Debug Empty Query Results Sets (Visual Basic)","pos":[0,53]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[142,195],"content":"How to: Debug Empty Query Results Sets (Visual Basic)","linkify":"How to: Debug Empty Query Results Sets (Visual Basic)","nodes":[{"content":"How to: Debug Empty Query Results Sets (Visual Basic)","pos":[0,53]}]},{"content":"One of the most common problems when querying XML trees is that if the XML tree has a default namespace, the developer sometimes writes the query as though the XML were not in a namespace.","pos":[196,384]},{"content":"The first set of examples in this topic shows a typical way that XML in a default namespace is loaded, and is queried improperly.","pos":[391,520]},{"content":"The second set of examples show the necessary corrections so that you can query XML in a namespace.","pos":[527,626]},{"pos":[633,793],"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","source":"For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[802,809],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows creation of XML in a namespace, and a query that returns an empty result set.","pos":[813,909]},{"content":"This example produces the following result:","pos":[1484,1527]},{"pos":[1593,1600],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows creation of XML in a namespace, and a query that is coded properly.","pos":[1604,1690]},{"content":"The solution is to declare and initialize a global default namespace.","pos":[1697,1766]},{"content":"This places all XML properties in the default namespace.","pos":[1767,1823]},{"content":"No other modifications are required to the example to make it work properly.","pos":[1824,1900]},{"content":"This example produces the following result:","pos":[2726,2769]},{"pos":[2847,2855],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2859,2990],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}