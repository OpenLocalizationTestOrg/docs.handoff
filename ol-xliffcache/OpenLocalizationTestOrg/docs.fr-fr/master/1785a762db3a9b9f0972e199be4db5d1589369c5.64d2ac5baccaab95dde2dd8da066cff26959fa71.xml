{"content":"---\ntitle: \"Using foreach with Arrays (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"arrays [C#], foreach\"\n  - \"foreach statement [C#], using with arrays\"\nms.assetid: 5f2da2a9-1f56-4de5-94cc-e07f4f7a0244\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using foreach with Arrays (C# Programming Guide)\nC# also provides the [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement. This statement provides a simple, clean way to iterate through the elements of an array or any enumerable collection. The `foreach` statement processes elements in the order returned by the array or collection type’s enumerator, which is usually from the 0th element to the last. For example, the following code creates an array called `numbers` and iterates through it with the `foreach` statement:  \n  \n [!code-cs[csProgGuideArrays#28](../../../csharp/programming-guide/arrays/codesnippet/CSharp/using-foreach-with-arrays_1.cs)]  \n  \n With multidimensional arrays, you can use the same method to iterate through the elements, for example:  \n  \n [!code-cs[csProgGuideArrays#29](../../../csharp/programming-guide/arrays/codesnippet/CSharp/using-foreach-with-arrays_2.cs)]  \n  \n However, with multidimensional arrays, using a nested [for](../../../csharp/language-reference/keywords/for.md) loop gives you more control over the array elements.  \n  \n## See Also  \n <xref:System.Array>   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Arrays](../../../csharp/programming-guide/arrays/index.md)   \n [Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)   \n [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)   \n [Jagged Arrays](../../../csharp/programming-guide/arrays/jagged-arrays.md)","nodes":[{"pos":[4,595],"embed":true,"restype":"x-metadata","content":"title: \"Using foreach with Arrays (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"arrays [C#], foreach\"\n  - \"foreach statement [C#], using with arrays\"\nms.assetid: 5f2da2a9-1f56-4de5-94cc-e07f4f7a0244\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Using foreach with Arrays (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,65],"content":"Using foreach with Arrays (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Using foreach with Arrays (C# Programming Guide) | Microsoft Docs","pos":[0,65]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[602,650],"content":"Using foreach with Arrays (C# Programming Guide)","linkify":"Using foreach with Arrays (C# Programming Guide)","nodes":[{"content":"Using foreach with Arrays (C# Programming Guide)","pos":[0,48]}]},{"content":"C# also provides the <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statement.","pos":[651,751],"source":"C# also provides the [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement."},{"content":"This statement provides a simple, clean way to iterate through the elements of an array or any enumerable collection.","pos":[752,869]},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement processes elements in the order returned by the array or collection type’s enumerator, which is usually from the 0th element to the last.","pos":[870,1031],"source":" The `foreach` statement processes elements in the order returned by the array or collection type’s enumerator, which is usually from the 0th element to the last."},{"content":"For example, the following code creates an array called <ph id=\"ph1\">`numbers`</ph> and iterates through it with the <ph id=\"ph2\">`foreach`</ph> statement:","pos":[1032,1151],"source":" For example, the following code creates an array called `numbers` and iterates through it with the `foreach` statement:"},{"content":"With multidimensional arrays, you can use the same method to iterate through the elements, for example:","pos":[1289,1392]},{"pos":[1530,1694],"content":"However, with multidimensional arrays, using a nested <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../csharp/language-reference/keywords/for.md)</ept> loop gives you more control over the array elements.","source":"However, with multidimensional arrays, using a nested [for](../../../csharp/language-reference/keywords/for.md) loop gives you more control over the array elements."},{"pos":[1703,1711],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1739,1806],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1810,1870],"source":"[Arrays](../../../csharp/programming-guide/arrays/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Single-Dimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)</ept><ph id=\"ph1\"> </ph>","pos":[1874,1973],"source":"[Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md) "},{"content":"<bpt id=\"p1\">[</bpt>Multidimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)</ept><ph id=\"ph1\"> </ph>","pos":[1977,2072],"source":"[Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md) "},{"content":"<bpt id=\"p1\">[</bpt>Jagged Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/jagged-arrays.md)</ept>","pos":[2076,2150],"source":"[Jagged Arrays](../../../csharp/programming-guide/arrays/jagged-arrays.md)"}]}