<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-statement.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cce00e8e8eb88f193f4a0ddd8425a6340ee28672</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\using-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ede8ef3edd4dade7e81cf6676f0251aef77db243</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7e08ebaccf75c83752d28b2eab66d8338ee8e79</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Statement (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares the beginning of a <ph id="ph1">`Using`</ph> block and optionally acquires the system resources that the block controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required if you do not supply <ph id="ph1">`resourceexpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>List of one or more system resources that this <ph id="ph1">`Using`</ph> block controls, separated by commas.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Required if you do not supply <ph id="ph1">`resourcelist`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Reference variable or expression referring to a system resource to be controlled by this <ph id="ph1">`Using`</ph> block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Block of statements that the <ph id="ph1">`Using`</ph> block runs.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Terminates the definition of the <ph id="ph1">`Using`</ph> block and disposes of all the resources that it controls.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each resource in the <ph id="ph1">`resourcelist`</ph> part has the following syntax and parts:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>resourcelist Parts</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Reference variable that refers to a system resource that the <ph id="ph1">`Using`</ph> block controls.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Required if the <ph id="ph1">`Using`</ph> statement acquires the resource.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you have already acquired the resource, use the second syntax alternative.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The class of the resource.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The class must implement the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>List of arguments you are passing to the constructor to create an instance of <ph id="ph1">`resourcetype`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Parameter List<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Variable or expression referring to a system resource satisfying the requirements of <ph id="ph1">`resourcetype`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you use the second syntax alternative, you must acquire the resource before passing control to the <ph id="ph1">`Using`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sometimes your code requires an unmanaged resource, such as a file handle, a COM wrapper, or a SQL connection.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Using`</ph> block guarantees the disposal of one or more such resources when your code is finished with them.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This makes them available for other code to use.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Managed resources are disposed of by the .NET Framework garbage collector (GC) without any extra coding on your part.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You do not need a <ph id="ph1">`Using`</ph> block for managed resources.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, you can still use a <ph id="ph1">`Using`</ph> block to force the disposal of a managed resource instead of waiting for the garbage collector.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Using`</ph> block has three parts: acquisition, usage, and disposal.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Acquisition<ept id="p1">*</ept> means creating a variable and initializing it to refer to the system resource.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Using`</ph> statement can acquire one or more resources, or you can acquire exactly one resource before entering the block and supply it to the <ph id="ph2">`Using`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you supply <ph id="ph1">`resourceexpression`</ph>, you must acquire the resource before passing control to the <ph id="ph2">`Using`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Usage<ept id="p1">*</ept> means accessing the resources and performing actions with them.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The statements between <ph id="ph1">`Using`</ph> and <ph id="ph2">`End Using`</ph> represent the usage of the resources.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Disposal<ept id="p1">*</ept> means calling the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method on the object in <ph id="ph2">`resourcename`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This allows the object to cleanly terminate its resources.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`End Using`</ph> statement disposes of the resources under the <ph id="ph2">`Using`</ph> block's control.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Using`</ph> block behaves like a <ph id="ph2">`Try`</ph>...<ph id="ph3">`Finally`</ph> construction in which the <ph id="ph4">`Try`</ph> block uses the resources and the <ph id="ph5">`Finally`</ph> block disposes of them.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Because of this, the <ph id="ph1">`Using`</ph> block guarantees disposal of the resources, no matter how you exit the block.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is true even in the case of an unhandled exception, except for a <ph id="ph1">&lt;xref:System.StackOverflowException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The scope of every resource variable acquired by the <ph id="ph1">`Using`</ph> statement is limited to the <ph id="ph2">`Using`</ph> block.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you specify more than one system resource in the <ph id="ph1">`Using`</ph> statement, the effect is the same as if you nested <ph id="ph2">`Using`</ph> blocks one within another.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`resourcename`</ph> is <ph id="ph2">`Nothing`</ph>, no call to <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> is made, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Structured Exception Handling Within a Using Block</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you need to handle an exception that might occur within the <ph id="ph1">`Using`</ph> block, you can add a complete <ph id="ph2">`Try`</ph>...<ph id="ph3">`Finally`</ph> construction to it.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you need to handle the case where the <ph id="ph1">`Using`</ph> statement is not successful in acquiring a resource, you can test to see if <ph id="ph2">`resourcename`</ph> is <ph id="ph3">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Structured Exception Handling Instead of a Using Block</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you need finer control over the acquisition of the resources, or you need additional code in the <ph id="ph1">`Finally`</ph> block, you can rewrite the <ph id="ph2">`Using`</ph> block as a <ph id="ph3">`Try`</ph>...<ph id="ph4">`Finally`</ph> construction.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example shows skeleton <ph id="ph1">`Try`</ph> and <ph id="ph2">`Using`</ph> constructions that are equivalent in the acquisition and disposal of <ph id="ph3">`resource`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The code inside the <ph id="ph1">`Using`</ph> block should not assign the object in <ph id="ph2">`resourcename`</ph> to another variable.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When you exit the <ph id="ph1">`Using`</ph> block, the resource is disposed, and the other variable cannot access the resource to which it points.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following example creates a file that is named log.txt and writes two lines of text to the file.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The example also reads that same file and displays the lines of text.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> classes implement the <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph> interface, the code can use <ph id="ph4">`Using`</ph> statements to ensure that the file is correctly closed after the write and read operations.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Dispose of a System Resource<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/how-to-dispose-of-a-system-resource.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>