{"content":"---\ntitle: \"Instance Locked Exception Action | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 164a5419-315c-4987-ad72-54cbdb88d402\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Instance Locked Exception Action\nThe <xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceLockedExceptionAction%2A> property of the SQL Workflow Instance Store lets you specify what action the SQL persistence provider should take when it receives an <xref:System.Runtime.DurableInstancing.InstanceLockedException>. The persistence provider receives this exception when it tries to lock a workflow service instance that is currently locked by another service host. The values for this property are <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>, <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>, and <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>. The default value is <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>. The following list describes the three options:  \n  \n-   <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>. The service host does not attempt to lock the workflow service instance and passes the <xref:System.Runtime.DurableInstancing.InstanceLockedException> to the caller.  If your workflow stays in memory for a period exceeding 60 seconds, use <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction> as the retry. The default value is <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>.  \n  \n-   <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>. The service host reattempts to lock the workflow service instance with a linear interval between retry attempts and passes the <xref:System.Runtime.DurableInstancing.InstanceLockedException> to the caller at the end of the sequence. If you workflow stays in memory approximately between 5-60 seconds, and messages arrive in batches where it is more likely for messages being sent to the same instance on the same host to process all messages before unloading the workflow, use <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction> to achieve the best latency without wasting resources.  \n  \n-   <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>. The service host reattempts to lock the workflow service instance with an exponential backoff interval between retry attempts, and passes the exception to the caller at the end of the sequence. If your workflow stays in memory for a very short time (less than 5 seconds), or a Web farm is large and the chance of another message being delivered to the same host is not very high, use <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction> to achieve the best latency.  \n  \n The Instance Locked Exception Action feature supports the following scenarios. In all scenarios, if the instanceLockedExceptionAction property of the SqlWorkflowInstanceStore is set to <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction> or <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>, the host transparently retries to acquire the lock on instances periodically.  \n  \n1.  **Enabling graceful shutdown and overlapped recycling of application domains.** Suppose an **AppDomain** with a service host running workflow service instances is being recycled and a new **AppDomain** is brought up to handle new requests in parallel while the old **AppDomain** is brought down gracefully. The shutdown waits until workflow service instances are idle, and then persists and unloads the instances. Any attempts by hosts in the new **AppDomain** to lock an instance will cause an <xref:System.Runtime.DurableInstancing.InstanceLockedException>.  \n  \n2.  **Horizontally scaling durable workflows across a homogeneous farm of servers.** Suppose a node of a server farm on which a workflow instance is running crashes and the workflow host cannot remove locks on the instance it is running. When a service host running on another node of the farm receives a message for that workflow instance, it tries to acquire locks on these instances it will receive the <xref:System.Runtime.DurableInstancing.InstanceLockedException>. The locks will expire after some time because the host that was supposed to renew the lock no longer exists.  \n  \n     **Horizontally scaling durable workflows across a homogeneous farm of servers.**  Suppose you want to horizontally scale a durable workflow using multiple hosts behind a NLB (Network Load Balancer), the workflow host running on one node of the farm loads a workflow instance and is processing a message, and the next message to the instance is routed to the host that is running on another node because the NLB does not have routing algorithm to deliver messages to the host that is already running the instance. Upon receiving the message, the second host attempts to load the workflow instance and receives the <xref:System.Runtime.DurableInstancing.InstanceLockedException> because the first host has a lock on the instance. The first host unlocks the instance when it is finished with processing the first message and the second host acquires the lock when it retries the next time, loads the instance, and processes the second message.","nodes":[{"pos":[12,61],"content":"Instance Locked Exception Action | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Instance Locked Exception Action | Microsoft Docs","pos":[0,49]}]},{"pos":[326,358],"content":"Instance Locked Exception Action","linkify":"Instance Locked Exception Action","nodes":[{"content":"Instance Locked Exception Action","pos":[0,32]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceLockedExceptionAction%2A&gt;</ph> property of the SQL Workflow Instance Store lets you specify what action the SQL persistence provider should take when it receives an <ph id=\"ph2\">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph>.","pos":[359,662],"source":"The <xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceLockedExceptionAction%2A> property of the SQL Workflow Instance Store lets you specify what action the SQL persistence provider should take when it receives an <xref:System.Runtime.DurableInstancing.InstanceLockedException>."},{"content":"The persistence provider receives this exception when it tries to lock a workflow service instance that is currently locked by another service host.","pos":[663,811]},{"content":"The values for this property are <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>.","pos":[812,1070],"source":" The values for this property are <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>, <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>, and <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>."},{"content":"The default value is <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>.","pos":[1071,1165],"source":" The default value is <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>."},{"content":"The following list describes the three options:","pos":[1166,1213]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>.","pos":[1223,1296],"source":"<xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>."},{"content":"The service host does not attempt to lock the workflow service instance and passes the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph> to the caller.","pos":[1297,1462],"source":" The service host does not attempt to lock the workflow service instance and passes the <xref:System.Runtime.DurableInstancing.InstanceLockedException> to the caller."},{"content":"If your workflow stays in memory for a period exceeding 60 seconds, use <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph> as the retry.","pos":[1464,1622],"source":"  If your workflow stays in memory for a period exceeding 60 seconds, use <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction> as the retry."},{"content":"The default value is <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>.","pos":[1623,1717],"source":" The default value is <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>.","pos":[1727,1800],"source":"<xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>."},{"content":"The service host reattempts to lock the workflow service instance with a linear interval between retry attempts and passes the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph> to the caller at the end of the sequence.","pos":[1801,2033],"source":" The service host reattempts to lock the workflow service instance with a linear interval between retry attempts and passes the <xref:System.Runtime.DurableInstancing.InstanceLockedException> to the caller at the end of the sequence."},{"content":"If you workflow stays in memory approximately between 5-60 seconds, and messages arrive in batches where it is more likely for messages being sent to the same instance on the same host to process all messages before unloading the workflow, use <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph> to achieve the best latency without wasting resources.","pos":[2034,2405],"source":" If you workflow stays in memory approximately between 5-60 seconds, and messages arrive in batches where it is more likely for messages being sent to the same instance on the same host to process all messages before unloading the workflow, use <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction> to achieve the best latency without wasting resources."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>.","pos":[2415,2488],"source":"<xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>."},{"content":"The service host reattempts to lock the workflow service instance with an exponential backoff interval between retry attempts, and passes the exception to the caller at the end of the sequence.","pos":[2489,2682]},{"content":"If your workflow stays in memory for a very short time (less than 5 seconds), or a Web farm is large and the chance of another message being delivered to the same host is not very high, use <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph> to achieve the best latency.","pos":[2683,2974],"source":" If your workflow stays in memory for a very short time (less than 5 seconds), or a Web farm is large and the chance of another message being delivered to the same host is not very high, use <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction> to achieve the best latency."},{"content":"The Instance Locked Exception Action feature supports the following scenarios.","pos":[2981,3059]},{"content":"In all scenarios, if the instanceLockedExceptionAction property of the SqlWorkflowInstanceStore is set to <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction&gt;</ph>, the host transparently retries to acquire the lock on instances periodically.","pos":[3060,3393],"source":" In all scenarios, if the instanceLockedExceptionAction property of the SqlWorkflowInstanceStore is set to <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction> or <xref:System.Activities.DurableInstancing.InstanceLockedExceptionAction>, the host transparently retries to acquire the lock on instances periodically."},{"content":"<bpt id=\"p1\">**</bpt>Enabling graceful shutdown and overlapped recycling of application domains.<ept id=\"p1\">**</ept>","pos":[3403,3482],"source":"**Enabling graceful shutdown and overlapped recycling of application domains.**"},{"content":"Suppose an <bpt id=\"p1\">**</bpt>AppDomain<ept id=\"p1\">**</ept> with a service host running workflow service instances is being recycled and a new <bpt id=\"p2\">**</bpt>AppDomain<ept id=\"p2\">**</ept> is brought up to handle new requests in parallel while the old <bpt id=\"p3\">**</bpt>AppDomain<ept id=\"p3\">**</ept> is brought down gracefully.","pos":[3483,3709],"source":" Suppose an **AppDomain** with a service host running workflow service instances is being recycled and a new **AppDomain** is brought up to handle new requests in parallel while the old **AppDomain** is brought down gracefully."},{"content":"The shutdown waits until workflow service instances are idle, and then persists and unloads the instances.","pos":[3710,3816]},{"content":"Any attempts by hosts in the new <bpt id=\"p1\">**</bpt>AppDomain<ept id=\"p1\">**</ept> to lock an instance will cause an <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph>.","pos":[3817,3962],"source":" Any attempts by hosts in the new **AppDomain** to lock an instance will cause an <xref:System.Runtime.DurableInstancing.InstanceLockedException>."},{"content":"<bpt id=\"p1\">**</bpt>Horizontally scaling durable workflows across a homogeneous farm of servers.<ept id=\"p1\">**</ept>","pos":[3972,4052],"source":"**Horizontally scaling durable workflows across a homogeneous farm of servers.**"},{"content":"Suppose a node of a server farm on which a workflow instance is running crashes and the workflow host cannot remove locks on the instance it is running.","pos":[4053,4205]},{"content":"When a service host running on another node of the farm receives a message for that workflow instance, it tries to acquire locks on these instances it will receive the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph>.","pos":[4206,4438],"source":" When a service host running on another node of the farm receives a message for that workflow instance, it tries to acquire locks on these instances it will receive the <xref:System.Runtime.DurableInstancing.InstanceLockedException>."},{"content":"The locks will expire after some time because the host that was supposed to renew the lock no longer exists.","pos":[4439,4547]},{"content":"<bpt id=\"p1\">**</bpt>Horizontally scaling durable workflows across a homogeneous farm of servers.<ept id=\"p1\">**</ept>","pos":[4558,4638],"source":"**Horizontally scaling durable workflows across a homogeneous farm of servers.**"},{"content":"Suppose you want to horizontally scale a durable workflow using multiple hosts behind a NLB (Network Load Balancer), the workflow host running on one node of the farm loads a workflow instance and is processing a message, and the next message to the instance is routed to the host that is running on another node because the NLB does not have routing algorithm to deliver messages to the host that is already running the instance.","pos":[4640,5070]},{"content":"Upon receiving the message, the second host attempts to load the workflow instance and receives the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph> because the first host has a lock on the instance.","pos":[5071,5285],"source":" Upon receiving the message, the second host attempts to load the workflow instance and receives the <xref:System.Runtime.DurableInstancing.InstanceLockedException> because the first host has a lock on the instance."},{"content":"The first host unlocks the instance when it is finished with processing the first message and the second host acquires the lock when it retries the next time, loads the instance, and processes the second message.","pos":[5286,5498]}]}