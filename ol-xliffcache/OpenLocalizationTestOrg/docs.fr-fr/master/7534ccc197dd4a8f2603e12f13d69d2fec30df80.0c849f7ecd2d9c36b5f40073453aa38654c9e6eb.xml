{"content":"---\ntitle: \"How to: Filter on an Optional Element (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: a74b76ad-6889-4185-a189-d6ef2c63841e\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Filter on an Optional Element (Visual Basic)\nSometimes you want to filter for an element even though you are not sure it exists in your XML document. The search should be executed so that if the particular element does not have the child element, you do not trigger a null reference exception by filtering for it. In the following example, the `Child5` element does not have a `Type` child element, but the query still executes correctly.  \n  \n## Example  \n This example uses the <xref:System.Xml.Linq.Extensions.Elements%2A> extension method.  \n  \n```vb  \nDim root As XElement = _   \n    <Root>  \n        <Child1>  \n            <Text>Child One Text</Text>  \n            <Type Value=\"Yes\"/>  \n        </Child1>  \n        <Child2>  \n            <Text>Child Two Text</Text>  \n            <Type Value=\"Yes\"/>  \n        </Child2>  \n        <Child3>  \n            <Text>Child Three Text</Text>  \n            <Type Value=\"No\"/>  \n        </Child3>  \n        <Child4>  \n            <Text>Child Four Text</Text>  \n            <Type Value=\"Yes\"/>  \n        </Child4>  \n        <Child5>  \n            <Text>Child Five Text</Text>  \n        </Child5>  \n    </Root>  \nDim cList As IEnumerable(Of String) = _  \n    From typeElement In root.Elements().<Type> _  \n    Where typeElement.@Value = \"Yes\" _  \n    Select typeElement.Parent.<Text>.Value  \nDim str As String  \nFor Each str In cList  \n    Console.WriteLine(str)  \nNext  \n```  \n  \n This code produces the following output:  \n  \n```  \nChild One Text  \nChild Two Text  \nChild Four Text  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```vb  \nImports <xmlns='http://www.adatum.com'>  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            <Root>  \n                <Child1>  \n                    <Text>Child One Text</Text>  \n                    <Type Value=\"Yes\"/>  \n                </Child1>  \n                <Child2>  \n                    <Text>Child Two Text</Text>  \n                    <Type Value=\"Yes\"/>  \n                </Child2>  \n                <Child3>  \n                    <Text>Child Three Text</Text>  \n                    <Type Value=\"No\"/>  \n                </Child3>  \n                <Child4>  \n                    <Text>Child Four Text</Text>  \n                    <Type Value=\"Yes\"/>  \n                </Child4>  \n                <Child5>  \n                    <Text>Child Five Text</Text>  \n                </Child5>  \n            </Root>  \n        Dim cList As IEnumerable(Of String) = _  \n            From typeElement In root.Elements().<Type> _  \n            Where typeElement.@Value = \"Yes\" _  \n            Select typeElement.Parent.<Text>.Value  \n        Dim str As String  \n        For Each str In cList  \n            Console.WriteLine(str)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```  \nChild One Text  \nChild Two Text  \nChild Four Text  \n```  \n  \n## See Also  \n <xref:System.Xml.Linq.XElement.Attribute%2A?displayProperty=fullName>   \n <xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName>   \n <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName>   \n [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)   \n [XML Child Axis Property](../../../../visual-basic/language-reference/xml-axis/xml-child-axis-property.md)   \n [XML Attribute Axis Property](../../../../visual-basic/language-reference/xml-axis/xml-attribute-axis-property.md)   \n [XML Value Property](../../../../visual-basic/language-reference/xml-axis/xml-value-property.md)   \n [Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)   \n [Projection Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)","nodes":[{"pos":[4,381],"nodes":[{"content":"How to: Filter on an Optional Element (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,69],"content":"How to: Filter on an Optional Element (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Filter on an Optional Element (Visual Basic) | Microsoft Docs","pos":[0,69]}]}],"pos":[6,78],"yaml":true}],"content":"title: \"How to: Filter on an Optional Element (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: a74b76ad-6889-4185-a189-d6ef2c63841e\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n","yamlblock":true},{"pos":[388,440],"content":"How to: Filter on an Optional Element (Visual Basic)","linkify":"How to: Filter on an Optional Element (Visual Basic)","nodes":[{"content":"How to: Filter on an Optional Element (Visual Basic)","pos":[0,52]}]},{"content":"Sometimes you want to filter for an element even though you are not sure it exists in your XML document.","pos":[441,545]},{"content":"The search should be executed so that if the particular element does not have the child element, you do not trigger a null reference exception by filtering for it.","pos":[546,709]},{"content":"In the following example, the <ph id=\"ph1\">`Child5`</ph> element does not have a <ph id=\"ph2\">`Type`</ph> child element, but the query still executes correctly.","pos":[710,834],"source":" In the following example, the `Child5` element does not have a `Type` child element, but the query still executes correctly."},{"pos":[843,850],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.Extensions.Elements%2A&gt;</ph> extension method.","pos":[854,939],"source":"This example uses the <xref:System.Xml.Linq.Extensions.Elements%2A> extension method."},{"content":"This code produces the following output:","pos":[1821,1861]},{"pos":[1937,1944],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1948,2022]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[2023,2183],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[3410,3450]},{"pos":[3526,3534],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Attribute%2A?displayProperty=fullName&gt;</ph>","pos":[3538,3607],"source":"<xref:System.Xml.Linq.XElement.Attribute%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName&gt;</ph>","pos":[3612,3682],"source":"<xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph>","pos":[3687,3757],"source":"<xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> "},{"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept><ph id=\"ph1\"> </ph>","pos":[3762,3894],"source":"[Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md) "},{"content":"<bpt id=\"p1\">[</bpt>XML Child Axis Property<ept id=\"p1\">](../../../../visual-basic/language-reference/xml-axis/xml-child-axis-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[3898,4005],"source":"[XML Child Axis Property](../../../../visual-basic/language-reference/xml-axis/xml-child-axis-property.md) "},{"content":"<bpt id=\"p1\">[</bpt>XML Attribute Axis Property<ept id=\"p1\">](../../../../visual-basic/language-reference/xml-axis/xml-attribute-axis-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[4009,4124],"source":"[XML Attribute Axis Property](../../../../visual-basic/language-reference/xml-axis/xml-attribute-axis-property.md) "},{"content":"<bpt id=\"p1\">[</bpt>XML Value Property<ept id=\"p1\">](../../../../visual-basic/language-reference/xml-axis/xml-value-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[4128,4225],"source":"[XML Value Property](../../../../visual-basic/language-reference/xml-axis/xml-value-property.md) "},{"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[4229,4375],"source":"[Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Projection Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)</ept>","pos":[4379,4500],"source":"[Projection Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)"}]}