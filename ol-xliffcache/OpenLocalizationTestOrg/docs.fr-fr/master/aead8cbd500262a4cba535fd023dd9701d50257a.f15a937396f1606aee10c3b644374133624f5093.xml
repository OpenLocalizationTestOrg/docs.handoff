{"content":"---\ntitle: \"How to: Implement Validation with the DataGrid Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"DataGrid [WPF], validation\"\n  - \"validation [WPF], DataGrid\"\nms.assetid: ec6078a8-1e42-4648-b414-f4348e81bda1\n---\n# How to: Implement Validation with the DataGrid Control\nThe <xref:System.Windows.Controls.DataGrid> control enables you to perform validation at both the cell and row level. With cell-level validation, you validate individual properties of a bound data object when a user updates a value. With row-level validation, you validate entire data objects when a user commits changes to a row. You can also provide customized visual feedback for validation errors, or use the default visual feedback that the <xref:System.Windows.Controls.DataGrid> control provides.  \n  \n The following procedures describe how to apply validation rules to <xref:System.Windows.Controls.DataGrid> bindings and customize the visual feedback.  \n  \n### To validate individual cell values  \n  \n-   Specify one or more validation rules on the binding used with a column. This is similar to validating data in simple controls, as described in [Data Binding Overview](../data/data-binding-overview.md).  \n  \n     The following example shows a <xref:System.Windows.Controls.DataGrid> control with four columns bound to different properties of a business object. Three of the columns specify the <xref:System.Windows.Controls.ExceptionValidationRule> by setting the <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> property to `true`.  \n  \n     [!code-xaml[DataGrid_Validation#BasicXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/window1.xaml#basicxaml)]  \n  \n     When a user enters an invalid value (such as a non-integer in the Course ID column), a red border appears around the cell. You can change this default validation feedback as described in the following procedure.  \n  \n### To customize cell validation feedback  \n  \n-   Set the column's <xref:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle%2A> property to a style appropriate for the column's editing control. Because the editing controls are created at run time, you cannot use the <xref:System.Windows.Controls.Validation.ErrorTemplate%2A?displayProperty=nameWithType> attached property like you would with simple controls.  \n  \n     The following example updates the previous example by adding an error style shared by the three columns with validation rules. When a user enters an invalid value, the style changes the cell background color and adds a ToolTip. Note the use of a trigger to determine whether there is a validation error. This is required because there is currently no dedicated error template for cells.  \n  \n     [!code-xaml[DataGrid_Validation#CellValidationXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml#cellvalidationxaml)]  \n  \n     You can implement more extensive customization by replacing the <xref:System.Windows.Controls.DataGridColumn.CellStyle%2A> used by the column.  \n  \n### To validate multiple values in a single row  \n  \n1.  Implement a <xref:System.Windows.Controls.ValidationRule> subclass that checks multiple properties of the bound data object. In your <xref:System.Windows.Controls.ValidationRule.Validate%2A> method implementation, cast the `value` parameter value to a <xref:System.Windows.Data.BindingGroup> instance. You can then access the data object through the <xref:System.Windows.Data.BindingGroup.Items%2A> property.  \n  \n     The following example demonstrates this process to validate whether the `StartDate` property value for a `Course` object is earlier than its `EndDate` property value.  \n  \n     [!code-csharp[DataGrid_Validation#CourseValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml.cs#coursevalidationrule)]\n     [!code-vb[DataGrid_Validation#CourseValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/datagrid_validation/vb/mainwindow.xaml.vb#coursevalidationrule)]  \n  \n2.  Add the validation rule to the <xref:System.Windows.Controls.DataGrid.RowValidationRules%2A?displayProperty=nameWithType> collection. The <xref:System.Windows.Controls.DataGrid.RowValidationRules%2A> property provides direct access to the <xref:System.Windows.Data.BindingGroup.ValidationRules%2A> property of a <xref:System.Windows.Data.BindingGroup> instance that groups all the bindings used by the control.  \n  \n     The following example sets the <xref:System.Windows.Controls.DataGrid.RowValidationRules%2A> property in XAML. The <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> property is set to <xref:System.Windows.Controls.ValidationStep.UpdatedValue> so that the validation occurs only after the bound data object is updated.  \n  \n     [!code-xaml[DataGrid_Validation#RowValidationRulesXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml#rowvalidationrulesxaml)]  \n  \n     When a user specifies an end date that is earlier than the start date, a red exclamation mark (!) appears in the row header. You can change this default validation feedback as described in the following procedure.  \n  \n### To customize row validation feedback  \n  \n-   Set the <xref:System.Windows.Controls.DataGrid.RowValidationErrorTemplate%2A?displayProperty=nameWithType> property. This property enables you to customize row validation feedback for individual <xref:System.Windows.Controls.DataGrid> controls. You can also affect multiple controls by using an implicit row style to set the <xref:System.Windows.Controls.DataGridRow.ValidationErrorTemplate%2A?displayProperty=nameWithType> property.  \n  \n     The following example replaces the default row validation feedback with a more visible indicator. When a user enters an invalid value, a red circle with a white exclamation mark appears in the row header. This occurs for both row and cell validation errors. The associated error message is displayed in a ToolTip.  \n  \n     [!code-xaml[DataGrid_Validation#RowValidationFeedbackXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml#rowvalidationfeedbackxaml)]  \n  \n## Example  \n The following example provides a complete demonstration for cell and row validation. The `Course` class provides a sample data object that implements <xref:System.ComponentModel.IEditableObject> to support transactions. The <xref:System.Windows.Controls.DataGrid> control interacts with <xref:System.ComponentModel.IEditableObject> to enable users to revert changes by pressing ESC.  \n  \n> [!NOTE]\n>  If you are using Visual Basic, in the first line of MainWindow.xaml, replace `x:Class=\"DataGridValidation.MainWindow\"` with `x:Class=\"MainWindow\"`.  \n  \n To test the validation, try the following:  \n  \n-   In the Course ID column, enter a non-integer value.  \n  \n-   In the End Date column, enter a date that is earlier than the Start Date.  \n  \n-   Delete the value in Course ID, Start Date, or End Date.  \n  \n-   To undo an invalid cell value, put the cursor back in the cell and press the ESC key.  \n  \n-   To undo changes for an entire row when the current cell is in edit mode, press the ESC key twice.  \n  \n-   When a validation error occurs, move your mouse pointer over the indicator in the row header to see the associated error message.  \n  \n [!code-csharp[DataGrid_Validation#FullCode](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml.cs#fullcode)]\n [!code-vb[DataGrid_Validation#FullCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/datagrid_validation/vb/mainwindow.xaml.vb#fullcode)]  \n  \n [!code-xaml[DataGrid_Validation#FullXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml#fullxaml)]  \n  \n## See also\n\n- <xref:System.Windows.Controls.DataGrid>\n- [DataGrid](datagrid.md)\n- [Data Binding](../data/data-binding-wpf.md)\n- [Implement Binding Validation](../data/how-to-implement-binding-validation.md)\n- [Implement Validation Logic on Custom Objects](../data/how-to-implement-validation-logic-on-custom-objects.md)\n","nodes":[{"pos":[4,260],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement Validation with the DataGrid Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"DataGrid [WPF], validation\"\n  - \"validation [WPF], DataGrid\"\nms.assetid: ec6078a8-1e42-4648-b414-f4348e81bda1","nodes":[{"content":"How to: Implement Validation with the DataGrid Control","nodes":[{"pos":[0,54],"content":"How to: Implement Validation with the DataGrid Control","nodes":[{"content":"How to: Implement Validation with the DataGrid Control","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[267,321],"content":"How to: Implement Validation with the DataGrid Control","linkify":"How to: Implement Validation with the DataGrid Control","nodes":[{"content":"How to: Implement Validation with the DataGrid Control","pos":[0,54]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control enables you to perform validation at both the cell and row level.","pos":[322,439],"source":"The <xref:System.Windows.Controls.DataGrid> control enables you to perform validation at both the cell and row level."},{"content":"With cell-level validation, you validate individual properties of a bound data object when a user updates a value.","pos":[440,554]},{"content":"With row-level validation, you validate entire data objects when a user commits changes to a row.","pos":[555,652]},{"content":"You can also provide customized visual feedback for validation errors, or use the default visual feedback that the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control provides.","pos":[653,825],"source":" You can also provide customized visual feedback for validation errors, or use the default visual feedback that the <xref:System.Windows.Controls.DataGrid> control provides."},{"pos":[832,982],"content":"The following procedures describe how to apply validation rules to <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> bindings and customize the visual feedback.","source":"The following procedures describe how to apply validation rules to <xref:System.Windows.Controls.DataGrid> bindings and customize the visual feedback."},{"pos":[992,1026],"content":"To validate individual cell values","linkify":"To validate individual cell values","nodes":[{"content":"To validate individual cell values","pos":[0,34]}]},{"content":"Specify one or more validation rules on the binding used with a column.","pos":[1036,1107]},{"content":"This is similar to validating data in simple controls, as described in <bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](../data/data-binding-overview.md)</ept>.","pos":[1108,1237],"source":" This is similar to validating data in simple controls, as described in [Data Binding Overview](../data/data-binding-overview.md)."},{"content":"The following example shows a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control with four columns bound to different properties of a business object.","pos":[1248,1395],"source":"The following example shows a <xref:System.Windows.Controls.DataGrid> control with four columns bound to different properties of a business object."},{"content":"Three of the columns specify the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> by setting the <ph id=\"ph2\">&lt;xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A&gt;</ph> property to <ph id=\"ph3\">`true`</ph>.","pos":[1396,1578],"source":" Three of the columns specify the <xref:System.Windows.Controls.ExceptionValidationRule> by setting the <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> property to `true`."},{"content":"When a user enters an invalid value (such as a non-integer in the Course ID column), a red border appears around the cell.","pos":[1732,1854]},{"content":"You can change this default validation feedback as described in the following procedure.","pos":[1855,1943]},{"pos":[1953,1990],"content":"To customize cell validation feedback","linkify":"To customize cell validation feedback","nodes":[{"content":"To customize cell validation feedback","pos":[0,37]}]},{"content":"Set the column's <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle%2A&gt;</ph> property to a style appropriate for the column's editing control.","pos":[2000,2156],"source":"Set the column's <xref:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle%2A> property to a style appropriate for the column's editing control."},{"content":"Because the editing controls are created at run time, you cannot use the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A?displayProperty=nameWithType&gt;</ph> attached property like you would with simple controls.","pos":[2157,2372],"source":" Because the editing controls are created at run time, you cannot use the <xref:System.Windows.Controls.Validation.ErrorTemplate%2A?displayProperty=nameWithType> attached property like you would with simple controls."},{"content":"The following example updates the previous example by adding an error style shared by the three columns with validation rules.","pos":[2383,2509]},{"content":"When a user enters an invalid value, the style changes the cell background color and adds a ToolTip.","pos":[2510,2610]},{"content":"Note the use of a trigger to determine whether there is a validation error.","pos":[2611,2686]},{"content":"This is required because there is currently no dedicated error template for cells.","pos":[2687,2769]},{"pos":[2944,3086],"content":"You can implement more extensive customization by replacing the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGridColumn.CellStyle%2A&gt;</ph> used by the column.","source":"You can implement more extensive customization by replacing the <xref:System.Windows.Controls.DataGridColumn.CellStyle%2A> used by the column."},{"pos":[3096,3139],"content":"To validate multiple values in a single row","linkify":"To validate multiple values in a single row","nodes":[{"content":"To validate multiple values in a single row","pos":[0,43]}]},{"content":"Implement a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> subclass that checks multiple properties of the bound data object.","pos":[3149,3273],"source":"Implement a <xref:System.Windows.Controls.ValidationRule> subclass that checks multiple properties of the bound data object."},{"content":"In your <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method implementation, cast the <ph id=\"ph2\">`value`</ph> parameter value to a <ph id=\"ph3\">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> instance.","pos":[3274,3450],"source":" In your <xref:System.Windows.Controls.ValidationRule.Validate%2A> method implementation, cast the `value` parameter value to a <xref:System.Windows.Data.BindingGroup> instance."},{"content":"You can then access the data object through the <ph id=\"ph1\">&lt;xref:System.Windows.Data.BindingGroup.Items%2A&gt;</ph> property.","pos":[3451,3557],"source":" You can then access the data object through the <xref:System.Windows.Data.BindingGroup.Items%2A> property."},{"pos":[3568,3734],"content":"The following example demonstrates this process to validate whether the <ph id=\"ph1\">`StartDate`</ph> property value for a <ph id=\"ph2\">`Course`</ph> object is earlier than its <ph id=\"ph3\">`EndDate`</ph> property value.","source":"The following example demonstrates this process to validate whether the `StartDate` property value for a `Course` object is earlier than its `EndDate` property value."},{"pos":[3745,4076],"content":"[!code-csharp[DataGrid_Validation#CourseValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml.cs#coursevalidationrule)]\n [!code-vb[DataGrid_Validation#CourseValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/datagrid_validation/vb/mainwindow.xaml.vb#coursevalidationrule)]","leadings":["","    "],"nodes":[]},{"content":"Add the validation rule to the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid.RowValidationRules%2A?displayProperty=nameWithType&gt;</ph> collection.","pos":[4086,4219],"source":"Add the validation rule to the <xref:System.Windows.Controls.DataGrid.RowValidationRules%2A?displayProperty=nameWithType> collection."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid.RowValidationRules%2A&gt;</ph> property provides direct access to the <ph id=\"ph2\">&lt;xref:System.Windows.Data.BindingGroup.ValidationRules%2A&gt;</ph> property of a <ph id=\"ph3\">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> instance that groups all the bindings used by the control.","pos":[4220,4496],"source":" The <xref:System.Windows.Controls.DataGrid.RowValidationRules%2A> property provides direct access to the <xref:System.Windows.Data.BindingGroup.ValidationRules%2A> property of a <xref:System.Windows.Data.BindingGroup> instance that groups all the bindings used by the control."},{"content":"The following example sets the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid.RowValidationRules%2A&gt;</ph> property in XAML.","pos":[4507,4617],"source":"The following example sets the <xref:System.Windows.Controls.DataGrid.RowValidationRules%2A> property in XAML."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ValidationStep.UpdatedValue&gt;</ph> so that the validation occurs only after the bound data object is updated.","pos":[4618,4838],"source":" The <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> property is set to <xref:System.Windows.Controls.ValidationStep.UpdatedValue> so that the validation occurs only after the bound data object is updated."},{"content":"When a user specifies an end date that is earlier than the start date, a red exclamation mark (!) appears in the row header.","pos":[5021,5145]},{"content":"You can change this default validation feedback as described in the following procedure.","pos":[5146,5234]},{"pos":[5244,5280],"content":"To customize row validation feedback","linkify":"To customize row validation feedback","nodes":[{"content":"To customize row validation feedback","pos":[0,36]}]},{"content":"Set the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid.RowValidationErrorTemplate%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[5290,5406],"source":"Set the <xref:System.Windows.Controls.DataGrid.RowValidationErrorTemplate%2A?displayProperty=nameWithType> property."},{"content":"This property enables you to customize row validation feedback for individual <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> controls.","pos":[5407,5534],"source":" This property enables you to customize row validation feedback for individual <xref:System.Windows.Controls.DataGrid> controls."},{"content":"You can also affect multiple controls by using an implicit row style to set the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGridRow.ValidationErrorTemplate%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[5535,5723],"source":" You can also affect multiple controls by using an implicit row style to set the <xref:System.Windows.Controls.DataGridRow.ValidationErrorTemplate%2A?displayProperty=nameWithType> property."},{"content":"The following example replaces the default row validation feedback with a more visible indicator.","pos":[5734,5831]},{"content":"When a user enters an invalid value, a red circle with a white exclamation mark appears in the row header.","pos":[5832,5938]},{"content":"This occurs for both row and cell validation errors.","pos":[5939,5991]},{"content":"The associated error message is displayed in a ToolTip.","pos":[5992,6047]},{"pos":[6234,6241],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example provides a complete demonstration for cell and row validation.","pos":[6245,6329]},{"content":"The <ph id=\"ph1\">`Course`</ph> class provides a sample data object that implements <ph id=\"ph2\">&lt;xref:System.ComponentModel.IEditableObject&gt;</ph> to support transactions.","pos":[6330,6464],"source":" The `Course` class provides a sample data object that implements <xref:System.ComponentModel.IEditableObject> to support transactions."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> control interacts with <ph id=\"ph2\">&lt;xref:System.ComponentModel.IEditableObject&gt;</ph> to enable users to revert changes by pressing ESC.","pos":[6465,6627],"source":" The <xref:System.Windows.Controls.DataGrid> control interacts with <xref:System.ComponentModel.IEditableObject> to enable users to revert changes by pressing ESC."},{"pos":[6635,6793],"content":"[!NOTE]\n If you are using Visual Basic, in the first line of MainWindow.xaml, replace `x:Class=\"DataGridValidation.MainWindow\"` with `x:Class=\"MainWindow\"`.","leadings":["","> "],"nodes":[{"content":"If you are using Visual Basic, in the first line of MainWindow.xaml, replace <ph id=\"ph1\">`x:Class=\"DataGridValidation.MainWindow\"`</ph> with <ph id=\"ph2\">`x:Class=\"MainWindow\"`</ph>.","pos":[9,156],"source":"If you are using Visual Basic, in the first line of MainWindow.xaml, replace `x:Class=\"DataGridValidation.MainWindow\"` with `x:Class=\"MainWindow\"`."}]},{"content":"To test the validation, try the following:","pos":[6800,6842]},{"content":"In the Course ID column, enter a non-integer value.","pos":[6852,6903]},{"content":"In the End Date column, enter a date that is earlier than the Start Date.","pos":[6913,6986]},{"content":"Delete the value in Course ID, Start Date, or End Date.","pos":[6996,7051]},{"content":"To undo an invalid cell value, put the cursor back in the cell and press the ESC key.","pos":[7061,7146]},{"content":"To undo changes for an entire row when the current cell is in edit mode, press the ESC key twice.","pos":[7156,7253]},{"content":"When a validation error occurs, move your mouse pointer over the indicator in the row header to see the associated error message.","pos":[7263,7392]},{"pos":[7399,7678],"content":"[!code-csharp[DataGrid_Validation#FullCode](~/samples/snippets/csharp/VS_Snippets_Wpf/datagrid_validation/cs/mainwindow.xaml.cs#fullcode)]\n[!code-vb[DataGrid_Validation#FullCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/datagrid_validation/vb/mainwindow.xaml.vb#fullcode)]","leadings":[""," "],"nodes":[]},{"pos":[7827,7835],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7881,7904],"content":"<bpt id=\"p1\">[</bpt>DataGrid<ept id=\"p1\">](datagrid.md)</ept>","source":"[DataGrid](datagrid.md)"},{"pos":[7907,7950],"content":"<bpt id=\"p1\">[</bpt>Data Binding<ept id=\"p1\">](../data/data-binding-wpf.md)</ept>","source":"[Data Binding](../data/data-binding-wpf.md)"},{"pos":[7953,8031],"content":"<bpt id=\"p1\">[</bpt>Implement Binding Validation<ept id=\"p1\">](../data/how-to-implement-binding-validation.md)</ept>","source":"[Implement Binding Validation](../data/how-to-implement-binding-validation.md)"},{"pos":[8034,8144],"content":"<bpt id=\"p1\">[</bpt>Implement Validation Logic on Custom Objects<ept id=\"p1\">](../data/how-to-implement-validation-logic-on-custom-objects.md)</ept>","source":"[Implement Validation Logic on Custom Objects](../data/how-to-implement-validation-logic-on-custom-objects.md)"}]}