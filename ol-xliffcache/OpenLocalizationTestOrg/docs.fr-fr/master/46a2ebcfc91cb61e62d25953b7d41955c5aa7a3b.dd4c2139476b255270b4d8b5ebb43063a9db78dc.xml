{"content":"---\ntitle: \"How to: Make an Object Variable Not Refer to Any Instance (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Nothing keyword, variable assignment\"\n  - \"object variables, null reference\"\nms.assetid: e6d30578-bdae-4142-a3ac-a10697bf696a\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Make an Object Variable Not Refer to Any Instance (Visual Basic)\nYou can disassociate an object variable from any object instance by setting it to [Nothing](../../../../visual-basic/language-reference/nothing.md).  \n  \n### To disassociate an object variable from any object instance  \n  \n-   Set the variable to `Nothing` in an assignment statement.  \n  \n    ```  \n    ' Assume account is a defined class  \n    Dim currentAccount As account  \n    currentAccount = Nothing  \n    ```  \n  \n## Robust Programming  \n If your code tries to access a member of an object variable that has been set to `Nothing`, a <xref:System.NullReferenceException> occurs. If you set an object variable to `Nothing` frequently, or if it is possible the variable is not initialized, it is a good idea to enclose member accesses in a `Try...Catch...Finally` block.  \n  \n## .NET Framework Security  \n If you use an object variable for objects that contain confidential or sensitive data, you can set the variable to `Nothing` when you are not actively dealing with one of those objects. This reduces the chance of malicious code gaining access to the data.  \n  \n## See Also  \n <xref:System.NullReferenceException>   \n [Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)   \n [Object Variable Assignment](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md)   \n [Nothing](../../../../visual-basic/language-reference/nothing.md)   \n [Try...Catch...Finally Statement](../../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)   \n [Troubleshooting Exceptions: System.NullReferenceException](http://msdn.microsoft.com/library/4822b0b4-8105-43fb-887a-3cc51ff02899)","nodes":[{"pos":[12,101],"content":"How to: Make an Object Variable Not Refer to Any Instance (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Make an Object Variable Not Refer to Any Instance (Visual Basic) | Microsoft Docs","pos":[0,89]}]},{"pos":[694,766],"content":"How to: Make an Object Variable Not Refer to Any Instance (Visual Basic)","linkify":"How to: Make an Object Variable Not Refer to Any Instance (Visual Basic)","nodes":[{"content":"How to: Make an Object Variable Not Refer to Any Instance (Visual Basic)","pos":[0,72]}]},{"pos":[767,915],"content":"You can disassociate an object variable from any object instance by setting it to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../../visual-basic/language-reference/nothing.md)</ept>.","source":"You can disassociate an object variable from any object instance by setting it to [Nothing](../../../../visual-basic/language-reference/nothing.md)."},{"pos":[925,984],"content":"To disassociate an object variable from any object instance","linkify":"To disassociate an object variable from any object instance","nodes":[{"content":"To disassociate an object variable from any object instance","pos":[0,59]}]},{"pos":[994,1051],"content":"Set the variable to <ph id=\"ph1\">`Nothing`</ph> in an assignment statement.","source":"Set the variable to `Nothing` in an assignment statement."},{"pos":[1192,1210],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"If your code tries to access a member of an object variable that has been set to <ph id=\"ph1\">`Nothing`</ph>, a <ph id=\"ph2\">&lt;xref:System.NullReferenceException&gt;</ph> occurs.","pos":[1214,1352],"source":"If your code tries to access a member of an object variable that has been set to `Nothing`, a <xref:System.NullReferenceException> occurs."},{"content":"If you set an object variable to <ph id=\"ph1\">`Nothing`</ph> frequently, or if it is possible the variable is not initialized, it is a good idea to enclose member accesses in a <ph id=\"ph2\">`Try...Catch...Finally`</ph> block.","pos":[1353,1542],"source":" If you set an object variable to `Nothing` frequently, or if it is possible the variable is not initialized, it is a good idea to enclose member accesses in a `Try...Catch...Finally` block."},{"pos":[1551,1574],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"If you use an object variable for objects that contain confidential or sensitive data, you can set the variable to <ph id=\"ph1\">`Nothing`</ph> when you are not actively dealing with one of those objects.","pos":[1578,1763],"source":"If you use an object variable for objects that contain confidential or sensitive data, you can set the variable to `Nothing` when you are not actively dealing with one of those objects."},{"content":"This reduces the chance of malicious code gaining access to the data.","pos":[1764,1833]},{"pos":[1842,1850],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph>","pos":[1854,1890],"source":"<xref:System.NullReferenceException> "},{"content":"<bpt id=\"p1\"> [</bpt>Object Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)</ept><ph id=\"ph1\"> </ph>","pos":[1894,2006],"source":" [Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Object Variable Assignment<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md)</ept><ph id=\"ph1\"> </ph>","pos":[2009,2141],"source":" [Object Variable Assignment](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Nothing<ept id=\"p1\">](../../../../visual-basic/language-reference/nothing.md)</ept><ph id=\"ph1\"> </ph>","pos":[2144,2211],"source":" [Nothing](../../../../visual-basic/language-reference/nothing.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2214,2336],"source":" [Try...Catch...Finally Statement](../../../../visual-basic/language-reference/statements/try-catch-finally-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Troubleshooting Exceptions: System.NullReferenceException<ept id=\"p1\">](http://msdn.microsoft.com/library/4822b0b4-8105-43fb-887a-3cc51ff02899)</ept>","pos":[2339,2471],"source":" [Troubleshooting Exceptions: System.NullReferenceException](http://msdn.microsoft.com/library/4822b0b4-8105-43fb-887a-3cc51ff02899)"}]}