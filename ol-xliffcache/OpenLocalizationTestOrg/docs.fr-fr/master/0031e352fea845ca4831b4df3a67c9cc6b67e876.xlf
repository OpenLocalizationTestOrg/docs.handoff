<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-use-joinblock-to-read-data-from-multiple-sources.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0031e352fea845ca4831b4df3a67c9cc6b67e876</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\how-to-use-joinblock-to-read-data-from-multiple-sources.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">986f4236a37117dbf9e7d454c4b049831e674b5b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a86e7627d93a2df8eecd40cb7df1c26c47bdbc9d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Use JoinBlock to Read Data From Multiple Sources</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use JoinBlock to Read Data From Multiple Sources</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document explains how to use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.JoinBlock%602&gt;</ph> class to perform an operation when data is available from multiple sources.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It also demonstrates how to use non-greedy mode to enable multiple join blocks to share a data source more efficiently.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example defines three resource types, <ph id="ph1">`NetworkResource`</ph>, <ph id="ph2">`FileResource`</ph>, and <ph id="ph3">`MemoryResource`</ph>, and performs operations when resources become available.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example requires a <ph id="ph1">`NetworkResource`</ph> and <ph id="ph2">`MemoryResource`</ph> pair in order to perform the first operation and a <ph id="ph3">`FileResource`</ph> and <ph id="ph4">`MemoryResource`</ph> pair in order to perform the second operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To enable these operations to occur when all required resources are available, this example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.JoinBlock%602&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.JoinBlock%602&gt;</ph> object receives data from all sources, it propagates that data to its target, which in this example is an <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.JoinBlock%602&gt;</ph> objects read from a shared pool of <ph id="ph2">`MemoryResource`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To enable efficient use of the shared pool of <ph id="ph1">`MemoryResource`</ph> objects, this example specifies a <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions&gt;</ph> object that has the <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy%2A&gt;</ph> property set to <ph id="ph4">`False`</ph> to create <ph id="ph5">&lt;xref:System.Threading.Tasks.Dataflow.JoinBlock%602&gt;</ph> objects that act in non-greedy mode.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A non-greedy join block postpones all incoming messages until one is available from each source.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If any of the postponed messages were accepted by another block, the join block restarts the process.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Non-greedy mode enables join blocks that share one or more source blocks to make forward progress as the other blocks wait for data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this example, if a <ph id="ph1">`MemoryResource`</ph> object is added to the <ph id="ph2">`memoryResources`</ph> pool, the first join block to receive its second data source can make forward progress.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If this example were to use greedy mode, which is the default, one join block might take the <ph id="ph1">`MemoryResource`</ph> object and wait for the second resource to become available.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, if the other join block has its second data source available, it cannot make forward progress because the <ph id="ph1">`MemoryResource`</ph> object has been taken by the other join block.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`DataflowNonGreedyJoin.cs`</ph> (<ph id="ph2">`DataflowNonGreedyJoin.vb`</ph> for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Visual C#</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowNonGreedyJoin.cs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Visual Basic</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowNonGreedyJoin.vb<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The use of non-greedy joins can also help you prevent deadlock in your application.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In a software application, <bpt id="p1">*</bpt>deadlock<ept id="p1">*</ept> occurs when two or more processes each hold a resource and mutually wait for another process to release some other resource.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Consider an application that defines two <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.JoinBlock%602&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Both objects each read data from two shared source blocks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In greedy mode, if one join block reads from the first source and the second join block reads from the second source, the application might deadlock because both join blocks mutually wait for the other to release its resource.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In non-greedy mode, each join block reads from its sources only when all data is available, and therefore, the risk of deadlock is eliminated.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>