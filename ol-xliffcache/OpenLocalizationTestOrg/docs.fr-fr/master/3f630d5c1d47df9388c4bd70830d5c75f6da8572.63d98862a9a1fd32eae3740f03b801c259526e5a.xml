{"content":"---\ntitle: \"Compiler Error CS0172\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0172\"\nhelpviewer_keywords: \n  - \"CS0172\"\nms.assetid: 1272c575-3580-4897-95fb-83f45d7435ae\n---\n# Compiler Error CS0172\nType of conditional expression cannot be determined because 'type1' and 'type2' implicitly convert to one another  \n  \n In a conditional statement, you must be able to convert the types on either side of the `:` operator. Also, there cannot be mutual conversion routines; you only need one conversion. For more information, see [Conversion Operators](../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md).  \n  \n The following sample generates CS0172:  \n  \n```csharp  \n// CS0172.cs  \npublic class Square  \n{  \n   public class Circle  \n   {  \n      public static implicit operator Circle(Square aa)  \n      {  \n         return null;  \n      }  \n  \n      public static implicit operator Square(Circle aa)  \n      // using explicit resolves this error  \n      // public static explicit operator Square(Circle aa)  \n      {  \n         return null;  \n      }  \n   }  \n  \n   public static void Main()  \n   {  \n      Circle aa = new Circle();  \n      Square ii = new Square();  \n      object o = (1 == 1) ? aa : ii;   // CS0172  \n      // the following cast would resolve this error  \n      // (1 == 1) ? aa : (Circle)ii;  \n   }  \n}  \n```\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS0172\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0172\"\nhelpviewer_keywords: \n  - \"CS0172\"\nms.assetid: 1272c575-3580-4897-95fb-83f45d7435ae","nodes":[{"content":"Compiler Error CS0172","nodes":[{"pos":[0,21],"content":"Compiler Error CS0172","nodes":[{"content":"Compiler Error CS0172","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,193],"content":"Compiler Error CS0172","linkify":"Compiler Error CS0172","nodes":[{"content":"Compiler Error CS0172","pos":[0,21]}]},{"content":"Type of conditional expression cannot be determined because 'type1' and 'type2' implicitly convert to one another","pos":[194,307]},{"content":"In a conditional statement, you must be able to convert the types on either side of the <ph id=\"ph1\">`:`</ph> operator.","pos":[314,415],"source":"In a conditional statement, you must be able to convert the types on either side of the `:` operator."},{"content":"Also, there cannot be mutual conversion routines; you only need one conversion.","pos":[416,495]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Conversion Operators<ept id=\"p1\">](../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)</ept>.","pos":[496,634],"source":" For more information, see [Conversion Operators](../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)."},{"content":"The following sample generates CS0172:","pos":[641,679]}]}