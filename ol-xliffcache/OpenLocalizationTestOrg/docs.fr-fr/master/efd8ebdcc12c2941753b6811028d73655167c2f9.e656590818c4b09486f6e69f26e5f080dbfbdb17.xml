{"content":"---\ntitle: \"How to: Combine and Compare String Collections (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 243cfafc-9eaa-4354-a9df-d329f1d39913\n---\n# How to: Combine and Compare String Collections (LINQ) (Visual Basic)\nThis example shows how to merge files that contain lines of text and then sort the results. Specifically, it shows how to perform a simple concatenation, a union, and an intersection on the two sets of text lines.  \n  \n### To set up the project and the text files  \n  \n1.  Copy these names into a text file that is named names1.txt and save it in your project folder:  \n  \n    ```  \n    Bankov, Peter  \n    Holm, Michael  \n    Garcia, Hugo  \n    Potra, Cristina  \n    Noriega, Fabricio  \n    Aw, Kam Foo  \n    Beebe, Ann  \n    Toyoshima, Tim  \n    Guy, Wey Yuan  \n    Garcia, Debra  \n    ```  \n  \n2.  Copy these names into a text file that is named names2.txt and save it in your project folder. Note that the two files have some names in common.  \n  \n    ```  \n    Liu, Jinghao  \n    Bankov, Peter  \n    Holm, Michael  \n    Garcia, Hugo  \n    Beebe, Ann  \n    Gilchrist, Beth  \n    Myrcha, Jacek  \n    Giakoumakis, Leo  \n    McLin, Nkenge  \n    El Yassir, Mehdi  \n    ```  \n  \n## Example  \n  \n```vb  \nClass ConcatenateStrings  \n    Shared Sub Main()  \n  \n        ' Create the IEnumerable data sources.  \n        Dim fileA As String() = System.IO.File.ReadAllLines(\"../../../names1.txt\")  \n        Dim fileB As String() = System.IO.File.ReadAllLines(\"../../../names2.txt\")  \n  \n        ' Simple concatenation and sort.  \n        Dim concatQuery = fileA.Concat(fileB).OrderBy(Function(name) name)  \n  \n        ' Pass the query variable to another function for execution  \n        OutputQueryResults(concatQuery, \"Simple concatenation and sort. Duplicates are preserved:\")  \n  \n        ' New query. Concatenate files and remove duplicates  \n        Dim uniqueNamesQuery = fileA.Union(fileB).OrderBy(Function(name) name)  \n        OutputQueryResults(uniqueNamesQuery, \"Union removes duplicate names:\")  \n  \n        ' New query. Find the names that occur in both files.  \n        Dim commonNamesQuery = fileA.Intersect(fileB)  \n        OutputQueryResults(commonNamesQuery, \"Merge based on intersect: \")  \n  \n        ' New query in three steps for better readability   \n        ' First filter each list separately  \n  \n        Dim nameToSearch As String = \"Garcia\"  \n        Dim mergeQueryA As IEnumerable(Of String) = From name In fileA   \n                          Let n = name.Split(New Char() {\",\"})   \n                          Where n(0) = nameToSearch   \n                          Select name  \n  \n        Dim mergeQueryB = From name In fileB   \n                          Let n = name.Split(New Char() {\",\"})   \n                          Where n(0) = nameToSearch   \n                          Select name  \n  \n        ' Create a new query to concatenate and sort results. Duplicates are removed in Union.  \n        ' Note that none of the queries actually executed until the call to OutputQueryResults.  \n        Dim mergeSortQuery = mergeQueryA.Union(mergeQueryB).OrderBy(Function(str) str)  \n  \n        ' Now execute mergeSortQuery  \n        OutputQueryResults(mergeSortQuery, \"Concat based on partial name match \"\"\" & nameToSearch & \"\"\" from each list:\")  \n  \n        ' Keep console window open in debug mode.  \n        Console.WriteLine(\"Press any key to exit.\")  \n        Console.ReadKey()  \n  \n    End Sub  \n  \n    Shared Sub OutputQueryResults(ByVal query As IEnumerable(Of String), ByVal message As String)  \n  \n        Console.WriteLine(System.Environment.NewLine & message)  \n        For Each item As String In query  \n            Console.WriteLine(item)  \n        Next  \n        Console.WriteLine(query.Count & \" total names in list\")  \n  \n    End Sub  \nEnd Class  \n' Output:  \n  \n' Simple concatenation and sort. Duplicates are preserved:  \n' Aw, Kam Foo  \n' Bankov, Peter  \n' Bankov, Peter  \n' Beebe, Ann  \n' Beebe, Ann  \n' El Yassir, Mehdi  \n' Garcia, Debra  \n' Garcia, Hugo  \n' Garcia, Hugo  \n' Giakoumakis, Leo  \n' Gilchrist, Beth  \n' Guy, Wey Yuan  \n' Holm, Michael  \n' Holm, Michael  \n' Liu, Jinghao  \n' McLin, Nkenge  \n' Myrcha, Jacek  \n' Noriega, Fabricio  \n' Potra, Cristina  \n' Toyoshima, Tim  \n' 20 total names in list  \n  \n' Union removes duplicate names:  \n' Aw, Kam Foo  \n' Bankov, Peter  \n' Beebe, Ann  \n' El Yassir, Mehdi  \n' Garcia, Debra  \n' Garcia, Hugo  \n' Giakoumakis, Leo  \n' Gilchrist, Beth  \n' Guy, Wey Yuan  \n' Holm, Michael  \n' Liu, Jinghao  \n' McLin, Nkenge  \n' Myrcha, Jacek  \n' Noriega, Fabricio  \n' Potra, Cristina  \n' Toyoshima, Tim  \n' 16 total names in list  \n  \n' Merge based on intersect:  \n' Bankov, Peter  \n' Holm, Michael  \n' Garcia, Hugo  \n' Beebe, Ann  \n' 4 total names in list  \n  \n' Concat based on partial name match \"Garcia\" from each list:  \n' Garcia, Debra  \n' Garcia, Hugo  \n' 2 total names in list  \n```  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace.  \n  \n## See also\n\n- [LINQ and Strings (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)\n- [LINQ and File Directories (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)\n","nodes":[{"pos":[4,150],"embed":true,"restype":"x-metadata","content":"title: \"How to: Combine and Compare String Collections (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 243cfafc-9eaa-4354-a9df-d329f1d39913","nodes":[{"content":"How to: Combine and Compare String Collections (LINQ) (Visual Basic)","nodes":[{"pos":[0,68],"content":"How to: Combine and Compare String Collections (LINQ) (Visual Basic)","nodes":[{"content":"How to: Combine and Compare String Collections (LINQ) (Visual Basic)","pos":[0,68]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[157,225],"content":"How to: Combine and Compare String Collections (LINQ) (Visual Basic)","linkify":"How to: Combine and Compare String Collections (LINQ) (Visual Basic)","nodes":[{"content":"How to: Combine and Compare String Collections (LINQ) (Visual Basic)","pos":[0,68]}]},{"content":"This example shows how to merge files that contain lines of text and then sort the results.","pos":[226,317]},{"content":"Specifically, it shows how to perform a simple concatenation, a union, and an intersection on the two sets of text lines.","pos":[318,439]},{"pos":[449,489],"content":"To set up the project and the text files","linkify":"To set up the project and the text files","nodes":[{"content":"To set up the project and the text files","pos":[0,40]}]},{"content":"Copy these names into a text file that is named names1.txt and save it in your project folder:","pos":[499,593]},{"content":"Copy these names into a text file that is named names2.txt and save it in your project folder.","pos":[827,921]},{"content":"Note that the two files have some names in common.","pos":[922,972]},{"pos":[1207,1214],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4900,4918],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[4922,5085],"content":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <ph id=\"ph1\">`Imports`</ph> statement for the System.Linq namespace.","source":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace."},{"pos":[5094,5102],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5106,5217],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)"},{"pos":[5220,5349],"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","source":"[LINQ and File Directories (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)"}]}