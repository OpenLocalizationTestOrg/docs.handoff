{"content":"---\ntitle: \"How to: Access a Variable Hidden by a Derived Class (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"qualification, of element names\"\n  - \"base classes, accessing elements\"\n  - \"element names, qualification\"\n  - \"references, declared elements\"\n  - \"declared elements, referencing\"\n  - \"variables [Visual Basic], accessing hidden\"\nms.assetid: ae21a8ac-9cd4-4fba-a3ec-ecc4321ef93c\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Access a Variable Hidden by a Derived Class (Visual Basic)\nWhen code in a derived class accesses a variable, the compiler normally resolves the reference to the closest accessible version, that is, the accessible version the fewest derivational steps backward from the accessing class. If the variable is defined in the derived class, the code normally accesses that definition.  \n  \n If the derived class variable shadows a variable in the base class, it hides the base class version. However, you can access the base class variable by qualifying it with the `MyBase` keyword.  \n  \n### To access a base class variable hidden by a derived class  \n  \n-   In an expression or assignment statement, precede the variable name with the `MyBase` keyword and a period (`.`).  \n  \n     The compiler resolves the reference to the base class version of the variable.  \n  \n     The following example illustrates shadowing through inheritance. It makes two references, one that accesses the shadowing variable and one that bypasses the shadowing.  \n  \n    ```  \n    Public Class shadowBaseClass  \n        Public shadowString As String = \"This is the base class string.\"  \n    End Class  \n    Public Class shadowDerivedClass  \n        Inherits shadowBaseClass  \n        Public Shadows shadowString As String = \"This is the derived class string.\"  \n        Public Sub showStrings()  \n            Dim s As String = \"Unqualified shadowString: \" & shadowString &  \n                vbCrLf & \"MyBase.shadowString: \" & MyBase.shadowString  \n            MsgBox(s)  \n        End Sub  \n    End Class  \n    ```  \n  \n     The preceding example declares the variable `shadowString` in the base class and shadows it in the derived class. The procedure `showStrings` in the derived class displays the shadowing version of the string when the name `shadowString` is not qualified. It then displays the shadowed version when `shadowString` is qualified with the `MyBase`  keyword.  \n  \n## Robust Programming  \n To lower the risk of referring to an unintended version of a shadowed variable, you can fully qualify all references to a shadowed variable. Shadowing introduces more than one version of a variable with the same name. When a code statement refers to the variable name, the version to which the compiler resolves the reference depends on factors such as the location of the code statement and the presence of a qualifying string. This can increase the risk of referring to the wrong version of the variable.  \n  \n## See Also  \n [References to Declared Elements](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)   \n [Shadowing in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)   \n [Differences Between Shadowing and Overriding](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md)   \n [How to: Hide a Variable with the Same Name as Your Variable](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)   \n [How to: Hide an Inherited Variable](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)   \n [Shadows](../../../../visual-basic/language-reference/modifiers/shadows.md)   \n [Overrides](../../../../visual-basic/language-reference/modifiers/overrides.md)   \n [Me, My, MyBase, and MyClass](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)   \n [Inheritance Basics](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)","nodes":[{"pos":[12,95],"content":"How to: Access a Variable Hidden by a Derived Class (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Access a Variable Hidden by a Derived Class (Visual Basic) | Microsoft Docs","pos":[0,83]}]},{"pos":[824,890],"content":"How to: Access a Variable Hidden by a Derived Class (Visual Basic)","linkify":"How to: Access a Variable Hidden by a Derived Class (Visual Basic)","nodes":[{"content":"How to: Access a Variable Hidden by a Derived Class (Visual Basic)","pos":[0,66]}]},{"content":"When code in a derived class accesses a variable, the compiler normally resolves the reference to the closest accessible version, that is, the accessible version the fewest derivational steps backward from the accessing class.","pos":[891,1117]},{"content":"If the variable is defined in the derived class, the code normally accesses that definition.","pos":[1118,1210]},{"content":"If the derived class variable shadows a variable in the base class, it hides the base class version.","pos":[1217,1317]},{"content":"However, you can access the base class variable by qualifying it with the <ph id=\"ph1\">`MyBase`</ph> keyword.","pos":[1318,1409],"source":" However, you can access the base class variable by qualifying it with the `MyBase` keyword."},{"pos":[1419,1476],"content":"To access a base class variable hidden by a derived class","linkify":"To access a base class variable hidden by a derived class","nodes":[{"content":"To access a base class variable hidden by a derived class","pos":[0,57]}]},{"pos":[1486,1599],"content":"In an expression or assignment statement, precede the variable name with the <ph id=\"ph1\">`MyBase`</ph> keyword and a period (<ph id=\"ph2\">`.`</ph>).","source":"In an expression or assignment statement, precede the variable name with the `MyBase` keyword and a period (`.`)."},{"content":"The compiler resolves the reference to the base class version of the variable.","pos":[1610,1688]},{"content":"The following example illustrates shadowing through inheritance.","pos":[1699,1763]},{"content":"It makes two references, one that accesses the shadowing variable and one that bypasses the shadowing.","pos":[1764,1866]},{"content":"The preceding example declares the variable <ph id=\"ph1\">`shadowString`</ph> in the base class and shadows it in the derived class.","pos":[2429,2542],"source":"The preceding example declares the variable `shadowString` in the base class and shadows it in the derived class."},{"content":"The procedure <ph id=\"ph1\">`showStrings`</ph> in the derived class displays the shadowing version of the string when the name <ph id=\"ph2\">`shadowString`</ph> is not qualified.","pos":[2543,2683],"source":" The procedure `showStrings` in the derived class displays the shadowing version of the string when the name `shadowString` is not qualified."},{"content":"It then displays the shadowed version when <ph id=\"ph1\">`shadowString`</ph> is qualified with the <ph id=\"ph2\">`MyBase`</ph>  keyword.","pos":[2684,2782],"source":" It then displays the shadowed version when `shadowString` is qualified with the `MyBase`  keyword."},{"pos":[2791,2809],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"To lower the risk of referring to an unintended version of a shadowed variable, you can fully qualify all references to a shadowed variable.","pos":[2813,2953]},{"content":"Shadowing introduces more than one version of a variable with the same name.","pos":[2954,3030]},{"content":"When a code statement refers to the variable name, the version to which the compiler resolves the reference depends on factors such as the location of the code statement and the presence of a qualifying string.","pos":[3031,3241]},{"content":"This can increase the risk of referring to the wrong version of the variable.","pos":[3242,3319]},{"pos":[3328,3336],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>References to Declared Elements<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id=\"ph1\"> </ph>","pos":[3340,3489],"source":"[References to Declared Elements](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Shadowing in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)</ept><ph id=\"ph1\"> </ph>","pos":[3492,3614],"source":" [Shadowing in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Differences Between Shadowing and Overriding<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md)</ept><ph id=\"ph1\"> </ph>","pos":[3617,3793],"source":" [Differences Between Shadowing and Overriding](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Hide a Variable with the Same Name as Your Variable<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept><ph id=\"ph1\"> </ph>","pos":[3796,4001],"source":" [How to: Hide a Variable with the Same Name as Your Variable](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Hide an Inherited Variable<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)</ept><ph id=\"ph1\"> </ph>","pos":[4004,4159],"source":" [How to: Hide an Inherited Variable](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Shadows<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id=\"ph1\"> </ph>","pos":[4162,4239],"source":" [Shadows](../../../../visual-basic/language-reference/modifiers/shadows.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Overrides<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/overrides.md)</ept><ph id=\"ph1\"> </ph>","pos":[4242,4323],"source":" [Overrides](../../../../visual-basic/language-reference/modifiers/overrides.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Me, My, MyBase, and MyClass<ept id=\"p1\">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept><ph id=\"ph1\"> </ph>","pos":[4326,4447],"source":" [Me, My, MyBase, and MyClass](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Inheritance Basics<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept>","pos":[4450,4575],"source":" [Inheritance Basics](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)"}]}