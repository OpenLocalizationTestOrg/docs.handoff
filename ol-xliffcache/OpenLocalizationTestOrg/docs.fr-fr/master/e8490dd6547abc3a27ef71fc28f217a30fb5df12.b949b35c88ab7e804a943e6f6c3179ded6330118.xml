{"content":"---\ntitle: \"How to: Find Descendant Elements (XPath-LINQ to XML) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: e7e2dc9e-bda9-420d-a5b1-4fabf1cca46b\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Find Descendant Elements (XPath-LINQ to XML) (Visual Basic)\nThis topic shows how to get the descendant elements with a particular name.  \n  \n The XPath expression is `//Name`.  \n  \n## Example  \n This example finds all descendants named `Name`.  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md).  \n  \n```vb  \n  \n      Dim po As XDocument = XDocument.Load(\"PurchaseOrders.xml\")  \n  \n' LINQ to XML query  \nDim list1 As IEnumerable(Of XElement) = po...<Name>  \n  \n' XPath expression  \nDim list2 As IEnumerable(Of XElement) = po.XPathSelectElements(\"//Name\")  \n  \nIf (list1.Count() = list2.Count() And _  \n        list1.Intersect(list2).Count() = list1.Count()) Then  \n    Console.WriteLine(\"Results are identical\")  \nElse  \n    Console.WriteLine(\"Results differ\")  \nEnd If  \nFor Each el As XElement In list1  \n    Console.WriteLine(el)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \nResults are identical  \n<Name>Ellen Adams</Name>  \n<Name>Tai Yee</Name>  \n<Name>Cristian Osorio</Name>  \n<Name>Cristian Osorio</Name>  \n<Name>Jessica Arnold</Name>  \n<Name>Jessica Arnold</Name>  \n```  \n  \n## See Also  \n [LINQ to XML for XPath Users (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)","nodes":[{"pos":[12,96],"content":"How to: Find Descendant Elements (XPath-LINQ to XML) (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Find Descendant Elements (XPath-LINQ to XML) (Visual Basic) | Microsoft Docs","pos":[0,84]}]},{"pos":[403,470],"content":"How to: Find Descendant Elements (XPath-LINQ to XML) (Visual Basic)","linkify":"How to: Find Descendant Elements (XPath-LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Find Descendant Elements (XPath-LINQ to XML) (Visual Basic)","pos":[0,67]}]},{"content":"This topic shows how to get the descendant elements with a particular name.","pos":[471,546]},{"pos":[553,586],"content":"The XPath expression is <ph id=\"ph1\">`//Name`</ph>.","source":"The XPath expression is `//Name`."},{"pos":[595,602],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[606,654],"content":"This example finds all descendants named <ph id=\"ph1\">`Name`</ph>.","source":"This example finds all descendants named `Name`."},{"pos":[661,879],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)."},{"content":"This example produces the following output:","pos":[1436,1479]},{"pos":[1699,1707],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1711,1844],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML for XPath Users (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)</ept>","source":"[LINQ to XML for XPath Users (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)"}]}