{"content":"---\ntitle: \"Regular Expression Language - Quick Reference\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nf1_keywords: \n  - \"VS.RegularExpressionBuilder\"\nhelpviewer_keywords: \n  - \"regex cheat sheet\"\n  - \"parsing text with regular expressions, language elements\"\n  - \"searching with regular expressions, language elements\"\n  - \"pattern-matching with regular expressions, language elements\"\n  - \"regular expressions, language elements\"\n  - \"regular expressions [.NET Framework]\"\n  - \"cheat sheet\"\n  - \".NET Framework regular expressions, language elements\"\nms.assetid: 930653a6-95d2-4697-9d5a-52d11bb6fd4c\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Regular Expression Language - Quick Reference\n A regular expression is a pattern that the regular expression engine attempts to match in input text. A pattern consists of one or more character literals, operators, or constructs.  For a brief introduction, see [.NET Regular Expressions](../../../docs/standard/base-types/regular-expressions.md).  \n  \n Each section in this quick reference lists a particular category of characters, operators, and constructs that you can use to define regular expressions.  \n  \n We’ve also provided this information in two formats that you can download and print for easy reference:  \n  \n [Download in Word (.docx) format](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  \n [Download in PDF (.pdf) format](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  \n  \n## Character Escapes  \n The backslash character (\\\\) in a regular expression indicates that the character that follows it either is a special character (as shown in the following table), or should be interpreted literally. For more information, see [Character Escapes](../../../docs/standard/base-types/character-escapes-in-regular-expressions.md).  \n  \n|Escaped character|Description|Pattern|Matches|  \n|-----------------------|-----------------|-------------|-------------|  \n|`\\a`|Matches a bell character, \\u0007.|`\\a`|`\"\\u0007\"` in `\"Error!\" + '\\u0007'`|  \n|`\\b`|In a character class, matches a backspace, \\u0008.|`[\\b]{3,}`|`\"\\b\\b\\b\\b\"` in `\"\\b\\b\\b\\b\"`|  \n|`\\t`|Matches a tab, \\u0009.|`(\\w+)\\t`|`\"item1\\t\"`, `\"item2\\t\"` in `\"item1\\titem2\\t\"`|  \n|`\\r`|Matches a carriage return, \\u000D. (`\\r` is not equivalent to the newline character, `\\n`.)|`\\r\\n(\\w+)`|`\"\\r\\nThese\"` in `\"\\r\\nThese are\\ntwo lines.\"`|  \n|`\\v`|Matches a vertical tab, \\u000B.|`[\\v]{2,}`|`\"\\v\\v\\v\"` in `\"\\v\\v\\v\"`|  \n|`\\f`|Matches a form feed, \\u000C.|`[\\f]{2,}`|`\"\\f\\f\\f\"` in `\"\\f\\f\\f\"`|  \n|`\\n`|Matches a new line, \\u000A.|`\\r\\n(\\w+)`|`\"\\r\\nThese\"` in `\"\\r\\nThese are\\ntwo lines.\"`|  \n|`\\e`|Matches an escape, \\u001B.|`\\e`|`\"\\x001B\"` in `\"\\x001B\"`|  \n|`\\` *nnn*|Uses octal representation to specify a character (*nnn* consists of two or three digits).|`\\w\\040\\w`|`\"a b\"`, `\"c d\"` in `\"a bc d\"`|  \n|`\\x` *nn*|Uses hexadecimal representation to specify a character (*nn* consists of exactly two digits).|`\\w\\x20\\w`|`\"a b\"`, `\"c d\"` in `\"a bc d\"`|  \n|`\\c` *X*<br /><br /> `\\c` *x*|Matches the ASCII control character that is specified by *X* or *x*, where *X* or *x* is the letter of the control character.|`\\cC`|`\"\\x0003\"` in `\"\\x0003\"` (Ctrl-C)|  \n|`\\u` *nnnn*|Matches a Unicode character by using hexadecimal representation (exactly four digits, as represented by *nnnn*).|`\\w\\u0020\\w`|`\"a b\"`, `\"c d\"` in `\"a bc d\"`|  \n|`\\`|When followed by a character that is not recognized as an escaped character in this and other tables in this topic, matches that character. For example, `\\*` is the same as `\\x2A`, and `\\.` is the same as `\\x2E`. This allows the regular expression engine to disambiguate language elements (such as \\* or ?) and character literals (represented by `\\*` or `\\?`).|`\\d+[\\+-x\\*]\\d+`|`\"2+2\"` and `\"3*9\"` in `\"(2+2) * 3*9\"`|  \n  \n [Back to top](#top)  \n  \n## Character Classes  \n A character class matches any one of a set of characters. Character classes include the language elements listed in the following table. For more information, see [Character Classes](../../../docs/standard/base-types/character-classes-in-regular-expressions.md).  \n  \n|Character class|Description|Pattern|Matches|  \n|---------------------|-----------------|-------------|-------------|  \n|`[` *character_group* `]`|Matches any single character in *character_group*. By default, the match is case-sensitive.|`[ae]`|`\"a\"` in `\"gray\"`<br /><br /> `\"a\"`, `\"e\"` in `\"lane\"`|  \n|`[^` *character_group* `]`|Negation: Matches any single character that is not in *character_group*. By default, characters in *character_group* are case-sensitive.|`[^aei]`|`\"r\"`, `\"g\"`, `\"n\"` in `\"reign\"`|  \n|`[` *first* `-` *last* `]`|Character range: Matches any single character in the range from *first* to *last*.|`[A-Z]`|`\"A\"`, `\"B\"` in `\"AB123\"`|  \n|`.`|Wildcard: Matches any single character except \\n.<br /><br /> To match a literal period character (. or `\\u002E`), you must precede it with the escape character (`\\.`).|`a.e`|`\"ave\"` in `\"nave\"`<br /><br /> `\"ate\"` in `\"water\"`|  \n|`\\p{` *name* `}`|Matches any single character in the Unicode general category or named block specified by *name*.|`\\p{Lu}`<br /><br /> `\\p{IsCyrillic}`|`\"C\"`, `\"L\"` in `\"City Lights\"`<br /><br /> `\"Д\"`, `\"Ж\"` in `\"ДЖem\"`|  \n|`\\P{` *name* `}`|Matches any single character that is not in the Unicode general category or named block specified by *name*.|`\\P{Lu}`<br /><br /> `\\P{IsCyrillic}`|`\"i\"`, `\"t\"`, `\"y\"` in `\"City\"`<br /><br /> `\"e\"`, `\"m\"` in `\"ДЖem\"`|  \n|`\\w`|Matches any word character.|`\\w`|`\"I\"`, `\"D\"`, `\"A\"`, `\"1\"`, `\"3\"` in `\"ID A1.3\"`|  \n|`\\W`|Matches any non-word character.|`\\W`|`\" \"`, `\".\"` in `\"ID A1.3\"`|  \n|`\\s`|Matches any white-space character.|`\\w\\s`|`\"D \"` in `\"ID A1.3\"`|  \n|`\\S`|Matches any non-white-space character.|`\\s\\S`|`\" _\"` in `\"int __ctr\"`|  \n|`\\d`|Matches any decimal digit.|`\\d`|`\"4\"` in `\"4 = IV\"`|  \n|`\\D`|Matches any character other than a decimal digit.|`\\D`|`\" \"`, `\"=\"`, `\" \"`, `\"I\"`, `\"V\"` in `\"4 = IV\"`|  \n  \n [Back to top](#top)  \n  \n## Anchors  \n Anchors, or atomic zero-width assertions, cause a match to succeed or fail depending on the current position in the string, but they do not cause the engine to advance through the string or consume characters. The metacharacters listed in the following table are anchors. For more information, see [Anchors](../../../docs/standard/base-types/anchors-in-regular-expressions.md).  \n  \n|Assertion|Description|Pattern|Matches|  \n|---------------|-----------------|-------------|-------------|  \n|`^`|By default, the match must start at the beginning of the string; in multiline mode, it must start at the beginning of the line.|`^\\d{3}`|`\"901\"` in `\"901-333-\"`|  \n|`$`|By default, the match must occur at the end of the string or before `\\n` at the end of the string; in multiline mode, it must occur before the end of the line or before `\\n` at the end of the line.|`-\\d{3}$`|`\"-333\"` in `\"-901-333\"`|  \n|`\\A`|The match must occur at the start of the string.|`\\A\\d{3}`|`\"901\"` in `\"901-333-\"`|  \n|`\\Z`|The match must occur at the end of the string or before `\\n` at the end of the string.|`-\\d{3}\\Z`|`\"-333\"` in `\"-901-333\"`|  \n|`\\z`|The match must occur at the end of the string.|`-\\d{3}\\z`|`\"-333\"` in `\"-901-333\"`|  \n|`\\G`|The match must occur at the point where the previous match ended.|`\\G\\(\\d\\)`|`\"(1)\"`, `\"(3)\"`, `\"(5)\"` in `\"(1)(3)(5)[7](9)\"`|  \n|`\\b`|The match must occur on a boundary between a `\\w` (alphanumeric) and a `\\W` (nonalphanumeric) character.|`\\b\\w+\\s\\w+\\b`|`\"them theme\"`, `\"them them\"` in `\"them theme them them\"`|  \n|`\\B`|The match must not occur on a `\\b` boundary.|`\\Bend\\w*\\b`|`\"ends\"`, `\"ender\"` in `\"end sends endure lender\"`|  \n  \n [Back to top](#top)  \n  \n## Grouping Constructs  \n Grouping constructs delineate subexpressions of a regular expression and typically capture substrings of an input string. Grouping constructs include the language elements listed in the following table. For more information, see [Grouping Constructs](grouping-constructs-in-regular-expressions.md).  \n  \n|Grouping construct|Description|Pattern|Matches|  \n|------------------------|-----------------|-------------|-------------|  \n|`(` *subexpression* `)`|Captures the matched subexpression and assigns it a one-based ordinal number.|`(\\w)\\1`|`\"ee\"` in `\"deep\"`|  \n|`(?<` *name* `>` *subexpression* `)`|Captures the matched subexpression into a named group.|`(?<double>\\w)\\k<double>`|`\"ee\"` in `\"deep\"`|  \n|`(?<` *name1* `-` *name2* `>` *subexpression* `)`|Defines a balancing group definition. For more information, see the \"Balancing Group Definition\" section in [Grouping Constructs](grouping-constructs-in-regular-expressions.md).|`(((?'Open'\\()[^\\(\\)]*)+((?'Close-Open'\\))[^\\(\\)]*)+)*(?(Open)(?!))$`|`\"((1-3)*(3-1))\"` in `\"3+2^((1-3)*(3-1))\"`|  \n|`(?:` *subexpression* `)`|Defines a noncapturing group.|`Write(?:Line)?`|`\"WriteLine\"` in `\"Console.WriteLine()\"`<br /><br /> `\"Write\"` in `\"Console.Write(value)\"`|  \n|`(?imnsx-imnsx:` *subexpression* `)`|Applies or disables the specified options within *subexpression*. For more information, see [Regular Expression Options](regular-expression-options.md).|`A\\d{2}(?i:\\w+)\\b`|`\"A12xl\"`, `\"A12XL\"` in `\"A12xl A12XL a12xl\"`|  \n|`(?=` *subexpression* `)`|Zero-width positive lookahead assertion.|`\\w+(?=\\.)`|`\"is\"`, `\"ran\"`, and `\"out\"` in `\"He is. The dog ran. The sun is out.\"`|  \n|`(?!` *subexpression* `)`|Zero-width negative lookahead assertion.|`\\b(?!un)\\w+\\b`|`\"sure\"`, `\"used\"` in `\"unsure sure unity used\"`|  \n|`(?<=` *subexpression* `)`|Zero-width positive lookbehind assertion.|`(?<=19)\\d{2}\\b`|`\"99\"`, `\"50\"`, `\"05\"` in `\"1851 1999 1950 1905 2003\"`|  \n|`(?<!` *subexpression* `)`|Zero-width negative lookbehind assertion.|`(?<!19)\\d{2}\\b`|`\"51\"`, `\"03\"` in `\"1851 1999 1950 1905 2003\"`|  \n|`(?>` *subexpression* `)`|Nonbacktracking (or \"greedy\") subexpression.|`[13579](?>A+B+)`|`\"1ABB\"`, `\"3ABB\"`, and `\"5AB\"` in `\"1ABB 3ABBC 5AB 5AC\"`|  \n  \n [Back to top](#top)  \n  \n## Quantifiers  \n A quantifier specifies how many instances of the previous element (which can be a character, a group, or a character class) must be present in the input string for a match to occur. Quantifiers include the language elements listed in the following table. For more information, see [Quantifiers](quantifiers-in-regular-expressions.md).  \n  \n|Quantifier|Description|Pattern|Matches|  \n|----------------|-----------------|-------------|-------------|  \n|`*`|Matches the previous element zero or more times.|`\\d*\\.\\d`|`\".0\"`, `\"19.9\"`, `\"219.9\"`|  \n|`+`|Matches the previous element one or more times.|`\"be+\"`|`\"bee\"` in `\"been\"`, `\"be\"` in `\"bent\"`|  \n|`?`|Matches the previous element zero or one time.|`\"rai?n\"`|`\"ran\"`, `\"rain\"`|  \n|`{` *n* `}`|Matches the previous element exactly *n* times.|`\",\\d{3}\"`|`\",043\"` in `\"1,043.6\"`, `\",876\"`, `\",543\"`, and `\",210\"` in `\"9,876,543,210\"`|  \n|`{` *n* `,}`|Matches the previous element at least *n* times.|`\"\\d{2,}\"`|`\"166\"`, `\"29\"`, `\"1930\"`|  \n|`{` *n* `,` *m* `}`|Matches the previous element at least *n* times, but no more than *m* times.|`\"\\d{3,5}\"`|`\"166\"`, `\"17668\"`<br /><br /> `\"19302\"` in `\"193024\"`|  \n|`*?`|Matches the previous element zero or more times, but as few times as possible.|`\\d*?\\.\\d`|`\".0\"`, `\"19.9\"`, `\"219.9\"`|  \n|`+?`|Matches the previous element one or more times, but as few times as possible.|`\"be+?\"`|`\"be\"` in `\"been\"`, `\"be\"` in `\"bent\"`|  \n|`??`|Matches the previous element zero or one time, but as few times as possible.|`\"rai??n\"`|`\"ran\"`, `\"rain\"`|  \n|`{` *n* `}?`|Matches the preceding element exactly *n* times.|`\",\\d{3}?\"`|`\",043\"` in `\"1,043.6\"`, `\",876\"`, `\",543\"`, and `\",210\"` in `\"9,876,543,210\"`|  \n|`{` *n* `,}?`|Matches the previous element at least *n* times, but as few times as possible.|`\"\\d{2,}?\"`|`\"166\"`, `\"29\"`, `\"1930\"`|  \n|`{` *n* `,` *m* `}?`|Matches the previous element between *n* and *m* times, but as few times as possible.|`\"\\d{3,5}?\"`|`\"166\"`, `\"17668\"`<br /><br /> `\"193\"`, `\"024\"` in `\"193024\"`|  \n  \n [Back to top](#top)  \n  \n## Backreference Constructs  \n A backreference allows a previously matched subexpression to be identified subsequently in the same regular expression. The following table lists the backreference constructs supported by regular expressions in .NET. For more information, see [Backreference Constructs](backreference-constructs-in-regular-expressions.md).  \n  \n|Backreference construct|Description|Pattern|Matches|  \n|-----------------------------|-----------------|-------------|-------------|  \n|`\\` *number*|Backreference. Matches the value of a numbered subexpression.|`(\\w)\\1`|`\"ee\"` in `\"seek\"`|  \n|`\\k<` *name* `>`|Named backreference. Matches the value of a named expression.|`(?<char>\\w)\\k<char>`|`\"ee\"` in `\"seek\"`|  \n  \n [Back to top](#top)  \n  \n## Alternation Constructs  \n Alternation constructs modify a regular expression to enable either/or matching. These constructs include the language elements listed in the following table. For more information, see [Alternation Constructs](alternation-constructs-in-regular-expressions.md).  \n  \n|Alternation construct|Description|Pattern|Matches|  \n|---------------------------|-----------------|-------------|-------------|  \n|<code>&#124;</code>|Matches any one element separated by the vertical bar (<code>&#124;</code>) character.|<code>th(e&#124;is&#124;at)</code>|`\"the\"`, `\"this\"` in `\"this is the day.\"`|  \n|`(?(` *expression* `)` *yes* <code>&#124;</code> *no* `)`|Matches *yes* if the regular expression pattern designated by *expression* matches; otherwise, matches the optional *no* part. *expression* is interpreted as a zero-width assertion.|<code>(?(A)A\\d{2}\\b&#124;\\b\\d{3}\\b)</code>|`\"A10\"`, `\"910\"` in `\"A10 C103 910\"`|  \n|`(?(` *name* `)` *yes* <code>&#124;</code> *no* `)`|Matches *yes* if *name*, a named or numbered capturing group, has a match; otherwise, matches the optional *no*.|<code>(?&lt;quoted&gt;&quot;)?(?(quoted).+?&quot;&#124;\\S+\\s)</code>|`\"Dogs.jpg \"`, `\"\\\"Yiska playing.jpg\\\"\"` in `\"Dogs.jpg \\\"Yiska playing.jpg\\\"\"`|  \n  \n [Back to top](#top)  \n  \n## Substitutions  \n Substitutions are regular expression language elements that are supported in replacement patterns. For more information, see [Substitutions](substitutions-in-regular-expressions.md). The metacharacters listed in the following table are atomic zero-width assertions.  \n  \n|Character|Description|Pattern|Replacement pattern|Input string|Result string|  \n|---------------|-----------------|-------------|-------------------------|------------------|-------------------|  \n|`$` *number*|Substitutes the substring matched by group *number*.|`\\b(\\w+)(\\s)(\\w+)\\b`|`$3$2$1`|`\"one two\"`|`\"two one\"`|  \n|`${` *name* `}`|Substitutes the substring matched by the named group *name*.|`\\b(?<word1>\\w+)(\\s)(?<word2>\\w+)\\b`|`${word2} ${word1}`|`\"one two\"`|`\"two one\"`|  \n|`$$`|Substitutes a literal \"$\".|`\\b(\\d+)\\s?USD`|`$$$1`|`\"103 USD\"`|`\"$103\"`|  \n|`$&`|Substitutes a copy of the whole match.|`\\$?\\d*\\.?\\d+`|`**$&**`|`\"$1.30\"`|`\"**$1.30**\"`|  \n|``$` ``|Substitutes all the text of the input string before the match.|`B+`|``$` ``|`\"AABBCC\"`|`\"AAAACC\"`|  \n|`$'`|Substitutes all the text of the input string after the match.|`B+`|`$'`|`\"AABBCC\"`|`\"AACCCC\"`|  \n|`$+`|Substitutes the last group that was captured.|`B+(C+)`|`$+`|`\"AABBCCDD\"`|`\"AACCDD\"`|  \n|`$_`|Substitutes the entire input string.|`B+`|`$_`|`\"AABBCC\"`|`\"AAAABBCCCC\"`|  \n  \n [Back to top](#top)  \n  \n## Regular Expression Options  \n You can specify options that control how the regular expression engine interprets a regular expression pattern. Many of these options can be specified either inline (in the regular expression pattern) or as one or more <xref:System.Text.RegularExpressions.RegexOptions> constants. This quick reference lists only inline options. For more information about inline and <xref:System.Text.RegularExpressions.RegexOptions> options, see the article [Regular Expression Options](regular-expression-options.md).  \n  \n You can specify an inline option in two ways:  \n  \n-   By using the [miscellaneous construct](miscellaneous-constructs-in-regular-expressions.md) `(?imnsx-imnsx)`, where a minus sign (-) before an option or set of options turns those options off. For example, `(?i-mn)` turns case-insensitive matching (`i`) on, turns multiline mode (`m`) off, and turns unnamed group captures (`n`) off. The option applies to the regular expression pattern from the point at which the option is defined, and is effective either to the end of the pattern or to the point where another construct reverses the option.  \n  \n-   By using the [grouping construct](grouping-constructs-in-regular-expressions.md)`(?imnsx-imnsx:`*subexpression*`)`, which defines options for the specified group only.  \n  \n The .NET regular expression engine supports the following inline options.  \n  \n|Option|Description|Pattern|Matches|  \n|------------|-----------------|-------------|-------------|  \n|`i`|Use case-insensitive matching.|`\\b(?i)a(?-i)a\\w+\\b`|`\"aardvark\"`, `\"aaaAuto\"` in `\"aardvark AAAuto aaaAuto Adam breakfast\"`|  \n|`m`|Use multiline mode. `^` and `$` match the beginning and end of a line, instead of the beginning and end of a string.|For an example, see the \"Multiline Mode\" section in [Regular Expression Options](regular-expression-options.md).||  \n|`n`|Do not capture unnamed groups.|For an example, see the \"Explicit Captures Only\" section in [Regular Expression Options](regular-expression-options.md).||  \n|`s`|Use single-line mode.|For an example, see the \"Single-line Mode\" section in [Regular Expression Options](regular-expression-options.md).||  \n|`x`|Ignore unescaped white space in the regular expression pattern.|`\\b(?x) \\d+ \\s \\w+`|`\"1 aardvark\"`, `\"2 cats\"` in `\"1 aardvark 2 cats IV centurions\"`|  \n  \n [Back to top](#top)  \n  \n## Miscellaneous Constructs  \n Miscellaneous constructs either modify a regular expression pattern or provide information about it. The following table lists the miscellaneous constructs supported by .NET. For more information, see [Miscellaneous Constructs](miscellaneous-constructs-in-regular-expressions.md).  \n  \n|Construct|Definition|Example|  \n|---------------|----------------|-------------|  \n|`(?imnsx-imnsx)`|Sets or disables options such as case insensitivity in the middle of a pattern.For more information, see [Regular Expression Options](regular-expression-options.md).|`\\bA(?i)b\\w+\\b` matches `\"ABA\"`, `\"Able\"` in `\"ABA Able Act\"`|  \n|`(?#` *comment* `)`|Inline comment. The comment ends at the first closing parenthesis.|`\\bA(?#Matches words starting with A)\\w+\\b`|  \n|`#` [to end of line]|X-mode comment. The comment starts at an unescaped `#` and continues to the end of the line.|`(?x)\\bA\\w+\\b#Matches words starting with A`|  \n  \n## See also\n\n- <xref:System.Text.RegularExpressions?displayProperty=nameWithType>\n- <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType>\n- [Regular Expressions](regular-expressions.md)\n- [Regular Expression Classes](the-regular-expression-object-model.md)\n- [Regular Expression Examples](regular-expression-examples.md)\n- [Regular Expressions - Quick Reference (download in Word format)](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)\n- [Regular Expressions - Quick Reference (download in PDF format)](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)\n","nodes":[{"pos":[4,650],"embed":true,"restype":"x-metadata","content":"title: \"Regular Expression Language - Quick Reference\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nf1_keywords: \n  - \"VS.RegularExpressionBuilder\"\nhelpviewer_keywords: \n  - \"regex cheat sheet\"\n  - \"parsing text with regular expressions, language elements\"\n  - \"searching with regular expressions, language elements\"\n  - \"pattern-matching with regular expressions, language elements\"\n  - \"regular expressions, language elements\"\n  - \"regular expressions [.NET Framework]\"\n  - \"cheat sheet\"\n  - \".NET Framework regular expressions, language elements\"\nms.assetid: 930653a6-95d2-4697-9d5a-52d11bb6fd4c\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Regular Expression Language - Quick Reference","nodes":[{"pos":[0,45],"content":"Regular Expression Language - Quick Reference","nodes":[{"content":"Regular Expression Language - Quick Reference","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[657,702],"content":"Regular Expression Language - Quick Reference","linkify":"Regular Expression Language - Quick Reference","nodes":[{"content":"Regular Expression Language - Quick Reference","pos":[0,45]}]},{"content":"A regular expression is a pattern that the regular expression engine attempts to match in input text.","pos":[704,805]},{"content":"A pattern consists of one or more character literals, operators, or constructs.","pos":[806,885]},{"content":"For a brief introduction, see <bpt id=\"p1\">[</bpt>.NET Regular Expressions<ept id=\"p1\">](../../../docs/standard/base-types/regular-expressions.md)</ept>.","pos":[887,1002],"source":"  For a brief introduction, see [.NET Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)."},{"content":"Each section in this quick reference lists a particular category of characters, operators, and constructs that you can use to define regular expressions.","pos":[1009,1162]},{"content":"We’ve also provided this information in two formats that you can download and print for easy reference:","pos":[1169,1272]},{"content":"<bpt id=\"p1\">[</bpt>Download in Word (.docx) format<ept id=\"p1\">](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)</ept>","pos":[1279,1443],"source":"[Download in Word (.docx) format](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)"},{"content":"<bpt id=\"p1\">[</bpt>Download in PDF (.pdf) format<ept id=\"p1\">](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)</ept>","pos":[1447,1608],"source":"[Download in PDF (.pdf) format](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)"},{"pos":[1617,1634],"content":"Character Escapes","linkify":"Character Escapes","nodes":[{"content":"Character Escapes","pos":[0,17]}]},{"content":"The backslash character (<ph id=\"ph1\">\\\\</ph>) in a regular expression indicates that the character that follows it either is a special character (as shown in the following table), or should be interpreted literally.","pos":[1638,1836],"source":"The backslash character (\\\\) in a regular expression indicates that the character that follows it either is a special character (as shown in the following table), or should be interpreted literally."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Character Escapes<ept id=\"p1\">](../../../docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>.","pos":[1837,1962],"source":" For more information, see [Character Escapes](../../../docs/standard/base-types/character-escapes-in-regular-expressions.md)."},{"content":"Escaped character","pos":[1969,1986]},{"content":"Description","pos":[1987,1998]},{"content":"Pattern","pos":[1999,2006]},{"content":"Matches","pos":[2007,2014]},{"content":"Matches a bell character, \\u0007.","pos":[2098,2131]},{"pos":[2137,2172],"content":"<ph id=\"ph1\">`\"\\u0007\"`</ph> in <ph id=\"ph2\">`\"Error!\" + '\\u0007'`</ph>","source":"`\"\\u0007\"` in `\"Error!\" + '\\u0007'`"},{"content":"In a character class, matches a backspace, \\u0008.","pos":[2182,2232]},{"pos":[2244,2272],"content":"<ph id=\"ph1\">`\"\\b\\b\\b\\b\"`</ph> in <ph id=\"ph2\">`\"\\b\\b\\b\\b\"`</ph>","source":"`\"\\b\\b\\b\\b\"` in `\"\\b\\b\\b\\b\"`"},{"content":"Matches a tab, \\u0009.","pos":[2282,2304]},{"pos":[2315,2361],"content":"<ph id=\"ph1\">`\"item1\\t\"`</ph>, <ph id=\"ph2\">`\"item2\\t\"`</ph> in <ph id=\"ph3\">`\"item1\\titem2\\t\"`</ph>","source":"`\"item1\\t\"`, `\"item2\\t\"` in `\"item1\\titem2\\t\"`"},{"content":"Matches a carriage return, \\u000D.","pos":[2371,2405]},{"content":"(<ph id=\"ph1\">`\\r`</ph> is not equivalent to the newline character, <ph id=\"ph2\">`\\n`</ph>.)","pos":[2406,2462],"source":" (`\\r` is not equivalent to the newline character, `\\n`.)"},{"pos":[2475,2521],"content":"<ph id=\"ph1\">`\"\\r\\nThese\"`</ph> in <ph id=\"ph2\">`\"\\r\\nThese are\\ntwo lines.\"`</ph>","source":"`\"\\r\\nThese\"` in `\"\\r\\nThese are\\ntwo lines.\"`"},{"content":"Matches a vertical tab, \\u000B.","pos":[2531,2562]},{"pos":[2574,2598],"content":"<ph id=\"ph1\">`\"\\v\\v\\v\"`</ph> in <ph id=\"ph2\">`\"\\v\\v\\v\"`</ph>","source":"`\"\\v\\v\\v\"` in `\"\\v\\v\\v\"`"},{"content":"Matches a form feed, \\u000C.","pos":[2608,2636]},{"pos":[2648,2672],"content":"<ph id=\"ph1\">`\"\\f\\f\\f\"`</ph> in <ph id=\"ph2\">`\"\\f\\f\\f\"`</ph>","source":"`\"\\f\\f\\f\"` in `\"\\f\\f\\f\"`"},{"content":"Matches a new line, \\u000A.","pos":[2682,2709]},{"pos":[2722,2768],"content":"<ph id=\"ph1\">`\"\\r\\nThese\"`</ph> in <ph id=\"ph2\">`\"\\r\\nThese are\\ntwo lines.\"`</ph>","source":"`\"\\r\\nThese\"` in `\"\\r\\nThese are\\ntwo lines.\"`"},{"content":"Matches an escape, \\u001B.","pos":[2778,2804]},{"pos":[2810,2834],"content":"<ph id=\"ph1\">`\"\\x001B\"`</ph> in <ph id=\"ph2\">`\"\\x001B\"`</ph>","source":"`\"\\x001B\"` in `\"\\x001B\"`"},{"pos":[2839,2848],"content":"<ph id=\"ph1\">`\\`</ph> <bpt id=\"p1\">*</bpt>nnn<ept id=\"p1\">*</ept>","source":"`\\` *nnn*"},{"pos":[2849,2938],"content":"Uses octal representation to specify a character (<bpt id=\"p1\">*</bpt>nnn<ept id=\"p1\">*</ept> consists of two or three digits).","source":"Uses octal representation to specify a character (*nnn* consists of two or three digits)."},{"pos":[2950,2980],"content":"<ph id=\"ph1\">`\"a b\"`</ph>, <ph id=\"ph2\">`\"c d\"`</ph> in <ph id=\"ph3\">`\"a bc d\"`</ph>","source":"`\"a b\"`, `\"c d\"` in `\"a bc d\"`"},{"pos":[2985,2994],"content":"<ph id=\"ph1\">`\\x`</ph> <bpt id=\"p1\">*</bpt>nn<ept id=\"p1\">*</ept>","source":"`\\x` *nn*"},{"pos":[2995,3088],"content":"Uses hexadecimal representation to specify a character (<bpt id=\"p1\">*</bpt>nn<ept id=\"p1\">*</ept> consists of exactly two digits).","source":"Uses hexadecimal representation to specify a character (*nn* consists of exactly two digits)."},{"pos":[3100,3130],"content":"<ph id=\"ph1\">`\"a b\"`</ph>, <ph id=\"ph2\">`\"c d\"`</ph> in <ph id=\"ph3\">`\"a bc d\"`</ph>","source":"`\"a b\"`, `\"c d\"` in `\"a bc d\"`"},{"content":"<ph id=\"ph1\">`\\c`</ph> <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>","pos":[3135,3143],"source":"`\\c` *X*"},{"content":"<ph id=\"ph1\">`\\c`</ph> <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[3156,3164],"source":"`\\c` *x*"},{"pos":[3165,3290],"content":"Matches the ASCII control character that is specified by <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>, where <bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept> or <bpt id=\"p4\">*</bpt>x<ept id=\"p4\">*</ept> is the letter of the control character.","source":"Matches the ASCII control character that is specified by *X* or *x*, where *X* or *x* is the letter of the control character."},{"pos":[3297,3330],"content":"<ph id=\"ph1\">`\"\\x0003\"`</ph> in <ph id=\"ph2\">`\"\\x0003\"`</ph> (Ctrl-C)","source":"`\"\\x0003\"` in `\"\\x0003\"` (Ctrl-C)"},{"pos":[3335,3346],"content":"<ph id=\"ph1\">`\\u`</ph> <bpt id=\"p1\">*</bpt>nnnn<ept id=\"p1\">*</ept>","source":"`\\u` *nnnn*"},{"pos":[3347,3459],"content":"Matches a Unicode character by using hexadecimal representation (exactly four digits, as represented by <bpt id=\"p1\">*</bpt>nnnn<ept id=\"p1\">*</ept>).","source":"Matches a Unicode character by using hexadecimal representation (exactly four digits, as represented by *nnnn*)."},{"pos":[3473,3503],"content":"<ph id=\"ph1\">`\"a b\"`</ph>, <ph id=\"ph2\">`\"c d\"`</ph> in <ph id=\"ph3\">`\"a bc d\"`</ph>","source":"`\"a b\"`, `\"c d\"` in `\"a bc d\"`"},{"content":"When followed by a character that is not recognized as an escaped character in this and other tables in this topic, matches that character.","pos":[3512,3651]},{"content":"For example, <ph id=\"ph1\">`\\*`</ph> is the same as <ph id=\"ph2\">`\\x2A`</ph>, and <ph id=\"ph3\">`\\.`</ph> is the same as <ph id=\"ph4\">`\\x2E`</ph>.","pos":[3652,3724],"source":" For example, `\\*` is the same as `\\x2A`, and `\\.` is the same as `\\x2E`."},{"content":"This allows the regular expression engine to disambiguate language elements (such as <ph id=\"ph1\">\\*</ph> or ?) and character literals (represented by <ph id=\"ph2\">`\\*`</ph> or <ph id=\"ph3\">`\\?`</ph>).","pos":[3725,3872],"source":" This allows the regular expression engine to disambiguate language elements (such as \\* or ?) and character literals (represented by `\\*` or `\\?`)."},{"pos":[3890,3928],"content":"<ph id=\"ph1\">`\"2+2\"`</ph> and <ph id=\"ph2\">`\"3*9\"`</ph> in <ph id=\"ph3\">`\"(2+2) * 3*9\"`</ph>","source":"`\"2+2\"` and `\"3*9\"` in `\"(2+2) * 3*9\"`"},{"pos":[3936,3955],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[3964,3981],"content":"Character Classes","linkify":"Character Classes","nodes":[{"content":"Character Classes","pos":[0,17]}]},{"content":"A character class matches any one of a set of characters.","pos":[3985,4042]},{"content":"Character classes include the language elements listed in the following table.","pos":[4043,4121]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Character Classes<ept id=\"p1\">](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)</ept>.","pos":[4122,4247],"source":" For more information, see [Character Classes](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)."},{"content":"Character class","pos":[4254,4269]},{"content":"Description","pos":[4270,4281]},{"content":"Pattern","pos":[4282,4289]},{"content":"Matches","pos":[4290,4297]},{"pos":[4374,4399],"content":"<ph id=\"ph1\">`[`</ph> <bpt id=\"p1\">*</bpt>character_group<ept id=\"p1\">*</ept> <ph id=\"ph2\">`]`</ph>","source":"`[` *character_group* `]`"},{"content":"Matches any single character in <bpt id=\"p1\">*</bpt>character_group<ept id=\"p1\">*</ept>.","pos":[4400,4450],"source":"Matches any single character in *character_group*."},{"content":"By default, the match is case-sensitive.","pos":[4451,4491]},{"content":"<ph id=\"ph1\">`\"a\"`</ph> in <ph id=\"ph2\">`\"gray\"`</ph>","pos":[4499,4516],"source":"`\"a\"` in `\"gray\"`"},{"content":"<ph id=\"ph1\">`\"a\"`</ph>, <ph id=\"ph2\">`\"e\"`</ph> in <ph id=\"ph3\">`\"lane\"`</ph>","pos":[4529,4553],"source":"`\"a\"`, `\"e\"` in `\"lane\"`"},{"pos":[4558,4584],"content":"<ph id=\"ph1\">`[^`</ph> <bpt id=\"p1\">*</bpt>character_group<ept id=\"p1\">*</ept> <ph id=\"ph2\">`]`</ph>","source":"`[^` *character_group* `]`"},{"content":"Negation: Matches any single character that is not in <bpt id=\"p1\">*</bpt>character_group<ept id=\"p1\">*</ept>.","pos":[4585,4657],"source":"Negation: Matches any single character that is not in *character_group*."},{"content":"By default, characters in <bpt id=\"p1\">*</bpt>character_group<ept id=\"p1\">*</ept> are case-sensitive.","pos":[4658,4721],"source":" By default, characters in *character_group* are case-sensitive."},{"pos":[4731,4763],"content":"<ph id=\"ph1\">`\"r\"`</ph>, <ph id=\"ph2\">`\"g\"`</ph>, <ph id=\"ph3\">`\"n\"`</ph> in <ph id=\"ph4\">`\"reign\"`</ph>","source":"`\"r\"`, `\"g\"`, `\"n\"` in `\"reign\"`"},{"pos":[4768,4794],"content":"<ph id=\"ph1\">`[`</ph> <bpt id=\"p1\">*</bpt>first<ept id=\"p1\">*</ept> <ph id=\"ph2\">`-`</ph> <bpt id=\"p2\">*</bpt>last<ept id=\"p2\">*</ept> <ph id=\"ph3\">`]`</ph>","source":"`[` *first* `-` *last* `]`"},{"pos":[4795,4877],"content":"Character range: Matches any single character in the range from <bpt id=\"p1\">*</bpt>first<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>last<ept id=\"p2\">*</ept>.","source":"Character range: Matches any single character in the range from *first* to *last*."},{"pos":[4886,4911],"content":"<ph id=\"ph1\">`\"A\"`</ph>, <ph id=\"ph2\">`\"B\"`</ph> in <ph id=\"ph3\">`\"AB123\"`</ph>","source":"`\"A\"`, `\"B\"` in `\"AB123\"`"},{"content":"Wildcard: Matches any single character except \\n.","pos":[4920,4969]},{"content":"To match a literal period character (.","pos":[4982,5020]},{"content":"or <ph id=\"ph1\">`\\u002E`</ph>), you must precede it with the escape character (<ph id=\"ph2\">`\\.`</ph>).","pos":[5021,5088],"source":" or `\\u002E`), you must precede it with the escape character (`\\.`)."},{"content":"<ph id=\"ph1\">`\"ave\"`</ph> in <ph id=\"ph2\">`\"nave\"`</ph>","pos":[5095,5114],"source":"`\"ave\"` in `\"nave\"`"},{"content":"<ph id=\"ph1\">`\"ate\"`</ph> in <ph id=\"ph2\">`\"water\"`</ph>","pos":[5127,5147],"source":"`\"ate\"` in `\"water\"`"},{"pos":[5152,5168],"content":"<ph id=\"ph1\">`\\p{`</ph> <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> <ph id=\"ph2\">`}`</ph>","source":"`\\p{` *name* `}`"},{"pos":[5169,5265],"content":"Matches any single character in the Unicode general category or named block specified by <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>.","source":"Matches any single character in the Unicode general category or named block specified by *name*."},{"content":"<ph id=\"ph1\">`\"C\"`</ph>, <ph id=\"ph2\">`\"L\"`</ph> in <ph id=\"ph3\">`\"City Lights\"`</ph>","pos":[5304,5335],"source":"`\"C\"`, `\"L\"` in `\"City Lights\"`"},{"content":"<ph id=\"ph1\">`\"Д\"`</ph>, <ph id=\"ph2\">`\"Ж\"`</ph> in <ph id=\"ph3\">`\"ДЖem\"`</ph>","pos":[5348,5372],"source":"`\"Д\"`, `\"Ж\"` in `\"ДЖem\"`"},{"pos":[5377,5393],"content":"<ph id=\"ph1\">`\\P{`</ph> <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> <ph id=\"ph2\">`}`</ph>","source":"`\\P{` *name* `}`"},{"pos":[5394,5502],"content":"Matches any single character that is not in the Unicode general category or named block specified by <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>.","source":"Matches any single character that is not in the Unicode general category or named block specified by *name*."},{"content":"<ph id=\"ph1\">`\"i\"`</ph>, <ph id=\"ph2\">`\"t\"`</ph>, <ph id=\"ph3\">`\"y\"`</ph> in <ph id=\"ph4\">`\"City\"`</ph>","pos":[5541,5572],"source":"`\"i\"`, `\"t\"`, `\"y\"` in `\"City\"`"},{"content":"<ph id=\"ph1\">`\"e\"`</ph>, <ph id=\"ph2\">`\"m\"`</ph> in <ph id=\"ph3\">`\"ДЖem\"`</ph>","pos":[5585,5609],"source":"`\"e\"`, `\"m\"` in `\"ДЖem\"`"},{"content":"Matches any word character.","pos":[5619,5646]},{"pos":[5652,5700],"content":"<ph id=\"ph1\">`\"I\"`</ph>, <ph id=\"ph2\">`\"D\"`</ph>, <ph id=\"ph3\">`\"A\"`</ph>, <ph id=\"ph4\">`\"1\"`</ph>, <ph id=\"ph5\">`\"3\"`</ph> in <ph id=\"ph6\">`\"ID A1.3\"`</ph>","source":"`\"I\"`, `\"D\"`, `\"A\"`, `\"1\"`, `\"3\"` in `\"ID A1.3\"`"},{"content":"Matches any non-word character.","pos":[5710,5741]},{"pos":[5747,5774],"content":"<ph id=\"ph1\">`\" \"`</ph>, <ph id=\"ph2\">`\".\"`</ph> in <ph id=\"ph3\">`\"ID A1.3\"`</ph>","source":"`\" \"`, `\".\"` in `\"ID A1.3\"`"},{"content":"Matches any white-space character.","pos":[5784,5818]},{"pos":[5826,5847],"content":"<ph id=\"ph1\">`\"D \"`</ph> in <ph id=\"ph2\">`\"ID A1.3\"`</ph>","source":"`\"D \"` in `\"ID A1.3\"`"},{"content":"Matches any non-white-space character.","pos":[5857,5895]},{"pos":[5903,5926],"content":"<ph id=\"ph1\">`\" _\"`</ph> in <ph id=\"ph2\">`\"int __ctr\"`</ph>","source":"`\" _\"` in `\"int __ctr\"`"},{"content":"Matches any decimal digit.","pos":[5936,5962]},{"pos":[5968,5987],"content":"<ph id=\"ph1\">`\"4\"`</ph> in <ph id=\"ph2\">`\"4 = IV\"`</ph>","source":"`\"4\"` in `\"4 = IV\"`"},{"content":"Matches any character other than a decimal digit.","pos":[5997,6046]},{"pos":[6052,6099],"content":"<ph id=\"ph1\">`\" \"`</ph>, <ph id=\"ph2\">`\"=\"`</ph>, <ph id=\"ph3\">`\" \"`</ph>, <ph id=\"ph4\">`\"I\"`</ph>, <ph id=\"ph5\">`\"V\"`</ph> in <ph id=\"ph6\">`\"4 = IV\"`</ph>","source":"`\" \"`, `\"=\"`, `\" \"`, `\"I\"`, `\"V\"` in `\"4 = IV\"`"},{"pos":[6107,6126],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[6135,6142],"content":"Anchors","linkify":"Anchors","nodes":[{"content":"Anchors","pos":[0,7]}]},{"content":"Anchors, or atomic zero-width assertions, cause a match to succeed or fail depending on the current position in the string, but they do not cause the engine to advance through the string or consume characters.","pos":[6146,6355]},{"content":"The metacharacters listed in the following table are anchors.","pos":[6356,6417]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Anchors<ept id=\"p1\">](../../../docs/standard/base-types/anchors-in-regular-expressions.md)</ept>.","pos":[6418,6523],"source":" For more information, see [Anchors](../../../docs/standard/base-types/anchors-in-regular-expressions.md)."},{"content":"Assertion","pos":[6530,6539]},{"content":"Description","pos":[6540,6551]},{"content":"Pattern","pos":[6552,6559]},{"content":"Matches","pos":[6560,6567]},{"content":"By default, the match must start at the beginning of the string; in multiline mode, it must start at the beginning of the line.","pos":[6642,6769]},{"pos":[6779,6802],"content":"<ph id=\"ph1\">`\"901\"`</ph> in <ph id=\"ph2\">`\"901-333-\"`</ph>","source":"`\"901\"` in `\"901-333-\"`"},{"pos":[6811,7008],"content":"By default, the match must occur at the end of the string or before <ph id=\"ph1\">`\\n`</ph> at the end of the string; in multiline mode, it must occur before the end of the line or before <ph id=\"ph2\">`\\n`</ph> at the end of the line.","source":"By default, the match must occur at the end of the string or before `\\n` at the end of the string; in multiline mode, it must occur before the end of the line or before `\\n` at the end of the line."},{"pos":[7019,7043],"content":"<ph id=\"ph1\">`\"-333\"`</ph> in <ph id=\"ph2\">`\"-901-333\"`</ph>","source":"`\"-333\"` in `\"-901-333\"`"},{"content":"The match must occur at the start of the string.","pos":[7053,7101]},{"pos":[7112,7135],"content":"<ph id=\"ph1\">`\"901\"`</ph> in <ph id=\"ph2\">`\"901-333-\"`</ph>","source":"`\"901\"` in `\"901-333-\"`"},{"pos":[7145,7231],"content":"The match must occur at the end of the string or before <ph id=\"ph1\">`\\n`</ph> at the end of the string.","source":"The match must occur at the end of the string or before `\\n` at the end of the string."},{"pos":[7243,7267],"content":"<ph id=\"ph1\">`\"-333\"`</ph> in <ph id=\"ph2\">`\"-901-333\"`</ph>","source":"`\"-333\"` in `\"-901-333\"`"},{"content":"The match must occur at the end of the string.","pos":[7277,7323]},{"pos":[7335,7359],"content":"<ph id=\"ph1\">`\"-333\"`</ph> in <ph id=\"ph2\">`\"-901-333\"`</ph>","source":"`\"-333\"` in `\"-901-333\"`"},{"content":"The match must occur at the point where the previous match ended.","pos":[7369,7434]},{"pos":[7446,7494],"content":"<ph id=\"ph1\">`\"(1)\"`</ph>, <ph id=\"ph2\">`\"(3)\"`</ph>, <ph id=\"ph3\">`\"(5)\"`</ph> in <ph id=\"ph4\">`\"(1)(3)(5)[7](9)\"`</ph>","source":"`\"(1)\"`, `\"(3)\"`, `\"(5)\"` in `\"(1)(3)(5)[7](9)\"`"},{"pos":[7504,7608],"content":"The match must occur on a boundary between a <ph id=\"ph1\">`\\w`</ph> (alphanumeric) and a <ph id=\"ph2\">`\\W`</ph> (nonalphanumeric) character.","source":"The match must occur on a boundary between a `\\w` (alphanumeric) and a `\\W` (nonalphanumeric) character."},{"pos":[7624,7681],"content":"<ph id=\"ph1\">`\"them theme\"`</ph>, <ph id=\"ph2\">`\"them them\"`</ph> in <ph id=\"ph3\">`\"them theme them them\"`</ph>","source":"`\"them theme\"`, `\"them them\"` in `\"them theme them them\"`"},{"pos":[7691,7735],"content":"The match must not occur on a <ph id=\"ph1\">`\\b`</ph> boundary.","source":"The match must not occur on a `\\b` boundary."},{"pos":[7749,7799],"content":"<ph id=\"ph1\">`\"ends\"`</ph>, <ph id=\"ph2\">`\"ender\"`</ph> in <ph id=\"ph3\">`\"end sends endure lender\"`</ph>","source":"`\"ends\"`, `\"ender\"` in `\"end sends endure lender\"`"},{"pos":[7807,7826],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[7835,7854],"content":"Grouping Constructs","linkify":"Grouping Constructs","nodes":[{"content":"Grouping Constructs","pos":[0,19]}]},{"content":"Grouping constructs delineate subexpressions of a regular expression and typically capture substrings of an input string.","pos":[7858,7979]},{"content":"Grouping constructs include the language elements listed in the following table.","pos":[7980,8060]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Grouping Constructs<ept id=\"p1\">](grouping-constructs-in-regular-expressions.md)</ept>.","pos":[8061,8156],"source":" For more information, see [Grouping Constructs](grouping-constructs-in-regular-expressions.md)."},{"content":"Grouping construct","pos":[8163,8181]},{"content":"Description","pos":[8182,8193]},{"content":"Pattern","pos":[8194,8201]},{"content":"Matches","pos":[8202,8209]},{"pos":[8289,8312],"content":"<ph id=\"ph1\">`(`</ph> <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(` *subexpression* `)`"},{"content":"Captures the matched subexpression and assigns it a one-based ordinal number.","pos":[8313,8390]},{"pos":[8400,8418],"content":"<ph id=\"ph1\">`\"ee\"`</ph> in <ph id=\"ph2\">`\"deep\"`</ph>","source":"`\"ee\"` in `\"deep\"`"},{"pos":[8423,8459],"content":"<ph id=\"ph1\">`(?&lt;`</ph> <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> <ph id=\"ph2\">`&gt;`</ph> <bpt id=\"p2\">*</bpt>subexpression<ept id=\"p2\">*</ept> <ph id=\"ph3\">`)`</ph>","source":"`(?<` *name* `>` *subexpression* `)`"},{"content":"Captures the matched subexpression into a named group.","pos":[8460,8514]},{"pos":[8541,8559],"content":"<ph id=\"ph1\">`\"ee\"`</ph> in <ph id=\"ph2\">`\"deep\"`</ph>","source":"`\"ee\"` in `\"deep\"`"},{"pos":[8564,8613],"content":"<ph id=\"ph1\">`(?&lt;`</ph> <bpt id=\"p1\">*</bpt>name1<ept id=\"p1\">*</ept> <ph id=\"ph2\">`-`</ph> <bpt id=\"p2\">*</bpt>name2<ept id=\"p2\">*</ept> <ph id=\"ph3\">`&gt;`</ph> <bpt id=\"p3\">*</bpt>subexpression<ept id=\"p3\">*</ept> <ph id=\"ph4\">`)`</ph>","source":"`(?<` *name1* `-` *name2* `>` *subexpression* `)`"},{"content":"Defines a balancing group definition.","pos":[8614,8651]},{"content":"For more information, see the \"Balancing Group Definition\" section in <bpt id=\"p1\">[</bpt>Grouping Constructs<ept id=\"p1\">](grouping-constructs-in-regular-expressions.md)</ept>.","pos":[8652,8791],"source":" For more information, see the \"Balancing Group Definition\" section in [Grouping Constructs](grouping-constructs-in-regular-expressions.md)."},{"pos":[8862,8904],"content":"<ph id=\"ph1\">`\"((1-3)*(3-1))\"`</ph> in <ph id=\"ph2\">`\"3+2^((1-3)*(3-1))\"`</ph>","source":"`\"((1-3)*(3-1))\"` in `\"3+2^((1-3)*(3-1))\"`"},{"pos":[8909,8934],"content":"<ph id=\"ph1\">`(?:`</ph> <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(?:` *subexpression* `)`"},{"content":"Defines a noncapturing group.","pos":[8935,8964]},{"content":"<ph id=\"ph1\">`\"WriteLine\"`</ph> in <ph id=\"ph2\">`\"Console.WriteLine()\"`</ph>","pos":[8982,9022],"source":"`\"WriteLine\"` in `\"Console.WriteLine()\"`"},{"content":"<ph id=\"ph1\">`\"Write\"`</ph> in <ph id=\"ph2\">`\"Console.Write(value)\"`</ph>","pos":[9035,9072],"source":"`\"Write\"` in `\"Console.Write(value)\"`"},{"pos":[9077,9113],"content":"<ph id=\"ph1\">`(?imnsx-imnsx:`</ph> <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(?imnsx-imnsx:` *subexpression* `)`"},{"content":"Applies or disables the specified options within <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept>.","pos":[9114,9179],"source":"Applies or disables the specified options within *subexpression*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Regular Expression Options<ept id=\"p1\">](regular-expression-options.md)</ept>.","pos":[9180,9266],"source":" For more information, see [Regular Expression Options](regular-expression-options.md)."},{"pos":[9286,9331],"content":"<ph id=\"ph1\">`\"A12xl\"`</ph>, <ph id=\"ph2\">`\"A12XL\"`</ph> in <ph id=\"ph3\">`\"A12xl A12XL a12xl\"`</ph>","source":"`\"A12xl\"`, `\"A12XL\"` in `\"A12xl A12XL a12xl\"`"},{"pos":[9336,9361],"content":"<ph id=\"ph1\">`(?=`</ph> <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(?=` *subexpression* `)`"},{"content":"Zero-width positive lookahead assertion.","pos":[9362,9402]},{"pos":[9415,9486],"content":"<ph id=\"ph1\">`\"is\"`</ph>, <ph id=\"ph2\">`\"ran\"`</ph>, and <ph id=\"ph3\">`\"out\"`</ph> in <ph id=\"ph4\">`\"He is. The dog ran. The sun is out.\"`</ph>","source":"`\"is\"`, `\"ran\"`, and `\"out\"` in `\"He is. The dog ran. The sun is out.\"`"},{"pos":[9491,9516],"content":"<ph id=\"ph1\">`(?!`</ph> <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(?!` *subexpression* `)`"},{"content":"Zero-width negative lookahead assertion.","pos":[9517,9557]},{"pos":[9574,9622],"content":"<ph id=\"ph1\">`\"sure\"`</ph>, <ph id=\"ph2\">`\"used\"`</ph> in <ph id=\"ph3\">`\"unsure sure unity used\"`</ph>","source":"`\"sure\"`, `\"used\"` in `\"unsure sure unity used\"`"},{"pos":[9627,9653],"content":"<ph id=\"ph1\">`(?&lt;=`</ph> <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(?<=` *subexpression* `)`"},{"content":"Zero-width positive lookbehind assertion.","pos":[9654,9695]},{"pos":[9713,9767],"content":"<ph id=\"ph1\">`\"99\"`</ph>, <ph id=\"ph2\">`\"50\"`</ph>, <ph id=\"ph3\">`\"05\"`</ph> in <ph id=\"ph4\">`\"1851 1999 1950 1905 2003\"`</ph>","source":"`\"99\"`, `\"50\"`, `\"05\"` in `\"1851 1999 1950 1905 2003\"`"},{"pos":[9772,9798],"content":"<ph id=\"ph1\">`(?&lt;!`</ph> <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(?<!` *subexpression* `)`"},{"content":"Zero-width negative lookbehind assertion.","pos":[9799,9840]},{"pos":[9858,9904],"content":"<ph id=\"ph1\">`\"51\"`</ph>, <ph id=\"ph2\">`\"03\"`</ph> in <ph id=\"ph3\">`\"1851 1999 1950 1905 2003\"`</ph>","source":"`\"51\"`, `\"03\"` in `\"1851 1999 1950 1905 2003\"`"},{"pos":[9909,9934],"content":"<ph id=\"ph1\">`(?&gt;`</ph> <bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(?>` *subexpression* `)`"},{"content":"Nonbacktracking (or \"greedy\") subexpression.","pos":[9935,9979]},{"pos":[9998,10055],"content":"<ph id=\"ph1\">`\"1ABB\"`</ph>, <ph id=\"ph2\">`\"3ABB\"`</ph>, and <ph id=\"ph3\">`\"5AB\"`</ph> in <ph id=\"ph4\">`\"1ABB 3ABBC 5AB 5AC\"`</ph>","source":"`\"1ABB\"`, `\"3ABB\"`, and `\"5AB\"` in `\"1ABB 3ABBC 5AB 5AC\"`"},{"pos":[10063,10082],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[10091,10102],"content":"Quantifiers","linkify":"Quantifiers","nodes":[{"content":"Quantifiers","pos":[0,11]}]},{"content":"A quantifier specifies how many instances of the previous element (which can be a character, a group, or a character class) must be present in the input string for a match to occur.","pos":[10106,10287]},{"content":"Quantifiers include the language elements listed in the following table.","pos":[10288,10360]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Quantifiers<ept id=\"p1\">](quantifiers-in-regular-expressions.md)</ept>.","pos":[10361,10440],"source":" For more information, see [Quantifiers](quantifiers-in-regular-expressions.md)."},{"content":"Quantifier","pos":[10447,10457]},{"content":"Description","pos":[10458,10469]},{"content":"Pattern","pos":[10470,10477]},{"content":"Matches","pos":[10478,10485]},{"content":"Matches the previous element zero or more times.","pos":[10561,10609]},{"pos":[10620,10647],"content":"<ph id=\"ph1\">`\".0\"`</ph>, <ph id=\"ph2\">`\"19.9\"`</ph>, <ph id=\"ph3\">`\"219.9\"`</ph>","source":"`\".0\"`, `\"19.9\"`, `\"219.9\"`"},{"content":"Matches the previous element one or more times.","pos":[10656,10703]},{"pos":[10712,10751],"content":"<ph id=\"ph1\">`\"bee\"`</ph> in <ph id=\"ph2\">`\"been\"`</ph>, <ph id=\"ph3\">`\"be\"`</ph> in <ph id=\"ph4\">`\"bent\"`</ph>","source":"`\"bee\"` in `\"been\"`, `\"be\"` in `\"bent\"`"},{"content":"Matches the previous element zero or one time.","pos":[10760,10806]},{"pos":[10817,10834],"content":"<ph id=\"ph1\">`\"ran\"`</ph>, <ph id=\"ph2\">`\"rain\"`</ph>","source":"`\"ran\"`, `\"rain\"`"},{"pos":[10839,10850],"content":"<ph id=\"ph1\">`{`</ph> <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> <ph id=\"ph2\">`}`</ph>","source":"`{` *n* `}`"},{"pos":[10851,10898],"content":"Matches the previous element exactly <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> times.","source":"Matches the previous element exactly *n* times."},{"pos":[10910,10988],"content":"<ph id=\"ph1\">`\",043\"`</ph> in <ph id=\"ph2\">`\"1,043.6\"`</ph>, <ph id=\"ph3\">`\",876\"`</ph>, <ph id=\"ph4\">`\",543\"`</ph>, and <ph id=\"ph5\">`\",210\"`</ph> in <ph id=\"ph6\">`\"9,876,543,210\"`</ph>","source":"`\",043\"` in `\"1,043.6\"`, `\",876\"`, `\",543\"`, and `\",210\"` in `\"9,876,543,210\"`"},{"pos":[10993,11005],"content":"<ph id=\"ph1\">`{`</ph> <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> <ph id=\"ph2\">`,}`</ph>","source":"`{` *n* `,}`"},{"pos":[11006,11054],"content":"Matches the previous element at least <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> times.","source":"Matches the previous element at least *n* times."},{"pos":[11066,11091],"content":"<ph id=\"ph1\">`\"166\"`</ph>, <ph id=\"ph2\">`\"29\"`</ph>, <ph id=\"ph3\">`\"1930\"`</ph>","source":"`\"166\"`, `\"29\"`, `\"1930\"`"},{"pos":[11096,11115],"content":"<ph id=\"ph1\">`{`</ph> <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> <ph id=\"ph2\">`,`</ph> <bpt id=\"p2\">*</bpt>m<ept id=\"p2\">*</ept> <ph id=\"ph3\">`}`</ph>","source":"`{` *n* `,` *m* `}`"},{"pos":[11116,11192],"content":"Matches the previous element at least <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> times, but no more than <bpt id=\"p2\">*</bpt>m<ept id=\"p2\">*</ept> times.","source":"Matches the previous element at least *n* times, but no more than *m* times."},{"content":"<ph id=\"ph1\">`\"166\"`</ph>, <ph id=\"ph2\">`\"17668\"`</ph>","pos":[11205,11223],"source":"`\"166\"`, `\"17668\"`"},{"content":"<ph id=\"ph1\">`\"19302\"`</ph> in <ph id=\"ph2\">`\"193024\"`</ph>","pos":[11236,11259],"source":"`\"19302\"` in `\"193024\"`"},{"content":"Matches the previous element zero or more times, but as few times as possible.","pos":[11269,11347]},{"pos":[11359,11386],"content":"<ph id=\"ph1\">`\".0\"`</ph>, <ph id=\"ph2\">`\"19.9\"`</ph>, <ph id=\"ph3\">`\"219.9\"`</ph>","source":"`\".0\"`, `\"19.9\"`, `\"219.9\"`"},{"content":"Matches the previous element one or more times, but as few times as possible.","pos":[11396,11473]},{"pos":[11483,11521],"content":"<ph id=\"ph1\">`\"be\"`</ph> in <ph id=\"ph2\">`\"been\"`</ph>, <ph id=\"ph3\">`\"be\"`</ph> in <ph id=\"ph4\">`\"bent\"`</ph>","source":"`\"be\"` in `\"been\"`, `\"be\"` in `\"bent\"`"},{"content":"Matches the previous element zero or one time, but as few times as possible.","pos":[11531,11607]},{"pos":[11619,11636],"content":"<ph id=\"ph1\">`\"ran\"`</ph>, <ph id=\"ph2\">`\"rain\"`</ph>","source":"`\"ran\"`, `\"rain\"`"},{"pos":[11641,11653],"content":"<ph id=\"ph1\">`{`</ph> <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> <ph id=\"ph2\">`}?`</ph>","source":"`{` *n* `}?`"},{"pos":[11654,11702],"content":"Matches the preceding element exactly <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> times.","source":"Matches the preceding element exactly *n* times."},{"pos":[11715,11793],"content":"<ph id=\"ph1\">`\",043\"`</ph> in <ph id=\"ph2\">`\"1,043.6\"`</ph>, <ph id=\"ph3\">`\",876\"`</ph>, <ph id=\"ph4\">`\",543\"`</ph>, and <ph id=\"ph5\">`\",210\"`</ph> in <ph id=\"ph6\">`\"9,876,543,210\"`</ph>","source":"`\",043\"` in `\"1,043.6\"`, `\",876\"`, `\",543\"`, and `\",210\"` in `\"9,876,543,210\"`"},{"pos":[11798,11811],"content":"<ph id=\"ph1\">`{`</ph> <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> <ph id=\"ph2\">`,}?`</ph>","source":"`{` *n* `,}?`"},{"pos":[11812,11890],"content":"Matches the previous element at least <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> times, but as few times as possible.","source":"Matches the previous element at least *n* times, but as few times as possible."},{"pos":[11903,11928],"content":"<ph id=\"ph1\">`\"166\"`</ph>, <ph id=\"ph2\">`\"29\"`</ph>, <ph id=\"ph3\">`\"1930\"`</ph>","source":"`\"166\"`, `\"29\"`, `\"1930\"`"},{"pos":[11933,11953],"content":"<ph id=\"ph1\">`{`</ph> <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> <ph id=\"ph2\">`,`</ph> <bpt id=\"p2\">*</bpt>m<ept id=\"p2\">*</ept> <ph id=\"ph3\">`}?`</ph>","source":"`{` *n* `,` *m* `}?`"},{"pos":[11954,12039],"content":"Matches the previous element between <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>m<ept id=\"p2\">*</ept> times, but as few times as possible.","source":"Matches the previous element between *n* and *m* times, but as few times as possible."},{"content":"<ph id=\"ph1\">`\"166\"`</ph>, <ph id=\"ph2\">`\"17668\"`</ph>","pos":[12053,12071],"source":"`\"166\"`, `\"17668\"`"},{"content":"<ph id=\"ph1\">`\"193\"`</ph>, <ph id=\"ph2\">`\"024\"`</ph> in <ph id=\"ph3\">`\"193024\"`</ph>","pos":[12084,12114],"source":"`\"193\"`, `\"024\"` in `\"193024\"`"},{"pos":[12122,12141],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[12150,12174],"content":"Backreference Constructs","linkify":"Backreference Constructs","nodes":[{"content":"Backreference Constructs","pos":[0,24]}]},{"content":"A backreference allows a previously matched subexpression to be identified subsequently in the same regular expression.","pos":[12178,12297]},{"content":"The following table lists the backreference constructs supported by regular expressions in .NET.","pos":[12298,12394]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Backreference Constructs<ept id=\"p1\">](backreference-constructs-in-regular-expressions.md)</ept>.","pos":[12395,12500],"source":" For more information, see [Backreference Constructs](backreference-constructs-in-regular-expressions.md)."},{"content":"Backreference construct","pos":[12507,12530]},{"content":"Description","pos":[12531,12542]},{"content":"Pattern","pos":[12543,12550]},{"content":"Matches","pos":[12551,12558]},{"pos":[12643,12655],"content":"<ph id=\"ph1\">`\\`</ph> <bpt id=\"p1\">*</bpt>number<ept id=\"p1\">*</ept>","source":"`\\` *number*"},{"content":"Backreference.","pos":[12656,12670]},{"content":"Matches the value of a numbered subexpression.","pos":[12671,12717]},{"pos":[12727,12745],"content":"<ph id=\"ph1\">`\"ee\"`</ph> in <ph id=\"ph2\">`\"seek\"`</ph>","source":"`\"ee\"` in `\"seek\"`"},{"pos":[12750,12766],"content":"<ph id=\"ph1\">`\\k&lt;`</ph> <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> <ph id=\"ph2\">`&gt;`</ph>","source":"`\\k<` *name* `>`"},{"content":"Named backreference.","pos":[12767,12787]},{"content":"Matches the value of a named expression.","pos":[12788,12828]},{"pos":[12851,12869],"content":"<ph id=\"ph1\">`\"ee\"`</ph> in <ph id=\"ph2\">`\"seek\"`</ph>","source":"`\"ee\"` in `\"seek\"`"},{"pos":[12877,12896],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[12905,12927],"content":"Alternation Constructs","linkify":"Alternation Constructs","nodes":[{"content":"Alternation Constructs","pos":[0,22]}]},{"content":"Alternation constructs modify a regular expression to enable either/or matching.","pos":[12931,13011]},{"content":"These constructs include the language elements listed in the following table.","pos":[13012,13089]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Alternation Constructs<ept id=\"p1\">](alternation-constructs-in-regular-expressions.md)</ept>.","pos":[13090,13191],"source":" For more information, see [Alternation Constructs](alternation-constructs-in-regular-expressions.md)."},{"content":"Alternation construct","pos":[13198,13219]},{"content":"Description","pos":[13220,13231]},{"content":"Pattern","pos":[13232,13239]},{"content":"Matches","pos":[13240,13247]},{"pos":[13350,13436],"content":"Matches any one element separated by the vertical bar (<ph id=\"ph1\">&lt;code&gt;&amp;#124;&lt;/code&gt;</ph>) character.","source":"Matches any one element separated by the vertical bar (<code>&#124;</code>) character."},{"pos":[13472,13513],"content":"<ph id=\"ph1\">`\"the\"`</ph>, <ph id=\"ph2\">`\"this\"`</ph> in <ph id=\"ph3\">`\"this is the day.\"`</ph>","source":"`\"the\"`, `\"this\"` in `\"this is the day.\"`"},{"pos":[13518,13575],"content":"<ph id=\"ph1\">`(?(`</ph> <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph> <bpt id=\"p2\">*</bpt>yes<ept id=\"p2\">*</ept> <ph id=\"ph3\">&lt;code&gt;&amp;#124;&lt;/code&gt;</ph> <bpt id=\"p3\">*</bpt>no<ept id=\"p3\">*</ept> <ph id=\"ph4\">`)`</ph>","source":"`(?(` *expression* `)` *yes* <code>&#124;</code> *no* `)`"},{"content":"Matches <bpt id=\"p1\">*</bpt>yes<ept id=\"p1\">*</ept> if the regular expression pattern designated by <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept> matches; otherwise, matches the optional <bpt id=\"p3\">*</bpt>no<ept id=\"p3\">*</ept> part.","pos":[13576,13702],"source":"Matches *yes* if the regular expression pattern designated by *expression* matches; otherwise, matches the optional *no* part."},{"content":"<bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is interpreted as a zero-width assertion.","pos":[13703,13757],"source":"*expression* is interpreted as a zero-width assertion."},{"pos":[13801,13837],"content":"<ph id=\"ph1\">`\"A10\"`</ph>, <ph id=\"ph2\">`\"910\"`</ph> in <ph id=\"ph3\">`\"A10 C103 910\"`</ph>","source":"`\"A10\"`, `\"910\"` in `\"A10 C103 910\"`"},{"pos":[13842,13893],"content":"<ph id=\"ph1\">`(?(`</ph> <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph> <bpt id=\"p2\">*</bpt>yes<ept id=\"p2\">*</ept> <ph id=\"ph3\">&lt;code&gt;&amp;#124;&lt;/code&gt;</ph> <bpt id=\"p3\">*</bpt>no<ept id=\"p3\">*</ept> <ph id=\"ph4\">`)`</ph>","source":"`(?(` *name* `)` *yes* <code>&#124;</code> *no* `)`"},{"pos":[13894,14006],"content":"Matches <bpt id=\"p1\">*</bpt>yes<ept id=\"p1\">*</ept> if <bpt id=\"p2\">*</bpt>name<ept id=\"p2\">*</ept>, a named or numbered capturing group, has a match; otherwise, matches the optional <bpt id=\"p3\">*</bpt>no<ept id=\"p3\">*</ept>.","source":"Matches *yes* if *name*, a named or numbered capturing group, has a match; otherwise, matches the optional *no*."},{"pos":[14076,14154],"content":"<ph id=\"ph1\">`\"Dogs.jpg \"`</ph>, <ph id=\"ph2\">`\"\\\"Yiska playing.jpg\\\"\"`</ph> in <ph id=\"ph3\">`\"Dogs.jpg \\\"Yiska playing.jpg\\\"\"`</ph>","source":"`\"Dogs.jpg \"`, `\"\\\"Yiska playing.jpg\\\"\"` in `\"Dogs.jpg \\\"Yiska playing.jpg\\\"\"`"},{"pos":[14162,14181],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[14190,14203],"content":"Substitutions","linkify":"Substitutions","nodes":[{"content":"Substitutions","pos":[0,13]}]},{"content":"Substitutions are regular expression language elements that are supported in replacement patterns.","pos":[14207,14305]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Substitutions<ept id=\"p1\">](substitutions-in-regular-expressions.md)</ept>.","pos":[14306,14389],"source":" For more information, see [Substitutions](substitutions-in-regular-expressions.md)."},{"content":"The metacharacters listed in the following table are atomic zero-width assertions.","pos":[14390,14472]},{"content":"Character","pos":[14479,14488]},{"content":"Description","pos":[14489,14500]},{"content":"Pattern","pos":[14501,14508]},{"content":"Replacement pattern","pos":[14509,14528]},{"content":"Input string","pos":[14529,14541]},{"content":"Result string","pos":[14542,14555]},{"pos":[14677,14689],"content":"<ph id=\"ph1\">`$`</ph> <bpt id=\"p1\">*</bpt>number<ept id=\"p1\">*</ept>","source":"`$` *number*"},{"pos":[14690,14742],"content":"Substitutes the substring matched by group <bpt id=\"p1\">*</bpt>number<ept id=\"p1\">*</ept>.","source":"Substitutes the substring matched by group *number*."},{"pos":[14801,14816],"content":"<ph id=\"ph1\">`${`</ph> <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> <ph id=\"ph2\">`}`</ph>","source":"`${` *name* `}`"},{"pos":[14817,14877],"content":"Substitutes the substring matched by the named group <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>.","source":"Substitutes the substring matched by the named group *name*."},{"content":"Substitutes a literal \"$\".","pos":[14968,14994]},{"content":"Substitutes a copy of the whole match.","pos":[15048,15086]},{"pos":[15139,15222],"content":"<ph id=\"ph1\">``$` ``</ph>|Substitutes all the text of the input string before the match.|<ph id=\"ph2\">`B+`</ph><ph id=\"ph3\">|</ph><ph id=\"ph4\">``$` ``</ph>","source":"``$` ``|Substitutes all the text of the input string before the match.|`B+`|``$` ``"},{"content":"Substitutes all the text of the input string after the match.","pos":[15254,15315]},{"content":"Substitutes the last group that was captured.","pos":[15357,15402]},{"content":"Substitutes the entire input string.","pos":[15450,15486]},{"pos":[15530,15549],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[15558,15584],"content":"Regular Expression Options","linkify":"Regular Expression Options","nodes":[{"content":"Regular Expression Options","pos":[0,26]}]},{"content":"You can specify options that control how the regular expression engine interprets a regular expression pattern.","pos":[15588,15699]},{"content":"Many of these options can be specified either inline (in the regular expression pattern) or as one or more <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions&gt;</ph> constants.","pos":[15700,15868],"source":" Many of these options can be specified either inline (in the regular expression pattern) or as one or more <xref:System.Text.RegularExpressions.RegexOptions> constants."},{"content":"This quick reference lists only inline options.","pos":[15869,15916]},{"content":"For more information about inline and <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions&gt;</ph> options, see the article <bpt id=\"p1\">[</bpt>Regular Expression Options<ept id=\"p1\">](regular-expression-options.md)</ept>.","pos":[15917,16091],"source":" For more information about inline and <xref:System.Text.RegularExpressions.RegexOptions> options, see the article [Regular Expression Options](regular-expression-options.md)."},{"content":"You can specify an inline option in two ways:","pos":[16098,16143]},{"content":"By using the <bpt id=\"p1\">[</bpt>miscellaneous construct<ept id=\"p1\">](miscellaneous-constructs-in-regular-expressions.md)</ept> <ph id=\"ph1\">`(?imnsx-imnsx)`</ph>, where a minus sign (-) before an option or set of options turns those options off.","pos":[16153,16344],"source":"By using the [miscellaneous construct](miscellaneous-constructs-in-regular-expressions.md) `(?imnsx-imnsx)`, where a minus sign (-) before an option or set of options turns those options off."},{"content":"For example, <ph id=\"ph1\">`(?i-mn)`</ph> turns case-insensitive matching (<ph id=\"ph2\">`i`</ph>) on, turns multiline mode (<ph id=\"ph3\">`m`</ph>) off, and turns unnamed group captures (<ph id=\"ph4\">`n`</ph>) off.","pos":[16345,16485],"source":" For example, `(?i-mn)` turns case-insensitive matching (`i`) on, turns multiline mode (`m`) off, and turns unnamed group captures (`n`) off."},{"content":"The option applies to the regular expression pattern from the point at which the option is defined, and is effective either to the end of the pattern or to the point where another construct reverses the option.","pos":[16486,16696]},{"pos":[16706,16873],"content":"By using the <bpt id=\"p1\">[</bpt>grouping construct<ept id=\"p1\">](grouping-constructs-in-regular-expressions.md)</ept><ph id=\"ph1\">`(?imnsx-imnsx:`</ph><bpt id=\"p2\">*</bpt>subexpression<ept id=\"p2\">*</ept><ph id=\"ph2\">`)`</ph>, which defines options for the specified group only.","source":"By using the [grouping construct](grouping-constructs-in-regular-expressions.md)`(?imnsx-imnsx:`*subexpression*`)`, which defines options for the specified group only."},{"content":"The .NET regular expression engine supports the following inline options.","pos":[16880,16953]},{"content":"Option","pos":[16960,16966]},{"content":"Description","pos":[16967,16978]},{"content":"Pattern","pos":[16979,16986]},{"content":"Matches","pos":[16987,16994]},{"content":"Use case-insensitive matching.","pos":[17066,17096]},{"pos":[17118,17189],"content":"<ph id=\"ph1\">`\"aardvark\"`</ph>, <ph id=\"ph2\">`\"aaaAuto\"`</ph> in <ph id=\"ph3\">`\"aardvark AAAuto aaaAuto Adam breakfast\"`</ph>","source":"`\"aardvark\"`, `\"aaaAuto\"` in `\"aardvark AAAuto aaaAuto Adam breakfast\"`"},{"content":"Use multiline mode.","pos":[17198,17217]},{"content":"<ph id=\"ph1\">`^`</ph> and <ph id=\"ph2\">`$`</ph> match the beginning and end of a line, instead of the beginning and end of a string.","pos":[17218,17314],"source":"`^` and `$` match the beginning and end of a line, instead of the beginning and end of a string."},{"pos":[17315,17427],"content":"For an example, see the \"Multiline Mode\" section in <bpt id=\"p1\">[</bpt>Regular Expression Options<ept id=\"p1\">](regular-expression-options.md)</ept>.","source":"For an example, see the \"Multiline Mode\" section in [Regular Expression Options](regular-expression-options.md)."},{"content":"Do not capture unnamed groups.","pos":[17437,17467]},{"pos":[17468,17588],"content":"For an example, see the \"Explicit Captures Only\" section in <bpt id=\"p1\">[</bpt>Regular Expression Options<ept id=\"p1\">](regular-expression-options.md)</ept>.","source":"For an example, see the \"Explicit Captures Only\" section in [Regular Expression Options](regular-expression-options.md)."},{"content":"Use single-line mode.","pos":[17598,17619]},{"pos":[17620,17734],"content":"For an example, see the \"Single-line Mode\" section in <bpt id=\"p1\">[</bpt>Regular Expression Options<ept id=\"p1\">](regular-expression-options.md)</ept>.","source":"For an example, see the \"Single-line Mode\" section in [Regular Expression Options](regular-expression-options.md)."},{"content":"Ignore unescaped white space in the regular expression pattern.","pos":[17744,17807]},{"pos":[17828,17893],"content":"<ph id=\"ph1\">`\"1 aardvark\"`</ph>, <ph id=\"ph2\">`\"2 cats\"`</ph> in <ph id=\"ph3\">`\"1 aardvark 2 cats IV centurions\"`</ph>","source":"`\"1 aardvark\"`, `\"2 cats\"` in `\"1 aardvark 2 cats IV centurions\"`"},{"pos":[17901,17920],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[17929,17953],"content":"Miscellaneous Constructs","linkify":"Miscellaneous Constructs","nodes":[{"content":"Miscellaneous Constructs","pos":[0,24]}]},{"content":"Miscellaneous constructs either modify a regular expression pattern or provide information about it.","pos":[17957,18057]},{"content":"The following table lists the miscellaneous constructs supported by .NET.","pos":[18058,18131]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Miscellaneous Constructs<ept id=\"p1\">](miscellaneous-constructs-in-regular-expressions.md)</ept>.","pos":[18132,18237],"source":" For more information, see [Miscellaneous Constructs](miscellaneous-constructs-in-regular-expressions.md)."},{"content":"Construct","pos":[18244,18253]},{"content":"Definition","pos":[18254,18264]},{"content":"Example","pos":[18265,18272]},{"pos":[18345,18510],"content":"Sets or disables options such as case insensitivity in the middle of a pattern.For more information, see <bpt id=\"p1\">[</bpt>Regular Expression Options<ept id=\"p1\">](regular-expression-options.md)</ept>.","source":"Sets or disables options such as case insensitivity in the middle of a pattern.For more information, see [Regular Expression Options](regular-expression-options.md)."},{"pos":[18511,18572],"content":"<ph id=\"ph1\">`\\bA(?i)b\\w+\\b`</ph> matches <ph id=\"ph2\">`\"ABA\"`</ph>, <ph id=\"ph3\">`\"Able\"`</ph> in <ph id=\"ph4\">`\"ABA Able Act\"`</ph>","source":"`\\bA(?i)b\\w+\\b` matches `\"ABA\"`, `\"Able\"` in `\"ABA Able Act\"`"},{"pos":[18577,18596],"content":"<ph id=\"ph1\">`(?#`</ph> <bpt id=\"p1\">*</bpt>comment<ept id=\"p1\">*</ept> <ph id=\"ph2\">`)`</ph>","source":"`(?#` *comment* `)`"},{"content":"Inline comment.","pos":[18597,18612]},{"content":"The comment ends at the first closing parenthesis.","pos":[18613,18663]},{"pos":[18712,18732],"content":"<ph id=\"ph1\">`#`</ph> [to end of line]","source":"`#` [to end of line]"},{"content":"X-mode comment.","pos":[18733,18748]},{"content":"The comment starts at an unescaped <ph id=\"ph1\">`#`</ph> and continues to the end of the line.","pos":[18749,18825],"source":" The comment starts at an unescaped `#` and continues to the end of the line."},{"pos":[18880,18888],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[19036,19081],"content":"<bpt id=\"p1\">[</bpt>Regular Expressions<ept id=\"p1\">](regular-expressions.md)</ept>","source":"[Regular Expressions](regular-expressions.md)"},{"pos":[19084,19152],"content":"<bpt id=\"p1\">[</bpt>Regular Expression Classes<ept id=\"p1\">](the-regular-expression-object-model.md)</ept>","source":"[Regular Expression Classes](the-regular-expression-object-model.md)"},{"pos":[19155,19216],"content":"<bpt id=\"p1\">[</bpt>Regular Expression Examples<ept id=\"p1\">](regular-expression-examples.md)</ept>","source":"[Regular Expression Examples](regular-expression-examples.md)"},{"pos":[19219,19415],"content":"<bpt id=\"p1\">[</bpt>Regular Expressions - Quick Reference (download in Word format)<ept id=\"p1\">](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)</ept>","source":"[Regular Expressions - Quick Reference (download in Word format)](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)"},{"pos":[19418,19612],"content":"<bpt id=\"p1\">[</bpt>Regular Expressions - Quick Reference (download in PDF format)<ept id=\"p1\">](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)</ept>","source":"[Regular Expressions - Quick Reference (download in PDF format)](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)"}]}