<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="emitting-dynamic-methods-and-assemblies.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a0ed1d02fd40a94d4ae63deea3c09b04bfc9bd8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\emitting-dynamic-methods-and-assemblies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9fe2c6665f934b5b9b48673e4ed7251d0b635065</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1f8b12fdde58eb37bc269d47bd9b4b505352f21</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Emitting Dynamic Methods and Assemblies</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Emitting Dynamic Methods and Assemblies</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This section describes a set of managed types in the <ph id="ph1">&lt;xref:System.Reflection.Emit&gt;</ph> namespace that allow a compiler or tool to emit metadata and Microsoft intermediate language (MSIL) at run time and optionally generate a portable executable (PE) file on disk.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Script engines and compilers are the primary users of this namespace.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this section, the functionality provided by the <ph id="ph1">&lt;xref:System.Reflection.Emit&gt;</ph> namespace is referred to as reflection emit.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Reflection emit provides the following capabilities:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Define lightweight global methods at run time, using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class, and execute them using delegates.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Define assemblies at run time and then run them and/or save them to disk.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Define assemblies at run time, run them, and then unload them and allow garbage collection to reclaim their resources.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Define modules in new assemblies at run time and then run and/or save them to disk.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Define types in modules at run time, create instances of these types, and invoke their methods.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Define symbolic information for defined modules that can be used by tools such as debuggers and code profilers.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In addition to the managed types in the <ph id="ph1">&lt;xref:System.Reflection.Emit&gt;</ph> namespace, there are unmanaged metadata interfaces which are described in the <bpt id="p1">[</bpt>Metadata Interfaces<ept id="p1">](../../../docs/framework/unmanaged-api/metadata/metadata-interfaces.md)</ept> reference documentation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Managed reflection emit provides stronger semantic error checking and a higher level of abstraction of the metadata than the unmanaged metadata interfaces.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Another useful resource for working with metadata and MSIL is the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The documentation is available online on <bpt id="p1">[</bpt>MSDN<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=65555)</ept> and at the <bpt id="p2">[</bpt>Ecma Web site<ept id="p2">](https://go.microsoft.com/fwlink/?LinkId=116487)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security issues in reflection emit<ept id="p1">](../../../docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Describes security issues related to creating dynamic assemblies using reflection emit.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define and execute dynamic methods<ept id="p1">](how-to-define-and-execute-dynamic-methods.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Shows how to execute a simple dynamic method and a dynamic method bound to an instance of a class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define a generic type with reflection emit<ept id="p1">](how-to-define-a-generic-type-with-reflection-emit.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Shows how to create a simple generic type with two type parameters, how to apply class, interface, and special constraints to the type parameters, and how to create members that use the type parameters of the class as parameter types and return types.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define a generic method with reflection emit<ept id="p1">](how-to-define-a-generic-method-with-reflection-emit.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Shows how to create, emit, and invoke a simple generic method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collectible assemblies for dynamic type generation<ept id="p1">](collectible-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Introduces collectible assemblies, which are dynamic assemblies that can be unloaded without unloading the application domain in which they were created.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Catalogs the MSIL instruction codes you can use to build method bodies.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Contains managed classes used to emit dynamic methods, assemblies, and types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Describes the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class, which represents types in managed reflection and reflection emit, and which is key to the use of these technologies.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Contains managed classes used to explore metadata and managed code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reflection<ept id="p1">](../../../docs/framework/reflection-and-codedom/reflection.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Explains how to explore metadata and managed code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assemblies in the Common Language Runtime<ept id="p1">](../../../docs/framework/app-domains/assemblies-in-the-common-language-runtime.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Provides an overview of assemblies in .NET implementations.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>