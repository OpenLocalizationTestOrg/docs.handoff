<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="bool.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">958b58b31193dbf4c03709e4ab7ba38f7f30e0ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\bool.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e199761c8f71869e88e3e6c1d1e3368701c8b002</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb5e7b97f971791185ee4a0980dad29189632c88</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>bool keyword - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>bool (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bool`</ph> keyword is an alias of <ph id="ph2">&lt;xref:System.Boolean?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is used to declare variables to store the Boolean values: <bpt id="p1">[</bpt>true<ept id="p1">](true-literal.md)</ept> and <bpt id="p2">[</bpt>false<ept id="p2">](false-literal.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you require a Boolean variable that can also have a value of <ph id="ph1">`null`</ph>, use <ph id="ph2">`bool?`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>The bool? type<ept id="p1">](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type)</ept> section of the <bpt id="p2">[</bpt>Using nullable types<ept id="p2">](../../programming-guide/nullable-types/using-nullable-types.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Literals</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can assign a Boolean value to a <ph id="ph1">`bool`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also assign an expression that evaluates to <ph id="ph1">`bool`</ph> to a <ph id="ph2">`bool`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The default value of a <ph id="ph1">`bool`</ph> variable is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default value of a <ph id="ph1">`bool?`</ph> variable is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Conversions</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In C++, a value of type <ph id="ph1">`bool`</ph> can be converted to a value of type <ph id="ph2">`int`</ph>; in other words, <ph id="ph3">`false`</ph> is equivalent to zero and <ph id="ph4">`true`</ph> is equivalent to nonzero values.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In C#, there is no conversion between the <ph id="ph1">`bool`</ph> type and other types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`if`</ph> statement is invalid in C#:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To test a variable of the type <ph id="ph1">`int`</ph>, you have to explicitly compare it to a value, such as zero, as follows:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this example, you enter a character from the keyboard and the program checks if the input character is a letter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If it is a letter, it checks if it is lowercase or uppercase.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These checks are performed with the <ph id="ph1">&lt;xref:System.Char.IsLetter%2A&gt;</ph>, and <ph id="ph2">&lt;xref:System.Char.IsLower%2A&gt;</ph>, both of which return the <ph id="ph3">`bool`</ph> type:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integral Types Table<ept id="p1">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Built-In Types Table<ept id="p1">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Explicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>