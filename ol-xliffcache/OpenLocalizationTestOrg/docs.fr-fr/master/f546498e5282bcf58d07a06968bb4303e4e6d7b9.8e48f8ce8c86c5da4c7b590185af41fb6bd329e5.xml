{"content":"---\ntitle: \"Module Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"Module\"\n  - \"vb.Module\"\nhelpviewer_keywords: \n  - \"modules, classes\"\n  - \"modules\"\n  - \"Module statement [Visual Basic]\"\n  - \"modules, declaring\"\n  - \"standard modules\"\n  - \"classes [Visual Basic], vs. modules\"\n  - \"declarations [Visual Basic], modules\"\nms.assetid: a1243afc-14a5-45df-95d5-51118aeac362\n---\n# Module Statement\nDeclares the name of a module and introduces the definition of the variables, properties, events, and procedures that the module comprises.  \n  \n## Syntax  \n  \n```vb \n[ <attributelist> ] [ accessmodifier ]  Module name  \n    [ statements ]  \nEnd Module  \n```  \n  \n## Parts  \n `attributelist`  \n Optional. See [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md).  \n  \n `accessmodifier`  \n Optional. Can be one of the following:  \n  \n-   [Public](../../../visual-basic/language-reference/modifiers/public.md)  \n  \n-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)  \n  \n See [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n `name`  \n Required. Name of this module. See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md).  \n  \n `statements`  \n Optional. Statements which define the variables, properties, events, procedures, and nested types of this module.  \n  \n `End Module`  \n Terminates the `Module` definition.  \n  \n## Remarks  \n A `Module` statement defines a reference type available throughout its namespace. A *module* (sometimes called a *standard module*)is similar to a class but with some important distinctions. Every module has exactly one instance and does not need to be created or assigned to a variable. Modules do not support inheritance or implement interfaces. Notice that a module is not a *type* in the sense that a class or structure is â€” you cannot declare a programming element to have the data type of a module.  \n  \n You can use `Module` only at namespace level. This means the *declaration context* for a module must be a source file or namespace, and cannot be a class, structure, module, interface, procedure, or block. You cannot nest a module within another module, or within any type. For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md).  \n  \n A module has the same lifetime as your program. Because its members are all `Shared`, they also have lifetimes equal to that of the program.  \n  \n Modules default to [Friend](../../../visual-basic/language-reference/modifiers/friend.md) access. You can adjust their access levels with the access modifiers. For more information, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n All members of a module are implicitly `Shared`.  \n  \n## Classes and Modules  \n These elements have many similarities, but there are some important differences as well.  \n  \n-   **Terminology.** Previous versions of Visual Basic recognize two types of modules: *class modules* (.cls files) and *standard modules* (.bas files). The current version calls these *classes* and *modules*, respectively.  \n  \n-   **Shared Members.** You can control whether a member of a class is a shared or instance member.  \n  \n-   **Object Orientation.** Classes are object-oriented, but modules are not. So only classes can be instantiated as objects. For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md).  \n  \n## Rules  \n  \n-   **Modifiers.** All module members are implicitly [Shared](../../../visual-basic/language-reference/modifiers/shared.md). You cannot use the `Shared` keyword when declaring a member, and you cannot alter the shared status of any member.  \n  \n-   **Inheritance.** A module cannot inherit from any type other than <xref:System.Object>, from which all modules inherit. In particular, one module cannot inherit from another.  \n  \n     You cannot use the [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md) in a module definition, even to specify <xref:System.Object>.  \n  \n-   **Default Property.** You cannot define any default properties in a module. For more information, see [Default](../../../visual-basic/language-reference/modifiers/default.md).  \n  \n## Behavior  \n  \n-   **Access Level.** Within a module, you can declare each member with its own access level. Module members default to [Public](../../../visual-basic/language-reference/modifiers/public.md) access, except variables and constants, which default to [Private](../../../visual-basic/language-reference/modifiers/private.md) access. When a module has more restricted access than one of its members, the specified module access level takes precedence.  \n  \n-   **Scope.** A module is in scope throughout its namespace.  \n  \n     The scope of every module member is the entire module. Notice that all members undergo *type promotion*, which causes their scope to be promoted to the namespace containing the module. For more information, see [Type Promotion](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md).  \n  \n-   **Qualification.** You can have multiple modules in a project, and you can declare members with the same name in two or more modules. However, you must qualify any reference to such a member with the appropriate module name if the reference is from outside that module. For more information, see [References to Declared Elements](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md).  \n  \n## Example  \n [!code-vb[VbVbalrStatements#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#69)]  \n  \n## See also\n\n- [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)\n- [Namespace Statement](../../../visual-basic/language-reference/statements/namespace-statement.md)\n- [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)\n- [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)\n- [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)\n- [Type Promotion](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)\n","nodes":[{"pos":[4,386],"embed":true,"restype":"x-metadata","content":"title: \"Module Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"Module\"\n  - \"vb.Module\"\nhelpviewer_keywords: \n  - \"modules, classes\"\n  - \"modules\"\n  - \"Module statement [Visual Basic]\"\n  - \"modules, declaring\"\n  - \"standard modules\"\n  - \"classes [Visual Basic], vs. modules\"\n  - \"declarations [Visual Basic], modules\"\nms.assetid: a1243afc-14a5-45df-95d5-51118aeac362","nodes":[{"content":"Module Statement (Visual Basic)","nodes":[{"pos":[0,31],"content":"Module Statement (Visual Basic)","nodes":[{"content":"Module Statement (Visual Basic)","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[393,409],"content":"Module Statement","linkify":"Module Statement","nodes":[{"content":"Module Statement","pos":[0,16]}]},{"content":"Declares the name of a module and introduces the definition of the variables, properties, events, and procedures that the module comprises.","pos":[410,549]},{"pos":[558,564],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[677,682],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Optional.","pos":[705,714]},{"content":"See <bpt id=\"p1\">[</bpt>Attribute List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>.","pos":[715,807],"source":" See [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md)."},{"content":"Optional.","pos":[834,843]},{"content":"Can be one of the following:","pos":[844,872]},{"pos":[882,952],"content":"<bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>","source":"[Public](../../../visual-basic/language-reference/modifiers/public.md)"},{"pos":[962,1032],"content":"<bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>","source":"[Friend](../../../visual-basic/language-reference/modifiers/friend.md)"},{"pos":[1039,1169],"content":"See <bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","source":"See [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[1176,1349],"content":"`name`  \nRequired. Name of this module. See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md).","leadings":[""," "],"nodes":[{"content":"Required. Name of this module. See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md).","pos":[9,172],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Name of this module.","pos":[10,30]},{"content":"See <bpt id=\"p1\">[</bpt>Declared Element Names<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.","pos":[31,163],"source":" See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)."}]}]},{"pos":[1356,1485],"content":"`statements`  \nOptional. Statements which define the variables, properties, events, procedures, and nested types of this module.","leadings":[""," "],"nodes":[{"content":"Optional. Statements which define the variables, properties, events, procedures, and nested types of this module.","pos":[15,128],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Statements which define the variables, properties, events, procedures, and nested types of this module.","pos":[10,113]}]}]},{"pos":[1492,1543],"content":"`End Module`  \nTerminates the `Module` definition.","leadings":[""," "],"nodes":[{"content":"Terminates the <ph id=\"ph1\">`Module`</ph> definition.","pos":[15,50],"source":"Terminates the `Module` definition."}]},{"pos":[1552,1559],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <ph id=\"ph1\">`Module`</ph> statement defines a reference type available throughout its namespace.","pos":[1563,1644],"source":"A `Module` statement defines a reference type available throughout its namespace."},{"content":"A <bpt id=\"p1\">*</bpt>module<ept id=\"p1\">*</ept> (sometimes called a <bpt id=\"p2\">*</bpt>standard module<ept id=\"p2\">*</ept>)is similar to a class but with some important distinctions.","pos":[1645,1753],"source":" A *module* (sometimes called a *standard module*)is similar to a class but with some important distinctions."},{"content":"Every module has exactly one instance and does not need to be created or assigned to a variable.","pos":[1754,1850]},{"content":"Modules do not support inheritance or implement interfaces.","pos":[1851,1910]},{"content":"Notice that a module is not a <bpt id=\"p1\">*</bpt>type<ept id=\"p1\">*</ept> in the sense that a class or structure is â€” you cannot declare a programming element to have the data type of a module.","pos":[1911,2067],"source":" Notice that a module is not a *type* in the sense that a class or structure is â€” you cannot declare a programming element to have the data type of a module."},{"content":"You can use <ph id=\"ph1\">`Module`</ph> only at namespace level.","pos":[2074,2119],"source":"You can use `Module` only at namespace level."},{"content":"This means the <bpt id=\"p1\">*</bpt>declaration context<ept id=\"p1\">*</ept> for a module must be a source file or namespace, and cannot be a class, structure, module, interface, procedure, or block.","pos":[2120,2279],"source":" This means the *declaration context* for a module must be a source file or namespace, and cannot be a class, structure, module, interface, procedure, or block."},{"content":"You cannot nest a module within another module, or within any type.","pos":[2280,2347]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Declaration Contexts and Default Access Levels<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.","pos":[2348,2526],"source":" For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)."},{"content":"A module has the same lifetime as your program.","pos":[2533,2580]},{"content":"Because its members are all <ph id=\"ph1\">`Shared`</ph>, they also have lifetimes equal to that of the program.","pos":[2581,2673],"source":" Because its members are all `Shared`, they also have lifetimes equal to that of the program."},{"content":"Modules default to <bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept> access.","pos":[2680,2777],"source":"Modules default to [Friend](../../../visual-basic/language-reference/modifiers/friend.md) access."},{"content":"You can adjust their access levels with the access modifiers.","pos":[2778,2839]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[2840,2992],"source":" For more information, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[2999,3047],"content":"All members of a module are implicitly <ph id=\"ph1\">`Shared`</ph>.","source":"All members of a module are implicitly `Shared`."},{"pos":[3056,3075],"content":"Classes and Modules","linkify":"Classes and Modules","nodes":[{"content":"Classes and Modules","pos":[0,19]}]},{"content":"These elements have many similarities, but there are some important differences as well.","pos":[3079,3167]},{"content":"<bpt id=\"p1\">**</bpt>Terminology.<ept id=\"p1\">**</ept>","pos":[3177,3193],"source":"**Terminology.**"},{"content":"Previous versions of Visual Basic recognize two types of modules: <bpt id=\"p1\">*</bpt>class modules<ept id=\"p1\">*</ept> (.cls files) and <bpt id=\"p2\">*</bpt>standard modules<ept id=\"p2\">*</ept> (.bas files).","pos":[3194,3325],"source":" Previous versions of Visual Basic recognize two types of modules: *class modules* (.cls files) and *standard modules* (.bas files)."},{"content":"The current version calls these <bpt id=\"p1\">*</bpt>classes<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>modules<ept id=\"p2\">*</ept>, respectively.","pos":[3326,3396],"source":" The current version calls these *classes* and *modules*, respectively."},{"content":"<bpt id=\"p1\">**</bpt>Shared Members.<ept id=\"p1\">**</ept>","pos":[3406,3425],"source":"**Shared Members.**"},{"content":"You can control whether a member of a class is a shared or instance member.","pos":[3426,3501]},{"content":"<bpt id=\"p1\">**</bpt>Object Orientation.<ept id=\"p1\">**</ept>","pos":[3511,3534],"source":"**Object Orientation.**"},{"content":"Classes are object-oriented, but modules are not.","pos":[3535,3584]},{"content":"So only classes can be instantiated as objects.","pos":[3585,3632]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>.","pos":[3633,3769],"source":" For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)."},{"pos":[3778,3783],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Modifiers.<ept id=\"p1\">**</ept>","pos":[3793,3807],"source":"**Modifiers.**"},{"content":"All module members are implicitly <bpt id=\"p1\">[</bpt>Shared<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>.","pos":[3808,3913],"source":" All module members are implicitly [Shared](../../../visual-basic/language-reference/modifiers/shared.md)."},{"content":"You cannot use the <ph id=\"ph1\">`Shared`</ph> keyword when declaring a member, and you cannot alter the shared status of any member.","pos":[3914,4028],"source":" You cannot use the `Shared` keyword when declaring a member, and you cannot alter the shared status of any member."},{"content":"<bpt id=\"p1\">**</bpt>Inheritance.<ept id=\"p1\">**</ept>","pos":[4038,4054],"source":"**Inheritance.**"},{"content":"A module cannot inherit from any type other than <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph>, from which all modules inherit.","pos":[4055,4157],"source":" A module cannot inherit from any type other than <xref:System.Object>, from which all modules inherit."},{"content":"In particular, one module cannot inherit from another.","pos":[4158,4212]},{"pos":[4223,4399],"content":"You cannot use the <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept> in a module definition, even to specify <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph>.","source":"You cannot use the [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md) in a module definition, even to specify <xref:System.Object>."},{"content":"<bpt id=\"p1\">**</bpt>Default Property.<ept id=\"p1\">**</ept>","pos":[4409,4430],"source":"**Default Property.**"},{"content":"You cannot define any default properties in a module.","pos":[4431,4484]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Default<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/default.md)</ept>.","pos":[4485,4584],"source":" For more information, see [Default](../../../visual-basic/language-reference/modifiers/default.md)."},{"pos":[4593,4601],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Access Level.<ept id=\"p1\">**</ept>","pos":[4611,4628],"source":"**Access Level.**"},{"content":"Within a module, you can declare each member with its own access level.","pos":[4629,4700]},{"content":"Module members default to <bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept> access, except variables and constants, which default to <bpt id=\"p2\">[</bpt>Private<ept id=\"p2\">](../../../visual-basic/language-reference/modifiers/private.md)</ept> access.","pos":[4701,4935],"source":" Module members default to [Public](../../../visual-basic/language-reference/modifiers/public.md) access, except variables and constants, which default to [Private](../../../visual-basic/language-reference/modifiers/private.md) access."},{"content":"When a module has more restricted access than one of its members, the specified module access level takes precedence.","pos":[4936,5053]},{"content":"<bpt id=\"p1\">**</bpt>Scope.<ept id=\"p1\">**</ept>","pos":[5063,5073],"source":"**Scope.**"},{"content":"A module is in scope throughout its namespace.","pos":[5074,5120]},{"content":"The scope of every module member is the entire module.","pos":[5131,5185]},{"content":"Notice that all members undergo <bpt id=\"p1\">*</bpt>type promotion<ept id=\"p1\">*</ept>, which causes their scope to be promoted to the namespace containing the module.","pos":[5186,5315],"source":" Notice that all members undergo *type promotion*, which causes their scope to be promoted to the namespace containing the module."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Type Promotion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)</ept>.","pos":[5316,5454],"source":" For more information, see [Type Promotion](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)."},{"content":"<bpt id=\"p1\">**</bpt>Qualification.<ept id=\"p1\">**</ept>","pos":[5464,5482],"source":"**Qualification.**"},{"content":"You can have multiple modules in a project, and you can declare members with the same name in two or more modules.","pos":[5483,5597]},{"content":"However, you must qualify any reference to such a member with the appropriate module name if the reference is from outside that module.","pos":[5598,5733]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>References to Declared Elements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept>.","pos":[5734,5906],"source":" For more information, see [References to Declared Elements](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)."},{"pos":[5915,5922],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6054,6062],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6066,6155],"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>","source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)"},{"pos":[6158,6255],"content":"<bpt id=\"p1\">[</bpt>Namespace Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/namespace-statement.md)</ept>","source":"[Namespace Statement](../../../visual-basic/language-reference/statements/namespace-statement.md)"},{"pos":[6258,6355],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[6358,6455],"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept>","source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)"},{"pos":[6458,6553],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[6556,6667],"content":"<bpt id=\"p1\">[</bpt>Type Promotion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)</ept>","source":"[Type Promotion](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)"}]}