{"content":"---\ntitle: \"How to: Use a Thread Pool (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 90a0bb24-39f8-41f5-a217-b52a7d4fed0b\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Use a Thread Pool (Visual Basic)\n*Thread pooling* is a form of multithreading in which tasks are added to a queue and automatically started when threads are created. For more information, see [Thread Pooling (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md).  \n  \n The following example uses the .NET Framework thread pool to calculate the `Fibonacci` result for ten numbers between 20 and 40. Each `Fibonacci` result is represented by the `Fibonacci` class, which provides a method named `ThreadPoolCallback` that performs the calculation. An object that represents each `Fibonacci` value is created, and the `ThreadPoolCallback` method is passed to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>, which assigns an available thread in the pool to execute the method.  \n  \n Because each `Fibonacci` object is given a semi-random value to compute, and because each thread will be competing for processor time, you cannot know in advance how long it will take for all ten results to be calculated. That is why each `Fibonacci` object is passed an instance of the <xref:System.Threading.ManualResetEvent> class during construction. Each object signals the provided event object when its calculation is complete, which allows the primary thread to block execution with <xref:System.Threading.WaitHandle.WaitAll%2A> until all ten `Fibonacci` objects have calculated a result. The `Main` method then displays each `Fibonacci` result.  \n  \n## Example  \n  \n```vb  \nImports System.Threading  \n  \nModule Module1  \n  \n    Public Class Fibonacci  \n        Private _n As Integer  \n        Private _fibOfN  \n        Private _doneEvent As ManualResetEvent  \n  \n        Public ReadOnly Property N() As Integer  \n            Get  \n                Return _n  \n            End Get  \n        End Property  \n  \n        Public ReadOnly Property FibOfN() As Integer  \n            Get  \n                Return _fibOfN  \n            End Get  \n        End Property  \n  \n        Sub New(ByVal n As Integer, ByVal doneEvent As ManualResetEvent)  \n            _n = n  \n            _doneEvent = doneEvent  \n        End Sub  \n  \n        ' Wrapper method for use with the thread pool.  \n        Public Sub ThreadPoolCallBack(ByVal threadContext As Object)  \n            Dim threadIndex As Integer = CType(threadContext, Integer)  \n            Console.WriteLine(\"thread {0} started...\", threadIndex)  \n            _fibOfN = Calculate(_n)  \n            Console.WriteLine(\"thread {0} result calculated...\", threadIndex)  \n            _doneEvent.Set()  \n        End Sub  \n  \n        Public Function Calculate(ByVal n As Integer) As Integer  \n            If n <= 1 Then  \n                Return n  \n            End If  \n            Return Calculate(n - 1) + Calculate(n - 2)  \n        End Function  \n  \n    End Class  \n  \n    <MTAThread()>   \n    Sub Main()  \n        Const FibonacciCalculations As Integer = 9 ' 0 to 9  \n  \n        ' One event is used for each Fibonacci object  \n        Dim doneEvents(FibonacciCalculations) As ManualResetEvent  \n        Dim fibArray(FibonacciCalculations) As Fibonacci  \n        Dim r As New Random()  \n  \n        ' Configure and start threads using ThreadPool.  \n        Console.WriteLine(\"launching {0} tasks...\", FibonacciCalculations)  \n  \n        For i As Integer = 0 To FibonacciCalculations  \n            doneEvents(i) = New ManualResetEvent(False)  \n            Dim f = New Fibonacci(r.Next(20, 40), doneEvents(i))  \n            fibArray(i) = f  \n            ThreadPool.QueueUserWorkItem(AddressOf f.ThreadPoolCallBack, i)  \n        Next  \n  \n        ' Wait for all threads in pool to calculate.  \n        WaitHandle.WaitAll(doneEvents)  \n        Console.WriteLine(\"All calculations are complete.\")  \n  \n        ' Display the results.  \n        For i As Integer = 0 To FibonacciCalculations  \n            Dim f As Fibonacci = fibArray(i)  \n            Console.WriteLine(\"Fibonacci({0}) = {1}\", f.N, f.FibOfN)  \n        Next  \n    End Sub  \n  \nEnd Module  \n```  \n  \n Following is an example of the output.  \n  \n```  \nlaunching 10 tasks...  \nthread 0 started...  \nthread 1 started...  \nthread 1 result calculated...  \nthread 2 started...  \nthread 2 result calculated...  \nthread 3 started...  \nthread 3 result calculated...  \nthread 4 started...  \nthread 0 result calculated...  \nthread 5 started...  \nthread 5 result calculated...  \nthread 6 started...  \nthread 4 result calculated...  \nthread 7 started...  \nthread 6 result calculated...  \nthread 8 started...  \nthread 8 result calculated...  \nthread 9 started...  \nthread 9 result calculated...  \nthread 7 result calculated...  \nAll calculations are complete.  \nFibonacci(38) = 39088169  \nFibonacci(29) = 514229  \nFibonacci(25) = 75025  \nFibonacci(22) = 17711  \nFibonacci(38) = 39088169  \nFibonacci(29) = 514229  \nFibonacci(29) = 514229  \nFibonacci(38) = 39088169  \nFibonacci(21) = 10946  \nFibonacci(27) = 196418  \n```  \n  \n## See Also  \n <xref:System.Threading.Mutex>   \n <xref:System.Threading.WaitHandle.WaitAll%2A>   \n <xref:System.Threading.ManualResetEvent>   \n <xref:System.Threading.EventWaitHandle.Set%2A>   \n <xref:System.Threading.ThreadPool>   \n <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>   \n <xref:System.Threading.ManualResetEvent>   \n [Thread Pooling (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)   \n [Threading (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/index.md)   \n @System.Threading.Monitor   \n [Security](../../../../standard/security/index.md)","nodes":[{"pos":[12,69],"content":"How to: Use a Thread Pool (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Use a Thread Pool (Visual Basic) | Microsoft Docs","pos":[0,57]}]},{"pos":[450,490],"content":"How to: Use a Thread Pool (Visual Basic)","linkify":"How to: Use a Thread Pool (Visual Basic)","nodes":[{"content":"How to: Use a Thread Pool (Visual Basic)","pos":[0,40]}]},{"content":"<bpt id=\"p1\">*</bpt>Thread pooling<ept id=\"p1\">*</ept> is a form of multithreading in which tasks are added to a queue and automatically started when threads are created.","pos":[491,623],"source":"*Thread pooling* is a form of multithreading in which tasks are added to a queue and automatically started when threads are created."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Thread Pooling (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept>.","pos":[624,763],"source":" For more information, see [Thread Pooling (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)."},{"content":"The following example uses the .NET Framework thread pool to calculate the <ph id=\"ph1\">`Fibonacci`</ph> result for ten numbers between 20 and 40.","pos":[770,898],"source":"The following example uses the .NET Framework thread pool to calculate the `Fibonacci` result for ten numbers between 20 and 40."},{"content":"Each <ph id=\"ph1\">`Fibonacci`</ph> result is represented by the <ph id=\"ph2\">`Fibonacci`</ph> class, which provides a method named <ph id=\"ph3\">`ThreadPoolCallback`</ph> that performs the calculation.","pos":[899,1045],"source":" Each `Fibonacci` result is represented by the `Fibonacci` class, which provides a method named `ThreadPoolCallback` that performs the calculation."},{"content":"An object that represents each <ph id=\"ph1\">`Fibonacci`</ph> value is created, and the <ph id=\"ph2\">`ThreadPoolCallback`</ph> method is passed to <ph id=\"ph3\">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>, which assigns an available thread in the pool to execute the method.","pos":[1046,1281],"source":" An object that represents each `Fibonacci` value is created, and the `ThreadPoolCallback` method is passed to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>, which assigns an available thread in the pool to execute the method."},{"content":"Because each <ph id=\"ph1\">`Fibonacci`</ph> object is given a semi-random value to compute, and because each thread will be competing for processor time, you cannot know in advance how long it will take for all ten results to be calculated.","pos":[1288,1509],"source":"Because each `Fibonacci` object is given a semi-random value to compute, and because each thread will be competing for processor time, you cannot know in advance how long it will take for all ten results to be calculated."},{"content":"That is why each <ph id=\"ph1\">`Fibonacci`</ph> object is passed an instance of the <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class during construction.","pos":[1510,1642],"source":" That is why each `Fibonacci` object is passed an instance of the <xref:System.Threading.ManualResetEvent> class during construction."},{"content":"Each object signals the provided event object when its calculation is complete, which allows the primary thread to block execution with <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> until all ten <ph id=\"ph2\">`Fibonacci`</ph> objects have calculated a result.","pos":[1643,1884],"source":" Each object signals the provided event object when its calculation is complete, which allows the primary thread to block execution with <xref:System.Threading.WaitHandle.WaitAll%2A> until all ten `Fibonacci` objects have calculated a result."},{"content":"The <ph id=\"ph1\">`Main`</ph> method then displays each <ph id=\"ph2\">`Fibonacci`</ph> result.","pos":[1885,1941],"source":" The `Main` method then displays each `Fibonacci` result."},{"pos":[1950,1957],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Following is an example of the output.","pos":[4488,4526]},{"pos":[5400,5408],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Thread Pooling (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept><ph id=\"ph1\"> </ph>","pos":[5735,5849],"source":" [Thread Pooling (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Threading (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5852,5952],"source":" [Threading (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Security<ept id=\"p1\">](../../../../standard/security/index.md)</ept>","pos":[5985,6036],"source":" [Security](../../../../standard/security/index.md)"}]}