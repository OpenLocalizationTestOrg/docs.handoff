<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4bac0dccb1deb52d44bd254f2eea53cbbd41377</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\net-native\runtime-directives-rd-xml-configuration-file-reference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca3ddc4d5d9104c88fc8de09b7abd8af8149795b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df4c19178057c8befa659e320435cfc3867d2bf8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Runtime Directives (rd.xml) Configuration File Reference | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Runtime Directives (rd.xml) Configuration File Reference</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A runtime directives (.rd.xml) file is an XML configuration file that specifies whether designated program elements are available for reflection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Hereâ€™s an example of a runtime directives file:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The structure of a runtime directives file</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The runtime directives file uses the <ph id="ph1">`http://schemas.microsoft.com/netfx/2013/01/metadata`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The root element is the <bpt id="p1">[</bpt>Directives<ept id="p1">](../../../docs/framework/net-native/directives-element-net-native.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It can contain zero or more <bpt id="p1">[</bpt>Library<ept id="p1">](../../../docs/framework/net-native/library-element-net-native.md)</ept> elements, and zero or one <bpt id="p2">[</bpt>Application<ept id="p2">](../../../docs/framework/net-native/application-element-net-native.md)</ept> element, as shown in the following structure.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The attributes of the <bpt id="p1">[</bpt>Application<ept id="p1">](../../../docs/framework/net-native/application-element-net-native.md)</ept> element can define application-wide runtime reflection policy, or it can serve as a container for child elements.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Library<ept id="p1">](../../../docs/framework/net-native/library-element-net-native.md)</ept> element, on the other hand, is simply a container.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The children of the <bpt id="p1">[</bpt>Application<ept id="p1">](../../../docs/framework/net-native/application-element-net-native.md)</ept> and <bpt id="p2">[</bpt>Library<ept id="p2">](../../../docs/framework/net-native/library-element-net-native.md)</ept> elements define the types, methods, fields, properties, and events that are available for reflection.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For reference information, choose elements from the following structure or see <bpt id="p1">[</bpt>Runtime Directive Elements<ept id="p1">](../../../docs/framework/net-native/runtime-directive-elements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the following hierarchy, the ellipsis marks a recursive structure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The information in brackets indicates whether that element is optional or required, and if it is used, how many instances (one or many) are allowed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Directives<ept id="p1">](../../../docs/framework/net-native/directives-element-net-native.md)</ept> [1:1]</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Application<ept id="p1">](../../../docs/framework/net-native/application-element-net-native.md)</ept> [0:1]</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Assembly<ept id="p1">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Namespace<ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Namespace<ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Namespace<ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Subtypes<ept id="p1">](../../../docs/framework/net-native/subtypes-element-net-native.md)</ept> (subclasses of the containing type) [O:1]</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>AttributeImplies<ept id="p1">](../../../docs/framework/net-native/attributeimplies-element-net-native.md)</ept> (containing type is an attribute) [O:1]</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>GenericParameter<ept id="p1">](../../../docs/framework/net-native/genericparameter-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Method<ept id="p1">](../../../docs/framework/net-native/method-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameter<ept id="p1">](../../../docs/framework/net-native/parameter-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeParameter<ept id="p1">](../../../docs/framework/net-native/typeparameter-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>GenericParameter<ept id="p1">](../../../docs/framework/net-native/genericparameter-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MethodInstantiation<ept id="p1">](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)</ept> (constructed generic method) [0:M]</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property<ept id="p1">](../../../docs/framework/net-native/property-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Field<ept id="p1">](../../../docs/framework/net-native/field-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Event<ept id="p1">](../../../docs/framework/net-native/event-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Method<ept id="p1">](../../../docs/framework/net-native/method-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameter<ept id="p1">](../../../docs/framework/net-native/parameter-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeParameter<ept id="p1">](../../../docs/framework/net-native/typeparameter-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>GenericParameter<ept id="p1">](../../../docs/framework/net-native/genericparameter-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MethodInstantiation<ept id="p1">](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)</ept> (constructed generic method) [0:M]</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property<ept id="p1">](../../../docs/framework/net-native/property-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Field<ept id="p1">](../../../docs/framework/net-native/field-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Event<ept id="p1">](../../../docs/framework/net-native/event-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Library<ept id="p1">](../../../docs/framework/net-native/library-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Assembly<ept id="p1">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Namespace<ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Namespace<ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Namespace<ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Subtypes<ept id="p1">](../../../docs/framework/net-native/subtypes-element-net-native.md)</ept> (subclasses of the containing type) [O:1]</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>AttributeImplies<ept id="p1">](../../../docs/framework/net-native/attributeimplies-element-net-native.md)</ept> (containing type is an attribute) [O:1]</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>GenericParameter<ept id="p1">](../../../docs/framework/net-native/genericparameter-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Method<ept id="p1">](../../../docs/framework/net-native/method-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MethodInstantiation<ept id="p1">](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)</ept> (constructed generic method) [0:M]</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property<ept id="p1">](../../../docs/framework/net-native/property-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Field<ept id="p1">](../../../docs/framework/net-native/field-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Event<ept id="p1">](../../../docs/framework/net-native/event-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TypeInstantiation<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> (constructed generic type) [0:M]</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Method<ept id="p1">](../../../docs/framework/net-native/method-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MethodInstantiation<ept id="p1">](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)</ept> (constructed generic method) [0:M]</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property<ept id="p1">](../../../docs/framework/net-native/property-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Field<ept id="p1">](../../../docs/framework/net-native/field-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Event<ept id="p1">](../../../docs/framework/net-native/event-element-net-native.md)</ept> [0:M]</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Application<ept id="p1">](../../../docs/framework/net-native/application-element-net-native.md)</ept> element can have no attributes, or it can have the policy attributes discussed in the <bpt id="p2">[</bpt>Runtime directive and policy section<ept id="p2">](#Directives)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Library<ept id="p1">](../../../docs/framework/net-native/library-element-net-native.md)</ept> element has a single attribute, <ph id="ph1">`Name`</ph>, that specifies the name of a library or assembly, without its file extension.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For example, the following <bpt id="p1">[</bpt>Library<ept id="p1">](../../../docs/framework/net-native/library-element-net-native.md)</ept> element applies to an assembly named Extensions.dll.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Runtime directives and policy</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Application<ept id="p1">](../../../docs/framework/net-native/application-element-net-native.md)</ept> element itself and the child elements of the <bpt id="p2">[</bpt>Library<ept id="p2">](../../../docs/framework/net-native/library-element-net-native.md)</ept> and <bpt id="p3">[</bpt>Application<ept id="p3">](../../../docs/framework/net-native/application-element-net-native.md)</ept> elements express policy; that is, they define the way in which an app can apply reflection to a program element.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The policy type is defined by an attribute of the element (for example, <ph id="ph1">`Serialize`</ph>).</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The policy value is defined by the attributeâ€™s value (for example, <ph id="ph1">`Serialize="Required"`</ph>).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Any policy specified by an attribute of an element applies to all child elements that donâ€™t specify a value for that policy.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For example, if a policy is specified by a <bpt id="p1">[</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> element, that policy applies to all contained types and members for which a policy is not explicitly specified.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The policy that can be expressed by the <bpt id="p1">[</bpt>Application<ept id="p1">](../../../docs/framework/net-native/application-element-net-native.md)</ept>, <bpt id="p2">[</bpt>Assembly<ept id="p2">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept>, <bpt id="p3">[</bpt>AttributeImplies<ept id="p3">](../../../docs/framework/net-native/attributeimplies-element-net-native.md)</ept>, <bpt id="p4">[</bpt>Namespace<ept id="p4">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept>, <bpt id="p5">[</bpt>Subtypes<ept id="p5">](../../../docs/framework/net-native/subtypes-element-net-native.md)</ept>, and <bpt id="p6">[</bpt>Type<ept id="p6">](../../../docs/framework/net-native/type-element-net-native.md)</ept> elements differs from the policy that can be expressed for individual members (by the <bpt id="p7">[</bpt>Method<ept id="p7">](../../../docs/framework/net-native/method-element-net-native.md)</ept>, <bpt id="p8">[</bpt>Property<ept id="p8">](../../../docs/framework/net-native/property-element-net-native.md)</ept>, <bpt id="p9">[</bpt>Field<ept id="p9">](../../../docs/framework/net-native/field-element-net-native.md)</ept>, and <bpt id="p10">[</bpt>Event<ept id="p10">](../../../docs/framework/net-native/event-element-net-native.md)</ept> elements).</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Specifying policy for assemblies, namespaces, and types</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Application<ept id="p1">](../../../docs/framework/net-native/application-element-net-native.md)</ept>, <bpt id="p2">[</bpt>Assembly<ept id="p2">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept>, <bpt id="p3">[</bpt>AttributeImplies<ept id="p3">](../../../docs/framework/net-native/attributeimplies-element-net-native.md)</ept>, <bpt id="p4">[</bpt>Namespace<ept id="p4">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept>, <bpt id="p5">[</bpt>Subtypes<ept id="p5">](../../../docs/framework/net-native/subtypes-element-net-native.md)</ept>, and <bpt id="p6">[</bpt>Type<ept id="p6">](../../../docs/framework/net-native/type-element-net-native.md)</ept> elements support the following policy types:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Activate`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Controls runtime access to constructors, to enable activation of instances.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Browse`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Controls querying for information about program elements but does not enable any runtime access.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Controls runtime access to all type members, including constructors, methods, fields, properties, and events, to enable dynamic programming.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Serialize`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Controls runtime access to constructors, fields, and properties, to enable type instances to be serialized and serialized by third-party libraries such as the Newtonsoft JSON serializer.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Controls policy for serialization that uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractJsonSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Controls policy for JSON serialization that uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`XmlSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Controls policy for XML serialization that uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MarshalObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Controls policy for marshaling reference types to WinRT and COM.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MarshalDelegate`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Controls policy for marshaling delegate types as function pointers to native code.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MarshalStructure`</ph> .</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Controls policy for marshaling structures to native code.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The settings associated with these policy types are:</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`All`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Enable the policy for all types and members that the tool chain does not remove.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Auto`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Use the default behavior.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>(Not specifying a policy is equivalent to setting that policy to <ph id="ph1">`Auto`</ph> unless that policy is overridden, for example by a parent element.)</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Excluded`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Disable the policy for the program element.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Public`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Enable the policy for public types or members unless the tool chain determines that the member is unnecessary and therefore removes it.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>(In the latter case, you must use <ph id="ph1">`Required Public`</ph> to ensure that the member is kept and has reflection capabilities.)</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PublicAndInternal`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Enable the policy for public and internal types or members if the tool chain doesn't remove them.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Required Public`</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Require the tool chain to keep public types and members whether or not they are used, and enable the policy for them.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Required PublicAndInternal`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Require the tool chain to keep both public and internal types and members whether or not they are used, and enable the policy for them.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Required All`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Require the tool chain to keep all types and members whether or not they are used, and enable the policy for them.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>For example, the following runtime directives file defines policy for all types and members in the assembly DataClasses.dll.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>It enables reflection for serialization of all public properties, enables browsing for all types and type members, enables activation for all types (because of the <ph id="ph1">`Dynamic`</ph> attribute), and enables reflection for all public types and members.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Specifying policy for members</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Property<ept id="p1">](../../../docs/framework/net-native/property-element-net-native.md)</ept> and <bpt id="p2">[</bpt>Field<ept id="p2">](../../../docs/framework/net-native/field-element-net-native.md)</ept> elements support the following policy types:</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Browse`</ph> - Controls querying for information about this member but does not enable any runtime access.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dynamic`</ph> - Controls runtime access to all type members, including constructors, methods, fields, properties, and events, to enable dynamic programming.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Also controls querying for information about the containing type.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Serialize`</ph> - Controls runtime access to the member to enable type instances to be serialized and deserialized by libraries such as the Newtonsoft JSON serializer.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This policy can be applied to constructors, fields, and properties.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Method<ept id="p1">](../../../docs/framework/net-native/method-element-net-native.md)</ept> and <bpt id="p2">[</bpt>Event<ept id="p2">](../../../docs/framework/net-native/event-element-net-native.md)</ept> elements support the following policy types:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Browse`</ph> - Controls querying for information about this member but doesnâ€™t enable any runtime access.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dynamic`</ph> - Controls runtime access to all type members, including constructors, methods, fields, properties, and events, to enable dynamic programming.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Also controls querying for information about the containing type.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The settings associated with these policy types are:</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Auto`</ph> - Use the default behavior.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>(Not specifying a policy is equivalent to setting that policy to <ph id="ph1">`Auto`</ph> unless something overrides it.)</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Excluded`</ph> - Never include metadata for the member.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Included`</ph> - Enable the policy if the parent type is present in the output.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Required`</ph> - Require the tool chain to keep this member even if appears to be unused, and enable policy for it.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Runtime directives file semantics</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Policy can be defined simultaneously for both higher-level and lower-level elements.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>For example, policy can be defined for an assembly, and for some of the types contained in that assembly.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>If a particular lower-level element is not represented, it inherits the policy of its parent.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For example, if an <ph id="ph1">`Assembly`</ph> element is present but <ph id="ph2">`Type`</ph> elements are not, the policy specified in the <ph id="ph3">`Assembly`</ph> element applies to each type in the assembly.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Multiple elements can also apply policy to the same program element.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>For example, separate <bpt id="p1">[</bpt>Assembly<ept id="p1">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept> elements might define the same policy element for the same assembly differently.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The following sections explain how the policy for a particular type is resolved in those cases.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Type<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> or <bpt id="p2">[</bpt>Method<ept id="p2">](../../../docs/framework/net-native/method-element-net-native.md)</ept> element of a generic type or method applies its policy to all instantiations that do not have their own policy.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Type`</ph> element that specifies policy for <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> applies to all constructed instances of that generic type, unless it's overridden for a particular constructed generic type (such as a <ph id="ph3">`List&lt;Int32&gt;`</ph>) by a <ph id="ph4">`TypeInstantiation`</ph> element.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Otherwise, elements define policy for the program element named.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>When an element is ambiguous, the engine looks for matches, and if it finds an exact match, it will use it.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If it finds multiple matches, there will be a warning or error.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If two directives apply policy to the same program element</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>If two elements in different runtime directives files try to set the same policy type for the same program element (such as an assembly or type) to different values, the conflict is resolved as follows:</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Excluded`</ph> element is present, it has precedence.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Required`</ph> has precedence over not <ph id="ph2">`Required`</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`All`</ph> has precedence over <ph id="ph2">`PublicAndInternal`</ph>, which has precedence over <ph id="ph3">`Public`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Any explicit setting has precedence over <ph id="ph1">`Auto`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>For example, if a single project includes the following two runtime directives files, the serialization policy for DataClasses.dll is set to both <ph id="ph1">`Required Public`</ph> and <ph id="ph2">`All`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>In this case, the serialization policy would be resolved as <ph id="ph1">`Required All`</ph>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>However, if two directives in a single runtime directives file try to set the same policy type for the same program element, the XML Scheme Definition tool displays an error message.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If child and parent elements apply the same policy type</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Child elements override their parent elements, including the <ph id="ph1">`Excluded`</ph> setting.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Overriding is the main reason you would want to specify <ph id="ph1">`Auto`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>In the following example, the serialization policy setting for everything in <ph id="ph1">`DataClasses`</ph> thatâ€™s not in <ph id="ph2">`DataClasses.ViewModels`</ph> would be <ph id="ph3">`Required Public`</ph>, and everything that's in both <ph id="ph4">`DataClasses`</ph> and <ph id="ph5">`DataClasses.ViewModels`</ph> would be <ph id="ph6">`All`</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If open generics and instantiated elements apply the same policy type</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`Dictionary&lt;int,int&gt;`</ph> is assigned the <ph id="ph2">`Browse`</ph> policy only if the engine has another reason to give it the <ph id="ph3">`Browse`</ph> policy (which would otherwise be the default behavior); every other instantiation of <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> will have all of its members browsable.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>How policy is inferred</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Each policy type has a different set of rules that determine how the presence of that policy type affects other constructs.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The effect of Browse policy</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Browse`</ph> policy to a type involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The base type of the type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If the type is an instantiated generic, the uninstantiated version of the type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>If the type is a delegate, the <ph id="ph1">`Invoke`</ph> method on the type is marked with the <ph id="ph2">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Each interface of the type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The type of each attribute applied to the type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>If the type is generic, each constraint type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>If the type is generic, the types over which the type is instantiated are marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Browse`</ph> policy to a method involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Each parameter type of the method is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The return type of the method is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The containing type of the method is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>If the method is an instantiated generic method, the uninstantiated generic method is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The type of each attribute applied to the method is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>If the method is generic, each constraint type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>If the method is generic, the types over which the method is instantiated are marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Browse`</ph> policy to a field involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The type of each attribute applied to the field is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The type of the field is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The type to which the field belongs is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The effect of Dynamic policy</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Dynamic`</ph> policy to a type involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The base type of the type is marked with the <ph id="ph1">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>If the type is an instantiated generic, the uninstantiated version of the type is marked with the <ph id="ph1">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>If the type is a delegate type, the <ph id="ph1">`Invoke`</ph> method on the type is marked with the <ph id="ph2">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Each interface of the type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The type of each attribute applied to the type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>If the type is generic, each constraint type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>If the type is generic, the types over which the type is instantiated are marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Dynamic`</ph> policy to a method involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Each parameter type of the method is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The return type of the method is marked with the <ph id="ph1">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The containing type of the method is marked with the <ph id="ph1">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>If the method is an instantiated generic method, the uninstantiated generic method is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The type of each attribute applied to the method is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If the method is generic, each constraint type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>If the method is generic, the types over which the method is instantiated are marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The method can be invoked by <ph id="ph1">`MethodInfo.Invoke`</ph>, and delegate creation becomes possible by <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.CreateDelegate%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Dynamic`</ph> policy to a field involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The type of each attribute applied to the field is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The type of the field is marked with the <ph id="ph1">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The type to which the field belongs is marked with the <ph id="ph1">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The effect of Activation policy</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Applying the Activation policy to a type involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>If the type is an instantiated generic, the uninstantiated version of the type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>If the type is a delegate type, the <ph id="ph1">`Invoke`</ph> method on the type is marked with the <ph id="ph2">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Constructors of the type are marked with the <ph id="ph1">`Activation`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Activation`</ph> policy to a method involves the following policy change:</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The constructor can be invoked by the <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo.Invoke%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For methods, the <ph id="ph1">`Activation`</ph> policy affects constructors only.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Activation`</ph> policy to a field has no effect.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The effect of Serialize policy</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Serialize`</ph> policy enables the use of common reflection-based serializers.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>However, because the exact reflection access patterns of non-Microsoft serializers are not known to Microsoft, this policy may not be entirely effective.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Serialize`</ph> policy to a type involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The base type of the type is marked with the <ph id="ph1">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>If the type is an instantiated generic, the uninstantiated version of the type is marked with the <ph id="ph1">`Browse`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>If the type is a delegate type, the <ph id="ph1">`Invoke`</ph> method on the type is marked with the <ph id="ph2">`Dynamic`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>If the type is an enumeration, an array of the type is marked with the <ph id="ph1">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>If the type implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id="ph2">`T`</ph> is marked with the <ph id="ph3">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>If the type is <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph>, or <ph id="ph5">&lt;xref:System.Collections.Generic.IReadOnlyList%601&gt;</ph>, then <ph id="ph6">`T[]`</ph> and <ph id="ph7">&lt;xref:System.Collections.Generic.List%601&gt;</ph> marked with the <ph id="ph8">`Serialize`</ph> policy., but no members of the interface type are marked with the <ph id="ph9">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the type is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, no members of the type are marked with the <ph id="ph2">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If the type is <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is marked with the <ph id="ph3">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>but no members of the type are marked with the <ph id="ph1">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>If the type is <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, no members of the type are marked with the <ph id="ph2">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>If the type implements <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>, <ph id="ph2">`TKey`</ph> and <ph id="ph3">`TValue`</ph> are marked with the <ph id="ph4">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Each constructor, each property accessor, and each field is marked with the <ph id="ph1">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Serialize`</ph> policy to a method involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The containing type is marked with the <ph id="ph1">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The return type of the method is marked with the <ph id="ph1">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">`Serialize`</ph> policy to a field involves the following policy changes:</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The containing type is marked with the <ph id="ph1">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The type of the field is marked with the <ph id="ph1">`Serialize`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The effect of XmlSerializer, DataContractSerializer, and DataContractJsonSerialier policies</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Unlike the <ph id="ph1">`Serialize`</ph> policy, which is intended for reflection-based serializers, the <ph id="ph2">`XmlSerializer`</ph>, <ph id="ph3">`DataContractSerializer`</ph>, and <ph id="ph4">`DataContractJsonSerializer`</ph> policies are used to enable a set of serializers that are known to the <ph id="ph5">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tool chain.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>These serializers are not implemented by using reflection, but the set of types that can be serialized at run time is determined in a similar manner as types that are reflectable.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Applying one of these policies to a type enables the type to be serialized with the matching serializer.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Also, any types that the serialization engine can statically determine as needing serialization will also be serializable.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>These policies have no effect on methods or fields.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>For more information, see the "Differences in Serializers" section in <bpt id="p1">[</bpt>Migrating Your Windows Store App to .NET Native<ept id="p1">](../../../docs/framework/net-native/migrating-your-windows-store-app-to-net-native.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Directive Elements<ept id="p1">](../../../docs/framework/net-native/runtime-directive-elements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Reflection and .NET Native<ept id="p1">](../../../docs/framework/net-native/reflection-and-net-native.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>