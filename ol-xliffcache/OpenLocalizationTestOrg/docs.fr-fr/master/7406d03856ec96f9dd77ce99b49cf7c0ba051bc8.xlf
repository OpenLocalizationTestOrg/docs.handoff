<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7406d03856ec96f9dd77ce99b49cf7c0ba051bc8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\extending\extensible-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0d4c2eba072adab8e6062d4906c9f8d11383c6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">448e9886ee209a31ee576494fd7e9f14bb513a7e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Extensible Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Extensible Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The extensible object pattern is used to either extend existing runtime classes with new functionality or to add new state to an object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Extensions, attached to one of the extensible objects, enable behaviors at very different stages in processing to access shared state and functionality attached to a common extensible object that they can access.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The IExtensibleObject<ph id="ph1">\&lt;</ph>T&gt; Pattern</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are three interfaces in the extensible object pattern: <ph id="ph1">&lt;xref:System.ServiceModel.IExtensibleObject%601&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.IExtensionCollection%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.IExtensibleObject%601&gt;</ph> interface is implemented by types that allow <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> objects to customize their functionality.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Extensible objects allow dynamic aggregation of <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> objects are characterized by the following interface:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type restriction guarantees that extensions can only be defined for classes that are <ph id="ph1">&lt;xref:System.ServiceModel.IExtensibleObject%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601.Attach%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601.Detach%2A&gt;</ph> provide notification of aggregation or disaggregation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is valid for implementations to restrict when they may be added and removed from an owner.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, you can disallow removal entirely, disallowing adding or removing extensions when the owner or extension are in a certain state, disallow adding to multiple owners concurrently, or allow only a single addition followed by a single remove.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> does not imply any interactions with other standard managed interfaces.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Specifically, the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;</ph> method on the owner object does not normally detach its extensions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When an extension is added to the collection, <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601.Attach%2A&gt;</ph> is called before it goes into the collection.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When an extension is removed from the collection, <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601.Detach%2A&gt;</ph> is called after it is removed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This means (assuming appropriate synchronization) an extension can count on only being found in the collection while it is between <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601.Attach%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601.Detach%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The object passed to <ph id="ph1">&lt;xref:System.ServiceModel.IExtensionCollection%601.FindAll%60%601%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.IExtensionCollection%601.Find%60%601%2A&gt;</ph> need not be <ph id="ph3">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> (for example, you can pass any object), but the returned extension is an <ph id="ph4">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If no extension in the collection is an <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.IExtensionCollection%601.Find%60%601%2A&gt;</ph> returns null, and <ph id="ph3">&lt;xref:System.ServiceModel.IExtensionCollection%601.FindAll%60%601%2A&gt;</ph> returns an empty collection.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If multiple extensions implement <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.IExtensionCollection%601.Find%60%601%2A&gt;</ph> returns one of them.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The value returned from <ph id="ph1">&lt;xref:System.ServiceModel.IExtensionCollection%601.FindAll%60%601%2A&gt;</ph> is a snapshot.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There are two main scenarios.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first scenario uses the <ph id="ph1">&lt;xref:System.ServiceModel.IExtensibleObject%601.Extensions%2A&gt;</ph> property as a type-based dictionary to insert state on an object to enable another component to look it up using the type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second scenario uses the <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601.Attach%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601.Detach%2A&gt;</ph> properties to enable an object to participate in custom behavior, such as registering for events, watching state transitions, and so on.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.IExtensionCollection%601&gt;</ph> interface is a collection of the <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> objects that allow for retrieving the <ph id="ph3">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> by its type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.IExtensionCollection%601.Find%60%601%2A?displayProperty=fullName&gt;</ph> returns the most recently added object that is an <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> of that type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Extensible Objects in Windows Communication Foundation</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are four extensible objects in <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> – This is the base class for the service’s host.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Extensions of this class can be used to extend the behavior of the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> itself or to store the state for each service.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> – This class connects an instance of the service’s type with the service runtime.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It contains information about the instance as well as a reference to the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>'s containing <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Extensions of this class can be used to extend the behavior of the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> or to store the state for each service.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> – This class represents the operation information that the runtime gathers for each operation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This includes information such as the incoming message headers, the incoming message properties, the incoming security identity, and other information.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Extensions of this class can either extend the behavior of <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> or store the state for each operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.IContextChannel&gt;</ph> – This interface allows for the inspection of each state for the channels and proxies built by the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> runtime.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Extensions of this class can either extend the behavior of <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> or can use it to store the state for each channel.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code example shows the use of a simple extension to track <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>IInstanceContextInitializer#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/iinstancecontextinitializer/cs/initializer.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>