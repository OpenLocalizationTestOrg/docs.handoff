{"content":"---\ntitle: Test published output with dotnet vstest\ndescription: Learn how to run tests on published libraries, instead of on source code, with the dotnet vstest command.\nauthor: kendrahavens\nms.author: kehavens\nms.date: 10/18/2017\nms.custom: \"seodec18\"\n---\n# Test published output with dotnet vstest\n\nYou can run tests on already published output by using the `dotnet vstest` command. This will work on xUnit, MSTest, and NUnit tests. Simply locate the DLL file that was part of your published output and run:\n\n```\ndotnet vstest <MyPublishedTests>.dll\n```\n\nWhere `<MyPublishedTests>` is the name of your published test project.\n\n## Example\n\nThe commands below demonstrate running tests on a published DLL.\n\n```\ndotnet new mstest -o MyProject.Tests\ncd MyProject.Tests\ndotnet publish -o out\ndotnet vstest out/MyProject.Tests.dll\n```\n\n> [!NOTE]\n> Note: If your app is targeting a framework other than `netcoreapp` you can still run the `dotnet vstest` command by passing in the targeted framework with a framework flag. For example, `dotnet vstest <MyPublishedTests>.dll  --Framework:\".NETFramework,Version=v4.6\"`. In Visual Studio 2017 Update 5 the desired framework is automatically detected.\n\n## See also\n\n- [Unit Testing with dotnet test and xUnit](unit-testing-with-dotnet-test.md)\n- [Unit Testing with dotnet test and NUnit](unit-testing-with-nunit.md)\n- [Unit Testing with dotnet test and MSTest](unit-testing-with-mstest.md)\n","nodes":[{"pos":[4,253],"embed":true,"restype":"x-metadata","content":"title: Test published output with dotnet vstest\ndescription: Learn how to run tests on published libraries, instead of on source code, with the dotnet vstest command.\nauthor: kendrahavens\nms.author: kehavens\nms.date: 10/18/2017\nms.custom: \"seodec18\"","nodes":[{"content":"Test published output with dotnet vstest","nodes":[{"pos":[0,40],"content":"Test published output with dotnet vstest","nodes":[{"content":"Test published output with dotnet vstest","pos":[0,40]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to run tests on published libraries, instead of on source code, with the dotnet vstest command.","nodes":[{"pos":[0,105],"content":"Learn how to run tests on published libraries, instead of on source code, with the dotnet vstest command.","nodes":[{"content":"Learn how to run tests on published libraries, instead of on source code, with the dotnet vstest command.","pos":[0,105]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[260,300],"content":"Test published output with dotnet vstest","linkify":"Test published output with dotnet vstest","nodes":[{"content":"Test published output with dotnet vstest","pos":[0,40]}]},{"content":"You can run tests on already published output by using the <ph id=\"ph1\">`dotnet vstest`</ph> command.","pos":[302,385],"source":"You can run tests on already published output by using the `dotnet vstest` command."},{"content":"This will work on xUnit, MSTest, and NUnit tests.","pos":[386,435]},{"content":"Simply locate the DLL file that was part of your published output and run:","pos":[436,510]},{"pos":[558,628],"content":"Where <ph id=\"ph1\">`&lt;MyPublishedTests&gt;`</ph> is the name of your published test project.","source":"Where `<MyPublishedTests>` is the name of your published test project."},{"pos":[633,640],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The commands below demonstrate running tests on a published DLL.","pos":[642,706]},{"pos":[835,1192],"content":"[!NOTE]\nNote: If your app is targeting a framework other than `netcoreapp` you can still run the `dotnet vstest` command by passing in the targeted framework with a framework flag. For example, `dotnet vstest <MyPublishedTests>.dll  --Framework:\".NETFramework,Version=v4.6\"`. In Visual Studio 2017 Update 5 the desired framework is automatically detected.","leadings":["","> "],"nodes":[{"content":"Note: If your app is targeting a framework other than `netcoreapp` you can still run the `dotnet vstest` command by passing in the targeted framework with a framework flag. For example, `dotnet vstest <MyPublishedTests>.dll  --Framework:\".NETFramework,Version=v4.6\"`. In Visual Studio 2017 Update 5 the desired framework is automatically detected.","pos":[8,355],"nodes":[{"content":"Note: If your app is targeting a framework other than <ph id=\"ph1\">`netcoreapp`</ph> you can still run the <ph id=\"ph2\">`dotnet vstest`</ph> command by passing in the targeted framework with a framework flag.","pos":[0,172],"source":"Note: If your app is targeting a framework other than `netcoreapp` you can still run the `dotnet vstest` command by passing in the targeted framework with a framework flag."},{"content":"For example, <ph id=\"ph1\">`dotnet vstest &lt;MyPublishedTests&gt;.dll  --Framework:\".NETFramework,Version=v4.6\"`</ph>.","pos":[173,267],"source":" For example, `dotnet vstest <MyPublishedTests>.dll  --Framework:\".NETFramework,Version=v4.6\"`."},{"content":"In Visual Studio 2017 Update 5 the desired framework is automatically detected.","pos":[268,347]}]}]},{"pos":[1197,1205],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1209,1284],"content":"<bpt id=\"p1\">[</bpt>Unit Testing with dotnet test and xUnit<ept id=\"p1\">](unit-testing-with-dotnet-test.md)</ept>","source":"[Unit Testing with dotnet test and xUnit](unit-testing-with-dotnet-test.md)"},{"pos":[1287,1356],"content":"<bpt id=\"p1\">[</bpt>Unit Testing with dotnet test and NUnit<ept id=\"p1\">](unit-testing-with-nunit.md)</ept>","source":"[Unit Testing with dotnet test and NUnit](unit-testing-with-nunit.md)"},{"pos":[1359,1430],"content":"<bpt id=\"p1\">[</bpt>Unit Testing with dotnet test and MSTest<ept id=\"p1\">](unit-testing-with-mstest.md)</ept>","source":"[Unit Testing with dotnet test and MSTest](unit-testing-with-mstest.md)"}]}