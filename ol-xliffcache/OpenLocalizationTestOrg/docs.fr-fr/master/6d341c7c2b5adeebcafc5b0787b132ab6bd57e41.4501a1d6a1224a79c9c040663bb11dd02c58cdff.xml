{"content":"---\ntitle: \"Variance in Delegates (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 38e9353f-74f8-4211-a8f0-7a495414df4a\n---\n\n# Variance in Delegates (Visual Basic)\n\n.NET Framework 3.5 introduced variance support for matching method signatures with delegate types in all delegates in C# and Visual Basic. This means that you can assign to delegates not only methods that have matching signatures, but also methods that return more derived types (covariance) or that accept parameters that have less derived types (contravariance) than that specified by the delegate type. This includes both generic and non-generic delegates.\n\nFor example, consider the following code, which has two classes and two delegates: generic and non-generic.\n\n```vb\nPublic Class First\nEnd Class\n\nPublic Class Second\n    Inherits First\nEnd Class\n\nPublic Delegate Function SampleDelegate(ByVal a As Second) As First\nPublic Delegate Function SampleGenericDelegate(Of A, R)(ByVal a As A) As R\n```\n\nWhen you create delegates of the `SampleDelegate` or `SampleDelegate(Of A, R)` types, you can assign any one of the following methods to those delegates.\n\n```vb\n' Matching signature.\nPublic Shared Function ASecondRFirst(\n    ByVal second As Second) As First\n    Return New First()\nEnd Function\n\n' The return type is more derived.\nPublic Shared Function ASecondRSecond(\n    ByVal second As Second) As Second\n    Return New Second()\nEnd Function\n\n' The argument type is less derived.\nPublic Shared Function AFirstRFirst(\n    ByVal first As First) As First\n    Return New First()\nEnd Function\n\n' The return type is more derived\n' and the argument type is less derived.\nPublic Shared Function AFirstRSecond(\n    ByVal first As First) As Second\n    Return New Second()\nEnd Function\n```\n\nThe following code example illustrates the implicit conversion between the method signature and the delegate type.\n\n```vb\n' Assigning a method with a matching signature\n' to a non-generic delegate. No conversion is necessary.\nDim dNonGeneric As SampleDelegate = AddressOf ASecondRFirst\n' Assigning a method with a more derived return type\n' and less derived argument type to a non-generic delegate.\n' The implicit conversion is used.\nDim dNonGenericConversion As SampleDelegate = AddressOf AFirstRSecond\n\n' Assigning a method with a matching signature to a generic delegate.\n' No conversion is necessary.\nDim dGeneric As SampleGenericDelegate(Of Second, First) = AddressOf ASecondRFirst\n' Assigning a method with a more derived return type\n' and less derived argument type to a generic delegate.\n' The implicit conversion is used.\nDim dGenericConversion As SampleGenericDelegate(Of Second, First) = AddressOf AFirstRSecond\n```\n\nFor more examples, see [Using Variance in Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md) and [Using Variance for Func and Action Generic Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md).\n\n## Variance in Generic Type Parameters\n\nIn .NET Framework 4 and later you can enable implicit conversion between delegates, so that generic delegates that have different types specified by generic type parameters can be assigned to each other, if the types are inherited from each other as required by variance.\n\nTo enable implicit conversion, you must explicitly declare generic parameters in a delegate as covariant or contravariant by using the `in` or `out` keyword.\n\nThe following code example shows how you can create a delegate that has a covariant generic type parameter.\n\n```vb\n' Type T is declared covariant by using the out keyword.\nPublic Delegate Function SampleGenericDelegate(Of Out T)() As T\nSub Test()\n    Dim dString As SampleGenericDelegate(Of String) = Function() \" \"\n    ' You can assign delegates to each other,\n    ' because the type T is declared covariant.\n    Dim dObject As SampleGenericDelegate(Of Object) = dString\nEnd Sub\n```\n\nIf you use only variance support to match method signatures with delegate types and do not use the `in` and `out` keywords, you may find that sometimes you can instantiate delegates with identical lambda expressions or methods, but you cannot assign one delegate to another.\n\nIn the following code example, `SampleGenericDelegate(Of String)` can't be explicitly converted to `SampleGenericDelegate(Of Object)`, although `String` inherits `Object`. You can fix this problem by marking the generic parameter `T` with the `out` keyword.\n\n```vb\nPublic Delegate Function SampleGenericDelegate(Of T)() As T\nSub Test()\n    Dim dString As SampleGenericDelegate(Of String) = Function() \" \"\n\n    ' You can assign the dObject delegate\n    ' to the same lambda expression as dString delegate\n    ' because of the variance support for\n    ' matching method signatures with delegate types.\n    Dim dObject As SampleGenericDelegate(Of Object) = Function() \" \"\n\n    ' The following statement generates a compiler error\n    ' because the generic type T is not marked as covariant.\n    ' Dim dObject As SampleGenericDelegate(Of Object) = dString\n\nEnd Sub\n```\n\n### Generic Delegates That Have Variant Type Parameters in the .NET Framework\n\n.NET Framework 4 introduced variance support for generic type parameters in several existing generic delegates:\n\n- `Action` delegates from the <xref:System> namespace, for example, <xref:System.Action%601> and <xref:System.Action%602>\n\n- `Func` delegates from the <xref:System> namespace, for example, <xref:System.Func%601> and <xref:System.Func%602>\n\n- The <xref:System.Predicate%601> delegate\n\n- The <xref:System.Comparison%601> delegate\n\n- The <xref:System.Converter%602> delegate\n\nFor more information and examples, see [Using Variance for Func and Action Generic Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md).\n\n### Declaring Variant Type Parameters in Generic Delegates\n\nIf a generic delegate has covariant or contravariant generic type parameters, it can be referred to as a *variant generic delegate*.\n\nYou can declare a generic type parameter covariant in a generic delegate by using the `out` keyword. The covariant type can be used only as a method return type and not as a type of method arguments. The following code example shows how to declare a covariant generic delegate.\n\n```vb\nPublic Delegate Function DCovariant(Of Out R)() As R\n```\n\nYou can declare a generic type parameter contravariant in a generic delegate by using the `in` keyword. The contravariant type can be used only as a type of method arguments and not as a method return type. The following code example shows how to declare a contravariant generic delegate.\n\n```vb\nPublic Delegate Sub DContravariant(Of In A)(ByVal a As A)\n```\n\n> [!IMPORTANT]\n> `ByRef` parameters in Visual Basic can't be marked as variant.\n\nIt is also possible to support both variance and covariance in the same delegate, but for different type parameters. This is shown in the following example.\n\n```vb\nPublic Delegate Function DVariant(Of In A, Out R)(ByVal a As A) As R\n```\n\n### Instantiating and Invoking Variant Generic Delegates\n\nYou can instantiate and invoke variant delegates just as you instantiate and invoke invariant delegates. In the following example, the delegate is instantiated by a lambda expression.\n\n```vb\nDim dvariant As DVariant(Of String, String) = Function(str) str + \" \"\ndvariant(\"test\")\n```\n\n### Combining Variant Generic Delegates\n\nYou should not combine variant delegates. The <xref:System.Delegate.Combine%2A> method does not support variant delegate conversion and expects delegates to be of exactly the same type. This can lead to a run-time exception when you combine delegates either by using the <xref:System.Delegate.Combine%2A> method (in C# and Visual Basic) or by using the `+` operator (in C#), as shown in the following code example.\n\n```vb\nDim actObj As Action(Of Object) = Sub(x) Console.WriteLine(\"object: {0}\", x)\nDim actStr As Action(Of String) = Sub(x) Console.WriteLine(\"string: {0}\", x)\n\n' The following statement throws an exception at run time.\n' Dim actCombine = [Delegate].Combine(actStr, actObj)\n```\n\n## Variance in Generic Type Parameters for Value and Reference Types\n\nVariance for generic type parameters is supported for reference types only. For example, `DVariant(Of Int)`can't be implicitly converted to `DVariant(Of Object)` or `DVariant(Of Long)`, because integer is a value type.\n\nThe following example demonstrates that variance in generic type parameters is not supported for value types.\n\n```vb\n' The type T is covariant.\nPublic Delegate Function DVariant(Of Out T)() As T\n' The type T is invariant.\nPublic Delegate Function DInvariant(Of T)() As T\nSub Test()\n    Dim i As Integer = 0\n    Dim dInt As DInvariant(Of Integer) = Function() i\n    Dim dVariantInt As DVariant(Of Integer) = Function() i\n\n    ' All of the following statements generate a compiler error\n    ' because type variance in generic parameters is not supported\n    ' for value types, even if generic type parameters are declared variant.\n    ' Dim dObject As DInvariant(Of Object) = dInt\n    ' Dim dLong As DInvariant(Of Long) = dInt\n    ' Dim dVariantObject As DInvariant(Of Object) = dInt\n    ' Dim dVariantLong As DInvariant(Of Long) = dInt\nEnd Sub\n```\n\n## Relaxed Delegate Conversion in Visual Basic\n\nRelaxed delegate conversion enables more flexibility in matching method signatures with delegate types. For example, it lets you omit parameter specifications and omit function return values when you assign a method to a delegate. For more information, see [Relaxed Delegate Conversion](../../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md).\n\n## See also\n\n- [Generics](~/docs/standard/generics/index.md)\n- [Using Variance for Func and Action Generic Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)\n","nodes":[{"pos":[4,118],"embed":true,"restype":"x-metadata","content":"title: \"Variance in Delegates (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 38e9353f-74f8-4211-a8f0-7a495414df4a","nodes":[{"content":"Variance in Delegates (Visual Basic)","nodes":[{"pos":[0,36],"content":"Variance in Delegates (Visual Basic)","nodes":[{"content":"Variance in Delegates (Visual Basic)","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[126,162],"content":"Variance in Delegates (Visual Basic)","linkify":"Variance in Delegates (Visual Basic)","nodes":[{"content":"Variance in Delegates (Visual Basic)","pos":[0,36]}]},{"content":".NET Framework 3.5 introduced variance support for matching method signatures with delegate types in all delegates in C# and Visual Basic.","pos":[164,302]},{"content":"This means that you can assign to delegates not only methods that have matching signatures, but also methods that return more derived types (covariance) or that accept parameters that have less derived types (contravariance) than that specified by the delegate type.","pos":[303,569]},{"content":"This includes both generic and non-generic delegates.","pos":[570,623]},{"content":"For example, consider the following code, which has two classes and two delegates: generic and non-generic.","pos":[625,732]},{"pos":[968,1121],"content":"When you create delegates of the <ph id=\"ph1\">`SampleDelegate`</ph> or <ph id=\"ph2\">`SampleDelegate(Of A, R)`</ph> types, you can assign any one of the following methods to those delegates.","source":"When you create delegates of the `SampleDelegate` or `SampleDelegate(Of A, R)` types, you can assign any one of the following methods to those delegates."},{"content":"The following code example illustrates the implicit conversion between the method signature and the delegate type.","pos":[1750,1864]},{"pos":[2678,3065],"content":"For more examples, see <bpt id=\"p1\">[</bpt>Using Variance in Delegates (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md)</ept> and <bpt id=\"p2\">[</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id=\"p2\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.","source":"For more examples, see [Using Variance in Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md) and [Using Variance for Func and Action Generic Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)."},{"pos":[3070,3105],"content":"Variance in Generic Type Parameters","linkify":"Variance in Generic Type Parameters","nodes":[{"content":"Variance in Generic Type Parameters","pos":[0,35]}]},{"content":"In .NET Framework 4 and later you can enable implicit conversion between delegates, so that generic delegates that have different types specified by generic type parameters can be assigned to each other, if the types are inherited from each other as required by variance.","pos":[3107,3378]},{"pos":[3380,3537],"content":"To enable implicit conversion, you must explicitly declare generic parameters in a delegate as covariant or contravariant by using the <ph id=\"ph1\">`in`</ph> or <ph id=\"ph2\">`out`</ph> keyword.","source":"To enable implicit conversion, you must explicitly declare generic parameters in a delegate as covariant or contravariant by using the `in` or `out` keyword."},{"content":"The following code example shows how you can create a delegate that has a covariant generic type parameter.","pos":[3539,3646]},{"pos":[4024,4298],"content":"If you use only variance support to match method signatures with delegate types and do not use the <ph id=\"ph1\">`in`</ph> and <ph id=\"ph2\">`out`</ph> keywords, you may find that sometimes you can instantiate delegates with identical lambda expressions or methods, but you cannot assign one delegate to another.","source":"If you use only variance support to match method signatures with delegate types and do not use the `in` and `out` keywords, you may find that sometimes you can instantiate delegates with identical lambda expressions or methods, but you cannot assign one delegate to another."},{"content":"In the following code example, <ph id=\"ph1\">`SampleGenericDelegate(Of String)`</ph> can't be explicitly converted to <ph id=\"ph2\">`SampleGenericDelegate(Of Object)`</ph>, although <ph id=\"ph3\">`String`</ph> inherits <ph id=\"ph4\">`Object`</ph>.","pos":[4300,4471],"source":"In the following code example, `SampleGenericDelegate(Of String)` can't be explicitly converted to `SampleGenericDelegate(Of Object)`, although `String` inherits `Object`."},{"content":"You can fix this problem by marking the generic parameter <ph id=\"ph1\">`T`</ph> with the <ph id=\"ph2\">`out`</ph> keyword.","pos":[4472,4557],"source":" You can fix this problem by marking the generic parameter `T` with the `out` keyword."},{"pos":[5170,5243],"content":"Generic Delegates That Have Variant Type Parameters in the .NET Framework","linkify":"Generic Delegates That Have Variant Type Parameters in the .NET Framework","nodes":[{"content":"Generic Delegates That Have Variant Type Parameters in the .NET Framework","pos":[0,73]}]},{"content":".NET Framework 4 introduced variance support for generic type parameters in several existing generic delegates:","pos":[5245,5356]},{"pos":[5360,5479],"content":"<ph id=\"ph1\">`Action`</ph> delegates from the <ph id=\"ph2\">&lt;xref:System&gt;</ph> namespace, for example, <ph id=\"ph3\">&lt;xref:System.Action%601&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Action%602&gt;</ph>","source":"`Action` delegates from the <xref:System> namespace, for example, <xref:System.Action%601> and <xref:System.Action%602>"},{"pos":[5483,5596],"content":"<ph id=\"ph1\">`Func`</ph> delegates from the <ph id=\"ph2\">&lt;xref:System&gt;</ph> namespace, for example, <ph id=\"ph3\">&lt;xref:System.Func%601&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Func%602&gt;</ph>","source":"`Func` delegates from the <xref:System> namespace, for example, <xref:System.Func%601> and <xref:System.Func%602>"},{"pos":[5600,5640],"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> delegate","source":"The <xref:System.Predicate%601> delegate"},{"pos":[5644,5685],"content":"The <ph id=\"ph1\">&lt;xref:System.Comparison%601&gt;</ph> delegate","source":"The <xref:System.Comparison%601> delegate"},{"pos":[5689,5729],"content":"The <ph id=\"ph1\">&lt;xref:System.Converter%602&gt;</ph> delegate","source":"The <xref:System.Converter%602> delegate"},{"pos":[5731,5975],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.","source":"For more information and examples, see [Using Variance for Func and Action Generic Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)."},{"pos":[5981,6035],"content":"Declaring Variant Type Parameters in Generic Delegates","linkify":"Declaring Variant Type Parameters in Generic Delegates","nodes":[{"content":"Declaring Variant Type Parameters in Generic Delegates","pos":[0,54]}]},{"pos":[6037,6169],"content":"If a generic delegate has covariant or contravariant generic type parameters, it can be referred to as a <bpt id=\"p1\">*</bpt>variant generic delegate<ept id=\"p1\">*</ept>.","source":"If a generic delegate has covariant or contravariant generic type parameters, it can be referred to as a *variant generic delegate*."},{"content":"You can declare a generic type parameter covariant in a generic delegate by using the <ph id=\"ph1\">`out`</ph> keyword.","pos":[6171,6271],"source":"You can declare a generic type parameter covariant in a generic delegate by using the `out` keyword."},{"content":"The covariant type can be used only as a method return type and not as a type of method arguments.","pos":[6272,6370]},{"content":"The following code example shows how to declare a covariant generic delegate.","pos":[6371,6448]},{"content":"You can declare a generic type parameter contravariant in a generic delegate by using the <ph id=\"ph1\">`in`</ph> keyword.","pos":[6514,6617],"source":"You can declare a generic type parameter contravariant in a generic delegate by using the `in` keyword."},{"content":"The contravariant type can be used only as a type of method arguments and not as a method return type.","pos":[6618,6720]},{"content":"The following code example shows how to declare a contravariant generic delegate.","pos":[6721,6802]},{"pos":[6875,6952],"content":"[!IMPORTANT]\n`ByRef` parameters in Visual Basic can't be marked as variant.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">`ByRef`</ph> parameters in Visual Basic can't be marked as variant.","pos":[13,75],"source":"`ByRef` parameters in Visual Basic can't be marked as variant."}]},{"content":"It is also possible to support both variance and covariance in the same delegate, but for different type parameters.","pos":[6954,7070]},{"content":"This is shown in the following example.","pos":[7071,7110]},{"pos":[7196,7248],"content":"Instantiating and Invoking Variant Generic Delegates","linkify":"Instantiating and Invoking Variant Generic Delegates","nodes":[{"content":"Instantiating and Invoking Variant Generic Delegates","pos":[0,52]}]},{"content":"You can instantiate and invoke variant delegates just as you instantiate and invoke invariant delegates.","pos":[7250,7354]},{"content":"In the following example, the delegate is instantiated by a lambda expression.","pos":[7355,7433]},{"pos":[7537,7572],"content":"Combining Variant Generic Delegates","linkify":"Combining Variant Generic Delegates","nodes":[{"content":"Combining Variant Generic Delegates","pos":[0,35]}]},{"content":"You should not combine variant delegates.","pos":[7574,7615]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Delegate.Combine%2A&gt;</ph> method does not support variant delegate conversion and expects delegates to be of exactly the same type.","pos":[7616,7759],"source":" The <xref:System.Delegate.Combine%2A> method does not support variant delegate conversion and expects delegates to be of exactly the same type."},{"content":"This can lead to a run-time exception when you combine delegates either by using the <ph id=\"ph1\">&lt;xref:System.Delegate.Combine%2A&gt;</ph> method (in C# and Visual Basic) or by using the <ph id=\"ph2\">`+`</ph> operator (in C#), as shown in the following code example.","pos":[7760,7988],"source":" This can lead to a run-time exception when you combine delegates either by using the <xref:System.Delegate.Combine%2A> method (in C# and Visual Basic) or by using the `+` operator (in C#), as shown in the following code example."},{"pos":[8272,8337],"content":"Variance in Generic Type Parameters for Value and Reference Types","linkify":"Variance in Generic Type Parameters for Value and Reference Types","nodes":[{"content":"Variance in Generic Type Parameters for Value and Reference Types","pos":[0,65]}]},{"content":"Variance for generic type parameters is supported for reference types only.","pos":[8339,8414]},{"content":"For example, <ph id=\"ph1\">`DVariant(Of Int)`</ph>can't be implicitly converted to <ph id=\"ph2\">`DVariant(Of Object)`</ph> or <ph id=\"ph3\">`DVariant(Of Long)`</ph>, because integer is a value type.","pos":[8415,8557],"source":" For example, `DVariant(Of Int)`can't be implicitly converted to `DVariant(Of Object)` or `DVariant(Of Long)`, because integer is a value type."},{"content":"The following example demonstrates that variance in generic type parameters is not supported for value types.","pos":[8559,8668]},{"pos":[9410,9453],"content":"Relaxed Delegate Conversion in Visual Basic","linkify":"Relaxed Delegate Conversion in Visual Basic","nodes":[{"content":"Relaxed Delegate Conversion in Visual Basic","pos":[0,43]}]},{"content":"Relaxed delegate conversion enables more flexibility in matching method signatures with delegate types.","pos":[9455,9558]},{"content":"For example, it lets you omit parameter specifications and omit function return values when you assign a method to a delegate.","pos":[9559,9685]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Relaxed Delegate Conversion<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>.","pos":[9686,9845],"source":" For more information, see [Relaxed Delegate Conversion](../../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)."},{"pos":[9850,9858],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[9862,9907],"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](~/docs/standard/generics/index.md)</ept>","source":"[Generics](~/docs/standard/generics/index.md)"},{"pos":[9910,10114],"content":"<bpt id=\"p1\">[</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>","source":"[Using Variance for Func and Action Generic Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)"}]}