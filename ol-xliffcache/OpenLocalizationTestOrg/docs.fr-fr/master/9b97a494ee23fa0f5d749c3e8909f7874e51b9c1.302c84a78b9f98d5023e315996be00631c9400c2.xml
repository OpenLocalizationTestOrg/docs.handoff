{"content":"---\ntitle: \"Workflow Execution Properties | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: a50e088e-3a45-4267-bd51-1a3e6c2d246d\ncaps.latest.revision: 9\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Workflow Execution Properties\nThrough thread local storage (TLS), the CLR maintains an execution context for each thread. This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set in addition to user-defined thread properties like named slots.  \n  \n Unlike programs directly targeting the CLR, workflow programs are hierarchically scoped trees of activities that execute in a thread-agnostic environment. This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item. For example, two parallel branches of execution might use different transactions, yet the scheduler might interleave their execution on the same CLR thread.  \n  \n Workflow execution properties provide a mechanism to add context specific properties to an activity’s environment. This allows an activity to declare which properties are in scope for its sub-tree and also provides hooks for setting up and tearing down TLS to properly interoperate with CLR objects.  \n  \n## Creating and Using Workflow Execution Properties  \n Workflow execution properties usually implement the <xref:System.Activities.IExecutionProperty> interface, though properties focused on messaging may implement <xref:> System.ServiceModel.Activities.ISendMessageCallback?qualifyHint=False&autoUpgrade=True and <xref:> System.ServiceModel.Activities.IReceiveMessageCallback?qualifyHint=False&autoUpgrade=True instead. To create a workflow execution property, create a class that implements the <xref:System.Activities.IExecutionProperty> interface and implement the members <xref:System.Activities.IExecutionProperty.SetupWorkflowThread%2A> and <xref:System.Activities.IExecutionProperty.CleanupWorkflowThread%2A>. These members provide the execution property with an opportunity to properly set up and tear down the thread local storage during each pulse of work of the activity that contains the property, including any child activities. In this example, a `ConsoleColorProperty` is created that sets the `Console.ForegroundColor`.  \n  \n> [!NOTE]\n>  The following example code in this topic is based on the [Execution Properties](../../../docs/framework/windows-workflow-foundation/samples/execution-properties.md) sample.  \n  \n```csharp  \nclass ConsoleColorProperty : IExecutionProperty  \n{  \n    public const string Name = \"ConsoleColorProperty\";  \n  \n    ConsoleColor original;  \n    ConsoleColor color;  \n  \n    public ConsoleColorProperty(ConsoleColor color)  \n    {  \n        this.color = color;  \n    }  \n  \n    void IExecutionProperty.SetupWorkflowThread()  \n    {  \n        original = Console.ForegroundColor;  \n        Console.ForegroundColor = color;  \n    }  \n  \n    void IExecutionProperty.CleanupWorkflowThread()  \n    {  \n        Console.ForegroundColor = original;  \n    }  \n}  \n```  \n  \n Activity authors can use this property by registering it in the activity’s execute override. In this example, a `ConsoleColorScope` activity is defined that registers the `ConsoleColorProperty` by adding it to the <xref:System.Activities.NativeActivityContext.Properties%2A> collection of the current <xref:System.Activities.NativeActivityContext>.  \n  \n```csharp  \npublic sealed class ConsoleColorScope : NativeActivity  \n{  \n    public ConsoleColorScope()  \n        : base()  \n    {  \n    }  \n  \n    public ConsoleColor Color { get; set; }  \n    public Activity Body { get; set; }  \n  \n    protected override void Execute(NativeActivityContext context)  \n    {  \n        context.Properties.Add(ConsoleColorProperty.Name, new ConsoleColorProperty(this.Color));  \n  \n        if (this.Body != null)  \n        {  \n            context.ScheduleActivity(this.Body);  \n        }  \n    }  \n}  \n```  \n  \n When the activity’s body starts a pulse of work, the <xref:System.Activities.IExecutionProperty.SetupWorkflowThread%2A> method of the property is called, and when the pulse of work is complete, the <xref:System.Activities.IExecutionProperty.CleanupWorkflowThread%2A> is called. In this example, a workflow is created that uses a <xref:System.Activities.Statements.Parallel> activity with three branches. The first two branches use the `ConsoleColorScope` activity and the third branch does not. All three branches contain two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity. When the <xref:System.Activities.Statements.Parallel> activity executes, the activities that are contained in the branches execute in an interleaved manner, but as each child activity executes the correct console color is applied by the `ConsoleColorProperty`.  \n  \n```csharp  \nActivity wf = new Parallel  \n{  \n    Branches =   \n    {  \n        new ConsoleColorScope  \n        {  \n            Color = ConsoleColor.Blue,  \n            Body = new Sequence  \n            {  \n                Activities =   \n                {  \n                    new WriteLine  \n                    {  \n                        Text = \"Start blue text.\"  \n                    },  \n                    new Delay  \n                    {  \n                        Duration = TimeSpan.FromSeconds(1)  \n                    },  \n                    new WriteLine  \n                    {  \n                        Text = \"End blue text.\"  \n                    }  \n                }  \n            }  \n        },  \n        new ConsoleColorScope  \n        {  \n            Color = ConsoleColor.Red,  \n            Body = new Sequence  \n            {  \n                Activities =   \n                {  \n                    new WriteLine  \n                    {  \n                        Text = \"Start red text.\"  \n                    },  \n                    new Delay  \n                    {  \n                        Duration = TimeSpan.FromSeconds(1)  \n                    },  \n                    new WriteLine  \n                    {  \n                        Text = \"End red text.\"  \n                    }  \n                }  \n            }  \n        },  \n        new Sequence  \n        {  \n            Activities =   \n            {  \n                new WriteLine  \n                {  \n                    Text = \"Start default text.\"  \n                },  \n                new Delay  \n                {  \n                    Duration = TimeSpan.FromSeconds(1)  \n                },  \n                new WriteLine  \n                {  \n                    Text = \"End default text.\"  \n                }  \n            }  \n        }  \n    }  \n};  \n  \nWorkflowInvoker.Invoke(wf);  \n```  \n  \n When the workflow is invoked, the following output is written to the console window.  \n  \n```  \nStart blue text.  \nStart red text.  \nStart default text.  \nEnd blue text.  \nEnd red text.  \nEnd default text.  \n```  \n  \n> [!NOTE]\n>  Although it is not shown in the previous output, each line of text in the console window is displayed in the indicated color.  \n  \n Workflow execution properties can be used by custom activity authors, and they also provide the mechanism for handle management for activities such as the <xref:System.ServiceModel.Activities.CorrelationScope> and <xref:System.Activities.Statements.TransactionScope> activities.  \n  \n## See Also  \n <xref:System.Activities.IExecutionProperty>   \n <xref:System.Activities.IPropertyRegistrationCallback>   \n <xref:System.Activities.RegistrationContext>","nodes":[{"pos":[12,58],"content":"Workflow Execution Properties | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Workflow Execution Properties | Microsoft Docs","pos":[0,46]}]},{"pos":[323,352],"content":"Workflow Execution Properties","linkify":"Workflow Execution Properties","nodes":[{"content":"Workflow Execution Properties","pos":[0,29]}]},{"content":"Through thread local storage (TLS), the CLR maintains an execution context for each thread.","pos":[353,444]},{"content":"This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set in addition to user-defined thread properties like named slots.","pos":[445,653]},{"content":"Unlike programs directly targeting the CLR, workflow programs are hierarchically scoped trees of activities that execute in a thread-agnostic environment.","pos":[660,814]},{"content":"This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item.","pos":[815,945]},{"content":"For example, two parallel branches of execution might use different transactions, yet the scheduler might interleave their execution on the same CLR thread.","pos":[946,1102]},{"content":"Workflow execution properties provide a mechanism to add context specific properties to an activity’s environment.","pos":[1109,1223]},{"content":"This allows an activity to declare which properties are in scope for its sub-tree and also provides hooks for setting up and tearing down TLS to properly interoperate with CLR objects.","pos":[1224,1408]},{"pos":[1417,1465],"content":"Creating and Using Workflow Execution Properties","linkify":"Creating and Using Workflow Execution Properties","nodes":[{"content":"Creating and Using Workflow Execution Properties","pos":[0,48]}]},{"content":"Workflow execution properties usually implement the <ph id=\"ph1\">&lt;xref:System.Activities.IExecutionProperty&gt;</ph> interface, though properties focused on messaging may implement <ph id=\"ph2\">&lt;xref:&gt;</ph> System.ServiceModel.Activities.ISendMessageCallback?qualifyHint=False&amp;autoUpgrade=True and <ph id=\"ph3\">&lt;xref:&gt;</ph> System.ServiceModel.Activities.IReceiveMessageCallback?qualifyHint=False&amp;autoUpgrade=True instead.","pos":[1469,1834],"source":"Workflow execution properties usually implement the <xref:System.Activities.IExecutionProperty> interface, though properties focused on messaging may implement <xref:> System.ServiceModel.Activities.ISendMessageCallback?qualifyHint=False&autoUpgrade=True and <xref:> System.ServiceModel.Activities.IReceiveMessageCallback?qualifyHint=False&autoUpgrade=True instead."},{"content":"To create a workflow execution property, create a class that implements the <ph id=\"ph1\">&lt;xref:System.Activities.IExecutionProperty&gt;</ph> interface and implement the members <ph id=\"ph2\">&lt;xref:System.Activities.IExecutionProperty.SetupWorkflowThread%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Activities.IExecutionProperty.CleanupWorkflowThread%2A&gt;</ph>.","pos":[1835,2131],"source":" To create a workflow execution property, create a class that implements the <xref:System.Activities.IExecutionProperty> interface and implement the members <xref:System.Activities.IExecutionProperty.SetupWorkflowThread%2A> and <xref:System.Activities.IExecutionProperty.CleanupWorkflowThread%2A>."},{"content":"These members provide the execution property with an opportunity to properly set up and tear down the thread local storage during each pulse of work of the activity that contains the property, including any child activities.","pos":[2132,2356]},{"content":"In this example, a <ph id=\"ph1\">`ConsoleColorProperty`</ph> is created that sets the <ph id=\"ph2\">`Console.ForegroundColor`</ph>.","pos":[2357,2450],"source":" In this example, a `ConsoleColorProperty` is created that sets the `Console.ForegroundColor`."},{"pos":[2458,2641],"content":"[!NOTE]\n The following example code in this topic is based on the [Execution Properties](../../../docs/framework/windows-workflow-foundation/samples/execution-properties.md) sample.","leadings":["","> "],"nodes":[{"content":"The following example code in this topic is based on the <bpt id=\"p1\">[</bpt>Execution Properties<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/execution-properties.md)</ept> sample.","pos":[9,181],"source":" The following example code in this topic is based on the [Execution Properties](../../../docs/framework/windows-workflow-foundation/samples/execution-properties.md) sample."}]},{"content":"Activity authors can use this property by registering it in the activity’s execute override.","pos":[3224,3316]},{"content":"In this example, a <ph id=\"ph1\">`ConsoleColorScope`</ph> activity is defined that registers the <ph id=\"ph2\">`ConsoleColorProperty`</ph> by adding it to the <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivityContext.Properties%2A&gt;</ph> collection of the current <ph id=\"ph4\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph>.","pos":[3317,3572],"source":" In this example, a `ConsoleColorScope` activity is defined that registers the `ConsoleColorProperty` by adding it to the <xref:System.Activities.NativeActivityContext.Properties%2A> collection of the current <xref:System.Activities.NativeActivityContext>."},{"content":"When the activity’s body starts a pulse of work, the <ph id=\"ph1\">&lt;xref:System.Activities.IExecutionProperty.SetupWorkflowThread%2A&gt;</ph> method of the property is called, and when the pulse of work is complete, the <ph id=\"ph2\">&lt;xref:System.Activities.IExecutionProperty.CleanupWorkflowThread%2A&gt;</ph> is called.","pos":[4121,4398],"source":"When the activity’s body starts a pulse of work, the <xref:System.Activities.IExecutionProperty.SetupWorkflowThread%2A> method of the property is called, and when the pulse of work is complete, the <xref:System.Activities.IExecutionProperty.CleanupWorkflowThread%2A> is called."},{"content":"In this example, a workflow is created that uses a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Parallel&gt;</ph> activity with three branches.","pos":[4399,4524],"source":" In this example, a workflow is created that uses a <xref:System.Activities.Statements.Parallel> activity with three branches."},{"content":"The first two branches use the <ph id=\"ph1\">`ConsoleColorScope`</ph> activity and the third branch does not.","pos":[4525,4615],"source":" The first two branches use the `ConsoleColorScope` activity and the third branch does not."},{"content":"All three branches contain two <ph id=\"ph1\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity.","pos":[4616,4761],"source":" All three branches contain two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Parallel&gt;</ph> activity executes, the activities that are contained in the branches execute in an interleaved manner, but as each child activity executes the correct console color is applied by the <ph id=\"ph2\">`ConsoleColorProperty`</ph>.","pos":[4762,5022],"source":" When the <xref:System.Activities.Statements.Parallel> activity executes, the activities that are contained in the branches execute in an interleaved manner, but as each child activity executes the correct console color is applied by the `ConsoleColorProperty`."},{"content":"When the workflow is invoked, the following output is written to the console window.","pos":[6928,7012]},{"pos":[7147,7283],"content":"[!NOTE]\n Although it is not shown in the previous output, each line of text in the console window is displayed in the indicated color.","leadings":["","> "],"nodes":[{"content":"Although it is not shown in the previous output, each line of text in the console window is displayed in the indicated color.","pos":[9,134]}]},{"content":"Workflow execution properties can be used by custom activity authors, and they also provide the mechanism for handle management for activities such as the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.CorrelationScope&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activities.","pos":[7290,7568],"source":"Workflow execution properties can be used by custom activity authors, and they also provide the mechanism for handle management for activities such as the <xref:System.ServiceModel.Activities.CorrelationScope> and <xref:System.Activities.Statements.TransactionScope> activities."},{"pos":[7577,7585],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}