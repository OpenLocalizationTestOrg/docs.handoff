<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-creating-a-custom-dataflow-block-type.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">380bcb6d2a2846d09267eeb3a0d637469ce9fba5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\walkthrough-creating-a-custom-dataflow-block-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">110ab786a166833aa4f3583649c066d08c58d93b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">236528f0bcc2a22f572fb4981a2b91de3167646c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Creating a Custom Dataflow Block Type</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Custom Dataflow Block Type</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Although the TPL Dataflow Library provides several dataflow block types that enable a variety of functionality, you can also create custom block types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This document describes how to create a dataflow block type that implements custom behavior.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept> before you read this document.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Defining the Sliding Window Dataflow Block</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Consider a dataflow application that requires that input values be buffered and then output in a sliding window manner.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, for the input values {0, 1, 2, 3, 4, 5} and a window size of three, a sliding window dataflow block produces the output arrays {0, 1, 2}, {1, 2, 3}, {2, 3, 4}, and {3, 4, 5}.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following sections describe two ways to create a dataflow block type that implements this custom behavior.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first technique uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A&gt;</ph> method to combine the functionality of an <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> object and an <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> object into one propagator block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The second technique defines a class that derives from <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602&gt;</ph> and combines existing functionality to perform custom behavior.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using the Encapsulate Method to Define the Sliding Window Dataflow Block</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A&gt;</ph> method to create a propagator block from a target and a source.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A propagator block enables a source block and a target block to act as a receiver and sender of data.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This technique is useful when you require custom dataflow functionality, but you do not require a type that provides additional methods, properties, or fields.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`SlidingWindowBlock`</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This class derives from <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602&gt;</ph> so that it can act as both a source and a target of data.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As in the previous example, the <ph id="ph1">`SlidingWindowBlock`</ph> class is built on existing dataflow block types.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`SlidingWindowBlock`</ph> class also implements the methods that are required by the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.IDataflowBlock&gt;</ph> interfaces.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These methods all forward work to the predefined dataflow block type members.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`Post`</ph> method defers work to the <ph id="ph2">`m_target`</ph> data member, which is also an <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This technique is useful when you require custom dataflow functionality, and also require a type that provides additional methods, properties, or fields.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`SlidingWindowBlock`</ph> class also derives from <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601&gt;</ph> so that it can provide the <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceiveAll%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SlidingWindowBlock`</ph> class also demonstrates extensibility by providing the <ph id="ph2">`WindowSize`</ph> property, which retrieves the number of elements in the sliding window.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The Complete Example</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example shows the complete code for this walkthrough.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It also demonstrates how to use the both sliding window blocks in a method that writes to the block, reads from it, and prints the results to the console.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`SlidingWindowBlock.cs`</ph> (<ph id="ph2">`SlidingWindowBlock.vb`</ph> for Visual Basic) and then run the following command in a Developer Command Prompt for Visual Studio window.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Visual C#</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.cs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Visual Basic</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.vb<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>