<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7eddd2f39a1443a47f298f4c6421455f98dbfd73</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\sizeof.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43cb47927dd1ad002146557653f868de1093a119</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">baf53bd57d7aeb0de337366975efe09a6b9cc322</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>sizeof (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>sizeof (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Used to obtain the size in bytes for an unmanaged type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unmanaged types include the built-in types that are listed in the table that follows, and also the following:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Enum types</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Pointer types</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>User-defined structs that do not contain any fields or properties that are reference types</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows how to retrieve the size of an <ph id="ph1">`int`</ph>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Starting with version 2.0 of C#, applying <ph id="ph1">`sizeof`</ph> to built-in types no longer requires that <bpt id="p1">[</bpt>unsafe<ept id="p1">](../../../csharp/language-reference/keywords/unsafe.md)</ept> mode be used.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`sizeof`</ph> operator cannot be overloaded.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The values returned by the <ph id="ph1">`sizeof`</ph> operator are of type <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table shows the constant values that are substituted for <ph id="ph1">`sizeof`</ph> expressions that have certain built-in types as operands.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constant value</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>2 (Unicode)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>16</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For all other types, including structs, the <ph id="ph1">`sizeof`</ph> operator can be used only in unsafe code blocks.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Although you can use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName&gt;</ph> method, the value returned by this method is not always the same as the value returned by <ph id="ph2">`sizeof`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName&gt;</ph> returns the size after the type has been marshaled, whereas <ph id="ph2">`sizeof`</ph> returns the size as it has been allocated by the common language runtime, including any padding.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsOperator#11<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/sizeof_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Keywords<ept id="p1">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>enum<ept id="p1">](../../../csharp/language-reference/keywords/enum.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Unsafe Code and Pointers<ept id="p1">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/structs.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Constants<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/constants.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>