{"content":"---\ntitle: \"Structures and Other Programming Elements (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"structures [Visual Basic], arrays\"\n  - \"procedures [Visual Basic], structures as arguments to\"\n  - \"objects [Visual Basic], structure elements\"\n  - \"arrays [Visual Basic], structure elements\"\n  - \"nested structures [Visual Basic]\"\nms.assetid: 0f849313-ccd2-4c9a-acb9-69de6751c088\n---\n# Structures and Other Programming Elements (Visual Basic)\nYou can use structures in conjunction with arrays, objects, and procedures, as well as with each other. The interactions use the same syntax as these elements use individually.  \n  \n> [!NOTE]\n>  You cannot initialize any of the structure elements in the structure declaration. You can assign values only to elements of a variable that has been declared to be of a structure type.  \n  \n## Structures and Arrays  \n A structure can contain an array as one or more of its elements. The following example illustrates this.  \n  \n```vb  \nPublic Structure systemInfo  \n    Public cPU As String  \n    Public memory As Long  \n    Public diskDrives() As String  \n    Public purchaseDate As Date  \nEnd Structure   \n```  \n  \n You access the values of an array within a structure the same way you access a property on an object. The following example illustrates this.  \n  \n```vb  \nDim mySystem As systemInfo  \nReDim mySystem.diskDrives(3)  \nmySystem.diskDrives(0) = \"1.44 MB\"  \n```  \n  \n You can also declare an array of structures. The following example illustrates this.  \n  \n```vb  \nDim allSystems(100) As systemInfo  \n```  \n  \n You follow the same rules to access the components of this data architecture. The following example illustrates this.  \n  \n```vb  \nReDim allSystems(5).diskDrives(3)  \nallSystems(5).CPU = \"386SX\"  \nallSystems(5).diskDrives(2) = \"100M SCSI\"  \n```  \n  \n## Structures and Objects  \n A structure can contain an object as one or more of its elements. The following example illustrates this.  \n  \n```vb  \nProtected Structure userInput  \n    Public userName As String  \n    Public inputForm As System.Windows.Forms.Form  \n    Public userFileNumber As Integer  \nEnd Structure  \n```  \n  \n You should use a specific object class in such a declaration, rather than `Object`.  \n  \n## Structures and Procedures  \n You can pass a structure as a procedure argument. The following example illustrates this.  \n  \n```vb  \nPublic currentCPUName As String = \"700MHz Pentium compatible\"  \nPublic currentMemorySize As Long = 256  \nPublic Sub fillSystem(ByRef someSystem As systemInfo)  \n    someSystem.cPU = currentCPUName  \n    someSystem.memory = currentMemorySize  \n    someSystem.purchaseDate = Now  \nEnd Sub  \n```  \n  \n The preceding example passes the structure *by reference*, which allows the procedure to modify its elements so that the changes take effect in the calling code. If you want to protect a structure against such modification, pass it by value.  \n  \n You can also return a structure from a `Function` procedure. The following example illustrates this.  \n  \n```vb  \nDim allSystems(100) As systemInfo  \nFunction findByDate(ByVal searchDate As Date) As systemInfo  \n    Dim i As Integer  \n    For i = 1 To 100  \n        If allSystems(i).purchaseDate = searchDate Then Return allSystems(i)  \n    Next i  \n   ' Process error: system with desired purchase date not found.  \nEnd Function  \n```  \n  \n## Structures Within Structures  \n Structures can contain other structures. The following example illustrates this.  \n  \n```vb  \nPublic Structure driveInfo  \n    Public type As String  \n    Public size As Long  \nEnd Structure  \nPublic Structure systemInfo  \n    Public cPU As String  \n    Public memory As Long  \n    Public diskDrives() As driveInfo  \n    Public purchaseDate As Date  \nEnd Structure  \n```  \n  \n```vb  \nDim allSystems(100) As systemInfo  \nReDim allSystems(1).diskDrives(3)  \nallSystems(1).diskDrives(0).type = \"Floppy\"  \n```  \n  \n You can also use this technique to encapsulate a structure defined in one module within a structure defined in a different module.  \n  \n Structures can contain other structures to an arbitrary depth.  \n  \n## See also\n\n- [Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)\n- [Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)\n- [Composite Data Types](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)\n- [Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)\n- [Structures](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)\n- [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)\n- [How to: Declare a Structure](../../../../visual-basic/programming-guide/language-features/data-types/how-to-declare-a-structure.md)\n- [Structure Variables](../../../../visual-basic/programming-guide/language-features/data-types/structure-variables.md)\n- [Structures and Classes](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)\n- [Structure Statement](../../../../visual-basic/language-reference/statements/structure-statement.md)\n","nodes":[{"pos":[4,396],"embed":true,"restype":"x-metadata","content":"title: \"Structures and Other Programming Elements (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"structures [Visual Basic], arrays\"\n  - \"procedures [Visual Basic], structures as arguments to\"\n  - \"objects [Visual Basic], structure elements\"\n  - \"arrays [Visual Basic], structure elements\"\n  - \"nested structures [Visual Basic]\"\nms.assetid: 0f849313-ccd2-4c9a-acb9-69de6751c088","nodes":[{"content":"Structures and Other Programming Elements (Visual Basic)","nodes":[{"pos":[0,56],"content":"Structures and Other Programming Elements (Visual Basic)","nodes":[{"content":"Structures and Other Programming Elements (Visual Basic)","pos":[0,56]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[403,459],"content":"Structures and Other Programming Elements (Visual Basic)","linkify":"Structures and Other Programming Elements (Visual Basic)","nodes":[{"content":"Structures and Other Programming Elements (Visual Basic)","pos":[0,56]}]},{"content":"You can use structures in conjunction with arrays, objects, and procedures, as well as with each other.","pos":[460,563]},{"content":"The interactions use the same syntax as these elements use individually.","pos":[564,636]},{"pos":[644,839],"content":"[!NOTE]\n You cannot initialize any of the structure elements in the structure declaration. You can assign values only to elements of a variable that has been declared to be of a structure type.","leadings":["","> "],"nodes":[{"content":"You cannot initialize any of the structure elements in the structure declaration. You can assign values only to elements of a variable that has been declared to be of a structure type.","pos":[9,193],"nodes":[{"content":"You cannot initialize any of the structure elements in the structure declaration.","pos":[0,81]},{"content":"You can assign values only to elements of a variable that has been declared to be of a structure type.","pos":[82,184]}]}]},{"pos":[848,869],"content":"Structures and Arrays","linkify":"Structures and Arrays","nodes":[{"content":"Structures and Arrays","pos":[0,21]}]},{"content":"A structure can contain an array as one or more of its elements.","pos":[873,937]},{"content":"The following example illustrates this.","pos":[938,977]},{"content":"You access the values of an array within a structure the same way you access a property on an object.","pos":[1173,1274]},{"content":"The following example illustrates this.","pos":[1275,1314]},{"content":"You can also declare an array of structures.","pos":[1435,1479]},{"content":"The following example illustrates this.","pos":[1480,1519]},{"content":"You follow the same rules to access the components of this data architecture.","pos":[1579,1656]},{"content":"The following example illustrates this.","pos":[1657,1696]},{"pos":[1832,1854],"content":"Structures and Objects","linkify":"Structures and Objects","nodes":[{"content":"Structures and Objects","pos":[0,22]}]},{"content":"A structure can contain an object as one or more of its elements.","pos":[1858,1923]},{"content":"The following example illustrates this.","pos":[1924,1963]},{"pos":[2158,2241],"content":"You should use a specific object class in such a declaration, rather than <ph id=\"ph1\">`Object`</ph>.","source":"You should use a specific object class in such a declaration, rather than `Object`."},{"pos":[2250,2275],"content":"Structures and Procedures","linkify":"Structures and Procedures","nodes":[{"content":"Structures and Procedures","pos":[0,25]}]},{"content":"You can pass a structure as a procedure argument.","pos":[2279,2328]},{"content":"The following example illustrates this.","pos":[2329,2368]},{"content":"The preceding example passes the structure <bpt id=\"p1\">*</bpt>by reference<ept id=\"p1\">*</ept>, which allows the procedure to modify its elements so that the changes take effect in the calling code.","pos":[2681,2842],"source":"The preceding example passes the structure *by reference*, which allows the procedure to modify its elements so that the changes take effect in the calling code."},{"content":"If you want to protect a structure against such modification, pass it by value.","pos":[2843,2922]},{"content":"You can also return a structure from a <ph id=\"ph1\">`Function`</ph> procedure.","pos":[2929,2989],"source":"You can also return a structure from a `Function` procedure."},{"content":"The following example illustrates this.","pos":[2990,3029]},{"pos":[3373,3401],"content":"Structures Within Structures","linkify":"Structures Within Structures","nodes":[{"content":"Structures Within Structures","pos":[0,28]}]},{"content":"Structures can contain other structures.","pos":[3405,3445]},{"content":"The following example illustrates this.","pos":[3446,3485]},{"content":"You can also use this technique to encapsulate a structure defined in one module within a structure defined in a different module.","pos":[3917,4047]},{"content":"Structures can contain other structures to an arbitrary depth.","pos":[4054,4116]},{"pos":[4125,4133],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4137,4231],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept>","source":"[Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)"},{"pos":[4234,4355],"content":"<bpt id=\"p1\">[</bpt>Elementary Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept>","source":"[Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)"},{"pos":[4358,4477],"content":"<bpt id=\"p1\">[</bpt>Composite Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept>","source":"[Composite Data Types](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)"},{"pos":[4480,4621],"content":"<bpt id=\"p1\">[</bpt>Value Types and Reference Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>","source":"[Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)"},{"pos":[4624,4723],"content":"<bpt id=\"p1\">[</bpt>Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept>","source":"[Structures](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)"},{"pos":[4726,4857],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","source":"[Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"},{"pos":[4860,4992],"content":"<bpt id=\"p1\">[</bpt>How to: Declare a Structure<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-declare-a-structure.md)</ept>","source":"[How to: Declare a Structure](../../../../visual-basic/programming-guide/language-features/data-types/how-to-declare-a-structure.md)"},{"pos":[4995,5112],"content":"<bpt id=\"p1\">[</bpt>Structure Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/structure-variables.md)</ept>","source":"[Structure Variables](../../../../visual-basic/programming-guide/language-features/data-types/structure-variables.md)"},{"pos":[5115,5238],"content":"<bpt id=\"p1\">[</bpt>Structures and Classes<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)</ept>","source":"[Structures and Classes](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)"},{"pos":[5241,5341],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../../visual-basic/language-reference/statements/structure-statement.md)"}]}