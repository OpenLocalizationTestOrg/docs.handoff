{"content":"---\ntitle: \"ICLRProfiling::AttachProfiler Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"IClrProfiling.AttachProfiler Method\"\napi_location: \n  - \"Mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IClrProfiling::AttachProfiler\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"AttachProfiler method [.NET Framework profiling]\"\n  - \"IClrProfiling::AttachProfiler method [.NET Framework profiling]\"\nms.assetid: 535a6839-c443-405b-a6f4-e2af90725d5b\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 15\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ICLRProfiling::AttachProfiler Method\nAttaches the specified profiler to the specified process.  \n  \n## Syntax  \n  \n```  \nHRESULT AttachProfiler(  \n  [in] DWORD dwProfileeProcessID,  \n  [in] DWORD dwMillisecondsMax,                     // optional  \n  [in] const CLSID * pClsidProfiler,  \n  [in] LPCWSTR wszProfilerPath,                     // optional  \n  [in] size_is(cbClientData)] void * pvClientData,  // optional  \n  [in] UINT cbClientData);                          // optional  \n```  \n  \n#### Parameters  \n `dwProfileeProcessID`  \n [in] The process ID of the process to which the profiler should be attached. On a 64-bit machine, the profiled process's bitness must match the bitness of the trigger process that is calling `AttachProfiler`. If the user account under which `AttachProfiler` is called has administrative privileges, the target process may be any process on the system. Otherwise, the target process must be owned by the same user account.  \n  \n `dwMillisecondsMax`  \n [in] The time duration, in milliseconds, for `AttachProfiler` to complete. The trigger process should pass a timeout that is known to be sufficient for the particular profiler to complete its initialization.  \n  \n `pClsidProfiler`  \n [in] A pointer to the CLSID of the profiler to be loaded. The trigger process can reuse this memory after `AttachProfiler` returns.  \n  \n `wszProfilerPath`  \n [in] The full path to the profiler’s DLL file to be loaded. This string should contain no more than 260 characters, including the null terminator. If `wszProfilerPath` is null or an empty string, the common language runtime (CLR) will try to find the location of the profiler’s DLL file by looking in the registry for the CLSID that `pClsidProfiler` points to.  \n  \n `pvClientData`  \n [in] A pointer to data to be passed to the profiler by the [ICorProfilerCallback3::InitializeForAttach](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-initializeforattach-method.md) method. The trigger process can reuse this memory after `AttachProfiler` returns. If `pvClientData` is null, `cbClientData` must be 0 (zero).  \n  \n `cbClientData`  \n [in] The size, in bytes, of the data that `pvClientData` points to.  \n  \n## Return Value  \n This method returns the following HRESULTs.  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|S_OK|The specified profiler has successfully attached to the target process.|  \n|CORPROF_E_PROFILER_ALREADY_ACTIVE|There is already a profiler active or attaching to the target process.|  \n|CORPROF_E_PROFILER_NOT_ATTACHABLE|The specified profiler does not support attachment. The trigger process may attempt to attach a different profiler.|  \n|CORPROF_E_PROFILEE_INCOMPATIBLE_WITH_TRIGGER|Unable to request a profiler attachment, because the version of the target process is incompatible with the current process that is calling `AttachProfiler`.|  \n|HRESULT_FROM_WIN32(ERROR_ACCESS_DENIED)|The user of the trigger process does not have access to the target process.|  \n|HRESULT_FROM_WIN32(ERROR_PRIVILEGE_NOT_HELD)|The user of the trigger process does not have the privileges necessary to attach a profiler to the given target process. The application event log may contain more information.|  \n|CORPROF_E_IPC_FAILED|A failure occurred when communicating with the target process. This commonly happens if the target process was shutting down.|  \n|HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND)|The target process does not exist or is not running a CLR that supports attachment. This may indicate that the CLR was unloaded since the call to the runtime enumeration method.|  \n|HRESULT_FROM_WIN32(ERROR_TIMEOUT)|The timeout expired without beginning to load the profiler. You can retry the attach operation. Timeouts occur when a finalizer in the target process runs for a longer time than the timeout value.|  \n|E_INVALIDARG|One or more parameters have invalid values.|  \n|E_FAIL|Some other, unspecified failure occurred.|  \n|Other error codes|If the profiler’s [ICorProfilerCallback3::InitializeForAttach](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-initializeforattach-method.md) method returns an HRESULT that indicates failure, `AttachProfiler` returns that same HRESULT. In this case, E_NOTIMPL is converted to CORPROF_E_PROFILER_NOT_ATTACHABLE.|  \n  \n## Remarks  \n  \n## Memory Management  \n In keeping with COM conventions, the caller of `AttachProfiler` (for example, the trigger code authored by the profiler developer) is responsible for allocating and de-allocating the memory for the data that the `pvClientData` parameter points to. When the CLR executes the `AttachProfiler` call, it makes a copy of the memory that `pvClientData` points to and transmits it to the target process. When the CLR inside the target process receives its own copy of the `pvClientData` block, it passes the block to the profiler through the `InitializeForAttach` method, and then deallocates its copy of the `pvClientData` block from the target process.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v40plus](../../../../includes/net-current-v40plus-md.md)]  \n  \n## See Also  \n [ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)   \n [ICorProfilerInfo3 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo3-interface.md)   \n [Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)   \n [Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)","nodes":[{"pos":[4,714],"embed":true,"restype":"x-metadata","content":"title: \"ICLRProfiling::AttachProfiler Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"IClrProfiling.AttachProfiler Method\"\napi_location: \n  - \"Mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IClrProfiling::AttachProfiler\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"AttachProfiler method [.NET Framework profiling]\"\n  - \"IClrProfiling::AttachProfiler method [.NET Framework profiling]\"\nms.assetid: 535a6839-c443-405b-a6f4-e2af90725d5b\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 15\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"ICLRProfiling::AttachProfiler Method | Microsoft Docs","nodes":[{"pos":[0,53],"content":"ICLRProfiling::AttachProfiler Method | Microsoft Docs","nodes":[{"content":"ICLRProfiling::AttachProfiler Method | Microsoft Docs","pos":[0,53]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[721,757],"content":"ICLRProfiling::AttachProfiler Method","linkify":"ICLRProfiling::AttachProfiler Method","nodes":[{"content":"ICLRProfiling::AttachProfiler Method","pos":[0,36]}]},{"content":"Attaches the specified profiler to the specified process.","pos":[758,815]},{"pos":[824,830],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1221,1231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The process ID of the process to which the profiler should be attached.","pos":[1260,1336]},{"content":"On a 64-bit machine, the profiled process's bitness must match the bitness of the trigger process that is calling <ph id=\"ph1\">`AttachProfiler`</ph>.","pos":[1337,1468],"source":" On a 64-bit machine, the profiled process's bitness must match the bitness of the trigger process that is calling `AttachProfiler`."},{"content":"If the user account under which <ph id=\"ph1\">`AttachProfiler`</ph> is called has administrative privileges, the target process may be any process on the system.","pos":[1469,1611],"source":" If the user account under which `AttachProfiler` is called has administrative privileges, the target process may be any process on the system."},{"content":"Otherwise, the target process must be owned by the same user account.","pos":[1612,1681]},{"content":"[in] The time duration, in milliseconds, for <ph id=\"ph1\">`AttachProfiler`</ph> to complete.","pos":[1711,1785],"source":"[in] The time duration, in milliseconds, for `AttachProfiler` to complete."},{"content":"The trigger process should pass a timeout that is known to be sufficient for the particular profiler to complete its initialization.","pos":[1786,1918]},{"content":"[in] A pointer to the CLSID of the profiler to be loaded.","pos":[1945,2002]},{"content":"The trigger process can reuse this memory after <ph id=\"ph1\">`AttachProfiler`</ph> returns.","pos":[2003,2076],"source":" The trigger process can reuse this memory after `AttachProfiler` returns."},{"content":"[in] The full path to the profiler’s DLL file to be loaded.","pos":[2104,2163]},{"content":"This string should contain no more than 260 characters, including the null terminator.","pos":[2164,2250]},{"content":"If <ph id=\"ph1\">`wszProfilerPath`</ph> is null or an empty string, the common language runtime (CLR) will try to find the location of the profiler’s DLL file by looking in the registry for the CLSID that <ph id=\"ph2\">`pClsidProfiler`</ph> points to.","pos":[2251,2464],"source":" If `wszProfilerPath` is null or an empty string, the common language runtime (CLR) will try to find the location of the profiler’s DLL file by looking in the registry for the CLSID that `pClsidProfiler` points to."},{"content":"[in] A pointer to data to be passed to the profiler by the <bpt id=\"p1\">[</bpt>ICorProfilerCallback3::InitializeForAttach<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-initializeforattach-method.md)</ept> method.","pos":[2489,2704],"source":"[in] A pointer to data to be passed to the profiler by the [ICorProfilerCallback3::InitializeForAttach](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-initializeforattach-method.md) method."},{"content":"The trigger process can reuse this memory after <ph id=\"ph1\">`AttachProfiler`</ph> returns.","pos":[2705,2778],"source":" The trigger process can reuse this memory after `AttachProfiler` returns."},{"content":"If <ph id=\"ph1\">`pvClientData`</ph> is null, <ph id=\"ph2\">`cbClientData`</ph> must be 0 (zero).","pos":[2779,2838],"source":" If `pvClientData` is null, `cbClientData` must be 0 (zero)."},{"content":"[in] The size, in bytes, of the data that <ph id=\"ph1\">`pvClientData`</ph> points to.","pos":[2863,2930],"source":"[in] The size, in bytes, of the data that `pvClientData` points to."},{"pos":[2939,2951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"This method returns the following HRESULTs.","pos":[2955,2998]},{"content":"HRESULT","pos":[3005,3012]},{"content":"Description","pos":[3013,3024]},{"content":"S_OK","pos":[3065,3069]},{"content":"The specified profiler has successfully attached to the target process.","pos":[3070,3141]},{"content":"CORPROF_E_PROFILER_ALREADY_ACTIVE","pos":[3146,3179]},{"content":"There is already a profiler active or attaching to the target process.","pos":[3180,3250]},{"content":"CORPROF_E_PROFILER_NOT_ATTACHABLE","pos":[3255,3288]},{"content":"The specified profiler does not support attachment.","pos":[3289,3340]},{"content":"The trigger process may attempt to attach a different profiler.","pos":[3341,3404]},{"content":"CORPROF_E_PROFILEE_INCOMPATIBLE_WITH_TRIGGER","pos":[3409,3453]},{"pos":[3454,3611],"content":"Unable to request a profiler attachment, because the version of the target process is incompatible with the current process that is calling <ph id=\"ph1\">`AttachProfiler`</ph>.","source":"Unable to request a profiler attachment, because the version of the target process is incompatible with the current process that is calling `AttachProfiler`."},{"content":"HRESULT_FROM_WIN32(ERROR_ACCESS_DENIED)","pos":[3616,3655]},{"content":"The user of the trigger process does not have access to the target process.","pos":[3656,3731]},{"content":"HRESULT_FROM_WIN32(ERROR_PRIVILEGE_NOT_HELD)","pos":[3736,3780]},{"content":"The user of the trigger process does not have the privileges necessary to attach a profiler to the given target process.","pos":[3781,3901]},{"content":"The application event log may contain more information.","pos":[3902,3957]},{"content":"CORPROF_E_IPC_FAILED","pos":[3962,3982]},{"content":"A failure occurred when communicating with the target process.","pos":[3983,4045]},{"content":"This commonly happens if the target process was shutting down.","pos":[4046,4108]},{"content":"HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND)","pos":[4113,4153]},{"content":"The target process does not exist or is not running a CLR that supports attachment.","pos":[4154,4237]},{"content":"This may indicate that the CLR was unloaded since the call to the runtime enumeration method.","pos":[4238,4331]},{"content":"HRESULT_FROM_WIN32(ERROR_TIMEOUT)","pos":[4336,4369]},{"content":"The timeout expired without beginning to load the profiler.","pos":[4370,4429]},{"content":"You can retry the attach operation.","pos":[4430,4465]},{"content":"Timeouts occur when a finalizer in the target process runs for a longer time than the timeout value.","pos":[4466,4566]},{"content":"E_INVALIDARG","pos":[4571,4583]},{"content":"One or more parameters have invalid values.","pos":[4584,4627]},{"content":"E_FAIL","pos":[4632,4638]},{"content":"Some other, unspecified failure occurred.","pos":[4639,4680]},{"content":"Other error codes","pos":[4685,4702]},{"content":"If the profiler’s <bpt id=\"p1\">[</bpt>ICorProfilerCallback3::InitializeForAttach<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-initializeforattach-method.md)</ept> method returns an HRESULT that indicates failure, <ph id=\"ph1\">`AttachProfiler`</ph> returns that same HRESULT.","pos":[4703,4963],"source":"If the profiler’s [ICorProfilerCallback3::InitializeForAttach](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-initializeforattach-method.md) method returns an HRESULT that indicates failure, `AttachProfiler` returns that same HRESULT."},{"content":"In this case, E_NOTIMPL is converted to CORPROF_E_PROFILER_NOT_ATTACHABLE.","pos":[4964,5038]},{"pos":[5048,5055],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5064,5081],"content":"Memory Management","linkify":"Memory Management","nodes":[{"content":"Memory Management","pos":[0,17]}]},{"content":"In keeping with COM conventions, the caller of <ph id=\"ph1\">`AttachProfiler`</ph> (for example, the trigger code authored by the profiler developer) is responsible for allocating and de-allocating the memory for the data that the <ph id=\"ph2\">`pvClientData`</ph> parameter points to.","pos":[5085,5332],"source":"In keeping with COM conventions, the caller of `AttachProfiler` (for example, the trigger code authored by the profiler developer) is responsible for allocating and de-allocating the memory for the data that the `pvClientData` parameter points to."},{"content":"When the CLR executes the <ph id=\"ph1\">`AttachProfiler`</ph> call, it makes a copy of the memory that <ph id=\"ph2\">`pvClientData`</ph> points to and transmits it to the target process.","pos":[5333,5481],"source":" When the CLR executes the `AttachProfiler` call, it makes a copy of the memory that `pvClientData` points to and transmits it to the target process."},{"content":"When the CLR inside the target process receives its own copy of the <ph id=\"ph1\">`pvClientData`</ph> block, it passes the block to the profiler through the <ph id=\"ph2\">`InitializeForAttach`</ph> method, and then deallocates its copy of the <ph id=\"ph3\">`pvClientData`</ph> block from the target process.","pos":[5482,5732],"source":" When the CLR inside the target process receives its own copy of the `pvClientData` block, it passes the block to the profiler through the `InitializeForAttach` method, and then deallocates its copy of the `pvClientData` block from the target process."},{"pos":[5741,5753],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5757,5861],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[5868,5902],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[5909,5934],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[5941,5969],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept>","source":"**.NET Framework Versions:**"},{"pos":[6058,6066],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[6070,6189],"source":"[ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo3 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo3-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[6193,6306],"source":"[ICorProfilerInfo3 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo3-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>Profiling Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[6310,6409],"source":"[Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md) "},{"content":"<bpt id=\"p1\">[</bpt>Profiling<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept>","pos":[6413,6485],"source":"[Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)"}]}