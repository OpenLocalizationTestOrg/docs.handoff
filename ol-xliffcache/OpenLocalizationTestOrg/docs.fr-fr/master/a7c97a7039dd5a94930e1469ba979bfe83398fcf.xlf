<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-401ea83" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7c97a7039dd5a94930e1469ba979bfe83398fcf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\resources\creating-resource-files-for-desktop-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1deb03de2d3dac1673714755a1f3aebde709412e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b52ec47d833b23d97e8a22876b757c0d26e9536</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Creating Resource Files for Desktop Apps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating Resource Files for Desktop Apps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can include resources, such as strings, images, or object data, in resources files to make them easily available to your application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The .NET Framework offers five ways to create resources files:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Create a text file that contains string resources.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to convert the text file into a binary resource (.resources) file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can then embed the binary resource file  in an application executable or an application library by using a language compiler, or you can embed it in a satellite assembly by using <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Resources in Text Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md#TextFiles)</ept> section.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create an XML resource (.resx) file that contains string, image, or object data.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to convert the .resx file into a binary resource (.resources) file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can then embed the binary resource file in an application executable or an application library by using a language compiler, or you can embed it in a satellite assembly by using <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Resources in .resx Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md#ResxFiles)</ept> section.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Create an XML resource (.resx) file programmatically by using types in the <ph id="ph1">&lt;xref:System.Resources&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can create a .resx file, enumerate its resources, and retrieve specific resources by name.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see the topic <bpt id="p1">[</bpt>Working with .resx Files Programmatically<ept id="p1">](../../../docs/framework/resources/working-with-resx-files-programmatically.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Create a binary resource (.resources) file programmatically.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can then embed the file in an application executable or an application library by using a language compiler, or you can embed it in a satellite assembly by using <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Resources in .resources Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md#ResourcesFiles)</ept> section.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use Visual Studio to create a resource file and include it in your project.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Visual Studio provides a resource editor that lets you add, delete, and modify resources.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>At compile time, the resource file is automatically converted to a binary .resources file and embedded in an application assembly or satellite assembly.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Resource Files in Visual Studio<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md#VSResFiles)</ept> section.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Resources in Text Files</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use text (.txt or .restext) files to store string resources only; for non-string resources, use .resx files or create them programmatically.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Text files that contain string resources have the following format:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The resource file format of .txt and .restext files is identical.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The .restext file extension merely serves to make text files immediately identifiable as text-based resource files.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>String resources appear as <bpt id="p1">*</bpt>name/value<ept id="p1">*</ept> pairs, where <bpt id="p2">*</bpt>name<ept id="p2">*</ept> is a string that identifies the resource, and <bpt id="p3">*</bpt>value<ept id="p3">*</ept> is the resource string that is returned when you pass <bpt id="p4">*</bpt>name<ept id="p4">*</ept> to a resource retrieval method such as <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>name<ept id="p1">*</ept> and <bpt id="p2">*</bpt>value<ept id="p2">*</ept> must be separated by an equal sign (=).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Do not use resource files to store passwords, security-sensitive information, or private data.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Empty strings (that is, a resource whose value is <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>) are permitted in text files.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, text files support conditional compilation with the <ph id="ph2">`#ifdef`</ph><bpt id="p1">*</bpt>symbol<ept id="p1">*</ept>... <ph id="ph3">`#endif`</ph> and <ph id="ph4">`#if !`</ph><bpt id="p2">*</bpt>symbol<ept id="p2">*</ept>... <ph id="ph5">`#endif`</ph> constructs.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can then use the <ph id="ph1">`/define`</ph> switch with <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to define symbols.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each resource requires its own <ph id="ph1">`#ifdef`</ph><bpt id="p1">*</bpt>symbol<ept id="p1">*</ept>... <ph id="ph2">`#endif`</ph> or <ph id="ph3">`#if !`</ph><bpt id="p2">*</bpt>symbol<ept id="p2">*</ept>... <ph id="ph4">`#endif`</ph> construct.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you use an <ph id="ph1">`#ifdef`</ph> statement and <bpt id="p1">*</bpt>symbol<ept id="p1">*</ept> is defined, the associated resource is included in the .resources file; otherwise, it is not included.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you use an <ph id="ph1">`#if !`</ph> statement and <bpt id="p1">*</bpt>symbol<ept id="p1">*</ept> is not defined, the associated resource is included in the .resources file; otherwise, it is not included.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Comments are optional in text files and are preceded either by a semicolon (;) or by a pound sign (#) at the beginning of a line.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Lines that contain comments can be placed anywhere in the file.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Comments are not included in a compiled .resources file that is created by using <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Any blank lines in the text files are considered to be white space and are ignored.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example defines two string resources named <ph id="ph1">`OKButton`</ph> and <ph id="ph2">`CancelButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the text file contains duplicate occurrences of <bpt id="p1">*</bpt>name<ept id="p1">*</ept>, <bpt id="p2">[</bpt>Resource File Generator (Resgen.exe)<ept id="p2">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> displays a warning and ignores the second name.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>value<ept id="p1">*</ept> cannot contain new line characters, but you can use C language-style escape characters such as <ph id="ph1">`\n`</ph> to represent a new line and <ph id="ph2">`\t`</ph> to represent a tab. You can also include a backslash character if it is escaped (for example, "<ph id="ph3">\\</ph><ph id="ph4">\\</ph>").</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In addition, an empty string is permitted.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You should save resources in text file format by using UTF-8 encoding or UTF-16 encoding in either little-endian or big-endian byte order.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>, which converts a .txt file to a .resources file, treats files as UTF-8 by default.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you want Resgen.exe to recognize a file that was encoded using UTF-16, you must include a Unicode byte order mark (U+FEFF) at the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To embed a resource file in text format into a .NET Framework assembly, you must convert the file to a binary resource (.resources) file by using <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can then embed the .resources file in a .NET Framework assembly by using a language compiler or embed it in a satellite assembly by using <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example uses a resource file in text format named GreetingResources.txt for a simple "Hello World" console application.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The text file defines two strings, <ph id="ph1">`prompt`</ph> and <ph id="ph2">`greeting`</ph>, that prompt the user to enter his or her name and display a greeting.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The text file is converted to a .resources file by using the following command:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>resgen GreetingResources.txt<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example shows the source code for a console application that uses the .resources file to display messages to the user.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Resources.TextFiles#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.textfiles/cs/greeting.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Resources.TextFiles#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.textfiles/vb/greeting.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you are using Visual Basic, and the source code file is named Greeting.vb, the following command creates an executable file that includes the embedded .resources file:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>vbc greeting.vb /resource:GreetingResources.resources<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you are using C#, and the source code file is named Greeting.cs, the following command creates an executable file that includes the embedded .resources file:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>csc greeting.cs /resource:GreetingResources.resources<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Resources in .resx Files</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Unlike text files, which can only store string resources, XML resource (.resx) files can store strings, binary data such as images, icons, and audio clips, and programmatic objects.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A .resx file contains a standard header, which describes the format of the resource entries and specifies the versioning information for the XML that is used to parse the data.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The resource file data follows the XML header.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Each data item consists of a name/value pair that is contained in a <ph id="ph1">`data`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">`name`</ph> attribute defines the resource name, and the nested <ph id="ph2">`value`</ph> tag contains the resource value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For string data, the <ph id="ph1">`value`</ph> tag contains the string.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`data`</ph> tag defines a string resource named <ph id="ph2">`prompt`</ph> whose value is "Enter your name:".</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Do not use resource files to store passwords, security-sensitive information, or private data.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For resource objects, the <bpt id="p1">**</bpt>data<ept id="p1">**</ept> tag includes a <ph id="ph1">`type`</ph> attribute that indicates the data type of the resource.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For objects that consist of binary data, the <ph id="ph1">`data`</ph> tag also includes a <ph id="ph2">`mimetype`</ph> attribute, which indicates the <ph id="ph3">`base64`</ph> type of the binary data.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>All .resx files use a binary serialization formatter to generate and parse the binary data for a specified type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>As a result, a .resx file can become invalid if the binary serialization format for an object changes in an incompatible way.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example shows a portion of a .resx file that includes an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> resource and a bitmap image.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Because .resx files must consist of well-formed XML in a predefined format, we do not recommend working with .resx files manually, particularly when the .resx files contain resources other than strings.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Instead, Visual Studio provides a transparent interface for creating and manipulating .resx files; for more information, see the <bpt id="p1">[</bpt>Resource Files in Visual Studio<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md#VSResFiles)</ept> section.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can also create and manipulate .resx files programmatically.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Working with .resx Files Programmatically<ept id="p1">](../../../docs/framework/resources/working-with-resx-files-programmatically.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Resources in .resources Files</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter?displayProperty=fullName&gt;</ph> class to programmatically create a binary resource (.resources) file directly from code.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can also use <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to create a .resources file from a text file or a .resx file.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The .resources file can contain binary data (byte arrays) and object data in addition to string data.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Programmatically creating a .resources file requires the following steps:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Resources.ResourceWriter&gt;</ph> object with a unique file name.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can do this by specifying either a file name or a file stream to a <ph id="ph1">&lt;xref:System.Resources.ResourceWriter&gt;</ph> class constructor.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Call one of the overloads of the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%2A?displayProperty=fullName&gt;</ph> method for each named resource to add to the file.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The resource can be a string, an object, or a collection of binary data (a byte array).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.Close%2A?displayProperty=fullName&gt;</ph> method to write the resources to the file and to close the <ph id="ph2">&lt;xref:System.Resources.ResourceWriter&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Do not use resource files to store passwords, security-sensitive information, or private data.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following example programmatically creates a .resources file named CarResources.resources that stores six strings, an icon, and two application-defined objects (two <ph id="ph1">`Automobile`</ph> objects).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`Automobile`</ph> class, which is defined and instantiated in the example, is tagged with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute, which allows it to be persisted by the binary serialization formatter.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Resources.Resources#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.resources/cs/resources1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Resources.Resources#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.resources/vb/resources1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>After you create the .resources file, you can embed it in a run-time executable or library by including the language compiler's <ph id="ph1">`/resource`</ph> switch, or embed it in a satellite assembly by using <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Resource Files in Visual Studio</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you add a resource file to your Visual Studio project, Visual Studio creates a .resx file in the project directory.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Visual Studio provides resource editors that enable you to add strings, images, and binary objects.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Because the editors are designed to handle static data only, they cannot be used to store programmatic objects; you must write object data to either a .resx file or to a .resources file programmatically.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Working with .resx Files Programmatically<ept id="p1">](../../../docs/framework/resources/working-with-resx-files-programmatically.md)</ept> topic and the <bpt id="p2">[</bpt>Resources in .resources Files<ept id="p2">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md#ResourcesFiles)</ept> section for more information.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you are adding localized resources, you should give them the same root file name as the main resource file, and you should also designate their culture in the file name.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For example, if you add a resource file named Resources.resx, you might also create resource files named Resources.en-US.resx and Resources.fr-FR.resx to hold localized resources for the English (United States) and French (France) cultures, respectively.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You should also designate your application's default culture.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This is the culture whose resources are used if no localized resources for a particular culture can be found.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To specify the default culture, in Solution Explorer in Visual Studio, right-click the project name, point to Application, click <bpt id="p1">**</bpt>Assembly Information<ept id="p1">**</ept>, and select the appropriate language/culture in the <bpt id="p2">**</bpt>Neutral language<ept id="p2">**</ept> list.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>At compile time, Visual Studio first converts the .resx files in a project to binary resource (.resources) files and stores them in a subdirectory of the project's obj directory.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Visual Studio embeds any resource files that do not contain localized resources in the main assembly that is generated by the project.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If any resource files contain localized resources, Visual Studio embeds them in separate satellite assemblies for each localized culture.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It then stores each satellite assembly in a directory whose name corresponds to thelocalized culture.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For example, localized English (United States) resources are stored in a satellite assembly in the en-US subdirectory.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Resources&gt;</ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resources in Desktop Apps<ept id="p1">](../../../docs/framework/resources/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>