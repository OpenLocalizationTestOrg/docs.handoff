{"content":"---\ntitle: \"Of Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"Of\"\n  - \"vb.Of\"\n  - \"vb.of\"\nhelpviewer_keywords: \n  - \"Of keyword [Visual Basic]\"\n  - \"arguments [Visual Basic], data types\"\n  - \"constraints, Visual Basic generic types\"\n  - \"generic parameters\"\n  - \"generics [Visual Basic], constraints\"\n  - \"parameters [Visual Basic], type\"\n  - \"types [Visual Basic], generic\"\n  - \"parameters [Visual Basic], generic\"\n  - \"type parameters\"\n  - \"data type arguments\"\nms.assetid: 0db8f65c-65af-4089-ab7f-6fcfecb60444\n---\n# Of Clause (Visual Basic)\nIntroduces an `Of` clause, which identifies a *type parameter* on a *generic* class, structure, interface, delegate, or procedure. For information on generic types, see [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md).  \n  \n## Using the Of Keyword  \n The following code example uses the `Of` keyword to define the outline of a class that takes two type parameters. It *constrains* the `keyType` parameter by the <xref:System.IComparable> interface, which means the consuming code must supply a type argument that implements <xref:System.IComparable>. This is necessary so that the `add` procedure can call the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> method. For more information on constraints, see [Type List](../../../visual-basic/language-reference/statements/type-list.md).  \n  \n```  \nPublic Class Dictionary(Of entryType, keyType As IComparable)  \n    Public Sub add(ByVal e As entryType, ByVal k As keyType)  \n        Dim dk As keyType  \n        If k.CompareTo(dk) = 0 Then  \n        End If  \n    End Sub  \n    Public Function find(ByVal k As keyType) As entryType  \n    End Function  \nEnd Class  \n```  \n  \n If you complete the preceding class definition, you can construct a variety of `dictionary` classes from it. The types you supply to `entryType` and `keyType` determine what type of entry the class holds and what type of key it associates with each entry. Because of the constraint, you must supply to `keyType` a type that implements <xref:System.IComparable>.  \n  \n The following code example creates an object that holds `String` entries and associates an `Integer` key with each one. `Integer` implements <xref:System.IComparable> and therefore satisfies the constraint on `keyType`.  \n  \n```  \nDim d As New dictionary(Of String, Integer)  \n```  \n  \n The `Of` keyword can be used in these contexts:  \n  \n [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)  \n  \n [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)  \n  \n [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See also\n\n- <xref:System.IComparable>\n- [Type List](../../../visual-basic/language-reference/statements/type-list.md)\n- [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)\n- [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)\n","nodes":[{"pos":[4,527],"embed":true,"restype":"x-metadata","content":"title: \"Of Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"Of\"\n  - \"vb.Of\"\n  - \"vb.of\"\nhelpviewer_keywords: \n  - \"Of keyword [Visual Basic]\"\n  - \"arguments [Visual Basic], data types\"\n  - \"constraints, Visual Basic generic types\"\n  - \"generic parameters\"\n  - \"generics [Visual Basic], constraints\"\n  - \"parameters [Visual Basic], type\"\n  - \"types [Visual Basic], generic\"\n  - \"parameters [Visual Basic], generic\"\n  - \"type parameters\"\n  - \"data type arguments\"\nms.assetid: 0db8f65c-65af-4089-ab7f-6fcfecb60444","nodes":[{"content":"Of Clause (Visual Basic)","nodes":[{"pos":[0,24],"content":"Of Clause (Visual Basic)","nodes":[{"content":"Of Clause (Visual Basic)","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[534,558],"content":"Of Clause (Visual Basic)","linkify":"Of Clause (Visual Basic)","nodes":[{"content":"Of Clause (Visual Basic)","pos":[0,24]}]},{"content":"Introduces an <ph id=\"ph1\">`Of`</ph> clause, which identifies a <bpt id=\"p1\">*</bpt>type parameter<ept id=\"p1\">*</ept> on a <bpt id=\"p2\">*</bpt>generic<ept id=\"p2\">*</ept> class, structure, interface, delegate, or procedure.","pos":[559,689],"source":"Introduces an `Of` clause, which identifies a *type parameter* on a *generic* class, structure, interface, delegate, or procedure."},{"content":"For information on generic types, see <bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>.","pos":[690,847],"source":" For information on generic types, see [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)."},{"pos":[856,876],"content":"Using the Of Keyword","linkify":"Using the Of Keyword","nodes":[{"content":"Using the Of Keyword","pos":[0,20]}]},{"content":"The following code example uses the <ph id=\"ph1\">`Of`</ph> keyword to define the outline of a class that takes two type parameters.","pos":[880,993],"source":"The following code example uses the `Of` keyword to define the outline of a class that takes two type parameters."},{"content":"It <bpt id=\"p1\">*</bpt>constrains<ept id=\"p1\">*</ept> the <ph id=\"ph1\">`keyType`</ph> parameter by the <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> interface, which means the consuming code must supply a type argument that implements <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph>.","pos":[994,1179],"source":" It *constrains* the `keyType` parameter by the <xref:System.IComparable> interface, which means the consuming code must supply a type argument that implements <xref:System.IComparable>."},{"content":"This is necessary so that the <ph id=\"ph1\">`add`</ph> procedure can call the <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[1180,1314],"source":" This is necessary so that the `add` procedure can call the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> method."},{"content":"For more information on constraints, see <bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept>.","pos":[1315,1434],"source":" For more information on constraints, see [Type List](../../../visual-basic/language-reference/statements/type-list.md)."},{"content":"If you complete the preceding class definition, you can construct a variety of <ph id=\"ph1\">`dictionary`</ph> classes from it.","pos":[1771,1879],"source":"If you complete the preceding class definition, you can construct a variety of `dictionary` classes from it."},{"content":"The types you supply to <ph id=\"ph1\">`entryType`</ph> and <ph id=\"ph2\">`keyType`</ph> determine what type of entry the class holds and what type of key it associates with each entry.","pos":[1880,2026],"source":" The types you supply to `entryType` and `keyType` determine what type of entry the class holds and what type of key it associates with each entry."},{"content":"Because of the constraint, you must supply to <ph id=\"ph1\">`keyType`</ph> a type that implements <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>.","pos":[2027,2132],"source":" Because of the constraint, you must supply to `keyType` a type that implements <xref:System.IComparable>."},{"content":"The following code example creates an object that holds <ph id=\"ph1\">`String`</ph> entries and associates an <ph id=\"ph2\">`Integer`</ph> key with each one.","pos":[2139,2258],"source":"The following code example creates an object that holds `String` entries and associates an `Integer` key with each one."},{"content":"<ph id=\"ph1\">`Integer`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> and therefore satisfies the constraint on <ph id=\"ph3\">`keyType`</ph>.","pos":[2259,2358],"source":"`Integer` implements <xref:System.IComparable> and therefore satisfies the constraint on `keyType`."},{"pos":[2426,2473],"content":"The <ph id=\"ph1\">`Of`</ph> keyword can be used in these contexts:","source":"The `Of` keyword can be used in these contexts:"},{"pos":[2480,2569],"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>","source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)"},{"pos":[2576,2671],"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>","source":"[Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)"},{"pos":[2678,2773],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[2780,2877],"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept>","source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)"},{"pos":[2884,2981],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[2988,3073],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[3082,3090],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3122,3199],"content":"<bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept>","source":"[Type List](../../../visual-basic/language-reference/statements/type-list.md)"},{"pos":[3202,3320],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[3323,3402],"content":"<bpt id=\"p1\">[</bpt>In<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept>","source":"[In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)"},{"pos":[3405,3486],"content":"<bpt id=\"p1\">[</bpt>Out<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept>","source":"[Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)"}]}