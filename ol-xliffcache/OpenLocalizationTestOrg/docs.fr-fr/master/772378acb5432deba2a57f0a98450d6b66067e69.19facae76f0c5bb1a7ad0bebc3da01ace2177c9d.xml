{"content":"---\ntitle: \"How to: Project an Anonymous Type (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 30b42987-0e0e-4b2b-adb1-5255ddfbcd7b\ncaps.latest.revision: 4\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Project an Anonymous Type (Visual Basic)\nIn some cases you might want to project a query to a new type, even though you know you will only use this type for a short while. It is a lot of extra work to create a new type just to use in the projection. A more efficient approach in this case is to project to an anonymous type. Anonymous types allow you to define a class, then declare and initialize an object of that class, without giving the class a name.  \n  \n Anonymous types are the C# implementation of the mathematical concept of a *tuple*. The mathematical term tuple originated from the sequence single, double, triple, quadruple, quintuple, n-tuple. It refers to a finite sequence of objects, each of a specific type. Sometimes this is called a list of name/value pairs. For example, the contents of an address in the [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md) XML document could be expressed as follows:  \n  \n```  \nName: Ellen Adams  \nStreet: 123 Maple Street  \nCity: Mill Valley  \nState: CA  \nZip: 90952  \nCountry: USA  \n```  \n  \n When you create an instance of an anonymous type, it is convenient to think of it as creating a tuple of order n. If you write a query that creates a tuple in the `Select` clause, the query returns an `IEnumerable` of the tuple.  \n  \n## Example  \n In this example, the `Select` clause projects an anonymous type. The example then uses `Dim` to create the `IEnumerable` object. Within the `For Each` loop, the iteration variable becomes an instance of the anonymous type created in the query expression.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md).  \n  \n```vb  \nDim custOrd As XElement = XElement.Load(\"CustomersOrders.xml\")  \nDim custList = _  \n    From el In custOrd.<Customers>.<Customer> _  \n    Select New With { _  \n        .CustomerID = el.@<CustomerID>, _  \n        .CompanyName = el.<CompanyName>.Value, _  \n        .ContactName = el.<ContactName>.Value _  \n    }  \nFor Each cust In custList  \n    Console.WriteLine(\"{0}:{1}:{2}\", cust.CustomerID, cust.CompanyName, cust.ContactName)  \nNext  \n  \n```  \n  \n This code produces the following output:  \n  \n```  \nGREAL:Great Lakes Food Market:Howard Snyder  \nHUNGC:Hungry Coyote Import Store:Yoshi Latimer  \nLAZYK:Lazy K Kountry Store:John Steel  \nLETSS:Let's Stop N Shop:Jaime Yorres  \n```  \n  \n## See Also  \n [Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)","nodes":[{"pos":[12,77],"content":"How to: Project an Anonymous Type (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Project an Anonymous Type (Visual Basic) | Microsoft Docs","pos":[0,65]}]},{"pos":[384,432],"content":"How to: Project an Anonymous Type (Visual Basic)","linkify":"How to: Project an Anonymous Type (Visual Basic)","nodes":[{"content":"How to: Project an Anonymous Type (Visual Basic)","pos":[0,48]}]},{"content":"In some cases you might want to project a query to a new type, even though you know you will only use this type for a short while.","pos":[433,563]},{"content":"It is a lot of extra work to create a new type just to use in the projection.","pos":[564,641]},{"content":"A more efficient approach in this case is to project to an anonymous type.","pos":[642,716]},{"content":"Anonymous types allow you to define a class, then declare and initialize an object of that class, without giving the class a name.","pos":[717,847]},{"content":"Anonymous types are the C# implementation of the mathematical concept of a <bpt id=\"p1\">*</bpt>tuple<ept id=\"p1\">*</ept>.","pos":[854,937],"source":"Anonymous types are the C# implementation of the mathematical concept of a *tuple*."},{"content":"The mathematical term tuple originated from the sequence single, double, triple, quadruple, quintuple, n-tuple.","pos":[938,1049]},{"content":"It refers to a finite sequence of objects, each of a specific type.","pos":[1050,1117]},{"content":"Sometimes this is called a list of name/value pairs.","pos":[1118,1170]},{"content":"For example, the contents of an address in the <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept> XML document could be expressed as follows:","pos":[1171,1429],"source":" For example, the contents of an address in the [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md) XML document could be expressed as follows:"},{"content":"When you create an instance of an anonymous type, it is convenient to think of it as creating a tuple of order n.","pos":[1558,1671]},{"content":"If you write a query that creates a tuple in the <ph id=\"ph1\">`Select`</ph> clause, the query returns an <ph id=\"ph2\">`IEnumerable`</ph> of the tuple.","pos":[1672,1786],"source":" If you write a query that creates a tuple in the `Select` clause, the query returns an `IEnumerable` of the tuple."},{"pos":[1795,1802],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the <ph id=\"ph1\">`Select`</ph> clause projects an anonymous type.","pos":[1806,1870],"source":"In this example, the `Select` clause projects an anonymous type."},{"content":"The example then uses <ph id=\"ph1\">`Dim`</ph> to create the <ph id=\"ph2\">`IEnumerable`</ph> object.","pos":[1871,1934],"source":" The example then uses `Dim` to create the `IEnumerable` object."},{"content":"Within the <ph id=\"ph1\">`For Each`</ph> loop, the iteration variable becomes an instance of the anonymous type created in the query expression.","pos":[1935,2060],"source":" Within the `For Each` loop, the iteration variable becomes an instance of the anonymous type created in the query expression."},{"pos":[2067,2277],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)."},{"content":"This code produces the following output:","pos":[2744,2784]},{"pos":[2982,2990],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2994,3161],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}