{"content":"---\ntitle: \"Compiler Error CS0269\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0269\"\nhelpviewer_keywords: \n  - \"CS0269\"\nms.assetid: 7ef8374c-6f82-4096-bf4b-70080d4ddf88\n---\n# Compiler Error CS0269\nUse of unassigned out parameter 'parameter'  \n  \n The compiler could not verify that the out parameter was assigned a value before it was used; its value may be undefined when assigned. Be sure to assign a value to `out` parameters in the called method before accessing the value. If you need to use the value of the variable passed in, use a `ref` parameter instead. For more information, see [Passing Parameters](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md).  \n  \n## Example  \n The following sample generates CS0269:  \n  \n```csharp  \n// CS0269.cs  \nclass C  \n{  \n    public static void F(out int i)  \n    // One way to resolve the error is to use a ref parameter instead  \n    // of an out parameter.  \n    //public static void F(ref int i)  \n    {  \n        // The following line causes a compiler error because no value  \n        // has been assigned to i.  \n        int k = i;  // CS0269  \n        i = 1;  \n        // The error does not occur if the order of the two previous   \n        // lines is reversed.  \n    }  \n  \n    public static void Main()  \n    {  \n        int myInt = 1;  \n        F(out myInt);  \n        // If the declaration of method F is changed to require a ref  \n        // parameter, ref must be specified in the call as well.  \n        //F(ref myInt);  \n    }  \n}  \n```  \n  \n## Example  \n This could also occur if the initialization of a variable occurs in a try block, which the compiler is unable to verify will execute successfully:  \n  \n```csharp  \n// CS0269b.cs  \nclass C  \n{  \n    public static void F(out int i)  \n    {  \n        try  \n        {  \n            // Assignment occurs, but compiler can't verify it  \n            i = 1;  \n        }  \n        catch  \n        {  \n        }  \n  \n        int k = i;  // CS0269  \n        i = 1;  \n    }  \n  \n    public static void Main()  \n    {  \n        int myInt;  \n        F(out myInt);  \n    }  \n}  \n```\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS0269\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0269\"\nhelpviewer_keywords: \n  - \"CS0269\"\nms.assetid: 7ef8374c-6f82-4096-bf4b-70080d4ddf88","nodes":[{"content":"Compiler Error CS0269","nodes":[{"pos":[0,21],"content":"Compiler Error CS0269","nodes":[{"content":"Compiler Error CS0269","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,193],"content":"Compiler Error CS0269","linkify":"Compiler Error CS0269","nodes":[{"content":"Compiler Error CS0269","pos":[0,21]}]},{"content":"Use of unassigned out parameter 'parameter'","pos":[194,237]},{"content":"The compiler could not verify that the out parameter was assigned a value before it was used; its value may be undefined when assigned.","pos":[244,379]},{"content":"Be sure to assign a value to <ph id=\"ph1\">`out`</ph> parameters in the called method before accessing the value.","pos":[380,474],"source":" Be sure to assign a value to `out` parameters in the called method before accessing the value."},{"content":"If you need to use the value of the variable passed in, use a <ph id=\"ph1\">`ref`</ph> parameter instead.","pos":[475,561],"source":" If you need to use the value of the variable passed in, use a `ref` parameter instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Passing Parameters<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md)</ept>.","pos":[562,686],"source":" For more information, see [Passing Parameters](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md)."},{"pos":[695,702],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates CS0269:","pos":[706,744]},{"pos":[1531,1538],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This could also occur if the initialization of a variable occurs in a try block, which the compiler is unable to verify will execute successfully:","pos":[1542,1688]}]}