<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="object-lifetime-how-objects-are-created-and-destroyed.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">944ab2d35c537a6203c099906da5b19854dc3b13</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\objects-and-classes\object-lifetime-how-objects-are-created-and-destroyed.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c89be1cd3d4c1d6c9bc46d2c8cd0e5d8dc7b9a8d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de24b75af20afcbeab3763816a25222046512cb3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Object Lifetime: How Objects Are Created and Destroyed (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Object Lifetime: How Objects Are Created and Destroyed (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An instance of a class, an object, is created by using the <ph id="ph1">`New`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initialization tasks often must be performed on new objects before they are used.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Common initialization tasks include opening files, connecting to databases, and reading values of registry keys.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Visual Basic controls the initialization of new objects using procedures called <bpt id="p1">*</bpt>constructors<ept id="p1">*</ept> (special methods that allow control over initialization).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>After an object leaves scope, it is released by the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Visual Basic controls the release of system resources using procedures called <bpt id="p1">*</bpt>destructors<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Together, constructors and destructors support the creation of robust and predictable class libraries.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using Constructors and Destructors</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Constructors and destructors control the creation and destruction of objects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Sub New`</ph> and <ph id="ph2">`Sub Finalize`</ph> procedures in Visual Basic initialize and destroy objects; they replace the <ph id="ph3">`Class_Initialize`</ph> and <ph id="ph4">`Class_Terminate`</ph> methods used in <ph id="ph5">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 6.0 and earlier versions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Sub New</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Sub New`</ph> constructor can run only once when a class is created.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It cannot be called explicitly anywhere other than in the first line of code of another constructor from either the same class or from a derived class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Furthermore, the code in the <ph id="ph1">`Sub New`</ph> method always runs before any other code in a class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvblong](../../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> and later versions implicitly create a <ph id="ph2">`Sub New`</ph> constructor at run time if you do not explicitly define a <ph id="ph3">`Sub New`</ph> procedure for a class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To create a constructor for a class, create a procedure named <ph id="ph1">`Sub New`</ph> anywhere in the class definition.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To create a parameterized constructor, specify the names and data types of arguments to <ph id="ph1">`Sub New`</ph> just as you would specify arguments for any other procedure, as in the following code:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Constructors are frequently overloaded, as in the following code:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you define a class derived from another class, the first line of a constructor must be a call to the constructor of the base class, unless the base class has an accessible constructor that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A call to the base class that contains the above constructor, for example, would be <ph id="ph1">`MyBase.New(s)`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`MyBase.New`</ph> is optional, and the <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> runtime calls it implicitly.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>After you write the code to call the parent object's constructor, you can add any additional initialization code to the <ph id="ph1">`Sub New`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Sub New`</ph> can accept arguments when called as a parameterized constructor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These parameters are passed from the procedure calling the constructor, for example, <ph id="ph1">`Dim AnObject As New ThisClass(X)`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Sub Finalize</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Before releasing objects, the CLR automatically calls the <ph id="ph1">`Finalize`</ph> method for objects that define a <ph id="ph2">`Sub Finalize`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Finalize`</ph> method can contain code that needs to execute just before an object is destroyed, such as code for closing files and saving state information.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>There is a slight performance penalty for executing <ph id="ph1">`Sub Finalize`</ph>, so you should define a <ph id="ph2">`Sub Finalize`</ph> method only when you need to release objects explicitly.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The garbage collector in the CLR does not (and cannot) dispose of <bpt id="p1">*</bpt>unmanaged objects<ept id="p1">*</ept>, objects that the operating system executes directly, outside the CLR environment.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This is because different unmanaged objects must be disposed of in different ways.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>That information is not directly associated with the unmanaged object; it must be found in the documentation for the object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A class that uses unmanaged objects must dispose of them in its <ph id="ph1">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Finalize`</ph> destructor is a protected method that can be called only from the class it belongs to, or from derived classes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The system calls <ph id="ph1">`Finalize`</ph> automatically when an object is destroyed, so you should not explicitly call <ph id="ph2">`Finalize`</ph> from outside of a derived class's <ph id="ph3">`Finalize`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">`Class_Terminate`</ph>, which executes as soon as an object is set to nothing, there is usually a delay between when an object loses scope and when Visual Basic calls the <ph id="ph2">`Finalize`</ph> destructor.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvblong](../../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> and later versions allow for a second kind of destructor, <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, which can be explicitly called at any time to immediately release resources.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finalize`</ph> destructor should not throw exceptions, because they cannot be handled by the application and can cause the application to terminate.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>How New and Finalize Methods Work in a Class Hierarchy</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Whenever an instance of a class is created, the common language runtime (CLR) attempts to execute a procedure named <ph id="ph1">`New`</ph>, if it exists in that object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`New`</ph> is a type of procedure called a <ph id="ph2">`constructor`</ph> that is used to initialize new objects before any other code in an object executes.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`New`</ph> constructor can be used to open files, connect to databases, initialize variables, and take care of any other tasks that need to be done before an object can be used.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When an instance of a derived class is created, the <ph id="ph1">`Sub New`</ph> constructor of the base class executes first, followed by constructors in derived classes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This happens because the first line of code in a <ph id="ph1">`Sub New`</ph> constructor uses the syntax <ph id="ph2">`MyBase.New()`</ph>to call the constructor of the class immediately above itself in the class hierarchy.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Sub New`</ph> constructor is then called for each class in the class hierarchy until the constructor for the base class is reached.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>At that point, the code in the constructor for the base class executes, followed by the code in each constructor in all derived classes and the code in the most derived classes is executed last.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Constructors and Inheritance<ept id="p1">]</ept><bpt id="p2">(../../../../visual-basic/programming-guide/language-features/objects-and-classes/media/vaconstructorsinheritance.gif "</bpt>vaConstructorsInheritance<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When an object is no longer needed, the CLR calls the <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> method for that object before freeing its memory.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> method is called a <ph id="ph2">`destructor`</ph> because it performs cleanup tasks, such as saving state information, closing files and connections to databases, and other tasks that must be done before releasing the object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Constructors Inheritance2<ept id="p1">]</ept><bpt id="p2">(../../../../visual-basic/programming-guide/language-features/objects-and-classes/media/vaconstructorsinheritance_2.gif "</bpt>vaConstructorsInheritance_2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>IDisposable Interface</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Class instances often control resources not managed by the CLR, such as Windows handles and database connections.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These resources must be disposed of in the <ph id="ph1">`Finalize`</ph> method of the class, so that they will be released when the object is destroyed by the garbage collector.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>However, the garbage collector destroys objects only when the CLR requires more free memory.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This means that the resources may not be released until long after the object goes out of scope.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To supplement garbage collection, your classes can provide a mechanism to actively manage system resources if they implement the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> has one method, <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, which clients should call when they finish using an object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method to immediately release resources and perform tasks such as closing files and database connections.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Unlike the <ph id="ph1">`Finalize`</ph> destructor, the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is not called automatically.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Clients of a class must explicitly call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> when you want to immediately release resources.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Implementing IDisposable</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface should include these sections of code:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A field for keeping track of whether the object has been disposed:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An overload of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> that frees the class's resources.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This method should be called by the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> and <ph id="ph2">`Finalize`</ph> methods of the base class:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An implementation of <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> that contains only the following code:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An override of the <ph id="ph1">`Finalize`</ph> method that contains only the following code:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Deriving from a Class that Implements IDisposable</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A class that derives from a base class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface does not need to override any of the base methods unless it uses additional resources that need to be disposed.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In that situation, the derived class should override the base class's <ph id="ph1">`Dispose(disposing)`</ph> method to dispose of the derived class's resources.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This override must call the base class's <ph id="ph1">`Dispose(disposing)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A derived class should not override the base class's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> and <ph id="ph2">`Finalize`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When those methods are called from an instance of the derived class, the base class's implementation of those methods call the derived class's override of the <ph id="ph1">`Dispose(disposing)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Garbage Collection and the Finalize Destructor</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> uses the <bpt id="p1">*</bpt>reference-tracing garbage collection<ept id="p1">*</ept> system to periodically release unused resources.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Visual Basic 6.0 and earlier versions used a different system called <bpt id="p1">*</bpt>reference counting<ept id="p1">*</ept> to manage resources.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Although both systems perform the same function automatically, there are a few important differences.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The CLR periodically destroys objects when the system determines that such objects are no longer needed.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Objects are released more quickly when system resources are in short supply, and less frequently otherwise.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The delay between when an object loses scope and when the CLR releases it means that, unlike with objects in Visual Basic 6.0 and earlier versions, you cannot determine exactly when the object will be destroyed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In such a situation, objects are said to have <bpt id="p1">*</bpt>non-deterministic lifetime<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In most cases, non-deterministic lifetime does not change how you write applications, as long as you remember that the <ph id="ph1">`Finalize`</ph> destructor may not immediately execute when an object loses scope.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Another difference between the garbage-collection systems involves the use of <ph id="ph1">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To take advantage of reference counting in Visual Basic 6.0 and earlier versions, programmers sometimes assigned <ph id="ph1">`Nothing`</ph> to object variables to release the references those variables held.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the variable held the last reference to the object, the object's resources were released immediately.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In later versions of Visual Basic, while there may be cases in which this procedure is still valuable, performing it never causes the referenced object to release its resources immediately.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To release resources immediately, use the object's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method, if available.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The only time you should set a variable to <ph id="ph1">`Nothing`</ph> is when its lifetime is long relative to the time the garbage collector takes to detect orphaned objects.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Initialization and Termination of Components<ept id="p1">](http://msdn.microsoft.com/library/58444076-a9d2-4c91-b3f6-0e180dc0695d)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](../../../../standard/garbage-collection/unmanaged.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../../visual-basic/language-reference/nothing.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>