{"content":"---\ntitle: \"How to: Control the Scope of a Variable (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"variables [Visual Basic], scope\"\n  - \"declared elements, scope\"\n  - \"visibility, declared elements\"\n  - \"variables [Visual Basic], visibility\"\n  - \"scope, declared elements\"\n  - \"scope, variables\"\n  - \"scope, Visual Basic\"\n  - \"declared elements, visibility\"\n  - \"visibility, variables\"\nms.assetid: 44b7f62a-cb5c-4d50-bce9-60ae68f87072\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Control the Scope of a Variable (Visual Basic)\nNormally, a variable is in *scope*, or visible for reference, throughout the region in which you declare it. In some cases, the variable's *access level* can influence its scope.  \n  \n For more information, see [Scope in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md).  \n  \n## Scope at Block or Procedure Level  \n  \n#### To make a variable visible only within a block  \n  \n-   Place the [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md) for the variable between the initiating and terminating declaration statements of that block, for example between the `For` and `Next` statements of a `For` loop.  \n  \n     You can refer to the variable only from within the block.  \n  \n#### To make a variable visible only within a procedure  \n  \n-   Place the `Dim` statement for the variable inside the procedure but outside any block (such as a `With`...`End With` block).  \n  \n     You can refer to the variable only from within the procedure, including inside any block contained in the procedure.  \n  \n## Scope at Module or Namespace Level  \n For convenience, the single term *module level* applies equally to modules, classes, and structures. The access level of a module level variable determines its scope. The namespace that contains the module, class, or structure also influences the scope.  \n  \n#### To make a variable visible throughout a module, class, or structure  \n  \n1.  Place the `Dim` statement for the variable inside the module, class, or structure, but outside any procedure.  \n  \n2.  Include the [Private](../../../../visual-basic/language-reference/modifiers/private.md) keyword in the `Dim` statement.  \n  \n3.  You can refer to the variable from anywhere within the module, class, or structure, but not from outside it.  \n  \n#### To make a variable visible throughout a namespace  \n  \n1.  Place the `Dim` statement for the variable inside the module, class, or structure, but outside any procedure.  \n  \n2.  Include the [Friend](../../../../visual-basic/language-reference/modifiers/friend.md) or [Public](../../../../visual-basic/language-reference/modifiers/public.md) keyword in the `Dim` statement.  \n  \n3.  You can refer to the variable from anywhere within the namespace containing the module, class, or structure.  \n  \n## Example  \n The following example declares a variable at module level and limits its visibility to code within the module.  \n  \n```  \nModule demonstrateScope  \n    Private strMsg As String  \n    Sub initializePrivateVariable()  \n        strMsg = \"This variable cannot be used outside this module.\"  \n    End Sub  \n    Sub usePrivateVariable()  \n        MsgBox(strMsg)  \n    End Sub  \nEnd Module  \n```  \n  \n In the preceding example, all the procedures defined in module `demonstrateScope` can refer to the `String` variable `strMsg`. When the `usePrivateVariable` procedure is called, it displays the contents of the string variable `strMsg` in a dialog box.  \n  \n With the following alteration to the preceding example, the string variable `strMsg` can be referred to by code anywhere in the namespace of its declaration.  \n  \n```  \nPublic strMsg As String  \n```  \n  \n## Robust Programming  \n The narrower the scope of a variable, the fewer opportunities you have for accidentally referring to it in place of another variable with the same name. You can also minimize problems of reference matching.  \n  \n## .NET Framework Security  \n The narrower the scope of a variable, the smaller the chances that malicious code can make improper use of it.  \n  \n## See Also  \n [Scope in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)   \n [Lifetime in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)   \n [Access Levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)   \n [Variables](../../../../visual-basic/programming-guide/language-features/variables/index.md)   \n [Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)   \n [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)","nodes":[{"pos":[12,83],"content":"How to: Control the Scope of a Variable (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Control the Scope of a Variable (Visual Basic) | Microsoft Docs","pos":[0,71]}]},{"pos":[870,924],"content":"How to: Control the Scope of a Variable (Visual Basic)","linkify":"How to: Control the Scope of a Variable (Visual Basic)","nodes":[{"content":"How to: Control the Scope of a Variable (Visual Basic)","pos":[0,54]}]},{"content":"Normally, a variable is in <bpt id=\"p1\">*</bpt>scope<ept id=\"p1\">*</ept>, or visible for reference, throughout the region in which you declare it.","pos":[925,1033],"source":"Normally, a variable is in *scope*, or visible for reference, throughout the region in which you declare it."},{"content":"In some cases, the variable's <bpt id=\"p1\">*</bpt>access level<ept id=\"p1\">*</ept> can influence its scope.","pos":[1034,1103],"source":" In some cases, the variable's *access level* can influence its scope."},{"pos":[1110,1249],"content":"For more information, see <bpt id=\"p1\">[</bpt>Scope in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept>.","source":"For more information, see [Scope in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)."},{"pos":[1258,1291],"content":"Scope at Block or Procedure Level","linkify":"Scope at Block or Procedure Level","nodes":[{"content":"Scope at Block or Procedure Level","pos":[0,33]}]},{"pos":[1302,1348],"content":"To make a variable visible only within a block","linkify":"To make a variable visible only within a block","nodes":[{"content":"To make a variable visible only within a block","pos":[0,46]}]},{"pos":[1358,1619],"content":"Place the <bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept> for the variable between the initiating and terminating declaration statements of that block, for example between the <ph id=\"ph1\">`For`</ph> and <ph id=\"ph2\">`Next`</ph> statements of a <ph id=\"ph3\">`For`</ph> loop.","source":"Place the [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md) for the variable between the initiating and terminating declaration statements of that block, for example between the `For` and `Next` statements of a `For` loop."},{"content":"You can refer to the variable only from within the block.","pos":[1630,1687]},{"pos":[1698,1748],"content":"To make a variable visible only within a procedure","linkify":"To make a variable visible only within a procedure","nodes":[{"content":"To make a variable visible only within a procedure","pos":[0,50]}]},{"pos":[1758,1882],"content":"Place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside the procedure but outside any block (such as a <ph id=\"ph2\">`With`</ph>...<ph id=\"ph3\">`End With`</ph> block).","source":"Place the `Dim` statement for the variable inside the procedure but outside any block (such as a `With`...`End With` block)."},{"content":"You can refer to the variable only from within the procedure, including inside any block contained in the procedure.","pos":[1893,2009]},{"pos":[2018,2052],"content":"Scope at Module or Namespace Level","linkify":"Scope at Module or Namespace Level","nodes":[{"content":"Scope at Module or Namespace Level","pos":[0,34]}]},{"content":"For convenience, the single term <bpt id=\"p1\">*</bpt>module level<ept id=\"p1\">*</ept> applies equally to modules, classes, and structures.","pos":[2056,2156],"source":"For convenience, the single term *module level* applies equally to modules, classes, and structures."},{"content":"The access level of a module level variable determines its scope.","pos":[2157,2222]},{"content":"The namespace that contains the module, class, or structure also influences the scope.","pos":[2223,2309]},{"pos":[2320,2387],"content":"To make a variable visible throughout a module, class, or structure","linkify":"To make a variable visible throughout a module, class, or structure","nodes":[{"content":"To make a variable visible throughout a module, class, or structure","pos":[0,67]}]},{"pos":[2397,2506],"content":"Place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside the module, class, or structure, but outside any procedure.","source":"Place the `Dim` statement for the variable inside the module, class, or structure, but outside any procedure."},{"pos":[2516,2635],"content":"Include the <bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/private.md)</ept> keyword in the <ph id=\"ph1\">`Dim`</ph> statement.","source":"Include the [Private](../../../../visual-basic/language-reference/modifiers/private.md) keyword in the `Dim` statement."},{"content":"You can refer to the variable from anywhere within the module, class, or structure, but not from outside it.","pos":[2645,2753]},{"pos":[2764,2813],"content":"To make a variable visible throughout a namespace","linkify":"To make a variable visible throughout a namespace","nodes":[{"content":"To make a variable visible throughout a namespace","pos":[0,49]}]},{"pos":[2823,2932],"content":"Place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside the module, class, or structure, but outside any procedure.","source":"Place the `Dim` statement for the variable inside the module, class, or structure, but outside any procedure."},{"pos":[2942,3136],"content":"Include the <bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept> or <bpt id=\"p2\">[</bpt>Public<ept id=\"p2\">](../../../../visual-basic/language-reference/modifiers/public.md)</ept> keyword in the <ph id=\"ph1\">`Dim`</ph> statement.","source":"Include the [Friend](../../../../visual-basic/language-reference/modifiers/friend.md) or [Public](../../../../visual-basic/language-reference/modifiers/public.md) keyword in the `Dim` statement."},{"content":"You can refer to the variable from anywhere within the namespace containing the module, class, or structure.","pos":[3146,3254]},{"pos":[3263,3270],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example declares a variable at module level and limits its visibility to code within the module.","pos":[3274,3384]},{"content":"In the preceding example, all the procedures defined in module <ph id=\"ph1\">`demonstrateScope`</ph> can refer to the <ph id=\"ph2\">`String`</ph> variable <ph id=\"ph3\">`strMsg`</ph>.","pos":[3669,3795],"source":"In the preceding example, all the procedures defined in module `demonstrateScope` can refer to the `String` variable `strMsg`."},{"content":"When the <ph id=\"ph1\">`usePrivateVariable`</ph> procedure is called, it displays the contents of the string variable <ph id=\"ph2\">`strMsg`</ph> in a dialog box.","pos":[3796,3920],"source":" When the `usePrivateVariable` procedure is called, it displays the contents of the string variable `strMsg` in a dialog box."},{"pos":[3927,4084],"content":"With the following alteration to the preceding example, the string variable <ph id=\"ph1\">`strMsg`</ph> can be referred to by code anywhere in the namespace of its declaration.","source":"With the following alteration to the preceding example, the string variable `strMsg` can be referred to by code anywhere in the namespace of its declaration."},{"pos":[4134,4152],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"The narrower the scope of a variable, the fewer opportunities you have for accidentally referring to it in place of another variable with the same name.","pos":[4156,4308]},{"content":"You can also minimize problems of reference matching.","pos":[4309,4362]},{"pos":[4371,4394],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"The narrower the scope of a variable, the smaller the chances that malicious code can make improper use of it.","pos":[4398,4508]},{"pos":[4517,4525],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Scope in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept><ph id=\"ph1\"> </ph>","pos":[4529,4642],"source":"[Scope in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Lifetime in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)</ept><ph id=\"ph1\"> </ph>","pos":[4645,4765],"source":" [Lifetime in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept><ph id=\"ph1\"> </ph>","pos":[4768,4898],"source":" [Access Levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4901,4995],"source":" [Variables](../../../../visual-basic/programming-guide/language-features/variables/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Variable Declaration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept><ph id=\"ph1\"> </ph>","pos":[4998,5118],"source":" [Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","pos":[5121,5210],"source":" [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)"}]}