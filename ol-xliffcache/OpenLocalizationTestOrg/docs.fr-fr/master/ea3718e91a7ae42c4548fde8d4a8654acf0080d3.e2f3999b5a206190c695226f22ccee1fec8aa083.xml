{"content":"---\ntitle: \"Compiler Error CS1919 | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"CS1919\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS1919\"\nms.assetid: 5d1e468b-ddec-4edd-a8b1-9c65c2332778\ncaps.latest.revision: 8\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error CS1919\nUnsafe type 'type name' cannot be used in object creation.  \n  \n The `new` operator creates objects only on the managed heap. However, you can create objects in unmanaged memory indirectly by using the interoperability capabilities of the language to call native methods that return pointers.  \n  \n## To correct this error  \n  \n1.  Use a safe type in the new object creation expression. For example, use `char` or `int` instead of `char*` or `int*`.  \n  \n2.  If you must create objects in unmanaged memory, use a Win32 or COM method or else write your own function in C or C++ and call it from C#.  \n  \n## Example  \n The following example generates CS1919 because a pointer type is unsafe:  \n  \n```  \n// cs1919.cs  \n// Compile with: /unsafe  \nunsafe public class C  \n{  \n    public static int Main()  \n    {  \n        var col1 = new int* { }; // CS1919  \n        var col2 = new char* { }; // CS1919  \n        return 1;  \n    }  \n}  \n```  \n  \n## See Also  \n [Interoperability](../../../csharp/programming-guide/interop/index.md)","nodes":[{"pos":[12,50],"content":"Compiler Error CS1919 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error CS1919 | Microsoft Docs","pos":[0,38]}]},{"pos":[542,563],"content":"Compiler Error CS1919","linkify":"Compiler Error CS1919","nodes":[{"content":"Compiler Error CS1919","pos":[0,21]}]},{"content":"Unsafe type 'type name' cannot be used in object creation.","pos":[564,622]},{"content":"The <ph id=\"ph1\">`new`</ph> operator creates objects only on the managed heap.","pos":[629,689],"source":"The `new` operator creates objects only on the managed heap."},{"content":"However, you can create objects in unmanaged memory indirectly by using the interoperability capabilities of the language to call native methods that return pointers.","pos":[690,856]},{"pos":[865,886],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Use a safe type in the new object creation expression.","pos":[896,950]},{"content":"For example, use <ph id=\"ph1\">`char`</ph> or <ph id=\"ph2\">`int`</ph> instead of <ph id=\"ph3\">`char*`</ph> or <ph id=\"ph4\">`int*`</ph>.","pos":[951,1013],"source":" For example, use `char` or `int` instead of `char*` or `int*`."},{"content":"If you must create objects in unmanaged memory, use a Win32 or COM method or else write your own function in C or C++ and call it from C#.","pos":[1023,1161]},{"pos":[1170,1177],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example generates CS1919 because a pointer type is unsafe:","pos":[1181,1253]},{"pos":[1509,1517],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1521,1591],"content":"<bpt id=\"p1\">[</bpt>Interoperability<ept id=\"p1\">](../../../csharp/programming-guide/interop/index.md)</ept>","source":"[Interoperability](../../../csharp/programming-guide/interop/index.md)"}]}