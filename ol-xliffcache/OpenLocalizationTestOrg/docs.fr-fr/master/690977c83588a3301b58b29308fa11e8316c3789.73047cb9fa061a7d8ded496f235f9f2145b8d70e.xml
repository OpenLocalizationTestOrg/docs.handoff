{"content":"---\ntitle: \"Destroying Threads | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"destroying threads\"\n  - \"threading [.NET Framework], destroying threads\"\nms.assetid: df54e648-c5d1-47c9-bd29-8e4438c1db6d\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Destroying Threads\nThe <xref:System.Threading.Thread.Abort%2A> method is used to stop a managed thread permanently. When you call <xref:System.Threading.Thread.Abort%2A>, the common language runtime throws a <xref:System.Threading.ThreadAbortException> in the target thread, which the target thread can catch. For more information, see <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  If a thread is executing unmanaged code when its <xref:System.Threading.Thread.Abort%2A> method is called, the runtime marks it <xref:System.Threading.ThreadState?displayProperty=fullName>. The exception is thrown when the thread returns to managed code.  \n  \n Once a thread is aborted, it cannot be restarted.  \n  \n The <xref:System.Threading.Thread.Abort%2A> method does not cause the thread to abort immediately, because the target thread can catch the <xref:System.Threading.ThreadAbortException> and execute arbitrary amounts of code in a `finally` block. You can call <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> if you need to wait until the thread has ended. <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> is a blocking call that does not return until the thread has actually stopped executing or an optional timeout interval has elapsed. The aborted thread could call the <xref:System.Threading.Thread.ResetAbort%2A> method or perform unbounded processing in a `finally` block, so if you do not specify a timeout, the wait is not guaranteed to end.  \n  \n Threads that are waiting on a call to the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method can be interrupted by other threads that call <xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName>.  \n  \n## Handling ThreadAbortException  \n If you expect your thread to be aborted, either as a result of calling <xref:System.Threading.Thread.Abort%2A> from your own code or as a result of unloading an application domain in which the thread is running (<xref:System.AppDomain.Unload%2A?displayProperty=fullName> uses <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> to terminate threads), your thread must handle the <xref:System.Threading.ThreadAbortException> and perform any final processing in a `finally` clause, as shown in the following code.  \n  \n```vb  \nTry  \n    ' Code that is executing when the thread is aborted.  \nCatch ex As ThreadAbortException  \n    ' Clean-up code can go here.  \n    ' If there is no Finally clause, ThreadAbortException is  \n    ' re-thrown by the system at the end of the Catch clause.   \nFinally  \n    ' Clean-up code can go here.  \nEnd Try  \n' Do not put clean-up code here, because the exception   \n' is rethrown at the end of the Finally clause.  \n```  \n  \n```csharp  \ntry   \n{  \n    // Code that is executing when the thread is aborted.  \n}   \ncatch (ThreadAbortException ex)   \n{  \n    // Clean-up code can go here.  \n    // If there is no Finally clause, ThreadAbortException is  \n    // re-thrown by the system at the end of the Catch clause.   \n}  \n// Do not put clean-up code here, because the exception   \n// is rethrown at the end of the Finally clause.  \n```  \n  \n Your clean-up code must be in the `catch` clause or the `finally` clause, because a <xref:System.Threading.ThreadAbortException> is rethrown by the system at the end of the `finally` clause, or at the end of the `catch` clause if there is no `finally` clause.  \n  \n You can prevent the system from rethrowing the exception by calling the <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> method. However, you should do this only if your own code caused the <xref:System.Threading.ThreadAbortException>.  \n  \n## See Also  \n <xref:System.Threading.ThreadAbortException>   \n <xref:System.Threading.Thread>   \n [Using Threads and Threading](../../../docs/standard/threading/using-threads-and-threading.md)","nodes":[{"pos":[4,432],"nodes":[{"content":"Destroying Threads | Microsoft Docs","nodes":[{"pos":[0,35],"content":"Destroying Threads | Microsoft Docs","nodes":[{"content":"Destroying Threads | Microsoft Docs","pos":[0,35]}]}],"pos":[6,44],"yaml":true}],"content":"title: \"Destroying Threads | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"destroying threads\"\n  - \"threading [.NET Framework], destroying threads\"\nms.assetid: df54e648-c5d1-47c9-bd29-8e4438c1db6d\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[439,457],"content":"Destroying Threads","linkify":"Destroying Threads","nodes":[{"content":"Destroying Threads","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method is used to stop a managed thread permanently.","pos":[458,554],"source":"The <xref:System.Threading.Thread.Abort%2A> method is used to stop a managed thread permanently."},{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>, the common language runtime throws a <ph id=\"ph2\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> in the target thread, which the target thread can catch.","pos":[555,748],"source":" When you call <xref:System.Threading.Thread.Abort%2A>, the common language runtime throws a <xref:System.Threading.ThreadAbortException> in the target thread, which the target thread can catch."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>.","pos":[749,840],"source":" For more information, see <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>."},{"pos":[848,1113],"content":"[!NOTE]\n If a thread is executing unmanaged code when its <xref:System.Threading.Thread.Abort%2A> method is called, the runtime marks it <xref:System.Threading.ThreadState?displayProperty=fullName>. The exception is thrown when the thread returns to managed code.","leadings":["","> "],"nodes":[{"content":"If a thread is executing unmanaged code when its <xref:System.Threading.Thread.Abort%2A> method is called, the runtime marks it <xref:System.Threading.ThreadState?displayProperty=fullName>. The exception is thrown when the thread returns to managed code.","pos":[9,263],"nodes":[{"content":"If a thread is executing unmanaged code when its <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method is called, the runtime marks it <ph id=\"ph2\">&lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt;</ph>.","pos":[0,189],"source":"If a thread is executing unmanaged code when its <xref:System.Threading.Thread.Abort%2A> method is called, the runtime marks it <xref:System.Threading.ThreadState?displayProperty=fullName>."},{"content":"The exception is thrown when the thread returns to managed code.","pos":[190,254]}]}]},{"content":"Once a thread is aborted, it cannot be restarted.","pos":[1120,1169]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method does not cause the thread to abort immediately, because the target thread can catch the <ph id=\"ph2\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> and execute arbitrary amounts of code in a <ph id=\"ph3\">`finally`</ph> block.","pos":[1176,1419],"source":"The <xref:System.Threading.Thread.Abort%2A> method does not cause the thread to abort immediately, because the target thread can catch the <xref:System.Threading.ThreadAbortException> and execute arbitrary amounts of code in a `finally` block."},{"content":"You can call <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;</ph> if you need to wait until the thread has ended.","pos":[1420,1544],"source":" You can call <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> if you need to wait until the thread has ended."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;</ph> is a blocking call that does not return until the thread has actually stopped executing or an optional timeout interval has elapsed.","pos":[1545,1741],"source":" <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> is a blocking call that does not return until the thread has actually stopped executing or an optional timeout interval has elapsed."},{"content":"The aborted thread could call the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph> method or perform unbounded processing in a <ph id=\"ph2\">`finally`</ph> block, so if you do not specify a timeout, the wait is not guaranteed to end.","pos":[1742,1952],"source":" The aborted thread could call the <xref:System.Threading.Thread.ResetAbort%2A> method or perform unbounded processing in a `finally` block, so if you do not specify a timeout, the wait is not guaranteed to end."},{"content":"Threads that are waiting on a call to the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;</ph> method can be interrupted by other threads that call <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph>.","pos":[1959,2187],"source":"Threads that are waiting on a call to the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method can be interrupted by other threads that call <xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName>."},{"pos":[2196,2225],"content":"Handling ThreadAbortException","linkify":"Handling ThreadAbortException","nodes":[{"content":"Handling ThreadAbortException","pos":[0,29]}]},{"pos":[2229,2753],"content":"If you expect your thread to be aborted, either as a result of calling <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> from your own code or as a result of unloading an application domain in which the thread is running (<ph id=\"ph2\">&lt;xref:System.AppDomain.Unload%2A?displayProperty=fullName&gt;</ph> uses <ph id=\"ph3\">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph> to terminate threads), your thread must handle the <ph id=\"ph4\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> and perform any final processing in a <ph id=\"ph5\">`finally`</ph> clause, as shown in the following code.","source":"If you expect your thread to be aborted, either as a result of calling <xref:System.Threading.Thread.Abort%2A> from your own code or as a result of unloading an application domain in which the thread is running (<xref:System.AppDomain.Unload%2A?displayProperty=fullName> uses <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> to terminate threads), your thread must handle the <xref:System.Threading.ThreadAbortException> and perform any final processing in a `finally` clause, as shown in the following code."},{"pos":[3619,3878],"content":"Your clean-up code must be in the <ph id=\"ph1\">`catch`</ph> clause or the <ph id=\"ph2\">`finally`</ph> clause, because a <ph id=\"ph3\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> is rethrown by the system at the end of the <ph id=\"ph4\">`finally`</ph> clause, or at the end of the <ph id=\"ph5\">`catch`</ph> clause if there is no <ph id=\"ph6\">`finally`</ph> clause.","source":"Your clean-up code must be in the `catch` clause or the `finally` clause, because a <xref:System.Threading.ThreadAbortException> is rethrown by the system at the end of the `finally` clause, or at the end of the `catch` clause if there is no `finally` clause."},{"content":"You can prevent the system from rethrowing the exception by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName&gt;</ph> method.","pos":[3885,4034],"source":"You can prevent the system from rethrowing the exception by calling the <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> method."},{"content":"However, you should do this only if your own code caused the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.","pos":[4035,4141],"source":" However, you should do this only if your own code caused the <xref:System.Threading.ThreadAbortException>."},{"pos":[4150,4158],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>","pos":[4162,4206],"source":"<xref:System.Threading.ThreadAbortException> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Thread&gt;</ph>","pos":[4211,4241],"source":"<xref:System.Threading.Thread> "},{"content":"<bpt id=\"p1\">[</bpt>Using Threads and Threading<ept id=\"p1\">](../../../docs/standard/threading/using-threads-and-threading.md)</ept>","pos":[4246,4340],"source":"[Using Threads and Threading](../../../docs/standard/threading/using-threads-and-threading.md)"}]}