{"content":"---\ntitle: Visual Studio Tools for Docker\ndescription: Using Visual Studio Tools for Docker \nkeywords: .NET, .NET Core, Docker, ASP.NET Core, Visual Studio\nauthor: spboyer\nms.author: shboyer\nms.date: 04/27/2017\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-docker\nms.devlang: dotnet\nms.assetid: 1f3b9a68-4dea-4b60-8cb3-f46164eedbbf\n---\n\n# Visual Studio Tools for Docker\n\n[Microsoft Visual Studio 2017](https://www.visualstudio.com/) with [Docker for Windows](https://docs.docker.com/docker-for-windows/install/) supports building, debugging, and running .NET Framework and .NET Core web and console applications using Windows and Linux containers.\n\n## Prerequisites\n\n- [Microsoft Visual Studio 2017](https://www.visualstudio.com/)\n- [Docker for Windows](https://docs.docker.com/docker-for-windows/install/)\n\n## Installation and setup\n\nInstall [Microsoft Visual Studio 2017](https://www.visualstudio.com/) with the .NET Core workload. Review the information at [Docker for Windows: What to know before you install](https://docs.docker.com/docker-for-windows/install/#what-to-know-before-you-install) and install [Docker For Windows](https://docs.docker.com/docker-for-windows/install/).\n\nA required configuration is to setup **[Shared Drives](https://docs.docker.com/docker-for-windows/#shared-drives)** in Docker for Windows. The setting is required for the volume mapping and debugging support.\n\nRight click the Docker icon in the System Tray, click Settings and select Shared Drives.\n\n![Shared Drives](./media/visual-studio-tools-for-docker/settings-shared-drives-win.png)\n\n## Create an ASP.NET Web Application and add Docker Support\n\nUsing Visual Studio, create a new ASP.NET Core Web Application. When the application is loaded, either select **Add Docker Support** from the **Project Menu** or right click the project from the Solution Explorer and select **Add** > **Docker Support**.\n\nProject Menu\n\n![Project Add Docker Support](./media/visual-studio-tools-for-docker/project-add-docker-support.png)\n\nProject Context Menu\n\n![Right Click Add Docker Support](./media/visual-studio-tools-for-docker/right-click-add-docker-support.png)\n\nThe following files are added to the project.\n\n- **Dockerfile**: the Docker file for ASP.NET Core applications is based on the [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore) image. This image includes the ASP.NET Core NuGet packages, which have been pre-jitted improving startup performance. When building .NET Core Console Applications, the Dockerfile FROM will reference the most recent [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet) image.   \n- **docker-compose.yml**: base Docker Compose file used to define the collection of images to be built and run with docker-compose build/run.   \n- **docker-compose.dev.debug.yml**: additional docker-compose file with for iterative changes when your configuration is set to debug. Visual Studio will call -f docker-compose.yml -f docker-compose.dev.debug.yml to merge these together. This compose file is used by Visual Studio development tools.   \n- **docker-compose.dev.release.yml**: additional Docker Compose file to debug your release definition. It will volume mount the debugger so it doesn't change the contents of the production image.  \n\nThe docker-compose.yml file contains the name of the image that is created when project is run. \n\n```\nversion '2'\n\nservices:\n  hellodockertools:\n    image:  user/hellodockertools${TAG}\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"80\"\n\n``` \n\nIn this example, `image: user/hellodockertools${TAG}` generates the image `user/hellodockertools:dev` when the application is run in **Debug** mode and `user/hellodockertools:latest` in **Release** mode respectively. \n\nYou will want to change the `user` to your Docker Hub username if you plan to push the image to the registry. For example, `spboyer/hellodockertools`, or change to your private registry url `privateregistry.domain.com/` depending on your configuration.\n\n### Debugging\n\nSelect **Docker** from the debug dropdown in the toolbar and use F5 to start debugging the application. \n\n- The microsoft/aspnetcore image is acquired (if not already in your cache)\n- ASPNETCORE_ENVIRONMENT is set to Development within the container\n- PORT 80 is EXPOSED and mapped to a dynamically assigned port for localhost. The port is determined by the docker host and can be queried with docker ps. \n- Your application is copied to the container\n- Default browser is launched with the debugger attached to the container, using the dynamically assigned port. \n\nThe resulting Docker image built is the `dev` image of your application with the `microsoft/aspnetcore` images as the base image.\nNote: the dev image is empty of your app contents as Debug confgurations use volume mounting to provide the iterative experience. To push an image, use the Release configuration.\n\n```console\nREPOSITORY                  TAG         IMAGE ID            CREATED         SIZE\nspboyer/hellodockertools    dev         0b6e2e44b3df        4 minutes ago   268.9 MB\nmicrosoft/aspnetcore        1.0.1       189ad4312ce7        5 days ago      268.9 MB\n```\n\nThe application is running using the container which you can see by running the `docker ps` command.\n\n```console\nCONTAINER ID        IMAGE                          COMMAND               CREATED             STATUS              PORTS                   NAMES\n3f240cf686c9        spboyer/hellodockertools:dev   \"tail -f /dev/null\"   4 minutes ago       Up 4 minutes        0.0.0.0:32769->80/tcp   hellodockertools_hellodockertools_1\n```\n\n### Edit and Continue\n\nChanges to static files and/or razor template files (.cshtml) are automatically updated without the need of a compilation step. Make the change, save and tap refresh in the browser to view the update.  \n\nModifications to code files require compiling and a restart of Kestrel within the container. After making the change, use CTRL + F5 to perform the process and start the application within the container. The Docker container is not rebuilt or stopped; using `docker ps` in the command line you can see that the original container is still running as of 10 minutes ago. \n\n```console\nCONTAINER ID        IMAGE                          COMMAND               CREATED             STATUS              PORTS                   NAMES\n3f240cf686c9        spboyer/hellodockertools:dev   \"tail -f /dev/null\"   10 minutes ago      Up 10 minutes       0.0.0.0:32769->80/tcp   hellodockertools_hellodockertools_1\n```\n\n### Publishing Docker images\n\nOnce you have completed the develop and debug cycle of your application, the Visual Studio Tools for Docker will help you create the production image of your application. Change the debug dropdown to **Release** and build the application. The tooling will produce the image with the `:latest` tag which you can push to your private registry or Docker Hub. \n\nUsing the `docker images` you can see the list of images.\n\n```console\nREPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE\nspboyer/hellodockertools   latest              8184ae38ba91        5 seconds ago       278.4 MB\nspboyer/hellodockertools   dev                 0b6e2e44b3df        About an hour ago   268.9 MB\nmicrosoft/aspnetcore       1.0.1               189ad4312ce7        5 days ago          268.9 MB\n```\n\nThere may be an expectation for the production or release image to be smaller in size by comparison to the **dev** image, however through the use of the volume mapping; the debugger and application were actually being run from your local machine and not within the container. The **latest** image has packaged the entire application code needed to run the application on a host machine, therefore the delta is the size of your application code.\n","nodes":[{"pos":[11,41],"content":"Visual Studio Tools for Docker","needQuote":true,"needEscape":true,"nodes":[{"content":"Visual Studio Tools for Docker","pos":[0,30]}]},{"pos":[55,91],"content":"Using Visual Studio Tools for Docker","needQuote":true,"needEscape":true,"nodes":[{"content":"Using Visual Studio Tools for Docker","pos":[0,36]}]},{"pos":[103,155],"content":".NET, .NET Core, Docker, ASP.NET Core, Visual Studio","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core, Docker, ASP.NET Core, Visual Studio","pos":[0,52]}]},{"pos":[352,382],"content":"Visual Studio Tools for Docker","linkify":"Visual Studio Tools for Docker","nodes":[{"content":"Visual Studio Tools for Docker","pos":[0,30]}]},{"pos":[384,660],"content":"<bpt id=\"p1\">[</bpt>Microsoft Visual Studio 2017<ept id=\"p1\">](https://www.visualstudio.com/)</ept> with <bpt id=\"p2\">[</bpt>Docker for Windows<ept id=\"p2\">](https://docs.docker.com/docker-for-windows/install/)</ept> supports building, debugging, and running .NET Framework and .NET Core web and console applications using Windows and Linux containers.","source":"[Microsoft Visual Studio 2017](https://www.visualstudio.com/) with [Docker for Windows](https://docs.docker.com/docker-for-windows/install/) supports building, debugging, and running .NET Framework and .NET Core web and console applications using Windows and Linux containers."},{"pos":[665,678],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[682,743],"content":"<bpt id=\"p1\">[</bpt>Microsoft Visual Studio 2017<ept id=\"p1\">](https://www.visualstudio.com/)</ept>","source":"[Microsoft Visual Studio 2017](https://www.visualstudio.com/)"},{"pos":[746,819],"content":"<bpt id=\"p1\">[</bpt>Docker for Windows<ept id=\"p1\">](https://docs.docker.com/docker-for-windows/install/)</ept>","source":"[Docker for Windows](https://docs.docker.com/docker-for-windows/install/)"},{"pos":[824,846],"content":"Installation and setup","linkify":"Installation and setup","nodes":[{"content":"Installation and setup","pos":[0,22]}]},{"content":"Install <bpt id=\"p1\">[</bpt>Microsoft Visual Studio 2017<ept id=\"p1\">](https://www.visualstudio.com/)</ept> with the .NET Core workload.","pos":[848,946],"source":"Install [Microsoft Visual Studio 2017](https://www.visualstudio.com/) with the .NET Core workload."},{"content":"Review the information at <bpt id=\"p1\">[</bpt>Docker for Windows: What to know before you install<ept id=\"p1\">](https://docs.docker.com/docker-for-windows/install/#what-to-know-before-you-install)</ept> and install <bpt id=\"p2\">[</bpt>Docker For Windows<ept id=\"p2\">](https://docs.docker.com/docker-for-windows/install/)</ept>.","pos":[947,1198],"source":" Review the information at [Docker for Windows: What to know before you install](https://docs.docker.com/docker-for-windows/install/#what-to-know-before-you-install) and install [Docker For Windows](https://docs.docker.com/docker-for-windows/install/)."},{"content":"A required configuration is to setup <bpt id=\"p1\">**</bpt><bpt id=\"p2\">[</bpt>Shared Drives<ept id=\"p2\">](https://docs.docker.com/docker-for-windows/#shared-drives)</ept><ept id=\"p1\">**</ept> in Docker for Windows.","pos":[1200,1338],"source":"A required configuration is to setup **[Shared Drives](https://docs.docker.com/docker-for-windows/#shared-drives)** in Docker for Windows."},{"content":"The setting is required for the volume mapping and debugging support.","pos":[1339,1408]},{"content":"Right click the Docker icon in the System Tray, click Settings and select Shared Drives.","pos":[1410,1498]},{"content":"Shared Drives","pos":[1502,1515]},{"pos":[1592,1648],"content":"Create an ASP.NET Web Application and add Docker Support","linkify":"Create an ASP.NET Web Application and add Docker Support","nodes":[{"content":"Create an ASP.NET Web Application and add Docker Support","pos":[0,56]}]},{"content":"Using Visual Studio, create a new ASP.NET Core Web Application.","pos":[1650,1713]},{"content":"When the application is loaded, either select <bpt id=\"p1\">**</bpt>Add Docker Support<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Project Menu<ept id=\"p2\">**</ept> or right click the project from the Solution Explorer and select <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p4\">**</bpt>Docker Support<ept id=\"p4\">**</ept>.","pos":[1714,1903],"source":" When the application is loaded, either select **Add Docker Support** from the **Project Menu** or right click the project from the Solution Explorer and select **Add** > **Docker Support**."},{"content":"Project Menu","pos":[1905,1917]},{"content":"Project Add Docker Support","pos":[1921,1947]},{"content":"Project Context Menu","pos":[2021,2041]},{"content":"Right Click Add Docker Support","pos":[2045,2075]},{"content":"The following files are added to the project.","pos":[2153,2198]},{"content":"<bpt id=\"p1\">**</bpt>Dockerfile<ept id=\"p1\">**</ept>: the Docker file for ASP.NET Core applications is based on the <bpt id=\"p2\">[</bpt>microsoft/aspnetcore<ept id=\"p2\">](https://hub.docker.com/r/microsoft/aspnetcore)</ept> image.","pos":[2202,2356],"source":"**Dockerfile**: the Docker file for ASP.NET Core applications is based on the [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore) image."},{"content":"This image includes the ASP.NET Core NuGet packages, which have been pre-jitted improving startup performance.","pos":[2357,2467]},{"content":"When building .NET Core Console Applications, the Dockerfile FROM will reference the most recent <bpt id=\"p1\">[</bpt>microsoft/dotnet<ept id=\"p1\">](https://hub.docker.com/r/microsoft/dotnet)</ept> image.","pos":[2468,2633],"source":" When building .NET Core Console Applications, the Dockerfile FROM will reference the most recent [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet) image."},{"pos":[2639,2778],"content":"<bpt id=\"p1\">**</bpt>docker-compose.yml<ept id=\"p1\">**</ept>: base Docker Compose file used to define the collection of images to be built and run with docker-compose build/run.","source":"**docker-compose.yml**: base Docker Compose file used to define the collection of images to be built and run with docker-compose build/run."},{"content":"<bpt id=\"p1\">**</bpt>docker-compose.dev.debug.yml<ept id=\"p1\">**</ept>: additional docker-compose file with for iterative changes when your configuration is set to debug.","pos":[2784,2916],"source":"**docker-compose.dev.debug.yml**: additional docker-compose file with for iterative changes when your configuration is set to debug."},{"content":"Visual Studio will call -f docker-compose.yml -f docker-compose.dev.debug.yml to merge these together.","pos":[2917,3019]},{"content":"This compose file is used by Visual Studio development tools.","pos":[3020,3081]},{"content":"<bpt id=\"p1\">**</bpt>docker-compose.dev.release.yml<ept id=\"p1\">**</ept>: additional Docker Compose file to debug your release definition.","pos":[3087,3187],"source":"**docker-compose.dev.release.yml**: additional Docker Compose file to debug your release definition."},{"content":"It will volume mount the debugger so it doesn't change the contents of the production image.","pos":[3188,3280]},{"content":"The docker-compose.yml file contains the name of the image that is created when project is run.","pos":[3284,3379]},{"pos":[3557,3773],"content":"In this example, <ph id=\"ph1\">`image: user/hellodockertools${TAG}`</ph> generates the image <ph id=\"ph2\">`user/hellodockertools:dev`</ph> when the application is run in <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> mode and <ph id=\"ph3\">`user/hellodockertools:latest`</ph> in <bpt id=\"p2\">**</bpt>Release<ept id=\"p2\">**</ept> mode respectively.","source":"In this example, `image: user/hellodockertools${TAG}` generates the image `user/hellodockertools:dev` when the application is run in **Debug** mode and `user/hellodockertools:latest` in **Release** mode respectively."},{"content":"You will want to change the <ph id=\"ph1\">`user`</ph> to your Docker Hub username if you plan to push the image to the registry.","pos":[3776,3885],"source":"You will want to change the `user` to your Docker Hub username if you plan to push the image to the registry."},{"content":"For example, <ph id=\"ph1\">`spboyer/hellodockertools`</ph>, or change to your private registry url <ph id=\"ph2\">`privateregistry.domain.com/`</ph> depending on your configuration.","pos":[3886,4028],"source":" For example, `spboyer/hellodockertools`, or change to your private registry url `privateregistry.domain.com/` depending on your configuration."},{"pos":[4034,4043],"content":"Debugging","linkify":"Debugging","nodes":[{"content":"Debugging","pos":[0,9]}]},{"pos":[4045,4148],"content":"Select <bpt id=\"p1\">**</bpt>Docker<ept id=\"p1\">**</ept> from the debug dropdown in the toolbar and use F5 to start debugging the application.","source":"Select **Docker** from the debug dropdown in the toolbar and use F5 to start debugging the application."},{"content":"The microsoft/aspnetcore image is acquired (if not already in your cache)","pos":[4153,4226]},{"content":"ASPNETCORE_ENVIRONMENT is set to Development within the container","pos":[4229,4294]},{"content":"PORT 80 is EXPOSED and mapped to a dynamically assigned port for localhost.","pos":[4297,4372]},{"content":"The port is determined by the docker host and can be queried with docker ps.","pos":[4373,4449]},{"content":"Your application is copied to the container","pos":[4453,4496]},{"content":"Default browser is launched with the debugger attached to the container, using the dynamically assigned port.","pos":[4499,4608]},{"content":"The resulting Docker image built is the <ph id=\"ph1\">`dev`</ph> image of your application with the <ph id=\"ph2\">`microsoft/aspnetcore`</ph> images as the base image.","pos":[4611,4740],"source":"The resulting Docker image built is the `dev` image of your application with the `microsoft/aspnetcore` images as the base image."},{"content":"Note: the dev image is empty of your app contents as Debug confgurations use volume mounting to provide the iterative experience.","pos":[4741,4870],"source":"\nNote: the dev image is empty of your app contents as Debug confgurations use volume mounting to provide the iterative experience."},{"content":"To push an image, use the Release configuration.","pos":[4871,4919]},{"pos":[5188,5288],"content":"The application is running using the container which you can see by running the <ph id=\"ph1\">`docker ps`</ph> command.","source":"The application is running using the container which you can see by running the `docker ps` command."},{"pos":[5626,5643],"content":"Edit and Continue","linkify":"Edit and Continue","nodes":[{"content":"Edit and Continue","pos":[0,17]}]},{"content":"Changes to static files and/or razor template files (.cshtml) are automatically updated without the need of a compilation step.","pos":[5645,5772]},{"content":"Make the change, save and tap refresh in the browser to view the update.","pos":[5773,5845]},{"content":"Modifications to code files require compiling and a restart of Kestrel within the container.","pos":[5849,5941]},{"content":"After making the change, use CTRL + F5 to perform the process and start the application within the container.","pos":[5942,6051]},{"content":"The Docker container is not rebuilt or stopped; using <ph id=\"ph1\">`docker ps`</ph> in the command line you can see that the original container is still running as of 10 minutes ago.","pos":[6052,6216],"source":" The Docker container is not rebuilt or stopped; using `docker ps` in the command line you can see that the original container is still running as of 10 minutes ago."},{"pos":[6555,6579],"content":"Publishing Docker images","linkify":"Publishing Docker images","nodes":[{"content":"Publishing Docker images","pos":[0,24]}]},{"content":"Once you have completed the develop and debug cycle of your application, the Visual Studio Tools for Docker will help you create the production image of your application.","pos":[6581,6751]},{"content":"Change the debug dropdown to <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> and build the application.","pos":[6752,6819],"source":" Change the debug dropdown to **Release** and build the application."},{"content":"The tooling will produce the image with the <ph id=\"ph1\">`:latest`</ph> tag which you can push to your private registry or Docker Hub.","pos":[6820,6936],"source":" The tooling will produce the image with the `:latest` tag which you can push to your private registry or Docker Hub."},{"pos":[6939,6996],"content":"Using the <ph id=\"ph1\">`docker images`</ph> you can see the list of images.","source":"Using the `docker images` you can see the list of images."},{"content":"There may be an expectation for the production or release image to be smaller in size by comparison to the <bpt id=\"p1\">**</bpt>dev<ept id=\"p1\">**</ept> image, however through the use of the volume mapping; the debugger and application were actually being run from your local machine and not within the container.","pos":[7394,7669],"source":"There may be an expectation for the production or release image to be smaller in size by comparison to the **dev** image, however through the use of the volume mapping; the debugger and application were actually being run from your local machine and not within the container."},{"content":"The <bpt id=\"p1\">**</bpt>latest<ept id=\"p1\">**</ept> image has packaged the entire application code needed to run the application on a host machine, therefore the delta is the size of your application code.","pos":[7670,7838],"source":" The **latest** image has packaged the entire application code needed to run the application on a host machine, therefore the delta is the size of your application code."}]}