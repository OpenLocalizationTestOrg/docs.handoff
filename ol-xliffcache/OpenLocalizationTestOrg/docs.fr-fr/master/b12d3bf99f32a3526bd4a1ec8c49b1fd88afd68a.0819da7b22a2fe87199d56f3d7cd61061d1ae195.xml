{"content":"---\ntitle: \"How to: obtain the address of a variable - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"variables [C#], address of\"\n  - \"pointers [C#], & operator\"\n  - \"pointer expressions [C#], address-of operator\"\nms.assetid: 44fe2cd9-a64f-4ef5-be2a-09ce807c0182\n---\n# How to: obtain the address of a variable (C# Programming Guide)\n\nTo obtain the address of a unary expression, which evaluates to a fixed variable, use the address-of operator `&`:  \n  \n```csharp  \nint number;  \nint* p = &number; //address-of operator &  \n```  \n  \n The address-of operator can only be applied to a variable. If the variable is a moveable variable, you can use the [fixed statement](../../../csharp/language-reference/keywords/fixed-statement.md) to temporarily fix the variable before obtaining its address. For more information about moveable variables, see [Fixed and moveable variables](/dotnet/csharp/language-reference/language-specification/unsafe-code#fixed-and-moveable-variables). \n  \n It's your responsibility to ensure that the variable is initialized. The compiler doesn't issue an error message if the variable is not initialized.  \n  \n You can't get the address of a constant or a value.  \n  \n## Example  \n In this example, a pointer to `int`, `p`, is declared and assigned the address of an integer variable, `number`. The variable `number` is initialized as a result of the assignment to `*p`. If you comment out this assignment statement, the initialization of the variable `number` is removed, but no compile-time error is issued.  \n\n> [!NOTE]\n> Compile this example with the [`-unsafe`](../../language-reference/compiler-options/unsafe-compiler-option.md) compiler option.\n  \n [!code-csharp[address-of-a-variable](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers.cs#8)]  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)\n- [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)\n- [Types](../../../csharp/language-reference/keywords/types.md)\n- [unsafe](../../../csharp/language-reference/keywords/unsafe.md)\n- [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)\n- [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)\n","nodes":[{"pos":[4,304],"embed":true,"restype":"x-metadata","content":"title: \"How to: obtain the address of a variable - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"variables [C#], address of\"\n  - \"pointers [C#], & operator\"\n  - \"pointer expressions [C#], address-of operator\"\nms.assetid: 44fe2cd9-a64f-4ef5-be2a-09ce807c0182","nodes":[{"content":"How to: obtain the address of a variable - C# Programming Guide","nodes":[{"pos":[0,63],"content":"How to: obtain the address of a variable - C# Programming Guide","nodes":[{"content":"How to: obtain the address of a variable - C# Programming Guide","pos":[0,63]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[311,374],"content":"How to: obtain the address of a variable (C# Programming Guide)","linkify":"How to: obtain the address of a variable (C# Programming Guide)","nodes":[{"content":"How to: obtain the address of a variable (C# Programming Guide)","pos":[0,63]}]},{"pos":[376,490],"content":"To obtain the address of a unary expression, which evaluates to a fixed variable, use the address-of operator <ph id=\"ph1\">`&amp;`</ph>:","source":"To obtain the address of a unary expression, which evaluates to a fixed variable, use the address-of operator `&`:"},{"content":"The address-of operator can only be applied to a variable.","pos":[576,634]},{"content":"If the variable is a moveable variable, you can use the <bpt id=\"p1\">[</bpt>fixed statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept> to temporarily fix the variable before obtaining its address.","pos":[635,834],"source":" If the variable is a moveable variable, you can use the [fixed statement](../../../csharp/language-reference/keywords/fixed-statement.md) to temporarily fix the variable before obtaining its address."},{"content":"For more information about moveable variables, see <bpt id=\"p1\">[</bpt>Fixed and moveable variables<ept id=\"p1\">](/dotnet/csharp/language-reference/language-specification/unsafe-code#fixed-and-moveable-variables)</ept>.","pos":[835,1016],"source":" For more information about moveable variables, see [Fixed and moveable variables](/dotnet/csharp/language-reference/language-specification/unsafe-code#fixed-and-moveable-variables)."},{"content":"It's your responsibility to ensure that the variable is initialized.","pos":[1022,1090]},{"content":"The compiler doesn't issue an error message if the variable is not initialized.","pos":[1091,1170]},{"content":"You can't get the address of a constant or a value.","pos":[1177,1228]},{"pos":[1237,1244],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a pointer to <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`p`</ph>, is declared and assigned the address of an integer variable, <ph id=\"ph3\">`number`</ph>.","pos":[1248,1360],"source":"In this example, a pointer to `int`, `p`, is declared and assigned the address of an integer variable, `number`."},{"content":"The variable <ph id=\"ph1\">`number`</ph> is initialized as a result of the assignment to <ph id=\"ph2\">`*p`</ph>.","pos":[1361,1436],"source":" The variable `number` is initialized as a result of the assignment to `*p`."},{"content":"If you comment out this assignment statement, the initialization of the variable <ph id=\"ph1\">`number`</ph> is removed, but no compile-time error is issued.","pos":[1437,1575],"source":" If you comment out this assignment statement, the initialization of the variable `number` is removed, but no compile-time error is issued."},{"pos":[1581,1718],"content":"[!NOTE]\nCompile this example with the [`-unsafe`](../../language-reference/compiler-options/unsafe-compiler-option.md) compiler option.","leadings":["","> "],"nodes":[{"content":"Compile this example with the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`-unsafe`</ph><ept id=\"p1\">](../../language-reference/compiler-options/unsafe-compiler-option.md)</ept> compiler option.","pos":[8,135],"source":"Compile this example with the [`-unsafe`](../../language-reference/compiler-options/unsafe-compiler-option.md) compiler option."}]},{"pos":[1854,1862],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1866,1932],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1935,2035],"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept>","source":"[Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)"},{"pos":[2038,2126],"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept>","source":"[Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)"},{"pos":[2129,2190],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept>","source":"[Types](../../../csharp/language-reference/keywords/types.md)"},{"pos":[2193,2256],"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept>","source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md)"},{"pos":[2259,2340],"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept>","source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)"},{"pos":[2343,2414],"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","source":"[stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}