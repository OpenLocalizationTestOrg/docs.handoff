<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43953c223feb0a2035b60e589fbfca1ef411e6b9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\app-domains\assembly-security-considerations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfacdfd69eb021f16e394f7a030d4e6e935495e6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1da397eb53e47227e25c4763ae994c37f561b7e9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Assembly Security Considerations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Assembly Security Considerations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="top"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> When you build an assembly, you can specify a set of permissions that the assembly requires to run.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Whether certain permissions are granted or not granted to an assembly is based on evidence.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are two distinct ways evidence is used:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The input evidence is merged with the evidence gathered by the loader to create a final set of evidence used for policy resolution.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The methods that use this semantic include <bpt id="p1">**</bpt>Assembly.Load<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Assembly.LoadFrom<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Activator.CreateInstance<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The input evidence is used unaltered as the final set of evidence used for policy resolution.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The methods that use this semantic include <bpt id="p1">**</bpt>Assembly.Load(byte[])<ept id="p1">**</ept> and <bpt id="p2">**</bpt>AppDomain.DefineDynamicAssembly()<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional permissions can be granted by the <bpt id="p1">[</bpt>security policy<ept id="p1">](../../../docs/framework/misc/code-access-security-basics.md)</ept> set on the computer where the assembly will run.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you want your code to handle all potential security exceptions, you can do one of the following:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Insert a permission request for all the permissions your code must have, and handle up front the load-time failure that occurs if the permissions are not granted.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Do not use a permission request to obtain permissions your code might need, but be prepared to handle security exceptions if permissions are not granted.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Security is a complex area, and you have many options to choose from.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Key Security Concepts<ept id="p1">](../../../docs/standard/security/key-security-concepts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>At load time, the assembly's evidence is used as input to security policy.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Security policy is established by the enterprise and the computer's administrator as well as by user policy settings, and determines the set of permissions that is granted to all managed code when executed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Security policy can be established for the publisher of the assembly (if it has a signing tool generated signature), for the Web site and zone (in Internet Explorer terms) the assembly was downloaded from, or for the assembly's strong name.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, a computer's administrator can establish security policy that allows all code downloaded from a Web site and signed by a given software company to access a database on a computer, but does not grant access to write to the computer's disk.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Strong-Named Assemblies and Signing Tools</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can sign an assembly in two different but complementary ways: with a strong name or by using  <bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Signing an assembly with a strong name adds public key encryption to the file containing the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Strong name signing helps to verify name uniqueness, prevent name spoofing, and provide callers with some identity when a reference is resolved.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, no level of trust is associated with a strong name, which makes <bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept> important.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The two signing tools require a publisher to prove its identity to a third-party authority and obtain a certificate.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This certificate is then embedded in your file and can be used by an administrator to decide whether to trust the code's authenticity.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can give both a strong name and a digital signature created using <bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept> to an assembly, or you can use either alone.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The two signing tools can sign only one file at a time; for a multifile assembly, you sign the file that contains the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A strong name is stored in the file containing the assembly manifest, but a signature created using <bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept> is stored in a reserved slot in the portable executable (PE) file containing the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Signing of an assembly using <bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept> can be used (with or without a strong name) when you already have a trust hierarchy that relies on<bpt id="p2">[</bpt>SignTool.exe (Sign Tool)<ept id="p2">](../../../docs/framework/tools/signtool-exe.md)</ept> generated signatures, or when your policy uses only the key portion and does not check a chain of trust.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When using both a strong name and a signing tool signature on an assembly, the strong name must be assigned first.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The common language runtime also performs a hash verification; the assembly manifest contains a list of all files that make up the assembly, including a hash of each file as it existed when the manifest was built.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As each file is loaded, its contents are hashed and compared with the hash value stored in the manifest.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the two hashes do not match, the assembly fails to load.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because strong naming and signing using <bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept> guarantee integrity, you can base code access security policy on these two forms of assembly evidence.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Strong naming and signing using <bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept> guarantee integrity through digital signatures and certificates.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>All the technologies mentioned—hash verification, strong naming, and signing using <bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept>—work together to ensure that the assembly has not been altered in any way.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strong-Named Assemblies<ept id="p1">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assemblies in the Common Language Runtime<ept id="p1">](../../../docs/framework/app-domains/assemblies-in-the-common-language-runtime.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SignTool.exe (Sign Tool)<ept id="p1">](../../../docs/framework/tools/signtool-exe.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>