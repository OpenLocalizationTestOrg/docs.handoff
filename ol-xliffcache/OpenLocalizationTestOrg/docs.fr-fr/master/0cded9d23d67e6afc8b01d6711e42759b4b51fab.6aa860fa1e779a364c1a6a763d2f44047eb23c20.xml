{"content":"---\ntitle: \"=> Operator - C# Reference\"\nms.custom: seodec18\nms.date: 01/22/2019\nf1_keywords: \n  - \"=>_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"lambda operator [C#]\"\n  - \"=> operator [C#]\"\n  - \"lambda expressions [C#], => operator\"\n---\n# => operator (C# Reference)\n\nThe `=>` token is supported in two forms: as the lambda operator and as a separator of a member name and the member implementation in an expression body definition.\n\n## Lambda operator\n\nIn [lambda expressions](../../programming-guide/statements-expressions-operators/lambda-expressions.md), the lambda operator `=>` separates the input variables on the left side from the lambda body on the right side.\n\nThe following example uses the [LINQ](../../programming-guide/concepts/linq/index.md) feature with method syntax to demonstrate the usage of lambda expressions:\n\n[!code-csharp-interactive[infer types of input variables](~/samples/snippets/csharp/language-reference/operators/LambdaOperatorExamples.cs#InferredTypes)]\n\nInput variables of lambda expressions are strongly typed at compile time. When the compiler can infer the types of input variables, like in the preceding example, you may omit type declarations. If you need to specify the type of input variables, you must do that for each variable, as the following example shows:\n\n[!code-csharp-interactive[specify types of input variables](~/samples/snippets/csharp/language-reference/operators/LambdaOperatorExamples.cs#ExplicitTypes)]\n\nThe following example shows how to define a lambda expression without input variables:\n\n[!code-csharp-interactive[without input variables](~/samples/snippets/csharp/language-reference/operators/LambdaOperatorExamples.cs#WithoutInput)]\n\nFor more information, see [Lambda expressions](../../programming-guide/statements-expressions-operators/lambda-expressions.md).\n\n## Expression body definition\n\nAn expression body definition has the following general syntax:\n\n```csharp\nmember => expression;\n```\n\nwhere *expression* is a valid expression. Note that *expression* can be a *statement expression* only if the member's return type is `void`, or if the member is a constructor, a finalizer, or a property `set` accessor.\n\nThe following example shows an expression body definition for a `Person.ToString` method:\n\n```csharp\npublic override string ToString() => $\"{fname} {lname}\".Trim();\n```\n\nIt's a shorthand version of the following method definition:\n\n```csharp\npublic override string ToString()\n{\n   return $\"{fname} {lname}\".Trim();\n}\n```\n\nExpression body definitions for methods and read-only properties are supported starting with C# 6. Expression body definitions for constructors, finalizers, property accessors, and indexers are supported starting with C# 7.0.\n\nFor more information, see [Expression-bodied members](../../programming-guide/statements-expressions-operators/expression-bodied-members.md).\n\n## Operator overloadability\n\nThe `=>` operator cannot be overloaded.\n\n## C# language specification\n\nFor more information, see the [Anonymous function expressions](~/_csharplang/spec/expressions.md#anonymous-function-expressions) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [Lambda expressions](../../programming-guide/statements-expressions-operators/lambda-expressions.md)\n- [Expression-bodied members](../../programming-guide/statements-expressions-operators/expression-bodied-members.md)","nodes":[{"pos":[4,231],"embed":true,"restype":"x-metadata","content":"title: \"=> Operator - C# Reference\"\nms.custom: seodec18\nms.date: 01/22/2019\nf1_keywords: \n  - \"=>_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"lambda operator [C#]\"\n  - \"=> operator [C#]\"\n  - \"lambda expressions [C#], => operator\"","nodes":[{"content":"=> Operator - C# Reference","nodes":[{"pos":[0,26],"content":"=> Operator - C# Reference","nodes":[{"content":"=&gt; Operator - C# Reference","pos":[0,26],"source":"=> Operator - C# Reference"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[238,264],"content":"=> operator (C# Reference)","linkify":"=> operator (C# Reference)","nodes":[{"content":"=&gt; operator (C# Reference)","pos":[0,26],"source":"=> operator (C# Reference)"}]},{"pos":[266,430],"content":"The <ph id=\"ph1\">`=&gt;`</ph> token is supported in two forms: as the lambda operator and as a separator of a member name and the member implementation in an expression body definition.","source":"The `=>` token is supported in two forms: as the lambda operator and as a separator of a member name and the member implementation in an expression body definition."},{"pos":[435,450],"content":"Lambda operator","linkify":"Lambda operator","nodes":[{"content":"Lambda operator","pos":[0,15]}]},{"pos":[452,668],"content":"In <bpt id=\"p1\">[</bpt>lambda expressions<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>, the lambda operator <ph id=\"ph1\">`=&gt;`</ph> separates the input variables on the left side from the lambda body on the right side.","source":"In [lambda expressions](../../programming-guide/statements-expressions-operators/lambda-expressions.md), the lambda operator `=>` separates the input variables on the left side from the lambda body on the right side."},{"pos":[670,830],"content":"The following example uses the <bpt id=\"p1\">[</bpt>LINQ<ept id=\"p1\">](../../programming-guide/concepts/linq/index.md)</ept> feature with method syntax to demonstrate the usage of lambda expressions:","source":"The following example uses the [LINQ](../../programming-guide/concepts/linq/index.md) feature with method syntax to demonstrate the usage of lambda expressions:"},{"content":"Input variables of lambda expressions are strongly typed at compile time.","pos":[988,1061]},{"content":"When the compiler can infer the types of input variables, like in the preceding example, you may omit type declarations.","pos":[1062,1182]},{"content":"If you need to specify the type of input variables, you must do that for each variable, as the following example shows:","pos":[1183,1302]},{"content":"The following example shows how to define a lambda expression without input variables:","pos":[1462,1548]},{"pos":[1698,1825],"content":"For more information, see <bpt id=\"p1\">[</bpt>Lambda expressions<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.","source":"For more information, see [Lambda expressions](../../programming-guide/statements-expressions-operators/lambda-expressions.md)."},{"pos":[1830,1856],"content":"Expression body definition","linkify":"Expression body definition","nodes":[{"content":"Expression body definition","pos":[0,26]}]},{"content":"An expression body definition has the following general syntax:","pos":[1858,1921]},{"content":"where <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is a valid expression.","pos":[1960,2001],"source":"where *expression* is a valid expression."},{"content":"Note that <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> can be a <bpt id=\"p2\">*</bpt>statement expression<ept id=\"p2\">*</ept> only if the member's return type is <ph id=\"ph1\">`void`</ph>, or if the member is a constructor, a finalizer, or a property <ph id=\"ph2\">`set`</ph> accessor.","pos":[2002,2178],"source":" Note that *expression* can be a *statement expression* only if the member's return type is `void`, or if the member is a constructor, a finalizer, or a property `set` accessor."},{"pos":[2180,2269],"content":"The following example shows an expression body definition for a <ph id=\"ph1\">`Person.ToString`</ph> method:","source":"The following example shows an expression body definition for a `Person.ToString` method:"},{"content":"It's a shorthand version of the following method definition:","pos":[2350,2410]},{"content":"Expression body definitions for methods and read-only properties are supported starting with C# 6.","pos":[2502,2600]},{"content":"Expression body definitions for constructors, finalizers, property accessors, and indexers are supported starting with C# 7.0.","pos":[2601,2727]},{"pos":[2729,2870],"content":"For more information, see <bpt id=\"p1\">[</bpt>Expression-bodied members<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/expression-bodied-members.md)</ept>.","source":"For more information, see [Expression-bodied members](../../programming-guide/statements-expressions-operators/expression-bodied-members.md)."},{"pos":[2875,2899],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"pos":[2901,2940],"content":"The <ph id=\"ph1\">`=&gt;`</ph> operator cannot be overloaded.","source":"The `=>` operator cannot be overloaded."},{"pos":[2945,2970],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2972,3180],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Anonymous function expressions<ept id=\"p1\">](~/_csharplang/spec/expressions.md#anonymous-function-expressions)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Anonymous function expressions](~/_csharplang/spec/expressions.md#anonymous-function-expressions) section of the [C# language specification](../language-specification/index.md)."},{"pos":[3185,3193],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3197,3224],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[3227,3283],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[3286,3310],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[3313,3413],"content":"<bpt id=\"p1\">[</bpt>Lambda expressions<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>","source":"[Lambda expressions](../../programming-guide/statements-expressions-operators/lambda-expressions.md)"},{"pos":[3416,3530],"content":"<bpt id=\"p1\">[</bpt>Expression-bodied members<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/expression-bodied-members.md)</ept>","source":"[Expression-bodied members](../../programming-guide/statements-expressions-operators/expression-bodied-members.md)"}]}