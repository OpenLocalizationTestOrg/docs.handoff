{"content":"---\ntitle: \"Indexers in Interfaces - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"indexers [C#], in interfaces\"\n  - \"accessors [C#], indexers\"\nms.assetid: e16b54bd-4a83-4f52-bd75-65819fca79e8\n---\n# Indexers in Interfaces (C# Programming Guide)\nIndexers can be declared on an [interface](../../../csharp/language-reference/keywords/interface.md). Accessors of interface indexers differ from the accessors of [class](../../../csharp/language-reference/keywords/class.md) indexers in the following ways:  \n  \n-   Interface accessors do not use modifiers.  \n  \n-   An interface accessor does not have a body.  \n  \n Thus, the purpose of the accessor is to indicate whether the indexer is read-write, read-only, or write-only.  \n  \n The following is an example of an interface indexer accessor:  \n  \n [!code-csharp[csProgGuideIndexers#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideIndexers/CS/Indexers.cs#3)]  \n  \n The signature of an indexer must differ from the signatures of all other indexers declared in the same interface.  \n  \n## Example  \n The following example shows how to implement interface indexers.  \n  \n [!code-csharp[csProgGuideIndexers#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideIndexers/CS/Indexers.cs#4)]  \n  \n In the preceding example, you could use the explicit interface member implementation by using the fully qualified name of the interface member. For example:  \n  \n```  \nstring ISomeInterface.this[int index]   \n{   \n}   \n```  \n  \n However, the fully qualified name is only needed to avoid ambiguity when the class is implementing more than one interface with the same indexer signature. For example, if an `Employee` class is implementing two interfaces, `ICitizen` and `IEmployee`, and both interfaces have the same indexer signature, the explicit interface member implementation is necessary. That is, the following indexer declaration:  \n  \n```  \nstring IEmployee.this[int index]   \n{   \n}   \n```  \n  \n implements the indexer on the `IEmployee` interface, while the following declaration:  \n  \n```  \nstring ICitizen.this[int index]\n{   \n}   \n```  \n  \n implements the indexer on the `ICitizen` interface.  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Indexers](../../../csharp/programming-guide/indexers/index.md)\n- [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)\n- [Interfaces](../../../csharp/programming-guide/interfaces/index.md)\n","nodes":[{"pos":[4,235],"embed":true,"restype":"x-metadata","content":"title: \"Indexers in Interfaces - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"indexers [C#], in interfaces\"\n  - \"accessors [C#], indexers\"\nms.assetid: e16b54bd-4a83-4f52-bd75-65819fca79e8","nodes":[{"content":"Indexers in Interfaces - C# Programming Guide","nodes":[{"pos":[0,45],"content":"Indexers in Interfaces - C# Programming Guide","nodes":[{"content":"Indexers in Interfaces - C# Programming Guide","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[242,287],"content":"Indexers in Interfaces (C# Programming Guide)","linkify":"Indexers in Interfaces (C# Programming Guide)","nodes":[{"content":"Indexers in Interfaces (C# Programming Guide)","pos":[0,45]}]},{"content":"Indexers can be declared on an <bpt id=\"p1\">[</bpt>interface<ept id=\"p1\">](../../../csharp/language-reference/keywords/interface.md)</ept>.","pos":[288,389],"source":"Indexers can be declared on an [interface](../../../csharp/language-reference/keywords/interface.md)."},{"content":"Accessors of interface indexers differ from the accessors of <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../../../csharp/language-reference/keywords/class.md)</ept> indexers in the following ways:","pos":[390,544],"source":" Accessors of interface indexers differ from the accessors of [class](../../../csharp/language-reference/keywords/class.md) indexers in the following ways:"},{"content":"Interface accessors do not use modifiers.","pos":[554,595]},{"content":"An interface accessor does not have a body.","pos":[605,648]},{"content":"Thus, the purpose of the accessor is to indicate whether the indexer is read-write, read-only, or write-only.","pos":[655,764]},{"content":"The following is an example of an interface indexer accessor:","pos":[771,832]},{"content":"The signature of an indexer must differ from the signatures of all other indexers declared in the same interface.","pos":[968,1081]},{"pos":[1090,1097],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to implement interface indexers.","pos":[1101,1165]},{"content":"In the preceding example, you could use the explicit interface member implementation by using the fully qualified name of the interface member.","pos":[1301,1444]},{"content":"For example:","pos":[1445,1457]},{"content":"However, the fully qualified name is only needed to avoid ambiguity when the class is implementing more than one interface with the same indexer signature.","pos":[1530,1685]},{"content":"For example, if an <ph id=\"ph1\">`Employee`</ph> class is implementing two interfaces, <ph id=\"ph2\">`ICitizen`</ph> and <ph id=\"ph3\">`IEmployee`</ph>, and both interfaces have the same indexer signature, the explicit interface member implementation is necessary.","pos":[1686,1893],"source":" For example, if an `Employee` class is implementing two interfaces, `ICitizen` and `IEmployee`, and both interfaces have the same indexer signature, the explicit interface member implementation is necessary."},{"content":"That is, the following indexer declaration:","pos":[1894,1937]},{"pos":[2005,2090],"content":"implements the indexer on the <ph id=\"ph1\">`IEmployee`</ph> interface, while the following declaration:","source":"implements the indexer on the `IEmployee` interface, while the following declaration:"},{"pos":[2154,2205],"content":"implements the indexer on the <ph id=\"ph1\">`ICitizen`</ph> interface.","source":"implements the indexer on the `ICitizen` interface."},{"pos":[2214,2222],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2226,2292],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2295,2358],"content":"<bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md)</ept>","source":"[Indexers](../../../csharp/programming-guide/indexers/index.md)"},{"pos":[2361,2442],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"},{"pos":[2445,2512],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](../../../csharp/programming-guide/interfaces/index.md)</ept>","source":"[Interfaces](../../../csharp/programming-guide/interfaces/index.md)"}]}