<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-create-temporary-certificates-for-use-during-development.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d45f18b0b8fe4e0cc9667091e166c80691faa2d4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\how-to-create-temporary-certificates-for-use-during-development.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0fba56cd3c9f1a0ade8e464ffc4439c87c707316</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">410cdd31c7ae176147c031feab9e0c109543c4b7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Create Temporary Certificates for Use During Development</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create Temporary Certificates for Use During Development</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When developing a secure service or client using Windows Communication Foundation (WCF), it is often necessary to supply an X.509 certificate to be used as a credential.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The certificate typically is part of a chain of certificates with a root authority found in the Trusted Root Certification Authorities store of the computer.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Having a certificate chain enables you to scope a set of certificates where typically the root authority is from your organization or business unit.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To emulate this at development time, you can create two certificates to satisfy the security requirements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first is a self-signed certificate that is placed in the Trusted Root Certification Authorities store, and the second certificate is created from the first and is placed in either the Personal store of the Local Machine location, or the Personal store of the Current User location.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic walks through the steps to create these two certificates using the Powershell <bpt id="p1">[</bpt>New-SelfSignedCertificate)<ept id="p1">](/powershell/module/pkiclient/new-selfsignedcertificate)</ept> cmdlet.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The certificates that the New-SelfSignedCertificate cmdlet generates are provided for testing purposes only.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When deploying a service or client, be sure to use an appropriate certificate provided by a certification authority.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This could either be from a Windows Server certificate server in your organization or a third party.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By default, the <bpt id="p1">[</bpt>New-SelfSignedCertificate<ept id="p1">](/powershell/module/pkiclient/new-selfsignedcertificate)</ept> cmdlet creates certificates that are self-signed and these certificates are insecure.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Placing the self-signed certificates in the Trusted Root Certification Authorities store enables you to create a development environment that more closely simulates your deployment environment.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about creating and using certificates, see <bpt id="p1">[</bpt>Working with Certificates<ept id="p1">](working-with-certificates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about using a certificate as a credential, see <bpt id="p1">[</bpt>Securing Services and Clients<ept id="p1">](securing-services-and-clients.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For a tutorial about using Microsoft Authenticode technology, see <bpt id="p1">[</bpt>Authenticode Overviews and Tutorials<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=88919)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To create a self-signed root authority certificate and export the private key</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following command creates a self-signed certificate with a subject name of "RootCA" in the Current User Personal store.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We need to export the certificate to a PFX file so that it can be imported to where it's needed in a later step.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When exporting a certificate with the private key, a password is needed to protect it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>We save the password in a <ph id="ph1">`SecureString`</ph> and use the <bpt id="p1">[</bpt>Export-PfxCertificate<ept id="p1">](/powershell/module/pkiclient/export-pfxcertificate)</ept> cmdlet to export the certificate with the associated private key to a PFX file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>We also save just the public certificate into a CRT file using the <bpt id="p1">[</bpt>Export-Certificate<ept id="p1">](/powershell/module/pkiclient/export-certificate)</ept> cmdlet.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To create a new certificate signed by a root authority certificate</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following command creates a certificate signed by the <ph id="ph1">`RootCA`</ph> with a subject name of "SignedByRootCA" using the private key of the issuer.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Similarly, we save the signed certificate with private key into a PFX file and just the public key into a CRT file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Installing a Certificate in the Trusted Root Certification Authorities Store</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once a self-signed certificate is created, you can install it in the Trusted Root Certification Authorities store.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any certificates that are signed with the certificate at this point are trusted by the computer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For this reason, delete the certificate from the store as soon as you no longer need it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you delete this root authority certificate, all other certificates that signed with it become unauthorized.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Root authority certificates are simply a mechanism whereby a group of certificates can be scoped as necessary.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, in peer-to-peer applications, there is typically no need for a root authority because you simply trust the identity of an individual by its supplied certificate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To install a self-signed certificate in the Trusted Root Certification Authorities</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Open the certificate snap-in.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: View Certificates with the MMC Snap-in<ept id="p1">](how-to-view-certificates-with-the-mmc-snap-in.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Open the folder to store the certificate, either the <bpt id="p1">**</bpt>Local Computer<ept id="p1">**</ept> or the <bpt id="p2">**</bpt>Current User<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Trusted Root Certification Authorities<ept id="p1">**</ept> folder.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>Certificates<ept id="p1">**</ept> folder and click <bpt id="p2">**</bpt>All Tasks<ept id="p2">**</ept>, then click <bpt id="p3">**</bpt>Import<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Follow the on-screen wizard instructions to import the RootCA.pfx into the store.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Using certificates With WCF</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Once you have set up the temporary certificates, you can use them to develop WCF solutions that specify certificates as a client credential type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, the following XML configuration specifies message security and a certificate as the client credential type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To specify a certificate as the client credential type</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the configuration file for a service, use the following XML to set the security mode to message, and the client credential type to certificate.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the configuration file for a client, use the following XML to specify that the certificate is found in the user’s store, and can be found by searching the SubjectName field for the value "CohoWinery."</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about using certificates in WCF, see <bpt id="p1">[</bpt>Working with Certificates<ept id="p1">](working-with-certificates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>.NET Framework security</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Be sure to delete any temporary root authority certificates from the <bpt id="p1">**</bpt>Trusted Root Certification Authorities<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Personal<ept id="p2">**</ept> folders by right-clicking the certificate, then clicking <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Working with Certificates<ept id="p1">](working-with-certificates.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: View Certificates with the MMC Snap-in<ept id="p1">](how-to-view-certificates-with-the-mmc-snap-in.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Securing Services and Clients<ept id="p1">](securing-services-and-clients.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>