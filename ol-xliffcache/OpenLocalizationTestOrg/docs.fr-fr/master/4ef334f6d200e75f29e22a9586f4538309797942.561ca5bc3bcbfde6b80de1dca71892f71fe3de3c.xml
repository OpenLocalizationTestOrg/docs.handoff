{"content":"---\ntitle: \"fixed Statement - C# Reference\"\nms.custom: seodec18\n\nms.date: 05/10/2018\nf1_keywords: \n  - \"fixed_CSharpKeyword\"\n  - \"fixed\"\nhelpviewer_keywords: \n  - \"fixed keyword [C#]\"\n---\n# fixed Statement (C# Reference)\n\nThe `fixed` statement prevents the garbage collector from relocating a movable variable. The `fixed` statement is only permitted in an [unsafe](unsafe.md) context. `fixed` can also be used to create [fixed size buffers](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md).\n\nThe `fixed` statement sets a pointer to a managed variable and \"pins\" that variable during the execution of the statement. Pointers to movable managed variables are useful only in a `fixed` context. Without a `fixed` context, garbage collection could relocate the variables unpredictably. The C# compiler only lets you assign a pointer to a managed variable in a `fixed` statement.\n\n[!code-csharp[Accessing fixed memory](../../../../samples/snippets/csharp/keywords/FixedKeywordExamples.cs#1)]\n\nYou can initialize a pointer by using an array, a string, a fixed-size buffer, or the address of a variable. The following example illustrates the use of variable addresses, arrays, and strings. For more information about fixed-size buffers, see [Fixed Size Buffers](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md).\n\n[!code-csharp[Initializing fixed size buffers](../../../../samples/snippets/csharp/keywords/FixedKeywordExamples.cs#2)]\n\nStarting with C# 7.3, the `fixed` statement operates on additional types beyond arrays, strings, fixed-size buffers, or unmanaged variables. Any type that implements a method named `GetPinnableReference` can be pinned. The `GetPinnableReference` must return a `ref` variable to an unmanaged type. See the topic on [pointer types](../../programming-guide/unsafe-code-pointers/pointer-types.md) for more information. The .NET types <xref:System.Span%601?displayProperty=nameWithType> and <xref:System.ReadOnlySpan%601?displayProperty=nameWithType> introduced in .NET Core 2.0 make use of this pattern and can be pinned. This is shown in the following example:\n\n[!code-csharp[Accessing fixed memory](../../../../samples/snippets/csharp/keywords/FixedKeywordExamples.cs#FixedSpan)]\n\nIf you are creating types that should participate in this pattern, see <xref:System.Span%601.GetPinnableReference?displayProperty=nameWithType> for an example of implementing the pattern.\n\nMultiple pointers can be initialized in one statement if they are all the same type:\n\n```csharp\nfixed (byte* ps = srcarray, pd = dstarray) {...}\n```\n\nTo initialize pointers of different types, simply nest `fixed` statements, as shown in the following example.\n\n[!code-csharp[Initializing multiple pointers](../../../../samples/snippets/csharp/keywords/FixedKeywordExamples.cs#3)]\n\nAfter the code in the statement is executed, any pinned variables are unpinned and subject to garbage collection. Therefore, do not point to those variables outside the `fixed` statement. The variables declared in the `fixed` statement are scoped to that statement, making this easier:\n\n```csharp\nfixed (byte* ps = srcarray, pd = dstarray)\n{\n   ...\n}\n// ps and pd are no longer in scope here.\n```\n\nPointers initialized in `fixed` statements are readonly variables. If you want to modify the pointer value, you must declare a second pointer variable, and modify that. The variable declared in the `fixed` statement cannot be modified:\n\n```csharp\nfixed (byte* ps = srcarray, pd = dstarray)\n{\n    byte* pSourceCopy = ps;\n    pSourceCopy++; // point to the next element.\n    ps++; // invalid: cannot modify ps, as it is declared in the fixed statement.\n}\n```\n\nIn unsafe mode, you can allocate memory on the stack, where it is not subject to garbage collection and therefore does not need to be pinned. For more information, see [stackalloc](stackalloc.md).\n\n[!code-csharp[Initializing multiple pointers](../../../../samples/snippets/csharp/keywords/FixedKeywordExamples.cs#4)]\n\n## C# Language Specification\n\n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [unsafe](unsafe.md)\n- [Fixed Size Buffers](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)\n","nodes":[{"pos":[4,183],"embed":true,"restype":"x-metadata","content":"title: \"fixed Statement - C# Reference\"\nms.custom: seodec18\n\nms.date: 05/10/2018\nf1_keywords: \n  - \"fixed_CSharpKeyword\"\n  - \"fixed\"\nhelpviewer_keywords: \n  - \"fixed keyword [C#]\"","nodes":[{"content":"fixed Statement - C# Reference","nodes":[{"pos":[0,30],"content":"fixed Statement - C# Reference","nodes":[{"content":"fixed Statement - C# Reference","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[190,220],"content":"fixed Statement (C# Reference)","linkify":"fixed Statement (C# Reference)","nodes":[{"content":"fixed Statement (C# Reference)","pos":[0,30]}]},{"content":"The <ph id=\"ph1\">`fixed`</ph> statement prevents the garbage collector from relocating a movable variable.","pos":[222,310],"source":"The `fixed` statement prevents the garbage collector from relocating a movable variable."},{"content":"The <ph id=\"ph1\">`fixed`</ph> statement is only permitted in an <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](unsafe.md)</ept> context.","pos":[311,385],"source":" The `fixed` statement is only permitted in an [unsafe](unsafe.md) context."},{"content":"<ph id=\"ph1\">`fixed`</ph> can also be used to create <bpt id=\"p1\">[</bpt>fixed size buffers<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept>.","pos":[386,510],"source":"`fixed` can also be used to create [fixed size buffers](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)."},{"content":"The <ph id=\"ph1\">`fixed`</ph> statement sets a pointer to a managed variable and \"pins\" that variable during the execution of the statement.","pos":[512,634],"source":"The `fixed` statement sets a pointer to a managed variable and \"pins\" that variable during the execution of the statement."},{"content":"Pointers to movable managed variables are useful only in a <ph id=\"ph1\">`fixed`</ph> context.","pos":[635,710],"source":" Pointers to movable managed variables are useful only in a `fixed` context."},{"content":"Without a <ph id=\"ph1\">`fixed`</ph> context, garbage collection could relocate the variables unpredictably.","pos":[711,800],"source":" Without a `fixed` context, garbage collection could relocate the variables unpredictably."},{"content":"The C# compiler only lets you assign a pointer to a managed variable in a <ph id=\"ph1\">`fixed`</ph> statement.","pos":[801,893],"source":" The C# compiler only lets you assign a pointer to a managed variable in a `fixed` statement."},{"content":"You can initialize a pointer by using an array, a string, a fixed-size buffer, or the address of a variable.","pos":[1007,1115]},{"content":"The following example illustrates the use of variable addresses, arrays, and strings.","pos":[1116,1201]},{"content":"For more information about fixed-size buffers, see <bpt id=\"p1\">[</bpt>Fixed Size Buffers<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept>.","pos":[1202,1342],"source":" For more information about fixed-size buffers, see [Fixed Size Buffers](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)."},{"content":"Starting with C# 7.3, the <ph id=\"ph1\">`fixed`</ph> statement operates on additional types beyond arrays, strings, fixed-size buffers, or unmanaged variables.","pos":[1465,1605],"source":"Starting with C# 7.3, the `fixed` statement operates on additional types beyond arrays, strings, fixed-size buffers, or unmanaged variables."},{"content":"Any type that implements a method named <ph id=\"ph1\">`GetPinnableReference`</ph> can be pinned.","pos":[1606,1683],"source":" Any type that implements a method named `GetPinnableReference` can be pinned."},{"content":"The <ph id=\"ph1\">`GetPinnableReference`</ph> must return a <ph id=\"ph2\">`ref`</ph> variable to an unmanaged type.","pos":[1684,1761],"source":" The `GetPinnableReference` must return a `ref` variable to an unmanaged type."},{"content":"See the topic on <bpt id=\"p1\">[</bpt>pointer types<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/pointer-types.md)</ept> for more information.","pos":[1762,1879],"source":" See the topic on [pointer types](../../programming-guide/unsafe-code-pointers/pointer-types.md) for more information."},{"content":"The .NET types <ph id=\"ph1\">&lt;xref:System.Span%601?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ReadOnlySpan%601?displayProperty=nameWithType&gt;</ph> introduced in .NET Core 2.0 make use of this pattern and can be pinned.","pos":[1880,2082],"source":" The .NET types <xref:System.Span%601?displayProperty=nameWithType> and <xref:System.ReadOnlySpan%601?displayProperty=nameWithType> introduced in .NET Core 2.0 make use of this pattern and can be pinned."},{"content":"This is shown in the following example:","pos":[2083,2122]},{"pos":[2244,2431],"content":"If you are creating types that should participate in this pattern, see <ph id=\"ph1\">&lt;xref:System.Span%601.GetPinnableReference?displayProperty=nameWithType&gt;</ph> for an example of implementing the pattern.","source":"If you are creating types that should participate in this pattern, see <xref:System.Span%601.GetPinnableReference?displayProperty=nameWithType> for an example of implementing the pattern."},{"content":"Multiple pointers can be initialized in one statement if they are all the same type:","pos":[2433,2517]},{"pos":[2583,2692],"content":"To initialize pointers of different types, simply nest <ph id=\"ph1\">`fixed`</ph> statements, as shown in the following example.","source":"To initialize pointers of different types, simply nest `fixed` statements, as shown in the following example."},{"content":"After the code in the statement is executed, any pinned variables are unpinned and subject to garbage collection.","pos":[2814,2927]},{"content":"Therefore, do not point to those variables outside the <ph id=\"ph1\">`fixed`</ph> statement.","pos":[2928,3001],"source":" Therefore, do not point to those variables outside the `fixed` statement."},{"content":"The variables declared in the <ph id=\"ph1\">`fixed`</ph> statement are scoped to that statement, making this easier:","pos":[3002,3099],"source":" The variables declared in the `fixed` statement are scoped to that statement, making this easier:"},{"content":"Pointers initialized in <ph id=\"ph1\">`fixed`</ph> statements are readonly variables.","pos":[3212,3278],"source":"Pointers initialized in `fixed` statements are readonly variables."},{"content":"If you want to modify the pointer value, you must declare a second pointer variable, and modify that.","pos":[3279,3380]},{"content":"The variable declared in the <ph id=\"ph1\">`fixed`</ph> statement cannot be modified:","pos":[3381,3447],"source":" The variable declared in the `fixed` statement cannot be modified:"},{"content":"In unsafe mode, you can allocate memory on the stack, where it is not subject to garbage collection and therefore does not need to be pinned.","pos":[3670,3811]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](stackalloc.md)</ept>.","pos":[3812,3866],"source":" For more information, see [stackalloc](stackalloc.md)."},{"pos":[3991,4016],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4083,4091],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4095,4122],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4125,4181],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4184,4207],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[4210,4229],"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](unsafe.md)</ept>","source":"[unsafe](unsafe.md)"},{"pos":[4232,4320],"content":"<bpt id=\"p1\">[</bpt>Fixed Size Buffers<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept>","source":"[Fixed Size Buffers](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)"}]}