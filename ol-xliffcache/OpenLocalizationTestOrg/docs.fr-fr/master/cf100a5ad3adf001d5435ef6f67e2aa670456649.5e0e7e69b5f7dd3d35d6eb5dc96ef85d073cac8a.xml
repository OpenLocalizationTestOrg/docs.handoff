{"content":"---\ntitle: \"delegate (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"delegate_CSharpKeyword\"\n  - \"delegate\"\n  - \"CS0123\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"delegate keyword [C#]\"\n  - \"function pointers [C#]\"\nms.assetid: 0bb8cb6d-2f87-47c7-9d1f-d65c1cd01e9f\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# delegate (C# Reference)\nThe declaration of a delegate type is similar to a method signature. It has a return value and any number of parameters of any type:  \n  \n```  \npublic delegate void TestDelegate(string message);  \npublic delegate int TestDelegate(MyType m, long num);  \n```  \n  \n A `delegate` is a reference type that can be used to encapsulate a named or an anonymous method. Delegates are similar to function pointers in C++; however, delegates are type-safe and secure. For applications of delegates, see [Delegates](../../../csharp/programming-guide/delegates/index.md) and [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md).  \n  \n## Remarks  \n Delegates are the basis for [Events](../../../csharp/programming-guide/events/index.md).  \n  \n A delegate can be instantiated by associating it either with a named or anonymous method. For more information, see [Named Methods](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md) and [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).  \n  \n The delegate must be instantiated with a method or lambda expression that has a compatible return type and input parameters. For more information on the degree of variance that is allowed in the method signature, see [Variance in Delegates](http://msdn.microsoft.com/library/e3b98197-6c5b-4e55-9c6e-9739b60645ca). For use with anonymous methods, the delegate and the code to be associated with it are declared together. Both ways of instantiating delegates are discussed in this section.  \n  \n## Example  \n [!code-cs[csrefKeywordsTypes#8](../../../csharp/language-reference/keywords/codesnippet/CSharp/delegate_1.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)   \n [Delegates](../../../csharp/programming-guide/delegates/index.md)   \n [Events](../../../csharp/programming-guide/events/index.md)   \n [Delegates with Named vs. Anonymous Methods](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)   \n [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)","nodes":[{"pos":[4,618],"nodes":[{"content":"delegate (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,40],"content":"delegate (C# Reference) | Microsoft Docs","nodes":[{"content":"delegate (C# Reference) | Microsoft Docs","pos":[0,40]}]}],"pos":[6,49],"yaml":true}],"content":"title: \"delegate (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"delegate_CSharpKeyword\"\n  - \"delegate\"\n  - \"CS0123\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"delegate keyword [C#]\"\n  - \"function pointers [C#]\"\nms.assetid: 0bb8cb6d-2f87-47c7-9d1f-d65c1cd01e9f\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[625,648],"content":"delegate (C# Reference)","linkify":"delegate (C# Reference)","nodes":[{"content":"delegate (C# Reference)","pos":[0,23]}]},{"content":"The declaration of a delegate type is similar to a method signature.","pos":[649,717]},{"content":"It has a return value and any number of parameters of any type:","pos":[718,781]},{"content":"A <ph id=\"ph1\">`delegate`</ph> is a reference type that can be used to encapsulate a named or an anonymous method.","pos":[912,1008],"source":"A `delegate` is a reference type that can be used to encapsulate a named or an anonymous method."},{"content":"Delegates are similar to function pointers in C++; however, delegates are type-safe and secure.","pos":[1009,1104]},{"content":"For applications of delegates, see <bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept> and <bpt id=\"p2\">[</bpt>Generic Delegates<ept id=\"p2\">](../../../csharp/programming-guide/generics/generic-delegates.md)</ept>.","pos":[1105,1295],"source":" For applications of delegates, see [Delegates](../../../csharp/programming-guide/delegates/index.md) and [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md)."},{"pos":[1304,1311],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1315,1403],"content":"Delegates are the basis for <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>.","source":"Delegates are the basis for [Events](../../../csharp/programming-guide/events/index.md)."},{"content":"A delegate can be instantiated by associating it either with a named or anonymous method.","pos":[1410,1499]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Named Methods<ept id=\"p1\">](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)</ept> and <bpt id=\"p2\">[</bpt>Anonymous Methods<ept id=\"p2\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.","pos":[1500,1745],"source":" For more information, see [Named Methods](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md) and [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)."},{"content":"The delegate must be instantiated with a method or lambda expression that has a compatible return type and input parameters.","pos":[1752,1876]},{"content":"For more information on the degree of variance that is allowed in the method signature, see <bpt id=\"p1\">[</bpt>Variance in Delegates<ept id=\"p1\">](http://msdn.microsoft.com/library/e3b98197-6c5b-4e55-9c6e-9739b60645ca)</ept>.","pos":[1877,2065],"source":" For more information on the degree of variance that is allowed in the method signature, see [Variance in Delegates](http://msdn.microsoft.com/library/e3b98197-6c5b-4e55-9c6e-9739b60645ca)."},{"content":"For use with anonymous methods, the delegate and the code to be associated with it are declared together.","pos":[2066,2171]},{"content":"Both ways of instantiating delegates are discussed in this section.","pos":[2172,2239]},{"pos":[2248,2255],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2259,2369],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsTypes#8<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/delegate_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsTypes#8](../../../csharp/language-reference/keywords/codesnippet/CSharp/delegate_1.cs)]"},{"pos":[2378,2403],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2517,2525],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2529,2589],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2593,2660],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2664,2732],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2736,2818],"source":"[Reference Types](../../../csharp/language-reference/keywords/reference-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2822,2888],"source":"[Delegates](../../../csharp/programming-guide/delegates/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2892,2952],"source":"[Events](../../../csharp/programming-guide/events/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Delegates with Named vs. Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)</ept><ph id=\"ph1\"> </ph>","pos":[2956,3091],"source":"[Delegates with Named vs. Anonymous Methods](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md) "},{"content":"<bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>","pos":[3095,3203],"source":"[Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)"}]}