{"content":"---\ntitle: \"ICorProfilerInfo4::InitializeCurrentThread Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerInfo4::InitializeCurrentThread\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo4::InitializeCurrentThread\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo4::InitializeCurrentThread method [.NET Framework profiling]\"\n  - \"InitializeCurrentThread method, ICorProfilerInfo4 interface [.NET Framework profiling]\"\nms.assetid: 18a3335c-8c75-476c-b6de-72c0bfedae5d\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 8\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ICorProfilerInfo4::InitializeCurrentThread Method\nInitializes the current thread in advance of subsequent profiler API calls on the same thread, so that deadlock can be avoided.  \n  \n## Syntax  \n  \n```  \nHRESULT InitializeCurrentThread ();  \n```  \n  \n## Remarks  \n We recommend that you call `InitializeCurrentThread` on any thread that will call a profiler API while there are suspended threads. This method is typically used by sampling profilers that create their own thread to call the [ICorProfilerInfo2::DoStackSnapshot](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-dostacksnapshot-method.md) method to perform stack walks while the target thread is suspended. By calling `InitializeCurrentThread` once when the profiler first creates the sampling thread, profilers can ensure that lazy per-thread initialization that the CLR would otherwise perform during the first call to `DoStackSnapshot` can now occur safely when no other threads are suspended.  \n  \n> [!NOTE]\n>  `InitializeCurrentThread` does the initialization in advance to finish tasks that take locks, and may deadlock. Call `InitializeCurrentThread` only when there are no suspended threads.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v45plus](../../../../includes/net-current-v45plus-md.md)]  \n  \n## See Also  \n [ICorProfilerInfo4 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo4-interface.md)   \n [Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)   \n [Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)","nodes":[{"pos":[4,797],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerInfo4::InitializeCurrentThread Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerInfo4::InitializeCurrentThread\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo4::InitializeCurrentThread\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo4::InitializeCurrentThread method [.NET Framework profiling]\"\n  - \"InitializeCurrentThread method, ICorProfilerInfo4 interface [.NET Framework profiling]\"\nms.assetid: 18a3335c-8c75-476c-b6de-72c0bfedae5d\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 8\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"ICorProfilerInfo4::InitializeCurrentThread Method | Microsoft Docs","nodes":[{"pos":[0,66],"content":"ICorProfilerInfo4::InitializeCurrentThread Method | Microsoft Docs","nodes":[{"content":"ICorProfilerInfo4::InitializeCurrentThread Method | Microsoft Docs","pos":[0,66]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[804,853],"content":"ICorProfilerInfo4::InitializeCurrentThread Method","linkify":"ICorProfilerInfo4::InitializeCurrentThread Method","nodes":[{"content":"ICorProfilerInfo4::InitializeCurrentThread Method","pos":[0,49]}]},{"content":"Initializes the current thread in advance of subsequent profiler API calls on the same thread, so that deadlock can be avoided.","pos":[854,981]},{"pos":[990,996],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1058,1065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"We recommend that you call <ph id=\"ph1\">`InitializeCurrentThread`</ph> on any thread that will call a profiler API while there are suspended threads.","pos":[1069,1200],"source":"We recommend that you call `InitializeCurrentThread` on any thread that will call a profiler API while there are suspended threads."},{"content":"This method is typically used by sampling profilers that create their own thread to call the <bpt id=\"p1\">[</bpt>ICorProfilerInfo2::DoStackSnapshot<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-dostacksnapshot-method.md)</ept> method to perform stack walks while the target thread is suspended.","pos":[1201,1494],"source":" This method is typically used by sampling profilers that create their own thread to call the [ICorProfilerInfo2::DoStackSnapshot](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-dostacksnapshot-method.md) method to perform stack walks while the target thread is suspended."},{"content":"By calling <ph id=\"ph1\">`InitializeCurrentThread`</ph> once when the profiler first creates the sampling thread, profilers can ensure that lazy per-thread initialization that the CLR would otherwise perform during the first call to <ph id=\"ph2\">`DoStackSnapshot`</ph> can now occur safely when no other threads are suspended.","pos":[1495,1784],"source":" By calling `InitializeCurrentThread` once when the profiler first creates the sampling thread, profilers can ensure that lazy per-thread initialization that the CLR would otherwise perform during the first call to `DoStackSnapshot` can now occur safely when no other threads are suspended."},{"pos":[1792,1987],"content":"[!NOTE]\n `InitializeCurrentThread` does the initialization in advance to finish tasks that take locks, and may deadlock. Call `InitializeCurrentThread` only when there are no suspended threads.","leadings":["","> "],"nodes":[{"content":"`InitializeCurrentThread` does the initialization in advance to finish tasks that take locks, and may deadlock. Call `InitializeCurrentThread` only when there are no suspended threads.","pos":[9,193],"nodes":[{"content":"<ph id=\"ph1\">`InitializeCurrentThread`</ph> does the initialization in advance to finish tasks that take locks, and may deadlock.","pos":[0,111],"source":"`InitializeCurrentThread` does the initialization in advance to finish tasks that take locks, and may deadlock."},{"content":"Call <ph id=\"ph1\">`InitializeCurrentThread`</ph> only when there are no suspended threads.","pos":[112,184],"source":" Call `InitializeCurrentThread` only when there are no suspended threads."}]}]},{"pos":[1996,2008],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2012,2116],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2123,2157],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[2164,2189],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2196,2224],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept>","source":"**.NET Framework Versions:**"},{"pos":[2313,2321],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo4 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo4-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[2325,2438],"source":"[ICorProfilerInfo4 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo4-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>Profiling Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[2442,2541],"source":"[Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md) "},{"content":"<bpt id=\"p1\">[</bpt>Profiling<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept>","pos":[2545,2617],"source":"[Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)"}]}