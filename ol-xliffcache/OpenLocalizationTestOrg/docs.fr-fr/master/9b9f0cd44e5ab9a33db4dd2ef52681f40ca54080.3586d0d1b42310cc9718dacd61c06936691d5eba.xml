{"content":"---\ntitle: \"Compiling an Interop Project\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords:\n  - \"interoperation with unmanaged code, compiling\"\n  - \"COM interop, compiling\"\n  - \"exposing COM components to .NET Framework\"\n  - \"compiling interop projects\"\n  - \"interoperation with unmanaged code, exposing COM components\"\n  - \"COM interop, exposing COM components\"\nms.assetid: 6fcf6588-5e25-41af-b4ae-780974f2c3df\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Compiling an Interop Project\n\nCOM interop projects that reference one or more assemblies containing imported COM types are compiled like any other managed project. You can reference interop assemblies in a development environment such as Visual Studio, or you can reference them when you use a command-line compiler. In either case, to compile properly, the interop assembly must be in the same directory as the other project files.\n\n There are two ways to reference interop assemblies:\n\n-   Embedded interop types: Beginning with the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)] and Visual Studio 2010, you can instruct the compiler to embed type information from an interop assembly into your executable. This is the recommended technique.\n\n-   Deploying interop assemblies: You can create a standard reference to an interop assembly. In this case, the interop assembly must be deployed with your application.\n\n The differences between these two techniques are discussed in greater detail in [Using COM Types in Managed Code](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/3y76b69k(v=vs.100)).\n\n Embedding interop types with Visual Studio is demonstrated in [Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (C#)](/docs/csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md), and [Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (Visual Basic)](/docs/visual-basic/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-vs.md).\n\n To reference an interop assembly with a command-line compiler and embed type information in your executables, use the [/link (C# Compiler Options)](../../csharp/language-reference/compiler-options/link-compiler-option.md) or the [/link (Visual Basic)](../../visual-basic/reference/command-line-compiler/link.md) compiler switch and specify the name of the interop assembly.\n\n> [!NOTE]\n> Visual C++ applications cannot embed type information, but they can interoperate with applications or add-ins that do.\n\n To compile an application that includes a primary interop assembly when it is deployed, use the **/reference** compiler switch and specify the name of the interop assembly.\n\n## See also\n\n- [Exposing COM Components to the .NET Framework](exposing-com-components.md)\n- [Language Independence and Language-Independent Components](../../standard/language-independence-and-language-independent-components.md)\n- [Using COM Types in Managed Code](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/3y76b69k(v=vs.100))\n- [Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (C#)](/docs/csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)\n- [Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (Visual Basic)](/docs/visual-basic/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-vs.md)\n- [Importing a Type Library as an Assembly](importing-a-type-library-as-an-assembly.md)","nodes":[{"pos":[4,444],"embed":true,"restype":"x-metadata","content":"title: \"Compiling an Interop Project\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords:\n  - \"interoperation with unmanaged code, compiling\"\n  - \"COM interop, compiling\"\n  - \"exposing COM components to .NET Framework\"\n  - \"compiling interop projects\"\n  - \"interoperation with unmanaged code, exposing COM components\"\n  - \"COM interop, exposing COM components\"\nms.assetid: 6fcf6588-5e25-41af-b4ae-780974f2c3df\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Compiling an Interop Project","nodes":[{"pos":[0,28],"content":"Compiling an Interop Project","nodes":[{"content":"Compiling an Interop Project","pos":[0,28]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[451,479],"content":"Compiling an Interop Project","linkify":"Compiling an Interop Project","nodes":[{"content":"Compiling an Interop Project","pos":[0,28]}]},{"content":"COM interop projects that reference one or more assemblies containing imported COM types are compiled like any other managed project.","pos":[481,614]},{"content":"You can reference interop assemblies in a development environment such as Visual Studio, or you can reference them when you use a command-line compiler.","pos":[615,767]},{"content":"In either case, to compile properly, the interop assembly must be in the same directory as the other project files.","pos":[768,883]},{"content":"There are two ways to reference interop assemblies:","pos":[886,937]},{"content":"Embedded interop types: Beginning with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph> and Visual Studio 2010, you can instruct the compiler to embed type information from an interop assembly into your executable.","pos":[943,1175],"source":"Embedded interop types: Beginning with the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)] and Visual Studio 2010, you can instruct the compiler to embed type information from an interop assembly into your executable."},{"content":"This is the recommended technique.","pos":[1176,1210]},{"content":"Deploying interop assemblies: You can create a standard reference to an interop assembly.","pos":[1216,1305]},{"content":"In this case, the interop assembly must be deployed with your application.","pos":[1306,1380]},{"pos":[1383,1586],"content":"The differences between these two techniques are discussed in greater detail in <bpt id=\"p1\">[</bpt>Using COM Types in Managed Code<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/3y76b69k(v=vs.100))</ept>.","source":"The differences between these two techniques are discussed in greater detail in [Using COM Types in Managed Code](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/3y76b69k(v=vs.100))."},{"pos":[1589,2071],"content":"Embedding interop types with Visual Studio is demonstrated in <bpt id=\"p1\">[</bpt>Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (C#)<ept id=\"p1\">](/docs/csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)</ept>, and <bpt id=\"p2\">[</bpt>Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (Visual Basic)<ept id=\"p2\">](/docs/visual-basic/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-vs.md)</ept>.","source":"Embedding interop types with Visual Studio is demonstrated in [Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (C#)](/docs/csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md), and [Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (Visual Basic)](/docs/visual-basic/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-vs.md)."},{"pos":[2074,2447],"content":"To reference an interop assembly with a command-line compiler and embed type information in your executables, use the <bpt id=\"p1\">[</bpt>/link (C# Compiler Options)<ept id=\"p1\">](../../csharp/language-reference/compiler-options/link-compiler-option.md)</ept> or the <bpt id=\"p2\">[</bpt>/link (Visual Basic)<ept id=\"p2\">](../../visual-basic/reference/command-line-compiler/link.md)</ept> compiler switch and specify the name of the interop assembly.","source":"To reference an interop assembly with a command-line compiler and embed type information in your executables, use the [/link (C# Compiler Options)](../../csharp/language-reference/compiler-options/link-compiler-option.md) or the [/link (Visual Basic)](../../visual-basic/reference/command-line-compiler/link.md) compiler switch and specify the name of the interop assembly."},{"pos":[2451,2579],"content":"[!NOTE]\nVisual C++ applications cannot embed type information, but they can interoperate with applications or add-ins that do.","leadings":["","> "],"nodes":[{"content":"Visual C++ applications cannot embed type information, but they can interoperate with applications or add-ins that do.","pos":[8,126]}]},{"pos":[2582,2754],"content":"To compile an application that includes a primary interop assembly when it is deployed, use the <bpt id=\"p1\">**</bpt>/reference<ept id=\"p1\">**</ept> compiler switch and specify the name of the interop assembly.","source":"To compile an application that includes a primary interop assembly when it is deployed, use the **/reference** compiler switch and specify the name of the interop assembly."},{"pos":[2759,2767],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2771,2846],"content":"<bpt id=\"p1\">[</bpt>Exposing COM Components to the .NET Framework<ept id=\"p1\">](exposing-com-components.md)</ept>","source":"[Exposing COM Components to the .NET Framework](exposing-com-components.md)"},{"pos":[2849,2985],"content":"<bpt id=\"p1\">[</bpt>Language Independence and Language-Independent Components<ept id=\"p1\">](../../standard/language-independence-and-language-independent-components.md)</ept>","source":"[Language Independence and Language-Independent Components](../../standard/language-independence-and-language-independent-components.md)"},{"pos":[2988,3110],"content":"<bpt id=\"p1\">[</bpt>Using COM Types in Managed Code<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/3y76b69k(v=vs.100))</ept>","source":"[Using COM Types in Managed Code](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/3y76b69k(v=vs.100))"},{"pos":[3113,3317],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (C#)<ept id=\"p1\">](/docs/csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)</ept>","source":"[Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (C#)](/docs/csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)"},{"pos":[3320,3529],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (Visual Basic)<ept id=\"p1\">](/docs/visual-basic/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-vs.md)</ept>","source":"[Walkthrough: Embedding Types from Managed Assemblies in Visual Studio (Visual Basic)](/docs/visual-basic/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-vs.md)"},{"pos":[3532,3617],"content":"<bpt id=\"p1\">[</bpt>Importing a Type Library as an Assembly<ept id=\"p1\">](importing-a-type-library-as-an-assembly.md)</ept>","source":"[Importing a Type Library as an Assembly](importing-a-type-library-as-an-assembly.md)"}]}