{"content":"---\ntitle: \"WPF Application Resource, Content, and Data Files\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"WPF application [WPF], files\"\n  - \"loose resources [WPF]\"\n  - \"content files [WPF]\"\n  - \"Site of Origin files [WPF]\"\n  - \"resource files [WPF]\"\n  - \"remote files [WPF]\"\n  - \"embedded resources [WPF]\"\n  - \"files [WPF]\"\n  - \"referencing application files [WPF]\"\n  - \"application development [WPF], files\"\n  - \"application management [WPF]\"\nms.assetid: 7ad2943b-3961-41d3-8fc6-1582d43f5d99\n---\n# WPF Application Resource, Content, and Data Files\n[!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)] applications often depend on files that contain non-executable data, such as [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)], images, video, and audio. Windows Presentation Foundation (WPF) offers special support for configuring, identifying, and using these types of data files, which are called application data files. This support revolves around a specific set of application data file types, including:  \n  \n-   **Resource Files**: Data files that are compiled into either an executable or library [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] assembly.  \n  \n-   **Content Files**: Standalone data files that have an explicit association with an executable [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] assembly.  \n  \n-   **Site of Origin Files**: Standalone data files that have no association with an executable [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] assembly.  \n  \n One important distinction to make between these three types of files is that resource files and content files are known at build time; an assembly has explicit knowledge of them. For site of origin files, however, an assembly may have no knowledge of them at all, or implicit knowledge through a pack [!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)] reference; the case of the latter, there is no guarantee that the referenced site of origin file actually exists.  \n  \n To reference application data files, Windows Presentation Foundation (WPF) uses the Pack [!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)] Scheme, which is described in detail in [Pack URIs in WPF](pack-uris-in-wpf.md)).  \n  \n This topic describes how to configure and use application data files.  \n\n<a name=\"Resource_Files\"></a>   \n## Resource Files  \n If an application data file must always be available to an application, the only way to guarantee availability is to compile it into an application's main executable assembly or one of its referenced assemblies. This type of application data file is known as a *resource file*.  \n  \n You should use resource files when:  \n  \n-   You don't need to update the resource file's content after it is compiled into an assembly.  \n  \n-   You want to simplify application distribution complexity by reducing the number of file dependencies.  \n  \n-   Your application data file needs to be localizable (see [WPF Globalization and Localization Overview](../advanced/wpf-globalization-and-localization-overview.md)).  \n  \n> [!NOTE]\n>  The resource files described in this section are different than the resource files described in [XAML Resources](../advanced/xaml-resources.md) and different than the embedded or linked resources described in [Manage Application Resources (.NET)](/visualstudio/ide/managing-application-resources-dotnet).  \n  \n### Configuring Resource Files  \n In [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)], a resource file is a file that is included in an [!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)] project as a `Resource` item.  \n  \n```xml  \n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ... >  \n  ...  \n  <ItemGroup>  \n    <Resource Include=\"ResourceFile.xaml\" />  \n  </ItemGroup>  \n  ...  \n</Project>  \n```  \n  \n> [!NOTE]\n>  In [!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)], you create a resource file by adding a file to a project and setting its `Build Action` to `Resource`.  \n  \n When the project is built, [!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)] compiles the resource into the assembly.  \n  \n### Using Resource Files  \n To load a resource file, you can call the <xref:System.Windows.Application.GetResourceStream%2A> method of the <xref:System.Windows.Application> class, passing a pack [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] that identifies the desired resource file. <xref:System.Windows.Application.GetResourceStream%2A> returns a <xref:System.Windows.Resources.StreamResourceInfo> object, which exposes the resource file as a <xref:System.IO.Stream> and describes its content type.  \n  \n As an example, the following code shows how to use <xref:System.Windows.Application.GetResourceStream%2A> to load a <xref:System.Windows.Controls.Page> resource file and set it as the content of a <xref:System.Windows.Controls.Frame> (`pageFrame`):  \n  \n [!code-csharp[WPFAssemblyResourcesSnippets#LoadAPageResourceFileManuallyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/ApplicationGetResourceStreamSnippetWindow.xaml.cs#loadapageresourcefilemanuallycode)]\n [!code-vb[WPFAssemblyResourcesSnippets#LoadAPageResourceFileManuallyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/VisualBasic/ResourcesSample/ApplicationGetResourceStreamSnippetWindow.xaml.vb#loadapageresourcefilemanuallycode)]  \n  \n While calling <xref:System.Windows.Application.GetResourceStream%2A> gives you access to the <xref:System.IO.Stream>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with. Instead, you can let [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] take care of opening and converting the <xref:System.IO.Stream> by loading a resource file directly into the property of a type using code.  \n  \n The following example shows how to load a <xref:System.Windows.Controls.Page> directly into a <xref:System.Windows.Controls.Frame> (`pageFrame`) using code.  \n  \n [!code-csharp[WPFAssemblyResourcesSnippets#LoadPageResourceFileFromCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/ApplicationGetResourceStreamSnippetWindow.xaml.cs#loadpageresourcefilefromcode)]\n [!code-vb[WPFAssemblyResourcesSnippets#LoadPageResourceFileFromCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/VisualBasic/ResourcesSample/ApplicationGetResourceStreamSnippetWindow.xaml.vb#loadpageresourcefilefromcode)]  \n  \n The following example is the markup equivalent of the preceding example.  \n  \n [!code-xaml[WPFAssemblyResourcesSnippets#LoadPageResourceFileFromXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/ApplicationGetResourceStreamSnippetWindow.xaml#loadpageresourcefilefromxaml)]  \n  \n### Application Code Files as Resource Files  \n A special set of [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] application code files can be referenced using pack [!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)], including windows, pages, flow documents, and resource dictionaries. For example, you can set the <xref:System.Windows.Application.StartupUri%2A?displayProperty=nameWithType> property with a pack [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] that references the window or page that you would like to load when an application starts.  \n  \n [!code-xaml[WPFAssemblyResourcesSnippets#SetApplicationStartupURI](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/App.xaml#setapplicationstartupuri)]  \n  \n You can do this when a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] file is included in an [!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)] project as a `Page` item.  \n  \n```xml  \n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ... >  \n  ...  \n  <ItemGroup>  \n    <Page Include=\"MainWindow.xaml\" />  \n  </ItemGroup>  \n  ...  \n</Project>  \n```  \n  \n> [!NOTE]\n>  In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you add a new <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, <xref:System.Windows.Controls.Page>, <xref:System.Windows.Documents.FlowDocument>, or <xref:System.Windows.ResourceDictionary> to a project, the `Build Action` for the markup file will default to `Page`.  \n  \n When a project with `Page` items is compiled, the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] items are converted to binary format and compiled into the associated assembly. Consequently, these files can be used in the same way as typical resource files.  \n  \n> [!NOTE]\n>  If a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] file is configured as a `Resource` item, and does not have a code-behind file, the raw [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] is compiled into an assembly rather than a binary version of the raw [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)].  \n  \n<a name=\"Content_Files\"></a>   \n## Content Files  \n A *content file* is distributed as a loose file alongside an executable assembly. Although they are not compiled into an assembly, assemblies are compiled with metadata that establishes an association with each content file.  \n  \n You should use content files when your application requires a specific set of application data files that you want to be able to update without recompiling the assembly that consumes them.  \n  \n### Configuring Content Files  \n To add a content file to a project, an application data file must be included as a `Content` item. Furthermore, because a content file is not compiled directly into the assembly, you need to set the [!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]`CopyToOutputDirectory` metadata element to specify that the content file is copied to a location that is relative to the built assembly. If you want the resource to be copied to the build output folder every time a project is built, you set the `CopyToOutputDirectory` metadata element with the `Always` value. Otherwise, you can ensure that only the newest version of the resource is copied to the build output folder by using the `PreserveNewest` value.  \n  \n The following shows a file that is configured as a content file which is copied to the build output folder only when a new version of the resource is added to the project.  \n  \n```xml  \n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ... >  \n  ...  \n  <ItemGroup>  \n    <Content Include=\"ContentFile.xaml\">  \n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>  \n    </Content>  \n  </ItemGroup>  \n  ...  \n</Project>  \n```  \n  \n> [!NOTE]\n>  In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you create a content file by adding a file to a project and setting its `Build Action` to `Content`, and set its `Copy to Output Directory` to `Copy always` (same as `Always`) and `Copy if newer` (same as `PreserveNewest`).  \n  \n When the project is built, an <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute> attribute is compiled into the metadata of the assembly for each content file.  \n  \n `[assembly: AssemblyAssociatedContentFile(\"ContentFile.xaml\")]`  \n  \n The value of the <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute> implies the path to the content file relative to its position in the project. For example, if a content file was located in a project subfolder, the additional path information would be incorporated into the <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute> value.  \n  \n `[assembly: AssemblyAssociatedContentFile(\"Resources/ContentFile.xaml\")]`  \n  \n The <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute> value is also the value of the path to the content file in the build output folder.  \n  \n### Using Content Files  \n To load a content file, you can call the <xref:System.Windows.Application.GetContentStream%2A> method of the <xref:System.Windows.Application> class, passing a pack [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] that identifies the desired content file. <xref:System.Windows.Application.GetContentStream%2A> returns a <xref:System.Windows.Resources.StreamResourceInfo> object, which exposes the content file as a <xref:System.IO.Stream> and describes its content type.  \n  \n As an example, the following code shows how to use <xref:System.Windows.Application.GetContentStream%2A> to load a <xref:System.Windows.Controls.Page> content file and set it as the content of a <xref:System.Windows.Controls.Frame> (`pageFrame`).  \n  \n [!code-csharp[WPFAssemblyResourcesSnippets#LoadAPageContentFileManuallyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/ApplicationGetContentStreamSnippetWindow.xaml.cs#loadapagecontentfilemanuallycode)]\n [!code-vb[WPFAssemblyResourcesSnippets#LoadAPageContentFileManuallyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/VisualBasic/ResourcesSample/ApplicationGetContentStreamSnippetWindow.xaml.vb#loadapagecontentfilemanuallycode)]  \n  \n While calling <xref:System.Windows.Application.GetContentStream%2A> gives you access to the <xref:System.IO.Stream>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with. Instead, you can let [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] take care of opening and converting the <xref:System.IO.Stream> by loading a resource file directly into the property of a type using code.  \n  \n The following example shows how to load a <xref:System.Windows.Controls.Page> directly into a <xref:System.Windows.Controls.Frame> (`pageFrame`) using code.  \n  \n [!code-csharp[WPFAssemblyResourcesSnippets#LoadPageContentFileFromCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/ApplicationGetContentStreamSnippetWindow.xaml.cs#loadpagecontentfilefromcode)]\n [!code-vb[WPFAssemblyResourcesSnippets#LoadPageContentFileFromCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/VisualBasic/ResourcesSample/ApplicationGetContentStreamSnippetWindow.xaml.vb#loadpagecontentfilefromcode)]  \n  \n The following example is the markup equivalent of the preceding example.  \n  \n [!code-xaml[WPFAssemblyResourcesSnippets#LoadPageContentFileFromXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/ApplicationGetContentStreamSnippetWindow.xaml#loadpagecontentfilefromxaml)]  \n  \n<a name=\"Site_of_Origin_Files\"></a>   \n## Site of Origin Files  \n Resource files have an explicit relationship with the assemblies that they are distributed alongside, as defined by the <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute>. But, there are times when you may want to establish either an implicit or non-existent relationship between an assembly and an application data file, including when:  \n  \n-   A file doesn't exist at compile time.  \n  \n-   You don't know what files your assembly will require until run time.  \n  \n-   You want to be able to update files without recompiling the assembly that they are associated with.  \n  \n-   Your application uses large data files, such as audio and video, and you only want users to download them if they choose to.  \n  \n It is possible to load these types of files by using traditional [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] schemes, such as the file:/// and http:// schemes.  \n  \n [!code-xaml[WPFAssemblyResourcesSnippets#AbsolutePackUriFileHttpReferenceXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/AbsolutePackUriPage.xaml#absolutepackurifilehttpreferencexaml)]  \n  \n However, the file:/// and http:// schemes require your application to have full trust. If your application is a [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] that was launched from the Internet or intranet, and it requests only the set of permissions that are allowed for applications launched from those locations, loose files can only be loaded from the application's site of origin (launch location). Such files are known as *site of origin* files.  \n  \n Site of origin files are the only option for partial trust applications, although are not limited to partial trust applications. Full trust applications may still need to load application data files that they do not know about at build time; while full trust applications could use file:///, it is likely that the application data files will be installed in the same folder as, or a subfolder of, the application assembly. In this case, using site of origin referencing is easier than using file:///, because using file:/// requires you to work out the full path the file.  \n  \n> [!NOTE]\n>  Site of origin files are not cached with an [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] on a client machine, while content files are. Consequently, they are only downloaded when specifically requested. If an [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] application has large media files, configuring them as site of origin files means the initial application launch is much faster, and the files are only downloaded on demand.  \n  \n### Configuring Site of Origin Files  \n If your site of origin files are non-existent or unknown at compile time, you need to use traditional deployment mechanisms for ensuring the required files are available at run time, including using either the `XCopy` command-line program or the [!INCLUDE[TLA#tla_wininstall](../../../../includes/tlasharptla-wininstall-md.md)].  \n  \n If you do know at compile time the files that you would like to be located at the site of origin, but still want to avoid an explicit dependency, you can add those files to an [!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)] project as `None` item. As with content files, you need to set the [!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]`CopyToOutputDirectory` attribute to specify that the site of origin file is copied to a location that is relative to the built assembly, by specifying either the `Always` value or the `PreserveNewest` value.  \n  \n```xml  \n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ... >  \n  ...  \n  <None Include=\"PageSiteOfOriginFile.xaml\">  \n    <CopyToOutputDirectory>Always</CopyToOutputDirectory>  \n  </None>  \n  ...  \n</Project>  \n```  \n  \n> [!NOTE]\n>  In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you create a site of origin file by adding a file to a project and setting its `Build Action` to `None`.  \n  \n When the project is built, [!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)] copies the specified files to the build output folder.  \n  \n### Using Site of Origin Files  \n To load a site of origin file, you can call the <xref:System.Windows.Application.GetRemoteStream%2A> method of the <xref:System.Windows.Application> class, passing a pack [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] that identifies the desired site of origin file. <xref:System.Windows.Application.GetRemoteStream%2A> returns a <xref:System.Windows.Resources.StreamResourceInfo> object, which exposes the site of origin file as a <xref:System.IO.Stream> and describes its content type.  \n  \n As an example, the following code shows how to use <xref:System.Windows.Application.GetRemoteStream%2A> to load a <xref:System.Windows.Controls.Page> site of origin file and set it as the content of a <xref:System.Windows.Controls.Frame> (`pageFrame`).  \n  \n [!code-csharp[WPFAssemblyResourcesSnippets#LoadAPageSOOFileManuallyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/SOOPage.xaml.cs#loadapagesoofilemanuallycode)]\n [!code-vb[WPFAssemblyResourcesSnippets#LoadAPageSOOFileManuallyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/VisualBasic/ResourcesSample/SOOPage.xaml.vb#loadapagesoofilemanuallycode)]  \n  \n While calling <xref:System.Windows.Application.GetRemoteStream%2A> gives you access to the <xref:System.IO.Stream>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with. Instead, you can let [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] take care of opening and converting the <xref:System.IO.Stream> by loading a resource file directly into the property of a type using code.  \n  \n The following example shows how to load a <xref:System.Windows.Controls.Page> directly into a <xref:System.Windows.Controls.Frame> (`pageFrame`) using code.  \n  \n [!code-csharp[WPFAssemblyResourcesSnippets#LoadPageSOOFileFromCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/SOOPage.xaml.cs#loadpagesoofilefromcode)]\n [!code-vb[WPFAssemblyResourcesSnippets#LoadPageSOOFileFromCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/VisualBasic/ResourcesSample/SOOPage.xaml.vb#loadpagesoofilefromcode)]  \n  \n The following example is the markup equivalent of the preceding example.  \n  \n [!code-xaml[WPFAssemblyResourcesSnippets#LoadPageSOOFileFromXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAssemblyResourcesSnippets/CSharp/ResourcesSample/SOOPage.xaml#loadpagesoofilefromxaml)]  \n  \n<a name=\"Rebuilding_after_Changing_Build_Type\"></a>   \n## Rebuilding After Changing Build Type  \n After you change the build type of an application data file, you need to rebuild the entire application to ensure those changes are applied. If you only build the application, the changes are not applied.  \n  \n## See also\n\n- [Pack URIs in WPF](pack-uris-in-wpf.md)\n","nodes":[{"pos":[4,532],"embed":true,"restype":"x-metadata","content":"title: \"WPF Application Resource, Content, and Data Files\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"WPF application [WPF], files\"\n  - \"loose resources [WPF]\"\n  - \"content files [WPF]\"\n  - \"Site of Origin files [WPF]\"\n  - \"resource files [WPF]\"\n  - \"remote files [WPF]\"\n  - \"embedded resources [WPF]\"\n  - \"files [WPF]\"\n  - \"referencing application files [WPF]\"\n  - \"application development [WPF], files\"\n  - \"application management [WPF]\"\nms.assetid: 7ad2943b-3961-41d3-8fc6-1582d43f5d99","nodes":[{"content":"WPF Application Resource, Content, and Data Files","nodes":[{"pos":[0,49],"content":"WPF Application Resource, Content, and Data Files","nodes":[{"content":"WPF Application Resource, Content, and Data Files","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[539,588],"content":"WPF Application Resource, Content, and Data Files","linkify":"WPF Application Resource, Content, and Data Files","nodes":[{"content":"WPF Application Resource, Content, and Data Files","pos":[0,49]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)]</ph> applications often depend on files that contain non-executable data, such as <ph id=\"ph2\">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>, images, video, and audio.","pos":[589,830],"source":"[!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)] applications often depend on files that contain non-executable data, such as [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)], images, video, and audio."},{"content":"Windows Presentation Foundation (WPF) offers special support for configuring, identifying, and using these types of data files, which are called application data files.","pos":[831,999]},{"content":"This support revolves around a specific set of application data file types, including:","pos":[1000,1086]},{"pos":[1096,1261],"content":"<bpt id=\"p1\">**</bpt>Resource Files<ept id=\"p1\">**</ept>: Data files that are compiled into either an executable or library <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> assembly.","source":"**Resource Files**: Data files that are compiled into either an executable or library [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] assembly."},{"pos":[1271,1444],"content":"<bpt id=\"p1\">**</bpt>Content Files<ept id=\"p1\">**</ept>: Standalone data files that have an explicit association with an executable <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> assembly.","source":"**Content Files**: Standalone data files that have an explicit association with an executable [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] assembly."},{"pos":[1454,1625],"content":"<bpt id=\"p1\">**</bpt>Site of Origin Files<ept id=\"p1\">**</ept>: Standalone data files that have no association with an executable <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> assembly.","source":"**Site of Origin Files**: Standalone data files that have no association with an executable [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] assembly."},{"content":"One important distinction to make between these three types of files is that resource files and content files are known at build time; an assembly has explicit knowledge of them.","pos":[1632,1810]},{"content":"For site of origin files, however, an assembly may have no knowledge of them at all, or implicit knowledge through a pack <ph id=\"ph1\">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph> reference; the case of the latter, there is no guarantee that the referenced site of origin file actually exists.","pos":[1811,2114],"source":" For site of origin files, however, an assembly may have no knowledge of them at all, or implicit knowledge through a pack [!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)] reference; the case of the latter, there is no guarantee that the referenced site of origin file actually exists."},{"pos":[2121,2359],"content":"To reference application data files, Windows Presentation Foundation (WPF) uses the Pack <ph id=\"ph1\">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph> Scheme, which is described in detail in <bpt id=\"p1\">[</bpt>Pack URIs in WPF<ept id=\"p1\">](pack-uris-in-wpf.md)</ept>).","source":"To reference application data files, Windows Presentation Foundation (WPF) uses the Pack [!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)] Scheme, which is described in detail in [Pack URIs in WPF](pack-uris-in-wpf.md))."},{"content":"This topic describes how to configure and use application data files.","pos":[2366,2435]},{"pos":[2475,2489],"content":"Resource Files","linkify":"Resource Files","nodes":[{"content":"Resource Files","pos":[0,14]}]},{"content":"If an application data file must always be available to an application, the only way to guarantee availability is to compile it into an application's main executable assembly or one of its referenced assemblies.","pos":[2493,2704]},{"content":"This type of application data file is known as a <bpt id=\"p1\">*</bpt>resource file<ept id=\"p1\">*</ept>.","pos":[2705,2770],"source":" This type of application data file is known as a *resource file*."},{"content":"You should use resource files when:","pos":[2777,2812]},{"content":"You don't need to update the resource file's content after it is compiled into an assembly.","pos":[2822,2913]},{"content":"You want to simplify application distribution complexity by reducing the number of file dependencies.","pos":[2923,3024]},{"pos":[3034,3197],"content":"Your application data file needs to be localizable (see <bpt id=\"p1\">[</bpt>WPF Globalization and Localization Overview<ept id=\"p1\">](../advanced/wpf-globalization-and-localization-overview.md)</ept>).","source":"Your application data file needs to be localizable (see [WPF Globalization and Localization Overview](../advanced/wpf-globalization-and-localization-overview.md))."},{"pos":[3205,3520],"content":"[!NOTE]\n The resource files described in this section are different than the resource files described in [XAML Resources](../advanced/xaml-resources.md) and different than the embedded or linked resources described in [Manage Application Resources (.NET)](/visualstudio/ide/managing-application-resources-dotnet).","leadings":["","> "],"nodes":[{"content":"The resource files described in this section are different than the resource files described in <bpt id=\"p1\">[</bpt>XAML Resources<ept id=\"p1\">](../advanced/xaml-resources.md)</ept> and different than the embedded or linked resources described in <bpt id=\"p2\">[</bpt>Manage Application Resources (.NET)<ept id=\"p2\">](/visualstudio/ide/managing-application-resources-dotnet)</ept>.","pos":[9,313],"source":"The resource files described in this section are different than the resource files described in [XAML Resources](../advanced/xaml-resources.md) and different than the embedded or linked resources described in [Manage Application Resources (.NET)](/visualstudio/ide/managing-application-resources-dotnet)."}]},{"pos":[3530,3556],"content":"Configuring Resource Files","linkify":"Configuring Resource Files","nodes":[{"content":"Configuring Resource Files","pos":[0,26]}]},{"pos":[3560,3788],"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, a resource file is a file that is included in an <ph id=\"ph2\">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> project as a <ph id=\"ph3\">`Resource`</ph> item.","source":"In [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)], a resource file is a file that is included in an [!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)] project as a `Resource` item."},{"pos":[4000,4197],"content":"[!NOTE]\n In [!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)], you create a resource file by adding a file to a project and setting its `Build Action` to `Resource`.","leadings":["","> "],"nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph>, you create a resource file by adding a file to a project and setting its <ph id=\"ph2\">`Build Action`</ph> to <ph id=\"ph3\">`Resource`</ph>.","pos":[9,195],"source":"In [!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)], you create a resource file by adding a file to a project and setting its `Build Action` to `Resource`."}]},{"pos":[4204,4349],"content":"When the project is built, <ph id=\"ph1\">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> compiles the resource into the assembly.","source":"When the project is built, [!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)] compiles the resource into the assembly."},{"pos":[4359,4379],"content":"Using Resource Files","linkify":"Using Resource Files","nodes":[{"content":"Using Resource Files","pos":[0,20]}]},{"content":"To load a resource file, you can call the <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Windows.Application&gt;</ph> class, passing a pack <ph id=\"ph3\">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that identifies the desired resource file.","pos":[4383,4662],"source":"To load a resource file, you can call the <xref:System.Windows.Application.GetResourceStream%2A> method of the <xref:System.Windows.Application> class, passing a pack [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] that identifies the desired resource file."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Windows.Resources.StreamResourceInfo&gt;</ph> object, which exposes the resource file as a <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph> and describes its content type.","pos":[4663,4879],"source":"<xref:System.Windows.Application.GetResourceStream%2A> returns a <xref:System.Windows.Resources.StreamResourceInfo> object, which exposes the resource file as a <xref:System.IO.Stream> and describes its content type."},{"pos":[4886,5134],"content":"As an example, the following code shows how to use <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph> to load a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Page&gt;</ph> resource file and set it as the content of a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (<ph id=\"ph4\">`pageFrame`</ph>):","source":"As an example, the following code shows how to use <xref:System.Windows.Application.GetResourceStream%2A> to load a <xref:System.Windows.Controls.Page> resource file and set it as the content of a <xref:System.Windows.Controls.Frame> (`pageFrame`):"},{"content":"While calling <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph> gives you access to the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with.","pos":[5670,5904],"source":"While calling <xref:System.Windows.Application.GetResourceStream%2A> gives you access to the <xref:System.IO.Stream>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with."},{"content":"Instead, you can let <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> take care of opening and converting the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> by loading a resource file directly into the property of a type using code.","pos":[5905,6135],"source":" Instead, you can let [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] take care of opening and converting the <xref:System.IO.Stream> by loading a resource file directly into the property of a type using code."},{"pos":[6142,6298],"content":"The following example shows how to load a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Page&gt;</ph> directly into a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (<ph id=\"ph3\">`pageFrame`</ph>) using code.","source":"The following example shows how to load a <xref:System.Windows.Controls.Page> directly into a <xref:System.Windows.Controls.Frame> (`pageFrame`) using code."},{"content":"The following example is the markup equivalent of the preceding example.","pos":[6814,6886]},{"pos":[7145,7185],"content":"Application Code Files as Resource Files","linkify":"Application Code Files as Resource Files","nodes":[{"content":"Application Code Files as Resource Files","pos":[0,40]}]},{"content":"A special set of <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application code files can be referenced using pack <ph id=\"ph2\">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph>, including windows, pages, flow documents, and resource dictionaries.","pos":[7189,7485],"source":"A special set of [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] application code files can be referenced using pack [!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)], including windows, pages, flow documents, and resource dictionaries."},{"content":"For example, you can set the <ph id=\"ph1\">&lt;xref:System.Windows.Application.StartupUri%2A?displayProperty=nameWithType&gt;</ph> property with a pack <ph id=\"ph2\">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that references the window or page that you would like to load when an application starts.","pos":[7486,7773],"source":" For example, you can set the <xref:System.Windows.Application.StartupUri%2A?displayProperty=nameWithType> property with a pack [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] that references the window or page that you would like to load when an application starts."},{"pos":[7983,8202],"content":"You can do this when a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file is included in an <ph id=\"ph2\">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> project as a <ph id=\"ph3\">`Page`</ph> item.","source":"You can do this when a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] file is included in an [!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)] project as a `Page` item."},{"pos":[8408,8803],"content":"[!NOTE]\n In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you add a new <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, <xref:System.Windows.Controls.Page>, <xref:System.Windows.Documents.FlowDocument>, or <xref:System.Windows.ResourceDictionary> to a project, the `Build Action` for the markup file will default to `Page`.","leadings":["","> "],"nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph>, you add a new <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Page&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>, or <ph id=\"ph6\">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> to a project, the <ph id=\"ph7\">`Build Action`</ph> for the markup file will default to <ph id=\"ph8\">`Page`</ph>.","pos":[9,393],"source":"In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you add a new <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, <xref:System.Windows.Controls.Page>, <xref:System.Windows.Documents.FlowDocument>, or <xref:System.Windows.ResourceDictionary> to a project, the `Build Action` for the markup file will default to `Page`."}]},{"content":"When a project with <ph id=\"ph1\">`Page`</ph> items is compiled, the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> items are converted to binary format and compiled into the associated assembly.","pos":[8810,9011],"source":"When a project with `Page` items is compiled, the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] items are converted to binary format and compiled into the associated assembly."},{"content":"Consequently, these files can be used in the same way as typical resource files.","pos":[9012,9092]},{"pos":[9100,9488],"content":"[!NOTE]\n If a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] file is configured as a `Resource` item, and does not have a code-behind file, the raw [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] is compiled into an assembly rather than a binary version of the raw [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)].","leadings":["","> "],"nodes":[{"content":"If a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file is configured as a <ph id=\"ph2\">`Resource`</ph> item, and does not have a code-behind file, the raw <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> is compiled into an assembly rather than a binary version of the raw <ph id=\"ph4\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[9,386],"source":"If a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] file is configured as a `Resource` item, and does not have a code-behind file, the raw [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] is compiled into an assembly rather than a binary version of the raw [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[9529,9542],"content":"Content Files","linkify":"Content Files","nodes":[{"content":"Content Files","pos":[0,13]}]},{"content":"A <bpt id=\"p1\">*</bpt>content file<ept id=\"p1\">*</ept> is distributed as a loose file alongside an executable assembly.","pos":[9546,9627],"source":"A *content file* is distributed as a loose file alongside an executable assembly."},{"content":"Although they are not compiled into an assembly, assemblies are compiled with metadata that establishes an association with each content file.","pos":[9628,9770]},{"content":"You should use content files when your application requires a specific set of application data files that you want to be able to update without recompiling the assembly that consumes them.","pos":[9777,9965]},{"pos":[9975,10000],"content":"Configuring Content Files","linkify":"Configuring Content Files","nodes":[{"content":"Configuring Content Files","pos":[0,25]}]},{"content":"To add a content file to a project, an application data file must be included as a <ph id=\"ph1\">`Content`</ph> item.","pos":[10004,10102],"source":"To add a content file to a project, an application data file must be included as a `Content` item."},{"content":"Furthermore, because a content file is not compiled directly into the assembly, you need to set the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id=\"ph2\">`CopyToOutputDirectory`</ph> metadata element to specify that the content file is copied to a location that is relative to the built assembly.","pos":[10103,10417],"source":" Furthermore, because a content file is not compiled directly into the assembly, you need to set the [!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]`CopyToOutputDirectory` metadata element to specify that the content file is copied to a location that is relative to the built assembly."},{"content":"If you want the resource to be copied to the build output folder every time a project is built, you set the <ph id=\"ph1\">`CopyToOutputDirectory`</ph> metadata element with the <ph id=\"ph2\">`Always`</ph> value.","pos":[10418,10591],"source":" If you want the resource to be copied to the build output folder every time a project is built, you set the `CopyToOutputDirectory` metadata element with the `Always` value."},{"content":"Otherwise, you can ensure that only the newest version of the resource is copied to the build output folder by using the <ph id=\"ph1\">`PreserveNewest`</ph> value.","pos":[10592,10736],"source":" Otherwise, you can ensure that only the newest version of the resource is copied to the build output folder by using the `PreserveNewest` value."},{"content":"The following shows a file that is configured as a content file which is copied to the build output folder only when a new version of the resource is added to the project.","pos":[10743,10914]},{"pos":[11209,11529],"content":"[!NOTE]\n In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you create a content file by adding a file to a project and setting its `Build Action` to `Content`, and set its `Copy to Output Directory` to `Copy always` (same as `Always`) and `Copy if newer` (same as `PreserveNewest`).","leadings":["","> "],"nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph>, you create a content file by adding a file to a project and setting its <ph id=\"ph2\">`Build Action`</ph> to <ph id=\"ph3\">`Content`</ph>, and set its <ph id=\"ph4\">`Copy to Output Directory`</ph> to <ph id=\"ph5\">`Copy always`</ph> (same as <ph id=\"ph6\">`Always`</ph>) and <ph id=\"ph7\">`Copy if newer`</ph> (same as <ph id=\"ph8\">`PreserveNewest`</ph>).","pos":[9,318],"source":"In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you create a content file by adding a file to a project and setting its `Build Action` to `Content`, and set its `Copy to Output Directory` to `Copy always` (same as `Always`) and `Copy if newer` (same as `PreserveNewest`)."}]},{"pos":[11536,11715],"content":"When the project is built, an <ph id=\"ph1\">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> attribute is compiled into the metadata of the assembly for each content file.","source":"When the project is built, an <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute> attribute is compiled into the metadata of the assembly for each content file."},{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> implies the path to the content file relative to its position in the project.","pos":[11792,11957],"source":"The value of the <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute> implies the path to the content file relative to its position in the project."},{"content":"For example, if a content file was located in a project subfolder, the additional path information would be incorporated into the <ph id=\"ph1\">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> value.","pos":[11958,12165],"source":" For example, if a content file was located in a project subfolder, the additional path information would be incorporated into the <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute> value."},{"pos":[12252,12410],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> value is also the value of the path to the content file in the build output folder.","source":"The <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute> value is also the value of the path to the content file in the build output folder."},{"pos":[12420,12439],"content":"Using Content Files","linkify":"Using Content Files","nodes":[{"content":"Using Content Files","pos":[0,19]}]},{"content":"To load a content file, you can call the <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Windows.Application&gt;</ph> class, passing a pack <ph id=\"ph3\">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that identifies the desired content file.","pos":[12443,12719],"source":"To load a content file, you can call the <xref:System.Windows.Application.GetContentStream%2A> method of the <xref:System.Windows.Application> class, passing a pack [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] that identifies the desired content file."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Windows.Resources.StreamResourceInfo&gt;</ph> object, which exposes the content file as a <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph> and describes its content type.","pos":[12720,12934],"source":"<xref:System.Windows.Application.GetContentStream%2A> returns a <xref:System.Windows.Resources.StreamResourceInfo> object, which exposes the content file as a <xref:System.IO.Stream> and describes its content type."},{"pos":[12941,13187],"content":"As an example, the following code shows how to use <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph> to load a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Page&gt;</ph> content file and set it as the content of a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (<ph id=\"ph4\">`pageFrame`</ph>).","source":"As an example, the following code shows how to use <xref:System.Windows.Application.GetContentStream%2A> to load a <xref:System.Windows.Controls.Page> content file and set it as the content of a <xref:System.Windows.Controls.Frame> (`pageFrame`)."},{"content":"While calling <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph> gives you access to the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with.","pos":[13717,13950],"source":"While calling <xref:System.Windows.Application.GetContentStream%2A> gives you access to the <xref:System.IO.Stream>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with."},{"content":"Instead, you can let <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> take care of opening and converting the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> by loading a resource file directly into the property of a type using code.","pos":[13951,14181],"source":" Instead, you can let [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] take care of opening and converting the <xref:System.IO.Stream> by loading a resource file directly into the property of a type using code."},{"pos":[14188,14344],"content":"The following example shows how to load a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Page&gt;</ph> directly into a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (<ph id=\"ph3\">`pageFrame`</ph>) using code.","source":"The following example shows how to load a <xref:System.Windows.Controls.Page> directly into a <xref:System.Windows.Controls.Frame> (`pageFrame`) using code."},{"content":"The following example is the markup equivalent of the preceding example.","pos":[14854,14926]},{"pos":[15220,15240],"content":"Site of Origin Files","linkify":"Site of Origin Files","nodes":[{"content":"Site of Origin Files","pos":[0,20]}]},{"content":"Resource files have an explicit relationship with the assemblies that they are distributed alongside, as defined by the <ph id=\"ph1\">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph>.","pos":[15244,15435],"source":"Resource files have an explicit relationship with the assemblies that they are distributed alongside, as defined by the <xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute>."},{"content":"But, there are times when you may want to establish either an implicit or non-existent relationship between an assembly and an application data file, including when:","pos":[15436,15601]},{"content":"A file doesn't exist at compile time.","pos":[15611,15648]},{"content":"You don't know what files your assembly will require until run time.","pos":[15658,15726]},{"content":"You want to be able to update files without recompiling the assembly that they are associated with.","pos":[15736,15835]},{"content":"Your application uses large data files, such as audio and video, and you only want users to download them if they choose to.","pos":[15845,15969]},{"pos":[15976,16161],"content":"It is possible to load these types of files by using traditional <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> schemes, such as the file:/// and http:// schemes.","source":"It is possible to load these types of files by using traditional [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] schemes, such as the file:/// and http:// schemes."},{"content":"However, the file:/// and http:// schemes require your application to have full trust.","pos":[16411,16497]},{"content":"If your application is a <ph id=\"ph1\">[!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)]</ph> that was launched from the Internet or intranet, and it requests only the set of permissions that are allowed for applications launched from those locations, loose files can only be loaded from the application's site of origin (launch location).","pos":[16498,16838],"source":" If your application is a [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] that was launched from the Internet or intranet, and it requests only the set of permissions that are allowed for applications launched from those locations, loose files can only be loaded from the application's site of origin (launch location)."},{"content":"Such files are known as <bpt id=\"p1\">*</bpt>site of origin<ept id=\"p1\">*</ept> files.","pos":[16839,16886],"source":" Such files are known as *site of origin* files."},{"content":"Site of origin files are the only option for partial trust applications, although are not limited to partial trust applications.","pos":[16893,17021]},{"content":"Full trust applications may still need to load application data files that they do not know about at build time; while full trust applications could use file:///, it is likely that the application data files will be installed in the same folder as, or a subfolder of, the application assembly.","pos":[17022,17315]},{"content":"In this case, using site of origin referencing is easier than using file:///, because using file:/// requires you to work out the full path the file.","pos":[17316,17465]},{"pos":[17473,17961],"content":"[!NOTE]\n Site of origin files are not cached with an [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] on a client machine, while content files are. Consequently, they are only downloaded when specifically requested. If an [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] application has large media files, configuring them as site of origin files means the initial application launch is much faster, and the files are only downloaded on demand.","leadings":["","> "],"nodes":[{"content":"Site of origin files are not cached with an [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] on a client machine, while content files are. Consequently, they are only downloaded when specifically requested. If an [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] application has large media files, configuring them as site of origin files means the initial application launch is much faster, and the files are only downloaded on demand.","pos":[9,486],"nodes":[{"content":"Site of origin files are not cached with an <ph id=\"ph1\">[!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)]</ph> on a client machine, while content files are.","pos":[0,159],"source":"Site of origin files are not cached with an [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] on a client machine, while content files are."},{"content":"Consequently, they are only downloaded when specifically requested.","pos":[160,227]},{"content":"If an <ph id=\"ph1\">[!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)]</ph> application has large media files, configuring them as site of origin files means the initial application launch is much faster, and the files are only downloaded on demand.","pos":[228,477],"source":" If an [!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)] application has large media files, configuring them as site of origin files means the initial application launch is much faster, and the files are only downloaded on demand."}]}]},{"pos":[17971,18003],"content":"Configuring Site of Origin Files","linkify":"Configuring Site of Origin Files","nodes":[{"content":"Configuring Site of Origin Files","pos":[0,32]}]},{"pos":[18007,18335],"content":"If your site of origin files are non-existent or unknown at compile time, you need to use traditional deployment mechanisms for ensuring the required files are available at run time, including using either the <ph id=\"ph1\">`XCopy`</ph> command-line program or the <ph id=\"ph2\">[!INCLUDE[TLA#tla_wininstall](../../../../includes/tlasharptla-wininstall-md.md)]</ph>.","source":"If your site of origin files are non-existent or unknown at compile time, you need to use traditional deployment mechanisms for ensuring the required files are available at run time, including using either the `XCopy` command-line program or the [!INCLUDE[TLA#tla_wininstall](../../../../includes/tlasharptla-wininstall-md.md)]."},{"content":"If you do know at compile time the files that you would like to be located at the site of origin, but still want to avoid an explicit dependency, you can add those files to an <ph id=\"ph1\">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> project as <ph id=\"ph2\">`None`</ph> item.","pos":[18342,18617],"source":"If you do know at compile time the files that you would like to be located at the site of origin, but still want to avoid an explicit dependency, you can add those files to an [!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)] project as `None` item."},{"content":"As with content files, you need to set the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id=\"ph2\">`CopyToOutputDirectory`</ph> attribute to specify that the site of origin file is copied to a location that is relative to the built assembly, by specifying either the <ph id=\"ph3\">`Always`</ph> value or the <ph id=\"ph4\">`PreserveNewest`</ph> value.","pos":[18618,18946],"source":" As with content files, you need to set the [!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]`CopyToOutputDirectory` attribute to specify that the site of origin file is copied to a location that is relative to the built assembly, by specifying either the `Always` value or the `PreserveNewest` value."},{"pos":[19197,19398],"content":"[!NOTE]\n In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you create a site of origin file by adding a file to a project and setting its `Build Action` to `None`.","leadings":["","> "],"nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph>, you create a site of origin file by adding a file to a project and setting its <ph id=\"ph2\">`Build Action`</ph> to <ph id=\"ph3\">`None`</ph>.","pos":[9,199],"source":"In [!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)], you create a site of origin file by adding a file to a project and setting its `Build Action` to `None`."}]},{"pos":[19405,19564],"content":"When the project is built, <ph id=\"ph1\">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> copies the specified files to the build output folder.","source":"When the project is built, [!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)] copies the specified files to the build output folder."},{"pos":[19574,19600],"content":"Using Site of Origin Files","linkify":"Using Site of Origin Files","nodes":[{"content":"Using Site of Origin Files","pos":[0,26]}]},{"content":"To load a site of origin file, you can call the <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetRemoteStream%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Windows.Application&gt;</ph> class, passing a pack <ph id=\"ph3\">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that identifies the desired site of origin file.","pos":[19604,19893],"source":"To load a site of origin file, you can call the <xref:System.Windows.Application.GetRemoteStream%2A> method of the <xref:System.Windows.Application> class, passing a pack [!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)] that identifies the desired site of origin file."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Application.GetRemoteStream%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Windows.Resources.StreamResourceInfo&gt;</ph> object, which exposes the site of origin file as a <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph> and describes its content type.","pos":[19894,20114],"source":"<xref:System.Windows.Application.GetRemoteStream%2A> returns a <xref:System.Windows.Resources.StreamResourceInfo> object, which exposes the site of origin file as a <xref:System.IO.Stream> and describes its content type."},{"pos":[20121,20373],"content":"As an example, the following code shows how to use <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetRemoteStream%2A&gt;</ph> to load a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Page&gt;</ph> site of origin file and set it as the content of a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (<ph id=\"ph4\">`pageFrame`</ph>).","source":"As an example, the following code shows how to use <xref:System.Windows.Application.GetRemoteStream%2A> to load a <xref:System.Windows.Controls.Page> site of origin file and set it as the content of a <xref:System.Windows.Controls.Frame> (`pageFrame`)."},{"content":"While calling <ph id=\"ph1\">&lt;xref:System.Windows.Application.GetRemoteStream%2A&gt;</ph> gives you access to the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with.","pos":[20821,21053],"source":"While calling <xref:System.Windows.Application.GetRemoteStream%2A> gives you access to the <xref:System.IO.Stream>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with."},{"content":"Instead, you can let <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> take care of opening and converting the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> by loading a resource file directly into the property of a type using code.","pos":[21054,21284],"source":" Instead, you can let [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] take care of opening and converting the <xref:System.IO.Stream> by loading a resource file directly into the property of a type using code."},{"pos":[21291,21447],"content":"The following example shows how to load a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Page&gt;</ph> directly into a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (<ph id=\"ph3\">`pageFrame`</ph>) using code.","source":"The following example shows how to load a <xref:System.Windows.Controls.Page> directly into a <xref:System.Windows.Controls.Frame> (`pageFrame`) using code."},{"content":"The following example is the markup equivalent of the preceding example.","pos":[21875,21947]},{"pos":[22216,22252],"content":"Rebuilding After Changing Build Type","linkify":"Rebuilding After Changing Build Type","nodes":[{"content":"Rebuilding After Changing Build Type","pos":[0,36]}]},{"content":"After you change the build type of an application data file, you need to rebuild the entire application to ensure those changes are applied.","pos":[22256,22396]},{"content":"If you only build the application, the changes are not applied.","pos":[22397,22460]},{"pos":[22469,22477],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[22481,22520],"content":"<bpt id=\"p1\">[</bpt>Pack URIs in WPF<ept id=\"p1\">](pack-uris-in-wpf.md)</ept>","source":"[Pack URIs in WPF](pack-uris-in-wpf.md)"}]}