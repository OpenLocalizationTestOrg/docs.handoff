<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="classes.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2cfeac321860a609c21046818c36fbc6aa3c636</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aae5f9188a60b6279d4ca43537e87b6b3fd31b1b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7cd5e7ec3bb7ce8b5e6911cc1f026ec9a0296b3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Classes | C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about the class types and how you create them</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>.NET, .NET Core, C#</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>class<ept id="p1">*</ept> is a construct that enables you to create your own custom types by grouping together variables of other types, methods and events.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A class is like a blueprint.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It defines the data and behavior of a type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the class is not declared as static, client code can use it by creating <bpt id="p1">*</bpt>objects<ept id="p1">*</ept> or <bpt id="p2">*</bpt>instances<ept id="p2">*</ept> which are assigned to a variable.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The variable remains in memory until all references to it go out of scope.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At that time, the CLR marks it as eligible for garbage collection.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the class is declared as <bpt id="p1">[</bpt>static<ept id="p1">](https://msdn.microsoft.com/library/98f28cdx.aspx)</ept>, then only one copy exists in memory and client code can only access it through the class itself, not an <bpt id="p2">*</bpt>instance variable<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Static classes and static class members<ept id="p1">](https://msdn.microsoft.com/library/79b3xss3.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Reference types</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A type that is defined as a <bpt id="p1">[</bpt>class<ept id="p1">](https://msdn.microsoft.com/library/0b0thckt.aspx)</ept> is a <bpt id="p2">*</bpt>reference type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>At run time, when you declare a variable of a reference type, the variable contains the value <bpt id="p1">[</bpt>null<ept id="p1">](https://msdn.microsoft.com/library/edakx9da.aspx)</ept> until you explicitly create an instance of the object by using the <bpt id="p2">[</bpt>new<ept id="p2">](https://msdn.microsoft.com/library/51y09td4.aspx)</ept> operator, or assign it an object that has been created elsewhere by using <bpt id="p3">[</bpt>new<ept id="p3">](https://msdn.microsoft.com/library/51y09td4.aspx)</ept>, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the object is created, the memory is allocated on the managed heap, and the variable holds only a reference to the location of the object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Types on the managed heap require overhead both when they are allocated and when they are reclaimed by the automatic memory management functionality of the CLR, which is known as <bpt id="p1">*</bpt>garbage collection<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, garbage collection is also highly optimized, and in most scenarios, it does not create a performance issue.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about garbage collection, see <bpt id="p1">[</bpt>Automatic memory management and garbage collection<ept id="p1">](../standard/garbage-collection/gc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Reference types fully support <bpt id="p1">*</bpt>inheritance<ept id="p1">*</ept>, a fundamental characteristic of object-oriented programming.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you create a class, you can inherit from any other interface or class that is not defined as <bpt id="p1">[</bpt>sealed<ept id="p1">](https://msdn.microsoft.com/library/88c54tsw.aspx)</ept>, and other classes can inherit from your class and override your virtual methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Inheritance<ept id="p1">](https://msdn.microsoft.com/library/ms173149.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Declaring classes</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Classes are declared by using the <bpt id="p1">[</bpt>class<ept id="p1">](https://msdn.microsoft.com/library/0b0thckt.aspx)</ept> keyword, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>class<ept id="p1">**</ept> keyword is preceded by the access modifier.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">[</bpt>public<ept id="p1">](https://msdn.microsoft.com/library/yzh058ae.aspx)</ept> is used in this case, anyone can create objects from this class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The name of the class follows the <bpt id="p1">**</bpt>class<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The remainder of the definition is the class body, where the behavior and data are defined.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Fields, properties, methods, and events on a class are collectively referred to as <bpt id="p1">*</bpt>class members<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creating objects</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A class defines a type of object, but it is not an object itself.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An object is a concrete entity based on a class, and is sometimes referred to as an instance of a class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Objects can be created by using the <bpt id="p1">[</bpt>new<ept id="p1">](https://msdn.microsoft.com/library/51y09td4.aspx)</ept> keyword followed by the name of the class that the object will be based on, like this:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When an instance of a class is created, a reference to the object is passed back to the programmer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the previous example, <ph id="ph1">`object1`</ph> is a reference to an object that is based on <ph id="ph2">`Customer`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This reference refers to the new object but does not contain the object data itself.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In fact, you can create an object reference without creating an object at all:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>We do not recommend creating object references such as this one that does not refer to an object because trying to access an object through such a reference will fail at run time.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, such a reference can be made to refer to an object, either by creating a new object, or by assigning it to an existing object, such as this:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This code creates two object references that both refer to the same object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Therefore, any changes to the object made through <ph id="ph1">`object3`</ph> will be reflected in subsequent uses of <ph id="ph2">`object4`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because objects that are based on classes are referred to by reference, classes are known as reference types.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Class inheritance</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Inheritance is accomplished by using a <bpt id="p1">*</bpt>derivation<ept id="p1">*</ept>, which means a class is declared by using a <bpt id="p2">*</bpt>base class<ept id="p2">*</ept> from which it inherits data and behavior.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A base class is specified by appending a colon and the name of the base class following the derived class name, like this:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When a class declares a base class, it inherits all the members of the base class except the constructors.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Unlike C++, a class in C# can only directly inherit from one base class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, because a base class may itself inherit from another class, a class may indirectly inherit multiple base classes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Furthermore, a class can directly implement more than one interface.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Interfaces<ept id="p1">](programming-guide/interfaces/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A class can be declared <bpt id="p1">[</bpt>abstract<ept id="p1">](https://msdn.microsoft.com/library/sf985hc5.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An abstract class contains abstract methods that have a signature definition but no implementation.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Abstract classes cannot be instantiated.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>They can only be used through derived classes that implement the abstract methods.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>By contrast, a <bpt id="p1">[</bpt>sealed<ept id="p1">](https://msdn.microsoft.com/library/88c54tsw.aspx)</ept> class does not allow other classes to derive from it.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Abstract and sealed classes and class members<ept id="p1">](https://msdn.microsoft.com/library/ms173150.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Class definitions can be split between different source files.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Partial class definitions<ept id="p1">](https://msdn.microsoft.com/library/wa80x488.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the following example, a public class that contains a single field, a method, and a special method called a constructor is defined.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Constructors<ept id="p1">](https://msdn.microsoft.com/library/ace5hbzh.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The class is then instantiated with the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>C# language specification<ept id="p1">](https://msdn.microsoft.com/library/ms228593.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The language specification is the definitive source for C# syntax and usage.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# programming guide<ept id="p1">](https://msdn.microsoft.com/library/67ef8sbd.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Polymorphism<ept id="p1">](https://msdn.microsoft.com/library/ms173152.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Class and struct members<ept id="p1">](https://msdn.microsoft.com/library/ms173113.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Class and struct methods<ept id="p1">](https://msdn.microsoft.com/library/ms173114.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](https://msdn.microsoft.com/library/ace5hbzh.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Finalizers<ept id="p1">](https://msdn.microsoft.com/library/66x5fx1b.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Objects<ept id="p1">](https://msdn.microsoft.com/library/ms173110.aspx)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>