{"content":"---\ntitle: \"Type Characters (Visual Basic)\"\nms.date: 01/31/2018\nhelpviewer_keywords: \n  - \"&H prefix for hexadecimal values\"\n  - \"hexadecimal literals [Visual Basic]\"\n  - \"F literal type character [Visual Basic]\"\n  - \"& identifier type character\"\n  - \"type characters [Visual Basic]\"\n  - \"octal literals [Visual Basic]\"\n  - \"literals [Visual Basic], hexadecimal\"\n  - \"&O prefix for octal values\"\n  - \"literals [Visual Basic], default types\"\n  - \"defaults, literal types\"\n  - \"C literal type character [Visual Basic]\"\n  - \"type characters [Visual Basic], literal\"\n  - \"$ identifier type character\"\n  - \"L literal type character [Visual Basic]\"\n  - \"UI literal type characters [Visual Basic]\"\n  - \"default literal types [Visual Basic]\"\n  - \"D literal type character [Visual Basic]\"\n  - \"literals [Visual Basic], octal\"\n  - \"S literal type character [Visual Basic]\"\n  - \"! identifier type character\"\n  - \"US literal type characters [Visual Basic]\"\n  - \"% identifier type character\"\n  - \"data types [Visual Basic], type characters\"\n  - \"characters [Visual Basic], identifier type\"\n  - \"type characters [Visual Basic], identifier\"\n  - \"# identifier type character\"\n  - \"identifier type characters [Visual Basic]\"\n  - \"literal type characters [Visual Basic]\"\n  - \"I literal type character [Visual Basic]\"\n  - \"R literal type character [Visual Basic]\"\n  - \"@ identifier type character\"\n  - \"UL literal type characters [Visual Basic]\"\n  - \"literal types [Visual Basic], default\"\nms.assetid: 6353cb9b-6ee4-4af6-a5a8-88ce39f90cc5\n---\n# Type characters (Visual Basic)\n\nIn addition to specifying a data type in a declaration statement, you can force the data type of some programming elements with a *type character*. The type character must immediately follow the element, with no intervening characters of any kind.\n\nThe type character is not part of the name of the element. An element defined with a type character can be referenced without the type character.\n\n## Identifier type characters\n\nVisual Basic supplies a set of *identifier type characters* that you can use in a declaration to specify the data type of a variable or constant. The following table shows the available identifier type characters with examples of usage.\n  \n|Identifier type character|Data type|Example|  \n|-------------------------------|---------------|-------------|  \n|`%`|`Integer`|`Dim L%`|  \n|`&`|`Long`|`Dim M&`|  \n|`@`|`Decimal`|`Const W@ = 37.5`|  \n|`!`|`Single`|`Dim Q!`|  \n|`#`|`Double`|`Dim X#`|  \n|`$`|`String`|`Dim V$ = \"Secret\"`|  \n  \n No identifier type characters exist for the `Boolean`, `Byte`, `Char`, `Date`, `Object`, `SByte`, `Short`, `UInteger`, `ULong`, or `UShort` data types, or for any composite data types such as arrays or structures.\n\nIn some cases, you can append the `$` character to a Visual Basic function, for example `Left$` instead of `Left`, to obtain a returned value of type `String`.\n\nIn all cases, the identifier type character must immediately follow the identifier name.\n\n## Literal type characters\n\nA *literal* is a textual representation of a particular value of a data type.  \n\n### Default literal types\n\nThe form of a literal as it appears in your code ordinarily determines its data type. The following table shows these default types.  \n  \n|Textual form of literal|Default data type|Example|  \n|-----------------------------|-----------------------|-------------|  \n|Numeric, no fractional part|`Integer`|`2147483647`|  \n|Numeric, no fractional part, too large for `Integer`|`Long`|`2147483648`|  \n|Numeric, fractional part|`Double`|`1.2`|  \n|Enclosed in double quotation marks|`String`|`\"A\"`|  \n|Enclosed within number signs|`Date`|`#5/17/1993 9:32 AM#`|  \n\n### Forced literal types\n\nVisual Basic supplies a set of *literal type characters*, which you can use to force a literal to assume a data type other than the one its form indicates. You do this by appending the character to the end of the literal. The following table shows the available literal type characters with examples of usage.\n  \n|Literal type character|Data type|Example|  \n|----------------------------|---------------|-------------|  \n|`S`|`Short`|`I = 347S`|\n|`I`|`Integer`|`J = 347I`|\n|`L`|`Long`|`K = 347L`|\n|`D`|`Decimal`|`X = 347D`|\n|`F`|`Single`|`Y = 347F`|\n|`R`|`Double`|`Z = 347R`|\n|`US`|`UShort`|`L = 347US`|\n|`UI`|`UInteger`|`M = 347UI`|\n|`UL`|`ULong`|`N = 347UL`|\n|`C`|`Char`|`Q = \".\"C`|\n\nNo literal type characters exist for the `Boolean`, `Byte`, `Date`, `Object`, `SByte`, or `String` data types, or for any composite data types such as arrays or structures.\n\nLiterals can also use the identifier type characters (`%`, `&`, `@`, `!`, `#`, `$`), as can variables, constants, and expressions. However, the literal type characters (`S`, `I`, `L`, `D`, `F`, `R`, `C`) can be used only with literals.\n\nIn all cases, the literal type character must immediately follow the literal value.\n\n## Hexadecimal, binary, and octal literals\n\nThe compiler normally interprets an integer literal to be in the decimal (base 10) number system. You can also define an integer literal as a hexadecimal (base 16) number with the `&H` prefix, as a binary (base 2) number with the `&B` prefix, and as an octal (base 8) number with the `&O` prefix. The digits that follow the prefix must be appropriate for the number system. The following table illustrates this.  \n  \n|Number base|Prefix|Valid digit values|Example|\n|-----------------|------------|------------------------|-------------|\n|Hexadecimal (base 16)|`&H`|0-9 and A-F|`&HFFFF`|\n|Binary (base 2)|`&B`|0-1|`&B01111100`|\n|Octal (base 8)|`&O`|0-7|`&O77`|\n\nStarting in Visual Basic 2017, you can use the underscore character (`_`) as a group separator to enhance the readability of an integral literal. The following example uses the `_` character to group a binary literal into 8-bit groups:\n\n```vb\nDim number As Integer = &B00100010_11000101_11001111_11001101\n```\n\nYou can follow a prefixed literal with a literal type character. The following example shows this.\n\n```vb\nDim counter As Short = &H8000S\nDim flags As UShort = &H8000US\n```\n\nIn the previous example, `counter` has the decimal value of -32768, and `flags` has the decimal value of +32768.\n\nStarting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits. For example:\n\n```vb\nDim number As Integer = &H_C305_F860\n```\n\n[!INCLUDE [supporting-underscores](../../../../../includes/vb-separator-langversion.md)]\n\n## See also\n\n- [Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)\n- [Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)\n- [Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)\n- [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)\n- [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)\n- [Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)\n- [Data Types](../../../../visual-basic/language-reference/data-types/index.md)\n","nodes":[{"pos":[4,1519],"embed":true,"restype":"x-metadata","content":"title: \"Type Characters (Visual Basic)\"\nms.date: 01/31/2018\nhelpviewer_keywords: \n  - \"&H prefix for hexadecimal values\"\n  - \"hexadecimal literals [Visual Basic]\"\n  - \"F literal type character [Visual Basic]\"\n  - \"& identifier type character\"\n  - \"type characters [Visual Basic]\"\n  - \"octal literals [Visual Basic]\"\n  - \"literals [Visual Basic], hexadecimal\"\n  - \"&O prefix for octal values\"\n  - \"literals [Visual Basic], default types\"\n  - \"defaults, literal types\"\n  - \"C literal type character [Visual Basic]\"\n  - \"type characters [Visual Basic], literal\"\n  - \"$ identifier type character\"\n  - \"L literal type character [Visual Basic]\"\n  - \"UI literal type characters [Visual Basic]\"\n  - \"default literal types [Visual Basic]\"\n  - \"D literal type character [Visual Basic]\"\n  - \"literals [Visual Basic], octal\"\n  - \"S literal type character [Visual Basic]\"\n  - \"! identifier type character\"\n  - \"US literal type characters [Visual Basic]\"\n  - \"% identifier type character\"\n  - \"data types [Visual Basic], type characters\"\n  - \"characters [Visual Basic], identifier type\"\n  - \"type characters [Visual Basic], identifier\"\n  - \"# identifier type character\"\n  - \"identifier type characters [Visual Basic]\"\n  - \"literal type characters [Visual Basic]\"\n  - \"I literal type character [Visual Basic]\"\n  - \"R literal type character [Visual Basic]\"\n  - \"@ identifier type character\"\n  - \"UL literal type characters [Visual Basic]\"\n  - \"literal types [Visual Basic], default\"\nms.assetid: 6353cb9b-6ee4-4af6-a5a8-88ce39f90cc5","nodes":[{"content":"Type Characters (Visual Basic)","nodes":[{"pos":[0,30],"content":"Type Characters (Visual Basic)","nodes":[{"content":"Type Characters (Visual Basic)","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[1526,1556],"content":"Type characters (Visual Basic)","linkify":"Type characters (Visual Basic)","nodes":[{"content":"Type characters (Visual Basic)","pos":[0,30]}]},{"content":"In addition to specifying a data type in a declaration statement, you can force the data type of some programming elements with a <bpt id=\"p1\">*</bpt>type character<ept id=\"p1\">*</ept>.","pos":[1558,1705],"source":"In addition to specifying a data type in a declaration statement, you can force the data type of some programming elements with a *type character*."},{"content":"The type character must immediately follow the element, with no intervening characters of any kind.","pos":[1706,1805]},{"content":"The type character is not part of the name of the element.","pos":[1807,1865]},{"content":"An element defined with a type character can be referenced without the type character.","pos":[1866,1952]},{"pos":[1957,1983],"content":"Identifier type characters","linkify":"Identifier type characters","nodes":[{"content":"Identifier type characters","pos":[0,26]}]},{"content":"Visual Basic supplies a set of <bpt id=\"p1\">*</bpt>identifier type characters<ept id=\"p1\">*</ept> that you can use in a declaration to specify the data type of a variable or constant.","pos":[1985,2130],"source":"Visual Basic supplies a set of *identifier type characters* that you can use in a declaration to specify the data type of a variable or constant."},{"content":"The following table shows the available identifier type characters with examples of usage.","pos":[2131,2221]},{"content":"Identifier type character","pos":[2226,2251]},{"content":"Data type","pos":[2252,2261]},{"content":"Example","pos":[2262,2269]},{"pos":[2519,2732],"content":"No identifier type characters exist for the <ph id=\"ph1\">`Boolean`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Char`</ph>, <ph id=\"ph4\">`Date`</ph>, <ph id=\"ph5\">`Object`</ph>, <ph id=\"ph6\">`SByte`</ph>, <ph id=\"ph7\">`Short`</ph>, <ph id=\"ph8\">`UInteger`</ph>, <ph id=\"ph9\">`ULong`</ph>, or <ph id=\"ph10\">`UShort`</ph> data types, or for any composite data types such as arrays or structures.","source":"No identifier type characters exist for the `Boolean`, `Byte`, `Char`, `Date`, `Object`, `SByte`, `Short`, `UInteger`, `ULong`, or `UShort` data types, or for any composite data types such as arrays or structures."},{"pos":[2734,2893],"content":"In some cases, you can append the <ph id=\"ph1\">`$`</ph> character to a Visual Basic function, for example <ph id=\"ph2\">`Left$`</ph> instead of <ph id=\"ph3\">`Left`</ph>, to obtain a returned value of type <ph id=\"ph4\">`String`</ph>.","source":"In some cases, you can append the `$` character to a Visual Basic function, for example `Left$` instead of `Left`, to obtain a returned value of type `String`."},{"content":"In all cases, the identifier type character must immediately follow the identifier name.","pos":[2895,2983]},{"pos":[2988,3011],"content":"Literal type characters","linkify":"Literal type characters","nodes":[{"content":"Literal type characters","pos":[0,23]}]},{"pos":[3013,3090],"content":"A <bpt id=\"p1\">*</bpt>literal<ept id=\"p1\">*</ept> is a textual representation of a particular value of a data type.","source":"A *literal* is a textual representation of a particular value of a data type."},{"pos":[3098,3119],"content":"Default literal types","linkify":"Default literal types","nodes":[{"content":"Default literal types","pos":[0,21]}]},{"content":"The form of a literal as it appears in your code ordinarily determines its data type.","pos":[3121,3206]},{"content":"The following table shows these default types.","pos":[3207,3253]},{"content":"Textual form of literal","pos":[3260,3283]},{"content":"Default data type","pos":[3284,3301]},{"content":"Example","pos":[3302,3309]},{"content":"Numeric, no fractional part","pos":[3386,3413]},{"pos":[3441,3493],"content":"Numeric, no fractional part, too large for <ph id=\"ph1\">`Integer`</ph>","source":"Numeric, no fractional part, too large for `Integer`"},{"content":"Numeric, fractional part","pos":[3518,3542]},{"content":"Enclosed in double quotation marks","pos":[3562,3596]},{"content":"Enclosed within number signs","pos":[3616,3644]},{"pos":[3682,3702],"content":"Forced literal types","linkify":"Forced literal types","nodes":[{"content":"Forced literal types","pos":[0,20]}]},{"content":"Visual Basic supplies a set of <bpt id=\"p1\">*</bpt>literal type characters<ept id=\"p1\">*</ept>, which you can use to force a literal to assume a data type other than the one its form indicates.","pos":[3704,3859],"source":"Visual Basic supplies a set of *literal type characters*, which you can use to force a literal to assume a data type other than the one its form indicates."},{"content":"You do this by appending the character to the end of the literal.","pos":[3860,3925]},{"content":"The following table shows the available literal type characters with examples of usage.","pos":[3926,4013]},{"content":"Literal type character","pos":[4018,4040]},{"content":"Data type","pos":[4041,4050]},{"content":"Example","pos":[4051,4058]},{"pos":[4390,4562],"content":"No literal type characters exist for the <ph id=\"ph1\">`Boolean`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Date`</ph>, <ph id=\"ph4\">`Object`</ph>, <ph id=\"ph5\">`SByte`</ph>, or <ph id=\"ph6\">`String`</ph> data types, or for any composite data types such as arrays or structures.","source":"No literal type characters exist for the `Boolean`, `Byte`, `Date`, `Object`, `SByte`, or `String` data types, or for any composite data types such as arrays or structures."},{"content":"Literals can also use the identifier type characters (<ph id=\"ph1\">`%`</ph>, <ph id=\"ph2\">`&amp;`</ph>, <ph id=\"ph3\">`@`</ph>, <ph id=\"ph4\">`!`</ph>, <ph id=\"ph5\">`#`</ph>, <ph id=\"ph6\">`$`</ph>), as can variables, constants, and expressions.","pos":[4564,4694],"source":"Literals can also use the identifier type characters (`%`, `&`, `@`, `!`, `#`, `$`), as can variables, constants, and expressions."},{"content":"However, the literal type characters (<ph id=\"ph1\">`S`</ph>, <ph id=\"ph2\">`I`</ph>, <ph id=\"ph3\">`L`</ph>, <ph id=\"ph4\">`D`</ph>, <ph id=\"ph5\">`F`</ph>, <ph id=\"ph6\">`R`</ph>, <ph id=\"ph7\">`C`</ph>) can be used only with literals.","pos":[4695,4799],"source":" However, the literal type characters (`S`, `I`, `L`, `D`, `F`, `R`, `C`) can be used only with literals."},{"content":"In all cases, the literal type character must immediately follow the literal value.","pos":[4801,4884]},{"pos":[4889,4928],"content":"Hexadecimal, binary, and octal literals","linkify":"Hexadecimal, binary, and octal literals","nodes":[{"content":"Hexadecimal, binary, and octal literals","pos":[0,39]}]},{"content":"The compiler normally interprets an integer literal to be in the decimal (base 10) number system.","pos":[4930,5027]},{"content":"You can also define an integer literal as a hexadecimal (base 16) number with the <ph id=\"ph1\">`&amp;H`</ph> prefix, as a binary (base 2) number with the <ph id=\"ph2\">`&amp;B`</ph> prefix, and as an octal (base 8) number with the <ph id=\"ph3\">`&amp;O`</ph> prefix.","pos":[5028,5226],"source":" You can also define an integer literal as a hexadecimal (base 16) number with the `&H` prefix, as a binary (base 2) number with the `&B` prefix, and as an octal (base 8) number with the `&O` prefix."},{"content":"The digits that follow the prefix must be appropriate for the number system.","pos":[5227,5303]},{"content":"The following table illustrates this.","pos":[5304,5341]},{"content":"Number base","pos":[5348,5359]},{"content":"Prefix","pos":[5360,5366]},{"content":"Valid digit values","pos":[5367,5385]},{"content":"Example","pos":[5386,5393]},{"content":"Hexadecimal (base 16)","pos":[5468,5489]},{"content":"0-9 and A-F","pos":[5495,5506]},{"content":"Binary (base 2)","pos":[5518,5533]},{"content":"0-1","pos":[5539,5542]},{"content":"Octal (base 8)","pos":[5558,5572]},{"content":"0-7","pos":[5578,5581]},{"content":"Starting in Visual Basic 2017, you can use the underscore character (<ph id=\"ph1\">`_`</ph>) as a group separator to enhance the readability of an integral literal.","pos":[5591,5736],"source":"Starting in Visual Basic 2017, you can use the underscore character (`_`) as a group separator to enhance the readability of an integral literal."},{"content":"The following example uses the <ph id=\"ph1\">`_`</ph> character to group a binary literal into 8-bit groups:","pos":[5737,5826],"source":" The following example uses the `_` character to group a binary literal into 8-bit groups:"},{"content":"You can follow a prefixed literal with a literal type character.","pos":[5901,5965]},{"content":"The following example shows this.","pos":[5966,5999]},{"pos":[6074,6186],"content":"In the previous example, <ph id=\"ph1\">`counter`</ph> has the decimal value of -32768, and <ph id=\"ph2\">`flags`</ph> has the decimal value of +32768.","source":"In the previous example, `counter` has the decimal value of -32768, and `flags` has the decimal value of +32768."},{"content":"Starting with Visual Basic 15.5, you can also use the underscore character (<ph id=\"ph1\">`_`</ph>) as a leading separator between the prefix and the hexadecimal, binary, or octal digits.","pos":[6188,6356],"source":"Starting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits."},{"content":"For example:","pos":[6357,6369]},{"pos":[6512,6520],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6524,6618],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept>","source":"[Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)"},{"pos":[6621,6742],"content":"<bpt id=\"p1\">[</bpt>Elementary Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept>","source":"[Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)"},{"pos":[6745,6886],"content":"<bpt id=\"p1\">[</bpt>Value Types and Reference Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>","source":"[Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)"},{"pos":[6889,7016],"content":"<bpt id=\"p1\">[</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>","source":"[Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)"},{"pos":[7019,7150],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","source":"[Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"},{"pos":[7153,7271],"content":"<bpt id=\"p1\">[</bpt>Variable Declaration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept>","source":"[Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)"},{"pos":[7274,7351],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../../visual-basic/language-reference/data-types/index.md)"}]}