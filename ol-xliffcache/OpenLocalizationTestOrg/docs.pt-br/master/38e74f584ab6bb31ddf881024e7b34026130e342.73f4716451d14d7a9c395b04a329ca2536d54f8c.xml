{"content":"---\ntitle: \"Basic Data Contract | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"Data Contract\"\nms.assetid: b124e9e0-cb73-4ae0-b9c3-e6cdf5eced98\ncaps.latest.revision: 37\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Basic Data Contract\nThis sample demonstrates how to implement a data contract. Data contracts allow you to pass structured data to and from services. This sample is based on the [Getting Started](../../../../docs/framework/wcf/samples/getting-started-sample.md) but uses complex numbers instead of basic numeric types.  \n  \n In this sample, the service is hosted by Internet Information Services (IIS) and the client is a console application (.exe).  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n The service contract for this service uses complex numbers, as shown in the following sample code.  \n  \n```  \n// Define a service contract.  \n[ServiceContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \npublic interface ICalculator  \n{  \n    [OperationContract]  \n    ComplexNumber Add(ComplexNumber n1, ComplexNumber n2);  \n    [OperationContract]  \n    ComplexNumber Subtract(ComplexNumber n1, ComplexNumber n2);  \n    [OperationContract]  \n    ComplexNumber Multiply(ComplexNumber n1, ComplexNumber n2);  \n    [OperationContract]  \n    ComplexNumber Divide(ComplexNumber n1, ComplexNumber n2);  \n}  \n  \n```  \n  \n The <xref:System.Runtime.Serialization.DataContractAttribute> and <xref:System.Runtime.Serialization.DataMemberAttribute> attributes have been applied to the definition of the `ComplexNumber` class to indicate which fields of the class can be passed over the wire between the client and the service, as shown in the following sample code.  \n  \n```  \n[DataContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \npublic class ComplexNumber  \n{  \n    [DataMember]  \n    public double Real = 0.0D;  \n    [DataMember]  \n    public double Imaginary = 0.0D;  \n  \n    public ComplexNumber(double real, double imaginary)  \n    {  \n        this.Real = real;  \n        this.Imaginary = imaginary;  \n    }  \n}  \n  \n```  \n  \n The service implementation calculates and returns the appropriate result, accepting and returning numbers of the `ComplexNumber` type.  \n  \n```  \n// This is the service class that implements the service contract.  \npublic class CalculatorService : ICalculator  \n{  \n    public ComplexNumber Add(ComplexNumber n1, ComplexNumber n2)  \n    {  \n        return new ComplexNumber(n1.Real + n2.Real, n1.Imaginary +  \n                                                      n2.Imaginary);  \n    }  \n  \n    public ComplexNumber Subtract(ComplexNumber n1, ComplexNumber n2)  \n    {  \n        return new ComplexNumber(n1.Real - n2.Real, n1.Imaginary -   \n                                                     n2.Imaginary);  \n    }  \n    public ComplexNumber Multiply(ComplexNumber n1, ComplexNumber n2)  \n    {  \n        double real1 = n1.Real * n2.Real;  \n        double imaginary1 = n1.Real * n2.Imaginary;  \n        double imaginary2 = n2.Real * n1.Imaginary;  \n        double real2 = n1.Imaginary * n2.Imaginary * -1;  \n        return new ComplexNumber(real1 + real2, imaginary1 +   \n                                                 imaginary2);  \n    }  \n  \n    public ComplexNumber Divide(ComplexNumber n1, ComplexNumber n2)  \n    {  \n         ComplexNumber conjugate =   \n              new ComplexNumber(n2.Real, -1*n2.Imaginary);  \n         ComplexNumber numerator = Multiply(n1, conjugate);  \n         ComplexNumber denominator = Multiply(n2, conjugate);  \n         return new ComplexNumber(numerator.Real / denominator.Real,  \n                                               numerator.Imaginary);  \n    }  \n}  \n  \n```  \n  \n The client implementation also uses complex numbers. Both the service contract and the data contract are defined in the source file generatedClient.cs, which is generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) from service metadata.  \n  \n```  \n// Create a client.  \nDataContractCalculatorClient client = new DataContractCalculatorClient();  \n// Call the Add service operation.  \nComplexNumber value1 = new ComplexNumber();   \nvalue1.Real = 1;   \nvalue1.Imaginary = 2;  \nComplexNumber value2 = new ComplexNumber();   \nvalue2.Real = 3;  \nvalue2.Imaginary = 4;  \nComplexNumber result = proxy.Add(value1, value2);  \nConsole.WriteLine(\"Add({0} + {1}i, {2} + {3}i) = {4} + {5}i\",  \n      value1.Real, value1.Imaginary, value2.Real, value2.Imaginary,   \n      result.Real, result.Imaginary);   \n    â€¦  \n}  \n  \n```  \n  \n When you run the sample, the requests and responses of the operation are displayed in the client console window. Press ENTER in the client window to shut down the client.  \n  \n```  \n  \nAdd(1 + 2i, 3 + 4i) = 4 + 6i  \nSubtract(1 + 2i, 3 + 4i) = -2 + -2i  \nMultiply(2 + 3i, 4 + 7i) = -13 + 26i  \nDivide(3 + 7i, 5 + -2i) = 0.0344827586206897 + 41i  \n  \nPress <ENTER> to terminate client.  \n```  \n  \n### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Contract\\Data\\Basic`  \n  \n## See Also","nodes":[{"pos":[12,48],"content":"Basic Data Contract | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Basic Data Contract | Microsoft Docs","pos":[0,36]}]},{"pos":[423,442],"content":"Basic Data Contract","linkify":"Basic Data Contract","nodes":[{"content":"Basic Data Contract","pos":[0,19]}]},{"content":"This sample demonstrates how to implement a data contract.","pos":[443,501]},{"content":"Data contracts allow you to pass structured data to and from services.","pos":[502,572]},{"content":"This sample is based on the <bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](../../../../docs/framework/wcf/samples/getting-started-sample.md)</ept> but uses complex numbers instead of basic numeric types.","pos":[573,741],"source":" This sample is based on the [Getting Started](../../../../docs/framework/wcf/samples/getting-started-sample.md) but uses complex numbers instead of basic numeric types."},{"content":"In this sample, the service is hosted by Internet Information Services (IIS) and the client is a console application (.exe).","pos":[748,872]},{"pos":[880,987],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"content":"The service contract for this service uses complex numbers, as shown in the following sample code.","pos":[994,1092]},{"pos":[1620,1958],"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attributes have been applied to the definition of the <ph id=\"ph3\">`ComplexNumber`</ph> class to indicate which fields of the class can be passed over the wire between the client and the service, as shown in the following sample code.","source":"The <xref:System.Runtime.Serialization.DataContractAttribute> and <xref:System.Runtime.Serialization.DataMemberAttribute> attributes have been applied to the definition of the `ComplexNumber` class to indicate which fields of the class can be passed over the wire between the client and the service, as shown in the following sample code."},{"pos":[2340,2474],"content":"The service implementation calculates and returns the appropriate result, accepting and returning numbers of the <ph id=\"ph1\">`ComplexNumber`</ph> type.","source":"The service implementation calculates and returns the appropriate result, accepting and returning numbers of the `ComplexNumber` type."},{"content":"The client implementation also uses complex numbers.","pos":[3960,4012]},{"content":"Both the service contract and the data contract are defined in the source file generatedClient.cs, which is generated by the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> from service metadata.","pos":[4013,4293],"source":" Both the service contract and the data contract are defined in the source file generatedClient.cs, which is generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) from service metadata."},{"content":"When you run the sample, the requests and responses of the operation are displayed in the client console window.","pos":[4874,4986]},{"content":"Press ENTER in the client window to shut down the client.","pos":[4987,5044]},{"pos":[5273,5309],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[5319,5518],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[5528,5737],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[5747,5955],"content":"To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[5963,6095],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[6149,6475],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[6476,6526]},{"pos":[6608,6616],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}