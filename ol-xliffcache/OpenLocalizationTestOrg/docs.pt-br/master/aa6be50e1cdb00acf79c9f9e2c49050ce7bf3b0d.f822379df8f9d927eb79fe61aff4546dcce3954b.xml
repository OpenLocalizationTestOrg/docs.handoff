{"content":"---\ntitle: \"Walkthrough: Querying Across Relationships (Visual Basic)\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"vb\"\nms.assetid: a7da43e3-769f-4e07-bcd6-552b8bde66f4\n---\n# Walkthrough: Querying Across Relationships (Visual Basic)\nThis walkthrough demonstrates the use of [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] *associations* to represent foreign-key relationships in the database.  \n  \n [!INCLUDE[note_settings_general](../../../../../../includes/note-settings-general-md.md)]  \n  \n This walkthrough was written by using Visual Basic Development Settings.  \n  \n## Prerequisites  \n You must have completed [Walkthrough: Simple Object Model and Query (Visual Basic)](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-simple-object-model-and-query-visual-basic.md). This walkthrough builds on that one, including the presence of the northwnd.mdf file in c:\\linqtest.  \n  \n## Overview  \n This walkthrough consists of three main tasks:  \n  \n-   Adding an entity class to represent the Orders table in the sample Northwind database.  \n  \n-   Supplementing annotations to the `Customer` class to enhance the relationship between the `Customer` and `Order` classes.  \n  \n-   Creating and running a query to test the process of obtaining `Order` information by using the `Customer` class.  \n  \n## Mapping Relationships across Tables  \n After the `Customer` class definition, create the `Order` entity class definition that includes the following code, which indicates that `Orders.Customer` relates as a foreign key to `Customers.CustomerID`.  \n  \n#### To add the Order entity class  \n  \n-   Type or paste the following code after the `Customer` class:  \n  \n     [!code-vb[DLinqWalk2VB#1](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqWalk2VB/vb/Module1.vb#1)]  \n  \n## Annotating the Customer Class  \n In this step, you annotate the `Customer` class to indicate its relationship to the `Order` class. (This addition is not strictly necessary, because defining the relationship in either direction is sufficient to create the link. But adding this annotation does enable you to easily navigate objects in either direction.)  \n  \n#### To annotate the Customer class  \n  \n-   Type or paste the following code into the `Customer` class:  \n  \n     [!code-vb[DLinqWalk2VB#2](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqWalk2VB/vb/Module1.vb#2)]  \n  \n## Creating and Running a Query across the Customer-Order Relationship  \n You can now access `Order` objects directly from the `Customer` objects, or in the opposite order. You do not need an explicit *join* between customers and orders.  \n  \n#### To access Order objects by using Customer objects  \n  \n1.  Modify the `Sub Main` method by typing or pasting the following code into the method:  \n  \n     [!code-vb[DLinqWalk2VB#3](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqWalk2VB/vb/Module1.vb#3)]  \n  \n2.  Press F5 to debug your application.  \n  \n     Two names appear in the message box, and the Console window shows the generated SQL code.  \n  \n3.  Close the message box to stop debugging.  \n  \n## Creating a Strongly Typed View of Your Database  \n It is much easier to start with a strongly typed view of your database. By strongly typing the <xref:System.Data.Linq.DataContext> object, you do not need calls to <xref:System.Data.Linq.DataContext.GetTable%2A>. You can use strongly typed tables in all your queries when you use the strongly typed <xref:System.Data.Linq.DataContext> object.  \n  \n In the following steps, you will create `Customers` as a strongly typed table that maps to the Customers table in the database.  \n  \n#### To strongly type the DataContext object  \n  \n1.  Add the following code above the `Customer` class declaration.  \n  \n     [!code-vb[DLinqWalk2VB#4](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqWalk2VB/vb/Module1.vb#4)]  \n  \n2.  Modify `Sub Main` to use the strongly typed <xref:System.Data.Linq.DataContext> as follows:  \n  \n     [!code-vb[DLinqWalk2VB#5](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqWalk2VB/vb/Module1.vb#5)]  \n  \n3.  Press F5 to debug your application.  \n  \n     The Console window output is:  \n  \n     `ID=WHITC`  \n  \n4.  Press Enter in the Console window to close the application.  \n  \n5.  On the **File** menu, click **Save All** if you want to save this application.  \n  \n## Next Steps  \n The next walkthrough ([Walkthrough: Manipulating Data (Visual Basic)](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-manipulating-data-visual-basic.md)) demonstrates how to manipulate data. That walkthrough does not require that you save the two walkthroughs in this series that you have already completed.  \n  \n## See also\n\n- [Learning by Walkthroughs](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)\n","nodes":[{"pos":[4,162],"embed":true,"restype":"x-metadata","content":"title: \"Walkthrough: Querying Across Relationships (Visual Basic)\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"vb\"\nms.assetid: a7da43e3-769f-4e07-bcd6-552b8bde66f4","nodes":[{"content":"Walkthrough: Querying Across Relationships (Visual Basic)","nodes":[{"pos":[0,57],"content":"Walkthrough: Querying Across Relationships (Visual Basic)","nodes":[{"content":"Walkthrough: Querying Across Relationships (Visual Basic)","pos":[0,57]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[169,226],"content":"Walkthrough: Querying Across Relationships (Visual Basic)","linkify":"Walkthrough: Querying Across Relationships (Visual Basic)","nodes":[{"content":"Walkthrough: Querying Across Relationships (Visual Basic)","pos":[0,57]}]},{"pos":[227,406],"content":"This walkthrough demonstrates the use of <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> <bpt id=\"p1\">*</bpt>associations<ept id=\"p1\">*</ept> to represent foreign-key relationships in the database.","source":"This walkthrough demonstrates the use of [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] *associations* to represent foreign-key relationships in the database."},{"content":"This walkthrough was written by using Visual Basic Development Settings.","pos":[509,581]},{"pos":[590,603],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You must have completed <bpt id=\"p1\">[</bpt>Walkthrough: Simple Object Model and Query (Visual Basic)<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-simple-object-model-and-query-visual-basic.md)</ept>.","pos":[607,804],"source":"You must have completed [Walkthrough: Simple Object Model and Query (Visual Basic)](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-simple-object-model-and-query-visual-basic.md)."},{"content":"This walkthrough builds on that one, including the presence of the northwnd.mdf file in c:\\linqtest.","pos":[805,905]},{"pos":[914,922],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"This walkthrough consists of three main tasks:","pos":[926,972]},{"content":"Adding an entity class to represent the Orders table in the sample Northwind database.","pos":[982,1068]},{"pos":[1078,1199],"content":"Supplementing annotations to the <ph id=\"ph1\">`Customer`</ph> class to enhance the relationship between the <ph id=\"ph2\">`Customer`</ph> and <ph id=\"ph3\">`Order`</ph> classes.","source":"Supplementing annotations to the `Customer` class to enhance the relationship between the `Customer` and `Order` classes."},{"pos":[1209,1321],"content":"Creating and running a query to test the process of obtaining <ph id=\"ph1\">`Order`</ph> information by using the <ph id=\"ph2\">`Customer`</ph> class.","source":"Creating and running a query to test the process of obtaining `Order` information by using the `Customer` class."},{"pos":[1330,1365],"content":"Mapping Relationships across Tables","linkify":"Mapping Relationships across Tables","nodes":[{"content":"Mapping Relationships across Tables","pos":[0,35]}]},{"pos":[1369,1575],"content":"After the <ph id=\"ph1\">`Customer`</ph> class definition, create the <ph id=\"ph2\">`Order`</ph> entity class definition that includes the following code, which indicates that <ph id=\"ph3\">`Orders.Customer`</ph> relates as a foreign key to <ph id=\"ph4\">`Customers.CustomerID`</ph>.","source":"After the `Customer` class definition, create the `Order` entity class definition that includes the following code, which indicates that `Orders.Customer` relates as a foreign key to `Customers.CustomerID`."},{"pos":[1586,1615],"content":"To add the Order entity class","linkify":"To add the Order entity class","nodes":[{"content":"To add the Order entity class","pos":[0,29]}]},{"pos":[1625,1685],"content":"Type or paste the following code after the <ph id=\"ph1\">`Customer`</ph> class:","source":"Type or paste the following code after the `Customer` class:"},{"pos":[1825,1854],"content":"Annotating the Customer Class","linkify":"Annotating the Customer Class","nodes":[{"content":"Annotating the Customer Class","pos":[0,29]}]},{"content":"In this step, you annotate the <ph id=\"ph1\">`Customer`</ph> class to indicate its relationship to the <ph id=\"ph2\">`Order`</ph> class.","pos":[1858,1956],"source":"In this step, you annotate the `Customer` class to indicate its relationship to the `Order` class."},{"content":"(This addition is not strictly necessary, because defining the relationship in either direction is sufficient to create the link.","pos":[1957,2086]},{"content":"But adding this annotation does enable you to easily navigate objects in either direction.)","pos":[2087,2178]},{"pos":[2189,2219],"content":"To annotate the Customer class","linkify":"To annotate the Customer class","nodes":[{"content":"To annotate the Customer class","pos":[0,30]}]},{"pos":[2229,2288],"content":"Type or paste the following code into the <ph id=\"ph1\">`Customer`</ph> class:","source":"Type or paste the following code into the `Customer` class:"},{"pos":[2428,2495],"content":"Creating and Running a Query across the Customer-Order Relationship","linkify":"Creating and Running a Query across the Customer-Order Relationship","nodes":[{"content":"Creating and Running a Query across the Customer-Order Relationship","pos":[0,67]}]},{"content":"You can now access <ph id=\"ph1\">`Order`</ph> objects directly from the <ph id=\"ph2\">`Customer`</ph> objects, or in the opposite order.","pos":[2499,2597],"source":"You can now access `Order` objects directly from the `Customer` objects, or in the opposite order."},{"content":"You do not need an explicit <bpt id=\"p1\">*</bpt>join<ept id=\"p1\">*</ept> between customers and orders.","pos":[2598,2662],"source":" You do not need an explicit *join* between customers and orders."},{"pos":[2673,2722],"content":"To access Order objects by using Customer objects","linkify":"To access Order objects by using Customer objects","nodes":[{"content":"To access Order objects by using Customer objects","pos":[0,49]}]},{"pos":[2732,2817],"content":"Modify the <ph id=\"ph1\">`Sub Main`</ph> method by typing or pasting the following code into the method:","source":"Modify the `Sub Main` method by typing or pasting the following code into the method:"},{"content":"Press F5 to debug your application.","pos":[2958,2993]},{"content":"Two names appear in the message box, and the Console window shows the generated SQL code.","pos":[3004,3093]},{"content":"Close the message box to stop debugging.","pos":[3103,3143]},{"pos":[3152,3199],"content":"Creating a Strongly Typed View of Your Database","linkify":"Creating a Strongly Typed View of Your Database","nodes":[{"content":"Creating a Strongly Typed View of Your Database","pos":[0,47]}]},{"content":"It is much easier to start with a strongly typed view of your database.","pos":[3203,3274]},{"content":"By strongly typing the <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> object, you do not need calls to <ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext.GetTable%2A&gt;</ph>.","pos":[3275,3415],"source":" By strongly typing the <xref:System.Data.Linq.DataContext> object, you do not need calls to <xref:System.Data.Linq.DataContext.GetTable%2A>."},{"content":"You can use strongly typed tables in all your queries when you use the strongly typed <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> object.","pos":[3416,3545],"source":" You can use strongly typed tables in all your queries when you use the strongly typed <xref:System.Data.Linq.DataContext> object."},{"pos":[3552,3679],"content":"In the following steps, you will create <ph id=\"ph1\">`Customers`</ph> as a strongly typed table that maps to the Customers table in the database.","source":"In the following steps, you will create `Customers` as a strongly typed table that maps to the Customers table in the database."},{"pos":[3690,3729],"content":"To strongly type the DataContext object","linkify":"To strongly type the DataContext object","nodes":[{"content":"To strongly type the DataContext object","pos":[0,39]}]},{"pos":[3739,3801],"content":"Add the following code above the <ph id=\"ph1\">`Customer`</ph> class declaration.","source":"Add the following code above the `Customer` class declaration."},{"pos":[3942,4033],"content":"Modify <ph id=\"ph1\">`Sub Main`</ph> to use the strongly typed <ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> as follows:","source":"Modify `Sub Main` to use the strongly typed <xref:System.Data.Linq.DataContext> as follows:"},{"content":"Press F5 to debug your application.","pos":[4174,4209]},{"content":"The Console window output is:","pos":[4220,4249]},{"content":"Press Enter in the Console window to close the application.","pos":[4280,4339]},{"pos":[4349,4427],"content":"On the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Save All<ept id=\"p2\">**</ept> if you want to save this application.","source":"On the **File** menu, click **Save All** if you want to save this application."},{"pos":[4436,4446],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"content":"The next walkthrough (<bpt id=\"p1\">[</bpt>Walkthrough: Manipulating Data (Visual Basic)<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-manipulating-data-visual-basic.md)</ept>) demonstrates how to manipulate data.","pos":[4450,4658],"source":"The next walkthrough ([Walkthrough: Manipulating Data (Visual Basic)](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-manipulating-data-visual-basic.md)) demonstrates how to manipulate data."},{"content":"That walkthrough does not require that you save the two walkthroughs in this series that you have already completed.","pos":[4659,4775]},{"pos":[4784,4792],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4796,4905],"content":"<bpt id=\"p1\">[</bpt>Learning by Walkthroughs<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)</ept>","source":"[Learning by Walkthroughs](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)"}]}