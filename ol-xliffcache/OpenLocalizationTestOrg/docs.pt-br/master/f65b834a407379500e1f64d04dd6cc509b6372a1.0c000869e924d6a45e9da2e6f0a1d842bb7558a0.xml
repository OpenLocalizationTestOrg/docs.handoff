{"content":"---\ntitle: \"How to: Write a Custom PLINQ Aggregate Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"PLINQ queries, how to create aggregate function\"\nms.assetid: 5a70dd49-ab2a-4798-b551-196ee7042b1a\ncaps.latest.revision: 7\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Write a Custom PLINQ Aggregate Function\nThis example shows how to use the <xref:System.Linq.ParallelEnumerable.Aggregate%2A> method to apply a custom aggregation function to a source sequence.  \n  \n> [!WARNING]\n>  This example is intended to demonstrate usage, and might not run faster than the equivalent sequential LINQ to Objects query. For more information about speedup, see [Understanding Speedup in PLINQ](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md).  \n  \n## Example  \n The following example calculates the standard deviation of a sequence of integers.  \n  \n [!code-csharp[PLINQ#31](../../../samples/snippets/csharp/VS_Snippets_Misc/plinq/cs/plinqsamples.cs#31)]\n [!code-vb[PLINQ#31](../../../samples/snippets/visualbasic/VS_Snippets_Misc/plinq/vb/plinqsnippets1.vb#31)]  \n  \n This example uses an overload of the Aggregate standard query operator that is unique to PLINQ. This overload takes an extra <xref:System.Func%603?displayProperty=fullName> as the third input parameter. This delegate combines the results from all threads before it performs the final calculation on the aggregated results. In this example we add together the sums from all the threads.  \n  \n Note that when a lambda expression body consists of a single expression, the return value of the <xref:System.Func%602?displayProperty=fullName> delegate is the value of the expression.  \n  \n## See Also  \n <xref:System.Linq.ParallelEnumerable>   \n [Parallel LINQ (PLINQ)](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)","nodes":[{"pos":[4,436],"embed":true,"restype":"x-metadata","content":"title: \"How to: Write a Custom PLINQ Aggregate Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"PLINQ queries, how to create aggregate function\"\nms.assetid: 5a70dd49-ab2a-4798-b551-196ee7042b1a\ncaps.latest.revision: 7\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Write a Custom PLINQ Aggregate Function | Microsoft Docs","nodes":[{"pos":[0,64],"content":"How to: Write a Custom PLINQ Aggregate Function | Microsoft Docs","nodes":[{"content":"How to: Write a Custom PLINQ Aggregate Function | Microsoft Docs","pos":[0,64]}]}],"path":["title"]}],"yml":true},{"pos":[443,490],"content":"How to: Write a Custom PLINQ Aggregate Function","linkify":"How to: Write a Custom PLINQ Aggregate Function","nodes":[{"content":"How to: Write a Custom PLINQ Aggregate Function","pos":[0,47]}]},{"content":"This example shows how to use the <ph id=\"ph1\">&lt;xref:System.Linq.ParallelEnumerable.Aggregate%2A&gt;</ph> method to apply a custom aggregation function to a source sequence.","pos":[491,643],"source":"This example shows how to use the <xref:System.Linq.ParallelEnumerable.Aggregate%2A> method to apply a custom aggregation function to a source sequence."},{"pos":[651,943],"content":"[!WARNING]\n This example is intended to demonstrate usage, and might not run faster than the equivalent sequential LINQ to Objects query. For more information about speedup, see [Understanding Speedup in PLINQ](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md).","leadings":["","> "],"nodes":[{"content":"This example is intended to demonstrate usage, and might not run faster than the equivalent sequential LINQ to Objects query. For more information about speedup, see [Understanding Speedup in PLINQ](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md).","pos":[12,290],"nodes":[{"content":"This example is intended to demonstrate usage, and might not run faster than the equivalent sequential LINQ to Objects query.","pos":[0,125]},{"content":"For more information about speedup, see <bpt id=\"p1\">[</bpt>Understanding Speedup in PLINQ<ept id=\"p1\">](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md)</ept>.","pos":[126,278],"source":" For more information about speedup, see [Understanding Speedup in PLINQ](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md)."}]}]},{"pos":[952,959],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example calculates the standard deviation of a sequence of integers.","pos":[963,1045]},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>PLINQ#31<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/plinq/cs/plinqsamples.cs#31)</ept><ept id=\"p1\">]</ept>","pos":[1052,1155],"source":"[!code-csharp[PLINQ#31](../../../samples/snippets/csharp/VS_Snippets_Misc/plinq/cs/plinqsamples.cs#31)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>PLINQ#31<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/plinq/vb/plinqsnippets1.vb#31)</ept><ept id=\"p1\">]</ept>","pos":[1157,1263],"source":"[!code-vb[PLINQ#31](../../../samples/snippets/visualbasic/VS_Snippets_Misc/plinq/vb/plinqsnippets1.vb#31)]"},{"content":"This example uses an overload of the Aggregate standard query operator that is unique to PLINQ.","pos":[1270,1365]},{"content":"This overload takes an extra <ph id=\"ph1\">&lt;xref:System.Func%603?displayProperty=fullName&gt;</ph> as the third input parameter.","pos":[1366,1472],"source":" This overload takes an extra <xref:System.Func%603?displayProperty=fullName> as the third input parameter."},{"content":"This delegate combines the results from all threads before it performs the final calculation on the aggregated results.","pos":[1473,1592]},{"content":"In this example we add together the sums from all the threads.","pos":[1593,1655]},{"content":"Note that when a lambda expression body consists of a single expression, the return value of the <ph id=\"ph1\">&lt;xref:System.Func%602?displayProperty=fullName&gt;</ph> delegate is the value of the expression.","pos":[1662,1847],"source":"Note that when a lambda expression body consists of a single expression, the return value of the <xref:System.Func%602?displayProperty=fullName> delegate is the value of the expression."},{"pos":[1856,1864],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.ParallelEnumerable&gt;</ph>","pos":[1868,1905],"source":"<xref:System.Linq.ParallelEnumerable> "},{"content":"<bpt id=\"p1\">[</bpt>Parallel LINQ (PLINQ)<ept id=\"p1\">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept>","pos":[1910,2001],"source":"[Parallel LINQ (PLINQ)](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)"}]}