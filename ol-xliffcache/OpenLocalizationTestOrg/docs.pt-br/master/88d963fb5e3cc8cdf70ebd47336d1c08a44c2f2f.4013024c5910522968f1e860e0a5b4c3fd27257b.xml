{"content":"---\ntitle: \"How to: Listen for Cancellation Requests That Have Wait Handles | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"cancellation, waiting with wait handles\"\nms.assetid: 6e2aa49b-fc84-4bcf-962b-17db98b7edcb\ncaps.latest.revision: 9\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Listen for Cancellation Requests That Have Wait Handles\nIf a method is blocked while it is waiting for an event to be signaled, it cannot check the value of the cancellation token and respond in a timely manner. The first example shows how to solve this problem when you are working with events such as <xref:System.Threading.ManualResetEvent?displayProperty=fullName> that do not natively support the unified cancellation framework. The second example shows a more streamlined approach that uses <xref:System.Threading.ManualResetEventSlim?displayProperty=fullName>, which does support unified cancellation.  \n  \n> [!NOTE]\n>  When \"Just My Code\" is enabled, Visual Studio in some cases will break on the line that throws the exception and display an error message that says \"exception not handled by user code.\" This error is benign. You can press F5 to continue from it, and see the exception-handling behavior that is demonstrated in the examples below. To prevent Visual Studio from breaking on the first error, just uncheck the \"Just My Code\" checkbox under **Tools, Options, Debugging, General**.  \n  \n## Example  \n The following example uses a <xref:System.Threading.ManualResetEvent> to demonstrate how to unblock wait handles that do not support unified cancellation.  \n  \n [!code-csharp[Cancellation#9](../../../samples/snippets/csharp/VS_Snippets_Misc/cancellation/cs/cancellationex9.cs#9)]\n [!code-vb[Cancellation#9](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cancellation/vb/cancellationex9.vb#9)]  \n  \n## Example  \n The following example uses a <xref:System.Threading.ManualResetEventSlim> to demonstrate how to unblock coordination primitives that do support unified cancellation. The same approach can be used with other lightweight coordination primitives, such as <xref:System.Threading.Semaphore>`Slim` and <xref:System.Threading.CountdownEvent>.  \n  \n [!code-csharp[Cancellation#10](../../../samples/snippets/csharp/VS_Snippets_Misc/cancellation/cs/cancellationex10.cs#10)]\n [!code-vb[Cancellation#10](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cancellation/vb/cancellationex10.vb#10)]  \n  \n## See Also  \n [Cancellation in Managed Threads](../../../docs/standard/threading/cancellation-in-managed-threads.md)","nodes":[{"pos":[4,444],"embed":true,"restype":"x-metadata","content":"title: \"How to: Listen for Cancellation Requests That Have Wait Handles | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"cancellation, waiting with wait handles\"\nms.assetid: 6e2aa49b-fc84-4bcf-962b-17db98b7edcb\ncaps.latest.revision: 9\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Listen for Cancellation Requests That Have Wait Handles | Microsoft Docs","nodes":[{"pos":[0,80],"content":"How to: Listen for Cancellation Requests That Have Wait Handles | Microsoft Docs","nodes":[{"content":"How to: Listen for Cancellation Requests That Have Wait Handles | Microsoft Docs","pos":[0,80]}]}],"path":["title"]}],"yml":true},{"pos":[451,514],"content":"How to: Listen for Cancellation Requests That Have Wait Handles","linkify":"How to: Listen for Cancellation Requests That Have Wait Handles","nodes":[{"content":"How to: Listen for Cancellation Requests That Have Wait Handles","pos":[0,63]}]},{"content":"If a method is blocked while it is waiting for an event to be signaled, it cannot check the value of the cancellation token and respond in a timely manner.","pos":[515,670]},{"content":"The first example shows how to solve this problem when you are working with events such as <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent?displayProperty=fullName&gt;</ph> that do not natively support the unified cancellation framework.","pos":[671,892],"source":" The first example shows how to solve this problem when you are working with events such as <xref:System.Threading.ManualResetEvent?displayProperty=fullName> that do not natively support the unified cancellation framework."},{"content":"The second example shows a more streamlined approach that uses <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim?displayProperty=fullName&gt;</ph>, which does support unified cancellation.","pos":[893,1067],"source":" The second example shows a more streamlined approach that uses <xref:System.Threading.ManualResetEventSlim?displayProperty=fullName>, which does support unified cancellation."},{"pos":[1075,1561],"content":"[!NOTE]\n When \"Just My Code\" is enabled, Visual Studio in some cases will break on the line that throws the exception and display an error message that says \"exception not handled by user code.\" This error is benign. You can press F5 to continue from it, and see the exception-handling behavior that is demonstrated in the examples below. To prevent Visual Studio from breaking on the first error, just uncheck the \"Just My Code\" checkbox under **Tools, Options, Debugging, General**.","leadings":["","> "],"nodes":[{"content":"When \"Just My Code\" is enabled, Visual Studio in some cases will break on the line that throws the exception and display an error message that says \"exception not handled by user code.\" This error is benign. You can press F5 to continue from it, and see the exception-handling behavior that is demonstrated in the examples below. To prevent Visual Studio from breaking on the first error, just uncheck the \"Just My Code\" checkbox under **Tools, Options, Debugging, General**.","pos":[9,484],"nodes":[{"content":"When \"Just My Code\" is enabled, Visual Studio in some cases will break on the line that throws the exception and display an error message that says \"exception not handled by user code.\"","pos":[0,185]},{"content":"This error is benign.","pos":[186,207]},{"content":"You can press F5 to continue from it, and see the exception-handling behavior that is demonstrated in the examples below.","pos":[208,329]},{"content":"To prevent Visual Studio from breaking on the first error, just uncheck the \"Just My Code\" checkbox under <bpt id=\"p1\">**</bpt>Tools, Options, Debugging, General<ept id=\"p1\">**</ept>.","pos":[330,475],"source":" To prevent Visual Studio from breaking on the first error, just uncheck the \"Just My Code\" checkbox under **Tools, Options, Debugging, General**."}]}]},{"pos":[1570,1577],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses a <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> to demonstrate how to unblock wait handles that do not support unified cancellation.","pos":[1581,1735],"source":"The following example uses a <xref:System.Threading.ManualResetEvent> to demonstrate how to unblock wait handles that do not support unified cancellation."},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Cancellation#9<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/cancellation/cs/cancellationex9.cs#9)</ept><ept id=\"p1\">]</ept>","pos":[1742,1860],"source":"[!code-csharp[Cancellation#9](../../../samples/snippets/csharp/VS_Snippets_Misc/cancellation/cs/cancellationex9.cs#9)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Cancellation#9<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cancellation/vb/cancellationex9.vb#9)</ept><ept id=\"p1\">]</ept>","pos":[1862,1981],"source":"[!code-vb[Cancellation#9](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cancellation/vb/cancellationex9.vb#9)]"},{"pos":[1990,1997],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses a <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> to demonstrate how to unblock coordination primitives that do support unified cancellation.","pos":[2001,2166],"source":"The following example uses a <xref:System.Threading.ManualResetEventSlim> to demonstrate how to unblock coordination primitives that do support unified cancellation."},{"content":"The same approach can be used with other lightweight coordination primitives, such as <ph id=\"ph1\">&lt;xref:System.Threading.Semaphore&gt;</ph><ph id=\"ph2\">`Slim`</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.CountdownEvent&gt;</ph>.","pos":[2167,2336],"source":" The same approach can be used with other lightweight coordination primitives, such as <xref:System.Threading.Semaphore>`Slim` and <xref:System.Threading.CountdownEvent>."},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Cancellation#10<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/cancellation/cs/cancellationex10.cs#10)</ept><ept id=\"p1\">]</ept>","pos":[2343,2464],"source":"[!code-csharp[Cancellation#10](../../../samples/snippets/csharp/VS_Snippets_Misc/cancellation/cs/cancellationex10.cs#10)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Cancellation#10<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cancellation/vb/cancellationex10.vb#10)</ept><ept id=\"p1\">]</ept>","pos":[2466,2588],"source":"[!code-vb[Cancellation#10](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cancellation/vb/cancellationex10.vb#10)]"},{"pos":[2597,2605],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2609,2711],"content":"<bpt id=\"p1\">[</bpt>Cancellation in Managed Threads<ept id=\"p1\">](../../../docs/standard/threading/cancellation-in-managed-threads.md)</ept>","source":"[Cancellation in Managed Threads](../../../docs/standard/threading/cancellation-in-managed-threads.md)"}]}