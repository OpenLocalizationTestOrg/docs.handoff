{"content":"---\ntitle: \"How to: Calculate Intermediate Values (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 7fd3001f-f8f9-4bce-879f-d4c7af8a04fe\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Calculate Intermediate Values (C#)\nThis example shows how to calculate intermediate values that can be used in sorting, filtering, and selecting.  \n  \n## Example  \n The following example uses the `Let` clause.  \n  \n This example uses the following XML document: [Sample XML File: Numerical Data (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-numerical-data-linq-to-xml.md).  \n  \n```csharp  \nXElement root = XElement.Load(\"Data.xml\");  \nIEnumerable<decimal> extensions =  \n    from el in root.Elements(\"Data\")  \n    let extension = (decimal)el.Element(\"Quantity\") * (decimal)el.Element(\"Price\")  \n    where extension >= 25  \n    orderby extension  \n    select extension;  \nforeach (decimal ex in extensions)  \n    Console.WriteLine(ex);  \n```  \n  \n This code produces the following output:  \n  \n```  \n55.92  \n73.50  \n89.99  \n198.00  \n435.00  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Numerical Data in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-numerical-data-in-a-namespace.md).  \n  \n```csharp  \nXElement root = XElement.Load(\"DataInNamespace.xml\");  \nXNamespace ad = \"http://www.adatum.com\";  \nIEnumerable<decimal> extensions =  \n    from el in root.Elements(ad + \"Data\")  \n    let extension = (decimal)el.Element(ad + \"Quantity\") * (decimal)el.Element(ad + \"Price\")  \n    where extension >= 25  \n    orderby extension  \n    select extension;  \nforeach (decimal ex in extensions)  \n    Console.WriteLine(ex);  \n```  \n  \n This code produces the following output:  \n  \n```  \n55.92  \n73.50  \n89.99  \n198.00  \n435.00  \n```  \n  \n## See Also  \n [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)","nodes":[{"pos":[12,71],"content":"How to: Calculate Intermediate Values (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Calculate Intermediate Values (C#) | Microsoft Docs","pos":[0,59]}]},{"pos":[356,398],"content":"How to: Calculate Intermediate Values (C#)","linkify":"How to: Calculate Intermediate Values (C#)","nodes":[{"content":"How to: Calculate Intermediate Values (C#)","pos":[0,42]}]},{"content":"This example shows how to calculate intermediate values that can be used in sorting, filtering, and selecting.","pos":[399,509]},{"pos":[518,525],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[529,573],"content":"The following example uses the <ph id=\"ph1\">`Let`</ph> clause.","source":"The following example uses the `Let` clause."},{"pos":[580,772],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Numerical Data (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-numerical-data-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Numerical Data (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-numerical-data-linq-to-xml.md)."},{"content":"This code produces the following output:","pos":[1147,1187]},{"pos":[1253,1260],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1264,1338]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1339,1483],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[1490,1686],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Numerical Data in a Namespace<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-numerical-data-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Numerical Data in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-numerical-data-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[2130,2170]},{"pos":[2236,2244],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2248,2363],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}