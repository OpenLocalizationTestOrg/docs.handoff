{"content":"---\ntitle: project.json and csproj comparison - .NET Core | Microsoft Docs\ndescription: See a mapping between project.json and csproj elements.\nkeywords: project.json, csproj, .NET Core, MSBuild\nauthor: natemcmaster\nms.author: mairaw\nms.date: 03/13/2017\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-cli\nms.devlang: dotnet\nms.assetid: 79c50621-a24a-4e64-bbb9-b953113e841c\n---\n\n# A mapping between project.json and csproj properties\n\nBy [Nate McMaster](https://github.com/natemcmaster)\n\nDuring the development of the .NET Core tooling, an important design change was made to \nno longer support *project.json* files and instead move the .NET Core projects to the MSBuild/csproj \nformat.\n\nThis article shows how the settings in *project.json* are represented in the MSBuild/csproj format so you\ncan learn how to use the new format and understand the changes made by the migration tools when you're\nupgrading your project to the latest version of the tooling. \n \n## The csproj format\n\nThe new format, \\*.csproj, is an XML-based format. The following example shows the root node of a \n.NET Core project using the `Microsoft.NET.Sdk`. For web projects, the SDK used is \n`Microsoft.NET.Sdk.Web`.\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n...\n</Project>\n```\n\n## Common top-level properties\n\n### name\n```json\n{\n  \"name\": \"MyProjectName\"\n}\n```\n\nNo longer supported. In csproj, this is determined by the project filename, which is defined by the directory name. For example, `MyProjectName.csproj`.\n\nBy default, the project filename also specifies the value of the `<AssemblyName>` and `<PackageId>` properties. \n\n```xml\n<PropertyGroup>\n  <AssemblyName>MyProjectName</AssemblyName>\n  <PackageId>MyProjectName</PackageId>\n</PropertyGroup>\n```\n\nThe `<AssemblyName>` will have a different value then `<PackageId>` if `buildOptions\\outputName` property was defined in project.json. \nFor more information, see [Other common build options](#other-common-build-options).\n\n### version\n\n```json\n{\n  \"version\": \"1.0.0-alpha-*\"\n}\n```\nUse the `VersionPrefix` and `VersionSuffix` properties:\n\n```xml\n<PropertyGroup>\n  <VersionPrefix>1.0.0</VersionPrefix>\n  <VersionSuffix>alpha</VersionSuffix>\n</PropertyGroup>\n```\n\nYou can also use the `Version` property, but this may override version settings during packaging:\n\n```xml\n<PropertyGroup>\n  <Version>1.0.0-alpha</Version>\n</PropertyGroup>\n```\n\n### Other common root-level options\n\n```json\n{\n  \"authors\": [ \"Anne\", \"Bob\" ],\n  \"company\": \"Contoso\",\n  \"language\": \"en-US\",\n  \"title\": \"My library\",\n  \"description\": \"This is my library.\\r\\nAnd it's really great!\",\n  \"copyright\": \"Nugetizer 3000\",\n  \"userSecretsId\": \"xyz123\"\n}\n```\n\n```xml\n<PropertyGroup>\n  <Authors>Anne;Bob</Authors>\n  <Company>Contoso</Company>\n  <NeutralLanguage>en-US</NeutralLanguage>\n  <AssemblyTitle>My library</AssemblyTitle>\n  <Description>This is my library.\nAnd it's really great!</Description>\n  <Copyright>Nugetizer 3000</Copyright>\n  <UserSecretsId>xyz123</UserSecretsId>\n</PropertyGroup>\n```\n\n## frameworks\n\n### One target framework\n```json\n{\n  \"frameworks\": {\n    \"netcoreapp1.0\": {}\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <TargetFramework>netcoreapp1.0</TargetFramework>\n</PropertyGroup>\n```\n\n### Multiple target frameworks\n\n```json\n{\n  \"frameworks\": {\n    \"netcoreapp1.0\": {},\n    \"net451\": {}\n  }\n}\n```\n\nUse the `TargetFrameworks` property to define your list of target frameworks. Use semi-colon to separate multiple framework values. \n\n```xml\n<PropertyGroup>\n  <TargetFrameworks>netcoreapp1.0;net451</TargetFrameworks>\n</PropertyGroup>\n```\n\n## dependencies\n\n> [!IMPORTANT]\n> If the dependency is a **project** and not a package, the format is different. \n> For more information, see the [dependency type](#dependency-type) section.\n\n### NETStandard.Library metapackage\n\n```json\n{\n  \"dependencies\": {\n    \"NETStandard.Library\": \"1.6.0\"\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <NetStandardImplicitPackageVersion>1.6.0</NetStandardImplicitPackageVersion>\n</PropertyGroup>\n```\n\n### Microsoft.NETCore.App metapackage\n\n```json\n{\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": \"1.0.0\"\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <RuntimeFrameworkVersion>1.0.3</RuntimeFrameworkVersion>\n</PropertyGroup>\n```\n\nNote that the `<RuntimeFrameworkVersion>` value in the migrated project is determined by the version of the SDK you have installed.\n\n### Top-level dependencies\n```json\n{\n  \"dependencies\": {\n    \"Microsoft.AspNetCore\": \"1.1.0\"\n  }\n}\n```\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.0\" />\n</ItemGroup>\n```\n\n### Per-framework dependencies\n```json\n{\n  \"framework\": {\n    \"net451\": {\n      \"dependencies\": {\n        \"System.Collections.Immutable\": \"1.3.1\"\n      }\n    },\n    \"netstandard1.5\": {\n      \"dependencies\": {\n        \"Newtonsoft.Json\": \"9.0.1\"\n      }\n    }\n  }\n}\n```\n\n```xml\n<ItemGroup Condition=\"'$(TargetFramework)'=='net451'\">\n  <PackageReference Include=\"System.Collections.Immutable\" Version=\"1.3.1\" />\n</ItemGroup>\n\n<ItemGroup Condition=\"'$(TargetFramework)'=='netstandard1.5'\">\n  <PackageReference Include=\"Newtonsoft.Json\" Version=\"9.0.1\" />\n</ItemGroup>\n```\n\n### imports\n\n```json\n{\n  \"dependencies\": {\n    \"YamlDotNet\": \"4.0.1-pre309\"\n  },\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": [\n        \"dnxcore50\",\n        \"dotnet\"\n      ]\n    }\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <PackageTargetFallback>dnxcore50;dotnet</PackageTargetFallback>\n</PropertyGroup>\n<ItemGroup>\n  <PackageReference Include=\"YamlDotNet\" Version=\"4.0.1-pre309\" />\n</ItemGroup>\n```\n\n### dependency type\n\n#### type: project\n```json\n{\n  \"dependencies\": {\n    \"MyOtherProject\": \"1.0.0-*\",\n    \"AnotherProject\": {\n      \"type\": \"project\"\n    }\n  }\n}\n```\n\n```xml\n<ItemGroup>\n  <ProjectReference Include=\"..\\MyOtherProject\\MyOtherProject.csproj\" />\n  <ProjectReference Include=\"..\\AnotherProject\\AnotherProject.csproj\" />\n</ItemGroup>\n```\n\n> [!NOTE]\n> This will break the way that `dotnet pack --version-suffix $suffix` determines the \ndependency version of a project reference.\n\n\n#### type: build\n```json\n{\n  \"dependencies\": {\n    \"Microsoft.EntityFrameworkCore.Design\": {\n      \"version\": \"1.1.0\",\n      \"type\": \"build\"\n    }\n  }\n}\n```\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"1.1.0\" PrivateAssets=\"All\" />\n</ItemGroup>\n```\n\n#### type: platform\n```json\n{\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.1.0\",\n      \"type\": \"platform\"\n    }\n  }\n}\n```\n\nThere is no equivalent in csproj. \n\n## runtimes\n```json\n{\n  \"runtimes\": {\n    \"win7-x64\": {},\n    \"osx.10.11-x64\": {},\n    \"ubuntu.16.04-x64\": {}\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <RuntimeIdentifiers>win7-x64;osx.10.11-x64;ubuntu.16.04-x64</RuntimeIdentifiers>\n</PropertyGroup>\n```\n\n### Standalone apps (self-contained deployment)\nIn project.json, defining a `runtimes` section means the app was standalone during\nbuild and publish.\nIn MSBuild, all projects are *portable* during build, but can be published as\nstandalone.\n\n`dotnet publish --framework netcoreapp1.0 --runtime osx.10.11-x64`\n\nFor more information, see [Self-contained deployments (SCD)](../deploying/index.md#self-contained-deployments-scd).\n\n## tools\n```json\n{\n  \"tools\": {\n    \"Microsoft.EntityFrameworkCore.Tools.DotNet\": \"1.0.0-*\"\n  }\n}\n```\n\n```xml\n<ItemGroup>\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"1.0.0\" />\n</ItemGroup>\n```\n\n> [!NOTE]\n> `imports` on tools are not supported in csproj. Tools that need imports will not work with\nthe new `Microsoft.NET.Sdk`.\n\n## buildOptions\n\nSee also [Files](#files).\n\n### emitEntryPoint\n\n```json\n{\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <OutputType>Exe</OutputType>\n</PropertyGroup>\n```\n\nIf `emitEntryPoint` was `false`, the value of `OutputType` is converted to `Library`, which is the default value:\n\n```json\n{\n  \"buildOptions\": {\n    \"emitEntryPoint\": false\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <OutputType>Library</OutputType>\n  <!-- or, omit altogether. It defaults to 'Library' -->\n</PropertyGroup>\n```\n\n### keyFile\n\n```json\n{\n  \"buildOptions\": {\n    \"keyFile\": \"MyKey.snk\"\n  }\n}\n```\n\nThe `keyFile` element expands to three properties in MSBuild:\n\n```xml\n<PropertyGroup>\n  <AssemblyOriginatorKeyFile>MyKey.snk</AssemblyOriginatorKeyFile>\n  <SignAssembly>true</SignAssembly>\n  <PublicSign Condition=\"'$(OS)' != 'Windows_NT'\">true</PublicSign>\n</PropertyGroup>\n```\n\n### Other common build options\n\n```json\n{\n  \"buildOptions\": {\n    \"warningsAsErrors\": true,\n    \"nowarn\": [\"CS0168\", \"CS0219\"],\n    \"xmlDoc\": true,\n    \"preserveCompilationContext\": true,\n    \"outputName\": \"Different.AssemblyName\",\n    \"debugType\": \"portable\",\n    \"allowUnsafe\": true,\n    \"define\": [\"TEST\", \"OTHERCONDITION\"]\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n  <NoWarn>$(NoWarn);CS0168;CS0219</NoWarn>\n  <GenerateDocumentationFile>true</GenerateDocumentationFile>\n  <PreserveCompilationContext>true</PreserveCompilationContext>\n  <AssemblyName>Different.AssemblyName</AssemblyName>\n  <DebugType>portable</DebugType>\n  <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\n  <DefineConstants>$(DefineConstants);TEST;OTHERCONDITION</DefineConstants>\n</PropertyGroup>\n```\n\n## packOptions\n\nSee also [Files](#files).\n\n### Common pack options\n\n```json\n{\n  \"packOptions\": {    \n    \"summary\": \"numl is a machine learning library intended to ease the use of using standard modeling techniques for both prediction and clustering.\",\n    \"tags\": [\"machine learning\", \"framework\"],\n    \"releaseNotes\": \"Version 0.9.12-beta\",\n    \"iconUrl\": \"http://numl.net/images/ico.png\",\n    \"projectUrl\": \"http://numl.net\",\n    \"licenseUrl\": \"https://raw.githubusercontent.com/sethjuarez/numl/master/LICENSE.md\",\n    \"requireLicenseAcceptance\": false,\n    \"repository\": {\n      \"type\": \"git\",\n      \"url\": \"https://raw.githubusercontent.com/sethjuarez/numl\"\n    },\n    \"owners\": [\"Seth Juarez\"]\n  }\n}\n```\n\n```xml\n<PropertyGroup>\n  <!-- summary is not migrated from project.json, but you can use the <Description> property for that if needed. -->\n  <PackageTags>machine learning;framework</PackageTags>\n  <PackageReleaseNotes>Version 0.9.12-beta</PackageReleaseNotes>\n  <PackageIconUrl>http://numl.net/images/ico.png</PackageIconUrl>\n  <PackageProjectUrl>http://numl.net</PackageProjectUrl>\n  <PackageLicenseUrl>https://raw.githubusercontent.com/sethjuarez/numl/master/LICENSE.md</PackageLicenseUrl>\n  <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\n  <RepositoryType>git</RepositoryType>\n  <RepositoryUrl>https://raw.githubusercontent.com/sethjuarez/numl</RepositoryUrl>\n  <!-- owners is not supported in MSBuild -->\n</PropertyGroup>\n```\n\nThere is no equivalent for the `owners` element in MSBuild. \nFor `summary`, you can use the MSBuild `<Description>` property, even though the value of `summary` is not migrated automatically to that property, since that \nproperty is mapped to the [`description`](#-other-common-root-level-options) element.\n\n## scripts\n\n```json\n{\n  \"scripts\": {\n    \"precompile\": \"generateCode.cmd\",\n    \"postpublish\": [ \"obfuscate.cmd\", \"removeTempFiles.cmd\" ]\n  }\n}\n```\n\nTheir equivalent in MSBuild are [targets](https://docs.microsoft.com/visualstudio/msbuild/msbuild-targets):\n\n```xml\n<Target Name=\"MyPreCompileTarget\" BeforeTargets=\"Build\">\n  <Exec Command=\"generateCode.cmd\" />\n</Target>\n\n<Target Name=\"MyPostCompileTarget\" AfterTargets=\"Publish\">\n  <Exec Command=\"obfuscate.cmd\" />\n  <Exec Command=\"removeTempFiles.cmd\" />\n</Target>\n```\n\n\n## runtimeOptions\n\n```json\n{\n  \"runtimeOptions\": {\n    \"configProperties\": {\n      \"System.GC.Server\": true,\n      \"System.GC.Concurrent\": true,\n      \"System.GC.RetainVM\": true,\n      \"System.Threading.ThreadPool.MinThreads\": 4,\n      \"System.Threading.ThreadPool.MaxThreads\": 25\n    }\n  }\n}\n```\n\nAll settings in this group, except for the \"System.GC.Server\" property, are placed into a file called\n*runtimeconfig.template.json* in the project folder, with options lifted to the root object during the migration process:\n\n```json\n{\n  \"configProperties\": {\n    \"System.GC.Concurrent\": true,\n    \"System.GC.RetainVM\": true,\n    \"System.Threading.ThreadPool.MinThreads\": 4,\n    \"System.Threading.ThreadPool.MaxThreads\": 25\n  }\n}\n```\n\nThe \"System.GC.Server\" property is migrated into the csproj file:\n```xml\n<PropertyGroup>\n  <ServerGarbageCollection>true</ServerGarbageCollection>\n</PropertyGroup>\n```\n\nHowever, you can set all those values in the csproj as well as MSBuild properties:\n```xml\n<PropertyGroup>\n  <ServerGarbageCollection>true</ServerGarbageCollection>\n  <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>\n  <RetainVMGarbageCollection>true</RetainVMGarbageCollection>\n  <ThreadPoolMinThreads>4</ThreadPoolMinThreads>\n  <ThreadPoolMaxThreads>25</ThreadPoolMaxThreads>\n</PropertyGroup>\n```\n\n## shared\n```json\n{\n  \"shared\": \"shared/**/*.cs\"\n}\n```\n\nNot supported in csproj. You must instead create include content files in your *.nuspec* file. \nFor more information, see [Including content files](https://docs.microsoft.com/nuget/schema/nuspec#including-content-files).\n\n## files\n\nIn *project.json*, build and pack could be extended to compile and embed from different folders.\nIn MSBuild, this is done using [items](https://docs.microsoft.com/visualstudio/msbuild/common-msbuild-project-items). The following example is a common conversion:\n\n```json\n{\n  \"buildOptions\": {\n    \"compile\": {\n      \"copyToOutput\": \"notes.txt\",\n      \"include\": \"../Shared/*.cs\",\n      \"exclude\": \"../Shared/Not/*.cs\"\n    },\n    \"embed\": {\n      \"include\": \"../Shared/*.resx\"\n    }\n  },\n  \"packOptions\": {\n    \"include\": \"Views/\",\n    \"mappings\": {\n      \"some/path/in/project.txt\": \"in/package.txt\"\n    }\n  },\n  \"publishOptions\": {\n    \"include\": [\n      \"files/\",\n      \"publishnotes.txt\"\n    ]\n  }\n}\n```\n\n```xml\n<ItemGroup>\n  <Compile Include=\"..\\Shared\\*.cs\" Exclude=\"..\\Shared\\Not\\*.cs\" />\n  <EmbeddedResource Include=\"..\\Shared\\*.resx\" />\n  <Content Include=\"Views\\**\\*\" PackagePath=\"%(Identity)\" />\n  <None Include=\"some/path/in/project.txt\" Pack=\"true\" PackagePath=\"in/package.txt\" />\n  \n  <None Include=\"notes.txt\" CopyToOutputDirectory=\"Always\" />\n  <!-- CopyToOutputDirectory = { Always, PreserveNewest, Never } -->\n\n  <Content Include=\"files\\**\\*\" CopyToPublishDirectory=\"PreserveNewest\" />\n  <None Include=\"publishnotes.txt\" CopyToPublishDirectory=\"Always\" />\n  <!-- CopyToPublishDirectory = { Always, PreserveNewest, Never } -->\n</ItemGroup>\n```\n\n> [!NOTE]\n> Many of the default [globbing patterns](https://en.wikipedia.org/wiki/Glob_(programming)) are added automatically by the .NET Core SDK.\n> For more information, see [Default Compile Item Values](https://aka.ms/sdkimplicititems).\n\nAll MSBuild `ItemGroup` elements support `Include`, `Exclude`, and `Remove`.\n\nPackage layout inside the .nupkg can be modified with `PackagePath=\"path\"`.\n\nExcept for `Content`, most item groups require explicitly adding `Pack=\"true\"` to \nbe included in the package. `Content` will be put in the *content* folder\nin a package since the MSBuild `<IncludeContentInPack>` property is set to `true` by default. \nFor more information, see [Including content in a package](https://docs.microsoft.com/nuget/schema/msbuild-targets#including-content-in-a-package).\n\n`PackagePath=\"%(Identity)\"` is a short way of setting package path\nto the project-relative file path.\n\n## testRunner\n\n### xUnit\n\n```json\n{\n  \"testRunner\": \"xunit\",\n  \"dependencies\": {\n    \"dotnet-test-xunit\": \"<any>\"\n  }\n}\n```\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.0.0-*\" />\n  <PackageReference Include=\"xunit\" Version=\"2.2.0-*\" />\n  <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.2.0-*\" />\n</ItemGroup>\n```\n\n### MSTest\n\n```json\n{\n  \"testRunner\": \"mstest\",\n  \"dependencies\": {\n    \"dotnet-test-mstest\": \"<any>\"\n  }\n}\n```\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.0.0-*\" />\n  <PackageReference Include=\"MSTest.TestAdapter\" Version=\"1.1.12-*\" />\n  <PackageReference Include=\"MSTest.TestFramework\" Version=\"1.1.11-*\" />\n</ItemGroup>\n```\n\n## See Also\n\n[High-level overview of changes in CLI](../tools/cli-msbuild-architecture.md)\n","nodes":[{"pos":[11,74],"content":"project.json and csproj comparison - .NET Core | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"project.json and csproj comparison - .NET Core | Microsoft Docs","pos":[0,63]}]},{"pos":[88,143],"content":"See a mapping between project.json and csproj elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"See a mapping between project.json and csproj elements.","pos":[0,55]}]},{"pos":[154,194],"content":"project.json, csproj, .NET Core, MSBuild","needQuote":true,"needEscape":true,"nodes":[{"content":"project.json, csproj, .NET Core, MSBuild","pos":[0,40]}]},{"pos":[392,444],"content":"A mapping between project.json and csproj properties","linkify":"A mapping between project.json and csproj properties","nodes":[{"content":"A mapping between project.json and csproj properties","pos":[0,52]}]},{"pos":[446,497],"content":"By <bpt id=\"p1\">[</bpt>Nate McMaster<ept id=\"p1\">](https://github.com/natemcmaster)</ept>","source":"By [Nate McMaster](https://github.com/natemcmaster)"},{"pos":[499,697],"content":"During the development of the .NET Core tooling, an important design change was made to no longer support <bpt id=\"p1\">*</bpt>project.json<ept id=\"p1\">*</ept> files and instead move the .NET Core projects to the MSBuild/csproj format.","source":"During the development of the .NET Core tooling, an important design change was made to \nno longer support *project.json* files and instead move the .NET Core projects to the MSBuild/csproj \nformat."},{"pos":[699,968],"content":"This article shows how the settings in <bpt id=\"p1\">*</bpt>project.json<ept id=\"p1\">*</ept> are represented in the MSBuild/csproj format so you can learn how to use the new format and understand the changes made by the migration tools when you're upgrading your project to the latest version of the tooling.","source":"This article shows how the settings in *project.json* are represented in the MSBuild/csproj format so you\ncan learn how to use the new format and understand the changes made by the migration tools when you're\nupgrading your project to the latest version of the tooling."},{"pos":[975,992],"content":"The csproj format","linkify":"The csproj format","nodes":[{"content":"The csproj format","pos":[0,17]}]},{"content":"The new format, <ph id=\"ph1\">\\*</ph>.csproj, is an XML-based format.","pos":[994,1044],"source":"The new format, \\*.csproj, is an XML-based format."},{"content":"The following example shows the root node of a .NET Core project using the <ph id=\"ph1\">`Microsoft.NET.Sdk`</ph>.","pos":[1045,1141],"source":" The following example shows the root node of a \n.NET Core project using the `Microsoft.NET.Sdk`."},{"content":"For web projects, the SDK used is <ph id=\"ph1\">`Microsoft.NET.Sdk.Web`</ph>.","pos":[1142,1201],"source":" For web projects, the SDK used is \n`Microsoft.NET.Sdk.Web`."},{"pos":[1267,1294],"content":"Common top-level properties","linkify":"Common top-level properties","nodes":[{"content":"Common top-level properties","pos":[0,27]}]},{"pos":[1300,1304],"content":"name","linkify":"name","nodes":[{"content":"name","pos":[0,4]}]},{"content":"No longer supported.","pos":[1348,1368]},{"content":"In csproj, this is determined by the project filename, which is defined by the directory name.","pos":[1369,1463]},{"content":"For example, <ph id=\"ph1\">`MyProjectName.csproj`</ph>.","pos":[1464,1500],"source":" For example, `MyProjectName.csproj`."},{"pos":[1502,1613],"content":"By default, the project filename also specifies the value of the <ph id=\"ph1\">`&lt;AssemblyName&gt;`</ph> and <ph id=\"ph2\">`&lt;PackageId&gt;`</ph> properties.","source":"By default, the project filename also specifies the value of the `<AssemblyName>` and `<PackageId>` properties."},{"content":"The <ph id=\"ph1\">`&lt;AssemblyName&gt;`</ph> will have a different value then <ph id=\"ph2\">`&lt;PackageId&gt;`</ph> if <ph id=\"ph3\">`buildOptions\\outputName`</ph> property was defined in project.json.","pos":[1745,1879],"source":"The `<AssemblyName>` will have a different value then `<PackageId>` if `buildOptions\\outputName` property was defined in project.json."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Other common build options<ept id=\"p1\">](#other-common-build-options)</ept>.","pos":[1880,1965],"source":" \nFor more information, see [Other common build options](#other-common-build-options)."},{"pos":[1971,1978],"content":"version","linkify":"version","nodes":[{"content":"version","pos":[0,7]}]},{"pos":[2025,2080],"content":"Use the <ph id=\"ph1\">`VersionPrefix`</ph> and <ph id=\"ph2\">`VersionSuffix`</ph> properties:","source":"Use the `VersionPrefix` and `VersionSuffix` properties:"},{"pos":[2205,2302],"content":"You can also use the <ph id=\"ph1\">`Version`</ph> property, but this may override version settings during packaging:","source":"You can also use the `Version` property, but this may override version settings during packaging:"},{"pos":[2386,2417],"content":"Other common root-level options","linkify":"Other common root-level options","nodes":[{"content":"Other common root-level options","pos":[0,31]}]},{"pos":[3013,3023],"content":"frameworks","linkify":"frameworks","nodes":[{"content":"frameworks","pos":[0,10]}]},{"pos":[3029,3049],"content":"One target framework","linkify":"One target framework","nodes":[{"content":"One target framework","pos":[0,20]}]},{"pos":[3213,3239],"content":"Multiple target frameworks","linkify":"Multiple target frameworks","nodes":[{"content":"Multiple target frameworks","pos":[0,26]}]},{"content":"Use the <ph id=\"ph1\">`TargetFrameworks`</ph> property to define your list of target frameworks.","pos":[3322,3399],"source":"Use the `TargetFrameworks` property to define your list of target frameworks."},{"content":"Use semi-colon to separate multiple framework values.","pos":[3400,3453]},{"pos":[3564,3576],"content":"dependencies","linkify":"dependencies","nodes":[{"content":"dependencies","pos":[0,12]}]},{"pos":[3580,3751],"content":"[!IMPORTANT]\nIf the dependency is a **project** and not a package, the format is different. \nFor more information, see the [dependency type](#dependency-type) section.","leadings":["","> ","> "],"nodes":[{"content":"If the dependency is a **project** and not a package, the format is different. \nFor more information, see the [dependency type](#dependency-type) section.","pos":[13,167],"nodes":[{"content":"If the dependency is a <bpt id=\"p1\">**</bpt>project<ept id=\"p1\">**</ept> and not a package, the format is different.","pos":[0,78],"source":"If the dependency is a **project** and not a package, the format is different."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>dependency type<ept id=\"p1\">](#dependency-type)</ept> section.","pos":[79,154],"source":" \nFor more information, see the [dependency type](#dependency-type) section."}]}]},{"pos":[3757,3788],"content":"NETStandard.Library metapackage","linkify":"NETStandard.Library metapackage","nodes":[{"content":"NETStandard.Library metapackage","pos":[0,31]}]},{"pos":[3994,4027],"content":"Microsoft.NETCore.App metapackage","linkify":"Microsoft.NETCore.App metapackage","nodes":[{"content":"Microsoft.NETCore.App metapackage","pos":[0,33]}]},{"pos":[4211,4342],"content":"Note that the <ph id=\"ph1\">`&lt;RuntimeFrameworkVersion&gt;`</ph> value in the migrated project is determined by the version of the SDK you have installed.","source":"Note that the `<RuntimeFrameworkVersion>` value in the migrated project is determined by the version of the SDK you have installed."},{"pos":[4348,4370],"content":"Top-level dependencies","linkify":"Top-level dependencies","nodes":[{"content":"Top-level dependencies","pos":[0,22]}]},{"pos":[4559,4585],"content":"Per-framework dependencies","linkify":"Per-framework dependencies","nodes":[{"content":"Per-framework dependencies","pos":[0,26]}]},{"pos":[5128,5135],"content":"imports","linkify":"imports","nodes":[{"content":"imports","pos":[0,7]}]},{"pos":[5535,5550],"content":"dependency type","linkify":"dependency type","nodes":[{"content":"dependency type","pos":[0,15]}]},{"pos":[5557,5570],"content":"type: project","linkify":"type: project","nodes":[{"content":"type: project","pos":[0,13]}]},{"pos":[5884,6020],"content":"[!NOTE]\nThis will break the way that `dotnet pack --version-suffix $suffix` determines the \ndependency version of a project reference.","leadings":["","> ",""],"nodes":[{"content":"This will break the way that <ph id=\"ph1\">`dotnet pack --version-suffix $suffix`</ph> determines the dependency version of a project reference.","pos":[8,134],"source":"This will break the way that `dotnet pack --version-suffix $suffix` determines the \ndependency version of a project reference."}]},{"pos":[6028,6039],"content":"type: build","linkify":"type: build","nodes":[{"content":"type: build","pos":[0,11]}]},{"pos":[6329,6343],"content":"type: platform","linkify":"type: platform","nodes":[{"content":"type: platform","pos":[0,14]}]},{"content":"There is no equivalent in csproj.","pos":[6473,6506]},{"pos":[6512,6520],"content":"runtimes","linkify":"runtimes","nodes":[{"content":"runtimes","pos":[0,8]}]},{"pos":[6762,6805],"content":"Standalone apps (self-contained deployment)","linkify":"Standalone apps (self-contained deployment)","nodes":[{"content":"Standalone apps (self-contained deployment)","pos":[0,43]}]},{"content":"In project.json, defining a <ph id=\"ph1\">`runtimes`</ph> section means the app was standalone during build and publish.","pos":[6806,6907],"source":"In project.json, defining a `runtimes` section means the app was standalone during\nbuild and publish."},{"content":"In MSBuild, all projects are <bpt id=\"p1\">*</bpt>portable<ept id=\"p1\">*</ept> during build, but can be published as standalone.","pos":[6908,6997],"source":"\nIn MSBuild, all projects are *portable* during build, but can be published as\nstandalone."},{"pos":[7067,7182],"content":"For more information, see <bpt id=\"p1\">[</bpt>Self-contained deployments (SCD)<ept id=\"p1\">](../deploying/index.md#self-contained-deployments-scd)</ept>.","source":"For more information, see [Self-contained deployments (SCD)](../deploying/index.md#self-contained-deployments-scd)."},{"pos":[7187,7192],"content":"tools","linkify":"tools","nodes":[{"content":"tools","pos":[0,5]}]},{"pos":[7424,7553],"content":"[!NOTE]\n`imports` on tools are not supported in csproj. Tools that need imports will not work with\nthe new `Microsoft.NET.Sdk`.","leadings":["","> ",""],"nodes":[{"content":"`imports` on tools are not supported in csproj. Tools that need imports will not work with\nthe new `Microsoft.NET.Sdk`.","pos":[8,127],"nodes":[{"content":"<ph id=\"ph1\">`imports`</ph> on tools are not supported in csproj.","pos":[0,47],"source":"`imports` on tools are not supported in csproj."},{"content":"Tools that need imports will not work with the new <ph id=\"ph1\">`Microsoft.NET.Sdk`</ph>.","pos":[48,119],"source":" Tools that need imports will not work with\nthe new `Microsoft.NET.Sdk`."}]}]},{"pos":[7558,7570],"content":"buildOptions","linkify":"buildOptions","nodes":[{"content":"buildOptions","pos":[0,12]}]},{"pos":[7572,7597],"content":"See also <bpt id=\"p1\">[</bpt>Files<ept id=\"p1\">](#files)</ept>.","source":"See also [Files](#files)."},{"pos":[7603,7617],"content":"emitEntryPoint","linkify":"emitEntryPoint","nodes":[{"content":"emitEntryPoint","pos":[0,14]}]},{"pos":[7763,7876],"content":"If <ph id=\"ph1\">`emitEntryPoint`</ph> was <ph id=\"ph2\">`false`</ph>, the value of <ph id=\"ph3\">`OutputType`</ph> is converted to <ph id=\"ph4\">`Library`</ph>, which is the default value:","source":"If `emitEntryPoint` was `false`, the value of `OutputType` is converted to `Library`, which is the default value:"},{"pos":[8088,8095],"content":"keyFile","linkify":"keyFile","nodes":[{"content":"keyFile","pos":[0,7]}]},{"pos":[8165,8226],"content":"The <ph id=\"ph1\">`keyFile`</ph> element expands to three properties in MSBuild:","source":"The `keyFile` element expands to three properties in MSBuild:"},{"pos":[8448,8474],"content":"Other common build options","linkify":"Other common build options","nodes":[{"content":"Other common build options","pos":[0,26]}]},{"pos":[9263,9274],"content":"packOptions","linkify":"packOptions","nodes":[{"content":"packOptions","pos":[0,11]}]},{"pos":[9276,9301],"content":"See also <bpt id=\"p1\">[</bpt>Files<ept id=\"p1\">](#files)</ept>.","source":"See also [Files](#files)."},{"pos":[9307,9326],"content":"Common pack options","linkify":"Common pack options","nodes":[{"content":"Common pack options","pos":[0,19]}]},{"content":"There is no equivalent for the <ph id=\"ph1\">`owners`</ph> element in MSBuild.","pos":[10729,10788],"source":"There is no equivalent for the `owners` element in MSBuild."},{"content":"For <ph id=\"ph1\">`summary`</ph>, you can use the MSBuild <ph id=\"ph2\">`&lt;Description&gt;`</ph> property, even though the value of <ph id=\"ph3\">`summary`</ph> is not migrated automatically to that property, since that property is mapped to the <bpt id=\"p1\">[</bpt><ph id=\"ph4\">`description`</ph><ept id=\"p1\">](#-other-common-root-level-options)</ept> element.","pos":[10789,11035],"source":" \nFor `summary`, you can use the MSBuild `<Description>` property, even though the value of `summary` is not migrated automatically to that property, since that \nproperty is mapped to the [`description`](#-other-common-root-level-options) element."},{"pos":[11040,11047],"content":"scripts","linkify":"scripts","nodes":[{"content":"scripts","pos":[0,7]}]},{"pos":[11185,11292],"content":"Their equivalent in MSBuild are <bpt id=\"p1\">[</bpt>targets<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-targets)</ept>:","source":"Their equivalent in MSBuild are [targets](https://docs.microsoft.com/visualstudio/msbuild/msbuild-targets):"},{"pos":[11561,11575],"content":"runtimeOptions","linkify":"runtimeOptions","nodes":[{"content":"runtimeOptions","pos":[0,14]}]},{"pos":[11856,12079],"content":"All settings in this group, except for the \"System.GC.Server\" property, are placed into a file called <bpt id=\"p1\">*</bpt>runtimeconfig.template.json<ept id=\"p1\">*</ept> in the project folder, with options lifted to the root object during the migration process:","source":"All settings in this group, except for the \"System.GC.Server\" property, are placed into a file called\n*runtimeconfig.template.json* in the project folder, with options lifted to the root object during the migration process:"},{"content":"The \"System.GC.Server\" property is migrated into the csproj file:","pos":[12290,12355]},{"content":"However, you can set all those values in the csproj as well as MSBuild properties:","pos":[12459,12541]},{"pos":[12875,12881],"content":"shared","linkify":"shared","nodes":[{"content":"shared","pos":[0,6]}]},{"content":"Not supported in csproj.","pos":[12928,12952]},{"content":"You must instead create include content files in your <bpt id=\"p1\">*</bpt>.nuspec<ept id=\"p1\">*</ept> file.","pos":[12953,13022],"source":" You must instead create include content files in your *.nuspec* file."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Including content files<ept id=\"p1\">](https://docs.microsoft.com/nuget/schema/nuspec#including-content-files)</ept>.","pos":[13023,13148],"source":" \nFor more information, see [Including content files](https://docs.microsoft.com/nuget/schema/nuspec#including-content-files)."},{"pos":[13153,13158],"content":"files","linkify":"files","nodes":[{"content":"files","pos":[0,5]}]},{"content":"In <bpt id=\"p1\">*</bpt>project.json<ept id=\"p1\">*</ept>, build and pack could be extended to compile and embed from different folders.","pos":[13160,13256],"source":"In *project.json*, build and pack could be extended to compile and embed from different folders."},{"content":"In MSBuild, this is done using <bpt id=\"p1\">[</bpt>items<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/msbuild/common-msbuild-project-items)</ept>.","pos":[13257,13374],"source":"\nIn MSBuild, this is done using [items](https://docs.microsoft.com/visualstudio/msbuild/common-msbuild-project-items)."},{"content":"The following example is a common conversion:","pos":[13375,13420]},{"pos":[14522,14759],"content":"[!NOTE]\nMany of the default [globbing patterns](https://en.wikipedia.org/wiki/Glob_(programming)) are added automatically by the .NET Core SDK.\nFor more information, see [Default Compile Item Values](https://aka.ms/sdkimplicititems).","leadings":["","> ","> "],"nodes":[{"content":"Many of the default [globbing patterns](https://en.wikipedia.org/wiki/Glob_(programming)) are added automatically by the .NET Core SDK.\nFor more information, see [Default Compile Item Values](https://aka.ms/sdkimplicititems).","pos":[8,233],"nodes":[{"content":"Many of the default <bpt id=\"p1\">[</bpt>globbing patterns<ept id=\"p1\">](https://en.wikipedia.org/wiki/Glob_(programming))</ept> are added automatically by the .NET Core SDK.","pos":[0,135],"source":"Many of the default [globbing patterns](https://en.wikipedia.org/wiki/Glob_(programming)) are added automatically by the .NET Core SDK."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Default Compile Item Values<ept id=\"p1\">](https://aka.ms/sdkimplicititems)</ept>.","pos":[136,225],"source":"\nFor more information, see [Default Compile Item Values](https://aka.ms/sdkimplicititems)."}]}]},{"pos":[14761,14837],"content":"All MSBuild <ph id=\"ph1\">`ItemGroup`</ph> elements support <ph id=\"ph2\">`Include`</ph>, <ph id=\"ph3\">`Exclude`</ph>, and <ph id=\"ph4\">`Remove`</ph>.","source":"All MSBuild `ItemGroup` elements support `Include`, `Exclude`, and `Remove`."},{"pos":[14839,14914],"content":"Package layout inside the .nupkg can be modified with <ph id=\"ph1\">`PackagePath=\"path\"`</ph>.","source":"Package layout inside the .nupkg can be modified with `PackagePath=\"path\"`."},{"content":"Except for <ph id=\"ph1\">`Content`</ph>, most item groups require explicitly adding <ph id=\"ph2\">`Pack=\"true\"`</ph> to be included in the package.","pos":[14916,15026],"source":"Except for `Content`, most item groups require explicitly adding `Pack=\"true\"` to \nbe included in the package."},{"content":"<ph id=\"ph1\">`Content`</ph> will be put in the <bpt id=\"p1\">*</bpt>content<ept id=\"p1\">*</ept> folder in a package since the MSBuild <ph id=\"ph2\">`&lt;IncludeContentInPack&gt;`</ph> property is set to <ph id=\"ph3\">`true`</ph> by default.","pos":[15027,15166],"source":"`Content` will be put in the *content* folder\nin a package since the MSBuild `<IncludeContentInPack>` property is set to `true` by default."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Including content in a package<ept id=\"p1\">](https://docs.microsoft.com/nuget/schema/msbuild-targets#including-content-in-a-package)</ept>.","pos":[15167,15315],"source":" \nFor more information, see [Including content in a package](https://docs.microsoft.com/nuget/schema/msbuild-targets#including-content-in-a-package)."},{"pos":[15317,15418],"content":"<ph id=\"ph1\">`PackagePath=\"%(Identity)\"`</ph> is a short way of setting package path to the project-relative file path.","source":"`PackagePath=\"%(Identity)\"` is a short way of setting package path\nto the project-relative file path."},{"pos":[15423,15433],"content":"testRunner","linkify":"testRunner","nodes":[{"content":"testRunner","pos":[0,10]}]},{"pos":[15439,15444],"content":"xUnit","linkify":"xUnit","nodes":[{"content":"xUnit","pos":[0,5]}]},{"pos":[15795,15801],"content":"MSTest","linkify":"MSTest","nodes":[{"content":"MSTest","pos":[0,6]}]},{"pos":[16163,16171],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[16173,16250],"content":"<bpt id=\"p1\">[</bpt>High-level overview of changes in CLI<ept id=\"p1\">](../tools/cli-msbuild-architecture.md)</ept>","source":"[High-level overview of changes in CLI](../tools/cli-msbuild-architecture.md)"}]}