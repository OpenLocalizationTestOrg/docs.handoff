<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75b0637e9a28f723fc836b5bdebd730ac1147253</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\filtering-with-dataview-linq-to-dataset.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cde3821198abc2c2a539212e1798d525a2469ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">946900a4f0e8cceaceb189916c55d64c3fc6408b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Filtering with DataView (LINQ to DataSet) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Filtering with DataView (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ability to filter data using specific criteria and then present the data to a client through a UI control is an important aspect of data binding.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> provides several ways to filter data and return subsets of data rows meeting specific filter criteria.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to the string-based filtering capabilities <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> also provides the ability to use <ph id="ph2">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> expressions for the filtering criteria.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> expressions allow for much more complex and powerful filtering operations than the string-based filtering.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are two ways to filter data using a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> from a <ph id="ph2">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> query with a Where clause.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use the existing, string-based filtering capabilities of <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating DataView from a Query with Filtering Information</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> object can be created from a <ph id="ph2">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> query.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If that query contains a <ph id="ph1">`Where`</ph> clause, the <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> is created with the filtering information from the query.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The expression in the <ph id="ph1">`Where`</ph> clause is used to determine which data rows will be included in the <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph>, and is the basis for the filter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Expression-based filters offer more powerful and complex filtering than the simpler string-based filters.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The string-based and expression-based filters are mutually exclusive.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the string-based <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> is set after a <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> is created from a query, the expression based filter inferred from the query is cleared.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In most cases, the expressions used for filtering should not have side effects and must be deterministic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Also, the expressions should not contain any logic that depends on a set number of executions, because the filtering operations might be executed any number of times.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example queries the SalesOrderDetail table for orders with a quantity greater than 2 and less than 6; creates a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> from that query; and binds the <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.Forms.BindingSource&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVFromQueryWhere<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvfromquerywhere)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#LDVFromQueryWhere<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvfromquerywhere)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> from a query for orders placed after June 6, 2001:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVFromQueryWhere3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvfromquerywhere3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#LDVFromQueryWhere3<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvfromquerywhere3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Filtering can also be combined with sorting.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> from a query for contacts whose last name start with "S" and sorted by last name, then first name:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVFromQueryWhereOrderByThenBy<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvfromquerywhereorderbythenby)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#LDVFromQueryWhereOrderByThenBy<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvfromquerywhereorderbythenby)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example uses the SoundEx algorithm to find contacts whose last name is similar to "Zhu".</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The SoundEx algorithm is implemented in the SoundEx method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVSoundExFilter<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvsoundexfilter)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#LDVSoundExFilter<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvsoundexfilter)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>SoundEx is a phonetic algorithm used for indexing names by sound, as they are pronounced in English, originally developed by the U.S. Census Bureau.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The SoundEx method returns a four character code for a name consisting of an English letter followed by three numbers.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The letter is the first letter of the name and the numbers encode the remaining consonants in the name.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Similar sounding names share the same SoundEx code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The SoundEx implementation used in the SoundEx method of the previous example is shown here:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#SoundEx<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#soundex)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#SoundEx<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#soundex)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Using the RowFilter Property</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The existing string-based filtering functionality of <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> still works in the <ph id="ph2">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> context.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about string-based <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> filtering, see <bpt id="p1">[</bpt>Sorting and Filtering Data<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/sorting-and-filtering-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> from the Contact table and then sets the <ph id="ph2">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property to return rows where the contact's last name is "Zhu":</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVRowFilter<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvrowfilter)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#LDVRowFilter<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvrowfilter)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>After a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> has been created from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> or <ph id="ph3">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> query, you can use the <ph id="ph4">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property to specify subsets of rows based on their column values.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The string-based and expression-based filters are mutually exclusive.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property will clear the filter expression inferred from the <ph id="ph2">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> query, and the filter expression cannot be reset.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVFromQueryWhereSetRowFilter<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvfromquerywheresetrowfilter)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#LDVFromQueryWhereSetRowFilter<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvfromquerywheresetrowfilter)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you want to return the results of a particular query on the data, as opposed to providing a dynamic view of a subset of the data, you can use the <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>, rather than setting the <ph id="ph4">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property is best used in a data-bound application where a bound control displays filtered results.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property rebuilds the index for the data, adding overhead to your application and decreasing performance.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods use the current index without requiring the index to be rebuilt.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you are going to call <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> only once, then you should use the existing <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you are going to call <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> multiple times, you should create a new <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph> to rebuild the index on the column you want to search on, and then call the <ph id="ph4">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods see <bpt id="p1">[</bpt>Finding Rows<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/finding-rows.md)</ept> and <bpt id="p2">[</bpt>DataView Performance<ept id="p2">](../../../../docs/framework/data/adonet/dataview-performance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Clearing the Filter</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The filter on a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> can be cleared after filtering has been set using the <ph id="ph2">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The filter on a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> can be cleared in two different ways:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property to an empty string.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> from a query and then clears the filter by setting <ph id="ph2">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property to <ph id="ph3">`null`</ph>:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVClearRowFilter2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvclearrowfilter2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#LDVClearRowFilter2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvclearrowfilter2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> from a table sets the <ph id="ph2">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property, and then clears the filter by setting the <ph id="ph3">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property to an empty string:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVClearRowFilter<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvclearrowfilter)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DP DataView Samples#LDVClearRowFilter<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvclearrowfilter)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding and LINQ to DataSet<ept id="p1">](../../../../docs/framework/data/adonet/data-binding-and-linq-to-dataset.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sorting with DataView<ept id="p1">](../../../../docs/framework/data/adonet/sorting-with-dataview-linq-to-dataset.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>