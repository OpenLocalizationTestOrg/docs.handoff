{"content":"---\ntitle: Introduction to Delegates\ndescription: Introduction to Delegates\nkeywords: .NET, .NET Core\nauthor: BillWagner\nms.author: wiwagn\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: 59b61d77-84e5-457b-8da5-fb5f24ca6ed6\n---\n\n# Introduction to Delegates\n\n[Previous](delegates-events.md)\n\nDelegates provide a *late binding* mechanism in .NET. Late Binding\nmeans that you create an algorithm where the caller also supplies\nat least one method that implements part of the algorithm.\n\nFor example, consider sorting a list of stars in an astronomy application.\nYou may choose to sort those stars by their distance from the earth, or the\nmagnitude of the star, or their perceived brightness.\n\nIn all those cases, the Sort() method does essentially the same thing:\narranges the items in the list based on some comparison. The code that\ncompares two stars is different for each of the sort orderings.\n\nThese kinds of solutions have been used in software for half a century.\nThe C# language delegate concept provides first class language support,\nand type safety around the concept.\n\nAs you'll see later in this series, the C# code you write for algorithms\nlike this is type safe, and leverages the language and the compiler to\nensure that the types match for arguments and return types.\n\n## Language Design Goals for Delegates\n\nThe language designers enumerated several goals for the feature that\neventually became delegates.\n\nThe team wanted a common language construct that could be used for\nany late binding algorithms. That enables developers to learn one\nconcept, and use that same concept across many different software\nproblems.\n\nSecond, the team wanted to support both single and multi-cast method\ncalls. (Multicast delegates are delegates where multiple methods have\nbeen chained together. You'll see examples\n[later in this series](delegate-class.md). \n\nThe team wanted delegates to support the same type safety that developers\nexpect from all C# constructs. \n\nFinally, the team recognized that an event pattern is one specific pattern\nwhere delegates, or any late binding algorithm) is very useful. The team\nwanted to ensure that the code for delegates could provide the basis for\nthe .NET event pattern.\n\nThe result of all that work was the delegate and event support in C# and\n.NET. The remaining articles in this section will cover the language\nfeatures, the library support, and the common idioms that are used\nwhen you work with delegates.\n\nYou'll learn about the `delegate` keyword and what code it generates. You'll\nlearn about the features in the `System.Delegate` class, and how those features\nare used. You'll learn how to create type safe delegates, and how to create methods\nthat can be invoked through delegates. You'll also learn how to work with delegates\nand events by using Lambda expressions. You'll see where delegates become one of the\nbuilding blocks for LINQ. You'll learn how delegates are the basis for the .NET\nevent pattern, and how they are different.\n\nOverall, you'll see how delegates are an integral part of programming in .NET\nand working with the framework APIs.\n\nLet's get started.\n\n[Next](delegate-class.md)\n","nodes":[{"pos":[11,36],"content":"Introduction to Delegates","needQuote":true,"needEscape":true,"nodes":[{"content":"Introduction to Delegates","pos":[0,25]}]},{"pos":[50,75],"content":"Introduction to Delegates","needQuote":true,"needEscape":true,"nodes":[{"content":"Introduction to Delegates","pos":[0,25]}]},{"pos":[86,101],"content":".NET, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"pos":[296,321],"content":"Introduction to Delegates","linkify":"Introduction to Delegates","nodes":[{"content":"Introduction to Delegates","pos":[0,25]}]},{"pos":[323,354],"content":"<bpt id=\"p1\">[</bpt>Previous<ept id=\"p1\">](delegates-events.md)</ept>","source":"[Previous](delegates-events.md)"},{"content":"Delegates provide a <bpt id=\"p1\">*</bpt>late binding<ept id=\"p1\">*</ept> mechanism in .NET.","pos":[356,409],"source":"Delegates provide a *late binding* mechanism in .NET."},{"content":"Late Binding means that you create an algorithm where the caller also supplies at least one method that implements part of the algorithm.","pos":[410,547],"source":" Late Binding\nmeans that you create an algorithm where the caller also supplies\nat least one method that implements part of the algorithm."},{"content":"For example, consider sorting a list of stars in an astronomy application.","pos":[549,623]},{"content":"You may choose to sort those stars by their distance from the earth, or the magnitude of the star, or their perceived brightness.","pos":[624,753],"source":"\nYou may choose to sort those stars by their distance from the earth, or the\nmagnitude of the star, or their perceived brightness."},{"content":"In all those cases, the Sort() method does essentially the same thing: arranges the items in the list based on some comparison.","pos":[755,882],"source":"In all those cases, the Sort() method does essentially the same thing:\narranges the items in the list based on some comparison."},{"content":"The code that compares two stars is different for each of the sort orderings.","pos":[883,960],"source":" The code that\ncompares two stars is different for each of the sort orderings."},{"content":"These kinds of solutions have been used in software for half a century.","pos":[962,1033]},{"content":"The C# language delegate concept provides first class language support, and type safety around the concept.","pos":[1034,1141],"source":"\nThe C# language delegate concept provides first class language support,\nand type safety around the concept."},{"pos":[1143,1346],"content":"As you'll see later in this series, the C# code you write for algorithms like this is type safe, and leverages the language and the compiler to ensure that the types match for arguments and return types.","source":"As you'll see later in this series, the C# code you write for algorithms\nlike this is type safe, and leverages the language and the compiler to\nensure that the types match for arguments and return types."},{"pos":[1351,1386],"content":"Language Design Goals for Delegates","linkify":"Language Design Goals for Delegates","nodes":[{"content":"Language Design Goals for Delegates","pos":[0,35]}]},{"pos":[1388,1485],"content":"The language designers enumerated several goals for the feature that eventually became delegates.","source":"The language designers enumerated several goals for the feature that\neventually became delegates."},{"content":"The team wanted a common language construct that could be used for any late binding algorithms.","pos":[1487,1582],"source":"The team wanted a common language construct that could be used for\nany late binding algorithms."},{"content":"That enables developers to learn one concept, and use that same concept across many different software problems.","pos":[1583,1695],"source":" That enables developers to learn one\nconcept, and use that same concept across many different software\nproblems."},{"content":"Second, the team wanted to support both single and multi-cast method calls.","pos":[1697,1772],"source":"Second, the team wanted to support both single and multi-cast method\ncalls."},{"content":"(Multicast delegates are delegates where multiple methods have been chained together.","pos":[1773,1858],"source":" (Multicast delegates are delegates where multiple methods have\nbeen chained together."},{"content":"You'll see examples <bpt id=\"p1\">[</bpt>later in this series<ept id=\"p1\">](delegate-class.md)</ept>.","pos":[1859,1921],"source":" You'll see examples\n[later in this series](delegate-class.md)."},{"pos":[1924,2028],"content":"The team wanted delegates to support the same type safety that developers expect from all C# constructs.","source":"The team wanted delegates to support the same type safety that developers\nexpect from all C# constructs."},{"content":"Finally, the team recognized that an event pattern is one specific pattern where delegates, or any late binding algorithm) is very useful.","pos":[2031,2169],"source":"Finally, the team recognized that an event pattern is one specific pattern\nwhere delegates, or any late binding algorithm) is very useful."},{"content":"The team wanted to ensure that the code for delegates could provide the basis for the .NET event pattern.","pos":[2170,2275],"source":" The team\nwanted to ensure that the code for delegates could provide the basis for\nthe .NET event pattern."},{"content":"The result of all that work was the delegate and event support in C# and .NET.","pos":[2277,2355],"source":"The result of all that work was the delegate and event support in C# and\n.NET."},{"content":"The remaining articles in this section will cover the language features, the library support, and the common idioms that are used when you work with delegates.","pos":[2356,2515],"source":" The remaining articles in this section will cover the language\nfeatures, the library support, and the common idioms that are used\nwhen you work with delegates."},{"content":"You'll learn about the <ph id=\"ph1\">`delegate`</ph> keyword and what code it generates.","pos":[2517,2586],"source":"You'll learn about the `delegate` keyword and what code it generates."},{"content":"You'll learn about the features in the <ph id=\"ph1\">`System.Delegate`</ph> class, and how those features are used.","pos":[2587,2683],"source":" You'll\nlearn about the features in the `System.Delegate` class, and how those features\nare used."},{"content":"You'll learn how to create type safe delegates, and how to create methods that can be invoked through delegates.","pos":[2684,2796],"source":" You'll learn how to create type safe delegates, and how to create methods\nthat can be invoked through delegates."},{"content":"You'll also learn how to work with delegates and events by using Lambda expressions.","pos":[2797,2881],"source":" You'll also learn how to work with delegates\nand events by using Lambda expressions."},{"content":"You'll see where delegates become one of the building blocks for LINQ.","pos":[2882,2952],"source":" You'll see where delegates become one of the\nbuilding blocks for LINQ."},{"content":"You'll learn how delegates are the basis for the .NET event pattern, and how they are different.","pos":[2953,3049],"source":" You'll learn how delegates are the basis for the .NET\nevent pattern, and how they are different."},{"pos":[3051,3165],"content":"Overall, you'll see how delegates are an integral part of programming in .NET and working with the framework APIs.","source":"Overall, you'll see how delegates are an integral part of programming in .NET\nand working with the framework APIs."},{"content":"Let's get started.","pos":[3167,3185]},{"pos":[3187,3212],"content":"<bpt id=\"p1\">[</bpt>Next<ept id=\"p1\">](delegate-class.md)</ept>","source":"[Next](delegate-class.md)"}]}