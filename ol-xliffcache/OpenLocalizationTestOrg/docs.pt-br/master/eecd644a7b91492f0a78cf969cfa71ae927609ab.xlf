<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-create-and-use-assemblies-using-the-command-line.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eecd644a7b91492f0a78cf969cfa71ae927609ab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\assemblies-gac\how-to-create-and-use-assemblies-using-the-command-line.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e66c42f77c19c601e5dc4a7ffedb8743799f2176</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cba4904ed87e4d517012a38106f85fa7b66a4a52</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Create and Use Assemblies Using the Command Line (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create and Use Assemblies Using the Command Line (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An assembly, or a dynamic linking library (DLL), is linked to your program at run time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To demonstrate building and using a DLL, consider the following scenario:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MathLibrary.DLL`</ph>: The library file that contains the methods to be called at run time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this example, the DLL contains two methods, <ph id="ph1">`Add`</ph> and <ph id="ph2">`Multiply`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Add`</ph>: The source file that contains the method <ph id="ph2">`Add`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It returns the sum of its parameters.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`AddClass`</ph> that contains the method <ph id="ph2">`Add`</ph> is a member of the namespace <ph id="ph3">`UtilityMethods`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Mult`</ph>: The source code that contains the method <ph id="ph2">`Multiply`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It returns the product of its parameters.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`MultiplyClass`</ph> that contains the method <ph id="ph2">`Multiply`</ph> is also a member of the namespace <ph id="ph3">`UtilityMethods`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestCode`</ph>: The file that contains the <ph id="ph2">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It uses the methods in the DLL file to calculate the sum and the product of the run-time arguments.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This file contains the algorithm that uses the DLL methods, <ph id="ph1">`Add`</ph> and <ph id="ph2">`Multiply`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It starts with parsing the arguments entered from the command line, <ph id="ph1">`num1`</ph> and <ph id="ph2">`num2`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Then it calculates the sum by using the <ph id="ph1">`Add`</ph> method on the <ph id="ph2">`AddClass`</ph> class, and the product by using the <ph id="ph3">`Multiply`</ph> method on the <ph id="ph4">`MultiplyClass`</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Notice that the  <ph id="ph1">`Imports`</ph> statement at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Otherwise, you have to use the fully qualified names, as follows:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Execution</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To run the program, enter the name of the EXE file, followed by two numbers, as follows:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To build the file <ph id="ph1">`MathLibrary.DLL`</ph>, compile the two files <ph id="ph2">`Add`</ph> and <ph id="ph3">`Mult`</ph> by using the following command line.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>-target (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/target.md)</ept> compiler option tells the compiler to output a DLL instead of an EXE file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>-out (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/out.md)</ept> compiler option followed by a file name is used to specify the DLL file name.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Otherwise, the compiler uses the first file (<ph id="ph1">`Add.vb`</ph>) as the name of the DLL.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To build the executable file, <ph id="ph1">`TestCode.exe`</ph>, use the following command line:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-out<ept id="p1">**</ept> compiler option tells the compiler to output an EXE file and specifies the name of the output file (<ph id="ph1">`TestCode.exe`</ph>).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This compiler option is optional.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>-reference (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/reference.md)</ept> compiler option specifies the DLL file or files that this program uses.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about building from the command line, see  and <bpt id="p1">[</bpt>Building from the Command Line<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming Concepts<ept id="p1">](../../../../visual-basic/programming-guide/concepts/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assemblies in .NET<ept id="p1">](../../../../standard/assembly/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating a Class to Hold DLL Functions<ept id="p1">](../../../../framework/interop/creating-a-class-to-hold-dll-functions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>