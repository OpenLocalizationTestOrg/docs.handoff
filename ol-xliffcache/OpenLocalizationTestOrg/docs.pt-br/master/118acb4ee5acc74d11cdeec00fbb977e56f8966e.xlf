<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">118acb4ee5acc74d11cdeec00fbb977e56f8966e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\diagnostics\tracing\synchronous-scenarios-using-http-tcp-or-named-pipe.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60c62d5b23163594c02d99ccd7ae9c5775434546</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c3df39c4f12f572586a76eb467da238928322c2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Synchronous Scenarios using HTTP, TCP or Named-Pipe | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Synchronous Scenarios using HTTP, TCP or Named-Pipe</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes the activities and transfers for different synchronous request/reply scenarios, with a single-threaded client, using HTTP, TCP or named pipe.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Asynchronous Scenarios using HTTP, TCP, or Named-Pipe<ept id="p1">](../../../../../docs/framework/wcf/diagnostics/tracing/asynchronous-scenarios-using-http-tcp-or-named-pipe.md)</ept> for more information on multi-threaded requests.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Synchronous Request/Reply without Errors</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This section describes the activities and transfers for a valid synchronous request/reply scenario, with single-threaded client.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Client</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Establishing Communication with Service Endpoint</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A client is constructed and opened.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For each of these steps, the ambient activity (A) is transferred to a "Construct Client" (B) and "Open Client" (C) activity respectively.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For each activity being transferred to, the ambient activity is suspended until there is a transfer back, that is, until ServiceModel code is executed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Making a Request to Service Endpoint</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The ambient activity is transferred to a "ProcessAction" (D) activity.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Within this activity, a request message is sent, and a response message is received.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The activity ends when control returns to user code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because this is a synchronous request, the ambient activity suspends until control returns.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Closing Communication with Service Endpoint</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The client's close activity (I) is created from the ambient activity.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is identical to new and open.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Server</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Setting up a Service Host</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The ServiceHost’s new and open activities (N and O) are created from the ambient activity (M).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A listener activity (P) is created from opening a ServiceHost for each listener.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The listener activity waits to receive and process data.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Receiving Data on the Wire</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When data arrives on the wire, a "ReceiveBytes" activity is created if it does not already exist (Q) to process the received data.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This activity can be reused for multiple messages within a connection or queue.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The ReceiveBytes activity launches a ProcessMessage activity (R) if it has enough data to form a SOAP action message.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In activity R, the message headers are processed, and the activityID header is verified.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If this header is present, the activity ID is set to the ProcessAction activity; otherwise, a new ID is created.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>ProcessAction activity (S) is created and being transferred to, when the call is processed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This activity ends when all processing related to the incoming message is completed, including executing user code (T) and sending the response message if applicable.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Closing a Service Host</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ServiceHost’s close activity (Z) is created from the ambient activity.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Synchronous scenarios using HTTP&amp;#47;TCP&amp;#47; Named Pipes<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/sync.gif "</bpt>Sync<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">\&lt;</ph>A: name&gt;, <ph id="ph2">`A`</ph> is a shortcut symbol that describes the activity in the previous text and in table 3.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Name`</ph> is a shortened name of the activity.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph>, Process Action on both the client and service have the same activity ID.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Synchronous Request/Reply with Errors</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The only difference with the previous scenario is that a SOAP fault message is returned as a response message.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph>, the activity ID of the request message is added to the SOAP fault message.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Synchronous One-Way without Errors</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The only difference with the first scenario is that no message is returned to the server.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For HTTP-based protocols, a status (valid or error) is still returned to the client.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is because HTTP is the only protocol with a request-response semantics that is part of the <ph id="ph1">[!INCLUDE[indigo2](../../../../../includes/indigo2-md.md)]</ph> protocol stack.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because TCP processing is hidden from <ph id="ph1">[!INCLUDE[indigo2](../../../../../includes/indigo2-md.md)]</ph>, no acknowledgement is sent to the client.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Synchronous One-Way with Errors</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If an error occurs while processing the message (Q or beyond), no notification is returned to the client.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is identical to the "Synchronous One-Way without Errors" scenario.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You should not use a One-Way scenario if you want to receive an error message.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Duplex</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The difference with the previous scenarios is that the client acts as a service, in which it creates the ReceiveBytes and ProcessMessage activities, similar to the Asynchronous scenarios.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>