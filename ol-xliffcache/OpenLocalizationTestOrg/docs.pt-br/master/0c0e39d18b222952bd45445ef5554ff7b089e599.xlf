<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="writing-your-first-linq-query.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c0e39d18b222952bd45445ef5554ff7b089e599</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\writing-your-first-linq-query.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55f9e8261ee8922f7b06f43eb1f82f753989eafe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42b01af8f2036cac247f01f826d6fa833d7b344f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Writing Your First LINQ Query (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Writing Your First LINQ Query (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>query<ept id="p1">*</ept> is an expression that retrieves data from a data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Queries are expressed in a dedicated query language.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Over time, different languages have been developed for different types of data sources, for example, SQL for relational databases and XQuery for XML.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This makes it necessary for the application developer to learn a new query language for each type of data source or data format that is supported.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> simplifies the situation by offering a consistent model for working with data across various kinds of data sources and formats.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query, you are always working with objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You use the same basic coding patterns to query and transform data in XML documents, SQL databases, ADO.NET datasets and entities, .NET Framework collections, and any other source or format for which a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> provider is available.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This document describes the three phases of the creation and use of basic <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Three Stages of a Query Operation</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query operations consist of three actions:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Obtain the data source or sources.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Create the query.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Execute the query.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, the execution of a query is distinct from the creation of the query.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You do not retrieve any data just by creating a query.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This point is discussed in more detail later in this topic.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example illustrates the three parts of a query operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The example uses an array of integers as a convenient data source for demonstration purposes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, the same concepts also apply to other data sources.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept>, ensure that <bpt id="p2">**</bpt>Option infer<ept id="p2">**</ept> is set to <bpt id="p3">**</bpt>On<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Output:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The Data Source</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Because the data source in the previous example is an array, it implicitly supports the generic <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It is this fact that enables you to use an array as a data source for a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Types that support <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or a derived interface such as the generic <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph> are called <bpt id="p1">*</bpt>queryable types<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As an implicitly queryable type, the array requires no modification or special treatment to serve as a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> data source.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The same is true for any collection type that supports <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, including the generic <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, and other classes in the .NET Framework class library.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the source data does not already implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, a <ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> provider is needed to implement the functionality of the <bpt id="p1">*</bpt>standard query operators<ept id="p1">*</ept> for that data source.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> handles the work of loading an XML document into a queryable <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> type, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about standard query operators, see <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](standard-query-operators-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph>, you first create an object-relational mapping at design time, either manually or by using the <bpt id="p1">[</bpt>LINQ to SQL Tools in Visual Studio<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/linq-to-sql-tools-in-visual-studio2)</ept> in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You write your queries against the objects, and at run-time <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> handles the communication with the database.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`customers`</ph> represents a specific table in the database, and <ph id="ph2">&lt;xref:System.Data.Linq.Table%601&gt;</ph> supports generic <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information about how to create specific types of data sources, see the documentation for the various <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> providers.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(For a list of these providers, see <bpt id="p1">[</bpt>LINQ (Language-Integrated Query)<ept id="p1">](http://msdn.microsoft.com/library/a73c4aec-5d15-4e98-b962-1274021ea93d)</ept>.) The basic rule is simple: a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> data source is any object that supports the generic <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, or an interface that inherits from it.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Types such as <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> that support the non-generic <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface can also be used as <ph id="ph3">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> data sources.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For an example that uses an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, see <bpt id="p1">[</bpt>How to: Query an ArrayList with LINQ (Visual Basic)<ept id="p1">](how-to-query-an-arraylist-with-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The Query</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the query, you specify what information you want to retrieve from the data source or sources.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You also have the option of specifying how that information should be sorted, grouped, or structured before it is returned.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To enable query creation, Visual Basic has incorporated new query syntax into the language.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When it is executed, the query in the following example returns all the even numbers from an integer array, <ph id="ph1">`numbers`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The query expression contains three clauses: <ph id="ph1">`From`</ph>, <ph id="ph2">`Where`</ph>, and <ph id="ph3">`Select`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The specific function and purpose of each query expression clause is discussed in <bpt id="p1">[</bpt>Basic Query Operations (Visual Basic)<ept id="p1">](basic-query-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Queries<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note that in <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, a query definition often is stored in a variable and executed later.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The query variable, such as <ph id="ph1">`evensQuery`</ph> in the previous example, must be a queryable type.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`evensQuery`</ph> is <ph id="ph2">`IEnumerable(Of Integer)`</ph>, assigned by the compiler using local type inference.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is important to remember that the query variable itself takes no action and returns no data.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It only stores the query definition.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the previous example, it is the <ph id="ph1">`For Each`</ph> loop that executes the query.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Query Execution</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Query execution is separate from query creation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Query creation defines the query, but execution is triggered by a different mechanism.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A query can be executed as soon as it is defined (<bpt id="p1">*</bpt>immediate execution<ept id="p1">*</ept>), or the definition can be stored and the query can be executed later (<bpt id="p2">*</bpt>deferred execution<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Deferred Execution</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A typical <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query resembles the one in the previous example, in which <ph id="ph2">`evensQuery`</ph> is defined.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It creates the query but does not execute it immediately.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead, the query definition is stored in the query variable <ph id="ph1">`evensQuery`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You execute the query later, typically by using a <ph id="ph1">`For Each`</ph> loop, which returns a sequence of values, or by applying a standard query operator, such as <ph id="ph2">`Count`</ph> or <ph id="ph3">`Max`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This process is referred to as <bpt id="p1">*</bpt>deferred execution<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For a sequence of values, you access the retrieved data by using the iteration variable in the <ph id="ph1">`For Each`</ph> loop (<ph id="ph2">`number`</ph> in the previous example).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because the query variable, <ph id="ph1">`evensQuery`</ph>, holds the query definition rather than the query results, you can execute a query as often as you want by using the query variable more than one time.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, you might have a database in your application that is being updated continually by a separate application.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>After you have created a query that retrieves data from that database, you can use a <ph id="ph1">`For Each`</ph> loop to execute the query repeatedly, retrieving the most recent data every time.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how deferred execution works.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`evensQuery2`</ph> is defined and executed with a <ph id="ph2">`For Each`</ph> loop, as in the previous examples, some elements in the data source <ph id="ph3">`numbers`</ph> are changed.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Then a second <ph id="ph1">`For Each`</ph> loop runs <ph id="ph2">`evensQuery2`</ph> again.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The results are different the second time, because the <ph id="ph1">`For Each`</ph> loop executes the query again, using the new values in <ph id="ph2">`numbers`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Output:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Immediate Execution</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In deferred execution of queries, the query definition is stored in a query variable for later execution.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In immediate execution, the query is executed at the time of its definition.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Execution is triggered when you apply a method that requires access to individual elements of the query result.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Immediate execution often is forced by using one of the standard query operators that return single values.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Examples are <ph id="ph1">`Count`</ph>, <ph id="ph2">`Max`</ph>, <ph id="ph3">`Average`</ph>, and <ph id="ph4">`First`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>These standard query operators execute the query as soon as they are applied in order to calculate and return a singleton result.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information about standard query operators that return single values, see <bpt id="p1">[</bpt>Aggregation Operations<ept id="p1">](aggregation-operations.md)</ept>, <bpt id="p2">[</bpt>Element Operations<ept id="p2">](element-operations.md)</ept>, and <bpt id="p3">[</bpt>Quantifier Operations<ept id="p3">](quantifier-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The following query returns a count of the even numbers in an array of integers.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The query definition is not saved, and <ph id="ph1">`numEvens`</ph> is a simple <ph id="ph2">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can achieve the same result by using the <ph id="ph1">`Aggregate`</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can also force execution of a query by calling the <ph id="ph1">`ToList`</ph> or <ph id="ph2">`ToArray`</ph> method on a query (immediate) or query variable (deferred), as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the previous examples, <ph id="ph1">`evensQuery3`</ph> is a query variable, but <ph id="ph2">`evensList`</ph> is a list and <ph id="ph3">`evensArray`</ph> is an array.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`ToList`</ph> or <ph id="ph2">`ToArray`</ph> to force immediate execution is especially useful in scenarios in which you want to execute the query immediately and cache the results in a single collection object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more information about these methods, see <bpt id="p1">[</bpt>Converting Data Types<ept id="p1">](converting-data-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can also cause a query to be executed by using an <ph id="ph1">`IEnumerable`</ph> method such as the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23IEnumerable%23GetEnumerator%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queries<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>