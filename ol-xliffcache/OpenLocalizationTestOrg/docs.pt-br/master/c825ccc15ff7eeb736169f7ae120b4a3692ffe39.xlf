<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="performance-tips.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c825ccc15ff7eeb736169f7ae120b4a3692ffe39</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\performance\performance-tips.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e886b3a68555c3496d941c39c8824a3af69f288c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58f429818e5c627256e4217a5c822eb4c3b8f7a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>.NET Performance Tips</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Performance Tips</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">*</bpt>performance<ept id="p1">*</ept> generally refers to the execution speed of a program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can sometimes increase execution speed by following certain basic rules in your source code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In some programs, it is important to examine code closely and use profilers to make sure that it is running as fast as possible.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In other programs, you do not have to perform such optimization because the code is running acceptably fast as it is written.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article lists some common areas where performance can suffer and tips for improving it as well as links to additional performance topics.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about planning and measuring for performance, see <bpt id="p1">[</bpt>Performance<ept id="p1">](../../../docs/framework/performance/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Boxing and Unboxing</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is best to avoid using value types in situations where they must be boxed a high number of times, for example in non-generic collections classes such as <ph id="ph1">&lt;xref:System.Collections.ArrayList?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can avoid boxing of value types by using generic collections such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Boxing and unboxing are computationally expensive processes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When a value type is boxed, an entirely new object must be created.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This can take up to 20 times longer than a simple reference assignment.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When unboxing, the casting process can take four times as long as an assignment.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Boxing and Unboxing<ept id="p1">](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Strings</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you concatenate a large number of string variables, for example in a tight loop, use <ph id="ph1">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph> instead of the C# <bpt id="p1">[</bpt>+ operator<ept id="p1">](~/docs/csharp/language-reference/operators/addition-operator.md)</ept> or the Visual Basic <bpt id="p2">[</bpt>Concatenation Operators<ept id="p2">](~/docs/visual-basic/language-reference/operators/concatenation-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Concatenate Multiple Strings<ept id="p1">](../../csharp/how-to/concatenate-multiple-strings.md)</ept> and <bpt id="p2">[</bpt>Concatenation Operators in Visual Basic<ept id="p2">](~/docs/visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Destructors</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Empty destructors should not be used.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When a class contains a destructor, an entry is created in the Finalize queue.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the destructor is called, the garbage collector is invoked to process the queue.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the destructor is empty, this simply results in a loss of performance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Destructors<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/destructors.md)</ept> and <bpt id="p2">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id="p2">](~/docs/visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Other Resources</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Faster Managed Code: Know What Things Cost<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=99294)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing High-Performance Managed Applications: A Primer<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=99295)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Garbage Collector Basics and Performance Hints<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=99296)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performance Tips and Tricks in .NET Applications<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=99297)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rico Mariani's Performance Tidbits<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=115679)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Vance Morrison's Blog<ept id="p1">](https://blogs.msdn.microsoft.com/vancem/)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performance<ept id="p1">](../../../docs/framework/performance/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Programming Guide<ept id="p1">](../../visual-basic/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>