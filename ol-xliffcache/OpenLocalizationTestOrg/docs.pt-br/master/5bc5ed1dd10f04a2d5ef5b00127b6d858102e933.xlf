<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bc5ed1dd10f04a2d5ef5b00127b6d858102e933</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\viewing-type-information.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b64b299627c34759ab2865ebf49a3d16ef5fca4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a90696b796c04f19994e7da60013136334f05d4d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Viewing Type Information | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Viewing Type Information</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> class is central to reflection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The common language runtime creates the <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> for a loaded type when reflection requests it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> object's methods, fields, properties, and nested classes to find out everything about that type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName&gt;</ph> to obtain <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> objects from assemblies that have not been loaded, passing in the name of the type or types you want.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> to get the <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> objects from an assembly that is already loaded.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName&gt;</ph> to obtain module <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you want to examine and manipulate generic types and methods, please see the additional information provided in <bpt id="p1">[</bpt>Reflection and Generic Types<ept id="p1">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept> and <bpt id="p2">[</bpt>How to: Examine and Instantiate Generic Types with Reflection<ept id="p2">](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example shows the syntax necessary to get the <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> object and module for an assembly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Types.ViewInfo#6<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Types.ViewInfo#6<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#6)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Types.ViewInfo#6<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#6)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example demonstrates getting <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> objects from a loaded assembly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Types.ViewInfo#7<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Types.ViewInfo#7<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#7)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Types.ViewInfo#7<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#7)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Once you obtain a <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>, there are many ways you can discover information about the members of that type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, you can find out about all the type's members by calling the <ph id="ph1">&lt;xref:System.Type.GetMembers%2A?displayProperty=fullName&gt;</ph> method, which obtains an array of <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects describing each of the members of the current type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also use methods on the <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> class to retrieve information about one or more constructors, methods, events, fields, or properties that you specify by name.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Type.GetConstructor%2A?displayProperty=fullName&gt;</ph> encapsulates a specific constructor of the current class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you have a <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>, you can use the <ph id="ph1">&lt;xref:System.Type.Module%2A?displayProperty=fullName&gt;</ph> property to obtain an object that encapsulates the module containing that type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName&gt;</ph> property to locate an object that encapsulates the assembly containing the module.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can obtain the assembly that encapsulates the type directly by using the <ph id="ph1">&lt;xref:System.Type.Assembly%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>System.Type and ConstructorInfo</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example shows how to list the constructors for a class, in this case, the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Types.ViewInfo#1<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source1.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Types.ViewInfo#1<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source1.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Types.ViewInfo#1<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source1.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>MemberInfo, MethodInfo, FieldInfo, and PropertyInfo</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Obtain information about the type's methods, properties, events, and fields using <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, or <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example uses <bpt id="p1">**</bpt>MemberInfo<ept id="p1">**</ept> to list the number of members in the <bpt id="p2">**</bpt>System.IO.File<ept id="p2">**</ept> class and uses the <ph id="ph1">&lt;xref:System.Type.IsPublic%2A&gt;</ph> property to determine the visibility of the class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Types.ViewInfo#2<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source2.cpp#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Types.ViewInfo#2<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source2.cs#2)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Types.ViewInfo#2<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source2.vb#2)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example investigates the type of the specified member.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It performs reflection on a member of the <bpt id="p1">**</bpt>MemberInfo<ept id="p1">**</ept> class, and lists its type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Types.ViewInfo#3<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source3.cpp#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Types.ViewInfo#3<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source3.cs#3)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Types.ViewInfo#3<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source3.vb#3)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example uses all the Reflection <bpt id="p1">**</bpt><ph id="ph1">\*</ph>Info<ept id="p1">**</ept> classes along with <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> to list all the members (constructors, fields, properties, events, and methods) of the specified class, dividing the members into static and instance categories.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Types.ViewInfo#4<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source4.cpp#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Types.ViewInfo#4<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source4.cs#4)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Types.ViewInfo#4<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source4.vb#4)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.BindingFlags&gt;</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type.GetMembers%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Reflection and Generic Types<ept id="p1">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>