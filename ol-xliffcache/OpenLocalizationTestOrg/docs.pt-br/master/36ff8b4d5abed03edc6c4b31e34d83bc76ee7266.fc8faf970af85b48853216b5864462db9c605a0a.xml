{"content":"---\ntitle: \"Sort Elements in a Sequence | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: d59b93a9-50c8-4770-a114-d902f6a0ea76\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Sort Elements in a Sequence\nUse the <xref:System.Linq.Enumerable.OrderBy%2A> operator to sort a sequence according to one or more keys.  \n  \n> [!NOTE]\n>  [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] is designed to support ordering by simple primitive types, such as `string`, `int`, and so on. It does not support ordering for complex multi-valued classes, such as anonymous types. It also does not support `byte` datatypes.  \n  \n## Example  \n The following example sorts `Employees` by date of hire.  \n  \n [!code-csharp[DLinqQueryExamples#20](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#20)]\n [!code-vb[DLinqQueryExamples#20](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#20)]  \n  \n## Example  \n The following example uses `where` to sort `Orders` shipped to `London` by freight.  \n  \n [!code-csharp[DLinqQueryExamples#21](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#21)]\n [!code-vb[DLinqQueryExamples#21](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#21)]  \n  \n## Example  \n The following example sorts `Products` by unit price from highest to lowest.  \n  \n [!code-csharp[DLinqQueryExamples#22](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#22)]\n [!code-vb[DLinqQueryExamples#22](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#22)]  \n  \n## Example  \n The following example uses a compound `OrderBy` to sort `Customers` by city and then by contact name.  \n  \n [!code-csharp[DLinqQueryExamples#24](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#24)]\n [!code-vb[DLinqQueryExamples#24](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#24)]  \n  \n## Example  \n The following example sorts Orders from `EmployeeID 1` by ship-to country, and then by highest to lowest freight.  \n  \n [!code-csharp[DLinqQueryExamples#25](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#25)]\n [!code-vb[DLinqQueryExamples#25](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#25)]  \n  \n## Example  \n The following example combines <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.Max%2A>, and <xref:System.Linq.Enumerable.GroupBy%2A> operators to find the `Products` that have the highest unit price in each category, and then sorts the group by category id.  \n  \n [!code-csharp[DLinqQueryExamples#26](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#26)]\n [!code-vb[DLinqQueryExamples#26](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#26)]  \n  \n If you run the previous query against the Northwind sample database, the results will resemble the following:  \n  \n `1`  \n  \n `Côte de Blaye`  \n  \n `2`  \n  \n `Vegie-spread`  \n  \n `3`  \n  \n `Sir Rodney's Marmalade`  \n  \n `4`  \n  \n `Raclette Courdavault`  \n  \n `5`  \n  \n `Gnocchi di nonna Alice`  \n  \n `6`  \n  \n `Thüringer Rostbratwurst`  \n  \n `7`  \n  \n `Manjimup Dried Apples`  \n  \n `8`  \n  \n `Carnarvon Tigers`  \n  \n## See Also  \n [Query Examples](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)   \n [Downloading Sample Databases](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)","nodes":[{"pos":[4,358],"embed":true,"restype":"x-metadata","content":"title: \"Sort Elements in a Sequence | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: d59b93a9-50c8-4770-a114-d902f6a0ea76\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Sort Elements in a Sequence | Microsoft Docs","nodes":[{"pos":[0,44],"content":"Sort Elements in a Sequence | Microsoft Docs","nodes":[{"content":"Sort Elements in a Sequence | Microsoft Docs","pos":[0,44]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[365,392],"content":"Sort Elements in a Sequence","linkify":"Sort Elements in a Sequence","nodes":[{"content":"Sort Elements in a Sequence","pos":[0,27]}]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> operator to sort a sequence according to one or more keys.","pos":[393,500],"source":"Use the <xref:System.Linq.Enumerable.OrderBy%2A> operator to sort a sequence according to one or more keys."},{"pos":[508,812],"content":"[!NOTE]\n [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] is designed to support ordering by simple primitive types, such as `string`, `int`, and so on. It does not support ordering for complex multi-valued classes, such as anonymous types. It also does not support `byte` datatypes.","leadings":["","> "],"nodes":[{"content":" is designed to support ordering by simple primitive types, such as `string`, `int`, and so on. It does not support ordering for complex multi-valued classes, such as anonymous types. It also does not support `byte` datatypes.","pos":[76,302],"nodes":[{"content":"is designed to support ordering by simple primitive types, such as <ph id=\"ph1\">`string`</ph>, <ph id=\"ph2\">`int`</ph>, and so on.","pos":[1,95],"source":" is designed to support ordering by simple primitive types, such as `string`, `int`, and so on."},{"content":"It does not support ordering for complex multi-valued classes, such as anonymous types.","pos":[96,183]},{"content":"It also does not support <ph id=\"ph1\">`byte`</ph> datatypes.","pos":[184,226],"source":" It also does not support `byte` datatypes."}]}]},{"pos":[821,828],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[832,888],"content":"The following example sorts <ph id=\"ph1\">`Employees`</ph> by date of hire.","source":"The following example sorts `Employees` by date of hire."},{"pos":[1173,1180],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1184,1267],"content":"The following example uses <ph id=\"ph1\">`where`</ph> to sort <ph id=\"ph2\">`Orders`</ph> shipped to <ph id=\"ph3\">`London`</ph> by freight.","source":"The following example uses `where` to sort `Orders` shipped to `London` by freight."},{"pos":[1552,1559],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1563,1639],"content":"The following example sorts <ph id=\"ph1\">`Products`</ph> by unit price from highest to lowest.","source":"The following example sorts `Products` by unit price from highest to lowest."},{"pos":[1924,1931],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1935,2036],"content":"The following example uses a compound <ph id=\"ph1\">`OrderBy`</ph> to sort <ph id=\"ph2\">`Customers`</ph> by city and then by contact name.","source":"The following example uses a compound `OrderBy` to sort `Customers` by city and then by contact name."},{"pos":[2321,2328],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2332,2445],"content":"The following example sorts Orders from <ph id=\"ph1\">`EmployeeID 1`</ph> by ship-to country, and then by highest to lowest freight.","source":"The following example sorts Orders from `EmployeeID 1` by ship-to country, and then by highest to lowest freight."},{"pos":[2730,2737],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2741,3021],"content":"The following example combines <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph> operators to find the <ph id=\"ph4\">`Products`</ph> that have the highest unit price in each category, and then sorts the group by category id.","source":"The following example combines <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.Max%2A>, and <xref:System.Linq.Enumerable.GroupBy%2A> operators to find the `Products` that have the highest unit price in each category, and then sorts the group by category id."},{"content":"If you run the previous query against the Northwind sample database, the results will resemble the following:","pos":[3304,3413]},{"pos":[3723,3731],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Query Examples<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)</ept><ph id=\"ph1\"> </ph>","pos":[3735,3825],"source":"[Query Examples](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md) "},{"content":"<bpt id=\"p1\">[</bpt>Downloading Sample Databases<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)</ept>","pos":[3829,3946],"source":"[Downloading Sample Databases](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)"}]}