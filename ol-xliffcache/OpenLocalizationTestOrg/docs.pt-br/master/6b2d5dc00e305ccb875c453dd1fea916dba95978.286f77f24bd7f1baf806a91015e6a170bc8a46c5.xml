{"content":"---\ntitle: \"Data Types of Operator Results (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"data types [Visual Basic], operator result data types\"\n  - \"result data types\"\n  - \"operator result data types\"\n  - \"operators [Visual Basic], data types\"\n  - \"data types [Visual Basic], ranges\"\n  - \"operators [Visual Basic], result data types\"\nms.assetid: 9d524533-e1a1-4aa8-b1b8-622068173d06\ncaps.latest.revision: 27\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Data Types of Operator Results (Visual Basic)\n[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] determines the result data type of an operation based on the data types of the operands. In some cases this might be a data type with a greater range than that of either operand.  \n  \n## Data Type Ranges  \n The ranges of the relevant data types, in order from smallest to largest, are as follows:  \n  \n-   [Boolean](../../../visual-basic/language-reference/data-types/boolean-data-type.md) — two possible values  \n  \n-   [SByte](../../../visual-basic/language-reference/data-types/sbyte-data-type.md), [Byte](../../../visual-basic/language-reference/data-types/byte-data-type.md) — 256 possible integral values  \n  \n-   [Short](../../../visual-basic/language-reference/data-types/short-data-type.md), [UShort](../../../visual-basic/language-reference/data-types/ushort-data-type.md) — 65,536 (6.5...E+4) possible integral values  \n  \n-   [Integer](../../../visual-basic/language-reference/data-types/integer-data-type.md), [UInteger](../../../visual-basic/language-reference/data-types/uinteger-data-type.md) — 4,294,967,296 (4.2...E+9) possible integral values  \n  \n-   [Long](../../../visual-basic/language-reference/data-types/long-data-type.md), [ULong](../../../visual-basic/language-reference/data-types/ulong-data-type.md) — 18,446,744,073,709,551,615 (1.8...E+19) possible integral values  \n  \n-   [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md) — 1.5...E+29 possible integral values, maximum range 7.9...E+28 (absolute value)  \n  \n-   [Single](../../../visual-basic/language-reference/data-types/single-data-type.md) — maximum range 3.4...E+38 (absolute value)  \n  \n-   [Double](../../../visual-basic/language-reference/data-types/double-data-type.md) — maximum range 1.7...E+308 (absolute value)  \n  \n For more information on [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] data types, see [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md).  \n  \n If an operand evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), the [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] arithmetic operators treat it as zero.  \n  \n## Decimal Arithmetic  \n Note that the [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md) data type is neither floating-point nor integer.  \n  \n If either operand of a `+`, `–`, `*`, `/`, or `Mod` operation is `Decimal` and the other is not `Single` or `Double`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] widens the other operand to `Decimal`. It performs the operation in `Decimal`, and the result data type is `Decimal`.  \n  \n## Floating-Point Arithmetic  \n [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs most floating-point arithmetic in [Double](../../../visual-basic/language-reference/data-types/double-data-type.md), which is the most efficient data type for such operations. However, if one operand is [Single](../../../visual-basic/language-reference/data-types/single-data-type.md) and the other is not `Double`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs the operation in `Single`. It widens each operand as necessary to the appropriate data type before the operation, and the result has that data type.  \n  \n### / and ^ Operators  \n The `/` operator is defined only for the [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md), [Single](../../../visual-basic/language-reference/data-types/single-data-type.md), and [Double](../../../visual-basic/language-reference/data-types/double-data-type.md) data types. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] widens each operand as necessary to the appropriate data type before the operation, and the result has that data type.  \n  \n The following table shows the result data types for the `/` operator. Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.  \n  \n||||||  \n|---|---|---|---|---|  \n||`Decimal`|`Single`|`Double`|Any integer type|  \n|`Decimal`|Decimal|Single|Double|Decimal|  \n|`Single`|Single|Single|Double|Single|  \n|`Double`|Double|Double|Double|Double|  \n|Any integer type|Decimal|Single|Double|Double|  \n  \n The `^` operator is defined only for the `Double` data type. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] widens each operand as necessary to `Double` before the operation, and the result data type is always `Double`.  \n  \n## Integer Arithmetic  \n The result data type of an integer operation depends on the data types of the operands. In general, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] uses the following policies for determining the result data type:  \n  \n-   If both operands of a binary operator have the same data type, the result has that data type. An exception is `Boolean`, which is forced to `Short`.  \n  \n-   If an unsigned operand participates with a signed operand, the result has a signed type with at least as large a range as either operand.  \n  \n-   Otherwise, the result usually has the larger of the two operand data types.  \n  \n Note that the result data type might not be the same as either operand data type.  \n  \n> [!NOTE]\n>  The result data type is not always large enough to hold all possible values resulting from the operation. An <xref:System.OverflowException> exception can occur if the value is too large for the result data type.  \n  \n### Unary + and – Operators  \n The following table shows the result data types for the two unary operators, `+` and `–`.  \n  \n|||||||||||  \n|---|---|---|---|---|---|---|---|---|---|  \n||`Boolean`|`SByte`|`Byte`|`Short`|`UShort`|`Integer`|`UInteger`|`Long`|`ULong`|  \n|Unary `+`|Short|SByte|Byte|Short|UShort|Integer|UInteger|Long|ULong|  \n|Unary `–`|Short|SByte|Short|Short|Integer|Integer|Long|Long|Decimal|  \n  \n### <\\< and >> Operators  \n The following table shows the result data types for the two bit-shift operators, `<<` and `>>`. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] treats each bit-shift operator as a unary operator on its left operand (the bit pattern to be shifted).  \n  \n|||||||||||  \n|---|---|---|---|---|---|---|---|---|---|  \n||`Boolean`|`SByte`|`Byte`|`Short`|`UShort`|`Integer`|`UInteger`|`Long`|`ULong`|  \n|`<<`, `>>`|Short|SByte|Byte|Short|UShort|Integer|UInteger|Long|ULong|  \n  \n If the left operand is `Decimal`, `Single`, `Double`, or `String`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert it to `Long` before the operation, and the result data type is `Long`. The right operand (the number of bit positions to shift) must be `Integer` or a type that widens to `Integer`.  \n  \n### Binary +, –, *, and Mod Operators  \n The following table shows the result data types for the binary `+` and `–` operators and the `*` and `Mod` operators. Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.  \n  \n|||||||||||  \n|---|---|---|---|---|---|---|---|---|---|  \n||`Boolean`|`SByte`|`Byte`|`Short`|`UShort`|`Integer`|`UInteger`|`Long`|`ULong`|  \n|`Boolean`|Short|SByte|Short|Short|Integer|Integer|Long|Long|Decimal|  \n|`SByte`|SByte|SByte|Short|Short|Integer|Integer|Long|Long|Decimal|  \n|`Byte`|Short|Short|Byte|Short|UShort|Integer|UInteger|Long|ULong|  \n|`Short`|Short|Short|Short|Short|Integer|Integer|Long|Long|Decimal|  \n|`UShort`|Integer|Integer|UShort|Integer|UShort|Integer|UInteger|Long|ULong|  \n|`Integer`|Integer|Integer|Integer|Integer|Integer|Integer|Long|Long|Decimal|  \n|`UInteger`|Long|Long|UInteger|Long|UInteger|Long|UInteger|Long|ULong|  \n|`Long`|Long|Long|Long|Long|Long|Long|Long|Long|Decimal|  \n|`ULong`|Decimal|Decimal|ULong|Decimal|ULong|Decimal|ULong|Decimal|ULong|  \n  \n### \\ Operator  \n The following table shows the result data types for the `\\` operator. Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.  \n  \n|||||||||||  \n|---|---|---|---|---|---|---|---|---|---|  \n||`Boolean`|`SByte`|`Byte`|`Short`|`UShort`|`Integer`|`UInteger`|`Long`|`ULong`|  \n|`Boolean`|Short|SByte|Short|Short|Integer|Integer|Long|Long|Long|  \n|`SByte`|SByte|SByte|Short|Short|Integer|Integer|Long|Long|Long|  \n|`Byte`|Short|Short|Byte|Short|UShort|Integer|UInteger|Long|ULong|  \n|`Short`|Short|Short|Short|Short|Integer|Integer|Long|Long|Long|  \n|`UShort`|Integer|Integer|UShort|Integer|UShort|Integer|UInteger|Long|ULong|  \n|`Integer`|Integer|Integer|Integer|Integer|Integer|Integer|Long|Long|Long|  \n|`UInteger`|Long|Long|UInteger|Long|UInteger|Long|UInteger|Long|ULong|  \n|`Long`|Long|Long|Long|Long|Long|Long|Long|Long|Long|  \n|`ULong`|Long|Long|ULong|Long|ULong|Long|ULong|Long|ULong|  \n  \n If either operand of the `\\` operator is [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md), [Single](../../../visual-basic/language-reference/data-types/single-data-type.md), or [Double](../../../visual-basic/language-reference/data-types/double-data-type.md), [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert it to [Long](../../../visual-basic/language-reference/data-types/long-data-type.md) before the operation, and the result data type is `Long`.  \n  \n## Relational and Bitwise Comparisons  \n The result data type of a relational operation (`=`, `<>`, `<`, `>`, `<=`, `>=`) is always `Boolean`[Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md). The same is true for logical operations (`And`, `AndAlso`, `Not`, `Or`, `OrElse`, `Xor`) on `Boolean` operands.  \n  \n The result data type of a bitwise logical operation depends on the data types of the operands. Note that `AndAlso` and `OrElse` are defined only for `Boolean`, and [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] converts each operand as necessary to `Boolean` before performing the operation.  \n  \n### =, <>, \\<, >, \\<=, and >= Operators  \n If both operands are `Boolean`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] considers `True` to be less than `False`. If a numeric type is compared with a `String`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert the `String` to `Double` before the operation. A `Char` or `Date` operand can be compared only with another operand of the same data type. The result data type is always `Boolean`.  \n  \n### Bitwise Not Operator  \n The following table shows the result data types for the bitwise `Not` operator.  \n  \n|||||||||||  \n|---|---|---|---|---|---|---|---|---|---|  \n||`Boolean`|`SByte`|`Byte`|`Short`|`UShort`|`Integer`|`UInteger`|`Long`|`ULong`|  \n|`Not`|Boolean|SByte|Byte|Short|UShort|Integer|UInteger|Long|ULong|  \n  \n If the operand is `Decimal`, `Single`, `Double`, or `String`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert it to `Long` before the operation, and the result data type is `Long`.  \n  \n### Bitwise And, Or, and Xor Operators  \n The following table shows the result data types for the bitwise `And`, `Or`, and `Xor` operators. Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.  \n  \n|||||||||||  \n|---|---|---|---|---|---|---|---|---|---|  \n||`Boolean`|`SByte`|`Byte`|`Short`|`UShort`|`Integer`|`UInteger`|`Long`|`ULong`|  \n|`Boolean`|Boolean|SByte|Short|Short|Integer|Integer|Long|Long|Long|  \n|`SByte`|SByte|SByte|Short|Short|Integer|Integer|Long|Long|Long|  \n|`Byte`|Short|Short|Byte|Short|UShort|Integer|UInteger|Long|ULong|  \n|`Short`|Short|Short|Short|Short|Integer|Integer|Long|Long|Long|  \n|`UShort`|Integer|Integer|UShort|Integer|UShort|Integer|UInteger|Long|ULong|  \n|`Integer`|Integer|Integer|Integer|Integer|Integer|Integer|Long|Long|Long|  \n|`UInteger`|Long|Long|UInteger|Long|UInteger|Long|UInteger|Long|ULong|  \n|`Long`|Long|Long|Long|Long|Long|Long|Long|Long|Long|  \n|`ULong`|Long|Long|ULong|Long|ULong|Long|ULong|Long|ULong|  \n  \n If an operand is `Decimal`, `Single`, `Double`, or `String`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert it to `Long` before the operation, and the result data type is the same as if that operand had already been `Long`.  \n  \n## Miscellaneous Operators  \n The `&` operator is defined only for concatenation of `String` operands. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] converts each operand as necessary to `String` before the operation, and the result data type is always `String`. For the purposes of the `&` operator, all conversions to `String` are considered to be widening, even if `Option Strict` is `On`.  \n  \n The `Is` and `IsNot` operators require both operands to be of a reference type. The `TypeOf`...`Is` expression requires the first operand to be of a reference type and the second operand to be the name of a data type. In all these cases the result data type is `Boolean`.  \n  \n The `Like` operator is defined only for pattern matching of `String` operands. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert each operand as necessary to `String` before the operation. The result data type is always `Boolean`.  \n  \n## See Also  \n [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)   \n [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)   \n [Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)   \n [Operators](../../../visual-basic/language-reference/operators/index.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md)   \n [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)","nodes":[{"pos":[4,799],"nodes":[{"content":"Data Types of Operator Results (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,62],"content":"Data Types of Operator Results (Visual Basic) | Microsoft Docs","nodes":[{"content":"Data Types of Operator Results (Visual Basic) | Microsoft Docs","pos":[0,62]}]}],"pos":[6,71],"yaml":true}],"content":"title: \"Data Types of Operator Results (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"data types [Visual Basic], operator result data types\"\n  - \"result data types\"\n  - \"operator result data types\"\n  - \"operators [Visual Basic], data types\"\n  - \"data types [Visual Basic], ranges\"\n  - \"operators [Visual Basic], result data types\"\nms.assetid: 9d524533-e1a1-4aa8-b1b8-622068173d06\ncaps.latest.revision: 27\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[806,851],"content":"Data Types of Operator Results (Visual Basic)","linkify":"Data Types of Operator Results (Visual Basic)","nodes":[{"content":"Data Types of Operator Results (Visual Basic)","pos":[0,45]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> determines the result data type of an operation based on the data types of the operands.","pos":[852,1030],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] determines the result data type of an operation based on the data types of the operands."},{"content":"In some cases this might be a data type with a greater range than that of either operand.","pos":[1031,1120]},{"pos":[1129,1145],"content":"Data Type Ranges","linkify":"Data Type Ranges","nodes":[{"content":"Data Type Ranges","pos":[0,16]}]},{"content":"The ranges of the relevant data types, in order from smallest to largest, are as follows:","pos":[1149,1238]},{"pos":[1248,1353],"content":"<bpt id=\"p1\">[</bpt>Boolean<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> — two possible values","source":"[Boolean](../../../visual-basic/language-reference/data-types/boolean-data-type.md) — two possible values"},{"pos":[1363,1552],"content":"<bpt id=\"p1\">[</bpt>SByte<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>Byte<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept> — 256 possible integral values","source":"[SByte](../../../visual-basic/language-reference/data-types/sbyte-data-type.md), [Byte](../../../visual-basic/language-reference/data-types/byte-data-type.md) — 256 possible integral values"},{"pos":[1562,1770],"content":"<bpt id=\"p1\">[</bpt>Short<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>UShort<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept> — 65,536 (6.5...E+4) possible integral values","source":"[Short](../../../visual-basic/language-reference/data-types/short-data-type.md), [UShort](../../../visual-basic/language-reference/data-types/ushort-data-type.md) — 65,536 (6.5...E+4) possible integral values"},{"pos":[1780,2003],"content":"<bpt id=\"p1\">[</bpt>Integer<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>UInteger<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept> — 4,294,967,296 (4.2...E+9) possible integral values","source":"[Integer](../../../visual-basic/language-reference/data-types/integer-data-type.md), [UInteger](../../../visual-basic/language-reference/data-types/uinteger-data-type.md) — 4,294,967,296 (4.2...E+9) possible integral values"},{"pos":[2013,2238],"content":"<bpt id=\"p1\">[</bpt>Long<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>ULong<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept> — 18,446,744,073,709,551,615 (1.8...E+19) possible integral values","source":"[Long](../../../visual-basic/language-reference/data-types/long-data-type.md), [ULong](../../../visual-basic/language-reference/data-types/ulong-data-type.md) — 18,446,744,073,709,551,615 (1.8...E+19) possible integral values"},{"pos":[2248,2412],"content":"<bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> — 1.5...E+29 possible integral values, maximum range 7.9...E+28 (absolute value)","source":"[Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md) — 1.5...E+29 possible integral values, maximum range 7.9...E+28 (absolute value)"},{"pos":[2422,2547],"content":"<bpt id=\"p1\">[</bpt>Single<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> — maximum range 3.4...E+38 (absolute value)","source":"[Single](../../../visual-basic/language-reference/data-types/single-data-type.md) — maximum range 3.4...E+38 (absolute value)"},{"pos":[2557,2683],"content":"<bpt id=\"p1\">[</bpt>Double<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> — maximum range 1.7...E+308 (absolute value)","source":"[Double](../../../visual-basic/language-reference/data-types/double-data-type.md) — maximum range 1.7...E+308 (absolute value)"},{"pos":[2690,2907],"content":"For more information on <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> data types, see <bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>.","source":"For more information on [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] data types, see [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)."},{"pos":[2914,3137],"content":"If an operand evaluates to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept>, the <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> arithmetic operators treat it as zero.","source":"If an operand evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), the [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] arithmetic operators treat it as zero."},{"pos":[3146,3164],"content":"Decimal Arithmetic","linkify":"Decimal Arithmetic","nodes":[{"content":"Decimal Arithmetic","pos":[0,18]}]},{"pos":[3168,3314],"content":"Note that the <bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> data type is neither floating-point nor integer.","source":"Note that the [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md) data type is neither floating-point nor integer."},{"content":"If either operand of a <ph id=\"ph1\">`+`</ph>, <ph id=\"ph2\">`–`</ph>, <ph id=\"ph3\">`*`</ph>, <ph id=\"ph4\">`/`</ph>, or <ph id=\"ph5\">`Mod`</ph> operation is <ph id=\"ph6\">`Decimal`</ph> and the other is not <ph id=\"ph7\">`Single`</ph> or <ph id=\"ph8\">`Double`</ph>, <ph id=\"ph9\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> widens the other operand to <ph id=\"ph10\">`Decimal`</ph>.","pos":[3321,3567],"source":"If either operand of a `+`, `–`, `*`, `/`, or `Mod` operation is `Decimal` and the other is not `Single` or `Double`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] widens the other operand to `Decimal`."},{"content":"It performs the operation in <ph id=\"ph1\">`Decimal`</ph>, and the result data type is <ph id=\"ph2\">`Decimal`</ph>.","pos":[3568,3646],"source":" It performs the operation in `Decimal`, and the result data type is `Decimal`."},{"pos":[3655,3680],"content":"Floating-Point Arithmetic","linkify":"Floating-Point Arithmetic","nodes":[{"content":"Floating-Point Arithmetic","pos":[0,25]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> performs most floating-point arithmetic in <bpt id=\"p1\">[</bpt>Double<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>, which is the most efficient data type for such operations.","pos":[3684,3958],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs most floating-point arithmetic in [Double](../../../visual-basic/language-reference/data-types/double-data-type.md), which is the most efficient data type for such operations."},{"content":"However, if one operand is <bpt id=\"p1\">[</bpt>Single<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> and the other is not <ph id=\"ph1\">`Double`</ph>, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> performs the operation in <ph id=\"ph3\">`Single`</ph>.","pos":[3959,4224],"source":" However, if one operand is [Single](../../../visual-basic/language-reference/data-types/single-data-type.md) and the other is not `Double`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs the operation in `Single`."},{"content":"It widens each operand as necessary to the appropriate data type before the operation, and the result has that data type.","pos":[4225,4346]},{"pos":[4356,4373],"content":"/ and ^ Operators","linkify":"/ and ^ Operators","nodes":[{"content":"/ and ^ Operators","pos":[0,17]}]},{"content":"The <ph id=\"ph1\">`/`</ph> operator is defined only for the <bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>Single<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>, and <bpt id=\"p3\">[</bpt>Double<ept id=\"p3\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> data types.","pos":[4377,4683],"source":"The `/` operator is defined only for the [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md), [Single](../../../visual-basic/language-reference/data-types/single-data-type.md), and [Double](../../../visual-basic/language-reference/data-types/double-data-type.md) data types."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> widens each operand as necessary to the appropriate data type before the operation, and the result has that data type.","pos":[4684,4892],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] widens each operand as necessary to the appropriate data type before the operation, and the result has that data type."},{"content":"The following table shows the result data types for the <ph id=\"ph1\">`/`</ph> operator.","pos":[4899,4968],"source":"The following table shows the result data types for the `/` operator."},{"content":"Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.","pos":[4969,5124]},{"content":"Any integer type","pos":[5193,5209]},{"content":"Decimal","pos":[5224,5231]},{"content":"Single","pos":[5232,5238]},{"content":"Double","pos":[5239,5245]},{"content":"Decimal","pos":[5246,5253]},{"content":"Single","pos":[5267,5273]},{"content":"Single","pos":[5274,5280]},{"content":"Double","pos":[5281,5287]},{"content":"Single","pos":[5288,5294]},{"content":"Double","pos":[5308,5314]},{"content":"Double","pos":[5315,5321]},{"content":"Double","pos":[5322,5328]},{"content":"Double","pos":[5329,5335]},{"content":"Any integer type","pos":[5340,5356]},{"content":"Decimal","pos":[5357,5364]},{"content":"Single","pos":[5365,5371]},{"content":"Double","pos":[5372,5378]},{"content":"Double","pos":[5379,5385]},{"content":"The <ph id=\"ph1\">`^`</ph> operator is defined only for the <ph id=\"ph2\">`Double`</ph> data type.","pos":[5393,5453],"source":"The `^` operator is defined only for the `Double` data type."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> widens each operand as necessary to <ph id=\"ph2\">`Double`</ph> before the operation, and the result data type is always <ph id=\"ph3\">`Double`</ph>.","pos":[5454,5655],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] widens each operand as necessary to `Double` before the operation, and the result data type is always `Double`."},{"pos":[5664,5682],"content":"Integer Arithmetic","linkify":"Integer Arithmetic","nodes":[{"content":"Integer Arithmetic","pos":[0,18]}]},{"content":"The result data type of an integer operation depends on the data types of the operands.","pos":[5686,5773]},{"content":"In general, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> uses the following policies for determining the result data type:","pos":[5774,5941],"source":" In general, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] uses the following policies for determining the result data type:"},{"content":"If both operands of a binary operator have the same data type, the result has that data type.","pos":[5951,6044]},{"content":"An exception is <ph id=\"ph1\">`Boolean`</ph>, which is forced to <ph id=\"ph2\">`Short`</ph>.","pos":[6045,6099],"source":" An exception is `Boolean`, which is forced to `Short`."},{"content":"If an unsigned operand participates with a signed operand, the result has a signed type with at least as large a range as either operand.","pos":[6109,6246]},{"content":"Otherwise, the result usually has the larger of the two operand data types.","pos":[6256,6331]},{"content":"Note that the result data type might not be the same as either operand data type.","pos":[6338,6419]},{"pos":[6427,6650],"content":"[!NOTE]\n The result data type is not always large enough to hold all possible values resulting from the operation. An <xref:System.OverflowException> exception can occur if the value is too large for the result data type.","leadings":["","> "],"nodes":[{"content":"The result data type is not always large enough to hold all possible values resulting from the operation. An <xref:System.OverflowException> exception can occur if the value is too large for the result data type.","pos":[9,221],"nodes":[{"content":"The result data type is not always large enough to hold all possible values resulting from the operation.","pos":[0,105]},{"content":"An <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph> exception can occur if the value is too large for the result data type.","pos":[106,212],"source":" An <xref:System.OverflowException> exception can occur if the value is too large for the result data type."}]}]},{"pos":[6660,6683],"content":"Unary + and – Operators","linkify":"Unary + and – Operators","nodes":[{"content":"Unary + and – Operators","pos":[0,23]}]},{"pos":[6687,6776],"content":"The following table shows the result data types for the two unary operators, <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`–`</ph>.","source":"The following table shows the result data types for the two unary operators, `+` and `–`."},{"pos":[6924,6933],"content":"Unary <ph id=\"ph1\">`+`</ph>","source":"Unary `+`"},{"content":"Short","pos":[6934,6939]},{"content":"SByte","pos":[6940,6945]},{"content":"Byte","pos":[6946,6950]},{"content":"Short","pos":[6951,6956]},{"content":"UShort","pos":[6957,6963]},{"content":"Integer","pos":[6964,6971]},{"content":"UInteger","pos":[6972,6980]},{"content":"Long","pos":[6981,6985]},{"content":"ULong","pos":[6986,6991]},{"pos":[6996,7005],"content":"Unary <ph id=\"ph1\">`–`</ph>","source":"Unary `–`"},{"content":"Short","pos":[7006,7011]},{"content":"SByte","pos":[7012,7017]},{"content":"Short","pos":[7018,7023]},{"content":"Short","pos":[7024,7029]},{"content":"Integer","pos":[7030,7037]},{"content":"Integer","pos":[7038,7045]},{"content":"Long","pos":[7046,7050]},{"content":"Long","pos":[7051,7055]},{"content":"Decimal","pos":[7056,7063]},{"pos":[7074,7094],"content":"<\\< and >> Operators","linkify":"<\\< and >> Operators","nodes":[{"content":"<ph id=\"ph1\">&lt;</ph><ph id=\"ph2\">\\&lt;</ph> and &gt;&gt; Operators","pos":[0,20],"source":"<\\< and >> Operators"}]},{"content":"The following table shows the result data types for the two bit-shift operators, <ph id=\"ph1\">`&lt;&lt;`</ph> and <ph id=\"ph2\">`&gt;&gt;`</ph>.","pos":[7098,7193],"source":"The following table shows the result data types for the two bit-shift operators, `<<` and `>>`."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> treats each bit-shift operator as a unary operator on its left operand (the bit pattern to be shifted).","pos":[7194,7387],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] treats each bit-shift operator as a unary operator on its left operand (the bit pattern to be shifted)."},{"pos":[7535,7545],"content":"<ph id=\"ph1\">`&lt;&lt;`</ph>, <ph id=\"ph2\">`&gt;&gt;`</ph>","source":"`<<`, `>>`"},{"content":"Short","pos":[7546,7551]},{"content":"SByte","pos":[7552,7557]},{"content":"Byte","pos":[7558,7562]},{"content":"Short","pos":[7563,7568]},{"content":"UShort","pos":[7569,7575]},{"content":"Integer","pos":[7576,7583]},{"content":"UInteger","pos":[7584,7592]},{"content":"Long","pos":[7593,7597]},{"content":"ULong","pos":[7598,7603]},{"content":"If the left operand is <ph id=\"ph1\">`Decimal`</ph>, <ph id=\"ph2\">`Single`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert it to <ph id=\"ph6\">`Long`</ph> before the operation, and the result data type is <ph id=\"ph7\">`Long`</ph>.","pos":[7611,7858],"source":"If the left operand is `Decimal`, `Single`, `Double`, or `String`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert it to `Long` before the operation, and the result data type is `Long`."},{"content":"The right operand (the number of bit positions to shift) must be <ph id=\"ph1\">`Integer`</ph> or a type that widens to <ph id=\"ph2\">`Integer`</ph>.","pos":[7859,7969],"source":" The right operand (the number of bit positions to shift) must be `Integer` or a type that widens to `Integer`."},{"pos":[7979,8012],"content":"Binary +, –, *, and Mod Operators","linkify":"Binary +, –, *, and Mod Operators","nodes":[{"content":"Binary +, –, *, and Mod Operators","pos":[0,33]}]},{"content":"The following table shows the result data types for the binary <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`–`</ph> operators and the <ph id=\"ph3\">`*`</ph> and <ph id=\"ph4\">`Mod`</ph> operators.","pos":[8016,8133],"source":"The following table shows the result data types for the binary `+` and `–` operators and the `*` and `Mod` operators."},{"content":"Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.","pos":[8134,8289]},{"content":"Short","pos":[8447,8452]},{"content":"SByte","pos":[8453,8458]},{"content":"Short","pos":[8459,8464]},{"content":"Short","pos":[8465,8470]},{"content":"Integer","pos":[8471,8478]},{"content":"Integer","pos":[8479,8486]},{"content":"Long","pos":[8487,8491]},{"content":"Long","pos":[8492,8496]},{"content":"Decimal","pos":[8497,8504]},{"content":"SByte","pos":[8517,8522]},{"content":"SByte","pos":[8523,8528]},{"content":"Short","pos":[8529,8534]},{"content":"Short","pos":[8535,8540]},{"content":"Integer","pos":[8541,8548]},{"content":"Integer","pos":[8549,8556]},{"content":"Long","pos":[8557,8561]},{"content":"Long","pos":[8562,8566]},{"content":"Decimal","pos":[8567,8574]},{"content":"Short","pos":[8586,8591]},{"content":"Short","pos":[8592,8597]},{"content":"Byte","pos":[8598,8602]},{"content":"Short","pos":[8603,8608]},{"content":"UShort","pos":[8609,8615]},{"content":"Integer","pos":[8616,8623]},{"content":"UInteger","pos":[8624,8632]},{"content":"Long","pos":[8633,8637]},{"content":"ULong","pos":[8638,8643]},{"content":"Short","pos":[8656,8661]},{"content":"Short","pos":[8662,8667]},{"content":"Short","pos":[8668,8673]},{"content":"Short","pos":[8674,8679]},{"content":"Integer","pos":[8680,8687]},{"content":"Integer","pos":[8688,8695]},{"content":"Long","pos":[8696,8700]},{"content":"Long","pos":[8701,8705]},{"content":"Decimal","pos":[8706,8713]},{"content":"Integer","pos":[8727,8734]},{"content":"Integer","pos":[8735,8742]},{"content":"UShort","pos":[8743,8749]},{"content":"Integer","pos":[8750,8757]},{"content":"UShort","pos":[8758,8764]},{"content":"Integer","pos":[8765,8772]},{"content":"UInteger","pos":[8773,8781]},{"content":"Long","pos":[8782,8786]},{"content":"ULong","pos":[8787,8792]},{"content":"Integer","pos":[8807,8814]},{"content":"Integer","pos":[8815,8822]},{"content":"Integer","pos":[8823,8830]},{"content":"Integer","pos":[8831,8838]},{"content":"Integer","pos":[8839,8846]},{"content":"Integer","pos":[8847,8854]},{"content":"Long","pos":[8855,8859]},{"content":"Long","pos":[8860,8864]},{"content":"Decimal","pos":[8865,8872]},{"content":"Long","pos":[8888,8892]},{"content":"Long","pos":[8893,8897]},{"content":"UInteger","pos":[8898,8906]},{"content":"Long","pos":[8907,8911]},{"content":"UInteger","pos":[8912,8920]},{"content":"Long","pos":[8921,8925]},{"content":"UInteger","pos":[8926,8934]},{"content":"Long","pos":[8935,8939]},{"content":"ULong","pos":[8940,8945]},{"content":"Long","pos":[8957,8961]},{"content":"Long","pos":[8962,8966]},{"content":"Long","pos":[8967,8971]},{"content":"Long","pos":[8972,8976]},{"content":"Long","pos":[8977,8981]},{"content":"Long","pos":[8982,8986]},{"content":"Long","pos":[8987,8991]},{"content":"Long","pos":[8992,8996]},{"content":"Decimal","pos":[8997,9004]},{"content":"Decimal","pos":[9017,9024]},{"content":"Decimal","pos":[9025,9032]},{"content":"ULong","pos":[9033,9038]},{"content":"Decimal","pos":[9039,9046]},{"content":"ULong","pos":[9047,9052]},{"content":"Decimal","pos":[9053,9060]},{"content":"ULong","pos":[9061,9066]},{"content":"Decimal","pos":[9067,9074]},{"content":"ULong","pos":[9075,9080]},{"pos":[9091,9101],"content":"\\ Operator","linkify":"\\ Operator","nodes":[{"content":"\\ Operator","pos":[0,10]}]},{"content":"The following table shows the result data types for the <ph id=\"ph1\">`\\`</ph> operator.","pos":[9105,9174],"source":"The following table shows the result data types for the `\\` operator."},{"content":"Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.","pos":[9175,9330]},{"content":"Short","pos":[9488,9493]},{"content":"SByte","pos":[9494,9499]},{"content":"Short","pos":[9500,9505]},{"content":"Short","pos":[9506,9511]},{"content":"Integer","pos":[9512,9519]},{"content":"Integer","pos":[9520,9527]},{"content":"Long","pos":[9528,9532]},{"content":"Long","pos":[9533,9537]},{"content":"Long","pos":[9538,9542]},{"content":"SByte","pos":[9555,9560]},{"content":"SByte","pos":[9561,9566]},{"content":"Short","pos":[9567,9572]},{"content":"Short","pos":[9573,9578]},{"content":"Integer","pos":[9579,9586]},{"content":"Integer","pos":[9587,9594]},{"content":"Long","pos":[9595,9599]},{"content":"Long","pos":[9600,9604]},{"content":"Long","pos":[9605,9609]},{"content":"Short","pos":[9621,9626]},{"content":"Short","pos":[9627,9632]},{"content":"Byte","pos":[9633,9637]},{"content":"Short","pos":[9638,9643]},{"content":"UShort","pos":[9644,9650]},{"content":"Integer","pos":[9651,9658]},{"content":"UInteger","pos":[9659,9667]},{"content":"Long","pos":[9668,9672]},{"content":"ULong","pos":[9673,9678]},{"content":"Short","pos":[9691,9696]},{"content":"Short","pos":[9697,9702]},{"content":"Short","pos":[9703,9708]},{"content":"Short","pos":[9709,9714]},{"content":"Integer","pos":[9715,9722]},{"content":"Integer","pos":[9723,9730]},{"content":"Long","pos":[9731,9735]},{"content":"Long","pos":[9736,9740]},{"content":"Long","pos":[9741,9745]},{"content":"Integer","pos":[9759,9766]},{"content":"Integer","pos":[9767,9774]},{"content":"UShort","pos":[9775,9781]},{"content":"Integer","pos":[9782,9789]},{"content":"UShort","pos":[9790,9796]},{"content":"Integer","pos":[9797,9804]},{"content":"UInteger","pos":[9805,9813]},{"content":"Long","pos":[9814,9818]},{"content":"ULong","pos":[9819,9824]},{"content":"Integer","pos":[9839,9846]},{"content":"Integer","pos":[9847,9854]},{"content":"Integer","pos":[9855,9862]},{"content":"Integer","pos":[9863,9870]},{"content":"Integer","pos":[9871,9878]},{"content":"Integer","pos":[9879,9886]},{"content":"Long","pos":[9887,9891]},{"content":"Long","pos":[9892,9896]},{"content":"Long","pos":[9897,9901]},{"content":"Long","pos":[9917,9921]},{"content":"Long","pos":[9922,9926]},{"content":"UInteger","pos":[9927,9935]},{"content":"Long","pos":[9936,9940]},{"content":"UInteger","pos":[9941,9949]},{"content":"Long","pos":[9950,9954]},{"content":"UInteger","pos":[9955,9963]},{"content":"Long","pos":[9964,9968]},{"content":"ULong","pos":[9969,9974]},{"content":"Long","pos":[9986,9990]},{"content":"Long","pos":[9991,9995]},{"content":"Long","pos":[9996,10000]},{"content":"Long","pos":[10001,10005]},{"content":"Long","pos":[10006,10010]},{"content":"Long","pos":[10011,10015]},{"content":"Long","pos":[10016,10020]},{"content":"Long","pos":[10021,10025]},{"content":"Long","pos":[10026,10030]},{"content":"Long","pos":[10043,10047]},{"content":"Long","pos":[10048,10052]},{"content":"ULong","pos":[10053,10058]},{"content":"Long","pos":[10059,10063]},{"content":"ULong","pos":[10064,10069]},{"content":"Long","pos":[10070,10074]},{"content":"ULong","pos":[10075,10080]},{"content":"Long","pos":[10081,10085]},{"content":"ULong","pos":[10086,10091]},{"pos":[10099,10645],"content":"If either operand of the <ph id=\"ph1\">`\\`</ph> operator is <bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>Single<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>, or <bpt id=\"p3\">[</bpt>Double<ept id=\"p3\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert it to <bpt id=\"p4\">[</bpt>Long<ept id=\"p4\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept> before the operation, and the result data type is <ph id=\"ph3\">`Long`</ph>.","source":"If either operand of the `\\` operator is [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md), [Single](../../../visual-basic/language-reference/data-types/single-data-type.md), or [Double](../../../visual-basic/language-reference/data-types/double-data-type.md), [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert it to [Long](../../../visual-basic/language-reference/data-types/long-data-type.md) before the operation, and the result data type is `Long`."},{"pos":[10654,10688],"content":"Relational and Bitwise Comparisons","linkify":"Relational and Bitwise Comparisons","nodes":[{"content":"Relational and Bitwise Comparisons","pos":[0,34]}]},{"content":"The result data type of a relational operation (<ph id=\"ph1\">`=`</ph>, <ph id=\"ph2\">`&lt;&gt;`</ph>, <ph id=\"ph3\">`&lt;`</ph>, <ph id=\"ph4\">`&gt;`</ph>, <ph id=\"ph5\">`&lt;=`</ph>, <ph id=\"ph6\">`&gt;=`</ph>) is always <ph id=\"ph7\">`Boolean`</ph><bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept>.","pos":[10692,10886],"source":"The result data type of a relational operation (`=`, `<>`, `<`, `>`, `<=`, `>=`) is always `Boolean`[Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)."},{"content":"The same is true for logical operations (<ph id=\"ph1\">`And`</ph>, <ph id=\"ph2\">`AndAlso`</ph>, <ph id=\"ph3\">`Not`</ph>, <ph id=\"ph4\">`Or`</ph>, <ph id=\"ph5\">`OrElse`</ph>, <ph id=\"ph6\">`Xor`</ph>) on <ph id=\"ph7\">`Boolean`</ph> operands.","pos":[10887,10998],"source":" The same is true for logical operations (`And`, `AndAlso`, `Not`, `Or`, `OrElse`, `Xor`) on `Boolean` operands."},{"content":"The result data type of a bitwise logical operation depends on the data types of the operands.","pos":[11005,11099]},{"content":"Note that <ph id=\"ph1\">`AndAlso`</ph> and <ph id=\"ph2\">`OrElse`</ph> are defined only for <ph id=\"ph3\">`Boolean`</ph>, and <ph id=\"ph4\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts each operand as necessary to <ph id=\"ph5\">`Boolean`</ph> before performing the operation.","pos":[11100,11339],"source":" Note that `AndAlso` and `OrElse` are defined only for `Boolean`, and [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] converts each operand as necessary to `Boolean` before performing the operation."},{"pos":[11349,11384],"content":"=, <>, \\<, >, \\<=, and >= Operators","linkify":"=, <>, \\<, >, \\<=, and >= Operators","nodes":[{"content":"=, &lt;&gt;, <ph id=\"ph1\">\\&lt;</ph>, &gt;, <ph id=\"ph2\">\\&lt;</ph>=, and &gt;= Operators","pos":[0,35],"source":"=, <>, \\<, >, \\<=, and >= Operators"}]},{"content":"If both operands are <ph id=\"ph1\">`Boolean`</ph>, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> considers <ph id=\"ph3\">`True`</ph> to be less than <ph id=\"ph4\">`False`</ph>.","pos":[11388,11551],"source":"If both operands are `Boolean`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] considers `True` to be less than `False`."},{"content":"If a numeric type is compared with a <ph id=\"ph1\">`String`</ph>, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert the <ph id=\"ph3\">`String`</ph> to <ph id=\"ph4\">`Double`</ph> before the operation.","pos":[11552,11755],"source":" If a numeric type is compared with a `String`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert the `String` to `Double` before the operation."},{"content":"A <ph id=\"ph1\">`Char`</ph> or <ph id=\"ph2\">`Date`</ph> operand can be compared only with another operand of the same data type.","pos":[11756,11847],"source":" A `Char` or `Date` operand can be compared only with another operand of the same data type."},{"content":"The result data type is always <ph id=\"ph1\">`Boolean`</ph>.","pos":[11848,11889],"source":" The result data type is always `Boolean`."},{"pos":[11899,11919],"content":"Bitwise Not Operator","linkify":"Bitwise Not Operator","nodes":[{"content":"Bitwise Not Operator","pos":[0,20]}]},{"pos":[11923,12002],"content":"The following table shows the result data types for the bitwise <ph id=\"ph1\">`Not`</ph> operator.","source":"The following table shows the result data types for the bitwise `Not` operator."},{"content":"Boolean","pos":[12156,12163]},{"content":"SByte","pos":[12164,12169]},{"content":"Byte","pos":[12170,12174]},{"content":"Short","pos":[12175,12180]},{"content":"UShort","pos":[12181,12187]},{"content":"Integer","pos":[12188,12195]},{"content":"UInteger","pos":[12196,12204]},{"content":"Long","pos":[12205,12209]},{"content":"ULong","pos":[12210,12215]},{"pos":[12223,12465],"content":"If the operand is <ph id=\"ph1\">`Decimal`</ph>, <ph id=\"ph2\">`Single`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert it to <ph id=\"ph6\">`Long`</ph> before the operation, and the result data type is <ph id=\"ph7\">`Long`</ph>.","source":"If the operand is `Decimal`, `Single`, `Double`, or `String`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert it to `Long` before the operation, and the result data type is `Long`."},{"pos":[12475,12509],"content":"Bitwise And, Or, and Xor Operators","linkify":"Bitwise And, Or, and Xor Operators","nodes":[{"content":"Bitwise And, Or, and Xor Operators","pos":[0,34]}]},{"content":"The following table shows the result data types for the bitwise <ph id=\"ph1\">`And`</ph>, <ph id=\"ph2\">`Or`</ph>, and <ph id=\"ph3\">`Xor`</ph> operators.","pos":[12513,12610],"source":"The following table shows the result data types for the bitwise `And`, `Or`, and `Xor` operators."},{"content":"Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.","pos":[12611,12766]},{"content":"Boolean","pos":[12924,12931]},{"content":"SByte","pos":[12932,12937]},{"content":"Short","pos":[12938,12943]},{"content":"Short","pos":[12944,12949]},{"content":"Integer","pos":[12950,12957]},{"content":"Integer","pos":[12958,12965]},{"content":"Long","pos":[12966,12970]},{"content":"Long","pos":[12971,12975]},{"content":"Long","pos":[12976,12980]},{"content":"SByte","pos":[12993,12998]},{"content":"SByte","pos":[12999,13004]},{"content":"Short","pos":[13005,13010]},{"content":"Short","pos":[13011,13016]},{"content":"Integer","pos":[13017,13024]},{"content":"Integer","pos":[13025,13032]},{"content":"Long","pos":[13033,13037]},{"content":"Long","pos":[13038,13042]},{"content":"Long","pos":[13043,13047]},{"content":"Short","pos":[13059,13064]},{"content":"Short","pos":[13065,13070]},{"content":"Byte","pos":[13071,13075]},{"content":"Short","pos":[13076,13081]},{"content":"UShort","pos":[13082,13088]},{"content":"Integer","pos":[13089,13096]},{"content":"UInteger","pos":[13097,13105]},{"content":"Long","pos":[13106,13110]},{"content":"ULong","pos":[13111,13116]},{"content":"Short","pos":[13129,13134]},{"content":"Short","pos":[13135,13140]},{"content":"Short","pos":[13141,13146]},{"content":"Short","pos":[13147,13152]},{"content":"Integer","pos":[13153,13160]},{"content":"Integer","pos":[13161,13168]},{"content":"Long","pos":[13169,13173]},{"content":"Long","pos":[13174,13178]},{"content":"Long","pos":[13179,13183]},{"content":"Integer","pos":[13197,13204]},{"content":"Integer","pos":[13205,13212]},{"content":"UShort","pos":[13213,13219]},{"content":"Integer","pos":[13220,13227]},{"content":"UShort","pos":[13228,13234]},{"content":"Integer","pos":[13235,13242]},{"content":"UInteger","pos":[13243,13251]},{"content":"Long","pos":[13252,13256]},{"content":"ULong","pos":[13257,13262]},{"content":"Integer","pos":[13277,13284]},{"content":"Integer","pos":[13285,13292]},{"content":"Integer","pos":[13293,13300]},{"content":"Integer","pos":[13301,13308]},{"content":"Integer","pos":[13309,13316]},{"content":"Integer","pos":[13317,13324]},{"content":"Long","pos":[13325,13329]},{"content":"Long","pos":[13330,13334]},{"content":"Long","pos":[13335,13339]},{"content":"Long","pos":[13355,13359]},{"content":"Long","pos":[13360,13364]},{"content":"UInteger","pos":[13365,13373]},{"content":"Long","pos":[13374,13378]},{"content":"UInteger","pos":[13379,13387]},{"content":"Long","pos":[13388,13392]},{"content":"UInteger","pos":[13393,13401]},{"content":"Long","pos":[13402,13406]},{"content":"ULong","pos":[13407,13412]},{"content":"Long","pos":[13424,13428]},{"content":"Long","pos":[13429,13433]},{"content":"Long","pos":[13434,13438]},{"content":"Long","pos":[13439,13443]},{"content":"Long","pos":[13444,13448]},{"content":"Long","pos":[13449,13453]},{"content":"Long","pos":[13454,13458]},{"content":"Long","pos":[13459,13463]},{"content":"Long","pos":[13464,13468]},{"content":"Long","pos":[13481,13485]},{"content":"Long","pos":[13486,13490]},{"content":"ULong","pos":[13491,13496]},{"content":"Long","pos":[13497,13501]},{"content":"ULong","pos":[13502,13507]},{"content":"Long","pos":[13508,13512]},{"content":"ULong","pos":[13513,13518]},{"content":"Long","pos":[13519,13523]},{"content":"ULong","pos":[13524,13529]},{"pos":[13537,13823],"content":"If an operand is <ph id=\"ph1\">`Decimal`</ph>, <ph id=\"ph2\">`Single`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert it to <ph id=\"ph6\">`Long`</ph> before the operation, and the result data type is the same as if that operand had already been <ph id=\"ph7\">`Long`</ph>.","source":"If an operand is `Decimal`, `Single`, `Double`, or `String`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert it to `Long` before the operation, and the result data type is the same as if that operand had already been `Long`."},{"pos":[13832,13855],"content":"Miscellaneous Operators","linkify":"Miscellaneous Operators","nodes":[{"content":"Miscellaneous Operators","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`&amp;`</ph> operator is defined only for concatenation of <ph id=\"ph2\">`String`</ph> operands.","pos":[13859,13931],"source":"The `&` operator is defined only for concatenation of `String` operands."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts each operand as necessary to <ph id=\"ph2\">`String`</ph> before the operation, and the result data type is always <ph id=\"ph3\">`String`</ph>.","pos":[13932,14135],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] converts each operand as necessary to `String` before the operation, and the result data type is always `String`."},{"content":"For the purposes of the <ph id=\"ph1\">`&amp;`</ph> operator, all conversions to <ph id=\"ph2\">`String`</ph> are considered to be widening, even if <ph id=\"ph3\">`Option Strict`</ph> is <ph id=\"ph4\">`On`</ph>.","pos":[14136,14265],"source":" For the purposes of the `&` operator, all conversions to `String` are considered to be widening, even if `Option Strict` is `On`."},{"content":"The <ph id=\"ph1\">`Is`</ph> and <ph id=\"ph2\">`IsNot`</ph> operators require both operands to be of a reference type.","pos":[14272,14351],"source":"The `Is` and `IsNot` operators require both operands to be of a reference type."},{"content":"The <ph id=\"ph1\">`TypeOf`</ph>...<ph id=\"ph2\">`Is`</ph> expression requires the first operand to be of a reference type and the second operand to be the name of a data type.","pos":[14352,14489],"source":" The `TypeOf`...`Is` expression requires the first operand to be of a reference type and the second operand to be the name of a data type."},{"content":"In all these cases the result data type is <ph id=\"ph1\">`Boolean`</ph>.","pos":[14490,14543],"source":" In all these cases the result data type is `Boolean`."},{"content":"The <ph id=\"ph1\">`Like`</ph> operator is defined only for pattern matching of <ph id=\"ph2\">`String`</ph> operands.","pos":[14550,14628],"source":"The `Like` operator is defined only for pattern matching of `String` operands."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert each operand as necessary to <ph id=\"ph2\">`String`</ph> before the operation.","pos":[14629,14798],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] attempts to convert each operand as necessary to `String` before the operation."},{"content":"The result data type is always <ph id=\"ph1\">`Boolean`</ph>.","pos":[14799,14840],"source":" The result data type is always `Boolean`."},{"pos":[14849,14857],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[14861,14948],"source":"[Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[14952,15074],"source":"[Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[15078,15226],"source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[15230,15378],"source":"[Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[15382,15455],"source":"[Operators](../../../visual-basic/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[15459,15572],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[15576,15701],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[15705,15804],"source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Comparison Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[15808,15907],"source":"[Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","pos":[15911,16016],"source":"[Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)"}]}