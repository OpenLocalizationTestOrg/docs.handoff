<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="obtaining-a-dbproviderfactory.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c84229dc1c32217099eb7ed8b90accc04cc66148</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\obtaining-a-dbproviderfactory.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8d4dd4200afa3fe9f84bb3b72e4ef98c07a49cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f83d5bc9b7e32562a256db5ec3fd4acde3bbb361</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Obtaining a DbProviderFactory</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Obtaining a DbProviderFactory</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The process of obtaining a <ph id="ph1">&lt;xref:System.Data.Common.DbProviderFactory&gt;</ph> involves passing information about a data provider to the <ph id="ph2">&lt;xref:System.Data.Common.DbProviderFactories&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Based on this information, the <ph id="ph1">&lt;xref:System.Data.Common.DbProviderFactories.GetFactory%2A&gt;</ph> method creates a strongly typed provider factory.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, to create a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlClientFactory&gt;</ph>, you can pass <ph id="ph2">`GetFactory`</ph> a string with the provider name specified as "System.Data.SqlClient".</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The other overload of <ph id="ph1">`GetFactory`</ph> takes a <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Once you create the provider factory, you can then use its methods to create additional objects.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Some of the methods of a <ph id="ph1">`SqlClientFactory`</ph> include <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlClientFactory.CreateConnection%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlClientFactory.CreateCommand%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Data.SqlClient.SqlClientFactory.CreateDataAdapter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The .NET Framework <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleClientFactory&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.Odbc.OdbcFactory&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.OleDb.OleDbFactory&gt;</ph> classes also provide similar functionality.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Registering DbProviderFactories</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each .NET Framework data provider that supports a factory-based class registers configuration information in the <bpt id="p1">**</bpt>DbProviderFactories<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>machine.config<ept id="p2">**</ept> file on the local computer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following configuration file fragment shows the syntax and format for <ph id="ph1">&lt;xref:System.Data.SqlClient&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>invariant<ept id="p1">**</ept> attribute identifies the underlying data provider.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This three-part naming syntax is also used when creating a new factory and for identifying the provider in an application configuration file so that the provider name, along with its associated connection string, can be retrieved at run time.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Retrieving Provider Information</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can retrieve information about all of the data providers installed on the local computer by using the <ph id="ph1">&lt;xref:System.Data.Common.DbProviderFactories.GetFactoryClasses%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It returns a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> named <bpt id="p1">**</bpt>DbProviderFactories<ept id="p1">**</ept> that contains the columns described in the following table.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Column ordinal</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Column name</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example output</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>SqlClient Data Provider</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Readable name for the data provider</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>.Net Framework Data Provider for SqlServer</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Readable description of the data provider</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>InvariantName<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>System.Data.SqlClient</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Name that can be used programmatically to refer to the data provider</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AssemblyQualifiedName<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>System.Data.SqlClient.SqlClientFactory, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Fully qualified name of the factory class, which contains enough information to instantiate the object</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`DataTable`</ph> can be used to enable a user to select a <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> at run time.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The selected <ph id="ph1">`DataRow`</ph> can then be passed to the <ph id="ph2">&lt;xref:System.Data.Common.DbProviderFactories.GetFactory%2A&gt;</ph> method to create a strongly typed <ph id="ph3">&lt;xref:System.Data.Common.DbProviderFactory&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A selected <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> can be passed to the <ph id="ph2">`GetFactory`</ph> method to create the desired <ph id="ph3">`DbProviderFactory`</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Listing the Installed Provider Factory Classes</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use the <ph id="ph1">&lt;xref:System.Data.Common.DbProviderFactories.GetFactoryClasses%2A&gt;</ph> method to return a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> containing information about the installed providers.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The code iterates through each row in the <ph id="ph1">`DataTable`</ph>, displaying information for each installed provider in the console window.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Using Application Configuration Files to Store Factory Information</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The design pattern used for working with factories entails storing provider and connection string information in an application configuration file, such as <bpt id="p1">**</bpt>app.config<ept id="p1">**</ept> for a Windows application, and <bpt id="p2">**</bpt>web.config<ept id="p2">**</ept> for an ASP.NET application.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following configuration file fragment demonstrates how to save two named connection strings, "NorthwindSQL" for a connection to the Northwind database in SQL Server, and "NorthwindAccess" for a connection to the Northwind database in Access/Jet.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>invariant<ept id="p1">**</ept> name is used for the <bpt id="p2">**</bpt>providerName<ept id="p2">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Retrieving a Connection String by Provider Name</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In order to create a provider factory, you must supply a connection string as well as the provider name.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to retrieve a connection string from an application configuration file by passing the provider name in the invariant format "<bpt id="p1">*</bpt>System.Data.ProviderName<ept id="p1">*</ept>".</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Configuration.ConnectionStringSettingsCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It returns the <ph id="ph1">&lt;xref:System.Configuration.ConnectionStringSettings.ProviderName%2A&gt;</ph> on success; otherwise <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If there are multiple entries for a provider, the first one found is returned.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information and examples of retrieving connection strings from configuration files, see <bpt id="p1">[</bpt>Connection Strings and Configuration Files<ept id="p1">](../../../../docs/framework/data/adonet/connection-strings-and-configuration-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`System.Configuration.dll`</ph> is required in order for the code to run.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Creating the DbProviderFactory and DbConnection</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to create a <ph id="ph1">&lt;xref:System.Data.Common.DbProviderFactory&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Common.DbConnection&gt;</ph> object by passing it the provider name in the format "<bpt id="p1">*</bpt>System.Data.ProviderName<ept id="p1">*</ept>" and a connection string.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DbConnection`</ph> object is returned on success; <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph> in Visual Basic) on any error.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The code obtains the <ph id="ph1">`DbProviderFactory`</ph> by calling <ph id="ph2">&lt;xref:System.Data.Common.DbProviderFactories.GetFactory%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Then the <ph id="ph1">&lt;xref:System.Data.Common.DbProviderFactory.CreateConnection%2A&gt;</ph> method creates the <ph id="ph2">&lt;xref:System.Data.Common.DbConnection&gt;</ph> object and the <ph id="ph3">&lt;xref:System.Data.Common.DbConnection.ConnectionString%2A&gt;</ph> property is set to the connection string.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DbProviderFactories<ept id="p1">](../../../../docs/framework/data/adonet/dbproviderfactories.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Connection Strings<ept id="p1">](../../../../docs/framework/data/adonet/connection-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using the Configuration Classes<ept id="p1">](https://docs.microsoft.com/previous-versions/aspnet/ms228063(v=vs.100))</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Overview<ept id="p1">](ado-net-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>