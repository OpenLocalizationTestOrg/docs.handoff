<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="saving-and-restoring-time-zones.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d783f9e0d098e472dcf67aea394804d6eef2662</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\datetime\saving-and-restoring-time-zones.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09004c8a75c8a771381d4aa6b63c017648aa7810</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">634b9ba64f596a330b34d68217af6494b8915b44</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Saving and restoring time zones</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Saving and restoring time zones</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> class relies on the registry to retrieve predefined time zone data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the registry is a dynamic structure.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Additionally, the time zone information that the registry contains is used by the operating system primarily to handle time adjustments and conversions for the current year.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This has two major implications for applications that rely on accurate time zone data:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A time zone that is required by an application may not be defined in the registry, or it may have been renamed or removed from the registry.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A time zone that is defined in the registry may lack information about the particular adjustment rules that are necessary for historical time zone conversions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> class addresses these limitations through its support for serialization (saving) and deserialization (restoring) of time zone data.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Time zone serialization and deserialization</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Saving and restoring a time zone by serializing and deserializing time zone data involves just two method calls:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can serialize a <ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> object by calling that object's <ph id="ph2">&lt;xref:System.TimeZoneInfo.ToSerializedString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The method takes no parameters and returns a string that contains time zone information.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can deserialize a <ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> object from a serialized string by passing that string to the <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) <ph id="ph4">&lt;xref:System.TimeZoneInfo.FromSerializedString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Serialization and deserialization scenarios</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The ability to save (or serialize) a <ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> object to a string and to restore (or deserialize) it for later use increases both the utility and the flexibility of the <ph id="ph2">&lt;xref:System.TimeZoneInfo&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This section examines some of the situations in which serialization and deserialization are most useful.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Serializing and deserializing time zone data in an application</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A serialized time zone can be restored from a string when it is needed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An application might do this if the time zone retrieved from the registry is unable to correctly convert a date and time within a particular date range.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, time zone data in the Windows XP registry supports a single adjustment rule, while time zones defined in the Windows Vista registry typically provide information about two adjustment rules.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This means that historical time conversions may be inaccurate.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Serialization and deserialization of time zone data can handle this limitation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the following example, a custom <ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> class that has no adjustment rules is defined to represent the U.S. Eastern Standard Time zone from 1883 to 1917, before the introduction of daylight saving time in the United States.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The custom time zone is serialized in a variable that has global scope.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The time zone conversion method, <ph id="ph1">`ConvertUtcTime`</ph>, is passed Coordinated Universal Time (UTC) times to convert.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the date and time occurs in 1917 or earlier, the custom Eastern Standard Time zone is restored from a serialized string and replaces the time zone retrieved from the registry.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Handling time zone exceptions</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because the registry is a dynamic structure, its contents are subject to accidental or deliberate modification.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This means that a time zone that should be defined in the registry and that is required for an application to execute successfully may be absent.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Without support for time zone serialization and deserialization, you have little choice but to handle the resulting <ph id="ph1">&lt;xref:System.TimeZoneNotFoundException&gt;</ph> by ending the application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, by using time zone serialization and deserialization, you can handle an unexpected <ph id="ph1">&lt;xref:System.TimeZoneNotFoundException&gt;</ph> by restoring the required time zone from a serialized string, and the application will continue to run.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example creates and serializes a custom Central Standard Time zone.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It then tries to retrieve the Central Standard Time zone from the registry.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the retrieval operation throws either a <ph id="ph1">&lt;xref:System.TimeZoneNotFoundException&gt;</ph> or an <ph id="ph2">&lt;xref:System.InvalidTimeZoneException&gt;</ph>, the exception handler deserializes the time zone.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Storing a serialized string and restoring it when needed</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The previous examples have stored time zone information to a string variable and restored it when needed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, the string that contains serialized time zone information can itself be stored in some storage medium, such as an external file, a resource file embedded in the application, or the registry.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(Note that information about custom time zones should be stored apart from the system's time zone keys in the registry.)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Storing a serialized time zone string in this manner also separates the time zone creation routine from the application itself.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, a time zone creation routine can execute and create a data file that contains historical time zone information that an application can use.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The data file can be then be installed with the application, and it can be opened and one or more of its time zones can be deserialized when the application requires them.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For an example that uses an embedded resource to store serialized time zone data, see <bpt id="p1">[</bpt>How to: Save time zones to an embedded resource<ept id="p1">](../../../docs/standard/datetime/save-time-zones-to-an-embedded-resource.md)</ept> and <bpt id="p2">[</bpt>How to: Restore time zones from an embedded resource<ept id="p2">](../../../docs/standard/datetime/restore-time-zones-from-an-embedded-resource.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dates, times, and time zones<ept id="p1">](../../../docs/standard/datetime/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>