{"content":"---\ntitle: \"How to: Implement Callback Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"callback function, implementing\"\nms.assetid: e55b3712-b9ea-4453-bd9a-ad5cfa2f6bfa\ncaps.latest.revision: 11\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Implement Callback Functions\nThe following procedure and example demonstrate how a managed application, using platform invoke, can print the handle value for each window on the local computer. Specifically, the procedure and example use the **EnumWindows** function to step through the list of windows and a managed callback function (named CallBack) to print the value of the window handle.  \n  \n### To implement a callback function  \n  \n1.  Look at the signature for the **EnumWindows** function before going further with the implementation. **EnumWindows** has the following signature:  \n  \n    ```  \n    BOOL EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam)  \n    ```  \n  \n     One clue that this function requires a callback is the presence of the **lpEnumFunc** argument. It is common to see the **lp** (long pointer) prefix combined with the **Func** suffix in the name of arguments that take a pointer to a callback function. For documentation about Win32 functions, see the Microsoft Platform SDK.  \n  \n2.  Create the managed callback function. The example declares a delegate type, called `CallBack`, which takes two arguments (**hwnd** and **lparam**). The first argument is a handle to the window; the second argument is application-defined. In this release, both arguments must be integers.  \n  \n     Callback functions generally return nonzero values to indicate success and zero to indicate failure. This example explicitly sets the return value to **true** to continue the enumeration.  \n  \n3.  Create a delegate and pass it as an argument to the **EnumWindows** function. Platform invoke converts the delegate to a familiar callback format automatically.  \n  \n4.  Ensure that the garbage collector does not reclaim the delegate before the callback function completes its work. When you pass a delegate as a parameter, or pass a delegate contained as a field in a structure, it remains uncollected for the duration of the call. So, as is the case in the following enumeration example, the callback function completes its work before the call returns and requires no additional action by the managed caller.  \n  \n     If, however, the callback function can be invoked after the call returns, the managed caller must take steps to ensure that the delegate remains uncollected until the callback function finishes. For detailed information about preventing garbage collection, see [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md) with Platform Invoke.  \n  \n## Example  \n  \n```vb  \nImports System  \nImports System.Runtime.InteropServices  \n  \nPublic Delegate Function CallBack( _  \nhwnd As Integer, lParam As Integer) As Boolean  \n  \nPublic Class EnumReportApp  \n  \n    Declare Function EnumWindows Lib \"user32\" ( _  \n       x As CallBack, y As Integer) As Integer  \n  \n    Public Shared Sub Main()  \n        EnumWindows(AddressOf EnumReportApp.Report, 0)  \n    End Sub 'Main  \n  \n    Public Shared Function Report(hwnd As Integer, lParam As Integer) _  \n    As Boolean  \n        Console.Write(\"Window handle is \")  \n        Console.WriteLine(hwnd)  \n        Return True  \n    End Function 'Report  \nEnd Class 'EnumReportApp  \n  \n```  \n  \n```csharp  \nusing System;  \nusing System.Runtime.InteropServices;  \n  \npublic delegate bool CallBack(int hwnd, int lParam);  \n  \npublic class EnumReportApp  \n{  \n    [DllImport(\"user32\")]  \n    public static extern int EnumWindows(CallBack x, int y);   \n  \n    public static void Main()   \n    {  \n        CallBack myCallBack = new CallBack(EnumReportApp.Report);  \n        EnumWindows(myCallBack, 0);  \n    }  \n  \n    public static bool Report(int hwnd, int lParam)  \n    {   \n        Console.Write(\"Window handle is \");  \n        Console.WriteLine(hwnd);  \n        return true;  \n    }  \n}  \n  \n```  \n  \n```cpp  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \n  \n// A delegate type.  \ndelegate bool CallBack(int hwnd, int lParam);  \n  \n// Managed type with the method to call.  \nref class EnumReport  \n{  \n// Report the window handle.  \npublic:  \n    [DllImport(\"user32\")]  \n    static int EnumWindows(CallBack^ x, int y);  \n  \n    static void Main()  \n    {  \n        EnumReport^ er = gcnew EnumReport;  \n        CallBack^ myCallBack = gcnew CallBack(&EnumReport::Report);  \n        EnumWindows(myCallBack, 0);  \n    }  \n  \n    static bool Report(int hwnd, int lParam)  \n    {  \n       Console::Write(L\"Window handle is \");  \n       Console::WriteLine(hwnd);  \n       return true;  \n    }  \n};  \n  \nint main()  \n{  \n    EnumReport::Main();  \n}  \n```  \n  \n## See Also  \n [Callback Functions](../../../docs/framework/interop/callback-functions.md)   \n [Calling a DLL Function](../../../docs/framework/interop/calling-a-dll-function.md)","nodes":[{"pos":[12,65],"content":"How to: Implement Callback Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Implement Callback Functions | Microsoft Docs","pos":[0,53]}]},{"pos":[486,522],"content":"How to: Implement Callback Functions","linkify":"How to: Implement Callback Functions","nodes":[{"content":"How to: Implement Callback Functions","pos":[0,36]}]},{"content":"The following procedure and example demonstrate how a managed application, using platform invoke, can print the handle value for each window on the local computer.","pos":[523,686]},{"content":"Specifically, the procedure and example use the <bpt id=\"p1\">**</bpt>EnumWindows<ept id=\"p1\">**</ept> function to step through the list of windows and a managed callback function (named CallBack) to print the value of the window handle.","pos":[687,885],"source":" Specifically, the procedure and example use the **EnumWindows** function to step through the list of windows and a managed callback function (named CallBack) to print the value of the window handle."},{"pos":[895,927],"content":"To implement a callback function","linkify":"To implement a callback function","nodes":[{"content":"To implement a callback function","pos":[0,32]}]},{"content":"Look at the signature for the <bpt id=\"p1\">**</bpt>EnumWindows<ept id=\"p1\">**</ept> function before going further with the implementation.","pos":[937,1037],"source":"Look at the signature for the **EnumWindows** function before going further with the implementation."},{"content":"<bpt id=\"p1\">**</bpt>EnumWindows<ept id=\"p1\">**</ept> has the following signature:","pos":[1038,1082],"source":"**EnumWindows** has the following signature:"},{"content":"One clue that this function requires a callback is the presence of the <bpt id=\"p1\">**</bpt>lpEnumFunc<ept id=\"p1\">**</ept> argument.","pos":[1178,1273],"source":"One clue that this function requires a callback is the presence of the **lpEnumFunc** argument."},{"content":"It is common to see the <bpt id=\"p1\">**</bpt>lp<ept id=\"p1\">**</ept> (long pointer) prefix combined with the <bpt id=\"p2\">**</bpt>Func<ept id=\"p2\">**</ept> suffix in the name of arguments that take a pointer to a callback function.","pos":[1274,1429],"source":" It is common to see the **lp** (long pointer) prefix combined with the **Func** suffix in the name of arguments that take a pointer to a callback function."},{"content":"For documentation about Win32 functions, see the Microsoft Platform SDK.","pos":[1430,1502]},{"content":"Create the managed callback function.","pos":[1512,1549]},{"content":"The example declares a delegate type, called <ph id=\"ph1\">`CallBack`</ph>, which takes two arguments (<bpt id=\"p1\">**</bpt>hwnd<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>lparam<ept id=\"p2\">**</ept>).","pos":[1550,1659],"source":" The example declares a delegate type, called `CallBack`, which takes two arguments (**hwnd** and **lparam**)."},{"content":"The first argument is a handle to the window; the second argument is application-defined.","pos":[1660,1749]},{"content":"In this release, both arguments must be integers.","pos":[1750,1799]},{"content":"Callback functions generally return nonzero values to indicate success and zero to indicate failure.","pos":[1810,1910]},{"content":"This example explicitly sets the return value to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> to continue the enumeration.","pos":[1911,1997],"source":" This example explicitly sets the return value to **true** to continue the enumeration."},{"content":"Create a delegate and pass it as an argument to the <bpt id=\"p1\">**</bpt>EnumWindows<ept id=\"p1\">**</ept> function.","pos":[2007,2084],"source":"Create a delegate and pass it as an argument to the **EnumWindows** function."},{"content":"Platform invoke converts the delegate to a familiar callback format automatically.","pos":[2085,2167]},{"content":"Ensure that the garbage collector does not reclaim the delegate before the callback function completes its work.","pos":[2177,2289]},{"content":"When you pass a delegate as a parameter, or pass a delegate contained as a field in a structure, it remains uncollected for the duration of the call.","pos":[2290,2439]},{"content":"So, as is the case in the following enumeration example, the callback function completes its work before the call returns and requires no additional action by the managed caller.","pos":[2440,2618]},{"content":"If, however, the callback function can be invoked after the call returns, the managed caller must take steps to ensure that the delegate remains uncollected until the callback function finishes.","pos":[2629,2823]},{"content":"For detailed information about preventing garbage collection, see <bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept> with Platform Invoke.","pos":[2824,2987],"source":" For detailed information about preventing garbage collection, see [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md) with Platform Invoke."},{"pos":[2996,3003],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5066,5074],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Callback Functions<ept id=\"p1\">](../../../docs/framework/interop/callback-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[5078,5154],"source":"[Callback Functions](../../../docs/framework/interop/callback-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Calling a DLL Function<ept id=\"p1\">](../../../docs/framework/interop/calling-a-dll-function.md)</ept>","pos":[5157,5241],"source":" [Calling a DLL Function](../../../docs/framework/interop/calling-a-dll-function.md)"}]}