{"content":"---\ntitle: Branches and loops - Introduction to C# tutorial\ndescription: In this tutorial about branches and loops, you write C# code to explore the language syntax that supports conditional branches and loops to execute statements repeatedly.\nms.date: 10/31/2017\nms.custom: mvc\n---\n\n# Learn conditional logic with branch and loop statements\n\nThis tutorial teaches you how to write code that examines variables and changes the execution path based on those variables. You write C# code and see the results of compiling and running it. The tutorial contains a series of lessons that explore branching and looping constructs in C#. These lessons teach you the fundamentals of the C# language.\n\nThis tutorial expects you to have a machine you can use for development. The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux. A quick overview of the commands you'll use is in the [Become familiar with the development tools](local-environment.md) with links to more details.\n\n## Make decisions using the `if` statement\n\nCreate a directory named **branches-tutorial**. Make that the current directory and run `dotnet new console -n BranchesAndLoops -o .`. This command creates a new .NET Core console application in the current directory.\n\nOpen **Program.cs** in your favorite editor, and replace the line `Console.WriteLine(\"Hello World!\");` with the following code:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nTry this code by typing `dotnet run` in your console window. You should see the message \"The answer is greater than 10.\" printed to your console.\n\nModify the declaration of `b` so that the sum is less than 10:\n\n```csharp\nint b = 3;\n```\n\nType `dotnet run` again. Because the answer is less than 10, nothing is printed. The **condition** you're testing is false. You don't have any code to execute because you've only\nwritten one of the possible branches for an `if` statement: the true branch.\n\n> [!TIP]\n> As you explore C# (or any programming language), you'll\n> make mistakes when you write code. The compiler will\n> find and report the errors. Look closely at the error\n> output and the code that generated the error. The compiler\n> error can usually help you find the problem.\n\nThis first sample shows the power of `if` and Boolean types. A *Boolean* is a variable that can have one of two values: `true` or `false`. C# defines a special type, `bool` for Boolean variables. The `if` statement checks the value of a `bool`. When the value is `true`, the statement following the `if` executes. Otherwise, it is skipped.\n\nThis process of checking conditions and executing statements based on those conditions is very powerful.\n\n## Make if and else work together\n\nTo execute different code in both the true and false branches, you\ncreate an `else` branch that executes when the condition is false. Try this. Add the last two lines in the code below to your `Main` method (you should already have the first four):\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nThe statement following the `else` keyword executes only when the condition being tested is `false`. Combining `if` and `else` with Boolean conditions provides all the power you need to handle both a `true` and a `false` condition.\n\n> [!IMPORTANT]\n> The indentation under the `if` and `else` statements is for human readers.\n> The C# language doesn't treat indentation or white space as significant.\n> The statement following the `if` or `else` keyword will be executed based\n> on the condition. All the samples in this tutorial follow a common\n> practice to indent lines based on the control flow of statements.\n\nBecause indentation is not significant, you need to use `{` and `}` to\nindicate when you want more than one statement to be part of the block\nthat executes conditionally. C# programmers typically use those braces\non all `if` and `else` clauses. The following example is the same as the one you\njust created. Modify your code above to match the following code:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Through the rest of this tutorial, the code samples all include the braces,\n> following accepted practices.\n\nYou can test more complicated conditions. Add the following code in your `Main` method after the code you've written so far:\n\n```csharp\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\nThe `&&` represents \"and\". It means both conditions must be true to execute\nthe statement in the true branch.  These examples also show that you can have multiple\nstatements in each conditional branch, provided you enclose them in `{` and `}`.\n\nYou can also use  `||` to represent \"or\". Add the following code after what you've written so far:\n\n```csharp\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\nYou've finished the first step. Before you start the next section, let's move the current code into a separate method. That makes it easier to start working with a new example. Rename your `Main` method to `ExploreIf` and write a new `Main` method that calls `ExploreIf`. When you have finished, your code should look like this:\n\n```csharp\nusing System;\n\nnamespace BranchesAndLoops\n{\n    class Program\n    {\n        static void ExploreIf()\n        {\n            int a = 5;\n            int b = 3;\n            if (a + b > 10)\n            {\n                Console.WriteLine(\"The answer is greater than 10\");\n            }\n            else\n            {\n                Console.WriteLine(\"The answer is not greater than 10\");\n            }\n\n            if ((a + b + c > 10) && (a > b))\n            {\n                Console.WriteLine(\"The answer is greater than 10\");\n                Console.WriteLine(\"And the first number is greater than the second\");\n            }\n            else\n            {\n                Console.WriteLine(\"The answer is not greater than 10\");\n                Console.WriteLine(\"Or the first number is not greater than the second\");\n            }\n\n            if ((a + b + c > 10) || (a > b))\n            {\n                Console.WriteLine(\"The answer is greater than 10\");\n                Console.WriteLine(\"Or the first number is greater than the second\");\n            }\n            else\n            {\n                Console.WriteLine(\"The answer is not greater than 10\");\n                Console.WriteLine(\"And the first number is not greater than the second\");\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            ExploreIf();\n        }\n    }\n}\n```\n\nComment out the call to `ExploreIf()`. It will make the output less cluttered as you work in this section:\n\n```csharp\n//ExploreIf();\n```\n\nThe `//` starts a **comment** in C#. Comments are any text you want to keep in your source code but not execute as code. The compiler does not generate any executable code from comments.\n\n## Use loops to repeat operations\n\nIn this section you use **loops** to repeat statements. Try\nthis code in your `Main` method:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n    Console.WriteLine($\"Hello World! The counter is {counter}\");\n    counter++;\n}\n```\n\nThe `while` statement checks a condition and executes the statement or statement block\nfollowing the `while`. It repeatedly checks the condition and\nexecuting those statements until the condition is false.\n\nThere's one other new operator in this example. The `++` after\nthe `counter` variable is the **increment** operator. It adds 1\nto the value of `counter` and stores that value in the `counter` variable.\n\n> [!IMPORTANT]\n> Make sure that the `while` loop condition changes to\n> false as you execute the code. Otherwise, you create an\n> **infinite loop** where your program never ends. That is\n> not demonstrated in this sample, because you have to force your program to\n> quit using **CTRL-C** or other means.\n\nThe `while` loop tests the condition before executing the code\nfollowing the `while`. The `do` ... `while` loop executes the\ncode first, and then checks the condition. The do while loop is shown in the following code:\n\n```csharp\ncounter = 0;\ndo\n{\n    Console.WriteLine($\"Hello World! The counter is {counter}\");\n    counter++;\n} while (counter < 10);\n```\n\nThis `do` loop and the earlier `while` loop produce the same output.\n\n## Work with the for loop\n\nThe **for** loop is commonly used in C#. Try this code in your Main() method:\n\n```csharp\nfor(int index = 0; index < 10; index++)\n{\n    Console.WriteLine($\"Hello World! The index is {index}\");\n}\n```\n\nThis does the same work as the `while` loop and the `do` loop you've\nalready used. The `for` statement has three parts that control\nhow it works.\n\nThe first part is the **for initializer**: `int index = 0;` declares\nthat `index` is the loop variable, and sets its initial value to `0`.\n\nThe middle part is the **for condition**: `index < 10` declares that this\n`for` loop continues to execute as long as the value of counter is less than 10.\n\nThe final part is the **for iterator**: `index++` specifies how to modify the loop\nvariable after executing the block following the `for` statement. Here, it specifies\nthat `index` should be incremented by 1 each time the block executes.\n\nExperiment with these yourself. Try each of the following:\n\n- Change the initializer to start at a different value.\n- Change the condition to stop at a different value.\n\nWhen you're done, let's move on to write some code yourself to\nuse what you've learned.\n\n## Combine branches and loops\n\nNow that you've seen the `if` statement and the looping\nconstructs in the C# language, see if you can write C# code to\nfind the sum of all integers 1 through 20 that are divisible\nby 3.  Here are a few hints:\n\n- The `%` operator gives you the remainder of a division operation.\n- The `if` statement gives you the condition to see if a number should be part of the sum.\n- The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.\n\nTry it yourself. Then check how you did. You should get 63 for an answer. You can see one possible answer by\n[viewing the completed code on GitHub](https://github.com/dotnet/samples/tree/master/csharp/branches-quickstart/Program.cs#L46-L54).\n\nYou've completed the \"branches and loops\" tutorial.\n\nYou can continue with\nthe [Arrays and collections](arrays-and-collections.md) tutorial in\nyour own development environment.\n\nYou can learn more about these concepts in these topics:\n\n- [If and else statement](../../language-reference/keywords/if-else.md)\n- [While statement](../../language-reference/keywords/while.md)\n- [Do statement](../../language-reference/keywords/do.md)\n- [For statement](../../language-reference/keywords/for.md)\n","nodes":[{"pos":[4,278],"embed":true,"restype":"x-metadata","content":"title: Branches and loops - Introduction to C# tutorial\ndescription: In this tutorial about branches and loops, you write C# code to explore the language syntax that supports conditional branches and loops to execute statements repeatedly.\nms.date: 10/31/2017\nms.custom: mvc","nodes":[{"content":"Branches and loops - Introduction to C# tutorial","nodes":[{"pos":[0,48],"content":"Branches and loops - Introduction to C# tutorial","nodes":[{"content":"Branches and loops - Introduction to C# tutorial","pos":[0,48]}]}],"path":["title"],"nosxs":false},{"content":"In this tutorial about branches and loops, you write C# code to explore the language syntax that supports conditional branches and loops to execute statements repeatedly.","nodes":[{"pos":[0,170],"content":"In this tutorial about branches and loops, you write C# code to explore the language syntax that supports conditional branches and loops to execute statements repeatedly.","nodes":[{"content":"In this tutorial about branches and loops, you write C# code to explore the language syntax that supports conditional branches and loops to execute statements repeatedly.","pos":[0,170]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[286,341],"content":"Learn conditional logic with branch and loop statements","linkify":"Learn conditional logic with branch and loop statements","nodes":[{"content":"Learn conditional logic with branch and loop statements","pos":[0,55]}]},{"content":"This tutorial teaches you how to write code that examines variables and changes the execution path based on those variables.","pos":[343,467]},{"content":"You write C# code and see the results of compiling and running it.","pos":[468,534]},{"content":"The tutorial contains a series of lessons that explore branching and looping constructs in C#.","pos":[535,629]},{"content":"These lessons teach you the fundamentals of the C# language.","pos":[630,690]},{"content":"This tutorial expects you to have a machine you can use for development.","pos":[692,764]},{"content":"The .NET topic <bpt id=\"p1\">[</bpt>Get Started in 10 minutes<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.","pos":[765,931],"source":" The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux."},{"content":"A quick overview of the commands you'll use is in the <bpt id=\"p1\">[</bpt>Become familiar with the development tools<ept id=\"p1\">](local-environment.md)</ept> with links to more details.","pos":[932,1080],"source":" A quick overview of the commands you'll use is in the [Become familiar with the development tools](local-environment.md) with links to more details."},{"pos":[1085,1124],"content":"Make decisions using the <ph id=\"ph1\">`if`</ph> statement","linkify":"Make decisions using the `if` statement","source":"Make decisions using the `if` statement"},{"content":"Create a directory named <bpt id=\"p1\">**</bpt>branches-tutorial<ept id=\"p1\">**</ept>.","pos":[1126,1173],"source":"Create a directory named **branches-tutorial**."},{"content":"Make that the current directory and run <ph id=\"ph1\">`dotnet new console -n BranchesAndLoops -o .`</ph>.","pos":[1174,1260],"source":" Make that the current directory and run `dotnet new console -n BranchesAndLoops -o .`."},{"content":"This command creates a new .NET Core console application in the current directory.","pos":[1261,1343]},{"pos":[1345,1472],"content":"Open <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> in your favorite editor, and replace the line <ph id=\"ph1\">`Console.WriteLine(\"Hello World!\");`</ph> with the following code:","source":"Open **Program.cs** in your favorite editor, and replace the line `Console.WriteLine(\"Hello World!\");` with the following code:"},{"content":"Try this code by typing <ph id=\"ph1\">`dotnet run`</ph> in your console window.","pos":[1584,1644],"source":"Try this code by typing `dotnet run` in your console window."},{"content":"You should see the message \"The answer is greater than 10.\"","pos":[1645,1704]},{"content":"printed to your console.","pos":[1705,1729]},{"pos":[1731,1793],"content":"Modify the declaration of <ph id=\"ph1\">`b`</ph> so that the sum is less than 10:","source":"Modify the declaration of `b` so that the sum is less than 10:"},{"content":"Type <ph id=\"ph1\">`dotnet run`</ph> again.","pos":[1821,1845],"source":"Type `dotnet run` again."},{"content":"Because the answer is less than 10, nothing is printed.","pos":[1846,1901]},{"content":"The <bpt id=\"p1\">**</bpt>condition<ept id=\"p1\">**</ept> you're testing is false.","pos":[1902,1944],"source":" The **condition** you're testing is false."},{"content":"You don't have any code to execute because you've only written one of the possible branches for an <ph id=\"ph1\">`if`</ph> statement: the true branch.","pos":[1945,2076],"source":" You don't have any code to execute because you've only\nwritten one of the possible branches for an `if` statement: the true branch."},{"pos":[2080,2363],"content":"[!TIP]\nAs you explore C# (or any programming language), you'll\nmake mistakes when you write code. The compiler will\nfind and report the errors. Look closely at the error\noutput and the code that generated the error. The compiler\nerror can usually help you find the problem.","leadings":["","> ","> ","> ","> ","> "],"nodes":[{"content":"As you explore C# (or any programming language), you'll\nmake mistakes when you write code. The compiler will\nfind and report the errors. Look closely at the error\noutput and the code that generated the error. The compiler\nerror can usually help you find the problem.","pos":[7,273],"nodes":[{"content":"As you explore C# (or any programming language), you'll make mistakes when you write code.","pos":[0,90],"source":"As you explore C# (or any programming language), you'll\nmake mistakes when you write code."},{"content":"The compiler will find and report the errors.","pos":[91,136],"source":" The compiler will\nfind and report the errors."},{"content":"Look closely at the error output and the code that generated the error.","pos":[137,208],"source":" Look closely at the error\noutput and the code that generated the error."},{"content":"The compiler error can usually help you find the problem.","pos":[209,266],"source":" The compiler\nerror can usually help you find the problem."}]}]},{"content":"This first sample shows the power of <ph id=\"ph1\">`if`</ph> and Boolean types.","pos":[2365,2425],"source":"This first sample shows the power of `if` and Boolean types."},{"content":"A <bpt id=\"p1\">*</bpt>Boolean<ept id=\"p1\">*</ept> is a variable that can have one of two values: <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>.","pos":[2426,2503],"source":" A *Boolean* is a variable that can have one of two values: `true` or `false`."},{"content":"C# defines a special type, <ph id=\"ph1\">`bool`</ph> for Boolean variables.","pos":[2504,2560],"source":" C# defines a special type, `bool` for Boolean variables."},{"content":"The <ph id=\"ph1\">`if`</ph> statement checks the value of a <ph id=\"ph2\">`bool`</ph>.","pos":[2561,2609],"source":" The `if` statement checks the value of a `bool`."},{"content":"When the value is <ph id=\"ph1\">`true`</ph>, the statement following the <ph id=\"ph2\">`if`</ph> executes.","pos":[2610,2678],"source":" When the value is `true`, the statement following the `if` executes."},{"content":"Otherwise, it is skipped.","pos":[2679,2704]},{"content":"This process of checking conditions and executing statements based on those conditions is very powerful.","pos":[2706,2810]},{"pos":[2815,2845],"content":"Make if and else work together","linkify":"Make if and else work together","nodes":[{"content":"Make if and else work together","pos":[0,30]}]},{"content":"To execute different code in both the true and false branches, you create an <ph id=\"ph1\">`else`</ph> branch that executes when the condition is false.","pos":[2847,2980],"source":"To execute different code in both the true and false branches, you\ncreate an `else` branch that executes when the condition is false."},{"content":"Try this.","pos":[2981,2990]},{"content":"Add the last two lines in the code below to your <ph id=\"ph1\">`Main`</ph> method (you should already have the first four):","pos":[2991,3095],"source":" Add the last two lines in the code below to your `Main` method (you should already have the first four):"},{"content":"The statement following the <ph id=\"ph1\">`else`</ph> keyword executes only when the condition being tested is <ph id=\"ph2\">`false`</ph>.","pos":[3271,3371],"source":"The statement following the `else` keyword executes only when the condition being tested is `false`."},{"content":"Combining <ph id=\"ph1\">`if`</ph> and <ph id=\"ph2\">`else`</ph> with Boolean conditions provides all the power you need to handle both a <ph id=\"ph3\">`true`</ph> and a <ph id=\"ph4\">`false`</ph> condition.","pos":[3372,3502],"source":" Combining `if` and `else` with Boolean conditions provides all the power you need to handle both a `true` and a `false` condition."},{"pos":[3506,3883],"content":"[!IMPORTANT]\nThe indentation under the `if` and `else` statements is for human readers.\nThe C# language doesn't treat indentation or white space as significant.\nThe statement following the `if` or `else` keyword will be executed based\non the condition. All the samples in this tutorial follow a common\npractice to indent lines based on the control flow of statements.","leadings":["","> ","> ","> ","> ","> "],"nodes":[{"content":"The indentation under the `if` and `else` statements is for human readers.\nThe C# language doesn't treat indentation or white space as significant.\nThe statement following the `if` or `else` keyword will be executed based\non the condition. All the samples in this tutorial follow a common\npractice to indent lines based on the control flow of statements.","pos":[13,367],"nodes":[{"content":"The indentation under the <ph id=\"ph1\">`if`</ph> and <ph id=\"ph2\">`else`</ph> statements is for human readers.","pos":[0,74],"source":"The indentation under the `if` and `else` statements is for human readers."},{"content":"The C# language doesn't treat indentation or white space as significant.","pos":[75,147],"source":"\nThe C# language doesn't treat indentation or white space as significant."},{"content":"The statement following the <ph id=\"ph1\">`if`</ph> or <ph id=\"ph2\">`else`</ph> keyword will be executed based on the condition.","pos":[148,239],"source":"\nThe statement following the `if` or `else` keyword will be executed based\non the condition."},{"content":"All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.","pos":[240,354],"source":" All the samples in this tutorial follow a common\npractice to indent lines based on the control flow of statements."}]}]},{"content":"Because indentation is not significant, you need to use <ph id=\"ph1\">`{`</ph> and <ph id=\"ph2\">`}`</ph> to indicate when you want more than one statement to be part of the block that executes conditionally.","pos":[3885,4055],"source":"Because indentation is not significant, you need to use `{` and `}` to\nindicate when you want more than one statement to be part of the block\nthat executes conditionally."},{"content":"C# programmers typically use those braces on all <ph id=\"ph1\">`if`</ph> and <ph id=\"ph2\">`else`</ph> clauses.","pos":[4056,4129],"source":" C# programmers typically use those braces\non all `if` and `else` clauses."},{"content":"The following example is the same as the one you just created.","pos":[4130,4192],"source":" The following example is the same as the one you\njust created."},{"content":"Modify your code above to match the following code:","pos":[4193,4244]},{"pos":[4430,4546],"content":"[!TIP]\nThrough the rest of this tutorial, the code samples all include the braces,\nfollowing accepted practices.","leadings":["","> ","> "],"nodes":[{"content":"Through the rest of this tutorial, the code samples all include the braces, following accepted practices.","pos":[7,112],"source":"Through the rest of this tutorial, the code samples all include the braces,\nfollowing accepted practices."}]},{"content":"You can test more complicated conditions.","pos":[4548,4589]},{"content":"Add the following code in your <ph id=\"ph1\">`Main`</ph> method after the code you've written so far:","pos":[4590,4672],"source":" Add the following code in your `Main` method after the code you've written so far:"},{"content":"The <ph id=\"ph1\">`&amp;&amp;`</ph> represents \"and\".","pos":[5013,5039],"source":"The `&&` represents \"and\"."},{"content":"It means both conditions must be true to execute the statement in the true branch.","pos":[5040,5122],"source":" It means both conditions must be true to execute\nthe statement in the true branch."},{"content":"These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in <ph id=\"ph1\">`{`</ph> and <ph id=\"ph2\">`}`</ph>.","pos":[5124,5256],"source":"  These examples also show that you can have multiple\nstatements in each conditional branch, provided you enclose them in `{` and `}`."},{"content":"You can also use  <ph id=\"ph1\">`||`</ph> to represent \"or\".","pos":[5258,5299],"source":"You can also use  `||` to represent \"or\"."},{"content":"Add the following code after what you've written so far:","pos":[5300,5356]},{"content":"You've finished the first step.","pos":[5686,5717]},{"content":"Before you start the next section, let's move the current code into a separate method.","pos":[5718,5804]},{"content":"That makes it easier to start working with a new example.","pos":[5805,5862]},{"content":"Rename your <ph id=\"ph1\">`Main`</ph> method to <ph id=\"ph2\">`ExploreIf`</ph> and write a new <ph id=\"ph3\">`Main`</ph> method that calls <ph id=\"ph4\">`ExploreIf`</ph>.","pos":[5863,5957],"source":" Rename your `Main` method to `ExploreIf` and write a new `Main` method that calls `ExploreIf`."},{"content":"When you have finished, your code should look like this:","pos":[5958,6014]},{"content":"Comment out the call to <ph id=\"ph1\">`ExploreIf()`</ph>.","pos":[7400,7438],"source":"Comment out the call to `ExploreIf()`."},{"content":"It will make the output less cluttered as you work in this section:","pos":[7439,7506]},{"content":"The <ph id=\"ph1\">`//`</ph> starts a <bpt id=\"p1\">**</bpt>comment<ept id=\"p1\">**</ept> in C#.","pos":[7538,7574],"source":"The `//` starts a **comment** in C#."},{"content":"Comments are any text you want to keep in your source code but not execute as code.","pos":[7575,7658]},{"content":"The compiler does not generate any executable code from comments.","pos":[7659,7724]},{"pos":[7729,7759],"content":"Use loops to repeat operations","linkify":"Use loops to repeat operations","nodes":[{"content":"Use loops to repeat operations","pos":[0,30]}]},{"content":"In this section you use <bpt id=\"p1\">**</bpt>loops<ept id=\"p1\">**</ept> to repeat statements.","pos":[7761,7816],"source":"In this section you use **loops** to repeat statements."},{"content":"Try this code in your <ph id=\"ph1\">`Main`</ph> method:","pos":[7817,7853],"source":" Try\nthis code in your `Main` method:"},{"content":"The <ph id=\"ph1\">`while`</ph> statement checks a condition and executes the statement or statement block following the <ph id=\"ph2\">`while`</ph>.","pos":[7992,8101],"source":"The `while` statement checks a condition and executes the statement or statement block\nfollowing the `while`."},{"content":"It repeatedly checks the condition and executing those statements until the condition is false.","pos":[8102,8197],"source":" It repeatedly checks the condition and\nexecuting those statements until the condition is false."},{"content":"There's one other new operator in this example.","pos":[8199,8246]},{"content":"The <ph id=\"ph1\">`++`</ph> after the <ph id=\"ph2\">`counter`</ph> variable is the <bpt id=\"p1\">**</bpt>increment<ept id=\"p1\">**</ept> operator.","pos":[8247,8315],"source":" The `++` after\nthe `counter` variable is the **increment** operator."},{"content":"It adds 1 to the value of <ph id=\"ph1\">`counter`</ph> and stores that value in the <ph id=\"ph2\">`counter`</ph> variable.","pos":[8316,8400],"source":" It adds 1\nto the value of `counter` and stores that value in the `counter` variable."},{"pos":[8404,8705],"content":"[!IMPORTANT]\nMake sure that the `while` loop condition changes to\nfalse as you execute the code. Otherwise, you create an\n**infinite loop** where your program never ends. That is\nnot demonstrated in this sample, because you have to force your program to\nquit using **CTRL-C** or other means.","leadings":["","> ","> ","> ","> ","> "],"nodes":[{"content":"Make sure that the `while` loop condition changes to\nfalse as you execute the code. Otherwise, you create an\n**infinite loop** where your program never ends. That is\nnot demonstrated in this sample, because you have to force your program to\nquit using **CTRL-C** or other means.","pos":[13,291],"nodes":[{"content":"Make sure that the <ph id=\"ph1\">`while`</ph> loop condition changes to false as you execute the code.","pos":[0,83],"source":"Make sure that the `while` loop condition changes to\nfalse as you execute the code."},{"content":"Otherwise, you create an <bpt id=\"p1\">**</bpt>infinite loop<ept id=\"p1\">**</ept> where your program never ends.","pos":[84,157],"source":" Otherwise, you create an\n**infinite loop** where your program never ends."},{"content":"That is not demonstrated in this sample, because you have to force your program to quit using <bpt id=\"p1\">**</bpt>CTRL-C<ept id=\"p1\">**</ept> or other means.","pos":[158,278],"source":" That is\nnot demonstrated in this sample, because you have to force your program to\nquit using **CTRL-C** or other means."}]}]},{"content":"The <ph id=\"ph1\">`while`</ph> loop tests the condition before executing the code following the <ph id=\"ph2\">`while`</ph>.","pos":[8707,8792],"source":"The `while` loop tests the condition before executing the code\nfollowing the `while`."},{"content":"The <ph id=\"ph1\">`do`</ph> ... <ph id=\"ph2\">`while`</ph> loop executes the code first, and then checks the condition.","pos":[8793,8874],"source":" The `do` ... `while` loop executes the\ncode first, and then checks the condition."},{"content":"The do while loop is shown in the following code:","pos":[8875,8924]},{"pos":[9063,9131],"content":"This <ph id=\"ph1\">`do`</ph> loop and the earlier <ph id=\"ph2\">`while`</ph> loop produce the same output.","source":"This `do` loop and the earlier `while` loop produce the same output."},{"pos":[9136,9158],"content":"Work with the for loop","linkify":"Work with the for loop","nodes":[{"content":"Work with the for loop","pos":[0,22]}]},{"content":"The <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop is commonly used in C#.","pos":[9160,9200],"source":"The **for** loop is commonly used in C#."},{"content":"Try this code in your Main() method:","pos":[9201,9237]},{"content":"This does the same work as the <ph id=\"ph1\">`while`</ph> loop and the <ph id=\"ph2\">`do`</ph> loop you've already used.","pos":[9359,9441],"source":"This does the same work as the `while` loop and the `do` loop you've\nalready used."},{"content":"The <ph id=\"ph1\">`for`</ph> statement has three parts that control how it works.","pos":[9442,9504],"source":" The `for` statement has three parts that control\nhow it works."},{"pos":[9506,9644],"content":"The first part is the <bpt id=\"p1\">**</bpt>for initializer<ept id=\"p1\">**</ept>: <ph id=\"ph1\">`int index = 0;`</ph> declares that <ph id=\"ph2\">`index`</ph> is the loop variable, and sets its initial value to <ph id=\"ph3\">`0`</ph>.","source":"The first part is the **for initializer**: `int index = 0;` declares\nthat `index` is the loop variable, and sets its initial value to `0`."},{"pos":[9646,9800],"content":"The middle part is the <bpt id=\"p1\">**</bpt>for condition<ept id=\"p1\">**</ept>: <ph id=\"ph1\">`index &lt; 10`</ph> declares that this <ph id=\"ph2\">`for`</ph> loop continues to execute as long as the value of counter is less than 10.","source":"The middle part is the **for condition**: `index < 10` declares that this\n`for` loop continues to execute as long as the value of counter is less than 10."},{"content":"The final part is the <bpt id=\"p1\">**</bpt>for iterator<ept id=\"p1\">**</ept>: <ph id=\"ph1\">`index++`</ph> specifies how to modify the loop variable after executing the block following the <ph id=\"ph2\">`for`</ph> statement.","pos":[9802,9950],"source":"The final part is the **for iterator**: `index++` specifies how to modify the loop\nvariable after executing the block following the `for` statement."},{"content":"Here, it specifies that <ph id=\"ph1\">`index`</ph> should be incremented by 1 each time the block executes.","pos":[9951,10039],"source":" Here, it specifies\nthat `index` should be incremented by 1 each time the block executes."},{"content":"Experiment with these yourself.","pos":[10041,10072]},{"content":"Try each of the following:","pos":[10073,10099]},{"content":"Change the initializer to start at a different value.","pos":[10103,10156]},{"content":"Change the condition to stop at a different value.","pos":[10159,10209]},{"pos":[10211,10298],"content":"When you're done, let's move on to write some code yourself to use what you've learned.","source":"When you're done, let's move on to write some code yourself to\nuse what you've learned."},{"pos":[10303,10329],"content":"Combine branches and loops","linkify":"Combine branches and loops","nodes":[{"content":"Combine branches and loops","pos":[0,26]}]},{"content":"Now that you've seen the <ph id=\"ph1\">`if`</ph> statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.","pos":[10331,10516],"source":"Now that you've seen the `if` statement and the looping\nconstructs in the C# language, see if you can write C# code to\nfind the sum of all integers 1 through 20 that are divisible\nby 3."},{"content":"Here are a few hints:","pos":[10518,10539]},{"pos":[10543,10608],"content":"The <ph id=\"ph1\">`%`</ph> operator gives you the remainder of a division operation.","source":"The `%` operator gives you the remainder of a division operation."},{"pos":[10611,10699],"content":"The <ph id=\"ph1\">`if`</ph> statement gives you the condition to see if a number should be part of the sum.","source":"The `if` statement gives you the condition to see if a number should be part of the sum."},{"pos":[10702,10788],"content":"The <ph id=\"ph1\">`for`</ph> loop can help you repeat a series of steps for all the numbers 1 through 20.","source":"The `for` loop can help you repeat a series of steps for all the numbers 1 through 20."},{"content":"Try it yourself.","pos":[10790,10806]},{"content":"Then check how you did.","pos":[10807,10830]},{"content":"You should get 63 for an answer.","pos":[10831,10863]},{"content":"You can see one possible answer by <bpt id=\"p1\">[</bpt>viewing the completed code on GitHub<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/csharp/branches-quickstart/Program.cs#L46-L54)</ept>.","pos":[10864,11031],"source":" You can see one possible answer by\n[viewing the completed code on GitHub](https://github.com/dotnet/samples/tree/master/csharp/branches-quickstart/Program.cs#L46-L54)."},{"content":"You've completed the \"branches and loops\" tutorial.","pos":[11033,11084]},{"pos":[11086,11209],"content":"You can continue with the <bpt id=\"p1\">[</bpt>Arrays and collections<ept id=\"p1\">](arrays-and-collections.md)</ept> tutorial in your own development environment.","source":"You can continue with\nthe [Arrays and collections](arrays-and-collections.md) tutorial in\nyour own development environment."},{"content":"You can learn more about these concepts in these topics:","pos":[11211,11267]},{"pos":[11271,11340],"content":"<bpt id=\"p1\">[</bpt>If and else statement<ept id=\"p1\">](../../language-reference/keywords/if-else.md)</ept>","source":"[If and else statement](../../language-reference/keywords/if-else.md)"},{"pos":[11343,11404],"content":"<bpt id=\"p1\">[</bpt>While statement<ept id=\"p1\">](../../language-reference/keywords/while.md)</ept>","source":"[While statement](../../language-reference/keywords/while.md)"},{"pos":[11407,11462],"content":"<bpt id=\"p1\">[</bpt>Do statement<ept id=\"p1\">](../../language-reference/keywords/do.md)</ept>","source":"[Do statement](../../language-reference/keywords/do.md)"},{"pos":[11465,11522],"content":"<bpt id=\"p1\">[</bpt>For statement<ept id=\"p1\">](../../language-reference/keywords/for.md)</ept>","source":"[For statement](../../language-reference/keywords/for.md)"}]}