<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="pack-uris-in-wpf.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a36cdf9f8cce935c8310e2ce9ffc79f67d077fe6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\pack-uris-in-wpf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bddeefe72d39fe6d4ee7d81e9c9c974ca2994aa4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d89d69d85df0b317753dc5dacc359acd43fd2772</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Pack URIs in WPF</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Pack URIs in WPF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Windows Presentation Foundation (WPF), <ph id="ph1">[!INCLUDE[TLA#tla_uri#plural](../../../../includes/tlasharptla-urisharpplural-md.md)]</ph> are used to identify and load files in many ways, including the following:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Specifying the <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> to show when an application first starts.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Loading images.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Navigating to pages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Loading non-executable data files.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Furthermore, <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> can be used to identify and load files from a variety of locations, including the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The current assembly.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A referenced assembly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A location relative to an assembly.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The application's site of origin.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To provide a consistent mechanism for identifying and loading these types of files from these locations, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> leverages the extensibility of the <bpt id="p1">*</bpt>pack URI scheme<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of the scheme, covers how to construct pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> for a variety of scenarios, discusses absolute and relative <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> resolution, before showing how to use pack <ph id="ph4">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> from both markup and code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Pack URI Scheme</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> scheme is used by the <bpt id="p1">[</bpt>Open Packaging Conventions<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=71255)</ept> (OPC) specification, which describes a model for organizing and identifying content.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The key elements of this model are packages and parts, where a <bpt id="p1">*</bpt>package<ept id="p1">*</ept> is a logical container for one or more logical <bpt id="p2">*</bpt>parts<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following figure illustrates this concept.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Package and Parts diagram</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To identify parts, the OPC specification leverages the extensibility of RFC 2396 (Uniform Resource Identifiers (URI): Generic Syntax) to define the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> scheme.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The scheme that is specified by a <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> is defined by its prefix; http, ftp, and file are well-known examples.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> scheme uses "pack" as its scheme, and contains two components: authority and path.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following is the format for a pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>pack://<bpt id="p1">*</bpt>authority<ept id="p1">*</ept><ph id="ph1">/</ph><bpt id="p2">*</bpt>path<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>authority<ept id="p1">*</ept> specifies the type of package that a part is contained by, while the <bpt id="p2">*</bpt>path<ept id="p2">*</ept> specifies the location of a part within a package.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This concept is illustrated by the following figure:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Relationship among package, authority, and path</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Packages and parts are analogous to applications and files, where an application (package) can include one or more files (parts), including:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Resource files that are compiled into the local assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Resource files that are compiled into a referenced assembly.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Resource files that are compiled into a referencing assembly.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Content files.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Site of origin files.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To access these types of files, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> supports two authorities: application:/// and siteoforigin:///.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The application:/// authority identifies application data files that are known at compile time, including resource and content files.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The siteoforigin:/// authority identifies site of origin files.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The scope of each authority is shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Pack URI diagram</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The authority component of a pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> is an embedded <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that points to a package and must conform to RFC 2396.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Additionally, the "/" character must be replaced with the "," character, and reserved characters such as "%" and "?" must be escaped.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See the OPC for details.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following sections explain how to construct pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> using these two authorities in conjunction with the appropriate paths for identifying resource, content, and site of origin files.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Resource File Pack URIs</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Resource files are configured as <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph2">`Resource`</ph> items and are compiled into assemblies.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> supports the construction of pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that can be used to identify resource files that are either compiled into the local assembly or compiled into an assembly that is referenced from the local assembly.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Local Assembly Resource File</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a resource file that is compiled into the local assembly uses the following authority and path:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Authority<ept id="p1">**</ept>: application:///.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Path<ept id="p1">**</ept>: The name of the resource file, including its path, relative to the local assembly project folder root.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> resource file that is located in the root of the local assembly's project folder.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> resource file that is located in a subfolder of the local assembly's project folder.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Referenced Assembly Resource File</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a resource file that is compiled into a referenced assembly uses the following authority and path:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Authority<ept id="p1">**</ept>: application:///.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Path<ept id="p1">**</ept>: The name of a resource file that is compiled into a referenced assembly.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The path must conform to the following format:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>AssemblyShortName<ept id="p1">*</ept>{<bpt id="p2">*</bpt>;Version<ept id="p2">*</ept>]{<bpt id="p3">*</bpt>;PublicKey<ept id="p3">*</ept>];component/<bpt id="p4">*</bpt>Path<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AssemblyShortName<ept id="p1">**</ept>: the short name for the referenced assembly.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>;Version<ept id="p1">**</ept> [optional]: the version of the referenced assembly that contains the resource file.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This is used when two or more referenced assemblies with the same short name are loaded.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>;PublicKey<ept id="p1">**</ept> [optional]: the public key that was used to sign the referenced assembly.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This is used when two or more referenced assemblies with the same short name are loaded.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>;component<ept id="p1">**</ept>: specifies that the assembly being referred to is referenced from the local assembly.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/Path<ept id="p1">**</ept>: the name of the resource file, including its path, relative to the root of the referenced assembly's project folder.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> resource file that is located in the root of the referenced assembly's project folder.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> resource file that is located in a subfolder of the referenced assembly's project folder.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> resource file that is located in the root folder of a referenced, version-specific assembly's project folder.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Note that the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> syntax for referenced assembly resource files can be used only with the application:/// authority.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, the following is not supported in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Content File Pack URIs</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a content file uses the following authority and path:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Authority<ept id="p1">**</ept>: application:///.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Path<ept id="p1">**</ept>: The name of the content file, including its path relative to the file system location of the application's main executable assembly.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> content file, located in the same folder as the executable assembly.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> content file, located in a subfolder that is relative to the application's executable assembly.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> content files cannot be navigated to.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> scheme only supports navigation to <ph id="ph2">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> files that are located at the site of origin.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Site of Origin Pack URIs</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a site of origin file uses the following authority and path:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Authority<ept id="p1">**</ept>: siteoforigin:///.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Path<ept id="p1">**</ept>: The name of the site of origin file, including its path relative to the location from which the executable assembly was launched.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> site of origin file, stored in the location from which the executable assembly is launched.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following example shows the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> site of origin file, stored in subfolder that is relative to the location from which the application's executable assembly is launched.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Page Files</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> files that are configured as <ph id="ph2">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph3">`Page`</ph> items are compiled into assemblies in the same way as resource files.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Consequently, <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph2">`Page`</ph> items can be identified using pack <ph id="ph3">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> for resource files.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The types of <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> files that are commonly configured as <ph id="ph2">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph3">`Page`</ph> items have one of the following as their root element:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Absolute vs. Relative Pack URIs</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A fully qualified pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> includes the scheme, the authority, and the path, and it is considered an absolute pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>As a simplification for developers, <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> elements typically allow you to set appropriate attributes with a relative pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>, which includes only the path.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For example, consider the following absolute pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for a resource file in the local assembly.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The relative pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that refers to this resource file would be the following.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Because site of origin files are not associated with assemblies, they can only be referred to with absolute pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>By default, a relative pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> is considered relative to the location of the markup or code that contains the reference.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If a leading backslash is used, however, the relative pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> reference is then considered relative to the root of the application.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, consider the following project structure.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If Page1.xaml contains a <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that references <bpt id="p1">*</bpt>Root<ept id="p1">*</ept>\SubFolder\Page2.xaml, the reference can use the following relative pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If Page1.xaml contains a <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that references <bpt id="p1">*</bpt>Root<ept id="p1">*</ept>\Page2.xaml, the reference can use the following relative pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Pack URI Resolution</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The format of pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> makes it possible for pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> for different types of files to look the same.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For example, consider the following absolute pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This absolute pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> could refer to either a resource file in the local assembly or a content file.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The same is true for the following relative <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In order to determine the type of file that a pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> refers to, <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> resolves <ph id="ph3">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> for resource files in local assemblies and content files by using the following heuristics:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Probe the assembly metadata for an <ph id="ph1">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> attribute that matches the pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> attribute is found, the path of the pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> refers to a content file.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> attribute is not found, probe the set resource files that are compiled into the local assembly.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If a resource file that matches the path of the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> is found, the path of the pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> refers to a resource file.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the resource is not found, the internally created <ph id="ph1">&lt;xref:System.Uri&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> resolution does not apply for <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that refer to the following:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Content files in referenced assemblies: these file types are not supported by <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Embedded files in referenced assemblies: <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that identify them are unique because they include both the name of the referenced assembly and the <ph id="ph2">`;component`</ph> suffix.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Site of origin files: <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that identify them are unique because they are the only files that can be identified by pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that contain the siteoforigin:/// authority.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>One simplification that pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> resolution allows is for code to be somewhat independent of the locations of resource and content files.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, if you have a resource file in the local assembly that is reconfigured to be a content file, the pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for the resource remains the same, as does the code that uses the pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Programming with Pack URIs</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Many <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> classes implement properties that can be set with pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph>, including:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>These properties can be set from both markup and code.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This section demonstrates the basic constructions for both and then shows examples of common scenarios.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Using Pack URIs in Markup</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> is specified in markup by setting the element of an attribute with the pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Table 1 illustrates the various absolute pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that you can specify in markup.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Table 1: Absolute Pack URIs in Markup</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>File</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Absolute pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Resource file - local assembly</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Resource file in subfolder - local assembly</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Resource file - referenced assembly</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Resource file in subfolder of referenced assembly</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Resource file in versioned referenced assembly</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Content file</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Content file in subfolder</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Site of origin file</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Site of origin file in subfolder</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Table 2 illustrates the various relative pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that you can specify in markup.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Table 2: Relative Pack URIs in Markup</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>File</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Relative pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Resource file in local assembly</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Resource file in subfolder of local assembly</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Resource file in referenced assembly</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Resource file in subfolder of referenced assembly</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Content file</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Content file in subfolder</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Using Pack URIs in Code</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You specify a pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> in code by instantiating the <ph id="ph2">&lt;xref:System.Uri&gt;</ph> class and passing the pack <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> as a parameter to the constructor.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This is demonstrated in the following example.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">&lt;xref:System.Uri&gt;</ph> class considers pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> to be absolute.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Consequently, an exception is raised when an instance of the <ph id="ph1">&lt;xref:System.Uri&gt;</ph> class is created with a relative pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Fortunately, the <ph id="ph1">&lt;xref:System.Uri.%23ctor%28System.String%2CSystem.UriKind%29&gt;</ph> overload of the <ph id="ph2">&lt;xref:System.Uri&gt;</ph> class constructor accepts a parameter of type <ph id="ph3">&lt;xref:System.UriKind&gt;</ph> to allow you to specify whether a pack <ph id="ph4">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> is either absolute or relative.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You should specify only <ph id="ph1">&lt;xref:System.UriKind.Absolute&gt;</ph> or <ph id="ph2">&lt;xref:System.UriKind.Relative&gt;</ph> when you are certain that the provided pack <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> is one or the other.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you don't know the type of pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that is used, such as when a user enters a pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> at run time, use <ph id="ph3">&lt;xref:System.UriKind.RelativeOrAbsolute&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Table 3 illustrates the various relative pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that you can specify in code by using <ph id="ph2">&lt;xref:System.Uri?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Table 3: Absolute Pack URIs in Code</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>File</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Absolute pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Resource file - local assembly</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Resource file in subfolder - local assembly</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Resource file - referenced assembly</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Resource file in subfolder of referenced assembly</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Resource file in versioned referenced assembly</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Content file</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Content file in subfolder</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Site of origin file</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Site of origin file in subfolder</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Table 4 illustrates the various relative pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> that you can specify in code using <ph id="ph2">&lt;xref:System.Uri?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Table 4: Relative Pack URIs in Code</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>File</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Relative pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Resource file - local assembly</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Resource file in subfolder - local assembly</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Resource file - referenced assembly</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Resource file in subfolder - referenced assembly</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Content file</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Content file in subfolder</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Common Pack URI Scenarios</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The preceding sections have discussed how to construct pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> to identify resource, content, and site of origin files.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, these constructions are used in a variety of ways, and the following sections cover several common usages.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Specifying the UI to Show When an Application Starts</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> specifies the first <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> to show when a <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application is launched.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>For standalone applications, the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> can be a window, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Standalone applications and <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](../../../../includes/tlasharptla-xbapsharpplural-md.md)]</ph> can also specify a page as the initial UI, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>If the application is a standalone application and a page is specified with <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> opens a <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> to host the page.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, the page is shown in the host browser.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Navigating to a Page</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The following example shows how to navigate to a page.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For more information on the various ways to navigate in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, see <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](navigation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Specifying a Window Icon</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a URI to specify a window's icon.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Loading Image, Audio, and Video Files</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> allows applications to use a wide variety of media types, all of which can be identified and loaded with pack <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph>, as shown in the following examples.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>For more information on working with media content, see <bpt id="p1">[</bpt>Graphics and Multimedia<ept id="p1">](../graphics-multimedia/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Loading a Resource Dictionary from the Site of Origin</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Resource dictionaries (<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>) can be used to support application themes.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>One way to create and manage themes is to create multiple themes as resource dictionaries that are located at an application's site of origin.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>This allows themes to be added and updated without recompiling and redeploying an application.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>These resource dictionaries can be identified and loaded using pack <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph>, which is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>For an overview of themes in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../controls/styling-and-templating.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](wpf-application-resource-content-and-data-files.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>