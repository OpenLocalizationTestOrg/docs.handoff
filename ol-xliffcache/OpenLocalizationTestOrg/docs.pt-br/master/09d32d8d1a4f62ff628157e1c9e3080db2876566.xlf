<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="binding-declarations-overview.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09d32d8d1a4f62ff628157e1c9e3080db2876566</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\data\binding-declarations-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1c331efd700ba96ed42b7827f2987eb678802e3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d13c950473ae59da665f0655efd0edf3a1bc8c8a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Binding Declarations Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Binding Declarations Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic discusses the different ways you can declare a binding.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Before reading this topic, it is important that you are familiar with the concept and usage of markup extensions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about markup extensions, see <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](../../../../docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic does not cover data binding concepts.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For a discussion of data binding concepts, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Declaring a Binding in XAML</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This section discusses how to declare a binding in XAML.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Markup Extension Usage</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> is a markup extension.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you use the binding extension to declare a binding, the declaration consists of a series of clauses following the <ph id="ph1">`Binding`</ph> keyword and separated by commas (,).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The clauses in the binding declaration can be in any order and there are many possible combinations.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The clauses are <bpt id="p1">*</bpt>Name<ept id="p1">*</ept><ph id="ph1">=</ph><bpt id="p2">*</bpt>Value<ept id="p2">*</ept> pairs where <bpt id="p3">*</bpt>Name<ept id="p3">*</ept> is the name of the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> property and <bpt id="p4">*</bpt>Value<ept id="p4">*</ept> is the value you are setting for the property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When creating binding declaration strings in markup, they must be attached to the specific dependency property of a target object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows how to bind the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox.Text%2A?displayProperty=fullName&gt;</ph> property using the binding extension, specifying the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>SimpleBinding#BDO1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml#bdo1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can specify most of the properties of the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> class this way.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about the binding extension as well as for a list of <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> properties that cannot be set using the binding extension, see the <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/binding-markup-extension.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Object Element Syntax</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Object element syntax is an alternative to creating the binding declaration.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In most cases, there is no particular advantage to using either the markup extension or the object element syntax.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, in cases which the markup extension does not support your scenario, such as when your property value is of a non-string type for which no type conversion exists, you need to use the object element syntax.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following is an example of both the object element syntax and the markup extension usage:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>BindConversionMarkup#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/BindConversionMarkup/CSharp/Page1.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The example binds the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock.Foreground%2A&gt;</ph> property by declaring a binding using the extension syntax.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The binding declaration for the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock.Text%2A&gt;</ph> property uses the object element syntax.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about the different terms, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>MultiBinding and PriorityBinding</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph> do not support the XAML extension syntax.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Therefore, you must use the object element syntax if you are declaring a <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph> in XAML.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creating a Binding in Code</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Another way to specify a binding is to set properties directly on a <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object in code.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object and specify the properties in code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`TheConverter`</ph> is an object that implements the <ph id="ph2">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>BindConversion#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>BindConversion#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>BindConversion#end1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#end1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>BindConversion#end1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#end1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the object you are binding is a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> you can call the <ph id="ph3">`SetBinding`</ph> method on your object directly instead of using <ph id="ph4">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Create a Binding in Code<ept id="p1">](../../../../docs/framework/wpf/data/how-to-create-a-binding-in-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Binding Path Syntax</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property to specify the source value you want to bind to:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the simplest case, the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property value is the name of the property of the source object to use for the binding, such as <ph id="ph2">`Path=PropertyName`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Subproperties of a property can be specified by a similar syntax as in <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](../../../../includes/tlasharptla-cshrp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For instance, the clause <ph id="ph1">`Path=ShoppingCart.Order`</ph> sets the binding to the subproperty <ph id="ph2">`Order`</ph> of the object or property <ph id="ph3">`ShoppingCart`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To bind to an attached property, place parentheses around the attached property.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, to bind to the attached property <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;</ph>, the syntax is <ph id="ph2">`Path=(DockPanel.Dock)`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Indexers of a property can be specified within square brackets following the property name where the indexer is applied.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For instance, the clause <ph id="ph1">`Path=ShoppingCart[0]`</ph> sets the binding to the index that corresponds to how your property's internal indexing handles the literal string "0".</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Nested indexers are also supported.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Indexers and subproperties can be mixed in a <ph id="ph1">`Path`</ph> clause; for example, <ph id="ph2">`Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`</ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Inside indexers you can have multiple indexer parameters separated by commas (,).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The type of each parameter can be specified with parentheses.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, you can have <ph id="ph1">`Path="[(sys:Int32)42,(sys:Int32)24]"`</ph>, where <ph id="ph2">`sys`</ph> is mapped to the <ph id="ph3">`System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When the source is a collection view, the current item can be specified with a slash (/).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, the clause <ph id="ph1">`Path=/`</ph> sets the binding to the current item in the view.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When the source is a collection, this syntax specifies the current item of the default collection view.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Property names and slashes can be combined to traverse properties that are collections.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Path=/Offices/ManagerName`</ph> specifies the current item of the source collection, which contains an <ph id="ph2">`Offices`</ph> property that is also a collection.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Its current item is an object that contains a <ph id="ph1">`ManagerName`</ph> property.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Optionally, a period (.) path can be used to bind to the current source.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Text="{Binding}"`</ph> is equivalent to <ph id="ph2">`Text="{Binding Path=.}"`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Escaping Mechanism</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Inside indexers ([ ]), the caret character (^) escapes the next character.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> in XAML, you also need to escape (using XML entities) certain characters that are special to the XML language definition:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`&amp;`</ph> to escape the character "&amp;".</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`&gt;`</ph> to escape the end tag "&gt;".</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Additionally, if you describe the entire binding in an attribute using the markup extension syntax, you need to escape (using backslash <ph id="ph1">\\</ph>) characters that are special to the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> markup extension parser:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Backslash (<ph id="ph1">\\</ph>) is the escape character itself.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The equal sign (=) separates property name from property value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Comma (,) separates properties.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The right curly brace (}) is the end of a markup extension.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Default Behaviors</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The default behavior is as follows if not specified in the declaration.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A default converter is created that tries to do a type conversion between the binding source value and the binding target value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a conversion cannot be made, the default converter returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you do not set <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ConverterCulture%2A&gt;</ph>, the binding engine uses the <ph id="ph2">`Language`</ph> property of the binding target object.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In XAML, this defaults to "en-US" or inherits the value from the root element (or any element) of the page, if one has been explicitly set.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>As long as the binding already has a data context (for instance, the inherited data context coming from a parent element), and whatever item or collection being returned by that context is appropriate for binding without requiring further path modification, a binding declaration can have no clauses at all: <ph id="ph1">`{Binding}`</ph> This is often the way a binding is specified for data styling, where the binding acts upon a collection.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more information, see the "Entire Objects Used as a Binding Source" section in the <bpt id="p1">[</bpt>Binding Sources Overview<ept id="p1">](../../../../docs/framework/wpf/data/binding-sources-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> varies between one-way and two-way depending on the dependency property that is being bound.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can always declare the binding mode explicitly to ensure that your binding has the desired behavior.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In general, user-editable control properties, such as <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox.Text%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A?displayProperty=fullName&gt;</ph>, default to two-way bindings, whereas most other properties default to one-way bindings.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> value varies between <ph id="ph2">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph> depending on the bound dependency property as well.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The default value for most dependency properties is <ph id="ph1">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>, while the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox.Text%2A?displayProperty=fullName&gt;</ph> property has a default value of <ph id="ph3">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How-to Topics<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-how-to-topics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-data-binding.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](../../../../docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>