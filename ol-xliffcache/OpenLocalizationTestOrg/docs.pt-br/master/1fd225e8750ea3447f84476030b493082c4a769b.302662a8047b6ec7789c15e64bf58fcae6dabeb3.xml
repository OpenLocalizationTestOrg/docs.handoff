{"content":"---\ntitle: \"FILESTREAM Data | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: bd8b845c-0f09-4295-b466-97ef106eefa8\ncaps.latest.revision: 5\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# FILESTREAM Data\nThe FILESTREAM storage attribute is for binary (BLOB) data stored in a varbinary(max) column. Before FILESTREAM, storing binary data required special handling. Unstructured data, such as text documents, images and video, is often stored outside of the database, making it difficult to manage.  \n  \n> [!NOTE]\n>  You must install the .NET Framework 3.5 SP1 (or later) to work with FILESTREAM data using SqlClient.  \n  \n Specifying the FILESTREAM attribute on a varbinary(max) column causes [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] to store the data on the local NTFS file system instead of in the database file. Although it is stored separately, you can use the same [!INCLUDE[tsql](../../../../../includes/tsql-md.md)] statements that are supported for working with varbinary(max) data that is stored in the database.  \n  \n## SqlClient Support for FILESTREAM  \n The [!INCLUDE[dnprdnshort](../../../../../includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)], <xref:System.Data.SqlClient>, supports reading and writing to FILESTREAM data using the <xref:System.Data.SqlTypes.SqlFileStream> class defined in the <xref:System.Data.SqlTypes> namespace. `SqlFileStream` inherits from the <xref:System.IO.Stream> class, which provides methods for reading and writing to streams of data. Reading from a stream transfers data from the stream into a data structure, such as an array of bytes. Writing transfers the data from the data structure into a stream.  \n  \n### Creating the [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Table  \n The following [!INCLUDE[tsql](../../../../../includes/tsql-md.md)] statements creates a table named employees and inserts a row of data. Once you have enabled FILESTREAM storage, you can use this table in conjunction with the code examples that follow. The links to resources in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Books Online are located at the end of this topic.  \n  \n```  \nCREATE TABLE employees  \n(  \n  EmployeeId INT  NOT NULL  PRIMARY KEY,  \n  Photo VARBINARY(MAX) FILESTREAM  NULL,  \n  RowGuid UNIQUEIDENTIFIER  NOT NULL  ROWGUIDCOL  \n  UNIQUE DEFAULT NEWID()  \n)  \nGO  \nInsert into employees  \nValues(1, 0x00, default)  \nGO  \n  \n```  \n  \n### Example: Reading, Overwriting, and Inserting FILESTREAM Data  \n The following sample demonstrates how to read data from a FILESTREAM. The code gets the logical path to the file, setting the `FileAccess` to `Read` and the `FileOptions` to `SequentialScan`. The code then reads the bytes from the SqlFileStream into the buffer. The bytes are then written to the console window.  \n  \n The sample also demonstrates how to write data to a FILESTREAM in which all existing data is overwritten. The code gets the logical path to the file and creates the `SqlFileStream`, setting the `FileAccess` to `Write` and the `FileOptions` to `SequentialScan`. A single byte is written to the `SqlFileStream`, replacing any data in the file.  \n  \n The sample also demonstrates how to write data to a FILESTREAM by using the Seek method to append data to the end of the file. The code gets the logical path to the file and creates the `SqlFileStream`, setting the `FileAccess` to `ReadWrite` and the `FileOptions` to `SequentialScan`. The code uses the Seek method to seek to the end of the file, appending a single byte to the existing file.  \n  \n```csharp  \nusing System;  \nusing System.Data.SqlClient;  \nusing System.Data.SqlTypes;  \nusing System.Data;  \nusing System.IO;  \n  \nnamespace FileStreamTest  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(\"server=(local);integrated security=true;database=myDB\");  \n            ReadFilestream(builder);  \n            OverwriteFilestream(builder);  \n            InsertFilestream(builder);  \n  \n            Console.WriteLine(\"Done\");  \n        }  \n  \n        private static void ReadFilestream(SqlConnectionStringBuilder connStringBuilder)  \n        {  \n            using (SqlConnection connection = new SqlConnection(connStringBuilder.ToString()))  \n            {  \n                connection.Open();  \n                SqlCommand command = new SqlCommand(\"SELECT TOP(1) Photo.PathName(), GET_FILESTREAM_TRANSACTION_CONTEXT() FROM employees\", connection);  \n  \n                SqlTransaction tran = connection.BeginTransaction(IsolationLevel.ReadCommitted);  \n                command.Transaction = tran;  \n  \n                using (SqlDataReader reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        // Get the pointer for the file  \n                        string path = reader.GetString(0);  \n                        byte[] transactionContext = reader.GetSqlBytes(1).Buffer;  \n  \n                        // Create the SqlFileStream  \n                        using (Stream fileStream = new SqlFileStream(path, transactionContext, FileAccess.Read, FileOptions.SequentialScan, allocationSize: 0))  \n                        {  \n                            // Read the contents as bytes and write them to the console  \n                            for (long index = 0; index < fileStream.Length; index++)  \n                            {  \n                                Console.WriteLine(fileStream.ReadByte());  \n                            }  \n                        }  \n                    }  \n                }  \n                tran.Commit();  \n            }  \n        }  \n  \n        private static void OverwriteFilestream(SqlConnectionStringBuilder connStringBuilder)  \n        {  \n            using (SqlConnection connection = new SqlConnection(connStringBuilder.ToString()))  \n            {  \n                connection.Open();  \n  \n                SqlCommand command = new SqlCommand(\"SELECT TOP(1) Photo.PathName(), GET_FILESTREAM_TRANSACTION_CONTEXT() FROM employees\", connection);  \n  \n                SqlTransaction tran = connection.BeginTransaction(IsolationLevel.ReadCommitted);  \n                command.Transaction = tran;  \n  \n                using (SqlDataReader reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        // Get the pointer for file   \n                        string path = reader.GetString(0);  \n                        byte[] transactionContext = reader.GetSqlBytes(1).Buffer;  \n  \n                        // Create the SqlFileStream  \n                        using (Stream fileStream = new SqlFileStream(path, transactionContext, FileAccess.Write, FileOptions.SequentialScan, allocationSize: 0))  \n                        {  \n                            // Write a single byte to the file. This will  \n                            // replace any data in the file.  \n                            fileStream.WriteByte(0x01);  \n                        }  \n                    }  \n                }  \n                tran.Commit();  \n            }  \n        }  \n  \n        private static void InsertFilestream(SqlConnectionStringBuilder connStringBuilder)  \n        {  \n            using (SqlConnection connection = new SqlConnection(connStringBuilder.ToString()))  \n            {  \n                connection.Open();  \n  \n                SqlCommand command = new SqlCommand(\"SELECT TOP(1) Photo.PathName(), GET_FILESTREAM_TRANSACTION_CONTEXT() FROM employees\", connection);  \n  \n                SqlTransaction tran = connection.BeginTransaction(IsolationLevel.ReadCommitted);  \n                command.Transaction = tran;  \n  \n                using (SqlDataReader reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        // Get the pointer for file  \n                        string path = reader.GetString(0);  \n                        byte[] transactionContext = reader.GetSqlBytes(1).Buffer;  \n  \n                        using (Stream fileStream = new SqlFileStream(path, transactionContext, FileAccess.Write, FileOptions.SequentialScan, allocationSize: 0))  \n                        {  \n                            // Seek to the end of the file  \n                            fileStream.Seek(0, SeekOrigin.End);  \n  \n                            // Append a single byte   \n                            fileStream.WriteByte(0x01);  \n                        }  \n                    }  \n                }  \n                tran.Commit();  \n            }  \n  \n        }  \n    }  \n} using (SqlConnection connection = new SqlConnection(  \n    connStringBuilder.ToString()))  \n{  \n    connection.Open();  \n  \n    SqlCommand command = new SqlCommand(\"\", connection);  \n    command.CommandText = \"select Top(1) Photo.PathName(), \"  \n    + \"GET_FILESTREAM_TRANSACTION_CONTEXT () from employees\";  \n  \n    SqlTransaction tran = connection.BeginTransaction(  \n        System.Data.IsolationLevel.ReadCommitted);  \n    command.Transaction = tran;  \n  \n    using (SqlDataReader reader = command.ExecuteReader())  \n    {  \n        while (reader.Read())  \n        {  \n            // Get the pointer for file  \n            string path = reader.GetString(0);  \n            byte[] transactionContext = reader.GetSqlBytes(1).Buffer;  \n  \n            FileStream fileStream = new SqlFileStream(path,  \n                (byte[])reader.GetValue(1),  \n                FileAccess.ReadWrite,  \n                FileOptions.SequentialScan, 0);  \n  \n            // Seek to the end of the file  \n            fs.Seek(0, SeekOrigin.End);  \n  \n            // Append a single byte   \n            fileStream.WriteByte(0x01);  \n            fileStream.Close();  \n        }  \n    }  \n    tran.Commit();  \n}  \n```  \n  \n For another sample, see [How to store and fetch binary data into a file stream column](http://www.codeproject.com/Articles/32216/How-to-store-and-fetch-binary-data-into-a-file-str).  \n  \n## Resources in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Books Online  \n The complete documentation for FILESTREAM is located in the following sections in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Books Online.  \n  \n|Topic|Description|  \n|-----------|-----------------|  \n|[Designing and Implementing FILESTREAM Storage](http://msdn2.microsoft.com/library/bb895234\\(SQL.105\\).aspx)|Provides links to FILESTREAM documentation and related topics.|  \n|[FILESTREAM Overview](http://msdn2.microsoft.com/library/bb933993\\(SQL.105\\).aspx)|Describes when to use FILESTREAM storage and how it integrates the SQL Server Database Engine with an NTFS file system.|  \n|[Getting Started with FILESTREAM Storage](http://msdn.microsoft.com/library/bb933995\\(SQL.105\\).aspx)|Describes how to enable FILESTREAM on an instance of SQL Server, how to create a database and a table to stored FILESTREAM data, and how to manipulate rows containing FILESTREAM data.|  \n|[Using FILESTREAM Storage in Client Applications](http://msdn.microsoft.com/library/bb933877\\(SQL.105\\).aspx)|Describes the Win32 API functions for working with FILESTREAM data.|  \n|[FILESTREAM and Other SQL Server Features](http://msdn.microsoft.com/library/bb895334\\(SQL.105\\).aspx)|Provides considerations, guidelines and limitations for using FILESTREAM data with other features of SQL Server.|  \n  \n## See Also  \n [SQL Server Data Types and ADO.NET](../../../../../docs/framework/data/adonet/sql/sql-server-data-types.md)   \n [Retrieving and Modifying Data in ADO.NET](../../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)   \n [Code Access Security and ADO.NET](../../../../../docs/framework/data/adonet/code-access-security.md)   \n [SQL Server Binary and Large-Value Data](../../../../../docs/framework/data/adonet/sql/sql-server-binary-and-large-value-data.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[4,346],"nodes":[{"content":"FILESTREAM Data | Microsoft Docs","nodes":[{"pos":[0,32],"content":"FILESTREAM Data | Microsoft Docs","nodes":[{"content":"FILESTREAM Data | Microsoft Docs","pos":[0,32]}]}],"pos":[6,41],"yaml":true}],"content":"title: \"FILESTREAM Data | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: bd8b845c-0f09-4295-b466-97ef106eefa8\ncaps.latest.revision: 5\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","yamlblock":true},{"pos":[353,368],"content":"FILESTREAM Data","linkify":"FILESTREAM Data","nodes":[{"content":"FILESTREAM Data","pos":[0,15]}]},{"content":"The FILESTREAM storage attribute is for binary (BLOB) data stored in a varbinary(max) column.","pos":[369,462]},{"content":"Before FILESTREAM, storing binary data required special handling.","pos":[463,528]},{"content":"Unstructured data, such as text documents, images and video, is often stored outside of the database, making it difficult to manage.","pos":[529,661]},{"pos":[669,780],"content":"[!NOTE]\n You must install the .NET Framework 3.5 SP1 (or later) to work with FILESTREAM data using SqlClient.","leadings":["","> "],"nodes":[{"content":"You must install the .NET Framework 3.5 SP1 (or later) to work with FILESTREAM data using SqlClient.","pos":[9,109]}]},{"content":"Specifying the FILESTREAM attribute on a varbinary(max) column causes <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> to store the data on the local NTFS file system instead of in the database file.","pos":[787,1004],"source":"Specifying the FILESTREAM attribute on a varbinary(max) column causes [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] to store the data on the local NTFS file system instead of in the database file."},{"content":"Although it is stored separately, you can use the same <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph> statements that are supported for working with varbinary(max) data that is stored in the database.","pos":[1005,1211],"source":" Although it is stored separately, you can use the same [!INCLUDE[tsql](../../../../../includes/tsql-md.md)] statements that are supported for working with varbinary(max) data that is stored in the database."},{"pos":[1220,1252],"content":"SqlClient Support for FILESTREAM","linkify":"SqlClient Support for FILESTREAM","nodes":[{"content":"SqlClient Support for FILESTREAM","pos":[0,32]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../../includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph2\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph>, <ph id=\"ph3\">&lt;xref:System.Data.SqlClient&gt;</ph>, supports reading and writing to FILESTREAM data using the <ph id=\"ph4\">&lt;xref:System.Data.SqlTypes.SqlFileStream&gt;</ph> class defined in the <ph id=\"ph5\">&lt;xref:System.Data.SqlTypes&gt;</ph> namespace.","pos":[1256,1602],"source":"The [!INCLUDE[dnprdnshort](../../../../../includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)], <xref:System.Data.SqlClient>, supports reading and writing to FILESTREAM data using the <xref:System.Data.SqlTypes.SqlFileStream> class defined in the <xref:System.Data.SqlTypes> namespace."},{"content":"<ph id=\"ph1\">`SqlFileStream`</ph> inherits from the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> class, which provides methods for reading and writing to streams of data.","pos":[1603,1734],"source":"`SqlFileStream` inherits from the <xref:System.IO.Stream> class, which provides methods for reading and writing to streams of data."},{"content":"Reading from a stream transfers data from the stream into a data structure, such as an array of bytes.","pos":[1735,1837]},{"content":"Writing transfers the data from the data structure into a stream.","pos":[1838,1903]},{"pos":[1913,1998],"content":"Creating the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> Table","linkify":"Creating the [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Table","source":"Creating the [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Table"},{"content":"The following <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph> statements creates a table named employees and inserts a row of data.","pos":[2002,2138],"source":"The following [!INCLUDE[tsql](../../../../../includes/tsql-md.md)] statements creates a table named employees and inserts a row of data."},{"content":"Once you have enabled FILESTREAM storage, you can use this table in conjunction with the code examples that follow.","pos":[2139,2254]},{"content":"The links to resources in <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> Books Online are located at the end of this topic.","pos":[2255,2398],"source":" The links to resources in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Books Online are located at the end of this topic."},{"pos":[2684,2744],"content":"Example: Reading, Overwriting, and Inserting FILESTREAM Data","linkify":"Example: Reading, Overwriting, and Inserting FILESTREAM Data","nodes":[{"content":"Example: Reading, Overwriting, and Inserting FILESTREAM Data","pos":[0,60]}]},{"content":"The following sample demonstrates how to read data from a FILESTREAM.","pos":[2748,2817]},{"content":"The code gets the logical path to the file, setting the <ph id=\"ph1\">`FileAccess`</ph> to <ph id=\"ph2\">`Read`</ph> and the <ph id=\"ph3\">`FileOptions`</ph> to <ph id=\"ph4\">`SequentialScan`</ph>.","pos":[2818,2939],"source":" The code gets the logical path to the file, setting the `FileAccess` to `Read` and the `FileOptions` to `SequentialScan`."},{"content":"The code then reads the bytes from the SqlFileStream into the buffer.","pos":[2940,3009]},{"content":"The bytes are then written to the console window.","pos":[3010,3059]},{"content":"The sample also demonstrates how to write data to a FILESTREAM in which all existing data is overwritten.","pos":[3066,3171]},{"content":"The code gets the logical path to the file and creates the <ph id=\"ph1\">`SqlFileStream`</ph>, setting the <ph id=\"ph2\">`FileAccess`</ph> to <ph id=\"ph3\">`Write`</ph> and the <ph id=\"ph4\">`FileOptions`</ph> to <ph id=\"ph5\">`SequentialScan`</ph>.","pos":[3172,3326],"source":" The code gets the logical path to the file and creates the `SqlFileStream`, setting the `FileAccess` to `Write` and the `FileOptions` to `SequentialScan`."},{"content":"A single byte is written to the <ph id=\"ph1\">`SqlFileStream`</ph>, replacing any data in the file.","pos":[3327,3407],"source":" A single byte is written to the `SqlFileStream`, replacing any data in the file."},{"content":"The sample also demonstrates how to write data to a FILESTREAM by using the Seek method to append data to the end of the file.","pos":[3414,3540]},{"content":"The code gets the logical path to the file and creates the <ph id=\"ph1\">`SqlFileStream`</ph>, setting the <ph id=\"ph2\">`FileAccess`</ph> to <ph id=\"ph3\">`ReadWrite`</ph> and the <ph id=\"ph4\">`FileOptions`</ph> to <ph id=\"ph5\">`SequentialScan`</ph>.","pos":[3541,3699],"source":" The code gets the logical path to the file and creates the `SqlFileStream`, setting the `FileAccess` to `ReadWrite` and the `FileOptions` to `SequentialScan`."},{"content":"The code uses the Seek method to seek to the end of the file, appending a single byte to the existing file.","pos":[3700,3807]},{"pos":[10217,10398],"content":"For another sample, see <bpt id=\"p1\">[</bpt>How to store and fetch binary data into a file stream column<ept id=\"p1\">](http://www.codeproject.com/Articles/32216/How-to-store-and-fetch-binary-data-into-a-file-str)</ept>.","source":"For another sample, see [How to store and fetch binary data into a file stream column](http://www.codeproject.com/Articles/32216/How-to-store-and-fetch-binary-data-into-a-file-str)."},{"pos":[10407,10499],"content":"Resources in <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> Books Online","linkify":"Resources in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Books Online","source":"Resources in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Books Online"},{"pos":[10503,10665],"content":"The complete documentation for FILESTREAM is located in the following sections in <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> Books Online.","source":"The complete documentation for FILESTREAM is located in the following sections in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] Books Online."},{"content":"Topic","pos":[10672,10677]},{"content":"Description","pos":[10678,10689]},{"pos":[10728,10836],"content":"<bpt id=\"p1\">[</bpt>Designing and Implementing FILESTREAM Storage<ept id=\"p1\">](http://msdn2.microsoft.com/library/bb895234\\(SQL.105\\).aspx)</ept>","source":"[Designing and Implementing FILESTREAM Storage](http://msdn2.microsoft.com/library/bb895234\\(SQL.105\\).aspx)"},{"content":"Provides links to FILESTREAM documentation and related topics.","pos":[10837,10899]},{"pos":[10904,10986],"content":"<bpt id=\"p1\">[</bpt>FILESTREAM Overview<ept id=\"p1\">](http://msdn2.microsoft.com/library/bb933993\\(SQL.105\\).aspx)</ept>","source":"[FILESTREAM Overview](http://msdn2.microsoft.com/library/bb933993\\(SQL.105\\).aspx)"},{"content":"Describes when to use FILESTREAM storage and how it integrates the SQL Server Database Engine with an NTFS file system.","pos":[10987,11106]},{"pos":[11111,11212],"content":"<bpt id=\"p1\">[</bpt>Getting Started with FILESTREAM Storage<ept id=\"p1\">](http://msdn.microsoft.com/library/bb933995\\(SQL.105\\).aspx)</ept>","source":"[Getting Started with FILESTREAM Storage](http://msdn.microsoft.com/library/bb933995\\(SQL.105\\).aspx)"},{"content":"Describes how to enable FILESTREAM on an instance of SQL Server, how to create a database and a table to stored FILESTREAM data, and how to manipulate rows containing FILESTREAM data.","pos":[11213,11396]},{"pos":[11401,11510],"content":"<bpt id=\"p1\">[</bpt>Using FILESTREAM Storage in Client Applications<ept id=\"p1\">](http://msdn.microsoft.com/library/bb933877\\(SQL.105\\).aspx)</ept>","source":"[Using FILESTREAM Storage in Client Applications](http://msdn.microsoft.com/library/bb933877\\(SQL.105\\).aspx)"},{"content":"Describes the Win32 API functions for working with FILESTREAM data.","pos":[11511,11578]},{"pos":[11583,11685],"content":"<bpt id=\"p1\">[</bpt>FILESTREAM and Other SQL Server Features<ept id=\"p1\">](http://msdn.microsoft.com/library/bb895334\\(SQL.105\\).aspx)</ept>","source":"[FILESTREAM and Other SQL Server Features](http://msdn.microsoft.com/library/bb895334\\(SQL.105\\).aspx)"},{"content":"Provides considerations, guidelines and limitations for using FILESTREAM data with other features of SQL Server.","pos":[11686,11798]},{"pos":[11808,11816],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>SQL Server Data Types and ADO.NET<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/sql-server-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[11820,11928],"source":"[SQL Server Data Types and ADO.NET](../../../../../docs/framework/data/adonet/sql/sql-server-data-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Retrieving and Modifying Data in ADO.NET<ept id=\"p1\">](../../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept><ph id=\"ph1\"> </ph>","pos":[11932,12051],"source":"[Retrieving and Modifying Data in ADO.NET](../../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md) "},{"content":"<bpt id=\"p1\">[</bpt>Code Access Security and ADO.NET<ept id=\"p1\">](../../../../../docs/framework/data/adonet/code-access-security.md)</ept><ph id=\"ph1\"> </ph>","pos":[12055,12157],"source":"[Code Access Security and ADO.NET](../../../../../docs/framework/data/adonet/code-access-security.md) "},{"content":"<bpt id=\"p1\">[</bpt>SQL Server Binary and Large-Value Data<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/sql-server-binary-and-large-value-data.md)</ept><ph id=\"ph1\"> </ph>","pos":[12161,12291],"source":"[SQL Server Binary and Large-Value Data](../../../../../docs/framework/data/adonet/sql/sql-server-binary-and-large-value-data.md) "},{"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[12295,12398],"source":"[ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}