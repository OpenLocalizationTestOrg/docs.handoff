<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">099f072277c04a7320b01581e5e1f269f435a9e7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\delegates\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d82b8fea5ce4f0275ed1472772e49730069563f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ceb44466e23283e7c83b9dcd9cd977f39b84922</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Delegates (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Delegates (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>delegate<ept id="p1">](../../../csharp/language-reference/keywords/delegate.md)</ept> is a type that represents references to methods with a particular parameter list and return type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you instantiate a delegate, you can associate its instance with any method with a compatible signature and return type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can invoke (or call) the method through the delegate instance.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Delegates are used to pass methods as arguments to other methods.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Event handlers are nothing more than methods that are invoked through delegates.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You create a custom method, and a class such as a windows control can call your method when a certain event occurs.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example shows a delegate declaration:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideDelegates#20<ept id="p2">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/index_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Any method from any accessible class or struct that matches the delegate type can be assigned to the delegate.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The method can be either static or an instance method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This makes it possible to programmatically change method calls, and also plug new code into existing classes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the context of method overloading, the signature of a method does not include the return value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>But in the context of delegates, the signature does include the return value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In other words, a method must have the same return type as the delegate.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This ability to refer to a method as a parameter makes delegates ideal for defining callback methods.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, a reference to a method that compares two objects could be passed as an argument to a sort algorithm.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the comparison code is in a separate procedure, the sort algorithm can be written in a more general way.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Delegates Overview</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Delegates have the following properties:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Delegates are like C++ function pointers but are type safe.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Delegates allow methods to be passed as parameters.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Delegates can be used to define callback methods.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Delegates can be chained together; for example, multiple methods can be called on a single event.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Methods do not have to match the delegate type exactly.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Variance in Delegates<ept id="p1">](../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>C# version 2.0 introduced the concept of <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>, which allow code blocks to be passed as parameters in place of a separately defined method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>C# 3.0 introduced lambda expressions as a more concise way of writing inline code blocks.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Both anonymous methods and lambda expressions (in certain contexts) are compiled to delegate types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Together, these features are now known as anonymous functions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about lambda expressions, see <bpt id="p1">[</bpt>Anonymous Functions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Delegates<ept id="p1">](../../../csharp/programming-guide/delegates/using-delegates.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>When to Use Delegates Instead of Interfaces (C# Programming Guide)<ept id="p1">](http://msdn.microsoft.com/en-us/2e759bdf-7ca4-4005-8597-af92edf6d8f0)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates with Named vs. Anonymous Methods<ept id="p1">](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Variance in Delegates<ept id="p1">](../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Combine Delegates (Multicast Delegates)<ept id="p1">](../../../csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Declare, Instantiate, and Use a Delegate<ept id="p1">](../../../csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Featured Book Chapters</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates, Events, and Lambda Expressions<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=195395)</ept> in <bpt id="p2">[</bpt>C# 3.0 Cookbook, Third Edition: More than 250 solutions for C# 3.0 programmers<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=195369)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates and Events<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=195418)</ept> in <bpt id="p2">[</bpt>Learning C# 3.0: Master the fundamentals of C# 3.0<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=195412)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Delegate&gt;</ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](../../../csharp/programming-guide/events/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>