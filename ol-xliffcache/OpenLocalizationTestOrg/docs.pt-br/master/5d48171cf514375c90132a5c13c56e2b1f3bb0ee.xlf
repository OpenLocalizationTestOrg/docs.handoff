<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d48171cf514375c90132a5c13c56e2b1f3bb0ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\extending\choosing-a-message-exchange-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f774b1483b82e183b2870b0693449c8fa7dbb903</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">649e9d3d8bcf63b115d78e92dd13cbf6019eb49d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Choosing a Message Exchange Pattern | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Choosing a Message Exchange Pattern</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The first step in writing a custom transport is to decide which <bpt id="p1">*</bpt>message exchange patterns<ept id="p1">*</ept> (or MEPs) are required for the channel you are developing.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes the options available and discusses the various requirements.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This is the first task in the channel development task list described in <bpt id="p1">[</bpt>Developing Channels<ept id="p1">](../../../../docs/framework/wcf/extending/developing-channels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Six Message Exchange Patterns</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are three MEPs to choose from:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Datagram (<ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IOutputChannel&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When using a datagram MEP, a client sends a message using a <bpt id="p1">*</bpt>fire and forget<ept id="p1">*</ept> exchange.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A fire and forget exchange is one that requires out-of-band confirmation of successful delivery.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The message might be lost in transit and never reach the service.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the send operation completes successfully at the client end, it does not guarantee that the remote endpoint has received the message.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The datagram is a fundamental building block for messaging, as you can build your own protocols on top of itâ€”including reliable protocols and secure protocols.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Client datagram channels implement the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IOutputChannel&gt;</ph> interface and service datagram channels implement the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Request-Response (<ph id="ph1">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this MEP, a message is sent, and a reply is received.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The pattern consists of request-response pairs.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Examples of request-response calls are remote procedure calls (RPC) and browser GET requests.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This pattern is also known as half-duplex.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this MEP, client channels implement <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph> and service channels implement <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Duplex (<ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexChannel&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The duplex MEP allows an arbitrary number of messages to be sent by a client and received in any order.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The duplex MEP is like a phone conversation, where each word being spoken is a message.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because both sides can send and receive in this MEP, the interface implemented by the client and service channels is <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Choosing a message exchange pattern<ept id="p1">](../../../../docs/framework/wcf/extending/media/wcfc-basicthreemepsc.gif "wcfc_BasicThreeMEPsc")</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The three basic message exchange patterns.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Top to bottom: datagram, request-response, and duplex.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each of these MEPs can also support <bpt id="p1">*</bpt>sessions<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A session (and implementation of <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ISessionChannel%601?displayProperty=fullName&gt;</ph> of type <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ISession?displayProperty=fullName&gt;</ph>) correlates all messages sent and received on a channel.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The request-response pattern is a stand-alone two-message session, as the request and reply are correlated.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In contrast, the request-response pattern that supports sessions implies that all request/response pairs on that channel are correlated with each other.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This gives you a total of six MEPs to choose from:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Datagram</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Request-response</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Duplex</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Datagram with sessions</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Request-response with sessions</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Duplex with sessions</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For the UDP transport, the only MEP that is supported is datagram, because UDP is inherently a fire and forget protocol.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Sessions and Sessionful Channels</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the networking world, there are connection-oriented protocols (for example, TCP) and connection-less protocols (for example, UDP).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the term session to mean a connection-like logical abstraction.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Sessionful WCF protocols are similar to connection-oriented network protocols and sessionless WCF protocols are similar to connection-less network protocols.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the channel object model, each logical session manifests as an instance of a sessionful channel.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Therefore every new session created by the client, and accepted on the service, corresponds to a new sessionful channel on each side.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following diagram shows, on the top, the structure of sessionless channels, and on the bottom, the structure of sessionful channels.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Choosing a message exchange pattern<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wcf/extending/media/wcfc-sessionandsessionlesschannelsc.gif "</bpt>wcfc_SessionAndSessionlessChannelsc<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A client creates a new sessionful channel and sends a message.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>On the service side, the channel listener receives this message and detects that it belongs to a new session so it creates a new sessionful channel and hands it to the application (in response to the application calling AcceptChannel on the channel listener).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The application then receives this message and all subsequent messages sent in the same session through the same sessionful channel.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Another client (or the same client) creates a new sessionful and sends a message.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The channel listener detects this message is in a new session and creates a new sessionful channel and the process repeats.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Without sessions, there is no correlation between channels and sessions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Therefore a channel listener creates only one channel through which all received messages are delivered to the application.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>There is also no message ordering because there is no session within which to maintain message order.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The top portion of the preceding graphic illustrates a sessionless message exchange.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Starting and Terminating Sessions</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sessions are started on the client by simply creating a new sessionful channel.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>They are started on the service when the service receives a message that was sent in a new session.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Likewise, sessions are terminated by closing or aborting a sessionful channel.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The exception to this is <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph> which is used for both sending and receiving messages in a duplex, sessionful communication pattern.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It is possible that one side will want to stop sending messages but continue to receive messages therefore when using <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph> there is a mechanism that lets you close the output session indicating you will not send any more messages but keep the input session opened allowing you to continue to receive messages.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In general, sessions are closed on the outgoing side and not on the incoming side.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>That is, sessionful output channels can be closed, thereby cleanly terminating the session.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Closing a sessionful output channel causes the corresponding sessionful input channel to return null to the application calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A?displayProperty=fullName&gt;</ph> on the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>However sessionful input channels should not be closed unless <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A?displayProperty=fullName&gt;</ph> on the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph> returns null, indicating that the session is already closed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A?displayProperty=fullName&gt;</ph> on the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph> has not returned null, closing a sessionful input channel may throw an exception because it may receive unexpected messages while closing.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If a receiver wishes to terminate a session before the sender does, it should call <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> on the input channel, which abruptly terminates the session.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Writing Sessionful Channels</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>As a sessionful channel author, there are a few things your channel must do to provide sessions.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>On the send side, your channel needs to:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For each new channel, create a new session and associate it with a new session id which is a unique string.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Or obtain a new session from the sessionful channel below you in the stack.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For each message sent using this channel, if your channel created the session (as opposed to obtaining it from the layer below you), you need to associate the message with the session.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For protocol channels, this is typically done by adding a SOAP header.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For transport channels, this is typically done by creating a new transport connection or adding session information to the framing protocol.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For each message sent using this channel, you need to provide the delivery guarantees mentioned above.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you are relying on the channel below you to provide the session, that channel will also provide the delivery guarantees.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If youâ€™re providing the session yourself, you need to implement those guarantees as part of your protocol.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In general, if you are writing a protocol channel that assumes WCF on both sides you may require the TCP transport or the Reliable Messaging channel and rely on either one to provide a session.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A?displayProperty=fullName&gt;</ph> is called on your channel, perform the necessary work to close the session using either the specified timeout or the default one.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This can be as simple as calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> on the channel below you (if you just obtained the session from it) or sending a special SOAP message or closing a transport connection.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> is called on your channel, terminate the session abruptly without performing I/O.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This may mean doing nothing or may involve aborting a network connection or some other resource.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>On the receive side, your channel needs to:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For each incoming message, the channel listener must detect the session it belongs to.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If this is the first message in the session, the channel listener must create a new channel and return it from the call to <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IChannelListener%601.AcceptChannel%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Otherwise the channel listener must find the existing channel that corresponds to the session and deliver the message through that channel.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If your channel is providing the session (along with the required delivery guarantees) the receive side may be required to perform some actions such as re-order messages or send acknowledgements.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on your channel, perform the necessary work to close the session either the specified timeout or the default one.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This could result in exceptions if the channel receives a message while waiting for the close timeout to expire.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Thatâ€™s because the channel will be in the Closing state when it receives a message so it would throw.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> is called on your channel, terminate the session abruptly without performing I/O.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Again, this may mean doing nothing or may involve aborting a network connection or some other resource.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Channel Model Overview<ept id="p1">](../../../../docs/framework/wcf/extending/channel-model-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>