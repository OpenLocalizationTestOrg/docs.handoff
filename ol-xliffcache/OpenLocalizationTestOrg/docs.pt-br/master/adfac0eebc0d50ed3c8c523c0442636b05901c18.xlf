<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="option-strict-statement.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">adfac0eebc0d50ed3c8c523c0442636b05901c18</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\option-strict-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5c0e815d087720ab2a87db0bc1efafdd87fff33</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e779563d82fbd76cbaa512394aea56318f9d17bc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Option Strict Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Option Strict Statement</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Restricts implicit data type conversions to only widening conversions, disallows late binding, and disallows implicit typing that results in an <ph id="ph1">`Object`</ph> type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Enables <ph id="ph1">`Option Strict`</ph> checking.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Disables <ph id="ph1">`Option Strict`</ph> checking.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Option Strict On`</ph> or <ph id="ph2">`Option Strict`</ph> appears in a file, the following conditions cause a compile-time error:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Implicit narrowing conversions</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Late binding</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Implicit typing that results in an <ph id="ph1">`Object`</ph> type</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the warning configurations that you can set on the <bpt id="p1">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id="p1">](/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept>, there are three settings that correspond to the three conditions that cause a compile-time error.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For information about how to use these settings, see <bpt id="p1">[</bpt>To set warning configurations in the IDE<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md#conditions)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Option Strict Off`</ph> statement turns off error and warning checking for all three conditions, even if the associated IDE settings specify to turn on these errors or warnings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Option Strict On`</ph> statement turns on error and warning checking for all three conditions, even if the associated IDE settings specify to turn off these errors or warnings.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If used, the <ph id="ph1">`Option Strict`</ph> statement must appear before any other code statements in a file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When you set <ph id="ph1">`Option Strict`</ph> to <ph id="ph2">`On`</ph>, Visual Basic checks that data types are specified for all programming elements.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Data types can be specified explicitly, or specified by using local type inference.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Specifying data types for all your programming elements is recommended, for the following reasons:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It enables IntelliSense support for your variables and parameters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This enables you to see their properties and other members as you type code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It enables the compiler to perform type checking.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Type checking helps you find statements that can fail at run time because of type conversion errors.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It also identifies calls to methods on objects that do not support those methods.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It speeds up the execution of code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>One reason for this is that if you do not specify a data type for a programming element, the Visual Basic compiler assigns it the <ph id="ph1">`Object`</ph> type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Compiled code might have to convert back and forth between <ph id="ph1">`Object`</ph> and other data types, which reduces performance.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implicit Narrowing Conversion Errors</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Implicit narrowing conversion errors occur when there is an implicit data type conversion that is a narrowing conversion.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Visual Basic can convert many data types to other data types.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Data loss can occur when the value of one data type is converted to a data type that has less precision or a smaller capacity.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A run-time error occurs if such a narrowing conversion fails.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Option Strict`</ph> ensures compile-time notification of these narrowing conversions so that you can avoid them.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept> and <bpt id="p2">[</bpt>Widening and Narrowing Conversions<ept id="p2">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Conversions that can cause errors include implicit conversions that occur in expressions.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>+ Operator<ept id="p1">](../../../visual-basic/language-reference/operators/addition-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>+= Operator<ept id="p1">](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>\ Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/= Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/char-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you concatenate strings by using the <bpt id="p1">[</bpt>&amp; Operator<ept id="p1">](../../../visual-basic/language-reference/operators/concatenation-operator.md)</ept>, all conversions to the strings are considered to be widening.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>So these conversions do not generate an implicit narrowing conversion error, even if <ph id="ph1">`Option Strict`</ph> is on.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When you call a method that has an argument that has a data type different from the corresponding parameter, a narrowing conversion causes a compile-time error if <ph id="ph1">`Option Strict`</ph> is on.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can avoid the compile-time error by using a widening conversion or an explicit conversion.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Implicit narrowing conversion errors are suppressed at compile-time for conversions from the elements in a <ph id="ph1">`For Each…Next`</ph> collection to the loop control variable.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This occurs even if <ph id="ph1">`Option Strict`</ph> is on.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see the "Narrowing Conversions" section in <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Late Binding Errors</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An object is late bound when it is assigned to a property or method of a variable that is declared to be of type <ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Implicit Object Type Errors</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Implicit object type errors occur when an appropriate type cannot be inferred for a declared variable, so a type of <ph id="ph1">`Object`</ph> is inferred.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This primarily occurs when you use a <ph id="ph1">`Dim`</ph> statement to declare a variable without using an <ph id="ph2">`As`</ph> clause, and <ph id="ph3">`Option Infer`</ph> is off.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> and the <bpt id="p2">[</bpt>Visual Basic Language Specification<ept id="p2">](../../../visual-basic/reference/language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For method parameters, the <ph id="ph1">`As`</ph> clause is optional if <ph id="ph2">`Option Strict`</ph> is off.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>However, if any one parameter uses an <ph id="ph1">`As`</ph> clause, they all must use it.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is on, the <ph id="ph2">`As`</ph> clause is required for every parameter definition.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you declare a variable without using an <ph id="ph1">`As`</ph> clause and set it to <ph id="ph2">`Nothing`</ph>, the variable has a type of <ph id="ph3">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>No compile-time error occurs in this case when <ph id="ph1">`Option Strict`</ph> is on and <ph id="ph2">`Option Infer`</ph> is on.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An example of this is <ph id="ph1">`Dim something = Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Default Data Types and Values</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following table describes the results of various combinations of specifying the data type and initializer in a <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Data type specified?</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Initializer specified?</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Result</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is off (the default), the variable is set to <ph id="ph2">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is on, a compile-time error occurs.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Infer`</ph> is on (the default), the variable takes the data type of the initializer.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Infer`</ph> is off and <ph id="ph2">`Option Strict`</ph> is off, the variable takes the data type of <ph id="ph3">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Infer`</ph> is off and <ph id="ph2">`Option Strict`</ph> is on, a compile-time error occurs.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The variable is initialized to the default value for the data type.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the data type of the initializer is not convertible to the specified data type, a compile-time error occurs.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When an Option Strict Statement Is Not Present</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the source code does not contain an <ph id="ph1">`Option Strict`</ph> statement, the <bpt id="p1">**</bpt>Option strict<ept id="p1">**</ept> setting on the <bpt id="p2">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id="p2">](/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept> is used.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Compile Page<ept id="p1">**</ept> has settings that provide additional control over the conditions that generate an error.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you are using the command-line compiler, you can use the <bpt id="p1">[</bpt>/optionstrict<ept id="p1">](../../../visual-basic/reference/command-line-compiler/optionstrict.md)</ept> compiler option to specify a setting for <ph id="ph1">`Option Strict`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To set Option Strict in the IDE</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select a project.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Compile<ept id="p1">**</ept> tab, set the value in the <bpt id="p2">**</bpt>Option Strict<ept id="p2">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="conditions"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To set warning configurations in the IDE</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When you use the <bpt id="p1">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id="p1">](/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept> instead of an <ph id="ph1">`Option Strict`</ph> statement, you have additional control over the conditions that generate errors.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Warning configurations<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>Compile Page<ept id="p2">**</ept> has settings that correspond to the three conditions that cause a compile-time error when <ph id="ph1">`Option Strict`</ph> is on.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Following are these settings:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implicit conversion<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Late binding; call could fail at run time<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implicit type; object assumed<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When you set <bpt id="p1">**</bpt>Option Strict<ept id="p1">**</ept> to <bpt id="p2">**</bpt>On<ept id="p2">**</ept>, all three of these warning configuration settings are set to <bpt id="p3">**</bpt>Error<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When you set <bpt id="p1">**</bpt>Option Strict<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Off<ept id="p2">**</ept>, all three settings are set to <bpt id="p3">**</bpt>None<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can individually change each warning configuration setting to <bpt id="p1">**</bpt>None<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Warning<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Error<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If all three warning configuration settings are set to <bpt id="p1">**</bpt>Error<ept id="p1">**</ept>, <ph id="ph1">`On`</ph> appears in the <ph id="ph2">`Option strict`</ph> box.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If all three are set to <bpt id="p1">**</bpt>None<ept id="p1">**</ept>, <ph id="ph1">`Off`</ph> appears in this box.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For any other combination of these settings, <bpt id="p1">**</bpt>(custom)<ept id="p1">**</ept> appears.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>To set the Option Strict default setting for new projects</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When you create a project, the <bpt id="p1">**</bpt>Option Strict<ept id="p1">**</ept> setting on the <bpt id="p2">**</bpt>Compile<ept id="p2">**</ept> tab is set to the <bpt id="p3">**</bpt>Option Strict<ept id="p3">**</ept> setting in the <bpt id="p4">**</bpt>Options<ept id="p4">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>To set <ph id="ph1">`Option Strict`</ph> in this dialog box, on the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Options<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Options<ept id="p1">**</ept> dialog box, expand <bpt id="p2">**</bpt>Projects and Solutions<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>VB Defaults<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The initial default setting in <bpt id="p1">**</bpt>VB Defaults<ept id="p1">**</ept> is <ph id="ph1">`Off`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To set Option Strict on the command line</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Include the <bpt id="p1">[</bpt>/optionstrict<ept id="p1">](../../../visual-basic/reference/command-line-compiler/optionstrict.md)</ept> compiler option in the <bpt id="p2">**</bpt>vbc<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate compile-time errors caused by implicit type conversions that are narrowing conversions.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This category of errors corresponds to the <bpt id="p1">**</bpt>Implicit conversion<ept id="p1">**</ept> condition on the <bpt id="p2">**</bpt>Compile Page<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a compile-time error caused by late binding.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This category of errors corresponds to the <bpt id="p1">**</bpt>Late binding; call could fail at run time<ept id="p1">**</ept> condition on the <bpt id="p2">**</bpt>Compile Page<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate errors caused by variables that are declared with an implicit type of <ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This category of errors corresponds to the <bpt id="p1">**</bpt>Implicit type; object assumed<ept id="p1">**</ept> condition on the <bpt id="p2">**</bpt>Compile Page<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id="p1">](/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Option Explicit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Access Members of an Object<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/how-to-access-members-of-an-object.md)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Embedded Expressions in XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Relaxed Delegate Conversion<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Late Binding in Office Solutions<ept id="p1">](/visualstudio/vsto/late-binding-in-office-solutions)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/optionstrict<ept id="p1">](../../../visual-basic/reference/command-line-compiler/optionstrict.md)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Defaults, Projects, Options Dialog Box<ept id="p1">](/visualstudio/ide/reference/visual-basic-defaults-projects-options-dialog-box)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>