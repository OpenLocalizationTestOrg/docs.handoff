{"content":"---\ntitle: \"Sorting Data (C#)\"\nms.date: 07/20/2015\nms.assetid: d93fa055-2f19-46d2-9898-e2aed628f1c9\n---\n# Sorting Data (C#)\nA sorting operation orders the elements of a sequence based on one or more attributes. The first sort criterion performs a primary sort on the elements. By specifying a second sort criterion, you can sort the elements within each primary sort group.  \n  \n The following illustration shows the results of an alphabetical sort operation on a sequence of characters: \n  \n ![Graphic that shows an alphabetical sort operation.](./media/sorting-data/alphabetical-sort-operation.png)  \n  \n The standard query operator methods that sort data are listed in the following section.  \n  \n## Methods  \n  \n|Method Name|Description|C# Query Expression Syntax|More Information|  \n|-----------------|-----------------|---------------------------------|----------------------|  \n|OrderBy|Sorts values in ascending order.|`orderby`|<xref:System.Linq.Enumerable.OrderBy%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.OrderBy%2A?displayProperty=nameWithType>|  \n|OrderByDescending|Sorts values in descending order.|`orderby … descending`|<xref:System.Linq.Enumerable.OrderByDescending%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.OrderByDescending%2A?displayProperty=nameWithType>|  \n|ThenBy|Performs a secondary sort in ascending order.|`orderby …, …`|<xref:System.Linq.Enumerable.ThenBy%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.ThenBy%2A?displayProperty=nameWithType>|  \n|ThenByDescending|Performs a secondary sort in descending order.|`orderby …, … descending`|<xref:System.Linq.Enumerable.ThenByDescending%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.ThenByDescending%2A?displayProperty=nameWithType>|  \n|Reverse|Reverses the order of the elements in a collection.|Not applicable.|<xref:System.Linq.Enumerable.Reverse%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.Reverse%2A?displayProperty=nameWithType>|  \n  \n## Query Expression Syntax Examples  \n  \n### Primary Sort Examples  \n  \n#### Primary Ascending Sort  \n The following example demonstrates how to use the `orderby` clause in a LINQ query to sort the strings in an array by string length, in ascending order.  \n  \n```csharp  \nstring[] words = { \"the\", \"quick\", \"brown\", \"fox\", \"jumps\" };  \n  \nIEnumerable<string> query = from word in words  \n                            orderby word.Length  \n                            select word;  \n  \nforeach (string str in query)  \n    Console.WriteLine(str);  \n  \n/* This code produces the following output:  \n  \n    the  \n    fox  \n    quick  \n    brown  \n    jumps  \n*/  \n```  \n  \n#### Primary Descending Sort  \n The next example demonstrates how to use the `orderby descending` clause in a LINQ query to sort the strings by their first letter, in descending order.  \n  \n```csharp  \nstring[] words = { \"the\", \"quick\", \"brown\", \"fox\", \"jumps\" };  \n  \nIEnumerable<string> query = from word in words  \n                            orderby word.Substring(0, 1) descending  \n                            select word;  \n  \nforeach (string str in query)  \n    Console.WriteLine(str);  \n  \n/* This code produces the following output:  \n  \n    the  \n    quick  \n    jumps  \n    fox  \n    brown  \n*/  \n```  \n  \n### Secondary Sort Examples  \n  \n#### Secondary Ascending Sort  \n The following example demonstrates how to use the `orderby` clause in a LINQ query to perform a primary and secondary sort of the strings in an array. The strings are sorted primarily by length and secondarily by the first letter of the string, both in ascending order.  \n  \n```csharp  \nstring[] words = { \"the\", \"quick\", \"brown\", \"fox\", \"jumps\" };  \n  \nIEnumerable<string> query = from word in words  \n                            orderby word.Length, word.Substring(0, 1)  \n                            select word;  \n  \nforeach (string str in query)  \n    Console.WriteLine(str);  \n  \n/* This code produces the following output:  \n  \n    fox  \n    the  \n    brown  \n    jumps  \n    quick  \n*/  \n```  \n  \n#### Secondary Descending Sort  \n The next example demonstrates how to use the `orderby descending` clause in a LINQ query to perform a primary sort, in ascending order, and a secondary sort, in descending order. The strings are sorted primarily by length and secondarily by the first letter of the string.  \n  \n```csharp  \nstring[] words = { \"the\", \"quick\", \"brown\", \"fox\", \"jumps\" };  \n  \nIEnumerable<string> query = from word in words  \n                            orderby word.Length, word.Substring(0, 1) descending  \n                            select word;  \n  \nforeach (string str in query)  \n    Console.WriteLine(str);  \n  \n/* This code produces the following output:  \n  \n    the  \n    fox  \n    quick  \n    jumps  \n    brown  \n*/  \n```  \n  \n## See also\n\n- <xref:System.Linq>\n- [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)\n- [orderby clause](../../../../csharp/language-reference/keywords/orderby-clause.md)\n- [How to: Order the Results of a Join Clause](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)\n- [How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)\n","nodes":[{"pos":[4,99],"embed":true,"restype":"x-metadata","content":"title: \"Sorting Data (C#)\"\nms.date: 07/20/2015\nms.assetid: d93fa055-2f19-46d2-9898-e2aed628f1c9","nodes":[{"content":"Sorting Data (C#)","nodes":[{"pos":[0,17],"content":"Sorting Data (C#)","nodes":[{"content":"Sorting Data (C#)","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[106,123],"content":"Sorting Data (C#)","linkify":"Sorting Data (C#)","nodes":[{"content":"Sorting Data (C#)","pos":[0,17]}]},{"content":"A sorting operation orders the elements of a sequence based on one or more attributes.","pos":[124,210]},{"content":"The first sort criterion performs a primary sort on the elements.","pos":[211,276]},{"content":"By specifying a second sort criterion, you can sort the elements within each primary sort group.","pos":[277,373]},{"content":"The following illustration shows the results of an alphabetical sort operation on a sequence of characters:","pos":[380,487]},{"content":"Graphic that shows an alphabetical sort operation.","pos":[495,545]},{"content":"The standard query operator methods that sort data are listed in the following section.","pos":[607,694]},{"pos":[703,710],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[717,728]},{"content":"Description","pos":[729,740]},{"content":"C# Query Expression Syntax","pos":[741,767]},{"content":"More Information","pos":[768,784]},{"content":"OrderBy","pos":[886,893]},{"content":"Sorts values in ascending order.","pos":[894,926]},{"content":"OrderByDescending","pos":[1092,1109]},{"content":"Sorts values in descending order.","pos":[1110,1143]},{"content":"ThenBy","pos":[1342,1348]},{"content":"Performs a secondary sort in ascending order.","pos":[1349,1394]},{"content":"ThenByDescending","pos":[1563,1579]},{"content":"Performs a secondary sort in descending order.","pos":[1580,1626]},{"content":"Reverse","pos":[1826,1833]},{"content":"Reverses the order of the elements in a collection.","pos":[1834,1885]},{"content":"Not applicable.","pos":[1886,1901]},{"pos":[2062,2094],"content":"Query Expression Syntax Examples","linkify":"Query Expression Syntax Examples","nodes":[{"content":"Query Expression Syntax Examples","pos":[0,32]}]},{"pos":[2104,2125],"content":"Primary Sort Examples","linkify":"Primary Sort Examples","nodes":[{"content":"Primary Sort Examples","pos":[0,21]}]},{"pos":[2136,2158],"content":"Primary Ascending Sort","linkify":"Primary Ascending Sort","nodes":[{"content":"Primary Ascending Sort","pos":[0,22]}]},{"pos":[2162,2314],"content":"The following example demonstrates how to use the <ph id=\"ph1\">`orderby`</ph> clause in a LINQ query to sort the strings in an array by string length, in ascending order.","source":"The following example demonstrates how to use the `orderby` clause in a LINQ query to sort the strings in an array by string length, in ascending order."},{"pos":[2733,2756],"content":"Primary Descending Sort","linkify":"Primary Descending Sort","nodes":[{"content":"Primary Descending Sort","pos":[0,23]}]},{"pos":[2760,2912],"content":"The next example demonstrates how to use the <ph id=\"ph1\">`orderby descending`</ph> clause in a LINQ query to sort the strings by their first letter, in descending order.","source":"The next example demonstrates how to use the `orderby descending` clause in a LINQ query to sort the strings by their first letter, in descending order."},{"pos":[3350,3373],"content":"Secondary Sort Examples","linkify":"Secondary Sort Examples","nodes":[{"content":"Secondary Sort Examples","pos":[0,23]}]},{"pos":[3384,3408],"content":"Secondary Ascending Sort","linkify":"Secondary Ascending Sort","nodes":[{"content":"Secondary Ascending Sort","pos":[0,24]}]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`orderby`</ph> clause in a LINQ query to perform a primary and secondary sort of the strings in an array.","pos":[3412,3562],"source":"The following example demonstrates how to use the `orderby` clause in a LINQ query to perform a primary and secondary sort of the strings in an array."},{"content":"The strings are sorted primarily by length and secondarily by the first letter of the string, both in ascending order.","pos":[3563,3681]},{"pos":[4122,4147],"content":"Secondary Descending Sort","linkify":"Secondary Descending Sort","nodes":[{"content":"Secondary Descending Sort","pos":[0,25]}]},{"content":"The next example demonstrates how to use the <ph id=\"ph1\">`orderby descending`</ph> clause in a LINQ query to perform a primary sort, in ascending order, and a secondary sort, in descending order.","pos":[4151,4329],"source":"The next example demonstrates how to use the `orderby descending` clause in a LINQ query to perform a primary sort, in ascending order, and a secondary sort, in descending order."},{"content":"The strings are sorted primarily by length and secondarily by the first letter of the string.","pos":[4330,4423]},{"pos":[4873,4881],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4906,5035],"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>","source":"[Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)"},{"pos":[5038,5120],"content":"<bpt id=\"p1\">[</bpt>orderby clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/orderby-clause.md)</ept>","source":"[orderby clause](../../../../csharp/language-reference/keywords/orderby-clause.md)"},{"pos":[5123,5273],"content":"<bpt id=\"p1\">[</bpt>How to: Order the Results of a Join Clause<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)</ept>","source":"[How to: Order the Results of a Join Clause](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)"},{"pos":[5276,5456],"content":"<bpt id=\"p1\">[</bpt>How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)</ept>","source":"[How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)"}]}