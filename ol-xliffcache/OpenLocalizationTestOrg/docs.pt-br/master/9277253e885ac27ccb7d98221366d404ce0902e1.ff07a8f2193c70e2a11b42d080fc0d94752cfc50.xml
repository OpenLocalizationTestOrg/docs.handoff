{"content":"---\ntitle: \"How to: Create a Document with Namespaces (C#) (LINQ to XML)\"\nms.date: 07/20/2015\nms.assetid: 37e63c57-f86d-47ac-88a7-2c2d107def30\n---\n# How to: Create a Document with Namespaces (C#) (LINQ to XML)\nThis topic shows how to create documents with namespaces.  \n  \n## Example  \n To create an element or an attribute that is in a namespace, you first declare and initialize an <xref:System.Xml.Linq.XNamespace> object. You then use the addition operator overload to combine the namespace with the local name, expressed as a string.  \n  \n The following example creates a document with one namespace. By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] serializes this document with a default namespace.  \n  \n```csharp  \n// Create an XML tree in a namespace.  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XElement(aw + \"Child\", \"child content\")  \n);  \nConsole.WriteLine(root);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root xmlns=\"http://www.adventure-works.com\">  \n  <Child>child content</Child>  \n</Root>  \n```  \n  \n## Example  \n The following example creates a document with one namespace. It also creates an attribute that declares the namespace with a namespace prefix. To create an attribute that declares a namespace with a prefix, you create an attribute where the name of the attribute is the namespace prefix, and this name is in the <xref:System.Xml.Linq.XNamespace.Xmlns%2A> namespace. The value of this attribute is the URI of the namespace.  \n  \n```csharp  \n// Create an XML tree in a namespace, with a specified prefix  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    new XElement(aw + \"Child\", \"child content\")  \n);  \nConsole.WriteLine(root);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<aw:Root xmlns:aw=\"http://www.adventure-works.com\">  \n  <aw:Child>child content</aw:Child>  \n</aw:Root>  \n```  \n  \n## Example  \n The following example shows the creation of a document that contains two namespaces. One is the default namespace. Another is a namespace with a prefix.  \n  \n By including namespace attributes in the root element, the namespaces are serialized so that `http://www.adventure-works.com` is the default namespace, and `www.fourthcoffee.com` is serialized with a prefix of \"fc\". To create an attribute that declares a default namespace, you create an attribute with the name \"xmlns\", without a namespace. The value of the attribute is the default namespace URI.  \n  \n```csharp  \n// The http://www.adventure-works.com namespace is forced to be the default namespace.  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXNamespace fc = \"www.fourthcoffee.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XAttribute(\"xmlns\", \"http://www.adventure-works.com\"),  \n    new XAttribute(XNamespace.Xmlns + \"fc\", \"www.fourthcoffee.com\"),  \n    new XElement(fc + \"Child\",  \n        new XElement(aw + \"DifferentChild\", \"other content\")  \n    ),  \n    new XElement(aw + \"Child2\", \"c2 content\"),  \n    new XElement(fc + \"Child3\", \"c3 content\")  \n);  \nConsole.WriteLine(root);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root xmlns=\"http://www.adventure-works.com\" xmlns:fc=\"www.fourthcoffee.com\">  \n  <fc:Child>  \n    <DifferentChild>other content</DifferentChild>  \n  </fc:Child>  \n  <Child2>c2 content</Child2>  \n  <fc:Child3>c3 content</fc:Child3>  \n</Root>  \n```  \n  \n## Example  \n The following example creates a document that contains two namespaces, both with namespace prefixes.  \n  \n```csharp  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXNamespace fc = \"www.fourthcoffee.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", aw.NamespaceName),  \n    new XAttribute(XNamespace.Xmlns + \"fc\", fc.NamespaceName),  \n    new XElement(fc + \"Child\",  \n        new XElement(aw + \"DifferentChild\", \"other content\")  \n    ),  \n    new XElement(aw + \"Child2\", \"c2 content\"),  \n    new XElement(fc + \"Child3\", \"c3 content\")  \n);  \nConsole.WriteLine(root);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<aw:Root xmlns:aw=\"http://www.adventure-works.com\" xmlns:fc=\"www.fourthcoffee.com\">  \n  <fc:Child>  \n    <aw:DifferentChild>other content</aw:DifferentChild>  \n  </fc:Child>  \n  <aw:Child2>c2 content</aw:Child2>  \n  <fc:Child3>c3 content</fc:Child3>  \n</aw:Root>  \n```  \n  \n## Example  \n Another way to accomplish the same result is to use expanded names instead of declaring and creating an <xref:System.Xml.Linq.XNamespace> object.  \n  \n This approach has performance implications. Each time you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] must parse the name, find the atomized namespace, and find the atomized name. This process takes CPU time. If performance is important, you might want to declare and use an <xref:System.Xml.Linq.XNamespace> object explicitly.  \n  \n If performance is an important issue, see [Pre-Atomization of XName Objects (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md) for more information  \n  \n```csharp  \n// Create an XML tree in a namespace, with a specified prefix  \nXElement root = new XElement(\"{http://www.adventure-works.com}Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    new XElement(\"{http://www.adventure-works.com}Child\", \"child content\")  \n);  \nConsole.WriteLine(root);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<aw:Root xmlns:aw=\"http://www.adventure-works.com\">  \n  <aw:Child>child content</aw:Child>  \n</aw:Root>  \n```  \n  \n## See also\n\n- [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)\n","nodes":[{"pos":[4,142],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a Document with Namespaces (C#) (LINQ to XML)\"\nms.date: 07/20/2015\nms.assetid: 37e63c57-f86d-47ac-88a7-2c2d107def30","nodes":[{"content":"How to: Create a Document with Namespaces (C#) (LINQ to XML)","nodes":[{"pos":[0,60],"content":"How to: Create a Document with Namespaces (C#) (LINQ to XML)","nodes":[{"content":"How to: Create a Document with Namespaces (C#) (LINQ to XML)","pos":[0,60]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[149,209],"content":"How to: Create a Document with Namespaces (C#) (LINQ to XML)","linkify":"How to: Create a Document with Namespaces (C#) (LINQ to XML)","nodes":[{"content":"How to: Create a Document with Namespaces (C#) (LINQ to XML)","pos":[0,60]}]},{"content":"This topic shows how to create documents with namespaces.","pos":[210,267]},{"pos":[276,283],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"To create an element or an attribute that is in a namespace, you first declare and initialize an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object.","pos":[287,425],"source":"To create an element or an attribute that is in a namespace, you first declare and initialize an <xref:System.Xml.Linq.XNamespace> object."},{"content":"You then use the addition operator overload to combine the namespace with the local name, expressed as a string.","pos":[426,538]},{"content":"The following example creates a document with one namespace.","pos":[545,605]},{"content":"By default, <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> serializes this document with a default namespace.","pos":[606,722],"source":" By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] serializes this document with a default namespace."},{"content":"This example produces the following output:","pos":[968,1011]},{"pos":[1129,1136],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates a document with one namespace.","pos":[1140,1200]},{"content":"It also creates an attribute that declares the namespace with a namespace prefix.","pos":[1201,1282]},{"content":"To create an attribute that declares a namespace with a prefix, you create an attribute where the name of the attribute is the namespace prefix, and this name is in the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace.Xmlns%2A&gt;</ph> namespace.","pos":[1283,1505],"source":" To create an attribute that declares a namespace with a prefix, you create an attribute where the name of the attribute is the namespace prefix, and this name is in the <xref:System.Xml.Linq.XNamespace.Xmlns%2A> namespace."},{"content":"The value of this attribute is the URI of the namespace.","pos":[1506,1562]},{"content":"This example produces the following output:","pos":[1913,1956]},{"pos":[2089,2096],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the creation of a document that contains two namespaces.","pos":[2100,2184]},{"content":"One is the default namespace.","pos":[2185,2214]},{"content":"Another is a namespace with a prefix.","pos":[2215,2252]},{"content":"By including namespace attributes in the root element, the namespaces are serialized so that <ph id=\"ph1\">`http://www.adventure-works.com`</ph> is the default namespace, and <ph id=\"ph2\">`www.fourthcoffee.com`</ph> is serialized with a prefix of \"fc\".","pos":[2259,2474],"source":"By including namespace attributes in the root element, the namespaces are serialized so that `http://www.adventure-works.com` is the default namespace, and `www.fourthcoffee.com` is serialized with a prefix of \"fc\"."},{"content":"To create an attribute that declares a default namespace, you create an attribute with the name \"xmlns\", without a namespace.","pos":[2475,2600]},{"content":"The value of the attribute is the default namespace URI.","pos":[2601,2657]},{"content":"This example produces the following output:","pos":[3282,3325]},{"pos":[3596,3603],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates a document that contains two namespaces, both with namespace prefixes.","pos":[3607,3707]},{"content":"This example produces the following output:","pos":[4237,4280]},{"pos":[4572,4579],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4583,4728],"content":"Another way to accomplish the same result is to use expanded names instead of declaring and creating an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object.","source":"Another way to accomplish the same result is to use expanded names instead of declaring and creating an <xref:System.Xml.Linq.XNamespace> object."},{"content":"This approach has performance implications.","pos":[4735,4778]},{"content":"Each time you pass a string that contains an expanded name to <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>, <ph id=\"ph2\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> must parse the name, find the atomized namespace, and find the atomized name.","pos":[4779,5027],"source":" Each time you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] must parse the name, find the atomized namespace, and find the atomized name."},{"content":"This process takes CPU time.","pos":[5028,5056]},{"content":"If performance is important, you might want to declare and use an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object explicitly.","pos":[5057,5175],"source":" If performance is important, you might want to declare and use an <xref:System.Xml.Linq.XNamespace> object explicitly."},{"pos":[5182,5398],"content":"If performance is an important issue, see <bpt id=\"p1\">[</bpt>Pre-Atomization of XName Objects (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md)</ept> for more information","source":"If performance is an important issue, see [Pre-Atomization of XName Objects (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md) for more information"},{"content":"This example produces the following output:","pos":[5751,5794]},{"pos":[5927,5935],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5939,6056],"content":"<bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>","source":"[Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)"}]}