{"content":"---\ntitle: \"Parameters and Return Values for Multithreaded Procedures (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: ba63c30c-d9f0-4962-b5c7-9d83ba851e6a\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Parameters and Return Values for Multithreaded Procedures (C#)\nSupplying and returning values in a multithreaded application is complicated because the constructor for the thread class must be passed a reference to a procedure that takes no arguments and returns no value. The following sections show some simple ways to supply parameters and return values from procedures on separate threads.  \n  \n## Supplying Parameters for Multithreaded Procedures  \n The best way to supply parameters for a multithreaded method call is to wrap the target method in a class and define fields for that class that will serve as parameters for the new thread. The advantage of this approach is that you can create a new instance of the class, with its own parameters, every time you want to start a new thread. For example, suppose you have a function that calculates the area of a triangle, as in the following code:  \n  \n```csharp  \ndouble CalcArea(double Base, double Height)  \n{  \n    return 0.5 * Base * Height;  \n}  \n```  \n  \n You can write a class that wraps the `CalcArea` function and creates fields to store input parameters, as follows:  \n  \n```csharp  \nclass AreaClass  \n{  \n    public double Base;  \n    public double Height;  \n    public double Area;  \n    public void CalcArea()  \n    {  \n        Area = 0.5 * Base * Height;  \n        MessageBox.Show(\"The area is: \" + Area.ToString());  \n    }  \n}  \n```  \n  \n To use the `AreaClass`, you can create an `AreaClass` object, and set the `Base` and `Height` properties as shown in the following code:  \n  \n```csharp  \nprotected void TestArea()  \n{  \n    AreaClass AreaObject = new AreaClass();  \n  \n    System.Threading.Thread Thread =  \n        new System.Threading.Thread(AreaObject.CalcArea);  \n    AreaObject.Base = 30;  \n    AreaObject.Height = 40;  \n    Thread.Start();  \n}  \n```  \n  \n Notice that the `TestArea` procedure does not check the value of the `Area` field after calling the `CalcArea` method. Because `CalcArea` runs on a separate thread, the `Area` field is not guaranteed to be set if you check it immediately after calling `Thread.Start`. The next section discusses a better way to return values from multithreaded procedures.  \n  \n## Returning Values from Multithreaded Procedures  \n Returning values from procedures that run on separate threads is complicated by the fact that the procedures cannot be functions and cannot use `ByRef` arguments. The easiest way to return values is to use the <xref:System.ComponentModel.BackgroundWorker> component to manage your threads and raise an event when the task is done, and process the results with an event handler.  \n  \n The following example returns a value by raising an event from a procedure running on a separate thread:  \n  \n```csharp  \nclass AreaClass2  \n{  \n    public double Base;  \n    public double Height;  \n    public double CalcArea()  \n    {  \n        // Calculate the area of a triangle.  \n        return 0.5 * Base * Height;  \n    }  \n}  \n  \nprivate System.ComponentModel.BackgroundWorker BackgroundWorker1  \n    = new System.ComponentModel.BackgroundWorker();  \n  \nprivate void TestArea2()  \n{  \n    InitializeBackgroundWorker();  \n  \n    AreaClass2 AreaObject2 = new AreaClass2();  \n    AreaObject2.Base = 30;  \n    AreaObject2.Height = 40;  \n  \n    // Start the asynchronous operation.  \n    BackgroundWorker1.RunWorkerAsync(AreaObject2);  \n}  \n  \nprivate void InitializeBackgroundWorker()  \n{  \n    // Attach event handlers to the BackgroundWorker object.  \n    BackgroundWorker1.DoWork +=  \n        new System.ComponentModel.DoWorkEventHandler(BackgroundWorker1_DoWork);  \n    BackgroundWorker1.RunWorkerCompleted +=  \n        new System.ComponentModel.RunWorkerCompletedEventHandler(BackgroundWorker1_RunWorkerCompleted);  \n}  \n  \nprivate void BackgroundWorker1_DoWork(  \n    object sender,  \n    System.ComponentModel.DoWorkEventArgs e)  \n{  \n    AreaClass2 AreaObject2 = (AreaClass2)e.Argument;  \n    // Return the value through the Result property.  \n    e.Result = AreaObject2.CalcArea();  \n}  \n  \nprivate void BackgroundWorker1_RunWorkerCompleted(  \n    object sender,  \n    System.ComponentModel.RunWorkerCompletedEventArgs e)  \n{  \n    // Access the result through the Result property.  \n    double Area = (double)e.Result;  \n    MessageBox.Show(\"The area is: \" + Area.ToString());  \n}  \n```  \n  \n You can provide parameters and return values to thread-pool threads by using the optional `ByVal` state-object variable of the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method. Thread-timer threads also support a state object for this purpose. For information on thread pooling and thread timers, see [Thread Pooling (C#)](../../../../csharp/programming-guide/concepts/threading/thread-pooling.md) and [Thread Timers (C#)](../../../../csharp/programming-guide/concepts/threading/thread-timers.md).  \n  \n## See Also  \n [Walkthrough: Multithreading with the BackgroundWorker Component (C#)](../../../../csharp/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md)   \n [Thread Pooling (C#)](../../../../csharp/programming-guide/concepts/threading/thread-pooling.md)   \n [Thread Synchronization (C#)](../../../../csharp/programming-guide/concepts/threading/thread-synchronization.md)   \n [Events](../../../../csharp/programming-guide/events/index.md)   \n [Multithreaded Applications (C#)](../../../../csharp/programming-guide/concepts/threading/multithreaded-applications.md)   \n [Delegates](../../../../csharp/programming-guide/delegates/index.md)   \n [Multithreading in Components](http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779)","nodes":[{"pos":[12,91],"content":"Parameters and Return Values for Multithreaded Procedures (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Parameters and Return Values for Multithreaded Procedures (C#) | Microsoft Docs","pos":[0,79]}]},{"pos":[450,512],"content":"Parameters and Return Values for Multithreaded Procedures (C#)","linkify":"Parameters and Return Values for Multithreaded Procedures (C#)","nodes":[{"content":"Parameters and Return Values for Multithreaded Procedures (C#)","pos":[0,62]}]},{"content":"Supplying and returning values in a multithreaded application is complicated because the constructor for the thread class must be passed a reference to a procedure that takes no arguments and returns no value.","pos":[513,722]},{"content":"The following sections show some simple ways to supply parameters and return values from procedures on separate threads.","pos":[723,843]},{"pos":[852,901],"content":"Supplying Parameters for Multithreaded Procedures","linkify":"Supplying Parameters for Multithreaded Procedures","nodes":[{"content":"Supplying Parameters for Multithreaded Procedures","pos":[0,49]}]},{"content":"The best way to supply parameters for a multithreaded method call is to wrap the target method in a class and define fields for that class that will serve as parameters for the new thread.","pos":[905,1093]},{"content":"The advantage of this approach is that you can create a new instance of the class, with its own parameters, every time you want to start a new thread.","pos":[1094,1244]},{"content":"For example, suppose you have a function that calculates the area of a triangle, as in the following code:","pos":[1245,1351]},{"pos":[1467,1581],"content":"You can write a class that wraps the <ph id=\"ph1\">`CalcArea`</ph> function and creates fields to store input parameters, as follows:","source":"You can write a class that wraps the `CalcArea` function and creates fields to store input parameters, as follows:"},{"pos":[1860,1996],"content":"To use the <ph id=\"ph1\">`AreaClass`</ph>, you can create an <ph id=\"ph2\">`AreaClass`</ph> object, and set the <ph id=\"ph3\">`Base`</ph> and <ph id=\"ph4\">`Height`</ph> properties as shown in the following code:","source":"To use the `AreaClass`, you can create an `AreaClass` object, and set the `Base` and `Height` properties as shown in the following code:"},{"content":"Notice that the <ph id=\"ph1\">`TestArea`</ph> procedure does not check the value of the <ph id=\"ph2\">`Area`</ph> field after calling the <ph id=\"ph3\">`CalcArea`</ph> method.","pos":[2288,2406],"source":"Notice that the `TestArea` procedure does not check the value of the `Area` field after calling the `CalcArea` method."},{"content":"Because <ph id=\"ph1\">`CalcArea`</ph> runs on a separate thread, the <ph id=\"ph2\">`Area`</ph> field is not guaranteed to be set if you check it immediately after calling <ph id=\"ph3\">`Thread.Start`</ph>.","pos":[2407,2555],"source":" Because `CalcArea` runs on a separate thread, the `Area` field is not guaranteed to be set if you check it immediately after calling `Thread.Start`."},{"content":"The next section discusses a better way to return values from multithreaded procedures.","pos":[2556,2643]},{"pos":[2652,2698],"content":"Returning Values from Multithreaded Procedures","linkify":"Returning Values from Multithreaded Procedures","nodes":[{"content":"Returning Values from Multithreaded Procedures","pos":[0,46]}]},{"content":"Returning values from procedures that run on separate threads is complicated by the fact that the procedures cannot be functions and cannot use <ph id=\"ph1\">`ByRef`</ph> arguments.","pos":[2702,2864],"source":"Returning values from procedures that run on separate threads is complicated by the fact that the procedures cannot be functions and cannot use `ByRef` arguments."},{"content":"The easiest way to return values is to use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to manage your threads and raise an event when the task is done, and process the results with an event handler.","pos":[2865,3079],"source":" The easiest way to return values is to use the <xref:System.ComponentModel.BackgroundWorker> component to manage your threads and raise an event when the task is done, and process the results with an event handler."},{"content":"The following example returns a value by raising an event from a procedure running on a separate thread:","pos":[3086,3190]},{"content":"You can provide parameters and return values to thread-pool threads by using the optional <ph id=\"ph1\">`ByVal`</ph> state-object variable of the <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.","pos":[4793,4983],"source":"You can provide parameters and return values to thread-pool threads by using the optional `ByVal` state-object variable of the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method."},{"content":"Thread-timer threads also support a state object for this purpose.","pos":[4984,5050]},{"content":"For information on thread pooling and thread timers, see <bpt id=\"p1\">[</bpt>Thread Pooling (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/threading/thread-pooling.md)</ept> and <bpt id=\"p2\">[</bpt>Thread Timers (C#)<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/threading/thread-timers.md)</ept>.","pos":[5051,5304],"source":" For information on thread pooling and thread timers, see [Thread Pooling (C#)](../../../../csharp/programming-guide/concepts/threading/thread-pooling.md) and [Thread Timers (C#)](../../../../csharp/programming-guide/concepts/threading/thread-timers.md)."},{"pos":[5313,5321],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Multithreading with the BackgroundWorker Component (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md)</ept><ph id=\"ph1\"> </ph>","pos":[5325,5519],"source":"[Walkthrough: Multithreading with the BackgroundWorker Component (C#)](../../../../csharp/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Pooling (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/threading/thread-pooling.md)</ept><ph id=\"ph1\"> </ph>","pos":[5522,5620],"source":" [Thread Pooling (C#)](../../../../csharp/programming-guide/concepts/threading/thread-pooling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Synchronization (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/threading/thread-synchronization.md)</ept><ph id=\"ph1\"> </ph>","pos":[5623,5737],"source":" [Thread Synchronization (C#)](../../../../csharp/programming-guide/concepts/threading/thread-synchronization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Events<ept id=\"p1\">](../../../../csharp/programming-guide/events/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5740,5804],"source":" [Events](../../../../csharp/programming-guide/events/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Multithreaded Applications (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/threading/multithreaded-applications.md)</ept><ph id=\"ph1\"> </ph>","pos":[5807,5929],"source":" [Multithreaded Applications (C#)](../../../../csharp/programming-guide/concepts/threading/multithreaded-applications.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Delegates<ept id=\"p1\">](../../../../csharp/programming-guide/delegates/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5932,6002],"source":" [Delegates](../../../../csharp/programming-guide/delegates/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Multithreading in Components<ept id=\"p1\">](http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779)</ept>","pos":[6005,6108],"source":" [Multithreading in Components](http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779)"}]}