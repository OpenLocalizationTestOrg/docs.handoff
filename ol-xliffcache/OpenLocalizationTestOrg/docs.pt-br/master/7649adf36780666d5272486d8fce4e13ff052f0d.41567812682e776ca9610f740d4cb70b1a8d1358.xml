{"content":"---\ntitle: \"How to: Access an Array Element with a Pointer (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"pointers [C#], array access\"\nms.assetid: 6c46f2af-a730-4855-8638-f136d9abaa12\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Access an Array Element with a Pointer (C# Programming Guide)\nIn an unsafe context, you can access an element in memory by using pointer element access, as shown in the following example:  \n  \n```  \n char* charPointer = stackalloc char[123];  \nfor (int i = 65; i < 123; i++)  \n{  \n    charPointer[i] = (char)i; //access array elements  \n}  \n```  \n  \n The expression in square brackets must be implicitly convertible to `int`, `uint`, `long`, or `ulong`. The operation p[e] is equivalent to *(p+e). Like C and C++, the pointer element access does not check for out-of-bounds errors.  \n  \n## Example  \n In this example, 123 memory locations are allocated to a character array, `charPointer`. The array is used to display the lowercase letters and the uppercase letters in two [for](../../../csharp/language-reference/keywords/for.md) loops.  \n  \n Notice that the expression `charPointer[i]` is equivalent to the expression `*(charPointer + i)`, and you can obtain the same result by using either of the two expressions.  \n  \n [!code-cs[csProgGuidePointers#11](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-an-array-element-with-a-pointer_1.cs)]  \n  \n [!code-cs[csProgGuidePointers#12](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-an-array-element-with-a-pointer_2.cs)]  \n  \n **Uppercase letters:**  \n**ABCDEFGHIJKLMNOPQRSTUVWXYZ**  \n**Lowercase letters:**  \n**abcdefghijklmnopqrstuvwxyz**   \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)   \n [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)   \n [Types](../../../csharp/language-reference/keywords/types.md)   \n [unsafe](../../../csharp/language-reference/keywords/unsafe.md)   \n [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)   \n [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)","nodes":[{"pos":[4,575],"nodes":[{"content":"How to: Access an Array Element with a Pointer (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,86],"content":"How to: Access an Array Element with a Pointer (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Access an Array Element with a Pointer (C# Programming Guide) | Microsoft Docs","pos":[0,86]}]}],"pos":[6,95],"yaml":true}],"content":"title: \"How to: Access an Array Element with a Pointer (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"pointers [C#], array access\"\nms.assetid: 6c46f2af-a730-4855-8638-f136d9abaa12\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[582,651],"content":"How to: Access an Array Element with a Pointer (C# Programming Guide)","linkify":"How to: Access an Array Element with a Pointer (C# Programming Guide)","nodes":[{"content":"How to: Access an Array Element with a Pointer (C# Programming Guide)","pos":[0,69]}]},{"content":"In an unsafe context, you can access an element in memory by using pointer element access, as shown in the following example:","pos":[652,777]},{"content":"The expression in square brackets must be implicitly convertible to <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`uint`</ph>, <ph id=\"ph3\">`long`</ph>, or <ph id=\"ph4\">`ulong`</ph>.","pos":[941,1043],"source":"The expression in square brackets must be implicitly convertible to `int`, `uint`, `long`, or `ulong`."},{"content":"The operation p[e] is equivalent to *(p+e).","pos":[1044,1087]},{"content":"Like C and C++, the pointer element access does not check for out-of-bounds errors.","pos":[1088,1171]},{"pos":[1180,1187],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, 123 memory locations are allocated to a character array, <ph id=\"ph1\">`charPointer`</ph>.","pos":[1191,1279],"source":"In this example, 123 memory locations are allocated to a character array, `charPointer`."},{"content":"The array is used to display the lowercase letters and the uppercase letters in two <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../csharp/language-reference/keywords/for.md)</ept> loops.","pos":[1280,1428],"source":" The array is used to display the lowercase letters and the uppercase letters in two [for](../../../csharp/language-reference/keywords/for.md) loops."},{"pos":[1435,1607],"content":"Notice that the expression <ph id=\"ph1\">`charPointer[i]`</ph> is equivalent to the expression <ph id=\"ph2\">`*(charPointer + i)`</ph>, and you can obtain the same result by using either of the two expressions.","source":"Notice that the expression `charPointer[i]` is equivalent to the expression `*(charPointer + i)`, and you can obtain the same result by using either of the two expressions."},{"pos":[1614,1774],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuidePointers#11<ept id=\"p2\">](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-an-array-element-with-a-pointer_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuidePointers#11](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-an-array-element-with-a-pointer_1.cs)]"},{"pos":[1781,1941],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuidePointers#12<ept id=\"p2\">](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-an-array-element-with-a-pointer_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuidePointers#12](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-an-array-element-with-a-pointer_2.cs)]"},{"content":"<bpt id=\"p1\">**</bpt>Uppercase letters:<ept id=\"p1\">**</ept>","pos":[1948,1970],"source":"**Uppercase letters:**"},{"content":"<bpt id=\"p1\">**</bpt>ABCDEFGHIJKLMNOPQRSTUVWXYZ<ept id=\"p1\">**</ept>","pos":[1973,2003],"source":"**ABCDEFGHIJKLMNOPQRSTUVWXYZ**"},{"content":"<bpt id=\"p1\">**</bpt>Lowercase letters:<ept id=\"p1\">**</ept>","pos":[2006,2028],"source":"**Lowercase letters:**"},{"content":"<bpt id=\"p1\">**</bpt>abcdefghijklmnopqrstuvwxyz<ept id=\"p1\">**</ept>","pos":[2031,2061],"source":"**abcdefghijklmnopqrstuvwxyz**"},{"pos":[2068,2076],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2080,2147],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[2151,2252],"source":"[Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2256,2345],"source":"[Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2349,2411],"source":"[Types](../../../csharp/language-reference/keywords/types.md) "},{"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept><ph id=\"ph1\"> </ph>","pos":[2415,2479],"source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md) "},{"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2483,2565],"source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","pos":[2569,2640],"source":"[stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}