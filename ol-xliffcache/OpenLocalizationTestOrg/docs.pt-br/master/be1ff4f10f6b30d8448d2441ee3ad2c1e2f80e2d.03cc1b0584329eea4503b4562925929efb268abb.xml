{"content":"---\ntitle: \"-= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.-=\"\nhelpviewer_keywords: \n  - \"-= operator [Visual Basic]\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"operator -=\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 5ead0c37-ae50-48f7-8435-8e341d81cae1\n---\n# -= Operator (Visual Basic)\nSubtracts the value of an expression from the value of a variable or property and assigns the result to the variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty -= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric variable or property.  \n  \n `expression`  \n Required. Any numeric expression.  \n  \n## Remarks  \n The element on the left side of the `-=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `-=` operator first subtracts the value of the expression (on the right-hand side of the operator) from the value of the variable or property (on the left-hand side of the operator). The operator then assigns the result of that operation to the variable or property.  \n  \n## Overloading  \n The [- Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `-` operator affects the behavior of the `-=` operator. If your code uses `-=` on a class or structure that overloads `-`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `-=` operator to subtract one `Integer` variable from another and assign the result to the latter variable.  \n  \n [!code-vb[VbVbalrOperators#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#11)]  \n  \n## See also\n\n- [- Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-operator.md)\n- [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,365],"embed":true,"restype":"x-metadata","content":"title: \"-= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.-=\"\nhelpviewer_keywords: \n  - \"-= operator [Visual Basic]\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"operator -=\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 5ead0c37-ae50-48f7-8435-8e341d81cae1","nodes":[{"content":"-= Operator (Visual Basic)","nodes":[{"pos":[0,26],"content":"-= Operator (Visual Basic)","nodes":[{"content":"-= Operator (Visual Basic)","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[372,398],"content":"-= Operator (Visual Basic)","linkify":"-= Operator (Visual Basic)","nodes":[{"content":"-= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Subtracts the value of an expression from the value of a variable or property and assigns the result to the variable or property.","pos":[399,528]},{"pos":[537,543],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[602,607],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[635,644]},{"content":"Any numeric variable or property.","pos":[645,678]},{"content":"Required.","pos":[701,710]},{"content":"Any numeric expression.","pos":[711,734]},{"pos":[743,750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`-=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[754,875],"source":"The element on the left side of the `-=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[876,986],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`-=`</ph> operator first subtracts the value of the expression (on the right-hand side of the operator) from the value of the variable or property (on the left-hand side of the operator).","pos":[993,1179],"source":"The `-=` operator first subtracts the value of the expression (on the right-hand side of the operator) from the value of the variable or property (on the left-hand side of the operator)."},{"content":"The operator then assigns the result of that operation to the variable or property.","pos":[1180,1263]},{"pos":[1272,1283],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>- Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/subtraction-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1287,1536],"source":"The [- Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`-`</ph> operator affects the behavior of the <ph id=\"ph2\">`-=`</ph> operator.","pos":[1537,1608],"source":" Overloading the `-` operator affects the behavior of the `-=` operator."},{"content":"If your code uses <ph id=\"ph1\">`-=`</ph> on a class or structure that overloads <ph id=\"ph2\">`-`</ph>, be sure you understand its redefined behavior.","pos":[1609,1722],"source":" If your code uses `-=` on a class or structure that overloads `-`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[1723,1864],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[1873,1880],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1884,2022],"content":"The following example uses the <ph id=\"ph1\">`-=`</ph> operator to subtract one <ph id=\"ph2\">`Integer`</ph> variable from another and assign the result to the latter variable.","source":"The following example uses the `-=` operator to subtract one `Integer` variable from another and assign the result to the latter variable."},{"pos":[2155,2163],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2167,2270],"content":"<bpt id=\"p1\">[</bpt>- Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/subtraction-operator.md)</ept>","source":"[- Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-operator.md)"},{"pos":[2273,2371],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>","source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)"},{"pos":[2374,2472],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[2475,2587],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[2590,2714],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[2717,2802],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}