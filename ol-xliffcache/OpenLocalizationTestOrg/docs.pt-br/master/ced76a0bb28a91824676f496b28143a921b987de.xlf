<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="extending-the-dom.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ced76a0bb28a91824676f496b28143a921b987de</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\extending-the-dom.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc37782b516a6d2b2d5f448f0a42cde37c6fa2f4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d10734ac2ab7645df96a05a42c694a6e655ef0d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Extending the DOM</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Extending the DOM</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Microsoft .NET Framework includes a base set of classes that provides an implementation of the XML Document Object Model (DOM).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlNode&gt;</ph>, and its derived classes, provides methods and properties that allow you to navigate, query, and modify the content and structure of an XML document.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When XML content is loaded into memory using the DOM, the nodes created contain information such as node name, node type, and so on.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There may be occasions where you require specific node information that the base classes do not provide.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, you may want to see the line number and position of the node.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this case, you can derive new classes from the existing DOM classes and add additional functionality.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There are two general guidelines when deriving new classes:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is recommended that you never derive from the <ph id="ph1">&lt;xref:System.Xml.XmlNode&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Instead, it is recommended that you derive classes from the class corresponding to the node type that you are interested in.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, if you want to return additional information on attribute nodes, you can derive from the <ph id="ph1">&lt;xref:System.Xml.XmlAttribute&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Except for the node creation methods, it is recommended that when overriding a function, you should always call the base version of the function and then add any additional processing.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creating Your Own Node Instances</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> class contains node creation methods.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When an XML file is loaded, these methods are called to create the nodes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can override these methods so that your node instances are created when a document is loaded.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, if you have extended the <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph> class, you would inherit the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class and override the <ph id="ph3">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows how to override the <ph id="ph1">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method to return your implementation of the <ph id="ph2">&lt;xref:System.Xml.XmlElement&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Extending a Class</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To extend a class, derive your class from one of the existing DOM classes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can then override any of the virtual methods or properties in the base class, or add your own.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the following example, a new class is created, which implements the <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph> class and the <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Additional methods and properties are defined which allows users to gather line information.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example counts the number of elements in an XML document:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Input</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>book.xml</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Node Event Handler</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The .NET Framework implementation of the DOM also includes an event system that enables you to receive and handle events when nodes in an XML document change.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Xml.XmlNodeChangedEventHandler&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlNodeChangedEventArgs&gt;</ph> classes, you can capture <ph id="ph3">`NodeChanged`</ph>, <ph id="ph4">`NodeChanging`</ph>, <ph id="ph5">`NodeInserted`</ph>, <ph id="ph6">`NodeInserting`</ph>, <ph id="ph7">`NodeRemoved`</ph>, and <ph id="ph8">`NodeRemoving`</ph> events.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The event-handling process works exactly the same in derived classes as it would in the original DOM classes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information regarding node event handling, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../../../docs/standard/events/index.md)</ept> and <ph id="ph1">&lt;xref:System.Xml.XmlNodeChangedEventHandler&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Default Attributes and the CreateElement Method</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you are overriding the <ph id="ph1">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method in a derived class, default attributes are not added when you are creating new elements while editing the document.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is only an issue while editing.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method is responsible for adding default attributes to an <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph>, you must code this functionality in the <ph id="ph3">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you are loading an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> that includes default attributes, they will be handled correctly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information on default attributes, see <bpt id="p1">[</bpt>Creating New Attributes for Elements in the DOM<ept id="p1">](creating-new-attributes-for-elements-in-the-dom.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Document Object Model (DOM)<ept id="p1">](xml-document-object-model-dom.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>