{"content":"---\ntitle: \"Exception Handling (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"exception handling [C#], about exception handling\"\n  - \"exceptions [C#], handling\"\nms.assetid: b4e4ecf2-b907-4e58-891f-2563762258e9\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Exception Handling (C# Programming Guide)\nA [try](../../../csharp/language-reference/keywords/try-catch.md) block is used by C# programmers to partition code that might be affected by an exception. Associated [catch](../../../csharp/language-reference/keywords/try-catch.md) blocks are used to handle any resulting exceptions. A [finally](../../../csharp/language-reference/keywords/try-finally.md) block contains code that is run regardless of whether or not an exception is thrown in the `try` block, such as releasing resources that are allocated in the `try` block. A `try` block requires one or more associated `catch` blocks, or a `finally` block, or both.  \n  \n The following examples show a `try-catch` statement, a `try-finally` statement, and a `try-catch-finally` statement.  \n  \n [!code-cs[csProgGuideExceptions#6](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_1.cs)]  \n  \n [!code-cs[csProgGuideExceptions#7](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_2.cs)]  \n  \n [!code-cs[csProgGuideExceptions#8](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_3.cs)]  \n  \n A `try` block without a `catch` or `finally` block causes a compiler error.  \n  \n## Catch Blocks  \n A `catch` block can specify the type of exception to catch. The type specification is called an *exception filter*. The exception type should be derived from <xref:System.Exception>. In general, do not specify <xref:System.Exception> as the exception filter unless either you know how to handle all exceptions that might be thrown in the `try` block, or you have included a [throw](../../../csharp/language-reference/keywords/throw.md) statement at the end of your `catch` block.  \n  \n Multiple `catch` blocks with different exception filters can be chained together. The `catch` blocks are evaluated from top to bottom in your code, but only one `catch` block is executed for each exception that is thrown. The first `catch` block that specifies the exact type or a base class of the thrown exception is executed. If no `catch` block specifies a matching exception filter, a `catch` block that does not have a filter is selected, if one is present in the statement. It is important to position `catch` blocks with the most specific (that is, the most derived) exception types first.  \n  \n You should catch exceptions when the following conditions are true:  \n  \n-   You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a <xref:System.IO.FileNotFoundException> object.  \n  \n-   You can create and throw a new, more specific exception.  \n  \n     [!code-cs[csProgGuideExceptions#9](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_4.cs)]  \n  \n-   You want to partially handle an exception before passing it on for additional handling. In the following example, a `catch` block is used to add an entry to an error log before re-throwing the exception.  \n  \n     [!code-cs[csProgGuideExceptions#10](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_5.cs)]  \n  \n## Finally Blocks  \n A `finally` block enables you to clean up actions that are performed in a `try` block. If present, the `finally` block executes last, after the `try` block and any matched `catch` block. A `finally` block always runs, regardless of whether an exception is thrown or a `catch` block matching the exception type is found.  \n  \n The `finally` block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects. See [using Statement](../../../csharp/language-reference/keywords/using-statement.md) for more information.  \n  \n In the following example, the `finally` block is used to close a file that is opened in the `try` block. Notice that the state of the file handle is checked before the file is closed. If the `try` block cannot open the file, the file handle still has the value `null` and the `finally` block does not try to close it. Alternatively, if the file is opened successfully in the `try` block, the `finally` block closes the open file.  \n  \n [!code-cs[csProgGuideExceptions#11](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_6.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md)   \n [try-catch](../../../csharp/language-reference/keywords/try-catch.md)   \n [try-finally](../../../csharp/language-reference/keywords/try-finally.md)   \n [try-catch-finally](../../../csharp/language-reference/keywords/try-catch-finally.md)   \n [using Statement](../../../csharp/language-reference/keywords/using-statement.md)","nodes":[{"pos":[4,601],"embed":true,"restype":"x-metadata","content":"title: \"Exception Handling (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"exception handling [C#], about exception handling\"\n  - \"exceptions [C#], handling\"\nms.assetid: b4e4ecf2-b907-4e58-891f-2563762258e9\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Exception Handling (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,58],"content":"Exception Handling (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Exception Handling (C# Programming Guide) | Microsoft Docs","pos":[0,58]}]}],"path":["title"]}],"yml":true},{"pos":[608,649],"content":"Exception Handling (C# Programming Guide)","linkify":"Exception Handling (C# Programming Guide)","nodes":[{"content":"Exception Handling (C# Programming Guide)","pos":[0,41]}]},{"content":"A <bpt id=\"p1\">[</bpt>try<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept> block is used by C# programmers to partition code that might be affected by an exception.","pos":[650,805],"source":"A [try](../../../csharp/language-reference/keywords/try-catch.md) block is used by C# programmers to partition code that might be affected by an exception."},{"content":"Associated <bpt id=\"p1\">[</bpt>catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept> blocks are used to handle any resulting exceptions.","pos":[806,934],"source":" Associated [catch](../../../csharp/language-reference/keywords/try-catch.md) blocks are used to handle any resulting exceptions."},{"content":"A <bpt id=\"p1\">[</bpt>finally<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-finally.md)</ept> block contains code that is run regardless of whether or not an exception is thrown in the <ph id=\"ph1\">`try`</ph> block, such as releasing resources that are allocated in the <ph id=\"ph2\">`try`</ph> block.","pos":[935,1177],"source":" A [finally](../../../csharp/language-reference/keywords/try-finally.md) block contains code that is run regardless of whether or not an exception is thrown in the `try` block, such as releasing resources that are allocated in the `try` block."},{"content":"A <ph id=\"ph1\">`try`</ph> block requires one or more associated <ph id=\"ph2\">`catch`</ph> blocks, or a <ph id=\"ph3\">`finally`</ph> block, or both.","pos":[1178,1270],"source":" A `try` block requires one or more associated `catch` blocks, or a `finally` block, or both."},{"pos":[1277,1393],"content":"The following examples show a <ph id=\"ph1\">`try-catch`</ph> statement, a <ph id=\"ph2\">`try-finally`</ph> statement, and a <ph id=\"ph3\">`try-catch-finally`</ph> statement.","source":"The following examples show a `try-catch` statement, a `try-finally` statement, and a `try-catch-finally` statement."},{"pos":[1793,1868],"content":"A <ph id=\"ph1\">`try`</ph> block without a <ph id=\"ph2\">`catch`</ph> or <ph id=\"ph3\">`finally`</ph> block causes a compiler error.","source":"A `try` block without a `catch` or `finally` block causes a compiler error."},{"pos":[1877,1889],"content":"Catch Blocks","linkify":"Catch Blocks","nodes":[{"content":"Catch Blocks","pos":[0,12]}]},{"content":"A <ph id=\"ph1\">`catch`</ph> block can specify the type of exception to catch.","pos":[1893,1952],"source":"A `catch` block can specify the type of exception to catch."},{"content":"The type specification is called an <bpt id=\"p1\">*</bpt>exception filter<ept id=\"p1\">*</ept>.","pos":[1953,2008],"source":" The type specification is called an *exception filter*."},{"content":"The exception type should be derived from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[2009,2075],"source":" The exception type should be derived from <xref:System.Exception>."},{"content":"In general, do not specify <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> as the exception filter unless either you know how to handle all exceptions that might be thrown in the <ph id=\"ph2\">`try`</ph> block, or you have included a <bpt id=\"p1\">[</bpt>throw<ept id=\"p1\">](../../../csharp/language-reference/keywords/throw.md)</ept> statement at the end of your <ph id=\"ph3\">`catch`</ph> block.","pos":[2076,2372],"source":" In general, do not specify <xref:System.Exception> as the exception filter unless either you know how to handle all exceptions that might be thrown in the `try` block, or you have included a [throw](../../../csharp/language-reference/keywords/throw.md) statement at the end of your `catch` block."},{"content":"Multiple <ph id=\"ph1\">`catch`</ph> blocks with different exception filters can be chained together.","pos":[2379,2460],"source":"Multiple `catch` blocks with different exception filters can be chained together."},{"content":"The <ph id=\"ph1\">`catch`</ph> blocks are evaluated from top to bottom in your code, but only one <ph id=\"ph2\">`catch`</ph> block is executed for each exception that is thrown.","pos":[2461,2600],"source":" The `catch` blocks are evaluated from top to bottom in your code, but only one `catch` block is executed for each exception that is thrown."},{"content":"The first <ph id=\"ph1\">`catch`</ph> block that specifies the exact type or a base class of the thrown exception is executed.","pos":[2601,2707],"source":" The first `catch` block that specifies the exact type or a base class of the thrown exception is executed."},{"content":"If no <ph id=\"ph1\">`catch`</ph> block specifies a matching exception filter, a <ph id=\"ph2\">`catch`</ph> block that does not have a filter is selected, if one is present in the statement.","pos":[2708,2859],"source":" If no `catch` block specifies a matching exception filter, a `catch` block that does not have a filter is selected, if one is present in the statement."},{"content":"It is important to position <ph id=\"ph1\">`catch`</ph> blocks with the most specific (that is, the most derived) exception types first.","pos":[2860,2976],"source":" It is important to position `catch` blocks with the most specific (that is, the most derived) exception types first."},{"content":"You should catch exceptions when the following conditions are true:","pos":[2983,3050]},{"content":"You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a <ph id=\"ph1\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> object.","pos":[3060,3286],"source":"You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a <xref:System.IO.FileNotFoundException> object."},{"content":"You can create and throw a new, more specific exception.","pos":[3296,3352]},{"content":"You want to partially handle an exception before passing it on for additional handling.","pos":[3497,3584]},{"content":"In the following example, a <ph id=\"ph1\">`catch`</ph> block is used to add an entry to an error log before re-throwing the exception.","pos":[3585,3700],"source":" In the following example, a `catch` block is used to add an entry to an error log before re-throwing the exception."},{"pos":[3845,3859],"content":"Finally Blocks","linkify":"Finally Blocks","nodes":[{"content":"Finally Blocks","pos":[0,14]}]},{"content":"A <ph id=\"ph1\">`finally`</ph> block enables you to clean up actions that are performed in a <ph id=\"ph2\">`try`</ph> block.","pos":[3863,3949],"source":"A `finally` block enables you to clean up actions that are performed in a `try` block."},{"content":"If present, the <ph id=\"ph1\">`finally`</ph> block executes last, after the <ph id=\"ph2\">`try`</ph> block and any matched <ph id=\"ph3\">`catch`</ph> block.","pos":[3950,4049],"source":" If present, the `finally` block executes last, after the `try` block and any matched `catch` block."},{"content":"A <ph id=\"ph1\">`finally`</ph> block always runs, regardless of whether an exception is thrown or a <ph id=\"ph2\">`catch`</ph> block matching the exception type is found.","pos":[4050,4182],"source":" A `finally` block always runs, regardless of whether an exception is thrown or a `catch` block matching the exception type is found."},{"content":"The <ph id=\"ph1\">`finally`</ph> block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects.","pos":[4189,4388],"source":"The `finally` block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects."},{"content":"See <bpt id=\"p1\">[</bpt>using Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-statement.md)</ept> for more information.","pos":[4389,4496],"source":" See [using Statement](../../../csharp/language-reference/keywords/using-statement.md) for more information."},{"content":"In the following example, the <ph id=\"ph1\">`finally`</ph> block is used to close a file that is opened in the <ph id=\"ph2\">`try`</ph> block.","pos":[4503,4607],"source":"In the following example, the `finally` block is used to close a file that is opened in the `try` block."},{"content":"Notice that the state of the file handle is checked before the file is closed.","pos":[4608,4686]},{"content":"If the <ph id=\"ph1\">`try`</ph> block cannot open the file, the file handle still has the value <ph id=\"ph2\">`null`</ph> and the <ph id=\"ph3\">`finally`</ph> block does not try to close it.","pos":[4687,4820],"source":" If the `try` block cannot open the file, the file handle still has the value `null` and the `finally` block does not try to close it."},{"content":"Alternatively, if the file is opened successfully in the <ph id=\"ph1\">`try`</ph> block, the <ph id=\"ph2\">`finally`</ph> block closes the open file.","pos":[4821,4932],"source":" Alternatively, if the file is opened successfully in the `try` block, the `finally` block closes the open file."},{"pos":[5073,5098],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[5212,5220],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5224,5284],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5288,5355],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Exceptions and Exception Handling<ept id=\"p1\">](../../../csharp/programming-guide/exceptions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5359,5450],"source":"[Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>try-catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id=\"ph1\"> </ph>","pos":[5454,5524],"source":"[try-catch](../../../csharp/language-reference/keywords/try-catch.md) "},{"content":"<bpt id=\"p1\">[</bpt>try-finally<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-finally.md)</ept><ph id=\"ph1\"> </ph>","pos":[5528,5602],"source":"[try-finally](../../../csharp/language-reference/keywords/try-finally.md) "},{"content":"<bpt id=\"p1\">[</bpt>try-catch-finally<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept><ph id=\"ph1\"> </ph>","pos":[5606,5692],"source":"[try-catch-finally](../../../csharp/language-reference/keywords/try-catch-finally.md) "},{"content":"<bpt id=\"p1\">[</bpt>using Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-statement.md)</ept>","pos":[5696,5777],"source":"[using Statement](../../../csharp/language-reference/keywords/using-statement.md)"}]}