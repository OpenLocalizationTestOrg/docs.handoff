<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="conditional-compilation.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">828edf2e5491394f5ac802b5c9babfb3df359e59</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\conditional-compilation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52be76c29bd76554bb35d1f463d88968b24dbbb1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ece020407dc8b70a7f61173473a4491c1d4b481</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Conditional Compilation in Visual Basic</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Conditional Compilation in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>conditional compilation<ept id="p1">*</ept>, particular blocks of code in a program are compiled selectively while others are ignored.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you may want to write debugging statements that compare the speed of different approaches to the same programming task, or you may want to localize an application for multiple languages.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Conditional compilation statements are designed to run during compile time, not at run time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You denote blocks of code to be conditionally compiled with the <ph id="ph1">`#If...Then...#Else`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, to create French- and German-language versions of the same application from the same source code, you embed platform-specific code segments in <ph id="ph1">`#If...Then`</ph> statements using the predefined constants <ph id="ph2">`FrenchVersion`</ph> and <ph id="ph3">`GermanVersion`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you set the value of the <ph id="ph1">`FrenchVersion`</ph> conditional compilation constant to <ph id="ph2">`True`</ph> at compile time, the conditional code for the French version is compiled.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you set the value of the <ph id="ph1">`GermanVersion`</ph> constant to <ph id="ph2">`True`</ph>, the compiler uses the German version.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If neither is set to <ph id="ph1">`True`</ph>, the code in the last <ph id="ph2">`Else`</ph> block runs.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Autocompletion will not function when editing code and using conditional compilation directives if the code is not part of the current branch.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Declaring Conditional Compilation Constants</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can set conditional compilation constants in one of three ways:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Project Designer<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>At the command line when using the command-line compiler</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In your code</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Conditional compilation constants have a special scope and cannot be accessed from standard code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The scope of a conditional compilation constant is dependent on the way it is set.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following table lists the scope of constants declared using each of the three ways mentioned above.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>How constant is set</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Scope of constant</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Project Designer<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Public to all files in the project</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Command line</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Public to all files passed to the command-line compiler</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#Const`</ph> statement in code</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Private to the file in which it is declared</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To set constants in the Project Designer</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-   Before creating your executable file, set constants in the <bpt id="p1">**</bpt>Project Designer<ept id="p1">**</ept> by following the steps provided in <bpt id="p2">[</bpt>Managing Project and Solution Properties<ept id="p2">](/visualstudio/ide/managing-project-and-solution-properties)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To set constants at the command line</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-   Use the <bpt id="p1">**</bpt>/d<ept id="p1">**</ept> switch to enter conditional compilation constants, as in the following example:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>No space is required between the <bpt id="p1">**</bpt>/d<ept id="p1">**</ept> switch and the first constant.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/define (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/define.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Command-line declarations override declarations entered in the <bpt id="p1">**</bpt>Project Designer<ept id="p1">**</ept>, but do not erase them.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Arguments set in <bpt id="p1">**</bpt>Project Designer<ept id="p1">**</ept> remain in effect for subsequent compilations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When writing constants in the code itself, there are no strict rules as to their placement, since their scope is the entire module in which they are declared.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To set constants in your code</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-   Place the constants in the declaration block of the module in which they are used.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This helps keep your code organized and easier to read.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Program Structure and Code Conventions<ept id="p1">](../../../visual-basic/programming-guide/program-structure/program-structure-and-code-conventions.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Provides suggestions for making your code easy to read and maintain.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>#Const Directive<ept id="p1">](../../../visual-basic/language-reference/directives/const-directive.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>#If...Then...#Else Directives<ept id="p1">](../../../visual-basic/language-reference/directives/if-then-else-directives.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/define (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/define.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>