{"content":"---\ntitle: \"Anonymous Functions - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"lambda expressions [C#], as anonymous functions\"\n  - \"anonymous functions [C#]\"\n  - \"anonymous methods [C#]\"\nms.assetid: 6ce3f04d-0c71-4728-9127-634c7e9a8365\n---\n# Anonymous Functions (C# Programming Guide)\nAn anonymous function is an \"inline\" statement or expression that can be used wherever a delegate type is expected. You can use it to initialize a named delegate or pass it instead of a named delegate type as a method parameter.  \n  \n There are two kinds of anonymous functions, which are discussed individually in the following topics:  \n  \n-   [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).  \n  \n-   [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)  \n  \n    > [!NOTE]\n    >  Lambda expressions can be bound to expression trees and also to delegates.  \n  \n## The Evolution of Delegates in C\\#\n In C# 1.0, you created an instance of a delegate by explicitly initializing it with a method that was defined elsewhere in the code. C# 2.0 introduced the concept of anonymous methods as a way to write unnamed inline statement blocks that can be executed in a delegate invocation. C# 3.0 introduced lambda expressions, which are similar in concept to anonymous methods but more expressive and concise. These two features are known collectively as *anonymous functions*. In general, applications that target version 3.5 and later of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] should use lambda expressions.  \n  \n The following example demonstrates the evolution of delegate creation from C# 1.0 to C# 3.0:  \n  \n [!code-csharp[csProgGuideLINQ#65](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideLINQ/CS/csRef30LangFeatures_2.cs#65)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## See also\n\n- [Statements, Expressions, and Operators](../../../csharp/programming-guide/statements-expressions-operators/index.md)\n- [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)\n- [Delegates](../../../csharp/programming-guide/delegates/index.md)\n- [Expression Trees (C#)](../concepts/expression-trees/index.md)\n","nodes":[{"pos":[4,280],"embed":true,"restype":"x-metadata","content":"title: \"Anonymous Functions - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"lambda expressions [C#], as anonymous functions\"\n  - \"anonymous functions [C#]\"\n  - \"anonymous methods [C#]\"\nms.assetid: 6ce3f04d-0c71-4728-9127-634c7e9a8365","nodes":[{"content":"Anonymous Functions - C# Programming Guide","nodes":[{"pos":[0,42],"content":"Anonymous Functions - C# Programming Guide","nodes":[{"content":"Anonymous Functions - C# Programming Guide","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[287,329],"content":"Anonymous Functions (C# Programming Guide)","linkify":"Anonymous Functions (C# Programming Guide)","nodes":[{"content":"Anonymous Functions (C# Programming Guide)","pos":[0,42]}]},{"content":"An anonymous function is an \"inline\" statement or expression that can be used wherever a delegate type is expected.","pos":[330,445]},{"content":"You can use it to initialize a named delegate or pass it instead of a named delegate type as a method parameter.","pos":[446,558]},{"content":"There are two kinds of anonymous functions, which are discussed individually in the following topics:","pos":[565,666]},{"pos":[676,787],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.","source":"[Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)."},{"pos":[797,905],"content":"<bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>","source":"[Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)"},{"pos":[917,1006],"content":"[!NOTE]\nLambda expressions can be bound to expression trees and also to delegates.","leadings":["","    >  "],"nodes":[{"content":"Lambda expressions can be bound to expression trees and also to delegates.","pos":[8,82]}]},{"pos":[1015,1048],"content":"The Evolution of Delegates in C\\#","linkify":"The Evolution of Delegates in C\\#","nodes":[{"content":"The Evolution of Delegates in C<ph id=\"ph1\">\\#</ph>","pos":[0,33],"source":"The Evolution of Delegates in C\\#"}]},{"content":"In C# 1.0, you created an instance of a delegate by explicitly initializing it with a method that was defined elsewhere in the code.","pos":[1050,1182]},{"content":"C# 2.0 introduced the concept of anonymous methods as a way to write unnamed inline statement blocks that can be executed in a delegate invocation.","pos":[1183,1330]},{"content":"C# 3.0 introduced lambda expressions, which are similar in concept to anonymous methods but more expressive and concise.","pos":[1331,1451]},{"content":"These two features are known collectively as <bpt id=\"p1\">*</bpt>anonymous functions<ept id=\"p1\">*</ept>.","pos":[1452,1519],"source":" These two features are known collectively as *anonymous functions*."},{"content":"In general, applications that target version 3.5 and later of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> should use lambda expressions.","pos":[1520,1670],"source":" In general, applications that target version 3.5 and later of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] should use lambda expressions."},{"content":"The following example demonstrates the evolution of delegate creation from C# 1.0 to C# 3.0:","pos":[1677,1769]},{"pos":[1914,1939],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2011,2019],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2023,2140],"content":"<bpt id=\"p1\">[</bpt>Statements, Expressions, and Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/index.md)</ept>","source":"[Statements, Expressions, and Operators](../../../csharp/programming-guide/statements-expressions-operators/index.md)"},{"pos":[2143,2253],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)"},{"pos":[2256,2321],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept>","source":"[Delegates](../../../csharp/programming-guide/delegates/index.md)"},{"pos":[2324,2386],"content":"<bpt id=\"p1\">[</bpt>Expression Trees (C#)<ept id=\"p1\">](../concepts/expression-trees/index.md)</ept>","source":"[Expression Trees (C#)](../concepts/expression-trees/index.md)"}]}