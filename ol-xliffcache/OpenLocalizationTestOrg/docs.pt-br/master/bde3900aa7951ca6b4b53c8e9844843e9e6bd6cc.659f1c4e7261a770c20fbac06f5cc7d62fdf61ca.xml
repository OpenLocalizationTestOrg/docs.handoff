{"content":"---\ntitle: \"GetType Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.GetType\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"GetType operator\"\n  - \"GetType keyword\"\nms.assetid: 4f733297-2503-4607-850c-15eba65fff90\ncaps.latest.revision: 17\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# GetType Operator (Visual Basic)\nReturns a <xref:System.Type> object for the specified type. The <xref:System.Type> object provides information about the type such as its properties, methods, and events.  \n  \n## Syntax  \n  \n```  \nGetType(typename)  \n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---|---|  \n|`typename`|The name of the type for which you desire information.|  \n  \n## Remarks  \n The `GetType` operator returns the <xref:System.Type> object for the specified `typename`. You can pass the name of any defined type in `typename`. This includes the following:  \n  \n-   Any Visual Basic data type, such as `Boolean` or `Date`.  \n  \n-   Any .NET Framework class, structure, module, or interface, such as <xref:System.ArgumentException?displayProperty=fullName> or <xref:System.Double?displayProperty=fullName>.  \n  \n-   Any class, structure, module, or interface defined by your application.  \n  \n-   Any array defined by your application.  \n  \n-   Any delegate defined by your application.  \n  \n-   Any enumeration defined by Visual Basic, the .NET Framework, or your application.  \n  \n If you want to get the type object of an object variable, use the <xref:System.Type.GetType%2A?displayProperty=fullName> method.  \n  \n The `GetType` operator can be useful in the following circumstances:  \n  \n-   You must access the metadata for a type at run time. The <xref:System.Type> object supplies metadata such as type members and deployment information. You need this, for example, to reflect over an assembly. For more information, see <xref:System.Reflection?displayProperty=fullName>.  \n  \n-   You want to compare two object references to see if they refer to instances of the same type. If they do, `GetType` returns references to the same <xref:System.Type> object.  \n  \n## Example  \n The following examples show the `GetType` operator in use.  \n  \n [!code-vb[VbVbalrOperators#26](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/gettype-operator_1.vb)]  \n  \n## See Also  \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)","nodes":[{"pos":[12,60],"content":"GetType Operator (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"GetType Operator (Visual Basic) | Microsoft Docs","pos":[0,48]}]},{"pos":[618,649],"content":"GetType Operator (Visual Basic)","linkify":"GetType Operator (Visual Basic)","nodes":[{"content":"GetType Operator (Visual Basic)","pos":[0,31]}]},{"content":"Returns a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object for the specified type.","pos":[650,709],"source":"Returns a <xref:System.Type> object for the specified type."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object provides information about the type such as its properties, methods, and events.","pos":[710,820],"source":" The <xref:System.Type> object provides information about the type such as its properties, methods, and events."},{"pos":[829,835],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[881,891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[898,907]},{"content":"Description","pos":[908,919]},{"content":"The name of the type for which you desire information.","pos":[947,1001]},{"pos":[1011,1018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`GetType`</ph> operator returns the <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object for the specified <ph id=\"ph3\">`typename`</ph>.","pos":[1022,1112],"source":"The `GetType` operator returns the <xref:System.Type> object for the specified `typename`."},{"content":"You can pass the name of any defined type in <ph id=\"ph1\">`typename`</ph>.","pos":[1113,1169],"source":" You can pass the name of any defined type in `typename`."},{"content":"This includes the following:","pos":[1170,1198]},{"pos":[1208,1264],"content":"Any Visual Basic data type, such as <ph id=\"ph1\">`Boolean`</ph> or <ph id=\"ph2\">`Date`</ph>.","source":"Any Visual Basic data type, such as `Boolean` or `Date`."},{"content":"Any .NET Framework class, structure, module, or interface, such as <ph id=\"ph1\">&lt;xref:System.ArgumentException?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Double?displayProperty=fullName&gt;</ph>.","pos":[1274,1447],"source":"Any .NET Framework class, structure, module, or interface, such as <xref:System.ArgumentException?displayProperty=fullName> or <xref:System.Double?displayProperty=fullName>."},{"content":"Any class, structure, module, or interface defined by your application.","pos":[1457,1528]},{"content":"Any array defined by your application.","pos":[1538,1576]},{"content":"Any delegate defined by your application.","pos":[1586,1627]},{"content":"Any enumeration defined by Visual Basic, the .NET Framework, or your application.","pos":[1637,1718]},{"content":"If you want to get the type object of an object variable, use the <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> method.","pos":[1725,1853],"source":"If you want to get the type object of an object variable, use the <xref:System.Type.GetType%2A?displayProperty=fullName> method."},{"pos":[1860,1928],"content":"The <ph id=\"ph1\">`GetType`</ph> operator can be useful in the following circumstances:","source":"The `GetType` operator can be useful in the following circumstances:"},{"content":"You must access the metadata for a type at run time.","pos":[1938,1990]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object supplies metadata such as type members and deployment information.","pos":[1991,2087],"source":" The <xref:System.Type> object supplies metadata such as type members and deployment information."},{"content":"You need this, for example, to reflect over an assembly.","pos":[2088,2144]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Reflection?displayProperty=fullName&gt;</ph>.","pos":[2145,2221],"source":" For more information, see <xref:System.Reflection?displayProperty=fullName>."},{"content":"You want to compare two object references to see if they refer to instances of the same type.","pos":[2231,2324]},{"content":"If they do, <ph id=\"ph1\">`GetType`</ph> returns references to the same <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object.","pos":[2325,2404],"source":" If they do, `GetType` returns references to the same <xref:System.Type> object."},{"pos":[2413,2420],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2424,2482],"content":"The following examples show the <ph id=\"ph1\">`GetType`</ph> operator in use.","source":"The following examples show the `GetType` operator in use."},{"pos":[2489,2618],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#26<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/gettype-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#26](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/gettype-operator_1.vb)]"},{"pos":[2627,2635],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[2639,2752],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[2755,2881],"source":" [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept>","pos":[2884,3006],"source":" [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)"}]}