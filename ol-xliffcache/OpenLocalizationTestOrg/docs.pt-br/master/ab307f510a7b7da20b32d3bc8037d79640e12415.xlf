<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab307f510a7b7da20b32d3bc8037d79640e12415</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\msmq-activation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17934d05be892920ddc0e8decf78f396e97b183d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e79c042a8815244c896cb5d4d6887b8214664982</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MSMQ Activation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MSMQ Activation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to host applications in Windows Process Activation Service (WAS) that are read from a message queue.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This sample uses the <ph id="ph1">`netMsmqBinding`</ph> and is based on the <bpt id="p1">[</bpt>Two-Way Communication<ept id="p1">](../../../../docs/framework/wcf/samples/two-way-communication.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The service in this case is a Web-hosted application and the client is self-hosted and outputs to the console to observe the status of purchase orders submitted.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The setup procedure and build instructions for this sample are located at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your computer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>InstallDrive&gt;:\WF_WCF_Samples</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> HYPERLINK "http://go.microsoft.com/fwlink/?LinkId=150780" \t "_blank"  and <ph id="ph2">[!INCLUDE[wf](../../../../includes/wf-md.md)]</ph> Samples for <ph id="ph3">[!INCLUDE[netfx40_long](../../../../includes/netfx40-long-md.md)]</ph> to download all <ph id="ph4">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> and <ph id="ph5">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>InstallDrive&gt;:\Samples\WCFWFCardSpace\WCF\Basic\Services\Hosting\WASHost\MsmqActivation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Windows Process Activation Service (WAS), the new process activation mechanism for <ph id="ph1">[!INCLUDE[lserver](../../../../includes/lserver-md.md)]</ph>, provides IIS-like features that were previously only available to HTTP-based applications to applications that use non-HTTP protocols.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> uses the Listener Adapter interface to communicate activation requests that are received over the non-HTTP protocols supported by <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, such as TCP, Named Pipes, and MSMQ.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The functionality for receiving requests over non-HTTP protocols is hosted by managed Windows services running in SMSvcHost.exe.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Net.Msmq Listener Adapter service (NetMsmqActivator) activates queued applications based on messages in the queue.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The client sends purchase orders to the service from within the scope of a transaction.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The service receives the orders in a transaction and processes them.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The service then calls back the client with the status of the order.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To facilitate two-way communication the client and service both use queues to enqueue purchase orders and order status.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The service contract <ph id="ph1">`IOrderProcessor`</ph> defines the one-way service operations that work with queuing.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The service operation uses the reply endpoint to send order statuses to the client.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The reply endpoint's address is the URI of the queue used to send the order status back to the client.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The order processing application implements this contract.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The reply contract to send order status to is specified by the client.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The client implements the order status contract.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The service uses the generated client of this contract to send order status back to the client.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The service operation processes the submitted purchase order.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> is applied to the service operation to specify automatic enlistment in the transaction that is used to receive the message from the queue and automatic completion of the transaction on completion of the service operation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Orders`</ph> class encapsulates order processing functionality.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this case, it adds the purchase order to a dictionary.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The transaction that the service operation enlisted in is available to the operations in the <ph id="ph1">`Orders`</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The service operation, in addition to processing the submitted purchase order, replies back to the client about the status of the order.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The client binding to use is specified using a configuration file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The MSMQ queue name is specified in an appSettings section of the configuration file.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The endpoint for the service is defined in the System.serviceModel section of the configuration file.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The MSMQ queue name and endpoint address use slightly different addressing conventions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The MSMQ queue name uses a dot (.) for the local computer and backslash separators in its path.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint address specifies a net.msmq: scheme, uses "localhost" for the local computer, and uses forward slashes in its path.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To read from a queue that is hosted on the remote computer, replace the "." and "localhost" to the remote computer name.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A .svc file with the name of the class is used to host the service code in WAS.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The Service.svc file itself contains a directive to create the <ph id="ph1">`OrderProcessorService`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The Service.svc file also contains an assembly directive to ensure that System.Transactions.dll is loaded.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The client creates a transaction scope.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Communication with the service takes place within the scope of the transaction, causing it to be treated as an atomic unit where all messages succeed or fail.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The transaction is committed by calling <ph id="ph1">`Complete`</ph> on the transaction scope.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The client code implements the <ph id="ph1">`IOrderStatus`</ph> contract to receive order status from the service.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this case, it prints out the order status.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The order status queue is created in the <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The client configuration includes the order status service configuration to host the order status service, as shown in the following sample configuration.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When you run the sample, the client and service activities are displayed in both the server and client console windows.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can see the server receive messages from the client.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Press ENTER in each console window to shut down the server and client.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The client displays the order status information sent by the server:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Ensure that <ph id="ph1">[!INCLUDE[iisver](../../../../includes/iisver-md.md)]</ph> is installed, as it is required for WAS activation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In addition, you must install the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> non-HTTP activation components:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Control Panel<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Programs and Features<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Turn Windows Features on or off<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Features Summary<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Add Features<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Expand the <bpt id="p1">**</bpt>Microsoft .NET Framework 3.0<ept id="p1">**</ept> node and check the <bpt id="p2">**</bpt>Windows Communication Foundation Non-HTTP Activation<ept id="p2">**</ept> feature.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Run the client by executing client.exe from a command window.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This creates the queue and sends a message to it.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Leave the client running to see the result of the service reading the message</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The MSMQ activation service runs as Network Service by default.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Therefore, the queue that is used to activate the application must have receive and peek permissions for Network Service.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This can be added by using the Message Queuing MMC:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Run<ept id="p2">**</ept>, then type <ph id="ph1">`Compmgmt.msc`</ph> and press ENTER.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Services and Applications<ept id="p1">**</ept>, expand <bpt id="p2">**</bpt>Message Queuing<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Private Queues<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Right-click the queue (servicemodelsamples/Service.svc) and choose <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Security<ept id="p1">**</ept> tab, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> and give peek and receive permissions to Network Service.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Configure the Windows Process Activation Service (WAS) to support MSMQ activation.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>As a convenience, the following steps are implemented in a batch file called AddMsmqSiteBinding.cmd located in the sample directory.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To support net.msmq activation, the default Web site must first be bound to the net.msmq protocol.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This can be done using appcmd.exe, which is installed with the <ph id="ph1">[!INCLUDE[iisver](../../../../includes/iisver-md.md)]</ph> management toolset.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>From an elevated (administrator) command prompt, run the following command.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This command is a single line of text.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This command adds a net.msmq site binding to the default Web site.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Although all applications within a site share a common net.msmq binding, each application can enable net.msmq support individually.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To enable net.msmq for the /servicemodelsamples application, run the following command from an elevated command prompt.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This command is a single line of text.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This command enables the /servicemodelsamples application to be accessed using http://localhost/servicemodelsamples and net.msmq://localhost/servicemodelsamples.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If you have not done so previously, ensure that the MSMQ activation service is enabled.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Run<ept id="p2">**</ept>, and type <ph id="ph1">`Services.msc`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Search the list of services for the <bpt id="p1">**</bpt>Net.Msmq Listener Adapter<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Right-click and select <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Startup Type<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Automatic<ept id="p2">**</ept>, click <bpt id="p3">**</bpt>Apply<ept id="p3">**</ept> and click the <bpt id="p4">**</bpt>Start<ept id="p4">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This step must only be done once prior to the first usage of the Net.Msmq Listener Adapter service.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-computer configuration, follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Additionally, change the code on the client that submits the purchase order to reflect the computer name in the URI of the queue when submitting the purchase order.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Use the following code:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remove the net.msmq site binding you added for this sample.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>As a convenience, the following steps are implemented in a batch file called RemoveMsmqSiteBinding.cmd located in the sample directory:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Remove net.msmq from the list of enabled protocols by running the following command from an elevated command prompt.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This command is a single line of text.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remove the net.msmq site binding by running the following command from an elevated command prompt.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This command is a single line of text.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Running the batch file will reset the DefaultAppPool to run using .NET Framework version 2.0.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>By default with the <ph id="ph1">`netMsmqBinding`</ph> binding transport, security is enabled.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Two properties, <ph id="ph1">`MsmqAuthenticationMode`</ph> and <ph id="ph2">`MsmqProtectionLevel`</ph>, together determine the type of transport security.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>By default the authentication mode is set to <ph id="ph1">`Windows`</ph> and the protection level is set to <ph id="ph2">`Sign`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For MSMQ to provide the authentication and signing feature, it must be part of a domain.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you run this sample on a computer that is not part of a domain, the following error is received: "User's internal message queuing certificate does not exist".</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To run the sample on a computer joined to a workgroup</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If your computer is not part of a domain, turn off transport security by setting the authentication mode and protection level to none as shown in the following sample configuration.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Change the configuration on both the server and the client before you run the sample.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Setting <ph id="ph1">`security mode`</ph> to <ph id="ph2">`None`</ph> is equivalent to setting <ph id="ph3">`MsmqAuthenticationMode`</ph>, <ph id="ph4">`MsmqProtectionLevel`</ph> and <ph id="ph5">`Message`</ph> security to <ph id="ph6">`None`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To enable activation in a computer joined to a workgroup, both the activation service and the worker process must be run with a specific user account (must be same for both) and the queue must have ACLs for the specific user account.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>To change the identity that the worker process runs under:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Run Inetmgr.exe.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Application Pools<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>AppPool<ept id="p2">**</ept> (typically <bpt id="p3">**</bpt>DefaultAppPool<ept id="p3">**</ept>) and choose <bpt id="p4">**</bpt>Set Application Pool Defaults…<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Change the Identity properties to use the specific user account.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To change the identity that the Activation Service runs under:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Run Services.msc.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>Net.MsmqListener Adapter<ept id="p1">**</ept>, and choose <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Change the account in the <bpt id="p1">**</bpt>LogOn<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In workgroup, the service must also run using an unrestricted token.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To do this, run the following in a command window:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AppFabric Hosting and Persistence Samples<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=193961)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>