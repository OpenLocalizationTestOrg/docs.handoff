{"content":"---\ntitle: \"Composite Data Types (Visual Basic)\"\nms.date: 04/25/2017\nhelpviewer_keywords: \n  - \"classes [Visual Basic], composite data types\"\n  - \"composite types [Visual Basic]\"\n  - \"composite data types [Visual Basic]\"\n  - \"data types [Visual Basic], composite\"\n  - \"arrays [Visual Basic], composite data types\"\n  - \"structures [Visual Basic], composite data types\"\n  - \"classes [Visual Basic], composite types\"\n  - \"types [Visual Basic], composite\"\nms.assetid: 62970f2e-52c0-4369-8963-613820f1f434\n---\n# Composite Data Types (Visual Basic)\nIn addition to the elementary data types Visual Basic supplies, you can also assemble items of different types to create *composite data types* such as structures, arrays, and classes. You can build composite data types from elementary types and from other composite types. For example, you can define an array of structure elements, or a structure with array members.  \n  \n## Data Types  \n A composite type is different from the data type of any of its components. For example, an array of `Integer` elements is not of the `Integer` data type.  \n  \n An array data type is normally represented using the element type, parentheses, and commas as necessary. For example, a one-dimensional array of `String` elements is represented as `String()`, and a two-dimensional array of `Boolean` elements is represented as `Boolean(,)`.  \n  \n## Structure Types  \n There is no single data type comprising all structures. Instead, each definition of a structure represents a unique data type, even if two structures define identical elements in the same order. However, if you create two or more instances of the same structure, Visual Basic considers them to be of the same data type.  \n  \n## Tuples\n\nA tuple is a lightweight structure that contains two or more fields whose types are predefined. Tuples are supported starting with Visual Basic 2017. Tuples are most commonly used to return multiple values from a single method call without having to pass arguments by reference or packaging the returned fields in a more heavy-weight class or structure. See the [Tuples](tuples.md) topic for more information on tuples.\n\n## Array Types  \n There is no single data type comprising all arrays. The data type of a particular instance of an array is determined by the following:  \n  \n-   The fact of being an array  \n  \n-   The rank (number of dimensions) of the array  \n  \n-   The element type of the array  \n  \n In particular, the length of a given dimension is not part of the instance's data type. The following example illustrates this.  \n  \n```  \nDim arrayA( ) As Byte = New Byte(12) {}  \nDim arrayB( ) As Byte = New Byte(100) {}  \nDim arrayC( ) As Short = New Short(100) {}  \nDim arrayD( , ) As Short  \nDim arrayE( , ) As Short = New Short(4, 10) {}  \n```  \n  \n In the preceding example, array variables `arrayA` and `arrayB` are considered to be of the same data type — `Byte()` — even though they are initialized to different lengths. Variables `arrayB` and `arrayC` are not of the same type because their element types are different. Variables `arrayC` and `arrayD` are not of the same type because their ranks are different. Variables `arrayD` and `arrayE` have the same type — `Short(,)` — because their ranks and element types are the same, even though `arrayD` is not yet initialized.  \n  \n For more information on arrays, see [Arrays](../../../../visual-basic/programming-guide/language-features/arrays/index.md).  \n  \n## Class Types  \n There is no single data type comprising all classes. Although one class can inherit from another class, each is a separate data type. Multiple instances of the same class are of the same data type. If you assign one class instance variable to another, not only do they have the same data type, they point to the same class instance in memory.  \n  \n For more information on classes, see [Objects and Classes](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md).  \n  \n## See also\n\n- [Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)\n- [Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)\n- [Generic Types in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)\n- [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)\n- [Structures](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)\n- [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)\n- [How to: Hold More Than One Value in a Variable](../../../../visual-basic/programming-guide/language-features/data-types/how-to-hold-more-than-one-value-in-a-variable.md)\n","nodes":[{"pos":[4,500],"embed":true,"restype":"x-metadata","content":"title: \"Composite Data Types (Visual Basic)\"\nms.date: 04/25/2017\nhelpviewer_keywords: \n  - \"classes [Visual Basic], composite data types\"\n  - \"composite types [Visual Basic]\"\n  - \"composite data types [Visual Basic]\"\n  - \"data types [Visual Basic], composite\"\n  - \"arrays [Visual Basic], composite data types\"\n  - \"structures [Visual Basic], composite data types\"\n  - \"classes [Visual Basic], composite types\"\n  - \"types [Visual Basic], composite\"\nms.assetid: 62970f2e-52c0-4369-8963-613820f1f434","nodes":[{"content":"Composite Data Types (Visual Basic)","nodes":[{"pos":[0,35],"content":"Composite Data Types (Visual Basic)","nodes":[{"content":"Composite Data Types (Visual Basic)","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[507,542],"content":"Composite Data Types (Visual Basic)","linkify":"Composite Data Types (Visual Basic)","nodes":[{"content":"Composite Data Types (Visual Basic)","pos":[0,35]}]},{"content":"In addition to the elementary data types Visual Basic supplies, you can also assemble items of different types to create <bpt id=\"p1\">*</bpt>composite data types<ept id=\"p1\">*</ept> such as structures, arrays, and classes.","pos":[543,727],"source":"In addition to the elementary data types Visual Basic supplies, you can also assemble items of different types to create *composite data types* such as structures, arrays, and classes."},{"content":"You can build composite data types from elementary types and from other composite types.","pos":[728,816]},{"content":"For example, you can define an array of structure elements, or a structure with array members.","pos":[817,911]},{"pos":[920,930],"content":"Data Types","linkify":"Data Types","nodes":[{"content":"Data Types","pos":[0,10]}]},{"content":"A composite type is different from the data type of any of its components.","pos":[934,1008]},{"content":"For example, an array of <ph id=\"ph1\">`Integer`</ph> elements is not of the <ph id=\"ph2\">`Integer`</ph> data type.","pos":[1009,1087],"source":" For example, an array of `Integer` elements is not of the `Integer` data type."},{"content":"An array data type is normally represented using the element type, parentheses, and commas as necessary.","pos":[1094,1198]},{"content":"For example, a one-dimensional array of <ph id=\"ph1\">`String`</ph> elements is represented as <ph id=\"ph2\">`String()`</ph>, and a two-dimensional array of <ph id=\"ph3\">`Boolean`</ph> elements is represented as <ph id=\"ph4\">`Boolean(,)`</ph>.","pos":[1199,1368],"source":" For example, a one-dimensional array of `String` elements is represented as `String()`, and a two-dimensional array of `Boolean` elements is represented as `Boolean(,)`."},{"pos":[1377,1392],"content":"Structure Types","linkify":"Structure Types","nodes":[{"content":"Structure Types","pos":[0,15]}]},{"content":"There is no single data type comprising all structures.","pos":[1396,1451]},{"content":"Instead, each definition of a structure represents a unique data type, even if two structures define identical elements in the same order.","pos":[1452,1590]},{"content":"However, if you create two or more instances of the same structure, Visual Basic considers them to be of the same data type.","pos":[1591,1715]},{"pos":[1724,1730],"content":"Tuples","linkify":"Tuples","nodes":[{"content":"Tuples","pos":[0,6]}]},{"content":"A tuple is a lightweight structure that contains two or more fields whose types are predefined.","pos":[1732,1827]},{"content":"Tuples are supported starting with Visual Basic 2017.","pos":[1828,1881]},{"content":"Tuples are most commonly used to return multiple values from a single method call without having to pass arguments by reference or packaging the returned fields in a more heavy-weight class or structure.","pos":[1882,2085]},{"content":"See the <bpt id=\"p1\">[</bpt>Tuples<ept id=\"p1\">](tuples.md)</ept> topic for more information on tuples.","pos":[2086,2151],"source":" See the [Tuples](tuples.md) topic for more information on tuples."},{"pos":[2156,2167],"content":"Array Types","linkify":"Array Types","nodes":[{"content":"Array Types","pos":[0,11]}]},{"content":"There is no single data type comprising all arrays.","pos":[2171,2222]},{"content":"The data type of a particular instance of an array is determined by the following:","pos":[2223,2305]},{"content":"The fact of being an array","pos":[2315,2341]},{"content":"The rank (number of dimensions) of the array","pos":[2351,2395]},{"content":"The element type of the array","pos":[2405,2434]},{"content":"In particular, the length of a given dimension is not part of the instance's data type.","pos":[2441,2528]},{"content":"The following example illustrates this.","pos":[2529,2568]},{"content":"In the preceding example, array variables <ph id=\"ph1\">`arrayA`</ph> and <ph id=\"ph2\">`arrayB`</ph> are considered to be of the same data type — <ph id=\"ph3\">`Byte()`</ph> — even though they are initialized to different lengths.","pos":[2796,2970],"source":"In the preceding example, array variables `arrayA` and `arrayB` are considered to be of the same data type — `Byte()` — even though they are initialized to different lengths."},{"content":"Variables <ph id=\"ph1\">`arrayB`</ph> and <ph id=\"ph2\">`arrayC`</ph> are not of the same type because their element types are different.","pos":[2971,3070],"source":" Variables `arrayB` and `arrayC` are not of the same type because their element types are different."},{"content":"Variables <ph id=\"ph1\">`arrayC`</ph> and <ph id=\"ph2\">`arrayD`</ph> are not of the same type because their ranks are different.","pos":[3071,3162],"source":" Variables `arrayC` and `arrayD` are not of the same type because their ranks are different."},{"content":"Variables <ph id=\"ph1\">`arrayD`</ph> and <ph id=\"ph2\">`arrayE`</ph> have the same type — <ph id=\"ph3\">`Short(,)`</ph> — because their ranks and element types are the same, even though <ph id=\"ph4\">`arrayD`</ph> is not yet initialized.","pos":[3163,3325],"source":" Variables `arrayD` and `arrayE` have the same type — `Short(,)` — because their ranks and element types are the same, even though `arrayD` is not yet initialized."},{"pos":[3332,3455],"content":"For more information on arrays, see <bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.","source":"For more information on arrays, see [Arrays](../../../../visual-basic/programming-guide/language-features/arrays/index.md)."},{"pos":[3464,3475],"content":"Class Types","linkify":"Class Types","nodes":[{"content":"Class Types","pos":[0,11]}]},{"content":"There is no single data type comprising all classes.","pos":[3479,3531]},{"content":"Although one class can inherit from another class, each is a separate data type.","pos":[3532,3612]},{"content":"Multiple instances of the same class are of the same data type.","pos":[3613,3676]},{"content":"If you assign one class instance variable to another, not only do they have the same data type, they point to the same class instance in memory.","pos":[3677,3821]},{"pos":[3828,3978],"content":"For more information on classes, see <bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>.","source":"For more information on classes, see [Objects and Classes](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)."},{"pos":[3987,3995],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3999,4093],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept>","source":"[Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)"},{"pos":[4096,4217],"content":"<bpt id=\"p1\">[</bpt>Elementary Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept>","source":"[Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)"},{"pos":[4220,4341],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[4344,4485],"content":"<bpt id=\"p1\">[</bpt>Value Types and Reference Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>","source":"[Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)"},{"pos":[4488,4615],"content":"<bpt id=\"p1\">[</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>","source":"[Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)"},{"pos":[4618,4717],"content":"<bpt id=\"p1\">[</bpt>Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept>","source":"[Structures](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)"},{"pos":[4720,4851],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","source":"[Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"},{"pos":[4854,5024],"content":"<bpt id=\"p1\">[</bpt>How to: Hold More Than One Value in a Variable<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-hold-more-than-one-value-in-a-variable.md)</ept>","source":"[How to: Hold More Than One Value in a Variable](../../../../visual-basic/programming-guide/language-features/data-types/how-to-hold-more-than-one-value-in-a-variable.md)"}]}