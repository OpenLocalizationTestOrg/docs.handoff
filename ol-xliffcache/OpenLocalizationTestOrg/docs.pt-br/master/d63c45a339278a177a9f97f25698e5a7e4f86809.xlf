<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d63c45a339278a177a9f97f25698e5a7e4f86809</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\quantifiers-in-regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab8c4d53833744b9feea9ad34c5dddfbf1e03c69</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">995f10f4b69e4241e71d7478544f8d63d04a4cc6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Quantifiers in Regular Expressions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Quantifiers in Regular Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Quantifiers specify how many instances of a character, group, or character class must be present in the input for a match to be found.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following table lists the quantifiers supported by .NET.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Greedy quantifier</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Lazy quantifier</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Match zero or more times.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Match one or more times.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Match zero or one time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept> <ph id="ph3">`}`</ph></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept> <ph id="ph3">`}?`</ph></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match exactly <bpt id="p1">*</bpt><ph id="ph1">n</ph><ept id="p1">*</ept> times.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept> <ph id="ph3">`,}`</ph></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept> <ph id="ph3">`,}?`</ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Match at least <bpt id="p1">*</bpt><ph id="ph1">n</ph><ept id="p1">*</ept> times.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept> <ph id="ph3">`,`</ph> <bpt id="p2">*</bpt>m<ept id="p2">*</ept> <ph id="ph4">`}`</ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept> <ph id="ph3">`,`</ph> <bpt id="p2">*</bpt>m<ept id="p2">*</ept> <ph id="ph4">`}?`</ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match from <bpt id="p1">*</bpt><ph id="ph1">n</ph><ept id="p1">*</ept> to <bpt id="p2">*</bpt>m<ept id="p2">*</ept> times.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The quantities <ph id="ph1">`n`</ph> and <ph id="ph2">`m`</ph> are integer constants.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Ordinarily, quantifiers are greedy; they cause the regular expression engine to match as many occurrences of particular patterns as possible.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Appending the <ph id="ph1">`?`</ph> character to a quantifier makes it lazy; it causes the regular expression engine to match as few occurrences as possible.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For a complete description of the difference between greedy and lazy quantifiers, see the section <bpt id="p1">[</bpt>Greedy and Lazy Quantifiers<ept id="p1">](#Greedy)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Nesting quantifiers (for example, as the regular expression pattern <ph id="ph1">`(a*)*`</ph> does) can increase the number of comparisons that the regular expression engine must perform, as an exponential function of the number of characters in the input string.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about this behavior and its workarounds, see <bpt id="p1">[</bpt>Backtracking<ept id="p1">](../../../docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Regular Expression Quantifiers</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following sections list the quantifiers supported by .NET regular expressions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the *, +, ?, {, and } characters are encountered in a regular expression pattern, the regular expression engine interprets them as quantifiers or part of quantifier constructs unless they are included in a <bpt id="p1">[</bpt>character class<ept id="p1">](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To interpret these as literal characters outside a character class, you must escape them by preceding them with a backslash.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, the string <ph id="ph1">`\*`</ph> in a regular expression pattern is interpreted as a literal asterisk ("<ph id="ph2">\*</ph>") character.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Match Zero or More Times: *</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`*`</ph> quantifier matches the preceding element zero or more times.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It is equivalent to the <ph id="ph1">`{0,}`</ph> quantifier.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`*`</ph> is a greedy quantifier whose lazy equivalent is <ph id="ph2">`*?`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Of the nine digits in the input string, five match the pattern and four (<ph id="ph1">`95`</ph>, <ph id="ph2">`929`</ph>, <ph id="ph3">`9129`</ph>, and <ph id="ph4">`9919`</ph>) do not.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Match a "9" followed by zero or more "1" characters.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Match zero or more "9" characters.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match One or More Times: +</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`+`</ph> quantifier matches the preceding element one or more times.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It is equivalent to <ph id="ph1">`{1,}`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`+`</ph> is a greedy quantifier whose lazy equivalent is <ph id="ph2">`+?`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban+\w*?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by one or more instances of the letter <ph id="ph3">`n`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The regular expression matches the words <ph id="ph1">`an`</ph>, <ph id="ph2">`annual`</ph>, <ph id="ph3">`announcement`</ph>, and <ph id="ph4">`antique`</ph>, and correctly fails to match <ph id="ph5">`autumn`</ph> and <ph id="ph6">`all`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by one or more "n" characters.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Match a word character zero or more times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Match Zero or One Time: ?</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`?`</ph> quantifier matches the preceding element zero or one time.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It is equivalent to <ph id="ph1">`{0,1}`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`?`</ph> is a greedy quantifier whose lazy equivalent is <ph id="ph2">`??`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by zero or one instances of the letter <ph id="ph3">`n`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In other words, it tries to match the words <ph id="ph1">`a`</ph> and <ph id="ph2">`an`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by zero or one "n" character.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Match Exactly n Times: {n}</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`}`</ph> quantifier matches the preceding element exactly <bpt id="p2">*</bpt><ph id="ph4">n</ph><ept id="p2">*</ept> times, where <bpt id="p3">*</bpt><ph id="ph5">n</ph><ept id="p3">*</ept> is any integer.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`}`</ph> is a greedy quantifier whose lazy equivalent is <ph id="ph4">`{`</ph><bpt id="p2">*</bpt><ph id="ph5">n</ph><ept id="p2">*</ept><ph id="ph6">`}?`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d+\,\d{3}\b`</ph> tries to match a word boundary followed by one or more decimal digits followed by three decimal digits followed by a word boundary.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Match a comma character.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Match three decimal digits.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Match at Least n Times: {n,}</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,}`</ph> quantifier matches the preceding element at least <bpt id="p2">*</bpt><ph id="ph4">n</ph><ept id="p2">*</ept> times, where <bpt id="p3">*</bpt><ph id="ph5">n</ph><ept id="p3">*</ept> is any integer.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,}`</ph> is a greedy quantifier whose lazy equivalent is <ph id="ph4">`{`</ph><bpt id="p2">*</bpt><ph id="ph5">n</ph><ept id="p2">*</ept><ph id="ph6">`}?`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d{2,}\b\D+`</ph> tries to match a word boundary followed by at least two digits followed by a word boundary and a non-digit character.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the phrase <ph id="ph1">`"7 days"`</ph> because it contains just one decimal digit, but it successfully matches the phrases <ph id="ph2">`"10 weeks and 300 years"`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Match at least two decimal digits.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Match at least one non-decimal digit.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Match Between n and m Times: {n,m}</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,`</ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept><ph id="ph4">`}`</ph> quantifier matches the preceding element at least <bpt id="p3">*</bpt><ph id="ph5">n</ph><ept id="p3">*</ept> times, but no more than <bpt id="p4">*</bpt>m<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt><ph id="ph6">n</ph><ept id="p5">*</ept> and <bpt id="p6">*</bpt>m<ept id="p6">*</ept> are integers.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,`</ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept><ph id="ph4">`}`</ph> is a greedy quantifier whose lazy equivalent is <ph id="ph5">`{`</ph><bpt id="p3">*</bpt><ph id="ph6">n</ph><ept id="p3">*</ept><ph id="ph7">`,`</ph><bpt id="p4">*</bpt>m<ept id="p4">*</ept><ph id="ph8">`}?`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`(00\s){2,4}`</ph> tries to match between two and four occurrences of two zero digits followed by a space.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Note that the final portion of the input string includes this pattern five times rather than the maximum of four.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, only the initial portion of this substring (up to the space and the fifth pair of zeros) matches the regular expression pattern.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#6<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#6<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Match Zero or More Times (Lazy Match): *?</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`*?`</ph> quantifier matches the preceding element zero or more times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <ph id="ph1">`*`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b\w*?oo\w*?\b`</ph> matches all words that contain the string <ph id="ph2">`oo`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#7<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Match the string "oo".</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>End on a word boundary.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Match One or More Times (Lazy Match): +?</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`+?`</ph> quantifier matches the preceding element one or more times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <ph id="ph1">`+`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\w+?\b`</ph> matches one or more characters separated by word boundaries.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#8<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#8<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Match Zero or One Time (Lazy Match): ??</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`??`</ph> quantifier matches the preceding element zero or one time, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <ph id="ph1">`?`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph> attempts to match the strings "Console.Write" or "Console.WriteLine".</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The string can also include "System."</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>before "Console", and it can be followed by an opening parenthesis.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The string must be at the beginning of a line, although it can be preceded by white space.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#9<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#9<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Match the start of the input stream.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "System.".</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Match the string "Console.Write".</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "Line".</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the opening parenthesis.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Match Exactly n Times (Lazy Match): {n}?</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`}?`</ph> quantifier matches the preceding element exactly <ph id="ph4">`n`</ph> times, where <bpt id="p2">*</bpt><ph id="ph5">n</ph><ept id="p2">*</ept> is any integer.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`}+`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> is used to identify a Web site address.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Note that it matches "www.microsoft.com" and "msdn.microsoft.com", but does not match "mywebsite" or "mycompany.com".</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#10<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#10<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Match at least 3 word characters, but as few characters as possible, followed by a dot or period character.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Match the pattern in the first group two times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Match at Least n Times (Lazy Match): {n,}?</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,}?`</ph> quantifier matches the preceding element at least <ph id="ph4">`n`</ph> times, where <bpt id="p2">*</bpt><ph id="ph5">n</ph><ept id="p2">*</ept> is any integer, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,}`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>See the example for the <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`}?`</ph> quantifier in the previous section for an illustration.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The regular expression in that example uses the <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,}`</ph> quantifier to match a string that has at least three characters followed by a period.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Match Between n and m Times (Lazy Match): {n,m}?</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,`</ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept><ph id="ph4">`}?`</ph> quantifier matches the preceding element between <ph id="ph5">`n`</ph> and <ph id="ph6">`m`</ph> times, where <bpt id="p3">*</bpt><ph id="ph7">n</ph><ept id="p3">*</ept> and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> are integers, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <ph id="ph1">`{`</ph><bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept><ph id="ph3">`,`</ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept><ph id="ph4">`}`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> matches sentences that contain between one and ten words.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>It matches all the sentences in the input string except for one sentence that contains 18 words.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers#12<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers/cs/Quantifiers1.cs#12)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers#12<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers/vb/Quantifiers1.vb#12)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Match an uppercase character from A to Z.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, followed by one or more white-space characters.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This is the first capture group.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Match the previous pattern between 1 and 10 times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Match any one of the punctuation characters ".", "!", or "?".</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Greedy and Lazy Quantifiers</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A number of the quantifiers have two versions:</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A greedy version.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A greedy quantifier tries to match an element as many times as possible.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>A non-greedy (or lazy) version.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A non-greedy quantifier tries to match an element as few times as possible.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You can turn a greedy quantifier into a lazy quantifier by simply adding a <ph id="ph1">`?`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Consider a simple regular expression that is intended to extract the last four digits from a string of numbers such as a credit card number.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The version of the regular expression that uses the <ph id="ph1">`*`</ph> greedy quantifier is <ph id="ph2">`\b.*([0-9]{4})\b`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>However, if a string contains two numbers, this regular expression matches the last four digits of the second number only, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers.Greedy#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers.Greedy/cs/Greedy.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers.Greedy#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers.Greedy/vb/Greedy.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the first number because the <ph id="ph1">`*`</ph> quantifier tries to match the previous element as many times as possible in the entire string, and so it finds its match at the end of the string.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>This is not the desired behavior.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Instead, you can use the <ph id="ph1">`*?`</ph>lazy quantifier to extract digits from both numbers, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers.Greedy#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Quantifiers.Greedy/cs/Greedy.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers.Greedy#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Quantifiers.Greedy/vb/Greedy.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>In most cases, regular expressions with greedy and lazy quantifiers return the same matches.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>They most commonly return different results when they are used with the wildcard (<ph id="ph1">`.`</ph>) metacharacter, which matches any character.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Quantifiers and Empty Matches</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The quantifiers <ph id="ph1">`*`</ph>, <ph id="ph2">`+`</ph>, and <ph id="ph3">`{`</ph><bpt id="p1">*</bpt><ph id="ph4">n</ph><ept id="p1">*</ept><ph id="ph5">`,`</ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept><ph id="ph6">`}`</ph> and their lazy counterparts never repeat after an empty match when the minimum number of captures has been found.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This rule prevents quantifiers from entering infinite loops on empty subexpression matches when the maximum number of possible group captures is infinite or near infinite.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>For example, the following code shows the result of a call to the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> method with the regular expression pattern <ph id="ph2">`(a?)*`</ph>, which matches zero or one "a" character zero or more times.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Note that the single capturing group captures each "a" as well as <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, but that there is no second empty match, because the first empty match causes the quantifier to stop repeating.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers.EmptyMatch#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/regularexpressions.quantifiers.emptymatch/cs/emptymatch1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers.EmptyMatch#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/regularexpressions.quantifiers.emptymatch/vb/emptymatch1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>To see the practical difference between a capturing group that defines a minimum and a maximum number of captures and one that defines a fixed number of captures, consider the regular expression patterns <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> and <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Both regular expressions consist of a single capturing group, which is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Either match "a" along with the value of the first captured group …</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>or test whether the first captured group has been defined.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>(Note that the <ph id="ph1">`(?(1)`</ph> construct does not define a capturing group.)</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>If the first captured group exists, match its value.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If the group does not exist, the group will match <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The first regular expression tries to match this pattern between zero and two times; the second, exactly two times.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Because the first pattern reaches its minimum number of captures with its first capture of <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, it never repeats to try to match <ph id="ph2">`a\1`</ph>; the <ph id="ph3">`{0,2}`</ph> quantifier allows only empty matches in the last iteration.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>In contrast, the second regular expression does match "a" because it evaluates <ph id="ph1">`a\1`</ph> a second time; the minimum number of iterations, 2, forces the engine to repeat after an empty match.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RegularExpressions.Quantifiers.EmptyMatch#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/regularexpressions.quantifiers.emptymatch/cs/emptymatch4.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RegularExpressions.Quantifiers.EmptyMatch#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/regularexpressions.quantifiers.emptymatch/vb/emptymatch4.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Backtracking<ept id="p1">](../../../docs/standard/base-types/backtracking-in-regular-expressions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>