{"content":"---\ntitle: \"Generics in XAML\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"generics [XAML Services]\"\nms.assetid: 835bfed7-585c-4216-ae67-b674edab8b92\n---\n# Generics in XAML\nThe .NET Framework XAML Services as implemented in System.Xaml provides support for using generic CLR types. This support includes specifying the constraints of generics as a type argument and enforcing the constraint by calling the appropriate `Add` method for generic collection cases. This topic describes aspects of using and referencing generic types in XAML.  \n  \n## x:TypeArguments  \n `x:TypeArguments` is a directive defined by the XAML language. When it is used as a member of a XAML type that is backed by a generic type, `x:TypeArguments` passes constraining type arguments of the generic to the backing constructor. For reference syntax that pertains to .NET Framework XAML Services use of `x:TypeArguments`, which includes syntax examples, see [x:TypeArguments Directive](x-typearguments-directive.md).  \n  \n Because `x:TypeArguments` takes a string, and has type converter backing, it is typically declared in XAML usage as an attribute.  \n  \n In the XAML node stream, the information declared by `x:TypeArguments` can be obtained from <xref:System.Xaml.XamlType.TypeArguments%2A?displayProperty=nameWithType> at a `StartObject` position in the node stream. The return value of <xref:System.Xaml.XamlType.TypeArguments%2A?displayProperty=nameWithType> is a list of <xref:System.Xaml.XamlType> values. Determination of whether a XAML type represents a generic type can be made by calling <xref:System.Xaml.XamlType.IsGeneric%2A?displayProperty=nameWithType>.  \n  \n## Rules and Syntax Conventions for Generics in XAML  \n In XAML, a generic type must always be represented as a constrained generic; an unconstrained generic is never present in the XAML type system or a XAML node stream and cannot be represented in XAML markup. A generic can be referenced within XAML attribute syntax, for cases where it is a nested type constraint of a generic being referenced by `x:TypeArguments`, or for cases where `x:Type` supplies a CLR type reference for a generic type. This is supported through the <xref:System.Xaml.Schema.XamlTypeTypeConverter> class defined by .NET Framework XAML Services.  \n  \n The XAML attribute syntax form enabled by <xref:System.Xaml.Schema.XamlTypeTypeConverter> alters the typical MSIL / CLR syntax convention that uses angle brackets for types and constraints of generics, and instead substitutes parentheses for the constraint container. For an example, see [x:TypeArguments Directive](x-typearguments-directive.md).  \n  \n## Generics and XAML 2009 Features  \n If you use XAML 2009 instead of mapping the CLR base types to obtain XAML types for common language primitives, you can use [XAML 2009 built-in types](built-in-types-for-common-xaml-language-primitives.md) as information items in `x:TypeArguments`. For example, you could declare the following (prefix mappings not shown, but `x` is the XAML language XAML namespace for XAML 2009):  \n  \n```xaml  \n<my:BusinessObject x:TypeArguments=\"x:String,x:Int32\"/>  \n```  \n  \n## Generics Support in WPF and Other v3.5 Frameworks  \n For XAML 2006 usage when specifically targeting WPF, [x:Class](x-class-directive.md) must also be provided on the same element as `x:TypeArguments`, and that element must be the root element in a XAML document. The root element must map to a generic type with at least one type argument. An example is <xref:System.Windows.Navigation.PageFunction%601>.  \n  \n Possible workarounds to support generic usages include defining a custom markup extension that can return generic types, or providing a wrapping class definition that derives from a generic type but flattens the generic constraint in its own class definition.  \n  \n In WPF and targeting [!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)], you can use XAML 2009 features together with `x:TypeArguments`, but only for loose XAML (XAML that is not markup-compiled). Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.  \n  \n Custom workflows in Windows Workflow Foundation for [!INCLUDE[net_v35_short](../../../includes/net-v35-short-md.md)] do not support generic XAML usage.  \n  \n## See also\n\n- [x:TypeArguments Directive](x-typearguments-directive.md)\n- [x:Class Directive](x-class-directive.md)\n- [Built-in Types for Common XAML Language Primitives](built-in-types-for-common-xaml-language-primitives.md)\n","nodes":[{"pos":[4,153],"embed":true,"restype":"x-metadata","content":"title: \"Generics in XAML\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"generics [XAML Services]\"\nms.assetid: 835bfed7-585c-4216-ae67-b674edab8b92","nodes":[{"content":"Generics in XAML","nodes":[{"pos":[0,16],"content":"Generics in XAML","nodes":[{"content":"Generics in XAML","pos":[0,16]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[160,176],"content":"Generics in XAML","linkify":"Generics in XAML","nodes":[{"content":"Generics in XAML","pos":[0,16]}]},{"content":"The .NET Framework XAML Services as implemented in System.Xaml provides support for using generic CLR types.","pos":[177,285]},{"content":"This support includes specifying the constraints of generics as a type argument and enforcing the constraint by calling the appropriate <ph id=\"ph1\">`Add`</ph> method for generic collection cases.","pos":[286,464],"source":" This support includes specifying the constraints of generics as a type argument and enforcing the constraint by calling the appropriate `Add` method for generic collection cases."},{"content":"This topic describes aspects of using and referencing generic types in XAML.","pos":[465,541]},{"pos":[550,565],"content":"x:TypeArguments","linkify":"x:TypeArguments","nodes":[{"content":"x:TypeArguments","pos":[0,15]}]},{"content":"<ph id=\"ph1\">`x:TypeArguments`</ph> is a directive defined by the XAML language.","pos":[569,631],"source":"`x:TypeArguments` is a directive defined by the XAML language."},{"content":"When it is used as a member of a XAML type that is backed by a generic type, <ph id=\"ph1\">`x:TypeArguments`</ph> passes constraining type arguments of the generic to the backing constructor.","pos":[632,804],"source":" When it is used as a member of a XAML type that is backed by a generic type, `x:TypeArguments` passes constraining type arguments of the generic to the backing constructor."},{"content":"For reference syntax that pertains to .NET Framework XAML Services use of <ph id=\"ph1\">`x:TypeArguments`</ph>, which includes syntax examples, see <bpt id=\"p1\">[</bpt>x:TypeArguments Directive<ept id=\"p1\">](x-typearguments-directive.md)</ept>.","pos":[805,992],"source":" For reference syntax that pertains to .NET Framework XAML Services use of `x:TypeArguments`, which includes syntax examples, see [x:TypeArguments Directive](x-typearguments-directive.md)."},{"pos":[999,1128],"content":"Because <ph id=\"ph1\">`x:TypeArguments`</ph> takes a string, and has type converter backing, it is typically declared in XAML usage as an attribute.","source":"Because `x:TypeArguments` takes a string, and has type converter backing, it is typically declared in XAML usage as an attribute."},{"content":"In the XAML node stream, the information declared by <ph id=\"ph1\">`x:TypeArguments`</ph> can be obtained from <ph id=\"ph2\">&lt;xref:System.Xaml.XamlType.TypeArguments%2A?displayProperty=nameWithType&gt;</ph> at a <ph id=\"ph3\">`StartObject`</ph> position in the node stream.","pos":[1135,1348],"source":"In the XAML node stream, the information declared by `x:TypeArguments` can be obtained from <xref:System.Xaml.XamlType.TypeArguments%2A?displayProperty=nameWithType> at a `StartObject` position in the node stream."},{"content":"The return value of <ph id=\"ph1\">&lt;xref:System.Xaml.XamlType.TypeArguments%2A?displayProperty=nameWithType&gt;</ph> is a list of <ph id=\"ph2\">&lt;xref:System.Xaml.XamlType&gt;</ph> values.","pos":[1349,1491],"source":" The return value of <xref:System.Xaml.XamlType.TypeArguments%2A?displayProperty=nameWithType> is a list of <xref:System.Xaml.XamlType> values."},{"content":"Determination of whether a XAML type represents a generic type can be made by calling <ph id=\"ph1\">&lt;xref:System.Xaml.XamlType.IsGeneric%2A?displayProperty=nameWithType&gt;</ph>.","pos":[1492,1648],"source":" Determination of whether a XAML type represents a generic type can be made by calling <xref:System.Xaml.XamlType.IsGeneric%2A?displayProperty=nameWithType>."},{"pos":[1657,1706],"content":"Rules and Syntax Conventions for Generics in XAML","linkify":"Rules and Syntax Conventions for Generics in XAML","nodes":[{"content":"Rules and Syntax Conventions for Generics in XAML","pos":[0,49]}]},{"content":"In XAML, a generic type must always be represented as a constrained generic; an unconstrained generic is never present in the XAML type system or a XAML node stream and cannot be represented in XAML markup.","pos":[1710,1916]},{"content":"A generic can be referenced within XAML attribute syntax, for cases where it is a nested type constraint of a generic being referenced by <ph id=\"ph1\">`x:TypeArguments`</ph>, or for cases where <ph id=\"ph2\">`x:Type`</ph> supplies a CLR type reference for a generic type.","pos":[1917,2151],"source":" A generic can be referenced within XAML attribute syntax, for cases where it is a nested type constraint of a generic being referenced by `x:TypeArguments`, or for cases where `x:Type` supplies a CLR type reference for a generic type."},{"content":"This is supported through the <ph id=\"ph1\">&lt;xref:System.Xaml.Schema.XamlTypeTypeConverter&gt;</ph> class defined by .NET Framework XAML Services.","pos":[2152,2276],"source":" This is supported through the <xref:System.Xaml.Schema.XamlTypeTypeConverter> class defined by .NET Framework XAML Services."},{"content":"The XAML attribute syntax form enabled by <ph id=\"ph1\">&lt;xref:System.Xaml.Schema.XamlTypeTypeConverter&gt;</ph> alters the typical MSIL / CLR syntax convention that uses angle brackets for types and constraints of generics, and instead substitutes parentheses for the constraint container.","pos":[2283,2550],"source":"The XAML attribute syntax form enabled by <xref:System.Xaml.Schema.XamlTypeTypeConverter> alters the typical MSIL / CLR syntax convention that uses angle brackets for types and constraints of generics, and instead substitutes parentheses for the constraint container."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>x:TypeArguments Directive<ept id=\"p1\">](x-typearguments-directive.md)</ept>.","pos":[2551,2629],"source":" For an example, see [x:TypeArguments Directive](x-typearguments-directive.md)."},{"pos":[2638,2669],"content":"Generics and XAML 2009 Features","linkify":"Generics and XAML 2009 Features","nodes":[{"content":"Generics and XAML 2009 Features","pos":[0,31]}]},{"content":"If you use XAML 2009 instead of mapping the CLR base types to obtain XAML types for common language primitives, you can use <bpt id=\"p1\">[</bpt>XAML 2009 built-in types<ept id=\"p1\">](built-in-types-for-common-xaml-language-primitives.md)</ept> as information items in <ph id=\"ph1\">`x:TypeArguments`</ph>.","pos":[2673,2921],"source":"If you use XAML 2009 instead of mapping the CLR base types to obtain XAML types for common language primitives, you can use [XAML 2009 built-in types](built-in-types-for-common-xaml-language-primitives.md) as information items in `x:TypeArguments`."},{"content":"For example, you could declare the following (prefix mappings not shown, but <ph id=\"ph1\">`x`</ph> is the XAML language XAML namespace for XAML 2009):","pos":[2922,3054],"source":" For example, you could declare the following (prefix mappings not shown, but `x` is the XAML language XAML namespace for XAML 2009):"},{"pos":[3140,3189],"content":"Generics Support in WPF and Other v3.5 Frameworks","linkify":"Generics Support in WPF and Other v3.5 Frameworks","nodes":[{"content":"Generics Support in WPF and Other v3.5 Frameworks","pos":[0,49]}]},{"content":"For XAML 2006 usage when specifically targeting WPF, <bpt id=\"p1\">[</bpt>x:Class<ept id=\"p1\">](x-class-directive.md)</ept> must also be provided on the same element as <ph id=\"ph1\">`x:TypeArguments`</ph>, and that element must be the root element in a XAML document.","pos":[3193,3403],"source":"For XAML 2006 usage when specifically targeting WPF, [x:Class](x-class-directive.md) must also be provided on the same element as `x:TypeArguments`, and that element must be the root element in a XAML document."},{"content":"The root element must map to a generic type with at least one type argument.","pos":[3404,3480]},{"content":"An example is <ph id=\"ph1\">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.","pos":[3481,3545],"source":" An example is <xref:System.Windows.Navigation.PageFunction%601>."},{"content":"Possible workarounds to support generic usages include defining a custom markup extension that can return generic types, or providing a wrapping class definition that derives from a generic type but flattens the generic constraint in its own class definition.","pos":[3552,3811]},{"content":"In WPF and targeting <ph id=\"ph1\">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, you can use XAML 2009 features together with <ph id=\"ph2\">`x:TypeArguments`</ph>, but only for loose XAML (XAML that is not markup-compiled).","pos":[3818,4028],"source":"In WPF and targeting [!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)], you can use XAML 2009 features together with `x:TypeArguments`, but only for loose XAML (XAML that is not markup-compiled)."},{"content":"Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.","pos":[4029,4145]},{"pos":[4152,4303],"content":"Custom workflows in Windows Workflow Foundation for <ph id=\"ph1\">[!INCLUDE[net_v35_short](../../../includes/net-v35-short-md.md)]</ph> do not support generic XAML usage.","source":"Custom workflows in Windows Workflow Foundation for [!INCLUDE[net_v35_short](../../../includes/net-v35-short-md.md)] do not support generic XAML usage."},{"pos":[4312,4320],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4324,4381],"content":"<bpt id=\"p1\">[</bpt>x:TypeArguments Directive<ept id=\"p1\">](x-typearguments-directive.md)</ept>","source":"[x:TypeArguments Directive](x-typearguments-directive.md)"},{"pos":[4384,4425],"content":"<bpt id=\"p1\">[</bpt>x:Class Directive<ept id=\"p1\">](x-class-directive.md)</ept>","source":"[x:Class Directive](x-class-directive.md)"},{"pos":[4428,4535],"content":"<bpt id=\"p1\">[</bpt>Built-in Types for Common XAML Language Primitives<ept id=\"p1\">](built-in-types-for-common-xaml-language-primitives.md)</ept>","source":"[Built-in Types for Common XAML Language Primitives](built-in-types-for-common-xaml-language-primitives.md)"}]}