<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="nullable-reference-types.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12fb4d0cc3cad8600906610c262f3a745472c064</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\nullable-reference-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e54e7ca302fdbd5059654d9e8efbf5745e010df4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ce30c385f1cd0029979cee0a36a8d00fa48834f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Design with nullable reference types</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This advanced tutorial provides an introduction to nullable reference types.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>You'll learn to express your design intent on when reference values may be null, and have the compiler enforce when they cannot be null.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Tutorial: Express your design intent more clearly with nullable and non-nullable reference types</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>C# 8 introduces <bpt id="p1">**</bpt>nullable reference types<ept id="p1">**</ept>, which complement reference types the same way nullable value types complement value types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You declare a variable to be a <bpt id="p1">**</bpt>nullable reference type<ept id="p1">**</ept> by appending a <ph id="ph1">`?`</ph> to the type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`string?`</ph> represents a nullable <ph id="ph2">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use these new types to more clearly express your design intent: some variables <bpt id="p1">*</bpt>must always have a value<ept id="p1">*</ept>, others <bpt id="p2">*</bpt>may be missing a value<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this tutorial, you'll learn how to:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Incorporate nullable and non-nullable reference types into your designs</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Enable nullable reference type checks throughout your code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Write code where the compiler enforces those design decisions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the nullable reference feature in your own designs</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You'll need to set up your machine to run .NET Core, including the C# 8.0 beta compiler.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The C# 8 beta compiler is available with <bpt id="p1">[</bpt>Visual Studio 2019 preview 4<ept id="p1">](https://visualstudio.microsoft.com/vs/preview/?utm_medium=microsoft&amp;utm_source=docs.microsoft.com&amp;utm_campaign=inline+link&amp;utm_content=download+vs2019+preview)</ept>, or <bpt id="p2">[</bpt>.NET Core 3.0 preview 3<ept id="p2">](https://dotnet.microsoft.com/download/dotnet-core/3.0)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This tutorial assumes you're familiar with C# and .NET, including either Visual Studio or the .NET Core CLI.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Incorporate nullable reference types into your designs</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this tutorial, you'll build a library that models running a survey.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The code uses both nullable reference types and non-nullable reference types to represent the real-world concepts.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The survey questions can never be null.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A respondent might prefer not to answer a question.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The responses might be null in this case.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The code you'll write for this sample expresses that intent, and the compiler enforces that intent.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Create the application and enable nullable reference types</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create a new console application either in Visual Studio or from the command line using <ph id="ph1">`dotnet new console`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name the application <ph id="ph1">`NullableIntroduction`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Once you've created the application, you'll need to enable C# 8 beta features.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`csproj`</ph> file and add a <ph id="ph2">`LangVersion`</ph> element to the <ph id="ph3">`PropertyGroup`</ph> element.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You must opt into the <bpt id="p1">**</bpt>nullable reference types<ept id="p1">**</ept> feature, even in C# 8 projects.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>That's because once the feature is turned on, existing reference variable declarations become <bpt id="p1">**</bpt>non-nullable reference types<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>While that decision will help find issues where existing code may not have proper null-checks, it may not accurately reflect your original design intent.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You turn on the feature by setting the <ph id="ph1">`NullableContextOptions`</ph> element to <ph id="ph2">`enable`</ph>:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When C# 8 is released (not in preview mode), the <ph id="ph1">`NullableContextOptions`</ph> element will be added by new project templates.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Until then, you'll need to add it manually.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Design the types for the application</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This survey application requires creating a number of classes:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A class that models the list of questions.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A class that models a list of people contacted for the survey.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A class that models the answers from a person that took the survey.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These types will make use of both nullable and non-nullable reference types to express which members are required and which members are optional.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Nullable reference types communicate that design intent clearly:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The questions that are part of the survey can never be null: It makes no sense to ask an empty question.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The respondents can never be null.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You'll want to track people you contacted, even respondents that declined to participate.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Any response to a question may be null.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Respondents can decline to answer some or all questions.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you've programmed in C#, you may be so accustomed to reference types that allow null values that you may have missed other opportunities to declare non-nullable instances:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The collection of questions should be non-nullable.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The collection of respondents should be non-nullable.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>As you write the code, you'll see that a non-nullable reference type as the default for references avoids common mistakes that could lead to null reference exceptions.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>One lesson from this tutorial is that you made decisions about which variables could or could not be null.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The language didn't provide syntax to express those decisions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Now it does.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The app you'll build will do the following steps:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Create a survey and add questions to it.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Create a pseudo-random set of respondents for the survey.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Contact respondents until the completed survey size reaches the goal number.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Write out important statistics on the survey responses.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Build the survey with nullable and non-nullable types</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The first code you'll write creates the survey.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You'll write classes to model a survey question and a survey run.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Your survey has three types of questions, distinguished by the format of the answer: Yes/No answers, number answers, and text answers.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`public`</ph> <ph id="ph2">`SurveyQuestion`</ph> class:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The compiler interprets every reference type variable declaration as a <bpt id="p1">**</bpt>non-nullable<ept id="p1">**</ept> reference type for code in a nullable enabled context.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can see your first warning by adding properties for the question text and the type of question, as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because you haven't initialized <ph id="ph1">`QuestionText`</ph>, the compiler issues a warning that a non-nullable property hasn't been initialized.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Your design requires the question text to be non-null, so you add a constructor to initialize it and the <ph id="ph1">`QuestionType`</ph> value as well.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The finished class definition looks like the following code:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Adding the constructor removes the warning.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The constructor argument is also a non-nullable reference type, so the compiler doesn't issue any warnings.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Next, create a <ph id="ph1">`public`</ph> class named <ph id="ph2">`SurveyRun`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This class contains a list of <ph id="ph1">`SurveyQuestion`</ph> objects and methods to add questions to the survey, as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>As before, you must initialize the list object to a non-null value or the compiler issues a warning.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>There are no null checks in the second overload of <ph id="ph1">`AddQuestion`</ph> because they aren't needed: You've declared that variable to be non-nullable.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Its value can't be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Switch to <ph id="ph1">`Program.cs`</ph> in your editor and replace the contents of <ph id="ph2">`Main`</ph> with the following lines of code:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Because the entire project is in a nullable enabled context, you'll get warnings when you pass <ph id="ph1">`null`</ph> to any method expecting a non-nullable reference type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Try it by adding the following line to <ph id="ph1">`Main`</ph>:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Create respondents and get answers to the survey</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Next, write the code that generates answers to the survey.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This process involves several small tasks:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Build a method that generates respondent objects.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>These represent people asked to fill out the survey.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Build logic to simulate asking the questions to a respondent and collecting answers or noting that a respondent didn't answer.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Repeat until enough respondents have answered the survey.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You'll need a class to represent a survey response, so add that now.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Enable nullable support.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Add an <ph id="ph1">`Id`</ph> property and a constructor that initializes it, as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Next, add a <ph id="ph1">`static`</ph> method to create new participants by generating a random ID:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The main responsibility of this class is to generate the responses for a participant to the questions in the survey.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This responsibility has a few steps:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Ask for participation in the survey.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If the person doesn't consent, return a missing (or null) response.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Ask each question and record the answer.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Each answer may also be missing (or null).</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Add the following code to your <ph id="ph1">`SurveyResponse`</ph> class:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The storage for the survey answers is a <ph id="ph1">`Dictionary&lt;int, string&gt;?`</ph>, indicating that it may be null.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You're using the new language feature to declare your design intent, both to the compiler and to anyone reading your code later.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you ever dereference <ph id="ph1">`surveyResponses`</ph> without checking for the null value first, you'll get a compiler warning.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You don't get a warning in the <ph id="ph1">`AnswerSurvey`</ph> method because the compiler can determine the <ph id="ph2">`surveyResponses`</ph> variable was set to a non-null value above.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`null`</ph> for missing answers highlights a key point for working with nullable reference types: your goal isn't to remove all <ph id="ph2">`null`</ph> values from your program.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Rather, your goal is to ensure that the code you write expresses the intent of your design.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Missing values are a necessary concept to express in your code.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`null`</ph> value is a clear way to express those missing values.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Trying to remove all <ph id="ph1">`null`</ph> values only leads to defining some other way to express those missing values without <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Next, you need to write the <ph id="ph1">`PerformSurvey`</ph> method in the <ph id="ph2">`SurveyRun`</ph> class.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Add the following code in the <ph id="ph1">`SurveyRun`</ph> class:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Here again, your choice of a nullable <ph id="ph1">`List&lt;SurveyResponse&gt;?`</ph> indicates the response may be null.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>That indicates the survey hasn't been given to any respondents yet.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Notice that respondents are added until enough have consented.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The last step to run the survey is to add a call to perform the survey at the end of the <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Examine survey responses</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The last step is to display survey results.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You'll add code to many of the classes you've written.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This code demonstrates the value of distinguishing nullable and non-nullable reference types.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Start by adding the following two expression-bodied members to the <ph id="ph1">`SurveyResponse`</ph> class:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`surveyResponses`</ph> is a non-nullable reference type, no checks are necessary before de-referencing it.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Answer`</ph> method returns a non-nullable string, so choose the overload of <ph id="ph2">`GetValueOrDefault`</ph> that takes a second argument for the default value.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Next, add these three expression-bodied members to the <ph id="ph1">`SurveyRun`</ph> class:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AllParticipants`</ph> member must take into account that the <ph id="ph2">`respondents`</ph> variable might be null, but the return value can't be null.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you change that expression by removing the <ph id="ph1">`??`</ph> and the empty sequence that follows, the compiler warns you the method might return <ph id="ph2">`null`</ph> and its return signature returns a non-nullable type.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Finally, add the following loop at the bottom of the <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You don't need any <ph id="ph1">`null`</ph> checks in this code because you've designed the underlying interfaces so that they all return non-nullable reference types.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Get the code</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can get the code for the finished tutorial from our <bpt id="p1">[</bpt>samples<ept id="p1">](https://github.com/dotnet/samples)</ept> repository in the <bpt id="p2">[</bpt>csharp/NullableIntroduction<ept id="p2">](https://github.com/dotnet/samples/tree/master/csharp/NullableIntroduction)</ept> folder.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Experiment by changing the type declarations between nullable and non-nullable reference types.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>See how that generates different warnings to ensure you don't accidentally dereference a <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Learn more by migrating an existing application to use nullable reference types:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Upgrade an application to use nullable reference types<ept id="p1">](upgrade-to-nullable-references.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>