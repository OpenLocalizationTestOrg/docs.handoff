{"content":"---\ntitle: \"Creating an Activity at Runtime with DynamicActivity | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1af85cc6-912d-449e-90c5-c5db3eca5ace\ncaps.latest.revision: 9\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Creating an Activity at Runtime with DynamicActivity\n<xref:System.Activities.DynamicActivity> is a concrete, sealed class with a public constructor. <xref:System.Activities.DynamicActivity> can be used to assemble activity functionality at runtime using an activity DOM.  \n  \n## DynamicActivity Features  \n <xref:System.Activities.DynamicActivity> has access to execution properties, arguments and variables, but no access to run-time services such as scheduling child activities or tracking.  \n  \n Top-level properties can be set using workflow <xref:System.Activities.Argument> objects. In imperative code, these arguments are created using CLR properties on a new type. In XAML, they are declared using `x:Class` and `x:Member` tags.  \n  \n Activities constructed using <xref:System.Activities.DynamicActivity> interface with the designer using <xref:System.ComponentModel.ICustomTypeDescriptor>. Activities created in the designer can be loaded dynamically using <xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A>, as demonstrated in the following procedure.  \n  \n#### To create an activity at runtime using imperative code  \n  \n1.  Open[!INCLUDE[vs2010](../../../includes/vs2010-md.md)].  \n  \n2.  Select **File**, **New**, **Project**. Select **Workflow 4.0** under **Visual C#** in the **Project Types** window, and select the **v2010** node. Select **Sequential Workflow Console Application** in the **Templates** window. Name the new project DynamicActivitySample.  \n  \n3.  Right-click Workflow1.xaml in the HelloActivity project and select **Delete**.  \n  \n4.  Open Program.cs. Add the following directive to the top of the file.  \n  \n    ```  \n    using System.Collections.Generic;  \n    ```  \n  \n5.  Replace the contents of the `Main` method with the following code, which creates a <xref:System.Activities.Statements.Sequence> activity that contains a single <xref:System.Activities.Statements.WriteLine> activity and assigns it to the <xref:System.Activities.DynamicActivity.Implementation%2A> property of a new dynamic activity.  \n  \n    ```csharp  \n    //Define the input argument for the activity  \n    var textOut = new InArgument<string>();  \n    //Create the activity, property, and implementation  \n                Activity dynamicWorkflow = new DynamicActivity()  \n                {  \n                    Properties =   \n                    {  \n                        new DynamicActivityProperty  \n                        {  \n                            Name = \"Text\",  \n                            Type = typeof(InArgument<String>),  \n                            Value = textOut  \n                        }  \n                    },  \n                    Implementation = () => new Sequence()  \n                    {  \n                        Activities =   \n                        {  \n                            new WriteLine()  \n                            {  \n                                Text = new InArgument<string>(env => textOut.Get(env))  \n                            }  \n                        }  \n                    }  \n                };  \n    //Execute the activity with a parameter dictionary  \n                WorkflowInvoker.Invoke(dynamicWorkflow, new Dictionary<string, object> { { \"Text\", \"Hello World!\" } });  \n                Console.ReadLine();  \n  \n    ```  \n  \n6.  Execute the application. A console window with the text \"Hello World!\" displays.  \n  \n#### To create an activity at runtime using XAML  \n  \n1.  Open [!INCLUDE[vs2010](../../../includes/vs2010-md.md)].  \n  \n2.  Select **File**, **New**, **Project**. Select **Workflow 4.0** under **Visual C#** in the **Project Types** window, and select the **v2010** node. Select  **Workflow Console Application** in the **Templates** window. Name the new project DynamicActivitySample.  \n  \n3.  Open Workflow1.xaml in the HelloActivity project. Click the **Arguments** option at the bottom of the designer. Create a new `In` argument called `TextToWrite` of type `String`.  \n  \n4.  Drag a **WriteLine** activity from the **Primitives** section of the toolbox onto the designer surface. Assign the value `TextToWrite` to the **Text** property of the activity.  \n  \n5.  Open Program.cs. Add the following directive to the top of the file.  \n  \n    ```  \n    using System.Activities.XamlIntegration;  \n    ```  \n  \n6.  Replace the contents of the `Main` method with the following code.  \n  \n    ```  \n    Activity act2 = ActivityXamlServices.Load(@\"Workflow1.xaml\");  \n                    results = WorkflowInvoker.Invoke(act2, new Dictionary<string, object> { { \"TextToWrite\", \"HelloWorld!\" } });  \n    Console.ReadLine();  \n    ```  \n  \n7.  Execute the application. A console window with the text \"Hello World!\" appears.  \n  \n8.  Right-click the Workflow1.xaml file in the **Solution Explorer** and select **View Code**. Note that the activity class is created with `x:Class` and the property is created with `x:Property`.  \n  \n## See Also  \n [Authoring Workflows, Activities, and Expressions Using Imperative Code](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)   \n [DynamicActivity Creation](../../../docs/framework/windows-workflow-foundation/samples/dynamicactivity-creation.md)","nodes":[{"pos":[12,81],"content":"Creating an Activity at Runtime with DynamicActivity | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Creating an Activity at Runtime with DynamicActivity | Microsoft Docs","pos":[0,69]}]},{"pos":[346,398],"content":"Creating an Activity at Runtime with DynamicActivity","linkify":"Creating an Activity at Runtime with DynamicActivity","nodes":[{"content":"Creating an Activity at Runtime with DynamicActivity","pos":[0,52]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.DynamicActivity&gt;</ph> is a concrete, sealed class with a public constructor.","pos":[399,494],"source":"<xref:System.Activities.DynamicActivity> is a concrete, sealed class with a public constructor."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.DynamicActivity&gt;</ph> can be used to assemble activity functionality at runtime using an activity DOM.","pos":[495,616],"source":"<xref:System.Activities.DynamicActivity> can be used to assemble activity functionality at runtime using an activity DOM."},{"pos":[625,649],"content":"DynamicActivity Features","linkify":"DynamicActivity Features","nodes":[{"content":"DynamicActivity Features","pos":[0,24]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.DynamicActivity&gt;</ph> has access to execution properties, arguments and variables, but no access to run-time services such as scheduling child activities or tracking.","pos":[653,838],"source":"<xref:System.Activities.DynamicActivity> has access to execution properties, arguments and variables, but no access to run-time services such as scheduling child activities or tracking."},{"content":"Top-level properties can be set using workflow <ph id=\"ph1\">&lt;xref:System.Activities.Argument&gt;</ph> objects.","pos":[845,934],"source":"Top-level properties can be set using workflow <xref:System.Activities.Argument> objects."},{"content":"In imperative code, these arguments are created using CLR properties on a new type.","pos":[935,1018]},{"content":"In XAML, they are declared using <ph id=\"ph1\">`x:Class`</ph> and <ph id=\"ph2\">`x:Member`</ph> tags.","pos":[1019,1082],"source":" In XAML, they are declared using `x:Class` and `x:Member` tags."},{"content":"Activities constructed using <ph id=\"ph1\">&lt;xref:System.Activities.DynamicActivity&gt;</ph> interface with the designer using <ph id=\"ph2\">&lt;xref:System.ComponentModel.ICustomTypeDescriptor&gt;</ph>.","pos":[1089,1244],"source":"Activities constructed using <xref:System.Activities.DynamicActivity> interface with the designer using <xref:System.ComponentModel.ICustomTypeDescriptor>."},{"content":"Activities created in the designer can be loaded dynamically using <ph id=\"ph1\">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A&gt;</ph>, as demonstrated in the following procedure.","pos":[1245,1426],"source":" Activities created in the designer can be loaded dynamically using <xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A>, as demonstrated in the following procedure."},{"pos":[1437,1491],"content":"To create an activity at runtime using imperative code","linkify":"To create an activity at runtime using imperative code","nodes":[{"content":"To create an activity at runtime using imperative code","pos":[0,54]}]},{"pos":[1501,1556],"content":"Open<ph id=\"ph1\">[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]</ph>.","source":"Open[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]."},{"content":"Select <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","pos":[1566,1604],"source":"Select **File**, **New**, **Project**."},{"content":"Select <bpt id=\"p1\">**</bpt>Workflow 4.0<ept id=\"p1\">**</ept> under <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>Project Types<ept id=\"p3\">**</ept> window, and select the <bpt id=\"p4\">**</bpt>v2010<ept id=\"p4\">**</ept> node.","pos":[1605,1712],"source":" Select **Workflow 4.0** under **Visual C#** in the **Project Types** window, and select the **v2010** node."},{"content":"Select <bpt id=\"p1\">**</bpt>Sequential Workflow Console Application<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>Templates<ept id=\"p2\">**</ept> window.","pos":[1713,1792],"source":" Select **Sequential Workflow Console Application** in the **Templates** window."},{"content":"Name the new project DynamicActivitySample.","pos":[1793,1836]},{"pos":[1846,1924],"content":"Right-click Workflow1.xaml in the HelloActivity project and select <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept>.","source":"Right-click Workflow1.xaml in the HelloActivity project and select **Delete**."},{"content":"Open Program.cs.","pos":[1934,1950]},{"content":"Add the following directive to the top of the file.","pos":[1951,2002]},{"pos":[2075,2406],"content":"Replace the contents of the <ph id=\"ph1\">`Main`</ph> method with the following code, which creates a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity that contains a single <ph id=\"ph3\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity and assigns it to the <ph id=\"ph4\">&lt;xref:System.Activities.DynamicActivity.Implementation%2A&gt;</ph> property of a new dynamic activity.","source":"Replace the contents of the `Main` method with the following code, which creates a <xref:System.Activities.Statements.Sequence> activity that contains a single <xref:System.Activities.Statements.WriteLine> activity and assigns it to the <xref:System.Activities.DynamicActivity.Implementation%2A> property of a new dynamic activity."},{"content":"Execute the application.","pos":[3682,3706]},{"content":"A console window with the text \"Hello World!\"","pos":[3707,3752]},{"content":"displays.","pos":[3753,3762]},{"pos":[3773,3816],"content":"To create an activity at runtime using XAML","linkify":"To create an activity at runtime using XAML","nodes":[{"content":"To create an activity at runtime using XAML","pos":[0,43]}]},{"pos":[3826,3882],"content":"Open <ph id=\"ph1\">[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]</ph>.","source":"Open [!INCLUDE[vs2010](../../../includes/vs2010-md.md)]."},{"content":"Select <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","pos":[3892,3930],"source":"Select **File**, **New**, **Project**."},{"content":"Select <bpt id=\"p1\">**</bpt>Workflow 4.0<ept id=\"p1\">**</ept> under <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>Project Types<ept id=\"p3\">**</ept> window, and select the <bpt id=\"p4\">**</bpt>v2010<ept id=\"p4\">**</ept> node.","pos":[3931,4038],"source":" Select **Workflow 4.0** under **Visual C#** in the **Project Types** window, and select the **v2010** node."},{"content":"Select  <bpt id=\"p1\">**</bpt>Workflow Console Application<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>Templates<ept id=\"p2\">**</ept> window.","pos":[4039,4108],"source":" Select  **Workflow Console Application** in the **Templates** window."},{"content":"Name the new project DynamicActivitySample.","pos":[4109,4152]},{"content":"Open Workflow1.xaml in the HelloActivity project.","pos":[4162,4211]},{"content":"Click the <bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept> option at the bottom of the designer.","pos":[4212,4273],"source":" Click the **Arguments** option at the bottom of the designer."},{"content":"Create a new <ph id=\"ph1\">`In`</ph> argument called <ph id=\"ph2\">`TextToWrite`</ph> of type <ph id=\"ph3\">`String`</ph>.","pos":[4274,4339],"source":" Create a new `In` argument called `TextToWrite` of type `String`."},{"content":"Drag a <bpt id=\"p1\">**</bpt>WriteLine<ept id=\"p1\">**</ept> activity from the <bpt id=\"p2\">**</bpt>Primitives<ept id=\"p2\">**</ept> section of the toolbox onto the designer surface.","pos":[4349,4452],"source":"Drag a **WriteLine** activity from the **Primitives** section of the toolbox onto the designer surface."},{"content":"Assign the value <ph id=\"ph1\">`TextToWrite`</ph> to the <bpt id=\"p1\">**</bpt>Text<ept id=\"p1\">**</ept> property of the activity.","pos":[4453,4525],"source":" Assign the value `TextToWrite` to the **Text** property of the activity."},{"content":"Open Program.cs.","pos":[4535,4551]},{"content":"Add the following directive to the top of the file.","pos":[4552,4603]},{"pos":[4683,4749],"content":"Replace the contents of the <ph id=\"ph1\">`Main`</ph> method with the following code.","source":"Replace the contents of the `Main` method with the following code."},{"content":"Execute the application.","pos":[5007,5031]},{"content":"A console window with the text \"Hello World!\"","pos":[5032,5077]},{"content":"appears.","pos":[5078,5086]},{"content":"Right-click the Workflow1.xaml file in the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>View Code<ept id=\"p2\">**</ept>.","pos":[5096,5186],"source":"Right-click the Workflow1.xaml file in the **Solution Explorer** and select **View Code**."},{"content":"Note that the activity class is created with <ph id=\"ph1\">`x:Class`</ph> and the property is created with <ph id=\"ph2\">`x:Property`</ph>.","pos":[5187,5288],"source":" Note that the activity class is created with `x:Class` and the property is created with `x:Property`."},{"pos":[5297,5305],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Authoring Workflows, Activities, and Expressions Using Imperative Code<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)</ept><ph id=\"ph1\"> </ph>","pos":[5309,5507],"source":"[Authoring Workflows, Activities, and Expressions Using Imperative Code](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md) "},{"content":"<bpt id=\"p1\"> [</bpt>DynamicActivity Creation<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/dynamicactivity-creation.md)</ept>","pos":[5510,5626],"source":" [DynamicActivity Creation](../../../docs/framework/windows-workflow-foundation/samples/dynamicactivity-creation.md)"}]}