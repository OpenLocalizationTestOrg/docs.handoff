<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="floating-point-division-operator.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af2316f92e2904eee1e8c046b34b8147e40cb513</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\floating-point-division-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0560308483af0b4f0b32923a4f4182741f64d280</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">432d678d17e6c799f493e0122e7eddf65e0635c3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>/ Operator (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/ Operator (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Divides two numbers and returns a floating-point result.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any numeric expression.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any numeric expression.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Supported Types</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All numeric types, including the unsigned and floating-point types and <ph id="ph1">`Decimal`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Result</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The result is the full quotient of <ph id="ph1">`expression1`</ph> divided by <ph id="ph2">`expression2`</ph>, including any remainder.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>\ Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept> returns the integer quotient, which drops the remainder.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data type of the result depends on the types of the operands.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table shows how the data type of the result is determined.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operand data types</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Result data type</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Both expressions are integral data types (<bpt id="p1">[</bpt>SByte<ept id="p1">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>, <bpt id="p3">[</bpt>Short<ept id="p3">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>, <bpt id="p4">[</bpt>UShort<ept id="p4">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>, <bpt id="p5">[</bpt>Integer<ept id="p5">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>, <bpt id="p6">[</bpt>UInteger<ept id="p6">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>, <bpt id="p7">[</bpt>Long<ept id="p7">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>, <bpt id="p8">[</bpt>ULong<ept id="p8">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One expression is a <bpt id="p1">[</bpt>Single<ept id="p1">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> data type and the other is not a <bpt id="p2">[</bpt>Double<ept id="p2">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One expression is a <bpt id="p1">[</bpt>Decimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> data type and the other is not a <bpt id="p2">[</bpt>Single<ept id="p2">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> or a <bpt id="p3">[</bpt>Double<ept id="p3">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Either expression is a <bpt id="p1">[</bpt>Double<ept id="p1">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> data type</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Before division is performed, any integral numeric expressions are widened to <ph id="ph1">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you assign the result to an integral data type, Visual Basic attempts to convert the result from <ph id="ph1">`Double`</ph> to that type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This can throw an exception if the result does not fit in that type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In particular, see "Attempted Division by Zero" on this Help page.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression1`</ph> or <ph id="ph2">`expression2`</ph> evaluates to <bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../visual-basic/language-reference/nothing.md)</ept>, it is treated as zero.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Attempted Division by Zero</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression2`</ph> evaluates to zero, the <ph id="ph2">`/`</ph> operator behaves differently for different operand data types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following table shows the possible behaviors.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Operand data types</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Behavior if <ph id="ph1">`expression2`</ph> is zero</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Floating-point (<ph id="ph1">`Single`</ph> or <ph id="ph2">`Double`</ph>)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns infinity (<ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph>), or <ph id="ph3">&lt;xref:System.Double.NaN&gt;</ph> (not a number) if <ph id="ph4">`expression1`</ph> is also zero</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Throws <ph id="ph1">&lt;xref:System.DivideByZeroException&gt;</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Integral (signed or unsigned)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Attempted conversion back to integral type throws <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> because integral types cannot accept <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>, <ph id="ph3">&lt;xref:System.Double.NegativeInfinity&gt;</ph>, or <ph id="ph4">&lt;xref:System.Double.NaN&gt;</ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/`</ph> operator can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">`/`</ph> operator to perform floating-point division.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The result is the quotient of the two operands.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The expressions in the preceding example return values of 2.5 and 3.333333.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note that the result is always floating-point (<ph id="ph1">`Double`</ph>), even though both operands are integer constants.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/= Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>\ Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types of Operator Results<ept id="p1">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arithmetic Operators<ept id="p1">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arithmetic Operators in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>