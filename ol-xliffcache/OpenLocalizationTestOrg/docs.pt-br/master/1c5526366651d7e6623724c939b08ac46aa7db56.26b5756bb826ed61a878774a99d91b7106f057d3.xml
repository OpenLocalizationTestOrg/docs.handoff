{"content":"---\ntitle: \"sizeof - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"sizeof_CSharpKeyword\"\n  - \"sizeof\"\nhelpviewer_keywords: \n  - \"sizeof keyword [C#]\"\nms.assetid: c548592c-677c-4f40-a4ce-e613f7529141\n---\n# sizeof (C# Reference)\n\nUsed to obtain the size in bytes for an unmanaged type.\n\nUnmanaged types include:\n\n- The simple types that are listed in the following table:\n\n   |Expression|Constant value|\n   |----------------|--------------------|\n   |`sizeof(sbyte)`|1|\n   |`sizeof(byte)`|1|\n   |`sizeof(short)`|2|\n   |`sizeof(ushort)`|2|\n   |`sizeof(int)`|4|\n   |`sizeof(uint)`|4|\n   |`sizeof(long)`|8|\n   |`sizeof(ulong)`|8|\n   |`sizeof(char)`|2 (Unicode)|\n   |`sizeof(float)`|4|\n   |`sizeof(double)`|8|\n   |`sizeof(decimal)`|16|\n   |`sizeof(bool)`|1|\n\n- Enum types.\n\n- Pointer types.\n\n- User-defined structs that do not contain any instance fields or auto-implemented instance properties that are reference types or constructed types.\n\nThe following example shows how to retrieve the size of an `int`:\n\n```csharp\n// Constant value 4:\nint intSize = sizeof(int);\n```\n\n## Remarks\n\nStarting with version 2.0 of C#, applying `sizeof` to simple or enum types no longer requires that code be compiled in an [unsafe](unsafe.md) context.\n\nThe `sizeof` operator cannot be overloaded. The values returned by the `sizeof` operator are of type `int`. The previous table shows the constant values that are substituted for `sizeof` expressions that have certain simple types as operands.\n\nFor all other types, including structs, the `sizeof` operator can be used only in unsafe code blocks. Although you can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=nameWithType> method, the value returned by this method is not always the same as the value returned by `sizeof`. <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=nameWithType> returns the size after the type has been marshaled, whereas `sizeof` returns the size as it has been allocated by the common language runtime, including any padding.\n\n## Example\n\n[!code-csharp[csrefKeywordsOperator#11](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsOperator/CS/csrefKeywordsOperators.cs#11)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Operator Keywords](operator-keywords.md)\n- [enum](enum.md)\n- [Unsafe Code and Pointers](../../programming-guide/unsafe-code-pointers/index.md)\n- [Structs](../../programming-guide/classes-and-structs/structs.md)\n- [Constants](../../programming-guide/classes-and-structs/constants.md)","nodes":[{"pos":[4,226],"embed":true,"restype":"x-metadata","content":"title: \"sizeof - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"sizeof_CSharpKeyword\"\n  - \"sizeof\"\nhelpviewer_keywords: \n  - \"sizeof keyword [C#]\"\nms.assetid: c548592c-677c-4f40-a4ce-e613f7529141","nodes":[{"content":"sizeof - C# Reference","nodes":[{"pos":[0,21],"content":"sizeof - C# Reference","nodes":[{"content":"sizeof - C# Reference","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[233,254],"content":"sizeof (C# Reference)","linkify":"sizeof (C# Reference)","nodes":[{"content":"sizeof (C# Reference)","pos":[0,21]}]},{"content":"Used to obtain the size in bytes for an unmanaged type.","pos":[256,311]},{"content":"Unmanaged types include:","pos":[313,337]},{"content":"The simple types that are listed in the following table:","pos":[341,397]},{"content":"Expression","pos":[403,413]},{"content":"Constant value","pos":[414,428]},{"content":"1","pos":[493,494]},{"content":"1","pos":[515,516]},{"content":"2","pos":[538,539]},{"content":"2","pos":[562,563]},{"content":"4","pos":[583,584]},{"content":"4","pos":[605,606]},{"content":"8","pos":[627,628]},{"content":"8","pos":[650,651]},{"content":"2 (Unicode)","pos":[672,683]},{"content":"4","pos":[705,706]},{"content":"8","pos":[729,730]},{"content":"16","pos":[754,756]},{"content":"1","pos":[777,778]},{"content":"Enum types.","pos":[783,794]},{"content":"Pointer types.","pos":[798,812]},{"content":"User-defined structs that do not contain any instance fields or auto-implemented instance properties that are reference types or constructed types.","pos":[816,963]},{"pos":[965,1030],"content":"The following example shows how to retrieve the size of an <ph id=\"ph1\">`int`</ph>:","source":"The following example shows how to retrieve the size of an `int`:"},{"pos":[1098,1105],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1107,1257],"content":"Starting with version 2.0 of C#, applying <ph id=\"ph1\">`sizeof`</ph> to simple or enum types no longer requires that code be compiled in an <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](unsafe.md)</ept> context.","source":"Starting with version 2.0 of C#, applying `sizeof` to simple or enum types no longer requires that code be compiled in an [unsafe](unsafe.md) context."},{"content":"The <ph id=\"ph1\">`sizeof`</ph> operator cannot be overloaded.","pos":[1259,1302],"source":"The `sizeof` operator cannot be overloaded."},{"content":"The values returned by the <ph id=\"ph1\">`sizeof`</ph> operator are of type <ph id=\"ph2\">`int`</ph>.","pos":[1303,1366],"source":" The values returned by the `sizeof` operator are of type `int`."},{"content":"The previous table shows the constant values that are substituted for <ph id=\"ph1\">`sizeof`</ph> expressions that have certain simple types as operands.","pos":[1367,1501],"source":" The previous table shows the constant values that are substituted for `sizeof` expressions that have certain simple types as operands."},{"content":"For all other types, including structs, the <ph id=\"ph1\">`sizeof`</ph> operator can be used only in unsafe code blocks.","pos":[1503,1604],"source":"For all other types, including structs, the `sizeof` operator can be used only in unsafe code blocks."},{"content":"Although you can use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=nameWithType&gt;</ph> method, the value returned by this method is not always the same as the value returned by <ph id=\"ph2\">`sizeof`</ph>.","pos":[1605,1814],"source":" Although you can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=nameWithType> method, the value returned by this method is not always the same as the value returned by `sizeof`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=nameWithType&gt;</ph> returns the size after the type has been marshaled, whereas <ph id=\"ph2\">`sizeof`</ph> returns the size as it has been allocated by the common language runtime, including any padding.","pos":[1815,2065],"source":"<xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=nameWithType> returns the size after the type has been marshaled, whereas `sizeof` returns the size as it has been allocated by the common language runtime, including any padding."},{"pos":[2070,2077],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2226,2251],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2317,2325],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2329,2356],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2359,2415],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2418,2441],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[2444,2485],"content":"<bpt id=\"p1\">[</bpt>Operator Keywords<ept id=\"p1\">](operator-keywords.md)</ept>","source":"[Operator Keywords](operator-keywords.md)"},{"pos":[2488,2503],"content":"<bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](enum.md)</ept>","source":"[enum](enum.md)"},{"pos":[2506,2587],"content":"<bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/index.md)</ept>","source":"[Unsafe Code and Pointers](../../programming-guide/unsafe-code-pointers/index.md)"},{"pos":[2590,2655],"content":"<bpt id=\"p1\">[</bpt>Structs<ept id=\"p1\">](../../programming-guide/classes-and-structs/structs.md)</ept>","source":"[Structs](../../programming-guide/classes-and-structs/structs.md)"},{"pos":[2658,2727],"content":"<bpt id=\"p1\">[</bpt>Constants<ept id=\"p1\">](../../programming-guide/classes-and-structs/constants.md)</ept>","source":"[Constants](../../programming-guide/classes-and-structs/constants.md)"}]}