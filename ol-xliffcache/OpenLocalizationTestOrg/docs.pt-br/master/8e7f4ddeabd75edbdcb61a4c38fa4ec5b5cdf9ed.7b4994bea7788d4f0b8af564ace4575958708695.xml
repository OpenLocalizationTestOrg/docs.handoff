{"content":"---\ntitle: \"Do...Loop Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Do\"\n  - \"vb.Loop\"\n  - \"vb.Until\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"conditional statements, Do…Loop\"\n  - \"while statement, Do...Loop\"\n  - \"execution, conditional\"\n  - \"Do loops\"\n  - \"Until keyword, Do...Loop statement\"\n  - \"Do...Loop statement\"\n  - \"instructions, repeating\"\n  - \"Do statement\"\n  - \"Exit statement, in Do...Loop statements\"\n  - \"loop structures, Do…Loop statements\"\n  - \"do-while statements\"\n  - \"loops, exiting\"\n  - \"Loop keyword, Do...Loop statement\"\nms.assetid: 892f9096-b3e2-4aee-834d-83bc4e2c379d\ncaps.latest.revision: 37\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Do...Loop Statement (Visual Basic)\nRepeats a block of statements while a `Boolean` condition is `True` or until the condition becomes `True`.  \n  \n## Syntax  \n  \n```  \nDo { While | Until } condition  \n    [ statements ]  \n    [ Continue Do ]  \n    [ statements ]  \n    [ Exit Do ]  \n    [ statements ]  \nLoop  \n-or-  \nDo  \n    [ statements ]  \n    [ Continue Do ]  \n    [ statements ]  \n    [ Exit Do ]  \n    [ statements ]  \nLoop { While | Until } condition  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`Do`|Required. Starts the definition of the `Do` loop.|  \n|`While`|Required unless `Until` is used. Repeat the loop until `condition` is `False`.|  \n|`Until`|Required unless `While` is used. Repeat the loop until `condition` is `True`.|  \n|`condition`|Optional. `Boolean` expression. If `condition` is `Nothing`, Visual Basic treats it as `False`.|  \n|`statements`|Optional. One or more statements that are repeated while, or until, `condition` is `True`.|  \n|`Continue Do`|Optional. Transfers control to the next iteration of the `Do` loop.|  \n|`Exit Do`|Optional. Transfers control out of the `Do` loop.|  \n|`Loop`|Required. Terminates the definition of the `Do` loop.|  \n  \n## Remarks  \n Use a `Do...Loop` structure when you want to repeat a set of statements an indefinite number of times, until a condition is satisfied. If you want to repeat the statements a set number of times, the [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) is usually a better choice.  \n  \n You can use either `While` or `Until` to specify `condition`, but not both.  \n  \n You can test `condition` only one time, at either the start or the end of the loop. If you test `condition` at the start of the loop (in the `Do` statement), the loop might not run even one time. If you test at the end of the loop (in the `Loop` statement), the loop always runs at least one time.  \n  \n The condition usually results from a comparison of two values, but it can be any expression that evaluates to a [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md) value (`True` or `False`). This includes values of other data types, such as numeric types, that have been converted to `Boolean`.  \n  \n You can nest `Do` loops by putting one loop within another. You can also nest different kinds of control structures within each other. For more information, see [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md).  \n  \n> [!NOTE]\n>  The `Do...Loop` structure gives you more flexibility than the [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) because it enables you to decide whether to end the loop when `condition` stops being `True` or when it first becomes `True`. It also enables you to test `condition` at either the start or the end of the loop.  \n  \n## Exit Do  \n The [Exit Do](../../../visual-basic/language-reference/statements/exit-statement.md) statement can provide an alternative way to exit a `Do…Loop`. `Exit Do` transfers control immediately to the statement that follows the `Loop` statement.  \n  \n `Exit Do` is often used after some condition is evaluated, for example in an `If...Then...Else` structure. You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request. One use of `Exit Do` is to test for a condition that could cause an *endless loop*, which is a loop that could run a large or even infinite number of times. You can use `Exit Do` to escape the loop.  \n  \n You can include any number of `Exit Do` statements anywhere in a `Do…Loop`.  \n  \n When used within nested `Do` loops, `Exit Do` transfers control out of the innermost loop and into the next higher level of nesting.  \n  \n## Example  \n In the following example, the statements in the loop continue to run until the `index` variable is greater than 10. The `Until` clause is at the end of the loop.  \n  \n [!code-vb[VbVbalrStatements#131](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_1.vb)]  \n  \n## Example  \n The following example uses a `While` clause instead of an `Until` clause, and `condition` is tested at the start of the loop instead of at the end.  \n  \n [!code-vb[VbVbalrStatements#132](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_2.vb)]  \n  \n## Example  \n In the following example, `condition` stops the loop when the `index` variable is greater than 100. The `If` statement in the loop, however, causes the `Exit Do` statement to stop the loop when the index variable is greater than 10.  \n  \n [!code-vb[VbVbalrStatements#133](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_3.vb)]  \n  \n## Example  \n The following example reads all lines in a text file. The <xref:System.IO.File.OpenText%2A> method opens the file and returns a <xref:System.IO.StreamReader> that reads the characters. In the `Do...Loop` condition, the <xref:System.IO.StreamReader.Peek%2A> method of the `StreamReader` determines whether there are any additional characters.  \n  \n [!code-vb[VbVbalrStatements#134](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_4.vb)]  \n  \n## See Also  \n [Loop Structures](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)   \n [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)   \n [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)   \n [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)   \n [Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)   \n [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)\n","nodes":[{"pos":[12,63],"content":"Do...Loop Statement (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Do...Loop Statement (Visual Basic) | Microsoft Docs","pos":[0,51]}]},{"pos":[1006,1040],"content":"Do...Loop Statement (Visual Basic)","linkify":"Do...Loop Statement (Visual Basic)","nodes":[{"content":"Do...Loop Statement (Visual Basic)","pos":[0,34]}]},{"pos":[1041,1147],"content":"Repeats a block of statements while a <ph id=\"ph1\">`Boolean`</ph> condition is <ph id=\"ph2\">`True`</ph> or until the condition becomes <ph id=\"ph3\">`True`</ph>.","source":"Repeats a block of statements while a `Boolean` condition is `True` or until the condition becomes `True`."},{"pos":[1156,1162],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1479,1484],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1491,1495]},{"content":"Definition","pos":[1496,1506]},{"content":"Required.","pos":[1528,1537]},{"content":"Starts the definition of the <ph id=\"ph1\">`Do`</ph> loop.","pos":[1538,1577],"source":" Starts the definition of the `Do` loop."},{"content":"Required unless <ph id=\"ph1\">`Until`</ph> is used.","pos":[1590,1622],"source":"Required unless `Until` is used."},{"content":"Repeat the loop until <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`False`</ph>.","pos":[1623,1668],"source":" Repeat the loop until `condition` is `False`."},{"content":"Required unless <ph id=\"ph1\">`While`</ph> is used.","pos":[1681,1713],"source":"Required unless `While` is used."},{"content":"Repeat the loop until <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`True`</ph>.","pos":[1714,1758],"source":" Repeat the loop until `condition` is `True`."},{"content":"Optional.","pos":[1775,1784]},{"content":"<ph id=\"ph1\">`Boolean`</ph> expression.","pos":[1785,1806],"source":"`Boolean` expression."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`Nothing`</ph>, Visual Basic treats it as <ph id=\"ph3\">`False`</ph>.","pos":[1807,1870],"source":" If `condition` is `Nothing`, Visual Basic treats it as `False`."},{"content":"Optional.","pos":[1888,1897]},{"content":"One or more statements that are repeated while, or until, <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`True`</ph>.","pos":[1898,1978],"source":" One or more statements that are repeated while, or until, `condition` is `True`."},{"content":"Optional.","pos":[1997,2006]},{"content":"Transfers control to the next iteration of the <ph id=\"ph1\">`Do`</ph> loop.","pos":[2007,2064],"source":" Transfers control to the next iteration of the `Do` loop."},{"content":"Optional.","pos":[2079,2088]},{"content":"Transfers control out of the <ph id=\"ph1\">`Do`</ph> loop.","pos":[2089,2128],"source":" Transfers control out of the `Do` loop."},{"content":"Required.","pos":[2140,2149]},{"content":"Terminates the definition of the <ph id=\"ph1\">`Do`</ph> loop.","pos":[2150,2193],"source":" Terminates the definition of the `Do` loop."},{"pos":[2203,2210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use a <ph id=\"ph1\">`Do...Loop`</ph> structure when you want to repeat a set of statements an indefinite number of times, until a condition is satisfied.","pos":[2214,2348],"source":"Use a `Do...Loop` structure when you want to repeat a set of statements an indefinite number of times, until a condition is satisfied."},{"content":"If you want to repeat the statements a set number of times, the <bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> is usually a better choice.","pos":[2349,2538],"source":" If you want to repeat the statements a set number of times, the [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) is usually a better choice."},{"pos":[2545,2620],"content":"You can use either <ph id=\"ph1\">`While`</ph> or <ph id=\"ph2\">`Until`</ph> to specify <ph id=\"ph3\">`condition`</ph>, but not both.","source":"You can use either `While` or `Until` to specify `condition`, but not both."},{"content":"You can test <ph id=\"ph1\">`condition`</ph> only one time, at either the start or the end of the loop.","pos":[2627,2710],"source":"You can test `condition` only one time, at either the start or the end of the loop."},{"content":"If you test <ph id=\"ph1\">`condition`</ph> at the start of the loop (in the <ph id=\"ph2\">`Do`</ph> statement), the loop might not run even one time.","pos":[2711,2822],"source":" If you test `condition` at the start of the loop (in the `Do` statement), the loop might not run even one time."},{"content":"If you test at the end of the loop (in the <ph id=\"ph1\">`Loop`</ph> statement), the loop always runs at least one time.","pos":[2823,2924],"source":" If you test at the end of the loop (in the `Loop` statement), the loop always runs at least one time."},{"content":"The condition usually results from a comparison of two values, but it can be any expression that evaluates to a <bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> value (<ph id=\"ph1\">`True`</ph> or <ph id=\"ph2\">`False`</ph>).","pos":[2931,3163],"source":"The condition usually results from a comparison of two values, but it can be any expression that evaluates to a [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md) value (`True` or `False`)."},{"content":"This includes values of other data types, such as numeric types, that have been converted to <ph id=\"ph1\">`Boolean`</ph>.","pos":[3164,3267],"source":" This includes values of other data types, such as numeric types, that have been converted to `Boolean`."},{"content":"You can nest <ph id=\"ph1\">`Do`</ph> loops by putting one loop within another.","pos":[3274,3333],"source":"You can nest `Do` loops by putting one loop within another."},{"content":"You can also nest different kinds of control structures within each other.","pos":[3334,3408]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.","pos":[3409,3564],"source":" For more information, see [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)."},{"pos":[3572,3966],"content":"[!NOTE]\n The `Do...Loop` structure gives you more flexibility than the [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) because it enables you to decide whether to end the loop when `condition` stops being `True` or when it first becomes `True`. It also enables you to test `condition` at either the start or the end of the loop.","leadings":["","> "],"nodes":[{"content":" The `Do...Loop` structure gives you more flexibility than the [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) because it enables you to decide whether to end the loop when `condition` stops being `True` or when it first becomes `True`. It also enables you to test `condition` at either the start or the end of the loop.","pos":[8,392],"nodes":[{"content":"The <ph id=\"ph1\">`Do...Loop`</ph> structure gives you more flexibility than the <bpt id=\"p1\">[</bpt>While...End While Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept> because it enables you to decide whether to end the loop when <ph id=\"ph2\">`condition`</ph> stops being <ph id=\"ph3\">`True`</ph> or when it first becomes <ph id=\"ph4\">`True`</ph>.","pos":[1,300],"source":" The `Do...Loop` structure gives you more flexibility than the [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) because it enables you to decide whether to end the loop when `condition` stops being `True` or when it first becomes `True`."},{"content":"It also enables you to test <ph id=\"ph1\">`condition`</ph> at either the start or the end of the loop.","pos":[301,384],"source":" It also enables you to test `condition` at either the start or the end of the loop."}]}]},{"pos":[3975,3982],"content":"Exit Do","linkify":"Exit Do","nodes":[{"content":"Exit Do","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">[</bpt>Exit Do<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement can provide an alternative way to exit a <ph id=\"ph1\">`Do…Loop`</ph>.","pos":[3986,4132],"source":"The [Exit Do](../../../visual-basic/language-reference/statements/exit-statement.md) statement can provide an alternative way to exit a `Do…Loop`."},{"content":"<ph id=\"ph1\">`Exit Do`</ph> transfers control immediately to the statement that follows the <ph id=\"ph2\">`Loop`</ph> statement.","pos":[4133,4224],"source":"`Exit Do` transfers control immediately to the statement that follows the `Loop` statement."},{"content":"<ph id=\"ph1\">`Exit Do`</ph> is often used after some condition is evaluated, for example in an <ph id=\"ph2\">`If...Then...Else`</ph> structure.","pos":[4231,4337],"source":"`Exit Do` is often used after some condition is evaluated, for example in an `If...Then...Else` structure."},{"content":"You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request.","pos":[4338,4509]},{"content":"One use of <ph id=\"ph1\">`Exit Do`</ph> is to test for a condition that could cause an <bpt id=\"p1\">*</bpt>endless loop<ept id=\"p1\">*</ept>, which is a loop that could run a large or even infinite number of times.","pos":[4510,4666],"source":" One use of `Exit Do` is to test for a condition that could cause an *endless loop*, which is a loop that could run a large or even infinite number of times."},{"content":"You can use <ph id=\"ph1\">`Exit Do`</ph> to escape the loop.","pos":[4667,4708],"source":" You can use `Exit Do` to escape the loop."},{"pos":[4715,4790],"content":"You can include any number of <ph id=\"ph1\">`Exit Do`</ph> statements anywhere in a <ph id=\"ph2\">`Do…Loop`</ph>.","source":"You can include any number of `Exit Do` statements anywhere in a `Do…Loop`."},{"pos":[4797,4929],"content":"When used within nested <ph id=\"ph1\">`Do`</ph> loops, <ph id=\"ph2\">`Exit Do`</ph> transfers control out of the innermost loop and into the next higher level of nesting.","source":"When used within nested `Do` loops, `Exit Do` transfers control out of the innermost loop and into the next higher level of nesting."},{"pos":[4938,4945],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, the statements in the loop continue to run until the <ph id=\"ph1\">`index`</ph> variable is greater than 10.","pos":[4949,5064],"source":"In the following example, the statements in the loop continue to run until the `index` variable is greater than 10."},{"content":"The <ph id=\"ph1\">`Until`</ph> clause is at the end of the loop.","pos":[5065,5110],"source":" The `Until` clause is at the end of the loop."},{"pos":[5117,5254],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#131<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#131](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_1.vb)]"},{"pos":[5263,5270],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5274,5421],"content":"The following example uses a <ph id=\"ph1\">`While`</ph> clause instead of an <ph id=\"ph2\">`Until`</ph> clause, and <ph id=\"ph3\">`condition`</ph> is tested at the start of the loop instead of at the end.","source":"The following example uses a `While` clause instead of an `Until` clause, and `condition` is tested at the start of the loop instead of at the end."},{"pos":[5428,5565],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#132<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#132](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_2.vb)]"},{"pos":[5574,5581],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, <ph id=\"ph1\">`condition`</ph> stops the loop when the <ph id=\"ph2\">`index`</ph> variable is greater than 100.","pos":[5585,5684],"source":"In the following example, `condition` stops the loop when the `index` variable is greater than 100."},{"content":"The <ph id=\"ph1\">`If`</ph> statement in the loop, however, causes the <ph id=\"ph2\">`Exit Do`</ph> statement to stop the loop when the index variable is greater than 10.","pos":[5685,5817],"source":" The `If` statement in the loop, however, causes the `Exit Do` statement to stop the loop when the index variable is greater than 10."},{"pos":[5824,5961],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#133<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#133](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_3.vb)]"},{"pos":[5970,5977],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example reads all lines in a text file.","pos":[5981,6034]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.File.OpenText%2A&gt;</ph> method opens the file and returns a <ph id=\"ph2\">&lt;xref:System.IO.StreamReader&gt;</ph> that reads the characters.","pos":[6035,6165],"source":" The <xref:System.IO.File.OpenText%2A> method opens the file and returns a <xref:System.IO.StreamReader> that reads the characters."},{"content":"In the <ph id=\"ph1\">`Do...Loop`</ph> condition, the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.Peek%2A&gt;</ph> method of the <ph id=\"ph3\">`StreamReader`</ph> determines whether there are any additional characters.","pos":[6166,6322],"source":" In the `Do...Loop` condition, the <xref:System.IO.StreamReader.Peek%2A> method of the `StreamReader` determines whether there are any additional characters."},{"pos":[6329,6466],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#134<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_4.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#134](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_4.vb)]"},{"pos":[6475,6483],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Loop Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[6487,6596],"source":"[Loop Structures](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6599,6698],"source":" [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[6701,6796],"source":" [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[6799,6929],"source":" [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Exit Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6932,7021],"source":" [Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>While...End While Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept>","pos":[7024,7136],"source":" [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)"}]}