{"content":"---\ntitle: \"Continue Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.continue\"\nhelpviewer_keywords: \n  - \"Continue statement [Visual Basic]\"\n  - \"loops, transferring to next iteration\"\nms.assetid: 3ad00103-358b-4af3-a3a8-1b9ea0e995d3\n---\n# Continue Statement (Visual Basic)\nTransfers control immediately to the next iteration of a loop.  \n  \n## Syntax  \n  \n```  \nContinue { Do | For | While }  \n```  \n  \n## Remarks  \n You can transfer from inside a `Do`, `For`, or `While` loop to the next iteration of that loop. Control passes immediately to the loop condition test, which is equivalent to transferring to the `For` or `While` statement, or to the `Do` or `Loop` statement that contains the `Until` or `While` clause.  \n  \n You can use `Continue` at any location in the loop that allows transfers. The rules allowing transfer of control are the same as with the [GoTo Statement](../../../visual-basic/language-reference/statements/goto-statement.md).  \n  \n For example, if a loop is totally contained within a `Try` block, a `Catch` block, or a `Finally` block, you can use `Continue` to transfer out of the loop. If, on the other hand, the `Try`...`End Try` structure is contained within the loop, you cannot use `Continue` to transfer control out of the `Finally` block, and you can use it to transfer out of a `Try` or `Catch` block only if you transfer completely out of the `Try`...`End Try` structure.  \n  \n If you have nested loops of the same type, for example a `Do` loop within another `Do` loop, a `Continue Do` statement skips to the next iteration of the innermost `Do` loop that contains it. You cannot use `Continue` to skip to the next iteration of a containing loop of the same type.  \n  \n If you have nested loops of different types, for example a `Do` loop within a `For` loop, you can skip to the next iteration of either loop by using either `Continue Do` or `Continue For`.  \n  \n## Example  \n The following code example uses the `Continue While` statement to skip to the next column of an array if a divisor is zero. The `Continue While` is inside a `For` loop. It transfers to the `While col < lastcol` statement, which is the next iteration of the innermost `While` loop that contains the `For` loop.  \n  \n [!code-vb[VbVbalrStatements#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#14)]  \n  \n## See also\n\n- [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)\n- [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)\n- [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)\n- [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)\n","nodes":[{"pos":[4,253],"embed":true,"restype":"x-metadata","content":"title: \"Continue Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.continue\"\nhelpviewer_keywords: \n  - \"Continue statement [Visual Basic]\"\n  - \"loops, transferring to next iteration\"\nms.assetid: 3ad00103-358b-4af3-a3a8-1b9ea0e995d3","nodes":[{"content":"Continue Statement (Visual Basic)","nodes":[{"pos":[0,33],"content":"Continue Statement (Visual Basic)","nodes":[{"content":"Continue Statement (Visual Basic)","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[260,293],"content":"Continue Statement (Visual Basic)","linkify":"Continue Statement (Visual Basic)","nodes":[{"content":"Continue Statement (Visual Basic)","pos":[0,33]}]},{"content":"Transfers control immediately to the next iteration of a loop.","pos":[294,356]},{"pos":[365,371],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[427,434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can transfer from inside a <ph id=\"ph1\">`Do`</ph>, <ph id=\"ph2\">`For`</ph>, or <ph id=\"ph3\">`While`</ph> loop to the next iteration of that loop.","pos":[438,533],"source":"You can transfer from inside a `Do`, `For`, or `While` loop to the next iteration of that loop."},{"content":"Control passes immediately to the loop condition test, which is equivalent to transferring to the <ph id=\"ph1\">`For`</ph> or <ph id=\"ph2\">`While`</ph> statement, or to the <ph id=\"ph3\">`Do`</ph> or <ph id=\"ph4\">`Loop`</ph> statement that contains the <ph id=\"ph5\">`Until`</ph> or <ph id=\"ph6\">`While`</ph> clause.","pos":[534,739],"source":" Control passes immediately to the loop condition test, which is equivalent to transferring to the `For` or `While` statement, or to the `Do` or `Loop` statement that contains the `Until` or `While` clause."},{"content":"You can use <ph id=\"ph1\">`Continue`</ph> at any location in the loop that allows transfers.","pos":[746,819],"source":"You can use `Continue` at any location in the loop that allows transfers."},{"content":"The rules allowing transfer of control are the same as with the <bpt id=\"p1\">[</bpt>GoTo Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/goto-statement.md)</ept>.","pos":[820,972],"source":" The rules allowing transfer of control are the same as with the [GoTo Statement](../../../visual-basic/language-reference/statements/goto-statement.md)."},{"content":"For example, if a loop is totally contained within a <ph id=\"ph1\">`Try`</ph> block, a <ph id=\"ph2\">`Catch`</ph> block, or a <ph id=\"ph3\">`Finally`</ph> block, you can use <ph id=\"ph4\">`Continue`</ph> to transfer out of the loop.","pos":[979,1135],"source":"For example, if a loop is totally contained within a `Try` block, a `Catch` block, or a `Finally` block, you can use `Continue` to transfer out of the loop."},{"content":"If, on the other hand, the <ph id=\"ph1\">`Try`</ph>...<ph id=\"ph2\">`End Try`</ph> structure is contained within the loop, you cannot use <ph id=\"ph3\">`Continue`</ph> to transfer control out of the <ph id=\"ph4\">`Finally`</ph> block, and you can use it to transfer out of a <ph id=\"ph5\">`Try`</ph> or <ph id=\"ph6\">`Catch`</ph> block only if you transfer completely out of the <ph id=\"ph7\">`Try`</ph>...<ph id=\"ph8\">`End Try`</ph> structure.","pos":[1136,1429],"source":" If, on the other hand, the `Try`...`End Try` structure is contained within the loop, you cannot use `Continue` to transfer control out of the `Finally` block, and you can use it to transfer out of a `Try` or `Catch` block only if you transfer completely out of the `Try`...`End Try` structure."},{"content":"If you have nested loops of the same type, for example a <ph id=\"ph1\">`Do`</ph> loop within another <ph id=\"ph2\">`Do`</ph> loop, a <ph id=\"ph3\">`Continue Do`</ph> statement skips to the next iteration of the innermost <ph id=\"ph4\">`Do`</ph> loop that contains it.","pos":[1436,1627],"source":"If you have nested loops of the same type, for example a `Do` loop within another `Do` loop, a `Continue Do` statement skips to the next iteration of the innermost `Do` loop that contains it."},{"content":"You cannot use <ph id=\"ph1\">`Continue`</ph> to skip to the next iteration of a containing loop of the same type.","pos":[1628,1722],"source":" You cannot use `Continue` to skip to the next iteration of a containing loop of the same type."},{"pos":[1729,1917],"content":"If you have nested loops of different types, for example a <ph id=\"ph1\">`Do`</ph> loop within a <ph id=\"ph2\">`For`</ph> loop, you can skip to the next iteration of either loop by using either <ph id=\"ph3\">`Continue Do`</ph> or <ph id=\"ph4\">`Continue For`</ph>.","source":"If you have nested loops of different types, for example a `Do` loop within a `For` loop, you can skip to the next iteration of either loop by using either `Continue Do` or `Continue For`."},{"pos":[1926,1933],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example uses the <ph id=\"ph1\">`Continue While`</ph> statement to skip to the next column of an array if a divisor is zero.","pos":[1937,2060],"source":"The following code example uses the `Continue While` statement to skip to the next column of an array if a divisor is zero."},{"content":"The <ph id=\"ph1\">`Continue While`</ph> is inside a <ph id=\"ph2\">`For`</ph> loop.","pos":[2061,2105],"source":" The `Continue While` is inside a `For` loop."},{"content":"It transfers to the <ph id=\"ph1\">`While col &lt; lastcol`</ph> statement, which is the next iteration of the innermost <ph id=\"ph2\">`While`</ph> loop that contains the <ph id=\"ph3\">`For`</ph> loop.","pos":[2106,2246],"source":" It transfers to the `While col < lastcol` statement, which is the next iteration of the innermost `While` loop that contains the `For` loop."},{"pos":[2381,2389],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2393,2488],"content":"<bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>","source":"[Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)"},{"pos":[2491,2588],"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>","source":"[For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)"},{"pos":[2591,2702],"content":"<bpt id=\"p1\">[</bpt>While...End While Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept>","source":"[While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)"},{"pos":[2705,2822],"content":"<bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>","source":"[Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)"}]}