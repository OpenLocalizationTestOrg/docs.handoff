{"content":"---\ntitle: \"ulong keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/14/2017\nf1_keywords:\n  - \"ulong_CSharpKeyword\"\n  - \"ulong\"\nhelpviewer_keywords:\n  - \"ulong keyword [C#]\"\nms.assetid: f2ece624-837a-40cf-92c5-343e7f33397c\n---\n# ulong (C# Reference)\n\nThe `ulong` keyword denotes an integral type that stores values according to the size and range shown in the following table.\n\n|Type|Range|Size|.NET type|\n|----------|-----------|----------|-------------------------|\n|`ulong`|0 to 18,446,744,073,709,551,615|Unsigned 64-bit integer|<xref:System.UInt64?displayProperty=nameWithType>|\n\n## Literals\n\nYou can declare and initialize a `ulong` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.  If the integer literal is outside the range of `ulong` (that is, if it is less than <xref:System.UInt64.MinValue?displayProperty=nameWithType> or greater than <xref:System.UInt64.MaxValue?displayProperty=nameWithType>), a compilation error occurs.\n\nIn the following example, integers equal to 7,934,076,125 that are represented as decimal, hexadecimal, and binary literals are assigned to `ulong` values.\n\n[!code-csharp[ulong](~/samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ULong)]\n\n> [!NOTE]\n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7.0, a couple of features have been added to enhance readability:\n\n- C# 7.0 allows the usage of the underscore character, `_`, as a digit separator.\n- C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix. A decimal literal isn't permitted to have a leading underscore.\n\nSome examples are shown below.\n\n[!code-csharp[long](~/samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#LongS)]\n\nInteger literals can also include a suffix that denotes the type. The suffix `UL` or `ul` unambiguously identifies a numeric literal as a `ulong` value. The `L` suffix denotes a `ulong` if the literal value exceeds <xref:System.Int64.MaxValue?displayProperty=nameWithType>. And the `U` or `u` suffix denotes a `ulong` if the literal value exceeds <xref:System.UInt32.MaxValue?displayProperty=nameWithType>. The following example uses the `ul` suffix to denote a long integer:\n\n[!code-csharp[ulsuffix](~/samples/snippets/csharp/language-reference/keywords/numeric-suffixes.cs#2)]\n\nIf an integer literal has no suffix, its type is the first of the following types in which its value can be represented:\n\n1. [int](int.md)\n2. [uint](uint.md)\n3. [long](long.md)\n4. `ulong`\n\n## Compiler overload resolution\n\nA common use of the suffix is with calling overloaded methods. Consider, for example, the following overloaded methods that use `ulong` and [int](int.md) parameters:\n\n```csharp\npublic static void SampleMethod(int i) {}\npublic static void SampleMethod(ulong l) {}\n```\n\nUsing a suffix with the `ulong` parameter guarantees that the correct type is called, for example:\n\n```csharp\nSampleMethod(5);    // Calling the method with the int parameter\nSampleMethod(5UL);  // Calling the method with the ulong parameter\n```\n\n## Conversions\n\nThere is a predefined implicit conversion from `ulong` to [float](float.md), [double](double.md), or [decimal](decimal.md).\n\nThere is no implicit conversion from `ulong` to any integral type. For example, the following statement will produce a compilation error without an explicit cast:\n\n```csharp\nlong long1 = 8UL;   // Error: no implicit conversion from ulong\n```\n\nThere is a predefined implicit conversion from [byte](byte.md), [ushort](ushort.md), [uint](uint.md), or [char](char.md) to `ulong`.\n\nAlso, there is no implicit conversion from floating-point types to `ulong`. For example, the following statement generates a compiler error unless an explicit cast is used:\n\n```csharp\n// Error -- no implicit conversion from double:\nulong x = 3.0;\n// OK -- explicit conversion:\nulong y = (ulong)3.0;\n```\n\nFor information on arithmetic expressions with mixed floating-point types and integral types, see [float](float.md) and [double](double.md).\n\nFor more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md).\n\n## C# language specification\n\nFor more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.UInt64>\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Integral Types Table](integral-types-table.md)\n- [Built-In Types Table](built-in-types-table.md)\n- [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,228],"embed":true,"restype":"x-metadata","content":"title: \"ulong keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/14/2017\nf1_keywords:\n  - \"ulong_CSharpKeyword\"\n  - \"ulong\"\nhelpviewer_keywords:\n  - \"ulong keyword [C#]\"\nms.assetid: f2ece624-837a-40cf-92c5-343e7f33397c","nodes":[{"content":"ulong keyword - C# Reference","nodes":[{"pos":[0,28],"content":"ulong keyword - C# Reference","nodes":[{"content":"ulong keyword - C# Reference","pos":[0,28]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[235,255],"content":"ulong (C# Reference)","linkify":"ulong (C# Reference)","nodes":[{"content":"ulong (C# Reference)","pos":[0,20]}]},{"pos":[257,382],"content":"The <ph id=\"ph1\">`ulong`</ph> keyword denotes an integral type that stores values according to the size and range shown in the following table.","source":"The `ulong` keyword denotes an integral type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[385,389]},{"content":"Range","pos":[390,395]},{"content":"Size","pos":[396,400]},{"content":".NET type","pos":[401,410]},{"content":"0 to 18,446,744,073,709,551,615","pos":[483,514]},{"content":"Unsigned 64-bit integer","pos":[515,538]},{"pos":[594,602],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`ulong`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.","pos":[604,758],"source":"You can declare and initialize a `ulong` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`ulong`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt64.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt64.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.","pos":[760,1007],"source":"  If the integer literal is outside the range of `ulong` (that is, if it is less than <xref:System.UInt64.MinValue?displayProperty=nameWithType> or greater than <xref:System.UInt64.MaxValue?displayProperty=nameWithType>), a compilation error occurs."},{"pos":[1009,1164],"content":"In the following example, integers equal to 7,934,076,125 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`ulong`</ph> values.","source":"In the following example, integers equal to 7,934,076,125 that are represented as decimal, hexadecimal, and binary literals are assigned to `ulong` values."},{"pos":[1272,1434],"content":"[!NOTE]\nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[8,160],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"content":"Starting with C# 7.0, a couple of features have been added to enhance readability:","pos":[1436,1518]},{"pos":[1522,1601],"content":"C# 7.0 allows the usage of the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator.","source":"C# 7.0 allows the usage of the underscore character, `_`, as a digit separator."},{"content":"C# 7.2 allows <ph id=\"ph1\">`_`</ph> to be used as a digit separator for a binary or hexadecimal literal, after the prefix.","pos":[1604,1708],"source":"C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix."},{"content":"A decimal literal isn't permitted to have a leading underscore.","pos":[1709,1772]},{"content":"Some examples are shown below.","pos":[1774,1804]},{"content":"Integer literals can also include a suffix that denotes the type.","pos":[1909,1974]},{"content":"The suffix <ph id=\"ph1\">`UL`</ph> or <ph id=\"ph2\">`ul`</ph> unambiguously identifies a numeric literal as a <ph id=\"ph3\">`ulong`</ph> value.","pos":[1975,2061],"source":" The suffix `UL` or `ul` unambiguously identifies a numeric literal as a `ulong` value."},{"content":"The <ph id=\"ph1\">`L`</ph> suffix denotes a <ph id=\"ph2\">`ulong`</ph> if the literal value exceeds <ph id=\"ph3\">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph>.","pos":[2062,2182],"source":" The `L` suffix denotes a `ulong` if the literal value exceeds <xref:System.Int64.MaxValue?displayProperty=nameWithType>."},{"content":"And the <ph id=\"ph1\">`U`</ph> or <ph id=\"ph2\">`u`</ph> suffix denotes a <ph id=\"ph3\">`ulong`</ph> if the literal value exceeds <ph id=\"ph4\">&lt;xref:System.UInt32.MaxValue?displayProperty=nameWithType&gt;</ph>.","pos":[2183,2315],"source":" And the `U` or `u` suffix denotes a `ulong` if the literal value exceeds <xref:System.UInt32.MaxValue?displayProperty=nameWithType>."},{"content":"The following example uses the <ph id=\"ph1\">`ul`</ph> suffix to denote a long integer:","pos":[2316,2384],"source":" The following example uses the `ul` suffix to denote a long integer:"},{"content":"If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:","pos":[2489,2609]},{"pos":[2614,2627],"content":"<bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>","source":"[int](int.md)"},{"pos":[2631,2646],"content":"<bpt id=\"p1\">[</bpt>uint<ept id=\"p1\">](uint.md)</ept>","source":"[uint](uint.md)"},{"pos":[2650,2665],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](long.md)</ept>","source":"[long](long.md)"},{"pos":[2681,2709],"content":"Compiler overload resolution","linkify":"Compiler overload resolution","nodes":[{"content":"Compiler overload resolution","pos":[0,28]}]},{"content":"A common use of the suffix is with calling overloaded methods.","pos":[2711,2773]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`ulong`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept> parameters:","pos":[2774,2876],"source":" Consider, for example, the following overloaded methods that use `ulong` and [int](int.md) parameters:"},{"pos":[2979,3077],"content":"Using a suffix with the <ph id=\"ph1\">`ulong`</ph> parameter guarantees that the correct type is called, for example:","source":"Using a suffix with the `ulong` parameter guarantees that the correct type is called, for example:"},{"pos":[3229,3240],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[3242,3365],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`ulong`</ph> to <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](float.md)</ept>, <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](double.md)</ept>, or <bpt id=\"p3\">[</bpt>decimal<ept id=\"p3\">](decimal.md)</ept>.","source":"There is a predefined implicit conversion from `ulong` to [float](float.md), [double](double.md), or [decimal](decimal.md)."},{"content":"There is no implicit conversion from <ph id=\"ph1\">`ulong`</ph> to any integral type.","pos":[3367,3433],"source":"There is no implicit conversion from `ulong` to any integral type."},{"content":"For example, the following statement will produce a compilation error without an explicit cast:","pos":[3434,3529]},{"pos":[3610,3742],"content":"There is a predefined implicit conversion from <bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](byte.md)</ept>, <bpt id=\"p2\">[</bpt>ushort<ept id=\"p2\">](ushort.md)</ept>, <bpt id=\"p3\">[</bpt>uint<ept id=\"p3\">](uint.md)</ept>, or <bpt id=\"p4\">[</bpt>char<ept id=\"p4\">](char.md)</ept> to <ph id=\"ph1\">`ulong`</ph>.","source":"There is a predefined implicit conversion from [byte](byte.md), [ushort](ushort.md), [uint](uint.md), or [char](char.md) to `ulong`."},{"content":"Also, there is no implicit conversion from floating-point types to <ph id=\"ph1\">`ulong`</ph>.","pos":[3744,3819],"source":"Also, there is no implicit conversion from floating-point types to `ulong`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[3820,3916]},{"pos":[4048,4188],"content":"For information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](double.md)</ept>.","source":"For information on arithmetic expressions with mixed floating-point types and integral types, see [float](float.md) and [double](double.md)."},{"pos":[4190,4333],"content":"For more information on implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>.","source":"For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)."},{"pos":[4338,4363],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[4365,4523],"source":"For more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[4524,4600]},{"pos":[4605,4613],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4640,4667],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4670,4726],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4729,4752],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[4755,4802],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](integral-types-table.md)</ept>","source":"[Integral Types Table](integral-types-table.md)"},{"pos":[4805,4852],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](built-in-types-table.md)</ept>","source":"[Built-In Types Table](built-in-types-table.md)"},{"pos":[4855,4930],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)"},{"pos":[4933,5008],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)"}]}