{"content":"---\ntitle: \"Identifiers (Entity SQL)\"\nms.date: \"03/30/2017\"\nms.assetid: d58a5edd-7b5c-48e1-b5d7-a326ff426aa4\n---\n# Identifiers (Entity SQL)\nIdentifiers are used in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] to represent query expression aliases, variable references, properties of objects, functions, and so on. [!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides two kinds of identifiers: simple identifiers and quoted identifiers.  \n  \n## Simple Identifiers  \n A simple identifier in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] is a sequence of alphanumeric and underscore characters. The first character of the identifier must be an alphabetical character (a-z or A-Z).  \n  \n## Quoted Identifiers  \n A quoted identifier is any sequence of characters enclosed in square brackets ([]). Quoted identifiers let you specify identifiers with characters that are not valid in identifiers. All characters between the square brackets become part of the identifier, including all white space.  \n  \n A quoted identifier cannot include the following characters:  \n  \n-   Newline.  \n  \n-   Carriage returns.  \n  \n-   Tabs.  \n  \n-   Backspace.  \n  \n-   Additional square brackets (that is, square brackets within the square brackets that delineate the identifier).  \n  \n A quoted-identifier can include Unicode characters.  \n  \n Quoted identifiers enable you to create property name characters that are not valid in identifiers, as illustrated in the following example:  \n  \n `SELECT c.ContactName AS [Contact Name] FROM customers AS c`  \n  \n You can also use quoted identifiers to specify an identifier that is a reserved keyword of [!INCLUDE[esql](../../../../../../includes/esql-md.md)]. For example, if the type `Email` has a property named \"From\", you can disambiguate it from the reserved keyword FROM by using square brackets, as follows:  \n  \n `SELECT e.[From] FROM emails AS e`  \n  \n You can use a quoted identifier on the right side of a dot (.) operator.  \n  \n `SELECT t FROM ts as t WHERE t.[property] == 2`  \n  \n To use the square bracket in an identifier, add an extra square bracket. In the following example \"`abc]`\" is the identifier:  \n  \n `SELECT t from ts as t WHERE t.[abc]]] == 2`  \n  \n For quoted identifier comparison semantics, see [Input Character Set](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md).  \n  \n## Aliasing Rules  \n We recommend specifying aliases in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] queries whenever needed, including the following [!INCLUDE[esql](../../../../../../includes/esql-md.md)] constructs:  \n  \n-   Fields of a row constructor.  \n  \n-   Items in the FROM clause of a query expression.  \n  \n-   Items in the SELECT clause of a query expression.  \n  \n-   Items in the GROUP BY clause of a query expression.  \n  \n### Valid Aliases  \n Valid aliases in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] are any simple identifier or quoted identifier.  \n  \n### Alias Generation  \n If no alias is specified in an [!INCLUDE[esql](../../../../../../includes/esql-md.md)] query expression, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] tries to generate an alias based on the following simple rules:  \n  \n-   If the query expression (for which the alias is unspecified) is a simple or quoted identifier, that identifier is used as the alias. For example, `ROW(a, [b])` becomes `ROW(a AS a, [b] AS [b])`.  \n  \n-   If the query expression is a more complex expression, but the last component of that query expression is a simple identifier, then that identifier is used as the alias. For example, `ROW(a.a1, b.[b1])` becomes `ROW(a.a1 AS a1, b.[b1] AS [b1])`.  \n  \n We recommend that you do not use implicit aliasing if you want to use the alias name later. Anytime aliases (implicit or explicit) conflict or are repeated in the same scope, there will be a compile error. An implicit alias will pass compilation even if there is an explicit or implicit alias of the same name.  \n  \n Implicit aliases are autogenerated based on user input. For example, the following line of code will generate NAME as an alias for both columns and therefore will conflict.  \n  \n```  \nSELECT product.NAME, person.NAME  \n```  \n  \n The following line of code, which uses explicit aliases, will also fail. However, the failure will be more apparent by reading the code.  \n  \n```  \nSELECT 1 AS X, 2 AS X â€¦  \n```  \n  \n## Scoping Rules  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] defines scoping rules that determine when particular variables are visible in the query language. Some expressions or statements introduce new names. The scoping rules determine where those names can be used, and when or where a new declaration with the same name as another can hide its predecessor.  \n  \n When names are defined in an [!INCLUDE[esql](../../../../../../includes/esql-md.md)] query, they are said to be defined within a scope. A scope covers an entire region of the query. All expressions or name references within a certain scope can see names that are defined within that scope. Before a scope begins and after it ends, names that are defined within the scope cannot be referenced.  \n  \n Scopes can be nested. Parts of [!INCLUDE[esql](../../../../../../includes/esql-md.md)] introduce new scopes that cover entire regions, and these regions can contain other [!INCLUDE[esql](../../../../../../includes/esql-md.md)] expressions that also introduce scopes. When scopes are nested, references can be made to names that are defined in the innermost scope, which contains the reference. References can also be made to any names that are defined in any outer scopes. Any two scopes defined within the same scope are considered sibling scopes. References cannot be made to names that are defined within sibling scopes.  \n  \n If a name declared in an inner scope matches a name declared in an outer scope, references within the inner scope or within scopes declared within that scope refer only to the newly declared name. The name in the outer scope is hidden.  \n  \n Even within the same scope, names cannot be referenced before they are defined.  \n  \n Global names can exist as part of the execution environment. This can include names of persistent collections or environment variables. For a name to be global, it must be declared in the outermost scope.  \n  \n Parameters are not in a scope. Because references to parameters include special syntax, names of parameters will never collide with other names in the query.  \n  \n### Query Expressions  \n An [!INCLUDE[esql](../../../../../../includes/esql-md.md)] query expression introduces a new scope. Names that are defined in the FROM clause are introduced into the from scope in order of appearance, left to right. In the join list, expressions can refer to names that were defined earlier in the list. Public properties (fields and so on) of elements identified in the FROM clause are not added to the from-scope. They must be always referenced by the alias-qualified name. Typically, all parts of the SELECT expression are considered within the from-scope.  \n  \n The GROUP BY clause also introduces a new sibling scope. Each group can have a group name that refers to the collection of elements in the group. Each grouping expression will also introduce a new name into the group-scope. Additionally, the nest aggregate (or the named group) is also added to the scope. The grouping expressions themselves are within the from-scope. However, when a GROUP BY clause is used, the select-list (projection), HAVING clause, and ORDER BY clause are considered to be within the group-scope, and not the from-scope. Aggregates receive special treatment, as described in the following bulleted list.  \n  \n The following are additional notes about scopes:  \n  \n-   The select-list can introduce new names into the scope, in order. Projection expressions to the right might refer to names projected on the left.  \n  \n-   The ORDER BY clause can refer to names (aliases) specified in the select list.  \n  \n-   The order of evaluation of clauses within the SELECT expression determines the order that names are introduced into the scope. The FROM clause is evaluated first, followed by the WHERE clause, GROUP BY clause, HAVING clause, SELECT clause, and finally the ORDER BY clause.  \n  \n### Aggregate Handling  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports two forms of aggregates: collection-based aggregates and group-based aggregates. Collection-based aggregates are the preferred construct in [!INCLUDE[esql](../../../../../../includes/esql-md.md)], and group-based aggregates are supported for SQL compatibility.  \n  \n When resolving an aggregate, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] first tries to treat it as a collection-based aggregate. If that fails, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] transforms the aggregate input into a reference to the nest aggregate and tries to resolve this new expression, as illustrated in the following example.  \n  \n `AVG(t.c) becomes AVG(group..(t.c))`  \n  \n## See also\n\n- [Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)\n- [Entity SQL Overview](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)\n- [Input Character Set](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)\n","nodes":[{"pos":[4,108],"embed":true,"restype":"x-metadata","content":"title: \"Identifiers (Entity SQL)\"\nms.date: \"03/30/2017\"\nms.assetid: d58a5edd-7b5c-48e1-b5d7-a326ff426aa4","nodes":[{"content":"Identifiers (Entity SQL)","nodes":[{"pos":[0,24],"content":"Identifiers (Entity SQL)","nodes":[{"content":"Identifiers (Entity SQL)","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[115,139],"content":"Identifiers (Entity SQL)","linkify":"Identifiers (Entity SQL)","nodes":[{"content":"Identifiers (Entity SQL)","pos":[0,24]}]},{"content":"Identifiers are used in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> to represent query expression aliases, variable references, properties of objects, functions, and so on.","pos":[140,324],"source":"Identifiers are used in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] to represent query expression aliases, variable references, properties of objects, functions, and so on."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides two kinds of identifiers: simple identifiers and quoted identifiers.","pos":[325,458],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides two kinds of identifiers: simple identifiers and quoted identifiers."},{"pos":[467,485],"content":"Simple Identifiers","linkify":"Simple Identifiers","nodes":[{"content":"Simple Identifiers","pos":[0,18]}]},{"content":"A simple identifier in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> is a sequence of alphanumeric and underscore characters.","pos":[489,624],"source":"A simple identifier in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] is a sequence of alphanumeric and underscore characters."},{"content":"The first character of the identifier must be an alphabetical character (a-z or A-Z).","pos":[625,710]},{"pos":[719,737],"content":"Quoted Identifiers","linkify":"Quoted Identifiers","nodes":[{"content":"Quoted Identifiers","pos":[0,18]}]},{"content":"A quoted identifier is any sequence of characters enclosed in square brackets ([]).","pos":[741,824]},{"content":"Quoted identifiers let you specify identifiers with characters that are not valid in identifiers.","pos":[825,922]},{"content":"All characters between the square brackets become part of the identifier, including all white space.","pos":[923,1023]},{"content":"A quoted identifier cannot include the following characters:","pos":[1030,1090]},{"content":"Newline.","pos":[1100,1108]},{"content":"Carriage returns.","pos":[1118,1135]},{"content":"Tabs.","pos":[1145,1150]},{"content":"Backspace.","pos":[1160,1170]},{"content":"Additional square brackets (that is, square brackets within the square brackets that delineate the identifier).","pos":[1180,1291]},{"content":"A quoted-identifier can include Unicode characters.","pos":[1298,1349]},{"content":"Quoted identifiers enable you to create property name characters that are not valid in identifiers, as illustrated in the following example:","pos":[1356,1496]},{"content":"You can also use quoted identifiers to specify an identifier that is a reserved keyword of <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>.","pos":[1570,1717],"source":"You can also use quoted identifiers to specify an identifier that is a reserved keyword of [!INCLUDE[esql](../../../../../../includes/esql-md.md)]."},{"content":"For example, if the type <ph id=\"ph1\">`Email`</ph> has a property named \"From\", you can disambiguate it from the reserved keyword FROM by using square brackets, as follows:","pos":[1718,1872],"source":" For example, if the type `Email` has a property named \"From\", you can disambiguate it from the reserved keyword FROM by using square brackets, as follows:"},{"content":"You can use a quoted identifier on the right side of a dot (.) operator.","pos":[1920,1992]},{"content":"To use the square bracket in an identifier, add an extra square bracket.","pos":[2053,2125]},{"content":"In the following example \"<ph id=\"ph1\">`abc]`</ph>\" is the identifier:","pos":[2126,2178],"source":" In the following example \"`abc]`\" is the identifier:"},{"pos":[2236,2408],"content":"For quoted identifier comparison semantics, see <bpt id=\"p1\">[</bpt>Input Character Set<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)</ept>.","source":"For quoted identifier comparison semantics, see [Input Character Set](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)."},{"pos":[2417,2431],"content":"Aliasing Rules","linkify":"Aliasing Rules","nodes":[{"content":"Aliasing Rules","pos":[0,14]}]},{"pos":[2435,2642],"content":"We recommend specifying aliases in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> queries whenever needed, including the following <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> constructs:","source":"We recommend specifying aliases in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] queries whenever needed, including the following [!INCLUDE[esql](../../../../../../includes/esql-md.md)] constructs:"},{"content":"Fields of a row constructor.","pos":[2652,2680]},{"content":"Items in the FROM clause of a query expression.","pos":[2690,2737]},{"content":"Items in the SELECT clause of a query expression.","pos":[2747,2796]},{"content":"Items in the GROUP BY clause of a query expression.","pos":[2806,2857]},{"pos":[2867,2880],"content":"Valid Aliases","linkify":"Valid Aliases","nodes":[{"content":"Valid Aliases","pos":[0,13]}]},{"pos":[2884,3004],"content":"Valid aliases in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> are any simple identifier or quoted identifier.","source":"Valid aliases in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] are any simple identifier or quoted identifier."},{"pos":[3014,3030],"content":"Alias Generation","linkify":"Alias Generation","nodes":[{"content":"Alias Generation","pos":[0,16]}]},{"pos":[3034,3258],"content":"If no alias is specified in an <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> query expression, <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> tries to generate an alias based on the following simple rules:","source":"If no alias is specified in an [!INCLUDE[esql](../../../../../../includes/esql-md.md)] query expression, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] tries to generate an alias based on the following simple rules:"},{"content":"If the query expression (for which the alias is unspecified) is a simple or quoted identifier, that identifier is used as the alias.","pos":[3268,3400]},{"content":"For example, <ph id=\"ph1\">`ROW(a, [b])`</ph> becomes <ph id=\"ph2\">`ROW(a AS a, [b] AS [b])`</ph>.","pos":[3401,3462],"source":" For example, `ROW(a, [b])` becomes `ROW(a AS a, [b] AS [b])`."},{"content":"If the query expression is a more complex expression, but the last component of that query expression is a simple identifier, then that identifier is used as the alias.","pos":[3472,3640]},{"content":"For example, <ph id=\"ph1\">`ROW(a.a1, b.[b1])`</ph> becomes <ph id=\"ph2\">`ROW(a.a1 AS a1, b.[b1] AS [b1])`</ph>.","pos":[3641,3716],"source":" For example, `ROW(a.a1, b.[b1])` becomes `ROW(a.a1 AS a1, b.[b1] AS [b1])`."},{"content":"We recommend that you do not use implicit aliasing if you want to use the alias name later.","pos":[3723,3814]},{"content":"Anytime aliases (implicit or explicit) conflict or are repeated in the same scope, there will be a compile error.","pos":[3815,3928]},{"content":"An implicit alias will pass compilation even if there is an explicit or implicit alias of the same name.","pos":[3929,4033]},{"content":"Implicit aliases are autogenerated based on user input.","pos":[4040,4095]},{"content":"For example, the following line of code will generate NAME as an alias for both columns and therefore will conflict.","pos":[4096,4212]},{"content":"The following line of code, which uses explicit aliases, will also fail.","pos":[4269,4341]},{"content":"However, the failure will be more apparent by reading the code.","pos":[4342,4405]},{"pos":[4455,4468],"content":"Scoping Rules","linkify":"Scoping Rules","nodes":[{"content":"Scoping Rules","pos":[0,13]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> defines scoping rules that determine when particular variables are visible in the query language.","pos":[4472,4625],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] defines scoping rules that determine when particular variables are visible in the query language."},{"content":"Some expressions or statements introduce new names.","pos":[4626,4677]},{"content":"The scoping rules determine where those names can be used, and when or where a new declaration with the same name as another can hide its predecessor.","pos":[4678,4828]},{"content":"When names are defined in an <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> query, they are said to be defined within a scope.","pos":[4835,4970],"source":"When names are defined in an [!INCLUDE[esql](../../../../../../includes/esql-md.md)] query, they are said to be defined within a scope."},{"content":"A scope covers an entire region of the query.","pos":[4971,5016]},{"content":"All expressions or name references within a certain scope can see names that are defined within that scope.","pos":[5017,5124]},{"content":"Before a scope begins and after it ends, names that are defined within the scope cannot be referenced.","pos":[5125,5227]},{"content":"Scopes can be nested.","pos":[5234,5255]},{"content":"Parts of <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> introduce new scopes that cover entire regions, and these regions can contain other <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> expressions that also introduce scopes.","pos":[5256,5500],"source":" Parts of [!INCLUDE[esql](../../../../../../includes/esql-md.md)] introduce new scopes that cover entire regions, and these regions can contain other [!INCLUDE[esql](../../../../../../includes/esql-md.md)] expressions that also introduce scopes."},{"content":"When scopes are nested, references can be made to names that are defined in the innermost scope, which contains the reference.","pos":[5501,5627]},{"content":"References can also be made to any names that are defined in any outer scopes.","pos":[5628,5706]},{"content":"Any two scopes defined within the same scope are considered sibling scopes.","pos":[5707,5782]},{"content":"References cannot be made to names that are defined within sibling scopes.","pos":[5783,5857]},{"content":"If a name declared in an inner scope matches a name declared in an outer scope, references within the inner scope or within scopes declared within that scope refer only to the newly declared name.","pos":[5864,6060]},{"content":"The name in the outer scope is hidden.","pos":[6061,6099]},{"content":"Even within the same scope, names cannot be referenced before they are defined.","pos":[6106,6185]},{"content":"Global names can exist as part of the execution environment.","pos":[6192,6252]},{"content":"This can include names of persistent collections or environment variables.","pos":[6253,6327]},{"content":"For a name to be global, it must be declared in the outermost scope.","pos":[6328,6396]},{"content":"Parameters are not in a scope.","pos":[6403,6433]},{"content":"Because references to parameters include special syntax, names of parameters will never collide with other names in the query.","pos":[6434,6560]},{"pos":[6570,6587],"content":"Query Expressions","linkify":"Query Expressions","nodes":[{"content":"Query Expressions","pos":[0,17]}]},{"content":"An <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> query expression introduces a new scope.","pos":[6591,6690],"source":"An [!INCLUDE[esql](../../../../../../includes/esql-md.md)] query expression introduces a new scope."},{"content":"Names that are defined in the FROM clause are introduced into the from scope in order of appearance, left to right.","pos":[6691,6806]},{"content":"In the join list, expressions can refer to names that were defined earlier in the list.","pos":[6807,6894]},{"content":"Public properties (fields and so on) of elements identified in the FROM clause are not added to the from-scope.","pos":[6895,7006]},{"content":"They must be always referenced by the alias-qualified name.","pos":[7007,7066]},{"content":"Typically, all parts of the SELECT expression are considered within the from-scope.","pos":[7067,7150]},{"content":"The GROUP BY clause also introduces a new sibling scope.","pos":[7157,7213]},{"content":"Each group can have a group name that refers to the collection of elements in the group.","pos":[7214,7302]},{"content":"Each grouping expression will also introduce a new name into the group-scope.","pos":[7303,7380]},{"content":"Additionally, the nest aggregate (or the named group) is also added to the scope.","pos":[7381,7462]},{"content":"The grouping expressions themselves are within the from-scope.","pos":[7463,7525]},{"content":"However, when a GROUP BY clause is used, the select-list (projection), HAVING clause, and ORDER BY clause are considered to be within the group-scope, and not the from-scope.","pos":[7526,7700]},{"content":"Aggregates receive special treatment, as described in the following bulleted list.","pos":[7701,7783]},{"content":"The following are additional notes about scopes:","pos":[7790,7838]},{"content":"The select-list can introduce new names into the scope, in order.","pos":[7848,7913]},{"content":"Projection expressions to the right might refer to names projected on the left.","pos":[7914,7993]},{"content":"The ORDER BY clause can refer to names (aliases) specified in the select list.","pos":[8003,8081]},{"content":"The order of evaluation of clauses within the SELECT expression determines the order that names are introduced into the scope.","pos":[8091,8217]},{"content":"The FROM clause is evaluated first, followed by the WHERE clause, GROUP BY clause, HAVING clause, SELECT clause, and finally the ORDER BY clause.","pos":[8218,8363]},{"pos":[8373,8391],"content":"Aggregate Handling","linkify":"Aggregate Handling","nodes":[{"content":"Aggregate Handling","pos":[0,18]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> supports two forms of aggregates: collection-based aggregates and group-based aggregates.","pos":[8395,8540],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports two forms of aggregates: collection-based aggregates and group-based aggregates."},{"content":"Collection-based aggregates are the preferred construct in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>, and group-based aggregates are supported for SQL compatibility.","pos":[8541,8720],"source":" Collection-based aggregates are the preferred construct in [!INCLUDE[esql](../../../../../../includes/esql-md.md)], and group-based aggregates are supported for SQL compatibility."},{"content":"When resolving an aggregate, <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> first tries to treat it as a collection-based aggregate.","pos":[8727,8868],"source":"When resolving an aggregate, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] first tries to treat it as a collection-based aggregate."},{"content":"If that fails, <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> transforms the aggregate input into a reference to the nest aggregate and tries to resolve this new expression, as illustrated in the following example.","pos":[8869,9092],"source":" If that fails, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] transforms the aggregate input into a reference to the nest aggregate and tries to resolve this new expression, as illustrated in the following example."},{"pos":[9144,9152],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[9156,9270],"content":"<bpt id=\"p1\">[</bpt>Entity SQL Reference<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept>","source":"[Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)"},{"pos":[9273,9385],"content":"<bpt id=\"p1\">[</bpt>Entity SQL Overview<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)</ept>","source":"[Entity SQL Overview](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)"},{"pos":[9388,9511],"content":"<bpt id=\"p1\">[</bpt>Input Character Set<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)</ept>","source":"[Input Character Set](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)"}]}