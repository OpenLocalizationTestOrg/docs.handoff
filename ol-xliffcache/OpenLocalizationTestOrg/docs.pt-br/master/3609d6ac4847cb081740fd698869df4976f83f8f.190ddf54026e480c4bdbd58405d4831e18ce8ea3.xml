{"content":"---\ntitle: \"Events and Callbacks\"\nms.date: \"10/22/2008\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"events [.NET Framework], extensibility\"\n  - \"methods [.NET Framework], callback\"\n  - \"callback methods\"\n  - \"callbacks\"\nms.assetid: 48b55c60-495f-4089-9396-97f9122bba7c\nauthor: \"KrzysztofCwalina\"\n---\n# Events and Callbacks\nCallbacks are extensibility points that allow a framework to call back into user code through a delegate. These delegates are usually passed to the framework through a parameter of a method.  \n  \n Events are a special case of callbacks that supports convenient and consistent syntax for supplying the delegate (an event handler). In addition, Visual Studio’s statement completion and designers provide help in using event-based APIs. (See [Event Design](../../../docs/standard/design-guidelines/event.md).)  \n  \n **✓ CONSIDER** using callbacks to allow users to provide custom code to be executed by the framework.  \n  \n **✓ CONSIDER** using events to allow users to customize the behavior of a framework without the need for understanding object-oriented design.  \n  \n **✓ DO** prefer events over plain callbacks, because they are more familiar to a broader range of developers and are integrated with Visual Studio statement completion.  \n  \n **X AVOID** using callbacks in performance-sensitive APIs.  \n  \n **✓ DO** use the new `Func<...>`, `Action<...>`, or `Expression<...>` types instead of custom delegates, when defining APIs with callbacks.  \n  \n `Func<...>` and `Action<...>` represent generic delegates. `Expression<...>` represents function definitions that can be compiled and subsequently invoked at runtime but can also be serialized and passed to remote processes.  \n  \n **✓ DO** measure and understand performance implications of using `Expression<...>`, instead of using `Func<...>` and `Action<...>` delegates.  \n  \n `Expression<...>` types are in most cases logically equivalent to `Func<...>` and `Action<...>` delegates. The main difference between them is that the delegates are intended to be used in local process scenarios; expressions are intended for cases where it’s beneficial and possible to evaluate the expression in a remote process or machine.  \n  \n **✓ DO** understand that by calling a delegate, you are executing arbitrary code and that could have security, correctness, and compatibility repercussions.  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See also\n\n- [Designing for Extensibility](../../../docs/standard/design-guidelines/designing-for-extensibility.md)\n- [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)\n","nodes":[{"pos":[4,309],"embed":true,"restype":"x-metadata","content":"title: \"Events and Callbacks\"\nms.date: \"10/22/2008\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"events [.NET Framework], extensibility\"\n  - \"methods [.NET Framework], callback\"\n  - \"callback methods\"\n  - \"callbacks\"\nms.assetid: 48b55c60-495f-4089-9396-97f9122bba7c\nauthor: \"KrzysztofCwalina\"","nodes":[{"content":"Events and Callbacks","nodes":[{"pos":[0,20],"content":"Events and Callbacks","nodes":[{"content":"Events and Callbacks","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[316,336],"content":"Events and Callbacks","linkify":"Events and Callbacks","nodes":[{"content":"Events and Callbacks","pos":[0,20]}]},{"content":"Callbacks are extensibility points that allow a framework to call back into user code through a delegate.","pos":[337,442]},{"content":"These delegates are usually passed to the framework through a parameter of a method.","pos":[443,527]},{"content":"Events are a special case of callbacks that supports convenient and consistent syntax for supplying the delegate (an event handler).","pos":[534,666]},{"content":"In addition, Visual Studio’s statement completion and designers provide help in using event-based APIs.","pos":[667,770]},{"content":"(See <bpt id=\"p1\">[</bpt>Event Design<ept id=\"p1\">](../../../docs/standard/design-guidelines/event.md)</ept>.)","pos":[771,843],"source":" (See [Event Design](../../../docs/standard/design-guidelines/event.md).)"},{"pos":[850,951],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> using callbacks to allow users to provide custom code to be executed by the framework.","source":"**✓ CONSIDER** using callbacks to allow users to provide custom code to be executed by the framework."},{"pos":[958,1100],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> using events to allow users to customize the behavior of a framework without the need for understanding object-oriented design.","source":"**✓ CONSIDER** using events to allow users to customize the behavior of a framework without the need for understanding object-oriented design."},{"pos":[1107,1275],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> prefer events over plain callbacks, because they are more familiar to a broader range of developers and are integrated with Visual Studio statement completion.","source":"**✓ DO** prefer events over plain callbacks, because they are more familiar to a broader range of developers and are integrated with Visual Studio statement completion."},{"pos":[1282,1340],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> using callbacks in performance-sensitive APIs.","source":"**X AVOID** using callbacks in performance-sensitive APIs."},{"pos":[1347,1486],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use the new <ph id=\"ph1\">`Func&lt;...&gt;`</ph>, <ph id=\"ph2\">`Action&lt;...&gt;`</ph>, or <ph id=\"ph3\">`Expression&lt;...&gt;`</ph> types instead of custom delegates, when defining APIs with callbacks.","source":"**✓ DO** use the new `Func<...>`, `Action<...>`, or `Expression<...>` types instead of custom delegates, when defining APIs with callbacks."},{"content":"<ph id=\"ph1\">`Func&lt;...&gt;`</ph> and <ph id=\"ph2\">`Action&lt;...&gt;`</ph> represent generic delegates.","pos":[1493,1551],"source":"`Func<...>` and `Action<...>` represent generic delegates."},{"content":"<ph id=\"ph1\">`Expression&lt;...&gt;`</ph> represents function definitions that can be compiled and subsequently invoked at runtime but can also be serialized and passed to remote processes.","pos":[1552,1717],"source":"`Expression<...>` represents function definitions that can be compiled and subsequently invoked at runtime but can also be serialized and passed to remote processes."},{"pos":[1724,1866],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> measure and understand performance implications of using <ph id=\"ph1\">`Expression&lt;...&gt;`</ph>, instead of using <ph id=\"ph2\">`Func&lt;...&gt;`</ph> and <ph id=\"ph3\">`Action&lt;...&gt;`</ph> delegates.","source":"**✓ DO** measure and understand performance implications of using `Expression<...>`, instead of using `Func<...>` and `Action<...>` delegates."},{"content":"<ph id=\"ph1\">`Expression&lt;...&gt;`</ph> types are in most cases logically equivalent to <ph id=\"ph2\">`Func&lt;...&gt;`</ph> and <ph id=\"ph3\">`Action&lt;...&gt;`</ph> delegates.","pos":[1873,1979],"source":"`Expression<...>` types are in most cases logically equivalent to `Func<...>` and `Action<...>` delegates."},{"content":"The main difference between them is that the delegates are intended to be used in local process scenarios; expressions are intended for cases where it’s beneficial and possible to evaluate the expression in a remote process or machine.","pos":[1980,2215]},{"pos":[2222,2378],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> understand that by calling a delegate, you are executing arbitrary code and that could have security, correctness, and compatibility repercussions.","source":"**✓ DO** understand that by calling a delegate, you are executing arbitrary code and that could have security, correctness, and compatibility repercussions."},{"pos":[2385,2452],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[2459,2864],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[2873,2881],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2885,2987],"content":"<bpt id=\"p1\">[</bpt>Designing for Extensibility<ept id=\"p1\">](../../../docs/standard/design-guidelines/designing-for-extensibility.md)</ept>","source":"[Designing for Extensibility](../../../docs/standard/design-guidelines/designing-for-extensibility.md)"},{"pos":[2990,3070],"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept>","source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)"}]}