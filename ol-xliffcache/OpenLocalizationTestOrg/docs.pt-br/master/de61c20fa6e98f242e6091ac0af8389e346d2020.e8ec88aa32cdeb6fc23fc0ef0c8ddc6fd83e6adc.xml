{"content":"---\ntitle: \"Internet Information Services Hosting Best Practices | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0834768e-9665-46bf-86eb-d4b09ab91af5\ncaps.latest.revision: 22\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Internet Information Services Hosting Best Practices\nThis topic outlines some best practices for hosting [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] services.  \n  \n## Implementing WCF Services as DLLs  \n Implementing a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service as a DLL that is deployed to the \\bin directory of a Web application allows you reuse the service outside of the Web application model, for example, in a test environment that may not have Internet Information Services (IIS) deployed.  \n  \n## Service Hosts in IIS-Hosted Applications  \n Do not use the imperative self-host APIs to create new service hosts that listen on network transports not natively supported by the IIS hosting environment (For example, [!INCLUDE[iis601](../../../../includes/iis601-md.md)] to host TCP services, because TCP communication is not natively supported on [!INCLUDE[iis601](../../../../includes/iis601-md.md)]). This approach is not recommended. Service hosts created imperatively are not known within the IIS hosting environment. The critical point is that processing done by imperatively created services is not accounted for by IIS when it determines whether the hosting application pool is idle. The result is that applications that have such imperatively created service hosts have an IIS hosting environment that aggressively disposes of IIS host processes.  \n  \n## URIs and IIS-Hosted Endpoints  \n Endpoints for an IIS-hosted service should be configured using relative Uniform Resource Identifiers (URIs), not absolute addresses. This guarantees that the endpoint address falls within the set of URI addresses that belong to the hosting application and ensures that message-based activation happens as expected.  \n  \n## State Management and Process Recycling  \n The IIS hosting environment is optimized for services that do not maintain local state in memory. IIS recycles the host process in response to a variety of external and internal events, causing any volatile state stored exclusively in memory to be lost. Services hosted in IIS should store their state external to the process (for example, in a database) or in an in-memory cache that can easily be re-created if an application recycle event occurs.  \n  \n> [!NOTE]\n>  The protocols [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses for message-layer reliability and security make use of the volatile in-memory state. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] reliable sessions and security sessions may terminate unexpectedly due to application recycles. IIS-hosted applications that make use of these protocols should either depend on something other than the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]-provided session key for correlating application-layer state (for example, an application-layer construct or custom correlation header) or disable IIS process recycling for the hosted application.  \n  \n## Optimizing Performance in Middle-Tier Scenarios  \n For optimal performance in a *middle-tier scenario*—a service that calls out to other services in response to incoming messages—instantiate the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service client to the remote service once and reuse it across multiple incoming requests. Instantiating [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service clients is an expensive operation relative to making a service call on a pre-existing client instance, and middle-tier scenarios produce distinct performance gains by caching remote clients across requests. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service clients are thread-safe, so it is not necessary to synchronize access to a client across multiple threads.  \n  \n Middle-tier scenarios also produce performance gains by using the asynchronous APIs generated by the `svcutil /a` option. The `/a` option causes the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) to generate `BeginXXX/EndXXX` methods for each service operation, which allows potentially long-running calls to remote services to be made on background threads.  \n  \n## WCF in Multi-Homed or Multi-named scenarios  \n You can deploy [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services inside of an IIS Web farm, where a set of computers share a common external name (such as http://www.contoso.com) but are individually addressed by different hostnames (for example, http://www.contoso.com might direct traffic to two different machines named http://machine1.internal.contoso.com and http://machine2.internal.contoso.com). This deployment scenario is fully supported by [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)], but requires special configuration of the IIS Web site hosting [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services to display the correct (external) hostname in the service's metadata (Web Services Description Language).  \n  \n To ensure that the correct hostname appears in the service metadata [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates, configure the default identity for the IIS Web site that hosts [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services to use an explicit hostname. For example, computers that reside inside of the www.contoso.com farm should use an IIS site binding of *:80:www.contoso.com for HTTP and \\*:443:www.contoso.com for HTTPS.  \n  \n You can configure IIS Web site bindings by using the IIS Microsoft Management Console (MMC) snap-in.  \n  \n## Application Pools Running in Different User Contexts Overwrite Assemblies from Other Accounts in the Temporary Folder  \n To ensure that application pools running in different user contexts cannot overwrite assemblies from other accounts in the temporary [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] files folder, use different identities and temporary folders for different applications. For example, if you have two virtual applications /Application1 and / Application2, you can create two Application pools, A and B, with two different identities. Application pool A can run under one user identity (user1) while application pool B can run under another user identity (user2), and configure /Application1 to use A and /Application2 to use B.  \n  \n In Web.config, you can configure the temporary folder using \\<system.web/compilation/@tempFolder>. For /Application1, it can be \"c:\\tempForUser1\" and for application2 it can be \"c:\\tempForUser2\". Grant corresponding write permission to these folders for the two identities.  \n  \n Then user2 cannot change the code-generation folder for /application2 (under c:\\tempForUser1).  \n  \n## Enabling asynchronous processing  \n By default messages sent to a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service hosted under IIS 6.0 and earlier are processed in a synchronous manner. ASP.NET calls into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] on its own thread (the ASP.NET worker thread) and [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses another thread to process the request. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] holds onto the ASP.NET worker thread until it completes its processing. This leads to synchronous processing of requests. Processing requests asynchronously enables greater scalability because it reduces the number of threads required to process a request –[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not hold on to the ASP.NET thread while processing the request. Use of asynchronous behavior is not recommended for machines running IIS 6.0 because there is no way to throttle incoming requests that open up the server to *Denial Of Service* (DOS) attacks. Starting with IIS 7.0, a concurrent request throttle has been introduced: `[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\ASP.NET\\2.0.50727.0]\"MaxConcurrentRequestsPerCpu`. With this new throttle it is safe to use the asynchronous processing.  By default in IIS 7.0, the asynchronous handler and module are registered. If this has been turned off, you can manually enable asynchronous processing of requests in your application's Web.config file. The settings you use depend on your `aspNetCompatibilityEnabled` setting. If you have `aspNetCompatibilityEnabled` set to `false`, configure the `System.ServiceModel.Activation.ServiceHttpModule` as shown in the following configuration snippet.  \n  \n```  \n<system.serviceModel>  \n    <serviceHostingEnvironment aspNetCompatibilityEnabled=\"false\" />      \n  </system.serviceModel>  \n  <system.webServer>  \n    <modules>  \n      <remove name=\"ServiceModel\"/>  \n      <add name=\"ServiceModel\"   \n           preCondition=\"integratedMode,runtimeVersionv2.0\"   \n           type=\"System.ServiceModel.Activation.ServiceHttpModule, System.ServiceModel,Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"/>  \n    </modules>  \n    </system.webServer>  \n  \n```  \n  \n If you have `aspNetCompatibilityEnabled` set to `true`, configure the `System.ServiceModel.Activation.ServiceHttpHandlerFactory` as shown in the following config snippet.  \n  \n```  \n<system.serviceModel>  \n    <serviceHostingEnvironment aspNetCompatibilityEnabled=\"true\" />      \n  </system.serviceModel>  \n  <system.webServer>  \n    <handlers>  \n          <clear/>  \n          <add name=\"TestAsyncHttpHandler\"   \n               path=\"*.svc\"   \n               verb=\"*\"   \n               type=\"System.ServiceModel.Activation.ServiceHttpHandlerFactory, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"           \n               />  \n    </handlers>      \n  </system.webServer>  \n  \n```  \n  \n## See Also  \n [Service Hosting Samples](http://msdn.microsoft.com/en-us/f703a3f6-0fba-418a-a92f-7ce75ccfa47e)   \n [Windows Server App Fabric Hosting Features](http://go.microsoft.com/fwlink/?LinkId=201276)\n","nodes":[{"pos":[12,81],"content":"Internet Information Services Hosting Best Practices | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Internet Information Services Hosting Best Practices | Microsoft Docs","pos":[0,69]}]},{"pos":[380,432],"content":"Internet Information Services Hosting Best Practices","linkify":"Internet Information Services Hosting Best Practices","nodes":[{"content":"Internet Information Services Hosting Best Practices","pos":[0,52]}]},{"pos":[433,550],"content":"This topic outlines some best practices for hosting <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> services.","source":"This topic outlines some best practices for hosting [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] services."},{"pos":[559,592],"content":"Implementing WCF Services as DLLs","linkify":"Implementing WCF Services as DLLs","nodes":[{"content":"Implementing WCF Services as DLLs","pos":[0,33]}]},{"pos":[596,909],"content":"Implementing a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service as a DLL that is deployed to the \\bin directory of a Web application allows you reuse the service outside of the Web application model, for example, in a test environment that may not have Internet Information Services (IIS) deployed.","source":"Implementing a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service as a DLL that is deployed to the \\bin directory of a Web application allows you reuse the service outside of the Web application model, for example, in a test environment that may not have Internet Information Services (IIS) deployed."},{"pos":[918,958],"content":"Service Hosts in IIS-Hosted Applications","linkify":"Service Hosts in IIS-Hosted Applications","nodes":[{"content":"Service Hosts in IIS-Hosted Applications","pos":[0,40]}]},{"content":"Do not use the imperative self-host APIs to create new service hosts that listen on network transports not natively supported by the IIS hosting environment (For example, <ph id=\"ph1\">[!INCLUDE[iis601](../../../../includes/iis601-md.md)]</ph> to host TCP services, because TCP communication is not natively supported on <ph id=\"ph2\">[!INCLUDE[iis601](../../../../includes/iis601-md.md)]</ph>).","pos":[962,1319],"source":"Do not use the imperative self-host APIs to create new service hosts that listen on network transports not natively supported by the IIS hosting environment (For example, [!INCLUDE[iis601](../../../../includes/iis601-md.md)] to host TCP services, because TCP communication is not natively supported on [!INCLUDE[iis601](../../../../includes/iis601-md.md)])."},{"content":"This approach is not recommended.","pos":[1320,1353]},{"content":"Service hosts created imperatively are not known within the IIS hosting environment.","pos":[1354,1438]},{"content":"The critical point is that processing done by imperatively created services is not accounted for by IIS when it determines whether the hosting application pool is idle.","pos":[1439,1607]},{"content":"The result is that applications that have such imperatively created service hosts have an IIS hosting environment that aggressively disposes of IIS host processes.","pos":[1608,1771]},{"pos":[1780,1809],"content":"URIs and IIS-Hosted Endpoints","linkify":"URIs and IIS-Hosted Endpoints","nodes":[{"content":"URIs and IIS-Hosted Endpoints","pos":[0,29]}]},{"content":"Endpoints for an IIS-hosted service should be configured using relative Uniform Resource Identifiers (URIs), not absolute addresses.","pos":[1813,1945]},{"content":"This guarantees that the endpoint address falls within the set of URI addresses that belong to the hosting application and ensures that message-based activation happens as expected.","pos":[1946,2127]},{"pos":[2136,2174],"content":"State Management and Process Recycling","linkify":"State Management and Process Recycling","nodes":[{"content":"State Management and Process Recycling","pos":[0,38]}]},{"content":"The IIS hosting environment is optimized for services that do not maintain local state in memory.","pos":[2178,2275]},{"content":"IIS recycles the host process in response to a variety of external and internal events, causing any volatile state stored exclusively in memory to be lost.","pos":[2276,2431]},{"content":"Services hosted in IIS should store their state external to the process (for example, in a database) or in an in-memory cache that can easily be re-created if an application recycle event occurs.","pos":[2432,2627]},{"pos":[2635,3316],"content":"[!NOTE]\n The protocols [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses for message-layer reliability and security make use of the volatile in-memory state. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] reliable sessions and security sessions may terminate unexpectedly due to application recycles. IIS-hosted applications that make use of these protocols should either depend on something other than the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]-provided session key for correlating application-layer state (for example, an application-layer construct or custom correlation header) or disable IIS process recycling for the hosted application.","leadings":["","> "],"nodes":[{"content":" The protocols [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses for message-layer reliability and security make use of the volatile in-memory state. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] reliable sessions and security sessions may terminate unexpectedly due to application recycles. IIS-hosted applications that make use of these protocols should either depend on something other than the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]-provided session key for correlating application-layer state (for example, an application-layer construct or custom correlation header) or disable IIS process recycling for the hosted application.","pos":[8,679],"nodes":[{"content":"The protocols <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses for message-layer reliability and security make use of the volatile in-memory state.","pos":[1,160],"source":" The protocols [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses for message-layer reliability and security make use of the volatile in-memory state."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> reliable sessions and security sessions may terminate unexpectedly due to application recycles.","pos":[161,312],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] reliable sessions and security sessions may terminate unexpectedly due to application recycles."},{"content":"IIS-hosted applications that make use of these protocols should either depend on something other than the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>-provided session key for correlating application-layer state (for example, an application-layer construct or custom correlation header) or disable IIS process recycling for the hosted application.","pos":[313,671],"source":" IIS-hosted applications that make use of these protocols should either depend on something other than the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]-provided session key for correlating application-layer state (for example, an application-layer construct or custom correlation header) or disable IIS process recycling for the hosted application."}]}]},{"pos":[3325,3372],"content":"Optimizing Performance in Middle-Tier Scenarios","linkify":"Optimizing Performance in Middle-Tier Scenarios","nodes":[{"content":"Optimizing Performance in Middle-Tier Scenarios","pos":[0,47]}]},{"content":"For optimal performance in a <bpt id=\"p1\">*</bpt>middle-tier scenario<ept id=\"p1\">*</ept>—a service that calls out to other services in response to incoming messages—instantiate the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service client to the remote service once and reuse it across multiple incoming requests.","pos":[3376,3665],"source":"For optimal performance in a *middle-tier scenario*—a service that calls out to other services in response to incoming messages—instantiate the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service client to the remote service once and reuse it across multiple incoming requests."},{"content":"Instantiating <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service clients is an expensive operation relative to making a service call on a pre-existing client instance, and middle-tier scenarios produce distinct performance gains by caching remote clients across requests.","pos":[3666,3950],"source":" Instantiating [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service clients is an expensive operation relative to making a service call on a pre-existing client instance, and middle-tier scenarios produce distinct performance gains by caching remote clients across requests."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service clients are thread-safe, so it is not necessary to synchronize access to a client across multiple threads.","pos":[3951,4121],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service clients are thread-safe, so it is not necessary to synchronize access to a client across multiple threads."},{"content":"Middle-tier scenarios also produce performance gains by using the asynchronous APIs generated by the <ph id=\"ph1\">`svcutil /a`</ph> option.","pos":[4128,4249],"source":"Middle-tier scenarios also produce performance gains by using the asynchronous APIs generated by the `svcutil /a` option."},{"content":"The <ph id=\"ph1\">`/a`</ph> option causes the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to generate <ph id=\"ph2\">`BeginXXX/EndXXX`</ph> methods for each service operation, which allows potentially long-running calls to remote services to be made on background threads.","pos":[4250,4572],"source":" The `/a` option causes the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) to generate `BeginXXX/EndXXX` methods for each service operation, which allows potentially long-running calls to remote services to be made on background threads."},{"pos":[4581,4624],"content":"WCF in Multi-Homed or Multi-named scenarios","linkify":"WCF in Multi-Homed or Multi-named scenarios","nodes":[{"content":"WCF in Multi-Homed or Multi-named scenarios","pos":[0,43]}]},{"content":"You can deploy <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services inside of an IIS Web farm, where a set of computers share a common external name (such as http://www.contoso.com) but are individually addressed by different hostnames (for example, http://www.contoso.com might direct traffic to two different machines named http://machine1.internal.contoso.com and http://machine2.internal.contoso.com).","pos":[4628,5045],"source":"You can deploy [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services inside of an IIS Web farm, where a set of computers share a common external name (such as http://www.contoso.com) but are individually addressed by different hostnames (for example, http://www.contoso.com might direct traffic to two different machines named http://machine1.internal.contoso.com and http://machine2.internal.contoso.com)."},{"content":"This deployment scenario is fully supported by <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, but requires special configuration of the IIS Web site hosting <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services to display the correct (external) hostname in the service's metadata (Web Services Description Language).","pos":[5046,5383],"source":" This deployment scenario is fully supported by [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)], but requires special configuration of the IIS Web site hosting [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services to display the correct (external) hostname in the service's metadata (Web Services Description Language)."},{"content":"To ensure that the correct hostname appears in the service metadata <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates, configure the default identity for the IIS Web site that hosts <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services to use an explicit hostname.","pos":[5390,5681],"source":"To ensure that the correct hostname appears in the service metadata [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates, configure the default identity for the IIS Web site that hosts [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services to use an explicit hostname."},{"content":"For example, computers that reside inside of the www.contoso.com farm should use an IIS site binding of *:80:www.contoso.com for HTTP and <ph id=\"ph1\">\\*</ph>:443:www.contoso.com for HTTPS.","pos":[5682,5853],"source":" For example, computers that reside inside of the www.contoso.com farm should use an IIS site binding of *:80:www.contoso.com for HTTP and \\*:443:www.contoso.com for HTTPS."},{"content":"You can configure IIS Web site bindings by using the IIS Microsoft Management Console (MMC) snap-in.","pos":[5860,5960]},{"pos":[5969,6086],"content":"Application Pools Running in Different User Contexts Overwrite Assemblies from Other Accounts in the Temporary Folder","linkify":"Application Pools Running in Different User Contexts Overwrite Assemblies from Other Accounts in the Temporary Folder","nodes":[{"content":"Application Pools Running in Different User Contexts Overwrite Assemblies from Other Accounts in the Temporary Folder","pos":[0,117]}]},{"content":"To ensure that application pools running in different user contexts cannot overwrite assemblies from other accounts in the temporary <ph id=\"ph1\">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> files folder, use different identities and temporary folders for different applications.","pos":[6090,6369],"source":"To ensure that application pools running in different user contexts cannot overwrite assemblies from other accounts in the temporary [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] files folder, use different identities and temporary folders for different applications."},{"content":"For example, if you have two virtual applications /Application1 and / Application2, you can create two Application pools, A and B, with two different identities.","pos":[6370,6531]},{"content":"Application pool A can run under one user identity (user1) while application pool B can run under another user identity (user2), and configure /Application1 to use A and /Application2 to use B.","pos":[6532,6725]},{"content":"In Web.config, you can configure the temporary folder using <ph id=\"ph1\">\\&lt;</ph><ph id=\"ph2\">system.web/compilation/@tempFolder</ph>&gt;.","pos":[6732,6830],"source":"In Web.config, you can configure the temporary folder using \\<system.web/compilation/@tempFolder>."},{"content":"For /Application1, it can be \"c:\\tempForUser1\" and for application2 it can be \"c:\\tempForUser2\".","pos":[6831,6927]},{"content":"Grant corresponding write permission to these folders for the two identities.","pos":[6928,7005]},{"content":"Then user2 cannot change the code-generation folder for /application2 (under c:\\tempForUser1).","pos":[7012,7106]},{"pos":[7115,7147],"content":"Enabling asynchronous processing","linkify":"Enabling asynchronous processing","nodes":[{"content":"Enabling asynchronous processing","pos":[0,32]}]},{"content":"By default messages sent to a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service hosted under IIS 6.0 and earlier are processed in a synchronous manner.","pos":[7151,7316],"source":"By default messages sent to a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service hosted under IIS 6.0 and earlier are processed in a synchronous manner."},{"content":"ASP.NET calls into <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> on its own thread (the ASP.NET worker thread) and <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses another thread to process the request.","pos":[7317,7541],"source":" ASP.NET calls into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] on its own thread (the ASP.NET worker thread) and [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses another thread to process the request."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> holds onto the ASP.NET worker thread until it completes its processing.","pos":[7542,7669],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] holds onto the ASP.NET worker thread until it completes its processing."},{"content":"This leads to synchronous processing of requests.","pos":[7670,7719]},{"content":"Processing requests asynchronously enables greater scalability because it reduces the number of threads required to process a request –<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not hold on to the ASP.NET thread while processing the request.","pos":[7720,7979],"source":" Processing requests asynchronously enables greater scalability because it reduces the number of threads required to process a request –[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not hold on to the ASP.NET thread while processing the request."},{"content":"Use of asynchronous behavior is not recommended for machines running IIS 6.0 because there is no way to throttle incoming requests that open up the server to <bpt id=\"p1\">*</bpt>Denial Of Service<ept id=\"p1\">*</ept> (DOS) attacks.","pos":[7980,8172],"source":" Use of asynchronous behavior is not recommended for machines running IIS 6.0 because there is no way to throttle incoming requests that open up the server to *Denial Of Service* (DOS) attacks."},{"content":"Starting with IIS 7.0, a concurrent request throttle has been introduced: <ph id=\"ph1\">`[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\ASP.NET\\2.0.50727.0]\"MaxConcurrentRequestsPerCpu`</ph>.","pos":[8173,8337],"source":" Starting with IIS 7.0, a concurrent request throttle has been introduced: `[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\ASP.NET\\2.0.50727.0]\"MaxConcurrentRequestsPerCpu`."},{"content":"With this new throttle it is safe to use the asynchronous processing.","pos":[8338,8407]},{"content":"By default in IIS 7.0, the asynchronous handler and module are registered.","pos":[8409,8483]},{"content":"If this has been turned off, you can manually enable asynchronous processing of requests in your application's Web.config file.","pos":[8484,8611]},{"content":"The settings you use depend on your <ph id=\"ph1\">`aspNetCompatibilityEnabled`</ph> setting.","pos":[8612,8685],"source":" The settings you use depend on your `aspNetCompatibilityEnabled` setting."},{"content":"If you have <ph id=\"ph1\">`aspNetCompatibilityEnabled`</ph> set to <ph id=\"ph2\">`false`</ph>, configure the <ph id=\"ph3\">`System.ServiceModel.Activation.ServiceHttpModule`</ph> as shown in the following configuration snippet.","pos":[8686,8856],"source":" If you have `aspNetCompatibilityEnabled` set to `false`, configure the `System.ServiceModel.Activation.ServiceHttpModule` as shown in the following configuration snippet."},{"pos":[9382,9552],"content":"If you have <ph id=\"ph1\">`aspNetCompatibilityEnabled`</ph> set to <ph id=\"ph2\">`true`</ph>, configure the <ph id=\"ph3\">`System.ServiceModel.Activation.ServiceHttpHandlerFactory`</ph> as shown in the following config snippet.","source":"If you have `aspNetCompatibilityEnabled` set to `true`, configure the `System.ServiceModel.Activation.ServiceHttpHandlerFactory` as shown in the following config snippet."},{"pos":[10113,10121],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Service Hosting Samples<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f703a3f6-0fba-418a-a92f-7ce75ccfa47e)</ept><ph id=\"ph1\"> </ph>","pos":[10125,10221],"source":"[Service Hosting Samples](http://msdn.microsoft.com/en-us/f703a3f6-0fba-418a-a92f-7ce75ccfa47e) "},{"content":"<bpt id=\"p1\"> [</bpt>Windows Server App Fabric Hosting Features<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201276)</ept>","pos":[10224,10316],"source":" [Windows Server App Fabric Hosting Features](http://go.microsoft.com/fwlink/?LinkId=201276)"}]}