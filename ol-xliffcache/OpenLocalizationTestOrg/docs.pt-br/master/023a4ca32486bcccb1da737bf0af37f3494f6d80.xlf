<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">023a4ca32486bcccb1da737bf0af37f3494f6d80</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\queries\aggregate-clause.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a901210578a8b85d2c33123747430f0633487b0b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d4a4333fbf6735a684b317283cd34bfada501df</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Aggregate Clause (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Aggregate Clause (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applies one or more aggregate functions to a collection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Variable used to iterate through the elements of the collection.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`element`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If no type is specified, the type of <ph id="ph1">`element`</ph> is inferred from <ph id="ph2">`collection`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Refers to the collection to operate on.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>One or more query clauses, such as a <ph id="ph1">`Where`</ph> clause, to refine the query result to apply the aggregate clause or clauses to.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One or more comma-delimited expressions that identify an aggregate function to apply to the collection.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can apply an alias to an aggregate function to specify a member name for the query result.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If no alias is supplied, the name of the aggregate function is used.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For examples, see the section about aggregate functions later in this topic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Aggregate`</ph> clause can be used to include aggregate functions in your queries.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Aggregate functions perform checks and computations over a set of values and return a single value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can access the computed value by using a member of the query result type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The standard aggregate functions that you can use are the <ph id="ph1">`All`</ph>, <ph id="ph2">`Any`</ph>, <ph id="ph3">`Average`</ph>, <ph id="ph4">`Count`</ph>, <ph id="ph5">`LongCount`</ph>, <ph id="ph6">`Max`</ph>, <ph id="ph7">`Min`</ph>, and <ph id="ph8">`Sum`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>These functions are familiar to developers who are familiar with aggregates in SQL.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>They are described in the following section of this topic.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The result of an aggregate function is included in the query result as a field of the query result type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can supply an alias for the aggregate function result to specify the name of the member of the query result type that will hold the aggregate value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If no alias is supplied, the name of the aggregate function is used.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Aggregate`</ph> clause can begin a query, or it can be included as an additional clause in a query.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Aggregate`</ph> clause begins a query, the result is a single value that is the result of the aggregate function specified in the <ph id="ph2">`Into`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If more than one aggregate function is specified in the <ph id="ph1">`Into`</ph> clause, the query returns a single type with a separate property to reference the result of each aggregate function in the <ph id="ph2">`Into`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Aggregate`</ph> clause is included as an additional clause in a query, the type returned in the query collection will have a separate property to reference the result of each aggregate function in the <ph id="ph2">`Into`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Aggregate Functions</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following list describes the standard aggregate functions that can be used with the <ph id="ph1">`Aggregate`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> if all elements in the collection satisfy a specified condition; otherwise returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Following is an example:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#5<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> if any element in the collection satisfies a specified condition; otherwise returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Following is an example:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#6<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Computes the average of all elements in the collection, or a computes supplied expression for all elements in the collection.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Following is an example:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#7<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Counts the number of elements in the collection.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can supply an optional <ph id="ph1">`Boolean`</ph> expression to count only the number of elements in the collection that satisfy a condition.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Following is an example:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#8<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Refers to query results that are grouped as a result of a <ph id="ph1">`Group By`</ph> or <ph id="ph2">`Group Join`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Group`</ph> function is valid only in the <ph id="ph2">`Into`</ph> clause of a <ph id="ph3">`Group By`</ph> or <ph id="ph4">`Group Join`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <bpt id="p1">[</bpt>Group By Clause<ept id="p1">](../../../visual-basic/language-reference/queries/group-by-clause.md)</ept> and <bpt id="p2">[</bpt>Group Join Clause<ept id="p2">](../../../visual-basic/language-reference/queries/group-join-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Counts the number of elements in the collection.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can supply an optional <ph id="ph1">`Boolean`</ph> expression to count only the number of elements in the collection that satisfy a condition.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns the result as a <ph id="ph1">`Long`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For an example, see the <ph id="ph1">`Count`</ph> aggregate function.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Computes the maximum value from the collection, or computes a supplied expression for all elements in the collection.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Following is an example:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#9<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Computes the minimum value from the collection, or computes a supplied expression for all elements in the collection.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Following is an example:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#10<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_6.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Computes the sum of all elements in the collection, or computes a supplied expression for all elements in the collection.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Following is an example:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#15<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_7.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">`Aggregate`</ph> clause to apply aggregate functions to a query result.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#4<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_8.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Creating User-Defined Aggregate Functions</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can include your own custom aggregate functions in a query expression by adding extension methods to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Your custom method can then perform a calculation or operation on the enumerable collection that has referenced your aggregate function.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information about extension methods, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, the following code example shows a custom aggregate function that calculates the median value of a collection of numbers.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>There are two overloads of the <ph id="ph1">`Median`</ph> extension method.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The first overload accepts, as input, a collection of type <ph id="ph1">`IEnumerable(Of Double)`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Median`</ph> aggregate function is called for a query field of type <ph id="ph2">`Double`</ph>, this method will be called.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The second overload of the <ph id="ph1">`Median`</ph> method can be passed any generic type.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The generic overload of the <ph id="ph1">`Median`</ph> method takes a second parameter that references the <ph id="ph2">`Func(Of T, Double)`</ph> lambda expression to project a value for a type (from a collection) as the corresponding value of type <ph id="ph3">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It then delegates the calculation of the median value to the other overload of the <ph id="ph1">`Median`</ph> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information about lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#18<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_9.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following code example shows sample queries that call the <ph id="ph1">`Median`</ph> aggregate function on a collection of type <ph id="ph2">`Integer`</ph>, and a collection of type <ph id="ph3">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The query that calls the <ph id="ph1">`Median`</ph> aggregate function on the collection of type <ph id="ph2">`Double`</ph> calls the overload of the <ph id="ph3">`Median`</ph> method that accepts, as input, a collection of type <ph id="ph4">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The query that calls the <ph id="ph1">`Median`</ph> aggregate function on the collection of type <ph id="ph2">`Integer`</ph> calls the generic overload of the <ph id="ph3">`Median`</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#19<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/aggregate-clause_10.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queries<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Select Clause<ept id="p1">](../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>From Clause<ept id="p1">](../../../visual-basic/language-reference/queries/from-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Where Clause<ept id="p1">](../../../visual-basic/language-reference/queries/where-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Group By Clause<ept id="p1">](../../../visual-basic/language-reference/queries/group-by-clause.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>