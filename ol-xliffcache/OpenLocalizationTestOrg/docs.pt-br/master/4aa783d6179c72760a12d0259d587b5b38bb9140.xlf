<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-initialize-an-array-variable.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4aa783d6179c72760a12d0259d587b5b38bb9140</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\arrays\how-to-initialize-an-array-variable.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d09199ca645abc8846370b35de4a54e7ee74e961</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d7a724ee4a7f4981226925edd303f73754a03d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Initialize an Array Variable in Visual Basic</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Initialize an Array Variable in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You initialize an array variable by including an array literal in a <ph id="ph1">`New`</ph> clause and specifying the initial values of the array.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can either specify the type or allow it to be inferred from the values in the array literal.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about how the type is inferred, see "Populating an Array with Initial Values" in <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To initialize an array variable by using an array literal</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Either in the <ph id="ph1">`New`</ph> clause, or when you assign the array value, supply the element values inside braces (<ph id="ph2">`{}`</ph>).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows several ways to declare, create, and initialize a variable to contain an array that has elements of type <ph id="ph1">`Char`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>After each statement executes, the array that's created has a length of 3, with elements at index 0 through index 2 containing the initial values.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you supply both the upper bound and the values, you must include a value for every element from index 0 through the upper bound.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Notice that you do not have to specify the index upper bound if you supply element values in an array literal.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If no upper bound is specified, the size of the array is inferred based on the number of values in the array literal.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To initialize a multidimensional array variable by using array literals</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Nest values inside braces (<ph id="ph1">`{}`</ph>) within braces.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Ensure that the nested array literals all infer as arrays of the same type and length.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code example shows several examples of multidimensional array initialization.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can explicitly specify the array bounds, or leave them out and have the compiler infer the array bounds based on the values in the array literal.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you supply both the upper bounds and the values, you must include a value for every element from index 0 through the upper bound in every dimension.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows several ways to declare, create, and initialize a variable to contain a two-dimensional array that has elements of type <ph id="ph1">`Short`</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After each statement executes, the created array contains six initialized elements that have indexes <ph id="ph1">`(0,0)`</ph>, <ph id="ph2">`(0,1)`</ph>, <ph id="ph3">`(0,2)`</ph>, <ph id="ph4">`(1,0)`</ph>, <ph id="ph5">`(1,1)`</ph>, and <ph id="ph6">`(1,2)`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each array location contains the value <ph id="ph1">`10`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example iterates through a multidimensional array.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In a Windows console application that is written in Visual Basic, paste the code inside the <ph id="ph1">`Sub Main()`</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The last comments show the output.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To initialize a jagged array variable by using array literals</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Nest object values inside braces (<ph id="ph1">`{}`</ph>).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Although you can also nest array literals that specify arrays of different lengths, in the case of a jagged array, make sure that the nested array literals are enclosed in parentheses (<ph id="ph1">`()`</ph>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The parentheses force the evaluation of the nested array literals, and the resulting arrays are used as the initial values of the jagged array.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code example shows two examples of jagged array initialization.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example iterates through a jagged array.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In a Windows console application that is written in Visual Basic, paste the code inside the <ph id="ph1">`Sub Main()`</ph> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The last comments in the code show the output.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/troubleshooting-arrays.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>