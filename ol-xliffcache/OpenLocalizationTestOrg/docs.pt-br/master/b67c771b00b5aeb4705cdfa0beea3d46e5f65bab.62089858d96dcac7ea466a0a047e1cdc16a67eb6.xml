{"content":"---\ntitle: \"Using Activity Delegates | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e33cf876-8979-440b-9b23-4a12d1139960\ncaps.latest.revision: 12\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Using Activity Delegates\nActivity delegates enable activity authors to expose callbacks with specific signatures, for which users of the activity can provide activity-based handlers. Two types of activity delegates are available: <xref:System.Activities.ActivityAction%601> is used to define activity delegates that do not have a return value, and <xref:System.Activities.ActivityFunc%601> is used to define activity delegates that do have a return value.  \n  \n Activity delegates are useful in scenarios where a child activity must be constrained to having a certain signature. For example, a <xref:System.Activities.Statements.While> activity can contain any type of child activity with no constraints, but the body of a <xref:System.Activities.Statements.ForEach%601> activity is an <xref:System.Activities.ActivityAction%601>, and the child activity that is ultimately executed by <xref:System.Activities.Statements.ForEach%601> must have an <xref:System.Activities.InArgument%601> that is the same type of the members of the collection that the <xref:System.Activities.Statements.ForEach%601> enumerates.  \n  \n## Using ActivityAction  \n Several [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] activities use activity actions, such as the <xref:System.Activities.Statements.Catch> activity and the <xref:System.Activities.Statements.ForEach%601> activity. In each case, the activity action represents a location where the workflow author specifies an activity to provide the desired behavior when composing a workflow using one of these activities. In the following example, a <xref:System.Activities.Statements.ForEach%601> activity is used to display text to the console window. The body of the <xref:System.Activities.Statements.ForEach%601> is specified by using an <xref:System.Activities.ActivityAction%601> that matches the type of the <xref:System.Activities.Statements.ForEach%601> which is string. The <xref:System.Activities.Statements.WriteLine> activity specified in the <xref:System.Activities.ActivityDelegate.Handler%2A> has its <xref:System.Activities.Statements.WriteLine.Text%2A> argument bound to the string values in the collection that the <xref:System.Activities.Statements.ForEach%601> activity iterates.  \n  \n [!code-csharp[CFX_ActivityExample#6](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#6)]  \n  \n The actionArgument is used to flow the individual items in the collection to the WriteLine. When the workflow is invoked, the following output is displayed to the console.  \n ``` \n HelloWorld.\n ```  \nThe examples in this topic use object initialization syntax. Object initialization syntax can be a useful way to create workflow definitions in code because it provides a hierarchical view of the activities in the workflow and shows the relationship between the activities. There is no requirement to use object initialization syntax when you programmatically create workflows. The following example is functionally equivalent to the previous example.  \n  \n [!code-csharp[CFX_ActivityExample#7](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#7)]  \n  \n [!INCLUDE[crabout](../../../includes/crabout-md.md)]object initializers, see [How to: Initialize Objects without Calling a Constructor (C# Programming Guide)](http://go.microsoft.com/fwlink/?LinkId=161015) and [How to: Declare an Object by Using an Object Initializer](http://go.microsoft.com/fwlink/?LinkId=161016).  \n  \n In the following example, a <xref:System.Activities.Statements.TryCatch> activity is used in a workflow. An <xref:System.ApplicationException> is thrown by the workflow, and is handled by a <xref:System.Activities.Statements.Catch%601> activity. The handler for the <xref:System.Activities.Statements.Catch%601> activity's activity action is a <xref:System.Activities.Statements.WriteLine> activity, and the exception detail is flowed through to it using the `ex` <xref:System.Activities.DelegateInArgument%601>.  \n  \n [!code-csharp[CFX_WorkflowApplicationExample#33](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#33)]  \n  \n When creating a custom activity that defines an <xref:System.Activities.ActivityAction%601>, use an <xref:System.Activities.Statements.InvokeAction%601> to model the invocation of that <xref:System.Activities.ActivityAction%601>. In this example, a custom `WriteLineWithNotification` activity is defined. This activity is composed of a <xref:System.Activities.Statements.Sequence> that contains a <xref:System.Activities.Statements.WriteLine> activity followed by an <xref:System.Activities.Statements.InvokeAction%601> that invokes an <xref:System.Activities.ActivityAction%601> that takes one string argument.  \n  \n [!code-csharp[CFX_ActivityExample#1](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#1)]  \n  \n When a workflow is created by using the `WriteLineWithNotification` activity, the workflow author specifies the desired custom logic in the activity actionâ€™s <xref:System.Activities.ActivityDelegate.Handler%2A>. In this example, a workflow is created that use the `WriteLineWithNotification` activity, and a <xref:System.Activities.Statements.WriteLine> activity is used as the <xref:System.Activities.ActivityDelegate.Handler%2A>.  \n  \n [!code-csharp[CFX_ActivityExample#2](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#2)]  \n  \n There are multiple generic versions of <xref:System.Activities.Statements.InvokeAction%601> and <xref:System.Activities.ActivityAction%601> provided for passing one or more arguments.  \n  \n## Using ActivityFunc  \n <xref:System.Activities.ActivityAction%601> is useful when there is no result value from the activity, and <xref:System.Activities.ActivityFunc%601> is used when a result value is returned. When creating a custom activity that defines an <xref:System.Activities.ActivityFunc%601>, use an <xref:System.Activities.Expressions.InvokeFunc%601>InvokeFunc to model the invocation of that <xref:System.Activities.ActivityFunc%601>. In the following example, a `WriteFillerText` activity is defined. To supply the filler text, an <xref:System.Activities.Expressions.InvokeFunc%601> is specified that takes an integer argument and has a string result. Once the filler text is retrieved, it is displayed to the console using a <xref:System.Activities.Statements.WriteLine> activity.  \n  \n [!code-csharp[CFX_ActivityExample#3](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#3)]  \n  \n To supply the text, an activity must be used that takes one `int` argument and has a string result. This example shows a `TextGenerator` activity that meets these requirements.  \n  \n [!code-csharp[CFX_ActivityExample#4](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#4)]  \n  \n To use the `TextGenerator` activity with the `WriteRandomText` activity, specify it as the <xref:System.Activities.ActivityDelegate.Handler%2A>.  \n  \n [!code-csharp[CFX_ActivityExample#5](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#5)]  \n  \n## See Also  \n [Exposing and Invoking ActivityActions](../../../docs/framework/windows-workflow-foundation/samples/exposing-and-invoking-activityactions.md)","nodes":[{"pos":[12,53],"content":"Using Activity Delegates | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Activity Delegates | Microsoft Docs","pos":[0,41]}]},{"pos":[319,343],"content":"Using Activity Delegates","linkify":"Using Activity Delegates","nodes":[{"content":"Using Activity Delegates","pos":[0,24]}]},{"content":"Activity delegates enable activity authors to expose callbacks with specific signatures, for which users of the activity can provide activity-based handlers.","pos":[344,501]},{"content":"Two types of activity delegates are available: <ph id=\"ph1\">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> is used to define activity delegates that do not have a return value, and <ph id=\"ph2\">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph> is used to define activity delegates that do have a return value.","pos":[502,774],"source":" Two types of activity delegates are available: <xref:System.Activities.ActivityAction%601> is used to define activity delegates that do not have a return value, and <xref:System.Activities.ActivityFunc%601> is used to define activity delegates that do have a return value."},{"content":"Activity delegates are useful in scenarios where a child activity must be constrained to having a certain signature.","pos":[781,897]},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.While&gt;</ph> activity can contain any type of child activity with no constraints, but the body of a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity is an <ph id=\"ph3\">&lt;xref:System.Activities.ActivityAction%601&gt;</ph>, and the child activity that is ultimately executed by <ph id=\"ph4\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> must have an <ph id=\"ph5\">&lt;xref:System.Activities.InArgument%601&gt;</ph> that is the same type of the members of the collection that the <ph id=\"ph6\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> enumerates.","pos":[898,1428],"source":" For example, a <xref:System.Activities.Statements.While> activity can contain any type of child activity with no constraints, but the body of a <xref:System.Activities.Statements.ForEach%601> activity is an <xref:System.Activities.ActivityAction%601>, and the child activity that is ultimately executed by <xref:System.Activities.Statements.ForEach%601> must have an <xref:System.Activities.InArgument%601> that is the same type of the members of the collection that the <xref:System.Activities.Statements.ForEach%601> enumerates."},{"pos":[1437,1457],"content":"Using ActivityAction","linkify":"Using ActivityAction","nodes":[{"content":"Using ActivityAction","pos":[0,20]}]},{"content":"Several <ph id=\"ph1\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> activities use activity actions, such as the <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Catch&gt;</ph> activity and the <ph id=\"ph3\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity.","pos":[1461,1707],"source":"Several [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] activities use activity actions, such as the <xref:System.Activities.Statements.Catch> activity and the <xref:System.Activities.Statements.ForEach%601> activity."},{"content":"In each case, the activity action represents a location where the workflow author specifies an activity to provide the desired behavior when composing a workflow using one of these activities.","pos":[1708,1900]},{"content":"In the following example, a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity is used to display text to the console window.","pos":[1901,2032],"source":" In the following example, a <xref:System.Activities.Statements.ForEach%601> activity is used to display text to the console window."},{"content":"The body of the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> is specified by using an <ph id=\"ph2\">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> that matches the type of the <ph id=\"ph3\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> which is string.","pos":[2033,2259],"source":" The body of the <xref:System.Activities.Statements.ForEach%601> is specified by using an <xref:System.Activities.ActivityAction%601> that matches the type of the <xref:System.Activities.Statements.ForEach%601> which is string."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity specified in the <ph id=\"ph2\">&lt;xref:System.Activities.ActivityDelegate.Handler%2A&gt;</ph> has its <ph id=\"ph3\">&lt;xref:System.Activities.Statements.WriteLine.Text%2A&gt;</ph> argument bound to the string values in the collection that the <ph id=\"ph4\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity iterates.","pos":[2260,2580],"source":" The <xref:System.Activities.Statements.WriteLine> activity specified in the <xref:System.Activities.ActivityDelegate.Handler%2A> has its <xref:System.Activities.Statements.WriteLine.Text%2A> argument bound to the string values in the collection that the <xref:System.Activities.Statements.ForEach%601> activity iterates."},{"pos":[2587,2710],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_ActivityExample#6<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#6)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_ActivityExample#6](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#6)]"},{"content":"The actionArgument is used to flow the individual items in the collection to the WriteLine.","pos":[2717,2808]},{"content":"When the workflow is invoked, the following output is displayed to the console.","pos":[2809,2888]},{"content":"The examples in this topic use object initialization syntax.","pos":[2917,2977]},{"content":"Object initialization syntax can be a useful way to create workflow definitions in code because it provides a hierarchical view of the activities in the workflow and shows the relationship between the activities.","pos":[2978,3190]},{"content":"There is no requirement to use object initialization syntax when you programmatically create workflows.","pos":[3191,3294]},{"content":"The following example is functionally equivalent to the previous example.","pos":[3295,3368]},{"pos":[3375,3498],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_ActivityExample#7<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#7)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_ActivityExample#7](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#7)]"},{"pos":[3505,3821],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph>object initializers, see <bpt id=\"p1\">[</bpt>How to: Initialize Objects without Calling a Constructor (C# Programming Guide)<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=161015)</ept> and <bpt id=\"p2\">[</bpt>How to: Declare an Object by Using an Object Initializer<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=161016)</ept>.","source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)]object initializers, see [How to: Initialize Objects without Calling a Constructor (C# Programming Guide)](http://go.microsoft.com/fwlink/?LinkId=161015) and [How to: Declare an Object by Using an Object Initializer](http://go.microsoft.com/fwlink/?LinkId=161016)."},{"content":"In the following example, a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity is used in a workflow.","pos":[3828,3932],"source":"In the following example, a <xref:System.Activities.Statements.TryCatch> activity is used in a workflow."},{"content":"An <ph id=\"ph1\">&lt;xref:System.ApplicationException&gt;</ph> is thrown by the workflow, and is handled by a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Catch%601&gt;</ph> activity.","pos":[3933,4073],"source":" An <xref:System.ApplicationException> is thrown by the workflow, and is handled by a <xref:System.Activities.Statements.Catch%601> activity."},{"content":"The handler for the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Catch%601&gt;</ph> activity's activity action is a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity, and the exception detail is flowed through to it using the <ph id=\"ph3\">`ex`</ph> <ph id=\"ph4\">&lt;xref:System.Activities.DelegateInArgument%601&gt;</ph>.","pos":[4074,4340],"source":" The handler for the <xref:System.Activities.Statements.Catch%601> activity's activity action is a <xref:System.Activities.Statements.WriteLine> activity, and the exception detail is flowed through to it using the `ex` <xref:System.Activities.DelegateInArgument%601>."},{"pos":[4347,4494],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_WorkflowApplicationExample#33<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#33)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_WorkflowApplicationExample#33](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#33)]"},{"content":"When creating a custom activity that defines an <ph id=\"ph1\">&lt;xref:System.Activities.ActivityAction%601&gt;</ph>, use an <ph id=\"ph2\">&lt;xref:System.Activities.Statements.InvokeAction%601&gt;</ph> to model the invocation of that <ph id=\"ph3\">&lt;xref:System.Activities.ActivityAction%601&gt;</ph>.","pos":[4501,4730],"source":"When creating a custom activity that defines an <xref:System.Activities.ActivityAction%601>, use an <xref:System.Activities.Statements.InvokeAction%601> to model the invocation of that <xref:System.Activities.ActivityAction%601>."},{"content":"In this example, a custom <ph id=\"ph1\">`WriteLineWithNotification`</ph> activity is defined.","pos":[4731,4805],"source":" In this example, a custom `WriteLineWithNotification` activity is defined."},{"content":"This activity is composed of a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> that contains a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity followed by an <ph id=\"ph3\">&lt;xref:System.Activities.Statements.InvokeAction%601&gt;</ph> that invokes an <ph id=\"ph4\">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> that takes one string argument.","pos":[4806,5112],"source":" This activity is composed of a <xref:System.Activities.Statements.Sequence> that contains a <xref:System.Activities.Statements.WriteLine> activity followed by an <xref:System.Activities.Statements.InvokeAction%601> that invokes an <xref:System.Activities.ActivityAction%601> that takes one string argument."},{"pos":[5119,5242],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_ActivityExample#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_ActivityExample#1](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#1)]"},{"content":"When a workflow is created by using the <ph id=\"ph1\">`WriteLineWithNotification`</ph> activity, the workflow author specifies the desired custom logic in the activity actionâ€™s <ph id=\"ph2\">&lt;xref:System.Activities.ActivityDelegate.Handler%2A&gt;</ph>.","pos":[5249,5460],"source":"When a workflow is created by using the `WriteLineWithNotification` activity, the workflow author specifies the desired custom logic in the activity actionâ€™s <xref:System.Activities.ActivityDelegate.Handler%2A>."},{"content":"In this example, a workflow is created that use the <ph id=\"ph1\">`WriteLineWithNotification`</ph> activity, and a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity is used as the <ph id=\"ph3\">&lt;xref:System.Activities.ActivityDelegate.Handler%2A&gt;</ph>.","pos":[5461,5680],"source":" In this example, a workflow is created that use the `WriteLineWithNotification` activity, and a <xref:System.Activities.Statements.WriteLine> activity is used as the <xref:System.Activities.ActivityDelegate.Handler%2A>."},{"pos":[5687,5810],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_ActivityExample#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#2)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_ActivityExample#2](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#2)]"},{"content":"There are multiple generic versions of <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeAction%601&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> provided for passing one or more arguments.","pos":[5817,6000],"source":"There are multiple generic versions of <xref:System.Activities.Statements.InvokeAction%601> and <xref:System.Activities.ActivityAction%601> provided for passing one or more arguments."},{"pos":[6009,6027],"content":"Using ActivityFunc","linkify":"Using ActivityFunc","nodes":[{"content":"Using ActivityFunc","pos":[0,18]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> is useful when there is no result value from the activity, and <ph id=\"ph2\">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph> is used when a result value is returned.","pos":[6031,6220],"source":"<xref:System.Activities.ActivityAction%601> is useful when there is no result value from the activity, and <xref:System.Activities.ActivityFunc%601> is used when a result value is returned."},{"content":"When creating a custom activity that defines an <ph id=\"ph1\">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph>, use an <ph id=\"ph2\">&lt;xref:System.Activities.Expressions.InvokeFunc%601&gt;</ph>InvokeFunc to model the invocation of that <ph id=\"ph3\">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph>.","pos":[6221,6455],"source":" When creating a custom activity that defines an <xref:System.Activities.ActivityFunc%601>, use an <xref:System.Activities.Expressions.InvokeFunc%601>InvokeFunc to model the invocation of that <xref:System.Activities.ActivityFunc%601>."},{"content":"In the following example, a <ph id=\"ph1\">`WriteFillerText`</ph> activity is defined.","pos":[6456,6522],"source":" In the following example, a `WriteFillerText` activity is defined."},{"content":"To supply the filler text, an <ph id=\"ph1\">&lt;xref:System.Activities.Expressions.InvokeFunc%601&gt;</ph> is specified that takes an integer argument and has a string result.","pos":[6523,6673],"source":" To supply the filler text, an <xref:System.Activities.Expressions.InvokeFunc%601> is specified that takes an integer argument and has a string result."},{"content":"Once the filler text is retrieved, it is displayed to the console using a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity.","pos":[6674,6803],"source":" Once the filler text is retrieved, it is displayed to the console using a <xref:System.Activities.Statements.WriteLine> activity."},{"pos":[6810,6933],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_ActivityExample#3<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#3)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_ActivityExample#3](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#3)]"},{"content":"To supply the text, an activity must be used that takes one <ph id=\"ph1\">`int`</ph> argument and has a string result.","pos":[6940,7039],"source":"To supply the text, an activity must be used that takes one `int` argument and has a string result."},{"content":"This example shows a <ph id=\"ph1\">`TextGenerator`</ph> activity that meets these requirements.","pos":[7040,7116],"source":" This example shows a `TextGenerator` activity that meets these requirements."},{"pos":[7123,7246],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_ActivityExample#4<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#4)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_ActivityExample#4](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#4)]"},{"pos":[7253,7397],"content":"To use the <ph id=\"ph1\">`TextGenerator`</ph> activity with the <ph id=\"ph2\">`WriteRandomText`</ph> activity, specify it as the <ph id=\"ph3\">&lt;xref:System.Activities.ActivityDelegate.Handler%2A&gt;</ph>.","source":"To use the `TextGenerator` activity with the `WriteRandomText` activity, specify it as the <xref:System.Activities.ActivityDelegate.Handler%2A>."},{"pos":[7404,7527],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_ActivityExample#5<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#5)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_ActivityExample#5](../../../samples/snippets/csharp/VS_Snippets_CFX/CFX_ActivityExample/cs/Program.cs#5)]"},{"pos":[7536,7544],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7548,7689],"content":"<bpt id=\"p1\">[</bpt>Exposing and Invoking ActivityActions<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/exposing-and-invoking-activityactions.md)</ept>","source":"[Exposing and Invoking ActivityActions](../../../docs/framework/windows-workflow-foundation/samples/exposing-and-invoking-activityactions.md)"}]}