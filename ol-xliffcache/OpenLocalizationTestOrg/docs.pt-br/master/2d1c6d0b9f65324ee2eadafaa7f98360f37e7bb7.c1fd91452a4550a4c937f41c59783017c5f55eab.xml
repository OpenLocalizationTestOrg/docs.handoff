{"content":"---\ntitle: Explore code with the Roslyn syntax visualizer in Visual Studio\ndescription: The syntax visualizer provides a visual tool to explore the models the .NET Compiler Platform SDK generates for code.\nms.date: 03/07/2018\nms.custom: mvc, vs-dotnet\n---\n# Explore code with the Roslyn syntax visualizer in Visual Studio\n\nThis article provides an overview of the Syntax Visualizer tool that ships as part of the .NET Compiler Platform (\"Roslyn\") SDK. The Syntax Visualizer is a tool window that helps you inspect and explore syntax trees. It's an essential tool to understand the models for code you want to analyze. It's also a debugging aid when you develop your own applications using the .NET Compiler Platform (“Roslyn”) SDK. Open this tool as you create your first analyzers. The visualizer helps you understand the models used by the APIs. You can also use tools like [SharpLab](https://sharplab.io) or [LINQPad](https://www.linqpad.net/) to inspect code and understand syntax trees.\n\n[!INCLUDE[interactive-note](~/includes/roslyn-installation.md)]\n\nFamiliarize yourself with the concepts used in the .NET Compiler Platform SDK by reading the [overview](compiler-api-model.md) article. It provides an introduction to syntax trees, nodes, tokens, and trivia.\n\n## Syntax Visualizer\n\nThe **Syntax Visualizer** enables inspection of the syntax tree for the C# or VB code file in the current active editor window inside the Visual Studio IDE. The visualizer can be launched by clicking on **View** > **Other Windows** > **Syntax Visualizer**.  You can also use the **Quick Launch** toolbar in the upper right corner. Type \"syntax\", and the command to open the **Syntax Visualizer** should appear.\n\nThis command opens the Syntax Visualizer as a floating tool window. If you don't have a code editor window open, the display is blank, as shown in the following figure. \n\n![The Syntax Visualizer tool window](media/syntax-visualizer/syntax-visualizer.png)\n\nDock this tool window at a convenient location inside Visual Studio, such as the left side. The Visualizer shows information about the current code file.\n\nCreate a new project using the **File** > **New Project** command. You can create either a VB or C# project. When Visual Studio opens the main code file for this project, the visualizer displays the syntax tree for it. You can open any existing C# / VB file in this Visual Studio instance, and the visualizer displays that file's syntax tree. If you have multiple code files open inside Visual Studio, the visualizer displays the syntax tree for the currently active code file, (the code file that has keyboard focus.)\n\n# [C#](#tab/csharp)\n![Visualizing a C# syntax tree](media/syntax-visualizer/visualize-csharp.png)\n# [Visual Basic](#tab/vb)\n![Visualizing a VB syntax tree](media/syntax-visualizer/visualize-visual-basic.png)\n\n---\n\nAs shown in the preceding images, the visualizer tool window displays the syntax tree at the top and a property grid at the bottom. The property grid displays the properties of the item that is currently selected in the tree, including the .NET *Type* and the *Kind* (SyntaxKind) of the item.\n\nSyntax trees comprise three types of items – *nodes*, *tokens*, and *trivia*. You can read more about these types in the [Work with syntax](work-with-syntax.md) article. Items of each type are represented using a different color. Click on the ‘Legend’ button for an overview of the colors used.\n\nEach item in the tree also displays its own **span**. The **span** is the indices (the starting and ending position) of that node in the text file.  In the preceding C# example, the selected “UsingKeyword [0..5)” token has a **Span** that is five characters wide, [0..5). The \"[..)\" notation means that the starting index is part of the span, but the ending index is not.\n\nThere are two ways to navigate the tree:\n* Expand or click on items in the tree. The visualizer automatically selects the text corresponding to this item’s span in the code editor.\n* Click or select text in the code editor. In the preceding VB example, if you select the line containing \"Module Module1\" in the code editor, the visualizer automatically navigates to the corresponding ModuleStatement node in the tree. \n\nThe visualizer highlights the item in the tree whose span best matches the span of the text selected in the editor.\n\nThe visualizer refreshes the tree to match modifications in the active code file. Add a call to `Console.WriteLine()` inside `Main()`. As you type, the visualizer refreshes the tree.\n\nPause typing once you have typed `Console.`. The tree has some items colored in pink. At this point, there are errors (also referred to as ‘Diagnostics’) in the typed code. These errors are attached to nodes, tokens, and trivia in the syntax tree. The visualizer shows you which items have errors attached to them highlighting the background in pink. You can inspect the errors on any item colored pink by hovering over the item. The visualizer only displays syntactic errors (those errors related to the syntax of the typed code); it doesn't display any semantic errors.\n \n## Syntax Graphs\n\nRight click on any item in the tree and click on **View Directed Syntax Graph**. \n\n# [C#](#tab/csharp)\n\nThe visualizer displays a graphical representation of the subtree rooted at the selected item. Try these steps for the **MethodDeclaration** node corresponding to the `Main()` method in the C# example. The visualizer displays a syntax graph that looks as follows:\n\n![Viewing a C# syntax graph](media/syntax-visualizer/csharp-syntax-graph.png)\n# [Visual Basic](#tab/vb)\n\nTry the same for the **SubBlock** node corresponding to the `Main()` method in the preceding VB example. The visualizer displays a syntax graph that looks as follows:\n\n![Viewing a VB syntax graph](media/syntax-visualizer/visual-basic-syntax-graph.png)\n\n---\n\nThe syntax graph viewer has an option to display a legend its coloring scheme. You can also hover over individual items in the syntax graph with the mouse to view the properties corresponding to that item.\n\nYou can view syntax graphs for different items in the tree repeatedly and the graphs will always be displayed in the same window inside Visual Studio. You can dock this window at a convenient location inside Visual Studio so that you don’t have to switch between tabs to view a new syntax graph. The bottom, below code editor windows, is often convenient.\n\nHere is the docking layout to use with the visualizer tool window and the syntax graph window:\n\n![One docking layout for the visualizer and syntax graph window](media/syntax-visualizer/docking-layout.png)\n\nAnother option is to put the syntax graph window on a second monitor, in a dual monitor setup.\n\n## Inspecting semantics\n\nThe Syntax Visualizer enables rudimentary inspection of symbols and semantic information. Type `double x = 1 + 1;` inside Main() in the C# example. Then, select the expression `1 + 1` in the code editor window. The visualizer highlights the **AddExpression** node in the visualizer. Right click on this **AddExpression** and click on **View Symbol (if any)**. Notice that most of the menu items have the \"if any\" qualifier. The Syntax Visualizer inspects properties of a Node, including properties that may not be present for all nodes. \n\nThe property grid in the visualizer updates as shown in the following figure: The symbol for the expression is a **SynthesizedIntrinsicOperatorSymbol** with **Kind = Method**.\n\n![Symbol properties](media/syntax-visualizer/symbol-properties.png)\n\nTry **View TypeSymbol (if any)** for the same **AddExpression** node. The property grid in the visualizer updates as shown in the following figure, indicating that the type of the selected expression is `Int32`.\n\n![TypeSymbol properties](media/syntax-visualizer/type-symbol-properties.png)\n\nTry **View Converted TypeSymbol (if any)** for the same **AddExpression** node. The property grid updates indicating that although the type of the expression is `Int32`, the converted type of the expression is `Double` as shown in the following figure. This node includes converted type symbol information because the `Int32` expression occurs in a context where it must be converted to a `Double`. This conversion satisfies the `Double` type specified for the variable `x` on the left-hand side of the assignment operator.\n\n![Converted TypeSymbol properties](media/syntax-visualizer/converted-type-symbol-properties.png)\n\nFinally, try **View Constant Value (if any)** for the same **AddExpression** node. The property grid shows that the value of the expression is a compile time constant with value `2`.\n\n![A constant value](media/syntax-visualizer/constant-value.png)\n\nThe preceding example can also be replicated in VB. Type `Dim x As Double = 1 + 1` in a VB file. Select the expression `1 + 1` in the code editor window. The visualizer highlights the corresponding **AddExpression** node in the visualizer. Repeat the preceding steps for this **AddExpression** and you should see identical results.\n\nExamine more code in VB. Update your main VB file with the following code:\n\n```vb\nImports C = System.Console\n\nModule Program\n    Sub Main(args As String())\n        C.WriteLine()\n    End Sub\nEnd Module\n```\n\nThis code introduces an alias named `C` that maps to the type `System.Console` at the top of the file and uses this alias inside `Main()`. Select the use of this alias, the `C` in `C.WriteLine()`, inside the `Main()` method. The visualizer selects the corresponding **IdentifierName** node in the visualizer. Right-click this node and click on **View Symbol (if any)**. The property grid indicates that this identifier is bound to the type `System.Console` as shown in the following figure:\n\n![Symbol properties](media/syntax-visualizer/symbol-visual-basic.png)\n\nTry **View AliasSymbol (if any)** for the same **IdentifierName** node. The property grid indicates the identifier is an alias with name `C` that is bound to the `System.Console` target. In other words, the property grid provides information regarding the **AliasSymbol** corresponding to the identifier `C`.\n\n![AliasSymbol properties](media/syntax-visualizer/alias-symbol.png)\n\nInspect the symbol corresponding to any declared type, method, property. Select the corresponding node in the visualizer and click on **View Symbol (if any)**. Select the method `Sub Main()`, including the body of the method. Click on **View Symbol (if any)** for the corresponding **SubBlock** node in the visualizer. The property grid shows the **MethodSymbol** for this **SubBlock** has name `Main` with return type `Void`.\n\n![Viewing symbol for a method declaration](media/syntax-visualizer/method-symbol.png)\n\nThe above VB examples can be easily replicated in C#. Type `using C = System.Console;` in place of `Imports C = System.Console` for the alias. The preceding steps in C# yield identical results in the visualizer window.\n\nSemantic inspection operations are only available on nodes. They are not available on tokens or trivia. Not all nodes have interesting semantic information to inspect. When a node doesn't have interesting semantic information, clicking on **View \\* Symbol (if any)** shows a blank property grid.\n\nYou can read more about APIs for performing semantic analysis in the [Work with semantics](work-with-semantics.md) overview document.\n\n## Closing the syntax visualizer\n\nYou can close the visualizer window when you are not using it to examine source code. The syntax visualizer updates its display as you navigate through code, editing and changing source. It can get distracting when you are not using it. \n","nodes":[{"pos":[4,251],"embed":true,"restype":"x-metadata","content":"title: Explore code with the Roslyn syntax visualizer in Visual Studio\ndescription: The syntax visualizer provides a visual tool to explore the models the .NET Compiler Platform SDK generates for code.\nms.date: 03/07/2018\nms.custom: mvc, vs-dotnet","nodes":[{"content":"Explore code with the Roslyn syntax visualizer in Visual Studio","nodes":[{"pos":[0,63],"content":"Explore code with the Roslyn syntax visualizer in Visual Studio","nodes":[{"content":"Explore code with the Roslyn syntax visualizer in Visual Studio","pos":[0,63]}]}],"path":["title"],"nosxs":false},{"content":"The syntax visualizer provides a visual tool to explore the models the .NET Compiler Platform SDK generates for code.","nodes":[{"pos":[0,117],"content":"The syntax visualizer provides a visual tool to explore the models the .NET Compiler Platform SDK generates for code.","nodes":[{"content":"The syntax visualizer provides a visual tool to explore the models the .NET Compiler Platform SDK generates for code.","pos":[0,117]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[258,321],"content":"Explore code with the Roslyn syntax visualizer in Visual Studio","linkify":"Explore code with the Roslyn syntax visualizer in Visual Studio","nodes":[{"content":"Explore code with the Roslyn syntax visualizer in Visual Studio","pos":[0,63]}]},{"content":"This article provides an overview of the Syntax Visualizer tool that ships as part of the .NET Compiler Platform (\"Roslyn\") SDK.","pos":[323,451]},{"content":"The Syntax Visualizer is a tool window that helps you inspect and explore syntax trees.","pos":[452,539]},{"content":"It's an essential tool to understand the models for code you want to analyze.","pos":[540,617]},{"content":"It's also a debugging aid when you develop your own applications using the .NET Compiler Platform (“Roslyn”) SDK.","pos":[618,731]},{"content":"Open this tool as you create your first analyzers.","pos":[732,782]},{"content":"The visualizer helps you understand the models used by the APIs.","pos":[783,847]},{"content":"You can also use tools like <bpt id=\"p1\">[</bpt>SharpLab<ept id=\"p1\">](https://sharplab.io)</ept> or <bpt id=\"p2\">[</bpt>LINQPad<ept id=\"p2\">](https://www.linqpad.net/)</ept> to inspect code and understand syntax trees.","pos":[848,991],"source":" You can also use tools like [SharpLab](https://sharplab.io) or [LINQPad](https://www.linqpad.net/) to inspect code and understand syntax trees."},{"content":"Familiarize yourself with the concepts used in the .NET Compiler Platform SDK by reading the <bpt id=\"p1\">[</bpt>overview<ept id=\"p1\">](compiler-api-model.md)</ept> article.","pos":[1058,1193],"source":"Familiarize yourself with the concepts used in the .NET Compiler Platform SDK by reading the [overview](compiler-api-model.md) article."},{"content":"It provides an introduction to syntax trees, nodes, tokens, and trivia.","pos":[1194,1265]},{"pos":[1270,1287],"content":"Syntax Visualizer","linkify":"Syntax Visualizer","nodes":[{"content":"Syntax Visualizer","pos":[0,17]}]},{"content":"The <bpt id=\"p1\">**</bpt>Syntax Visualizer<ept id=\"p1\">**</ept> enables inspection of the syntax tree for the C# or VB code file in the current active editor window inside the Visual Studio IDE.","pos":[1289,1445],"source":"The **Syntax Visualizer** enables inspection of the syntax tree for the C# or VB code file in the current active editor window inside the Visual Studio IDE."},{"content":"The visualizer can be launched by clicking on <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Other Windows<ept id=\"p2\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p3\">**</bpt>Syntax Visualizer<ept id=\"p3\">**</ept>.","pos":[1446,1545],"source":" The visualizer can be launched by clicking on **View** > **Other Windows** > **Syntax Visualizer**."},{"content":"You can also use the <bpt id=\"p1\">**</bpt>Quick Launch<ept id=\"p1\">**</ept> toolbar in the upper right corner.","pos":[1547,1619],"source":"  You can also use the **Quick Launch** toolbar in the upper right corner."},{"content":"Type \"syntax\", and the command to open the <bpt id=\"p1\">**</bpt>Syntax Visualizer<ept id=\"p1\">**</ept> should appear.","pos":[1620,1699],"source":" Type \"syntax\", and the command to open the **Syntax Visualizer** should appear."},{"content":"This command opens the Syntax Visualizer as a floating tool window.","pos":[1701,1768]},{"content":"If you don't have a code editor window open, the display is blank, as shown in the following figure.","pos":[1769,1869]},{"content":"The Syntax Visualizer tool window","pos":[1874,1907]},{"content":"Dock this tool window at a convenient location inside Visual Studio, such as the left side.","pos":[1957,2048]},{"content":"The Visualizer shows information about the current code file.","pos":[2049,2110]},{"content":"Create a new project using the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>New Project<ept id=\"p2\">**</ept> command.","pos":[2112,2178],"source":"Create a new project using the **File** > **New Project** command."},{"content":"You can create either a VB or C# project.","pos":[2179,2220]},{"content":"When Visual Studio opens the main code file for this project, the visualizer displays the syntax tree for it.","pos":[2221,2330]},{"content":"You can open any existing C# / VB file in this Visual Studio instance, and the visualizer displays that file's syntax tree.","pos":[2331,2454]},{"content":"If you have multiple code files open inside Visual Studio, the visualizer displays the syntax tree for the currently active code file, (the code file that has keyboard focus.)","pos":[2455,2630]},{"pos":[2634,2651],"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](#tab/csharp)</ept>","linkify":"[C#](#tab/csharp)","source":"[C#](#tab/csharp)"},{"content":"Visualizing a C# syntax tree","pos":[2654,2682]},{"pos":[2732,2755],"content":"<bpt id=\"p1\">[</bpt>Visual Basic<ept id=\"p1\">](#tab/vb)</ept>","linkify":"[Visual Basic](#tab/vb)","source":"[Visual Basic](#tab/vb)"},{"content":"Visualizing a VB syntax tree","pos":[2758,2786]},{"content":"As shown in the preceding images, the visualizer tool window displays the syntax tree at the top and a property grid at the bottom.","pos":[2846,2977]},{"content":"The property grid displays the properties of the item that is currently selected in the tree, including the .NET <bpt id=\"p1\">*</bpt>Type<ept id=\"p1\">*</ept> and the <bpt id=\"p2\">*</bpt>Kind<ept id=\"p2\">*</ept> (SyntaxKind) of the item.","pos":[2978,3138],"source":" The property grid displays the properties of the item that is currently selected in the tree, including the .NET *Type* and the *Kind* (SyntaxKind) of the item."},{"content":"Syntax trees comprise three types of items – <bpt id=\"p1\">*</bpt>nodes<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>tokens<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>trivia<ept id=\"p3\">*</ept>.","pos":[3140,3217],"source":"Syntax trees comprise three types of items – *nodes*, *tokens*, and *trivia*."},{"content":"You can read more about these types in the <bpt id=\"p1\">[</bpt>Work with syntax<ept id=\"p1\">](work-with-syntax.md)</ept> article.","pos":[3218,3309],"source":" You can read more about these types in the [Work with syntax](work-with-syntax.md) article."},{"content":"Items of each type are represented using a different color.","pos":[3310,3369]},{"content":"Click on the ‘Legend’ button for an overview of the colors used.","pos":[3370,3434]},{"content":"Each item in the tree also displays its own <bpt id=\"p1\">**</bpt>span<ept id=\"p1\">**</ept>.","pos":[3436,3489],"source":"Each item in the tree also displays its own **span**."},{"content":"The <bpt id=\"p1\">**</bpt>span<ept id=\"p1\">**</ept> is the indices (the starting and ending position) of that node in the text file.","pos":[3490,3583],"source":" The **span** is the indices (the starting and ending position) of that node in the text file."},{"content":"In the preceding C# example, the selected “UsingKeyword [0..5)” token has a <bpt id=\"p1\">**</bpt>Span<ept id=\"p1\">**</ept> that is five characters wide, [0..5).","pos":[3585,3707],"source":"  In the preceding C# example, the selected “UsingKeyword [0..5)” token has a **Span** that is five characters wide, [0..5)."},{"content":"The \"[..)\" notation means that the starting index is part of the span, but the ending index is not.","pos":[3708,3807]},{"content":"There are two ways to navigate the tree:","pos":[3809,3849]},{"content":"Expand or click on items in the tree.","pos":[3852,3889]},{"content":"The visualizer automatically selects the text corresponding to this item’s span in the code editor.","pos":[3890,3989]},{"content":"Click or select text in the code editor.","pos":[3992,4032]},{"content":"In the preceding VB example, if you select the line containing \"Module Module1\" in the code editor, the visualizer automatically navigates to the corresponding ModuleStatement node in the tree.","pos":[4033,4226]},{"content":"The visualizer highlights the item in the tree whose span best matches the span of the text selected in the editor.","pos":[4229,4344]},{"content":"The visualizer refreshes the tree to match modifications in the active code file.","pos":[4346,4427]},{"content":"Add a call to <ph id=\"ph1\">`Console.WriteLine()`</ph> inside <ph id=\"ph2\">`Main()`</ph>.","pos":[4428,4480],"source":" Add a call to `Console.WriteLine()` inside `Main()`."},{"content":"As you type, the visualizer refreshes the tree.","pos":[4481,4528]},{"content":"Pause typing once you have typed <ph id=\"ph1\">`Console.`</ph>.","pos":[4530,4574],"source":"Pause typing once you have typed `Console.`."},{"content":"The tree has some items colored in pink.","pos":[4575,4615]},{"content":"At this point, there are errors (also referred to as ‘Diagnostics’) in the typed code.","pos":[4616,4702]},{"content":"These errors are attached to nodes, tokens, and trivia in the syntax tree.","pos":[4703,4777]},{"content":"The visualizer shows you which items have errors attached to them highlighting the background in pink.","pos":[4778,4880]},{"content":"You can inspect the errors on any item colored pink by hovering over the item.","pos":[4881,4959]},{"content":"The visualizer only displays syntactic errors (those errors related to the syntax of the typed code); it doesn't display any semantic errors.","pos":[4960,5101]},{"pos":[5107,5120],"content":"Syntax Graphs","linkify":"Syntax Graphs","nodes":[{"content":"Syntax Graphs","pos":[0,13]}]},{"pos":[5122,5202],"content":"Right click on any item in the tree and click on <bpt id=\"p1\">**</bpt>View Directed Syntax Graph<ept id=\"p1\">**</ept>.","source":"Right click on any item in the tree and click on **View Directed Syntax Graph**."},{"pos":[5207,5224],"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](#tab/csharp)</ept>","linkify":"[C#](#tab/csharp)","source":"[C#](#tab/csharp)"},{"content":"The visualizer displays a graphical representation of the subtree rooted at the selected item.","pos":[5226,5320]},{"content":"Try these steps for the <bpt id=\"p1\">**</bpt>MethodDeclaration<ept id=\"p1\">**</ept> node corresponding to the <ph id=\"ph1\">`Main()`</ph> method in the C# example.","pos":[5321,5427],"source":" Try these steps for the **MethodDeclaration** node corresponding to the `Main()` method in the C# example."},{"content":"The visualizer displays a syntax graph that looks as follows:","pos":[5428,5489]},{"content":"Viewing a C# syntax graph","pos":[5493,5518]},{"pos":[5571,5594],"content":"<bpt id=\"p1\">[</bpt>Visual Basic<ept id=\"p1\">](#tab/vb)</ept>","linkify":"[Visual Basic](#tab/vb)","source":"[Visual Basic](#tab/vb)"},{"content":"Try the same for the <bpt id=\"p1\">**</bpt>SubBlock<ept id=\"p1\">**</ept> node corresponding to the <ph id=\"ph1\">`Main()`</ph> method in the preceding VB example.","pos":[5596,5700],"source":"Try the same for the **SubBlock** node corresponding to the `Main()` method in the preceding VB example."},{"content":"The visualizer displays a syntax graph that looks as follows:","pos":[5701,5762]},{"content":"Viewing a VB syntax graph","pos":[5766,5791]},{"content":"The syntax graph viewer has an option to display a legend its coloring scheme.","pos":[5854,5932]},{"content":"You can also hover over individual items in the syntax graph with the mouse to view the properties corresponding to that item.","pos":[5933,6059]},{"content":"You can view syntax graphs for different items in the tree repeatedly and the graphs will always be displayed in the same window inside Visual Studio.","pos":[6061,6211]},{"content":"You can dock this window at a convenient location inside Visual Studio so that you don’t have to switch between tabs to view a new syntax graph.","pos":[6212,6356]},{"content":"The bottom, below code editor windows, is often convenient.","pos":[6357,6416]},{"content":"Here is the docking layout to use with the visualizer tool window and the syntax graph window:","pos":[6418,6512]},{"content":"One docking layout for the visualizer and syntax graph window","pos":[6516,6577]},{"content":"Another option is to put the syntax graph window on a second monitor, in a dual monitor setup.","pos":[6624,6718]},{"pos":[6723,6743],"content":"Inspecting semantics","linkify":"Inspecting semantics","nodes":[{"content":"Inspecting semantics","pos":[0,20]}]},{"content":"The Syntax Visualizer enables rudimentary inspection of symbols and semantic information.","pos":[6745,6834]},{"content":"Type <ph id=\"ph1\">`double x = 1 + 1;`</ph> inside Main() in the C# example.","pos":[6835,6892],"source":" Type `double x = 1 + 1;` inside Main() in the C# example."},{"content":"Then, select the expression <ph id=\"ph1\">`1 + 1`</ph> in the code editor window.","pos":[6893,6955],"source":" Then, select the expression `1 + 1` in the code editor window."},{"content":"The visualizer highlights the <bpt id=\"p1\">**</bpt>AddExpression<ept id=\"p1\">**</ept> node in the visualizer.","pos":[6956,7027],"source":" The visualizer highlights the **AddExpression** node in the visualizer."},{"content":"Right click on this <bpt id=\"p1\">**</bpt>AddExpression<ept id=\"p1\">**</ept> and click on <bpt id=\"p2\">**</bpt>View Symbol (if any)<ept id=\"p2\">**</ept>.","pos":[7028,7104],"source":" Right click on this **AddExpression** and click on **View Symbol (if any)**."},{"content":"Notice that most of the menu items have the \"if any\" qualifier.","pos":[7105,7168]},{"content":"The Syntax Visualizer inspects properties of a Node, including properties that may not be present for all nodes.","pos":[7169,7281]},{"pos":[7284,7459],"content":"The property grid in the visualizer updates as shown in the following figure: The symbol for the expression is a <bpt id=\"p1\">**</bpt>SynthesizedIntrinsicOperatorSymbol<ept id=\"p1\">**</ept> with <bpt id=\"p2\">**</bpt>Kind = Method<ept id=\"p2\">**</ept>.","source":"The property grid in the visualizer updates as shown in the following figure: The symbol for the expression is a **SynthesizedIntrinsicOperatorSymbol** with **Kind = Method**."},{"content":"Symbol properties","pos":[7463,7480]},{"content":"Try <bpt id=\"p1\">**</bpt>View TypeSymbol (if any)<ept id=\"p1\">**</ept> for the same <bpt id=\"p2\">**</bpt>AddExpression<ept id=\"p2\">**</ept> node.","pos":[7530,7599],"source":"Try **View TypeSymbol (if any)** for the same **AddExpression** node."},{"content":"The property grid in the visualizer updates as shown in the following figure, indicating that the type of the selected expression is <ph id=\"ph1\">`Int32`</ph>.","pos":[7600,7741],"source":" The property grid in the visualizer updates as shown in the following figure, indicating that the type of the selected expression is `Int32`."},{"content":"TypeSymbol properties","pos":[7745,7766]},{"content":"Try <bpt id=\"p1\">**</bpt>View Converted TypeSymbol (if any)<ept id=\"p1\">**</ept> for the same <bpt id=\"p2\">**</bpt>AddExpression<ept id=\"p2\">**</ept> node.","pos":[7821,7900],"source":"Try **View Converted TypeSymbol (if any)** for the same **AddExpression** node."},{"content":"The property grid updates indicating that although the type of the expression is <ph id=\"ph1\">`Int32`</ph>, the converted type of the expression is <ph id=\"ph2\">`Double`</ph> as shown in the following figure.","pos":[7901,8073],"source":" The property grid updates indicating that although the type of the expression is `Int32`, the converted type of the expression is `Double` as shown in the following figure."},{"content":"This node includes converted type symbol information because the <ph id=\"ph1\">`Int32`</ph> expression occurs in a context where it must be converted to a <ph id=\"ph2\">`Double`</ph>.","pos":[8074,8219],"source":" This node includes converted type symbol information because the `Int32` expression occurs in a context where it must be converted to a `Double`."},{"content":"This conversion satisfies the <ph id=\"ph1\">`Double`</ph> type specified for the variable <ph id=\"ph2\">`x`</ph> on the left-hand side of the assignment operator.","pos":[8220,8344],"source":" This conversion satisfies the `Double` type specified for the variable `x` on the left-hand side of the assignment operator."},{"content":"Converted TypeSymbol properties","pos":[8348,8379]},{"content":"Finally, try <bpt id=\"p1\">**</bpt>View Constant Value (if any)<ept id=\"p1\">**</ept> for the same <bpt id=\"p2\">**</bpt>AddExpression<ept id=\"p2\">**</ept> node.","pos":[8444,8526],"source":"Finally, try **View Constant Value (if any)** for the same **AddExpression** node."},{"content":"The property grid shows that the value of the expression is a compile time constant with value <ph id=\"ph1\">`2`</ph>.","pos":[8527,8626],"source":" The property grid shows that the value of the expression is a compile time constant with value `2`."},{"content":"A constant value","pos":[8630,8646]},{"content":"The preceding example can also be replicated in VB.","pos":[8693,8744]},{"content":"Type <ph id=\"ph1\">`Dim x As Double = 1 + 1`</ph> in a VB file.","pos":[8745,8789],"source":" Type `Dim x As Double = 1 + 1` in a VB file."},{"content":"Select the expression <ph id=\"ph1\">`1 + 1`</ph> in the code editor window.","pos":[8790,8846],"source":" Select the expression `1 + 1` in the code editor window."},{"content":"The visualizer highlights the corresponding <bpt id=\"p1\">**</bpt>AddExpression<ept id=\"p1\">**</ept> node in the visualizer.","pos":[8847,8932],"source":" The visualizer highlights the corresponding **AddExpression** node in the visualizer."},{"content":"Repeat the preceding steps for this <bpt id=\"p1\">**</bpt>AddExpression<ept id=\"p1\">**</ept> and you should see identical results.","pos":[8933,9024],"source":" Repeat the preceding steps for this **AddExpression** and you should see identical results."},{"content":"Examine more code in VB.","pos":[9026,9050]},{"content":"Update your main VB file with the following code:","pos":[9051,9100]},{"content":"This code introduces an alias named <ph id=\"ph1\">`C`</ph> that maps to the type <ph id=\"ph2\">`System.Console`</ph> at the top of the file and uses this alias inside <ph id=\"ph3\">`Main()`</ph>.","pos":[9232,9370],"source":"This code introduces an alias named `C` that maps to the type `System.Console` at the top of the file and uses this alias inside `Main()`."},{"content":"Select the use of this alias, the <ph id=\"ph1\">`C`</ph> in <ph id=\"ph2\">`C.WriteLine()`</ph>, inside the <ph id=\"ph3\">`Main()`</ph> method.","pos":[9371,9456],"source":" Select the use of this alias, the `C` in `C.WriteLine()`, inside the `Main()` method."},{"content":"The visualizer selects the corresponding <bpt id=\"p1\">**</bpt>IdentifierName<ept id=\"p1\">**</ept> node in the visualizer.","pos":[9457,9540],"source":" The visualizer selects the corresponding **IdentifierName** node in the visualizer."},{"content":"Right-click this node and click on <bpt id=\"p1\">**</bpt>View Symbol (if any)<ept id=\"p1\">**</ept>.","pos":[9541,9601],"source":" Right-click this node and click on **View Symbol (if any)**."},{"content":"The property grid indicates that this identifier is bound to the type <ph id=\"ph1\">`System.Console`</ph> as shown in the following figure:","pos":[9602,9722],"source":" The property grid indicates that this identifier is bound to the type `System.Console` as shown in the following figure:"},{"content":"Symbol properties","pos":[9726,9743]},{"content":"Try <bpt id=\"p1\">**</bpt>View AliasSymbol (if any)<ept id=\"p1\">**</ept> for the same <bpt id=\"p2\">**</bpt>IdentifierName<ept id=\"p2\">**</ept> node.","pos":[9795,9866],"source":"Try **View AliasSymbol (if any)** for the same **IdentifierName** node."},{"content":"The property grid indicates the identifier is an alias with name <ph id=\"ph1\">`C`</ph> that is bound to the <ph id=\"ph2\">`System.Console`</ph> target.","pos":[9867,9981],"source":" The property grid indicates the identifier is an alias with name `C` that is bound to the `System.Console` target."},{"content":"In other words, the property grid provides information regarding the <bpt id=\"p1\">**</bpt>AliasSymbol<ept id=\"p1\">**</ept> corresponding to the identifier <ph id=\"ph1\">`C`</ph>.","pos":[9982,10103],"source":" In other words, the property grid provides information regarding the **AliasSymbol** corresponding to the identifier `C`."},{"content":"AliasSymbol properties","pos":[10107,10129]},{"content":"Inspect the symbol corresponding to any declared type, method, property.","pos":[10174,10246]},{"content":"Select the corresponding node in the visualizer and click on <bpt id=\"p1\">**</bpt>View Symbol (if any)<ept id=\"p1\">**</ept>.","pos":[10247,10333],"source":" Select the corresponding node in the visualizer and click on **View Symbol (if any)**."},{"content":"Select the method <ph id=\"ph1\">`Sub Main()`</ph>, including the body of the method.","pos":[10334,10399],"source":" Select the method `Sub Main()`, including the body of the method."},{"content":"Click on <bpt id=\"p1\">**</bpt>View Symbol (if any)<ept id=\"p1\">**</ept> for the corresponding <bpt id=\"p2\">**</bpt>SubBlock<ept id=\"p2\">**</ept> node in the visualizer.","pos":[10400,10492],"source":" Click on **View Symbol (if any)** for the corresponding **SubBlock** node in the visualizer."},{"content":"The property grid shows the <bpt id=\"p1\">**</bpt>MethodSymbol<ept id=\"p1\">**</ept> for this <bpt id=\"p2\">**</bpt>SubBlock<ept id=\"p2\">**</ept> has name <ph id=\"ph1\">`Main`</ph> with return type <ph id=\"ph2\">`Void`</ph>.","pos":[10493,10600],"source":" The property grid shows the **MethodSymbol** for this **SubBlock** has name `Main` with return type `Void`."},{"content":"Viewing symbol for a method declaration","pos":[10604,10643]},{"content":"The above VB examples can be easily replicated in C#.","pos":[10689,10742]},{"content":"Type <ph id=\"ph1\">`using C = System.Console;`</ph> in place of <ph id=\"ph2\">`Imports C = System.Console`</ph> for the alias.","pos":[10743,10831],"source":" Type `using C = System.Console;` in place of `Imports C = System.Console` for the alias."},{"content":"The preceding steps in C# yield identical results in the visualizer window.","pos":[10832,10907]},{"content":"Semantic inspection operations are only available on nodes.","pos":[10909,10968]},{"content":"They are not available on tokens or trivia.","pos":[10969,11012]},{"content":"Not all nodes have interesting semantic information to inspect.","pos":[11013,11076]},{"content":"When a node doesn't have interesting semantic information, clicking on <bpt id=\"p1\">**</bpt>View <ph id=\"ph1\">\\*</ph> Symbol (if any)<ept id=\"p1\">**</ept> shows a blank property grid.","pos":[11077,11204],"source":" When a node doesn't have interesting semantic information, clicking on **View \\* Symbol (if any)** shows a blank property grid."},{"pos":[11206,11339],"content":"You can read more about APIs for performing semantic analysis in the <bpt id=\"p1\">[</bpt>Work with semantics<ept id=\"p1\">](work-with-semantics.md)</ept> overview document.","source":"You can read more about APIs for performing semantic analysis in the [Work with semantics](work-with-semantics.md) overview document."},{"pos":[11344,11373],"content":"Closing the syntax visualizer","linkify":"Closing the syntax visualizer","nodes":[{"content":"Closing the syntax visualizer","pos":[0,29]}]},{"content":"You can close the visualizer window when you are not using it to examine source code.","pos":[11375,11460]},{"content":"The syntax visualizer updates its display as you navigate through code, editing and changing source.","pos":[11461,11561]},{"content":"It can get distracting when you are not using it.","pos":[11562,11611]}]}