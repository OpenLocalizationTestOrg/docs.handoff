<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="codedoc.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b52fba24750747772c36959324cd16e21067910e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\codedoc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd0e6abe444cf6e507018762c1100d15e2734641</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c712c80ae47b57e419ac087f38aeb7c1a55d91dd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Documenting your code with XML comments</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to document your code with XML documentation comments and generate an XML documentation file at compile time.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Documenting your code with XML comments</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XML documentation comments are a special kind of comment, added above the definition of any user-defined type or member.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They are special because they can be processed by the compiler to generate an XML documentation file at compile time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The compiler generated XML file can be distributed alongside your .NET assembly so that Visual Studio and other IDEs can use IntelliSense to show quick information about types or members.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Additionally, the XML file can be run through tools like <bpt id="p1">[</bpt>DocFX<ept id="p1">](https://dotnet.github.io/docfx/)</ept> and <bpt id="p2">[</bpt>Sandcastle<ept id="p2">](https://github.com/EWSoftware/SHFB)</ept> to generate API reference websites.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>XML documentation comments, like all other comments, are ignored by the compiler.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can generate the XML file at compile time by doing one of the following:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you are developing an application with .NET Core from the command line, you can add a <bpt id="p1">[</bpt>DocumentationFile element<ept id="p1">](/visualstudio/msbuild/common-msbuild-project-properties)</ept> to the <ph id="ph1">`&lt;PropertyGroup&gt;`</ph> section of your .csproj project file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example generates an XML file in the project directory with the same root filename as the assembly:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can also specify the exact absolute or relative path and name of the XML file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example generates the XML file in the same directory as the debug version of an application:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you are developing an application using Visual Studio, right-click on the project and select <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the properties dialog, select the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> tab, and check <bpt id="p2">**</bpt>XML documentation file<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also change the location to which the compiler writes the file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are compiling a .NET Framework application from the command line, add the <bpt id="p1">[</bpt>/doc compiler option<ept id="p1">](language-reference/compiler-options/doc-compiler-option.md)</ept> when compiling.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>XML documentation comments use triple forward slashes (<ph id="ph1">`///`</ph>) and an XML formatted comment body.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Walkthrough</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Let's walk through documenting a very basic math library to make it easy for new developers to understand/contribute and for third party developers to use.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Here's code for the simple math library:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The sample library supports four major arithmetic operations <ph id="ph1">`add`</ph>, <ph id="ph2">`subtract`</ph>, <ph id="ph3">`multiply`</ph> and <ph id="ph4">`divide`</ph> on <ph id="ph5">`int`</ph> and <ph id="ph6">`double`</ph> data types.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Now you want to be able to create an API reference document from your code for third party developers who use your library but don't have access to the source code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>As mentioned earlier XML documentation tags can be used to achieve this.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You will now be introduced to the standard XML tags the C# compiler supports.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>summary&gt;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;summary&gt;`</ph> tag adds brief information about a type or member.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>I'll demonstrate its use by adding it to the <ph id="ph1">`Math`</ph> class definition and the first <ph id="ph2">`Add`</ph> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Feel free to apply it to the rest of your code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;summary&gt;`</ph> tag is very important, and we recommend that you include it because its content is the primary source of type or member information in IntelliSense or an API reference document.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>remarks&gt;</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;remarks&gt;`</ph> tag supplements the information about types or members that the <ph id="ph2">`&lt;summary&gt;`</ph> tag provides.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this example, you'll just add it to the class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>returns&gt;</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;returns&gt;`</ph> tag describes the return value of a method declaration.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>As before, the following example illustrates the <ph id="ph1">`&lt;returns&gt;`</ph> tag on the first <ph id="ph2">`Add`</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can do the same on other methods.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>value&gt;</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;value&gt;`</ph> tag is similar to the <ph id="ph2">`&lt;returns&gt;`</ph> tag, except that you use it for properties.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Assuming your <ph id="ph1">`Math`</ph> library had a static property called <ph id="ph2">`PI`</ph>, here's how you'd use this tag:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>example&gt;</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`&lt;example&gt;`</ph> tag to include an example in your XML documentation.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This involves using the child <ph id="ph1">`&lt;code&gt;`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`code`</ph> tag preserves line breaks and indentation for longer examples.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>para&gt;</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`&lt;para&gt;`</ph> tag to format the content within its parent tag.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;para&gt;`</ph> is usually used inside a tag, such as <ph id="ph2">`&lt;remarks&gt;`</ph> or <ph id="ph3">`&lt;returns&gt;`</ph>, to divide text into paragraphs.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can format the contents of the <ph id="ph1">`&lt;remarks&gt;`</ph> tag for your class definition.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>c&gt;</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Still on the topic of formatting, you use the <ph id="ph1">`&lt;c&gt;`</ph> tag for marking part of text as code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It's like the <ph id="ph1">`&lt;code&gt;`</ph> tag but inline.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It's useful when you want to show a quick code example as part of a tag's content.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Let's update the documentation for the <ph id="ph1">`Math`</ph> class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>exception&gt;</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>By using the <ph id="ph1">`&lt;exception&gt;`</ph> tag, you let your developers know that a method can throw specific exceptions.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Looking at your <ph id="ph1">`Math`</ph> library, you can see that both <ph id="ph2">`Add`</ph> methods throw an exception if a certain condition is met.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Not so obvious, though, is that integer <ph id="ph1">`Divide`</ph> method throws as well if the <ph id="ph2">`b`</ph> parameter is zero.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Now add exception documentation to this method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cref`</ph> attribute represents a reference to an exception that is available from the current compilation environment.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This can be any type defined in the project or a referenced assembly.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The compiler will issue a warning if its value cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>see&gt;</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;see&gt;`</ph> tag lets you create a clickable link to a documentation page for another code element.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In our next example, we'll create a clickable link between the two <ph id="ph1">`Add`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cref`</ph> is a <bpt id="p1">**</bpt>required<ept id="p1">**</ept> attribute that represents a reference to a type or its member that is available from the current compilation environment.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This can be any type defined in the project or a referenced assembly.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>seealso&gt;</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`&lt;seealso&gt;`</ph> tag in the same way you do the <ph id="ph2">`&lt;see&gt;`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The only difference is that its content is typically placed in a "See Also" section.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Here we'll add a <ph id="ph1">`seealso`</ph> tag on the integer <ph id="ph2">`Add`</ph> method to reference other methods in the class that accept integer parameters:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cref`</ph> attribute represents a reference to a type or its member that is available from the current compilation environment.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This can be any type defined in the project or a referenced assembly.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>param&gt;</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`&lt;param&gt;`</ph> tag to describe a method's parameters.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Here's an example on the double <ph id="ph1">`Add`</ph> method: The parameter the tag describes is specified in the <bpt id="p1">**</bpt>required<ept id="p1">**</ept> <ph id="ph2">`name`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>typeparam&gt;</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">`&lt;typeparam&gt;`</ph> tag just like the <ph id="ph2">`&lt;param&gt;`</ph> tag but for generic type or method declarations to describe a generic parameter.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Add a quick generic method to your <ph id="ph1">`Math`</ph> class to check if one quantity is greater than another.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>paramref&gt;</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Sometimes you might be in the middle of describing what a method does in what could be a <ph id="ph1">`&lt;summary&gt;`</ph> tag, and you might want to make a reference to a parameter.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;paramref&gt;`</ph> tag is great for just this.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Let's update the summary of our double based <ph id="ph1">`Add`</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">`&lt;param&gt;`</ph> tag the parameter name is specified in the <bpt id="p1">**</bpt>required<ept id="p1">**</ept> <ph id="ph2">`name`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>typeparamref&gt;</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">`&lt;typeparamref&gt;`</ph> tag just like the <ph id="ph2">`&lt;paramref&gt;`</ph> tag but for generic type or method declarations to describe a generic parameter.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can use the same generic method you previously created.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>list&gt;</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`&lt;list&gt;`</ph> tag to format documentation information as an ordered list, unordered list or table.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Make an unordered list of every math operation your <ph id="ph1">`Math`</ph> library supports.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can make an ordered list or table by changing the <ph id="ph1">`type`</ph> attribute to <ph id="ph2">`number`</ph> or <ph id="ph3">`table`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Putting it all together</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you've followed this tutorial and applied the tags to your code where necessary, your code should now look similar to the following:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>From your code, you can generate a detailed documentation website complete with clickable cross-references.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>But you're faced with another problem: your code has become hard to read.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>There's so much information to sift through that this is going to be a nightmare for any developer who wants to contribute to this code.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Thankfully there's an XML tag that can help you deal with this:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>include&gt;</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;include&gt;`</ph> tag lets you refer to comments in a separate XML file that describe the types and members in your source code, as opposed to placing documentation comments directly in your source code file.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Now you're going to move all your XML tags into a separate XML file named <ph id="ph1">`docs.xml`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Feel free to name the file whatever you want.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In the above XML, each member's documentation comments appear directly inside a tag named after what they do.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can choose your own strategy.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Now that you have your XML comments in a separate file, let's see how your code can be made more readable by using the <ph id="ph1">`&lt;include&gt;`</ph> tag:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>And there you have it: our code is back to being readable, and no documentation information has been lost.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`file`</ph> attribute represents the name of the XML file containing the documentation.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`path`</ph> attribute represents an <bpt id="p1">[</bpt>XPath<ept id="p1">](../standard/data/xml/xpath-queries-and-namespaces.md)</ept> query to the <ph id="ph2">`tag name`</ph> present in the specified <ph id="ph3">`file`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`name`</ph> attribute represents the name specifier in the tag that precedes the comments.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`id`</ph> attribute which can be used in place of <ph id="ph2">`name`</ph> represents the ID for the tag that precedes the comments.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>User Defined Tags</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>All the tags outlined above represent those that are recognized by the C# compiler.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>However, a user is free to define their own tags.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Tools like Sandcastle bring support for extra tags like <bpt id="p1">[</bpt><ph id="ph1">`&lt;event&gt;`</ph><ept id="p1">](https://ewsoftware.github.io/XMLCommentsGuide/html/81bf7ad3-45dc-452f-90d5-87ce2494a182.htm)</ept>, <bpt id="p2">[</bpt><ph id="ph2">`&lt;note&gt;`</ph><ept id="p2">](https://ewsoftware.github.io/XMLCommentsGuide/html/4302a60f-e4f4-4b8d-a451-5f453c4ebd46.htm)</ept> and even support <bpt id="p3">[</bpt>documenting namespaces<ept id="p3">](https://ewsoftware.github.io/XMLCommentsGuide/html/BD91FAD4-188D-4697-A654-7C07FD47EF31.htm)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Custom or in-house documentation generation tools can also be used with the standard tags and multiple output formats from HTML to PDF can be supported.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Recommendations</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Documenting code is recommended for many reasons.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>What follows are some best practices, general use case scenarios, and things that you should know when using XML documentation tags in your C# code.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For the sake of consistency, all publicly visible types and their members should be documented.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If you must do it, do it all.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Private members can also be documented using XML comments.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>However, this exposes the inner (potentially confidential) workings of your library.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>At a bare minimum, types and their members should have a <ph id="ph1">`&lt;summary&gt;`</ph> tag because its content is needed for IntelliSense.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Documentation text should be written using complete sentences ending with full stops.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Partial classes are fully supported, and documentation information will be concatenated into a single entry for that type.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The compiler verifies the syntax of the <ph id="ph1">`&lt;exception&gt;`</ph>, <ph id="ph2">`&lt;include&gt;`</ph>, <ph id="ph3">`&lt;param&gt;`</ph>, <ph id="ph4">`&lt;see&gt;`</ph>, <ph id="ph5">`&lt;seealso&gt;`</ph> and <ph id="ph6">`&lt;typeparam&gt;`</ph> tags.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The compiler validates the parameters that contain file paths and references to other parts of the code.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Documentation Comments (C# Programming Guide)<ept id="p1">](programming-guide/xmldoc/xml-documentation-comments.md)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Recommended Tags for Documentation Comments (C# Programming Guide)<ept id="p1">](programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>