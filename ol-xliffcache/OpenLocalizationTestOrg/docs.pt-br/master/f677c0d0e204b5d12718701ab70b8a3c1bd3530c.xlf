<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="functional-construction-linq-to-xml.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f677c0d0e204b5d12718701ab70b8a3c1bd3530c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\functional-construction-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49100c56764facd4b96ef3bf17ff6b1adcb64e8f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ab1dea38bebf7d178079b47cc25b120f84e0056</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Functional Construction (LINQ to XML) (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Functional Construction (LINQ to XML) (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides a powerful way to create XML elements called <bpt id="p1">*</bpt>functional construction<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Functional construction is the ability to create an XML tree in a single statement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are several key features of the <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> programming interface that enable functional construction:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor takes various types of arguments for content.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, you can pass another <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object, which becomes a child element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can pass an <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> object, which becomes an attribute of the element.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor takes a <ph id="ph2">`params`</ph> array of type <ph id="ph3">&lt;xref:System.Object&gt;</ph>, so that you can pass any number of objects to the constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This enables you to create an element that has complex content.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If an object implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, the collection in the object is enumerated, and all items in the collection are added.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the collection contains <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects, each item in the collection is added separately.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is important because it lets you pass the results of a <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query to the constructor.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following is an example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These features enable you to write code using XML literals to create an XML tree, and also to write code that uses the results of <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> queries when you create an XML tree:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating XML Trees (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>