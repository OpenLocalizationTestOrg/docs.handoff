{"content":"---\ntitle: \"C# Operators | Microsoft Docs\"\nms.date: \"2017-03-09\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.operators\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"boolean operators [C#]\"\n  - \"expressions [C#], operators\"\n  - \"logical operators [C#]\"\n  - \"operators [C#]\"\n  - \"Visual C#, operators\"\n  - \"indirection operators [C#]\"\n  - \"assignment operators [C#]\"\n  - \"shift operators [C#]\"\n  - \"relational operators [C#]\"\n  - \"bitwise operators [C#]\"\n  - \"address operators [C#]\"\n  - \"keywords [C#], operators\"\n  - \"arithmetic operators [C#]\"\nms.assetid: 0301e31f-22ad-49af-ac3c-d5eae7f0ac43\ncaps.latest.revision: 40\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C# Operators\nC# provides many operators, which are symbols that specify which operations (math, indexing, function call, etc.) to perform in an expression.  You can [overload](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md) many operators to change their meaning when applied to a user-defined type.  \n  \n Operations on integral types (such as `==`, `!=`, `<`, `>`, `&`, `|`) are generally allowed on enumeration (`enum`) types.  \n  \n The sections lists the C# operators starting with the highest precedence to the lowest.  The operators within each section share the same precedence level.  \n  \n## Primary Operators  \n These are the highest precedence operators.  NOTE, you can click on the operators to go the detailed pages with examples.  \n  \n [x.y](../../../csharp/language-reference/operators/member-access-operator.md) – member access.  \n  \n [x?.y](../../../csharp/language-reference/operators/null-conditional-operators.md) – null conditional member access.  Returns `null` if the left-hand operand is `null`.  \n \n [x?[y]](../../../csharp/language-reference/operators/null-conditional-operators.md) - null conditional index access. Returns `null` if the left-hand operand is `null`.\n \n [f(x)](../../../csharp/language-reference/operators/invocation-operator.md) – function invocation.  \n  \n [a&#91;x&#93;](../../../csharp/language-reference/operators/index-operator.md) – aggregate object indexing.  \n   \n [x++](../../../csharp/language-reference/operators/increment-operator.md) – postfix increment.  Returns the value of x and then updates the storage location with the value of x that is one greater (typically adds the integer 1).  \n  \n [x--](../../../csharp/language-reference/operators/decrement-operator.md) –  postfix decrement.  Returns the value of x and then updates the storage location with the value of x that is one less (typically subtracts the integer 1).  \n  \n [new](../../../csharp/language-reference/keywords/new-operator.md) – type instantiation.  \n  \n [typeof](../../../csharp/language-reference/keywords/typeof.md) – returns the System.Type object representing the operand.  \n  \n [checked](../../../csharp/language-reference/keywords/checked.md) – enables overflow checking for integer operations.  \n  \n [unchecked](../../../csharp/language-reference/keywords/unchecked.md) – disables overflow checking for integer operations.  This is the default compiler behavior.  \n  \n [default(T)](../../../csharp/programming-guide/generics/default-keyword-in-generic-code.md) – returns the default initialized value of type T, `null` for reference types, zero for numeric types, and zero/`null` filled in members for struct types.  \n  \n [delegate](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md) – declares and returns a delegate instance.  \n  \n [sizeof](../../../csharp/language-reference/keywords/sizeof.md) – returns the size in bytes of the type operand.  \n  \n [->](../../../csharp/language-reference/operators/dereference-operator.md) – pointer dereferencing combined with member access.  \n  \n## Unary Operators  \n These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  \n  \n [+x](../../../csharp/language-reference/operators/addition-operator.md) – returns the value of x.  \n  \n [-x](../../../csharp/language-reference/operators/subtraction-operator.md) – numeric negation.  \n  \n [!x](../../../csharp/language-reference/operators/logical-negation-operator.md) – logical negation.  \n  \n [~x](../../../csharp/language-reference/operators/bitwise-complement-operator.md) – bitwise complement.  \n  \n [++x](../../../csharp/language-reference/operators/increment-operator.md) – prefix increment.  Returns the value of x after updating the storage location with the value of x that is one greater (typically adds the integer 1).  \n  \n [--x](../../../csharp/language-reference/operators/decrement-operator.md) – prefix decrement.  Returns the value of x after updating the storage location with the value of x that is one less (typically adds the integer 1).  \n  \n [(T)x](../../../csharp/language-reference/operators/invocation-operator.md) – type casting.  \n  \n [await](../../../csharp/language-reference/keywords/await.md) – awaits a `Task`.  \n  \n [&x](../../../csharp/language-reference/operators/and-operator.md) – address of.  \n  \n [*x](../../../csharp/language-reference/operators/multiplication-operator.md) – dereferencing.  \n  \n## Multiplicative Operators  \n These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  \n  \n [x * y](../../../csharp/language-reference/operators/multiplication-operator.md) – multiplication.  \n  \n [x / y](../../../csharp/language-reference/operators/division-operator.md) – division.  If the operands are integers, the result is an integer truncated toward zero (for example, `-7 / 2 is -3`).  \n  \n [x % y](../../../csharp/language-reference/operators/modulus-operator.md) – modulus.  If the operands are integers, this returns the remainder of dividing x by y.  If `q = x / y` and `r = x % y`, then `x = q * y + r`.  \n  \n## Additive Operators  \n These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  \n  \n [x + y](../../../csharp/language-reference/operators/addition-operator.md) – addition.  \n  \n [x – y](../../../csharp/language-reference/operators/subtraction-operator.md) – subtraction.  \n  \n## Shift Operators  \n These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  \n  \n [x <\\<  y](../../../csharp/language-reference/operators/left-shift-operator.md) – shift bits left and fill with zero on the right.  \n  \n [x >> y](../../../csharp/language-reference/operators/right-shift-operator.md) – shift bits right.  If the left operand is `int` or `long`, then left bits are filled with the sign bit.  If the left operand is `uint` or `ulong`, then left bits are filled with zero.  \n  \n## Relational and Type-testing Operators  \n These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  \n  \n [x \\< y](../../../csharp/language-reference/operators/less-than-operator.md) – less than (true if x is less than y).  \n  \n [x > y](../../../csharp/language-reference/operators/greater-than-operator.md) – greater than (true if x is greater than y).  \n  \n [x \\<= y](../../../csharp/language-reference/operators/less-than-equal-operator.md) – less than or equal to.  \n  \n [x >= y](../../../csharp/language-reference/operators/greater-than-equal-operator.md) – greater than or equal to.  \n  \n [is](../../../csharp/language-reference/keywords/is.md) – type compatibility.  Returns true if the evaluated left operand can be cast to the type specified in the right operand (a static type).  \n  \n [as](../../../csharp/language-reference/keywords/as.md) – type conversion.  Returns the left operand cast to the type specified by the right operand (a static type), but `as` returns `null` where `(T)x` would throw an exception.  \n  \n## Equality Operators  \n These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  \n  \n [x == y](../../../csharp/language-reference/operators/equality-comparison-operator.md) – equality.  By default, for reference types other than `string`, this returns reference equality (identity test).  However, types can overload `==`, so if your intent is to test identity, it is best to use the `ReferenceEquals` method on `object`.  \n  \n [x != y](../../../csharp/language-reference/operators/not-equal-operator.md) – not equal.  See comment for `==`.  If a type overloads `==`, then it must overload `!=`.  \n  \n## Logical AND Operator  \n This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  \n  \n [x & y](../../../csharp/language-reference/operators/and-operator.md) – logical or bitwise AND.  Use with integer types and `enum` types is generally allowed.  \n  \n## Logical XOR Operator  \n This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  \n  \n [x ^ y](../../../csharp/language-reference/operators/xor-operator.md) – logical or bitwise XOR.  You can generally use this with integer types and `enum` types.  \n  \n## Logical OR Operator  \n This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  \n  \n [x &#124; y](../../../csharp/language-reference/operators/or-operator.md) – logical or bitwise OR.  Use with integer types and `enum` types is generally allowed.  \n  \n## Conditional AND Operator  \n This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  \n  \n [x && y](../../../csharp/language-reference/operators/conditional-and-operator.md) – logical AND.  If the first operand is false, then C# does not evaluate the second operand.  \n  \n## Conditional OR Operator  \n This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  \n  \n [x &#124;&#124; y](../../../csharp/language-reference/operators/conditional-or-operator.md) – logical OR.  If the first operand is true, then C# does not evaluate the second operand.  \n  \n## Null-coalescing Operator  \n This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  \n  \n [x ?? y](../../../csharp/language-reference/operators/null-conditional-operator.md) – returns `x` if it is non-`null`; otherwise, returns `y`.  \n  \n## Conditional Operator  \n This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  \n  \n [t ? x : y](../../../csharp/language-reference/operators/conditional-operator.md) – if test `t` is true, then evaluate and return `x`; otherwise, evaluate and return `y`.  \n  \n## Assignment and Lambda Operators  \n These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  \n  \n [x = y](../../../csharp/language-reference/operators/assignment-operator.md) – assignment.  \n  \n [x += y](../../../csharp/language-reference/operators/addition-assignment-operator.md) – increment.  Add the value of `y` to the value of `x`, store the result in `x`, and return the new value.  If `x` designates an `event`, then `y` must be an appropriate function that C# adds as an event handler.  \n  \n [x -= y](../../../csharp/language-reference/operators/subtraction-assignment-operator.md) – decrement.  Subtract the value of `y` from the value of `x`, store the result in `x`, and return the new value.  If `x` designates an `event`, then `y` must be an appropriate function that C# removes as an event handler  \n  \n [x *= y](../../../csharp/language-reference/operators/multiplication-assignment-operator.md) – multiplication assignment.  Multiply the value of `y` to the value of `x`, store the result in `x`, and return the new value.  \n  \n [x /= y](../../../csharp/language-reference/operators/division-assignment-operator.md) – division assignment.  Divide the value of `x` by the value of `y`, store the result in `x`, and return the new value.  \n  \n [x %= y](../../../csharp/language-reference/operators/modulus-assignment-operator.md) – modulus assignment.  Divide the value of `x` by the value of `y`, store the remainder in `x`, and return the new value.  \n  \n [x &= y](../../../csharp/language-reference/operators/and-assignment-operator.md) – AND assignment.  AND the value of `y` with the value of `x`, store the result in `x`, and return the new value.  \n  \n [x &#124;= y](../../../csharp/language-reference/operators/or-assignment-operator.md) – OR assignment.  OR the value of `y` with the value of `x`, store the result in `x`, and return the new value.  \n  \n [x ^= y](../../../csharp/language-reference/operators/xor-assignment-operator.md) – XOR assignment.  XOR the value of `y` with the value of `x`, store the result in `x`, and return the new value.  \n  \n [x <<= y](../../../csharp/language-reference/operators/left-shift-assignment-operator.md) – left-shift assignment.  Shift the value of `x` left by `y` places, store the result in `x`, and return the new value.  \n  \n [x >>= y](../../../csharp/language-reference/operators/right-shift-assignment-operator.md) – right-shift assignment.  Shift the value of `x` right by `y` places, store the result in `x`, and return the new value.  \n  \n [=>](../../../csharp/language-reference/operators/lambda-operator.md) – lambda declaration.  \n  \n## Arithmetic Overflow  \n The arithmetic operators ([+](../../../csharp/language-reference/operators/addition-operator.md), [-](../../../csharp/language-reference/operators/subtraction-operator.md), [*](../../../csharp/language-reference/operators/multiplication-operator.md), [/](../../../csharp/language-reference/operators/division-operator.md)) can produce results that are outside the range of possible values for the numeric type involved. You should refer to the section on a particular operator for details, but in general:  \n  \n- Integer arithmetic overflow either throws an <xref:System.OverflowException> or discards the most significant bits of the result. Integer division by zero always throws a @System.DivideByZeroException.  \n\n   When integer overflow occurs, what happens depends on the execution context, which can be [checked or unchecked](../../../csharp/language-reference/keywords/checked-and-unchecked.md). In a checked context, an <xref:System.OverflowException> is thrown. In an unchecked context, the most significant bits of the result are discarded and execution continues. Thus, C# gives you the choice of handling or ignoring overflow. By default, arithmetic operations occur in an *unchecked* context. \n\n   In addition to the arithmetic operations, integral-type to integral-type casts can cause overflow (such as when you cast a [long](../../../csharp/language-reference/keywords/long.md) to an [int](../../../csharp/language-reference/keywords/int.md)), and are subject to checked or unchecked execution. However, bitwise operators and shift operators never cause overflow.  \n   \n-   Floating-point arithmetic overflow or division by zero never throws an exception, because floating-point types are based on IEEE 754 and so have provisions for representing infinity and NaN (Not a Number).  \n  \n-   [Decimal](../../../csharp/language-reference/keywords/decimal.md) arithmetic overflow always throws an <xref:System.OverflowException>. Decimal division by zero always throws a <xref:System.DivideByZeroException>.  \n  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C#](../../../csharp/csharp.md)   \n [Overloadable Operators](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n","nodes":[{"pos":[4,897],"nodes":[{"content":"C# Operators | Microsoft Docs","nodes":[{"pos":[0,29],"content":"C# Operators | Microsoft Docs","nodes":[{"content":"C# Operators | Microsoft Docs","pos":[0,29]}]}],"pos":[6,38],"yaml":true}],"content":"title: \"C# Operators | Microsoft Docs\"\nms.date: \"2017-03-09\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.operators\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"boolean operators [C#]\"\n  - \"expressions [C#], operators\"\n  - \"logical operators [C#]\"\n  - \"operators [C#]\"\n  - \"Visual C#, operators\"\n  - \"indirection operators [C#]\"\n  - \"assignment operators [C#]\"\n  - \"shift operators [C#]\"\n  - \"relational operators [C#]\"\n  - \"bitwise operators [C#]\"\n  - \"address operators [C#]\"\n  - \"keywords [C#], operators\"\n  - \"arithmetic operators [C#]\"\nms.assetid: 0301e31f-22ad-49af-ac3c-d5eae7f0ac43\ncaps.latest.revision: 40\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[904,916],"content":"C# Operators","linkify":"C# Operators","nodes":[{"content":"C# Operators","pos":[0,12]}]},{"content":"C# provides many operators, which are symbols that specify which operations (math, indexing, function call, etc.) to perform in an expression.","pos":[917,1059]},{"content":"You can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md)</ept> many operators to change their meaning when applied to a user-defined type.","pos":[1061,1249],"source":"  You can [overload](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md) many operators to change their meaning when applied to a user-defined type."},{"pos":[1256,1378],"content":"Operations on integral types (such as <ph id=\"ph1\">`==`</ph>, <ph id=\"ph2\">`!=`</ph>, <ph id=\"ph3\">`&lt;`</ph>, <ph id=\"ph4\">`&gt;`</ph>, <ph id=\"ph5\">`&amp;`</ph>, <ph id=\"ph6\">`|`</ph>) are generally allowed on enumeration (<ph id=\"ph7\">`enum`</ph>) types.","source":"Operations on integral types (such as `==`, `!=`, `<`, `>`, `&`, `|`) are generally allowed on enumeration (`enum`) types."},{"content":"The sections lists the C# operators starting with the highest precedence to the lowest.","pos":[1385,1472]},{"content":"The operators within each section share the same precedence level.","pos":[1474,1540]},{"pos":[1549,1566],"content":"Primary Operators","linkify":"Primary Operators","nodes":[{"content":"Primary Operators","pos":[0,17]}]},{"content":"These are the highest precedence operators.","pos":[1570,1613]},{"content":"NOTE, you can click on the operators to go the detailed pages with examples.","pos":[1615,1691]},{"pos":[1698,1792],"content":"<bpt id=\"p1\">[</bpt>x.y<ept id=\"p1\">](../../../csharp/language-reference/operators/member-access-operator.md)</ept> – member access.","source":"[x.y](../../../csharp/language-reference/operators/member-access-operator.md) – member access."},{"content":"<bpt id=\"p1\">[</bpt>x?.y<ept id=\"p1\">](../../../csharp/language-reference/operators/null-conditional-operators.md)</ept> – null conditional member access.","pos":[1799,1915],"source":"[x?.y](../../../csharp/language-reference/operators/null-conditional-operators.md) – null conditional member access."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if the left-hand operand is <ph id=\"ph2\">`null`</ph>.","pos":[1917,1967],"source":"  Returns `null` if the left-hand operand is `null`."},{"content":"<bpt id=\"p1\">[</bpt>x?[y]<ept id=\"p1\">](../../../csharp/language-reference/operators/null-conditional-operators.md)</ept> - null conditional index access.","pos":[1973,2089],"source":"[x?[y]](../../../csharp/language-reference/operators/null-conditional-operators.md) - null conditional index access."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if the left-hand operand is <ph id=\"ph2\">`null`</ph>.","pos":[2090,2140],"source":" Returns `null` if the left-hand operand is `null`."},{"pos":[2144,2242],"content":"<bpt id=\"p1\">[</bpt>f(x)<ept id=\"p1\">](../../../csharp/language-reference/operators/invocation-operator.md)</ept> – function invocation.","source":"[f(x)](../../../csharp/language-reference/operators/invocation-operator.md) – function invocation."},{"pos":[2249,2356],"content":"<bpt id=\"p1\">[</bpt>a&amp;#91;x&amp;#93;<ept id=\"p1\">](../../../csharp/language-reference/operators/index-operator.md)</ept> – aggregate object indexing.","source":"[a&#91;x&#93;](../../../csharp/language-reference/operators/index-operator.md) – aggregate object indexing."},{"content":"<bpt id=\"p1\">[</bpt>x++<ept id=\"p1\">](../../../csharp/language-reference/operators/increment-operator.md)</ept> – postfix increment.","pos":[2364,2458],"source":"[x++](../../../csharp/language-reference/operators/increment-operator.md) – postfix increment."},{"content":"Returns the value of x and then updates the storage location with the value of x that is one greater (typically adds the integer 1).","pos":[2460,2592]},{"content":"<bpt id=\"p1\">[</bpt>x--<ept id=\"p1\">](../../../csharp/language-reference/operators/decrement-operator.md)</ept> –  postfix decrement.","pos":[2599,2694],"source":"[x--](../../../csharp/language-reference/operators/decrement-operator.md) –  postfix decrement."},{"content":"Returns the value of x and then updates the storage location with the value of x that is one less (typically subtracts the integer 1).","pos":[2696,2830]},{"pos":[2837,2925],"content":"<bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../../csharp/language-reference/keywords/new-operator.md)</ept> – type instantiation.","source":"[new](../../../csharp/language-reference/keywords/new-operator.md) – type instantiation."},{"pos":[2932,3054],"content":"<bpt id=\"p1\">[</bpt>typeof<ept id=\"p1\">](../../../csharp/language-reference/keywords/typeof.md)</ept> – returns the System.Type object representing the operand.","source":"[typeof](../../../csharp/language-reference/keywords/typeof.md) – returns the System.Type object representing the operand."},{"pos":[3061,3178],"content":"<bpt id=\"p1\">[</bpt>checked<ept id=\"p1\">](../../../csharp/language-reference/keywords/checked.md)</ept> – enables overflow checking for integer operations.","source":"[checked](../../../csharp/language-reference/keywords/checked.md) – enables overflow checking for integer operations."},{"content":"<bpt id=\"p1\">[</bpt>unchecked<ept id=\"p1\">](../../../csharp/language-reference/keywords/unchecked.md)</ept> – disables overflow checking for integer operations.","pos":[3185,3307],"source":"[unchecked](../../../csharp/language-reference/keywords/unchecked.md) – disables overflow checking for integer operations."},{"content":"This is the default compiler behavior.","pos":[3309,3347]},{"pos":[3354,3600],"content":"<bpt id=\"p1\">[</bpt>default(T)<ept id=\"p1\">](../../../csharp/programming-guide/generics/default-keyword-in-generic-code.md)</ept> – returns the default initialized value of type T, <ph id=\"ph1\">`null`</ph> for reference types, zero for numeric types, and zero/<ph id=\"ph2\">`null`</ph> filled in members for struct types.","source":"[default(T)](../../../csharp/programming-guide/generics/default-keyword-in-generic-code.md) – returns the default initialized value of type T, `null` for reference types, zero for numeric types, and zero/`null` filled in members for struct types."},{"pos":[3607,3750],"content":"<bpt id=\"p1\">[</bpt>delegate<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept> – declares and returns a delegate instance.","source":"[delegate](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md) – declares and returns a delegate instance."},{"pos":[3757,3869],"content":"<bpt id=\"p1\">[</bpt>sizeof<ept id=\"p1\">](../../../csharp/language-reference/keywords/sizeof.md)</ept> – returns the size in bytes of the type operand.","source":"[sizeof](../../../csharp/language-reference/keywords/sizeof.md) – returns the size in bytes of the type operand."},{"pos":[3876,4003],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">-&gt;</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/dereference-operator.md)</ept> – pointer dereferencing combined with member access.","source":"[->](../../../csharp/language-reference/operators/dereference-operator.md) – pointer dereferencing combined with member access."},{"pos":[4012,4027],"content":"Unary Operators","linkify":"Unary Operators","nodes":[{"content":"Unary Operators","pos":[0,15]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[4031,4139]},{"content":"NOTE, you can click on the operators to go the detailed pages with examples.","pos":[4141,4217]},{"pos":[4224,4321],"content":"<bpt id=\"p1\">[</bpt>+x<ept id=\"p1\">](../../../csharp/language-reference/operators/addition-operator.md)</ept> – returns the value of x.","source":"[+x](../../../csharp/language-reference/operators/addition-operator.md) – returns the value of x."},{"pos":[4328,4422],"content":"<bpt id=\"p1\">[</bpt>-x<ept id=\"p1\">](../../../csharp/language-reference/operators/subtraction-operator.md)</ept> – numeric negation.","source":"[-x](../../../csharp/language-reference/operators/subtraction-operator.md) – numeric negation."},{"pos":[4429,4528],"content":"<bpt id=\"p1\">[</bpt>!x<ept id=\"p1\">](../../../csharp/language-reference/operators/logical-negation-operator.md)</ept> – logical negation.","source":"[!x](../../../csharp/language-reference/operators/logical-negation-operator.md) – logical negation."},{"pos":[4535,4638],"content":"<bpt id=\"p1\">[</bpt>~x<ept id=\"p1\">](../../../csharp/language-reference/operators/bitwise-complement-operator.md)</ept> – bitwise complement.","source":"[~x](../../../csharp/language-reference/operators/bitwise-complement-operator.md) – bitwise complement."},{"content":"<bpt id=\"p1\">[</bpt>++x<ept id=\"p1\">](../../../csharp/language-reference/operators/increment-operator.md)</ept> – prefix increment.","pos":[4645,4738],"source":"[++x](../../../csharp/language-reference/operators/increment-operator.md) – prefix increment."},{"content":"Returns the value of x after updating the storage location with the value of x that is one greater (typically adds the integer 1).","pos":[4740,4870]},{"content":"<bpt id=\"p1\">[</bpt>--x<ept id=\"p1\">](../../../csharp/language-reference/operators/decrement-operator.md)</ept> – prefix decrement.","pos":[4877,4970],"source":"[--x](../../../csharp/language-reference/operators/decrement-operator.md) – prefix decrement."},{"content":"Returns the value of x after updating the storage location with the value of x that is one less (typically adds the integer 1).","pos":[4972,5099]},{"pos":[5106,5197],"content":"<bpt id=\"p1\">[</bpt>(T)x<ept id=\"p1\">](../../../csharp/language-reference/operators/invocation-operator.md)</ept> – type casting.","source":"[(T)x](../../../csharp/language-reference/operators/invocation-operator.md) – type casting."},{"pos":[5204,5284],"content":"<bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](../../../csharp/language-reference/keywords/await.md)</ept> – awaits a <ph id=\"ph1\">`Task`</ph>.","source":"[await](../../../csharp/language-reference/keywords/await.md) – awaits a `Task`."},{"pos":[5291,5371],"content":"<bpt id=\"p1\">[</bpt>&amp;x<ept id=\"p1\">](../../../csharp/language-reference/operators/and-operator.md)</ept> – address of.","source":"[&x](../../../csharp/language-reference/operators/and-operator.md) – address of."},{"pos":[5378,5472],"content":"<bpt id=\"p1\">[</bpt>*x<ept id=\"p1\">](../../../csharp/language-reference/operators/multiplication-operator.md)</ept> – dereferencing.","source":"[*x](../../../csharp/language-reference/operators/multiplication-operator.md) – dereferencing."},{"pos":[5481,5505],"content":"Multiplicative Operators","linkify":"Multiplicative Operators","nodes":[{"content":"Multiplicative Operators","pos":[0,24]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[5509,5617]},{"content":"NOTE, you can click on the operators to go the detailed pages with examples.","pos":[5619,5695]},{"pos":[5702,5800],"content":"<bpt id=\"p1\">[</bpt>x * y<ept id=\"p1\">](../../../csharp/language-reference/operators/multiplication-operator.md)</ept> – multiplication.","source":"[x * y](../../../csharp/language-reference/operators/multiplication-operator.md) – multiplication."},{"content":"<bpt id=\"p1\">[</bpt>x / y<ept id=\"p1\">](../../../csharp/language-reference/operators/division-operator.md)</ept> – division.","pos":[5807,5893],"source":"[x / y](../../../csharp/language-reference/operators/division-operator.md) – division."},{"content":"If the operands are integers, the result is an integer truncated toward zero (for example, <ph id=\"ph1\">`-7 / 2 is -3`</ph>).","pos":[5895,6002],"source":"  If the operands are integers, the result is an integer truncated toward zero (for example, `-7 / 2 is -3`)."},{"content":"<bpt id=\"p1\">[</bpt>x % y<ept id=\"p1\">](../../../csharp/language-reference/operators/modulus-operator.md)</ept> – modulus.","pos":[6009,6093],"source":"[x % y](../../../csharp/language-reference/operators/modulus-operator.md) – modulus."},{"content":"If the operands are integers, this returns the remainder of dividing x by y.","pos":[6095,6171]},{"content":"If <ph id=\"ph1\">`q = x / y`</ph> and <ph id=\"ph2\">`r = x % y`</ph>, then <ph id=\"ph3\">`x = q * y + r`</ph>.","pos":[6173,6226],"source":"  If `q = x / y` and `r = x % y`, then `x = q * y + r`."},{"pos":[6235,6253],"content":"Additive Operators","linkify":"Additive Operators","nodes":[{"content":"Additive Operators","pos":[0,18]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[6257,6365]},{"content":"NOTE, you can click on the operators to go the detailed pages with examples.","pos":[6367,6443]},{"pos":[6450,6536],"content":"<bpt id=\"p1\">[</bpt>x + y<ept id=\"p1\">](../../../csharp/language-reference/operators/addition-operator.md)</ept> – addition.","source":"[x + y](../../../csharp/language-reference/operators/addition-operator.md) – addition."},{"pos":[6543,6635],"content":"<bpt id=\"p1\">[</bpt>x – y<ept id=\"p1\">](../../../csharp/language-reference/operators/subtraction-operator.md)</ept> – subtraction.","source":"[x – y](../../../csharp/language-reference/operators/subtraction-operator.md) – subtraction."},{"pos":[6644,6659],"content":"Shift Operators","linkify":"Shift Operators","nodes":[{"content":"Shift Operators","pos":[0,15]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[6663,6771]},{"content":"NOTE, you can click on the operators to go the detailed pages with examples.","pos":[6773,6849]},{"pos":[6856,6986],"content":"<bpt id=\"p1\">[</bpt>x &lt;<ph id=\"ph1\">\\&lt;</ph>  y<ept id=\"p1\">](../../../csharp/language-reference/operators/left-shift-operator.md)</ept> – shift bits left and fill with zero on the right.","source":"[x <\\<  y](../../../csharp/language-reference/operators/left-shift-operator.md) – shift bits left and fill with zero on the right."},{"content":"<bpt id=\"p1\">[</bpt>x &gt;&gt; y<ept id=\"p1\">](../../../csharp/language-reference/operators/right-shift-operator.md)</ept> – shift bits right.","pos":[6993,7091],"source":"[x >> y](../../../csharp/language-reference/operators/right-shift-operator.md) – shift bits right."},{"content":"If the left operand is <ph id=\"ph1\">`int`</ph> or <ph id=\"ph2\">`long`</ph>, then left bits are filled with the sign bit.","pos":[7093,7177],"source":"  If the left operand is `int` or `long`, then left bits are filled with the sign bit."},{"content":"If the left operand is <ph id=\"ph1\">`uint`</ph> or <ph id=\"ph2\">`ulong`</ph>, then left bits are filled with zero.","pos":[7179,7257],"source":"  If the left operand is `uint` or `ulong`, then left bits are filled with zero."},{"pos":[7266,7303],"content":"Relational and Type-testing Operators","linkify":"Relational and Type-testing Operators","nodes":[{"content":"Relational and Type-testing Operators","pos":[0,37]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[7307,7415]},{"content":"NOTE, you can click on the operators to go the detailed pages with examples.","pos":[7417,7493]},{"pos":[7500,7616],"content":"<bpt id=\"p1\">[</bpt>x <ph id=\"ph1\">\\&lt;</ph> y<ept id=\"p1\">](../../../csharp/language-reference/operators/less-than-operator.md)</ept> – less than (true if x is less than y).","source":"[x \\< y](../../../csharp/language-reference/operators/less-than-operator.md) – less than (true if x is less than y)."},{"pos":[7623,7747],"content":"<bpt id=\"p1\">[</bpt>x &gt; y<ept id=\"p1\">](../../../csharp/language-reference/operators/greater-than-operator.md)</ept> – greater than (true if x is greater than y).","source":"[x > y](../../../csharp/language-reference/operators/greater-than-operator.md) – greater than (true if x is greater than y)."},{"pos":[7754,7862],"content":"<bpt id=\"p1\">[</bpt>x <ph id=\"ph1\">\\&lt;</ph>= y<ept id=\"p1\">](../../../csharp/language-reference/operators/less-than-equal-operator.md)</ept> – less than or equal to.","source":"[x \\<= y](../../../csharp/language-reference/operators/less-than-equal-operator.md) – less than or equal to."},{"pos":[7869,7982],"content":"<bpt id=\"p1\">[</bpt>x &gt;= y<ept id=\"p1\">](../../../csharp/language-reference/operators/greater-than-equal-operator.md)</ept> – greater than or equal to.","source":"[x >= y](../../../csharp/language-reference/operators/greater-than-equal-operator.md) – greater than or equal to."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../../../csharp/language-reference/keywords/is.md)</ept> – type compatibility.","pos":[7989,8066],"source":"[is](../../../csharp/language-reference/keywords/is.md) – type compatibility."},{"content":"Returns true if the evaluated left operand can be cast to the type specified in the right operand (a static type).","pos":[8068,8182]},{"content":"<bpt id=\"p1\">[</bpt>as<ept id=\"p1\">](../../../csharp/language-reference/keywords/as.md)</ept> – type conversion.","pos":[8189,8263],"source":"[as](../../../csharp/language-reference/keywords/as.md) – type conversion."},{"content":"Returns the left operand cast to the type specified by the right operand (a static type), but <ph id=\"ph1\">`as`</ph> returns <ph id=\"ph2\">`null`</ph> where <ph id=\"ph3\">`(T)x`</ph> would throw an exception.","pos":[8265,8417],"source":"  Returns the left operand cast to the type specified by the right operand (a static type), but `as` returns `null` where `(T)x` would throw an exception."},{"pos":[8426,8444],"content":"Equality Operators","linkify":"Equality Operators","nodes":[{"content":"Equality Operators","pos":[0,18]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[8448,8556]},{"content":"NOTE, you can click on the operators to go the detailed pages with examples.","pos":[8558,8634]},{"content":"<bpt id=\"p1\">[</bpt>x == y<ept id=\"p1\">](../../../csharp/language-reference/operators/equality-comparison-operator.md)</ept> – equality.","pos":[8641,8739],"source":"[x == y](../../../csharp/language-reference/operators/equality-comparison-operator.md) – equality."},{"content":"By default, for reference types other than <ph id=\"ph1\">`string`</ph>, this returns reference equality (identity test).","pos":[8741,8842],"source":"  By default, for reference types other than `string`, this returns reference equality (identity test)."},{"content":"However, types can overload <ph id=\"ph1\">`==`</ph>, so if your intent is to test identity, it is best to use the <ph id=\"ph2\">`ReferenceEquals`</ph> method on <ph id=\"ph3\">`object`</ph>.","pos":[8844,8976],"source":"  However, types can overload `==`, so if your intent is to test identity, it is best to use the `ReferenceEquals` method on `object`."},{"content":"<bpt id=\"p1\">[</bpt>x != y<ept id=\"p1\">](../../../csharp/language-reference/operators/not-equal-operator.md)</ept> – not equal.","pos":[8983,9072],"source":"[x != y](../../../csharp/language-reference/operators/not-equal-operator.md) – not equal."},{"content":"See comment for <ph id=\"ph1\">`==`</ph>.","pos":[9074,9095],"source":"  See comment for `==`."},{"content":"If a type overloads <ph id=\"ph1\">`==`</ph>, then it must overload <ph id=\"ph2\">`!=`</ph>.","pos":[9097,9150],"source":"  If a type overloads `==`, then it must overload `!=`."},{"pos":[9159,9179],"content":"Logical AND Operator","linkify":"Logical AND Operator","nodes":[{"content":"Logical AND Operator","pos":[0,20]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[9183,9288]},{"content":"NOTE, you can click on the operator to go the details page with examples.","pos":[9290,9363]},{"content":"<bpt id=\"p1\">[</bpt>x &amp; y<ept id=\"p1\">](../../../csharp/language-reference/operators/and-operator.md)</ept> – logical or bitwise AND.","pos":[9370,9465],"source":"[x & y](../../../csharp/language-reference/operators/and-operator.md) – logical or bitwise AND."},{"content":"Use with integer types and <ph id=\"ph1\">`enum`</ph> types is generally allowed.","pos":[9467,9528],"source":"  Use with integer types and `enum` types is generally allowed."},{"pos":[9537,9557],"content":"Logical XOR Operator","linkify":"Logical XOR Operator","nodes":[{"content":"Logical XOR Operator","pos":[0,20]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[9561,9666]},{"content":"NOTE, you can click on the operator to go the details page with examples.","pos":[9668,9741]},{"content":"<bpt id=\"p1\">[</bpt>x ^ y<ept id=\"p1\">](../../../csharp/language-reference/operators/xor-operator.md)</ept> – logical or bitwise XOR.","pos":[9748,9843],"source":"[x ^ y](../../../csharp/language-reference/operators/xor-operator.md) – logical or bitwise XOR."},{"content":"You can generally use this with integer types and <ph id=\"ph1\">`enum`</ph> types.","pos":[9845,9908],"source":"  You can generally use this with integer types and `enum` types."},{"pos":[9917,9936],"content":"Logical OR Operator","linkify":"Logical OR Operator","nodes":[{"content":"Logical OR Operator","pos":[0,19]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[9940,10045]},{"content":"NOTE, you can click on the operator to go the details page with examples.","pos":[10047,10120]},{"content":"<bpt id=\"p1\">[</bpt>x &amp;#124; y<ept id=\"p1\">](../../../csharp/language-reference/operators/or-operator.md)</ept> – logical or bitwise OR.","pos":[10127,10225],"source":"[x &#124; y](../../../csharp/language-reference/operators/or-operator.md) – logical or bitwise OR."},{"content":"Use with integer types and <ph id=\"ph1\">`enum`</ph> types is generally allowed.","pos":[10227,10288],"source":"  Use with integer types and `enum` types is generally allowed."},{"pos":[10297,10321],"content":"Conditional AND Operator","linkify":"Conditional AND Operator","nodes":[{"content":"Conditional AND Operator","pos":[0,24]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[10325,10430]},{"content":"NOTE, you can click on the operator to go the details page with examples.","pos":[10432,10505]},{"content":"<bpt id=\"p1\">[</bpt>x &amp;&amp; y<ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept> – logical AND.","pos":[10512,10609],"source":"[x && y](../../../csharp/language-reference/operators/conditional-and-operator.md) – logical AND."},{"content":"If the first operand is false, then C# does not evaluate the second operand.","pos":[10611,10687]},{"pos":[10696,10719],"content":"Conditional OR Operator","linkify":"Conditional OR Operator","nodes":[{"content":"Conditional OR Operator","pos":[0,23]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[10723,10828]},{"content":"NOTE, you can click on the operator to go the details page with examples.","pos":[10830,10903]},{"content":"<bpt id=\"p1\">[</bpt>x &amp;#124;&amp;#124; y<ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept> – logical OR.","pos":[10910,11015],"source":"[x &#124;&#124; y](../../../csharp/language-reference/operators/conditional-or-operator.md) – logical OR."},{"content":"If the first operand is true, then C# does not evaluate the second operand.","pos":[11017,11092]},{"pos":[11101,11125],"content":"Null-coalescing Operator","linkify":"Null-coalescing Operator","nodes":[{"content":"Null-coalescing Operator","pos":[0,24]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[11129,11234]},{"content":"NOTE, you can click on the operator to go the details page with examples.","pos":[11236,11309]},{"pos":[11316,11458],"content":"<bpt id=\"p1\">[</bpt>x ?? y<ept id=\"p1\">](../../../csharp/language-reference/operators/null-conditional-operator.md)</ept> – returns <ph id=\"ph1\">`x`</ph> if it is non-<ph id=\"ph2\">`null`</ph>; otherwise, returns <ph id=\"ph3\">`y`</ph>.","source":"[x ?? y](../../../csharp/language-reference/operators/null-conditional-operator.md) – returns `x` if it is non-`null`; otherwise, returns `y`."},{"pos":[11467,11487],"content":"Conditional Operator","linkify":"Conditional Operator","nodes":[{"content":"Conditional Operator","pos":[0,20]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[11491,11596]},{"content":"NOTE, you can click on the operator to go the details page with examples.","pos":[11598,11671]},{"pos":[11678,11848],"content":"<bpt id=\"p1\">[</bpt>t ? x : y<ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-operator.md)</ept> – if test <ph id=\"ph1\">`t`</ph> is true, then evaluate and return <ph id=\"ph2\">`x`</ph>; otherwise, evaluate and return <ph id=\"ph3\">`y`</ph>.","source":"[t ? x : y](../../../csharp/language-reference/operators/conditional-operator.md) – if test `t` is true, then evaluate and return `x`; otherwise, evaluate and return `y`."},{"pos":[11857,11888],"content":"Assignment and Lambda Operators","linkify":"Assignment and Lambda Operators","nodes":[{"content":"Assignment and Lambda Operators","pos":[0,31]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[11892,12000]},{"content":"NOTE, you can click on the operators to go the detailed pages with examples.","pos":[12002,12078]},{"pos":[12085,12175],"content":"<bpt id=\"p1\">[</bpt>x = y<ept id=\"p1\">](../../../csharp/language-reference/operators/assignment-operator.md)</ept> – assignment.","source":"[x = y](../../../csharp/language-reference/operators/assignment-operator.md) – assignment."},{"content":"<bpt id=\"p1\">[</bpt>x += y<ept id=\"p1\">](../../../csharp/language-reference/operators/addition-assignment-operator.md)</ept> – increment.","pos":[12182,12281],"source":"[x += y](../../../csharp/language-reference/operators/addition-assignment-operator.md) – increment."},{"content":"Add the value of <ph id=\"ph1\">`y`</ph> to the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[12283,12375],"source":"  Add the value of `y` to the value of `x`, store the result in `x`, and return the new value."},{"content":"If <ph id=\"ph1\">`x`</ph> designates an <ph id=\"ph2\">`event`</ph>, then <ph id=\"ph3\">`y`</ph> must be an appropriate function that C# adds as an event handler.","pos":[12377,12481],"source":"  If `x` designates an `event`, then `y` must be an appropriate function that C# adds as an event handler."},{"content":"<bpt id=\"p1\">[</bpt>x -= y<ept id=\"p1\">](../../../csharp/language-reference/operators/subtraction-assignment-operator.md)</ept> – decrement.","pos":[12488,12590],"source":"[x -= y](../../../csharp/language-reference/operators/subtraction-assignment-operator.md) – decrement."},{"content":"Subtract the value of <ph id=\"ph1\">`y`</ph> from the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[12592,12691],"source":"  Subtract the value of `y` from the value of `x`, store the result in `x`, and return the new value."},{"content":"If <ph id=\"ph1\">`x`</ph> designates an <ph id=\"ph2\">`event`</ph>, then <ph id=\"ph3\">`y`</ph> must be an appropriate function that C# removes as an event handler","pos":[12693,12799],"source":"  If `x` designates an `event`, then `y` must be an appropriate function that C# removes as an event handler"},{"content":"<bpt id=\"p1\">[</bpt>x *= y<ept id=\"p1\">](../../../csharp/language-reference/operators/multiplication-assignment-operator.md)</ept> – multiplication assignment.","pos":[12806,12927],"source":"[x *= y](../../../csharp/language-reference/operators/multiplication-assignment-operator.md) – multiplication assignment."},{"content":"Multiply the value of <ph id=\"ph1\">`y`</ph> to the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[12929,13026],"source":"  Multiply the value of `y` to the value of `x`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x /= y<ept id=\"p1\">](../../../csharp/language-reference/operators/division-assignment-operator.md)</ept> – division assignment.","pos":[13033,13142],"source":"[x /= y](../../../csharp/language-reference/operators/division-assignment-operator.md) – division assignment."},{"content":"Divide the value of <ph id=\"ph1\">`x`</ph> by the value of <ph id=\"ph2\">`y`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[13144,13239],"source":"  Divide the value of `x` by the value of `y`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x %= y<ept id=\"p1\">](../../../csharp/language-reference/operators/modulus-assignment-operator.md)</ept> – modulus assignment.","pos":[13246,13353],"source":"[x %= y](../../../csharp/language-reference/operators/modulus-assignment-operator.md) – modulus assignment."},{"content":"Divide the value of <ph id=\"ph1\">`x`</ph> by the value of <ph id=\"ph2\">`y`</ph>, store the remainder in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[13355,13453],"source":"  Divide the value of `x` by the value of `y`, store the remainder in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x &amp;= y<ept id=\"p1\">](../../../csharp/language-reference/operators/and-assignment-operator.md)</ept> – AND assignment.","pos":[13460,13559],"source":"[x &= y](../../../csharp/language-reference/operators/and-assignment-operator.md) – AND assignment."},{"content":"AND the value of <ph id=\"ph1\">`y`</ph> with the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[13561,13655],"source":"  AND the value of `y` with the value of `x`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x &amp;#124;= y<ept id=\"p1\">](../../../csharp/language-reference/operators/or-assignment-operator.md)</ept> – OR assignment.","pos":[13662,13764],"source":"[x &#124;= y](../../../csharp/language-reference/operators/or-assignment-operator.md) – OR assignment."},{"content":"OR the value of <ph id=\"ph1\">`y`</ph> with the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[13766,13859],"source":"  OR the value of `y` with the value of `x`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x ^= y<ept id=\"p1\">](../../../csharp/language-reference/operators/xor-assignment-operator.md)</ept> – XOR assignment.","pos":[13866,13965],"source":"[x ^= y](../../../csharp/language-reference/operators/xor-assignment-operator.md) – XOR assignment."},{"content":"XOR the value of <ph id=\"ph1\">`y`</ph> with the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[13967,14061],"source":"  XOR the value of `y` with the value of `x`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x &lt;&lt;= y<ept id=\"p1\">](../../../csharp/language-reference/operators/left-shift-assignment-operator.md)</ept> – left-shift assignment.","pos":[14068,14182],"source":"[x <<= y](../../../csharp/language-reference/operators/left-shift-assignment-operator.md) – left-shift assignment."},{"content":"Shift the value of <ph id=\"ph1\">`x`</ph> left by <ph id=\"ph2\">`y`</ph> places, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[14184,14277],"source":"  Shift the value of `x` left by `y` places, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x &gt;&gt;= y<ept id=\"p1\">](../../../csharp/language-reference/operators/right-shift-assignment-operator.md)</ept> – right-shift assignment.","pos":[14284,14400],"source":"[x >>= y](../../../csharp/language-reference/operators/right-shift-assignment-operator.md) – right-shift assignment."},{"content":"Shift the value of <ph id=\"ph1\">`x`</ph> right by <ph id=\"ph2\">`y`</ph> places, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[14402,14496],"source":"  Shift the value of `x` right by `y` places, store the result in `x`, and return the new value."},{"pos":[14503,14594],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">=&gt;</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/lambda-operator.md)</ept> – lambda declaration.","source":"[=>](../../../csharp/language-reference/operators/lambda-operator.md) – lambda declaration."},{"pos":[14603,14622],"content":"Arithmetic Overflow","linkify":"Arithmetic Overflow","nodes":[{"content":"Arithmetic Overflow","pos":[0,19]}]},{"content":"The arithmetic operators (<bpt id=\"p1\">[</bpt><ph id=\"ph1\">+</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/addition-operator.md)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph2\">-</ph><ept id=\"p2\">](../../../csharp/language-reference/operators/subtraction-operator.md)</ept>, <bpt id=\"p3\">[</bpt><ph id=\"ph3\">*</ph><ept id=\"p3\">](../../../csharp/language-reference/operators/multiplication-operator.md)</ept>, <bpt id=\"p4\">[</bpt><ph id=\"ph4\">/</ph><ept id=\"p4\">](../../../csharp/language-reference/operators/division-operator.md)</ept>) can produce results that are outside the range of possible values for the numeric type involved.","pos":[14626,15045],"source":"The arithmetic operators ([+](../../../csharp/language-reference/operators/addition-operator.md), [-](../../../csharp/language-reference/operators/subtraction-operator.md), [*](../../../csharp/language-reference/operators/multiplication-operator.md), [/](../../../csharp/language-reference/operators/division-operator.md)) can produce results that are outside the range of possible values for the numeric type involved."},{"content":"You should refer to the section on a particular operator for details, but in general:","pos":[15046,15131]},{"content":"Integer arithmetic overflow either throws an <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph> or discards the most significant bits of the result.","pos":[15139,15268],"source":"Integer arithmetic overflow either throws an <xref:System.OverflowException> or discards the most significant bits of the result."},{"content":"Integer division by zero always throws a <ph id=\"ph1\">@System.DivideByZeroException</ph>.","pos":[15269,15340],"source":" Integer division by zero always throws a @System.DivideByZeroException."},{"content":"When integer overflow occurs, what happens depends on the execution context, which can be <bpt id=\"p1\">[</bpt>checked or unchecked<ept id=\"p1\">](../../../csharp/language-reference/keywords/checked-and-unchecked.md)</ept>.","pos":[15347,15530],"source":"When integer overflow occurs, what happens depends on the execution context, which can be [checked or unchecked](../../../csharp/language-reference/keywords/checked-and-unchecked.md)."},{"content":"In a checked context, an <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph> is thrown.","pos":[15531,15598],"source":" In a checked context, an <xref:System.OverflowException> is thrown."},{"content":"In an unchecked context, the most significant bits of the result are discarded and execution continues.","pos":[15599,15702]},{"content":"Thus, C# gives you the choice of handling or ignoring overflow.","pos":[15703,15766]},{"content":"By default, arithmetic operations occur in an <bpt id=\"p1\">*</bpt>unchecked<ept id=\"p1\">*</ept> context.","pos":[15767,15833],"source":" By default, arithmetic operations occur in an *unchecked* context."},{"content":"In addition to the arithmetic operations, integral-type to integral-type casts can cause overflow (such as when you cast a <bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept> to an <bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../csharp/language-reference/keywords/int.md)</ept>), and are subject to checked or unchecked execution.","pos":[15839,16138],"source":"In addition to the arithmetic operations, integral-type to integral-type casts can cause overflow (such as when you cast a [long](../../../csharp/language-reference/keywords/long.md) to an [int](../../../csharp/language-reference/keywords/int.md)), and are subject to checked or unchecked execution."},{"content":"However, bitwise operators and shift operators never cause overflow.","pos":[16139,16207]},{"content":"Floating-point arithmetic overflow or division by zero never throws an exception, because floating-point types are based on IEEE 754 and so have provisions for representing infinity and NaN (Not a Number).","pos":[16218,16423]},{"content":"<bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](../../../csharp/language-reference/keywords/decimal.md)</ept> arithmetic overflow always throws an <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph>.","pos":[16433,16568],"source":"[Decimal](../../../csharp/language-reference/keywords/decimal.md) arithmetic overflow always throws an <xref:System.OverflowException>."},{"content":"Decimal division by zero always throws a <ph id=\"ph1\">&lt;xref:System.DivideByZeroException&gt;</ph>.","pos":[16569,16646],"source":" Decimal division by zero always throws a <xref:System.DivideByZeroException>."},{"pos":[16658,16666],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[16670,16730],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[16734,16801],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](../../../csharp/csharp.md)</ept><ph id=\"ph1\"> </ph>","pos":[16805,16837],"source":"[C#](../../../csharp/csharp.md) "},{"content":"<bpt id=\"p1\">[</bpt>Overloadable Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[16841,16960],"source":"[Overloadable Operators](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","pos":[16964,17031],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"}]}