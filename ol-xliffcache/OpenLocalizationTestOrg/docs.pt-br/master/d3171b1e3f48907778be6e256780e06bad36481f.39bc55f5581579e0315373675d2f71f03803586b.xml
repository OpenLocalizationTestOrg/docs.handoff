{"content":"---\ntitle: \"Differences Between C++ Templates and C# Generics (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"generics [C#], vs. C++ templates\"\nms.assetid: 1da6beeb-d4a4-4da0-87b7-0cfbe04920b7\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Differences Between C++ Templates and C# Generics (C# Programming Guide)\nC# Generics and C++ templates are both language features that provide support for parameterized types. However, there are many differences between the two. At the syntax level, C# generics are a simpler approach to parameterized types without the complexity of C++ templates. In addition, C# does not attempt to provide all of the functionality that C++ templates provide. At the implementation level, the primary difference is that C# generic type substitutions are performed at runtime and generic type information is thereby preserved for instantiated objects. For more information, see [Generics in the Run Time](../../../csharp/programming-guide/generics/generics-in-the-run-time.md).  \n  \n The following are the key differences between C# Generics and C++ templates:  \n  \n-   C# generics do not provide the same amount of flexibility as C++ templates. For example, it is not possible to call arithmetic operators in a C# generic class, although it is possible to call user defined operators.  \n  \n-   C# does not allow non-type template parameters, such as `template C<int i> {}`.  \n  \n-   C# does not support explicit specialization; that is, a custom implementation of a template for a specific type.  \n  \n-   C# does not support partial specialization: a custom implementation for a subset of the type arguments.  \n  \n-   C# does not allow the type parameter to be used as the base class for the generic type.  \n  \n-   C# does not allow type parameters to have default types.  \n  \n-   In C#, a generic type parameter cannot itself be a generic, although constructed types can be used as generics. C++ does allow template parameters.  \n  \n-   C++ allows code that might not be valid for all type parameters in the template, which is then checked for the specific type used as the type parameter. C# requires code in a class to be written in such a way that it will work with any type that satisfies the constraints. For example, in C++ it is possible to write a function that uses the arithmetic operators `+` and `-` on objects of the type parameter, which will produce an error at the time of instantiation of the template with a type that does not support these operators. C# disallows this; the only language constructs allowed are those that can be deduced from the constraints.  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md)   \n [Templates](https://docs.microsoft.com/cpp/cpp/templates-cpp)","nodes":[{"pos":[12,101],"content":"Differences Between C++ Templates and C# Generics (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Differences Between C++ Templates and C# Generics (C# Programming Guide) | Microsoft Docs","pos":[0,89]}]},{"pos":[590,662],"content":"Differences Between C++ Templates and C# Generics (C# Programming Guide)","linkify":"Differences Between C++ Templates and C# Generics (C# Programming Guide)","nodes":[{"content":"Differences Between C++ Templates and C# Generics (C# Programming Guide)","pos":[0,72]}]},{"content":"C# Generics and C++ templates are both language features that provide support for parameterized types.","pos":[663,765]},{"content":"However, there are many differences between the two.","pos":[766,818]},{"content":"At the syntax level, C# generics are a simpler approach to parameterized types without the complexity of C++ templates.","pos":[819,938]},{"content":"In addition, C# does not attempt to provide all of the functionality that C++ templates provide.","pos":[939,1035]},{"content":"At the implementation level, the primary difference is that C# generic type substitutions are performed at runtime and generic type information is thereby preserved for instantiated objects.","pos":[1036,1226]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generics in the Run Time<ept id=\"p1\">](../../../csharp/programming-guide/generics/generics-in-the-run-time.md)</ept>.","pos":[1227,1352],"source":" For more information, see [Generics in the Run Time](../../../csharp/programming-guide/generics/generics-in-the-run-time.md)."},{"content":"The following are the key differences between C# Generics and C++ templates:","pos":[1359,1435]},{"content":"C# generics do not provide the same amount of flexibility as C++ templates.","pos":[1445,1520]},{"content":"For example, it is not possible to call arithmetic operators in a C# generic class, although it is possible to call user defined operators.","pos":[1521,1660]},{"pos":[1670,1749],"content":"C# does not allow non-type template parameters, such as <ph id=\"ph1\">`template C&lt;int i&gt; {}`</ph>.","source":"C# does not allow non-type template parameters, such as `template C<int i> {}`."},{"content":"C# does not support explicit specialization; that is, a custom implementation of a template for a specific type.","pos":[1759,1871]},{"content":"C# does not support partial specialization: a custom implementation for a subset of the type arguments.","pos":[1881,1984]},{"content":"C# does not allow the type parameter to be used as the base class for the generic type.","pos":[1994,2081]},{"content":"C# does not allow type parameters to have default types.","pos":[2091,2147]},{"content":"In C#, a generic type parameter cannot itself be a generic, although constructed types can be used as generics.","pos":[2157,2268]},{"content":"C++ does allow template parameters.","pos":[2269,2304]},{"content":"C++ allows code that might not be valid for all type parameters in the template, which is then checked for the specific type used as the type parameter.","pos":[2314,2466]},{"content":"C# requires code in a class to be written in such a way that it will work with any type that satisfies the constraints.","pos":[2467,2586]},{"content":"For example, in C++ it is possible to write a function that uses the arithmetic operators <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`-`</ph> on objects of the type parameter, which will produce an error at the time of instantiation of the template with a type that does not support these operators.","pos":[2587,2846],"source":" For example, in C++ it is possible to write a function that uses the arithmetic operators `+` and `-` on objects of the type parameter, which will produce an error at the time of instantiation of the template with a type that does not support these operators."},{"content":"C# disallows this; the only language constructs allowed are those that can be deduced from the constraints.","pos":[2847,2954]},{"pos":[2963,2971],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2975,3042],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Introduction to Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/introduction-to-generics.md)</ept><ph id=\"ph1\"> </ph>","pos":[3045,3145],"source":" [Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Templates<ept id=\"p1\">](https://docs.microsoft.com/cpp/cpp/templates-cpp)</ept>","pos":[3148,3210],"source":" [Templates](https://docs.microsoft.com/cpp/cpp/templates-cpp)"}]}