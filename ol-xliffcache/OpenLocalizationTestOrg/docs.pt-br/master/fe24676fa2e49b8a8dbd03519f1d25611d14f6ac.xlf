<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe24676fa2e49b8a8dbd03519f1d25611d14f6ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\nullable-types\how-to-identify-a-nullable-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a602323fa10e097f65c5f375aa6b288b1b473077</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">770aeccc969d3c5436d3e2c2f13f06cfbd066496</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Identify a Nullable Type (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Identify a Nullable Type (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use the C# <bpt id="p1">[</bpt>typeof<ept id="p1">](../../../csharp/language-reference/keywords/typeof.md)</ept> operator to create a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents a Nullable type:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also use the classes and methods of the <ph id="ph1">&lt;xref:System.Reflection&gt;</ph> namespace to generate <ph id="ph2">&lt;xref:System.Type&gt;</ph> objects that represent Nullable types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, if you try to obtain type information from Nullable variables at runtime by using the <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method or the <ph id="ph2">`is`</ph> operator, the result is a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object that represents the underlying type, not the Nullable type itself.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`GetType`</ph> on a Nullable type causes a boxing operation to be performed when the type is implicitly converted to <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Therefore <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> always returns a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the underlying type, not the Nullable type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The C# <bpt id="p1">[</bpt>is<ept id="p1">](../../../csharp/language-reference/keywords/is.md)</ept> operator also operates on a Nullable's underlying type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Therefore you cannot use <ph id="ph1">`is`</ph> to determine whether a variable is a Nullable type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example shows that the <ph id="ph1">`is`</ph> operator treats a Nullable<ph id="ph2">\&lt;</ph>int&gt; variable as an int.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use the following code to determine whether a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object represents a Nullable type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remember that this code always returns false if the <ph id="ph1">`Type`</ph> object was returned from a call to <ph id="ph2">&lt;xref:System.Object.GetType%2A&gt;</ph>, as explained earlier in this topic.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boxing Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/boxing-nullable-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>