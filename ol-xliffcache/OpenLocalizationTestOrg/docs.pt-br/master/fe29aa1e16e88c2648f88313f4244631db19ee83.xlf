<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-cancel-a-plinq-query.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe29aa1e16e88c2648f88313f4244631db19ee83</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\how-to-cancel-a-plinq-query.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ae697f2ff1775e5e6658f02bb3717ce14ebb21a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">503308c83db3526fb415ba1bb2860a07a818b9ec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Cancel a PLINQ Query | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Cancel a PLINQ Query</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following examples show two ways to cancel a PLINQ query.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The first example shows how to cancel a query that consists mostly of data traversal.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The second example shows how to cancel a query that contains a user function that is computationally expensive.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When "Just My Code" is enabled, Visual Studio will break on the line that throws the exception and display an error message that says "exception not handled by user code."</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This error is benign.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can press F5 to continue from it, and see the exception-handling behavior that is demonstrated in the examples below.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To prevent Visual Studio from breaking on the first error, just uncheck the "Just My Code" checkbox under <bpt id="p1">**</bpt>Tools, Options, Debugging, General<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example is intended to demonstrate usage, and might not run faster than the equivalent sequential LINQ to Objects query.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about speedup, see <bpt id="p1">[</bpt>Understanding Speedup in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>PLINQ#16<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/plinq/cs/plinqsamples.cs#16)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>PLINQ#16<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/plinq/vb/plinqsnippets1.vb#16)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The PLINQ framework does not roll a single <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> into an <ph id="ph2">&lt;xref:System.AggregateException?displayProperty=fullName&gt;</ph>; the <ph id="ph3">&lt;xref:System.OperationCanceledException&gt;</ph> must be handled in a separate catch block.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If one or more user delegates throws an OperationCanceledException(externalCT) (by using an external <ph id="ph1">&lt;xref:System.Threading.CancellationToken?displayProperty=fullName&gt;</ph>) but no other exception, and the query was defined as <ph id="ph2">`AsParallel().WithCancellation(externalCT)`</ph>, then PLINQ will issue a single <ph id="ph3">&lt;xref:System.OperationCanceledException&gt;</ph> (externalCT) rather than an <ph id="ph4">&lt;xref:System.AggregateException?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, if one user delegate throws an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph>, and another delegate throws another exception type, then both exceptions will be rolled into an <ph id="ph2">&lt;xref:System.AggregateException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The general guidance on cancellation is as follows:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you perform user-delegate cancellation you should inform PLINQ about the external <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> and throw an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>(externalCT).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If cancellation occurs and no other exceptions are thrown, then you should handle an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> rather than an <ph id="ph2">&lt;xref:System.AggregateException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example shows how to handle cancellation when you have a computationally expensive function in user code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>PLINQ#17<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/plinq/cs/plinqsamples.cs#17)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>PLINQ#17<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/plinq/vb/plinqsnippets1.vb#17)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you handle the cancellation in user code, you do not have to use <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.WithCancellation%2A&gt;</ph> in the query definition.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, we recommended that you do this because <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.WithCancellation%2A&gt;</ph> has no effect on query performance and it enables the cancellation to be handled by query operators and your user code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In order to ensure system responsiveness, we recommend that you check for cancellation around once per millisecond; however, any period up to 10 milliseconds is considered acceptable.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This frequency should not have a negative impact on your code's performance.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When an enumerator is disposed, for example when code breaks out of a foreach (For Each in Visual Basic) loop that is iterating over query results, then the query is cancelled, but no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable&gt;</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel LINQ (PLINQ)<ept id="p1">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cancellation in Managed Threads<ept id="p1">](../../../docs/standard/threading/cancellation-in-managed-threads.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>