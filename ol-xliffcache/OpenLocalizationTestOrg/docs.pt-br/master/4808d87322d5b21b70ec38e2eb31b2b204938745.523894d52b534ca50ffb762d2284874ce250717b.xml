{"content":"---\ntitle: \"Miscellaneous Data Types (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Object data type [Visual Basic], data types\"\n  - \"data types [Visual Basic], choosing\"\nms.assetid: 64c71a12-9057-4dbf-baca-7379c4aada69\n---\n# Miscellaneous Data Types (Visual Basic)\nVisual Basic supplies several data types that are not oriented toward numbers or characters. Instead, they deal with specialized data such as yes/no values, date/time values, and object addresses.  \n  \n For a table showing a side-by-side comparison of the Visual Basic data types, see [Data Types](../../../../visual-basic/language-reference/data-types/index.md).  \n  \n## Boolean Type  \n The [Boolean Data Type](../../../../visual-basic/language-reference/data-types/boolean-data-type.md) is an unsigned value that is interpreted as either `True` or `False`. Its data width depends on the implementing platform. If a variable can contain only two-state values such as true/false, yes/no, or on/off, declare it as `Boolean`.  \n  \n## Date Type  \n The [Date Data Type](../../../../visual-basic/language-reference/data-types/date-data-type.md) is a 64-bit value that holds both date and time information. Each increment represents 100 nanoseconds of elapsed time since the beginning (12:00 AM) of January 1 of the year 1 in the Gregorian calendar. If a variable can contain a date value, a time value, or both, declare it as `Date`.  \n  \n## Object Type  \n The [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md) is a 32-bit address that points to an object instance within your application or in some other application. An `Object` variable can refer to any object your application recognizes, or to data of any data type. This includes both *value types*, such as `Integer`, `Boolean`, and structure instances, and *reference types*, which are instances of objects created from classes such as `String` and <xref:System.Windows.Forms.Form>, and array instances.  \n  \n If a variable stores a pointer to an instance of a class that you do not know at compile time, or if it can point to data of various data types, declare it as `Object`.  \n  \n The advantage of the `Object` data type is that you can use it to store data of any data type. The disadvantage is that you incur extra operations that take more execution time and make your application perform slower. If you use an `Object` variable for value types, you incur *boxing* and *unboxing*. If you use it for reference types, you incur *late binding*.  \n  \n## See also\n\n- [Type Characters](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)\n- [Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)\n- [Numeric Data Types](../../../../visual-basic/programming-guide/language-features/data-types/numeric-data-types.md)\n- [Character Data Types](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)\n- [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)\n- [Early and Late Binding](../../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)\n","nodes":[{"pos":[4,235],"embed":true,"restype":"x-metadata","content":"title: \"Miscellaneous Data Types (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Object data type [Visual Basic], data types\"\n  - \"data types [Visual Basic], choosing\"\nms.assetid: 64c71a12-9057-4dbf-baca-7379c4aada69","nodes":[{"content":"Miscellaneous Data Types (Visual Basic)","nodes":[{"pos":[0,39],"content":"Miscellaneous Data Types (Visual Basic)","nodes":[{"content":"Miscellaneous Data Types (Visual Basic)","pos":[0,39]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[242,281],"content":"Miscellaneous Data Types (Visual Basic)","linkify":"Miscellaneous Data Types (Visual Basic)","nodes":[{"content":"Miscellaneous Data Types (Visual Basic)","pos":[0,39]}]},{"content":"Visual Basic supplies several data types that are not oriented toward numbers or characters.","pos":[282,374]},{"content":"Instead, they deal with specialized data such as yes/no values, date/time values, and object addresses.","pos":[375,478]},{"pos":[485,645],"content":"For a table showing a side-by-side comparison of the Visual Basic data types, see <bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/index.md)</ept>.","source":"For a table showing a side-by-side comparison of the Visual Basic data types, see [Data Types](../../../../visual-basic/language-reference/data-types/index.md)."},{"pos":[654,666],"content":"Boolean Type","linkify":"Boolean Type","nodes":[{"content":"Boolean Type","pos":[0,12]}]},{"content":"The <bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> is an unsigned value that is interpreted as either <ph id=\"ph1\">`True`</ph> or <ph id=\"ph2\">`False`</ph>.","pos":[670,840],"source":"The [Boolean Data Type](../../../../visual-basic/language-reference/data-types/boolean-data-type.md) is an unsigned value that is interpreted as either `True` or `False`."},{"content":"Its data width depends on the implementing platform.","pos":[841,893]},{"content":"If a variable can contain only two-state values such as true/false, yes/no, or on/off, declare it as <ph id=\"ph1\">`Boolean`</ph>.","pos":[894,1005],"source":" If a variable can contain only two-state values such as true/false, yes/no, or on/off, declare it as `Boolean`."},{"pos":[1014,1023],"content":"Date Type","linkify":"Date Type","nodes":[{"content":"Date Type","pos":[0,9]}]},{"content":"The <bpt id=\"p1\">[</bpt>Date Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/date-data-type.md)</ept> is a 64-bit value that holds both date and time information.","pos":[1027,1182],"source":"The [Date Data Type](../../../../visual-basic/language-reference/data-types/date-data-type.md) is a 64-bit value that holds both date and time information."},{"content":"Each increment represents 100 nanoseconds of elapsed time since the beginning (12:00 AM) of January 1 of the year 1 in the Gregorian calendar.","pos":[1183,1325]},{"content":"If a variable can contain a date value, a time value, or both, declare it as <ph id=\"ph1\">`Date`</ph>.","pos":[1326,1410],"source":" If a variable can contain a date value, a time value, or both, declare it as `Date`."},{"pos":[1419,1430],"content":"Object Type","linkify":"Object Type","nodes":[{"content":"Object Type","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept> is a 32-bit address that points to an object instance within your application or in some other application.","pos":[1434,1640],"source":"The [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md) is a 32-bit address that points to an object instance within your application or in some other application."},{"content":"An <ph id=\"ph1\">`Object`</ph> variable can refer to any object your application recognizes, or to data of any data type.","pos":[1641,1743],"source":" An `Object` variable can refer to any object your application recognizes, or to data of any data type."},{"content":"This includes both <bpt id=\"p1\">*</bpt>value types<ept id=\"p1\">*</ept>, such as <ph id=\"ph1\">`Integer`</ph>, <ph id=\"ph2\">`Boolean`</ph>, and structure instances, and <bpt id=\"p2\">*</bpt>reference types<ept id=\"p2\">*</ept>, which are instances of objects created from classes such as <ph id=\"ph3\">`String`</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Form&gt;</ph>, and array instances.","pos":[1744,1983],"source":" This includes both *value types*, such as `Integer`, `Boolean`, and structure instances, and *reference types*, which are instances of objects created from classes such as `String` and <xref:System.Windows.Forms.Form>, and array instances."},{"pos":[1990,2158],"content":"If a variable stores a pointer to an instance of a class that you do not know at compile time, or if it can point to data of various data types, declare it as <ph id=\"ph1\">`Object`</ph>.","source":"If a variable stores a pointer to an instance of a class that you do not know at compile time, or if it can point to data of various data types, declare it as `Object`."},{"content":"The advantage of the <ph id=\"ph1\">`Object`</ph> data type is that you can use it to store data of any data type.","pos":[2165,2259],"source":"The advantage of the `Object` data type is that you can use it to store data of any data type."},{"content":"The disadvantage is that you incur extra operations that take more execution time and make your application perform slower.","pos":[2260,2383]},{"content":"If you use an <ph id=\"ph1\">`Object`</ph> variable for value types, you incur <bpt id=\"p1\">*</bpt>boxing<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>unboxing<ept id=\"p2\">*</ept>.","pos":[2384,2467],"source":" If you use an `Object` variable for value types, you incur *boxing* and *unboxing*."},{"content":"If you use it for reference types, you incur <bpt id=\"p1\">*</bpt>late binding<ept id=\"p1\">*</ept>.","pos":[2468,2528],"source":" If you use it for reference types, you incur *late binding*."},{"pos":[2537,2545],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2549,2658],"content":"<bpt id=\"p1\">[</bpt>Type Characters<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept>","source":"[Type Characters](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)"},{"pos":[2661,2782],"content":"<bpt id=\"p1\">[</bpt>Elementary Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept>","source":"[Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)"},{"pos":[2785,2900],"content":"<bpt id=\"p1\">[</bpt>Numeric Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/numeric-data-types.md)</ept>","source":"[Numeric Data Types](../../../../visual-basic/programming-guide/language-features/data-types/numeric-data-types.md)"},{"pos":[2903,3022],"content":"<bpt id=\"p1\">[</bpt>Character Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)</ept>","source":"[Character Data Types](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)"},{"pos":[3025,3156],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","source":"[Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"},{"pos":[3159,3273],"content":"<bpt id=\"p1\">[</bpt>Early and Late Binding<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)</ept>","source":"[Early and Late Binding](../../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)"}]}