{"content":"---\ntitle: \"abstract (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"abstract\"\n  - \"abstract_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"abstract keyword [C#]\"\nms.assetid: b0797770-c1f3-4b4d-9441-b9122602a6bb\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# abstract (C# Reference)\nThe `abstract` modifier indicates that the thing being modified has a missing or incomplete implementation. The abstract modifier can be used with classes, methods, properties, indexers, and events. Use the `abstract` modifier in a class declaration to indicate that a class is intended only to be a base class of other classes. Members marked as abstract, or included in an abstract class, must be implemented by classes that derive from the abstract class.  \n  \n## Example  \n In this example, the class `Square` must provide an implementation of `Area` because it derives from `ShapesClass`:  \n  \n [!code-cs[csrefKeywordsModifiers#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_1.cs)]  \n  \n Abstract classes have the following features:  \n  \n-   An abstract class cannot be instantiated.  \n  \n-   An abstract class may contain abstract methods and accessors.  \n  \n-   It is not possible to modify an abstract class with the [sealed](../../../csharp/language-reference/keywords/sealed.md) modifier because the two modifers have opposite meanings. The `sealed` modifier prevents a class from being inherited and the `abstract` modifier requires a class to be inherited.  \n  \n-   A non-abstract class derived from an abstract class must include actual implementations of all inherited abstract methods and accessors.  \n  \n Use the `abstract` modifier in a method or property declaration to indicate that the method or property does not contain implementation.  \n  \n Abstract methods have the following features:  \n  \n-   An abstract method is implicitly a virtual method.  \n  \n-   Abstract method declarations are only permitted in abstract classes.  \n  \n-   Because an abstract method declaration provides no actual implementation, there is no method body; the method declaration simply ends with a semicolon and there are no curly braces ({ }) following the signature. For example:  \n  \n    ```  \n    public abstract void MyMethod();  \n    ```  \n  \n     The implementation is provided by an overriding method[override](../../../csharp/language-reference/keywords/override.md), which is a member of a non-abstract class.  \n  \n-   It is an error to use the [static](../../../csharp/language-reference/keywords/static.md) or [virtual](../../../csharp/language-reference/keywords/virtual.md) modifiers in an abstract method declaration.  \n  \n Abstract properties behave like abstract methods, except for the differences in declaration and invocation syntax.  \n  \n-   It is an error to use the `abstract` modifier on a static property.  \n  \n-   An abstract inherited property can be overridden in a derived class by including a property declaration that uses the [override](../../../csharp/language-reference/keywords/override.md) modifier.  \n  \n For more information about abstract classes, see [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md).  \n  \n An abstract class must provide implementation for all interface members.  \n  \n An abstract class that implements an interface might map the interface methods onto abstract methods. For example:  \n  \n [!code-cs[csrefKeywordsModifiers#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_2.cs)]  \n  \n## Example  \n In this example, the class `DerivedClass` is derived from an abstract class `BaseClass`. The abstract class contains an abstract method, `AbstractMethod`, and two abstract properties, `X` and `Y`.  \n  \n [!code-cs[csrefKeywordsModifiers#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_3.cs)]  \n  \n In the preceding example, if you attempt to instantiate the abstract class by using a statement like this:  \n  \n```  \nBaseClass bc = new BaseClass();   // Error  \n```  \n  \n you will get an error saying that the compiler cannot create an instance of the abstract class 'BaseClass'.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)   \n [virtual](../../../csharp/language-reference/keywords/virtual.md)   \n [override](../../../csharp/language-reference/keywords/override.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)","nodes":[{"pos":[4,576],"nodes":[{"content":"abstract (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,40],"content":"abstract (C# Reference) | Microsoft Docs","nodes":[{"content":"abstract (C# Reference) | Microsoft Docs","pos":[0,40]}]}],"pos":[6,49],"yaml":true}],"content":"title: \"abstract (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"abstract\"\n  - \"abstract_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"abstract keyword [C#]\"\nms.assetid: b0797770-c1f3-4b4d-9441-b9122602a6bb\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[583,606],"content":"abstract (C# Reference)","linkify":"abstract (C# Reference)","nodes":[{"content":"abstract (C# Reference)","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`abstract`</ph> modifier indicates that the thing being modified has a missing or incomplete implementation.","pos":[607,714],"source":"The `abstract` modifier indicates that the thing being modified has a missing or incomplete implementation."},{"content":"The abstract modifier can be used with classes, methods, properties, indexers, and events.","pos":[715,805]},{"content":"Use the <ph id=\"ph1\">`abstract`</ph> modifier in a class declaration to indicate that a class is intended only to be a base class of other classes.","pos":[806,935],"source":" Use the `abstract` modifier in a class declaration to indicate that a class is intended only to be a base class of other classes."},{"content":"Members marked as abstract, or included in an abstract class, must be implemented by classes that derive from the abstract class.","pos":[936,1065]},{"pos":[1074,1081],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1085,1200],"content":"In this example, the class <ph id=\"ph1\">`Square`</ph> must provide an implementation of <ph id=\"ph2\">`Area`</ph> because it derives from <ph id=\"ph3\">`ShapesClass`</ph>:","source":"In this example, the class `Square` must provide an implementation of `Area` because it derives from `ShapesClass`:"},{"pos":[1207,1321],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsModifiers#1<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsModifiers#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_1.cs)]"},{"content":"Abstract classes have the following features:","pos":[1328,1373]},{"content":"An abstract class cannot be instantiated.","pos":[1383,1424]},{"content":"An abstract class may contain abstract methods and accessors.","pos":[1434,1495]},{"content":"It is not possible to modify an abstract class with the <bpt id=\"p1\">[</bpt>sealed<ept id=\"p1\">](../../../csharp/language-reference/keywords/sealed.md)</ept> modifier because the two modifers have opposite meanings.","pos":[1505,1682],"source":"It is not possible to modify an abstract class with the [sealed](../../../csharp/language-reference/keywords/sealed.md) modifier because the two modifers have opposite meanings."},{"content":"The <ph id=\"ph1\">`sealed`</ph> modifier prevents a class from being inherited and the <ph id=\"ph2\">`abstract`</ph> modifier requires a class to be inherited.","pos":[1683,1804],"source":" The `sealed` modifier prevents a class from being inherited and the `abstract` modifier requires a class to be inherited."},{"content":"A non-abstract class derived from an abstract class must include actual implementations of all inherited abstract methods and accessors.","pos":[1814,1950]},{"pos":[1957,2093],"content":"Use the <ph id=\"ph1\">`abstract`</ph> modifier in a method or property declaration to indicate that the method or property does not contain implementation.","source":"Use the `abstract` modifier in a method or property declaration to indicate that the method or property does not contain implementation."},{"content":"Abstract methods have the following features:","pos":[2100,2145]},{"content":"An abstract method is implicitly a virtual method.","pos":[2155,2205]},{"content":"Abstract method declarations are only permitted in abstract classes.","pos":[2215,2283]},{"content":"Because an abstract method declaration provides no actual implementation, there is no method body; the method declaration simply ends with a semicolon and there are no curly braces ({ }) following the signature.","pos":[2293,2504]},{"content":"For example:","pos":[2505,2517]},{"pos":[2590,2755],"content":"The implementation is provided by an overriding method<bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept>, which is a member of a non-abstract class.","source":"The implementation is provided by an overriding method[override](../../../csharp/language-reference/keywords/override.md), which is a member of a non-abstract class."},{"pos":[2765,2968],"content":"It is an error to use the <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> or <bpt id=\"p2\">[</bpt>virtual<ept id=\"p2\">](../../../csharp/language-reference/keywords/virtual.md)</ept> modifiers in an abstract method declaration.","source":"It is an error to use the [static](../../../csharp/language-reference/keywords/static.md) or [virtual](../../../csharp/language-reference/keywords/virtual.md) modifiers in an abstract method declaration."},{"content":"Abstract properties behave like abstract methods, except for the differences in declaration and invocation syntax.","pos":[2975,3089]},{"pos":[3099,3166],"content":"It is an error to use the <ph id=\"ph1\">`abstract`</ph> modifier on a static property.","source":"It is an error to use the `abstract` modifier on a static property."},{"pos":[3176,3371],"content":"An abstract inherited property can be overridden in a derived class by including a property declaration that uses the <bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept> modifier.","source":"An abstract inherited property can be overridden in a derived class by including a property declaration that uses the [override](../../../csharp/language-reference/keywords/override.md) modifier."},{"pos":[3378,3579],"content":"For more information about abstract classes, see <bpt id=\"p1\">[</bpt>Abstract and Sealed Classes and Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept>.","source":"For more information about abstract classes, see [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)."},{"content":"An abstract class must provide implementation for all interface members.","pos":[3586,3658]},{"content":"An abstract class that implements an interface might map the interface methods onto abstract methods.","pos":[3665,3766]},{"content":"For example:","pos":[3767,3779]},{"pos":[3786,3900],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsModifiers#2<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsModifiers#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_2.cs)]"},{"pos":[3909,3916],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the class <ph id=\"ph1\">`DerivedClass`</ph> is derived from an abstract class <ph id=\"ph2\">`BaseClass`</ph>.","pos":[3920,4008],"source":"In this example, the class `DerivedClass` is derived from an abstract class `BaseClass`."},{"content":"The abstract class contains an abstract method, <ph id=\"ph1\">`AbstractMethod`</ph>, and two abstract properties, <ph id=\"ph2\">`X`</ph> and <ph id=\"ph3\">`Y`</ph>.","pos":[4009,4116],"source":" The abstract class contains an abstract method, `AbstractMethod`, and two abstract properties, `X` and `Y`."},{"pos":[4123,4237],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsModifiers#3<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsModifiers#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/abstract_3.cs)]"},{"content":"In the preceding example, if you attempt to instantiate the abstract class by using a statement like this:","pos":[4244,4350]},{"content":"you will get an error saying that the compiler cannot create an instance of the abstract class 'BaseClass'.","pos":[4417,4524]},{"pos":[4533,4558],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4672,4680],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4684,4744],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4748,4815],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept><ph id=\"ph1\"> </ph>","pos":[4819,4889],"source":"[Modifiers](../../../csharp/language-reference/keywords/modifiers.md) "},{"content":"<bpt id=\"p1\">[</bpt>virtual<ept id=\"p1\">](../../../csharp/language-reference/keywords/virtual.md)</ept><ph id=\"ph1\"> </ph>","pos":[4893,4959],"source":"[virtual](../../../csharp/language-reference/keywords/virtual.md) "},{"content":"<bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept><ph id=\"ph1\"> </ph>","pos":[4963,5031],"source":"[override](../../../csharp/language-reference/keywords/override.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","pos":[5035,5102],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"}]}