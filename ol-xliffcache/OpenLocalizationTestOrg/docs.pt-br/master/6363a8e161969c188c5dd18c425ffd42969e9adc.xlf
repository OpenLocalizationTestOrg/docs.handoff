<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-serialize-and-deserialize-json-data.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6363a8e161969c188c5dd18c425ffd42969e9adc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\how-to-serialize-and-deserialize-json-data.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b27368e733c78710c746d9aa17a4746c49fc8641</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6f984c6a993b94f8891e48ab1aa6a3400c1cac1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Serialize and Deserialize JSON Data</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Serialize and deserialize JSON data</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>JSON (JavaScript Object Notation) is an efficient data encoding format that enables fast exchanges of small amounts of data between client browsers and AJAX-enabled Web services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article demonstrates how to serialize .NET type objects into JSON-encoded data and then deserialize data in the JSON format back into instances of .NET types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This example uses a data contract to demonstrate serialization and deserialization of a user-defined <ph id="ph1">`Person`</ph> type and uses <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Normally, JSON serialization and deserialization are handled automatically by Windows Communication Foundation (WCF) when you use data contract types in service operations that are exposed over AJAX-enabled endpoints.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, in some cases you may need to work with JSON data directly.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If an error occurs during serialization of an outgoing reply on the server or for some other reason, it may not get returned to the client as a fault.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article is based on the <bpt id="p1">[</bpt>JSON serialization<ept id="p1">](../samples/json-serialization.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To define the data contract for a Person type</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Define the data contract for <ph id="ph1">`Person`</ph> by attaching the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to the class and <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attribute to the members you want to serialize.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about data contracts, see <bpt id="p1">[</bpt>Designing service contracts<ept id="p1">](../designing-service-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To serialize an instance of type Person to JSON</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Create an instance of the <ph id="ph1">`Person`</ph> type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Serialize the <ph id="ph1">`Person`</ph> object to a memory stream by using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject%2A&gt;</ph> method to write JSON data to the stream.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Show the JSON output.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To deserialize an instance of type Person from JSON</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Deserialize the JSON-encoded data into a new instance of <ph id="ph1">`Person`</ph> by using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Show the results.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The JSON serializer throws a serialization exception for data contracts that have multiple members with the same name, as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Stand-alone JSON serialization<ept id="p1">](stand-alone-json-serialization.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Support for JSON and other data transfer formats<ept id="p1">](support-for-json-and-other-data-transfer-formats.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>