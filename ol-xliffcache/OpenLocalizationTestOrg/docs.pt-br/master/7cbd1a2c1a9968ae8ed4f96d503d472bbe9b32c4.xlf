<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="equality-comparisons.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cbd1a2c1a9968ae8ed4f96d503d472bbe9b32c4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\equality-comparisons.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b321f8770eff4d6bfe608b168a97a81c8ae970b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da03284d11266d777931e1ed68907321dd088d1c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Equality Comparisons - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Equality comparisons (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary to compare two values for equality.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In some cases, you are testing for <bpt id="p1">*</bpt>value equality<ept id="p1">*</ept>, also known as <bpt id="p2">*</bpt>equivalence<ept id="p2">*</ept>, which means that the values that are contained by the two variables are equal.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In other cases, you have to determine whether two variables refer to the same underlying object in memory.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This type of equality is called <bpt id="p1">*</bpt>reference equality<ept id="p1">*</ept>, or <bpt id="p2">*</bpt>identity<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic describes these two kinds of equality and provides links to other topics for more information.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Reference equality</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reference equality means that two object references refer to the same underlying object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This can occur through simple assignment, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this code, two objects are created, but after the assignment statement, both references refer to the same object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Therefore they have reference equality.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph> method to determine whether two references refer to the same object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The concept of reference equality applies only to reference types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Value type objects cannot have reference equality because when an instance of a value type is assigned to a variable, a copy of the value is made.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Therefore you can never have two unboxed structs that refer to the same location in memory.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Furthermore, if you use <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph> to compare two value types, the result will always be <ph id="ph2">`false`</ph>, even if the values that are contained in the objects are all identical.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is because each variable is boxed into a separate object instance.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Test for Reference Equality (Identity)<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/how-to-test-for-reference-equality-identity.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Value equality</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Value equality means that two objects contain the same value or values.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For primitive value types such as <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept> or <bpt id="p2">[</bpt>bool<ept id="p2">](../../../csharp/language-reference/keywords/bool.md)</ept>, tests for value equality are straightforward.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt><ph id="ph1">==</ph><ept id="p1">](../../../csharp/language-reference/operators/equality-operators.md#equality-operator-)</ept> operator, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For most other types, testing for value equality is more complex because it requires that you understand how the type defines it.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For classes and structs that have multiple fields or properties, value equality is often defined to mean that all fields or properties have the same value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, two <ph id="ph1">`Point`</ph> objects might be defined to be equivalent if pointA.X is equal to pointB.X and pointA.Y is equal to pointB.Y.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, there is no requirement that equivalence be based on all the fields in a type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It can be based on a subset.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you compare types that you do not own, you should make sure to understand specifically how equivalence is defined for that type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about how to define value equality in your own classes and structs, see <bpt id="p1">[</bpt>How to: Define Value Equality for a Type<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Value equality for floating-point values</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Equality comparisons of floating-point values (<bpt id="p1">[</bpt>double<ept id="p1">](../../../csharp/language-reference/keywords/double.md)</ept> and <bpt id="p2">[</bpt>float<ept id="p2">](../../../csharp/language-reference/keywords/float.md)</ept>) are problematic because of the imprecision of floating-point arithmetic on binary computers.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see the remarks in the topic <ph id="ph1">&lt;xref:System.Double?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Related topics</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Test for Reference Equality (Identity)<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/how-to-test-for-reference-equality-identity.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Describes how to determine whether two variables have reference equality.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define Value Equality for a Type<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Describes how to provide a custom definition of value equality for a type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Provides links to detailed information about important C# language features and features that are available to C# through the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types<ept id="p1">](../../../csharp/programming-guide/types/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Provides information about the C# type system and links to additional information.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>