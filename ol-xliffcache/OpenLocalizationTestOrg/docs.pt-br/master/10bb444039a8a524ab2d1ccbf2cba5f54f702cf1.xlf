<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10bb444039a8a524ab2d1ccbf2cba5f54f702cf1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\how-to-use-a-background-thread-to-search-for-files.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02c72caf92e6dd156d81e59a96dbb3b8ddcabc22</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">934fe3ceda7fb5d9f46987f1ea3987203b8e2da0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use a Background Thread to Search for Files | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use a Background Thread to Search for Files</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component replaces and adds functionality to the <ph id="ph2">&lt;xref:System.Threading&gt;</ph> namespace; however, the <ph id="ph3">&lt;xref:System.Threading&gt;</ph> namespace is retained for both backward compatibility and future use, if you choose.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>BackgroundWorker Component Overview<ept id="p1">](../../../../docs/framework/winforms/controls/backgroundworker-component-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows Forms uses the single-threaded apartment (STA) model because Windows Forms is based on native Win32 windows that are inherently apartment-threaded.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The STA model implies that a window can be created on any thread, but it cannot switch threads once created, and all function calls to it must occur on its creation thread.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Outside Windows Forms, classes in the .NET Framework use the free threading model.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For information about threading in the .NET Framework, see <bpt id="p1">[</bpt>Threading<ept id="p1">](../../../../docs/standard/threading/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The STA model requires that any methods on a control that need to be called from outside the control's creation thread must be marshaled to (executed on) the control's creation thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The base class <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> provides several methods (<ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>) for this purpose.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> makes synchronous method calls; <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> makes asynchronous method calls.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you use multithreading in your control for resource-intensive tasks, the user interface can remain responsive while a resource-intensive computation executes on a background thread.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following sample (<ph id="ph1">`DirectorySearcher`</ph>) shows a multithreaded Windows Forms control that uses a background thread to recursively search a directory for files matching a specified search string and then populates a list box with the search result.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The key concepts illustrated by the sample are as follows:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DirectorySearcher`</ph> starts a new thread to perform the search.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The thread executes the <ph id="ph1">`ThreadProcedure`</ph> method that in turn calls the helper <ph id="ph2">`RecurseDirectory`</ph> method to do the actual search and to populate the list box.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, populating the list box requires a cross-thread call, as explained in the next two bulleted items.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DirectorySearcher`</ph> defines the <ph id="ph2">`AddFiles`</ph> method to add files to a list box; however, <ph id="ph3">`RecurseDirectory`</ph> cannot directly invoke <ph id="ph4">`AddFiles`</ph> because <ph id="ph5">`AddFiles`</ph> can execute only in the STA thread that created <ph id="ph6">`DirectorySearcher`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The only way <ph id="ph1">`RecurseDirectory`</ph> can call <ph id="ph2">`AddFiles`</ph> is through a cross-thread call â€” that is, by calling <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> to marshal <ph id="ph5">`AddFiles`</ph> to the creation thread of <ph id="ph6">`DirectorySearcher`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RecurseDirectory`</ph> uses <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> so that the call can be made asynchronously.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Marshaling a method requires the equivalent of a function pointer or callback.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is accomplished using delegates in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> takes a delegate as an argument.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DirectorySearcher`</ph> therefore defines a delegate (<ph id="ph2">`FileListDelegate`</ph>), binds <ph id="ph3">`AddFiles`</ph> to an instance of <ph id="ph4">`FileListDelegate`</ph> in its constructor, and passes this delegate instance to <ph id="ph5">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DirectorySearcher`</ph> also defines an event delegate that is marshaled when the search is completed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Using the Multithreaded Control on a Form</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example shows how the multithreaded <ph id="ph1">`DirectorySearcher`</ph> control can be used on a form.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id="p1">](../../../../docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](../../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>