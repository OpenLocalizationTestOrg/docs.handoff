{"content":"---\ntitle: \"How to: Build a Single-File Assembly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-bcl\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"assembly manifest, single-file assemblies\"\n  - \"library assemblies\"\n  - \"command-line compilers\"\n  - \"assemblies [.NET Framework], single-file\"\n  - \"output file name for assemblies\"\n  - \"code modules\"\n  - \"single-file assemblies\"\nms.assetid: a6063221-43a5-4d3e-814c-288a4ec69aec\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Build a Single-File Assembly\nA single-file assembly, which is the simplest type of assembly, contains type information and implementation, as well as the [assembly manifest](../../../docs/framework/app-domains/assembly-manifest.md). You can use command-line compilers or [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] to create a single-file assembly. By default, the compiler creates an assembly file with an .exe extension.  \n  \n> [!NOTE]\n>  [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] for C# and Visual Basic can be used only to create single-file assemblies. If you want to create multifile assemblies, you must use command-line compilers or [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] for Visual C++.  \n  \n The following procedures show how to create single-file assemblies using command-line compilers.  \n  \n### To create an assembly with an .exe extension  \n  \n1.  At the command prompt, type the following command:  \n  \n     \\<*compiler command*> \\<*module name*>  \n  \n     In this command, *compiler command* is the compiler command for the language used in your code module, and *module name* is the name of the code module to compile into the assembly.  \n  \n The following example creates an assembly named `myCode.exe` from a code module called `myCode`.  \n  \n```csharp  \ncsc myCode.cs  \n```  \n  \n```vb  \nvbc myCode.vb  \n```  \n  \n#### To create an assembly with an .exe extension and specify the output file name  \n  \n1.  At the command prompt, type the following command:  \n  \n     \\<*compiler command*> **/out:**\\<*file name*> \\<*module name*>  \n  \n     In this command, *compiler command* is the compiler command for the language used in your code module, *file name* is the output file name, and *module name* is the name of the code module to compile into the assembly.  \n  \n The following example creates an assembly named `myAssembly.exe` from a code module called `myCode`.  \n  \n```csharp  \ncsc /out:myAssembly.exe myCode.cs  \n```  \n  \n```vb  \nvbc /out:myAssembly.exe myCode.vb  \n```  \n  \n## Creating Library Assemblies  \n A library assembly is similar to a class library. It contains types that will be referenced by other assemblies, but it has no entry point to begin execution.  \n  \n#### To create a library assembly  \n  \n1.  At the command prompt, type the following command:  \n  \n     \\<*compiler command*> **/t:library** \\<*module name*>  \n  \n     In this command, *compiler command* is the compiler command for the language used in your code module, and *module name* is the name of the code module to compile into the assembly. You can also use other compiler options, such as the **/out:** option.  \n  \n The following example creates a library assembly named `myCodeAssembly.dll` from a code module called `myCode`.  \n  \n```csharp  \ncsc /out:myCodeLibrary.dll /t:library myCode.cs  \n```  \n  \n```vb  \nvbc /out:myCodeLibrary.dll /t:library myCode.vb  \n```  \n  \n## See Also  \n [Creating Assemblies](../../../docs/framework/app-domains/create-assemblies.md)   \n [Multifile Assemblies](../../../docs/framework/app-domains/multifile-assemblies.md)   \n [How to: Build a Multifile Assembly](../../../docs/framework/app-domains/how-to-build-a-multifile-assembly.md)   \n [Programming with Assemblies](../../../docs/framework/app-domains/programming-with-assemblies.md)","nodes":[{"pos":[4,619],"embed":true,"restype":"x-metadata","content":"title: \"How to: Build a Single-File Assembly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-bcl\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"assembly manifest, single-file assemblies\"\n  - \"library assemblies\"\n  - \"command-line compilers\"\n  - \"assemblies [.NET Framework], single-file\"\n  - \"output file name for assemblies\"\n  - \"code modules\"\n  - \"single-file assemblies\"\nms.assetid: a6063221-43a5-4d3e-814c-288a4ec69aec\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Build a Single-File Assembly | Microsoft Docs","nodes":[{"pos":[0,53],"content":"How to: Build a Single-File Assembly | Microsoft Docs","nodes":[{"content":"How to: Build a Single-File Assembly | Microsoft Docs","pos":[0,53]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[626,662],"content":"How to: Build a Single-File Assembly","linkify":"How to: Build a Single-File Assembly","nodes":[{"content":"How to: Build a Single-File Assembly","pos":[0,36]}]},{"content":"A single-file assembly, which is the simplest type of assembly, contains type information and implementation, as well as the <bpt id=\"p1\">[</bpt>assembly manifest<ept id=\"p1\">](../../../docs/framework/app-domains/assembly-manifest.md)</ept>.","pos":[663,866],"source":"A single-file assembly, which is the simplest type of assembly, contains type information and implementation, as well as the [assembly manifest](../../../docs/framework/app-domains/assembly-manifest.md)."},{"content":"You can use command-line compilers or <ph id=\"ph1\">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph> to create a single-file assembly.","pos":[867,997],"source":" You can use command-line compilers or [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] to create a single-file assembly."},{"content":"By default, the compiler creates an assembly file with an .exe extension.","pos":[998,1071]},{"pos":[1079,1381],"content":"[!NOTE]\n [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] for C# and Visual Basic can be used only to create single-file assemblies. If you want to create multifile assemblies, you must use command-line compilers or [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] for Visual C++.","leadings":["","> "],"nodes":[{"content":"[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] for C# and Visual Basic can be used only to create single-file assemblies. If you want to create multifile assemblies, you must use command-line compilers or [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] for Visual C++.","pos":[9,300],"nodes":[{"content":"<ph id=\"ph1\">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph> for C# and Visual Basic can be used only to create single-file assemblies.","pos":[0,133],"source":"[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] for C# and Visual Basic can be used only to create single-file assemblies."},{"content":"If you want to create multifile assemblies, you must use command-line compilers or <ph id=\"ph1\">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph> for Visual C++.","pos":[134,291],"source":" If you want to create multifile assemblies, you must use command-line compilers or [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)] for Visual C++."}]}]},{"content":"The following procedures show how to create single-file assemblies using command-line compilers.","pos":[1388,1484]},{"pos":[1494,1538],"content":"To create an assembly with an .exe extension","linkify":"To create an assembly with an .exe extension","nodes":[{"content":"To create an assembly with an .exe extension","pos":[0,44]}]},{"content":"At the command prompt, type the following command:","pos":[1548,1598]},{"pos":[1609,1647],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>compiler command<ept id=\"p1\">*</ept><ph id=\"ph2\">&gt; </ph><ph id=\"ph3\">\\&lt;</ph><bpt id=\"p2\">*</bpt>module name<ept id=\"p2\">*</ept><ph id=\"ph4\">&gt;</ph>","source":"\\<*compiler command*> \\<*module name*>"},{"pos":[1658,1839],"content":"In this command, <bpt id=\"p1\">*</bpt>compiler command<ept id=\"p1\">*</ept> is the compiler command for the language used in your code module, and <bpt id=\"p2\">*</bpt>module name<ept id=\"p2\">*</ept> is the name of the code module to compile into the assembly.","source":"In this command, *compiler command* is the compiler command for the language used in your code module, and *module name* is the name of the code module to compile into the assembly."},{"pos":[1846,1942],"content":"The following example creates an assembly named <ph id=\"ph1\">`myCode.exe`</ph> from a code module called <ph id=\"ph2\">`myCode`</ph>.","source":"The following example creates an assembly named `myCode.exe` from a code module called `myCode`."},{"pos":[2023,2100],"content":"To create an assembly with an .exe extension and specify the output file name","linkify":"To create an assembly with an .exe extension and specify the output file name","nodes":[{"content":"To create an assembly with an .exe extension and specify the output file name","pos":[0,77]}]},{"content":"At the command prompt, type the following command:","pos":[2110,2160]},{"pos":[2171,2233],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>compiler command<ept id=\"p1\">*</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p2\">**</bpt>/out:<ept id=\"p2\">**</ept><ph id=\"ph3\">\\&lt;</ph><bpt id=\"p3\">*</bpt>file name<ept id=\"p3\">*</ept><ph id=\"ph4\">&gt; </ph><ph id=\"ph5\">\\&lt;</ph><bpt id=\"p4\">*</bpt>module name<ept id=\"p4\">*</ept><ph id=\"ph6\">&gt;</ph>","source":"\\<*compiler command*> **/out:**\\<*file name*> \\<*module name*>"},{"pos":[2244,2462],"content":"In this command, <bpt id=\"p1\">*</bpt>compiler command<ept id=\"p1\">*</ept> is the compiler command for the language used in your code module, <bpt id=\"p2\">*</bpt>file name<ept id=\"p2\">*</ept> is the output file name, and <bpt id=\"p3\">*</bpt>module name<ept id=\"p3\">*</ept> is the name of the code module to compile into the assembly.","source":"In this command, *compiler command* is the compiler command for the language used in your code module, *file name* is the output file name, and *module name* is the name of the code module to compile into the assembly."},{"pos":[2469,2569],"content":"The following example creates an assembly named <ph id=\"ph1\">`myAssembly.exe`</ph> from a code module called <ph id=\"ph2\">`myCode`</ph>.","source":"The following example creates an assembly named `myAssembly.exe` from a code module called `myCode`."},{"pos":[2688,2715],"content":"Creating Library Assemblies","linkify":"Creating Library Assemblies","nodes":[{"content":"Creating Library Assemblies","pos":[0,27]}]},{"content":"A library assembly is similar to a class library.","pos":[2719,2768]},{"content":"It contains types that will be referenced by other assemblies, but it has no entry point to begin execution.","pos":[2769,2877]},{"pos":[2888,2916],"content":"To create a library assembly","linkify":"To create a library assembly","nodes":[{"content":"To create a library assembly","pos":[0,28]}]},{"content":"At the command prompt, type the following command:","pos":[2926,2976]},{"pos":[2987,3040],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>compiler command<ept id=\"p1\">*</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p2\">**</bpt>/t:library<ept id=\"p2\">**</ept> <ph id=\"ph3\">\\&lt;</ph><bpt id=\"p3\">*</bpt>module name<ept id=\"p3\">*</ept><ph id=\"ph4\">&gt;</ph>","source":"\\<*compiler command*> **/t:library** \\<*module name*>"},{"content":"In this command, <bpt id=\"p1\">*</bpt>compiler command<ept id=\"p1\">*</ept> is the compiler command for the language used in your code module, and <bpt id=\"p2\">*</bpt>module name<ept id=\"p2\">*</ept> is the name of the code module to compile into the assembly.","pos":[3051,3232],"source":"In this command, *compiler command* is the compiler command for the language used in your code module, and *module name* is the name of the code module to compile into the assembly."},{"content":"You can also use other compiler options, such as the <bpt id=\"p1\">**</bpt>/out:<ept id=\"p1\">**</ept> option.","pos":[3233,3303],"source":" You can also use other compiler options, such as the **/out:** option."},{"pos":[3310,3421],"content":"The following example creates a library assembly named <ph id=\"ph1\">`myCodeAssembly.dll`</ph> from a code module called <ph id=\"ph2\">`myCode`</ph>.","source":"The following example creates a library assembly named `myCodeAssembly.dll` from a code module called `myCode`."},{"pos":[3568,3576],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Creating Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/create-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[3580,3660],"source":"[Creating Assemblies](../../../docs/framework/app-domains/create-assemblies.md) "},{"content":"<bpt id=\"p1\">[</bpt>Multifile Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/multifile-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[3664,3748],"source":"[Multifile Assemblies](../../../docs/framework/app-domains/multifile-assemblies.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Build a Multifile Assembly<ept id=\"p1\">](../../../docs/framework/app-domains/how-to-build-a-multifile-assembly.md)</ept><ph id=\"ph1\"> </ph>","pos":[3752,3863],"source":"[How to: Build a Multifile Assembly](../../../docs/framework/app-domains/how-to-build-a-multifile-assembly.md) "},{"content":"<bpt id=\"p1\">[</bpt>Programming with Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/programming-with-assemblies.md)</ept>","pos":[3867,3964],"source":"[Programming with Assemblies](../../../docs/framework/app-domains/programming-with-assemblies.md)"}]}