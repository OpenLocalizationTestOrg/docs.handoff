{"content":"---\ntitle: \"UInteger Data Type (Visual Basic)\"\nms.date: 01/31/2018\nf1_keywords: \n  - \"vb.uinteger\"\nhelpviewer_keywords: \n  - \"numbers [Visual Basic], whole\"\n  - \"UInteger data type\"\n  - \"literal type characters [Visual Basic], UI\"\n  - \"whole numbers\"\n  - \"integral data types [Visual Basic]\"\n  - \"integer numbers\"\n  - \"numbers [Visual Basic], integer\"\n  - \"integers [Visual Basic], data types\"\n  - \"integers [Visual Basic], types\"\n  - \"UI literal type characters [Visual Basic]\"\n  - \"data types [Visual Basic], integral\"\nms.assetid: db7ddd34-4f23-46f5-84dd-8b0f83bb8729\n---\n# UInteger data type\n\nHolds unsigned 32-bit (4-byte) integers ranging in value from 0 through 4,294,967,295.  \n  \n## Remarks\n\n The `UInteger` data type provides the largest unsigned value in the most efficient data width.  \n  \n The default value of `UInteger` is 0.  \n  \n## Literal assignments\n\nYou can declare and initialize a `UInteger` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal. If the integer literal is outside the range of `UInteger` (that is, if it is less than <xref:System.UInt32.MinValue?displayProperty=nameWithType> or greater than <xref:System.UInt32.MaxValue?displayProperty=nameWithType>, a compilation error occurs.\n\nIn the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to `UInteger` values.\n  \n[!code-vb[UInteger](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#UInt)]  \n\n> [!NOTE] \n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[UInteger](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#UIntS)]  \n\nStarting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits. For example:\n\n```vb\nDim number As UInteger = &H_0F8C_0326\n```\n\n[!INCLUDE [supporting-underscores](../../../../includes/vb-separator-langversion.md)]\n\nNumeric literals can also include the `UI` or `ui` [type character](../../programming-guide/language-features/data-types/type-characters.md) to denote the `UInteger` data type, as the following example shows.\n\n```vb\nDim number = &H_0FAC_14D7ui\n```\n\n## Programming tips\n\n The `UInteger` and `Integer` data types provide optimal performance on a 32-bit processor, because the smaller integer types (`UShort`, `Short`, `Byte`, and `SByte`), even though they use fewer bits, take more time to load, store, and fetch.  \n  \n-   **Negative Numbers.** Because `UInteger` is an unsigned type, it cannot represent a negative number. If you use the unary minus (`-`) operator on an expression that evaluates to type `UInteger`, Visual Basic converts the expression to `Long` first.  \n  \n-   **CLS Compliance.** The `UInteger` data type is not part of the [Common Language Specification](https://www.ecma-international.org/publications/standards/Ecma-335.htm) (CLS), so CLS-compliant code cannot consume a component that uses it.\n  \n-   **Interop Considerations.** If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that types such as `uint` can have a different data width (16 bits) in other environments. If you are passing a 16-bit argument to such a component, declare it as `UShort` instead of `UInteger` in your managed Visual Basic code.  \n  \n-   **Widening.** The `UInteger` data type widens to `Long`, `ULong`, `Decimal`, `Single`, and `Double`. This means you can convert `UInteger` to any of these types without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error.  \n  \n-   **Type Characters.** Appending the literal type characters `UI` to a literal forces it to the `UInteger` data type. `UInteger` has no identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.UInt32?displayProperty=nameWithType> structure.  \n  \n## See also\n\n- <xref:System.UInt32>\n- [Data Types](../../../visual-basic/language-reference/data-types/index.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)\n- [How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)\n- [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n","nodes":[{"pos":[4,569],"embed":true,"restype":"x-metadata","content":"title: \"UInteger Data Type (Visual Basic)\"\nms.date: 01/31/2018\nf1_keywords: \n  - \"vb.uinteger\"\nhelpviewer_keywords: \n  - \"numbers [Visual Basic], whole\"\n  - \"UInteger data type\"\n  - \"literal type characters [Visual Basic], UI\"\n  - \"whole numbers\"\n  - \"integral data types [Visual Basic]\"\n  - \"integer numbers\"\n  - \"numbers [Visual Basic], integer\"\n  - \"integers [Visual Basic], data types\"\n  - \"integers [Visual Basic], types\"\n  - \"UI literal type characters [Visual Basic]\"\n  - \"data types [Visual Basic], integral\"\nms.assetid: db7ddd34-4f23-46f5-84dd-8b0f83bb8729","nodes":[{"content":"UInteger Data Type (Visual Basic)","nodes":[{"pos":[0,33],"content":"UInteger Data Type (Visual Basic)","nodes":[{"content":"UInteger Data Type (Visual Basic)","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[576,594],"content":"UInteger data type","linkify":"UInteger data type","nodes":[{"content":"UInteger data type","pos":[0,18]}]},{"content":"Holds unsigned 32-bit (4-byte) integers ranging in value from 0 through 4,294,967,295.","pos":[596,682]},{"pos":[691,698],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[701,795],"content":"The <ph id=\"ph1\">`UInteger`</ph> data type provides the largest unsigned value in the most efficient data width.","source":"The `UInteger` data type provides the largest unsigned value in the most efficient data width."},{"pos":[802,839],"content":"The default value of <ph id=\"ph1\">`UInteger`</ph> is 0.","source":"The default value of `UInteger` is 0."},{"pos":[848,867],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`UInteger`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","pos":[869,1052],"source":"You can declare and initialize a `UInteger` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`UInteger`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt32.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt32.MaxValue?displayProperty=nameWithType&gt;</ph>, a compilation error occurs.","pos":[1053,1302],"source":" If the integer literal is outside the range of `UInteger` (that is, if it is less than <xref:System.UInt32.MinValue?displayProperty=nameWithType> or greater than <xref:System.UInt32.MaxValue?displayProperty=nameWithType>, a compilation error occurs."},{"pos":[1304,1462],"content":"In the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`UInteger`</ph> values.","source":"In the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to `UInteger` values."},{"pos":[1589,1805],"content":"[!NOTE] \nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[9,214],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[1807,1964],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"content":"Starting with Visual Basic 15.5, you can also use the underscore character (<ph id=\"ph1\">`_`</ph>) as a leading separator between the prefix and the hexadecimal, binary, or octal digits.","pos":[2088,2256],"source":"Starting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits."},{"content":"For example:","pos":[2257,2269]},{"pos":[2407,2615],"content":"Numeric literals can also include the <ph id=\"ph1\">`UI`</ph> or <ph id=\"ph2\">`ui`</ph> <bpt id=\"p1\">[</bpt>type character<ept id=\"p1\">](../../programming-guide/language-features/data-types/type-characters.md)</ept> to denote the <ph id=\"ph3\">`UInteger`</ph> data type, as the following example shows.","source":"Numeric literals can also include the `UI` or `ui` [type character](../../programming-guide/language-features/data-types/type-characters.md) to denote the `UInteger` data type, as the following example shows."},{"pos":[2659,2675],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"pos":[2678,2919],"content":"The <ph id=\"ph1\">`UInteger`</ph> and <ph id=\"ph2\">`Integer`</ph> data types provide optimal performance on a 32-bit processor, because the smaller integer types (<ph id=\"ph3\">`UShort`</ph>, <ph id=\"ph4\">`Short`</ph>, <ph id=\"ph5\">`Byte`</ph>, and <ph id=\"ph6\">`SByte`</ph>), even though they use fewer bits, take more time to load, store, and fetch.","source":"The `UInteger` and `Integer` data types provide optimal performance on a 32-bit processor, because the smaller integer types (`UShort`, `Short`, `Byte`, and `SByte`), even though they use fewer bits, take more time to load, store, and fetch."},{"content":"<bpt id=\"p1\">**</bpt>Negative Numbers.<ept id=\"p1\">**</ept>","pos":[2929,2950],"source":"**Negative Numbers.**"},{"content":"Because <ph id=\"ph1\">`UInteger`</ph> is an unsigned type, it cannot represent a negative number.","pos":[2951,3029],"source":" Because `UInteger` is an unsigned type, it cannot represent a negative number."},{"content":"If you use the unary minus (<ph id=\"ph1\">`-`</ph>) operator on an expression that evaluates to type <ph id=\"ph2\">`UInteger`</ph>, Visual Basic converts the expression to <ph id=\"ph3\">`Long`</ph> first.","pos":[3030,3177],"source":" If you use the unary minus (`-`) operator on an expression that evaluates to type `UInteger`, Visual Basic converts the expression to `Long` first."},{"content":"<bpt id=\"p1\">**</bpt>CLS Compliance.<ept id=\"p1\">**</ept>","pos":[3187,3206],"source":"**CLS Compliance.**"},{"content":"The <ph id=\"ph1\">`UInteger`</ph> data type is not part of the <bpt id=\"p1\">[</bpt>Common Language Specification<ept id=\"p1\">](https://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> (CLS), so CLS-compliant code cannot consume a component that uses it.","pos":[3207,3424],"source":" The `UInteger` data type is not part of the [Common Language Specification](https://www.ecma-international.org/publications/standards/Ecma-335.htm) (CLS), so CLS-compliant code cannot consume a component that uses it."},{"content":"<bpt id=\"p1\">**</bpt>Interop Considerations.<ept id=\"p1\">**</ept>","pos":[3432,3459],"source":"**Interop Considerations.**"},{"content":"If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that types such as <ph id=\"ph1\">`uint`</ph> can have a different data width (16 bits) in other environments.","pos":[3460,3677],"source":" If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that types such as `uint` can have a different data width (16 bits) in other environments."},{"content":"If you are passing a 16-bit argument to such a component, declare it as <ph id=\"ph1\">`UShort`</ph> instead of <ph id=\"ph2\">`UInteger`</ph> in your managed Visual Basic code.","pos":[3678,3815],"source":" If you are passing a 16-bit argument to such a component, declare it as `UShort` instead of `UInteger` in your managed Visual Basic code."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3825,3838],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`UInteger`</ph> data type widens to <ph id=\"ph2\">`Long`</ph>, <ph id=\"ph3\">`ULong`</ph>, <ph id=\"ph4\">`Decimal`</ph>, <ph id=\"ph5\">`Single`</ph>, and <ph id=\"ph6\">`Double`</ph>.","pos":[3839,3925],"source":" The `UInteger` data type widens to `Long`, `ULong`, `Decimal`, `Single`, and `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`UInteger`</ph> to any of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=nameWithType&gt;</ph> error.","pos":[3926,4076],"source":" This means you can convert `UInteger` to any of these types without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[4086,4106],"source":"**Type Characters.**"},{"content":"Appending the literal type characters <ph id=\"ph1\">`UI`</ph> to a literal forces it to the <ph id=\"ph2\">`UInteger`</ph> data type.","pos":[4107,4201],"source":" Appending the literal type characters `UI` to a literal forces it to the `UInteger` data type."},{"content":"<ph id=\"ph1\">`UInteger`</ph> has no identifier type character.","pos":[4202,4246],"source":"`UInteger` has no identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[4256,4275],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.UInt32?displayProperty=nameWithType&gt;</ph> structure.","pos":[4276,4388],"source":" The corresponding type in the .NET Framework is the <xref:System.UInt32?displayProperty=nameWithType> structure."},{"pos":[4397,4405],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4432,4506],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[4509,4617],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[4620,4713],"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept>","source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)"},{"pos":[4716,4888],"content":"<bpt id=\"p1\">[</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id=\"p1\">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept>","source":"[How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)"},{"pos":[4891,5021],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}