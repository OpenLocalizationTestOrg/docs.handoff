{"content":"---\ntitle: \"Securing Peer Channel Applications | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: d4a0311d-3f78-4525-9c4b-5c93c4492f28\ncaps.latest.revision: 13\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Securing Peer Channel Applications\nLike other bindings under the [!INCLUDE[vstecwinfx](../../../../includes/vstecwinfx-md.md)], `NetPeerTcpBinding` has security enabled by default and offers both transport- and message-based security (or both). This topic discusses these two types of security. The type of security is specified by the security mode tag in the binding specification (<xref:System.ServiceModel.NetPeerTcpBinding.Security%2A>`Mode`).  \n  \n## Transport-Based Security  \n Peer Channel supports two types of authentication credentials for securing transport, both of which require setting out the `ClientCredentialSettings.Peer` property on the associated `ChannelFactory`:  \n  \n-   Password. Clients use knowledge of a secret password to authenticate connections. When this credential type is used, `ClientCredentialSettings.Peer.MeshPassword` must carry a valid password and optionally an `X509Certificate2` instance.  \n  \n-   Certificate. Specific application authentication is used. When this credential type is used, you must use a concrete implementation of <xref:System.IdentityModel.Selectors.X509CertificateValidator> in `ClientCredentialSettings.Peer.PeerAuthentication`.  \n  \n## Message-Based Security  \n Using message security, an application can sign outgoing messages so that all receiving parties can verify the message is sent by a trusted party and that the message was not tampered with. Currently, Peer Channel supports only X.509 credential message signing.  \n  \n## Best Practices  \n  \n-   This section discusses the best practices for securing Peer Channel applications.  \n  \n### Enable Security with Peer Channel Applications  \n Due to the distributed nature of the Peer Channel protocols, it is hard to enforce mesh membership, confidentiality, and privacy in an unsecured mesh. It is also important to remember to secure communication between clients and the resolver service. Under Peer Name Resolution Protocol (PNRP), use secure names to avoid spoofing and other common attacks. Secure a custom resolver service by enabling security on the connection clients use to contact the resolver service, including both message- and transport-based security.  \n  \n### Use the Strongest Possible Security Model  \n For example, if each member of the mesh needs to be individually identified, use certificate-based authentication model. If that is not possible, use password-based authentication following current recommendations to keep them secure. This includes sharing passwords only with trusted parties, transmitting passwords using a secure medium, changing passwords frequently, and ensuring that passwords are strong (at least eight characters long, include at least one letter from both cases, a digit, and a special character).  \n  \n### Never Accept Self-Signed Certificates  \n Never accept a certificate credential based on subject names. Note that anyone can create a certificate, and anyone can choose a name that you are validating. To avoid the possibility of spoofing, validate certificates based on issuing authority credentials (either a trusted issuer or a root certification authority).  \n  \n### Use Message Authentication  \n Use message authentication to verify that a message originated from a trusted source and that no one has tampered with the message during transmission. Without message authentication, it is easy for a malicious client to spoof or tamper with messages in the mesh.  \n  \n## Peer Channel Code Examples  \n [Peer Channel Scenarios](../../../../docs/framework/wcf/feature-details/peer-channel-scenarios.md)  \n  \n## See Also  \n [Peer Channel Security](../../../../docs/framework/wcf/feature-details/peer-channel-security.md)   \n [Building a Peer Channel Application](../../../../docs/framework/wcf/feature-details/building-a-peer-channel-application.md)","nodes":[{"pos":[4,355],"nodes":[{"content":"Securing Peer Channel Applications | Microsoft Docs","nodes":[{"pos":[0,51],"content":"Securing Peer Channel Applications | Microsoft Docs","nodes":[{"content":"Securing Peer Channel Applications | Microsoft Docs","pos":[0,51]}]}],"pos":[6,60],"yaml":true}],"content":"title: \"Securing Peer Channel Applications | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: d4a0311d-3f78-4525-9c4b-5c93c4492f28\ncaps.latest.revision: 13\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[362,396],"content":"Securing Peer Channel Applications","linkify":"Securing Peer Channel Applications","nodes":[{"content":"Securing Peer Channel Applications","pos":[0,34]}]},{"content":"Like other bindings under the <ph id=\"ph1\">[!INCLUDE[vstecwinfx](../../../../includes/vstecwinfx-md.md)]</ph>, <ph id=\"ph2\">`NetPeerTcpBinding`</ph> has security enabled by default and offers both transport- and message-based security (or both).","pos":[397,606],"source":"Like other bindings under the [!INCLUDE[vstecwinfx](../../../../includes/vstecwinfx-md.md)], `NetPeerTcpBinding` has security enabled by default and offers both transport- and message-based security (or both)."},{"content":"This topic discusses these two types of security.","pos":[607,656]},{"content":"The type of security is specified by the security mode tag in the binding specification (<ph id=\"ph1\">&lt;xref:System.ServiceModel.NetPeerTcpBinding.Security%2A&gt;</ph><ph id=\"ph2\">`Mode`</ph>).","pos":[657,810],"source":" The type of security is specified by the security mode tag in the binding specification (<xref:System.ServiceModel.NetPeerTcpBinding.Security%2A>`Mode`)."},{"pos":[819,843],"content":"Transport-Based Security","linkify":"Transport-Based Security","nodes":[{"content":"Transport-Based Security","pos":[0,24]}]},{"pos":[847,1047],"content":"Peer Channel supports two types of authentication credentials for securing transport, both of which require setting out the <ph id=\"ph1\">`ClientCredentialSettings.Peer`</ph> property on the associated <ph id=\"ph2\">`ChannelFactory`</ph>:","source":"Peer Channel supports two types of authentication credentials for securing transport, both of which require setting out the `ClientCredentialSettings.Peer` property on the associated `ChannelFactory`:"},{"content":"Password.","pos":[1057,1066]},{"content":"Clients use knowledge of a secret password to authenticate connections.","pos":[1067,1138]},{"content":"When this credential type is used, <ph id=\"ph1\">`ClientCredentialSettings.Peer.MeshPassword`</ph> must carry a valid password and optionally an <ph id=\"ph2\">`X509Certificate2`</ph> instance.","pos":[1139,1293],"source":" When this credential type is used, `ClientCredentialSettings.Peer.MeshPassword` must carry a valid password and optionally an `X509Certificate2` instance."},{"content":"Certificate.","pos":[1303,1315]},{"content":"Specific application authentication is used.","pos":[1316,1360]},{"content":"When this credential type is used, you must use a concrete implementation of <ph id=\"ph1\">&lt;xref:System.IdentityModel.Selectors.X509CertificateValidator&gt;</ph> in <ph id=\"ph2\">`ClientCredentialSettings.Peer.PeerAuthentication`</ph>.","pos":[1361,1555],"source":" When this credential type is used, you must use a concrete implementation of <xref:System.IdentityModel.Selectors.X509CertificateValidator> in `ClientCredentialSettings.Peer.PeerAuthentication`."},{"pos":[1564,1586],"content":"Message-Based Security","linkify":"Message-Based Security","nodes":[{"content":"Message-Based Security","pos":[0,22]}]},{"content":"Using message security, an application can sign outgoing messages so that all receiving parties can verify the message is sent by a trusted party and that the message was not tampered with.","pos":[1590,1779]},{"content":"Currently, Peer Channel supports only X.509 credential message signing.","pos":[1780,1851]},{"pos":[1860,1874],"content":"Best Practices","linkify":"Best Practices","nodes":[{"content":"Best Practices","pos":[0,14]}]},{"content":"This section discusses the best practices for securing Peer Channel applications.","pos":[1884,1965]},{"pos":[1975,2021],"content":"Enable Security with Peer Channel Applications","linkify":"Enable Security with Peer Channel Applications","nodes":[{"content":"Enable Security with Peer Channel Applications","pos":[0,46]}]},{"content":"Due to the distributed nature of the Peer Channel protocols, it is hard to enforce mesh membership, confidentiality, and privacy in an unsecured mesh.","pos":[2025,2175]},{"content":"It is also important to remember to secure communication between clients and the resolver service.","pos":[2176,2274]},{"content":"Under Peer Name Resolution Protocol (PNRP), use secure names to avoid spoofing and other common attacks.","pos":[2275,2379]},{"content":"Secure a custom resolver service by enabling security on the connection clients use to contact the resolver service, including both message- and transport-based security.","pos":[2380,2550]},{"pos":[2560,2601],"content":"Use the Strongest Possible Security Model","linkify":"Use the Strongest Possible Security Model","nodes":[{"content":"Use the Strongest Possible Security Model","pos":[0,41]}]},{"content":"For example, if each member of the mesh needs to be individually identified, use certificate-based authentication model.","pos":[2605,2725]},{"content":"If that is not possible, use password-based authentication following current recommendations to keep them secure.","pos":[2726,2839]},{"content":"This includes sharing passwords only with trusted parties, transmitting passwords using a secure medium, changing passwords frequently, and ensuring that passwords are strong (at least eight characters long, include at least one letter from both cases, a digit, and a special character).","pos":[2840,3127]},{"pos":[3137,3174],"content":"Never Accept Self-Signed Certificates","linkify":"Never Accept Self-Signed Certificates","nodes":[{"content":"Never Accept Self-Signed Certificates","pos":[0,37]}]},{"content":"Never accept a certificate credential based on subject names.","pos":[3178,3239]},{"content":"Note that anyone can create a certificate, and anyone can choose a name that you are validating.","pos":[3240,3336]},{"content":"To avoid the possibility of spoofing, validate certificates based on issuing authority credentials (either a trusted issuer or a root certification authority).","pos":[3337,3496]},{"pos":[3506,3532],"content":"Use Message Authentication","linkify":"Use Message Authentication","nodes":[{"content":"Use Message Authentication","pos":[0,26]}]},{"content":"Use message authentication to verify that a message originated from a trusted source and that no one has tampered with the message during transmission.","pos":[3536,3687]},{"content":"Without message authentication, it is easy for a malicious client to spoof or tamper with messages in the mesh.","pos":[3688,3799]},{"pos":[3808,3834],"content":"Peer Channel Code Examples","linkify":"Peer Channel Code Examples","nodes":[{"content":"Peer Channel Code Examples","pos":[0,26]}]},{"pos":[3838,3936],"content":"<bpt id=\"p1\">[</bpt>Peer Channel Scenarios<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/peer-channel-scenarios.md)</ept>","source":"[Peer Channel Scenarios](../../../../docs/framework/wcf/feature-details/peer-channel-scenarios.md)"},{"pos":[3945,3953],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Peer Channel Security<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/peer-channel-security.md)</ept><ph id=\"ph1\"> </ph>","pos":[3957,4054],"source":"[Peer Channel Security](../../../../docs/framework/wcf/feature-details/peer-channel-security.md) "},{"content":"<bpt id=\"p1\">[</bpt>Building a Peer Channel Application<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/building-a-peer-channel-application.md)</ept>","pos":[4058,4182],"source":"[Building a Peer Channel Application](../../../../docs/framework/wcf/feature-details/building-a-peer-channel-application.md)"}]}