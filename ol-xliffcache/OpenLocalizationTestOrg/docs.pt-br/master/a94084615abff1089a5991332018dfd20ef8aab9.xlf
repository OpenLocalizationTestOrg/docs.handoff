<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-using-client-application-services.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a94084615abff1089a5991332018dfd20ef8aab9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\common-client-technologies\walkthrough-using-client-application-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">569d6395396dd4d78e353b0ead66722dbf75e210</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d441d9d5ace8af6efb79b1de5ba1d767efc302bb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Using Client Application Services | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Using Client Application Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to create a Windows application that uses client application services to authenticate users and retrieve user roles and settings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this walkthrough, you perform the following tasks:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Create a Windows Forms application and use the <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> project designer to enable and configure client application services.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create a simple ASP.NET Web Service application to host the application services and test your client configuration.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Add forms authentication to your application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You will start by using a hard-coded user name and password to test the service.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You will then add a login form by specifying it as a credentials provider in your application configuration.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add role-based functionality, enabling and displaying a button only for users in the "manager" role.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Access Web settings.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You will start by loading Web settings for an authenticated (test) user on the <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> page of the project designer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You will then use the Windows Forms Designer to bind a text box to a Web setting.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Finally, you will save the modified value back to the server.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Implement logout.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You will add a logout option to the form and call a logout method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Enable offline mode.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You will provide a check box so that users can specify their connection status.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You will then use this value to specify whether the client application service providers will use locally cached data instead of accessing their Web services.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Finally, you will re-authenticate the current user when the application returns to online mode.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You need the following component to complete this walkthrough:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vs_orcas_long](../../../includes/vs-orcas-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Creating the Client Application</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The first thing that you will do is create a Windows Forms project.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This walkthrough uses Windows Forms because more people are familiar with it, but the process is similar for Windows Presentation Foundation (WPF) projects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To create a client application and enable client application services</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>, select the <bpt id="p1">**</bpt>File &amp;#124; New &amp;#124; Project<ept id="p1">**</ept> menu option.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, in the <bpt id="p2">**</bpt>Project types<ept id="p2">**</ept> pane, expand the <bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Visual C#<ept id="p4">**</ept> node and select the <bpt id="p5">**</bpt>Windows<ept id="p5">**</ept> project type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Make sure that <bpt id="p1">**</bpt>.NET Framework 3.5<ept id="p1">**</ept> is selected, and then select the <bpt id="p2">**</bpt>Windows Forms Application<ept id="p2">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Change the project <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> to <ph id="ph1">`ClientAppServicesDemo`</ph>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A new Windows Forms project is opened in <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>ClientAppServicesDemo Properties<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The project designer appears.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> tab, select <bpt id="p2">**</bpt>Enable client application services<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Make sure that <bpt id="p1">**</bpt>Use Forms authentication<ept id="p1">**</ept> is selected, and then set <bpt id="p2">**</bpt>Authentication service location<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Roles service location<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Web settings service location<ept id="p4">**</ept> to <ph id="ph1">`http://localhost:55555/AppServices`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>, on the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> tab, set <bpt id="p2">**</bpt>Authentication mode<ept id="p2">**</ept> to <bpt id="p3">**</bpt>Application-defined<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The designer stores the specified settings in the application's app.config file.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>At this point, the application is configured to access all three services from the same host.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the next section, you will create the host as a simple Web service application, enabling you to test your client configuration.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Creating the Application Services Host</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In this section, you will create a simple Web service application that accesses user data from a local SQL Server Compact database file.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Then, you will populate the database using the <bpt id="p1">[</bpt>ASP.NET Web Site Administration Tool<ept id="p1">](http://msdn.microsoft.com/library/100ddd8b-7d11-4df9-91ef-0bbbe92e5aec)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This simple configuration enables you to quickly test your client application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As an alternative, you can configure the Web service host to access user data from a full SQL Server database or through custom <ph id="ph1">&lt;xref:System.Web.Security.MembershipProvider&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.Security.RoleProvider&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating and Configuring the Application Services Database for SQL Server<ept id="p1">](http://msdn.microsoft.com/library/ab894e83-7e2f-4af8-a116-b1bff8f815b2)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the following procedure, you create and configure the AppServices Web service.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To create and configure the application services host</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the ClientAppServicesDemo solution, and then on the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu, select <bpt id="p3">**</bpt>Add &amp;#124; New Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog box, in the <bpt id="p2">**</bpt>Project types<ept id="p2">**</ept> pane, expand the <bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Visual C#<ept id="p4">**</ept> node and select the <bpt id="p5">**</bpt>Web<ept id="p5">**</ept> project type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Make sure that <bpt id="p1">**</bpt>.NET Framework 3.5<ept id="p1">**</ept> is selected, and then select the <bpt id="p2">**</bpt>ASP.NET Web Service Application<ept id="p2">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Change the project <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> to <ph id="ph1">`AppServices`</ph> and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A new ASP.NET Web service application project is added to the solution, and the Service1.asmx.vb or Service1.asmx.cs file appears in the editor.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The Service1.asmx.vb or Service1.asmx.cs file is not used in this example.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you want to keep your work environment uncluttered, you can close it and delete it from <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the AppServices project, and then on the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu, select <bpt id="p3">**</bpt>AppServices Properties<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The project designer appears.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Web<ept id="p1">**</ept> tab, make sure that <bpt id="p2">**</bpt>Use Visual Studio Development Server<ept id="p2">**</ept> is selected.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Specific port<ept id="p1">**</ept>, specify a value of <ph id="ph1">`55555`</ph>, and then set <bpt id="p2">**</bpt>Virtual path<ept id="p2">**</ept> to <ph id="ph2">`/AppServices`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Save all files.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open Web.config and find the <ph id="ph1">`&lt;system.web&gt;`</ph> opening tag.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Add the following markup before the <ph id="ph1">`&lt;system.web&gt;`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`authenticationService`</ph>, <ph id="ph2">`profileService`</ph>, and <ph id="ph3">`roleService`</ph> elements in this markup enable and configure the application services.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For testing purposes, the <ph id="ph1">`requireSSL`</ph> attribute of the <ph id="ph2">`authenticationService`</ph> element is set to "false".</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`readAccessProperties`</ph> and <ph id="ph2">`writeAccessProperties`</ph> attributes of the <ph id="ph3">`profileService`</ph> element indicate that the <ph id="ph4">`WebSettingsTestText`</ph> property is read/write.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In production code, you should always access the authentication service over the secure sockets layer (SSL, by using the HTTPS protocol).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For information about how to set up SSL, see <bpt id="p1">[</bpt>Configuring Secure Sockets Layer (IIS 6.0 Operations Guide)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=91844)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Add the following markup after the <ph id="ph1">`&lt;system.web&gt;`</ph> opening tag so that it is within the <ph id="ph2">`&lt;system.web&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`profile`</ph> element configures a single Web setting named <ph id="ph2">`WebSettingsTestText`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the following procedure, you use the ASP.NET Web Site Administration tool to complete the service configuration and populate the local database file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You will add two users named <ph id="ph1">`employee`</ph> and <ph id="ph2">`manager`</ph> belonging to two roles with the same names.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The user passwords are <ph id="ph1">`employee!`</ph> and <ph id="ph2">`manager!`</ph> respectively.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To configure membership and roles</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the AppServices project, and then on the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu, select <bpt id="p3">**</bpt>ASP.NET Configuration<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ASP.NET Web Site Administration Tool<ept id="p1">**</ept> appears.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Security<ept id="p1">**</ept> tab, click <bpt id="p2">**</bpt>Use the security Setup Wizard to configure security step by step<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Security Setup Wizard<ept id="p1">**</ept> appears and displays the <bpt id="p2">**</bpt>Welcome<ept id="p2">**</ept> step.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Select Access Method<ept id="p1">**</ept> step appears.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>From the internet<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This configures the service to use Forms authentication instead of Windows authentication.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept> twice.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Define Roles<ept id="p1">**</ept> step appears.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Enable roles for this Web site<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create New Role<ept id="p1">**</ept> form appears.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Role Name<ept id="p1">**</ept> text box, type <ph id="ph1">`manager`</ph> and then click <bpt id="p2">**</bpt>Add Role<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Existing Roles<ept id="p1">**</ept> table appears with the specified value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Role Name<ept id="p1">**</ept> text box, replace <ph id="ph1">`manager`</ph> with <ph id="ph2">`employee`</ph> and then click <bpt id="p2">**</bpt>Add Role<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The new value appears in the <bpt id="p1">**</bpt>Existing Roles<ept id="p1">**</ept> table.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add New Users<ept id="p1">**</ept> step appears.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Create User<ept id="p1">**</ept> form, specify the following values.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>User Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Password<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Confirm Password<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>E-mail<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Question<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Answer<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Create User<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A success message appears.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>E-mail<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Security Question<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Security Answer<ept id="p3">**</ept> values are required by the form, but are not used in this example.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Continue<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create User<ept id="p1">**</ept> form reappears.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Create User<ept id="p1">**</ept> form, specify the following values.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>User Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Password<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Confirm Password<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>E-mail<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Question<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Answer<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Create User<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A success message appears.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Web Site Administration Tool<ept id="p1">**</ept> reappears.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Manager users<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The list of users appears.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Edit roles<ept id="p1">**</ept> for the <bpt id="p2">**</bpt>employee<ept id="p2">**</ept> user, and then select the <bpt id="p3">**</bpt>employee<ept id="p3">**</ept> role.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Edit roles<ept id="p1">**</ept> for the <bpt id="p2">**</bpt>manager<ept id="p2">**</ept> user, and then select the <bpt id="p3">**</bpt>manager<ept id="p3">**</ept> role.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Close the browser window that hosts the <bpt id="p1">**</bpt>Web Site Administration Tool<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If a message box appears asking if you want to reload the modified Web.config file, click <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This completes the Web service setup.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>At this point, you can press F5 to run the client application, and the <bpt id="p1">**</bpt>ASP.NET Development Server<ept id="p1">**</ept> will start automatically along with your client application.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The server will continue to run after you exit the application, but will restart when you restart the application.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This allows it to detect any changes you have made to Web.config.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>To stop the server manually, right-click the ASP.NET Development Server icon in the notification area of the taskbar and then click <bpt id="p1">**</bpt>Stop<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This is useful occasionally to make sure that a clean restart occurs.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Adding Forms Authentication</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In the following procedure, you add code to the main form that attempts to validate the user, and denies access when the user supplies invalid credentials.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You use a hard-coded user name and password to test the service.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To validate the user in your application code</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, in the ClientAppServicesDemo project, add a reference to the System.Web assembly.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Select the Form1 file and then select <bpt id="p1">**</bpt>View &amp;#124; Code<ept id="p1">**</ept> from the <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> main menu.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In the code editor, add the following statements to the top of the Form1 file.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, double-click Form1 to display the designer.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In the designer, double-click the form surface to generate a <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Load?displayProperty=fullName&gt;</ph> event handler named <ph id="ph2">`Form1_Load`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The code editor appears with the cursor in the <ph id="ph1">`Form1_Load`</ph> method.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`Form1_Load`</ph> method.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This code denies access to unauthenticated users by exiting the application.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Alternatively, you could allow unauthenticated users access to the form, but deny access to specific functionality.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Normally, you will not hard-code the user name and password like this, but it is useful for testing purposes.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In the next section, you will replace this code with more robust code that displays a login dialog box and includes exception handling.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`static`</ph> <ph id="ph2">&lt;xref:System.Web.Security.Membership.ValidateUser%2A?displayProperty=fullName&gt;</ph> method is in the <ph id="ph3">[!INCLUDE[dnprdnext](../../../includes/dnprdnext-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This method delegates its work to the configured authentication provider, and returns <ph id="ph1">`true`</ph> if authentication is successful.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Your application does not require a direct reference to the client authentication provider.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>You can now press F5 to run the application, and because you provide a correct user name and password, you will see the form.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If you are unable to run the application, try stopping the ASP.NET Development Server.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>When the server restarts, verify that the port is set to 55555.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To see the error message instead, change the <ph id="ph1">&lt;xref:System.Web.Security.Membership.ValidateUser%2A&gt;</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For example, replace the second <ph id="ph1">`"manager!"`</ph> parameter with an incorrect password like <ph id="ph2">`"MANAGER"`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Adding a Login Form as a Credentials Provider</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You can acquire the user credentials in your application code and pass them to the <ph id="ph1">&lt;xref:System.Web.Security.Membership.ValidateUser%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>However, it is often useful to keep your credentials-acquiring code separate from your application code, in case you want to change it later.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In the following procedure, you configure your application to use a credentials provider, and then change your <ph id="ph1">&lt;xref:System.Web.Security.Membership.ValidateUser%2A&gt;</ph> method call to pass <ph id="ph2">&lt;xref:System.String.Empty&gt;</ph> for both parameters.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The empty strings signal the <ph id="ph1">&lt;xref:System.Web.Security.Membership.ValidateUser%2A&gt;</ph> method to call the <ph id="ph2">&lt;xref:System.Web.ClientServices.Providers.IClientFormsAuthenticationCredentialsProvider.GetCredentials%2A&gt;</ph> method of the configured credentials provider.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>To configure your application to use a credentials provider</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the ClientAppServicesDemo project, and then on the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu, select <bpt id="p3">**</bpt>ClientAppServicesDemo Properties<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The project designer appears.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> tab, set <bpt id="p2">**</bpt>Optional: Credential provider<ept id="p2">**</ept> to the following value.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This value indicates the assembly-qualified type name.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>In the Form1 code file, replace the code in the <ph id="ph1">`Form1_Load`</ph> method with the following code.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This code displays a welcome message and then calls the <ph id="ph1">`ValidateUsingCredentialsProvider`</ph> method that you will add in the next step.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If the user is not authenticated, the <ph id="ph1">`ValidateUsingCredentialsProvider`</ph> method returns <ph id="ph2">`false`</ph> and the <ph id="ph3">`Form1_Load`</ph> method returns.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This prevents any additional code from running before the application exits.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The welcome message is useful to make it clear when the application restarts.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>You will add code to restart the application when you implement logout later in this walkthrough.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Add the following method after the <ph id="ph1">`Form1_Load`</ph> method.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This method passes empty strings to the <ph id="ph1">`static`</ph> <ph id="ph2">&lt;xref:System.Web.Security.Membership.ValidateUser%2A?displayProperty=fullName&gt;</ph> method, which causes the Login dialog box to appear.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If the authentication service is unavailable, the <ph id="ph1">&lt;xref:System.Web.Security.Membership.ValidateUser%2A&gt;</ph> method will throw a <ph id="ph2">&lt;xref:System.Net.WebException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`ValidateUsingCredentialsProvider`</ph> method displays a warning message and asks if the user wants to try again in offline mode.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This functionality requires the <bpt id="p1">**</bpt>Save password hash locally to enable offline login<ept id="p1">**</ept> feature described in <bpt id="p2">[</bpt>How to: Configure Client Application Services<ept id="p2">](../../../docs/framework/common-client-technologies/how-to-configure-client-application-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>This feature is enabled by default for new projects.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If the user is not validated, the <ph id="ph1">`ValidateUsingCredentialsProvider`</ph> method displays an error message and exits the application.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Finally, this method returns the result of the authentication attempt.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Creating a Login Form</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A credentials provider is a class that implements the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.IClientFormsAuthenticationCredentialsProvider&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This interface has a single method named <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.IClientFormsAuthenticationCredentialsProvider.GetCredentials%2A&gt;</ph> that returns a <ph id="ph2">&lt;xref:System.Web.ClientServices.Providers.ClientFormsAuthenticationCredentials&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The following procedures describe how to create a login dialog box that implements <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.IClientFormsAuthenticationCredentialsProvider.GetCredentials%2A&gt;</ph> to display itself and return the user-specified credentials.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Separate procedures are provided for <ph id="ph1">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> and C# because <ph id="ph2">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> provides a <bpt id="p1">**</bpt>Login Form<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This saves some time and coding effort.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>To create a login dialog box as a credentials provider in Visual Basic</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the ClientAppServicesDemo project, and then on the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu, select <bpt id="p3">**</bpt>Add New Item<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, select the <bpt id="p2">**</bpt>Login Form<ept id="p2">**</ept> template, change the item <bpt id="p3">**</bpt>Name<ept id="p3">**</ept> to <ph id="ph1">`Login.vb`</ph>, and then click <bpt id="p4">**</bpt>Add<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The login dialog box appears in the Windows Forms Designer.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In the designer, select the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button and then, in the <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> window, set <ph id="ph1">`DialogResult`</ph> to <ph id="ph2">`OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In the designer, add a <ph id="ph1">`CheckBox`</ph> control to the form under the <bpt id="p1">**</bpt>Password<ept id="p1">**</ept> text box.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, specify a <bpt id="p2">**</bpt>(Name)<ept id="p2">**</ept> value of <ph id="ph1">`rememberMeCheckBox`</ph> and a <bpt id="p3">**</bpt>Text<ept id="p3">**</ept> value of <ph id="ph2">`&amp;Remember me`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>View &amp;#124; Code<ept id="p1">**</ept> from the <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> main menu.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>In the code editor, add the following code to the top of the file.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Modify the class signature so that the class implements the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.IClientFormsAuthenticationCredentialsProvider&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Make sure that the cursor is after <ph id="ph1">`IClientformsAuthenticationCredentialsProvider`</ph>, and then press ENTER to generate the <ph id="ph2">`GetCredentials`</ph> method.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.IClientFormsAuthenticationCredentialsProvider.GetCredentials%2A&gt;</ph> implementation and then replace it with the following code.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The following C# procedure provides the entire code listing for a simple login dialog box.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The layout for this dialog box is a bit crude, but the important part is the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.IClientFormsAuthenticationCredentialsProvider.GetCredentials%2A&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To create a login dialog box as a credentials provider in C#</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the ClientAppServicesDemo project, and then on the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu, select <bpt id="p3">**</bpt>Add Class<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, change the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> to <ph id="ph1">`Login.cs`</ph>, and then click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The Login.cs file opens in the code editor.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Replace the default code with the following code.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>You can now run the application and see the login dialog box appear.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>To test this code, try different credentials, both valid and invalid, and confirm that you can access the form only with valid credentials.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Valid user names are <ph id="ph1">`employee`</ph> and <ph id="ph2">`manager`</ph> with passwords <ph id="ph3">`employee!`</ph> and <ph id="ph4">`manager!`</ph> respectively.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Do not select <bpt id="p1">**</bpt>Remember me<ept id="p1">**</ept> at this point or you will not be able to login as another user until you implement logout later in this walkthrough.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Adding Role-Based Functionality</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In the following procedure, you add a button to the form and display it only for users in the manager role.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>To change the user interface based on user role</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, in the ClientAppServicesDemo project, select Form1 and then select <bpt id="p2">**</bpt>View &amp;#124; Designer<ept id="p2">**</ept> from the <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> main menu.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In the designer, add a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control to the form from the <bpt id="p1">**</bpt>ToolBox<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, set the following properties for the button.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(Name)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>managerOnlyButton</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Text<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>&amp;Manager task</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Visible<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In the code editor for Form1, add the following code to the end of the <ph id="ph1">`Form1_Load`</ph> method.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This code calls the <ph id="ph1">`DisplayButtonForManagerRole`</ph> method that you will add in the next step.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Add the following method to the end of the Form1 class.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This method calls the <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal.IsInRole%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> returned by the <ph id="ph3">`static`</ph> <ph id="ph4">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For applications configured to use client application services, this property returns a <ph id="ph1">&lt;xref:System.Web.ClientServices.ClientRolePrincipal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Because this class implements the <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> interface, you do not need to reference it explicitly.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If the user is in the "manager" role, the <ph id="ph1">`DisplayButtonForManagerRole`</ph> method sets the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property of the <ph id="ph3">`managerOnlyButton`</ph> to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This method also displays an error message if a <ph id="ph1">&lt;xref:System.Net.WebException&gt;</ph> is thrown, which indicates that the roles service is unavailable.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.ClientServices.ClientRolePrincipal.IsInRole%2A&gt;</ph> method will always return <ph id="ph2">`false`</ph> if the user login has expired.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This will not occur if your application calls the <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal.IsInRole%2A&gt;</ph> method one time shortly after authentication, as shown in the example code for this walkthrough.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If your application must retrieve user roles at other times, you might want to add code to revalidate users whose login has expired.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If all valid users are assigned to roles, you can determine whether the login has expired by calling the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If no roles are returned, the login has expired.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>For an example of this functionality, see the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>This functionality is only necessary if you have selected <bpt id="p1">**</bpt>Require users to log on again whenever the server cookie expires<ept id="p1">**</ept> in your application configuration.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Configure Client Application Services<ept id="p1">](../../../docs/framework/common-client-technologies/how-to-configure-client-application-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>If authentication is successful, the client authentication provider sets the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</ph> property to an instance of the <ph id="ph2">&lt;xref:System.Web.ClientServices.ClientRolePrincipal&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This class implements the <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal.IsInRole%2A&gt;</ph> method so that the work is delegated to the configured role provider.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>As before, your application code does not require a direct reference to the service provider.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>You can now run the application and log in as employee to see that the button does not appear, and then log in as manager to see the button.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Accessing Web Settings</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>In the following procedure, you add a text box to the form and bind it to a Web setting.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Like the previous code that uses authentication and roles, your settings code does not access the settings provider directly.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Instead, it uses the strongly-typed <ph id="ph1">`Settings`</ph> class (accessed as <ph id="ph2">`Properties.Settings.Default`</ph> in C# and <ph id="ph3">`My.Settings`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>) generated for your project by <ph id="ph5">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>To use Web settings in your user interface</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Make sure that the <bpt id="p1">**</bpt>ASP.NET Web Development Server<ept id="p1">**</ept> is still running by checking the notification area of the taskbar.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If you have stopped the server, restart the application (which starts the server automatically) then close the login dialog box.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the ClientAppServicesDemo project, and then on the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu, select <bpt id="p3">**</bpt>ClientAppServicesDemo Properties<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The project designer appears.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> tab, click <bpt id="p2">**</bpt>Load Web Settings<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>Login<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Enter credentials for employee or manager and click <bpt id="p1">**</bpt>Log In<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The Web setting you will use is configured for access by authenticated users only, so clicking <bpt id="p1">**</bpt>Skip Login<ept id="p1">**</ept> will not load any settings.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WebSettingsTestText`</ph> setting appears in the designer with the default value of <ph id="ph2">`DefaultText`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Additionally, a <ph id="ph1">`Settings`</ph> class that contains a <ph id="ph2">`WebSettingsTestText`</ph> property is generated for your project.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, in the ClientAppServicesDemo project, select Form1 and then select <bpt id="p2">**</bpt>View &amp;#124; Designer<ept id="p2">**</ept> from the <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> main menu.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>In the designer, add a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control to the form.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, specify a <bpt id="p2">**</bpt>(Name)<ept id="p2">**</ept> value of <ph id="ph1">`webSettingsTestTextBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>In the code editor, add the following code to the end of the <ph id="ph1">`Form1_Load`</ph> method.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>This code calls the <ph id="ph1">`BindWebSettingsTestTextBox`</ph> method that you will add in the next step.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Add the following method to the end of the Form1 class.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>This method binds the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox.Text%2A&gt;</ph> property of the <ph id="ph2">`webSettingsTestTextBox`</ph> to the <ph id="ph3">`WebSettingsTestText`</ph> property of the <ph id="ph4">`Settings`</ph> class generated earlier in this procedure.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>This method also displays an error message if a <ph id="ph1">&lt;xref:System.Net.WebException&gt;</ph> is thrown, which indicates that the Web settings service is unavailable.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>You will typically use data binding to enable automatic two-way communication between a control and a Web setting.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>However, you can also access Web settings directly as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>In the designer, select the form, and then, in the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, click the <bpt id="p2">**</bpt>Events<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Select the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event and then press ENTER to generate an event handler.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Replace the generated method with the following code.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event handler calls the <ph id="ph2">`SaveSettings`</ph> method, which is also used by the logout functionality that you will add in the next section.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SaveSettings`</ph> method first confirms that the user has not logged out. It does this by checking the <ph id="ph2">&lt;xref:System.Security.Principal.IIdentity.AuthenticationType%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Security.Principal.IIdentity&gt;</ph> returned by the current principal.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The current principal is retrieved through the <ph id="ph1">`static`</ph> <ph id="ph2">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>If the user has been authenticated for client application services, the authentication type will be "ClientForms".</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SaveSettings`</ph> method cannot just check the <ph id="ph2">&lt;xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName&gt;</ph> property because the user might have a valid Windows identity after logout.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>If the user has not logged out, the <ph id="ph1">`SaveSettings`</ph> method calls the <ph id="ph2">&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</ph> method of the <ph id="ph3">`Settings`</ph> class generated earlier in this procedure.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This method can throw a <ph id="ph1">&lt;xref:System.Net.WebException&gt;</ph> if the authentication cookie has expired.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>This occurs only if you have selected <bpt id="p1">**</bpt>Require users to log on again whenever the server cookie expires<ept id="p1">**</ept> in your application configuration.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Configure Client Application Services<ept id="p1">](../../../docs/framework/common-client-technologies/how-to-configure-client-application-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SaveSettings`</ph> method handles cookie expiration by calling <ph id="ph2">&lt;xref:System.Web.Security.Membership.ValidateUser%2A&gt;</ph> to display the login dialog box.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>If the user logs in successfully, the <ph id="ph1">`SaveSettings`</ph> method tries to save the settings again by calling itself.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Like in previous code, the <ph id="ph1">`SaveSettings`</ph> method displays an error message if the remote service is unavailable.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>If the settings provider cannot access the remote service, the settings are still saved to the local cache and reloaded when the application restarts.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Add the following method to the end of the Form1 class.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>This code handles the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.ClientSettingsProvider.SettingsSaved?displayProperty=fullName&gt;</ph> event and displays a warning if any of the settings could not be saved.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.ClientSettingsProvider.SettingsSaved&gt;</ph> event does not occur if the settings service is unavailable or if the authentication cookie has expired.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>One example of when the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.ClientSettingsProvider.SettingsSaved&gt;</ph> event will occur is if the user has already logged out. You can test this event handler by adding logout code to the <ph id="ph2">`SaveSettings`</ph> method directly before the <ph id="ph3">&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Logout code that you can use is described in the next section.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>For C#, add the following code to the end of the <ph id="ph1">`Form1_Load`</ph> method.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This code associates the method you added in the last step with the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.ClientSettingsProvider.SettingsSaved&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>To test the application at this point, run it multiple times as both employee and manager, and type different values into the text box.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The values will persist across sessions on a per-user basis.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Implementing Logout</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>When the user selects the <bpt id="p1">**</bpt>Remember me<ept id="p1">**</ept> check box when logging in, the application will automatically authenticate the user on subsequent runs.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Automatic authentication will then continue while the application is in offline mode or until the authentication cookie expires.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Sometimes, however, multiple users will need access to the application or a single user might occasionally log in with different credentials.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>To enable this scenario, you must implement logout functionality, as described in the following procedure.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>To implement logout functionality</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>In the Form1 designer, add a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control to the form from the <bpt id="p1">**</bpt>ToolBox<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, specify a <bpt id="p2">**</bpt>(Name)<ept id="p2">**</ept> value of <ph id="ph1">`logoutButton`</ph> and a <bpt id="p3">**</bpt>Text<ept id="p3">**</ept> value of <bpt id="p4">**</bpt>&amp;Log Out<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Double-click the <ph id="ph1">`logoutButton`</ph> to generate a <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The code editor appears with the cursor in the <ph id="ph1">`logoutButton_Click`</ph> method.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Replace the generated <ph id="ph1">`logoutButton_Click`</ph> method with the following code.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>This event handler first calls the <ph id="ph1">`SaveSettings`</ph> method that you added in the previous section.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Then, the event handler calls the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider.Logout%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the authentication service is unavailable, the <ph id="ph1">&lt;xref:System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider.Logout%2A&gt;</ph> method will throw a <ph id="ph2">&lt;xref:System.Net.WebException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`logoutButton_Click`</ph> method displays a warning message and switches temporarily to offline mode to log the user out. Offline mode is described in the next section.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Logout deletes the local authentication cookie so that login will be required when the application is restarted.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>After logout, the event handler restarts the application.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>When the application restarts, it displays the welcome message followed by the login dialog box.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The welcome message makes it clear that the application has restarted.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>This prevents potential confusion if the user must log in to save settings, and then must log in again because the application has restarted.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>To test the logout functionality, run the application and select <bpt id="p1">**</bpt>Remember me<ept id="p1">**</ept> on the Login dialog box.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Next, close and restart the application to confirm that you no longer have to log in.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Finally, restart the application by clicking Log out.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Enabling Offline Mode</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>In the following procedure, you add a check box to the form to enable the user to enter offline mode.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Your application indicates offline mode by setting the <ph id="ph1">`static`</ph> <ph id="ph2">&lt;xref:System.Web.ClientServices.ConnectivityStatus.IsOffline%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The offline status is stored on the local hard disk at the location indicated by the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>This means that the offline status is stored on a per-user, per-application basis.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>In offline mode, all client application service requests retrieve data from the local cache instead of trying to access the services.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>In the default configuration, the local data includes an encrypted form of the user's password.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>This enables the user to log in while the application is in offline mode.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Configure Client Application Services<ept id="p1">](../../../docs/framework/common-client-technologies/how-to-configure-client-application-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>To enable offline mode in your application</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, in the ClientAppServicesDemo project, select Form1 and then select <bpt id="p2">**</bpt>View &amp;#124; Designer<ept id="p2">**</ept> from the <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> main menu.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>In the designer, add a <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> control to the form.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, specify a <bpt id="p2">**</bpt>(Name)<ept id="p2">**</ept> value of <ph id="ph1">`workOfflineCheckBox`</ph> and a <bpt id="p3">**</bpt>Text<ept id="p3">**</ept> value of <bpt id="p4">**</bpt>&amp;Work offline<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, click the <bpt id="p2">**</bpt>Events<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Select the <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox.CheckedChanged&gt;</ph> event and then press ENTER to generate an event handler.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Replace the generated method with the following code.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>This code updates the <ph id="ph1">&lt;xref:System.Web.ClientServices.ConnectivityStatus.IsOffline%2A&gt;</ph> value and silently revalidates the user when they return to online mode.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A?displayProperty=fullName&gt;</ph> method uses the cached credentials so that the user does not have to explicitly log in.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>If the authentication service is unavailable, a warning message appears and the application stays offline.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A&gt;</ph> method is for convenience only.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Because it does not have a return value, it cannot indicate whether revalidation has failed.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Revalidation can fail, for example, if the user credentials have changed on the server.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>In this case, you might want to include code that explicitly validates users after a service call fails.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>For more information, see the Accessing Web Settings section earlier in this walkthrough.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>After revalidation, this code saves any changes to the local Web settings by calling the <ph id="ph1">`SaveSettings`</ph> method that you added previously.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>It then retrieves any new values on the server by calling the <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> method of the project's <ph id="ph2">`Settings`</ph> class (accessed as <ph id="ph3">`Properties.Settings.Default`</ph> in C# and <ph id="ph4">`My.Settings`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Add the following code to the end of the <ph id="ph1">`Form1_Load`</ph> method to make sure that the check box displays the current connection state.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>This completes the example application.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To test the offline capability, run the application, log in as either employee or manager, and then select <bpt id="p1">**</bpt>Work offline<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Modify the value in the text box, and then close the application.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Restart the application.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Before you log in, right-click the ASP.NET Development Server icon in the notification area of the taskbar and then click <bpt id="p1">**</bpt>Stop<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Then, log in like normal.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Even when the server is not running, you can still log in.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Modify the text box value, exit, and restart to see the modified value.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>In this walkthrough, you learned how to enable and use client application services in a Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>After setting up a test server, you added code to your application to authenticate users and retrieve user roles and application settings from the server.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>You also learned how to enable offline mode so that your application uses a local data cache instead of the remote services when connectivity is not available.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>In a real-world application, you will access data for many users from a remote server that may not always be available, or may go down without notice.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>To make your application robust, you must respond appropriately to situations where the service is not available.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>This walkthrough includes try/catch blocks to catch a <ph id="ph1">&lt;xref:System.Net.WebException&gt;</ph> and display an error message when the service is not available.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>In production code, you might want to handle this case by switching to offline mode, exiting the application, or denying access to specific functionality.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To increase the security of your application, make sure to thoroughly test the application and server before deployment.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Client Application Services<ept id="p1">](../../../docs/framework/common-client-technologies/client-application-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Client Application Services Overview<ept id="p1">](../../../docs/framework/common-client-technologies/client-application-services-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Configure Client Application Services<ept id="p1">](../../../docs/framework/common-client-technologies/how-to-configure-client-application-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET Web Site Administration Tool<ept id="p1">](http://msdn.microsoft.com/library/100ddd8b-7d11-4df9-91ef-0bbbe92e5aec)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating and Configuring the Application Services Database for SQL Server<ept id="p1">](http://msdn.microsoft.com/library/ab894e83-7e2f-4af8-a116-b1bff8f815b2)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Using ASP.NET Application Services<ept id="p1">](http://msdn.microsoft.com/library/f3f394f0-20d6-4361-aa8f-4b21bf4933eb)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>