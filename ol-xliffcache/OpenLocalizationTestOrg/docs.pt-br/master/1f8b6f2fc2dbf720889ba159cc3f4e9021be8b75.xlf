<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f8b6f2fc2dbf720889ba159cc3f4e9021be8b75</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\data\how-to-bind-to-xdocument-xelement-or-linq-for-xml-query-results.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">684aaf4fb5505925605f8b998128a928198dcac5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">219c5c9e55260536fce7091b4ea4b53c117df559</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Bind to XDocument, XElement, or LINQ for XML Query Results | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Bind to XDocument, XElement, or LINQ for XML Query Results</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to bind XML data to an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> using <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following XAML code defines an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> and includes a data template for data of type <ph id="ph2">`Planet`</ph> in the <ph id="ph3">`http://planetsNS`</ph> XML namespace.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An XML data type that occupies a namespace must include the namespace in braces, and if it appears where a XAML markup extension could appear, it must precede the namespace with a brace escape sequence.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This code binds to dynamic properties that correspond to the <ph id="ph1">&lt;xref:System.Xml.Linq.XContainer.Element%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Dynamic properties enable XAML to bind to dynamic properties that share the names of methods.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To learn more, see <bpt id="p1">[</bpt>LINQ to XML Dynamic Properties<ept id="p1">](/visualstudio/designers/linq-to-xml-dynamic-properties)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Notice how the default namespace declaration for the XML does not apply to attribute names.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XLinqExample#StackPanelResources<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml#stackpanelresources)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XLinqExample#ItemsControl<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml#itemscontrol)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following C# code calls <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> and sets the stack panel data context to all subelements of the element named <ph id="ph2">`SolarSystemPlanets`</ph> in the <ph id="ph3">`http://planetsNS`</ph> XML namespace.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XLinqExample#LoadDCFromFile<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml.cs#loaddcfromfile)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XLinqExample#LoadDCFromFile<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/XLinqExample/visualbasic/window1.xaml.vb#loaddcfromfile)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>XML data can be stored as a XAML resource using <ph id="ph1">&lt;xref:System.Windows.Data.ObjectDataProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For a complete example, see  <bpt id="p1">[</bpt>L2DBForm.xaml Source Code<ept id="p1">](http://msdn.microsoft.com/library/624e96d4-6d27-4195-8ac2-2f3835f6c57e)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following sample shows how code can set the data context to an object resource.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XLinqExample#LoadDCFromXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml.cs#loaddcfromxaml)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XLinqExample#LoadDCFromXAML<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/XLinqExample/visualbasic/window1.xaml.vb#loaddcfromxaml)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The dynamic properties that map to <ph id="ph1">&lt;xref:System.Xml.Linq.XContainer.Element%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> provide flexibility within XAML.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Your code can also bind to the results of a LINQ for XML query.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example binds to query results ordered by an element value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XLinqExample#BindToResults<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml.cs#bindtoresults)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XLinqExample#BindToResults<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/XLinqExample/visualbasic/window1.xaml.vb#bindtoresults)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binding Sources Overview<ept id="p1">](../../../../docs/framework/wpf/data/binding-sources-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WPF Data Binding with LINQ to XML Overview<ept id="p1">](/visualstudio/designers/wpf-data-binding-with-linq-to-xml-overview)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WPF Data Binding Using LINQ to XML Example<ept id="p1">](/visualstudio/designers/wpf-data-binding-using-linq-to-xml-example)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ to XML Dynamic Properties<ept id="p1">](/visualstudio/designers/linq-to-xml-dynamic-properties)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>