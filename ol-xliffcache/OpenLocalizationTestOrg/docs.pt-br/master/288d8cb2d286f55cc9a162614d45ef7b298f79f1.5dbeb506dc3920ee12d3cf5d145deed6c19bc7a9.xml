{"content":"---\ntitle: \"How to: obtain the value of a pointer variable - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"pointer expressions [C#], indirection\"\n  - \"pointers [C#], indirection\"\n  - \"variables [C#], pointers\"\n  - \"pointers [C#], * operator\"\nms.assetid: 460a813a-4995-44c1-9de2-213b91dc7668\n---\n# How to: obtain the value of a pointer variable (C# Programming Guide)\n\nUse the pointer indirection operator to obtain the variable at the location pointed to by a pointer. The expression takes the following form, where `p` is a pointer type:  \n\n```csharp\n*p;  \n```\n\nYou cannot use the unary indirection operator on an expression of any type other than the pointer type. Also, you cannot apply it to a [void](../../../csharp/language-reference/keywords/void.md) pointer.  \n\nWhen you apply the indirection operator to a [null](../../../csharp/language-reference/keywords/null.md) pointer, the result depends on the implementation.  \n\n## Example\n\nIn the following example, a variable of the type `char` is accessed by using pointers of different types. Note that the address of `theChar` will vary from run to run, because the physical address allocated to a variable can change.  \n\n [!code-csharp[csProgGuidePointers#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers2.cs#5)]  \n\n [!code-csharp[csProgGuidePointers#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers.cs#6)]  \n  \n**Value of theChar = Z**  \n**Address of theChar = 12F718**  \n**Value of pChar = Z**  \n**Value of pInt = 90**  \n\n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)\n- [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)\n- [Types](../../../csharp/language-reference/keywords/types.md)\n- [unsafe](../../../csharp/language-reference/keywords/unsafe.md)\n- [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)\n- [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)\n","nodes":[{"pos":[4,333],"embed":true,"restype":"x-metadata","content":"title: \"How to: obtain the value of a pointer variable - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"pointer expressions [C#], indirection\"\n  - \"pointers [C#], indirection\"\n  - \"variables [C#], pointers\"\n  - \"pointers [C#], * operator\"\nms.assetid: 460a813a-4995-44c1-9de2-213b91dc7668","nodes":[{"content":"How to: obtain the value of a pointer variable - C# Programming Guide","nodes":[{"pos":[0,69],"content":"How to: obtain the value of a pointer variable - C# Programming Guide","nodes":[{"content":"How to: obtain the value of a pointer variable - C# Programming Guide","pos":[0,69]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[340,409],"content":"How to: obtain the value of a pointer variable (C# Programming Guide)","linkify":"How to: obtain the value of a pointer variable (C# Programming Guide)","nodes":[{"content":"How to: obtain the value of a pointer variable (C# Programming Guide)","pos":[0,69]}]},{"content":"Use the pointer indirection operator to obtain the variable at the location pointed to by a pointer.","pos":[411,511]},{"content":"The expression takes the following form, where <ph id=\"ph1\">`p`</ph> is a pointer type:","pos":[512,581],"source":" The expression takes the following form, where `p` is a pointer type:"},{"content":"You cannot use the unary indirection operator on an expression of any type other than the pointer type.","pos":[606,709]},{"content":"Also, you cannot apply it to a <bpt id=\"p1\">[</bpt>void<ept id=\"p1\">](../../../csharp/language-reference/keywords/void.md)</ept> pointer.","pos":[710,809],"source":" Also, you cannot apply it to a [void](../../../csharp/language-reference/keywords/void.md) pointer."},{"pos":[813,968],"content":"When you apply the indirection operator to a <bpt id=\"p1\">[</bpt>null<ept id=\"p1\">](../../../csharp/language-reference/keywords/null.md)</ept> pointer, the result depends on the implementation.","source":"When you apply the indirection operator to a [null](../../../csharp/language-reference/keywords/null.md) pointer, the result depends on the implementation."},{"pos":[975,982],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, a variable of the type <ph id=\"ph1\">`char`</ph> is accessed by using pointers of different types.","pos":[984,1089],"source":"In the following example, a variable of the type `char` is accessed by using pointers of different types."},{"content":"Note that the address of <ph id=\"ph1\">`theChar`</ph> will vary from run to run, because the physical address allocated to a variable can change.","pos":[1090,1216],"source":" Note that the address of `theChar` will vary from run to run, because the physical address allocated to a variable can change."},{"content":"<bpt id=\"p1\">**</bpt>Value of theChar = Z<ept id=\"p1\">**</ept>","pos":[1477,1501],"source":"**Value of theChar = Z**"},{"content":"<bpt id=\"p1\">**</bpt>Address of theChar = 12F718<ept id=\"p1\">**</ept>","pos":[1504,1535],"source":"**Address of theChar = 12F718**"},{"content":"<bpt id=\"p1\">**</bpt>Value of pChar = Z<ept id=\"p1\">**</ept>","pos":[1538,1560],"source":"**Value of pChar = Z**"},{"content":"<bpt id=\"p1\">**</bpt>Value of pInt = 90<ept id=\"p1\">**</ept>","pos":[1563,1585],"source":"**Value of pInt = 90**"},{"pos":[1592,1600],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1604,1670],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1673,1773],"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept>","source":"[Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)"},{"pos":[1776,1864],"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept>","source":"[Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)"},{"pos":[1867,1928],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept>","source":"[Types](../../../csharp/language-reference/keywords/types.md)"},{"pos":[1931,1994],"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept>","source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md)"},{"pos":[1997,2078],"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept>","source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)"},{"pos":[2081,2152],"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","source":"[stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}