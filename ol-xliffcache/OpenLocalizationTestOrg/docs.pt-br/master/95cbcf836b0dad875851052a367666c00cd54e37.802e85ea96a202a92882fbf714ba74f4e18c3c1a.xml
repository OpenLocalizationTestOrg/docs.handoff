{"content":"---\ntitle: \"How to: Pass Procedures to Another Procedure in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"AddressOf operator\"\n  - \"delegates [Visual Basic], passing procedures\"\nms.assetid: 5adbba15-5a1d-413f-ab3e-3ff6cc0a4669\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Pass Procedures to Another Procedure in Visual Basic\nThis example shows how to use delegates to pass a procedure to another procedure.  \n  \n A delegate is a type that you can use like any other type in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]. The `AddressOf` operator returns a delegate object when applied to a procedure name.  \n  \n This example has a procedure with a delegate parameter that can take a reference to another procedure, obtained with the `AddressOf` operator.  \n  \n### Create the delegate and matching procedures  \n  \n1.  Create a delegate named `MathOperator`.  \n  \n     [!code-vb[VbVbalrDelegates#1](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_1.vb)]  \n  \n2.  Create a procedure named `AddNumbers` with parameters and return value that match those of `MathOperator`, so that the signatures match.  \n  \n     [!code-vb[VbVbalrDelegates#2](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_2.vb)]  \n  \n3.  Create a procedure named `SubtractNumbers` with a signature that matches `MathOperator`.  \n  \n     [!code-vb[VbVbalrDelegates#3](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_3.vb)]  \n  \n4.  Create a procedure named `DelegateTest` that takes a delegate as a parameter.  \n  \n     This procedure can accept a reference to `AddNumbers` or `SubtractNumbers`, because their signatures match the `MathOperator` signature.  \n  \n     [!code-vb[VbVbalrDelegates#4](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_4.vb)]  \n  \n5.  Create a procedure named `Test` that calls `DelegateTest` once with the delegate for `AddNumbers` as a parameter, and again with the delegate for `SubtractNumbers` as a parameter.  \n  \n     [!code-vb[VbVbalrDelegates#5](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_5.vb)]  \n  \n     When `Test` is called, it first displays the result of `AddNumbers` acting on `5` and `3`, which is 8. Then the result of `SubtractNumbers` acting on `9` and `3` is displayed, which is 6.  \n  \n## See Also  \n [Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md)   \n [AddressOf Operator](../../../../visual-basic/language-reference/operators/addressof-operator.md)   \n [Delegate Statement](../../../../visual-basic/language-reference/statements/delegate-statement.md)   \n [How to: Invoke a Delegate Method](../../../../visual-basic/programming-guide/language-features/delegates/how-to-invoke-a-delegate-method.md)","nodes":[{"pos":[4,652],"nodes":[{"content":"How to: Pass Procedures to Another Procedure in Visual Basic | Microsoft Docs","nodes":[{"pos":[0,77],"content":"How to: Pass Procedures to Another Procedure in Visual Basic | Microsoft Docs","nodes":[{"content":"How to: Pass Procedures to Another Procedure in Visual Basic | Microsoft Docs","pos":[0,77]}]}],"pos":[6,86],"yaml":true}],"content":"title: \"How to: Pass Procedures to Another Procedure in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"AddressOf operator\"\n  - \"delegates [Visual Basic], passing procedures\"\nms.assetid: 5adbba15-5a1d-413f-ab3e-3ff6cc0a4669\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[659,719],"content":"How to: Pass Procedures to Another Procedure in Visual Basic","linkify":"How to: Pass Procedures to Another Procedure in Visual Basic","nodes":[{"content":"How to: Pass Procedures to Another Procedure in Visual Basic","pos":[0,60]}]},{"content":"This example shows how to use delegates to pass a procedure to another procedure.","pos":[720,801]},{"content":"A delegate is a type that you can use like any other type in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.","pos":[808,962],"source":"A delegate is a type that you can use like any other type in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]."},{"content":"The <ph id=\"ph1\">`AddressOf`</ph> operator returns a delegate object when applied to a procedure name.","pos":[963,1047],"source":" The `AddressOf` operator returns a delegate object when applied to a procedure name."},{"pos":[1054,1196],"content":"This example has a procedure with a delegate parameter that can take a reference to another procedure, obtained with the <ph id=\"ph1\">`AddressOf`</ph> operator.","source":"This example has a procedure with a delegate parameter that can take a reference to another procedure, obtained with the `AddressOf` operator."},{"pos":[1206,1249],"content":"Create the delegate and matching procedures","linkify":"Create the delegate and matching procedures","nodes":[{"content":"Create the delegate and matching procedures","pos":[0,43]}]},{"pos":[1259,1298],"content":"Create a delegate named <ph id=\"ph1\">`MathOperator`</ph>.","source":"Create a delegate named `MathOperator`."},{"pos":[1309,1467],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrDelegates#1<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrDelegates#1](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_1.vb)]"},{"pos":[1477,1613],"content":"Create a procedure named <ph id=\"ph1\">`AddNumbers`</ph> with parameters and return value that match those of <ph id=\"ph2\">`MathOperator`</ph>, so that the signatures match.","source":"Create a procedure named `AddNumbers` with parameters and return value that match those of `MathOperator`, so that the signatures match."},{"pos":[1624,1782],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrDelegates#2<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrDelegates#2](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_2.vb)]"},{"pos":[1792,1880],"content":"Create a procedure named <ph id=\"ph1\">`SubtractNumbers`</ph> with a signature that matches <ph id=\"ph2\">`MathOperator`</ph>.","source":"Create a procedure named `SubtractNumbers` with a signature that matches `MathOperator`."},{"pos":[1891,2049],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrDelegates#3<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrDelegates#3](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_3.vb)]"},{"pos":[2059,2136],"content":"Create a procedure named <ph id=\"ph1\">`DelegateTest`</ph> that takes a delegate as a parameter.","source":"Create a procedure named `DelegateTest` that takes a delegate as a parameter."},{"pos":[2147,2283],"content":"This procedure can accept a reference to <ph id=\"ph1\">`AddNumbers`</ph> or <ph id=\"ph2\">`SubtractNumbers`</ph>, because their signatures match the <ph id=\"ph3\">`MathOperator`</ph> signature.","source":"This procedure can accept a reference to `AddNumbers` or `SubtractNumbers`, because their signatures match the `MathOperator` signature."},{"pos":[2294,2452],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrDelegates#4<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_4.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrDelegates#4](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_4.vb)]"},{"pos":[2462,2641],"content":"Create a procedure named <ph id=\"ph1\">`Test`</ph> that calls <ph id=\"ph2\">`DelegateTest`</ph> once with the delegate for <ph id=\"ph3\">`AddNumbers`</ph> as a parameter, and again with the delegate for <ph id=\"ph4\">`SubtractNumbers`</ph> as a parameter.","source":"Create a procedure named `Test` that calls `DelegateTest` once with the delegate for `AddNumbers` as a parameter, and again with the delegate for `SubtractNumbers` as a parameter."},{"pos":[2652,2810],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrDelegates#5<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_5.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrDelegates#5](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-pass-procedures-to-another-procedure_5.vb)]"},{"content":"When <ph id=\"ph1\">`Test`</ph> is called, it first displays the result of <ph id=\"ph2\">`AddNumbers`</ph> acting on <ph id=\"ph3\">`5`</ph> and <ph id=\"ph4\">`3`</ph>, which is 8.","pos":[2821,2923],"source":"When `Test` is called, it first displays the result of `AddNumbers` acting on `5` and `3`, which is 8."},{"content":"Then the result of <ph id=\"ph1\">`SubtractNumbers`</ph> acting on <ph id=\"ph2\">`9`</ph> and <ph id=\"ph3\">`3`</ph> is displayed, which is 6.","pos":[2924,3008],"source":" Then the result of `SubtractNumbers` acting on `9` and `3` is displayed, which is 6."},{"pos":[3017,3025],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3029,3122],"source":"[Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>AddressOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/addressof-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3126,3224],"source":"[AddressOf Operator](../../../../visual-basic/language-reference/operators/addressof-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/delegate-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3228,3327],"source":"[Delegate Statement](../../../../visual-basic/language-reference/statements/delegate-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Invoke a Delegate Method<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/how-to-invoke-a-delegate-method.md)</ept>","pos":[3331,3472],"source":"[How to: Invoke a Delegate Method](../../../../visual-basic/programming-guide/language-features/delegates/how-to-invoke-a-delegate-method.md)"}]}