<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="base-elements-overview.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9517484649fdc69956316c5566def58e7972e9a5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\base-elements-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed2422088b2fbf71ed85fe292ce9c6e141a5a176</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46a4b2430afba35a4d1dc7ab8672d3ff6fe7c72d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Base Elements Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Base Elements Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A high percentage of classes in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> are derived from four classes which are commonly referred to in the <ph id="ph2">[!INCLUDE[TLA2#tla_sdk](../../../../includes/tla2sharptla-sdk-md.md)]</ph> documentation as the base element classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These classes are <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> class is also related, because it is a common base class of both <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Base Element APIs in WPF Classes</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> are derived from <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph>, through somewhat different pathways.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The split at this level deals with how a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> are used in a user interface and what purpose they serve in an application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> also has <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph> in its class hierarchy, which is a class that exposes the lower-level graphics support underlying the <ph id="ph3">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> provides a rendering framework by defining independent rectangular screen regions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In practice, <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is for elements that will support a larger object model, are intended to render and layout into regions that can be described as rectangular screen regions, and where the content model is deliberately more open, to allow different combinations of elements.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> does not derive from <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>; its model is that a <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> would be consumed by something else, such as a reader or viewer that would then interpret the elements and produce the complete <ph id="ph4">&lt;xref:System.Windows.Media.Visual&gt;</ph> for <ph id="ph5">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> to consume.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Certain <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> classes are intended to be content hosts: they provide the hosting and rendering for one or more <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> classes (<ph id="ph3">&lt;xref:System.Windows.Controls.DocumentViewer&gt;</ph> is an example of such a class).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> is used as base class for elements with somewhat smaller object models and that more address the text, information, or document content that might be hosted within a <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Framework-Level and Core-Level</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> serves as the base class for <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> serves as the base class for <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The reason for this next level of classes is to support a WPF core level that is separate from a WPF framework level, with this division also existing in how the <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> are divided between the PresentationCore and PresentationFramework assemblies.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The WPF framework level presents a more complete solution for basic application needs, including the implementation of the layout manager for presentation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The WPF core level provides a way to use much of <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> without taking the overhead of the additional assembly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The distinction between these levels very rarely matters for most typical application development scenarios, and in general you should think of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> as a whole and not concern yourself with the difference between WPF framework level and WPF core level.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You might need to know about the level distinctions if your application design chooses to replace substantial quantities of WPF framework level functionality, for instance if your overall solution already has its own implementations of <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> composition and layout.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Choosing Which Element to Derive From</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The most practical way to create a custom class that extends <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is by deriving from one of the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> classes where you get as much as possible of your desired functionality through the existing class hierarchy.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This section lists the functionality that comes with three of the most important element classes to help you decide which class to inherit from.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you are implementing a control, which is really one of the more common reasons for deriving from a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> class, you probably want to derive from a class that is a practical control, a control family base class, or at least from the <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> base class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For some guidance and practical examples, see <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](../../../../docs/framework/wpf/controls/control-authoring-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you are not creating a control and need to derive from a class that is higher in the hierarchy, the following sections are intended as a guide for what characteristics are defined in each base element class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you create a class that derives from <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>, you inherit the following functionality:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> support, and general property system support.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Ability to use dependency properties and attached properties that are implemented as dependency properties.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you create a class that derives from <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, you inherit the following functionality in addition to that provided by <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Basic support for animated property values.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Basic input event support, and commanding support.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id="p2">[</bpt>Commanding Overview<ept id="p2">](../../../../docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Virtual methods that can be overridden to provide information to a layout system.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you create a class that derives from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, you inherit the following functionality in addition to that provided by <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Support for styling and storyboards.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> and <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Support for data binding.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Support for dynamic resource references.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Property value inheritance support, and other flags in the metadata that help report conditions about properties to framework services such as data binding, styles, or the framework implementation of layout.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Framework Property Metadata<ept id="p1">](../../../../docs/framework/wpf/advanced/framework-property-metadata.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The concept of the logical tree.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Support for the practical WPF framework-level implementation of the layout system, including an <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> override that can detect changes to properties that influence layout.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you create a class that derives from <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>, you inherit the following functionality in addition to that provided by <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Support for animations.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Basic input event support, and commanding support.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id="p2">[</bpt>Commanding Overview<ept id="p2">](../../../../docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you create a class that derives from <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, you get the following functionality in addition to that provided by <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Support for styling and storyboards.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> and <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Support for data binding.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Support for dynamic resource references.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Property value inheritance support, and other flags in the metadata that help report conditions about properties to framework services like data binding, styles, or the framework implementation of layout.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Framework Property Metadata<ept id="p1">](../../../../docs/framework/wpf/advanced/framework-property-metadata.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You do not inherit access to layout system modifications (such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Layout system implementations are only available on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>However, you inherit an <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> override that can detect changes to properties that influence layout and report these to any content hosts.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Content models are documented for a variety of classes.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The content model for a class is one possible factor you should consider if you want to find an appropriate class to derive from.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WPF Content Model<ept id="p1">](../../../../docs/framework/wpf/controls/wpf-content-model.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Other Base Classes</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>DispatcherObject</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> provides support for the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> threading model and enables all objects created for <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications to be associated with a <ph id="ph4">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Even if you do not derive from <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph>, you should consider deriving from <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> in order to get this threading model support.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Threading Model<ept id="p1">](../../../../docs/framework/wpf/advanced/threading-model.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Visual</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> implements the concept of a 2D object that generally requires visual presentation in a roughly rectangular region.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The actual rendering of a <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> happens in other classes (it is not self-contained), but the <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph> class provides a known type that is used by rendering processes at various levels.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> implements hit testing, but it does not expose events that report hit-testing positives (these are in <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Visual Layer Programming<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/visual-layer-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Freezable</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> simulates immutability in a mutable object by providing the means to generate copies of the object when an immutable object is required or desired for performance reasons.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> type provides a common basis for certain graphics elements such as geometries and brushes, as well as animations.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Notably, a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> is not a <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>; it can hold properties that become subproperties when the <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> is applied to fill a property value of another object, and those subproperties might affect rendering.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> derived class that specifically adds the animation control layer and some utility members so that currently animated properties can be distinguished from nonanimated properties.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Control</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> is the intended base class for the type of object that is variously termed a control or component, depending on the technology.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In general, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> control classes are classes that either directly represent a UI control or participate closely in control composition.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The primary functionality that <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> enables is control templating.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](../../../../docs/framework/wpf/controls/control-authoring-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Architecture<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-architecture.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>