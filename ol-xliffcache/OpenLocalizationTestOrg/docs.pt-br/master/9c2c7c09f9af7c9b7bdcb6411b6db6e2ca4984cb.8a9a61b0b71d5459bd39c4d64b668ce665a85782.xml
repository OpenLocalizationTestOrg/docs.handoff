{"content":"---\ntitle: \"Cancel Async Tasks after a Period of Time (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: a48045a3-6a99-42af-b824-af340f0b9a5d\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Cancel Async Tasks after a Period of Time (Visual Basic)\nYou can cancel an asynchronous operation after a period of time by using the  <xref:System.Threading.CancellationTokenSource.CancelAfter%2A?displayProperty=fullName> method if you don't want to wait for the operation to finish. This method schedules the cancellation of any associated tasks that aren’t complete within the period of time that’s designated by the `CancelAfter` expression.  \n  \n This example adds to the code that’s developed in [Cancel an Async Task or a List of Tasks (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md) to download a list of websites and to display the length of the contents of each one.  \n  \n> [!NOTE]\n>  To run the examples, you must have Visual Studio 2012 or later and the .NET Framework 4.5 or later installed on your computer.  \n  \n## Downloading the Example  \n You can download the complete Windows Presentation Foundation (WPF) project from [Async Sample: Fine Tuning Your Application](http://go.microsoft.com/fwlink/?LinkId=255046) and then follow these steps.  \n  \n1.  Decompress the file that you downloaded, and then start Visual Studio.  \n  \n2.  On the menu bar, choose **File**, **Open**, **Project/Solution**.  \n  \n3.  In the **Open Project** dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB.  \n  \n4.  In **Solution Explorer**, open the shortcut menu for the **CancelAfterTime** project, and then choose **Set as StartUp Project**.  \n  \n5.  Choose the F5 key to run the project.  \n  \n     Choose the Ctrl+F5 keys to run the project without debugging it.  \n  \n6.  Run the program several times to verify that the output might show output for all websites, no websites, or some web sites.  \n  \n If you don't want to download the project, you can review the MainWindow.xaml.vb file at the end of this topic.  \n  \n## Building the Example  \n The example in this topic adds to the project that's developed in [Cancel an Async Task or a List of Tasks (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md) to cancel a list of tasks. The example uses the same UI, although the **Cancel** button isn’t used explicitly.  \n  \n To build the example yourself, step by step, follow the instructions in the \"Downloading the Example\" section, but choose **CancelAListOfTasks** as the **StartUp Project**. Add the changes in this topic to that project.  \n  \n To specify a maximum time before the tasks are marked as canceled, add a call to `CancelAfter` to `startButton_Click`, as the following example shows. The addition is marked with asterisks.  \n  \n```vb  \nPrivate Async Sub startButton_Click(sender As Object, e As RoutedEventArgs)  \n  \n    ' Instantiate the CancellationTokenSource.  \n    cts = New CancellationTokenSource()  \n  \n    resultsTextBox.Clear()  \n  \n    Try  \n        ' ***Set up the CancellationTokenSource to cancel after 2.5 seconds. (You   \n        ' can adjust the time.)  \n        cts.CancelAfter(2500)  \n  \n        Await AccessTheWebAsync(cts.Token)  \n        resultsTextBox.Text &= vbCrLf & \"Downloads complete.\"  \n  \n    Catch ex As OperationCanceledException  \n        resultsTextBox.Text &= vbCrLf & \"Downloads canceled.\" & vbCrLf  \n  \n    Catch ex As Exception  \n        resultsTextBox.Text &= vbCrLf & \"Downloads failed.\" & vbCrLf  \n    End Try  \n  \n    ' Set the CancellationTokenSource to Nothing when the download is complete.  \n    cts = Nothing  \nEnd Sub  \n```  \n  \n Run the program several times to verify that the output might show output for all websites, no websites, or some web sites. The following output is a sample.  \n  \n```  \nLength of the downloaded string: 35990.  \n  \nLength of the downloaded string: 407399.  \n  \nLength of the downloaded string: 226091.  \n  \nDownloads canceled.  \n```  \n  \n## Complete Example  \n The following code is the complete text of the MainWindow.xaml.vb file for the example. Asterisks mark the elements that were added for this example.  \n  \n Notice that you must add a reference for <xref:System.Net.Http>.  \n  \n You can download the project from [Async Sample: Fine Tuning Your Application](http://go.microsoft.com/fwlink/?LinkId=255046).  \n  \n```vb  \n' Add an Imports directive and a reference for System.Net.Http.  \nImports System.Net.Http  \n  \n' Add the following Imports directive for System.Threading.  \nImports System.Threading  \n  \nClass MainWindow  \n  \n    ' Declare a System.Threading.CancellationTokenSource.  \n    Dim cts As CancellationTokenSource  \n  \n    Private Async Sub startButton_Click(sender As Object, e As RoutedEventArgs)  \n  \n        ' Instantiate the CancellationTokenSource.  \n        cts = New CancellationTokenSource()  \n  \n        resultsTextBox.Clear()  \n  \n        Try  \n            ' ***Set up the CancellationTokenSource to cancel after 2.5 seconds. (You   \n            ' can adjust the time.)  \n            cts.CancelAfter(2500)  \n  \n            Await AccessTheWebAsync(cts.Token)  \n            resultsTextBox.Text &= vbCrLf & \"Downloads complete.\"  \n  \n        Catch ex As OperationCanceledException  \n            resultsTextBox.Text &= vbCrLf & \"Downloads canceled.\" & vbCrLf  \n  \n        Catch ex As Exception  \n            resultsTextBox.Text &= vbCrLf & \"Downloads failed.\" & vbCrLf  \n        End Try  \n  \n        ' Set the CancellationTokenSource to Nothing when the download is complete.  \n        cts = Nothing  \n    End Sub  \n  \n    ' You can still include a Cancel button if you want to.  \n    Private Sub cancelButton_Click(sender As Object, e As RoutedEventArgs)  \n  \n        If cts IsNot Nothing Then  \n            cts.Cancel()  \n        End If  \n    End Sub  \n  \n    ' Provide a parameter for the CancellationToken.  \n    ' Change the return type to Task because the method has no return statement.  \n    Async Function AccessTheWebAsync(ct As CancellationToken) As Task  \n  \n        Dim client As HttpClient = New HttpClient()  \n  \n        ' Call SetUpURLList to make a list of web addresses.  \n        Dim urlList As List(Of String) = SetUpURLList()  \n  \n        ' Process each element in the list of web addresses.  \n        For Each url In urlList  \n            ' GetAsync returns a Task(Of HttpResponseMessage).   \n            ' Argument ct carries the message if the Cancel button is chosen.   \n            ' Note that the Cancel button can cancel all remaining downloads.  \n            Dim response As HttpResponseMessage = Await client.GetAsync(url, ct)  \n  \n            ' Retrieve the website contents from the HttpResponseMessage.  \n            Dim urlContents As Byte() = Await response.Content.ReadAsByteArrayAsync()  \n  \n            resultsTextBox.Text &=  \n                String.Format(vbCrLf & \"Length of the downloaded string: {0}.\" & vbCrLf, urlContents.Length)  \n        Next  \n    End Function  \n  \n    ' Add a method that creates a list of web addresses.  \n    Private Function SetUpURLList() As List(Of String)  \n  \n        Dim urls = New List(Of String) From  \n            {  \n                \"http://msdn.microsoft.com\",  \n                \"http://msdn.microsoft.com/library/hh290138.aspx\",  \n                \"http://msdn.microsoft.com/library/hh290140.aspx\",  \n                \"http://msdn.microsoft.com/library/dd470362.aspx\",  \n                \"http://msdn.microsoft.com/library/aa578028.aspx\",  \n                \"http://msdn.microsoft.com/library/ms404677.aspx\",  \n                \"http://msdn.microsoft.com/library/ff730837.aspx\"  \n            }  \n        Return urls  \n    End Function  \n  \nEnd Class  \n  \n' Sample output:  \n  \n' Length of the downloaded string: 35990.  \n  \n' Length of the downloaded string: 407399.  \n  \n' Length of the downloaded string: 226091.  \n  \n' Downloads canceled.  \n```  \n  \n## See Also  \n [Asynchronous Programming with Async and Await (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/index.md)   \n [Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)   \n [Cancel an Async Task or a List of Tasks (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)   \n [Fine-Tuning Your Async Application (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/fine-tuning-your-async-application.md)   \n [Async Sample: Fine Tuning Your Application](http://go.microsoft.com/fwlink/?LinkId=255046)","nodes":[{"pos":[4,459],"nodes":[{"content":"Cancel Async Tasks after a Period of Time (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,73],"content":"Cancel Async Tasks after a Period of Time (Visual Basic) | Microsoft Docs","nodes":[{"content":"Cancel Async Tasks after a Period of Time (Visual Basic) | Microsoft Docs","pos":[0,73]}]}],"pos":[6,82],"yaml":true}],"content":"title: \"Cancel Async Tasks after a Period of Time (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: a48045a3-6a99-42af-b824-af340f0b9a5d\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[466,522],"content":"Cancel Async Tasks after a Period of Time (Visual Basic)","linkify":"Cancel Async Tasks after a Period of Time (Visual Basic)","nodes":[{"content":"Cancel Async Tasks after a Period of Time (Visual Basic)","pos":[0,56]}]},{"content":"You can cancel an asynchronous operation after a period of time by using the  <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A?displayProperty=fullName&gt;</ph> method if you don't want to wait for the operation to finish.","pos":[523,750],"source":"You can cancel an asynchronous operation after a period of time by using the  <xref:System.Threading.CancellationTokenSource.CancelAfter%2A?displayProperty=fullName> method if you don't want to wait for the operation to finish."},{"content":"This method schedules the cancellation of any associated tasks that aren’t complete within the period of time that’s designated by the <ph id=\"ph1\">`CancelAfter`</ph> expression.","pos":[751,911],"source":" This method schedules the cancellation of any associated tasks that aren’t complete within the period of time that’s designated by the `CancelAfter` expression."},{"pos":[918,1212],"content":"This example adds to the code that’s developed in <bpt id=\"p1\">[</bpt>Cancel an Async Task or a List of Tasks (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)</ept> to download a list of websites and to display the length of the contents of each one.","source":"This example adds to the code that’s developed in [Cancel an Async Task or a List of Tasks (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md) to download a list of websites and to display the length of the contents of each one."},{"pos":[1220,1357],"content":"[!NOTE]\n To run the examples, you must have Visual Studio 2012 or later and the .NET Framework 4.5 or later installed on your computer.","leadings":["","> "],"nodes":[{"content":"To run the examples, you must have Visual Studio 2012 or later and the .NET Framework 4.5 or later installed on your computer.","pos":[9,135]}]},{"pos":[1366,1389],"content":"Downloading the Example","linkify":"Downloading the Example","nodes":[{"content":"Downloading the Example","pos":[0,23]}]},{"pos":[1393,1594],"content":"You can download the complete Windows Presentation Foundation (WPF) project from <bpt id=\"p1\">[</bpt>Async Sample: Fine Tuning Your Application<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept> and then follow these steps.","source":"You can download the complete Windows Presentation Foundation (WPF) project from [Async Sample: Fine Tuning Your Application](http://go.microsoft.com/fwlink/?LinkId=255046) and then follow these steps."},{"content":"Decompress the file that you downloaded, and then start Visual Studio.","pos":[1604,1674]},{"pos":[1684,1749],"content":"On the menu bar, choose <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Open<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Project/Solution<ept id=\"p3\">**</ept>.","source":"On the menu bar, choose **File**, **Open**, **Project/Solution**."},{"pos":[1759,1922],"content":"In the <bpt id=\"p1\">**</bpt>Open Project<ept id=\"p1\">**</ept> dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB.","source":"In the **Open Project** dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB."},{"pos":[1932,2061],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, open the shortcut menu for the <bpt id=\"p2\">**</bpt>CancelAfterTime<ept id=\"p2\">**</ept> project, and then choose <bpt id=\"p3\">**</bpt>Set as StartUp Project<ept id=\"p3\">**</ept>.","source":"In **Solution Explorer**, open the shortcut menu for the **CancelAfterTime** project, and then choose **Set as StartUp Project**."},{"content":"Choose the F5 key to run the project.","pos":[2071,2108]},{"content":"Choose the Ctrl+F5 keys to run the project without debugging it.","pos":[2119,2183]},{"content":"Run the program several times to verify that the output might show output for all websites, no websites, or some web sites.","pos":[2193,2316]},{"content":"If you don't want to download the project, you can review the MainWindow.xaml.vb file at the end of this topic.","pos":[2323,2434]},{"pos":[2443,2463],"content":"Building the Example","linkify":"Building the Example","nodes":[{"content":"Building the Example","pos":[0,20]}]},{"content":"The example in this topic adds to the project that's developed in <bpt id=\"p1\">[</bpt>Cancel an Async Task or a List of Tasks (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)</ept> to cancel a list of tasks.","pos":[2467,2718],"source":"The example in this topic adds to the project that's developed in [Cancel an Async Task or a List of Tasks (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md) to cancel a list of tasks."},{"content":"The example uses the same UI, although the <bpt id=\"p1\">**</bpt>Cancel<ept id=\"p1\">**</ept> button isn’t used explicitly.","pos":[2719,2802],"source":" The example uses the same UI, although the **Cancel** button isn’t used explicitly."},{"content":"To build the example yourself, step by step, follow the instructions in the \"Downloading the Example\" section, but choose <bpt id=\"p1\">**</bpt>CancelAListOfTasks<ept id=\"p1\">**</ept> as the <bpt id=\"p2\">**</bpt>StartUp Project<ept id=\"p2\">**</ept>.","pos":[2809,2981],"source":"To build the example yourself, step by step, follow the instructions in the \"Downloading the Example\" section, but choose **CancelAListOfTasks** as the **StartUp Project**."},{"content":"Add the changes in this topic to that project.","pos":[2982,3028]},{"content":"To specify a maximum time before the tasks are marked as canceled, add a call to <ph id=\"ph1\">`CancelAfter`</ph> to <ph id=\"ph2\">`startButton_Click`</ph>, as the following example shows.","pos":[3035,3185],"source":"To specify a maximum time before the tasks are marked as canceled, add a call to `CancelAfter` to `startButton_Click`, as the following example shows."},{"content":"The addition is marked with asterisks.","pos":[3186,3224]},{"content":"Run the program several times to verify that the output might show output for all websites, no websites, or some web sites.","pos":[4080,4203]},{"content":"The following output is a sample.","pos":[4204,4237]},{"pos":[4420,4436],"content":"Complete Example","linkify":"Complete Example","nodes":[{"content":"Complete Example","pos":[0,16]}]},{"content":"The following code is the complete text of the MainWindow.xaml.vb file for the example.","pos":[4440,4527]},{"content":"Asterisks mark the elements that were added for this example.","pos":[4528,4589]},{"content":"Notice that you must add a reference for <ph id=\"ph1\">&lt;xref:System.Net.Http&gt;</ph>.","pos":[4596,4660],"source":"Notice that you must add a reference for <xref:System.Net.Http>."},{"pos":[4667,4793],"content":"You can download the project from <bpt id=\"p1\">[</bpt>Async Sample: Fine Tuning Your Application<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>.","source":"You can download the project from [Async Sample: Fine Tuning Your Application](http://go.microsoft.com/fwlink/?LinkId=255046)."},{"pos":[8339,8347],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[8351,8482],"source":"[Asynchronous Programming with Async and Await (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id=\"ph1\"> </ph>","pos":[8486,8676],"source":"[Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md) "},{"content":"<bpt id=\"p1\">[</bpt>Cancel an Async Task or a List of Tasks (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)</ept><ph id=\"ph1\"> </ph>","pos":[8680,8839],"source":"[Cancel an Async Task or a List of Tasks (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md) "},{"content":"<bpt id=\"p1\">[</bpt>Fine-Tuning Your Async Application (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept><ph id=\"ph1\"> </ph>","pos":[8843,8992],"source":"[Fine-Tuning Your Async Application (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/fine-tuning-your-async-application.md) "},{"content":"<bpt id=\"p1\">[</bpt>Async Sample: Fine Tuning Your Application<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>","pos":[8996,9087],"source":"[Async Sample: Fine Tuning Your Application](http://go.microsoft.com/fwlink/?LinkId=255046)"}]}