{"content":"---\ntitle: \"Sub Expression (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"lambda expressions [Visual Basic], sub expression\"\n  - \"Sub Expression [Visual Basic]\"\n  - \"subroutines [Visual Basic], sub expressions\"\nms.assetid: 36b6bfd1-6539-4d8f-a5eb-6541a745ffde\n---\n# Sub Expression (Visual Basic)\nDeclares the parameters and code that define a subroutine lambda expression.  \n  \n## Syntax  \n  \n```  \nSub ( [ parameterlist ] ) statement  \n- or -  \nSub ( [ parameterlist ] )  \n  [ statements ]  \nEnd Sub  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`parameterlist`|Optional. A list of local variable names that represent the parameters of the procedure. The parentheses must be present even when the list is empty. For more information, see [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md).|  \n|`statement`|Required. A single statement.|  \n|`statements`|Required. A list of statements.|  \n  \n## Remarks  \n A *lambda expression* is a subroutine that does not have a name and that executes one or more statements. You can use a lambda expression anywhere that you can use a delegate type, except as an argument to `RemoveHandler`. For more information about delegates, and the use of lambda expressions with delegates, see [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) and [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md).  \n  \n## Lambda Expression Syntax  \n The syntax of a lambda expression resembles that of a standard subroutine. The differences are as follows:  \n  \n-   A lambda expression does not have a name.  \n  \n-   A lambda expression cannot have a modifier, such as `Overloads` or `Overrides`.  \n  \n-   The body of a single-line lambda expression must be a statement, not an expression. The body can consist of a call to a sub procedure, but not a call to a function procedure.  \n  \n-   In a lambda expression, either all parameters must have specified data types or all parameters must be inferred.  \n  \n-   Optional and `ParamArray` parameters are not permitted in lambda expressions.  \n  \n-   Generic parameters are not permitted in lambda expressions.  \n  \n## Example  \n Following is an example of a lambda expression that writes a value to the console. The example shows both the single-line and multiline lambda expression syntax for a subroutine. For more examples, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md).  \n  \n [!code-vb[VbVbalrLambdas#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#15)]  \n  \n## See also\n\n- [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)\n- [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)\n- [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n- [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)\n","nodes":[{"pos":[4,275],"embed":true,"restype":"x-metadata","content":"title: \"Sub Expression (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"lambda expressions [Visual Basic], sub expression\"\n  - \"Sub Expression [Visual Basic]\"\n  - \"subroutines [Visual Basic], sub expressions\"\nms.assetid: 36b6bfd1-6539-4d8f-a5eb-6541a745ffde","nodes":[{"content":"Sub Expression (Visual Basic)","nodes":[{"pos":[0,29],"content":"Sub Expression (Visual Basic)","nodes":[{"content":"Sub Expression (Visual Basic)","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[282,311],"content":"Sub Expression (Visual Basic)","linkify":"Sub Expression (Visual Basic)","nodes":[{"content":"Sub Expression (Visual Basic)","pos":[0,29]}]},{"content":"Declares the parameters and code that define a subroutine lambda expression.","pos":[312,388]},{"pos":[397,403],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[531,536],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[543,547]},{"content":"Definition","pos":[548,558]},{"content":"Optional.","pos":[591,600]},{"content":"A list of local variable names that represent the parameters of the procedure.","pos":[601,679]},{"content":"The parentheses must be present even when the list is empty.","pos":[680,740]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Parameter List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>.","pos":[741,855],"source":" For more information, see [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md)."},{"content":"Required.","pos":[872,881]},{"content":"A single statement.","pos":[882,901]},{"content":"Required.","pos":[919,928]},{"content":"A list of statements.","pos":[929,950]},{"pos":[960,967],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <bpt id=\"p1\">*</bpt>lambda expression<ept id=\"p1\">*</ept> is a subroutine that does not have a name and that executes one or more statements.","pos":[971,1076],"source":"A *lambda expression* is a subroutine that does not have a name and that executes one or more statements."},{"content":"You can use a lambda expression anywhere that you can use a delegate type, except as an argument to <ph id=\"ph1\">`RemoveHandler`</ph>.","pos":[1077,1193],"source":" You can use a lambda expression anywhere that you can use a delegate type, except as an argument to `RemoveHandler`."},{"content":"For more information about delegates, and the use of lambda expressions with delegates, see <bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept> and <bpt id=\"p2\">[</bpt>Relaxed Delegate Conversion<ept id=\"p2\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>.","pos":[1194,1516],"source":" For more information about delegates, and the use of lambda expressions with delegates, see [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) and [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)."},{"pos":[1525,1549],"content":"Lambda Expression Syntax","linkify":"Lambda Expression Syntax","nodes":[{"content":"Lambda Expression Syntax","pos":[0,24]}]},{"content":"The syntax of a lambda expression resembles that of a standard subroutine.","pos":[1553,1627]},{"content":"The differences are as follows:","pos":[1628,1659]},{"content":"A lambda expression does not have a name.","pos":[1669,1710]},{"pos":[1720,1799],"content":"A lambda expression cannot have a modifier, such as <ph id=\"ph1\">`Overloads`</ph> or <ph id=\"ph2\">`Overrides`</ph>.","source":"A lambda expression cannot have a modifier, such as `Overloads` or `Overrides`."},{"content":"The body of a single-line lambda expression must be a statement, not an expression.","pos":[1809,1892]},{"content":"The body can consist of a call to a sub procedure, but not a call to a function procedure.","pos":[1893,1983]},{"content":"In a lambda expression, either all parameters must have specified data types or all parameters must be inferred.","pos":[1993,2105]},{"pos":[2115,2192],"content":"Optional and <ph id=\"ph1\">`ParamArray`</ph> parameters are not permitted in lambda expressions.","source":"Optional and `ParamArray` parameters are not permitted in lambda expressions."},{"content":"Generic parameters are not permitted in lambda expressions.","pos":[2202,2261]},{"pos":[2270,2277],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Following is an example of a lambda expression that writes a value to the console.","pos":[2281,2363]},{"content":"The example shows both the single-line and multiline lambda expression syntax for a subroutine.","pos":[2364,2459]},{"content":"For more examples, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.","pos":[2460,2596],"source":" For more examples, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)."},{"pos":[2725,2733],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2737,2822],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[2825,2937],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"},{"pos":[2940,3061],"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept>","source":"[Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)"},{"pos":[3064,3149],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"},{"pos":[3152,3281],"content":"<bpt id=\"p1\">[</bpt>Relaxed Delegate Conversion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>","source":"[Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)"}]}