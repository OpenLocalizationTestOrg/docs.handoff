<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="best-practices-for-assembly-loading.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f7aa8a57fce9382cb67327e69048c2b05bb99da</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\deployment\best-practices-for-assembly-loading.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c759cf037fa8612a14775da2dab63905e123e08</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83741ba786930e0768efe472bf1c446b70893e2f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Best Practices for Assembly Loading</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Best Practices for Assembly Loading</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article discusses ways to avoid problems of type identity that can lead to <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>, <ph id="ph2">&lt;xref:System.MissingMethodException&gt;</ph>, and other errors.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The article discusses the following recommendations:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Understand the advantages and disadvantages of load contexts<ept id="p1">](#load_contexts)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Avoid binding on partial assembly names<ept id="p1">](#avoid_partial_names)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Avoid loading an assembly into multiple contexts<ept id="p1">](#avoid_loading_into_multiple_contexts)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Avoid loading multiple versions of an assembly into the same context<ept id="p1">](#avoid_loading_multiple_versions)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Consider switching to the default load context<ept id="p1">](#switch_to_default)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first recommendation, <bpt id="p1">[</bpt>understand the advantages and disadvantages of load contexts<ept id="p1">](#load_contexts)</ept>, provides background information for the other recommendations, because they all depend on a knowledge of load contexts.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Understand the Advantages and Disadvantages of Load Contexts</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Within an application domain, assemblies can be loaded into one of three contexts, or they can be loaded without context:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The default load context contains assemblies found by probing the global assembly cache, the host assembly store if the runtime is hosted (for example, in SQL Server), and the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> of the application domain.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Most overloads of the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method load assemblies into this context.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The load-from context contains assemblies that are loaded from locations that are not searched by the loader.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, add-ins might be installed in a directory that is not under the application path.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.AppDomain.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType&gt;</ph> are examples of methods that load by path.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The reflection-only context contains assemblies loaded with the <ph id="ph1">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Code in this context cannot be executed, so it is not discussed here.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you generated a transient dynamic assembly by using reflection emit, the assembly is not in any context.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In addition, most assemblies that are loaded by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method are loaded without context, and assemblies that are loaded from byte arrays are loaded without context unless their identity (after policy is applied) establishes that they are in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The execution contexts have advantages and disadvantages, as discussed in the following sections.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Default Load Context</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When assemblies are loaded into the default load context, their dependencies are loaded automatically.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Dependencies that are loaded into the default load context are found automatically for assemblies in the default load context or the load-from context.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Loading by assembly identity increases the stability of applications by ensuring that unknown versions of assemblies are not used (see the <bpt id="p1">[</bpt>Avoid Binding on Partial Assembly Names<ept id="p1">](#avoid_partial_names)</ept> section).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using the default load context has the following disadvantages:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Dependencies that are loaded into other contexts are not available.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You cannot load assemblies from locations outside the probing path into the default load context.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Load-From Context</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The load-from context lets you load an assembly from a path that is not under the application path, and therefore is not included in probing.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It enables dependencies to be located and loaded from that path, because the path information is maintained by the context.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In addition, assemblies in this context can use dependencies that are loaded into the default load context.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Loading assemblies by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method, or one of the other methods that load by path, has the following disadvantages:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If an assembly with the same identity is already loaded, <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> returns the loaded assembly even if a different path was specified.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If an assembly is loaded with <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and later an assembly in the default load context tries to load the same assembly by display name, the load attempt fails.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This can occur when an assembly is deserialized.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If an assembly is loaded with <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and the probing path includes an assembly with the same identity but in a different location, an <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>, <ph id="ph3">&lt;xref:System.MissingMethodException&gt;</ph>, or other unexpected behavior can occur.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> demands <ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType&gt;</ph>, or <ph id="ph4">&lt;xref:System.Net.WebPermission&gt;</ph>, on the specified path.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If a native image exists for the assembly, it is not used.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The assembly cannot be loaded as domain-neutral.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, policy is not applied.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>No Context</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Loading without context is the only option for transient assemblies that are generated with reflection emit.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Loading without context is the only way to load multiple assemblies that have the same identity into one application domain.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The cost of probing is avoided.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Assemblies that are loaded from byte arrays are loaded without context unless the identity of the assembly, which is established when policy is applied, matches the identity of an assembly in the global assembly cache; in that case, the assembly is loaded from the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Loading assemblies without context has the following disadvantages:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Other assemblies cannot bind to assemblies that are loaded without context, unless you handle the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Dependencies are not loaded automatically.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can preload them without context, preload them into the default load context, or load them by handling the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Loading multiple assemblies with the same identity without context can cause type identity problems similar to those caused by loading assemblies with the same identity into multiple contexts.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Avoid Loading an Assembly into Multiple Contexts<ept id="p1">](#avoid_loading_into_multiple_contexts)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If a native image exists for the assembly, it is not used.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The assembly cannot be loaded as domain-neutral.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, policy is not applied.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Avoid Binding on Partial Assembly Names</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Partial name binding occurs when you specify only part of the assembly display name (<ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A&gt;</ph>) when you load an assembly.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example, you might call the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method with only the simple name of the assembly, omitting the version, culture, and public key token.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Or you might call the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadWithPartialName%2A?displayProperty=nameWithType&gt;</ph> method, which first calls the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method and, if that fails to locate the assembly, searches the global assembly cache and loads the latest available version of the assembly.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Partial name binding can cause many problems, including the following:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadWithPartialName%2A?displayProperty=nameWithType&gt;</ph> method might load a different assembly with the same simple name.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, two applications might install two completely different assemblies that both have the simple name <ph id="ph1">`GraphicsLibrary`</ph> into the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The assembly that is actually loaded might not be backward-compatible.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, not specifying the version might result in the loading of a much later version than the version your program was originally written to use.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Changes in the later version might cause errors in your application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The assembly that is actually loaded might not be forward-compatible.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, you might have built and tested your application with the latest version of an assembly, but partial binding might load a much earlier version that lacks features your application uses.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Installing new applications can break existing applications.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An application that uses the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadWithPartialName%2A&gt;</ph> method can be broken by installing a newer, incompatible version of a shared assembly.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Unexpected dependency loading can occur.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It you load two assemblies that share a dependency, loading them with partial binding might result in one assembly using a component that it was not built or tested with.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Because of the problems it can cause, the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadWithPartialName%2A&gt;</ph> method has been marked obsolete.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>We recommend that you use the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method instead, and specify full assembly display names.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Understand the Advantages and Disadvantages of Load Contexts<ept id="p1">](#load_contexts)</ept> and <bpt id="p2">[</bpt>Consider Switching to the Default Load Context<ept id="p2">](#switch_to_default)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you want to use the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadWithPartialName%2A&gt;</ph> method because it makes assembly loading easy, consider that having your application fail with an error message that identifies the missing assembly is likely to provide a better user experience than automatically using an unknown version of the assembly, which might cause unpredictable behavior and security holes.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Avoid Loading an Assembly into Multiple Contexts</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Loading an assembly into multiple contexts can cause type identity problems.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the same type is loaded from the same assembly into two different contexts, it is as if two different types with the same name had been loaded.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> is thrown if you try to cast one type to the other, with the confusing message that type <ph id="ph2">`MyType`</ph> cannot be cast to type <ph id="ph3">`MyType`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, suppose that the <ph id="ph1">`ICommunicate`</ph> interface is declared in an assembly named <ph id="ph2">`Utility`</ph>, which is referenced by your program and also by other assemblies that your program loads.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>These other assemblies contain types that implement the <ph id="ph1">`ICommunicate`</ph> interface, allowing your program to use them.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Now consider what happens when your program is run.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Assemblies that are referenced by your program are loaded into the default load context.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If you load a target assembly by its identity, using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method, it will be in the default load context, and so will its dependencies.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Both your program and the target assembly will use the same <ph id="ph1">`Utility`</ph> assembly.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>However, suppose you load the target assembly by its file path, using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The assembly is loaded without any context, so its dependencies are not automatically loaded.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You might have a handler for the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> event to supply the dependency, and it might load the <ph id="ph2">`Utility`</ph> assembly with no context by using the <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Now when you create an instance of a type that is contained in the target assembly and try to assign it to a variable of type <ph id="ph1">`ICommunicate`</ph>, an <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph> is thrown because the runtime considers the <ph id="ph3">`ICommunicate`</ph> interfaces in the two copies of the <ph id="ph4">`Utility`</ph> assembly to be different types.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>There are many other scenarios in which an assembly can be loaded into multiple contexts.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The best approach is to avoid conflicts by relocating the target assembly in your application path and using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with the full display name.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The assembly is then loaded into the default load context, and both assemblies use the same <ph id="ph1">`Utility`</ph> assembly.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If the target assembly must remain outside your application path, you can use the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method to load it into the load-from context.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If the target assembly was compiled with a reference to your application's <ph id="ph1">`Utility`</ph> assembly, it will use the <ph id="ph2">`Utility`</ph> assembly that your application has loaded into the default load context.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Note that problems can occur if the target assembly has a dependency on a copy of the <ph id="ph1">`Utility`</ph> assembly located outside your application path.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If that assembly is loaded into the load-from context before your application loads the <ph id="ph1">`Utility`</ph> assembly, your application's load will fail.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Consider Switching to the Default Load Context<ept id="p1">](#switch_to_default)</ept> section discusses alternatives to using file path loads such as <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Avoid Loading Multiple Versions of an Assembly into the Same Context</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Loading multiple versions of an assembly into one load context can cause type identity problems.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the same type is loaded from two versions of the same assembly, it is as if two different types with the same name had been loaded.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> is thrown if you try to cast one type to the other, with the confusing message that type <ph id="ph2">`MyType`</ph> cannot be cast to type <ph id="ph3">`MyType`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, your program might load one version of the <ph id="ph1">`Utility`</ph> assembly directly, and later it might load another assembly that loads a different version of the <ph id="ph2">`Utility`</ph> assembly.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Or a coding error might cause two different code paths in your application to load different versions of an assembly.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In the default load context, this problem can occur when you use the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method and specify complete assembly display names that include different version numbers.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For assemblies that are loaded without context, the problem can be caused by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> method to load the same assembly from different paths.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The runtime considers two assemblies that are loaded from different paths to be different assemblies, even if their identities are the same.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In addition to type identity problems, multiple versions of an assembly can cause a <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> if a type that is loaded from one version of the assembly is passed to code that expects that type from a different version.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, the code might expect a method that was added to the later version.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>More subtle errors can occur if the behavior of the type changed between versions.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For example, a method might throw an unexpected exception or return an unexpected value.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Carefully review your code to ensure that only one version of an assembly is loaded.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.AppDomain.GetAssemblies%2A?displayProperty=nameWithType&gt;</ph> method to determine which assemblies are loaded at any given time.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Consider Switching to the Default Load Context</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Examine your application's assembly loading and deployment patterns.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Can you eliminate assemblies that are loaded from byte arrays?</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Can you move assemblies into the probing path?</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If assemblies are located in the global assembly cache or in the application domain's probing path (that is, its <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>), you can load the assembly by its identity.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If it is not possible to put all your assemblies in the probing path, consider alternatives such as using the .NET Framework add-in model, placing assemblies into the global assembly cache, or creating application domains.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Consider Using the .NET Framework Add-In Model</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you are using the load-from context to implement add-ins, which typically are not installed in the application base, use the .NET Framework add-in model.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This model provides isolation at the application domain or process level, without requiring you to manage application domains yourself.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For information about the add-in model, see <bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](/previous-versions/dotnet/netframework-4.0/bb384200(v%3dvs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Consider Using the Global Assembly Cache</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Place assemblies in the global assembly cache to get the benefit of a shared assembly path that is outside the application base, without losing the advantages of the default load context or taking on the disadvantages of the other contexts.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Consider Using Application Domains</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If you determine that some of your assemblies cannot be deployed in the application's probing path, consider creating a new application domain for those assemblies.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Use an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> to create the new application domain, and use the <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType&gt;</ph> property to specify the path that contains the assemblies you want to load.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If you have multiple directories to probe, you can set the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> to a root directory and use the <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType&gt;</ph> property to identify the subdirectories to probe.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Alternatively, you can create multiple application domains and set the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> of each application domain to the appropriate path for its assemblies.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Note that you can use the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method to load these assemblies.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Because they are now in the probing path, they will be loaded into the default load context instead of the load-from context.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>However, we recommend that you switch to the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method and supply full assembly display names to ensure that correct versions are always used.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>