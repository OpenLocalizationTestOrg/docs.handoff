{"content":"---\ntitle: \"How to: Write Queries with Complex Filtering (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: bf286ffc-7990-4b00-a4eb-ee3d70129950\n---\n# How to: Write Queries with Complex Filtering (Visual Basic)\nSometimes you want to write LINQ to XML queries with complex filters. For example, you might have to find all elements that have a child element with a particular name and value. This topic gives an example of writing a query with complex filtering.  \n  \n## Example  \n This example shows how to find all `PurchaseOrder` elements that have a child `Address` element that has a `Type` attribute equal to \"Shipping\" and a child `State` element equal to \"NY\". It uses a nested query in the `Where` clause, and the `Any` operator returns `True` if the collection has any elements in it.  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md).  \n  \n For more information about the `Any` operator, see [Quantifier Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md).  \n  \n```vb  \nDim root As XElement = XElement.Load(\"PurchaseOrders.xml\")  \nDim purchaseOrders As IEnumerable(Of XElement) = _  \n    From el In root.<PurchaseOrder> _  \n    Where _  \n        (From add In el.<Address> _  \n        Where _  \n             add.@Type = \"Shipping\" And _  \n             add.<State>.Value = \"NY\" _  \n        Select add) _  \n    .Any() _  \n    Select el  \nFor Each el As XElement In purchaseOrders  \n    Console.WriteLine(el.@PurchaseOrderNumber)  \nNext  \n```  \n  \n This code produces the following output:  \n  \n```  \n99505  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders in a Namespace](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md).  \n  \n```vb  \nImports <xmlns:aw='http://www.adventure-works.com'>  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = XElement.Load(\"PurchaseOrdersInNamespace.xml\")  \n        Dim purchaseOrders As IEnumerable(Of XElement) = _  \n            From el In root.<aw:PurchaseOrder> _  \n            Where _  \n                (From add In el.<aw:Address> _  \n                Where _  \n                     add.@aw:Type = \"Shipping\" And _  \n                     add.<aw:State>.Value = \"NY\" _  \n                Select add) _  \n            .Any() _  \n            Select el  \n        For Each el As XElement In purchaseOrders  \n            Console.WriteLine(el.@aw:PurchaseOrderNumber)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```  \n99505  \n```  \n  \n## See also\n\n- <xref:System.Xml.Linq.XElement.Attribute%2A>\n- <xref:System.Xml.Linq.XContainer.Elements%2A>\n- [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)\n- [XML Child Axis Property](../../../../visual-basic/language-reference/xml-axis/xml-child-axis-property.md)\n- [XML Attribute Axis Property](../../../../visual-basic/language-reference/xml-axis/xml-attribute-axis-property.md)\n- [XML Value Property](../../../../visual-basic/language-reference/xml-axis/xml-value-property.md)\n- [Projection Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)\n- [Quantifier Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)\n","nodes":[{"pos":[4,141],"embed":true,"restype":"x-metadata","content":"title: \"How to: Write Queries with Complex Filtering (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: bf286ffc-7990-4b00-a4eb-ee3d70129950","nodes":[{"content":"How to: Write Queries with Complex Filtering (Visual Basic)","nodes":[{"pos":[0,59],"content":"How to: Write Queries with Complex Filtering (Visual Basic)","nodes":[{"content":"How to: Write Queries with Complex Filtering (Visual Basic)","pos":[0,59]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[148,207],"content":"How to: Write Queries with Complex Filtering (Visual Basic)","linkify":"How to: Write Queries with Complex Filtering (Visual Basic)","nodes":[{"content":"How to: Write Queries with Complex Filtering (Visual Basic)","pos":[0,59]}]},{"content":"Sometimes you want to write LINQ to XML queries with complex filters.","pos":[208,277]},{"content":"For example, you might have to find all elements that have a child element with a particular name and value.","pos":[278,386]},{"content":"This topic gives an example of writing a query with complex filtering.","pos":[387,457]},{"pos":[466,473],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows how to find all <ph id=\"ph1\">`PurchaseOrder`</ph> elements that have a child <ph id=\"ph2\">`Address`</ph> element that has a <ph id=\"ph3\">`Type`</ph> attribute equal to \"Shipping\" and a child <ph id=\"ph4\">`State`</ph> element equal to \"NY\".","pos":[477,663],"source":"This example shows how to find all `PurchaseOrder` elements that have a child `Address` element that has a `Type` attribute equal to \"Shipping\" and a child `State` element equal to \"NY\"."},{"content":"It uses a nested query in the <ph id=\"ph1\">`Where`</ph> clause, and the <ph id=\"ph2\">`Any`</ph> operator returns <ph id=\"ph3\">`True`</ph> if the collection has any elements in it.","pos":[664,789],"source":" It uses a nested query in the `Where` clause, and the `Any` operator returns `True` if the collection has any elements in it."},{"pos":[796,1014],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)."},{"pos":[1021,1194],"content":"For more information about the <ph id=\"ph1\">`Any`</ph> operator, see <bpt id=\"p1\">[</bpt>Quantifier Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)</ept>.","source":"For more information about the `Any` operator, see [Quantifier Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)."},{"content":"This code produces the following output:","pos":[1683,1723]},{"pos":[1755,1762],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1766,1840]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1841,2001],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[2008,2230],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders in a Namespace<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders in a Namespace](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[2975,3015]},{"pos":[3047,3055],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3154,3285],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"},{"pos":[3288,3394],"content":"<bpt id=\"p1\">[</bpt>XML Child Axis Property<ept id=\"p1\">](../../../../visual-basic/language-reference/xml-axis/xml-child-axis-property.md)</ept>","source":"[XML Child Axis Property](../../../../visual-basic/language-reference/xml-axis/xml-child-axis-property.md)"},{"pos":[3397,3511],"content":"<bpt id=\"p1\">[</bpt>XML Attribute Axis Property<ept id=\"p1\">](../../../../visual-basic/language-reference/xml-axis/xml-attribute-axis-property.md)</ept>","source":"[XML Attribute Axis Property](../../../../visual-basic/language-reference/xml-axis/xml-attribute-axis-property.md)"},{"pos":[3514,3610],"content":"<bpt id=\"p1\">[</bpt>XML Value Property<ept id=\"p1\">](../../../../visual-basic/language-reference/xml-axis/xml-value-property.md)</ept>","source":"[XML Value Property](../../../../visual-basic/language-reference/xml-axis/xml-value-property.md)"},{"pos":[3613,3734],"content":"<bpt id=\"p1\">[</bpt>Projection Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)</ept>","source":"[Projection Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)"},{"pos":[3737,3858],"content":"<bpt id=\"p1\">[</bpt>Quantifier Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)</ept>","source":"[Quantifier Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)"}]}