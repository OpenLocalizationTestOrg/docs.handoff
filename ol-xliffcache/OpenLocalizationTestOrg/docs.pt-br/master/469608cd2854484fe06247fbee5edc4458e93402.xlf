<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="type-converters-and-markup-extensions-for-xaml.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">469608cd2854484fe06247fbee5edc4458e93402</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\type-converters-and-markup-extensions-for-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70567713e345bcb5e729919f5367223a4f1c361d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1db1c8b8c50a0a5566937c50910295b51a34409d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Type Converters and Markup Extensions for XAML | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type Converters and Markup Extensions for XAML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Type converters and markup extensions are two techniques that XAML type systems and XAML writers use to generate object graph components.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although they share some characteristics, type converters and markup extensions are represented differently in a XAML node stream.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this documentation set, type converters, markup extensions, and similar constructs are sometimes collectively referred to as value converters.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Value Converters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In XAML, value converters are used for various scenarios.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following list shows the different types of value converters in XAML:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Type converter</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Markup extension</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Value serializer</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Related class or support class that provides the logic for a XAML text syntax</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Type Converters</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the .NET Framework XAML Services definition, type converters are classes that derive from the CLR <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> is a class that was in the <ph id="ph2">[!INCLUDE[TLA#tla_netframewk](../../../includes/tlasharptla-netframewk-md.md)]</ph> before XAML existed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Its original purpose was to support property windows and similar text-based editing metaphors for <ph id="ph1">[!INCLUDE[TLA2#tla_ide](../../../includes/tla2sharptla-ide-md.md)]</ph> properties.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The introduction of XAML to .NET Framework uses <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> to convert a text syntax (as found in an attribute value or a XAML value node) into an object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> can also be used to serialize an object value to text syntax.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> was also used in previous framework-specific XAML implementations in <ph id="ph2">[!INCLUDE[TLA#tla_wpf](../../../includes/tlasharptla-wpf-md.md)]</ph> and <ph id="ph3">[!INCLUDE[vsindigo](../../../includes/vsindigo-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> in XAML, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](../../../docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Markup Extensions</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the .NET Framework XAML Services implementation, markup extensions are classes that derive from the <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Markup extensions are a concept that in this form is originated by the XAML language.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can think of a markup extension as being something like an extensible escape sequence that calls into a service class to provide its logic.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In terms of markup, XAML processors universally recognize a markup extension by a text sequence that starts with an opening brace ({) in a text string.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Markup extensions differ from type converters.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Type converters are typically associated with types or members.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>They are invoked when an object graph creation or a serialization encounters text syntax that is associated with those entities.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Markup extensions are associated with a single supporting service class, but can be applied for any member value.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>(However, you can implement your markup extension to deliberately restrict its use to certain members or destination types, by using service context.) Markup extensions can override a type converter association.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Or you can use them to specify an attribute value for members that would not otherwise support a text syntax.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about the markup extension implementation pattern for XAML, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](../../../docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> types are both in the <ph id="ph3">&lt;xref:System.Windows.Markup&gt;</ph> namespace and not in the <ph id="ph4">&lt;xref:System.Xaml&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This does not imply that these types are specific to either the WPF or <ph id="ph1">[!INCLUDE[TLA2#tla_winforms](../../../includes/tla2sharptla-winforms-md.md)]</ph> technologies that otherwise populate CLR namespaces that contain the string <ph id="ph2">`Windows`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> are in the System.Xaml assembly and have no specific framework dependency.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These types existed in the CLR namespace for <ph id="ph1">[!INCLUDE[net_v30_short](../../../includes/net-v30-short-md.md)]</ph> and remain in the CLR namespace in <ph id="ph2">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph> to avoid breaking references in existing WPF projects.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](../../../docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Value Serializers</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is a specialized type converter that is optimized for converting an object to a string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> for XAML might not implement the <ph id="ph2">`ConvertFrom`</ph> method at all.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementation obtains services in a manner that is like a <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The virtual methods provide an input <ph id="ph1">`context`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`context`</ph> parameter is of type <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph>, which inherits from the <ph id="ph3">&lt;xref:System.IServiceProvider&gt;</ph> interface and has a <ph id="ph4">&lt;xref:System.IServiceProvider.GetService%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the XAML type system and for XAML writer implementations that use XAML node loop processing for serialization, a value converter that is associated with a type or member is reported by its own <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The meaning to XAML writers that perform serialization is that if a <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A?displayProperty=fullName&gt;</ph> exist, the type converter should be used for the load path and the value serializer should be used for the save path.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A?displayProperty=fullName&gt;</ph> exists but <ph id="ph2">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A?displayProperty=fullName&gt;</ph> is <ph id="ph3">`null`</ph>, the type converter is also used for the save path.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Other Value Converters</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A value converter is extensible beyond the specific patterns of a type converter or a markup extension.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, this customization would also require the redefinition of the XAML type system as provided by .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The existing XAML type system has representations and reporting systems for type converters, markup extensions, and value serializers, but not for custom forms of value conversion.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you want to create custom value converters, use the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Type Converters and Markup Extensions in Combination</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Markup extensions and type converters are used for different situations in XAML.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Although context is available for markup extension usages, type conversion behavior of properties where a markup extension provides a value is generally is not checked in the markup extension implementations.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In other words, even if a markup extension returns a text string as its <ph id="ph1">`ProvideValue`</ph> output, type conversion behavior on that string as applied to a specific property or property value type is not invoked.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Generally, the purpose of a markup extension is to process a string and return an object without any type converter involved.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Service Context for a Value Converter</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you implement a value converter, you often need access to a context in which the value converter is applied.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This context is known as the service context.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The service context might include information such as the active XAML schema context, access to the type mapping system that the XAML schema context and XAML object writer provide, and so on.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information about the service contexts available for a value converter and how to access the services that a service context might provide, see <bpt id="p1">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p1">](../../../docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](../../../docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](../../../docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p1">](../../../docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>