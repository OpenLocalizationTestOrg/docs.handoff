{"content":"---\ntitle: \"How to: Find Existing Files and Directories in Isolated Storage | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"stores, finding files and directories\"\n  - \"locating files in isolated storage file\"\n  - \"directories [.NET Framework], isolated storage\"\n  - \"isolated storage, finding files and directories\"\n  - \"data storage using isolated storage, finding files and directories\"\n  - \"files [.NET Framework], isolated storage\"\n  - \"data stores, finding files and directories\"\n  - \"locating directories in isolated storage file\"\n  - \"storing data using isolated storage, finding files and directories\"\nms.assetid: eb28458a-6161-4e7a-9ada-30ef93761b5c\ncaps.latest.revision: 12\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# How to: Find Existing Files and Directories in Isolated Storage\nTo search for a directory in isolated storage, use the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A?displayProperty=fullName> method. This method takes a string that represents a search pattern. You can use both single-character (?) and multi-character (*) wildcard characters in the search pattern, but the wildcard characters must appear in the final portion of the name. For example, `directory1/*ect*` is a valid search string, but `*ect*/directory2` is not.  \n  \n To search for a file, use the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A?displayProperty=fullName> method. The restriction for wildcard characters in search strings that applies to <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A> also applies to <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A>.  \n  \n Neither of these methods is recursive; the <xref:System.IO.IsolatedStorage.IsolatedStorageFile> class does not supply any methods for listing all directories or files in your store. However, recursive methods are shown in the following code example.  \n  \n## Example  \n The following code example illustrates how to create files and directories in an isolated store. First, a store that is isolated for user, domain, and assembly is retrieved and placed in the `isoStore` variable. The <xref:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory%2A> method is used to set up a few different directories, and the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.IsolatedStorage.IsolatedStorageFile%29> constructor creates some files in these directories. The code then loops through the results of the `GetAllDirectories` method. This method uses <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A> to find all the directory names in the current directory. These names are stored in an array, and then `GetAllDirectories` calls itself, passing in each directory it has found. As a result, all the directory names are returned in an array. Next, the code calls the `GetAllFiles` method. This method calls `GetAllDirectories` to find out the names of all the directories, and then it checks each directory for files by using the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A> method. The result is returned in an array for display.  \n  \n [!code-cpp[Conceptual.IsolatedStorage#9](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.isolatedstorage/cpp/source8.cpp#9)]\n [!code-csharp[Conceptual.IsolatedStorage#9](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.isolatedstorage/cs/source8.cs#9)]\n [!code-vb[Conceptual.IsolatedStorage#9](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.isolatedstorage/vb/source8.vb#9)]  \n  \n## See Also  \n <xref:System.IO.IsolatedStorage.IsolatedStorageFile>   \n [Isolated Storage](../../../docs/standard/io/isolated-storage.md)","nodes":[{"pos":[4,887],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find Existing Files and Directories in Isolated Storage | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"stores, finding files and directories\"\n  - \"locating files in isolated storage file\"\n  - \"directories [.NET Framework], isolated storage\"\n  - \"isolated storage, finding files and directories\"\n  - \"data storage using isolated storage, finding files and directories\"\n  - \"files [.NET Framework], isolated storage\"\n  - \"data stores, finding files and directories\"\n  - \"locating directories in isolated storage file\"\n  - \"storing data using isolated storage, finding files and directories\"\nms.assetid: eb28458a-6161-4e7a-9ada-30ef93761b5c\ncaps.latest.revision: 12\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Find Existing Files and Directories in Isolated Storage | Microsoft Docs","nodes":[{"pos":[0,80],"content":"How to: Find Existing Files and Directories in Isolated Storage | Microsoft Docs","nodes":[{"content":"How to: Find Existing Files and Directories in Isolated Storage | Microsoft Docs","pos":[0,80]}]}],"path":["title"]}],"yml":true},{"pos":[894,957],"content":"How to: Find Existing Files and Directories in Isolated Storage","linkify":"How to: Find Existing Files and Directories in Isolated Storage","nodes":[{"content":"How to: Find Existing Files and Directories in Isolated Storage","pos":[0,63]}]},{"content":"To search for a directory in isolated storage, use the <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A?displayProperty=fullName&gt;</ph> method.","pos":[958,1119],"source":"To search for a directory in isolated storage, use the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A?displayProperty=fullName> method."},{"content":"This method takes a string that represents a search pattern.","pos":[1120,1180]},{"content":"You can use both single-character (?) and multi-character (*) wildcard characters in the search pattern, but the wildcard characters must appear in the final portion of the name.","pos":[1181,1359]},{"content":"For example, <ph id=\"ph1\">`directory1/*ect*`</ph> is a valid search string, but <ph id=\"ph2\">`*ect*/directory2`</ph> is not.","pos":[1360,1448],"source":" For example, `directory1/*ect*` is a valid search string, but `*ect*/directory2` is not."},{"content":"To search for a file, use the <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A?displayProperty=fullName&gt;</ph> method.","pos":[1455,1586],"source":"To search for a file, use the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A?displayProperty=fullName> method."},{"content":"The restriction for wildcard characters in search strings that applies to <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A&gt;</ph> also applies to <ph id=\"ph2\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A&gt;</ph>.","pos":[1587,1820],"source":" The restriction for wildcard characters in search strings that applies to <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A> also applies to <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A>."},{"content":"Neither of these methods is recursive; the <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> class does not supply any methods for listing all directories or files in your store.","pos":[1827,2008],"source":"Neither of these methods is recursive; the <xref:System.IO.IsolatedStorage.IsolatedStorageFile> class does not supply any methods for listing all directories or files in your store."},{"content":"However, recursive methods are shown in the following code example.","pos":[2009,2076]},{"pos":[2085,2092],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example illustrates how to create files and directories in an isolated store.","pos":[2096,2192]},{"content":"First, a store that is isolated for user, domain, and assembly is retrieved and placed in the <ph id=\"ph1\">`isoStore`</ph> variable.","pos":[2193,2307],"source":" First, a store that is isolated for user, domain, and assembly is retrieved and placed in the `isoStore` variable."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory%2A&gt;</ph> method is used to set up a few different directories, and the <ph id=\"ph2\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.IsolatedStorage.IsolatedStorageFile%29&gt;</ph> constructor creates some files in these directories.","pos":[2308,2653],"source":" The <xref:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory%2A> method is used to set up a few different directories, and the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.IsolatedStorage.IsolatedStorageFile%29> constructor creates some files in these directories."},{"content":"The code then loops through the results of the <ph id=\"ph1\">`GetAllDirectories`</ph> method.","pos":[2654,2728],"source":" The code then loops through the results of the `GetAllDirectories` method."},{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A&gt;</ph> to find all the directory names in the current directory.","pos":[2729,2877],"source":" This method uses <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A> to find all the directory names in the current directory."},{"content":"These names are stored in an array, and then <ph id=\"ph1\">`GetAllDirectories`</ph> calls itself, passing in each directory it has found.","pos":[2878,2996],"source":" These names are stored in an array, and then `GetAllDirectories` calls itself, passing in each directory it has found."},{"content":"As a result, all the directory names are returned in an array.","pos":[2997,3059]},{"content":"Next, the code calls the <ph id=\"ph1\">`GetAllFiles`</ph> method.","pos":[3060,3106],"source":" Next, the code calls the `GetAllFiles` method."},{"content":"This method calls <ph id=\"ph1\">`GetAllDirectories`</ph> to find out the names of all the directories, and then it checks each directory for files by using the <ph id=\"ph2\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A&gt;</ph> method.","pos":[3107,3324],"source":" This method calls `GetAllDirectories` to find out the names of all the directories, and then it checks each directory for files by using the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A> method."},{"content":"The result is returned in an array for display.","pos":[3325,3372]},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.IsolatedStorage#9<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.isolatedstorage/cpp/source8.cpp#9)</ept><ept id=\"p1\">]</ept>","pos":[3379,3512],"source":"[!code-cpp[Conceptual.IsolatedStorage#9](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.isolatedstorage/cpp/source8.cpp#9)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Conceptual.IsolatedStorage#9<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.isolatedstorage/cs/source8.cs#9)</ept><ept id=\"p1\">]</ept>","pos":[3514,3651],"source":"[!code-csharp[Conceptual.IsolatedStorage#9](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.isolatedstorage/cs/source8.cs#9)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Conceptual.IsolatedStorage#9<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.isolatedstorage/vb/source8.vb#9)</ept><ept id=\"p1\">]</ept>","pos":[3653,3791],"source":"[!code-vb[Conceptual.IsolatedStorage#9](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.isolatedstorage/vb/source8.vb#9)]"},{"pos":[3800,3808],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph>","pos":[3812,3864],"source":"<xref:System.IO.IsolatedStorage.IsolatedStorageFile> "},{"content":"<bpt id=\"p1\">[</bpt>Isolated Storage<ept id=\"p1\">](../../../docs/standard/io/isolated-storage.md)</ept>","pos":[3869,3934],"source":"[Isolated Storage](../../../docs/standard/io/isolated-storage.md)"}]}