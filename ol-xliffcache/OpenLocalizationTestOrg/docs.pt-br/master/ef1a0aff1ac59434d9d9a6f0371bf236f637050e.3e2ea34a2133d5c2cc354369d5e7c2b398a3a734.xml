{"content":"---\ntitle: \"Equality Operators\"\nms.date: \"10/22/2008\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"class library design guidelines [.NET Framework], Equals method\"\n  - \"class library design guidelines [.NET Framework], equality operator\"\n  - \"equality operator (==) [.NET Framework]\"\n  - \"Equals method\"\n  - \"== operator (equality) [.NET Framework]\"\nms.assetid: bc496a91-fefb-4ce0-ab4c-61f09964119a\nauthor: \"KrzysztofCwalina\"\n---\n# Equality Operators\nThis section discusses overloading equality operators and refers to `operator==` and `operator!=` as equality operators.  \n  \n **X DO NOT** overload one of the equality operators and not the other.  \n  \n **✓ DO** ensure that <xref:System.Object.Equals%2A?displayProperty=nameWithType> and the equality operators have exactly the same semantics and similar performance characteristics.  \n  \n This often means that `Object.Equals` needs to be overridden when the equality operators are overloaded.  \n  \n **X AVOID** throwing exceptions from equality operators.  \n  \n For example, return false if one of the arguments is null instead of throwing `NullReferenceException`.  \n  \n## Equality Operators on Value Types  \n **✓ DO** overload the equality operators on value types, if equality is meaningful.  \n  \n In most programming languages, there is no default implementation of `operator==` for value types.  \n  \n## Equality Operators on Reference Types  \n **X AVOID** overloading equality operators on mutable reference types.  \n  \n Many languages have built-in equality operators for reference types. The built-in operators usually implement the reference equality, and many developers are surprised when the default behavior is changed to the value equality.  \n  \n This problem is mitigated for immutable reference types because immutability makes it much harder to notice the difference between reference equality and value equality.  \n  \n **X AVOID** overloading equality operators on reference types if the implementation would be significantly slower than that of reference equality.  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See also\n\n- [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)\n- [Usage Guidelines](../../../docs/standard/design-guidelines/usage-guidelines.md)\n","nodes":[{"pos":[4,438],"embed":true,"restype":"x-metadata","content":"title: \"Equality Operators\"\nms.date: \"10/22/2008\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"class library design guidelines [.NET Framework], Equals method\"\n  - \"class library design guidelines [.NET Framework], equality operator\"\n  - \"equality operator (==) [.NET Framework]\"\n  - \"Equals method\"\n  - \"== operator (equality) [.NET Framework]\"\nms.assetid: bc496a91-fefb-4ce0-ab4c-61f09964119a\nauthor: \"KrzysztofCwalina\"","nodes":[{"content":"Equality Operators","nodes":[{"pos":[0,18],"content":"Equality Operators","nodes":[{"content":"Equality Operators","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[445,463],"content":"Equality Operators","linkify":"Equality Operators","nodes":[{"content":"Equality Operators","pos":[0,18]}]},{"pos":[464,584],"content":"This section discusses overloading equality operators and refers to <ph id=\"ph1\">`operator==`</ph> and <ph id=\"ph2\">`operator!=`</ph> as equality operators.","source":"This section discusses overloading equality operators and refers to `operator==` and `operator!=` as equality operators."},{"pos":[591,661],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> overload one of the equality operators and not the other.","source":"**X DO NOT** overload one of the equality operators and not the other."},{"pos":[668,848],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> ensure that <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> and the equality operators have exactly the same semantics and similar performance characteristics.","source":"**✓ DO** ensure that <xref:System.Object.Equals%2A?displayProperty=nameWithType> and the equality operators have exactly the same semantics and similar performance characteristics."},{"pos":[855,959],"content":"This often means that <ph id=\"ph1\">`Object.Equals`</ph> needs to be overridden when the equality operators are overloaded.","source":"This often means that `Object.Equals` needs to be overridden when the equality operators are overloaded."},{"pos":[966,1022],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> throwing exceptions from equality operators.","source":"**X AVOID** throwing exceptions from equality operators."},{"pos":[1029,1132],"content":"For example, return false if one of the arguments is null instead of throwing <ph id=\"ph1\">`NullReferenceException`</ph>.","source":"For example, return false if one of the arguments is null instead of throwing `NullReferenceException`."},{"pos":[1141,1174],"content":"Equality Operators on Value Types","linkify":"Equality Operators on Value Types","nodes":[{"content":"Equality Operators on Value Types","pos":[0,33]}]},{"pos":[1178,1261],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> overload the equality operators on value types, if equality is meaningful.","source":"**✓ DO** overload the equality operators on value types, if equality is meaningful."},{"pos":[1268,1366],"content":"In most programming languages, there is no default implementation of <ph id=\"ph1\">`operator==`</ph> for value types.","source":"In most programming languages, there is no default implementation of `operator==` for value types."},{"pos":[1375,1412],"content":"Equality Operators on Reference Types","linkify":"Equality Operators on Reference Types","nodes":[{"content":"Equality Operators on Reference Types","pos":[0,37]}]},{"pos":[1416,1486],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> overloading equality operators on mutable reference types.","source":"**X AVOID** overloading equality operators on mutable reference types."},{"content":"Many languages have built-in equality operators for reference types.","pos":[1493,1561]},{"content":"The built-in operators usually implement the reference equality, and many developers are surprised when the default behavior is changed to the value equality.","pos":[1562,1720]},{"content":"This problem is mitigated for immutable reference types because immutability makes it much harder to notice the difference between reference equality and value equality.","pos":[1727,1896]},{"pos":[1903,2049],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> overloading equality operators on reference types if the implementation would be significantly slower than that of reference equality.","source":"**X AVOID** overloading equality operators on reference types if the implementation would be significantly slower than that of reference equality."},{"pos":[2056,2123],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[2130,2535],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[2544,2552],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2556,2636],"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept>","source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)"},{"pos":[2639,2719],"content":"<bpt id=\"p1\">[</bpt>Usage Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/usage-guidelines.md)</ept>","source":"[Usage Guidelines](../../../docs/standard/design-guidelines/usage-guidelines.md)"}]}