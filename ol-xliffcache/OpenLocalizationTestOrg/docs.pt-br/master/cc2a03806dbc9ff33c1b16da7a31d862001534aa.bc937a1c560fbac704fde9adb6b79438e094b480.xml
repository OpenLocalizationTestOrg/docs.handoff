{"content":"---\ntitle: \"How to: Inspect or Modify Messages on the Client\"\nms.date: \"03/30/2017\"\nms.assetid: b8256335-f1c2-419f-b862-9f220ccad84c\n---\n# How to: Inspect or Modify Messages on the Client\nYou can inspect or modify the incoming or outgoing messages across a WCF client by implementing a <xref:System.ServiceModel.Dispatcher.IClientMessageInspector?displayProperty=nameWithType> and inserting it into the client runtime. For more information, see [Extending Clients](../../../../docs/framework/wcf/extending/extending-clients.md). The equivalent feature on the service is the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>. For a complete code example see the [Message Inspectors](../../../../docs/framework/wcf/samples/message-inspectors.md) sample.  \n  \n### To inspect or modify messages  \n  \n1.  Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector?displayProperty=nameWithType> interface.  \n  \n2.  Implement a <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> depending upon the scope at which you want to insert the client message inspector. <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> allows you to change behavior at the endpoint level. <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> allows you to change behavior at the contract level.  \n  \n3.  Insert the behavior prior to calling the <xref:System.ServiceModel.ClientBase%601.Open%2A?displayProperty=nameWithType> or the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method on the <xref:System.ServiceModel.ChannelFactory%601?displayProperty=nameWithType>. For details, see [Configuring and Extending the Runtime with Behaviors](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  \n  \n## Example  \n The following code examples show, in order:  \n  \n-   A client inspector implementation.  \n  \n-   An endpoint behavior that inserts the inspector.  \n  \n-   A <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>- derived class that allows you to add the behavior in a configuration file.  \n  \n-   A configuration file that adds the endpoint behavior which inserts the client message inspector into the client runtime.  \n  \n```csharp  \n// Client message inspector  \npublic class SimpleMessageInspector : IClientMessageInspector  \n{  \n    public void AfterReceiveReply(ref System.ServiceModel.Channels.Message reply, object correlationState)  \n    {  \n        // Implement this method to inspect/modify messages after a message  \n        // is received but prior to passing it back to the client   \n        Console.WriteLine(\"AfterReceiveReply called\");  \n    }  \n  \n    public object BeforeSendRequest(ref System.ServiceModel.Channels.Message request, IClientChannel channel)  \n    {  \n        // Implement this method to inspect/modify messages before they   \n        // are sent to the service  \n        Console.WriteLine(\"BeforeSendRequest called\");  \n        return null;  \n    }  \n}  \n```  \n  \n```csharp  \n// Endpoint behavior  \npublic class SimpleEndpointBehavior : IEndpointBehavior  \n{  \n    public void AddBindingParameters(ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters)  \n    {  \n         // No implementation necessary  \n    }  \n  \n    public void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)  \n    {  \n        clientRuntime.MessageInspectors.Add(new SimpleMessageInspector());  \n    }  \n  \n    public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)  \n    {  \n         // No implementation necessary  \n    }  \n  \n    public void Validate(ServiceEndpoint endpoint)  \n    {  \n         // No implementation necessary  \n    }  \n}  \n```  \n  \n```csharp  \n// Configuration element   \npublic class SimpleBehaviorExtensionElement : BehaviorExtensionElement  \n{  \n    public override Type BehaviorType  \n    {  \n        get { return typeof(SimpleEndpointBehavior); }  \n    }  \n  \n    protected override object CreateBehavior()  \n    {  \n         // Create the  endpoint behavior that will insert the message  \n         // inspector into the client runtime  \n        return new SimpleEndpointBehavior();  \n    }  \n}  \n```  \n  \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <system.serviceModel>  \n        <client>  \n            <endpoint address=\"http://localhost:8080/SimpleService/\"   \n                      binding=\"wsHttpBinding\"\n                      behaviorConfiguration=\"clientInspectorsAdded\"\n                      contract=\"ServiceReference1.IService1\"  \n                      name=\"WSHttpBinding_IService1\"/>  \n        </client>  \n  \n      <behaviors>  \n        <endpointBehaviors>  \n          <behavior name=\"clientInspectorsAdded\">  \n            <simpleBehaviorExtension />  \n          </behavior>  \n        </endpointBehaviors>  \n      </behaviors>  \n      <extensions>  \n        <behaviorExtensions>  \n          <add  \n            name=\"simpleBehaviorExtension\"  \n            type=\"SimpleServiceLib.SimpleBehaviorExtensionElement, Host, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"/>  \n        </behaviorExtensions>  \n      </extensions>  \n    </system.serviceModel>  \n</configuration>  \n```  \n  \n## See also\n\n- <xref:System.ServiceModel.Dispatcher.IClientMessageInspector?displayProperty=nameWithType>\n- <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>\n- [Configuring and Extending the Runtime with Behaviors](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)\n","nodes":[{"pos":[4,132],"embed":true,"restype":"x-metadata","content":"title: \"How to: Inspect or Modify Messages on the Client\"\nms.date: \"03/30/2017\"\nms.assetid: b8256335-f1c2-419f-b862-9f220ccad84c","nodes":[{"content":"How to: Inspect or Modify Messages on the Client","nodes":[{"pos":[0,48],"content":"How to: Inspect or Modify Messages on the Client","nodes":[{"content":"How to: Inspect or Modify Messages on the Client","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[139,187],"content":"How to: Inspect or Modify Messages on the Client","linkify":"How to: Inspect or Modify Messages on the Client","nodes":[{"content":"How to: Inspect or Modify Messages on the Client","pos":[0,48]}]},{"content":"You can inspect or modify the incoming or outgoing messages across a WCF client by implementing a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector?displayProperty=nameWithType&gt;</ph> and inserting it into the client runtime.","pos":[188,418],"source":"You can inspect or modify the incoming or outgoing messages across a WCF client by implementing a <xref:System.ServiceModel.Dispatcher.IClientMessageInspector?displayProperty=nameWithType> and inserting it into the client runtime."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Extending Clients<ept id=\"p1\">](../../../../docs/framework/wcf/extending/extending-clients.md)</ept>.","pos":[419,528],"source":" For more information, see [Extending Clients](../../../../docs/framework/wcf/extending/extending-clients.md)."},{"content":"The equivalent feature on the service is the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType&gt;</ph>.","pos":[529,667],"source":" The equivalent feature on the service is the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>."},{"content":"For a complete code example see the <bpt id=\"p1\">[</bpt>Message Inspectors<ept id=\"p1\">](../../../../docs/framework/wcf/samples/message-inspectors.md)</ept> sample.","pos":[668,794],"source":" For a complete code example see the [Message Inspectors](../../../../docs/framework/wcf/samples/message-inspectors.md) sample."},{"pos":[804,833],"content":"To inspect or modify messages","linkify":"To inspect or modify messages","nodes":[{"content":"To inspect or modify messages","pos":[0,29]}]},{"pos":[843,958],"content":"Implement the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector?displayProperty=nameWithType&gt;</ph> interface.","source":"Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector?displayProperty=nameWithType> interface."},{"content":"Implement a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph> depending upon the scope at which you want to insert the client message inspector.","pos":[968,1237],"source":"Implement a <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> depending upon the scope at which you want to insert the client message inspector."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> allows you to change behavior at the endpoint level.","pos":[1238,1376],"source":"<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> allows you to change behavior at the endpoint level."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph> allows you to change behavior at the contract level.","pos":[1377,1515],"source":"<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> allows you to change behavior at the contract level."},{"content":"Insert the behavior prior to calling the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601.Open%2A?displayProperty=nameWithType&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType&gt;</ph> method on the <ph id=\"ph3\">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=nameWithType&gt;</ph>.","pos":[1525,1826],"source":"Insert the behavior prior to calling the <xref:System.ServiceModel.ClientBase%601.Open%2A?displayProperty=nameWithType> or the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method on the <xref:System.ServiceModel.ChannelFactory%601?displayProperty=nameWithType>."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id=\"p1\">](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.","pos":[1827,1997],"source":" For details, see [Configuring and Extending the Runtime with Behaviors](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)."},{"pos":[2006,2013],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code examples show, in order:","pos":[2017,2060]},{"content":"A client inspector implementation.","pos":[2070,2104]},{"content":"An endpoint behavior that inserts the inspector.","pos":[2114,2162]},{"pos":[2172,2315],"content":"A <ph id=\"ph1\">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph>- derived class that allows you to add the behavior in a configuration file.","source":"A <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>- derived class that allows you to add the behavior in a configuration file."},{"content":"A configuration file that adds the endpoint behavior which inserts the client message inspector into the client runtime.","pos":[2325,2445]},{"pos":[5505,5513],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5705,5857],"content":"<bpt id=\"p1\">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id=\"p1\">](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>","source":"[Configuring and Extending the Runtime with Behaviors](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)"}]}