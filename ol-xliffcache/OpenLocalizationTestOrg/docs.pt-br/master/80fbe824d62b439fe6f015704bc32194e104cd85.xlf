<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-extend-the-async-walkthrough-by-using-task-whenall.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80fbe824d62b439fe6f015704bc32194e104cd85</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\how-to-extend-the-async-walkthrough-by-using-task-whenall.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2cfc0d9e0c00f4366a8958c25ab866ba802e6db</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cce7b63248f1e8b2313acf97a29cceae6db9242</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Extend the Async Walkthrough by Using Task.WhenAll (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Extend the Async Walkthrough by Using Task.WhenAll (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can improve the performance of the async solution in <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept> by using the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This method asynchronously awaits multiple asynchronous operations, which are represented as a collection of tasks.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You might have noticed in the walkthrough that the websites download at different rates.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Sometimes one of the websites is very slow, which delays all the remaining downloads.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you run the asynchronous solutions that you build in the walkthrough, you can end the program easily if you don't want to wait, but a better option would be to start all the downloads at the same time and let faster downloads continue without waiting for the one that’s delayed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You apply the <ph id="ph1">`Task.WhenAll`</ph> method to a collection of tasks.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The application of <ph id="ph1">`WhenAll`</ph> returns a single task that isn’t complete until every task in the collection is completed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The tasks appear to run in parallel, but no additional threads are created.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The tasks can complete in any order.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following procedures describe extensions to the async applications that are developed in <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can develop the applications by either completing the walkthrough or downloading the code from <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To run the example, you must have Visual Studio 2012 or later installed on your computer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To add Task.WhenAll to your GetURLContentsAsync solution</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`ProcessURLAsync`</ph> method to the first application that's developed in <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you downloaded the code from  <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)</ept>, open the AsyncWalkthrough project, and then add <ph id="ph1">`ProcessURLAsync`</ph> to the MainWindow.xaml.vb file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you developed the code by completing the walkthrough, add <ph id="ph1">`ProcessURLAsync`</ph> to the application that includes the <ph id="ph2">`GetURLContentsAsync`</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The MainWindow.xaml.vb file for this application is the first example in the "Complete Code Examples from the Walkthrough" section.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessURLAsync`</ph> method consolidates the actions in the body of the <ph id="ph2">`For Each`</ph> loop in <ph id="ph3">`SumPageSizesAsync`</ph> in the original walkthrough.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The method asynchronously downloads the contents of a specified website as a byte array, and then displays and returns the length of the byte array.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Comment out or delete the <ph id="ph1">`For Each`</ph> loop in <ph id="ph2">`SumPageSizesAsync`</ph>, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create a collection of tasks.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code defines a <bpt id="p1">[</bpt>query<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/index.md)</ept> that, when executed by the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> method, creates a collection of tasks that download the contents of each website.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The tasks are started when the query is evaluated.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add the following code to method <ph id="ph1">`SumPageSizesAsync`</ph> after the declaration of <ph id="ph2">`urlList`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Apply <ph id="ph1">`Task.WhenAll`</ph> to the collection of tasks, <ph id="ph2">`downloadTasks`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Task.WhenAll`</ph> returns a single task that finishes when all the tasks in the collection of tasks have completed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`Await`</ph> expression awaits the completion of the single task that <ph id="ph2">`WhenAll`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The expression evaluates to an array of integers, where each integer is the length of a downloaded website.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add the following code to <ph id="ph1">`SumPageSizesAsync`</ph>, just after the code that you added in the previous step.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Finally, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph> method to calculate the sum of the lengths of all the websites.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Add the following line to <ph id="ph1">`SumPageSizesAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To add Task.WhenAll to the HttpClient.GetByteArrayAsync solution</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add the following version of <ph id="ph1">`ProcessURLAsync`</ph> to the second application that's developed in <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you downloaded the code from <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)</ept>, open the AsyncWalkthrough_HttpClient project, and then add <ph id="ph1">`ProcessURLAsync`</ph> to the MainWindow.xaml.vb file.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you developed the code by completing the walkthrough, add <ph id="ph1">`ProcessURLAsync`</ph> to the application that uses the <ph id="ph2">`HttpClient.GetByteArrayAsync`</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The MainWindow.xaml.vb file for this application is the second example in the "Complete Code Examples from the Walkthrough" section.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessURLAsync`</ph> method consolidates the actions in the body of the <ph id="ph2">`For Each`</ph> loop in <ph id="ph3">`SumPageSizesAsync`</ph> in the original walkthrough.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The method asynchronously downloads the contents of a specified website as a byte array, and then displays and returns the length of the byte array.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The only difference from the <ph id="ph1">`ProcessURLAsync`</ph> method in the previous procedure is the use of the <ph id="ph2">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance, <ph id="ph3">`client`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Comment out or delete the <ph id="ph1">`For Each`</ph> loop in <ph id="ph2">`SumPageSizesAsync`</ph>, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Define a <bpt id="p1">[</bpt>query<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/index.md)</ept> that, when executed by the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> method, creates a collection of tasks that download the contents of each website.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The tasks are started when the query is evaluated.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Add the following code to method <ph id="ph1">`SumPageSizesAsync`</ph> after the declaration of <ph id="ph2">`client`</ph> and <ph id="ph3">`urlList`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next, apply <ph id="ph1">`Task.WhenAll`</ph> to the collection of tasks, <ph id="ph2">`downloadTasks`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Task.WhenAll`</ph> returns a single task that finishes when all the tasks in the collection of tasks have completed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`Await`</ph> expression awaits the completion of the single task that <ph id="ph2">`WhenAll`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When complete, the <ph id="ph1">`Await`</ph> expression evaluates to an array of integers, where each integer is the length of a downloaded website.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Add the following code to <ph id="ph1">`SumPageSizesAsync`</ph>, just after the code that you added in the previous step.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Finally, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph> method to get the sum of the lengths of all the websites.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Add the following line to <ph id="ph1">`SumPageSizesAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To test the Task.WhenAll solutions</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For either solution, choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The output should resemble the output from the async solutions in <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>However, notice that the websites appear in a different order each time.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code shows the extensions to the project that uses the <ph id="ph1">`GetURLContentsAsync`</ph> method to download content from the web.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following code shows the extensions to the project that uses method <ph id="ph1">`HttpClient.GetByteArrayAsync`</ph> to download content from the web.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>