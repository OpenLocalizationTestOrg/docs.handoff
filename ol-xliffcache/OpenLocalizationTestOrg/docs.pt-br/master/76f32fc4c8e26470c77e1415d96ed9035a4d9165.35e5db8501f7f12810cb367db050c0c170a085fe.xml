{"content":"---\ntitle: \"Implicit and Explicit Conversions (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"conversions, type\"\n  - \"variables [Visual Basic], changing data type\"\n  - \"casting\"\n  - \"conversions, data type\"\n  - \"type conversion, implicit conversions\"\n  - \"CType function, conversions\"\n  - \"casting, data types\"\n  - \"data type conversion, explicit\"\n  - \"type conversion, explicit conversions\"\n  - \"data types [Visual Basic], casting\"\n  - \"conversions, implicit\"\n  - \"explicit data type conversions\"\n  - \"conversions\"\n  - \"changing data types\"\n  - \"conversions, explicit\"\n  - \"data type conversion, implicit\"\n  - \"implicit data type conversions\"\nms.assetid: 77de1659-af8a-492c-967e-e7ef60ccce66\ncaps.latest.revision: 25\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Implicit and Explicit Conversions (Visual Basic)\nAn *implicit conversion* does not require any special syntax in the source code. In the following example, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] implicitly converts the value of `k` to a single-precision floating-point value before assigning it to `q`.  \n  \n```  \nDim k As Integer  \nDim q As Double  \n' Integer widens to Double, so you can do this with Option Strict On.  \nk = 432  \nq = k  \n```  \n  \n An *explicit conversion* uses a type conversion keyword. [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides several such keywords, which coerce an expression in parentheses to the desired data type. These keywords act like functions, but the compiler generates the code inline, so execution is slightly faster than with a function call.  \n  \n In the following extension of the preceding example, the `CInt` keyword converts the value of `q` back to an integer before assigning it to `k`.  \n  \n```  \n' q had been assigned the value 432 from k.  \nq = Math.Sqrt(q)  \nk = CInt(q)  \n' k now has the value 21 (rounded square root of 432).  \n```  \n  \n## Conversion Keywords  \n The following table shows the available conversion keywords.  \n  \n|Type conversion keyword|Converts an expression to data type|Allowable data types of expression to be converted|  \n|---|---|---|  \n|`CBool`|[Boolean Data Type](../../../../visual-basic/language-reference/data-types/boolean-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `String`, `Object`|  \n|`CByte`|[Byte Data Type](../../../../visual-basic/language-reference/data-types/byte-data-type.md)|Any numeric type (including `SByte` and enumerated types), `Boolean`, `String`, `Object`|  \n|`CChar`|[Char Data Type](../../../../visual-basic/language-reference/data-types/char-data-type.md)|`String`, `Object`|  \n|`CDate`|[Date Data Type](../../../../visual-basic/language-reference/data-types/date-data-type.md)|`String`, `Object`|  \n|`CDbl`|[Double Data Type](../../../../visual-basic/language-reference/data-types/double-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n|`CDec`|[Decimal Data Type](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n|`CInt`|[Integer Data Type](../../../../visual-basic/language-reference/data-types/integer-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n|`CLng`|[Long Data Type](../../../../visual-basic/language-reference/data-types/long-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n|`CObj`|[Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)|Any type|  \n|`CSByte`|[SByte Data Type](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)|Any numeric type (including `Byte` and enumerated types), `Boolean`, `String`, `Object`|  \n|`CShort`|[Short Data Type](../../../../visual-basic/language-reference/data-types/short-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n|`CSng`|[Single Data Type](../../../../visual-basic/language-reference/data-types/single-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n|`CStr`|[String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `Char`, `Char` array, `Date`, `Object`|  \n|`CType`|Type specified following the comma (`,`)|When converting to an *elementary data type* (including an array of an elementary type), the same types as allowed for the corresponding conversion keyword<br /><br /> When converting to a *composite data type*, the interfaces it implements and the classes from which it inherits<br /><br /> When converting to a class or structure on which you have overloaded `CType`, that class or structure|  \n|`CUInt`|[UInteger Data Type](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n|`CULng`|[ULong Data Type](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n|`CUShort`|[UShort Data Type](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)|Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`|  \n  \n## The CType Function  \n The [CType Function](../../../../visual-basic/language-reference/functions/ctype-function.md) operates on two arguments. The first is the expression to be converted, and the second is the destination data type or object class. Note that the first argument must be an expression, not a type.  \n  \n `CType` is an *inline function*, meaning the compiled code makes the conversion, often without generating a function call. This improves performance.  \n  \n For a comparison of `CType` with the other type conversion keywords, see [DirectCast Operator](../../../../visual-basic/language-reference/operators/directcast-operator.md) and [TryCast Operator](../../../../visual-basic/language-reference/operators/trycast-operator.md).  \n  \n### Elementary Types  \n The following example demonstrates the use of `CType`.  \n  \n```  \nk = CType(q, Integer)  \n' The following statement coerces w to the specific object class Label.  \nf = CType(w, Label)  \n```  \n  \n### Composite Types  \n You can use `CType` to convert values to composite data types as well as to elementary types. You can also use it to coerce an object class to the type of one of its interfaces, as in the following example.  \n  \n```  \n' Assume class cZone implements interface iZone.  \nDim h As Object  \n' The first argument to CType must be an expression, not a type.  \nDim cZ As cZone  \n' The following statement coerces a cZone object to its interface iZone.  \nh = CType(cZ, iZone)  \n```  \n  \n### Array Types  \n `CType` can also convert array data types, as in the following example.  \n  \n```  \nDim v() As classV  \nDim obArray() As Object  \n' Assume some object array has been assigned to obArray.  \n' Check for run-time type compatibility.  \nIf TypeOf obArray Is classV()  \n    ' obArray can be converted to classV.  \n    v = CType(obArray, classV())  \nEnd If  \n```  \n  \n For more information and an example, see [Array Conversions](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md).  \n  \n### Types Defining CType  \n You can define `CType` on a class or structure you have defined. This allows you to convert values to and from the type of your class or structure. For more information and an example, see [How to: Define a Conversion Operator](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md).  \n  \n> [!NOTE]\n>  Values used with a conversion keyword must be valid for the destination data type, or an error occurs. For example, if you attempt to convert a `Long` to an `Integer`, the value of the `Long` must be within the valid range for the `Integer` data type.  \n  \n> [!CAUTION]\n>  Specifying `CType` to convert from one class type to another fails at run time if the source type does not derive from the destination type. Such a failure throws an <xref:System.InvalidCastException> exception.  \n  \n However, if one of the types is a structure or class you have defined, and if you have defined `CType` on that structure or class, a conversion can succeed if it satisfies the requirements of your `CType`. See [How to: Define a Conversion Operator](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md).  \n  \n Performing an explicit conversion is also known as *casting* an expression to a given data type or object class.  \n  \n## See Also  \n [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)   \n [Conversions Between Strings and Other Types](../../../../visual-basic/programming-guide/language-features/data-types/conversions-between-strings-and-other-types.md)   \n [How to: Convert an Object to Another Type in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md)   \n [Structures](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)   \n [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Type Conversion Functions](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)","nodes":[{"pos":[12,77],"content":"Implicit and Explicit Conversions (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Implicit and Explicit Conversions (Visual Basic) | Microsoft Docs","pos":[0,65]}]},{"pos":[1127,1175],"content":"Implicit and Explicit Conversions (Visual Basic)","linkify":"Implicit and Explicit Conversions (Visual Basic)","nodes":[{"content":"Implicit and Explicit Conversions (Visual Basic)","pos":[0,48]}]},{"content":"An <bpt id=\"p1\">*</bpt>implicit conversion<ept id=\"p1\">*</ept> does not require any special syntax in the source code.","pos":[1176,1256],"source":"An *implicit conversion* does not require any special syntax in the source code."},{"content":"In the following example, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> implicitly converts the value of <ph id=\"ph2\">`k`</ph> to a single-precision floating-point value before assigning it to <ph id=\"ph3\">`q`</ph>.","pos":[1257,1483],"source":" In the following example, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] implicitly converts the value of `k` to a single-precision floating-point value before assigning it to `q`."},{"content":"An <bpt id=\"p1\">*</bpt>explicit conversion<ept id=\"p1\">*</ept> uses a type conversion keyword.","pos":[1632,1688],"source":"An *explicit conversion* uses a type conversion keyword."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> provides several such keywords, which coerce an expression in parentheses to the desired data type.","pos":[1689,1881],"source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides several such keywords, which coerce an expression in parentheses to the desired data type."},{"content":"These keywords act like functions, but the compiler generates the code inline, so execution is slightly faster than with a function call.","pos":[1882,2019]},{"pos":[2026,2170],"content":"In the following extension of the preceding example, the <ph id=\"ph1\">`CInt`</ph> keyword converts the value of <ph id=\"ph2\">`q`</ph> back to an integer before assigning it to <ph id=\"ph3\">`k`</ph>.","source":"In the following extension of the preceding example, the `CInt` keyword converts the value of `q` back to an integer before assigning it to `k`."},{"pos":[2330,2349],"content":"Conversion Keywords","linkify":"Conversion Keywords","nodes":[{"content":"Conversion Keywords","pos":[0,19]}]},{"content":"The following table shows the available conversion keywords.","pos":[2353,2413]},{"content":"Type conversion keyword","pos":[2420,2443]},{"content":"Converts an expression to data type","pos":[2444,2479]},{"content":"Allowable data types of expression to be converted","pos":[2480,2530]},{"pos":[2559,2655],"content":"<bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept>","source":"[Boolean Data Type](../../../../visual-basic/language-reference/data-types/boolean-data-type.md)"},{"pos":[2656,2742],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`String`</ph>, <ph id=\"ph4\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `String`, `Object`"},{"pos":[2755,2845],"content":"<bpt id=\"p1\">[</bpt>Byte Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>","source":"[Byte Data Type](../../../../visual-basic/language-reference/data-types/byte-data-type.md)"},{"pos":[2846,2934],"content":"Any numeric type (including <ph id=\"ph1\">`SByte`</ph> and enumerated types), <ph id=\"ph2\">`Boolean`</ph>, <ph id=\"ph3\">`String`</ph>, <ph id=\"ph4\">`Object`</ph>","source":"Any numeric type (including `SByte` and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[2947,3037],"content":"<bpt id=\"p1\">[</bpt>Char Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/char-data-type.md)</ept>","source":"[Char Data Type](../../../../visual-basic/language-reference/data-types/char-data-type.md)"},{"pos":[3038,3056],"content":"<ph id=\"ph1\">`String`</ph>, <ph id=\"ph2\">`Object`</ph>","source":"`String`, `Object`"},{"pos":[3069,3159],"content":"<bpt id=\"p1\">[</bpt>Date Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/date-data-type.md)</ept>","source":"[Date Data Type](../../../../visual-basic/language-reference/data-types/date-data-type.md)"},{"pos":[3160,3178],"content":"<ph id=\"ph1\">`String`</ph>, <ph id=\"ph2\">`Object`</ph>","source":"`String`, `Object`"},{"pos":[3190,3284],"content":"<bpt id=\"p1\">[</bpt>Double Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>","source":"[Double Data Type](../../../../visual-basic/language-reference/data-types/double-data-type.md)"},{"pos":[3285,3382],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[3394,3490],"content":"<bpt id=\"p1\">[</bpt>Decimal Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>","source":"[Decimal Data Type](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)"},{"pos":[3491,3588],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[3600,3696],"content":"<bpt id=\"p1\">[</bpt>Integer Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>","source":"[Integer Data Type](../../../../visual-basic/language-reference/data-types/integer-data-type.md)"},{"pos":[3697,3794],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[3806,3896],"content":"<bpt id=\"p1\">[</bpt>Long Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>","source":"[Long Data Type](../../../../visual-basic/language-reference/data-types/long-data-type.md)"},{"pos":[3897,3994],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[4006,4100],"content":"<bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>","source":"[Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)"},{"content":"Any type","pos":[4101,4109]},{"pos":[4123,4215],"content":"<bpt id=\"p1\">[</bpt>SByte Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>","source":"[SByte Data Type](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)"},{"pos":[4216,4303],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph> and enumerated types), <ph id=\"ph2\">`Boolean`</ph>, <ph id=\"ph3\">`String`</ph>, <ph id=\"ph4\">`Object`</ph>","source":"Any numeric type (including `Byte` and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[4317,4409],"content":"<bpt id=\"p1\">[</bpt>Short Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>","source":"[Short Data Type](../../../../visual-basic/language-reference/data-types/short-data-type.md)"},{"pos":[4410,4507],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[4519,4613],"content":"<bpt id=\"p1\">[</bpt>Single Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>","source":"[Single Data Type](../../../../visual-basic/language-reference/data-types/single-data-type.md)"},{"pos":[4614,4711],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[4723,4817],"content":"<bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept>","source":"[String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md)"},{"pos":[4818,4935],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`Char`</ph>, <ph id=\"ph5\">`Char`</ph> array, <ph id=\"ph6\">`Date`</ph>, <ph id=\"ph7\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `Char`, `Char` array, `Date`, `Object`"},{"pos":[4948,4988],"content":"Type specified following the comma (<ph id=\"ph1\">`,`</ph>)","source":"Type specified following the comma (`,`)"},{"content":"When converting to an <bpt id=\"p1\">*</bpt>elementary data type<ept id=\"p1\">*</ept> (including an array of an elementary type), the same types as allowed for the corresponding conversion keyword","pos":[4989,5144],"source":"When converting to an *elementary data type* (including an array of an elementary type), the same types as allowed for the corresponding conversion keyword"},{"content":"When converting to a <bpt id=\"p1\">*</bpt>composite data type<ept id=\"p1\">*</ept>, the interfaces it implements and the classes from which it inherits","pos":[5157,5268],"source":" When converting to a *composite data type*, the interfaces it implements and the classes from which it inherits"},{"content":"When converting to a class or structure on which you have overloaded <ph id=\"ph1\">`CType`</ph>, that class or structure","pos":[5281,5382],"source":" When converting to a class or structure on which you have overloaded `CType`, that class or structure"},{"pos":[5395,5493],"content":"<bpt id=\"p1\">[</bpt>UInteger Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>","source":"[UInteger Data Type](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)"},{"pos":[5494,5591],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[5604,5696],"content":"<bpt id=\"p1\">[</bpt>ULong Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>","source":"[ULong Data Type](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)"},{"pos":[5697,5794],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[5809,5903],"content":"<bpt id=\"p1\">[</bpt>UShort Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>","source":"[UShort Data Type](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)"},{"pos":[5904,6001],"content":"Any numeric type (including <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, and enumerated types), <ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`String`</ph>, <ph id=\"ph5\">`Object`</ph>","source":"Any numeric type (including `Byte`, `SByte`, and enumerated types), `Boolean`, `String`, `Object`"},{"pos":[6011,6029],"content":"The CType Function","linkify":"The CType Function","nodes":[{"content":"The CType Function","pos":[0,18]}]},{"content":"The <bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept> operates on two arguments.","pos":[6033,6153],"source":"The [CType Function](../../../../visual-basic/language-reference/functions/ctype-function.md) operates on two arguments."},{"content":"The first is the expression to be converted, and the second is the destination data type or object class.","pos":[6154,6259]},{"content":"Note that the first argument must be an expression, not a type.","pos":[6260,6323]},{"content":"<ph id=\"ph1\">`CType`</ph> is an <bpt id=\"p1\">*</bpt>inline function<ept id=\"p1\">*</ept>, meaning the compiled code makes the conversion, often without generating a function call.","pos":[6330,6452],"source":"`CType` is an *inline function*, meaning the compiled code makes the conversion, often without generating a function call."},{"content":"This improves performance.","pos":[6453,6479]},{"pos":[6486,6757],"content":"For a comparison of <ph id=\"ph1\">`CType`</ph> with the other type conversion keywords, see <bpt id=\"p1\">[</bpt>DirectCast Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/directcast-operator.md)</ept> and <bpt id=\"p2\">[</bpt>TryCast Operator<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/trycast-operator.md)</ept>.","source":"For a comparison of `CType` with the other type conversion keywords, see [DirectCast Operator](../../../../visual-basic/language-reference/operators/directcast-operator.md) and [TryCast Operator](../../../../visual-basic/language-reference/operators/trycast-operator.md)."},{"pos":[6767,6783],"content":"Elementary Types","linkify":"Elementary Types","nodes":[{"content":"Elementary Types","pos":[0,16]}]},{"pos":[6787,6841],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CType`</ph>.","source":"The following example demonstrates the use of `CType`."},{"pos":[6986,7001],"content":"Composite Types","linkify":"Composite Types","nodes":[{"content":"Composite Types","pos":[0,15]}]},{"content":"You can use <ph id=\"ph1\">`CType`</ph> to convert values to composite data types as well as to elementary types.","pos":[7005,7098],"source":"You can use `CType` to convert values to composite data types as well as to elementary types."},{"content":"You can also use it to coerce an object class to the type of one of its interfaces, as in the following example.","pos":[7099,7211]},{"pos":[7488,7499],"content":"Array Types","linkify":"Array Types","nodes":[{"content":"Array Types","pos":[0,11]}]},{"pos":[7503,7574],"content":"<ph id=\"ph1\">`CType`</ph> can also convert array data types, as in the following example.","source":"`CType` can also convert array data types, as in the following example."},{"pos":[7864,8019],"content":"For more information and an example, see <bpt id=\"p1\">[</bpt>Array Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md)</ept>.","source":"For more information and an example, see [Array Conversions](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md)."},{"pos":[8029,8049],"content":"Types Defining CType","linkify":"Types Defining CType","nodes":[{"content":"Types Defining CType","pos":[0,20]}]},{"content":"You can define <ph id=\"ph1\">`CType`</ph> on a class or structure you have defined.","pos":[8053,8117],"source":"You can define `CType` on a class or structure you have defined."},{"content":"This allows you to convert values to and from the type of your class or structure.","pos":[8118,8200]},{"content":"For more information and an example, see <bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.","pos":[8201,8393],"source":" For more information and an example, see [How to: Define a Conversion Operator](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)."},{"pos":[8401,8663],"content":"[!NOTE]\n Values used with a conversion keyword must be valid for the destination data type, or an error occurs. For example, if you attempt to convert a `Long` to an `Integer`, the value of the `Long` must be within the valid range for the `Integer` data type.","leadings":["","> "],"nodes":[{"content":" Values used with a conversion keyword must be valid for the destination data type, or an error occurs. For example, if you attempt to convert a `Long` to an `Integer`, the value of the `Long` must be within the valid range for the `Integer` data type.","pos":[8,260],"nodes":[{"content":"Values used with a conversion keyword must be valid for the destination data type, or an error occurs.","pos":[1,103]},{"content":"For example, if you attempt to convert a <ph id=\"ph1\">`Long`</ph> to an <ph id=\"ph2\">`Integer`</ph>, the value of the <ph id=\"ph3\">`Long`</ph> must be within the valid range for the <ph id=\"ph4\">`Integer`</ph> data type.","pos":[104,252],"source":" For example, if you attempt to convert a `Long` to an `Integer`, the value of the `Long` must be within the valid range for the `Integer` data type."}]}]},{"pos":[8671,8896],"content":"[!CAUTION]\n Specifying `CType` to convert from one class type to another fails at run time if the source type does not derive from the destination type. Such a failure throws an <xref:System.InvalidCastException> exception.","leadings":["","> "],"nodes":[{"content":" Specifying `CType` to convert from one class type to another fails at run time if the source type does not derive from the destination type. Such a failure throws an <xref:System.InvalidCastException> exception.","pos":[11,223],"nodes":[{"content":"Specifying <ph id=\"ph1\">`CType`</ph> to convert from one class type to another fails at run time if the source type does not derive from the destination type.","pos":[1,141],"source":" Specifying `CType` to convert from one class type to another fails at run time if the source type does not derive from the destination type."},{"content":"Such a failure throws an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph> exception.","pos":[142,212],"source":" Such a failure throws an <xref:System.InvalidCastException> exception."}]}]},{"content":"However, if one of the types is a structure or class you have defined, and if you have defined <ph id=\"ph1\">`CType`</ph> on that structure or class, a conversion can succeed if it satisfies the requirements of your <ph id=\"ph2\">`CType`</ph>.","pos":[8903,9108],"source":"However, if one of the types is a structure or class you have defined, and if you have defined `CType` on that structure or class, a conversion can succeed if it satisfies the requirements of your `CType`."},{"content":"See <bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.","pos":[9109,9264],"source":" See [How to: Define a Conversion Operator](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)."},{"pos":[9271,9383],"content":"Performing an explicit conversion is also known as <bpt id=\"p1\">*</bpt>casting<ept id=\"p1\">*</ept> an expression to a given data type or object class.","source":"Performing an explicit conversion is also known as *casting* an expression to a given data type or object class."},{"pos":[9392,9400],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[9404,9532],"source":"[Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Conversions Between Strings and Other Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/conversions-between-strings-and-other-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[9535,9702],"source":" [Conversions Between Strings and Other Types](../../../../visual-basic/programming-guide/language-features/data-types/conversions-between-strings-and-other-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Convert an Object to Another Type in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[9705,9883],"source":" [How to: Convert an Object to Another Type in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[9886,9987],"source":" [Structures](../../../../visual-basic/programming-guide/language-features/data-types/structures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[9990,10081],"source":" [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type Conversion Functions<ept id=\"p1\">](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[10084,10197],"source":" [Type Conversion Functions](../../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","pos":[10200,10332],"source":" [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"}]}