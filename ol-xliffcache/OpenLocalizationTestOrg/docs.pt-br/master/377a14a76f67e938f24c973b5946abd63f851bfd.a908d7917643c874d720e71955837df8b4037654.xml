{"content":"---\ntitle: \"\\\\= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"\\\\=\"\n  - \"vb.\\\\=\"\nhelpviewer_keywords: \n  - \"\\\\= operator [Visual Basic]\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"operator \\\\= [Visual Basic]\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 6f39915d-e398-4045-afcc-da6885e57b9c\n---\n# \\\\= Operator\nDivides the value of a variable or property by the value of an expression and assigns the integer result to the variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty \\= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric variable or property.  \n  \n `expression`  \n Required. Any numeric expression.  \n  \n## Remarks  \n The element on the left side of the `\\=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `\\=` operator divides the value of a variable or property on its left by the value on its right, and assigns the integer result to the variable or property on its left  \n  \n For further information on integer division, see [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md).  \n  \n## Overloading  \n The `\\` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `\\` operator affects the behavior of the `\\=` operator. If your code uses `\\=` on a class or structure that overloads `\\`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `\\=` operator to divide one `Integer` variable by a second and assign the integer result to the first variable.  \n  \n [!code-vb[VbVbalrOperators#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#19)]  \n  \n## See also\n\n- [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md)\n- [/= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)\n- [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,394],"embed":true,"restype":"x-metadata","content":"title: \"\\\\= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"\\\\=\"\n  - \"vb.\\\\=\"\nhelpviewer_keywords: \n  - \"\\\\= operator [Visual Basic]\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"operator \\\\= [Visual Basic]\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 6f39915d-e398-4045-afcc-da6885e57b9c","nodes":[{"content":"\\= Operator (Visual Basic)","nodes":[{"pos":[0,26],"content":"\\= Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">\\=</ph> Operator (Visual Basic)","pos":[0,26],"source":"\\= Operator (Visual Basic)"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[401,413],"content":"\\\\= Operator","linkify":"\\\\= Operator","nodes":[{"content":"<ph id=\"ph1\">\\\\</ph>= Operator","pos":[0,12],"source":"\\\\= Operator"}]},{"content":"Divides the value of a variable or property by the value of an expression and assigns the integer result to the variable or property.","pos":[414,547]},{"pos":[556,562],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[621,626],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[654,663]},{"content":"Any numeric variable or property.","pos":[664,697]},{"content":"Required.","pos":[720,729]},{"content":"Any numeric expression.","pos":[730,753]},{"pos":[762,769],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`\\=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[773,894],"source":"The element on the left side of the `\\=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[895,1005],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"pos":[1012,1183],"content":"The <ph id=\"ph1\">`\\=`</ph> operator divides the value of a variable or property on its left by the value on its right, and assigns the integer result to the variable or property on its left","source":"The `\\=` operator divides the value of a variable or property on its left by the value on its right, and assigns the integer result to the variable or property on its left"},{"pos":[1190,1348],"content":"For further information on integer division, see <bpt id=\"p1\">[</bpt>\\ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept>.","source":"For further information on integer division, see [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md)."},{"pos":[1357,1368],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`\\`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1372,1530],"source":"The `\\` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`\\`</ph> operator affects the behavior of the <ph id=\"ph2\">`\\=`</ph> operator.","pos":[1531,1602],"source":" Overloading the `\\` operator affects the behavior of the `\\=` operator."},{"content":"If your code uses <ph id=\"ph1\">`\\=`</ph> on a class or structure that overloads <ph id=\"ph2\">`\\`</ph>, be sure you understand its redefined behavior.","pos":[1603,1716],"source":" If your code uses `\\=` on a class or structure that overloads `\\`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[1717,1858],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[1867,1874],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1878,2020],"content":"The following example uses the <ph id=\"ph1\">`\\=`</ph> operator to divide one <ph id=\"ph2\">`Integer`</ph> variable by a second and assign the integer result to the first variable.","source":"The following example uses the `\\=` operator to divide one `Integer` variable by a second and assign the integer result to the first variable."},{"pos":[2153,2161],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2165,2273],"content":"<bpt id=\"p1\">[</bpt>\\ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept>","source":"[\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md)"},{"pos":[2276,2403],"content":"<bpt id=\"p1\">[</bpt>/= Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)</ept>","source":"[/= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)"},{"pos":[2406,2504],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>","source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)"},{"pos":[2507,2605],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[2608,2720],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[2723,2847],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[2850,2935],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}