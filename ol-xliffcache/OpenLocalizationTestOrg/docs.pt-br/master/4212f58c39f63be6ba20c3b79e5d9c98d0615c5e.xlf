<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="packaging-and-deploying-custom-my-extensions.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4212f58c39f63be6ba20c3b79e5d9c98d0615c5e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\developing-apps\customizing-extending-my\packaging-and-deploying-custom-my-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0453e21e1aed32824d455df1a58e35f1f1527578</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">673115ed2312ceaec731f3560db6bb271ad2ef9d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Packaging and deploying custom My extensions (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Package and deploy custom My extensions (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual Basic provides an easy way for you to deploy your custom <ph id="ph1">`My`</ph> namespace extensions by using Visual Studio templates.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you are creating a project template for which your <ph id="ph1">`My`</ph> extensions are an integral part of the new project type, you can just include your custom <ph id="ph2">`My`</ph> extension code with the project when you export the template.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about exporting project templates, see <bpt id="p1">[</bpt>How to: Create Project Templates<ept id="p1">](/visualstudio/ide/how-to-create-project-templates)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If your custom <ph id="ph1">`My`</ph> extension is in a single code file, you can export the file as an item template that users can add to any type of Visual Basic project.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can then customize the item template to enable additional capabilities and behavior for your custom <ph id="ph1">`My`</ph> extension in a Visual Basic project.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Those capabilities include the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Allowing users to manage your custom <ph id="ph1">`My`</ph> extension from the <bpt id="p1">**</bpt>My Extensions<ept id="p1">**</ept> page of the Visual Basic Project Designer.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Automatically adding your custom <ph id="ph1">`My`</ph> extension when a reference to a specified assembly is added to a project.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Hiding the <ph id="ph1">`My`</ph> extension item template in the <bpt id="p1">**</bpt>Add Item<ept id="p1">**</ept> dialog box so that it is not included in the list of project items.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This topic discusses how to package a custom <ph id="ph1">`My`</ph> extension as a hidden item template that can be managed from the <bpt id="p1">**</bpt>My Extensions<ept id="p1">**</ept> page of the Visual Basic Project Designer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The custom <ph id="ph1">`My`</ph> extension can also be added automatically when a reference to a specified assembly is added to a project.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Create a My namespace extension</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The first step in creating a deployment package for a custom <ph id="ph1">`My`</ph> extension is to create the extension as a single code file.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For details and guidance about how to create a custom <ph id="ph1">`My`</ph> extension, see <bpt id="p1">[</bpt>Extending the My Namespace in Visual Basic<ept id="p1">](../../../visual-basic/developing-apps/customizing-extending-my/extending-the-my-namespace.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Export a My namespace extension as an item template</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After you have a code file that includes your <ph id="ph1">`My`</ph> namespace extension, you can export the code file as a Visual Studio item template.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For instructions on how to export a file as a Visual Studio item template, see <bpt id="p1">[</bpt>How to: Create Item Templates<ept id="p1">](/visualstudio/ide/how-to-create-item-templates)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">`My`</ph> namespace extension has a dependency on a particular assembly, you can customize your item template to automatically install your <ph id="ph2">`My`</ph> namespace extension when a reference to that assembly is added.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a result, you will want to exclude that assembly reference when you export the code file as a Visual Studio item template.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Customize the item template</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can enable your item template to be managed from the <bpt id="p1">**</bpt>My Extensions<ept id="p1">**</ept> page of the Visual Basic Project Designer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also enable the item template to be added automatically when a reference to a specified assembly is added to a project.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To enable these customizations, you will add a new file, called the CustomData file, to your template, and then add a new element to the XML in your .vstemplate file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add the CustomData file</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The CustomData file is a text file that has a file name extension of .CustomData (the file name can be set to any value meaningful to your template) and that contains XML.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The XML in the CustomData file instructs Visual Basic to include your <ph id="ph1">`My`</ph> extension when users use the <bpt id="p1">**</bpt>My Extensions<ept id="p1">**</ept> page of the Visual Basic Project Designer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can optionally add the &lt;<ph id="ph1">`AssemblyFullName&gt;`</ph> attribute to your CustomData file XML.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This instructs Visual Basic to automatically install your custom <ph id="ph1">`My`</ph> extension when a reference to a particular assembly is added to the project.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can use any text editor or XML editor to create the CustomData file, and then add it to your item template's compressed folder (.zip file).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the following XML shows the contents of a CustomData file that will add the template item to the My Extensions folder of a Visual Basic project when a reference to the Microsoft.VisualBasic.PowerPacks.Vs.dll assembly is added to the project.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The CustomData file contains a &lt;<ph id="ph1">`VBMyExtensionTemplate&gt;`</ph> element that has attributes as listed in the following table.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A unique identifier for the extension.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the extension that has this ID has already been added to the project, the user will not be prompted to add it again.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A version number for the item template.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An assembly name.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When a reference to this assembly is added to the project, the user will be prompted to add the <ph id="ph1">`My`</ph> extension from this item template.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">\&lt;</ph>CustomDataSignature&gt; element to the .vstemplate file</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To identify your Visual Studio item template as a <ph id="ph1">`My`</ph> namespace extension, you must also modify the .vstemplate file for your item template.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You must add a <ph id="ph1">`&lt;CustomDataSignature&gt;`</ph> element to the <ph id="ph2">`&lt;TemplateData&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;CustomDataSignature&gt;`</ph> element must contain the text <ph id="ph2">`Microsoft.VisualBasic.MyExtension`</ph>, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You cannot modify files in a compressed folder (.zip file) directly.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You must copy the .vstemplate file from the compressed folder, modify it, and then replace the .vstemplate file in the compressed folder with your updated copy.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows the contents of a .vstemplate file that has the <ph id="ph1">`&lt;CustomDataSignature&gt;`</ph> element added.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Install the template</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To install the template, you can copy the compressed folder (<bpt id="p1">*</bpt>.zip<ept id="p1">*</ept> file) to the Visual Basic item templates folder.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>By default, user item templates are located in <bpt id="p1">*</bpt>%USERPROFILE%\Documents\Visual Studio <ph id="ph1">\&lt;</ph>Version<ph id="ph2">\&gt;</ph>\Templates\ItemTemplates\Visual Basic<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Alternatively, you can publish the template as a Visual Studio Installer (<bpt id="p1">*</bpt>.vsi<ept id="p1">*</ept>) file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extending the My Namespace in Visual Basic<ept id="p1">](../../../visual-basic/developing-apps/customizing-extending-my/extending-the-my-namespace.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extending the Visual Basic Application Model<ept id="p1">](../../../visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Customizing Which Objects are Available in My<ept id="p1">](../../../visual-basic/developing-apps/customizing-extending-my/customizing-which-objects-are-available-in-my.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>My Extensions Page, Project Designer<ept id="p1">](/visualstudio/ide/reference/my-extensions-page-project-designer-visual-basic)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>