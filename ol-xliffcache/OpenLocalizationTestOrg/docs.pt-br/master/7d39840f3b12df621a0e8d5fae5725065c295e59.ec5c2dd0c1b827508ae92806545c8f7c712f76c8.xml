{"content":"---\ntitle: \"-moduleassemblyname (C# Compiler Option)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"/moduleassemblyname\"\nhelpviewer_keywords: \n  - \"moduleassemblyname compiler option [C#]\"\n  - \"/moduleassemblyname compiler option [C#]\"\n  - \".moduleassemblyname compiler option [C#]\"\nms.assetid: d464d9b9-f18d-423b-95e9-66c7878fd53a\n---\n# -moduleassemblyname (C# Compiler Option)\nSpecifies an assembly whose non-public types a .netmodule can access.  \n  \n## Syntax  \n  \n```console  \n-moduleassemblyname:assembly_name  \n```  \n  \n## Arguments  \n `assembly_name`  \n The name of the assembly whose non-public types the .netmodule can access.  \n  \n## Remarks  \n **-moduleassemblyname** should be used when building a .netmodule, and where the following conditions are true:  \n  \n-   The .netmodule needs access to non-public types in an existing assembly.  \n  \n-   You know the name of the assembly into which the .netmodule will be built.  \n  \n-   The existing assembly has granted friend assembly access to the assembly into which the .netmodule will be built.  \n  \n For more information on building a .netmodule, see [-target:module (C# Compiler Options)](../../../csharp/language-reference/compiler-options/target-module-compiler-option.md).  \n  \n For more information on friend assemblies, see [Friend Assemblies](../../../standard/assembly/friend-assemblies.md).  \n  \n This option is not available from within the development environment; it is only available when compiling from the command line.  \n  \n This compiler option is unavailable in Visual Studio and cannot be changed programmatically.  \n  \n## Example  \n This sample builds an assembly with a private type, and that gives friend assembly access to an assembly called csman_an_assembly.  \n  \n```csharp  \n// moduleassemblyname_1.cs  \n// compile with: -target:library  \nusing System;  \nusing System.Runtime.CompilerServices;  \n  \n[assembly:InternalsVisibleTo (\"csman_an_assembly\")]  \n  \nclass An_Internal_Class   \n{  \n    public void Test()   \n    {   \n        Console.WriteLine(\"An_Internal_Class.Test called\");   \n    }  \n}  \n```  \n  \n## Example  \n This sample builds a .netmodule that accesses a non-public type in the assembly moduleassemblyname_1.dll. By knowing that this .netmodule will be built into an assembly called csman_an_assembly, we can specify **-moduleassemblyname**, allowing the .netmodule to access non-public types in an assembly that has granted friend assembly access to csman_an_assembly.  \n  \n```csharp  \n// moduleassemblyname_2.cs  \n// compile with: -moduleassemblyname:csman_an_assembly -target:module -reference:moduleassemblyname_1.dll  \nclass B {  \n    public void Test() {  \n        An_Internal_Class x = new An_Internal_Class();  \n        x.Test();  \n    }  \n}  \n```  \n  \n## Example  \n This code sample builds the assembly csman_an_assembly, referencing the previously-built assembly and .netmodule.  \n  \n```csharp  \n// csman_an_assembly.cs  \n// compile with: -addmodule:moduleassemblyname_2.netmodule -reference:moduleassemblyname_1.dll  \nclass A {  \n    public static void Main() {  \n        B bb = new B();  \n        bb.Test();  \n    }  \n}  \n```  \n  \n**An_Internal_Class.Test called**\n\n## See also\n\n- [C# Compiler Options](../../../csharp/language-reference/compiler-options/index.md)\n- [Managing Project and Solution Properties](/visualstudio/ide/managing-project-and-solution-properties)\n","nodes":[{"pos":[4,324],"embed":true,"restype":"x-metadata","content":"title: \"-moduleassemblyname (C# Compiler Option)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"/moduleassemblyname\"\nhelpviewer_keywords: \n  - \"moduleassemblyname compiler option [C#]\"\n  - \"/moduleassemblyname compiler option [C#]\"\n  - \".moduleassemblyname compiler option [C#]\"\nms.assetid: d464d9b9-f18d-423b-95e9-66c7878fd53a","nodes":[{"content":"-moduleassemblyname (C# Compiler Option)","nodes":[{"pos":[0,40],"content":"-moduleassemblyname (C# Compiler Option)","nodes":[{"content":"-moduleassemblyname (C# Compiler Option)","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[331,371],"content":"-moduleassemblyname (C# Compiler Option)","linkify":"-moduleassemblyname (C# Compiler Option)","nodes":[{"content":"-moduleassemblyname (C# Compiler Option)","pos":[0,40]}]},{"content":"Specifies an assembly whose non-public types a .netmodule can access.","pos":[372,441]},{"pos":[450,456],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[523,532],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"The name of the assembly whose non-public types the .netmodule can access.","pos":[555,629]},{"pos":[638,645],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[649,760],"content":"<bpt id=\"p1\">**</bpt>-moduleassemblyname<ept id=\"p1\">**</ept> should be used when building a .netmodule, and where the following conditions are true:","source":"**-moduleassemblyname** should be used when building a .netmodule, and where the following conditions are true:"},{"content":"The .netmodule needs access to non-public types in an existing assembly.","pos":[770,842]},{"content":"You know the name of the assembly into which the .netmodule will be built.","pos":[852,926]},{"content":"The existing assembly has granted friend assembly access to the assembly into which the .netmodule will be built.","pos":[936,1049]},{"pos":[1056,1232],"content":"For more information on building a .netmodule, see <bpt id=\"p1\">[</bpt>-target:module (C# Compiler Options)<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/target-module-compiler-option.md)</ept>.","source":"For more information on building a .netmodule, see [-target:module (C# Compiler Options)](../../../csharp/language-reference/compiler-options/target-module-compiler-option.md)."},{"pos":[1239,1355],"content":"For more information on friend assemblies, see <bpt id=\"p1\">[</bpt>Friend Assemblies<ept id=\"p1\">](../../../standard/assembly/friend-assemblies.md)</ept>.","source":"For more information on friend assemblies, see [Friend Assemblies](../../../standard/assembly/friend-assemblies.md)."},{"content":"This option is not available from within the development environment; it is only available when compiling from the command line.","pos":[1362,1490]},{"content":"This compiler option is unavailable in Visual Studio and cannot be changed programmatically.","pos":[1497,1589]},{"pos":[1598,1605],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample builds an assembly with a private type, and that gives friend assembly access to an assembly called csman_an_assembly.","pos":[1609,1739]},{"pos":[2091,2098],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample builds a .netmodule that accesses a non-public type in the assembly moduleassemblyname_1.dll.","pos":[2102,2207]},{"content":"By knowing that this .netmodule will be built into an assembly called csman_an_assembly, we can specify <bpt id=\"p1\">**</bpt>-moduleassemblyname<ept id=\"p1\">**</ept>, allowing the .netmodule to access non-public types in an assembly that has granted friend assembly access to csman_an_assembly.","pos":[2208,2464],"source":" By knowing that this .netmodule will be built into an assembly called csman_an_assembly, we can specify **-moduleassemblyname**, allowing the .netmodule to access non-public types in an assembly that has granted friend assembly access to csman_an_assembly."},{"pos":[2759,2766],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This code sample builds the assembly csman_an_assembly, referencing the previously-built assembly and .netmodule.","pos":[2770,2883]},{"pos":[3138,3171],"content":"<bpt id=\"p1\">**</bpt>An_Internal_Class.Test called<ept id=\"p1\">**</ept>","source":"**An_Internal_Class.Test called**"},{"pos":[3176,3184],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3188,3271],"content":"<bpt id=\"p1\">[</bpt>C# Compiler Options<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/index.md)</ept>","source":"[C# Compiler Options](../../../csharp/language-reference/compiler-options/index.md)"},{"pos":[3274,3376],"content":"<bpt id=\"p1\">[</bpt>Managing Project and Solution Properties<ept id=\"p1\">](/visualstudio/ide/managing-project-and-solution-properties)</ept>","source":"[Managing Project and Solution Properties](/visualstudio/ide/managing-project-and-solution-properties)"}]}