<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="modifying-large-value-max-data.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">417afd5f614aee8db0aeec2377973ad894e04384</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\modifying-large-value-max-data.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c593d34d6fd96bf9c17afd31d942c9c6170208d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b998681225208a74f890a109e78c9a3dd028131</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Modifying Large-Value (max) Data in ADO.NET</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Modifying Large-Value (max) Data in ADO.NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Large object (LOB) data types are those that exceed the maximum row size of 8 kilobytes (KB).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SQL Server provides a <ph id="ph1">`max`</ph> specifier for <ph id="ph2">`varchar`</ph>, <ph id="ph3">`nvarchar`</ph>, and <ph id="ph4">`varbinary`</ph> data types to allow storage of values as large as 2^32 bytes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Table columns and Transact-SQL variables may specify <ph id="ph1">`varchar(max)`</ph>, <ph id="ph2">`nvarchar(max)`</ph>, or <ph id="ph3">`varbinary(max)`</ph> data types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In ADO.NET, the <ph id="ph1">`max`</ph> data types can be fetched by a <ph id="ph2">`DataReader`</ph>, and can also be specified as both input and output parameter values without any special handling.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For large <ph id="ph1">`varchar`</ph> data types, data can be retrieved and updated incrementally.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`max`</ph> data types can be used for comparisons, as Transact-SQL variables, and for concatenation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>They can also be used in the DISTINCT, ORDER BY, GROUP BY clauses of a SELECT statement as well as in aggregates, joins, and subqueries.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following table provides links to the documentation in SQL Server Books Online.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SQL Server Books Online<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Large-Value Data Types<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=120498)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Large-Value Type Restrictions</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following restrictions apply to the <ph id="ph1">`max`</ph> data types, which do not exist for smaller data types:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`sql_variant`</ph> cannot contain a large <ph id="ph2">`varchar`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Large <ph id="ph1">`varchar`</ph> columns cannot be specified as a key column in an index.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>They are allowed in an included column in a non-clustered index.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Large <ph id="ph1">`varchar`</ph> columns cannot be used as partitioning key columns.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Working with Large-Value Types in Transact-SQL</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Transact-SQL <ph id="ph1">`OPENROWSET`</ph> function is a one-time method of connecting and accessing remote data.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It includes all of the connection information necessary to access remote data from an OLE DB data source.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OPENROWSET`</ph> can be referenced in the FROM clause of a query as though it were a table name.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It can also be referenced as the target table of an INSERT, UPDATE, or DELETE statement, subject to the capabilities of the OLE DB provider.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OPENROWSET`</ph> function includes the <ph id="ph2">`BULK`</ph> rowset provider, which allows you to read data directly from a file without loading the data into a target table.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This enables you to use <ph id="ph1">`OPENROWSET`</ph> in a simple INSERT SELECT statement.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OPENROWSET BULK`</ph> option arguments provide significant control over where to begin and end reading data, how to deal with errors, and how data is interpreted.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, you can specify that the data file be read as a single-row, single-column rowset of type <ph id="ph1">`varbinary`</ph>, <ph id="ph2">`varchar`</ph>, or <ph id="ph3">`nvarchar`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For the complete syntax and options, see SQL Server Books Online.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example inserts a photo into the ProductPhoto table in the AdventureWorks sample database.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">`BULK OPENROWSET`</ph> provider, you must supply the named list of columns even if you aren't inserting values into every column.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The primary key in this case is defined as an identity column, and may be omitted from the column list.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note that you must also supply a correlation name at the end of the <ph id="ph1">`OPENROWSET`</ph> statement, which in this case is ThumbnailPhoto.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This correlates with the column in the <ph id="ph1">`ProductPhoto`</ph> table into which the file is being loaded.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Updating Data Using UPDATE .WRITE</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Transact-SQL UPDATE statement has new WRITE syntax for modifying the contents of <ph id="ph1">`varchar(max)`</ph>, <ph id="ph2">`nvarchar(max)`</ph>, or <ph id="ph3">`varbinary(max)`</ph> columns.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This allows you to perform partial updates of the data.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The UPDATE .WRITE syntax is shown here in abbreviated form:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>UPDATE</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>{ <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>object&gt;<ept id="p1">*</ept> }</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>SET</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>{ <bpt id="p1">*</bpt>column_name<ept id="p1">*</ept> = { .WRITE ( <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> , <ph id="ph1">@Offset</ph> , <ph id="ph2">@Length</ph> ) }</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The WRITE method specifies that a section of the value of the <bpt id="p1">*</bpt>column_name<ept id="p1">*</ept> will be modified.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The expression is the value that will be copied to the <bpt id="p1">*</bpt>column_name<ept id="p1">*</ept>, the <ph id="ph1">`@Offset`</ph> is the beginning point at which the expression will be written, and the <ph id="ph2">`@Length`</ph> argument is the length of the section in the column.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Then</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The expression is set to NULL</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`@Length`</ph> is ignored and the value in <bpt id="p1">*</bpt>column_name<ept id="p1">*</ept> is truncated at the specified <ph id="ph2">`@Offset`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`@Offset`</ph> is NULL</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The update operation appends the expression at the end of the existing <bpt id="p1">*</bpt>column_name<ept id="p1">*</ept> value and <ph id="ph1">`@Length`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`@Offset`</ph> is greater than the length of the column_name value</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>SQL Server returns an error.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`@Length`</ph> is NULL</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The update operation removes all data from <ph id="ph1">`@Offset`</ph> to the end of the <ph id="ph2">`column_name`</ph> value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Neither <ph id="ph1">`@Offset`</ph> nor <ph id="ph2">`@Length`</ph> can be a negative number.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This Transact-SQL example updates a partial value in DocumentSummary, an <ph id="ph1">`nvarchar(max)`</ph> column in the Document table in the AdventureWorks database.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The word 'components' is replaced by the word 'features' by specifying the replacement word, the beginning location (offset) of the word to be replaced in the existing data, and the number of characters to be replaced (length).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The example includes SELECT statements before and after the UPDATE statement to compare results.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Working with Large-Value Types in ADO.NET</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can work with large value types in ADO.NET by specifying large value types as <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> objects in a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> to return a result set, or by using a <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> to fill a <ph id="ph4">`DataSet`</ph><ph id="ph5">/</ph><ph id="ph6">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>There is no difference between the way you work with a large value type and its related, smaller value data type.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Using GetSqlBytes to Retrieve Data</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetSqlBytes`</ph> method of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> can be used to retrieve the contents of a <ph id="ph3">`varbinary(max)`</ph> column.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following code fragment assumes a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> object named <ph id="ph2">`cmd`</ph> that selects <ph id="ph3">`varbinary(max)`</ph> data from a table and a <ph id="ph4">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object named <ph id="ph5">`reader`</ph> that retrieves the data as <ph id="ph6">&lt;xref:System.Data.SqlTypes.SqlBytes&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Using GetSqlChars to Retrieve Data</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetSqlChars`</ph> method of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> can be used to retrieve the contents of a <ph id="ph3">`varchar(max)`</ph> or <ph id="ph4">`nvarchar(max)`</ph> column.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following code fragment assumes a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> object named <ph id="ph2">`cmd`</ph> that selects <ph id="ph3">`nvarchar(max)`</ph> data from a table and a <ph id="ph4">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object named <ph id="ph5">`reader`</ph> that retrieves the data.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Using GetSqlBinary to Retrieve Data</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetSqlBinary`</ph> method of a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> can be used to retrieve the contents of a <ph id="ph3">`varbinary(max)`</ph> column.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following code fragment assumes a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> object named <ph id="ph2">`cmd`</ph> that selects <ph id="ph3">`varbinary(max)`</ph> data from a table and a <ph id="ph4">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object named <ph id="ph5">`reader`</ph> that retrieves the data as a <ph id="ph6">&lt;xref:System.Data.SqlTypes.SqlBinary&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Using GetBytes to Retrieve Data</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetBytes`</ph> method of a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> reads a stream of bytes from the specified column offset into a byte array starting at the specified array offset.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following code fragment assumes a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object named <ph id="ph2">`reader`</ph> that retrieves bytes into a byte array.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Note that, unlike <ph id="ph1">`GetSqlBytes`</ph>, <ph id="ph2">`GetBytes`</ph> requires a size for the array buffer.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Using GetValue to Retrieve Data</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetValue`</ph> method of a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> reads the value from the specified column offset into an array.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following code fragment assumes a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object named <ph id="ph2">`reader`</ph> that retrieves binary data from the first column offset, and then string data from the second column offset.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Converting from Large Value Types to CLR Types</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can convert the contents of a <ph id="ph1">`varchar(max)`</ph> or <ph id="ph2">`nvarchar(max)`</ph> column using any of the string conversion methods, such as <ph id="ph3">`ToString`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following code fragment assumes a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object named <ph id="ph2">`reader`</ph> that retrieves the data.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following code retrieves the name and the <ph id="ph1">`LargePhoto`</ph> object from the <ph id="ph2">`ProductPhoto`</ph> table in the <ph id="ph3">`AdventureWorks`</ph> database and saves it to a file.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The assembly needs to be compiled with a reference to the <ph id="ph1">&lt;xref:System.Drawing&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader.GetSqlBytes%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> returns a <ph id="ph3">&lt;xref:System.Data.SqlTypes.SqlBytes&gt;</ph> object that exposes a <ph id="ph4">`Stream`</ph> property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The code uses this to create a new <ph id="ph1">`Bitmap`</ph> object, and then saves it in the Gif <ph id="ph2">`ImageFormat`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Using Large Value Type Parameters</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Large value types can be used in <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> objects the same way you use smaller value types in <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can retrieve large value types as <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> values, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The code assumes that the following GetDocumentSummary stored procedure exists in the AdventureWorks sample database.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The stored procedure takes an input parameter named <ph id="ph1">@DocumentID</ph> and returns the contents of the DocumentSummary column in the <ph id="ph2">@DocumentSummary</ph> output parameter.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The ADO.NET code creates <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> objects to execute the GetDocumentSummary stored procedure and retrieve the document summary, which is stored as a large value type.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The code passes a value for the <ph id="ph1">@DocumentID</ph> input parameter, and displays the results passed back in the <ph id="ph2">@DocumentSummary</ph> output parameter in the Console window.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Server Binary and Large-Value Data<ept id="p1">](../../../../../docs/framework/data/adonet/sql/sql-server-binary-and-large-value-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Server Data Type Mappings<ept id="p1">](../../../../../docs/framework/data/adonet/sql-server-data-type-mappings.md)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Server Data Operations in ADO.NET<ept id="p1">](../../../../../docs/framework/data/adonet/sql/sql-server-data-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>