{"content":"---\ntitle: \"Extension method '<methodname>' has type constraints that can never be satisfied\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc36561\"\n  - \"vbc36561\"\nhelpviewer_keywords: \n  - \"BC36561\"\nms.assetid: ff42d6e9-611b-407d-a269-f268b36ed277\n---\n# Extension method '\\<methodname>' has type constraints that can never be satisfied\nThe type parameters of this method interact in a way that prevents them from ever being satisfied. The following extension method is an example.  \n  \n```  \n'' Not valid.  \n'<Extension()> _  \n'Sub extensionExample(Of T As U, U)(ByVal para1 As T, ByVal para2 As U)  \n'End Sub  \n```  \n  \n Because the method is an extension method, the compiler must be able to determine the data type or types that the method extends based only on the first parameter in the method declaration, `para1`, and the argument sent in for that parameter. When the first parameter refers to generic type parameters, `para1 as T`, the constraints on the generic parameters restrict the set of types to which the method applies.  \n  \n Applicability of an extension method is determined from the argument provided for the first parameter, which is `arg1` in the following code.  \n  \n `'' Not valid.`  \n  \n `'arg1.extensionExample(arg2)`  \n  \n It must be possible to verify the constraints on all generic type parameters referred to by the first parameter, `para1`, by looking at only the first argument, `arg1`. In `extensionExample`, the set of types that is being extended cannot be determined from the first parameter alone. Type parameter `T` is constrained by type parameter `U`, which is not referenced by `para1` and cannot be inferred from `arg1`. Therefore, the applicability of the method to any possible type cannot be verified, and the method can never be called.  \n  \n **Error ID:** BC36561  \n  \n## To correct this error  \n  \n-   Change the type declaration to remove the interdependence between the types.  \n  \n## See also\n\n- [Extension Methods](../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)\n- [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n","nodes":[{"pos":[4,241],"embed":true,"restype":"x-metadata","content":"title: \"Extension method '<methodname>' has type constraints that can never be satisfied\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc36561\"\n  - \"vbc36561\"\nhelpviewer_keywords: \n  - \"BC36561\"\nms.assetid: ff42d6e9-611b-407d-a269-f268b36ed277","nodes":[{"content":"Extension method '<methodname>' has type constraints that can never be satisfied","nodes":[{"pos":[0,80],"content":"Extension method '<ph id=\"ph1\">&lt;methodname&gt;</ph>' has type constraints that can never be satisfied","source":"Extension method '<methodname>' has type constraints that can never be satisfied"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[248,329],"content":"Extension method '\\<methodname>' has type constraints that can never be satisfied","linkify":"Extension method '\\<methodname>' has type constraints that can never be satisfied","nodes":[{"content":"Extension method '<ph id=\"ph1\">\\&lt;</ph>methodname&gt;' has type constraints that can never be satisfied","pos":[0,81],"source":"Extension method '\\<methodname>' has type constraints that can never be satisfied"}]},{"content":"The type parameters of this method interact in a way that prevents them from ever being satisfied.","pos":[330,428]},{"content":"The following extension method is an example.","pos":[429,474]},{"content":"Because the method is an extension method, the compiler must be able to determine the data type or types that the method extends based only on the first parameter in the method declaration, <ph id=\"ph1\">`para1`</ph>, and the argument sent in for that parameter.","pos":[616,859],"source":"Because the method is an extension method, the compiler must be able to determine the data type or types that the method extends based only on the first parameter in the method declaration, `para1`, and the argument sent in for that parameter."},{"content":"When the first parameter refers to generic type parameters, <ph id=\"ph1\">`para1 as T`</ph>, the constraints on the generic parameters restrict the set of types to which the method applies.","pos":[860,1030],"source":" When the first parameter refers to generic type parameters, `para1 as T`, the constraints on the generic parameters restrict the set of types to which the method applies."},{"pos":[1037,1178],"content":"Applicability of an extension method is determined from the argument provided for the first parameter, which is <ph id=\"ph1\">`arg1`</ph> in the following code.","source":"Applicability of an extension method is determined from the argument provided for the first parameter, which is `arg1` in the following code."},{"content":"It must be possible to verify the constraints on all generic type parameters referred to by the first parameter, <ph id=\"ph1\">`para1`</ph>, by looking at only the first argument, <ph id=\"ph2\">`arg1`</ph>.","pos":[1244,1412],"source":"It must be possible to verify the constraints on all generic type parameters referred to by the first parameter, `para1`, by looking at only the first argument, `arg1`."},{"content":"In <ph id=\"ph1\">`extensionExample`</ph>, the set of types that is being extended cannot be determined from the first parameter alone.","pos":[1413,1528],"source":" In `extensionExample`, the set of types that is being extended cannot be determined from the first parameter alone."},{"content":"Type parameter <ph id=\"ph1\">`T`</ph> is constrained by type parameter <ph id=\"ph2\">`U`</ph>, which is not referenced by <ph id=\"ph3\">`para1`</ph> and cannot be inferred from <ph id=\"ph4\">`arg1`</ph>.","pos":[1529,1656],"source":" Type parameter `T` is constrained by type parameter `U`, which is not referenced by `para1` and cannot be inferred from `arg1`."},{"content":"Therefore, the applicability of the method to any possible type cannot be verified, and the method can never be called.","pos":[1657,1776]},{"pos":[1783,1804],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC36561","source":"**Error ID:** BC36561"},{"pos":[1813,1834],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Change the type declaration to remove the interdependence between the types.","pos":[1844,1920]},{"pos":[1929,1937],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1941,2048],"content":"<bpt id=\"p1\">[</bpt>Extension Methods<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>","source":"[Extension Methods](../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)"},{"pos":[2051,2166],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"}]}