{"content":"---\ntitle: \"Interoperating with unmanaged code\"\nms.date: \"01/17/2018\"\nhelpviewer_keywords: \n  - \"unmanaged code, interoperation\"\n  - \"managed code, interoperation with unmanaged code\"\n  - \".NET Framework, interoperation with unmanaged code\"\n  - \"unmanaged code\"\n  - \"interoperation with unmanaged code\"\n  - \"interoperation with unmanaged code, about interoperation\"\n  - \"components [.NET Framework], interoperation with unmanaged code\"\nms.assetid: ccb68ce7-b0e9-4ffb-839d-03b1cd2c1258\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Interoperating with unmanaged code\n\nThe .NET Framework promotes interaction with COM components, COM+ services, external type libraries, and many operating system services. Data types, method signatures, and error-handling mechanisms vary between managed and unmanaged object models. To simplify interoperation between .NET Framework components and unmanaged code and to ease the migration path, the common language runtime conceals from both clients and servers the differences in these object models.\n\nCode that executes under the control of the runtime is called managed code. Conversely, code that runs outside the runtime is called unmanaged code. COM components, ActiveX interfaces, and Windows API functions are examples of unmanaged code.\n\n## In this section\n\n[Exposing COM Components to the .NET Framework](exposing-com-components.md)  \nDescribes how to use COM components from .NET Framework applications.\n\n[Exposing .NET Framework Components to COM](exposing-dotnet-components-to-com.md)  \nDescribes how to use .NET Framework components from COM applications.\n\n[Consuming Unmanaged DLL Functions](consuming-unmanaged-dll-functions.md)  \nDescribes how to call unmanaged DLL functions using platform invoke.\n\n[Interop Marshaling](interop-marshaling.md)  \nDescribes marshaling for COM interop and platform invoke.\n\n[How to: Map HRESULTs and Exceptions](how-to-map-hresults-and-exceptions.md)  \nDescribes the mapping between exceptions and HRESULTs.\n\n[COM Wrappers](com-wrappers.md)  \nDescribes the wrappers provided by COM interop.\n\n[Type Equivalence and Embedded Interop Types](type-equivalence-and-embedded-interop-types.md)  \nDescribes how type information for COM types is embedded in assemblies, and how the common language runtime determines the equivalence of embedded COM types.\n\n[How to: Generate Primary Interop Assemblies Using Tlbimp.exe](how-to-generate-primary-interop-assemblies-using-tlbimp-exe.md)  \nDescribes how to produce primary interop assemblies using *Tlbimp.exe* (Type Library Importer).\n\n[How to: Register Primary Interop Assemblies](how-to-register-primary-interop-assemblies.md)  \nDescribes how to register the primary interop assemblies before you can reference them in your projects.\n\n[Registration-Free COM Interop](registration-free-com-interop.md)  \nDescribes how COM interop can activate components without using the Windows registry.\n\n[How to: Configure .NET Framework-Based COM Components for Registration-Free Activation](configure-net-framework-based-com-components-for-reg.md)  \nDescribes how to create an application manifest and how to create and embed a component manifest.\n","nodes":[{"pos":[4,524],"embed":true,"restype":"x-metadata","content":"title: \"Interoperating with unmanaged code\"\nms.date: \"01/17/2018\"\nhelpviewer_keywords: \n  - \"unmanaged code, interoperation\"\n  - \"managed code, interoperation with unmanaged code\"\n  - \".NET Framework, interoperation with unmanaged code\"\n  - \"unmanaged code\"\n  - \"interoperation with unmanaged code\"\n  - \"interoperation with unmanaged code, about interoperation\"\n  - \"components [.NET Framework], interoperation with unmanaged code\"\nms.assetid: ccb68ce7-b0e9-4ffb-839d-03b1cd2c1258\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Interoperating with unmanaged code","nodes":[{"pos":[0,34],"content":"Interoperating with unmanaged code","nodes":[{"content":"Interoperating with unmanaged code","pos":[0,34]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[531,565],"content":"Interoperating with unmanaged code","linkify":"Interoperating with unmanaged code","nodes":[{"content":"Interoperating with unmanaged code","pos":[0,34]}]},{"content":"The .NET Framework promotes interaction with COM components, COM+ services, external type libraries, and many operating system services.","pos":[567,703]},{"content":"Data types, method signatures, and error-handling mechanisms vary between managed and unmanaged object models.","pos":[704,814]},{"content":"To simplify interoperation between .NET Framework components and unmanaged code and to ease the migration path, the common language runtime conceals from both clients and servers the differences in these object models.","pos":[815,1033]},{"content":"Code that executes under the control of the runtime is called managed code.","pos":[1035,1110]},{"content":"Conversely, code that runs outside the runtime is called unmanaged code.","pos":[1111,1183]},{"content":"COM components, ActiveX interfaces, and Windows API functions are examples of unmanaged code.","pos":[1184,1277]},{"pos":[1282,1297],"content":"In this section","linkify":"In this section","nodes":[{"content":"In this section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>Exposing COM Components to the .NET Framework<ept id=\"p1\">](exposing-com-components.md)</ept>","pos":[1299,1374],"source":"[Exposing COM Components to the .NET Framework](exposing-com-components.md)"},{"content":"Describes how to use COM components from .NET Framework applications.","pos":[1377,1446]},{"content":"<bpt id=\"p1\">[</bpt>Exposing .NET Framework Components to COM<ept id=\"p1\">](exposing-dotnet-components-to-com.md)</ept>","pos":[1448,1529],"source":"[Exposing .NET Framework Components to COM](exposing-dotnet-components-to-com.md)"},{"content":"Describes how to use .NET Framework components from COM applications.","pos":[1532,1601]},{"content":"<bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](consuming-unmanaged-dll-functions.md)</ept>","pos":[1603,1676],"source":"[Consuming Unmanaged DLL Functions](consuming-unmanaged-dll-functions.md)"},{"content":"Describes how to call unmanaged DLL functions using platform invoke.","pos":[1679,1747]},{"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](interop-marshaling.md)</ept>","pos":[1749,1792],"source":"[Interop Marshaling](interop-marshaling.md)"},{"content":"Describes marshaling for COM interop and platform invoke.","pos":[1795,1852]},{"content":"<bpt id=\"p1\">[</bpt>How to: Map HRESULTs and Exceptions<ept id=\"p1\">](how-to-map-hresults-and-exceptions.md)</ept>","pos":[1854,1930],"source":"[How to: Map HRESULTs and Exceptions](how-to-map-hresults-and-exceptions.md)"},{"content":"Describes the mapping between exceptions and HRESULTs.","pos":[1933,1987]},{"content":"<bpt id=\"p1\">[</bpt>COM Wrappers<ept id=\"p1\">](com-wrappers.md)</ept>","pos":[1989,2020],"source":"[COM Wrappers](com-wrappers.md)"},{"content":"Describes the wrappers provided by COM interop.","pos":[2023,2070]},{"content":"<bpt id=\"p1\">[</bpt>Type Equivalence and Embedded Interop Types<ept id=\"p1\">](type-equivalence-and-embedded-interop-types.md)</ept>","pos":[2072,2165],"source":"[Type Equivalence and Embedded Interop Types](type-equivalence-and-embedded-interop-types.md)"},{"content":"Describes how type information for COM types is embedded in assemblies, and how the common language runtime determines the equivalence of embedded COM types.","pos":[2168,2325]},{"content":"<bpt id=\"p1\">[</bpt>How to: Generate Primary Interop Assemblies Using Tlbimp.exe<ept id=\"p1\">](how-to-generate-primary-interop-assemblies-using-tlbimp-exe.md)</ept>","pos":[2327,2453],"source":"[How to: Generate Primary Interop Assemblies Using Tlbimp.exe](how-to-generate-primary-interop-assemblies-using-tlbimp-exe.md)"},{"content":"Describes how to produce primary interop assemblies using <bpt id=\"p1\">*</bpt>Tlbimp.exe<ept id=\"p1\">*</ept> (Type Library Importer).","pos":[2456,2551],"source":"Describes how to produce primary interop assemblies using *Tlbimp.exe* (Type Library Importer)."},{"content":"<bpt id=\"p1\">[</bpt>How to: Register Primary Interop Assemblies<ept id=\"p1\">](how-to-register-primary-interop-assemblies.md)</ept>","pos":[2553,2645],"source":"[How to: Register Primary Interop Assemblies](how-to-register-primary-interop-assemblies.md)"},{"content":"Describes how to register the primary interop assemblies before you can reference them in your projects.","pos":[2648,2752]},{"content":"<bpt id=\"p1\">[</bpt>Registration-Free COM Interop<ept id=\"p1\">](registration-free-com-interop.md)</ept>","pos":[2754,2819],"source":"[Registration-Free COM Interop](registration-free-com-interop.md)"},{"content":"Describes how COM interop can activate components without using the Windows registry.","pos":[2822,2907]},{"content":"<bpt id=\"p1\">[</bpt>How to: Configure .NET Framework-Based COM Components for Registration-Free Activation<ept id=\"p1\">](configure-net-framework-based-com-components-for-reg.md)</ept>","pos":[2909,3054],"source":"[How to: Configure .NET Framework-Based COM Components for Registration-Free Activation](configure-net-framework-based-com-components-for-reg.md)"},{"content":"Describes how to create an application manifest and how to create and embed a component manifest.","pos":[3057,3154]}]}