{"content":"---\ntitle: \"Using Client Sockets\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"application protocols, sockets\"\n  - \"sending data, sockets\"\n  - \"data requests, sockets\"\n  - \"requesting data from Internet, sockets\"\n  - \"receiving data, sockets\"\n  - \"Socket class, client sockets\"\n  - \"protocols, sockets\"\n  - \"Internet, sockets\"\n  - \"sockets, client sockets\"\n  - \"client sockets\"\nms.assetid: 81de9f59-8177-4d98-b25d-43fc32a98383\n---\n# Using Client Sockets\nBefore you can initiate a conversation through a <xref:System.Net.Sockets.Socket>, you must create a data pipe between your application and the remote device. Although other network address families and protocols exist, this example shows how to create a TCP/IP connection to a remote service.  \n  \n TCP/IP uses a network address and a service port number to uniquely identify a service. The network address identifies a specific device on the network; the port number identifies the specific service on that device to connect to. The combination of network address and service port is called an endpoint, which is represented in the .NET Framework by the <xref:System.Net.EndPoint> class. A descendant of **EndPoint** is defined for each supported address family; for the IP address family, the class is <xref:System.Net.IPEndPoint>.  \n  \n The <xref:System.Net.Dns> class provides domain-name services to applications that use TCP/IP Internet services. The <xref:System.Net.Dns.Resolve%2A> method queries a DNS server to map a user-friendly domain name (such as \"host.contoso.com\") to a numeric Internet address (such as 192.168.1.1). **Resolve** returns an <xref:System.Net.IPHostEntry> that contains a list of addresses and aliases for the requested name. In most cases, you can use the first address returned in the <xref:System.Net.IPHostEntry.AddressList%2A> array. The following code gets an <xref:System.Net.IPAddress> containing the IP address for the server host.contoso.com.  \n  \n```vb  \nDim ipHostInfo As IPHostEntry = Dns.Resolve(\"host.contoso.com\")  \nDim ipAddress As IPAddress = ipHostInfo.AddressList(0)  \n```  \n  \n```csharp  \nIPHostEntry ipHostInfo = Dns.Resolve(\"host.contoso.com\");  \nIPAddress ipAddress = ipHostInfo.AddressList[0];  \n```  \n  \n The Internet Assigned Numbers Authority (Iana) defines port numbers for common services (for more information, see [Service Name and Transport Protocol Port Number Registry](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml)). Other services can have registered port numbers in the range 1,024 to 65,535. The following code combines the IP address for host.contoso.com with a port number to create a remote endpoint for a connection.  \n  \n```vb  \nDim ipe As New IPEndPoint(ipAddress, 11000)  \n```  \n  \n```csharp  \nIPEndPoint ipe = new IPEndPoint(ipAddress,11000);  \n```  \n  \n After determining the address of the remote device and choosing a port to use for the connection, the application can attempt to establish a connection with the remote device. The following example uses an existing **IPEndPoint** to connect to a remote device and catches any exceptions that are thrown.  \n  \n```vb  \nTry  \n    s.Connect(ipe)  \nCatch ae As ArgumentNullException  \n    Console.WriteLine(\"ArgumentNullException : {0}\", _  \n        ae.ToString())  \nCatch se As SocketException  \n    Console.WriteLine(\"SocketException : {0}\", se.ToString())  \nCatch e As Exception  \n    Console.WriteLine(\"Unexpected exception : {0}\", e.ToString())  \nEnd Try  \n```  \n  \n```csharp  \ntry {  \n    s.Connect(ipe);  \n} catch(ArgumentNullException ae) {  \n    Console.WriteLine(\"ArgumentNullException : {0}\", ae.ToString());  \n} catch(SocketException se) {  \n    Console.WriteLine(\"SocketException : {0}\", se.ToString());  \n} catch(Exception e) {  \n    Console.WriteLine(\"Unexpected exception : {0}\", e.ToString());  \n}  \n```  \n  \n## See also\n\n- [Using a Synchronous Client Socket](../../../docs/framework/network-programming/using-a-synchronous-client-socket.md)\n- [Using an Asynchronous Client Socket](../../../docs/framework/network-programming/using-an-asynchronous-client-socket.md)\n- [How to: Create a Socket](../../../docs/framework/network-programming/how-to-create-a-socket.md)\n- [Sockets](../../../docs/framework/network-programming/sockets.md)\n","nodes":[{"pos":[4,464],"embed":true,"restype":"x-metadata","content":"title: \"Using Client Sockets\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"application protocols, sockets\"\n  - \"sending data, sockets\"\n  - \"data requests, sockets\"\n  - \"requesting data from Internet, sockets\"\n  - \"receiving data, sockets\"\n  - \"Socket class, client sockets\"\n  - \"protocols, sockets\"\n  - \"Internet, sockets\"\n  - \"sockets, client sockets\"\n  - \"client sockets\"\nms.assetid: 81de9f59-8177-4d98-b25d-43fc32a98383","nodes":[{"content":"Using Client Sockets","nodes":[{"pos":[0,20],"content":"Using Client Sockets","nodes":[{"content":"Using Client Sockets","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[471,491],"content":"Using Client Sockets","linkify":"Using Client Sockets","nodes":[{"content":"Using Client Sockets","pos":[0,20]}]},{"content":"Before you can initiate a conversation through a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, you must create a data pipe between your application and the remote device.","pos":[492,650],"source":"Before you can initiate a conversation through a <xref:System.Net.Sockets.Socket>, you must create a data pipe between your application and the remote device."},{"content":"Although other network address families and protocols exist, this example shows how to create a TCP/IP connection to a remote service.","pos":[651,785]},{"content":"TCP/IP uses a network address and a service port number to uniquely identify a service.","pos":[792,879]},{"content":"The network address identifies a specific device on the network; the port number identifies the specific service on that device to connect to.","pos":[880,1022]},{"content":"The combination of network address and service port is called an endpoint, which is represented in the .NET Framework by the <ph id=\"ph1\">&lt;xref:System.Net.EndPoint&gt;</ph> class.","pos":[1023,1181],"source":" The combination of network address and service port is called an endpoint, which is represented in the .NET Framework by the <xref:System.Net.EndPoint> class."},{"content":"A descendant of <bpt id=\"p1\">**</bpt>EndPoint<ept id=\"p1\">**</ept> is defined for each supported address family; for the IP address family, the class is <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph>.","pos":[1182,1326],"source":" A descendant of **EndPoint** is defined for each supported address family; for the IP address family, the class is <xref:System.Net.IPEndPoint>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns&gt;</ph> class provides domain-name services to applications that use TCP/IP Internet services.","pos":[1333,1445],"source":"The <xref:System.Net.Dns> class provides domain-name services to applications that use TCP/IP Internet services."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.Resolve%2A&gt;</ph> method queries a DNS server to map a user-friendly domain name (such as \"host.contoso.com\") to a numeric Internet address (such as 192.168.1.1).","pos":[1446,1627],"source":" The <xref:System.Net.Dns.Resolve%2A> method queries a DNS server to map a user-friendly domain name (such as \"host.contoso.com\") to a numeric Internet address (such as 192.168.1.1)."},{"content":"<bpt id=\"p1\">**</bpt>Resolve<ept id=\"p1\">**</ept> returns an <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry&gt;</ph> that contains a list of addresses and aliases for the requested name.","pos":[1628,1750],"source":"**Resolve** returns an <xref:System.Net.IPHostEntry> that contains a list of addresses and aliases for the requested name."},{"content":"In most cases, you can use the first address returned in the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph> array.","pos":[1751,1863],"source":" In most cases, you can use the first address returned in the <xref:System.Net.IPHostEntry.AddressList%2A> array."},{"content":"The following code gets an <ph id=\"ph1\">&lt;xref:System.Net.IPAddress&gt;</ph> containing the IP address for the server host.contoso.com.","pos":[1864,1977],"source":" The following code gets an <xref:System.Net.IPAddress> containing the IP address for the server host.contoso.com."},{"content":"The Internet Assigned Numbers Authority (Iana) defines port numbers for common services (for more information, see <bpt id=\"p1\">[</bpt>Service Name and Transport Protocol Port Number Registry<ept id=\"p1\">](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml)</ept>).","pos":[2256,2525],"source":"The Internet Assigned Numbers Authority (Iana) defines port numbers for common services (for more information, see [Service Name and Transport Protocol Port Number Registry](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml))."},{"content":"Other services can have registered port numbers in the range 1,024 to 65,535.","pos":[2526,2603]},{"content":"The following code combines the IP address for host.contoso.com with a port number to create a remote endpoint for a connection.","pos":[2604,2732]},{"content":"After determining the address of the remote device and choosing a port to use for the connection, the application can attempt to establish a connection with the remote device.","pos":[2875,3050]},{"content":"The following example uses an existing <bpt id=\"p1\">**</bpt>IPEndPoint<ept id=\"p1\">**</ept> to connect to a remote device and catches any exceptions that are thrown.","pos":[3051,3178],"source":" The following example uses an existing **IPEndPoint** to connect to a remote device and catches any exceptions that are thrown."},{"pos":[3899,3907],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3911,4028],"content":"<bpt id=\"p1\">[</bpt>Using a Synchronous Client Socket<ept id=\"p1\">](../../../docs/framework/network-programming/using-a-synchronous-client-socket.md)</ept>","source":"[Using a Synchronous Client Socket](../../../docs/framework/network-programming/using-a-synchronous-client-socket.md)"},{"pos":[4031,4152],"content":"<bpt id=\"p1\">[</bpt>Using an Asynchronous Client Socket<ept id=\"p1\">](../../../docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>","source":"[Using an Asynchronous Client Socket](../../../docs/framework/network-programming/using-an-asynchronous-client-socket.md)"},{"pos":[4155,4251],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Socket<ept id=\"p1\">](../../../docs/framework/network-programming/how-to-create-a-socket.md)</ept>","source":"[How to: Create a Socket](../../../docs/framework/network-programming/how-to-create-a-socket.md)"},{"pos":[4254,4319],"content":"<bpt id=\"p1\">[</bpt>Sockets<ept id=\"p1\">](../../../docs/framework/network-programming/sockets.md)</ept>","source":"[Sockets](../../../docs/framework/network-programming/sockets.md)"}]}