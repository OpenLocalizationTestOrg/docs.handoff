<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="refonly-compiler-option.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24f5cba5650777f4844923844708d287798c445c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\compiler-options\refonly-compiler-option.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b961cce80fbab311426a0c6d9167dd7c95199fcb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">836b2c4f299ed48b917b1960ab96bee9308fb070</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>-refonly (C# Compiler Options)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>-refonly (C# Compiler Options)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-refonly<ept id="p1">**</ept> option indicates that a reference assembly should be output instead of an implementation assembly, as the primary output.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-refonly`</ph> parameter silently disables outputting PDBs, as reference assemblies cannot be executed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Metadata-only assemblies have their method bodies replaced with a single <ph id="ph1">`throw null`</ph> body, but include all members except anonymous types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The reason for using <ph id="ph1">`throw null`</ph> bodies (as opposed to no bodies) is so that PEVerify could run and pass (thus validating the completeness of the metadata).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reference assemblies include an assembly-level <ph id="ph1">`ReferenceAssembly`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This attribute may be specified in source (then the compiler won't need to synthesize it).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because of this attribute, runtimes will refuse to load reference assemblies for execution (but they can still be loaded in reflection-only mode).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Tools that reflect on assemblies need to ensure they load reference assemblies as reflection-only, otherwise they will receive a typeload error from the runtime.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Reference assemblies further remove metadata (private members) from metadata-only assemblies:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A reference assembly only has references for what it needs in the API surface.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The real assembly may have additional references related to specific implementations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For instance, the reference assembly for <ph id="ph1">`class C { private void M() { dynamic d = 1; ... } }`</ph> does not reference any types required for <ph id="ph2">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Private function-members (methods, properties, and events) are removed in cases where their removal doesn't observably impact compilation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If there are no <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attributes, do the same for internal function-members.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>But all types (including private or nested types) are kept in reference assemblies.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All attributes are kept (even internal ones).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All virtual methods are kept.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Explicit interface implementations are kept.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Explicitly implemented properties and events are kept, as their accessors are virtual (and are therefore kept).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All fields of a struct are kept.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(This is a candidate for post-C#-7.1 refinement)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-refonly`</ph> and <bpt id="p1">[</bpt><ph id="ph2">`-refout`</ph><ept id="p1">](refout-compiler-option.md)</ept> options are mutually exclusive.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Compiler Options<ept id="p1">](../../../csharp/language-reference/compiler-options/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managing Project and Solution Properties<ept id="p1">](/visualstudio/ide/managing-project-and-solution-properties)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>