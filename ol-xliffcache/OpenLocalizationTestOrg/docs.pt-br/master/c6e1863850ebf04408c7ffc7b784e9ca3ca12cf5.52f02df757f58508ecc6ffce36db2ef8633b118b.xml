{"content":"---\ntitle: \"Visual Basic and WPF Event Handling\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"Visual Basic [WPF], event handlers\"\n  - \"event handlers [WPF], Visual Basic\"\nms.assetid: ad4eb9aa-3afc-4a71-8cf6-add3fbea54a1\n---\n# Visual Basic and WPF Event Handling\nFor the Microsoft Visual Basic .NET language specifically, you can use the language-specific `Handles` keyword to associate event handlers with instances, instead of attaching event handlers with attributes or using the <xref:System.Windows.UIElement.AddHandler%2A> method. However, the `Handles` technique for attaching handlers to instances does have some limitations, because the `Handles` syntax cannot support some of the specific routed event features of the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] event system.  \n  \n## Using \"Handles\" in a WPF Application  \n The event handlers that are connected to instances and events with `Handles` must all be defined within the partial class declaration of the instance, which is also a requirement for event handlers that are assigned through attribute values on elements. You can only specify `Handles` for an element on the page that has a <xref:System.Windows.FrameworkContentElement.Name%2A> property value (or [x:Name Directive](../../xaml-services/x-name-directive.md) declared). This is because the <xref:System.Windows.FrameworkContentElement.Name%2A> in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] creates the instance reference that is necessary to support the *Instance.Event* reference format required by the `Handles` syntax. The only element that can be used for `Handles` without a <xref:System.Windows.FrameworkContentElement.Name%2A> reference is the root-element instance that defines the partial class.  \n  \n You can assign the same handler to multiple elements by separating *Instance.Event* references after `Handles` with commas.  \n  \n You can use `Handles` to assign more than one handler to the same *Instance.Event*reference. Do not assign any importance to the order in which handlers are given in the `Handles` reference; you should assume that handlers that handle the same event can be invoked in any order.  \n  \n To remove a handler that was added with `Handles` in the declaration, you can call <xref:System.Windows.UIElement.RemoveHandler%2A>.  \n  \n You can use `Handles` to attach handlers for routed events, so long as you attach handlers to instances that define the event being handled in their members tables. For routed events, handlers that are attached with `Handles` follow the same routing rules as do handlers that are attached as [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] attributes, or with the common signature of <xref:System.Windows.UIElement.AddHandler%2A>. This means that if the event is already marked handled (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property in the event data is `True`), then handlers attached with `Handles` are not invoked in response to that event instance. The event could be marked handled by instance handlers on another element in the route, or by class handling either on the current element or earlier elements along the route. For input events that support paired tunnel/bubble events, the tunneling route may have marked the event pair handled. For more information about routed events, see [Routed Events Overview](routed-events-overview.md).  \n  \n## Limitations of \"Handles\" for Adding Handlers  \n `Handles` cannot reference handlers for attached events. You must use the `add` accessor method for that attached event, or *typename.eventname* event attributes in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]. For details, see [Routed Events Overview](routed-events-overview.md).  \n  \n For routed events, you can only use `Handles` to assign handlers for instances where that event exists in the instance members table. However, with routed events in general, a parent element can be a listener for an event from child elements, even if the parent element does not have that event in its members table. In attribute syntax, you can specify this through a *typename.membername* attribute form that qualifies which type actually defines the event you want to handle. For instance, a parent `Page` (with no `Click` event defined) can listen for button-click events by assigning an attribute handler in the form `Button.Click`. But `Handles` does not support the *typename.membername* form, because it must support a conflicting *Instance.Event* form. For details, see [Routed Events Overview](routed-events-overview.md).  \n  \n `Handles` cannot attach handlers that are invoked for events that are already marked handled. Instead, you must use code and call the `handledEventsToo` overload of <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>.  \n  \n> [!NOTE]\n>  Do not use the `Handles` syntax in Visual Basic code when you specify an event handler for the same event in XAML. In this case, the event handler is called twice.  \n  \n## How WPF Implements \"Handles\" Functionality  \n When a [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] page is compiled, the intermediate file declares `Friend` `WithEvents` references to every element on the page that has a <xref:System.Windows.FrameworkContentElement.Name%2A> property set (or [x:Name Directive](../../xaml-services/x-name-directive.md) declared). Each named instance is potentially an element that can be assigned to a handler through `Handles`.  \n  \n> [!NOTE]\n>  Within [!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)], [!INCLUDE[TLA2#tla_intellisense](../../../../includes/tla2sharptla-intellisense-md.md)] can show you completion for which elements are available for a `Handles` reference in a page. However, this might take one compile pass so that the intermediate file can populate all the `Friends` references.  \n  \n## See also\n\n- <xref:System.Windows.UIElement.AddHandler%2A>\n- [Marking Routed Events as Handled, and Class Handling](marking-routed-events-as-handled-and-class-handling.md)\n- [Routed Events Overview](routed-events-overview.md)\n- [XAML Overview (WPF)](xaml-overview-wpf.md)\n","nodes":[{"pos":[4,223],"embed":true,"restype":"x-metadata","content":"title: \"Visual Basic and WPF Event Handling\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"Visual Basic [WPF], event handlers\"\n  - \"event handlers [WPF], Visual Basic\"\nms.assetid: ad4eb9aa-3afc-4a71-8cf6-add3fbea54a1","nodes":[{"content":"Visual Basic and WPF Event Handling","nodes":[{"pos":[0,35],"content":"Visual Basic and WPF Event Handling","nodes":[{"content":"Visual Basic and WPF Event Handling","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[230,265],"content":"Visual Basic and WPF Event Handling","linkify":"Visual Basic and WPF Event Handling","nodes":[{"content":"Visual Basic and WPF Event Handling","pos":[0,35]}]},{"content":"For the Microsoft Visual Basic .NET language specifically, you can use the language-specific <ph id=\"ph1\">`Handles`</ph> keyword to associate event handlers with instances, instead of attaching event handlers with attributes or using the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> method.","pos":[266,539],"source":"For the Microsoft Visual Basic .NET language specifically, you can use the language-specific `Handles` keyword to associate event handlers with instances, instead of attaching event handlers with attributes or using the <xref:System.Windows.UIElement.AddHandler%2A> method."},{"content":"However, the <ph id=\"ph1\">`Handles`</ph> technique for attaching handlers to instances does have some limitations, because the <ph id=\"ph2\">`Handles`</ph> syntax cannot support some of the specific routed event features of the <ph id=\"ph3\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> event system.","pos":[540,826],"source":" However, the `Handles` technique for attaching handlers to instances does have some limitations, because the `Handles` syntax cannot support some of the specific routed event features of the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] event system."},{"pos":[835,871],"content":"Using \"Handles\" in a WPF Application","linkify":"Using \"Handles\" in a WPF Application","nodes":[{"content":"Using \"Handles\" in a WPF Application","pos":[0,36]}]},{"content":"The event handlers that are connected to instances and events with <ph id=\"ph1\">`Handles`</ph> must all be defined within the partial class declaration of the instance, which is also a requirement for event handlers that are assigned through attribute values on elements.","pos":[875,1128],"source":"The event handlers that are connected to instances and events with `Handles` must all be defined within the partial class declaration of the instance, which is also a requirement for event handlers that are assigned through attribute values on elements."},{"content":"You can only specify <ph id=\"ph1\">`Handles`</ph> for an element on the page that has a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkContentElement.Name%2A&gt;</ph> property value (or <bpt id=\"p1\">[</bpt>x:Name Directive<ept id=\"p1\">](../../xaml-services/x-name-directive.md)</ept> declared).","pos":[1129,1341],"source":" You can only specify `Handles` for an element on the page that has a <xref:System.Windows.FrameworkContentElement.Name%2A> property value (or [x:Name Directive](../../xaml-services/x-name-directive.md) declared)."},{"content":"This is because the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement.Name%2A&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> creates the instance reference that is necessary to support the <bpt id=\"p1\">*</bpt>Instance.Event<ept id=\"p1\">*</ept> reference format required by the <ph id=\"ph3\">`Handles`</ph> syntax.","pos":[1342,1622],"source":" This is because the <xref:System.Windows.FrameworkContentElement.Name%2A> in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] creates the instance reference that is necessary to support the *Instance.Event* reference format required by the `Handles` syntax."},{"content":"The only element that can be used for <ph id=\"ph1\">`Handles`</ph> without a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkContentElement.Name%2A&gt;</ph> reference is the root-element instance that defines the partial class.","pos":[1623,1805],"source":" The only element that can be used for `Handles` without a <xref:System.Windows.FrameworkContentElement.Name%2A> reference is the root-element instance that defines the partial class."},{"pos":[1812,1935],"content":"You can assign the same handler to multiple elements by separating <bpt id=\"p1\">*</bpt>Instance.Event<ept id=\"p1\">*</ept> references after <ph id=\"ph1\">`Handles`</ph> with commas.","source":"You can assign the same handler to multiple elements by separating *Instance.Event* references after `Handles` with commas."},{"content":"You can use <ph id=\"ph1\">`Handles`</ph> to assign more than one handler to the same <bpt id=\"p1\">*</bpt>Instance.Event<ept id=\"p1\">*</ept>reference.","pos":[1942,2034],"source":"You can use `Handles` to assign more than one handler to the same *Instance.Event*reference."},{"content":"Do not assign any importance to the order in which handlers are given in the <ph id=\"ph1\">`Handles`</ph> reference; you should assume that handlers that handle the same event can be invoked in any order.","pos":[2035,2220],"source":" Do not assign any importance to the order in which handlers are given in the `Handles` reference; you should assume that handlers that handle the same event can be invoked in any order."},{"pos":[2227,2359],"content":"To remove a handler that was added with <ph id=\"ph1\">`Handles`</ph> in the declaration, you can call <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt;</ph>.","source":"To remove a handler that was added with `Handles` in the declaration, you can call <xref:System.Windows.UIElement.RemoveHandler%2A>."},{"content":"You can use <ph id=\"ph1\">`Handles`</ph> to attach handlers for routed events, so long as you attach handlers to instances that define the event being handled in their members tables.","pos":[2366,2530],"source":"You can use `Handles` to attach handlers for routed events, so long as you attach handlers to instances that define the event being handled in their members tables."},{"content":"For routed events, handlers that are attached with <ph id=\"ph1\">`Handles`</ph> follow the same routing rules as do handlers that are attached as <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> attributes, or with the common signature of <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>.","pos":[2531,2820],"source":" For routed events, handlers that are attached with `Handles` follow the same routing rules as do handlers that are attached as [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] attributes, or with the common signature of <xref:System.Windows.UIElement.AddHandler%2A>."},{"content":"This means that if the event is already marked handled (the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property in the event data is <ph id=\"ph2\">`True`</ph>), then handlers attached with <ph id=\"ph3\">`Handles`</ph> are not invoked in response to that event instance.","pos":[2821,3058],"source":" This means that if the event is already marked handled (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property in the event data is `True`), then handlers attached with `Handles` are not invoked in response to that event instance."},{"content":"The event could be marked handled by instance handlers on another element in the route, or by class handling either on the current element or earlier elements along the route.","pos":[3059,3234]},{"content":"For input events that support paired tunnel/bubble events, the tunneling route may have marked the event pair handled.","pos":[3235,3353]},{"content":"For more information about routed events, see <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](routed-events-overview.md)</ept>.","pos":[3354,3452],"source":" For more information about routed events, see [Routed Events Overview](routed-events-overview.md)."},{"pos":[3461,3505],"content":"Limitations of \"Handles\" for Adding Handlers","linkify":"Limitations of \"Handles\" for Adding Handlers","nodes":[{"content":"Limitations of \"Handles\" for Adding Handlers","pos":[0,44]}]},{"content":"<ph id=\"ph1\">`Handles`</ph> cannot reference handlers for attached events.","pos":[3509,3565],"source":"`Handles` cannot reference handlers for attached events."},{"content":"You must use the <ph id=\"ph1\">`add`</ph> accessor method for that attached event, or <bpt id=\"p1\">*</bpt>typename.eventname<ept id=\"p1\">*</ept> event attributes in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[3566,3746],"source":" You must use the `add` accessor method for that attached event, or *typename.eventname* event attributes in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](routed-events-overview.md)</ept>.","pos":[3747,3816],"source":" For details, see [Routed Events Overview](routed-events-overview.md)."},{"content":"For routed events, you can only use <ph id=\"ph1\">`Handles`</ph> to assign handlers for instances where that event exists in the instance members table.","pos":[3823,3956],"source":"For routed events, you can only use `Handles` to assign handlers for instances where that event exists in the instance members table."},{"content":"However, with routed events in general, a parent element can be a listener for an event from child elements, even if the parent element does not have that event in its members table.","pos":[3957,4139]},{"content":"In attribute syntax, you can specify this through a <bpt id=\"p1\">*</bpt>typename.membername<ept id=\"p1\">*</ept> attribute form that qualifies which type actually defines the event you want to handle.","pos":[4140,4301],"source":" In attribute syntax, you can specify this through a *typename.membername* attribute form that qualifies which type actually defines the event you want to handle."},{"content":"For instance, a parent <ph id=\"ph1\">`Page`</ph> (with no <ph id=\"ph2\">`Click`</ph> event defined) can listen for button-click events by assigning an attribute handler in the form <ph id=\"ph3\">`Button.Click`</ph>.","pos":[4302,4460],"source":" For instance, a parent `Page` (with no `Click` event defined) can listen for button-click events by assigning an attribute handler in the form `Button.Click`."},{"content":"But <ph id=\"ph1\">`Handles`</ph> does not support the <bpt id=\"p1\">*</bpt>typename.membername<ept id=\"p1\">*</ept> form, because it must support a conflicting <bpt id=\"p2\">*</bpt>Instance.Event<ept id=\"p2\">*</ept> form.","pos":[4461,4584],"source":" But `Handles` does not support the *typename.membername* form, because it must support a conflicting *Instance.Event* form."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](routed-events-overview.md)</ept>.","pos":[4585,4654],"source":" For details, see [Routed Events Overview](routed-events-overview.md)."},{"content":"<ph id=\"ph1\">`Handles`</ph> cannot attach handlers that are invoked for events that are already marked handled.","pos":[4661,4754],"source":"`Handles` cannot attach handlers that are invoked for events that are already marked handled."},{"content":"Instead, you must use code and call the <ph id=\"ph1\">`handledEventsToo`</ph> overload of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>.","pos":[4755,4936],"source":" Instead, you must use code and call the `handledEventsToo` overload of <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>."},{"pos":[4944,5118],"content":"[!NOTE]\n Do not use the `Handles` syntax in Visual Basic code when you specify an event handler for the same event in XAML. In this case, the event handler is called twice.","leadings":["","> "],"nodes":[{"content":"Do not use the `Handles` syntax in Visual Basic code when you specify an event handler for the same event in XAML. In this case, the event handler is called twice.","pos":[9,172],"nodes":[{"content":"Do not use the <ph id=\"ph1\">`Handles`</ph> syntax in Visual Basic code when you specify an event handler for the same event in XAML.","pos":[0,114],"source":"Do not use the `Handles` syntax in Visual Basic code when you specify an event handler for the same event in XAML."},{"content":"In this case, the event handler is called twice.","pos":[115,163]}]}]},{"pos":[5127,5169],"content":"How WPF Implements \"Handles\" Functionality","linkify":"How WPF Implements \"Handles\" Functionality","nodes":[{"content":"How WPF Implements \"Handles\" Functionality","pos":[0,42]}]},{"content":"When a <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> page is compiled, the intermediate file declares <ph id=\"ph2\">`Friend`</ph> <ph id=\"ph3\">`WithEvents`</ph> references to every element on the page that has a <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkContentElement.Name%2A&gt;</ph> property set (or <bpt id=\"p1\">[</bpt>x:Name Directive<ept id=\"p1\">](../../xaml-services/x-name-directive.md)</ept> declared).","pos":[5173,5513],"source":"When a [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] page is compiled, the intermediate file declares `Friend` `WithEvents` references to every element on the page that has a <xref:System.Windows.FrameworkContentElement.Name%2A> property set (or [x:Name Directive](../../xaml-services/x-name-directive.md) declared)."},{"content":"Each named instance is potentially an element that can be assigned to a handler through <ph id=\"ph1\">`Handles`</ph>.","pos":[5514,5612],"source":" Each named instance is potentially an element that can be assigned to a handler through `Handles`."},{"pos":[5620,6015],"content":"[!NOTE]\n Within [!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)], [!INCLUDE[TLA2#tla_intellisense](../../../../includes/tla2sharptla-intellisense-md.md)] can show you completion for which elements are available for a `Handles` reference in a page. However, this might take one compile pass so that the intermediate file can populate all the `Friends` references.","leadings":["","> "],"nodes":[{"content":"Within [!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)], [!INCLUDE[TLA2#tla_intellisense](../../../../includes/tla2sharptla-intellisense-md.md)] can show you completion for which elements are available for a `Handles` reference in a page. However, this might take one compile pass so that the intermediate file can populate all the `Friends` references.","pos":[9,393],"nodes":[{"content":"Within <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph>, <ph id=\"ph2\">[!INCLUDE[TLA2#tla_intellisense](../../../../includes/tla2sharptla-intellisense-md.md)]</ph> can show you completion for which elements are available for a <ph id=\"ph3\">`Handles`</ph> reference in a page.","pos":[0,269],"source":"Within [!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)], [!INCLUDE[TLA2#tla_intellisense](../../../../includes/tla2sharptla-intellisense-md.md)] can show you completion for which elements are available for a `Handles` reference in a page."},{"content":"However, this might take one compile pass so that the intermediate file can populate all the <ph id=\"ph1\">`Friends`</ph> references.","pos":[270,384],"source":" However, this might take one compile pass so that the intermediate file can populate all the `Friends` references."}]}]},{"pos":[6024,6032],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6084,6194],"content":"<bpt id=\"p1\">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id=\"p1\">](marking-routed-events-as-handled-and-class-handling.md)</ept>","source":"[Marking Routed Events as Handled, and Class Handling](marking-routed-events-as-handled-and-class-handling.md)"},{"pos":[6197,6248],"content":"<bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](routed-events-overview.md)</ept>","source":"[Routed Events Overview](routed-events-overview.md)"},{"pos":[6251,6294],"content":"<bpt id=\"p1\">[</bpt>XAML Overview (WPF)<ept id=\"p1\">](xaml-overview-wpf.md)</ept>","source":"[XAML Overview (WPF)](xaml-overview-wpf.md)"}]}