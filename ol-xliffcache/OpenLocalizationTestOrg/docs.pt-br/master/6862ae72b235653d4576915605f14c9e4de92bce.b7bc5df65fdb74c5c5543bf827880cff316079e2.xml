{"content":"---\ntitle: \"C# Reference\"\nms.date: 02/14/2017\nhelpviewer_keywords: \n  - \"Visual C#, language reference\"\n  - \"language reference [C#]\"\n  - \"Programmer's Reference for C#\"\n  - \"C# language, reference\"\n  - \"reference, C# language\"\nms.assetid: 06de3167-c16c-4e1a-b3c5-c27841d4569a\n---\n# C# Reference\nThis section provides reference material about C# keywords, operators, special characters, preprocessor directives, compiler options, and compiler errors and warnings.  \n  \n## In This Section  \n [C# Keywords](../../csharp/language-reference/keywords/index.md)  \n Provides links to information about C# keywords and syntax.  \n  \n [C# Operators](../../csharp/language-reference/operators/index.md)  \n Provides links to information about C# operators and syntax.  \n\n [C# Special Characters](../../csharp/language-reference/tokens/index.md)  \n Provides links to information about special contextual characters in C# and their usage.  \n\n [C# Preprocessor Directives](../../csharp/language-reference/preprocessor-directives/index.md)  \n Provides links to information about compiler commands for embedding in C# source code.  \n  \n [C# Compiler Options](../../csharp/language-reference/compiler-options/index.md)  \n Includes information about compiler options and how to use them.  \n  \n [C# Compiler Errors](../../csharp/language-reference/compiler-messages/index.md)  \n Includes code snippets that demonstrate the cause and correction of C# compiler errors and warnings.  \n  \n [C# Language Specification](../../../_csharplang/spec/introduction.md)  \n The C# 6.0 language specification. This is a draft proposal for the C# 6.0 language. Version 5.0 has been released in December 2017 as the [Standard ECMA-334 5th Edition](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf) document.\n\nThe features that have been implemented in C# versions after 6.0 are represented in language specification proposals. These documents describe the deltas to the language spec in order to add these new features. \n\n [C# 7.0 Language Proposals](../../../_csharplang/proposals/csharp-7.0/pattern-matching.md)  \n There are a number of new features implemented in C# 7.0. They include pattern matching, local functions, out variable declarations, throw expressions, binary literals, and digit separators. This folder contains the specifications for each of those features.\n  \n [C# 7.1 Language Proposals](../../../_csharplang/proposals/csharp-7.1/async-main.md)  \n There are new features added in C# 7.1. First, you can write a `Main` method that returns `Task` or `Task<int>`. This enables you to add the `async` modifier to `Main`. The `default` expression can be used without a type in locations where the type can be inferred. Also, tuple member names can be inferred. Finally, pattern matching can be used with generics.\n\n [C# 7.2 Language Proposals](../../../_csharplang/proposals/csharp-7.2/readonly-ref.md)  \n C# 7.2 added a number of small features. You can pass arguments by readonly reference using the `in` keyword. There are a number of low-level changes to support compile-time safety for `Span` and related types. You can use named arguments where later arguments are positional, in some situations. The `private protected` access modifier enables you to specify that callers are limited to derived types implemented in the same assembly. The `?:` operator can resolve to a reference to a variable. You can also format hexadecimal and binary numbers using a leading digit separator.   \n\n [C# 7.3 Language Proposals](../../../_csharplang/proposals/csharp-7.3/blittable.md)  \n C# 7.3 is another point release that includes several small updates. You can use new constraints on generic type parameters. Other changes make it easier to work with `fixed` fields, including using [`stackalloc`](./keywords/stackalloc.md) allocations. Local variables declared with the `ref` keyword may be reasssigned to refer to new storage. You can place attributes on auto-implemented properties that target the compiler-generated backing field. Expression variables can be used in initializers. Tuples can be compared for equality (or inequality). There have also been some improvements to overload resolution.\n  \n [C# 8.0 Language Proposals](../../../_csharplang/proposals/csharp-8.0/nullable-reference-types.md)\n C# 8.0 is available in preview. The following proposals are the current versions of the specifications for those features. Some are more complete; some are still a work in progress. The features that have shipped in previews include nullable reference types, recursive pattern matching, async streams, ranges and indexes, pattern based using and using declarations, and null coalescing assignment.\n  \n## Related Sections  \n\n [C# Guide](../../csharp/index.md)  \n Provides a portal to Visual C# documentation.  \n  \n [Using the Visual Studio Development Environment for C#](/visualstudio/csharp-ide/using-the-visual-studio-development-environment-for-csharp)  \n Provides links to conceptual and task topics that describe the IDE and Editor.  \n  \n [C# Programming Guide](../../csharp/programming-guide/index.md)  \n Includes information about how to use the C# programming language.\n","nodes":[{"pos":[4,276],"embed":true,"restype":"x-metadata","content":"title: \"C# Reference\"\nms.date: 02/14/2017\nhelpviewer_keywords: \n  - \"Visual C#, language reference\"\n  - \"language reference [C#]\"\n  - \"Programmer's Reference for C#\"\n  - \"C# language, reference\"\n  - \"reference, C# language\"\nms.assetid: 06de3167-c16c-4e1a-b3c5-c27841d4569a","nodes":[{"content":"C# Reference","nodes":[{"pos":[0,12],"content":"C# Reference","nodes":[{"content":"C# Reference","pos":[0,12]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[283,295],"content":"C# Reference","linkify":"C# Reference","nodes":[{"content":"C# Reference","pos":[0,12]}]},{"content":"This section provides reference material about C# keywords, operators, special characters, preprocessor directives, compiler options, and compiler errors and warnings.","pos":[296,463]},{"pos":[472,487],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../csharp/language-reference/keywords/index.md)</ept>","pos":[491,555],"source":"[C# Keywords](../../csharp/language-reference/keywords/index.md)"},{"content":"Provides links to information about C# keywords and syntax.","pos":[559,618]},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../csharp/language-reference/operators/index.md)</ept>","pos":[625,691],"source":"[C# Operators](../../csharp/language-reference/operators/index.md)"},{"content":"Provides links to information about C# operators and syntax.","pos":[695,755]},{"content":"<bpt id=\"p1\">[</bpt>C# Special Characters<ept id=\"p1\">](../../csharp/language-reference/tokens/index.md)</ept>","pos":[760,832],"source":"[C# Special Characters](../../csharp/language-reference/tokens/index.md)"},{"content":"Provides links to information about special contextual characters in C# and their usage.","pos":[836,924]},{"content":"<bpt id=\"p1\">[</bpt>C# Preprocessor Directives<ept id=\"p1\">](../../csharp/language-reference/preprocessor-directives/index.md)</ept>","pos":[929,1023],"source":"[C# Preprocessor Directives](../../csharp/language-reference/preprocessor-directives/index.md)"},{"content":"Provides links to information about compiler commands for embedding in C# source code.","pos":[1027,1113]},{"content":"<bpt id=\"p1\">[</bpt>C# Compiler Options<ept id=\"p1\">](../../csharp/language-reference/compiler-options/index.md)</ept>","pos":[1120,1200],"source":"[C# Compiler Options](../../csharp/language-reference/compiler-options/index.md)"},{"content":"Includes information about compiler options and how to use them.","pos":[1204,1268]},{"content":"<bpt id=\"p1\">[</bpt>C# Compiler Errors<ept id=\"p1\">](../../csharp/language-reference/compiler-messages/index.md)</ept>","pos":[1275,1355],"source":"[C# Compiler Errors](../../csharp/language-reference/compiler-messages/index.md)"},{"content":"Includes code snippets that demonstrate the cause and correction of C# compiler errors and warnings.","pos":[1359,1459]},{"content":"<bpt id=\"p1\">[</bpt>C# Language Specification<ept id=\"p1\">](../../../_csharplang/spec/introduction.md)</ept>","pos":[1466,1536],"source":"[C# Language Specification](../../../_csharplang/spec/introduction.md)"},{"content":"The C# 6.0 language specification.","pos":[1540,1574]},{"content":"This is a draft proposal for the C# 6.0 language.","pos":[1575,1624]},{"content":"Version 5.0 has been released in December 2017 as the <bpt id=\"p1\">[</bpt>Standard ECMA-334 5th Edition<ept id=\"p1\">](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf)</ept> document.","pos":[1625,1796],"source":" Version 5.0 has been released in December 2017 as the [Standard ECMA-334 5th Edition](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf) document."},{"content":"The features that have been implemented in C# versions after 6.0 are represented in language specification proposals.","pos":[1798,1915]},{"content":"These documents describe the deltas to the language spec in order to add these new features.","pos":[1916,2008]},{"content":"<bpt id=\"p1\">[</bpt>C# 7.0 Language Proposals<ept id=\"p1\">](../../../_csharplang/proposals/csharp-7.0/pattern-matching.md)</ept>","pos":[2012,2102],"source":"[C# 7.0 Language Proposals](../../../_csharplang/proposals/csharp-7.0/pattern-matching.md)"},{"content":"There are a number of new features implemented in C# 7.0.","pos":[2106,2163]},{"content":"They include pattern matching, local functions, out variable declarations, throw expressions, binary literals, and digit separators.","pos":[2164,2296]},{"content":"This folder contains the specifications for each of those features.","pos":[2297,2364]},{"content":"<bpt id=\"p1\">[</bpt>C# 7.1 Language Proposals<ept id=\"p1\">](../../../_csharplang/proposals/csharp-7.1/async-main.md)</ept>","pos":[2369,2453],"source":"[C# 7.1 Language Proposals](../../../_csharplang/proposals/csharp-7.1/async-main.md)"},{"content":"There are new features added in C# 7.1.","pos":[2457,2496]},{"content":"First, you can write a <ph id=\"ph1\">`Main`</ph> method that returns <ph id=\"ph2\">`Task`</ph> or <ph id=\"ph3\">`Task&lt;int&gt;`</ph>.","pos":[2497,2569],"source":" First, you can write a `Main` method that returns `Task` or `Task<int>`."},{"content":"This enables you to add the <ph id=\"ph1\">`async`</ph> modifier to <ph id=\"ph2\">`Main`</ph>.","pos":[2570,2625],"source":" This enables you to add the `async` modifier to `Main`."},{"content":"The <ph id=\"ph1\">`default`</ph> expression can be used without a type in locations where the type can be inferred.","pos":[2626,2722],"source":" The `default` expression can be used without a type in locations where the type can be inferred."},{"content":"Also, tuple member names can be inferred.","pos":[2723,2764]},{"content":"Finally, pattern matching can be used with generics.","pos":[2765,2817]},{"content":"<bpt id=\"p1\">[</bpt>C# 7.2 Language Proposals<ept id=\"p1\">](../../../_csharplang/proposals/csharp-7.2/readonly-ref.md)</ept>","pos":[2820,2906],"source":"[C# 7.2 Language Proposals](../../../_csharplang/proposals/csharp-7.2/readonly-ref.md)"},{"content":"C# 7.2 added a number of small features.","pos":[2910,2950]},{"content":"You can pass arguments by readonly reference using the <ph id=\"ph1\">`in`</ph> keyword.","pos":[2951,3019],"source":" You can pass arguments by readonly reference using the `in` keyword."},{"content":"There are a number of low-level changes to support compile-time safety for <ph id=\"ph1\">`Span`</ph> and related types.","pos":[3020,3120],"source":" There are a number of low-level changes to support compile-time safety for `Span` and related types."},{"content":"You can use named arguments where later arguments are positional, in some situations.","pos":[3121,3206]},{"content":"The <ph id=\"ph1\">`private protected`</ph> access modifier enables you to specify that callers are limited to derived types implemented in the same assembly.","pos":[3207,3345],"source":" The `private protected` access modifier enables you to specify that callers are limited to derived types implemented in the same assembly."},{"content":"The <ph id=\"ph1\">`?:`</ph> operator can resolve to a reference to a variable.","pos":[3346,3405],"source":" The `?:` operator can resolve to a reference to a variable."},{"content":"You can also format hexadecimal and binary numbers using a leading digit separator.","pos":[3406,3489]},{"content":"<bpt id=\"p1\">[</bpt>C# 7.3 Language Proposals<ept id=\"p1\">](../../../_csharplang/proposals/csharp-7.3/blittable.md)</ept>","pos":[3495,3578],"source":"[C# 7.3 Language Proposals](../../../_csharplang/proposals/csharp-7.3/blittable.md)"},{"content":"C# 7.3 is another point release that includes several small updates.","pos":[3582,3650]},{"content":"You can use new constraints on generic type parameters.","pos":[3651,3706]},{"content":"Other changes make it easier to work with <ph id=\"ph1\">`fixed`</ph> fields, including using <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`stackalloc`</ph><ept id=\"p1\">](./keywords/stackalloc.md)</ept> allocations.","pos":[3707,3834],"source":" Other changes make it easier to work with `fixed` fields, including using [`stackalloc`](./keywords/stackalloc.md) allocations."},{"content":"Local variables declared with the <ph id=\"ph1\">`ref`</ph> keyword may be reasssigned to refer to new storage.","pos":[3835,3926],"source":" Local variables declared with the `ref` keyword may be reasssigned to refer to new storage."},{"content":"You can place attributes on auto-implemented properties that target the compiler-generated backing field.","pos":[3927,4032]},{"content":"Expression variables can be used in initializers.","pos":[4033,4082]},{"content":"Tuples can be compared for equality (or inequality).","pos":[4083,4135]},{"content":"There have also been some improvements to overload resolution.","pos":[4136,4198]},{"content":"<bpt id=\"p1\">[</bpt>C# 8.0 Language Proposals<ept id=\"p1\">](../../../_csharplang/proposals/csharp-8.0/nullable-reference-types.md)</ept> C# 8.0 is available in preview.","pos":[4203,4334],"source":"[C# 8.0 Language Proposals](../../../_csharplang/proposals/csharp-8.0/nullable-reference-types.md)\n C# 8.0 is available in preview."},{"content":"The following proposals are the current versions of the specifications for those features.","pos":[4335,4425]},{"content":"Some are more complete; some are still a work in progress.","pos":[4426,4484]},{"content":"The features that have shipped in previews include nullable reference types, recursive pattern matching, async streams, ranges and indexes, pattern based using and using declarations, and null coalescing assignment.","pos":[4485,4700]},{"pos":[4707,4723],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Guide<ept id=\"p1\">](../../csharp/index.md)</ept>","pos":[4728,4761],"source":"[C# Guide](../../csharp/index.md)"},{"content":"Provides a portal to Visual C# documentation.","pos":[4765,4810]},{"content":"<bpt id=\"p1\">[</bpt>Using the Visual Studio Development Environment for C#<ept id=\"p1\">](/visualstudio/csharp-ide/using-the-visual-studio-development-environment-for-csharp)</ept>","pos":[4817,4958],"source":"[Using the Visual Studio Development Environment for C#](/visualstudio/csharp-ide/using-the-visual-studio-development-environment-for-csharp)"},{"content":"Provides links to conceptual and task topics that describe the IDE and Editor.","pos":[4962,5040]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../csharp/programming-guide/index.md)</ept>","pos":[5047,5110],"source":"[C# Programming Guide](../../csharp/programming-guide/index.md)"},{"content":"Includes information about how to use the C# programming language.","pos":[5114,5180]}]}