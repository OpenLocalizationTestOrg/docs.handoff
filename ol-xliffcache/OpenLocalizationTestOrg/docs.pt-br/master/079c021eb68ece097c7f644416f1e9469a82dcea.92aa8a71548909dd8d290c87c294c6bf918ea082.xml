{"content":"---\ntitle: \"|| Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/06/2018\nf1_keywords: \n  - \"||_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"logical OR operator [C#]\"\n  - \"conditional-OR operator (||) [C#]\"\n  - \"|| operator [C#]\"\nms.assetid: 7d442d8e-400d-421f-b4d2-034bf82bcbdc\n---\n# || Operator (C# Reference)\n\nThe conditional logical OR operator `||`, also known as the \"short-circuiting\" logical OR operator, computes the logical OR of its [bool](../keywords/bool.md) operands. The result of `x || y` is `true` if either `x` or `y` evaluates to `true`. Otherwise, the result is `false`. If the first operand evaluates to `true`, the second operand is not evaluated and the result of operation is `true`. The following example demonstrates that behavior:\n\n[!code-csharp-interactive[conditional logical OR](~/samples/snippets/csharp/language-reference/operators/ConditionalLogicalOperatorsExamples.cs#Or)]\n\nThe [logical OR operator](or-operator.md) `|` also computes the logical OR of its `bool` operands, but always evaluates both operands.\n\n## Operator overloadability\n\nA user-defined type cannot overload the conditional logical OR operator. However, if a user-defined type overloads the [logical OR](or-operator.md) and [true and false operators](../keywords/true-false-operators.md) in a certain way, the `||` operation can be evaluated for the operands of that type. For more information, see the [User-defined conditional logical operators](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators) section of the [C# language specification](../language-specification/index.md).\n\n## C# language specification\n\nFor more information, see the [Conditional logical operators](~/_csharplang/spec/expressions.md#conditional-logical-operators) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [&& operator](conditional-and-operator.md)\n- [\\! operator](logical-negation-operator.md)\n- [| operator](or-operator.md)\n","nodes":[{"pos":[4,282],"embed":true,"restype":"x-metadata","content":"title: \"|| Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/06/2018\nf1_keywords: \n  - \"||_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"logical OR operator [C#]\"\n  - \"conditional-OR operator (||) [C#]\"\n  - \"|| operator [C#]\"\nms.assetid: 7d442d8e-400d-421f-b4d2-034bf82bcbdc","nodes":[{"content":"|| Operator - C# Reference","nodes":[{"pos":[0,26],"content":"|| Operator - C# Reference","nodes":[{"content":"|| Operator - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[289,315],"content":"|| Operator (C# Reference)","linkify":"|| Operator (C# Reference)","nodes":[{"content":"|| Operator (C# Reference)","pos":[0,26]}]},{"content":"The conditional logical OR operator <ph id=\"ph1\">`||`</ph>, also known as the \"short-circuiting\" logical OR operator, computes the logical OR of its <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../keywords/bool.md)</ept> operands.","pos":[317,485],"source":"The conditional logical OR operator `||`, also known as the \"short-circuiting\" logical OR operator, computes the logical OR of its [bool](../keywords/bool.md) operands."},{"content":"The result of <ph id=\"ph1\">`x || y`</ph> is <ph id=\"ph2\">`true`</ph> if either <ph id=\"ph3\">`x`</ph> or <ph id=\"ph4\">`y`</ph> evaluates to <ph id=\"ph5\">`true`</ph>.","pos":[486,560],"source":" The result of `x || y` is `true` if either `x` or `y` evaluates to `true`."},{"content":"Otherwise, the result is <ph id=\"ph1\">`false`</ph>.","pos":[561,594],"source":" Otherwise, the result is `false`."},{"content":"If the first operand evaluates to <ph id=\"ph1\">`true`</ph>, the second operand is not evaluated and the result of operation is <ph id=\"ph2\">`true`</ph>.","pos":[595,711],"source":" If the first operand evaluates to `true`, the second operand is not evaluated and the result of operation is `true`."},{"content":"The following example demonstrates that behavior:","pos":[712,761]},{"pos":[913,1047],"content":"The <bpt id=\"p1\">[</bpt>logical OR operator<ept id=\"p1\">](or-operator.md)</ept> <ph id=\"ph1\">`|`</ph> also computes the logical OR of its <ph id=\"ph2\">`bool`</ph> operands, but always evaluates both operands.","source":"The [logical OR operator](or-operator.md) `|` also computes the logical OR of its `bool` operands, but always evaluates both operands."},{"pos":[1052,1076],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"A user-defined type cannot overload the conditional logical OR operator.","pos":[1078,1150]},{"content":"However, if a user-defined type overloads the <bpt id=\"p1\">[</bpt>logical OR<ept id=\"p1\">](or-operator.md)</ept> and <bpt id=\"p2\">[</bpt>true and false operators<ept id=\"p2\">](../keywords/true-false-operators.md)</ept> in a certain way, the <ph id=\"ph1\">`||`</ph> operation can be evaluated for the operands of that type.","pos":[1151,1378],"source":" However, if a user-defined type overloads the [logical OR](or-operator.md) and [true and false operators](../keywords/true-false-operators.md) in a certain way, the `||` operation can be evaluated for the operands of that type."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>User-defined conditional logical operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[1379,1611],"source":" For more information, see the [User-defined conditional logical operators](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1616,1641],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1643,1849],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Conditional logical operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#conditional-logical-operators)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Conditional logical operators](~/_csharplang/spec/expressions.md#conditional-logical-operators) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1854,1862],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1866,1893],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1896,1952],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1955,1979],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[1982,2024],"content":"<bpt id=\"p1\">[</bpt>&amp;&amp; operator<ept id=\"p1\">](conditional-and-operator.md)</ept>","source":"[&& operator](conditional-and-operator.md)"},{"pos":[2027,2070],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\!</ph> operator<ept id=\"p1\">](logical-negation-operator.md)</ept>","source":"[\\! operator](logical-negation-operator.md)"},{"pos":[2073,2101],"content":"<bpt id=\"p1\">[</bpt>| operator<ept id=\"p1\">](or-operator.md)</ept>","source":"[| operator](or-operator.md)"}]}