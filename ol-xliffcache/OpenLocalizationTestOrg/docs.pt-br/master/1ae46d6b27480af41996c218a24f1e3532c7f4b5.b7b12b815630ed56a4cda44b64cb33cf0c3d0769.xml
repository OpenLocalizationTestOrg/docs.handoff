{"content":"---\ntitle: \"Built-in Types for Common XAML Language Primitives | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"XAML language primitives [XAML Services]\"\n  - \"XAML [XAML Services], built-in types\"\n  - \"x:String [XAML Services]\"\n  - \"x:TimeSpan [XAML Services]\"\n  - \"x:Byte [XAML Services]\"\n  - \"x:Double [XAML Services]\"\n  - \"XAML [XAML Services], types\"\n  - \"x:Uri [XAML Services]\"\n  - \"XAML built-in types [XAML Services]\"\n  - \"x:Int64 [XAML Services]\"\n  - \"x:Single [XAML Services]\"\n  - \"x:Int32 [XAML Services]\"\nms.assetid: 11de2f08-5b95-4989-b5ec-5178eb968184\ncaps.latest.revision: 11\nauthor: \"wadepickett\"\nms.author: \"wpickett\"\nmanager: \"wpickett\"\n---\n# Built-in Types for Common XAML Language Primitives\nXAML 2009 introduces XAML language-level support for several data types that are frequently used primitives in the common language runtime (CLR) and in other programming languages. XAML 2009 adds support for these primitives: `x:Object`, `x:Boolean`, `x:Char`, `x:String`, `x:Decimal`, `x:Single`, `x:Double`, `x:Int16`, `x:Int32`, `x:Int64`, `x:TimeSpan`, `x:Uri`, `x:Byte`, and `x:Array`  \n  \n<a name=\"previous_techniques_for_language_primitives_in_xaml_markup\"></a>   \n## Previous Techniques for Language Primitives in XAML Markup  \n In XAML for previous WPF versions, you could reference the CLR language primitives by mapping the assembly and namespace that contained a CLR primitive definition class for the .NET Framework. Most of these are in the mscorlib assembly and <xref:System> namespace. For example, to use <xref:System.Int32>, you could declare the following mapping (with an example usage shown thereafter):  \n  \n```  \n<Application xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"  \nxmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"   \nxmlns:sys=\"clr-namespace:System;assembly=mscorlib\">  \n  <Application.Resources>  \n    <sys:Int32 x:Key=\"intMeaning\">42</sys:Int32>  \n  </Application.Resources>  \n</Application>  \n```  \n  \n<a name=\"xaml_2009_language_primitives\"></a>   \n## XAML 2009 Language Primitives  \n By convention, the language primitives for XAML and all other XAML language elements are shown, including the `x:` prefix. This is how XAML language elements are typically used in real-world markup. This convention is followed in the conceptual documentation for XAML in WPF and also in the XAML specification.  \n  \n### x:Object  \n For CLR backing, the `x:Object` primitive corresponds to <xref:System.Object>.  \n  \n This primitive is not typically used in application markup, but might be useful for some scenarios such as checking assignability in a XAML type system.  \n  \n### x:Boolean  \n For CLR backing, the `x:Boolean` primitive corresponds to <xref:System.Boolean>.  \n  \n XAML parses values for `x:Boolean` as case insensitive. Note that `x:Bool` is not an accepted alternative. For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.17 and 5.4.11](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Char  \n For CLR backing, the `x:Char` primitive corresponds to <xref:System.Char>.  \n  \n String and char types have interaction with the overall encoding of the file at the XML level. For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.7 and 5.4.1](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:String  \n For CLR backing, the `x:String` primitive corresponds to <xref:System.String>.  \n  \n String and char types have interaction with the overall encoding of the file at the XML level. For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.6](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Decimal  \n For CLR backing, the `x:Decimal` primitive corresponds to <xref:System.Decimal>.  \n  \n Note that XAML parsing is inherently done under `en-US` culture. Under `en-US` culture, the correct separator for the components of a decimal is always a period (`.`) regardless of culture settings of the development environment, or of the eventual client target where the XAML is loaded at run time.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.14 and 5.4.8](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Single  \n For CLR backing, the `x:Single` primitive corresponds to <xref:System.Single>.  \n  \n In addition to the numeric values, text syntax for `x:Single` also permits the tokens `Infinity`, `-Infinity`, and `NaN`. These tokens are treated as case sensitive.  \n  \n `x:Single` can support values in scientific notation form, if the first character in text syntax is `e` or `E`.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.8 and 5.4.2](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Double  \n For CLR backing, the `x:Double` primitive corresponds to <xref:System.Double>.  \n  \n In addition to the numeric values, text syntax for `x:Double` permits the tokens `Infinity`, `-Infinity`, and `NaN`. These tokens are treated as case sensitive.  \n  \n `x:Double` can support values in scientific notation form. Use the character `e` or `E` to introduce the exponent portion.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.9 and 5.4.3](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Int16  \n For CLR backing, the `x:Int16` primitive corresponds to <xref:System.Int16> and `x:Int16` is treated as signed. In XAML, the absence of a plus (`+`) sign in text syntax is implied as a positive signed value.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.11 and 5.4.5](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Int32  \n For CLR backing, the `x:Int32` primitive corresponds to <xref:System.Int32>. `x:Int32` is treated as signed. In XAML, the absence of a plus (`+`) sign in text syntax is implied as a positive signed value.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.12 and 5.4.6](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Int64  \n For CLR backing, the `x:Int64` primitive corresponds to <xref:System.Int64>. `x:Int64` is treated as signed. In XAML, the absence of a plus (`+`) sign in text syntax is implied as a positive signed value.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.13 and 5.4.7](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:TimeSpan  \n For CLR backing, the `x:TimeSpan` primitive corresponds to <xref:System.TimeSpan>.  \n  \n Note that XAML parsing for time-date format is inherently done under `en-US` culture.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.16 and 5.4.10](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Uri  \n For CLR backing, the `x:Uri` primitive corresponds to <xref:System.Uri>.  \n  \n Checking for protocols is not part of the XAML definition for `x:Uri`.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.15 and 5.4.9](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Byte  \n For CLR backing, the `x:Byte` primitive corresponds to <xref:System.Byte>. A<xref:System.Byte> / `x:Byte` is treated as unsigned.  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.10 and 5.4.4](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n### x:Array  \n For CLR backing, the `x:Array` primitive corresponds to <xref:System.Array>.  \n  \n You can define an array in XAML 2006  by using a markup extension syntax; however, the XAML 2009 syntax is a language-defined primitive that does not require accessing a markup extension. For more information about XAML 2006 support, see [x:Array Markup Extension](../../../docs/framework/xaml-services/x-array-markup-extension.md).  \n  \n For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.18](http://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n<a name=\"wpf_support\"></a>   \n## WPF Support  \n In WPF, you can use XAML 2009 features but only for XAML that is not markup-compiled. Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.  \n  \n A scenario where you can use XAML 2009 features together with WPF is if you author loose XAML and you then load that XAML into a WPF runtime and object graph with <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>. The WPF <xref:System.Windows.Markup.XamlReader?displayProperty=fullName> and its <xref:System.Windows.Markup.XamlReader.Load%2A> can process XAML 2009 language keywords and features into a valid object graph representation.","nodes":[{"pos":[12,79],"content":"Built-in Types for Common XAML Language Primitives | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Built-in Types for Common XAML Language Primitives | Microsoft Docs","pos":[0,67]}]},{"pos":[818,868],"content":"Built-in Types for Common XAML Language Primitives","linkify":"Built-in Types for Common XAML Language Primitives","nodes":[{"content":"Built-in Types for Common XAML Language Primitives","pos":[0,50]}]},{"content":"XAML 2009 introduces XAML language-level support for several data types that are frequently used primitives in the common language runtime (CLR) and in other programming languages.","pos":[869,1049]},{"content":"XAML 2009 adds support for these primitives: <ph id=\"ph1\">`x:Object`</ph>, <ph id=\"ph2\">`x:Boolean`</ph>, <ph id=\"ph3\">`x:Char`</ph>, <ph id=\"ph4\">`x:String`</ph>, <ph id=\"ph5\">`x:Decimal`</ph>, <ph id=\"ph6\">`x:Single`</ph>, <ph id=\"ph7\">`x:Double`</ph>, <ph id=\"ph8\">`x:Int16`</ph>, <ph id=\"ph9\">`x:Int32`</ph>, <ph id=\"ph10\">`x:Int64`</ph>, <ph id=\"ph11\">`x:TimeSpan`</ph>, <ph id=\"ph12\">`x:Uri`</ph>, <ph id=\"ph13\">`x:Byte`</ph>, and <ph id=\"ph14\">`x:Array`</ph>","pos":[1050,1258],"source":" XAML 2009 adds support for these primitives: `x:Object`, `x:Boolean`, `x:Char`, `x:String`, `x:Decimal`, `x:Single`, `x:Double`, `x:Int16`, `x:Int32`, `x:Int64`, `x:TimeSpan`, `x:Uri`, `x:Byte`, and `x:Array`"},{"pos":[1344,1402],"content":"Previous Techniques for Language Primitives in XAML Markup","linkify":"Previous Techniques for Language Primitives in XAML Markup","nodes":[{"content":"Previous Techniques for Language Primitives in XAML Markup","pos":[0,58]}]},{"content":"In XAML for previous WPF versions, you could reference the CLR language primitives by mapping the assembly and namespace that contained a CLR primitive definition class for the .NET Framework.","pos":[1406,1598]},{"content":"Most of these are in the mscorlib assembly and <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace.","pos":[1599,1670],"source":" Most of these are in the mscorlib assembly and <xref:System> namespace."},{"content":"For example, to use <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph>, you could declare the following mapping (with an example usage shown thereafter):","pos":[1671,1793],"source":" For example, to use <xref:System.Int32>, you could declare the following mapping (with an example usage shown thereafter):"},{"pos":[2183,2212],"content":"XAML 2009 Language Primitives","linkify":"XAML 2009 Language Primitives","nodes":[{"content":"XAML 2009 Language Primitives","pos":[0,29]}]},{"content":"By convention, the language primitives for XAML and all other XAML language elements are shown, including the <ph id=\"ph1\">`x:`</ph> prefix.","pos":[2216,2338],"source":"By convention, the language primitives for XAML and all other XAML language elements are shown, including the `x:` prefix."},{"content":"This is how XAML language elements are typically used in real-world markup.","pos":[2339,2414]},{"content":"This convention is followed in the conceptual documentation for XAML in WPF and also in the XAML specification.","pos":[2415,2526]},{"pos":[2536,2544],"content":"x:Object","linkify":"x:Object","nodes":[{"content":"x:Object","pos":[0,8]}]},{"pos":[2548,2626],"content":"For CLR backing, the <ph id=\"ph1\">`x:Object`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>.","source":"For CLR backing, the `x:Object` primitive corresponds to <xref:System.Object>."},{"content":"This primitive is not typically used in application markup, but might be useful for some scenarios such as checking assignability in a XAML type system.","pos":[2633,2785]},{"pos":[2795,2804],"content":"x:Boolean","linkify":"x:Boolean","nodes":[{"content":"x:Boolean","pos":[0,9]}]},{"pos":[2808,2888],"content":"For CLR backing, the <ph id=\"ph1\">`x:Boolean`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Boolean&gt;</ph>.","source":"For CLR backing, the `x:Boolean` primitive corresponds to <xref:System.Boolean>."},{"content":"XAML parses values for <ph id=\"ph1\">`x:Boolean`</ph> as case insensitive.","pos":[2895,2950],"source":"XAML parses values for `x:Boolean` as case insensitive."},{"content":"Note that <ph id=\"ph1\">`x:Bool`</ph> is not an accepted alternative.","pos":[2951,3001],"source":" Note that `x:Bool` is not an accepted alternative."},{"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.17 and 5.4.11<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","pos":[3002,3142],"source":" For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.17 and 5.4.11](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[3152,3158],"content":"x:Char","linkify":"x:Char","nodes":[{"content":"x:Char","pos":[0,6]}]},{"pos":[3162,3236],"content":"For CLR backing, the <ph id=\"ph1\">`x:Char`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph>.","source":"For CLR backing, the `x:Char` primitive corresponds to <xref:System.Char>."},{"content":"String and char types have interaction with the overall encoding of the file at the XML level.","pos":[3243,3337]},{"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.7 and 5.4.1<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","pos":[3338,3476],"source":" For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.7 and 5.4.1](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[3486,3494],"content":"x:String","linkify":"x:String","nodes":[{"content":"x:String","pos":[0,8]}]},{"pos":[3498,3576],"content":"For CLR backing, the <ph id=\"ph1\">`x:String`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","source":"For CLR backing, the `x:String` primitive corresponds to <xref:System.String>."},{"content":"String and char types have interaction with the overall encoding of the file at the XML level.","pos":[3583,3677]},{"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.6<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","pos":[3678,3806],"source":" For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.6](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[3816,3825],"content":"x:Decimal","linkify":"x:Decimal","nodes":[{"content":"x:Decimal","pos":[0,9]}]},{"pos":[3829,3909],"content":"For CLR backing, the <ph id=\"ph1\">`x:Decimal`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph>.","source":"For CLR backing, the `x:Decimal` primitive corresponds to <xref:System.Decimal>."},{"content":"Note that XAML parsing is inherently done under <ph id=\"ph1\">`en-US`</ph> culture.","pos":[3916,3980],"source":"Note that XAML parsing is inherently done under `en-US` culture."},{"content":"Under <ph id=\"ph1\">`en-US`</ph> culture, the correct separator for the components of a decimal is always a period (<ph id=\"ph2\">`.`</ph>) regardless of culture settings of the development environment, or of the eventual client target where the XAML is loaded at run time.","pos":[3981,4216],"source":" Under `en-US` culture, the correct separator for the components of a decimal is always a period (`.`) regardless of culture settings of the development environment, or of the eventual client target where the XAML is loaded at run time."},{"pos":[4223,4362],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.14 and 5.4.8<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.14 and 5.4.8](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[4372,4380],"content":"x:Single","linkify":"x:Single","nodes":[{"content":"x:Single","pos":[0,8]}]},{"pos":[4384,4462],"content":"For CLR backing, the <ph id=\"ph1\">`x:Single`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph>.","source":"For CLR backing, the `x:Single` primitive corresponds to <xref:System.Single>."},{"content":"In addition to the numeric values, text syntax for <ph id=\"ph1\">`x:Single`</ph> also permits the tokens <ph id=\"ph2\">`Infinity`</ph>, <ph id=\"ph3\">`-Infinity`</ph>, and <ph id=\"ph4\">`NaN`</ph>.","pos":[4469,4590],"source":"In addition to the numeric values, text syntax for `x:Single` also permits the tokens `Infinity`, `-Infinity`, and `NaN`."},{"content":"These tokens are treated as case sensitive.","pos":[4591,4634]},{"pos":[4641,4752],"content":"<ph id=\"ph1\">`x:Single`</ph> can support values in scientific notation form, if the first character in text syntax is <ph id=\"ph2\">`e`</ph> or <ph id=\"ph3\">`E`</ph>.","source":"`x:Single` can support values in scientific notation form, if the first character in text syntax is `e` or `E`."},{"pos":[4759,4897],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.8 and 5.4.2<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.8 and 5.4.2](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[4907,4915],"content":"x:Double","linkify":"x:Double","nodes":[{"content":"x:Double","pos":[0,8]}]},{"pos":[4919,4997],"content":"For CLR backing, the <ph id=\"ph1\">`x:Double`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph>.","source":"For CLR backing, the `x:Double` primitive corresponds to <xref:System.Double>."},{"content":"In addition to the numeric values, text syntax for <ph id=\"ph1\">`x:Double`</ph> permits the tokens <ph id=\"ph2\">`Infinity`</ph>, <ph id=\"ph3\">`-Infinity`</ph>, and <ph id=\"ph4\">`NaN`</ph>.","pos":[5004,5120],"source":"In addition to the numeric values, text syntax for `x:Double` permits the tokens `Infinity`, `-Infinity`, and `NaN`."},{"content":"These tokens are treated as case sensitive.","pos":[5121,5164]},{"content":"<ph id=\"ph1\">`x:Double`</ph> can support values in scientific notation form.","pos":[5171,5229],"source":"`x:Double` can support values in scientific notation form."},{"content":"Use the character <ph id=\"ph1\">`e`</ph> or <ph id=\"ph2\">`E`</ph> to introduce the exponent portion.","pos":[5230,5293],"source":" Use the character `e` or `E` to introduce the exponent portion."},{"pos":[5300,5438],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.9 and 5.4.3<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.9 and 5.4.3](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[5448,5455],"content":"x:Int16","linkify":"x:Int16","nodes":[{"content":"x:Int16","pos":[0,7]}]},{"content":"For CLR backing, the <ph id=\"ph1\">`x:Int16`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Int16&gt;</ph> and <ph id=\"ph3\">`x:Int16`</ph> is treated as signed.","pos":[5459,5570],"source":"For CLR backing, the `x:Int16` primitive corresponds to <xref:System.Int16> and `x:Int16` is treated as signed."},{"content":"In XAML, the absence of a plus (<ph id=\"ph1\">`+`</ph>) sign in text syntax is implied as a positive signed value.","pos":[5571,5666],"source":" In XAML, the absence of a plus (`+`) sign in text syntax is implied as a positive signed value."},{"pos":[5673,5812],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.11 and 5.4.5<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.11 and 5.4.5](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[5822,5829],"content":"x:Int32","linkify":"x:Int32","nodes":[{"content":"x:Int32","pos":[0,7]}]},{"content":"For CLR backing, the <ph id=\"ph1\">`x:Int32`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>.","pos":[5833,5909],"source":"For CLR backing, the `x:Int32` primitive corresponds to <xref:System.Int32>."},{"content":"<ph id=\"ph1\">`x:Int32`</ph> is treated as signed.","pos":[5910,5941],"source":"`x:Int32` is treated as signed."},{"content":"In XAML, the absence of a plus (<ph id=\"ph1\">`+`</ph>) sign in text syntax is implied as a positive signed value.","pos":[5942,6037],"source":" In XAML, the absence of a plus (`+`) sign in text syntax is implied as a positive signed value."},{"pos":[6044,6183],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.12 and 5.4.6<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.12 and 5.4.6](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[6193,6200],"content":"x:Int64","linkify":"x:Int64","nodes":[{"content":"x:Int64","pos":[0,7]}]},{"content":"For CLR backing, the <ph id=\"ph1\">`x:Int64`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph>.","pos":[6204,6280],"source":"For CLR backing, the `x:Int64` primitive corresponds to <xref:System.Int64>."},{"content":"<ph id=\"ph1\">`x:Int64`</ph> is treated as signed.","pos":[6281,6312],"source":"`x:Int64` is treated as signed."},{"content":"In XAML, the absence of a plus (<ph id=\"ph1\">`+`</ph>) sign in text syntax is implied as a positive signed value.","pos":[6313,6408],"source":" In XAML, the absence of a plus (`+`) sign in text syntax is implied as a positive signed value."},{"pos":[6415,6554],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.13 and 5.4.7<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.13 and 5.4.7](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[6564,6574],"content":"x:TimeSpan","linkify":"x:TimeSpan","nodes":[{"content":"x:TimeSpan","pos":[0,10]}]},{"pos":[6578,6660],"content":"For CLR backing, the <ph id=\"ph1\">`x:TimeSpan`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","source":"For CLR backing, the `x:TimeSpan` primitive corresponds to <xref:System.TimeSpan>."},{"pos":[6667,6752],"content":"Note that XAML parsing for time-date format is inherently done under <ph id=\"ph1\">`en-US`</ph> culture.","source":"Note that XAML parsing for time-date format is inherently done under `en-US` culture."},{"pos":[6759,6899],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.16 and 5.4.10<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.16 and 5.4.10](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[6909,6914],"content":"x:Uri","linkify":"x:Uri","nodes":[{"content":"x:Uri","pos":[0,5]}]},{"pos":[6918,6990],"content":"For CLR backing, the <ph id=\"ph1\">`x:Uri`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Uri&gt;</ph>.","source":"For CLR backing, the `x:Uri` primitive corresponds to <xref:System.Uri>."},{"pos":[6997,7067],"content":"Checking for protocols is not part of the XAML definition for <ph id=\"ph1\">`x:Uri`</ph>.","source":"Checking for protocols is not part of the XAML definition for `x:Uri`."},{"pos":[7074,7213],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.15 and 5.4.9<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.15 and 5.4.9](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[7223,7229],"content":"x:Byte","linkify":"x:Byte","nodes":[{"content":"x:Byte","pos":[0,6]}]},{"content":"For CLR backing, the <ph id=\"ph1\">`x:Byte`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>.","pos":[7233,7307],"source":"For CLR backing, the `x:Byte` primitive corresponds to <xref:System.Byte>."},{"content":"A<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph><ph id=\"ph2\"> / </ph><ph id=\"ph3\">`x:Byte`</ph> is treated as unsigned.","pos":[7308,7362],"source":" A<xref:System.Byte> / `x:Byte` is treated as unsigned."},{"pos":[7369,7508],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.10 and 5.4.4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.10 and 5.4.4](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[7518,7525],"content":"x:Array","linkify":"x:Array","nodes":[{"content":"x:Array","pos":[0,7]}]},{"pos":[7529,7605],"content":"For CLR backing, the <ph id=\"ph1\">`x:Array`</ph> primitive corresponds to <ph id=\"ph2\">&lt;xref:System.Array&gt;</ph>.","source":"For CLR backing, the `x:Array` primitive corresponds to <xref:System.Array>."},{"content":"You can define an array in XAML 2006  by using a markup extension syntax; however, the XAML 2009 syntax is a language-defined primitive that does not require accessing a markup extension.","pos":[7612,7799]},{"content":"For more information about XAML 2006 support, see <bpt id=\"p1\">[</bpt>x:Array Markup Extension<ept id=\"p1\">](../../../docs/framework/xaml-services/x-array-markup-extension.md)</ept>.","pos":[7800,7944],"source":" For more information about XAML 2006 support, see [x:Array Markup Extension](../../../docs/framework/xaml-services/x-array-markup-extension.md)."},{"pos":[7951,8080],"content":"For the XAML language specification definition, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Sections 5.2.18<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","source":"For the XAML language specification definition, see [\\[MS-XAML\\] Sections 5.2.18](http://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[8119,8130],"content":"WPF Support","linkify":"WPF Support","nodes":[{"content":"WPF Support","pos":[0,11]}]},{"content":"In WPF, you can use XAML 2009 features but only for XAML that is not markup-compiled.","pos":[8134,8219]},{"content":"Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.","pos":[8220,8336]},{"content":"A scenario where you can use XAML 2009 features together with WPF is if you author loose XAML and you then load that XAML into a WPF runtime and object graph with <ph id=\"ph1\">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName&gt;</ph>.","pos":[8343,8579],"source":"A scenario where you can use XAML 2009 features together with WPF is if you author loose XAML and you then load that XAML into a WPF runtime and object graph with <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>."},{"content":"The WPF <ph id=\"ph1\">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=fullName&gt;</ph> and its <ph id=\"ph2\">&lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;</ph> can process XAML 2009 language keywords and features into a valid object graph representation.","pos":[8580,8803],"source":" The WPF <xref:System.Windows.Markup.XamlReader?displayProperty=fullName> and its <xref:System.Windows.Markup.XamlReader.Load%2A> can process XAML 2009 language keywords and features into a valid object graph representation."}]}