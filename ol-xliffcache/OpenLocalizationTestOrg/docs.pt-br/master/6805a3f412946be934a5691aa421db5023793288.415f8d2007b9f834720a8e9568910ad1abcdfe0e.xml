{"content":"---\ntitle: \"MULTISET (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: eb90a377-e47a-43a5-b308-e993b6d611e6\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# MULTISET (Entity SQL)\nCreates an instance of a multiset from a list of values. All the values in the MULTISET constructor must be of a compatible type `T`. Empty multiset constructors are not allowed.  \n  \n## Syntax  \n  \n```  \n  \nMULTISET ( expression [{, expression }] )  \nor  \n{ expression [{, expression }] }  \n```  \n  \n## Arguments  \n `expression`  \n Any valid list of values.  \n  \n## Return Value  \n A collection of type MULTISET\\<T>.  \n  \n## Remarks  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides three kinds of constructors: row constructors, object constructors, and multiset (or collection) constructors. For more information, see [Constructing Types](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md).  \n  \n The multiset constructor creates an instance of a multiset from a list of values. All the values in the constructor must be of a compatible type.  \n  \n For example, the following expression creates a multiset of integers.  \n  \n `MULTISET(1, 2, 3)`  \n  \n `{1, 2, 3}`  \n  \n> [!NOTE]\n>  Nested multiset literals are only supported when a wrapping mutiset has a single multiset element; for example, `{{1, 2, 3}}`. When the wrapping multiset has multiple multiset elements (for example, `{{1, 2}, {3, 4}}`), nested multiset literals are not supported.  \n  \n## Example  \n The following Entity SQL query uses the MULTISET operator to create an instance of a multiset from a list of values. The query is based on the AdventureWorks Sales Model. To compile and run this query, follow these steps:  \n  \n1.  Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md).  \n  \n2.  Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:  \n  \n [!code-csharp[DP EntityServices Concepts 2#MULTISET](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts 2/cs/entitysql.cs#multiset)]  \n  \n## See Also  \n [Constructing Types](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md)   \n [Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)","nodes":[{"pos":[4,396],"embed":true,"restype":"x-metadata","content":"title: \"MULTISET (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: eb90a377-e47a-43a5-b308-e993b6d611e6\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"MULTISET (Entity SQL) | Microsoft Docs","nodes":[{"pos":[0,38],"content":"MULTISET (Entity SQL) | Microsoft Docs","nodes":[{"content":"MULTISET (Entity SQL) | Microsoft Docs","pos":[0,38]}]}],"path":["title"]}],"yml":true},{"pos":[403,424],"content":"MULTISET (Entity SQL)","linkify":"MULTISET (Entity SQL)","nodes":[{"content":"MULTISET (Entity SQL)","pos":[0,21]}]},{"content":"Creates an instance of a multiset from a list of values.","pos":[425,481]},{"content":"All the values in the MULTISET constructor must be of a compatible type <ph id=\"ph1\">`T`</ph>.","pos":[482,558],"source":" All the values in the MULTISET constructor must be of a compatible type `T`."},{"content":"Empty multiset constructors are not allowed.","pos":[559,603]},{"pos":[612,618],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[729,738],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"Any valid list of values.","pos":[758,783]},{"pos":[792,804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A collection of type MULTISET<ph id=\"ph1\">\\&lt;</ph>T&gt;.","pos":[808,842],"source":"A collection of type MULTISET\\<T>."},{"pos":[851,858],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides three kinds of constructors: row constructors, object constructors, and multiset (or collection) constructors.","pos":[862,1037],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides three kinds of constructors: row constructors, object constructors, and multiset (or collection) constructors."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Constructing Types<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md)</ept>.","pos":[1038,1186],"source":" For more information, see [Constructing Types](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md)."},{"content":"The multiset constructor creates an instance of a multiset from a list of values.","pos":[1193,1274]},{"content":"All the values in the constructor must be of a compatible type.","pos":[1275,1338]},{"content":"For example, the following expression creates a multiset of integers.","pos":[1345,1414]},{"pos":[1466,1740],"content":"[!NOTE]\n Nested multiset literals are only supported when a wrapping mutiset has a single multiset element; for example, `{{1, 2, 3}}`. When the wrapping multiset has multiple multiset elements (for example, `{{1, 2}, {3, 4}}`), nested multiset literals are not supported.","leadings":["","> "],"nodes":[{"content":"Nested multiset literals are only supported when a wrapping mutiset has a single multiset element; for example, `{{1, 2, 3}}`. When the wrapping multiset has multiple multiset elements (for example, `{{1, 2}, {3, 4}}`), nested multiset literals are not supported.","pos":[9,272],"nodes":[{"content":"Nested multiset literals are only supported when a wrapping mutiset has a single multiset element; for example, <ph id=\"ph1\">`{{1, 2, 3}}`</ph>.","pos":[0,126],"source":"Nested multiset literals are only supported when a wrapping mutiset has a single multiset element; for example, `{{1, 2, 3}}`."},{"content":"When the wrapping multiset has multiple multiset elements (for example, <ph id=\"ph1\">`{{1, 2}, {3, 4}}`</ph>), nested multiset literals are not supported.","pos":[127,263],"source":" When the wrapping multiset has multiple multiset elements (for example, `{{1, 2}, {3, 4}}`), nested multiset literals are not supported."}]}]},{"pos":[1749,1756],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following Entity SQL query uses the MULTISET operator to create an instance of a multiset from a list of values.","pos":[1760,1876]},{"content":"The query is based on the AdventureWorks Sales Model.","pos":[1877,1930]},{"content":"To compile and run this query, follow these steps:","pos":[1931,1981]},{"pos":[1991,2188],"content":"Follow the procedure in <bpt id=\"p1\">[</bpt>How to: Execute a Query that Returns StructuralType Results<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)</ept>.","source":"Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)."},{"pos":[2198,2281],"content":"Pass the following query as an argument to the <ph id=\"ph1\">`ExecuteStructuralTypeQuery`</ph> method:","source":"Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:"},{"pos":[2464,2472],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Constructing Types<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md)</ept><ph id=\"ph1\"> </ph>","pos":[2476,2598],"source":"[Constructing Types](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md) "},{"content":"<bpt id=\"p1\">[</bpt>Entity SQL Reference<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept>","pos":[2602,2716],"source":"[Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)"}]}