<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ref.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1faebe2ce1a59798621888e3a518900234720be5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\ref.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd95e1517c479219b32796687003b8b6e3874808</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">940eceb050ffa2b0c17205c9610980c34ea8b032</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ref keyword - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ref (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ref`</ph> keyword indicates a value that is passed by reference.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is used in four different contexts:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In a method signature and in a method call, to pass an argument to a method by reference.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Passing an argument by reference<ept id="p1">](#passing-an-argument-by-reference)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In a method signature, to return a value to the caller by reference.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Reference return values<ept id="p1">](#reference-return-values)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In a member body, to indicate that a reference return value is stored locally as a reference that the caller intends to modify or, in general, a local variable accesses another value by reference.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Ref locals<ept id="p1">](#ref-locals)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`struct`</ph> declaration to declare a <ph id="ph2">`ref struct`</ph> or a <ph id="ph3">`ref readonly struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ref struct types<ept id="p1">](#ref-struct-types)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Passing an argument by reference</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When used in a method's parameter list, the <ph id="ph1">`ref`</ph> keyword indicates that an argument is passed by reference, not by value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ref`</ph> keyword makes the formal parameter an alias for the argument, which must be a variable.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In other words, any operation on the parameter is made on the argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, if the caller passes a local variable expression or an array element access expression, and the called method replaces the object to which the ref parameter refers, then the callerâ€™s local variable or the array element now refers to the new object when the method returns.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Do not confuse the concept of passing by reference with the concept of reference types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The two concepts are not the same.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A method parameter can be modified by <ph id="ph1">`ref`</ph> regardless of whether it is a value type or a reference type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There is no boxing of a value type when it is passed by reference.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`ref`</ph> parameter, both the method definition and the calling method must explicitly use the <ph id="ph2">`ref`</ph> keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An argument that is passed to a <ph id="ph1">`ref`</ph> or <ph id="ph2">`in`</ph> parameter must be initialized before it is passed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This differs from <bpt id="p1">[</bpt>out<ept id="p1">](out-parameter-modifier.md)</ept> parameters, whose arguments do not have to be explicitly initialized before they are passed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Members of a class can't have signatures that differ only by <ph id="ph1">`ref`</ph>, <ph id="ph2">`in`</ph>, or <ph id="ph3">`out`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A compiler error occurs if the only difference between two members of a type is that one of them has a <ph id="ph1">`ref`</ph> parameter and the other has an <ph id="ph2">`out`</ph>, or <ph id="ph3">`in`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code, for example, doesn't compile.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, methods can be overloaded when one method has a <ph id="ph1">`ref`</ph>, <ph id="ph2">`in`</ph>, or <ph id="ph3">`out`</ph> parameter and the other has a value parameter, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In other situations that require signature matching, such as hiding or overriding, <ph id="ph1">`in`</ph>, <ph id="ph2">`ref`</ph>, and <ph id="ph3">`out`</ph> are part of the signature and don't match each other.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Properties are not variables.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>They are methods, and cannot be passed to <ph id="ph1">`ref`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can't use the <ph id="ph1">`ref`</ph>, <ph id="ph2">`in`</ph>, and <ph id="ph3">`out`</ph> keywords for the following kinds of methods:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Async methods, which you define by using the <bpt id="p1">[</bpt>async<ept id="p1">](async.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Iterator methods, which include a <bpt id="p1">[</bpt>yield return<ept id="p1">](yield.md)</ept> or <ph id="ph1">`yield break`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Passing an argument by reference: An example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The previous examples pass value types by reference.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`ref`</ph> keyword to pass reference types by reference.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Passing a reference type by reference enables the called method to replace the object to which the reference parameter refers in the caller.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The storage location of the object is passed to the method as the value of the reference parameter.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you change the value in the storage location of the parameter (to point to a new object), you also change the storage location to which the caller refers.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example passes an instance of a reference type as a <ph id="ph1">`ref`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about how to pass reference types by value and by reference, see <bpt id="p1">[</bpt>Passing Reference-Type Parameters<ept id="p1">](../../programming-guide/classes-and-structs/passing-reference-type-parameters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Reference return values</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Reference return values (or ref returns) are values that a method returns by reference to the caller.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>That is, the caller can modify the value returned by a method, and that change is reflected in the state of the object that contains the method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A reference return value is defined by using the <ph id="ph1">`ref`</ph> keyword:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the method signature.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, the following method signature indicates that the <ph id="ph1">`GetCurrentPrice`</ph> method returns a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value by reference.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Between the <ph id="ph1">`return`</ph> token and the variable returned in a <ph id="ph2">`return`</ph> statement in the method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In order for the caller to modify the object's state, the reference return value must be stored to a variable that is explicitly defined as a <bpt id="p1">[</bpt>ref local<ept id="p1">](#ref-locals)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The called method may also declare the return value as <ph id="ph1">`ref readonly`</ph> to return the value by reference, and enforce that the calling code cannot modify the returned value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The calling method can avoid copying the returned valued by storing the value in a local <bpt id="p1">[</bpt>ref readonly<ept id="p1">](#ref-readonly-locals)</ept> variable.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>A ref returns and ref locals example<ept id="p1">](#a-ref-returns-and-ref-locals-example)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Ref locals</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A ref local variable is used to refer to values returned using <ph id="ph1">`return ref`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A ref local variable cannot be initialized to a non-ref return value.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In other words, the right hand side of the initialization must be a reference.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Any modifications to the value of the ref local are reflected in the state of the object whose method returned the value by reference.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You define a ref local by using the <ph id="ph1">`ref`</ph> keyword before the variable declaration, as well as immediately before the call to the method that returns the value by reference.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, the following statement defines a ref local value that is returned by a method named <ph id="ph1">`GetEstimatedValue`</ph>:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can access a value by reference in the same way.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In some cases, accessing a value by reference increases performance by avoiding a potentially expensive copy operation.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, the following statement shows how one can define a ref local value that is used to reference a value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that in both examples the <ph id="ph1">`ref`</ph> keyword must be used in both places, or the compiler generates error CS8172, "Cannot initialize a by-reference variable with a value."</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.3, the iteration variable of the <ph id="ph1">`foreach`</ph> statement can be ref local or ref readonly local variable.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>foreach statement<ept id="p1">](foreach-in.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Ref readonly locals</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A ref readonly local is used to refer to values returned by the method or property that has <ph id="ph1">`ref readonly`</ph> in its signature and uses <ph id="ph2">`return ref`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ref readonly`</ph> variable combines the properties of a <ph id="ph2">`ref`</ph> local variable with a <ph id="ph3">`readonly`</ph> variable: it is an alias to the storage it's assigned to, and it cannot be modified.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A ref returns and ref locals example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Book`</ph> class that has two <ph id="ph2">&lt;xref:System.String&gt;</ph> fields, <ph id="ph3">`Title`</ph> and <ph id="ph4">`Author`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It also defines a <ph id="ph1">`BookCollection`</ph> class that includes a private array of <ph id="ph2">`Book`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Individual book objects are returned by reference by calling its <ph id="ph1">`GetBookByTitle`</ph> method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the caller stores the value returned by the <ph id="ph1">`GetBookByTitle`</ph> method as a ref local, changes that the caller makes to the return value are reflected in the <ph id="ph2">`BookCollection`</ph> object, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Ref struct types</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`ref`</ph> modifier to a <ph id="ph2">`struct`</ph> declaration defines that instances of that type must be stack allocated.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In other words, instances of these types can never be created on the heap as a member of another class.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The primary motivation for this feature was <ph id="ph1">&lt;xref:System.Span%601&gt;</ph> and related structures.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The goal of keeping a <ph id="ph1">`ref struct`</ph> type as a stack-allocated variable introduces several rules that the compiler enforces for all <ph id="ph2">`ref struct`</ph> types.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can't box a <ph id="ph1">`ref struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You cannot assign a <ph id="ph1">`ref struct`</ph> type to a variable of type <ph id="ph2">`object`</ph>, <ph id="ph3">`dynamic`</ph>, or any interface type.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ref struct`</ph> types cannot implement interfaces.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can't declare a <ph id="ph1">`ref struct`</ph> as a member of a class or a normal struct.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You cannot declare local variables that are <ph id="ph1">`ref struct`</ph> types in async methods.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can declare them in synchronous methods that return <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> or <ph id="ph3">`Task`</ph>-like types.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You cannot declare <ph id="ph1">`ref struct`</ph> local variables in iterators.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You cannot capture <ph id="ph1">`ref struct`</ph> variables in lambda expressions or local functions.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>These restrictions ensure you don't accidentally use a <ph id="ph1">`ref struct`</ph> in a manner that could promote it to the managed heap.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can combine modifiers to declare a struct as <ph id="ph1">`readonly ref`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`readonly ref struct`</ph> combines the benefits and restrictions of <ph id="ph2">`ref struct`</ph> and <ph id="ph3">`readonly struct`</ph> declarations.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Write safe efficient code<ept id="p1">](../../write-safe-efficient-code.md)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Ref returns and ref locals<ept id="p1">](../../programming-guide/classes-and-structs/ref-returns.md)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conditional ref expression<ept id="p1">](../operators/conditional-operator.md#conditional-ref-expression)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ref assignment operator<ept id="p1">](../operators/assignment-operator.md#ref-assignment-operator)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing Parameters<ept id="p1">](../../programming-guide/classes-and-structs/passing-parameters.md)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Method Parameters<ept id="p1">](method-parameters.md)</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>