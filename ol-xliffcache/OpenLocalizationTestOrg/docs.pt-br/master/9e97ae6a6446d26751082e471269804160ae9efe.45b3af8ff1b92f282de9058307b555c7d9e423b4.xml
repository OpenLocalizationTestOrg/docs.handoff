{"content":"---\ntitle: \"How to: Find Descendant Elements (XPath-LINQ to XML) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: b318da39-bb8b-4c56-a019-e13b12b01831\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Find Descendant Elements (XPath-LINQ to XML) (C#)\nThis topic shows how to get the descendant elements with a particular name.  \n  \n The XPath expression is `//Name`.  \n  \n## Example  \n This example finds all descendants named `Name`.  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md).  \n  \n```csharp  \nXDocument po = XDocument.Load(\"PurchaseOrders.xml\");  \n  \n// LINQ to XML query  \nIEnumerable<XElement> list1 = po.Root.Descendants(\"Name\");  \n  \n// XPath expression  \nIEnumerable<XElement> list2 = po.XPathSelectElements(\"//Name\");  \n  \nif (list1.Count() == list2.Count() &&  \n        list1.Intersect(list2).Count() == list1.Count())  \n    Console.WriteLine(\"Results are identical\");  \nelse  \n    Console.WriteLine(\"Results differ\");  \nforeach (XElement el in list1)  \n    Console.WriteLine(el);  \n```  \n  \n This example produces the following output:  \n  \n```  \nResults are identical  \n<Name>Ellen Adams</Name>  \n<Name>Tai Yee</Name>  \n<Name>Cristian Osorio</Name>  \n<Name>Cristian Osorio</Name>  \n<Name>Jessica Arnold</Name>  \n<Name>Jessica Arnold</Name>  \n```  \n  \n## See Also  \n [LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)","nodes":[{"pos":[12,86],"content":"How to: Find Descendant Elements (XPath-LINQ to XML) (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Find Descendant Elements (XPath-LINQ to XML) (C#) | Microsoft Docs","pos":[0,74]}]},{"pos":[371,428],"content":"How to: Find Descendant Elements (XPath-LINQ to XML) (C#)","linkify":"How to: Find Descendant Elements (XPath-LINQ to XML) (C#)","nodes":[{"content":"How to: Find Descendant Elements (XPath-LINQ to XML) (C#)","pos":[0,57]}]},{"content":"This topic shows how to get the descendant elements with a particular name.","pos":[429,504]},{"pos":[511,544],"content":"The XPath expression is <ph id=\"ph1\">`//Name`</ph>.","source":"The XPath expression is `//Name`."},{"pos":[553,560],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[564,612],"content":"This example finds all descendants named <ph id=\"ph1\">`Name`</ph>.","source":"This example finds all descendants named `Name`."},{"pos":[619,831],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)."},{"content":"This example produces the following output:","pos":[1356,1399]},{"pos":[1619,1627],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1631,1748],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML for XPath Users (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)</ept>","source":"[LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)"}]}