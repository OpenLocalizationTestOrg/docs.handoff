{"content":"---\ntitle: \"ICorDebugController::HasQueuedCallbacks Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorDebugController.HasQueuedCallbacks\"\napi_location: \n  - \"mscordbi.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorDebugController::HasQueuedCallbacks\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"HasQueuedCallbacks method [.NET Framework debugging]\"\n  - \"ICorDebugController::HasQueuedCallbacks method [.NET Framework debugging]\"\nms.assetid: 0d6a1cd9-370b-4462-adbf-e3980e897ea7\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 14\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# ICorDebugController::HasQueuedCallbacks Method\nGets a value that indicates whether any managed callbacks are currently queued for the specified thread.  \n  \n## Syntax  \n  \n```  \nHRESULT HasQueuedCallbacks (  \n    [in] ICorDebugThread *pThread,  \n    [out] BOOL           *pbQueued  \n);  \n```  \n  \n#### Parameters  \n `pThread`  \n [in] A pointer to an \"ICorDebugThread\" object that represents the thread.  \n  \n `pbQueued`  \n [out] A pointer to a value that is `true` if any managed callbacks are currently queued for the specified thread; otherwise, `false`.  \n  \n If null is specified for the `pThread` parameter, `HasQueuedCallbacks` will return `true` if there are currently managed callbacks queued for any thread.  \n  \n## Remarks  \n Callbacks will be dispatched one at a time, each time [ICorDebugController::Continue](../../../../docs/framework/unmanaged-api/debugging/icordebugcontroller-continue-method.md) is called. The debugger can check this flag if it wants to report multiple debugging events that occur simultaneously.  \n  \n When debugging events are queued, they have already occurred, so the debugger must drain the entire queue to be sure of the state of the debuggee. (Call `ICorDebugController::Continue` to drain the queue.) For example, if the queue contains two debugging events on thread *X*, and the debugger suspends thread *X* after the first debugging event and then calls `ICorDebugController::Continue`, the second debugging event for thread *X* will be dispatched although the thread has been suspended.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorDebug.idl, CorDebug.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]  \n  \n## See Also  \n ","nodes":[{"pos":[4,754],"embed":true,"restype":"x-metadata","content":"title: \"ICorDebugController::HasQueuedCallbacks Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorDebugController.HasQueuedCallbacks\"\napi_location: \n  - \"mscordbi.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorDebugController::HasQueuedCallbacks\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"HasQueuedCallbacks method [.NET Framework debugging]\"\n  - \"ICorDebugController::HasQueuedCallbacks method [.NET Framework debugging]\"\nms.assetid: 0d6a1cd9-370b-4462-adbf-e3980e897ea7\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 14\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"ICorDebugController::HasQueuedCallbacks Method | Microsoft Docs","nodes":[{"pos":[0,63],"content":"ICorDebugController::HasQueuedCallbacks Method | Microsoft Docs","nodes":[{"content":"ICorDebugController::HasQueuedCallbacks Method | Microsoft Docs","pos":[0,63]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[761,807],"content":"ICorDebugController::HasQueuedCallbacks Method","linkify":"ICorDebugController::HasQueuedCallbacks Method","nodes":[{"content":"ICorDebugController::HasQueuedCallbacks Method","pos":[0,46]}]},{"content":"Gets a value that indicates whether any managed callbacks are currently queued for the specified thread.","pos":[808,912]},{"pos":[921,927],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1063,1073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A pointer to an \"ICorDebugThread\" object that represents the thread.","pos":[1090,1163]},{"content":"[out] A pointer to a value that is <ph id=\"ph1\">`true`</ph> if any managed callbacks are currently queued for the specified thread; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[1184,1317],"source":"[out] A pointer to a value that is `true` if any managed callbacks are currently queued for the specified thread; otherwise, `false`."},{"pos":[1324,1477],"content":"If null is specified for the <ph id=\"ph1\">`pThread`</ph> parameter, <ph id=\"ph2\">`HasQueuedCallbacks`</ph> will return <ph id=\"ph3\">`true`</ph> if there are currently managed callbacks queued for any thread.","source":"If null is specified for the `pThread` parameter, `HasQueuedCallbacks` will return `true` if there are currently managed callbacks queued for any thread."},{"pos":[1486,1493],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Callbacks will be dispatched one at a time, each time <bpt id=\"p1\">[</bpt>ICorDebugController::Continue<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/icordebugcontroller-continue-method.md)</ept> is called.","pos":[1497,1684],"source":"Callbacks will be dispatched one at a time, each time [ICorDebugController::Continue](../../../../docs/framework/unmanaged-api/debugging/icordebugcontroller-continue-method.md) is called."},{"content":"The debugger can check this flag if it wants to report multiple debugging events that occur simultaneously.","pos":[1685,1792]},{"content":"When debugging events are queued, they have already occurred, so the debugger must drain the entire queue to be sure of the state of the debuggee.","pos":[1799,1945]},{"content":"(Call <ph id=\"ph1\">`ICorDebugController::Continue`</ph> to drain the queue.) For example, if the queue contains two debugging events on thread <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>, and the debugger suspends thread <bpt id=\"p2\">*</bpt>X<ept id=\"p2\">*</ept> after the first debugging event and then calls <ph id=\"ph2\">`ICorDebugController::Continue`</ph>, the second debugging event for thread <bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept> will be dispatched although the thread has been suspended.","pos":[1946,2293],"source":" (Call `ICorDebugController::Continue` to drain the queue.) For example, if the queue contains two debugging events on thread *X*, and the debugger suspends thread *X* after the first debugging event and then calls `ICorDebugController::Continue`, the second debugging event for thread *X* will be dispatched although the thread has been suspended."},{"pos":[2302,2314],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2318,2422],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2429,2465],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorDebug.idl, CorDebug.h","source":"**Header:** CorDebug.idl, CorDebug.h"},{"pos":[2472,2497],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2504,2612],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]"},{"pos":[2621,2629],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}