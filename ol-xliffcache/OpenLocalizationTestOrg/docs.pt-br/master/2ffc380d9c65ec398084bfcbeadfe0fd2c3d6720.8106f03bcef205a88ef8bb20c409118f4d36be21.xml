{"content":"---\ntitle: \"C# Expressions\"\nms.date: \"03/30/2017\"\nms.assetid: 29110be7-f4e3-407e-8dbe-78102eb21115\n---\n# C# Expressions\nStarting with [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], C# expressions are supported in Windows Workflow Foundation (WF). New C# workflow projects created in Visual Studio 2012 that target [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] use C# expressions, and Visual Basic workflow projects use Visual Basic expressions. Existing [!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)] workflow projects that use Visual Basic expressions can be migrated to [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] regardless of the project language and are supported. This topic provides an overview of C# expressions in [!INCLUDE[wf1](../../../includes/wf1-md.md)].\n\n## Using C# expressions in workflows\n\n-   [Using C# expressions in the Workflow Designer](csharp-expressions.md#WFDesigner)\n\n    -   [Backwards compatibility](csharp-expressions.md#BackwardCompat)\n\n-   [Using C# expressions in code workflows](csharp-expressions.md#CodeWorkflows)\n\n-   [Using C# expressions in XAML workflows](csharp-expressions.md#XamlWorkflows)\n\n    -   [Compiled Xaml](csharp-expressions.md#CompiledXaml)\n\n    -   [Loose Xaml](csharp-expressions.md#LooseXaml)\n\n-   [Using C# expressions in XAMLX workflow services](csharp-expressions.md#WFServices)\n\n### <a name=\"WFDesigner\"></a> Using C# expressions in the Workflow Designer\n Starting with [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], C# expressions are supported in Windows Workflow Foundation (WF). C# workflow projects created in Visual Studio 2012 that target [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] use C# expressions, while Visual Basic workflow projects use Visual Basic expressions. To specify the desired C# expression, type it into the box labeled **Enter a C# expression**. This label is displayed in the properties window when the activity is selected in the designer, or on the activity in the workflow designer. In the following example, two `WriteLine` activities are contained within a `Sequence` inside a `NoPersistScope`.\n\n ![Automatically created sequence activity](./media/autosurround2.png \"AutoSurround2\")\n\n> [!NOTE]\n>  C# expressions are supported only in Visual Studio, and are not supported in the re-hosted workflow designer. For more information about new WF45 features supported in the re-hosted designer, see [Support for New Workflow Foundation 4.5 Features in the Rehosted Workflow Designer](wf-features-in-the-rehosted-workflow-designer.md).\n\n#### <a name=\"BackwardCompat\"></a> Backwards compatibility\n Visual Basic expressions in existing [!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)] C# workflow projects that have been migrated to [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] are supported. When the Visual Basic expressions are viewed in the workflow designer, the text of the existing Visual Basic expression is replaced with **Value was set in XAML**, unless the Visual Basic expression is valid C# syntax. If the Visual Basic expression is valid C# syntax, then the expression is displayed. To update the Visual Basic expressions to C#, you can edit them in the workflow designer and specify the equivalent C# expression. It is not required to update the Visual Basic expressions to C#, but once the expressions are updated in the workflow designer they are converted to C# and may not be reverted to Visual Basic.\n\n### <a name=\"CodeWorkflows\"></a> Using C# expressions in code workflows\n C# expressions are supported in [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] code based workflows, but before the workflow can be invoked the C# expressions must be compiled using <xref:System.Activities.XamlIntegration.TextExpressionCompiler.Compile%2A?displayProperty=nameWithType>. Workflow authors can use `CSharpValue` to represent the r-value of an expression, and `CSharpReference` to represent the l-value of an expression. In the following example, a workflow is created with an `Assign` activity and a `WriteLine` activity contained in a `Sequence` activity. A `CSharpReference` is specified for the `To` argument of the `Assign`, and represents the l-value of the expression. A `CSharpValue` is specified for the `Value` argument of the `Assign`, and for the `Text` argument of the `WriteLine`, and represents the r-value for those two expressions.\n\n```csharp\nVariable<int> n = new Variable<int>\n{\n    Name = \"n\"\n};\n\nActivity wf = new Sequence\n{\n    Variables = { n },\n    Activities =\n    {\n        new Assign<int>\n        {\n            To = new CSharpReference<int>(\"n\"),\n            Value = new CSharpValue<int>(\"new Random().Next(1, 101)\")\n        },\n        new WriteLine\n        {\n            Text = new CSharpValue<string>(\"\\\"The number is \\\" + n\")\n        }\n    }\n};\n\nCompileExpressions(wf);\n\nWorkflowInvoker.Invoke(wf);\n```\n\n After the workflow is constructed, the C# expressions are compiled by calling the `CompileExpressions` helper method and then the workflow is invoked. The following example is the `CompileExpressions` method.\n\n```csharp\nstatic void CompileExpressions(Activity activity)\n{\n    // activityName is the Namespace.Type of the activity that contains the\n    // C# expressions.\n    string activityName = activity.GetType().ToString();\n\n    // Split activityName into Namespace and Type.Append _CompiledExpressionRoot to the type name\n    // to represent the new type that represents the compiled expressions.\n    // Take everything after the last . for the type name.\n    string activityType = activityName.Split('.').Last() + \"_CompiledExpressionRoot\";\n    // Take everything before the last . for the namespace.\n    string activityNamespace = string.Join(\".\", activityName.Split('.').Reverse().Skip(1).Reverse());\n\n    // Create a TextExpressionCompilerSettings.\n    TextExpressionCompilerSettings settings = new TextExpressionCompilerSettings\n    {\n        Activity = activity,\n        Language = \"C#\",\n        ActivityName = activityType,\n        ActivityNamespace = activityNamespace,\n        RootNamespace = null,\n        GenerateAsPartialClass = false,\n        AlwaysGenerateSource = true,\n        ForImplementation = false\n    };\n\n    // Compile the C# expression.\n    TextExpressionCompilerResults results =\n        new TextExpressionCompiler(settings).Compile();\n\n    // Any compilation errors are contained in the CompilerMessages.\n    if (results.HasErrors)\n    {\n        throw new Exception(\"Compilation failed.\");\n    }\n\n    // Create an instance of the new compiled expression type.\n    ICompiledExpressionRoot compiledExpressionRoot =\n        Activator.CreateInstance(results.ResultType,\n            new object[] { activity }) as ICompiledExpressionRoot;\n\n    // Attach it to the activity.\n    CompiledExpressionInvoker.SetCompiledExpressionRoot(\n        activity, compiledExpressionRoot);\n}\n```\n\n> [!NOTE]\n>  If the C# expressions are not compiled, a <xref:System.NotSupportedException> is thrown when the workflow is invoked with a message similar to the following: `Expression Activity type 'CSharpValue`1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`\n\n If your custom code based workflow uses `DynamicActivity`, then some changes to the `CompileExpressions` method are required, as demonstrated in the following code example.\n\n```csharp\nstatic void CompileExpressions(DynamicActivity dynamicActivity)\n{\n    // activityName is the Namespace.Type of the activity that contains the\n    // C# expressions. For Dynamic Activities this can be retrieved using the\n    // name property , which must be in the form Namespace.Type.\n    string activityName = dynamicActivity.Name;\n\n    // Split activityName into Namespace and Type.Append _CompiledExpressionRoot to the type name\n    // to represent the new type that represents the compiled expressions.\n    // Take everything after the last . for the type name.\n    string activityType = activityName.Split('.').Last() + \"_CompiledExpressionRoot\";\n    // Take everything before the last . for the namespace.\n    string activityNamespace = string.Join(\".\", activityName.Split('.').Reverse().Skip(1).Reverse());\n\n    // Create a TextExpressionCompilerSettings.\n    TextExpressionCompilerSettings settings = new TextExpressionCompilerSettings\n    {\n        Activity = dynamicActivity,\n        Language = \"C#\",\n        ActivityName = activityType,\n        ActivityNamespace = activityNamespace,\n        RootNamespace = null,\n        GenerateAsPartialClass = false,\n        AlwaysGenerateSource = true,\n        ForImplementation = true\n    };\n\n    // Compile the C# expression.\n    TextExpressionCompilerResults results =\n        new TextExpressionCompiler(settings).Compile();\n\n    // Any compilation errors are contained in the CompilerMessages.\n    if (results.HasErrors)\n    {\n        throw new Exception(\"Compilation failed.\");\n    }\n\n    // Create an instance of the new compiled expression type.\n    ICompiledExpressionRoot compiledExpressionRoot =\n        Activator.CreateInstance(results.ResultType,\n            new object[] { dynamicActivity }) as ICompiledExpressionRoot;\n\n    // Attach it to the activity.\n    CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation(\n        dynamicActivity, compiledExpressionRoot);\n}\n```\n\n There are several differences in the `CompileExpressions` overload that compiles the C# expressions in a dynamic activity.\n\n-   The parameter to `CompileExpressions` is a `DynamicActivity`.\n\n-   The type name and namespace are retrieved using the `DynamicActivity.Name` property.\n\n-   `TextExpressionCompilerSettings.ForImplementation` is set to `true`.\n\n-   `CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation` is called instead of `CompiledExpressionInvoker.SetCompiledExpressionRoot`.\n\n For more information about working with expressions in code, see [Authoring Workflows, Activities, and Expressions Using Imperative Code](authoring-workflows-activities-and-expressions-using-imperative-code.md).\n\n### <a name=\"XamlWorkflows\"></a> Using C# expressions in XAML workflows\n C# expressions are supported in XAML workflows. Compiled XAML workflows are compiled into a type, and loose XAML workflows are loaded by the runtime and compiled into an activity tree when the workflow is executed.\n\n-   [Compiled Xaml](csharp-expressions.md#CompiledXaml)\n\n-   [Loose Xaml](csharp-expressions.md#LooseXaml)\n\n#### <a name=\"CompiledXaml\"></a> Compiled Xaml\n C# expressions are supported in compiled XAML workflows that are compiled to a type as part of a C# workflow project that targets [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]. Compiled XAML is the default type of workflow authoring in Visual Studio, and C# workflow projects created in Visual Studio that target [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] use C# expressions.\n\n#### <a name=\"LooseXaml\"></a> Loose Xaml\n C# expressions are supported in loose XAML workflows. The workflow host program that loads and invokes the loose XAML workflow must target [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)], and <xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A> must be set to `true` (the default is `false`). To set <xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A> to `true`, create an <xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings> instance with its <xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A> property set to `true`, and pass it as a parameter to <xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A?displayProperty=nameWithType>. If `CompileExpressions` Is not set to `true`, a <xref:System.NotSupportedException> will be thrown with a message similar to the following: `Expression Activity type 'CSharpValue`1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`\n\n```csharp\nActivityXamlServicesSettings settings = new ActivityXamlServicesSettings\n{\n    CompileExpressions = true\n};\n\nDynamicActivity<int> wf = ActivityXamlServices.Load(new StringReader(serializedAB), settings) as DynamicActivity<int>;\n```\n\n For more information about working with XAML workflows, see [Serializing Workflows and Activities to and from XAML](serializing-workflows-and-activities-to-and-from-xaml.md).\n\n### <a name=\"WFServices\"></a> Using C# expressions in XAMLX workflow services\n C# expressions are supported in XAMLX workflow services. When a workflow service is hosted in IIS or WAS then no additional steps are required, but if the XAML workflow service is self-hosted, then the C# expressions must be compiled. To compile the C# expressions in a self-hosted XAMLX workflow service, first load the XAMLX file into a `WorkflowService`, and then pass the `Body` of the `WorkflowService` to the `CompileExpressions` method described in the previous [Using C# expressions in code workflows](csharp-expressions.md#CodeWorkflows) section. In the following example, a XAMLX workflow service is loaded, the C# expressions are compiled, and then the workflow service is opened and waits for requests.\n\n```csharp\n// Load the XAMLX workflow service.\nWorkflowService workflow1 =\n    (WorkflowService)XamlServices.Load(xamlxPath);\n\n// Compile the C# expressions in the workflow by passing the Body to CompileExpressions.\nCompileExpressions(workflow1.Body);\n\n// Initialize the WorkflowServiceHost.\nvar host = new WorkflowServiceHost(workflow1, new Uri(\"http://localhost:8293/Service1.xamlx\"));\n\n// Enable Metadata publishing/\nServiceMetadataBehavior smb = new ServiceMetadataBehavior();\nsmb.HttpGetEnabled = true;\nsmb.MetadataExporter.PolicyVersion = PolicyVersion.Policy15;\nhost.Description.Behaviors.Add(smb);\n\n// Open the WorkflowServiceHost and wait for requests.\nhost.Open();\nConsole.WriteLine(\"Press enter to quit\");\nConsole.ReadLine();\n```\n\n If the C# expressions are not compiled, the `Open` operation succeeds but the workflow will fail when it is invoked. The following `CompileExpressions` method is the same as the method from the previous [Using C# expressions in code workflows](csharp-expressions.md#CodeWorkflows) section.\n\n```csharp\nstatic void CompileExpressions(Activity activity)\n{\n    // activityName is the Namespace.Type of the activity that contains the\n    // C# expressions.\n    string activityName = activity.GetType().ToString();\n\n    // Split activityName into Namespace and Type.Append _CompiledExpressionRoot to the type name\n    // to represent the new type that represents the compiled expressions.\n    // Take everything after the last . for the type name.\n    string activityType = activityName.Split('.').Last() + \"_CompiledExpressionRoot\";\n    // Take everything before the last . for the namespace.\n    string activityNamespace = string.Join(\".\", activityName.Split('.').Reverse().Skip(1).Reverse());\n\n    // Create a TextExpressionCompilerSettings.\n    TextExpressionCompilerSettings settings = new TextExpressionCompilerSettings\n    {\n        Activity = activity,\n        Language = \"C#\",\n        ActivityName = activityType,\n        ActivityNamespace = activityNamespace,\n        RootNamespace = null,\n        GenerateAsPartialClass = false,\n        AlwaysGenerateSource = true,\n        ForImplementation = false\n    };\n\n    // Compile the C# expression.\n    TextExpressionCompilerResults results =\n        new TextExpressionCompiler(settings).Compile();\n\n    // Any compilation errors are contained in the CompilerMessages.\n    if (results.HasErrors)\n    {\n        throw new Exception(\"Compilation failed.\");\n    }\n\n    // Create an instance of the new compiled expression type.\n    ICompiledExpressionRoot compiledExpressionRoot =\n        Activator.CreateInstance(results.ResultType,\n            new object[] { activity }) as ICompiledExpressionRoot;\n\n    // Attach it to the activity.\n    CompiledExpressionInvoker.SetCompiledExpressionRoot(\n        activity, compiledExpressionRoot);\n}\n```\n","nodes":[{"pos":[4,98],"embed":true,"restype":"x-metadata","content":"title: \"C# Expressions\"\nms.date: \"03/30/2017\"\nms.assetid: 29110be7-f4e3-407e-8dbe-78102eb21115","nodes":[{"content":"C# Expressions","nodes":[{"pos":[0,14],"content":"C# Expressions","nodes":[{"content":"C# Expressions","pos":[0,14]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[105,119],"content":"C# Expressions","linkify":"C# Expressions","nodes":[{"content":"C# Expressions","pos":[0,14]}]},{"content":"Starting with <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, C# expressions are supported in Windows Workflow Foundation (WF).","pos":[120,253],"source":"Starting with [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], C# expressions are supported in Windows Workflow Foundation (WF)."},{"content":"New C# workflow projects created in Visual Studio 2012 that target <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> use C# expressions, and Visual Basic workflow projects use Visual Basic expressions.","pos":[254,458],"source":" New C# workflow projects created in Visual Studio 2012 that target [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] use C# expressions, and Visual Basic workflow projects use Visual Basic expressions."},{"content":"Existing <ph id=\"ph1\">[!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)]</ph> workflow projects that use Visual Basic expressions can be migrated to <ph id=\"ph2\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> regardless of the project language and are supported.","pos":[459,734],"source":" Existing [!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)] workflow projects that use Visual Basic expressions can be migrated to [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] regardless of the project language and are supported."},{"content":"This topic provides an overview of C# expressions in <ph id=\"ph1\">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph>.","pos":[735,833],"source":" This topic provides an overview of C# expressions in [!INCLUDE[wf1](../../../includes/wf1-md.md)]."},{"pos":[838,871],"content":"Using C# expressions in workflows","linkify":"Using C# expressions in workflows","nodes":[{"content":"Using C# expressions in workflows","pos":[0,33]}]},{"pos":[877,958],"content":"<bpt id=\"p1\">[</bpt>Using C# expressions in the Workflow Designer<ept id=\"p1\">](csharp-expressions.md#WFDesigner)</ept>","source":"[Using C# expressions in the Workflow Designer](csharp-expressions.md#WFDesigner)"},{"pos":[968,1031],"content":"<bpt id=\"p1\">[</bpt>Backwards compatibility<ept id=\"p1\">](csharp-expressions.md#BackwardCompat)</ept>","source":"[Backwards compatibility](csharp-expressions.md#BackwardCompat)"},{"pos":[1037,1114],"content":"<bpt id=\"p1\">[</bpt>Using C# expressions in code workflows<ept id=\"p1\">](csharp-expressions.md#CodeWorkflows)</ept>","source":"[Using C# expressions in code workflows](csharp-expressions.md#CodeWorkflows)"},{"pos":[1120,1197],"content":"<bpt id=\"p1\">[</bpt>Using C# expressions in XAML workflows<ept id=\"p1\">](csharp-expressions.md#XamlWorkflows)</ept>","source":"[Using C# expressions in XAML workflows](csharp-expressions.md#XamlWorkflows)"},{"pos":[1207,1258],"content":"<bpt id=\"p1\">[</bpt>Compiled Xaml<ept id=\"p1\">](csharp-expressions.md#CompiledXaml)</ept>","source":"[Compiled Xaml](csharp-expressions.md#CompiledXaml)"},{"pos":[1268,1313],"content":"<bpt id=\"p1\">[</bpt>Loose Xaml<ept id=\"p1\">](csharp-expressions.md#LooseXaml)</ept>","source":"[Loose Xaml](csharp-expressions.md#LooseXaml)"},{"pos":[1319,1402],"content":"<bpt id=\"p1\">[</bpt>Using C# expressions in XAMLX workflow services<ept id=\"p1\">](csharp-expressions.md#WFServices)</ept>","source":"[Using C# expressions in XAMLX workflow services](csharp-expressions.md#WFServices)"},{"pos":[1408,1479],"content":"<bpt id=\"p1\">&lt;a name=\"WFDesigner\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Using C# expressions in the Workflow Designer","linkify":"<a name=\"WFDesigner\"></a> Using C# expressions in the Workflow Designer","source":"<a name=\"WFDesigner\"></a> Using C# expressions in the Workflow Designer"},{"content":"Starting with <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, C# expressions are supported in Windows Workflow Foundation (WF).","pos":[1481,1614],"source":"Starting with [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], C# expressions are supported in Windows Workflow Foundation (WF)."},{"content":"C# workflow projects created in Visual Studio 2012 that target <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> use C# expressions, while Visual Basic workflow projects use Visual Basic expressions.","pos":[1615,1817],"source":" C# workflow projects created in Visual Studio 2012 that target [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] use C# expressions, while Visual Basic workflow projects use Visual Basic expressions."},{"content":"To specify the desired C# expression, type it into the box labeled <bpt id=\"p1\">**</bpt>Enter a C# expression<ept id=\"p1\">**</ept>.","pos":[1818,1911],"source":" To specify the desired C# expression, type it into the box labeled **Enter a C# expression**."},{"content":"This label is displayed in the properties window when the activity is selected in the designer, or on the activity in the workflow designer.","pos":[1912,2052]},{"content":"In the following example, two <ph id=\"ph1\">`WriteLine`</ph> activities are contained within a <ph id=\"ph2\">`Sequence`</ph> inside a <ph id=\"ph3\">`NoPersistScope`</ph>.","pos":[2053,2166],"source":" In the following example, two `WriteLine` activities are contained within a `Sequence` inside a `NoPersistScope`."},{"pos":[2169,2254],"content":"<bpt id=\"p1\">![</bpt>Automatically created sequence activity<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/autosurround2.png \"</bpt>AutoSurround2<ept id=\"p2\">\")</ept>","source":"![Automatically created sequence activity](./media/autosurround2.png \"AutoSurround2\")"},{"pos":[2258,2600],"content":"[!NOTE]\n C# expressions are supported only in Visual Studio, and are not supported in the re-hosted workflow designer. For more information about new WF45 features supported in the re-hosted designer, see [Support for New Workflow Foundation 4.5 Features in the Rehosted Workflow Designer](wf-features-in-the-rehosted-workflow-designer.md).","leadings":["","> "],"nodes":[{"content":"C# expressions are supported only in Visual Studio, and are not supported in the re-hosted workflow designer. For more information about new WF45 features supported in the re-hosted designer, see [Support for New Workflow Foundation 4.5 Features in the Rehosted Workflow Designer](wf-features-in-the-rehosted-workflow-designer.md).","pos":[9,340],"nodes":[{"content":"C# expressions are supported only in Visual Studio, and are not supported in the re-hosted workflow designer.","pos":[0,109]},{"content":"For more information about new WF45 features supported in the re-hosted designer, see <bpt id=\"p1\">[</bpt>Support for New Workflow Foundation 4.5 Features in the Rehosted Workflow Designer<ept id=\"p1\">](wf-features-in-the-rehosted-workflow-designer.md)</ept>.","pos":[110,331],"source":" For more information about new WF45 features supported in the re-hosted designer, see [Support for New Workflow Foundation 4.5 Features in the Rehosted Workflow Designer](wf-features-in-the-rehosted-workflow-designer.md)."}]}]},{"pos":[2607,2660],"content":"<bpt id=\"p1\">&lt;a name=\"BackwardCompat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Backwards compatibility","linkify":"<a name=\"BackwardCompat\"></a> Backwards compatibility","source":"<a name=\"BackwardCompat\"></a> Backwards compatibility"},{"content":"Visual Basic expressions in existing <ph id=\"ph1\">[!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)]</ph> C# workflow projects that have been migrated to <ph id=\"ph2\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> are supported.","pos":[2662,2903],"source":"Visual Basic expressions in existing [!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)] C# workflow projects that have been migrated to [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] are supported."},{"content":"When the Visual Basic expressions are viewed in the workflow designer, the text of the existing Visual Basic expression is replaced with <bpt id=\"p1\">**</bpt>Value was set in XAML<ept id=\"p1\">**</ept>, unless the Visual Basic expression is valid C# syntax.","pos":[2904,3122],"source":" When the Visual Basic expressions are viewed in the workflow designer, the text of the existing Visual Basic expression is replaced with **Value was set in XAML**, unless the Visual Basic expression is valid C# syntax."},{"content":"If the Visual Basic expression is valid C# syntax, then the expression is displayed.","pos":[3123,3207]},{"content":"To update the Visual Basic expressions to C#, you can edit them in the workflow designer and specify the equivalent C# expression.","pos":[3208,3338]},{"content":"It is not required to update the Visual Basic expressions to C#, but once the expressions are updated in the workflow designer they are converted to C# and may not be reverted to Visual Basic.","pos":[3339,3531]},{"pos":[3537,3604],"content":"<bpt id=\"p1\">&lt;a name=\"CodeWorkflows\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Using C# expressions in code workflows","linkify":"<a name=\"CodeWorkflows\"></a> Using C# expressions in code workflows","source":"<a name=\"CodeWorkflows\"></a> Using C# expressions in code workflows"},{"content":"C# expressions are supported in <ph id=\"ph1\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> code based workflows, but before the workflow can be invoked the C# expressions must be compiled using <ph id=\"ph2\">&lt;xref:System.Activities.XamlIntegration.TextExpressionCompiler.Compile%2A?displayProperty=nameWithType&gt;</ph>.","pos":[3606,3922],"source":"C# expressions are supported in [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] code based workflows, but before the workflow can be invoked the C# expressions must be compiled using <xref:System.Activities.XamlIntegration.TextExpressionCompiler.Compile%2A?displayProperty=nameWithType>."},{"content":"Workflow authors can use <ph id=\"ph1\">`CSharpValue`</ph> to represent the r-value of an expression, and <ph id=\"ph2\">`CSharpReference`</ph> to represent the l-value of an expression.","pos":[3923,4069],"source":" Workflow authors can use `CSharpValue` to represent the r-value of an expression, and `CSharpReference` to represent the l-value of an expression."},{"content":"In the following example, a workflow is created with an <ph id=\"ph1\">`Assign`</ph> activity and a <ph id=\"ph2\">`WriteLine`</ph> activity contained in a <ph id=\"ph3\">`Sequence`</ph> activity.","pos":[4070,4206],"source":" In the following example, a workflow is created with an `Assign` activity and a `WriteLine` activity contained in a `Sequence` activity."},{"content":"A <ph id=\"ph1\">`CSharpReference`</ph> is specified for the <ph id=\"ph2\">`To`</ph> argument of the <ph id=\"ph3\">`Assign`</ph>, and represents the l-value of the expression.","pos":[4207,4324],"source":" A `CSharpReference` is specified for the `To` argument of the `Assign`, and represents the l-value of the expression."},{"content":"A <ph id=\"ph1\">`CSharpValue`</ph> is specified for the <ph id=\"ph2\">`Value`</ph> argument of the <ph id=\"ph3\">`Assign`</ph>, and for the <ph id=\"ph4\">`Text`</ph> argument of the <ph id=\"ph5\">`WriteLine`</ph>, and represents the r-value for those two expressions.","pos":[4325,4497],"source":" A `CSharpValue` is specified for the `Value` argument of the `Assign`, and for the `Text` argument of the `WriteLine`, and represents the r-value for those two expressions."},{"content":"After the workflow is constructed, the C# expressions are compiled by calling the <ph id=\"ph1\">`CompileExpressions`</ph> helper method and then the workflow is invoked.","pos":[4984,5134],"source":"After the workflow is constructed, the C# expressions are compiled by calling the `CompileExpressions` helper method and then the workflow is invoked."},{"content":"The following example is the <ph id=\"ph1\">`CompileExpressions`</ph> method.","pos":[5135,5192],"source":" The following example is the `CompileExpressions` method."},{"pos":[6992,7293],"content":"[!NOTE]\n If the C# expressions are not compiled, a <xref:System.NotSupportedException> is thrown when the workflow is invoked with a message similar to the following: `Expression Activity type 'CSharpValue`1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`","leadings":["","> "],"nodes":[{"content":"If the C# expressions are not compiled, a <xref:System.NotSupportedException> is thrown when the workflow is invoked with a message similar to the following: `Expression Activity type 'CSharpValue`1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`","pos":[9,299],"nodes":[{"content":"If the C# expressions are not compiled, a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> is thrown when the workflow is invoked with a message similar to the following: <ph id=\"ph2\">`Expression Activity type 'CSharpValue`</ph>1' requires compilation in order to run.","pos":[0,237],"source":"If the C# expressions are not compiled, a <xref:System.NotSupportedException> is thrown when the workflow is invoked with a message similar to the following: `Expression Activity type 'CSharpValue`1' requires compilation in order to run."},{"content":"Please ensure that the workflow has been compiled.`","pos":[239,290]}]}]},{"pos":[7296,7468],"content":"If your custom code based workflow uses <ph id=\"ph1\">`DynamicActivity`</ph>, then some changes to the <ph id=\"ph2\">`CompileExpressions`</ph> method are required, as demonstrated in the following code example.","source":"If your custom code based workflow uses `DynamicActivity`, then some changes to the `CompileExpressions` method are required, as demonstrated in the following code example."},{"pos":[9429,9551],"content":"There are several differences in the <ph id=\"ph1\">`CompileExpressions`</ph> overload that compiles the C# expressions in a dynamic activity.","source":"There are several differences in the `CompileExpressions` overload that compiles the C# expressions in a dynamic activity."},{"pos":[9557,9618],"content":"The parameter to <ph id=\"ph1\">`CompileExpressions`</ph> is a <ph id=\"ph2\">`DynamicActivity`</ph>.","source":"The parameter to `CompileExpressions` is a `DynamicActivity`."},{"pos":[9624,9708],"content":"The type name and namespace are retrieved using the <ph id=\"ph1\">`DynamicActivity.Name`</ph> property.","source":"The type name and namespace are retrieved using the `DynamicActivity.Name` property."},{"pos":[9714,9782],"content":"<ph id=\"ph1\">`TextExpressionCompilerSettings.ForImplementation`</ph> is set to <ph id=\"ph2\">`true`</ph>.","source":"`TextExpressionCompilerSettings.ForImplementation` is set to `true`."},{"pos":[9788,9934],"content":"<ph id=\"ph1\">`CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation`</ph> is called instead of <ph id=\"ph2\">`CompiledExpressionInvoker.SetCompiledExpressionRoot`</ph>.","source":"`CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation` is called instead of `CompiledExpressionInvoker.SetCompiledExpressionRoot`."},{"pos":[9937,10148],"content":"For more information about working with expressions in code, see <bpt id=\"p1\">[</bpt>Authoring Workflows, Activities, and Expressions Using Imperative Code<ept id=\"p1\">](authoring-workflows-activities-and-expressions-using-imperative-code.md)</ept>.","source":"For more information about working with expressions in code, see [Authoring Workflows, Activities, and Expressions Using Imperative Code](authoring-workflows-activities-and-expressions-using-imperative-code.md)."},{"pos":[10154,10221],"content":"<bpt id=\"p1\">&lt;a name=\"XamlWorkflows\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Using C# expressions in XAML workflows","linkify":"<a name=\"XamlWorkflows\"></a> Using C# expressions in XAML workflows","source":"<a name=\"XamlWorkflows\"></a> Using C# expressions in XAML workflows"},{"content":"C# expressions are supported in XAML workflows.","pos":[10223,10270]},{"content":"Compiled XAML workflows are compiled into a type, and loose XAML workflows are loaded by the runtime and compiled into an activity tree when the workflow is executed.","pos":[10271,10437]},{"pos":[10443,10494],"content":"<bpt id=\"p1\">[</bpt>Compiled Xaml<ept id=\"p1\">](csharp-expressions.md#CompiledXaml)</ept>","source":"[Compiled Xaml](csharp-expressions.md#CompiledXaml)"},{"pos":[10500,10545],"content":"<bpt id=\"p1\">[</bpt>Loose Xaml<ept id=\"p1\">](csharp-expressions.md#LooseXaml)</ept>","source":"[Loose Xaml](csharp-expressions.md#LooseXaml)"},{"pos":[10552,10593],"content":"<bpt id=\"p1\">&lt;a name=\"CompiledXaml\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Compiled Xaml","linkify":"<a name=\"CompiledXaml\"></a> Compiled Xaml","source":"<a name=\"CompiledXaml\"></a> Compiled Xaml"},{"content":"C# expressions are supported in compiled XAML workflows that are compiled to a type as part of a C# workflow project that targets <ph id=\"ph1\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph>.","pos":[10595,10802],"source":"C# expressions are supported in compiled XAML workflows that are compiled to a type as part of a C# workflow project that targets [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]."},{"content":"Compiled XAML is the default type of workflow authoring in Visual Studio, and C# workflow projects created in Visual Studio that target <ph id=\"ph1\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> use C# expressions.","pos":[10803,11035],"source":" Compiled XAML is the default type of workflow authoring in Visual Studio, and C# workflow projects created in Visual Studio that target [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] use C# expressions."},{"pos":[11042,11077],"content":"<bpt id=\"p1\">&lt;a name=\"LooseXaml\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Loose Xaml","linkify":"<a name=\"LooseXaml\"></a> Loose Xaml","source":"<a name=\"LooseXaml\"></a> Loose Xaml"},{"content":"C# expressions are supported in loose XAML workflows.","pos":[11079,11132]},{"content":"The workflow host program that loads and invokes the loose XAML workflow must target <ph id=\"ph1\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph>, and <ph id=\"ph2\">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A&gt;</ph> must be set to <ph id=\"ph3\">`true`</ph> (the default is <ph id=\"ph4\">`false`</ph>).","pos":[11133,11439],"source":" The workflow host program that loads and invokes the loose XAML workflow must target [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)], and <xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A> must be set to `true` (the default is `false`)."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph>, create an <ph id=\"ph3\">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings&gt;</ph> instance with its <ph id=\"ph4\">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A&gt;</ph> property set to <ph id=\"ph5\">`true`</ph>, and pass it as a parameter to <ph id=\"ph6\">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A?displayProperty=nameWithType&gt;</ph>.","pos":[11440,11893],"source":" To set <xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A> to `true`, create an <xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings> instance with its <xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A> property set to `true`, and pass it as a parameter to <xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A?displayProperty=nameWithType>."},{"content":"If <ph id=\"ph1\">`CompileExpressions`</ph> Is not set to <ph id=\"ph2\">`true`</ph>, a <ph id=\"ph3\">&lt;xref:System.NotSupportedException&gt;</ph> will be thrown with a message similar to the following: <ph id=\"ph4\">`Expression Activity type 'CSharpValue`</ph>1' requires compilation in order to run.","pos":[11894,12113],"source":" If `CompileExpressions` Is not set to `true`, a <xref:System.NotSupportedException> will be thrown with a message similar to the following: `Expression Activity type 'CSharpValue`1' requires compilation in order to run."},{"content":"Please ensure that the workflow has been compiled.`","pos":[12115,12166]},{"pos":[12412,12586],"content":"For more information about working with XAML workflows, see <bpt id=\"p1\">[</bpt>Serializing Workflows and Activities to and from XAML<ept id=\"p1\">](serializing-workflows-and-activities-to-and-from-xaml.md)</ept>.","source":"For more information about working with XAML workflows, see [Serializing Workflows and Activities to and from XAML](serializing-workflows-and-activities-to-and-from-xaml.md)."},{"pos":[12592,12665],"content":"<bpt id=\"p1\">&lt;a name=\"WFServices\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Using C# expressions in XAMLX workflow services","linkify":"<a name=\"WFServices\"></a> Using C# expressions in XAMLX workflow services","source":"<a name=\"WFServices\"></a> Using C# expressions in XAMLX workflow services"},{"content":"C# expressions are supported in XAMLX workflow services.","pos":[12667,12723]},{"content":"When a workflow service is hosted in IIS or WAS then no additional steps are required, but if the XAML workflow service is self-hosted, then the C# expressions must be compiled.","pos":[12724,12901]},{"content":"To compile the C# expressions in a self-hosted XAMLX workflow service, first load the XAMLX file into a <ph id=\"ph1\">`WorkflowService`</ph>, and then pass the <ph id=\"ph2\">`Body`</ph> of the <ph id=\"ph3\">`WorkflowService`</ph> to the <ph id=\"ph4\">`CompileExpressions`</ph> method described in the previous <bpt id=\"p1\">[</bpt>Using C# expressions in code workflows<ept id=\"p1\">](csharp-expressions.md#CodeWorkflows)</ept> section.","pos":[12902,13222],"source":" To compile the C# expressions in a self-hosted XAMLX workflow service, first load the XAMLX file into a `WorkflowService`, and then pass the `Body` of the `WorkflowService` to the `CompileExpressions` method described in the previous [Using C# expressions in code workflows](csharp-expressions.md#CodeWorkflows) section."},{"content":"In the following example, a XAMLX workflow service is loaded, the C# expressions are compiled, and then the workflow service is opened and waits for requests.","pos":[13223,13381]},{"content":"If the C# expressions are not compiled, the <ph id=\"ph1\">`Open`</ph> operation succeeds but the workflow will fail when it is invoked.","pos":[14125,14241],"source":"If the C# expressions are not compiled, the `Open` operation succeeds but the workflow will fail when it is invoked."},{"content":"The following <ph id=\"ph1\">`CompileExpressions`</ph> method is the same as the method from the previous <bpt id=\"p1\">[</bpt>Using C# expressions in code workflows<ept id=\"p1\">](csharp-expressions.md#CodeWorkflows)</ept> section.","pos":[14242,14414],"source":" The following `CompileExpressions` method is the same as the method from the previous [Using C# expressions in code workflows](csharp-expressions.md#CodeWorkflows) section."}]}