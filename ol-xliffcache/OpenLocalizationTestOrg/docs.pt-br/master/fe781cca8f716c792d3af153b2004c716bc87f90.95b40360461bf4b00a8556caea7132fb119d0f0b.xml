{"content":"---\ntitle: \"How to: Calculate Numeric Values (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"operator precedence\"\n  - \"operators [Visual Basic]\"\n  - \"expressions [Visual Basic], numeric\"\n  - \"calculations, numeric expressions\"\n  - \"precedence, of operators\"\n  - \"Visual Basic code, operators\"\n  - \"Visual Basic code, expressions\"\n  - \"numeric expressions\"\nms.assetid: ba6bf43d-bd96-49b8-b1de-4a7797551372\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Calculate Numeric Values (Visual Basic)\nYou can calculate numeric values through the use of numeric expressions. A *numeric expression* is an expression that contains literals, constants, and variables representing numeric values, and operators that act on those values.  \n  \n## Calculating Numeric Values  \n  \n#### To calculate a numeric value  \n  \n-   Combine one or more numeric literals, constants, and variables into a numeric expression. The following example shows some valid numeric expressions.  \n  \n     `93.217`  \n  \n     `System.Math.PI`  \n  \n     `counter`  \n  \n     `4 * (67 + i)`  \n  \n     The first three lines show a literal, a constant, and a variable. Each one forms a valid numeric expression by itself. The final line shows a combination of a variable with two literals.  \n  \n     Note that a numeric expression does not form a complete [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] statement by itself. You must use the expression as part of a complete statement.  \n  \n#### To store a numeric value  \n  \n-   You can use an assignment statement to assign the value represented by a numeric expression to a variable, as the following example demonstrates.  \n  \n     [!code-vb[VbVbalrOperators#82](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_1.vb)]  \n  \n     In the preceding example, the value of the expression on the right side of the equal operator (`=`) is assigned to the variable `j` on the left side of the operator, so `j` evaluates to 276.  \n  \n     For more information, see [Statements](../../../../visual-basic/language-reference/statements/index.md).  \n  \n## Multiple Operators  \n If the numeric expression contains more than one operator, the order in which they are evaluated is determined by the rules of operator precedence. To override the rules of operator precedence, you enclose expressions in parentheses, as in the above example; the enclosed expressions are evaluated first.  \n  \n#### To override normal operator precedence  \n  \n-   Use parentheses to enclose the operations you want to be performed first. The following example shows two different results with the same operands and operators.  \n  \n     [!code-vb[VbVbalrOperators#83](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_2.vb)]  \n  \n     In the preceding example, the calculation for `j` performs the addition operator (`+`) first because the parentheses around `(67 + i)` override normal precedence, and the value assigned to `j` is 276 (4 times 69). The calculation for `k` performs the operators in their normal precedence (`*` before `+`), and the value assigned to `k` is 270 (268 plus 2).  \n  \n     For more information, see [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md).  \n  \n## See Also  \n [Operators and Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)   \n [Value Comparisons](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)   \n [Statements](../../../../visual-basic/language-reference/statements/index.md)   \n [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Arithmetic Operators](../../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Efficient Combination of Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)","nodes":[{"pos":[4,832],"nodes":[{"content":"How to: Calculate Numeric Values (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,64],"content":"How to: Calculate Numeric Values (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Calculate Numeric Values (Visual Basic) | Microsoft Docs","pos":[0,64]}]}],"pos":[6,73],"yaml":true}],"content":"title: \"How to: Calculate Numeric Values (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"operator precedence\"\n  - \"operators [Visual Basic]\"\n  - \"expressions [Visual Basic], numeric\"\n  - \"calculations, numeric expressions\"\n  - \"precedence, of operators\"\n  - \"Visual Basic code, operators\"\n  - \"Visual Basic code, expressions\"\n  - \"numeric expressions\"\nms.assetid: ba6bf43d-bd96-49b8-b1de-4a7797551372\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[839,886],"content":"How to: Calculate Numeric Values (Visual Basic)","linkify":"How to: Calculate Numeric Values (Visual Basic)","nodes":[{"content":"How to: Calculate Numeric Values (Visual Basic)","pos":[0,47]}]},{"content":"You can calculate numeric values through the use of numeric expressions.","pos":[887,959]},{"content":"A <bpt id=\"p1\">*</bpt>numeric expression<ept id=\"p1\">*</ept> is an expression that contains literals, constants, and variables representing numeric values, and operators that act on those values.","pos":[960,1117],"source":" A *numeric expression* is an expression that contains literals, constants, and variables representing numeric values, and operators that act on those values."},{"pos":[1126,1152],"content":"Calculating Numeric Values","linkify":"Calculating Numeric Values","nodes":[{"content":"Calculating Numeric Values","pos":[0,26]}]},{"pos":[1163,1191],"content":"To calculate a numeric value","linkify":"To calculate a numeric value","nodes":[{"content":"To calculate a numeric value","pos":[0,28]}]},{"content":"Combine one or more numeric literals, constants, and variables into a numeric expression.","pos":[1201,1290]},{"content":"The following example shows some valid numeric expressions.","pos":[1291,1350]},{"content":"The first three lines show a literal, a constant, and a variable.","pos":[1452,1517]},{"content":"Each one forms a valid numeric expression by itself.","pos":[1518,1570]},{"content":"The final line shows a combination of a variable with two literals.","pos":[1571,1638]},{"content":"Note that a numeric expression does not form a complete <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> statement by itself.","pos":[1649,1818],"source":"Note that a numeric expression does not form a complete [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] statement by itself."},{"content":"You must use the expression as part of a complete statement.","pos":[1819,1879]},{"pos":[1890,1914],"content":"To store a numeric value","linkify":"To store a numeric value","nodes":[{"content":"To store a numeric value","pos":[0,24]}]},{"content":"You can use an assignment statement to assign the value represented by a numeric expression to a variable, as the following example demonstrates.","pos":[1924,2069]},{"pos":[2080,2227],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#82<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#82](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_1.vb)]"},{"pos":[2238,2428],"content":"In the preceding example, the value of the expression on the right side of the equal operator (<ph id=\"ph1\">`=`</ph>) is assigned to the variable <ph id=\"ph2\">`j`</ph> on the left side of the operator, so <ph id=\"ph3\">`j`</ph> evaluates to 276.","source":"In the preceding example, the value of the expression on the right side of the equal operator (`=`) is assigned to the variable `j` on the left side of the operator, so `j` evaluates to 276."},{"pos":[2439,2543],"content":"For more information, see <bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/index.md)</ept>.","source":"For more information, see [Statements](../../../../visual-basic/language-reference/statements/index.md)."},{"pos":[2552,2570],"content":"Multiple Operators","linkify":"Multiple Operators","nodes":[{"content":"Multiple Operators","pos":[0,18]}]},{"content":"If the numeric expression contains more than one operator, the order in which they are evaluated is determined by the rules of operator precedence.","pos":[2574,2721]},{"content":"To override the rules of operator precedence, you enclose expressions in parentheses, as in the above example; the enclosed expressions are evaluated first.","pos":[2722,2878]},{"pos":[2889,2927],"content":"To override normal operator precedence","linkify":"To override normal operator precedence","nodes":[{"content":"To override normal operator precedence","pos":[0,38]}]},{"content":"Use parentheses to enclose the operations you want to be performed first.","pos":[2937,3010]},{"content":"The following example shows two different results with the same operands and operators.","pos":[3011,3098]},{"pos":[3109,3256],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#83<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#83](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_2.vb)]"},{"content":"In the preceding example, the calculation for <ph id=\"ph1\">`j`</ph> performs the addition operator (<ph id=\"ph2\">`+`</ph>) first because the parentheses around <ph id=\"ph3\">`(67 + i)`</ph> override normal precedence, and the value assigned to <ph id=\"ph4\">`j`</ph> is 276 (4 times 69).","pos":[3267,3480],"source":"In the preceding example, the calculation for `j` performs the addition operator (`+`) first because the parentheses around `(67 + i)` override normal precedence, and the value assigned to `j` is 276 (4 times 69)."},{"content":"The calculation for <ph id=\"ph1\">`k`</ph> performs the operators in their normal precedence (<ph id=\"ph2\">`*`</ph> before <ph id=\"ph3\">`+`</ph>), and the value assigned to <ph id=\"ph4\">`k`</ph> is 270 (268 plus 2).","pos":[3481,3623],"source":" The calculation for `k` performs the operators in their normal precedence (`*` before `+`), and the value assigned to `k` is 270 (268 plus 2)."},{"pos":[3634,3776],"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>.","source":"For more information, see [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md)."},{"pos":[3785,3793],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3797,3922],"source":"[Operators and Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Value Comparisons<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id=\"ph1\"> </ph>","pos":[3926,4055],"source":"[Value Comparisons](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4059,4137],"source":"[Statements](../../../../visual-basic/language-reference/statements/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[4141,4257],"source":"[Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[4261,4363],"source":"[Arithmetic Operators](../../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Efficient Combination of Operators<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)</ept>","pos":[4367,4529],"source":"[Efficient Combination of Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)"}]}