{"content":"---\ntitle: \"Type parameter '<typeparametername>' cannot be constrained to itself: '<errormessage>'\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc32113\"\n  - \"vbc32113\"\nhelpviewer_keywords: \n  - \"BC32113\"\nms.assetid: a74128ae-11d0-46bf-8c0b-c7a2bf881d17\n---\n# Type parameter '\\<typeparametername>' cannot be constrained to itself: '\\<errormessage>'\nA constraint list for a type parameter includes that same type parameter.  \n  \n A constraint list on a type parameter can specify any number of interfaces and at most one class. A type argument supplied for that type parameter must implement every specified interface and inherit from the specified class. The compiler requires interfaces and classes that are already defined when it encounters a constraint list. A type parameter is not considered as a defined type until it is replaced by a suitable type argument supplied by code creating the generic type.  \n  \n **Error ID:** BC32113  \n  \n## To correct this error  \n  \n1.  Check the spelling of both the type parameter and the constraints in its constraint list.  \n  \n2.  If there are no spelling mistakes, remove the type parameter's name from its constraint list. It cannot be constrained to itself.  \n  \n## See also\n\n- [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [Type List](../../visual-basic/language-reference/statements/type-list.md)\n","nodes":[{"pos":[4,247],"embed":true,"restype":"x-metadata","content":"title: \"Type parameter '<typeparametername>' cannot be constrained to itself: '<errormessage>'\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc32113\"\n  - \"vbc32113\"\nhelpviewer_keywords: \n  - \"BC32113\"\nms.assetid: a74128ae-11d0-46bf-8c0b-c7a2bf881d17","nodes":[{"content":"Type parameter '<typeparametername>' cannot be constrained to itself: '<errormessage>'","nodes":[{"pos":[0,86],"content":"Type parameter '<ph id=\"ph1\">&lt;typeparametername&gt;</ph>' cannot be constrained to itself: '<ph id=\"ph2\">&lt;errormessage&gt;</ph>'","source":"Type parameter '<typeparametername>' cannot be constrained to itself: '<errormessage>'"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[254,342],"content":"Type parameter '\\<typeparametername>' cannot be constrained to itself: '\\<errormessage>'","linkify":"Type parameter '\\<typeparametername>' cannot be constrained to itself: '\\<errormessage>'","nodes":[{"content":"Type parameter '<ph id=\"ph1\">\\&lt;</ph>typeparametername&gt;' cannot be constrained to itself: '<ph id=\"ph2\">\\&lt;</ph>errormessage&gt;'","pos":[0,88],"source":"Type parameter '\\<typeparametername>' cannot be constrained to itself: '\\<errormessage>'"}]},{"content":"A constraint list for a type parameter includes that same type parameter.","pos":[343,416]},{"content":"A constraint list on a type parameter can specify any number of interfaces and at most one class.","pos":[423,520]},{"content":"A type argument supplied for that type parameter must implement every specified interface and inherit from the specified class.","pos":[521,648]},{"content":"The compiler requires interfaces and classes that are already defined when it encounters a constraint list.","pos":[649,756]},{"content":"A type parameter is not considered as a defined type until it is replaced by a suitable type argument supplied by code creating the generic type.","pos":[757,902]},{"pos":[909,930],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32113","source":"**Error ID:** BC32113"},{"pos":[939,960],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Check the spelling of both the type parameter and the constraints in its constraint list.","pos":[970,1059]},{"content":"If there are no spelling mistakes, remove the type parameter's name from its constraint list.","pos":[1069,1162]},{"content":"It cannot be constrained to itself.","pos":[1163,1198]},{"pos":[1207,1215],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1219,1334],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[1337,1411],"content":"<bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../visual-basic/language-reference/statements/type-list.md)</ept>","source":"[Type List](../../visual-basic/language-reference/statements/type-list.md)"}]}