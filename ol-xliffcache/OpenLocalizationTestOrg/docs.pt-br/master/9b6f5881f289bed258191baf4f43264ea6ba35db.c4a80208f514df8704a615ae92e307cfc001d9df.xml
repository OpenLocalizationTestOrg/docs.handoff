{"content":"---\ntitle: \"IMetaDataEmit::DefineTypeDef Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"IMetaDataEmit.DefineTypeDef\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IMetaDataEmit::DefineTypeDef\"\nhelpviewer_keywords: \n  - \"IMetaDataEmit::DefineTypeDef method [.NET Framework metadata]\"\n  - \"DefineTypeDef method [.NET Framework metadata]\"\nms.assetid: dd11c485-be95-4b97-9cd8-68679a4fb432\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# IMetaDataEmit::DefineTypeDef Method\nCreates a type definition for a common language runtime type, and gets a metadata token for that type definition.  \n  \n## Syntax  \n  \n```  \nHRESULT DefineTypeDef (   \n    [in]  LPCWSTR     szTypeDef,   \n    [in]  DWORD       dwTypeDefFlags,   \n    [in]  mdToken     tkExtends,   \n    [in]  mdToken     rtkImplements[],   \n    [out] mdTypeDef   *ptd  \n);  \n```  \n  \n## Parameters  \n `szTypeDef`  \n [in] The name of the type in Unicode.  \n  \n `dwTypeDefFlags`  \n [in] `TypeDef` attributes. This is a bitmask of `CoreTypeAttr` values.  \n  \n `tkExtends`  \n [in] The token of the base class. It must be either an `mdTypeDef` or an `mdTypeRef` token.  \n  \n `rtkImplements`  \n [in] An array of tokens specifying the interfaces that this class or interface implements.  \n  \n `ptd`  \n [out] The `mdTypeDef` token assigned.  \n  \n## Remarks  \n A flag in `dwTypeDefFlags` specifies whether the type being created is a common type system reference type (class or interface) or a common type system value type.  \n  \n Depending on the parameters supplied, this method, as a side effect, may also create an `mdInterfaceImpl` record for each interface that is inherited or implemented by this type. However, this method does not return any of these `mdInterfaceImpl` tokens. If a client wants to later add or modify an `mdInterfaceImpl` token, it must use the `IMetaDataImport` interface to enumerate them. If you want to use COM semantics of the `[default]` interface, you should supply the default interface as the first element in `rtkImplements`; a custom attribute set on the class will indicate that the class has a default interface (which is always assumed to be the first `mdInterfaceImpl` token declared for the class).  \n  \n Each element of the `rtkImplements` array holds an `mdTypeDef` or `mdTypeRef` token. The last element in the array must be `mdTokenNil`.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** Cor.h  \n  \n **Library:** Used as a resource in MSCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]  \n  \n## See also\n\n- [IMetaDataEmit Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)\n- [IMetaDataEmit2 Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)\n","nodes":[{"pos":[4,473],"embed":true,"restype":"x-metadata","content":"title: \"IMetaDataEmit::DefineTypeDef Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"IMetaDataEmit.DefineTypeDef\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IMetaDataEmit::DefineTypeDef\"\nhelpviewer_keywords: \n  - \"IMetaDataEmit::DefineTypeDef method [.NET Framework metadata]\"\n  - \"DefineTypeDef method [.NET Framework metadata]\"\nms.assetid: dd11c485-be95-4b97-9cd8-68679a4fb432\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"IMetaDataEmit::DefineTypeDef Method","nodes":[{"pos":[0,35],"content":"IMetaDataEmit::DefineTypeDef Method","nodes":[{"content":"IMetaDataEmit::DefineTypeDef Method","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[480,515],"content":"IMetaDataEmit::DefineTypeDef Method","linkify":"IMetaDataEmit::DefineTypeDef Method","nodes":[{"content":"IMetaDataEmit::DefineTypeDef Method","pos":[0,35]}]},{"content":"Creates a type definition for a common language runtime type, and gets a metadata token for that type definition.","pos":[516,629]},{"pos":[638,644],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[884,894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The name of the type in Unicode.","pos":[913,950]},{"content":"[in] <ph id=\"ph1\">`TypeDef`</ph> attributes.","pos":[977,1003],"source":"[in] `TypeDef` attributes."},{"content":"This is a bitmask of <ph id=\"ph1\">`CoreTypeAttr`</ph> values.","pos":[1004,1047],"source":" This is a bitmask of `CoreTypeAttr` values."},{"content":"[in] The token of the base class.","pos":[1069,1102]},{"content":"It must be either an <ph id=\"ph1\">`mdTypeDef`</ph> or an <ph id=\"ph2\">`mdTypeRef`</ph> token.","pos":[1103,1160],"source":" It must be either an `mdTypeDef` or an `mdTypeRef` token."},{"content":"[in] An array of tokens specifying the interfaces that this class or interface implements.","pos":[1186,1276]},{"content":"[out] The <ph id=\"ph1\">`mdTypeDef`</ph> token assigned.","pos":[1292,1329],"source":"[out] The `mdTypeDef` token assigned."},{"pos":[1338,1345],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1349,1512],"content":"A flag in <ph id=\"ph1\">`dwTypeDefFlags`</ph> specifies whether the type being created is a common type system reference type (class or interface) or a common type system value type.","source":"A flag in `dwTypeDefFlags` specifies whether the type being created is a common type system reference type (class or interface) or a common type system value type."},{"content":"Depending on the parameters supplied, this method, as a side effect, may also create an <ph id=\"ph1\">`mdInterfaceImpl`</ph> record for each interface that is inherited or implemented by this type.","pos":[1519,1697],"source":"Depending on the parameters supplied, this method, as a side effect, may also create an `mdInterfaceImpl` record for each interface that is inherited or implemented by this type."},{"content":"However, this method does not return any of these <ph id=\"ph1\">`mdInterfaceImpl`</ph> tokens.","pos":[1698,1773],"source":" However, this method does not return any of these `mdInterfaceImpl` tokens."},{"content":"If a client wants to later add or modify an <ph id=\"ph1\">`mdInterfaceImpl`</ph> token, it must use the <ph id=\"ph2\">`IMetaDataImport`</ph> interface to enumerate them.","pos":[1774,1905],"source":" If a client wants to later add or modify an `mdInterfaceImpl` token, it must use the `IMetaDataImport` interface to enumerate them."},{"content":"If you want to use COM semantics of the <ph id=\"ph1\">`[default]`</ph> interface, you should supply the default interface as the first element in <ph id=\"ph2\">`rtkImplements`</ph>; a custom attribute set on the class will indicate that the class has a default interface (which is always assumed to be the first <ph id=\"ph3\">`mdInterfaceImpl`</ph> token declared for the class).","pos":[1906,2228],"source":" If you want to use COM semantics of the `[default]` interface, you should supply the default interface as the first element in `rtkImplements`; a custom attribute set on the class will indicate that the class has a default interface (which is always assumed to be the first `mdInterfaceImpl` token declared for the class)."},{"content":"Each element of the <ph id=\"ph1\">`rtkImplements`</ph> array holds an <ph id=\"ph2\">`mdTypeDef`</ph> or <ph id=\"ph3\">`mdTypeRef`</ph> token.","pos":[2235,2319],"source":"Each element of the `rtkImplements` array holds an `mdTypeDef` or `mdTypeRef` token."},{"content":"The last element in the array must be <ph id=\"ph1\">`mdTokenNil`</ph>.","pos":[2320,2371],"source":" The last element in the array must be `mdTokenNil`."},{"pos":[2380,2392],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2396,2500],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2507,2524],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> Cor.h","source":"**Header:** Cor.h"},{"pos":[2531,2577],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Used as a resource in MSCorEE.dll","source":"**Library:** Used as a resource in MSCorEE.dll"},{"pos":[2584,2692],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]"},{"pos":[2701,2709],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2713,2816],"content":"<bpt id=\"p1\">[</bpt>IMetaDataEmit Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)</ept>","source":"[IMetaDataEmit Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)"},{"pos":[2819,2924],"content":"<bpt id=\"p1\">[</bpt>IMetaDataEmit2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)</ept>","source":"[IMetaDataEmit2 Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)"}]}