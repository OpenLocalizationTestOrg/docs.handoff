<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="application-settings-architecture.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ab1516a4bf44ca86e8b0034e367d51787b66771</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\advanced\application-settings-architecture.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8164f289d69b1a422e6f4df79c14166748c2816</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea65909392a03566fd60c65f5a50cacca9c17139</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Application Settings Architecture | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Application Settings Architecture</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how the Application Settings architecture works, and explores advanced features of the architecture, such as grouped settings and settings keys.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The application settings architecture supports defining strongly typed settings with either application or user scope, and persisting the settings between application sessions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The architecture provides a default persistence engine for saving settings to and loading them from the local file system.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The architecture also defines interfaces for supplying a custom persistence engine.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Interfaces are provided that enable custom components to persist their own settings when they are hosted in an application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By using settings keys, components can keep settings for multiple instances of the component separate.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Defining Settings</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The application settings architecture is used within both <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> and Windows Forms, and it contains a number of base classes that are shared across both environments.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The most important is <ph id="ph1">&lt;xref:System.Configuration.SettingsBase&gt;</ph>, which provides access to settings through a collection, and provides low-level methods for loading and saving settings.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each environment implements its own class derived from <ph id="ph1">&lt;xref:System.Configuration.SettingsBase&gt;</ph> to provide additional settings functionality for that environment.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In a Windows Forms-based application, all application settings must be defined on a class derived from the <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class, which adds the following functionality to the base class:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Higher-level loading and saving operations</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Support for user-scoped settings</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Reverting a user's settings to the predefined defaults</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Upgrading settings from a previous application version</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Validating settings, either before they are changed or before they are saved</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The settings can be described using a number of attributes defined within the <ph id="ph1">&lt;xref:System.Configuration&gt;</ph> namespace; these are described in <bpt id="p1">[</bpt>Application Settings Attributes<ept id="p1">](../../../../docs/framework/winforms/advanced/application-settings-attributes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you define a setting, you must apply it with either <ph id="ph1">&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</ph> or <ph id="ph2">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph>, which describes whether the setting applies to the entire application or just to the current user.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following code example defines a custom settings class with a single setting, <ph id="ph1">`BackgroundColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ApplicationSettings.Create#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/ApplicationSettings.Create/CS/MyAppSettings.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>ApplicationSettings.Create#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/ApplicationSettings.Create/VB/MyAppSettings.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Settings Persistence</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class does not itself persist or load settings; this job falls to the settings provider, a class that derives from <ph id="ph2">&lt;xref:System.Configuration.SettingsProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a derived class of <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> does not specify a settings provider through the <ph id="ph2">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>, then the default provider, <ph id="ph3">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph>, is used.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The configuration system that was originally released with the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> supports providing static application configuration data through either the local computer's machine.config file or within an <ph id="ph2">`app.`</ph>exe.config file that you deploy with your application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph> class expands this native support in the following ways:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Application-scoped settings can be stored in either the machine.config or <ph id="ph1">`app.`</ph>exe.config files.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Machine.config is always read-only, while <ph id="ph1">`app`</ph>.exe.config is restricted by security considerations to read-only for most applications.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>User-scoped settings can be stored in <ph id="ph1">`app`</ph>.exe.config files, in which case they are treated as static defaults.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Non-default user-scoped settings are stored in a new file, <bpt id="p1">*</bpt>user<ept id="p1">*</ept>.config, where <bpt id="p2">*</bpt>user<ept id="p2">*</ept> is the user name of the person currently executing the application.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can specify a default for a user-scoped setting with <ph id="ph1">&lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Because user-scoped settings often change during application execution, <ph id="ph1">`user`</ph>.config is always read/write.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>All three configuration files store settings in XML format.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The top-level XML element for application-scoped settings is <ph id="ph1">`&lt;appSettings&gt;`</ph>, while <ph id="ph2">`&lt;userSettings&gt;`</ph> is used for user-scoped settings.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`app`</ph>.exe.config file which contains both application-scoped settings and defaults for user-scoped settings would look like this:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For a definition of the elements within the application settings section of a configuration file, see <bpt id="p1">[</bpt>Application Settings Schema<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/application-settings-schema.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Settings Bindings</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Application settings uses the Windows Forms data binding architecture to provide two-way communication of settings updates between the settings object and components.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you use Visual Studio to create application settings and assign them to component properties, these bindings are generated automatically.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can only bind an application setting to a component that supports the <ph id="ph1">&lt;xref:System.Windows.Forms.IBindableComponent&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Also, the component must implement a change event for a specific bound property, or notify application settings that the property has changed through the <ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the component does not implement <ph id="ph1">&lt;xref:System.Windows.Forms.IBindableComponent&gt;</ph> and you are binding through Visual Studio, the bound properties will be set the first time, but will not update.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the component implements <ph id="ph1">&lt;xref:System.Windows.Forms.IBindableComponent&gt;</ph> but does not support property change notifications, the binding will not update in the settings file when the property is changed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Some Windows Forms components, such as <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripItem&gt;</ph>, do not support settings bindings.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Settings Serialization</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph> must save settings to disk, it performs the following actions:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Uses reflection to examine all of the properties defined on your <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> derived class, finding those that are applied with either <ph id="ph2">&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</ph> or <ph id="ph3">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Serializes the property to disk.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It first attempts to call the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.ConvertToString%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFromString%2A&gt;</ph> on the type's associated <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If this does not succeed, it uses XML serialization instead.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Determines which settings go in which files, based on the setting's attribute.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you implement your own settings class, you can use the <ph id="ph1">&lt;xref:System.Configuration.SettingsSerializeAsAttribute&gt;</ph> to mark a setting for either binary or custom serialization using the <ph id="ph2">&lt;xref:System.Configuration.SettingsSerializeAs&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information on creating your own settings class in code, see <bpt id="p1">[</bpt>How to: Create Application Settings<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-create-application-settings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Settings File Locations</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The location of the <ph id="ph1">`app`</ph>.exe.config and <bpt id="p1">*</bpt>user<ept id="p1">*</ept>.config files will differ based on how the application is installed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For a Windows Forms-based application copied onto the local computer, <ph id="ph1">`app`</ph>.exe.config will reside in the same directory as the base directory of the application's main executable file, and <bpt id="p1">*</bpt>user<ept id="p1">*</ept>.config will reside in the location specified by the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For an application installed by means of <ph id="ph1">[!INCLUDE[ndptecclick](../../../../includes/ndptecclick-md.md)]</ph>, both of these files will reside in the <ph id="ph2">[!INCLUDE[ndptecclick](../../../../includes/ndptecclick-md.md)]</ph> Data Directory underneath %InstallRoot%\Documents and Settings<ph id="ph3">\\</ph><bpt id="p1">*</bpt>username<ept id="p1">*</ept>\Local Settings.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The storage location of these files is slightly different if a user has enabled roaming profiles, which enables a user to define different Windows and application settings when he or she is using other computers within a domain.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In that case, both <ph id="ph1">[!INCLUDE[ndptecclick](../../../../includes/ndptecclick-md.md)]</ph> applications and non-<ph id="ph2">[!INCLUDE[ndptecclick](../../../../includes/ndptecclick-md.md)]</ph> applications will have their <ph id="ph3">`app`</ph>.exe.config and <bpt id="p1">*</bpt>user<ept id="p1">*</ept>.config files stored under %InstallRoot%\Documents and Settings<ph id="ph4">\\</ph><bpt id="p2">*</bpt>username<ept id="p2">*</ept>\Application Data.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information about how the Application Settings feature works with the new deployment technology, see <bpt id="p1">[</bpt>ClickOnce and Application Settings<ept id="p1">](/visualstudio/deployment/clickonce-and-application-settings)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">[!INCLUDE[ndptecclick](../../../../includes/ndptecclick-md.md)]</ph> Data Directory, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Application Settings and Security</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Application settings are designed to work in partial trust, a restricted environment that is the default for Windows Forms applications hosted over the Internet or an intranet.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>No special permissions beyond partial trust are needed to use application settings with the default settings provider.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When application settings are used in a <ph id="ph1">[!INCLUDE[ndptecclick](../../../../includes/ndptecclick-md.md)]</ph> application, the <ph id="ph2">`user`</ph>.config file is stored in the <ph id="ph3">[!INCLUDE[ndptecclick](../../../../includes/ndptecclick-md.md)]</ph> data directory.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The size of the application's <ph id="ph1">`user`</ph>.config file cannot exceed the data directory quota set by <ph id="ph2">[!INCLUDE[ndptecclick](../../../../includes/ndptecclick-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ClickOnce and Application Settings<ept id="p1">](/visualstudio/deployment/clickonce-and-application-settings)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Custom Settings Providers</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the Application Settings architecture, there is a loose coupling between the applications settings wrapper class, derived from <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>, and the associated settings provider or providers, derived from <ph id="ph2">&lt;xref:System.Configuration.SettingsProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This association is defined only by the <ph id="ph1">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph> applied to the wrapper class or its individual properties.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If a settings provider is not explicitly specified, the default provider, <ph id="ph1">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph>, is used.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>As a result, this architecture supports creating and using custom settings providers.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, suppose that you want to develop and use <ph id="ph1">`SqlSettingsProvider`</ph>, a provider that will store all settings data in a Microsoft SQL Server database.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">&lt;xref:System.Configuration.SettingsProvider&gt;</ph>-derived class would receive this information in its <ph id="ph2">`Initialize`</ph> method as a parameter of type <ph id="ph3">&lt;xref:System.Collections.Specialized.NameValueCollection?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You would then implement the <ph id="ph1">&lt;xref:System.Configuration.SettingsProvider.GetPropertyValues%2A&gt;</ph> method to retrieve your settings from the data store, and <ph id="ph2">&lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;</ph> to save them.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Your provider can use the <ph id="ph1">&lt;xref:System.Configuration.SettingsPropertyCollection&gt;</ph> supplied to <ph id="ph2">&lt;xref:System.Configuration.SettingsProvider.GetPropertyValues%2A&gt;</ph> to determine the property's name, type, and scope, as well as any other settings attributes defined for that property.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Your provider will need to implement one property and one method whose implementations may not be obvious.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.SettingsProvider.ApplicationName%2A&gt;</ph> property is an abstract property of <ph id="ph2">&lt;xref:System.Configuration.SettingsProvider&gt;</ph>; you should program it to return the following:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ApplicationSettings.Architecture#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/ApplicationSettings.Architecture/CS/DummyClass.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>ApplicationSettings.Architecture#2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/ApplicationSettings.Architecture/VB/DummyProviderClass.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Your derived class must also implement an <ph id="ph1">`Initialize`</ph> method that takes no arguments and returns no value.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This method is not defined by <ph id="ph1">&lt;xref:System.Configuration.SettingsProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Finally, you implement <ph id="ph1">&lt;xref:System.Configuration.IApplicationSettingsProvider&gt;</ph> on your provider to provide support for refreshing settings, reverting settings to their defaults, and upgrading settings from one application version to another.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Once you have implemented and compiled your provider, you need to instruct your settings class to use this provider instead of the default.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You accomplish this through the <ph id="ph1">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If applied to an entire settings class, the provider is used for each setting that the class defines; if applied to individual settings, Application Settings architecture uses that provider for those settings only, and uses <ph id="ph1">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph> for the rest.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following code example shows how to instruct the settings class to use your custom provider.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ApplicationSettings.Architecture#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/ApplicationSettings.Architecture/CS/DummyClass.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>ApplicationSettings.Architecture#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/ApplicationSettings.Architecture/VB/DummyProviderClass.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A provider may be called from multiple threads simultaneously, but it will always write to the same storage location; therefore, the Application Settings architecture will only ever instantiate a single instance of your provider class.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You should ensure that your provider is thread-safe, and only allows one thread at a time to write to the configuration files.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Your provider does not need to support all of the settings attributes defined in the <ph id="ph1">&lt;xref:System.Configuration?displayProperty=fullName&gt;</ph> namespace, though it must at a minimum support <ph id="ph2">&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph>, and should also support <ph id="ph4">&lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For those attributes that it does not support, your provider should just fail without notification; it should not throw an exception.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If the settings class uses an invalid combination of attributes, however — such as applying <ph id="ph1">&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph> to the same setting — your provider should throw an exception and cease operation.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Configuration.SettingsProvider&gt;</ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Settings Overview<ept id="p1">](../../../../docs/framework/winforms/advanced/application-settings-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Settings for Custom Controls<ept id="p1">](../../../../docs/framework/winforms/advanced/application-settings-for-custom-controls.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ClickOnce and Application Settings<ept id="p1">](/visualstudio/deployment/clickonce-and-application-settings)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Settings Schema<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/application-settings-schema.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>