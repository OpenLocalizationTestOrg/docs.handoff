{"content":"---\ntitle: \"AttributeUsage (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 48757216-c21d-4051-86d5-8a3e03c39d2c\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# AttributeUsage (Visual Basic)\nDetermines how a custom attribute class can be used. `AttributeUsage` is an attribute that can be applied to custom attribute definitions to control how the new attribute can be applied. The default settings look like this when applied explicitly:  \n  \n```vb  \n<System.AttributeUsage(System.AttributeTargets.All,   \n                   AllowMultiple:=False,   \n                   Inherited:=True)>   \nClass NewAttribute  \n    Inherits System.Attribute  \nEnd Class  \n```  \n  \n In this example, the `NewAttribute` class can be applied to any attribute-able code entity, but can be applied only once to each entity. It is inherited by derived classes when applied to a base class.  \n  \n The `AllowMultiple` and `Inherited` arguments are optional, so this code has the same effect:  \n  \n```vb  \n<System.AttributeUsage(System.AttributeTargets.All)>   \nClass NewAttribute  \n    Inherits System.Attribute  \nEnd Class  \n```  \n  \n The first `AttributeUsage` argument must be one or more elements of the <xref:System.AttributeTargets> enumeration. Multiple target types can be linked together with the OR operator, like this:  \n  \n```vb  \nImports System  \n```  \n  \n```vb  \n<AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>   \nClass NewPropertyOrFieldAttribute  \n    Inherits Attribute  \nEnd Class  \n```  \n  \n If the `AllowMultiple` argument is set to `true`, then the resulting attribute can be applied more than once to a single entity, like this:  \n  \n```vb  \nImports System  \n```  \n  \n```vb  \n<AttributeUsage(AttributeTargets.Class, AllowMultiple:=True)>   \nClass MultiUseAttr  \n    Inherits Attribute  \nEnd Class  \n  \n<MultiUseAttr(), MultiUseAttr()>   \nClass Class1  \nEnd Class  \n```  \n  \n In this case `MultiUseAttr` can be applied repeatedly because `AllowMultiple` is set to `true`. Both formats shown for applying multiple attributes are valid.  \n  \n If `Inherited` is set to `false`, then the attribute is not inherited by classes that are derived from a class that is attributed. For example:  \n  \n```vb  \nImports System  \n```  \n  \n```vb  \n<AttributeUsage(AttributeTargets.Class, Inherited:=False)>   \nClass Attr1  \n    Inherits Attribute  \nEnd Class  \n  \n<Attr1()>   \nClass BClass  \n  \nEnd Class    \n  \nClass DClass  \n    Inherits BClass  \nEnd Class  \n```  \n  \n In this case `Attr1` is not applied to `DClass` via inheritance.  \n  \n## Remarks  \n The `AttributeUsage` attribute is a single-use attribute--it cannot be applied more than once to the same class. `AttributeUsage` is an alias for <xref:System.AttributeUsageAttribute>.  \n  \n For more information, see [Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md).  \n  \n## Example  \n The following example demonstrates the effect of the `Inherited` and `AllowMultiple` arguments to the `AttributeUsage` attribute, and how the custom attributes applied to a class can be enumerated.  \n  \n```vb  \nImports System  \n```  \n  \n```vb  \n' Create some custom attributes:  \n<AttributeUsage(System.AttributeTargets.Class, Inherited:=False)>   \nClass A1  \n    Inherits System.Attribute  \nEnd Class  \n  \n<AttributeUsage(System.AttributeTargets.Class)>   \nClass A2  \n    Inherits System.Attribute  \nEnd Class      \n  \n<AttributeUsage(System.AttributeTargets.Class, AllowMultiple:=True)>   \nClass A3  \n    Inherits System.Attribute  \nEnd Class  \n  \n' Apply custom attributes to classes:  \n<A1(), A2()>   \nClass BaseClass  \n  \nEnd Class  \n  \n<A3(), A3()>   \nClass DerivedClass  \n    Inherits BaseClass  \nEnd Class  \n  \nPublic Class TestAttributeUsage  \n    Sub Main()  \n        Dim b As New BaseClass  \n        Dim d As New DerivedClass  \n        ' Display custom attributes for each class.  \n        Console.WriteLine(\"Attributes on Base Class:\")  \n        Dim attrs() As Object = b.GetType().GetCustomAttributes(True)  \n  \n        For Each attr In attrs  \n            Console.WriteLine(attr)  \n        Next  \n  \n        Console.WriteLine(\"Attributes on Derived Class:\")  \n        attrs = d.GetType().GetCustomAttributes(True)  \n        For Each attr In attrs  \n            Console.WriteLine(attr)  \n        Next              \n    End Sub  \nEnd Class  \n```  \n  \n## Sample Output  \n  \n```  \nAttributes on Base Class:  \nA1  \nA2  \nAttributes on Derived Class:  \nA3  \nA3  \nA2  \n```  \n  \n## See Also  \n <xref:System.Attribute>   \n <xref:System.Reflection>   \n [Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md)   \n [Attributes](https://msdn.microsoft.com/library/5x6cd29c)   \n [Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md)   \n [Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md)   \n [Creating Custom Attributes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)   \n [Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)","nodes":[{"pos":[4,432],"embed":true,"restype":"x-metadata","content":"title: \"AttributeUsage (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 48757216-c21d-4051-86d5-8a3e03c39d2c\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"AttributeUsage (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"AttributeUsage (Visual Basic) | Microsoft Docs","nodes":[{"content":"AttributeUsage (Visual Basic) | Microsoft Docs","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[439,468],"content":"AttributeUsage (Visual Basic)","linkify":"AttributeUsage (Visual Basic)","nodes":[{"content":"AttributeUsage (Visual Basic)","pos":[0,29]}]},{"content":"Determines how a custom attribute class can be used.","pos":[469,521]},{"content":"<ph id=\"ph1\">`AttributeUsage`</ph> is an attribute that can be applied to custom attribute definitions to control how the new attribute can be applied.","pos":[522,655],"source":"`AttributeUsage` is an attribute that can be applied to custom attribute definitions to control how the new attribute can be applied."},{"content":"The default settings look like this when applied explicitly:","pos":[656,716]},{"content":"In this example, the <ph id=\"ph1\">`NewAttribute`</ph> class can be applied to any attribute-able code entity, but can be applied only once to each entity.","pos":[944,1080],"source":"In this example, the `NewAttribute` class can be applied to any attribute-able code entity, but can be applied only once to each entity."},{"content":"It is inherited by derived classes when applied to a base class.","pos":[1081,1145]},{"pos":[1152,1245],"content":"The <ph id=\"ph1\">`AllowMultiple`</ph> and <ph id=\"ph2\">`Inherited`</ph> arguments are optional, so this code has the same effect:","source":"The `AllowMultiple` and `Inherited` arguments are optional, so this code has the same effect:"},{"content":"The first <ph id=\"ph1\">`AttributeUsage`</ph> argument must be one or more elements of the <ph id=\"ph2\">&lt;xref:System.AttributeTargets&gt;</ph> enumeration.","pos":[1390,1505],"source":"The first `AttributeUsage` argument must be one or more elements of the <xref:System.AttributeTargets> enumeration."},{"content":"Multiple target types can be linked together with the OR operator, like this:","pos":[1506,1583]},{"pos":[1787,1926],"content":"If the <ph id=\"ph1\">`AllowMultiple`</ph> argument is set to <ph id=\"ph2\">`true`</ph>, then the resulting attribute can be applied more than once to a single entity, like this:","source":"If the `AllowMultiple` argument is set to `true`, then the resulting attribute can be applied more than once to a single entity, like this:"},{"content":"In this case <ph id=\"ph1\">`MultiUseAttr`</ph> can be applied repeatedly because <ph id=\"ph2\">`AllowMultiple`</ph> is set to <ph id=\"ph3\">`true`</ph>.","pos":[2173,2268],"source":"In this case `MultiUseAttr` can be applied repeatedly because `AllowMultiple` is set to `true`."},{"content":"Both formats shown for applying multiple attributes are valid.","pos":[2269,2331]},{"content":"If <ph id=\"ph1\">`Inherited`</ph> is set to <ph id=\"ph2\">`false`</ph>, then the attribute is not inherited by classes that are derived from a class that is attributed.","pos":[2338,2468],"source":"If `Inherited` is set to `false`, then the attribute is not inherited by classes that are derived from a class that is attributed."},{"content":"For example:","pos":[2469,2481]},{"pos":[2752,2816],"content":"In this case <ph id=\"ph1\">`Attr1`</ph> is not applied to <ph id=\"ph2\">`DClass`</ph> via inheritance.","source":"In this case `Attr1` is not applied to `DClass` via inheritance."},{"pos":[2825,2832],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`AttributeUsage`</ph> attribute is a single-use attribute--it cannot be applied more than once to the same class.","pos":[2836,2948],"source":"The `AttributeUsage` attribute is a single-use attribute--it cannot be applied more than once to the same class."},{"content":"<ph id=\"ph1\">`AttributeUsage`</ph> is an alias for <ph id=\"ph2\">&lt;xref:System.AttributeUsageAttribute&gt;</ph>.","pos":[2949,3020],"source":"`AttributeUsage` is an alias for <xref:System.AttributeUsageAttribute>."},{"pos":[3027,3219],"content":"For more information, see <bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>.","source":"For more information, see [Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)."},{"pos":[3228,3235],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3239,3436],"content":"The following example demonstrates the effect of the <ph id=\"ph1\">`Inherited`</ph> and <ph id=\"ph2\">`AllowMultiple`</ph> arguments to the <ph id=\"ph3\">`AttributeUsage`</ph> attribute, and how the custom attributes applied to a class can be enumerated.","source":"The following example demonstrates the effect of the `Inherited` and `AllowMultiple` arguments to the `AttributeUsage` attribute, and how the custom attributes applied to a class can be enumerated."},{"pos":[4705,4718],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[4826,4834],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../../../visual-basic/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4895,4981],"source":"[Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](https://msdn.microsoft.com/library/5x6cd29c)</ept><ph id=\"ph1\"> </ph>","pos":[4985,5043],"source":"[Attributes](https://msdn.microsoft.com/library/5x6cd29c) "},{"content":"<bpt id=\"p1\">[</bpt>Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/reflection.md)</ept><ph id=\"ph1\"> </ph>","pos":[5047,5142],"source":"[Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/language-reference/attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[5146,5233],"source":"[Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating Custom Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[5237,5375],"source":"[Creating Custom Attributes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>","pos":[5379,5544],"source":"[Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)"}]}