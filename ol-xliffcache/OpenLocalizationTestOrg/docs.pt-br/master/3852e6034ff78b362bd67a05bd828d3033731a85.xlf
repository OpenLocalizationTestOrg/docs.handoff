<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="privacy-and-data-security.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3852e6034ff78b362bd67a05bd828d3033731a85</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\privacy-and-data-security.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c88940a02a8f6770b9e84f46e4288189b08ddd0e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d300c59239ef7922ed887a4894a003db3be376a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Privacy and Data Security</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Privacy and Data Security</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Safeguarding and managing sensitive information in an ADO.NET application is dependent upon the underlying products and technologies used to create it.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ADO.NET does not directly provide services for securing or encrypting data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Cryptography and Hash Codes</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The classes in the .NET Framework <ph id="ph1">&lt;xref:System.Security.Cryptography&gt;</ph> namespace can be used from your ADO.NET applications to prevent data from being read or modified by unauthorized third parties.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Some classes are wrappers for the unmanaged Microsoft CryptoAPI, while others are managed implementations.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](../../../../docs/standard/security/cryptographic-services.md)</ept> topic provides an overview of cryptography in the .NET Framework, describes how cryptograph is implemented, and how you can perform specific cryptographic tasks.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Unlike cryptography, which allows data to be encrypted and then decrypted, hashing data is a one-way process.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Hashing data is useful when you want to prevent tampering by checking that data has not been altered: given identical input strings, hashing algorithms always produce identical short output values that can easily be compared.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Ensuring Data Integrity with Hash Codes<ept id="p1">](../../../../docs/standard/security/ensuring-data-integrity-with-hash-codes.md)</ept> describes how you can generate and verify hash values.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Encrypting Configuration Files</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Protecting access to your data source is one of the most important goals when securing an application.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A connection string presents a potential vulnerability if it is not secured.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Connection strings saved in configuration files are stored in standard XML files for which the .NET Framework has defined a common set of elements.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Protected configuration enables you to encrypt sensitive information in a configuration file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Although primarily designed for ASP.NET applications, protected configuration can also be used to encrypt configuration file sections in Windows applications.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Protecting Connection Information<ept id="p1">](../../../../docs/framework/data/adonet/protecting-connection-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Securing String Values in Memory</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">&lt;xref:System.String&gt;</ph> object contains sensitive information, such as a password, credit card number, or personal data, there is a risk that the information could be revealed after it is used because the application cannot delete the data from computer memory.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.String&gt;</ph> is immutable; its value cannot be modified once it has been created.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Changes that appear to modify the string value actually create a new instance of a <ph id="ph1">&lt;xref:System.String&gt;</ph> object in memory, storing the data as plain text.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In addition, it is not possible to predict when the string instances will be deleted from memory.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Memory reclamation with strings is not deterministic with .NET garbage collection.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You should avoid using the <ph id="ph1">&lt;xref:System.String&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> classes if your data is truly sensitive.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class provides methods for encrypting text using the Data Protection API (DPAPI) in memory.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The string is then deleted from memory when it is no longer needed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There is no <ph id="ph1">`ToString`</ph> method to quickly read the contents of a <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can initialize a new instance of <ph id="ph1">`SecureString`</ph> with no value or by passing it a pointer to an array of <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can then use the various methods of the class to work with the string.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, download the <bpt id="p1">[</bpt>SecureString Sample Application<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=120418)</ept>, which demonstrates how to use the <ph id="ph1">`SecureString`</ph> class from.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Securing ADO.NET Applications<ept id="p1">](../../../../docs/framework/data/adonet/securing-ado-net-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Server Security<ept id="p1">](../../../../docs/framework/data/adonet/sql/sql-server-security.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>