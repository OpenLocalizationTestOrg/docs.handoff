<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="operator-statement.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">184970d33aae4af135153f9d6f6755770bdf84f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\operator-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2191d72877d46142297c487ce55f274f1c76b59</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da8a4fb238d32602d728bf62d02a8d1aec1e65b1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Operator Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Operator Statement</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares the operator symbol, operands, and code that define an operator procedure on a class or structure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Attribute List<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Indicates that this operator procedure has <bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept> access.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Overloads<ept id="p1">](../../../visual-basic/language-reference/modifiers/overloads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Indicates that this operator procedure is a <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept> procedure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Required for a conversion operator unless you specify <ph id="ph1">`Narrowing`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Indicates that this operator procedure defines a <bpt id="p1">[</bpt>Widening<ept id="p1">](../../../visual-basic/language-reference/modifiers/widening.md)</ept> conversion.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See "Widening and Narrowing Conversions" on this Help page.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Required for a conversion operator unless you specify <ph id="ph1">`Widening`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Indicates that this operator procedure defines a <bpt id="p1">[</bpt>Narrowing<ept id="p1">](../../../visual-basic/language-reference/modifiers/narrowing.md)</ept> conversion.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See "Widening and Narrowing Conversions" on this Help page.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The symbol or identifier of the operator that this operator procedure defines.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The name and type of the single operand of a unary operator (including a conversion operator) or the left operand of a binary operator.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Required for binary operators.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The name and type of the right operand of a binary operator.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`operand1`</ph> and <ph id="ph2">`operand2`</ph> have the following syntax and parts:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Part</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Optional, but the passing mechanism must be <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../visual-basic/language-reference/modifiers/byval.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Name of the variable representing this operand.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Optional unless <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`On`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Data type of this operand.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Optional unless <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`On`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Data type of the value the operator procedure returns.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Block of statements that the operator procedure runs.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The value that the operator procedure returns to the calling code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`End`</ph> <ph id="ph2">`Operator`</ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Terminates the definition of this operator procedure.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Operator`</ph> only in a class or structure.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This means the <bpt id="p1">*</bpt>declaration context<ept id="p1">*</ept> for an operator cannot be a source file, namespace, module, interface, procedure, or block.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All operators must be <ph id="ph1">`Public Shared`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You cannot specify <ph id="ph1">`ByRef`</ph>, <ph id="ph2">`Optional`</ph>, or <ph id="ph3">`ParamArray`</ph> for either operand.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You cannot use the operator symbol or identifier to hold a return value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You must use the <ph id="ph1">`Return`</ph> statement, and it must specify a value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Any number of <ph id="ph1">`Return`</ph> statements can appear anywhere in the procedure.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Defining an operator in this way is called <bpt id="p1">*</bpt>operator overloading<ept id="p1">*</ept>, whether or not you use the <ph id="ph1">`Overloads`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following table lists the operators you can define.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Unary</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`IsFalse`</ph>, <ph id="ph4">`IsTrue`</ph>, <ph id="ph5">`Not`</ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Binary</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`*`</ph>, <ph id="ph4">`/`</ph>, <ph id="ph5">`\`</ph>, <ph id="ph6">`&amp;`</ph>, <ph id="ph7">`^`</ph>, <ph id="ph8">`&gt;&gt;`</ph>, <ph id="ph9">`&lt;&lt;`</ph>, <ph id="ph10">`=`</ph>, <ph id="ph11">`&lt;&gt;`</ph>, <ph id="ph12">`&gt;`</ph>, <ph id="ph13">`&gt;=`</ph>, <ph id="ph14">`&lt;`</ph>, <ph id="ph15">`&lt;=`</ph>, <ph id="ph16">`And`</ph>, <ph id="ph17">`Like`</ph>, <ph id="ph18">`Mod`</ph>, <ph id="ph19">`Or`</ph>, <ph id="ph20">`Xor`</ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Conversion (unary)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`=`</ph> operator in the binary list is the comparison operator, not the assignment operator.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When you define <ph id="ph1">`CType`</ph>, you must specify either <ph id="ph2">`Widening`</ph> or <ph id="ph3">`Narrowing`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Matched Pairs</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You must define certain operators as matched pairs.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you define either operator of such a pair, you must define the other as well.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The matched pairs are the following:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`=`</ph> and <ph id="ph2">`&lt;&gt;`</ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;`</ph> and <ph id="ph2">`&lt;`</ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;=`</ph> and <ph id="ph2">`&lt;=`</ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsTrue`</ph> and <ph id="ph2">`IsFalse`</ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Data Type Restrictions</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Every operator you define must involve the class or structure on which you define it.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This means that the class or structure must appear as the data type of the following:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The operand of a unary operator.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>At least one of the operands of a binary operator.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Either the operand or the return type of a conversion operator.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Certain operators have additional data type restrictions, as follows:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you define the <ph id="ph1">`IsTrue`</ph> and <ph id="ph2">`IsFalse`</ph> operators, they must both return the <ph id="ph3">`Boolean`</ph> type.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you define the <ph id="ph1">`&lt;&lt;`</ph> and <ph id="ph2">`&gt;&gt;`</ph> operators, they must both specify the <ph id="ph3">`Integer`</ph> type for the <ph id="ph4">`operandtype`</ph> of <ph id="ph5">`operand2`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The return type does not have to correspond to the type of either operand.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, a comparison operator such as <ph id="ph1">`=`</ph> or <ph id="ph2">`&lt;&gt;`</ph> can return <ph id="ph3">`Boolean`</ph> even if neither operand is <ph id="ph4">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Logical and Bitwise Operators</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`And`</ph>, <ph id="ph2">`Or`</ph>, <ph id="ph3">`Not`</ph>, and <ph id="ph4">`Xor`</ph> operators can perform either logical or bitwise operations in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>However, if you define one of these operators on a class or structure, you can define only its bitwise operation.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You cannot define the <ph id="ph1">`AndAlso`</ph> operator directly with an <ph id="ph2">`Operator`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>However, you can use <ph id="ph1">`AndAlso`</ph> if you have fulfilled the following conditions:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You have defined <ph id="ph1">`And`</ph> on the same operand types you want to use for <ph id="ph2">`AndAlso`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Your definition of <ph id="ph1">`And`</ph> returns the same type as the class or structure on which you have defined it.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You have defined the <ph id="ph1">`IsFalse`</ph> operator on the class or structure on which you have defined <ph id="ph2">`And`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Similarly, you can use <ph id="ph1">`OrElse`</ph> if you have defined <ph id="ph2">`Or`</ph> on the same operands, with the return type of the class or structure, and you have defined <ph id="ph3">`IsTrue`</ph> on the class or structure.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Widening and Narrowing Conversions</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>widening conversion<ept id="p1">*</ept> always succeeds at run time, while a <bpt id="p2">*</bpt>narrowing conversion<ept id="p2">*</ept> can fail at run time.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If you declare a conversion procedure to be <ph id="ph1">`Widening`</ph>, your procedure code must not generate any failures.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This means the following:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It must always return a valid value of type <ph id="ph1">`type`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It must handle all possible exceptions and other error conditions.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>It must handle any error returns from any procedures it calls.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If there is any possibility that a conversion procedure might not succeed, or that it might cause an unhandled exception, you must declare it to be <ph id="ph1">`Narrowing`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Operator`</ph> statement to define the outline of a structure that includes operator procedures for the <ph id="ph2">`And`</ph>, <ph id="ph3">`Or`</ph>, <ph id="ph4">`IsFalse`</ph>, and <ph id="ph5">`IsTrue`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`And`</ph> and <ph id="ph2">`Or`</ph> each take two operands of type <ph id="ph3">`abc`</ph> and return type <ph id="ph4">`abc`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsFalse`</ph> and <ph id="ph2">`IsTrue`</ph> each take a single operand of type <ph id="ph3">`abc`</ph> and return <ph id="ph4">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>These definitions allow the calling code to use <ph id="ph1">`And`</ph>, <ph id="ph2">`AndAlso`</ph>, <ph id="ph3">`Or`</ph>, and <ph id="ph4">`OrElse`</ph> with operands of type <ph id="ph5">`abc`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IsFalse Operator<ept id="p1">](../../../visual-basic/language-reference/operators/isfalse-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IsTrue Operator<ept id="p1">](../../../visual-basic/language-reference/operators/istrue-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Widening<ept id="p1">](../../../visual-basic/language-reference/modifiers/widening.md)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Narrowing<ept id="p1">](../../../visual-basic/language-reference/modifiers/narrowing.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define an Operator<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define a Conversion Operator<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Call an Operator Procedure<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/how-to-call-an-operator-procedure.md)</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use a Class that Defines Operators<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/how-to-use-a-class-that-defines-operators.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>