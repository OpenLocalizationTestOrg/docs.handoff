{"content":"---\ntitle: \"Row States and Row Versions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2e6642c9-bfc6-425c-b3a7-e4912ffa6c1f\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Row States and Row Versions\nADO.NET manages rows in tables using row states and versions. A row state indicates the status of a row; row versions maintain the values stored in a row as it is modified, including current, original, and default values. For example, after you have made a modification to a column in a row, the row will have a row state of `Modified`, and two row versions: `Current`, which contains the current row values, and `Original`, which contains the row values before the column was modified.  \n  \n Each <xref:System.Data.DataRow> object has a <xref:System.Data.DataRow.RowState%2A> property that you can examine to determine the current state of the row. The following table gives a brief description of each `RowState` enumeration value.  \n  \n|RowState value|Description|  \n|--------------------|-----------------|  \n|<xref:System.Data.DataRowState>|No changes have been made since the last call to `AcceptChanges` or since the row was created by `DataAdapter.Fill`.|  \n|<xref:System.Data.DataRowState>|The row has been added to the table, but `AcceptChanges` has not been called.|  \n|<xref:System.Data.DataRowState>|Some element of the row has been changed.|  \n|<xref:System.Data.DataRowState>|The row has been deleted from a table, and `AcceptChanges` has not been called.|  \n|<xref:System.Data.DataRowState>|The row is not part of any `DataRowCollection`. The `RowState` of a newly created row is set to `Detached`. After the new `DataRow` is added to the `DataRowCollection` by calling the `Add` method, the value of the `RowState` property is set to `Added`.<br /><br /> `Detached` is also set for a row that has been removed from a `DataRowCollection` using the `Remove` method, or by the `Delete` method followed by the `AcceptChanges` method.|  \n  \n When `AcceptChanges` is called on a <xref:System.Data.DataSet>, <xref:System.Data.DataTable> , or <xref:System.Data.DataRow>, all rows with a row state of `Deleted` are removed. The remaining rows are given a row state of `Unchanged`, and the values in the `Original` row version are overwritten with the `Current` row version values. When `RejectChanges` is called, all rows with a row state of `Added` are removed. The remaining rows are given a row state of `Unchanged`, and the values in the `Current` row version are overwritten with the `Original` row version values.  \n  \n You can view the different row versions of a row by passing a <xref:System.Data.DataRowVersion> parameter with the column reference, as shown in the following example.  \n  \n```vb  \nDim custRow As DataRow = custTable.Rows(0)  \nDim custID As String = custRow(\"CustomerID\", DataRowVersion.Original).ToString()  \n  \n```  \n  \n```csharp  \nDataRow custRow = custTable.Rows[0];  \nstring custID = custRow[\"CustomerID\", DataRowVersion.Original].ToString();  \n```  \n  \n The following table gives a brief description of each `DataRowVersion` enumeration value.  \n  \n|DataRowVersion value|Description|  \n|--------------------------|-----------------|  \n|<xref:System.Data.DataRowVersion>|The current values for the row. This row version does not exist for rows with a `RowState` of `Deleted`.|  \n|<xref:System.Data.DataRowVersion>|The default row version for a particular row. The default row version for an `Added`, `Modified`, or `Unchanged` row is `Current`. The default row version for a `Deleted` row is `Original`. The default row version for a `Detached` row is `Proposed`.|  \n|<xref:System.Data.DataRowVersion>|The original values for the row. This row version does not exist for rows with a `RowState` of `Added`.|  \n|<xref:System.Data.DataRowVersion>|The proposed values for the row. This row version exists during an edit operation on a row, or for a row that is not part of a `DataRowCollection`.|  \n  \n You can test whether a `DataRow` has a particular row version by calling the <xref:System.Data.DataRow.HasVersion%2A> method and passing a `DataRowVersion` as an argument. For example, `DataRow.HasVersion(DataRowVersion.Original)` will return `false` for newly added rows before `AcceptChanges` has been called.  \n  \n The following code example displays the values in all the deleted rows of a table. `Deleted` rows do not have a `Current` row version, so you must pass `DataRowVersion.Original` when accessing the column values.  \n  \n```vb  \nDim catTable As DataTable = catDS.Tables(\"Categories\")  \n  \nDim delRows() As DataRow = catTable.Select(Nothing, Nothing, DataViewRowState.Deleted)  \n  \nConsole.WriteLine(\"Deleted rows:\" & vbCrLf)  \n  \nDim catCol As DataColumn  \nDim delRow As DataRow  \n  \nFor Each catCol In catTable.Columns  \n  Console.Write(catCol.ColumnName & vbTab)  \nNext  \nConsole.WriteLine()  \n  \nFor Each delRow In delRows  \n  For Each catCol In catTable.Columns  \n    Console.Write(delRow(catCol, DataRowVersion.Original) & vbTab)  \n  Next  \n  Console.WriteLine()  \nNext  \n  \n```  \n  \n```csharp  \nDataTable catTable = catDS.Tables[\"Categories\"];  \n  \nDataRow[] delRows = catTable.Select(null, null, DataViewRowState.Deleted);  \n  \nConsole.WriteLine(\"Deleted rows:\\n\");  \n  \nforeach (DataColumn catCol in catTable.Columns)  \n  Console.Write(catCol.ColumnName + \"\\t\");  \nConsole.WriteLine();  \n  \nforeach (DataRow delRow in delRows)  \n{  \n  foreach (DataColumn catCol in catTable.Columns)  \n    Console.Write(delRow[catCol, DataRowVersion.Original] + \"\\t\");  \n  Console.WriteLine();  \n}  \n```  \n  \n## See Also  \n [Manipulating Data in a DataTable](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/manipulating-data-in-a-datatable.md)   \n [DataSets, DataTables, and DataViews](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)   \n [DataAdapters and DataReaders](../../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[4,358],"nodes":[{"content":"Row States and Row Versions | Microsoft Docs","nodes":[{"pos":[0,44],"content":"Row States and Row Versions | Microsoft Docs","nodes":[{"content":"Row States and Row Versions | Microsoft Docs","pos":[0,44]}]}],"pos":[6,53],"yaml":true}],"content":"title: \"Row States and Row Versions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2e6642c9-bfc6-425c-b3a7-e4912ffa6c1f\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","yamlblock":true},{"pos":[365,392],"content":"Row States and Row Versions","linkify":"Row States and Row Versions","nodes":[{"content":"Row States and Row Versions","pos":[0,27]}]},{"content":"ADO.NET manages rows in tables using row states and versions.","pos":[393,454]},{"content":"A row state indicates the status of a row; row versions maintain the values stored in a row as it is modified, including current, original, and default values.","pos":[455,614]},{"content":"For example, after you have made a modification to a column in a row, the row will have a row state of <ph id=\"ph1\">`Modified`</ph>, and two row versions: <ph id=\"ph2\">`Current`</ph>, which contains the current row values, and <ph id=\"ph3\">`Original`</ph>, which contains the row values before the column was modified.","pos":[615,879],"source":" For example, after you have made a modification to a column in a row, the row will have a row state of `Modified`, and two row versions: `Current`, which contains the current row values, and `Original`, which contains the row values before the column was modified."},{"content":"Each <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> object has a <ph id=\"ph2\">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> property that you can examine to determine the current state of the row.","pos":[886,1042],"source":"Each <xref:System.Data.DataRow> object has a <xref:System.Data.DataRow.RowState%2A> property that you can examine to determine the current state of the row."},{"content":"The following table gives a brief description of each <ph id=\"ph1\">`RowState`</ph> enumeration value.","pos":[1043,1126],"source":" The following table gives a brief description of each `RowState` enumeration value."},{"content":"RowState value","pos":[1133,1147]},{"content":"Description","pos":[1148,1159]},{"pos":[1239,1355],"content":"No changes have been made since the last call to <ph id=\"ph1\">`AcceptChanges`</ph> or since the row was created by <ph id=\"ph2\">`DataAdapter.Fill`</ph>.","source":"No changes have been made since the last call to `AcceptChanges` or since the row was created by `DataAdapter.Fill`."},{"pos":[1392,1469],"content":"The row has been added to the table, but <ph id=\"ph1\">`AcceptChanges`</ph> has not been called.","source":"The row has been added to the table, but `AcceptChanges` has not been called."},{"content":"Some element of the row has been changed.","pos":[1506,1547]},{"pos":[1584,1663],"content":"The row has been deleted from a table, and <ph id=\"ph1\">`AcceptChanges`</ph> has not been called.","source":"The row has been deleted from a table, and `AcceptChanges` has not been called."},{"content":"The row is not part of any <ph id=\"ph1\">`DataRowCollection`</ph>.","pos":[1700,1747],"source":"The row is not part of any `DataRowCollection`."},{"content":"The <ph id=\"ph1\">`RowState`</ph> of a newly created row is set to <ph id=\"ph2\">`Detached`</ph>.","pos":[1748,1807],"source":" The `RowState` of a newly created row is set to `Detached`."},{"content":"After the new <ph id=\"ph1\">`DataRow`</ph> is added to the <ph id=\"ph2\">`DataRowCollection`</ph> by calling the <ph id=\"ph3\">`Add`</ph> method, the value of the <ph id=\"ph4\">`RowState`</ph> property is set to <ph id=\"ph5\">`Added`</ph>.","pos":[1808,1952],"source":" After the new `DataRow` is added to the `DataRowCollection` by calling the `Add` method, the value of the `RowState` property is set to `Added`."},{"content":"<ph id=\"ph1\">`Detached`</ph> is also set for a row that has been removed from a <ph id=\"ph2\">`DataRowCollection`</ph> using the <ph id=\"ph3\">`Remove`</ph> method, or by the <ph id=\"ph4\">`Delete`</ph> method followed by the <ph id=\"ph5\">`AcceptChanges`</ph> method.","pos":[1965,2139],"source":"`Detached` is also set for a row that has been removed from a `DataRowCollection` using the `Remove` method, or by the `Delete` method followed by the `AcceptChanges` method."},{"content":"When <ph id=\"ph1\">`AcceptChanges`</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Data.DataTable&gt;</ph> , or <ph id=\"ph4\">&lt;xref:System.Data.DataRow&gt;</ph>, all rows with a row state of <ph id=\"ph5\">`Deleted`</ph> are removed.","pos":[2147,2324],"source":"When `AcceptChanges` is called on a <xref:System.Data.DataSet>, <xref:System.Data.DataTable> , or <xref:System.Data.DataRow>, all rows with a row state of `Deleted` are removed."},{"content":"The remaining rows are given a row state of <ph id=\"ph1\">`Unchanged`</ph>, and the values in the <ph id=\"ph2\">`Original`</ph> row version are overwritten with the <ph id=\"ph3\">`Current`</ph> row version values.","pos":[2325,2481],"source":" The remaining rows are given a row state of `Unchanged`, and the values in the `Original` row version are overwritten with the `Current` row version values."},{"content":"When <ph id=\"ph1\">`RejectChanges`</ph> is called, all rows with a row state of <ph id=\"ph2\">`Added`</ph> are removed.","pos":[2482,2563],"source":" When `RejectChanges` is called, all rows with a row state of `Added` are removed."},{"content":"The remaining rows are given a row state of <ph id=\"ph1\">`Unchanged`</ph>, and the values in the <ph id=\"ph2\">`Current`</ph> row version are overwritten with the <ph id=\"ph3\">`Original`</ph> row version values.","pos":[2564,2720],"source":" The remaining rows are given a row state of `Unchanged`, and the values in the `Current` row version are overwritten with the `Original` row version values."},{"content":"You can view the different row versions of a row by passing a <ph id=\"ph1\">&lt;xref:System.Data.DataRowVersion&gt;</ph> parameter with the column reference, as shown in the following example.","pos":[2727,2894],"source":"You can view the different row versions of a row by passing a <xref:System.Data.DataRowVersion> parameter with the column reference, as shown in the following example."},{"pos":[3186,3275],"content":"The following table gives a brief description of each <ph id=\"ph1\">`DataRowVersion`</ph> enumeration value.","source":"The following table gives a brief description of each `DataRowVersion` enumeration value."},{"content":"DataRowVersion value","pos":[3282,3302]},{"content":"Description","pos":[3303,3314]},{"content":"The current values for the row.","pos":[3402,3433]},{"content":"This row version does not exist for rows with a <ph id=\"ph1\">`RowState`</ph> of <ph id=\"ph2\">`Deleted`</ph>.","pos":[3434,3506],"source":" This row version does not exist for rows with a `RowState` of `Deleted`."},{"content":"The default row version for a particular row.","pos":[3545,3590]},{"content":"The default row version for an <ph id=\"ph1\">`Added`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Unchanged`</ph> row is <ph id=\"ph4\">`Current`</ph>.","pos":[3591,3675],"source":" The default row version for an `Added`, `Modified`, or `Unchanged` row is `Current`."},{"content":"The default row version for a <ph id=\"ph1\">`Deleted`</ph> row is <ph id=\"ph2\">`Original`</ph>.","pos":[3676,3734],"source":" The default row version for a `Deleted` row is `Original`."},{"content":"The default row version for a <ph id=\"ph1\">`Detached`</ph> row is <ph id=\"ph2\">`Proposed`</ph>.","pos":[3735,3794],"source":" The default row version for a `Detached` row is `Proposed`."},{"content":"The original values for the row.","pos":[3833,3865]},{"content":"This row version does not exist for rows with a <ph id=\"ph1\">`RowState`</ph> of <ph id=\"ph2\">`Added`</ph>.","pos":[3866,3936],"source":" This row version does not exist for rows with a `RowState` of `Added`."},{"content":"The proposed values for the row.","pos":[3975,4007]},{"content":"This row version exists during an edit operation on a row, or for a row that is not part of a <ph id=\"ph1\">`DataRowCollection`</ph>.","pos":[4008,4122],"source":" This row version exists during an edit operation on a row, or for a row that is not part of a `DataRowCollection`."},{"content":"You can test whether a <ph id=\"ph1\">`DataRow`</ph> has a particular row version by calling the <ph id=\"ph2\">&lt;xref:System.Data.DataRow.HasVersion%2A&gt;</ph> method and passing a <ph id=\"ph3\">`DataRowVersion`</ph> as an argument.","pos":[4130,4301],"source":"You can test whether a `DataRow` has a particular row version by calling the <xref:System.Data.DataRow.HasVersion%2A> method and passing a `DataRowVersion` as an argument."},{"content":"For example, <ph id=\"ph1\">`DataRow.HasVersion(DataRowVersion.Original)`</ph> will return <ph id=\"ph2\">`false`</ph> for newly added rows before <ph id=\"ph3\">`AcceptChanges`</ph> has been called.","pos":[4302,4441],"source":" For example, `DataRow.HasVersion(DataRowVersion.Original)` will return `false` for newly added rows before `AcceptChanges` has been called."},{"content":"The following code example displays the values in all the deleted rows of a table.","pos":[4448,4530]},{"content":"<ph id=\"ph1\">`Deleted`</ph> rows do not have a <ph id=\"ph2\">`Current`</ph> row version, so you must pass <ph id=\"ph3\">`DataRowVersion.Original`</ph> when accessing the column values.","pos":[4531,4659],"source":"`Deleted` rows do not have a `Current` row version, so you must pass `DataRowVersion.Original` when accessing the column values."},{"pos":[5747,5755],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Manipulating Data in a DataTable<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/manipulating-data-in-a-datatable.md)</ept><ph id=\"ph1\"> </ph>","pos":[5759,5900],"source":"[Manipulating Data in a DataTable](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/manipulating-data-in-a-datatable.md) "},{"content":"<bpt id=\"p1\">[</bpt>DataSets, DataTables, and DataViews<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5904,6021],"source":"[DataSets, DataTables, and DataViews](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>DataAdapters and DataReaders<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id=\"ph1\"> </ph>","pos":[6025,6131],"source":"[DataAdapters and DataReaders](../../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md) "},{"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[6135,6238],"source":"[ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}