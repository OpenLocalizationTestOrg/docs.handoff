{"content":"---\ntitle: \"Using a Synchronous Server Socket\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"application protocols, sockets\"\n  - \"synchronous server sockets\"\n  - \"sending data, sockets\"\n  - \"data requests, sockets\"\n  - \"requesting data from Internet, sockets\"\n  - \"server sockets\"\n  - \"receiving data, sockets\"\n  - \"Socket class, synchronous server sockets\"\n  - \"protocols, sockets\"\n  - \"sockets, synchronous server sockets\"\n  - \"Internet, sockets\"\nms.assetid: d1ce882e-653e-41f5-9289-844ec855b804\n---\n# Using a Synchronous Server Socket\nSynchronous server sockets suspend the execution of the application until a connection request is received on the socket. Synchronous server sockets are not suitable for applications that make heavy use of the network in their operation, but they can be suitable for simple network applications.  \n  \n After a <xref:System.Net.Sockets.Socket> is set to listen on an endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> and <xref:System.Net.Sockets.Socket.Listen%2A> methods, it is ready to accept incoming connection requests using the <xref:System.Net.Sockets.Socket.Accept%2A> method. The application is suspended until a connection request is received when the **Accept** method is called.  \n  \n When a connection request is received, **Accept** returns a new **Socket** instance that is associated with the connecting client. The following example reads data from the client, displays it on the console, and echoes the data back to the client. The **Socket** does not specify any messaging protocol, so the string \"\\<EOF>\" marks the end of the message data. It assumes that a **Socket** named `listener` has been initialized and bound to an endpoint.  \n  \n```vb  \nConsole.WriteLine(\"Waiting for a connection...\")  \nDim handler As Socket = listener.Accept()  \nDim data As String = Nothing  \n  \nWhile True  \n    bytes = New Byte(1024) {}  \n    Dim bytesRec As Integer = handler.Receive(bytes)  \n    data += Encoding.ASCII.GetString(bytes, 0, bytesRec)  \n    If data.IndexOf(\"<EOF>\") > - 1 Then  \n        Exit While  \n    End If  \nEnd While  \n  \nConsole.WriteLine(\"Text received : {0}\", data)  \n  \nDim msg As Byte() = Encoding.ASCII.GetBytes(data)  \nhandler.Send(msg)  \nhandler.Shutdown(SocketShutdown.Both)  \nhandler.Close()  \n```  \n  \n```csharp  \nConsole.WriteLine(\"Waiting for a connection...\");  \nSocket handler = listener.Accept();  \nString data = null;  \n  \nwhile (true) {  \n    bytes = new byte[1024];  \n    int bytesRec = handler.Receive(bytes);  \n    data += Encoding.ASCII.GetString(bytes,0,bytesRec);  \n    if (data.IndexOf(\"<EOF>\") > -1) {  \n        break;  \n    }  \n}  \n  \nConsole.WriteLine( \"Text received : {0}\", data);  \n  \nbyte[] msg = Encoding.ASCII.GetBytes(data);  \nhandler.Send(msg);  \nhandler.Shutdown(SocketShutdown.Both);  \nhandler.Close();  \n```  \n  \n## See also\n\n- [Using an Asynchronous Server Socket](../../../docs/framework/network-programming/using-an-asynchronous-server-socket.md)\n- [Synchronous Server Socket Example](../../../docs/framework/network-programming/synchronous-server-socket-example.md)\n- [Listening with Sockets](../../../docs/framework/network-programming/listening-with-sockets.md)\n","nodes":[{"pos":[4,534],"embed":true,"restype":"x-metadata","content":"title: \"Using a Synchronous Server Socket\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"application protocols, sockets\"\n  - \"synchronous server sockets\"\n  - \"sending data, sockets\"\n  - \"data requests, sockets\"\n  - \"requesting data from Internet, sockets\"\n  - \"server sockets\"\n  - \"receiving data, sockets\"\n  - \"Socket class, synchronous server sockets\"\n  - \"protocols, sockets\"\n  - \"sockets, synchronous server sockets\"\n  - \"Internet, sockets\"\nms.assetid: d1ce882e-653e-41f5-9289-844ec855b804","nodes":[{"content":"Using a Synchronous Server Socket","nodes":[{"pos":[0,33],"content":"Using a Synchronous Server Socket","nodes":[{"content":"Using a Synchronous Server Socket","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[541,574],"content":"Using a Synchronous Server Socket","linkify":"Using a Synchronous Server Socket","nodes":[{"content":"Using a Synchronous Server Socket","pos":[0,33]}]},{"content":"Synchronous server sockets suspend the execution of the application until a connection request is received on the socket.","pos":[575,696]},{"content":"Synchronous server sockets are not suitable for applications that make heavy use of the network in their operation, but they can be suitable for simple network applications.","pos":[697,870]},{"content":"After a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is set to listen on an endpoint using the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket.Bind%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.Sockets.Socket.Listen%2A&gt;</ph> methods, it is ready to accept incoming connection requests using the <ph id=\"ph4\">&lt;xref:System.Net.Sockets.Socket.Accept%2A&gt;</ph> method.","pos":[877,1168],"source":"After a <xref:System.Net.Sockets.Socket> is set to listen on an endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> and <xref:System.Net.Sockets.Socket.Listen%2A> methods, it is ready to accept incoming connection requests using the <xref:System.Net.Sockets.Socket.Accept%2A> method."},{"content":"The application is suspended until a connection request is received when the <bpt id=\"p1\">**</bpt>Accept<ept id=\"p1\">**</ept> method is called.","pos":[1169,1274],"source":" The application is suspended until a connection request is received when the **Accept** method is called."},{"content":"When a connection request is received, <bpt id=\"p1\">**</bpt>Accept<ept id=\"p1\">**</ept> returns a new <bpt id=\"p2\">**</bpt>Socket<ept id=\"p2\">**</ept> instance that is associated with the connecting client.","pos":[1281,1411],"source":"When a connection request is received, **Accept** returns a new **Socket** instance that is associated with the connecting client."},{"content":"The following example reads data from the client, displays it on the console, and echoes the data back to the client.","pos":[1412,1529]},{"content":"The <bpt id=\"p1\">**</bpt>Socket<ept id=\"p1\">**</ept> does not specify any messaging protocol, so the string \"<ph id=\"ph1\">\\&lt;</ph>EOF&gt;\" marks the end of the message data.","pos":[1530,1643],"source":" The **Socket** does not specify any messaging protocol, so the string \"\\<EOF>\" marks the end of the message data."},{"content":"It assumes that a <bpt id=\"p1\">**</bpt>Socket<ept id=\"p1\">**</ept> named <ph id=\"ph1\">`listener`</ph> has been initialized and bound to an endpoint.","pos":[1644,1736],"source":" It assumes that a **Socket** named `listener` has been initialized and bound to an endpoint."},{"pos":[2862,2870],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2874,2995],"content":"<bpt id=\"p1\">[</bpt>Using an Asynchronous Server Socket<ept id=\"p1\">](../../../docs/framework/network-programming/using-an-asynchronous-server-socket.md)</ept>","source":"[Using an Asynchronous Server Socket](../../../docs/framework/network-programming/using-an-asynchronous-server-socket.md)"},{"pos":[2998,3115],"content":"<bpt id=\"p1\">[</bpt>Synchronous Server Socket Example<ept id=\"p1\">](../../../docs/framework/network-programming/synchronous-server-socket-example.md)</ept>","source":"[Synchronous Server Socket Example](../../../docs/framework/network-programming/synchronous-server-socket-example.md)"},{"pos":[3118,3213],"content":"<bpt id=\"p1\">[</bpt>Listening with Sockets<ept id=\"p1\">](../../../docs/framework/network-programming/listening-with-sockets.md)</ept>","source":"[Listening with Sockets](../../../docs/framework/network-programming/listening-with-sockets.md)"}]}