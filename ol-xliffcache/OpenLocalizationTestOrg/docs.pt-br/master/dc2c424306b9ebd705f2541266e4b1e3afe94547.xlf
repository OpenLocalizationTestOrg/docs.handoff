<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="xaml-namespaces-for-net-framework-xaml-services.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc2c424306b9ebd705f2541266e4b1e3afe94547</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\xaml-namespaces-for-net-framework-xaml-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">929ce9eb4074f4c7bac1d7d2135e01c990746796</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66bf0206a476e6fc30d30719572fb1d2e60d8183</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>XAML Namespaces for .NET Framework XAML Services</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAML Namespaces for .NET Framework XAML Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A XAML namespace is a concept that expands on the definition of an XML namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Similar to an XML namespace, you can define a XAML namespace using an <ph id="ph1">`xmlns`</ph> attribute in markup.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML namespaces are also represented in the XAML node stream and other XAML Services APIs.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic defines the XAML namespace concept, and describes how XAML namespaces can be defined and are used by XAML schema contexts and other aspects of .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>XML Namespace and XAML Namespace</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A XAML namespace is a specialized XML namespace, just as XAML is a specialized form of XML and uses the basic XML form for its markup.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In markup, you declare a XAML namespace and its mapping through an <ph id="ph1">`xmlns`</ph> attribute applied to an element.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xmlns`</ph> declaration can be made to the same element that the XAML namespace is declared in.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A XAML namespace declaration made to an element is valid for that element, all attributes of that element, and all children of that element.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Attributes can use a XAML namespaces that is not the same as the element that contains the attribute, so long as the attribute name itself references the prefix as part of its attribute name in markup.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The distinction of a XAML namespace versus an XML namespace is that an XML namespace might be used to reference a schema, or might be used to simply differentiate entities.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For XAML, the types and members as used in XAML must ultimately be resolved to backing types, and XML schema concepts do not apply well to this capability.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The XAML namespace contains information that the XAML schema context must have available in order to perform this type mapping.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>XAML Namespace Components</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The XAML namespace definition has two components: a prefix, and an identifier.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each of these components are present when a XAML namespace is declared in markup, or defined in the XAML type system.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The prefix can be any string as allowed by the <bpt id="p1">[</bpt>W3C Namespaces in XML 1.0 specification<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=161735)</ept> .</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By convention, the prefixes are typically very short strings, because the prefix is repeated many times in a typical markup file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Certain XAML namespaces that are intended to be used in multiple XAML implementations use particular conventional prefixes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, the XAML language XAML namespace is typically mapped using the prefix <ph id="ph1">`x`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can define a default XAML namespace, where the prefix is not given in the definition but is represented as an empty string if defined or queried by.NET Framework XAML Services API.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Typically, the default XAML namespace is deliberately chosen in order to promote a maximized amount of prefix-omitting markup by a XAML-implementing technology and its scenarios and vocabularies.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The identifier can be any string as allowed by the <bpt id="p1">[</bpt>W3C Namespaces in XML 1.0 specification<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=161735)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By convention, identifiers for either XML namespaces or XAML namespaces are often given in URI form, typically as a protocol-qualified absolute URI.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Often, version information that defines a particular XAML vocabulary is implied as part of the path string.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>XAML namespaces add an additional identifier convention beyond the XML URI convention.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For XAML namespaces, the identifier communicates information that is needed by a XAML schema context in order to resolve the types that are specified as elements under that XAML namespace, or to resolve attributes to members.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For purposes of communicating information to a XAML schema context, the identifier for a XAML namespace might still be in URI form.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, in this case the URI is also declared as a matching identifier in a particular assembly or list of assemblies.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This is done in assemblies by attributing the assembly with <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This method of identifying the XAML namespace and supporting a CLR-based type resolution behavior in the attributed assembly is supported by the default XAML schema context in .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>More generally, this convention can be used for cases where the XAML schema context incorporates the CLR or is based on the default XAML schema context, which is necessary in order to read CLR attributes from CLR assemblies.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>XAML namespaces also can be identified by a convention that communicates a CLR namespace and a type-defining assembly.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This convention is used in cases where no <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> attribution exists in the assemblies that contain types.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This convention is potentially more complex than the URI convention, and also has the potential for ambiguity and duplication, because there are multiple ways of referring to an assembly.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The most basic form of an identifier that uses the CLR namespace and assembly convention is as follows:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`clr-namespace:`</ph> <bpt id="p1">*</bpt>clrnsName<ept id="p1">*</ept> <ph id="ph2">`; assembly=`</ph> <bpt id="p2">*</bpt>assemblyShortName<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`clr-namespace:`</ph> and <ph id="ph2">`; assembly=`</ph> are literal components of the syntax.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>clrnsName<ept id="p1">*</ept> is the string name that identifies a CLR namespace.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This string name includes any internal dot characters (.) that provide hints about the CLR namespace and its relation to other CLR namespaces.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>assemblyShortName<ept id="p1">*</ept> is the string name of an assembly that defines types that are useful in XAML.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The types to be accessed through the declared XAML namespace are expected to be defined by the assembly and to be specifically declared within the CLR namespace specified by <bpt id="p1">*</bpt>clrnsName<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This string name typically parallels the information as reported by <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A more complete definition of the CLR namespace and assembly convention is as follows:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`clr-namespace:`</ph> <bpt id="p1">*</bpt>clrnsName<ept id="p1">*</ept> <ph id="ph2">`; assembly=`</ph> <bpt id="p2">*</bpt>assemblyName<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>assemblyName<ept id="p1">*</ept> represents any string that is legal as an <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType&gt;</ph> input.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This string can include culture, public key, or version information (definitions of these concepts are defined in the reference topic for <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>COFF format and evidence (as used by other overloads of <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>) are not relevant for XAML assembly loading purposes; all load information must be presented as a string.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Specifying a public key for the assembly is a useful technique for XAML security, or for removing possible ambiguity that can exist if assemblies are loaded by simple name, or pre-exist in a cache or application domain.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Security Considerations<ept id="p1">](xaml-security-considerations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>XAML Namespace Declarations in the XAML Services API</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the XAML Services API, a XAML namespace declaration is represented by a <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you are declaring a XAML namespace in code, you call the <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration.%23ctor%28System.String%2CSystem.String%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ns`</ph> and <ph id="ph2">`prefix`</ph> parameters are specified as strings, and the input to provide for these parameters corresponds to the definition of XAML namespace identifier and XAML namespace prefix as provided previously in this topic.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you are examining XAML namespace information as part of a XAML node stream or through other access to the XAML type system, <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration.Namespace%2A?displayProperty=nameWithType&gt;</ph> reports the XAML namespace identifier, and <ph id="ph2">&lt;xref:System.Xaml.NamespaceDeclaration.Prefix%2A?displayProperty=nameWithType&gt;</ph> reports the XAML namespace prefix.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In a XAML node stream, the XAML namespace information can appear as a XAML node that precedes the entity to which it applies.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This includes cases where the XAML namespace information precedes the <ph id="ph1">`StartObject`</ph> of the XAML root element.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Understanding XAML Node Stream Structures and Concepts<ept id="p1">](understanding-xaml-node-stream-structures-and-concepts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For many scenarios that use .NET Framework XAML Services API, at least one XAML namespace declaration is expected to exist, and the declaration must either contain or refer to information that is required by a XAML schema context.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The XAML namespaces must either specify assemblies to be loaded, or assist in resolving specific types within namespaces and assemblies that are already loaded or known by the XAML schema context.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In order to generate a XAML node stream, XAML type information must be available, through the XAML schema context.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The XAML type information cannot be determined without first determining the relevant XAML namespace for each node to create.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>At this point, no instances of types are created yet, but the XAML schema context may need to look up information from the defining assembly and backing type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, in order to process the markup <ph id="ph1">`&lt;Party&gt;&lt;PartyFavor/&gt;&lt;/Party&gt;`</ph>, the XAML schema context must be able to determine the name and type of the <ph id="ph2">`ContentProperty`</ph> of <ph id="ph3">`Party`</ph>, and thus also must know the XAML namespace information for <ph id="ph4">`Party`</ph> and <ph id="ph5">`PartyFavor`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the case of the default XAML schema context, static reflection reports much of the XAML type system information that is needed to generate XAML type nodes in the node stream.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In order to generate an object graph from a XAML node stream, XAML namespace declarations must exist for each XAML prefix used in the original markup and recorded in the XAML node stream.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>At this point, instances are being created, and true type-mapping behavior occurs.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you need to prepopulate XAML namespace information, in cases where the XAML namespace you intend the XAML schema context to use is not defined in the markup, one technique you can use is to declare XML namespace declarations in the <ph id="ph1">&lt;xref:System.Xml.XmlParserContext&gt;</ph> for an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Then use that <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> as input for a XAML reader constructor, or <ph id="ph2">&lt;xref:System.Xaml.XamlServices.Load%28System.Xml.XmlReader%29?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Two other API that are relevant for XAML namespace handling in .NET Framework XAML Services are the attributes <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Markup.XmlnsPrefixAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>These attributes apply to assemblies.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> is used by a XAML schema context to interpret any XAML namespace declaration that includes a URI.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsPrefixAttribute&gt;</ph> is used by tools that emit XAML so that a particular XAML namespace can be serialized with a predictable prefix.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML-Related CLR Attributes for Custom Types and Libraries<ept id="p1">](xaml-related-clr-attributes-for-custom-types-and-libraries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Understanding XAML Node Stream Structures and Concepts<ept id="p1">](understanding-xaml-node-stream-structures-and-concepts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>