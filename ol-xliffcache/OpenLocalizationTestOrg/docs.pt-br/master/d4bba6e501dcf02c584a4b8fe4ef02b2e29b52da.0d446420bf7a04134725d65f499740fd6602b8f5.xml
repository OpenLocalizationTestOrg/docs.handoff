{"content":"---\ntitle: \"Interoperability with POX Applications | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 449276b8-4633-46f0-85c9-81f01d127636\ncaps.latest.revision: 15\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Interoperability with POX Applications\n\"Plain Old XML\" (POX) applications communicate by exchanging raw HTTP messages that contain only XML application data that is not enclosed within a SOAP envelope. [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] can provide both services and clients that use POX messages. On the service, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] can be used to implement services that expose endpoints to clients such as Web browsers and scripting languages that send and receive POX messages. On the client, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] programming model can be used to implement clients that communicate with POX-based services.  \n  \n> [!NOTE]\n>  This document was originally written for the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] 3.0.  [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] 3.5 has built-in support for working with POX applications. [!INCLUDE[crabout](../../../../includes/crabout-md.md)] see [WCF Web HTTP Programming Model](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)  \n  \n## POX Programming with WCF  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services that communicate over HTTP using POX messages use a [\\<customBinding>](../../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md).  \n  \n```  \n<customBinding>  \n   <binding name=\"poxServerBinding\">  \n       <textMessageEncoding messageVersion=\"None\" />  \n       <httpTransport />  \n   </binding>  \n</customBinding>  \n  \n```  \n  \n This custom binding contains two elements:  \n  \n-   The [\\<httpTransport>](../../../../docs/framework/configure-apps/file-schema/wcf/httptransport.md) and  \n  \n-   The [\\<textMessageEncoding>](../../../../docs/framework/configure-apps/file-schema/wcf/textmessageencoding.md).  \n  \n The standard [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Text Message Encoder is specially configured to use the <xref:System.ServiceModel.Channels.MessageVersion.None%2A> value, which allows it to process XML message payloads that do not arrive wrapped in a SOAP envelope.  \n  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] clients that communicate over HTTP using POX messages use a similar binding (shown in the following imperative code).  \n  \n```  \nprivate static Binding CreatePoxBinding()  \n{  \n    TextMessageEncodingBindingElement encoder =   \n    new TextMessageEncodingBindingElement( MessageVersion.None, Encoding.UTF8 );  \n    HttpTransportBindingElement transport = new HttpTransportBindingElement();  \n    transport.ManualAddressing = true;  \n    return new CustomBinding( new BindingElement[] { encoder, transport } );  \n}   \n```  \n  \n Because POX clients must explicitly specify the URIs to which they send messages, they usually must configure the <xref:System.ServiceModel.Channels.HttpTransportBindingElement> to a manual addressing mode by setting the <xref:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing%2A> property to `true` on the element. This allows messages to be addressed explicitly by application code and it is not necessary to create a new <xref:System.ServiceModel.ChannelFactory> every time an application sends a message to a different HTTP URI.  \n  \n Because POX messages do not use SOAP headers to convey important protocol information, POX clients and services often must manipulate pieces of the underlying HTTP request used to send or receive a message. HTTP-specific protocol information such as the HTTP headers and status codes are surfaced in the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] programming model through two classes:  \n  \n-   <xref:System.ServiceModel.Channels.HttpRequestMessageProperty>, which contains information about the HTTP request, such as the HTTP method and request headers.  \n  \n-   <xref:System.ServiceModel.Channels.HttpResponseMessageProperty>, which contains information about the HTTP response, such as the HTTP status code and status description, as well as any HTTP response headers.  \n  \n The following code example shows how to create an HTTP GET request message that is addressed to http://localhost:8100/customers.  \n  \n```  \nMessage request = Message.CreateMessage( MessageVersion.None, String.Empty );  \nrequest.Headers.To = \"http://localhost:8100/customers\";  \n  \nHttpRequestMessageProperty property = new HttpRequestMessageProperty();  \nproperty.Method = \"GET\";  \nproperty.SuppressEntityBody = true;  \nrequest.Properties.Add( HttpRequestMessageProperty.Name, property );  \n```  \n  \n First, an empty request <xref:System.ServiceModel.Channels.Message> is created by calling <xref:System.ServiceModel.Channels.Message.CreateMessage%28System.ServiceModel.Channels.MessageVersion%2CSystem.String%29>. The <xref:System.ServiceModel.Channels.MessageVersion.None%2A> parameter is used to indicate that a SOAP envelope is not required and <xref:System.String.Empty> parameter is passed as the Action. The request message is then addressed by setting <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> header to the desired URI. Next, an <xref:System.ServiceModel.Channels.HttpRequestMessageProperty> is created and the <xref:System.ServiceModel.Channels.HttpRequestMessageProperty.Method%2A> is set to the HTTP verb GET method and the <xref:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody%2A> is set to `true` to indicate that no data should be sent in the body of the outgoing HTTP request message. Finally, the request property is added to the <xref:System.ServiceModel.Channels.Message.Properties%2A> collection of the request message so it can influence how the HTTP Transport sends the request. The message is then ready to be sent over an appropriate instance of the <xref:System.ServiceModel.Channels.IRequestChannel>.  \n  \n Similar techniques can be used on the service to extract the <xref:System.ServiceModel.Channels.HttpRequestMessageProperty> from an incoming message and construct a response.","nodes":[{"pos":[4,359],"embed":true,"restype":"x-metadata","content":"title: \"Interoperability with POX Applications | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 449276b8-4633-46f0-85c9-81f01d127636\ncaps.latest.revision: 15\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"Interoperability with POX Applications | Microsoft Docs","nodes":[{"pos":[0,55],"content":"Interoperability with POX Applications | Microsoft Docs","nodes":[{"content":"Interoperability with POX Applications | Microsoft Docs","pos":[0,55]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[366,404],"content":"Interoperability with POX Applications","linkify":"Interoperability with POX Applications","nodes":[{"content":"Interoperability with POX Applications","pos":[0,38]}]},{"content":"\"Plain Old XML\" (POX) applications communicate by exchanging raw HTTP messages that contain only XML application data that is not enclosed within a SOAP envelope.","pos":[405,567]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> can provide both services and clients that use POX messages.","pos":[568,684],"source":"[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] can provide both services and clients that use POX messages."},{"content":"On the service, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> can be used to implement services that expose endpoints to clients such as Web browsers and scripting languages that send and receive POX messages.","pos":[685,904],"source":" On the service, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] can be used to implement services that expose endpoints to clients such as Web browsers and scripting languages that send and receive POX messages."},{"content":"On the client, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> programming model can be used to implement clients that communicate with POX-based services.","pos":[905,1072],"source":" On the client, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] programming model can be used to implement clients that communicate with POX-based services."},{"pos":[1080,1504],"content":"[!NOTE]\n This document was originally written for the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] 3.0.  [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] 3.5 has built-in support for working with POX applications. [!INCLUDE[crabout](../../../../includes/crabout-md.md)] see [WCF Web HTTP Programming Model](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)","leadings":["","> "],"nodes":[{"content":"This document was originally written for the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] 3.0.  [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] 3.5 has built-in support for working with POX applications. [!INCLUDE[crabout](../../../../includes/crabout-md.md)] see [WCF Web HTTP Programming Model](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)","pos":[9,422],"nodes":[{"content":"This document was originally written for the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> 3.0.","pos":[0,113],"source":"This document was originally written for the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] 3.0."},{"content":"<ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> 3.5 has built-in support for working with POX applications.","pos":[115,238],"source":"[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] 3.5 has built-in support for working with POX applications."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> see <bpt id=\"p1\">[</bpt>WCF Web HTTP Programming Model<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)</ept>","pos":[239,413],"source":"[!INCLUDE[crabout](../../../../includes/crabout-md.md)] see [WCF Web HTTP Programming Model](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)"}]}]},{"pos":[1513,1537],"content":"POX Programming with WCF","linkify":"POX Programming with WCF","nodes":[{"content":"POX Programming with WCF","pos":[0,24]}]},{"pos":[1597,1753],"content":"services that communicate over HTTP using POX messages use a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>customBinding&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md)</ept>.","source":" services that communicate over HTTP using POX messages use a [\\<customBinding>](../../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md)."},{"content":"This custom binding contains two elements:","pos":[1952,1994]},{"pos":[2004,2106],"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>httpTransport&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/httptransport.md)</ept> and","source":"The [\\<httpTransport>](../../../../docs/framework/configure-apps/file-schema/wcf/httptransport.md) and"},{"pos":[2116,2227],"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>textMessageEncoding&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/textmessageencoding.md)</ept>.","source":"The [\\<textMessageEncoding>](../../../../docs/framework/configure-apps/file-schema/wcf/textmessageencoding.md)."},{"pos":[2234,2519],"content":"The standard <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Text Message Encoder is specially configured to use the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.MessageVersion.None%2A&gt;</ph> value, which allows it to process XML message payloads that do not arrive wrapped in a SOAP envelope.","source":"The standard [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Text Message Encoder is specially configured to use the <xref:System.ServiceModel.Channels.MessageVersion.None%2A> value, which allows it to process XML message payloads that do not arrive wrapped in a SOAP envelope."},{"pos":[2582,2699],"content":"clients that communicate over HTTP using POX messages use a similar binding (shown in the following imperative code)."},{"content":"Because POX clients must explicitly specify the URIs to which they send messages, they usually must configure the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.HttpTransportBindingElement&gt;</ph> to a manual addressing mode by setting the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing%2A&gt;</ph> property to <ph id=\"ph3\">`true`</ph> on the element.","pos":[3109,3444],"source":"Because POX clients must explicitly specify the URIs to which they send messages, they usually must configure the <xref:System.ServiceModel.Channels.HttpTransportBindingElement> to a manual addressing mode by setting the <xref:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing%2A> property to `true` on the element."},{"content":"This allows messages to be addressed explicitly by application code and it is not necessary to create a new <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph> every time an application sends a message to a different HTTP URI.","pos":[3445,3661],"source":" This allows messages to be addressed explicitly by application code and it is not necessary to create a new <xref:System.ServiceModel.ChannelFactory> every time an application sends a message to a different HTTP URI."},{"content":"Because POX messages do not use SOAP headers to convey important protocol information, POX clients and services often must manipulate pieces of the underlying HTTP request used to send or receive a message.","pos":[3668,3874]},{"content":"HTTP-specific protocol information such as the HTTP headers and status codes are surfaced in the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> programming model through two classes:","pos":[3875,4066],"source":" HTTP-specific protocol information such as the HTTP headers and status codes are surfaced in the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] programming model through two classes:"},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty&gt;</ph>, which contains information about the HTTP request, such as the HTTP method and request headers.","pos":[4076,4235],"source":"<xref:System.ServiceModel.Channels.HttpRequestMessageProperty>, which contains information about the HTTP request, such as the HTTP method and request headers."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.HttpResponseMessageProperty&gt;</ph>, which contains information about the HTTP response, such as the HTTP status code and status description, as well as any HTTP response headers.","pos":[4245,4452],"source":"<xref:System.ServiceModel.Channels.HttpResponseMessageProperty>, which contains information about the HTTP response, such as the HTTP status code and status description, as well as any HTTP response headers."},{"content":"The following code example shows how to create an HTTP GET request message that is addressed to http://localhost:8100/customers.","pos":[4459,4587]},{"content":"First, an empty request <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> is created by calling <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.Message.CreateMessage%28System.ServiceModel.Channels.MessageVersion%2CSystem.String%29&gt;</ph>.","pos":[4960,5173],"source":"First, an empty request <xref:System.ServiceModel.Channels.Message> is created by calling <xref:System.ServiceModel.Channels.Message.CreateMessage%28System.ServiceModel.Channels.MessageVersion%2CSystem.String%29>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.MessageVersion.None%2A&gt;</ph> parameter is used to indicate that a SOAP envelope is not required and <ph id=\"ph2\">&lt;xref:System.String.Empty&gt;</ph> parameter is passed as the Action.","pos":[5174,5369],"source":" The <xref:System.ServiceModel.Channels.MessageVersion.None%2A> parameter is used to indicate that a SOAP envelope is not required and <xref:System.String.Empty> parameter is passed as the Action."},{"content":"The request message is then addressed by setting <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph> header to the desired URI.","pos":[5370,5502],"source":" The request message is then addressed by setting <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> header to the desired URI."},{"content":"Next, an <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty&gt;</ph> is created and the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty.Method%2A&gt;</ph> is set to the HTTP verb GET method and the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody%2A&gt;</ph> is set to <ph id=\"ph4\">`true`</ph> to indicate that no data should be sent in the body of the outgoing HTTP request message.","pos":[5503,5901],"source":" Next, an <xref:System.ServiceModel.Channels.HttpRequestMessageProperty> is created and the <xref:System.ServiceModel.Channels.HttpRequestMessageProperty.Method%2A> is set to the HTTP verb GET method and the <xref:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody%2A> is set to `true` to indicate that no data should be sent in the body of the outgoing HTTP request message."},{"content":"Finally, the request property is added to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.Message.Properties%2A&gt;</ph> collection of the request message so it can influence how the HTTP Transport sends the request.","pos":[5902,6101],"source":" Finally, the request property is added to the <xref:System.ServiceModel.Channels.Message.Properties%2A> collection of the request message so it can influence how the HTTP Transport sends the request."},{"content":"The message is then ready to be sent over an appropriate instance of the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph>.","pos":[6102,6227],"source":" The message is then ready to be sent over an appropriate instance of the <xref:System.ServiceModel.Channels.IRequestChannel>."},{"content":"Similar techniques can be used on the service to extract the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty&gt;</ph> from an incoming message and construct a response.","pos":[6234,6408],"source":"Similar techniques can be used on the service to extract the <xref:System.ServiceModel.Channels.HttpRequestMessageProperty> from an incoming message and construct a response."}]}