{"content":"---\ntitle: \"Built-in Activities | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 31e1b8c2-7f74-458a-b2e2-fddc5b10eac1\ncaps.latest.revision: 3\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Built-in Activities\nThis section contains samples that demonstrate built-in [!INCLUDE[wf](../../../../includes/wf-md.md)] activities.  \n  \n## In This Section  \n [Fault Handling in a Flowchart Activity Using TryCatch](../../../../docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md)  \n Demonstrates how the <xref:System.Activities.Statements.TryCatch> activity can be used within a complex control flow activity.  \n  \n [Emulating breaking in a While activity](../../../../docs/framework/windows-workflow-foundation/samples/emulating-breaking-in-a-while-activity.md)  \n Demonstrates how to break the looping mechanism of the following activities: <xref:System.Activities.Statements.DoWhile>, <xref:System.Activities.Statements.ForEach%601>, <xref:System.Activities.Statements.While>, and <xref:System.Activities.Statements.ParallelForEach%601>.  \n  \n [DynamicActivity Creation](../../../../docs/framework/windows-workflow-foundation/samples/dynamicactivity-creation.md)  \n Demonstrates two different ways to create an activity at runtime using the <xref:System.Activities.DynamicActivity> activity.  \n  \n [Using Variables with a .NET Framework 3.5 Ruleset](../../../../docs/framework/windows-workflow-foundation/samples/using-variables-with-dotnet-ruleset.md)  \n Demonstrates how to create a workflow that uses the <xref:System.Activities.Statements.Interop> activity to integrate a custom activity written in [!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)] that uses policy and rules.  \n  \n [Load From XAML](../../../../docs/framework/windows-workflow-foundation/samples/load-from-xaml.md)  \n Demonstrates how to dynamically load a XAML workflow without having to run the XamlBuildTask tool.  \n  \n [Using Collection Activities](../../../../docs/framework/windows-workflow-foundation/samples/using-collection-activities.md)  \n Demonstrates how to use the collection activities (<xref:System.Activities.Statements.AddToCollection%601>, <xref:System.Activities.Statements.ClearCollection%601>, <xref:System.Activities.Statements.ExistsInCollection%601>, and <xref:System.Activities.Statements.RemoveFromCollection%601>) with a class that implements the <xref:System.Collections.ICollection> interface and how to create a custom activity that iterates over a collection to print out the contents of each element in the collection.  \n  \n [Using the InvokeMethod Activity](../../../../docs/framework/windows-workflow-foundation/samples/using-the-invokemethod-activity.md)  \n Demonstrates how to use the <xref:System.Activities.Statements.InvokeMethod> activity to invoke public methods in public classes.  \n  \n [Using the Pick Activity](../../../../docs/framework/windows-workflow-foundation/samples/using-the-pick-activity.md)  \n Demonstrates how to use the <xref:System.Activities.Statements.Pick> activity.  \n  \n [Using Procedural Activities](../../../../docs/framework/windows-workflow-foundation/samples/using-procedural-activities.md)  \n Demonstrates how to use the <xref:System.Activities.Statements.Sequence>, <xref:System.Activities.Statements.Assign>, <xref:System.Activities.Statements.If>, <xref:System.Activities.Statements.While>, <xref:System.Activities.Statements.Switch%601>, <xref:System.Activities.Statements.TryCatch>, and <xref:System.Activities.Statements.WriteLine> activities to implement a guessing game.  \n  \n [Using CancellationScope](../../../../docs/framework/windows-workflow-foundation/samples/using-cancellationscope.md)  \n Demonstrates how to use the <xref:System.Activities.Statements.CancellationScope> activity to cancel work in an application.  \n  \n [InvokeMethod](../../../../docs/framework/windows-workflow-foundation/samples/invokemethod.md)  \n Demonstrates the different ways to use the <xref:System.Activities.Statements.InvokeMethod> activity to invoke methods of a class.  \n  \n [Usage of the Switch Activity with Custom Types](../../../../docs/framework/windows-workflow-foundation/samples/usage-of-the-switch-activity-with-custom-types.md)  \n Describes how to enable a <xref:System.Activities.Statements.Switch%601> activity to evaluate a user-defined complex type at runtime.  \n  \n [Interop with 3.5 Rule Set](../../../../docs/framework/windows-workflow-foundation/samples/interop-with-3-5-rule-set.md)  \n Demonstrates the use of the <xref:System.Activities.Statements.Interop> activity to integrate with a custom activity in [!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)] using <xref:System.Workflow.Activities.PolicyActivity> and rules.","nodes":[{"pos":[12,48],"content":"Built-in Activities | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Built-in Activities | Microsoft Docs","pos":[0,36]}]},{"pos":[313,332],"content":"Built-in Activities","linkify":"Built-in Activities","nodes":[{"content":"Built-in Activities","pos":[0,19]}]},{"pos":[333,446],"content":"This section contains samples that demonstrate built-in <ph id=\"ph1\">[!INCLUDE[wf](../../../../includes/wf-md.md)]</ph> activities.","source":"This section contains samples that demonstrate built-in [!INCLUDE[wf](../../../../includes/wf-md.md)] activities."},{"pos":[455,470],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>Fault Handling in a Flowchart Activity Using TryCatch<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md)</ept>","pos":[474,650],"source":"[Fault Handling in a Flowchart Activity Using TryCatch](../../../../docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md)"},{"content":"Demonstrates how the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity can be used within a complex control flow activity.","pos":[654,780],"source":" Demonstrates how the <xref:System.Activities.Statements.TryCatch> activity can be used within a complex control flow activity."},{"content":"<bpt id=\"p1\">[</bpt>Emulating breaking in a While activity<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/emulating-breaking-in-a-while-activity.md)</ept>","pos":[787,933],"source":"[Emulating breaking in a While activity](../../../../docs/framework/windows-workflow-foundation/samples/emulating-breaking-in-a-while-activity.md)"},{"content":"Demonstrates how to break the looping mechanism of the following activities: <ph id=\"ph1\">&lt;xref:System.Activities.Statements.DoWhile&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Activities.Statements.While&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph>.","pos":[937,1211],"source":" Demonstrates how to break the looping mechanism of the following activities: <xref:System.Activities.Statements.DoWhile>, <xref:System.Activities.Statements.ForEach%601>, <xref:System.Activities.Statements.While>, and <xref:System.Activities.Statements.ParallelForEach%601>."},{"content":"<bpt id=\"p1\">[</bpt>DynamicActivity Creation<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/dynamicactivity-creation.md)</ept>","pos":[1218,1336],"source":"[DynamicActivity Creation](../../../../docs/framework/windows-workflow-foundation/samples/dynamicactivity-creation.md)"},{"content":"Demonstrates two different ways to create an activity at runtime using the <ph id=\"ph1\">&lt;xref:System.Activities.DynamicActivity&gt;</ph> activity.","pos":[1340,1465],"source":" Demonstrates two different ways to create an activity at runtime using the <xref:System.Activities.DynamicActivity> activity."},{"content":"<bpt id=\"p1\">[</bpt>Using Variables with a .NET Framework 3.5 Ruleset<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/using-variables-with-dotnet-ruleset.md)</ept>","pos":[1472,1626],"source":"[Using Variables with a .NET Framework 3.5 Ruleset](../../../../docs/framework/windows-workflow-foundation/samples/using-variables-with-dotnet-ruleset.md)"},{"content":"Demonstrates how to create a workflow that uses the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Interop&gt;</ph> activity to integrate a custom activity written in <ph id=\"ph2\">[!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)]</ph> that uses policy and rules.","pos":[1630,1872],"source":" Demonstrates how to create a workflow that uses the <xref:System.Activities.Statements.Interop> activity to integrate a custom activity written in [!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)] that uses policy and rules."},{"content":"<bpt id=\"p1\">[</bpt>Load From XAML<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/load-from-xaml.md)</ept>","pos":[1879,1977],"source":"[Load From XAML](../../../../docs/framework/windows-workflow-foundation/samples/load-from-xaml.md)"},{"content":"Demonstrates how to dynamically load a XAML workflow without having to run the XamlBuildTask tool.","pos":[1981,2079]},{"content":"<bpt id=\"p1\">[</bpt>Using Collection Activities<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/using-collection-activities.md)</ept>","pos":[2086,2210],"source":"[Using Collection Activities](../../../../docs/framework/windows-workflow-foundation/samples/using-collection-activities.md)"},{"content":"Demonstrates how to use the collection activities (<ph id=\"ph1\">&lt;xref:System.Activities.Statements.AddToCollection%601&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.Statements.ClearCollection%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Activities.Statements.ExistsInCollection%601&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Activities.Statements.RemoveFromCollection%601&gt;</ph>) with a class that implements the <ph id=\"ph5\">&lt;xref:System.Collections.ICollection&gt;</ph> interface and how to create a custom activity that iterates over a collection to print out the contents of each element in the collection.","pos":[2214,2714],"source":" Demonstrates how to use the collection activities (<xref:System.Activities.Statements.AddToCollection%601>, <xref:System.Activities.Statements.ClearCollection%601>, <xref:System.Activities.Statements.ExistsInCollection%601>, and <xref:System.Activities.Statements.RemoveFromCollection%601>) with a class that implements the <xref:System.Collections.ICollection> interface and how to create a custom activity that iterates over a collection to print out the contents of each element in the collection."},{"content":"<bpt id=\"p1\">[</bpt>Using the InvokeMethod Activity<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/using-the-invokemethod-activity.md)</ept>","pos":[2721,2853],"source":"[Using the InvokeMethod Activity](../../../../docs/framework/windows-workflow-foundation/samples/using-the-invokemethod-activity.md)"},{"content":"Demonstrates how to use the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activity to invoke public methods in public classes.","pos":[2857,2986],"source":" Demonstrates how to use the <xref:System.Activities.Statements.InvokeMethod> activity to invoke public methods in public classes."},{"content":"<bpt id=\"p1\">[</bpt>Using the Pick Activity<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/using-the-pick-activity.md)</ept>","pos":[2993,3109],"source":"[Using the Pick Activity](../../../../docs/framework/windows-workflow-foundation/samples/using-the-pick-activity.md)"},{"content":"Demonstrates how to use the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Pick&gt;</ph> activity.","pos":[3113,3191],"source":" Demonstrates how to use the <xref:System.Activities.Statements.Pick> activity."},{"content":"<bpt id=\"p1\">[</bpt>Using Procedural Activities<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/using-procedural-activities.md)</ept>","pos":[3198,3322],"source":"[Using Procedural Activities](../../../../docs/framework/windows-workflow-foundation/samples/using-procedural-activities.md)"},{"content":"Demonstrates how to use the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Assign&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Activities.Statements.If&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Activities.Statements.While&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Activities.Statements.Switch%601&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph>, and <ph id=\"ph7\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities to implement a guessing game.","pos":[3326,3711],"source":" Demonstrates how to use the <xref:System.Activities.Statements.Sequence>, <xref:System.Activities.Statements.Assign>, <xref:System.Activities.Statements.If>, <xref:System.Activities.Statements.While>, <xref:System.Activities.Statements.Switch%601>, <xref:System.Activities.Statements.TryCatch>, and <xref:System.Activities.Statements.WriteLine> activities to implement a guessing game."},{"content":"<bpt id=\"p1\">[</bpt>Using CancellationScope<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/using-cancellationscope.md)</ept>","pos":[3718,3834],"source":"[Using CancellationScope](../../../../docs/framework/windows-workflow-foundation/samples/using-cancellationscope.md)"},{"content":"Demonstrates how to use the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.CancellationScope&gt;</ph> activity to cancel work in an application.","pos":[3838,3962],"source":" Demonstrates how to use the <xref:System.Activities.Statements.CancellationScope> activity to cancel work in an application."},{"content":"<bpt id=\"p1\">[</bpt>InvokeMethod<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/invokemethod.md)</ept>","pos":[3969,4063],"source":"[InvokeMethod](../../../../docs/framework/windows-workflow-foundation/samples/invokemethod.md)"},{"content":"Demonstrates the different ways to use the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activity to invoke methods of a class.","pos":[4067,4197],"source":" Demonstrates the different ways to use the <xref:System.Activities.Statements.InvokeMethod> activity to invoke methods of a class."},{"content":"<bpt id=\"p1\">[</bpt>Usage of the Switch Activity with Custom Types<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/usage-of-the-switch-activity-with-custom-types.md)</ept>","pos":[4204,4366],"source":"[Usage of the Switch Activity with Custom Types](../../../../docs/framework/windows-workflow-foundation/samples/usage-of-the-switch-activity-with-custom-types.md)"},{"content":"Describes how to enable a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Switch%601&gt;</ph> activity to evaluate a user-defined complex type at runtime.","pos":[4370,4503],"source":" Describes how to enable a <xref:System.Activities.Statements.Switch%601> activity to evaluate a user-defined complex type at runtime."},{"content":"<bpt id=\"p1\">[</bpt>Interop with 3.5 Rule Set<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/interop-with-3-5-rule-set.md)</ept>","pos":[4510,4630],"source":"[Interop with 3.5 Rule Set](../../../../docs/framework/windows-workflow-foundation/samples/interop-with-3-5-rule-set.md)"},{"content":"Demonstrates the use of the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Interop&gt;</ph> activity to integrate with a custom activity in <ph id=\"ph2\">[!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)]</ph> using <ph id=\"ph3\">&lt;xref:System.Workflow.Activities.PolicyActivity&gt;</ph> and rules.","pos":[4634,4887],"source":" Demonstrates the use of the <xref:System.Activities.Statements.Interop> activity to integrate with a custom activity in [!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)] using <xref:System.Workflow.Activities.PolicyActivity> and rules."}]}