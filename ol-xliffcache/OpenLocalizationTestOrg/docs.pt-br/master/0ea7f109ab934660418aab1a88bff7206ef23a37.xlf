<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ea7f109ab934660418aab1a88bff7206ef23a37</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\long.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d27118fb3959836fbfaaea2d992b977cbdaf7259</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2940273bc1232ab1b296d39afae0080a889929ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>long (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>long (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`long`</ph> denotes an integral type that stores values according to the size and range shown in the following table.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Range</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Size</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET Framework type</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>â€“9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Signed 64-bit integer</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Literals</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can declare and initialize a <ph id="ph1">`long`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the following example, integers equal to 4,294,967,296 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id="ph1">`long`</ph> values.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>long<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Long)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You use the prefix <ph id="ph1">`0x`</ph> or <ph id="ph2">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id="ph3">`0b`</ph> or <ph id="ph4">`0B`</ph> to denote a binary literal.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Decimal literals have no prefix.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, you can also use the underscore character, <ph id="ph1">`_`</ph>, as a digit separator to enhance readability, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>long<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#LongS)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Integer literals can also include a suffix that denotes the type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The suffix <ph id="ph1">`L`</ph> denotes a <ph id="ph2">`long`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`L`</ph> suffix to denote a long integer:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also use the lowercase letter "l" as a suffix.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, this generates a compiler warning because the letter "l" is easily confused with the digit "1."</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use "L" for clarity.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you use the suffix <ph id="ph1">`L`</ph>, the type of the literal integer is determined to be either <ph id="ph2">`long`</ph> or <bpt id="p1">[</bpt>ulong<ept id="p1">](../../../csharp/language-reference/keywords/ulong.md)</ept>, depending on its size.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this case, it is <ph id="ph1">`long`</ph> because it less than the range of <bpt id="p1">[</bpt>ulong<ept id="p1">](../../../csharp/language-reference/keywords/ulong.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A common use of the suffix is to call overloaded methods.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the following overloaded methods have parameters of type <ph id="ph1">`long`</ph> and <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`L`</ph> suffix guarantees that the correct overload is called:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>int<ept id="p1">](int.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>uint<ept id="p1">](../../../csharp/language-reference/keywords/uint.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ulong<ept id="p1">](../../../csharp/language-reference/keywords/ulong.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The literal 4294967296 in the previous examples is of type <ph id="ph1">`long`</ph>, because it exceeds the range of <bpt id="p1">[</bpt>uint<ept id="p1">](../../../csharp/language-reference/keywords/uint.md)</ept> (see <bpt id="p2">[</bpt>Integral Types Table<ept id="p2">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept> for the storage sizes of integral types).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`long`</ph> type with other integral types in the same expression, the expression is evaluated as <ph id="ph2">`long`</ph> (or <bpt id="p1">[</bpt>bool<ept id="p1">](../../../csharp/language-reference/keywords/bool.md)</ept> in the case of relational or Boolean expressions).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following expression evaluates as <ph id="ph1">`long`</ph>:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id="p1">[</bpt>float<ept id="p1">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id="p2">[</bpt>double<ept id="p2">](../../../csharp/language-reference/keywords/double.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Conversions</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There is a predefined implicit conversion from <ph id="ph1">`long`</ph> to <bpt id="p1">[</bpt>float<ept id="p1">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id="p2">[</bpt>double<ept id="p2">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id="p3">[</bpt>decimal<ept id="p3">](../../../csharp/language-reference/keywords/decimal.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Otherwise a cast must be used.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the following statement will produce a compilation error without an explicit cast:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There is a predefined implicit conversion from <bpt id="p1">[</bpt>sbyte<ept id="p1">](../../../csharp/language-reference/keywords/sbyte.md)</ept>, <bpt id="p2">[</bpt>byte<ept id="p2">](../../../csharp/language-reference/keywords/byte.md)</ept>, <bpt id="p3">[</bpt>short<ept id="p3">](../../../csharp/language-reference/keywords/short.md)</ept>, <bpt id="p4">[</bpt>ushort<ept id="p4">](../../../csharp/language-reference/keywords/ushort.md)</ept>, <bpt id="p5">[</bpt>int<ept id="p5">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id="p6">[</bpt>uint<ept id="p6">](../../../csharp/language-reference/keywords/uint.md)</ept>, or <bpt id="p7">[</bpt>char<ept id="p7">](../../../csharp/language-reference/keywords/char.md)</ept> to <ph id="ph1">`long`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Notice also that there is no implicit conversion from floating-point types to <ph id="ph1">`long`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, the following statement generates a compiler error unless an explicit cast is used:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Integral Types Table<ept id="p1">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Built-In Types Table<ept id="p1">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Implicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Explicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>