<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b89e521a02066d4d2f296034392e0583ab35f27</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\optimizing-performance-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">476a5906e8ca7fbd7d7a759b5d9d3ad08afb9e8f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6036989f4c4d661dd4e8a3c6c0e78ab5bb70601b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Optimizing Performance: Controls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Optimizing Performance: Controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> includes many of the common user-interface (UI) components that are used in most Windows applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic contains techniques for improving the performance of your UI.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Displaying Large Data Sets</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>WPF controls such as the <ph id="ph1">&lt;xref:System.Windows.Controls.ListView&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> are used to display lists of items in an application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the list to display is large, the application's performance can be affected.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is because the standard layout system creates a layout container for each item associated with the list control, and computes its layout size and position.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Typically, you do not have to display all the items at the same time; instead you display a subset, and the user scrolls through the list.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this case, it makes sense to use UI <bpt id="p1">*</bpt>virtualization<ept id="p1">*</ept>, which means the item container generation and associated layout computation for an item is deferred until the item is visible.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>UI Virtualization is an important aspect of list controls.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>UI virtualization should not be confused with data virtualization.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>UI virtualization stores only visible items in memory but in a data-binding scenario stores the entire data structure in memory.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In contrast, data virtualization stores only the data items that are visible on the screen in memory.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>By default, UI virtualization is enabled for the <ph id="ph1">&lt;xref:System.Windows.Controls.ListView&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> controls when their list items are bound to data.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph> virtualization can be enabled by setting the <ph id="ph2">&lt;!--zz &lt;xref:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizing%2A?displayProperty=fullName&gt; --&gt;</ph> <ph id="ph3">`IsVirtualizing`</ph> attached property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you want to enable UI virtualization for custom controls that derive from <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> or existing item controls that use the <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> class, such as <ph id="ph3">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>, you can set the <ph id="ph4">&lt;xref:System.Windows.Controls.ItemsControl.ItemsPanel%2A&gt;</ph> to <ph id="ph5">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> and set <ph id="ph6">&lt;xref:System.Windows.Controls.VirtualizingPanel.IsVirtualizing%2A&gt;</ph> to <ph id="ph7">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Unfortunately, you can disable UI virtualization for these controls without realizing it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following is a list of conditions that disable UI virtualization.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Item containers are added directly to the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if an application explicitly adds <ph id="ph1">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> objects to a <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> does not virtualize the <ph id="ph4">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Item containers in the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> are of different types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.Menu&gt;</ph> that uses <ph id="ph2">&lt;xref:System.Windows.Controls.Separator&gt;</ph> objects cannot implement item recycling because the <ph id="ph3">&lt;xref:System.Windows.Controls.Menu&gt;</ph> contains objects of type <ph id="ph4">&lt;xref:System.Windows.Controls.Separator&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Setting <ph id="ph1">&lt;!--zz &lt;xref:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizing%2A&gt;--&gt;</ph>  <ph id="ph2">`IsVirtualizing`</ph>  to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An important consideration when you virtualize item containers is whether you have additional state information associated with an item container that belongs with the item.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this case, you must save the additional state.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, you might have an item contained in an <ph id="ph1">&lt;xref:System.Windows.Controls.Expander&gt;</ph> control and the <ph id="ph2">&lt;xref:System.Windows.Controls.Expander.IsExpanded%2A&gt;</ph> state is bound to the item's container, and not to the item itself.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the container is reused for a new item, the current value of <ph id="ph1">&lt;xref:System.Windows.Controls.Expander.IsExpanded%2A&gt;</ph> is used for the new item.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In addition, the old item loses the correct <ph id="ph1">&lt;xref:System.Windows.Controls.Expander.IsExpanded%2A&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Currently, no WPF controls offer built-in support for data virtualization.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Container Recycling</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An optimization to UI virtualization added in the .NET Framework 3.5 SP1 for controls that inherit from <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> is <bpt id="p1">*</bpt>container recycling,<ept id="p1">*</ept> which can also improve scrolling performance.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> that uses UI virtualization is populated, it creates an item container for each item that scrolls into view and destroys the item container for each item that scrolls out of view.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Container recycling<ept id="p1">*</ept> enables the control to reuse the existing item containers for different data items, so that item containers are not constantly created and destroyed as the user scrolls the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can choose to enable item recycling by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel.VirtualizationMode%2A&gt;</ph> attached property to <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizationMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> that supports virtualization can use container recycling.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For an example of how to enable container recycling on a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, see <bpt id="p1">[</bpt>Improve the Scrolling Performance of a ListBox<ept id="p1">](../../../../docs/framework/wpf/controls/how-to-improve-the-scrolling-performance-of-a-listbox.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Supporting Bidirectional Virtualization</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> offers built-in support for UI virtualization in one direction, either horizontally or vertically.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you want to use bidirectional virtualization for your controls, you must implement a custom panel that extends the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> class exposes virtual methods such as <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.OnViewportSizeChanged%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.LineUp%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.PageUp%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.MouseWheelUp%2A&gt;</ph>.These virtual methods enable you to detect a change in the visible part of a list and handle it accordingly.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Optimizing Templates</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The visual tree contains all the visual elements in an application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In addition to the objects directly created, it also contains objects due to template expansion.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, when you create a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, you also get <ph id="ph2">&lt;xref:Microsoft.Windows.Themes.ClassicBorderDecorator&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> objects in the visual tree.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you haven't optimized your control templates, you may be creating a lot of extra unnecessary objects in the visual tree.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information on the visual tree, see <bpt id="p1">[</bpt>WPF Graphics Rendering Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/wpf-graphics-rendering-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Deferred Scrolling</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>By default, when the user drags the thumb on a scrollbar, the content view continuously updates.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If scrolling is slow in your control, consider using deferred scrolling.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In deferred scrolling, the content is updated only when the user releases the thumb.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To implement deferred scrolling, set the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabled%2A&gt;</ph> is an attached property and can be set on <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and any control that has a <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> in its control template.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Controls That Implement Performance Features</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following table lists the common controls for displaying data and their support of performance features.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See the previous sections for information on how to enable these features.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Control</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Virtualization</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Container recycling</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Deferred scrolling</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Not available</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Not available</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Not available</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Not available</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Can be enabled</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For an example of how to enable virtualization and container recycling on a <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph>, see <bpt id="p1">[</bpt>Improve the Performance of a TreeView<ept id="p1">](../../../../docs/framework/wpf/controls/how-to-improve-the-performance-of-a-treeview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout<ept id="p1">](../../../../docs/framework/wpf/advanced/layout.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout and Design<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-layout-and-design.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-data-binding.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Controls<ept id="p1">](../../../../docs/framework/wpf/controls/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Caching Application Data in a WPF Application<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-caching-application-data-in-a-wpf-application.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>