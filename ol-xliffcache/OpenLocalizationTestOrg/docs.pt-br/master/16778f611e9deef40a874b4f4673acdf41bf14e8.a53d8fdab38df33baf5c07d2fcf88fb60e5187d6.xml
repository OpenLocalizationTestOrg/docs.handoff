{"content":"---\ntitle: \"ICLRSyncManager::GetMonitorOwner Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICLRSyncManager.GetMonitorOwner\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRSyncManager::GetMonitorOwner\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICLRSyncManager::GetMonitorOwner method [.NET Framework hosting]\"\n  - \"GetMonitorOwner method [.NET Framework hosting]\"\nms.assetid: 840983a4-396d-47b4-86a0-d35f9b437cdb\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# ICLRSyncManager::GetMonitorOwner Method\nGets the [IHostTask](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md) instance that owns the monitor identified by the specified cookie.  \n  \n## Syntax  \n  \n```  \nHRESULT GetMonitorOwner (  \n    [in]  SIZE_T     cookie,  \n    [out] IHostTask *ppOwnerHostTask  \n);  \n```  \n  \n#### Parameters  \n `cookie`  \n [in] The cookie associated with the monitor.  \n  \n `ppOwnerHostTask`  \n [out] A pointer to the `IHostTask` that currently owns the monitor, or null if no task has ownership.  \n  \n## Return Value  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|S_OK|`GetMonitorOwner` returned successfully.|  \n|HOST_E_CLRNOTAVAILABLE|The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.|  \n|HOST_E_TIMEOUT|The call timed out.|  \n|HOST_E_NOT_OWNER|The caller does not own the lock.|  \n|HOST_E_ABANDONED|An event was canceled while a blocked thread or fiber was waiting on it.|  \n|E_FAIL|An unknown catastrophic failure occurred. When a method returns E_FAIL, the CLR is no longer usable within the process. Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.|  \n  \n## Remarks  \n The host typically calls `GetMonitorOwner` as part of a deadlock-detection mechanism. The cookie is associated with a monitor when it is created by using a call to [IHostSyncManager::CreateMonitorEvent](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-createmonitorevent-method.md).  \n  \n> [!NOTE]\n>  A call to release the event underlying the monitor might block—but will not deadlock—if a call to this method is currently in effect on the cookie associated with that monitor. Other tasks might also block if they attempt to acquire this monitor.  \n  \n `GetMonitorOwner` always returns immediately and can be called any time after a call to `CreateMonitorEvent`. The host does not need to wait until a task is waiting on the event.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** MSCorEE.h  \n  \n **Library:** Included as a resource in MSCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [ICLRSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md)   \n [IHostSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)","nodes":[{"pos":[4,718],"embed":true,"restype":"x-metadata","content":"title: \"ICLRSyncManager::GetMonitorOwner Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICLRSyncManager.GetMonitorOwner\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRSyncManager::GetMonitorOwner\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICLRSyncManager::GetMonitorOwner method [.NET Framework hosting]\"\n  - \"GetMonitorOwner method [.NET Framework hosting]\"\nms.assetid: 840983a4-396d-47b4-86a0-d35f9b437cdb\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"ICLRSyncManager::GetMonitorOwner Method | Microsoft Docs","nodes":[{"pos":[0,56],"content":"ICLRSyncManager::GetMonitorOwner Method | Microsoft Docs","nodes":[{"content":"ICLRSyncManager::GetMonitorOwner Method | Microsoft Docs","pos":[0,56]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[725,764],"content":"ICLRSyncManager::GetMonitorOwner Method","linkify":"ICLRSyncManager::GetMonitorOwner Method","nodes":[{"content":"ICLRSyncManager::GetMonitorOwner Method","pos":[0,39]}]},{"pos":[765,925],"content":"Gets the <bpt id=\"p1\">[</bpt>IHostTask<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)</ept> instance that owns the monitor identified by the specified cookie.","source":"Gets the [IHostTask](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md) instance that owns the monitor identified by the specified cookie."},{"pos":[934,940],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1069,1079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The cookie associated with the monitor.","pos":[1095,1139]},{"content":"[out] A pointer to the <ph id=\"ph1\">`IHostTask`</ph> that currently owns the monitor, or null if no task has ownership.","pos":[1167,1268],"source":"[out] A pointer to the `IHostTask` that currently owns the monitor, or null if no task has ownership."},{"pos":[1277,1289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"HRESULT","pos":[1296,1303]},{"content":"Description","pos":[1304,1315]},{"content":"S_OK","pos":[1356,1360]},{"pos":[1361,1401],"content":"<ph id=\"ph1\">`GetMonitorOwner`</ph> returned successfully.","source":"`GetMonitorOwner` returned successfully."},{"content":"HOST_E_CLRNOTAVAILABLE","pos":[1406,1428]},{"content":"The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.","pos":[1429,1567]},{"content":"HOST_E_TIMEOUT","pos":[1572,1586]},{"content":"The call timed out.","pos":[1587,1606]},{"content":"HOST_E_NOT_OWNER","pos":[1611,1627]},{"content":"The caller does not own the lock.","pos":[1628,1661]},{"content":"HOST_E_ABANDONED","pos":[1666,1682]},{"content":"An event was canceled while a blocked thread or fiber was waiting on it.","pos":[1683,1755]},{"content":"E_FAIL","pos":[1760,1766]},{"content":"An unknown catastrophic failure occurred.","pos":[1767,1808]},{"content":"When a method returns E_FAIL, the CLR is no longer usable within the process.","pos":[1809,1886]},{"content":"Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.","pos":[1887,1953]},{"pos":[1963,1970],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The host typically calls <ph id=\"ph1\">`GetMonitorOwner`</ph> as part of a deadlock-detection mechanism.","pos":[1974,2059],"source":"The host typically calls `GetMonitorOwner` as part of a deadlock-detection mechanism."},{"content":"The cookie is associated with a monitor when it is created by using a call to <bpt id=\"p1\">[</bpt>IHostSyncManager::CreateMonitorEvent<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-createmonitorevent-method.md)</ept>.","pos":[2060,2273],"source":" The cookie is associated with a monitor when it is created by using a call to [IHostSyncManager::CreateMonitorEvent](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-createmonitorevent-method.md)."},{"pos":[2281,2538],"content":"[!NOTE]\n A call to release the event underlying the monitor might block—but will not deadlock—if a call to this method is currently in effect on the cookie associated with that monitor. Other tasks might also block if they attempt to acquire this monitor.","leadings":["","> "],"nodes":[{"content":"A call to release the event underlying the monitor might block—but will not deadlock—if a call to this method is currently in effect on the cookie associated with that monitor. Other tasks might also block if they attempt to acquire this monitor.","pos":[9,255],"nodes":[{"content":"A call to release the event underlying the monitor might block—but will not deadlock—if a call to this method is currently in effect on the cookie associated with that monitor.","pos":[0,176]},{"content":"Other tasks might also block if they attempt to acquire this monitor.","pos":[177,246]}]}]},{"content":"<ph id=\"ph1\">`GetMonitorOwner`</ph> always returns immediately and can be called any time after a call to <ph id=\"ph2\">`CreateMonitorEvent`</ph>.","pos":[2545,2654],"source":"`GetMonitorOwner` always returns immediately and can be called any time after a call to `CreateMonitorEvent`."},{"content":"The host does not need to wait until a task is waiting on the event.","pos":[2655,2723]},{"pos":[2732,2744],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2748,2852],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2859,2880],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> MSCorEE.h","source":"**Header:** MSCorEE.h"},{"pos":[2887,2937],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Included as a resource in MSCorEE.dll","source":"**Library:** Included as a resource in MSCorEE.dll"},{"pos":[2944,2972],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept>","source":"**.NET Framework Versions:**"},{"pos":[3061,3069],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICLRSyncManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[3073,3180],"source":"[ICLRSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>IHostSyncManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)</ept>","pos":[3184,3292],"source":"[IHostSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)"}]}