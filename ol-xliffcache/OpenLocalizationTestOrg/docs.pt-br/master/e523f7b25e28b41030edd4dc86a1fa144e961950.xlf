<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="volatile.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e523f7b25e28b41030edd4dc86a1fa144e961950</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\volatile.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6388118a9f5adcda20fe4a14d04586a4bfd2513</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8934b333ef407c41fb86ca2ed3a620f389da0883</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>volatile - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>volatile (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`volatile`</ph> keyword indicates that a field might be modified by multiple threads that are executing at the same time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The compiler, the runtime system, and even hardware may rearrange reads and writes to memory locations for performance reasons.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Fields that are declared <ph id="ph1">`volatile`</ph> are not subject to these optimizations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`volatile`</ph> modifier ensures that all threads will observe volatile writes performed by any other thread in the order in which they were performed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There is no guarantee of a single total ordering of volatile writes as seen from all threads of execution.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`volatile`</ph> keyword can be applied to fields of these types:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reference types.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Pointer types (in an unsafe context).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Note that although the pointer itself can be volatile, the object that it points to cannot.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In other words, you cannot declare a "pointer to volatile."</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Simple types such as <ph id="ph1">`sbyte`</ph>, <ph id="ph2">`byte`</ph>, <ph id="ph3">`short`</ph>, <ph id="ph4">`ushort`</ph>, <ph id="ph5">`int`</ph>, <ph id="ph6">`uint`</ph>, <ph id="ph7">`char`</ph>, <ph id="ph8">`float`</ph>, and <ph id="ph9">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`enum`</ph> type with one of the following base types: <ph id="ph2">`byte`</ph>, <ph id="ph3">`sbyte`</ph>, <ph id="ph4">`short`</ph>, <ph id="ph5">`ushort`</ph>, <ph id="ph6">`int`</ph>, or <ph id="ph7">`uint`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Generic type parameters known to be reference types.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> and <ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Other types, including <ph id="ph1">`double`</ph> and <ph id="ph2">`long`</ph>, cannot be marked <ph id="ph3">`volatile`</ph> because reads and writes to fields of those types cannot be guaranteed to be atomic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To protect multi-threaded access to those types of fields, use the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class members or protect access using the <bpt id="p1">[</bpt><ph id="ph2">`lock`</ph><ept id="p1">](lock-statement.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`volatile`</ph> keyword can only be applied to fields of a <ph id="ph2">`class`</ph> or <ph id="ph3">`struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Local variables cannot be declared <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example shows how to declare a public field variable as <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how an auxiliary or worker thread can be created and used to perform processing in parallel with that of the primary thread.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about multithreading, see <bpt id="p1">[</bpt>Managed Threading<ept id="p1">](../../../standard/threading/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>With the <ph id="ph1">`volatile`</ph> modifier added to the declaration of <ph id="ph2">`_shouldStop`</ph> in place, you'll always get the same results (similar to the excerpt shown in the preceding code).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, without that modifier on the <ph id="ph1">`_shouldStop`</ph> member, the behavior is unpredictable.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoWork`</ph> method may optimize the member access, resulting in reading stale data.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because of the nature of multi-threaded programming, the number of stale reads is unpredictable.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Different runs of the program will produce somewhat different results.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# language specification: volatile keyword<ept id="p1">](../../../../_csharplang/spec/classes.md#volatile-fields)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modifiers<ept id="p1">](modifiers.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>lock statement<ept id="p1">](lock-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>