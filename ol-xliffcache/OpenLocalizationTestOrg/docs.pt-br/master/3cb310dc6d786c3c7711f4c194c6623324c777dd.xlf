<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="marshaling-data-with-platform-invoke.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cb310dc6d786c3c7711f4c194c6623324c777dd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\marshaling-data-with-platform-invoke.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">657c3f422c44ba7b248943b790e6f45d2095783d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a24db0cf1f58108ee1e31614a79d56790c72797</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Marshaling Data with Platform Invoke</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Marshaling Data with Platform Invoke</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To call functions exported from an unmanaged library, a .NET Framework application requires a function prototype in managed code that represents the unmanaged function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To create a prototype that enables platform invoke to marshal data correctly, you must do the following:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to the static function or method in managed code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Substitute managed data types for unmanaged data types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use the documentation supplied with an unmanaged function to construct an equivalent managed prototype by applying the attribute with its optional fields and substituting managed data types for unmanaged types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For instructions about how to apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](../../../docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This section provides samples that demonstrate how to create managed function prototypes for passing arguments to and receiving return values from functions exported by unmanaged libraries.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The samples also demonstrate when to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute and the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class to explicitly marshal data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Platform invoke data types</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table lists data types used in the Windows APIs and C-style functions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Many unmanaged libraries contain functions that pass these data types as parameters and return values.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The third column lists the corresponding .NET Framework built-in value type or class that you use in managed code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In some cases, you can substitute a type of the same size for the type listed in the table.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Unmanaged type in Windows APIs</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unmanaged C language type</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Managed type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Applied to a function that does not return a value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.UIntPtr?displayProperty=nameWithType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>32 bits on 32-bit Windows operating systems, 64 bits on 64-bit Windows operating systems.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>8 bits</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>16 bits</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>16 bits</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>32 bits</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>32 bits</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>32 bits</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Boolean?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>32 bits</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>32 bits</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>32 bits</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Decorate with ANSI.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Decorate with Unicode.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Decorate with ANSI.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Decorate with ANSI.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Decorate with Unicode.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Decorate with Unicode.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>32 bits</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>64 bits</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For corresponding types in Visual Basic, C#, and C++, see the <bpt id="p1">[</bpt>Introduction to the .NET Framework Class Library<ept id="p1">](../../standard/class-library-overview.md#system-namespace)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>PinvokeLib.dll</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following code defines the library functions provided by Pinvoke.dll.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Many samples described in this section call this library.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>