<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="formulate-projections.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7f5c064f16e9814ffe999b523f3dd88921dcc24</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\formulate-projections.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41e108d90edf8714aaa3d6cf078b6d7c14b0fa0f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e4f01e7cf996eb89a9c9134a6042390afbb0809</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Formulate Projections | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Formulate Projections</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following examples show how the <ph id="ph1">`select`</ph> statement in C# and <ph id="ph2">`Select`</ph> statement in <ph id="ph3">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> can be combined with other features to form query projections.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Select`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`select`</ph> clause in C#) to return a sequence of contact names for <ph id="ph4">`Customers`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#57<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#57)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#57<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#57)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Select`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`select`</ph> clause in C#) and <bpt id="p1">*</bpt>anonymous types<ept id="p1">*</ept> to return a sequence of contact names and telephone numbers for <ph id="ph4">`Customers`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#58<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#58)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#58<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#58)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Select`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`select`</ph> clause in C#) and <bpt id="p1">*</bpt>anonymous types<ept id="p1">*</ept> to return a sequence of names and telephone numbers for employees.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FirstName`</ph> and <ph id="ph2">`LastName`</ph> fields are combined into a single field (<ph id="ph3">`Name`</ph>), and the <ph id="ph4">`HomePhone`</ph> field is renamed to <ph id="ph5">`Phone`</ph> in the resulting sequence.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#59<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#59)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#59<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#59)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Select`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`select`</ph> clause in C#) and <bpt id="p1">*</bpt>anonymous types<ept id="p1">*</ept> to return a sequence of all <ph id="ph4">`ProductID`</ph>s and a calculated value named <ph id="ph5">`HalfPrice`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This value is set to the <ph id="ph1">`UnitPrice`</ph> divided by 2.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#60<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#60)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#60<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#60)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Select`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`select`</ph> clause in C#) and a <bpt id="p1">*</bpt>conditional statement<ept id="p1">*</ept> to return a sequence of product name and product availability.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#61<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#61)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#61<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#61)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> <ph id="ph2">`Select`</ph> clause (<ph id="ph3">`select`</ph> clause in C#) and a <bpt id="p1">*</bpt>known type<ept id="p1">*</ept> (Name) to return a sequence of the names of employees.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#62<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#62)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#62<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#62)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`Select`</ph> and <ph id="ph2">`Where`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph4">`select`</ph> and <ph id="ph5">`where`</ph> in C#) to return a <bpt id="p1">*</bpt>filtered sequence<ept id="p1">*</ept> of contact names for customers in London.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#63<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#63)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#63<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#63)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">`Select`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`select`</ph> clause in C#) and <bpt id="p1">*</bpt>anonymous types<ept id="p1">*</ept> to return a <bpt id="p2">*</bpt>shaped subset<ept id="p2">*</ept> of the data about customers.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#64<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#64)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#64<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#64)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example uses nested queries to return the following results:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A sequence of all orders and their corresponding <ph id="ph1">`OrderID`</ph>s.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A subsequence of the items in the order for which there is a discount.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The amount of money saved if the cost of shipping is not included.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#65<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#65)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#65<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#65)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Examples<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>