<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="mgmtclassgen-exe.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0a9b601e77c232c334b098b88e76228c16b926f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\mgmtclassgen-exe.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">870e27a8255974893e59e43c1a0b1e601d12d4c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88895981688496aa0021587bb67cc9f7f20ff3d7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Mgmtclassgen.exe (Management Strongly Typed Class Generator) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Mgmtclassgen.exe (Management Strongly Typed Class Generator)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Management Strongly Typed Class Generator tool enables you to quickly generate an early-bound managed class for a specified Windows Management Instrumentation (WMI) class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The generated class simplifies the code you must write to access an instance of the WMI class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>WMIClass<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Windows Management Instrumentation class for which to generate an early-bound managed class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/l<ept id="p1">**</ept>  <bpt id="p2">*</bpt>language<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specifies the language in which to generate the early-bound managed class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can specify <bpt id="p1">**</bpt>CS<ept id="p1">**</ept> (C#; default), <bpt id="p2">**</bpt>VB<ept id="p2">**</ept> (Visual Basic),  <bpt id="p3">**</bpt>MC<ept id="p3">**</ept> (C++), or <bpt id="p4">**</bpt>JS<ept id="p4">**</ept> (JScript) as the language argument.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/m<ept id="p1">**</ept>  <bpt id="p2">*</bpt>machine<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specifies the computer to connect to, where the WMI class resides.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The default is the local computer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/n<ept id="p1">**</ept>  <bpt id="p2">*</bpt>path<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Specifies the path to the WMI namespace that contains the WMI class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you do not specify this option, the tool generates code for <bpt id="p1">*</bpt>WMIClass<ept id="p1">*</ept> in the default <bpt id="p2">**</bpt>Root\cimv2<ept id="p2">**</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/o<ept id="p1">**</ept>  <bpt id="p2">*</bpt>classnamespace<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Specifies the .NET namespace in which to generate the managed code class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you do not specify this option, the tool generates the namespace using the WMI namespace and the schema prefix.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The schema prefix is the part of the class name preceding the underscore character.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, for the <bpt id="p1">**</bpt>Win32_OperatingSystem<ept id="p1">**</ept> class in the <bpt id="p2">**</bpt>Root\cimv2<ept id="p2">**</ept> namespace, the tool would generate the class in <bpt id="p3">**</bpt>ROOT.CIMV2.Win32<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>filepath<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specifies the path to the file in which to save the generated code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you do not specify this option, the tool creates the file in the current directory.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It names the class and file in which it generates the class using the <bpt id="p1">*</bpt>WMIClass<ept id="p1">*</ept> argument.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name of the class and the file are the same as the name of the <bpt id="p1">*</bpt>WMIClass.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>WMIClass<ept id="p1">*</ept> contains an underscore character, the tool uses the part of the class name following the underscore character.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, if the <bpt id="p1">*</bpt>WMIClass<ept id="p1">*</ept> name is in the format <bpt id="p2">**</bpt>Win32_LogicalDisk<ept id="p2">**</ept>, the generated class and file is named "logicaldisk".</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If a file already exists, the tool overwrites the existing file.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/pw<ept id="p1">**</ept>  <bpt id="p2">*</bpt>password<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specifies the password to use when logging on to a computer specified by the <bpt id="p1">**</bpt>/m<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/u<ept id="p1">**</ept>  <bpt id="p2">*</bpt>user name<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Specifies the user name to use when logging on to a computer specified by the <bpt id="p1">**</bpt>/m<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Mgmtclassgen.exe uses the <ph id="ph1">&lt;xref:System.Management.ManagementClass.GetStronglyTypedClassCode%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Therefore, you can use any custom code provider to generate code in managed languages other than C#, Visual Basic, and JScript.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Note that generated classes are bound to the schema for which they are generated.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the underlying schema changes, you must regenerate the class if you want it to reflect changes to the schema.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following table shows how WMI Common Information Model (CIM) types map to data types in a generated class:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CIM type</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Data type in the generated class</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CIM_SINT8</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SByte<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CIM_UINT8</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Byte<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CIM_SINT16</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Int16<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CIM_UINT16</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UInt16<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CIM_SINT32</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Int32<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>SIM_UINT32</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UInt32<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CIM_SINT64</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Int64<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CIM_UINT64</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UInt64<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CIM_REAL32</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Single<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CIM_REAL64</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Double<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CIM_BOOLEAN</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Boolean<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CIM_String</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>String<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CIM_DATETIME</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> or <bpt id="p2">**</bpt>TimeSpan<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CIM_REFERENCE</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ManagementPath<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CIM_CHAR16</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Char<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CIM_OBJECT</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ManagementBaseObject<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CIM_IUNKNOWN</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CIM_ARRAY</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Array of the above mentioned objects</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Note the following behaviors when you generate a WMI class:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>It is possible for a standard public property or method to have the same name as an existing property or method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If this occurs, the tool changes the name of the property or method in the generated class to avoid naming conflicts.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>It is possible for the name of a property or method in a generated class to be a keyword in the target programming language.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If this occurs, the tool changes the name of the property or method in the generated class to avoid naming conflicts.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In WMI, qualifiers are modifiers that contain information to describe a class, instance, property, or method.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>WMI uses standard qualifiers such as <bpt id="p1">**</bpt>Read<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Write<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Key<ept id="p3">**</ept> to describe a property in a generated class.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For example, a property that is modified with a <bpt id="p1">**</bpt>Read<ept id="p1">**</ept> qualifier is defined only with a property <bpt id="p2">**</bpt>get<ept id="p2">**</ept> accessor in the generated class.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Because a property marked with the <bpt id="p1">**</bpt>Read<ept id="p1">**</ept> qualifier is intended to be read-only, a <bpt id="p2">**</bpt>set<ept id="p2">**</ept> accessor is not defined.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A numeric property can be modified by the <bpt id="p1">**</bpt>Values<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ValueMaps<ept id="p2">**</ept> qualifiers to indicate that the property can be set only to specified permissible values.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>An enumeration is generated with these <bpt id="p1">**</bpt>Values<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ValueMaps<ept id="p2">**</ept> and the property is mapped to the enumeration.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The WMI uses the term singleton to describe a class that can have only one instance.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Therefore, the default constructor for a singleton class will initialize the class to the only instance of the class.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A WMI class can have properties that are objects.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When you generate a strongly-typed class for this type of WMI class, you should consider generating strongly-typed classes for the types of the embedded object properties.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This will allow you to access the embedded objects in a strongly-typed manner.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Note that the generated code might not be able to detect the type of the embedded object.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In this case, a comment will be created in the generated code to notify you of this issue.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You can then modify the generated code to type the property to the other generated class.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In WMI, the data value of the CIM_DATETIME data type can represent either a specific date and time or a time interval.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If the data value represents a date and time, the data type in the generated class is <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If the data value represents a time interval, the data type in the generated class is <bpt id="p1">**</bpt>TimeSpan<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can alternately generate a strongly-typed class using the Server Explorer Management Extension in Visual Studio .NET.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information about WMI, see the <bpt id="p1">**</bpt>Windows Management Instrumentation<ept id="p1">**</ept> topic in the Platform SDK documentation.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following command generates a managed class in C# code for the <bpt id="p1">**</bpt>Win32_LogicalDisk<ept id="p1">**</ept> WMI class in the <bpt id="p2">**</bpt>Root\cimv2<ept id="p2">**</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The tool writes the managed class to the source file at c:\disk.cs in the <bpt id="p1">**</bpt>ROOT.CIMV2.Win32<ept id="p1">**</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use a generated class programmatically.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>First, an instance of the class is enumerated and the path is printed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Next, an instance of the generated class to be initialized is created with an instance of WMI.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Process`</ph> is the class generated for <bpt id="p1">**</bpt>Win32_Process<ept id="p1">**</ept> and <ph id="ph2">`LogicalDisk`</ph> is the class generated for <bpt id="p2">**</bpt>Win32_LogicalDisk<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>Root\cimv2<ept id="p3">**</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>