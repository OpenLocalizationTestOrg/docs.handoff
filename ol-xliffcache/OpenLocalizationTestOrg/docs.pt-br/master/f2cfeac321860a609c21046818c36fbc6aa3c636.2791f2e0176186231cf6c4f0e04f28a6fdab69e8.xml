{"content":"---\ntitle: Classes | C# Guide\ndescription: Learn about the class types and how you create them\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nms.author: wiwagn\nms.date: 10/10/2016\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: 95c686ba-ae4f-440e-8e94-0dbd6e04d11f\n---\n\n# Classes\nA *class* is a construct that enables you to create your own custom types by grouping together variables of other types, methods and events. A class is like a blueprint. It defines the data and behavior of a type. If the class is not declared as static, client code can use it by creating *objects* or *instances* which are assigned to a variable. The variable remains in memory until all references to it go out of scope. At that time, the CLR marks it as eligible for garbage collection. If the class is declared as [static](https://msdn.microsoft.com/library/98f28cdx.aspx), then only one copy exists in memory and client code can only access it through the class itself, not an *instance variable*. For more information, see [Static classes and static class members](https://msdn.microsoft.com/library/79b3xss3.aspx).  \n\n## Reference types  \nA type that is defined as a [class](https://msdn.microsoft.com/library/0b0thckt.aspx) is a *reference type*. At run time, when you declare a variable of a reference type, the variable contains the value [null](https://msdn.microsoft.com/library/edakx9da.aspx) until you explicitly create an instance of the object by using the [new](https://msdn.microsoft.com/library/51y09td4.aspx) operator, or assign it an object that has been created elsewhere by using [new](https://msdn.microsoft.com/library/51y09td4.aspx), as shown in the following example:  \n\n[!code-csharp[Reference Types](../../samples/snippets/csharp/concepts/classes/reference-type.cs)]\n  \nWhen the object is created, the memory is allocated on the managed heap, and the variable holds only a reference to the location of the object. Types on the managed heap require overhead both when they are allocated and when they are reclaimed by the automatic memory management functionality of the CLR, which is known as *garbage collection*. However, garbage collection is also highly optimized, and in most scenarios, it does not create a performance issue. For more information about garbage collection, see [Automatic memory management and garbage collection](../standard/garbage-collection/gc.md).  \n  \nReference types fully support *inheritance*, a fundamental characteristic of object-oriented programming. When you create a class, you can inherit from any other interface or class that is not defined as [sealed](https://msdn.microsoft.com/library/88c54tsw.aspx), and other classes can inherit from your class and override your virtual methods. For more information, see [Inheritance](https://msdn.microsoft.com/library/ms173149.aspx).\n\n## Declaring classes  \nClasses are declared by using the [class](https://msdn.microsoft.com/library/0b0thckt.aspx) keyword, as shown in the following example:  \n  \n[!code-csharp[Declaring Classes](../../samples/snippets/csharp/concepts/classes/declaring-classes.cs)]  \n  \nThe **class** keyword is preceded by the access modifier. Because [public](https://msdn.microsoft.com/library/yzh058ae.aspx) is used in this case, anyone can create objects from this class. The name of the class follows the **class** keyword. The remainder of the definition is the class body, where the behavior and data are defined. Fields, properties, methods, and events on a class are collectively referred to as *class members*.  \n  \n## Creating objects  \nA class defines a type of object, but it is not an object itself. An object is a concrete entity based on a class, and is sometimes referred to as an instance of a class.  \n  \nObjects can be created by using the [new](https://msdn.microsoft.com/library/51y09td4.aspx) keyword followed by the name of the class that the object will be based on, like this:  \n  \n[!code-csharp[Creating Objects](../../samples/snippets/csharp/concepts/classes/creating-objects.cs)]   \n  \nWhen an instance of a class is created, a reference to the object is passed back to the programmer. In the previous example, `object1` is a reference to an object that is based on `Customer`. This reference refers to the new object but does not contain the object data itself. In fact, you can create an object reference without creating an object at all:  \n  \n[!code-csharp[Creating Objects](../../samples/snippets/csharp/concepts/classes/creating-objects2.cs)]  \n  \nWe do not recommend creating object references such as this one that does not refer to an object because trying to access an object through such a reference will fail at run time. However, such a reference can be made to refer to an object, either by creating a new object, or by assigning it to an existing object, such as this:  \n  \n[!code-csharp[Creating Objects](../../samples/snippets/csharp/concepts/classes/creating-objects3.cs)]  \n  \nThis code creates two object references that both refer to the same object. Therefore, any changes to the object made through `object3` will be reflected in subsequent uses of `object4`. Because objects that are based on classes are referred to by reference, classes are known as reference types.  \n  \n## Class inheritance  \nInheritance is accomplished by using a *derivation*, which means a class is declared by using a *base class* from which it inherits data and behavior. A base class is specified by appending a colon and the name of the base class following the derived class name, like this:  \n  \n[!code-csharp[Inheritance](../../samples/snippets/csharp/concepts/classes/inheritance.cs)]  \n  \nWhen a class declares a base class, it inherits all the members of the base class except the constructors.  \n  \nUnlike C++, a class in C# can only directly inherit from one base class. However, because a base class may itself inherit from another class, a class may indirectly inherit multiple base classes. Furthermore, a class can directly implement more than one interface. For more information, see [Interfaces](programming-guide/interfaces/index.md).  \n  \nA class can be declared [abstract](https://msdn.microsoft.com/library/sf985hc5.aspx). An abstract class contains abstract methods that have a signature definition but no implementation. Abstract classes cannot be instantiated. They can only be used through derived classes that implement the abstract methods. By contrast, a [sealed](https://msdn.microsoft.com/library/88c54tsw.aspx) class does not allow other classes to derive from it. For more information, see [Abstract and sealed classes and class members](https://msdn.microsoft.com/library/ms173150.aspx).  \n  \nClass definitions can be split between different source files. For more information, see [Partial class definitions](https://msdn.microsoft.com/library/wa80x488.aspx).  \n  \n \n## Example\nIn the following example, a public class that contains a single field, a method, and a special method called a constructor is defined. For more information, see [Constructors](https://msdn.microsoft.com/library/ace5hbzh.aspx). The class is then instantiated with the **new** keyword.\n\n[!code-csharp[Class Example](../../samples/snippets/csharp/concepts/classes/class-example.cs)]  \n  \n## C# language specification  \nFor more information, see the [C# language specification](https://msdn.microsoft.com/library/ms228593.aspx). The language specification is the definitive source for C# syntax and usage.\n  \n## See also  \n[C# programming guide](https://msdn.microsoft.com/library/67ef8sbd.aspx)   \n[Polymorphism](https://msdn.microsoft.com/library/ms173152.aspx)   \n[Class and struct members](https://msdn.microsoft.com/library/ms173113.aspx)   \n[Class and struct methods](https://msdn.microsoft.com/library/ms173114.aspx)   \n[Constructors](https://msdn.microsoft.com/library/ace5hbzh.aspx)   \n[Finalizers](https://msdn.microsoft.com/library/66x5fx1b.aspx)   \n[Objects](https://msdn.microsoft.com/library/ms173110.aspx)\n\n","nodes":[{"pos":[11,29],"content":"Classes | C# Guide","needQuote":true,"needEscape":true,"nodes":[{"content":"Classes | C# Guide","pos":[0,18]}]},{"pos":[43,94],"content":"Learn about the class types and how you create them","needQuote":true,"needEscape":true,"nodes":[{"content":"Learn about the class types and how you create them","pos":[0,51]}]},{"pos":[105,124],"content":".NET, .NET Core, C#","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core, C#","pos":[0,19]}]},{"pos":[319,326],"content":"Classes","linkify":"Classes","nodes":[{"content":"Classes","pos":[0,7]}]},{"content":"A <bpt id=\"p1\">*</bpt>class<ept id=\"p1\">*</ept> is a construct that enables you to create your own custom types by grouping together variables of other types, methods and events.","pos":[327,467],"source":"A *class* is a construct that enables you to create your own custom types by grouping together variables of other types, methods and events."},{"content":"A class is like a blueprint.","pos":[468,496]},{"content":"It defines the data and behavior of a type.","pos":[497,540]},{"content":"If the class is not declared as static, client code can use it by creating <bpt id=\"p1\">*</bpt>objects<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>instances<ept id=\"p2\">*</ept> which are assigned to a variable.","pos":[541,674],"source":" If the class is not declared as static, client code can use it by creating *objects* or *instances* which are assigned to a variable."},{"content":"The variable remains in memory until all references to it go out of scope.","pos":[675,749]},{"content":"At that time, the CLR marks it as eligible for garbage collection.","pos":[750,816]},{"content":"If the class is declared as <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](https://msdn.microsoft.com/library/98f28cdx.aspx)</ept>, then only one copy exists in memory and client code can only access it through the class itself, not an <bpt id=\"p2\">*</bpt>instance variable<ept id=\"p2\">*</ept>.","pos":[817,1029],"source":" If the class is declared as [static](https://msdn.microsoft.com/library/98f28cdx.aspx), then only one copy exists in memory and client code can only access it through the class itself, not an *instance variable*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Static classes and static class members<ept id=\"p1\">](https://msdn.microsoft.com/library/79b3xss3.aspx)</ept>.","pos":[1030,1148],"source":" For more information, see [Static classes and static class members](https://msdn.microsoft.com/library/79b3xss3.aspx)."},{"pos":[1155,1170],"content":"Reference types","linkify":"Reference types","nodes":[{"content":"Reference types","pos":[0,15]}]},{"content":"A type that is defined as a <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](https://msdn.microsoft.com/library/0b0thckt.aspx)</ept> is a <bpt id=\"p2\">*</bpt>reference type<ept id=\"p2\">*</ept>.","pos":[1173,1281],"source":"A type that is defined as a [class](https://msdn.microsoft.com/library/0b0thckt.aspx) is a *reference type*."},{"content":"At run time, when you declare a variable of a reference type, the variable contains the value <bpt id=\"p1\">[</bpt>null<ept id=\"p1\">](https://msdn.microsoft.com/library/edakx9da.aspx)</ept> until you explicitly create an instance of the object by using the <bpt id=\"p2\">[</bpt>new<ept id=\"p2\">](https://msdn.microsoft.com/library/51y09td4.aspx)</ept> operator, or assign it an object that has been created elsewhere by using <bpt id=\"p3\">[</bpt>new<ept id=\"p3\">](https://msdn.microsoft.com/library/51y09td4.aspx)</ept>, as shown in the following example:","pos":[1282,1721],"source":" At run time, when you declare a variable of a reference type, the variable contains the value [null](https://msdn.microsoft.com/library/edakx9da.aspx) until you explicitly create an instance of the object by using the [new](https://msdn.microsoft.com/library/51y09td4.aspx) operator, or assign it an object that has been created elsewhere by using [new](https://msdn.microsoft.com/library/51y09td4.aspx), as shown in the following example:"},{"pos":[1725,1822],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Reference Types<ept id=\"p2\">](../../samples/snippets/csharp/concepts/classes/reference-type.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Reference Types](../../samples/snippets/csharp/concepts/classes/reference-type.cs)]"},{"content":"When the object is created, the memory is allocated on the managed heap, and the variable holds only a reference to the location of the object.","pos":[1826,1969]},{"content":"Types on the managed heap require overhead both when they are allocated and when they are reclaimed by the automatic memory management functionality of the CLR, which is known as <bpt id=\"p1\">*</bpt>garbage collection<ept id=\"p1\">*</ept>.","pos":[1970,2170],"source":" Types on the managed heap require overhead both when they are allocated and when they are reclaimed by the automatic memory management functionality of the CLR, which is known as *garbage collection*."},{"content":"However, garbage collection is also highly optimized, and in most scenarios, it does not create a performance issue.","pos":[2171,2287]},{"content":"For more information about garbage collection, see <bpt id=\"p1\">[</bpt>Automatic memory management and garbage collection<ept id=\"p1\">](../standard/garbage-collection/gc.md)</ept>.","pos":[2288,2430],"source":" For more information about garbage collection, see [Automatic memory management and garbage collection](../standard/garbage-collection/gc.md)."},{"content":"Reference types fully support <bpt id=\"p1\">*</bpt>inheritance<ept id=\"p1\">*</ept>, a fundamental characteristic of object-oriented programming.","pos":[2436,2541],"source":"Reference types fully support *inheritance*, a fundamental characteristic of object-oriented programming."},{"content":"When you create a class, you can inherit from any other interface or class that is not defined as <bpt id=\"p1\">[</bpt>sealed<ept id=\"p1\">](https://msdn.microsoft.com/library/88c54tsw.aspx)</ept>, and other classes can inherit from your class and override your virtual methods.","pos":[2542,2780],"source":" When you create a class, you can inherit from any other interface or class that is not defined as [sealed](https://msdn.microsoft.com/library/88c54tsw.aspx), and other classes can inherit from your class and override your virtual methods."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Inheritance<ept id=\"p1\">](https://msdn.microsoft.com/library/ms173149.aspx)</ept>.","pos":[2781,2871],"source":" For more information, see [Inheritance](https://msdn.microsoft.com/library/ms173149.aspx)."},{"pos":[2876,2893],"content":"Declaring classes","linkify":"Declaring classes","nodes":[{"content":"Declaring classes","pos":[0,17]}]},{"pos":[2896,3031],"content":"Classes are declared by using the <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](https://msdn.microsoft.com/library/0b0thckt.aspx)</ept> keyword, as shown in the following example:","source":"Classes are declared by using the [class](https://msdn.microsoft.com/library/0b0thckt.aspx) keyword, as shown in the following example:"},{"pos":[3037,3139],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Declaring Classes<ept id=\"p2\">](../../samples/snippets/csharp/concepts/classes/declaring-classes.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Declaring Classes](../../samples/snippets/csharp/concepts/classes/declaring-classes.cs)]"},{"content":"The <bpt id=\"p1\">**</bpt>class<ept id=\"p1\">**</ept> keyword is preceded by the access modifier.","pos":[3145,3202],"source":"The **class** keyword is preceded by the access modifier."},{"content":"Because <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](https://msdn.microsoft.com/library/yzh058ae.aspx)</ept> is used in this case, anyone can create objects from this class.","pos":[3203,3334],"source":" Because [public](https://msdn.microsoft.com/library/yzh058ae.aspx) is used in this case, anyone can create objects from this class."},{"content":"The name of the class follows the <bpt id=\"p1\">**</bpt>class<ept id=\"p1\">**</ept> keyword.","pos":[3335,3387],"source":" The name of the class follows the **class** keyword."},{"content":"The remainder of the definition is the class body, where the behavior and data are defined.","pos":[3388,3479]},{"content":"Fields, properties, methods, and events on a class are collectively referred to as <bpt id=\"p1\">*</bpt>class members<ept id=\"p1\">*</ept>.","pos":[3480,3579],"source":" Fields, properties, methods, and events on a class are collectively referred to as *class members*."},{"pos":[3588,3604],"content":"Creating objects","linkify":"Creating objects","nodes":[{"content":"Creating objects","pos":[0,16]}]},{"content":"A class defines a type of object, but it is not an object itself.","pos":[3607,3672]},{"content":"An object is a concrete entity based on a class, and is sometimes referred to as an instance of a class.","pos":[3673,3777]},{"pos":[3783,3961],"content":"Objects can be created by using the <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](https://msdn.microsoft.com/library/51y09td4.aspx)</ept> keyword followed by the name of the class that the object will be based on, like this:","source":"Objects can be created by using the [new](https://msdn.microsoft.com/library/51y09td4.aspx) keyword followed by the name of the class that the object will be based on, like this:"},{"pos":[3967,4067],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Creating Objects<ept id=\"p2\">](../../samples/snippets/csharp/concepts/classes/creating-objects.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Creating Objects](../../samples/snippets/csharp/concepts/classes/creating-objects.cs)]"},{"content":"When an instance of a class is created, a reference to the object is passed back to the programmer.","pos":[4074,4173]},{"content":"In the previous example, <ph id=\"ph1\">`object1`</ph> is a reference to an object that is based on <ph id=\"ph2\">`Customer`</ph>.","pos":[4174,4265],"source":" In the previous example, `object1` is a reference to an object that is based on `Customer`."},{"content":"This reference refers to the new object but does not contain the object data itself.","pos":[4266,4350]},{"content":"In fact, you can create an object reference without creating an object at all:","pos":[4351,4429]},{"pos":[4435,4536],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Creating Objects<ept id=\"p2\">](../../samples/snippets/csharp/concepts/classes/creating-objects2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Creating Objects](../../samples/snippets/csharp/concepts/classes/creating-objects2.cs)]"},{"content":"We do not recommend creating object references such as this one that does not refer to an object because trying to access an object through such a reference will fail at run time.","pos":[4542,4721]},{"content":"However, such a reference can be made to refer to an object, either by creating a new object, or by assigning it to an existing object, such as this:","pos":[4722,4871]},{"pos":[4877,4978],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Creating Objects<ept id=\"p2\">](../../samples/snippets/csharp/concepts/classes/creating-objects3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Creating Objects](../../samples/snippets/csharp/concepts/classes/creating-objects3.cs)]"},{"content":"This code creates two object references that both refer to the same object.","pos":[4984,5059]},{"content":"Therefore, any changes to the object made through <ph id=\"ph1\">`object3`</ph> will be reflected in subsequent uses of <ph id=\"ph2\">`object4`</ph>.","pos":[5060,5170],"source":" Therefore, any changes to the object made through `object3` will be reflected in subsequent uses of `object4`."},{"content":"Because objects that are based on classes are referred to by reference, classes are known as reference types.","pos":[5171,5280]},{"pos":[5289,5306],"content":"Class inheritance","linkify":"Class inheritance","nodes":[{"content":"Class inheritance","pos":[0,17]}]},{"content":"Inheritance is accomplished by using a <bpt id=\"p1\">*</bpt>derivation<ept id=\"p1\">*</ept>, which means a class is declared by using a <bpt id=\"p2\">*</bpt>base class<ept id=\"p2\">*</ept> from which it inherits data and behavior.","pos":[5309,5459],"source":"Inheritance is accomplished by using a *derivation*, which means a class is declared by using a *base class* from which it inherits data and behavior."},{"content":"A base class is specified by appending a colon and the name of the base class following the derived class name, like this:","pos":[5460,5582]},{"pos":[5588,5678],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Inheritance<ept id=\"p2\">](../../samples/snippets/csharp/concepts/classes/inheritance.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Inheritance](../../samples/snippets/csharp/concepts/classes/inheritance.cs)]"},{"content":"When a class declares a base class, it inherits all the members of the base class except the constructors.","pos":[5684,5790]},{"content":"Unlike C++, a class in C# can only directly inherit from one base class.","pos":[5796,5868]},{"content":"However, because a base class may itself inherit from another class, a class may indirectly inherit multiple base classes.","pos":[5869,5991]},{"content":"Furthermore, a class can directly implement more than one interface.","pos":[5992,6060]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](programming-guide/interfaces/index.md)</ept>.","pos":[6061,6139],"source":" For more information, see [Interfaces](programming-guide/interfaces/index.md)."},{"content":"A class can be declared <bpt id=\"p1\">[</bpt>abstract<ept id=\"p1\">](https://msdn.microsoft.com/library/sf985hc5.aspx)</ept>.","pos":[6145,6230],"source":"A class can be declared [abstract](https://msdn.microsoft.com/library/sf985hc5.aspx)."},{"content":"An abstract class contains abstract methods that have a signature definition but no implementation.","pos":[6231,6330]},{"content":"Abstract classes cannot be instantiated.","pos":[6331,6371]},{"content":"They can only be used through derived classes that implement the abstract methods.","pos":[6372,6454]},{"content":"By contrast, a <bpt id=\"p1\">[</bpt>sealed<ept id=\"p1\">](https://msdn.microsoft.com/library/88c54tsw.aspx)</ept> class does not allow other classes to derive from it.","pos":[6455,6582],"source":" By contrast, a [sealed](https://msdn.microsoft.com/library/88c54tsw.aspx) class does not allow other classes to derive from it."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Abstract and sealed classes and class members<ept id=\"p1\">](https://msdn.microsoft.com/library/ms173150.aspx)</ept>.","pos":[6583,6707],"source":" For more information, see [Abstract and sealed classes and class members](https://msdn.microsoft.com/library/ms173150.aspx)."},{"content":"Class definitions can be split between different source files.","pos":[6713,6775]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Partial class definitions<ept id=\"p1\">](https://msdn.microsoft.com/library/wa80x488.aspx)</ept>.","pos":[6776,6880],"source":" For more information, see [Partial class definitions](https://msdn.microsoft.com/library/wa80x488.aspx)."},{"pos":[6891,6898],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, a public class that contains a single field, a method, and a special method called a constructor is defined.","pos":[6899,7033]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](https://msdn.microsoft.com/library/ace5hbzh.aspx)</ept>.","pos":[7034,7125],"source":" For more information, see [Constructors](https://msdn.microsoft.com/library/ace5hbzh.aspx)."},{"content":"The class is then instantiated with the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> keyword.","pos":[7126,7182],"source":" The class is then instantiated with the **new** keyword."},{"pos":[7184,7278],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Class Example<ept id=\"p2\">](../../samples/snippets/csharp/concepts/classes/class-example.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Class Example](../../samples/snippets/csharp/concepts/classes/class-example.cs)]"},{"pos":[7287,7312],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>C# language specification<ept id=\"p1\">](https://msdn.microsoft.com/library/ms228593.aspx)</ept>.","pos":[7315,7423],"source":"For more information, see the [C# language specification](https://msdn.microsoft.com/library/ms228593.aspx)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[7424,7500]},{"pos":[7507,7515],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# programming guide<ept id=\"p1\">](https://msdn.microsoft.com/library/67ef8sbd.aspx)</ept><ph id=\"ph1\"> </ph>","pos":[7518,7591],"source":"[C# programming guide](https://msdn.microsoft.com/library/67ef8sbd.aspx) "},{"content":"<bpt id=\"p1\">[</bpt>Polymorphism<ept id=\"p1\">](https://msdn.microsoft.com/library/ms173152.aspx)</ept><ph id=\"ph1\"> </ph>","pos":[7594,7659],"source":"[Polymorphism](https://msdn.microsoft.com/library/ms173152.aspx) "},{"content":"<bpt id=\"p1\">[</bpt>Class and struct members<ept id=\"p1\">](https://msdn.microsoft.com/library/ms173113.aspx)</ept><ph id=\"ph1\"> </ph>","pos":[7662,7739],"source":"[Class and struct members](https://msdn.microsoft.com/library/ms173113.aspx) "},{"content":"<bpt id=\"p1\">[</bpt>Class and struct methods<ept id=\"p1\">](https://msdn.microsoft.com/library/ms173114.aspx)</ept><ph id=\"ph1\"> </ph>","pos":[7742,7819],"source":"[Class and struct methods](https://msdn.microsoft.com/library/ms173114.aspx) "},{"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](https://msdn.microsoft.com/library/ace5hbzh.aspx)</ept><ph id=\"ph1\"> </ph>","pos":[7822,7887],"source":"[Constructors](https://msdn.microsoft.com/library/ace5hbzh.aspx) "},{"content":"<bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](https://msdn.microsoft.com/library/66x5fx1b.aspx)</ept><ph id=\"ph1\"> </ph>","pos":[7890,7953],"source":"[Finalizers](https://msdn.microsoft.com/library/66x5fx1b.aspx) "},{"content":"<bpt id=\"p1\">[</bpt>Objects<ept id=\"p1\">](https://msdn.microsoft.com/library/ms173110.aspx)</ept>","pos":[7956,8015],"source":"[Objects](https://msdn.microsoft.com/library/ms173110.aspx)"}]}