{"content":"---\ntitle: \"Types of String Manipulation Methods in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"strings [Visual Basic], manipulating [Visual Basic]\"\n  - \"string manipulation\"\nms.assetid: 905055cd-7f50-48fb-9eed-b0995af1dc1f\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Types of String Manipulation Methods in Visual Basic\nThere are several different ways to analyze and manipulate your strings. Some of the methods are a part of the [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] language, and others are inherent in the `String` class.  \n  \n## Visual Basic Language and the .NET Framework  \n [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] methods are used as inherent functions of the language. They may be used without qualification in your code. The following example shows typical use of a [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] string-manipulation command:  \n  \n [!code-vb[VbVbalrStrings#44](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/types-of-string-manipulation-methods_1.vb)]  \n  \n In this example, the `Mid` function performs a direct operation on `aString` and assigns the value to `bString`.  \n  \n For a list of Visual Basic string manipulation methods, see [String Manipulation Summary](../../../../visual-basic/language-reference/keywords/string-manipulation-summary.md).  \n  \n### Shared Methods and Instance Methods  \n You can also manipulate strings with the methods of the `String` class. There are two types of methods in `String`: *shared* methods and *instance* methods.  \n  \n#### Shared Methods  \n A shared method is a method that stems from the `String` class itself and does not require an instance of that class to work. These methods can be qualified with the name of the class (`String`) rather than with an instance of the `String` class. For example:  \n  \n [!code-vb[VbVbalrStrings#45](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/types-of-string-manipulation-methods_2.vb)]  \n  \n In the preceding example, the <xref:System.String.Copy%2A?displayProperty=fullName> method is a static method, which acts upon an expression it is given and assigns the resulting value to `bString`.  \n  \n#### Instance Methods  \n Instance methods, by contrast, stem from a particular instance of `String` and must be qualified with the instance name. For example:  \n  \n [!code-vb[VbVbalrStrings#46](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/types-of-string-manipulation-methods_3.vb)]  \n  \n In this example, the <xref:System.String.Substring%2A?displayProperty=fullName> method is a method of the instance of `String` (that is, `aString`). It performs an operation on `aString` and assigns that value to `bString`.  \n  \n For more information, see the documentation for the <xref:System.String> class.  \n  \n## See Also  \n [Introduction to Strings in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)","nodes":[{"pos":[4,653],"embed":true,"restype":"x-metadata","content":"title: \"Types of String Manipulation Methods in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"strings [Visual Basic], manipulating [Visual Basic]\"\n  - \"string manipulation\"\nms.assetid: 905055cd-7f50-48fb-9eed-b0995af1dc1f\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Types of String Manipulation Methods in Visual Basic | Microsoft Docs","nodes":[{"pos":[0,69],"content":"Types of String Manipulation Methods in Visual Basic | Microsoft Docs","nodes":[{"content":"Types of String Manipulation Methods in Visual Basic | Microsoft Docs","pos":[0,69]}]}],"path":["title"]}],"yml":true},{"pos":[660,712],"content":"Types of String Manipulation Methods in Visual Basic","linkify":"Types of String Manipulation Methods in Visual Basic","nodes":[{"content":"Types of String Manipulation Methods in Visual Basic","pos":[0,52]}]},{"content":"There are several different ways to analyze and manipulate your strings.","pos":[713,785]},{"content":"Some of the methods are a part of the <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> language, and others are inherent in the <ph id=\"ph2\">`String`</ph> class.","pos":[786,973],"source":" Some of the methods are a part of the [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] language, and others are inherent in the `String` class."},{"pos":[982,1026],"content":"Visual Basic Language and the .NET Framework","linkify":"Visual Basic Language and the .NET Framework","nodes":[{"content":"Visual Basic Language and the .NET Framework","pos":[0,44]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> methods are used as inherent functions of the language.","pos":[1030,1178],"source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] methods are used as inherent functions of the language."},{"content":"They may be used without qualification in your code.","pos":[1179,1231]},{"content":"The following example shows typical use of a <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> string-manipulation command:","pos":[1232,1398],"source":" The following example shows typical use of a [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] string-manipulation command:"},{"pos":[1562,1674],"content":"In this example, the <ph id=\"ph1\">`Mid`</ph> function performs a direct operation on <ph id=\"ph2\">`aString`</ph> and assigns the value to <ph id=\"ph3\">`bString`</ph>.","source":"In this example, the `Mid` function performs a direct operation on `aString` and assigns the value to `bString`."},{"pos":[1681,1856],"content":"For a list of Visual Basic string manipulation methods, see <bpt id=\"p1\">[</bpt>String Manipulation Summary<ept id=\"p1\">](../../../../visual-basic/language-reference/keywords/string-manipulation-summary.md)</ept>.","source":"For a list of Visual Basic string manipulation methods, see [String Manipulation Summary](../../../../visual-basic/language-reference/keywords/string-manipulation-summary.md)."},{"pos":[1866,1901],"content":"Shared Methods and Instance Methods","linkify":"Shared Methods and Instance Methods","nodes":[{"content":"Shared Methods and Instance Methods","pos":[0,35]}]},{"content":"You can also manipulate strings with the methods of the <ph id=\"ph1\">`String`</ph> class.","pos":[1905,1976],"source":"You can also manipulate strings with the methods of the `String` class."},{"content":"There are two types of methods in <ph id=\"ph1\">`String`</ph>: <bpt id=\"p1\">*</bpt>shared<ept id=\"p1\">*</ept> methods and <bpt id=\"p2\">*</bpt>instance<ept id=\"p2\">*</ept> methods.","pos":[1977,2061],"source":" There are two types of methods in `String`: *shared* methods and *instance* methods."},{"pos":[2072,2086],"content":"Shared Methods","linkify":"Shared Methods","nodes":[{"content":"Shared Methods","pos":[0,14]}]},{"content":"A shared method is a method that stems from the <ph id=\"ph1\">`String`</ph> class itself and does not require an instance of that class to work.","pos":[2090,2215],"source":"A shared method is a method that stems from the `String` class itself and does not require an instance of that class to work."},{"content":"These methods can be qualified with the name of the class (<ph id=\"ph1\">`String`</ph>) rather than with an instance of the <ph id=\"ph2\">`String`</ph> class.","pos":[2216,2336],"source":" These methods can be qualified with the name of the class (`String`) rather than with an instance of the `String` class."},{"content":"For example:","pos":[2337,2349]},{"pos":[2513,2711],"content":"In the preceding example, the <ph id=\"ph1\">&lt;xref:System.String.Copy%2A?displayProperty=fullName&gt;</ph> method is a static method, which acts upon an expression it is given and assigns the resulting value to <ph id=\"ph2\">`bString`</ph>.","source":"In the preceding example, the <xref:System.String.Copy%2A?displayProperty=fullName> method is a static method, which acts upon an expression it is given and assigns the resulting value to `bString`."},{"pos":[2722,2738],"content":"Instance Methods","linkify":"Instance Methods","nodes":[{"content":"Instance Methods","pos":[0,16]}]},{"content":"Instance methods, by contrast, stem from a particular instance of <ph id=\"ph1\">`String`</ph> and must be qualified with the instance name.","pos":[2742,2862],"source":"Instance methods, by contrast, stem from a particular instance of `String` and must be qualified with the instance name."},{"content":"For example:","pos":[2863,2875]},{"content":"In this example, the <ph id=\"ph1\">&lt;xref:System.String.Substring%2A?displayProperty=fullName&gt;</ph> method is a method of the instance of <ph id=\"ph2\">`String`</ph> (that is, <ph id=\"ph3\">`aString`</ph>).","pos":[3039,3187],"source":"In this example, the <xref:System.String.Substring%2A?displayProperty=fullName> method is a method of the instance of `String` (that is, `aString`)."},{"content":"It performs an operation on <ph id=\"ph1\">`aString`</ph> and assigns that value to <ph id=\"ph2\">`bString`</ph>.","pos":[3188,3262],"source":" It performs an operation on `aString` and assigns that value to `bString`."},{"content":"For more information, see the documentation for the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class.","pos":[3269,3348],"source":"For more information, see the documentation for the <xref:System.String> class."},{"pos":[3357,3365],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3369,3507],"content":"<bpt id=\"p1\">[</bpt>Introduction to Strings in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept>","source":"[Introduction to Strings in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)"}]}