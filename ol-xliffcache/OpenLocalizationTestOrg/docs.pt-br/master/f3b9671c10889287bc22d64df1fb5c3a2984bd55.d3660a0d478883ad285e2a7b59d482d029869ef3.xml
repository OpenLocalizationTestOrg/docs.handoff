{"content":"---\ntitle: \"How to: Enable Thread-Tracking Mode in SpinLock\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"SpinLock, how to enable thread-tracking\"\nms.assetid: 62ee2e68-0bdd-4869-afc9-f0a57a11ae01\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Enable Thread-Tracking Mode in SpinLock\n<xref:System.Threading.SpinLock?displayProperty=nameWithType> is a low-level mutual exclusion lock that you can use for scenarios that have very short wait times. <xref:System.Threading.SpinLock> is not re-entrant. After a thread enters the lock, it must exit the lock correctly before it can enter again. Typically, any attempt to re-enter the lock would cause deadlock, and deadlocks can be very difficult to debug. As an aid to development, <xref:System.Threading.SpinLock?displayProperty=nameWithType> supports a thread-tracking mode that causes an exception to be thrown when a thread attempts to re-enter a lock that it already holds. This lets you more easily locate the point at which the lock was not exited correctly. You can turn on thread-tracking mode by using the <xref:System.Threading.SpinLock> constructor that takes a Boolean input parameter, and passing in an argument of `true`. After you complete the development and testing phases, turn off thread-tracking mode for better performance.  \n  \n## Example  \n The following example demonstrates thread-tracking mode. The lines that correctly exit the lock are commented out to simulate a coding error that causes one of the following results:  \n  \n-   An exception is thrown if the <xref:System.Threading.SpinLock> was created by using an argument of `true` (`True` in Visual Basic).  \n  \n-   Deadlock if the <xref:System.Threading.SpinLock> was created by using an argument of `false` (`False` in Visual Basic).  \n  \n [!code-csharp[CDS_SpinLock#01](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinlock/cs/spinlockdemo.cs#01)]\n [!code-vb[CDS_SpinLock#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinlock/vb/spinlock_threadtracking.vb#01)]  \n  \n## See also\n\n- [SpinLock](../../../docs/standard/threading/spinlock.md)\n","nodes":[{"pos":[4,304],"embed":true,"restype":"x-metadata","content":"title: \"How to: Enable Thread-Tracking Mode in SpinLock\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"SpinLock, how to enable thread-tracking\"\nms.assetid: 62ee2e68-0bdd-4869-afc9-f0a57a11ae01\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Enable Thread-Tracking Mode in SpinLock","nodes":[{"pos":[0,47],"content":"How to: Enable Thread-Tracking Mode in SpinLock","nodes":[{"content":"How to: Enable Thread-Tracking Mode in SpinLock","pos":[0,47]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[311,358],"content":"How to: Enable Thread-Tracking Mode in SpinLock","linkify":"How to: Enable Thread-Tracking Mode in SpinLock","nodes":[{"content":"How to: Enable Thread-Tracking Mode in SpinLock","pos":[0,47]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.SpinLock?displayProperty=nameWithType&gt;</ph> is a low-level mutual exclusion lock that you can use for scenarios that have very short wait times.","pos":[359,521],"source":"<xref:System.Threading.SpinLock?displayProperty=nameWithType> is a low-level mutual exclusion lock that you can use for scenarios that have very short wait times."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> is not re-entrant.","pos":[522,573],"source":"<xref:System.Threading.SpinLock> is not re-entrant."},{"content":"After a thread enters the lock, it must exit the lock correctly before it can enter again.","pos":[574,664]},{"content":"Typically, any attempt to re-enter the lock would cause deadlock, and deadlocks can be very difficult to debug.","pos":[665,776]},{"content":"As an aid to development, <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock?displayProperty=nameWithType&gt;</ph> supports a thread-tracking mode that causes an exception to be thrown when a thread attempts to re-enter a lock that it already holds.","pos":[777,999],"source":" As an aid to development, <xref:System.Threading.SpinLock?displayProperty=nameWithType> supports a thread-tracking mode that causes an exception to be thrown when a thread attempts to re-enter a lock that it already holds."},{"content":"This lets you more easily locate the point at which the lock was not exited correctly.","pos":[1000,1086]},{"content":"You can turn on thread-tracking mode by using the <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> constructor that takes a Boolean input parameter, and passing in an argument of <ph id=\"ph2\">`true`</ph>.","pos":[1087,1257],"source":" You can turn on thread-tracking mode by using the <xref:System.Threading.SpinLock> constructor that takes a Boolean input parameter, and passing in an argument of `true`."},{"content":"After you complete the development and testing phases, turn off thread-tracking mode for better performance.","pos":[1258,1366]},{"pos":[1375,1382],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates thread-tracking mode.","pos":[1386,1442]},{"content":"The lines that correctly exit the lock are commented out to simulate a coding error that causes one of the following results:","pos":[1443,1568]},{"pos":[1578,1709],"content":"An exception is thrown if the <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> was created by using an argument of <ph id=\"ph2\">`true`</ph> (<ph id=\"ph3\">`True`</ph> in Visual Basic).","source":"An exception is thrown if the <xref:System.Threading.SpinLock> was created by using an argument of `true` (`True` in Visual Basic)."},{"pos":[1719,1838],"content":"Deadlock if the <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> was created by using an argument of <ph id=\"ph2\">`false`</ph> (<ph id=\"ph3\">`False`</ph> in Visual Basic).","source":"Deadlock if the <xref:System.Threading.SpinLock> was created by using an argument of `false` (`False` in Visual Basic)."},{"pos":[1845,2093],"content":"[!code-csharp[CDS_SpinLock#01](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinlock/cs/spinlockdemo.cs#01)]\n[!code-vb[CDS_SpinLock#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinlock/vb/spinlock_threadtracking.vb#01)]","leadings":[""," "],"nodes":[]},{"pos":[2102,2110],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2114,2170],"content":"<bpt id=\"p1\">[</bpt>SpinLock<ept id=\"p1\">](../../../docs/standard/threading/spinlock.md)</ept>","source":"[SpinLock](../../../docs/standard/threading/spinlock.md)"}]}