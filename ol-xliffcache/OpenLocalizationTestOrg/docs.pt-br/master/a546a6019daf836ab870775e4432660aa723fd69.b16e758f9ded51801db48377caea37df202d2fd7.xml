{"content":"---\ntitle: \"sealed (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"sealed\"\n  - \"sealed_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"sealed keyword [C#]\"\nms.assetid: 8e4ed5d3-10be-47db-9488-0da2008e6f3f\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sealed (C# Reference)\nWhen applied to a class, the `sealed` modifier prevents other classes from inheriting from it. In the following example, class `B` inherits from class `A`, but no class can inherit from class `B`.  \n  \n```  \nclass A {}      \nsealed class B : A {}  \n```  \n  \n You can also use the `sealed` modifier on a method or property that overrides a virtual method or property in a base class. This enables you to allow classes to derive from your class and prevent them from overriding specific virtual methods or properties.  \n  \n## Example  \n In the following example, `Z` inherits from `Y` but `Z` cannot override the virtual function `F` that is declared in `X` and sealed in `Y`.  \n  \n [!code-cs[csrefKeywordsModifiers#16](../../../csharp/language-reference/keywords/codesnippet/CSharp/sealed_1.cs)]  \n  \n When you define new methods or properties in a class, you can prevent deriving classes from overriding them by not declaring them as [virtual](../../../csharp/language-reference/keywords/virtual.md).  \n  \n It is an error to use the [abstract](../../../csharp/language-reference/keywords/abstract.md) modifier with a sealed class, because an abstract class must be inherited by a class that provides an implementation of the abstract methods or properties.  \n  \n When applied to a method or property, the `sealed` modifier must always be used with [override](../../../csharp/language-reference/keywords/override.md).  \n  \n Because structs are implicitly sealed, they cannot be inherited.  \n  \n For more information, see [Inheritance](../../../csharp/programming-guide/classes-and-structs/inheritance.md).  \n  \n For more examples, see [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md).  \n  \n## Example  \n [!code-cs[csrefKeywordsModifiers#17](../../../csharp/language-reference/keywords/codesnippet/CSharp/sealed_2.cs)]  \n  \n In the previous example, you might try to inherit from the sealed class by using the following statement:  \n  \n `class MyDerivedC: SealedClass {}   // Error`  \n  \n The result is an error message:  \n  \n `'MyDerivedC' cannot inherit from sealed class 'SealedClass'.`  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## Remarks  \n To determine whether to seal a class, method, or property, you should generally consider the following two points:  \n  \n-   The potential benefits that deriving classes might gain through the ability to customize your class.  \n  \n-   The potential that deriving classes could modify your classes in such a way that they would no longer work correctly or as expected.  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Static Classes and Static Class Members](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)   \n [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)   \n [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)   \n [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)   \n [override](../../../csharp/language-reference/keywords/override.md)   \n [virtual](../../../csharp/language-reference/keywords/virtual.md)","nodes":[{"pos":[4,568],"nodes":[{"content":"sealed (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,38],"content":"sealed (C# Reference) | Microsoft Docs","nodes":[{"content":"sealed (C# Reference) | Microsoft Docs","pos":[0,38]}]}],"pos":[6,47],"yaml":true}],"content":"title: \"sealed (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"sealed\"\n  - \"sealed_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"sealed keyword [C#]\"\nms.assetid: 8e4ed5d3-10be-47db-9488-0da2008e6f3f\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[575,596],"content":"sealed (C# Reference)","linkify":"sealed (C# Reference)","nodes":[{"content":"sealed (C# Reference)","pos":[0,21]}]},{"content":"When applied to a class, the <ph id=\"ph1\">`sealed`</ph> modifier prevents other classes from inheriting from it.","pos":[597,691],"source":"When applied to a class, the `sealed` modifier prevents other classes from inheriting from it."},{"content":"In the following example, class <ph id=\"ph1\">`B`</ph> inherits from class <ph id=\"ph2\">`A`</ph>, but no class can inherit from class <ph id=\"ph3\">`B`</ph>.","pos":[692,793],"source":" In the following example, class `B` inherits from class `A`, but no class can inherit from class `B`."},{"content":"You can also use the <ph id=\"ph1\">`sealed`</ph> modifier on a method or property that overrides a virtual method or property in a base class.","pos":[856,979],"source":"You can also use the `sealed` modifier on a method or property that overrides a virtual method or property in a base class."},{"content":"This enables you to allow classes to derive from your class and prevent them from overriding specific virtual methods or properties.","pos":[980,1112]},{"pos":[1121,1128],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1132,1271],"content":"In the following example, <ph id=\"ph1\">`Z`</ph> inherits from <ph id=\"ph2\">`Y`</ph> but <ph id=\"ph3\">`Z`</ph> cannot override the virtual function <ph id=\"ph4\">`F`</ph> that is declared in <ph id=\"ph5\">`X`</ph> and sealed in <ph id=\"ph6\">`Y`</ph>.","source":"In the following example, `Z` inherits from `Y` but `Z` cannot override the virtual function `F` that is declared in `X` and sealed in `Y`."},{"pos":[1278,1391],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsModifiers#16<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/sealed_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsModifiers#16](../../../csharp/language-reference/keywords/codesnippet/CSharp/sealed_1.cs)]"},{"pos":[1398,1597],"content":"When you define new methods or properties in a class, you can prevent deriving classes from overriding them by not declaring them as <bpt id=\"p1\">[</bpt>virtual<ept id=\"p1\">](../../../csharp/language-reference/keywords/virtual.md)</ept>.","source":"When you define new methods or properties in a class, you can prevent deriving classes from overriding them by not declaring them as [virtual](../../../csharp/language-reference/keywords/virtual.md)."},{"pos":[1604,1853],"content":"It is an error to use the <bpt id=\"p1\">[</bpt>abstract<ept id=\"p1\">](../../../csharp/language-reference/keywords/abstract.md)</ept> modifier with a sealed class, because an abstract class must be inherited by a class that provides an implementation of the abstract methods or properties.","source":"It is an error to use the [abstract](../../../csharp/language-reference/keywords/abstract.md) modifier with a sealed class, because an abstract class must be inherited by a class that provides an implementation of the abstract methods or properties."},{"pos":[1860,2013],"content":"When applied to a method or property, the <ph id=\"ph1\">`sealed`</ph> modifier must always be used with <bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept>.","source":"When applied to a method or property, the `sealed` modifier must always be used with [override](../../../csharp/language-reference/keywords/override.md)."},{"content":"Because structs are implicitly sealed, they cannot be inherited.","pos":[2020,2084]},{"pos":[2091,2201],"content":"For more information, see <bpt id=\"p1\">[</bpt>Inheritance<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/inheritance.md)</ept>.","source":"For more information, see [Inheritance](../../../csharp/programming-guide/classes-and-structs/inheritance.md)."},{"pos":[2208,2383],"content":"For more examples, see <bpt id=\"p1\">[</bpt>Abstract and Sealed Classes and Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept>.","source":"For more examples, see [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)."},{"pos":[2392,2399],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2403,2516],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsModifiers#17<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/sealed_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsModifiers#17](../../../csharp/language-reference/keywords/codesnippet/CSharp/sealed_2.cs)]"},{"content":"In the previous example, you might try to inherit from the sealed class by using the following statement:","pos":[2523,2628]},{"content":"The result is an error message:","pos":[2687,2718]},{"pos":[2796,2821],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2935,2942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To determine whether to seal a class, method, or property, you should generally consider the following two points:","pos":[2946,3060]},{"content":"The potential benefits that deriving classes might gain through the ability to customize your class.","pos":[3070,3170]},{"content":"The potential that deriving classes could modify your classes in such a way that they would no longer work correctly or as expected.","pos":[3180,3312]},{"pos":[3321,3329],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3333,3393],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3397,3464],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3468,3536],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Static Classes and Static Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)</ept><ph id=\"ph1\"> </ph>","pos":[3540,3680],"source":"[Static Classes and Static Class Members](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md) "},{"content":"<bpt id=\"p1\">[</bpt>Abstract and Sealed Classes and Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept><ph id=\"ph1\"> </ph>","pos":[3684,3836],"source":"[Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md) "},{"content":"<bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept><ph id=\"ph1\"> </ph>","pos":[3840,3934],"source":"[Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md) "},{"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept><ph id=\"ph1\"> </ph>","pos":[3938,4008],"source":"[Modifiers](../../../csharp/language-reference/keywords/modifiers.md) "},{"content":"<bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept><ph id=\"ph1\"> </ph>","pos":[4012,4080],"source":"[override](../../../csharp/language-reference/keywords/override.md) "},{"content":"<bpt id=\"p1\">[</bpt>virtual<ept id=\"p1\">](../../../csharp/language-reference/keywords/virtual.md)</ept>","pos":[4084,4149],"source":"[virtual](../../../csharp/language-reference/keywords/virtual.md)"}]}