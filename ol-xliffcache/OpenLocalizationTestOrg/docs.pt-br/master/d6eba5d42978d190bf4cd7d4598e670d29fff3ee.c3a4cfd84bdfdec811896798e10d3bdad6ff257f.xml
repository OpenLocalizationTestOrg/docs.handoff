{"content":"---\ntitle: \"Retrieving Data Using a DataReader | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 97afc121-fb8b-465b-bab3-6d844420badb\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Retrieving Data Using a DataReader\nRetrieving data using a **DataReader** involves creating an instance of the **Command** object and then creating a **DataReader** by calling **Command.ExecuteReader** to retrieve rows from a data source. The following example illustrates using a **DataReader** where `reader` represents a valid DataReader and `command` represents a valid Command object.  \n  \n```  \nreader = command.ExecuteReader();  \n```  \n  \n You use the **Read** method of the **DataReader** object to obtain a row from the results of the query. You can access each column of the returned row by passing the name or ordinal reference of the column to the **DataReader**. However, for best performance, the **DataReader** provides a series of methods that allow you to access column values in their native data types (**GetDateTime**, **GetDouble**, **GetGuid**, **GetInt32**, and so on). For a list of typed accessor methods for data provider-specific **DataReaders**, see <xref:System.Data.OleDb.OleDbDataReader> and <xref:System.Data.SqlClient.SqlDataReader>. Using the typed accessor methods, assuming the underlying data type is known, reduces the amount of type conversion required when retrieving the column value.  \n  \n> [!NOTE]\n>  The Windows Server 2003 release of the .NET Framework includes an additional property for the **DataReader**, **HasRows**, which enables you to determine if the **DataReader** has returned any results before reading from it.  \n  \n The following code example iterates through a **DataReader** object, and returns two columns from each row.  \n  \n [!code-csharp[DataWorks SqlClient.HasRows#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.HasRows/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.HasRows#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.HasRows/VB/source.vb#1)]  \n  \n The **DataReader** provides an unbuffered stream of data that allows procedural logic to efficiently process results from a data source sequentially. The **DataReader** is a good choice when retrieving large amounts of data because the data is not cached in memory.  \n  \n## Closing the DataReader  \n You should always call the **Close** method when you have finished using the **DataReader** object.  \n  \n If your **Command** contains output parameters or return values, they will not be available until the **DataReader** is closed.  \n  \n Note that while a **DataReader** is open, the **Connection** is in use exclusively by that **DataReader**. You cannot execute any commands for the **Connection**, including creating another **DataReader**, until the original **DataReader** is closed.  \n  \n> [!NOTE]\n>  Do not call **Close** or **Dispose** on a **Connection**, a **DataReader**, or any other managed object in the **Finalize** method of your class. In a finalizer, only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a **Finalize** method in your class definition. For more information, see [Garbage Collection](../../../../docs/standard/garbage-collection/index.md).  \n  \n## Retrieving Multiple Result Sets using NextResult  \n If multiple result sets are returned, the **DataReader** provides the **NextResult** method to iterate through the result sets in order. The following example shows the <xref:System.Data.SqlClient.SqlDataReader> processing the results of two SELECT statements using the <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> method.  \n  \n [!code-csharp[DataWorks SqlClient.NextResult#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.NextResult/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.NextResult#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.NextResult/VB/source.vb#1)]  \n  \n## Getting Schema Information from the DataReader  \n While a **DataReader** is open, you can retrieve schema information about the current result set using the **GetSchemaTable** method. **GetSchemaTable** returns a <xref:System.Data.DataTable> object populated with rows and columns that contain the schema information for the current result set. The **DataTable** contains one row for each column of the result set. Each column of the schema table row maps to a property of the column returned in the result set, where the **ColumnName** is the name of the property and the value of the column is the value of the property. The following code example writes out the schema information for **DataReader**.  \n  \n [!code-csharp[DataWorks SqlClient.GetSchemaTable#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.GetSchemaTable/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.GetSchemaTable#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.GetSchemaTable/VB/source.vb#1)]  \n  \n## Working with OLE DB Chapters  \n Hierarchical rowsets, or chapters (OLE DB type **DBTYPE_HCHAPTER**, ADO type **adChapter**) can be retrieved using the <xref:System.Data.OleDb.OleDbDataReader>. When a query that includes a chapter is returned as a **DataReader**, the chapter is returned as a column in that **DataReader** and is exposed as a **DataReader** object.  \n  \n The ADO.NET **DataSet** can also be used to represent hierarchical rowsets using parent-child relationships between tables. For more information, see [DataSets, DataTables, and DataViews](../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md).  \n  \n The following code example uses the MSDataShape Provider to generate a chapter column of orders for each customer in a list of customers.  \n  \n```vb  \nUsing connection As OleDbConnection = New OleDbConnection( _  \n  \"Provider=MSDataShape;Data Provider=SQLOLEDB;\" & _  \n  \"Data Source=localhost;Integrated Security=SSPI;Initial Catalog=northwind\")  \n  \nDim custCMD As OleDbCommand = New OleDbCommand( _  \n  \"SHAPE {SELECT CustomerID, CompanyName FROM Customers} \" & _  \n  \"APPEND ({SELECT CustomerID, OrderID FROM Orders} AS CustomerOrders \" & _  \n  \"RELATE CustomerID TO CustomerID)\", connection)  \nconnection.Open()  \n  \nDim custReader As OleDbDataReader = custCMD.ExecuteReader()  \nDim orderReader As OleDbDataReader  \n  \nDo While custReader.Read()  \n  Console.WriteLine(\"Orders for \" & custReader.GetString(1))   \n  ' custReader.GetString(1) = CompanyName  \n  \n  orderReader = custReader.GetValue(2)  \n  ' custReader.GetValue(2) = Orders chapter as DataReader  \n  \n  Do While orderReader.Read()  \n    Console.WriteLine(vbTab & orderReader.GetInt32(1))  \n    ' orderReader.GetInt32(1) = OrderID  \n  Loop  \n  orderReader.Close()  \nLoop  \n' Make sure to always close readers and connections.  \ncustReader.Close()  \nEnd Using  \n```  \n  \n```csharp  \nUsing (OleDbConnection connection = new OleDbConnection(  \n  \"Provider=MSDataShape;Data Provider=SQLOLEDB;\" +  \n  \"Data Source=localhost;Integrated Security=SSPI;Initial Catalog=northwind\"));  \n{  \nOleDbCommand custCMD = new OleDbCommand(  \n  \"SHAPE {SELECT CustomerID, CompanyName FROM Customers} \" +  \n  \"APPEND ({SELECT CustomerID, OrderID FROM Orders} AS CustomerOrders \" +  \n  \"RELATE CustomerID TO CustomerID)\", connection);  \nconnection.Open();  \n  \nOleDbDataReader custReader = custCMD.ExecuteReader();  \nOleDbDataReader orderReader;  \n  \nwhile (custReader.Read())  \n{  \n  Console.WriteLine(\"Orders for \" + custReader.GetString(1));   \n  // custReader.GetString(1) = CompanyName  \n  \n  orderReader = (OleDbDataReader)custReader.GetValue(2);        \n  // custReader.GetValue(2) = Orders chapter as DataReader  \n  \n  while (orderReader.Read())  \n    Console.WriteLine(\"\\t\" + orderReader.GetInt32(1));          \n    // orderReader.GetInt32(1) = OrderID  \n  orderReader.Close();  \n}  \n// Make sure to always close readers and connections.  \ncustReader.Close();  \n}  \n```  \n  \n## Returning Results with Oracle REF CURSORs  \n The .NET Framework Data Provider for Oracle supports the use of Oracle REF CURSORs to return a query result. An Oracle REF CURSOR is returned as an <xref:System.Data.OracleClient.OracleDataReader>.  \n  \n You can retrieve an **OracleDataReader** object, that represents an Oracle REF CURSOR using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method, and you can also specify an <xref:System.Data.OracleClient.OracleCommand> that returns one or more Oracle REF CURSORs as the **SelectCommand** for an <xref:System.Data.OracleClient.OracleDataAdapter> used to fill a <xref:System.Data.DataSet>.  \n  \n To access a REF CURSOR returned from an Oracle data source, create an **OracleCommand** for your query and add an output parameter that references the REF CURSOR to the **Parameters** collection of your **OracleCommand**. The name of the parameter must match the name of the REF CURSOR parameter in your query. Set the type of the parameter to **OracleType.Cursor**. The **ExecuteReader** method of your **OracleCommand** will return an **OracleDataReader** for the REF CURSOR.  \n  \n If your **OracleCommand** returns multiple REF CURSORS, add multiple output parameters. You can access the different REF CURSORs by calling the **OracleCommand.ExecuteReader** method. The call to **ExecuteReader** returns an **OracleDataReader** referencing the first REF CURSOR. You can then call the **OracleDataReader.NextResult** method to access subsequent REF CURSORs. Although the parameters in your **OracleCommand.Parameters** collection match the REF CURSOR output parameters by name, the **OracleDataReader** accesses them in the order that they were added to the **Parameters** collection.  \n  \n For example, consider the following Oracle package and package body.  \n  \n```  \nCREATE OR REPLACE PACKAGE CURSPKG AS   \n  TYPE T_CURSOR IS REF CURSOR;   \n  PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,   \n    DEPTCURSOR OUT T_CURSOR);   \nEND CURSPKG;  \n  \nCREATE OR REPLACE PACKAGE BODY CURSPKG AS   \n  PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,   \n    DEPTCURSOR OUT T_CURSOR)   \n  IS   \n  BEGIN   \n    OPEN EMPCURSOR FOR SELECT * FROM DEMO.EMPLOYEE;   \n    OPEN DEPTCURSOR FOR SELECT * FROM DEMO.DEPARTMENT;   \n  END OPEN_TWO_CURSORS;   \nEND CURSPKG;   \n```  \n  \n The following code creates an **OracleCommand** that returns the REF CURSORs from the previous Oracle package by adding two parameters of type **OracleType.Cursor** to the **Parameters** collection.  \n  \n```vb  \nDim cursCmd As OracleCommand = New OracleCommand(\"CURSPKG.OPEN_TWO_CURSORS\", oraConn)  \ncursCmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output  \ncursCmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output  \n```  \n  \n```csharp  \nOracleCommand cursCmd = new OracleCommand(\"CURSPKG.OPEN_TWO_CURSORS\", oraConn);  \ncursCmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output;  \ncursCmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output;  \n```  \n  \n The following code returns the results of the previous command using the **Read** and **NextResult** methods of the **OracleDataReader**. The REF CURSOR parameters are returned in order.  \n  \n```vb  \noraConn.Open()  \n  \nDim cursCmd As OracleCommand = New OracleCommand(\"CURSPKG.OPEN_TWO_CURSORS\", oraConn)  \ncursCmd.CommandType = CommandType.StoredProcedure  \ncursCmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output  \ncursCmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output  \n  \nDim reader As OracleDataReader = cursCmd.ExecuteReader()  \n  \nConsole.WriteLine(vbCrLf & \"Emp ID\" & vbTab & \"Name\")  \n  \nDo While reader.Read()  \n  Console.WriteLine(\"{0}\" & vbTab & \"{1}, {2}\", reader.GetOracleNumber(0), reader.GetString(1), reader.GetString(2))  \nLoop  \n  \nreader.NextResult()  \n  \nConsole.WriteLine(vbCrLf & \"Dept ID\" & vbTab & \"Name\")  \n  \nDo While reader.Read()  \n  Console.WriteLine(\"{0}\" & vbTab & \"{1}\", reader.GetOracleNumber(0), reader.GetString(1))  \nLoop  \n' Make sure to always close readers and connections.  \nreader.Close()  \noraConn.Close()  \n```  \n  \n```csharp  \noraConn.Open();  \n  \nOracleCommand cursCmd = new OracleCommand(\"CURSPKG.OPEN_TWO_CURSORS\", oraConn);  \ncursCmd.CommandType = CommandType.StoredProcedure;  \ncursCmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output;  \ncursCmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = ParameterDirection.Output;  \n  \nOracleDataReader reader = cursCmd.ExecuteReader();  \n  \nConsole.WriteLine(\"\\nEmp ID\\tName\");  \n  \nwhile (reader.Read())  \n  Console.WriteLine(\"{0}\\t{1}, {2}\", reader.GetOracleNumber(0), reader.GetString(1), reader.GetString(2));  \n  \nreader.NextResult();  \n  \nConsole.WriteLine(\"\\nDept ID\\tName\");  \n  \nwhile (reader.Read())  \n  Console.WriteLine(\"{0}\\t{1}\", reader.GetOracleNumber(0), reader.GetString(1));  \n// Make sure to always close readers and connections.  \nreader.Close();  \noraConn.Close();  \n```  \n  \n The following example uses the previous command to populate a **DataSet** with the results of the Oracle package.  \n  \n> [!NOTE]\n>  To avoid an **OverflowException**, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a **DataRow**. You can use the **FillError** event to determine if an **OverflowException** has occurred. For more information on the **FillError** event, see [Handling DataAdapter Events](../../../../docs/framework/data/adonet/handling-dataadapter-events.md).  \n  \n```vb  \nDim ds As DataSet = New DataSet()  \n  \nDim adapter As OracleDataAdapter = New OracleDataAdapter(cursCmd)  \nadapter.TableMappings.Add(\"Table\", \"Employees\")  \nadapter.TableMappings.Add(\"Table1\", \"Departments\")  \n  \nadapter.Fill(ds)  \n```  \n  \n```csharp  \nDataSet ds = new DataSet();  \n  \nOracleDataAdapter adapter = new OracleDataAdapter(cursCmd);  \nadapter.TableMappings.Add(\"Table\", \"Employees\");  \nadapter.TableMappings.Add(\"Table1\", \"Departments\");  \n  \nadapter.Fill(ds);  \n```  \n  \n## See Also  \n [Working with DataReaders](http://msdn.microsoft.com/en-us/126a966a-d08d-4d22-a19f-f432908b2b54)   \n [DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)   \n [Commands and Parameters](../../../../docs/framework/data/adonet/commands-and-parameters.md)   \n [Retrieving Database Schema Information](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[4,365],"embed":true,"restype":"x-metadata","content":"title: \"Retrieving Data Using a DataReader | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 97afc121-fb8b-465b-bab3-6d844420badb\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Retrieving Data Using a DataReader | Microsoft Docs","nodes":[{"pos":[0,51],"content":"Retrieving Data Using a DataReader | Microsoft Docs","nodes":[{"content":"Retrieving Data Using a DataReader | Microsoft Docs","pos":[0,51]}]}],"path":["title"]}],"yml":true},{"pos":[372,406],"content":"Retrieving Data Using a DataReader","linkify":"Retrieving Data Using a DataReader","nodes":[{"content":"Retrieving Data Using a DataReader","pos":[0,34]}]},{"content":"Retrieving data using a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> involves creating an instance of the <bpt id=\"p2\">**</bpt>Command<ept id=\"p2\">**</ept> object and then creating a <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept> by calling <bpt id=\"p4\">**</bpt>Command.ExecuteReader<ept id=\"p4\">**</ept> to retrieve rows from a data source.","pos":[407,610],"source":"Retrieving data using a **DataReader** involves creating an instance of the **Command** object and then creating a **DataReader** by calling **Command.ExecuteReader** to retrieve rows from a data source."},{"content":"The following example illustrates using a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> where <ph id=\"ph1\">`reader`</ph> represents a valid DataReader and <ph id=\"ph2\">`command`</ph> represents a valid Command object.","pos":[611,761],"source":" The following example illustrates using a **DataReader** where `reader` represents a valid DataReader and `command` represents a valid Command object."},{"content":"You use the <bpt id=\"p1\">**</bpt>Read<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept> object to obtain a row from the results of the query.","pos":[819,922],"source":"You use the **Read** method of the **DataReader** object to obtain a row from the results of the query."},{"content":"You can access each column of the returned row by passing the name or ordinal reference of the column to the <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>.","pos":[923,1047],"source":" You can access each column of the returned row by passing the name or ordinal reference of the column to the **DataReader**."},{"content":"However, for best performance, the <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> provides a series of methods that allow you to access column values in their native data types (<bpt id=\"p2\">**</bpt>GetDateTime<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>GetDouble<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>GetGuid<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>GetInt32<ept id=\"p5\">**</ept>, and so on).","pos":[1048,1264],"source":" However, for best performance, the **DataReader** provides a series of methods that allow you to access column values in their native data types (**GetDateTime**, **GetDouble**, **GetGuid**, **GetInt32**, and so on)."},{"content":"For a list of typed accessor methods for data provider-specific <bpt id=\"p1\">**</bpt>DataReaders<ept id=\"p1\">**</ept>, see <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbDataReader&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph>.","pos":[1265,1438],"source":" For a list of typed accessor methods for data provider-specific **DataReaders**, see <xref:System.Data.OleDb.OleDbDataReader> and <xref:System.Data.SqlClient.SqlDataReader>."},{"content":"Using the typed accessor methods, assuming the underlying data type is known, reduces the amount of type conversion required when retrieving the column value.","pos":[1439,1597]},{"pos":[1605,1840],"content":"[!NOTE]\n The Windows Server 2003 release of the .NET Framework includes an additional property for the **DataReader**, **HasRows**, which enables you to determine if the **DataReader** has returned any results before reading from it.","leadings":["","> "],"nodes":[{"content":"The Windows Server 2003 release of the .NET Framework includes an additional property for the <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>HasRows<ept id=\"p2\">**</ept>, which enables you to determine if the <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept> has returned any results before reading from it.","pos":[9,233],"source":"The Windows Server 2003 release of the .NET Framework includes an additional property for the **DataReader**, **HasRows**, which enables you to determine if the **DataReader** has returned any results before reading from it."}]},{"pos":[1847,1954],"content":"The following code example iterates through a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> object, and returns two columns from each row.","source":"The following code example iterates through a **DataReader** object, and returns two columns from each row."},{"content":"The <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> provides an unbuffered stream of data that allows procedural logic to efficiently process results from a data source sequentially.","pos":[2261,2410],"source":"The **DataReader** provides an unbuffered stream of data that allows procedural logic to efficiently process results from a data source sequentially."},{"content":"The <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> is a good choice when retrieving large amounts of data because the data is not cached in memory.","pos":[2411,2526],"source":" The **DataReader** is a good choice when retrieving large amounts of data because the data is not cached in memory."},{"pos":[2535,2557],"content":"Closing the DataReader","linkify":"Closing the DataReader","nodes":[{"content":"Closing the DataReader","pos":[0,22]}]},{"pos":[2561,2660],"content":"You should always call the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> method when you have finished using the <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept> object.","source":"You should always call the **Close** method when you have finished using the **DataReader** object."},{"pos":[2667,2794],"content":"If your <bpt id=\"p1\">**</bpt>Command<ept id=\"p1\">**</ept> contains output parameters or return values, they will not be available until the <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept> is closed.","source":"If your **Command** contains output parameters or return values, they will not be available until the **DataReader** is closed."},{"content":"Note that while a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> is open, the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> is in use exclusively by that <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept>.","pos":[2801,2907],"source":"Note that while a **DataReader** is open, the **Connection** is in use exclusively by that **DataReader**."},{"content":"You cannot execute any commands for the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept>, including creating another <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept>, until the original <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept> is closed.","pos":[2908,3051],"source":" You cannot execute any commands for the **Connection**, including creating another **DataReader**, until the original **DataReader** is closed."},{"pos":[3059,3513],"content":"[!NOTE]\n Do not call **Close** or **Dispose** on a **Connection**, a **DataReader**, or any other managed object in the **Finalize** method of your class. In a finalizer, only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a **Finalize** method in your class definition. For more information, see [Garbage Collection](../../../../docs/standard/garbage-collection/index.md).","leadings":["","> "],"nodes":[{"content":"Do not call **Close** or **Dispose** on a **Connection**, a **DataReader**, or any other managed object in the **Finalize** method of your class. In a finalizer, only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a **Finalize** method in your class definition. For more information, see [Garbage Collection](../../../../docs/standard/garbage-collection/index.md).","pos":[9,452],"nodes":[{"content":"Do not call <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Dispose<ept id=\"p2\">**</ept> on a <bpt id=\"p3\">**</bpt>Connection<ept id=\"p3\">**</ept>, a <bpt id=\"p4\">**</bpt>DataReader<ept id=\"p4\">**</ept>, or any other managed object in the <bpt id=\"p5\">**</bpt>Finalize<ept id=\"p5\">**</ept> method of your class.","pos":[0,145],"source":"Do not call **Close** or **Dispose** on a **Connection**, a **DataReader**, or any other managed object in the **Finalize** method of your class."},{"content":"In a finalizer, only release unmanaged resources that your class owns directly.","pos":[146,225]},{"content":"If your class does not own any unmanaged resources, do not include a <bpt id=\"p1\">**</bpt>Finalize<ept id=\"p1\">**</ept> method in your class definition.","pos":[226,340],"source":" If your class does not own any unmanaged resources, do not include a **Finalize** method in your class definition."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](../../../../docs/standard/garbage-collection/index.md)</ept>.","pos":[341,443],"source":" For more information, see [Garbage Collection](../../../../docs/standard/garbage-collection/index.md)."}]}]},{"pos":[3522,3570],"content":"Retrieving Multiple Result Sets using NextResult","linkify":"Retrieving Multiple Result Sets using NextResult","nodes":[{"content":"Retrieving Multiple Result Sets using NextResult","pos":[0,48]}]},{"content":"If multiple result sets are returned, the <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> provides the <bpt id=\"p2\">**</bpt>NextResult<ept id=\"p2\">**</ept> method to iterate through the result sets in order.","pos":[3574,3710],"source":"If multiple result sets are returned, the **DataReader** provides the **NextResult** method to iterate through the result sets in order."},{"content":"The following example shows the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> processing the results of two SELECT statements using the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A&gt;</ph> method.","pos":[3711,3908],"source":" The following example shows the <xref:System.Data.SqlClient.SqlDataReader> processing the results of two SELECT statements using the <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> method."},{"pos":[4229,4275],"content":"Getting Schema Information from the DataReader","linkify":"Getting Schema Information from the DataReader","nodes":[{"content":"Getting Schema Information from the DataReader","pos":[0,46]}]},{"content":"While a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept> is open, you can retrieve schema information about the current result set using the <bpt id=\"p2\">**</bpt>GetSchemaTable<ept id=\"p2\">**</ept> method.","pos":[4279,4412],"source":"While a **DataReader** is open, you can retrieve schema information about the current result set using the **GetSchemaTable** method."},{"content":"<bpt id=\"p1\">**</bpt>GetSchemaTable<ept id=\"p1\">**</ept> returns a <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> object populated with rows and columns that contain the schema information for the current result set.","pos":[4413,4573],"source":"**GetSchemaTable** returns a <xref:System.Data.DataTable> object populated with rows and columns that contain the schema information for the current result set."},{"content":"The <bpt id=\"p1\">**</bpt>DataTable<ept id=\"p1\">**</ept> contains one row for each column of the result set.","pos":[4574,4643],"source":" The **DataTable** contains one row for each column of the result set."},{"content":"Each column of the schema table row maps to a property of the column returned in the result set, where the <bpt id=\"p1\">**</bpt>ColumnName<ept id=\"p1\">**</ept> is the name of the property and the value of the column is the value of the property.","pos":[4644,4851],"source":" Each column of the schema table row maps to a property of the column returned in the result set, where the **ColumnName** is the name of the property and the value of the column is the value of the property."},{"content":"The following code example writes out the schema information for <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>.","pos":[4852,4932],"source":" The following code example writes out the schema information for **DataReader**."},{"pos":[5269,5297],"content":"Working with OLE DB Chapters","linkify":"Working with OLE DB Chapters","nodes":[{"content":"Working with OLE DB Chapters","pos":[0,28]}]},{"content":"Hierarchical rowsets, or chapters (OLE DB type <bpt id=\"p1\">**</bpt>DBTYPE_HCHAPTER<ept id=\"p1\">**</ept>, ADO type <bpt id=\"p2\">**</bpt>adChapter<ept id=\"p2\">**</ept>) can be retrieved using the <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbDataReader&gt;</ph>.","pos":[5301,5461],"source":"Hierarchical rowsets, or chapters (OLE DB type **DBTYPE_HCHAPTER**, ADO type **adChapter**) can be retrieved using the <xref:System.Data.OleDb.OleDbDataReader>."},{"content":"When a query that includes a chapter is returned as a <bpt id=\"p1\">**</bpt>DataReader<ept id=\"p1\">**</ept>, the chapter is returned as a column in that <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept> and is exposed as a <bpt id=\"p3\">**</bpt>DataReader<ept id=\"p3\">**</ept> object.","pos":[5462,5633],"source":" When a query that includes a chapter is returned as a **DataReader**, the chapter is returned as a column in that **DataReader** and is exposed as a **DataReader** object."},{"content":"The ADO.NET <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> can also be used to represent hierarchical rowsets using parent-child relationships between tables.","pos":[5640,5763],"source":"The ADO.NET **DataSet** can also be used to represent hierarchical rowsets using parent-child relationships between tables."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>DataSets, DataTables, and DataViews<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept>.","pos":[5764,5904],"source":" For more information, see [DataSets, DataTables, and DataViews](../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)."},{"content":"The following code example uses the MSDataShape Provider to generate a chapter column of orders for each customer in a list of customers.","pos":[5911,6048]},{"pos":[8242,8283],"content":"Returning Results with Oracle REF CURSORs","linkify":"Returning Results with Oracle REF CURSORs","nodes":[{"content":"Returning Results with Oracle REF CURSORs","pos":[0,41]}]},{"content":"The .NET Framework Data Provider for Oracle supports the use of Oracle REF CURSORs to return a query result.","pos":[8287,8395]},{"content":"An Oracle REF CURSOR is returned as an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.","pos":[8396,8484],"source":" An Oracle REF CURSOR is returned as an <xref:System.Data.OracleClient.OracleDataReader>."},{"pos":[8491,8900],"content":"You can retrieve an <bpt id=\"p1\">**</bpt>OracleDataReader<ept id=\"p1\">**</ept> object, that represents an Oracle REF CURSOR using the <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph> method, and you can also specify an <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> that returns one or more Oracle REF CURSORs as the <bpt id=\"p2\">**</bpt>SelectCommand<ept id=\"p2\">**</ept> for an <ph id=\"ph3\">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> used to fill a <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","source":"You can retrieve an **OracleDataReader** object, that represents an Oracle REF CURSOR using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method, and you can also specify an <xref:System.Data.OracleClient.OracleCommand> that returns one or more Oracle REF CURSORs as the **SelectCommand** for an <xref:System.Data.OracleClient.OracleDataAdapter> used to fill a <xref:System.Data.DataSet>."},{"content":"To access a REF CURSOR returned from an Oracle data source, create an <bpt id=\"p1\">**</bpt>OracleCommand<ept id=\"p1\">**</ept> for your query and add an output parameter that references the REF CURSOR to the <bpt id=\"p2\">**</bpt>Parameters<ept id=\"p2\">**</ept> collection of your <bpt id=\"p3\">**</bpt>OracleCommand<ept id=\"p3\">**</ept>.","pos":[8907,9128],"source":"To access a REF CURSOR returned from an Oracle data source, create an **OracleCommand** for your query and add an output parameter that references the REF CURSOR to the **Parameters** collection of your **OracleCommand**."},{"content":"The name of the parameter must match the name of the REF CURSOR parameter in your query.","pos":[9129,9217]},{"content":"Set the type of the parameter to <bpt id=\"p1\">**</bpt>OracleType.Cursor<ept id=\"p1\">**</ept>.","pos":[9218,9273],"source":" Set the type of the parameter to **OracleType.Cursor**."},{"content":"The <bpt id=\"p1\">**</bpt>ExecuteReader<ept id=\"p1\">**</ept> method of your <bpt id=\"p2\">**</bpt>OracleCommand<ept id=\"p2\">**</ept> will return an <bpt id=\"p3\">**</bpt>OracleDataReader<ept id=\"p3\">**</ept> for the REF CURSOR.","pos":[9274,9384],"source":" The **ExecuteReader** method of your **OracleCommand** will return an **OracleDataReader** for the REF CURSOR."},{"content":"If your <bpt id=\"p1\">**</bpt>OracleCommand<ept id=\"p1\">**</ept> returns multiple REF CURSORS, add multiple output parameters.","pos":[9391,9478],"source":"If your **OracleCommand** returns multiple REF CURSORS, add multiple output parameters."},{"content":"You can access the different REF CURSORs by calling the <bpt id=\"p1\">**</bpt>OracleCommand.ExecuteReader<ept id=\"p1\">**</ept> method.","pos":[9479,9574],"source":" You can access the different REF CURSORs by calling the **OracleCommand.ExecuteReader** method."},{"content":"The call to <bpt id=\"p1\">**</bpt>ExecuteReader<ept id=\"p1\">**</ept> returns an <bpt id=\"p2\">**</bpt>OracleDataReader<ept id=\"p2\">**</ept> referencing the first REF CURSOR.","pos":[9575,9670],"source":" The call to **ExecuteReader** returns an **OracleDataReader** referencing the first REF CURSOR."},{"content":"You can then call the <bpt id=\"p1\">**</bpt>OracleDataReader.NextResult<ept id=\"p1\">**</ept> method to access subsequent REF CURSORs.","pos":[9671,9765],"source":" You can then call the **OracleDataReader.NextResult** method to access subsequent REF CURSORs."},{"content":"Although the parameters in your <bpt id=\"p1\">**</bpt>OracleCommand.Parameters<ept id=\"p1\">**</ept> collection match the REF CURSOR output parameters by name, the <bpt id=\"p2\">**</bpt>OracleDataReader<ept id=\"p2\">**</ept> accesses them in the order that they were added to the <bpt id=\"p3\">**</bpt>Parameters<ept id=\"p3\">**</ept> collection.","pos":[9766,9992],"source":" Although the parameters in your **OracleCommand.Parameters** collection match the REF CURSOR output parameters by name, the **OracleDataReader** accesses them in the order that they were added to the **Parameters** collection."},{"content":"For example, consider the following Oracle package and package body.","pos":[9999,10067]},{"pos":[10580,10778],"content":"The following code creates an <bpt id=\"p1\">**</bpt>OracleCommand<ept id=\"p1\">**</ept> that returns the REF CURSORs from the previous Oracle package by adding two parameters of type <bpt id=\"p2\">**</bpt>OracleType.Cursor<ept id=\"p2\">**</ept> to the <bpt id=\"p3\">**</bpt>Parameters<ept id=\"p3\">**</ept> collection.","source":"The following code creates an **OracleCommand** that returns the REF CURSORs from the previous Oracle package by adding two parameters of type **OracleType.Cursor** to the **Parameters** collection."},{"content":"The following code returns the results of the previous command using the <bpt id=\"p1\">**</bpt>Read<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>NextResult<ept id=\"p2\">**</ept> methods of the <bpt id=\"p3\">**</bpt>OracleDataReader<ept id=\"p3\">**</ept>.","pos":[11377,11514],"source":"The following code returns the results of the previous command using the **Read** and **NextResult** methods of the **OracleDataReader**."},{"content":"The REF CURSOR parameters are returned in order.","pos":[11515,11563]},{"pos":[13392,13505],"content":"The following example uses the previous command to populate a <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> with the results of the Oracle package.","source":"The following example uses the previous command to populate a **DataSet** with the results of the Oracle package."},{"pos":[13513,13955],"content":"[!NOTE]\n To avoid an **OverflowException**, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a **DataRow**. You can use the **FillError** event to determine if an **OverflowException** has occurred. For more information on the **FillError** event, see [Handling DataAdapter Events](../../../../docs/framework/data/adonet/handling-dataadapter-events.md).","leadings":["","> "],"nodes":[{"content":"To avoid an **OverflowException**, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a **DataRow**. You can use the **FillError** event to determine if an **OverflowException** has occurred. For more information on the **FillError** event, see [Handling DataAdapter Events](../../../../docs/framework/data/adonet/handling-dataadapter-events.md).","pos":[9,440],"nodes":[{"content":"To avoid an <bpt id=\"p1\">**</bpt>OverflowException<ept id=\"p1\">**</ept>, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a <bpt id=\"p2\">**</bpt>DataRow<ept id=\"p2\">**</ept>.","pos":[0,185],"source":"To avoid an **OverflowException**, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a **DataRow**."},{"content":"You can use the <bpt id=\"p1\">**</bpt>FillError<ept id=\"p1\">**</ept> event to determine if an <bpt id=\"p2\">**</bpt>OverflowException<ept id=\"p2\">**</ept> has occurred.","pos":[186,276],"source":" You can use the **FillError** event to determine if an **OverflowException** has occurred."},{"content":"For more information on the <bpt id=\"p1\">**</bpt>FillError<ept id=\"p1\">**</ept> event, see <bpt id=\"p2\">[</bpt>Handling DataAdapter Events<ept id=\"p2\">](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)</ept>.","pos":[277,431],"source":" For more information on the **FillError** event, see [Handling DataAdapter Events](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)."}]}]},{"pos":[14457,14465],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Working with DataReaders<ept id=\"p1\">](http://msdn.microsoft.com/en-us/126a966a-d08d-4d22-a19f-f432908b2b54)</ept><ph id=\"ph1\"> </ph>","pos":[14469,14566],"source":"[Working with DataReaders](http://msdn.microsoft.com/en-us/126a966a-d08d-4d22-a19f-f432908b2b54) "},{"content":"<bpt id=\"p1\">[</bpt>DataAdapters and DataReaders<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id=\"ph1\"> </ph>","pos":[14570,14673],"source":"[DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md) "},{"content":"<bpt id=\"p1\">[</bpt>Commands and Parameters<ept id=\"p1\">](../../../../docs/framework/data/adonet/commands-and-parameters.md)</ept><ph id=\"ph1\"> </ph>","pos":[14677,14770],"source":"[Commands and Parameters](../../../../docs/framework/data/adonet/commands-and-parameters.md) "},{"content":"<bpt id=\"p1\">[</bpt>Retrieving Database Schema Information<ept id=\"p1\">](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)</ept><ph id=\"ph1\"> </ph>","pos":[14774,14897],"source":"[Retrieving Database Schema Information](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md) "},{"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[14901,15004],"source":"[ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}