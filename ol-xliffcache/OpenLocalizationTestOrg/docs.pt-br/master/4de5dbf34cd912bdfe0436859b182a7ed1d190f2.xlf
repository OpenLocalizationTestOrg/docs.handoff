<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4de5dbf34cd912bdfe0436859b182a7ed1d190f2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\covariance-contravariance\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8a11bb2fd7a4e43d73650168eb01a3cb1659827</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcd59e71ad1f37254c86daa10c55f63e4aba887e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Covariance and Contravariance (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Covariance and Contravariance (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In C#, covariance and contravariance enable implicit reference conversion for array types, delegate types, and generic type arguments.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Covariance preserves assignment compatibility and contravariance reverses it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following code demonstrates the difference between assignment compatibility, covariance, and contravariance.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Covariance for arrays enables implicit conversion of an array of a more derived type to an array of a less derived type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>But this operation is not type safe, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Covariance and contravariance support for method groups allows for matching method signatures with delegate types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This enables you to assign to delegates not only methods that have matching signatures, but also methods that return more derived types (covariance) or that accept parameters that have less derived types (contravariance) than that specified by the delegate type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Variance in Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept> and <bpt id="p2">[</bpt>Using Variance in Delegates (C#)<ept id="p2">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following code example shows covariance and contravariance support for method groups.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In .NET Framework 4 or newer C# supports covariance and contravariance in generic interfaces and delegates and allows for implicit conversion of generic type parameters.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Variance in Generic Interfaces (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept> and <bpt id="p2">[</bpt>Variance in Delegates (C#)<ept id="p2">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example shows implicit reference conversion for generic interfaces.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A generic interface or delegate is called <bpt id="p1">*</bpt>variant<ept id="p1">*</ept> if its generic parameters are declared covariant or contravariant.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>C# enables you to create your own variant interfaces and delegates.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Variant Generic Interfaces (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces.md)</ept> and <bpt id="p2">[</bpt>Variance in Delegates (C#)<ept id="p2">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Generic Interfaces (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Discusses covariance and contravariance in generic interfaces and provides a list of variant generic interfaces in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Variant Generic Interfaces (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Shows how to create custom variant interfaces.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Variance in Interfaces for Generic Collections (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Shows how covariance and contravariance support in the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interfaces can help you reuse code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Discusses covariance and contravariance in generic and non-generic delegates and provides a list of variant generic delegates in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Variance in Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Shows how to use covariance and contravariance support in non-generic delegates to match method signatures with delegate types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Variance for Func and Action Generic Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Shows how covariance and contravariance support in the <ph id="ph1">`Func`</ph> and <ph id="ph2">`Action`</ph> delegates can help you reuse code.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>