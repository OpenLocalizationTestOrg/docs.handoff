{"content":"---\ntitle: \"How to: Specify the Degree of Parallelism in a Dataflow Block\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"dataflow block, specifying parallelism in TPL\"\n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, specifying parallelism\"\nms.assetid: e4088541-ee05-40db-95f5-147cfe62fde7\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Specify the Degree of Parallelism in a Dataflow Block\nThis document describes how to set the <xref:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism%2A?displayProperty=nameWithType> property to enable an execution dataflow block to process more than one message at a time. Doing this is useful when you have a dataflow block that performs a long-running computation and can benefit from processing messages in parallel. This example uses the <xref:System.Threading.Tasks.Dataflow.ActionBlock%601?displayProperty=nameWithType> class to perform multiple dataflow operations concurrently; however, you can specify the maximum degree of parallelism in any of the predefined execution block types that the TPL Dataflow Library provides, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602?displayProperty=nameWithType>, and <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602?displayProperty=nameWithType>.\n\n[!INCLUDE [tpl-install-instructions](../../../includes/tpl-install-instructions.md)]\n\n## Example  \n The following example performs two dataflow computations and prints the elapsed time that is required for each computation. The first computation specifies a maximum degree of parallelism of 1, which is the default. A maximum degree of parallelism of 1 causes the dataflow block to process messages serially. The second computation resembles the first, except that it specifies a maximum degree of parallelism that is equal to the number of available processors. This enables the dataflow block to perform multiple operations in parallel.  \n  \n [!code-csharp[TPLDataflow_DegreeOfParallelism#1](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#1)]\n [!code-vb[TPLDataflow_DegreeOfParallelism#1](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#1)]  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `DataflowDegreeOfParallelism.cs` (`DataflowDegreeOfParallelism.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.  \n  \n Visual C#  \n  \n **csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowDegreeOfParallelism.cs**  \n  \n Visual Basic  \n  \n **vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowDegreeOfParallelism.vb**  \n  \n## Robust Programming  \n By default, each predefined dataflow block propagates out messages in the order in which the messages are received.  Although multiple messages are processed simultaneously when you specify a maximum degree of parallelism that is greater than 1, they are still propagated out in the order in which they are received.  \n  \n Because the <xref:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism%2A> property represents the maximum degree of parallelism, the dataflow block might execute with a lesser degree of parallelism than you specify. The dataflow block can use a lesser degree of parallelism to meet its functional requirements or to account for a lack of available system resources. A dataflow block never chooses a greater degree of parallelism than you specify.  \n  \n## See also\n\n- [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)\n","nodes":[{"pos":[4,414],"embed":true,"restype":"x-metadata","content":"title: \"How to: Specify the Degree of Parallelism in a Dataflow Block\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"dataflow block, specifying parallelism in TPL\"\n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, specifying parallelism\"\nms.assetid: e4088541-ee05-40db-95f5-147cfe62fde7\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Specify the Degree of Parallelism in a Dataflow Block","nodes":[{"pos":[0,61],"content":"How to: Specify the Degree of Parallelism in a Dataflow Block","nodes":[{"content":"How to: Specify the Degree of Parallelism in a Dataflow Block","pos":[0,61]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[421,482],"content":"How to: Specify the Degree of Parallelism in a Dataflow Block","linkify":"How to: Specify the Degree of Parallelism in a Dataflow Block","nodes":[{"content":"How to: Specify the Degree of Parallelism in a Dataflow Block","pos":[0,61]}]},{"content":"This document describes how to set the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism%2A?displayProperty=nameWithType&gt;</ph> property to enable an execution dataflow block to process more than one message at a time.","pos":[483,736],"source":"This document describes how to set the <xref:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism%2A?displayProperty=nameWithType> property to enable an execution dataflow block to process more than one message at a time."},{"content":"Doing this is useful when you have a dataflow block that performs a long-running computation and can benefit from processing messages in parallel.","pos":[737,883]},{"content":"This example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601?displayProperty=nameWithType&gt;</ph> class to perform multiple dataflow operations concurrently; however, you can specify the maximum degree of parallelism in any of the predefined execution block types that the TPL Dataflow Library provides, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602?displayProperty=nameWithType&gt;</ph>.","pos":[884,1435],"source":" This example uses the <xref:System.Threading.Tasks.Dataflow.ActionBlock%601?displayProperty=nameWithType> class to perform multiple dataflow operations concurrently; however, you can specify the maximum degree of parallelism in any of the predefined execution block types that the TPL Dataflow Library provides, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602?displayProperty=nameWithType>, and <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602?displayProperty=nameWithType>."},{"pos":[1526,1533],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example performs two dataflow computations and prints the elapsed time that is required for each computation.","pos":[1537,1660]},{"content":"The first computation specifies a maximum degree of parallelism of 1, which is the default.","pos":[1661,1752]},{"content":"A maximum degree of parallelism of 1 causes the dataflow block to process messages serially.","pos":[1753,1845]},{"content":"The second computation resembles the first, except that it specifies a maximum degree of parallelism that is equal to the number of available processors.","pos":[1846,1999]},{"content":"This enables the dataflow block to perform multiple operations in parallel.","pos":[2000,2075]},{"pos":[2430,2448],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[2452,2727],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`DataflowDegreeOfParallelism.cs`</ph> (<ph id=\"ph2\">`DataflowDegreeOfParallelism.vb`</ph> for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `DataflowDegreeOfParallelism.cs` (`DataflowDegreeOfParallelism.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window."},{"content":"Visual C#","pos":[2734,2743]},{"pos":[2750,2831],"content":"<bpt id=\"p1\">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowDegreeOfParallelism.cs<ept id=\"p1\">**</ept>","source":"**csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowDegreeOfParallelism.cs**"},{"content":"Visual Basic","pos":[2838,2850]},{"pos":[2857,2938],"content":"<bpt id=\"p1\">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowDegreeOfParallelism.vb<ept id=\"p1\">**</ept>","source":"**vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowDegreeOfParallelism.vb**"},{"pos":[2947,2965],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"By default, each predefined dataflow block propagates out messages in the order in which the messages are received.","pos":[2969,3084]},{"content":"Although multiple messages are processed simultaneously when you specify a maximum degree of parallelism that is greater than 1, they are still propagated out in the order in which they are received.","pos":[3086,3285]},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism%2A&gt;</ph> property represents the maximum degree of parallelism, the dataflow block might execute with a lesser degree of parallelism than you specify.","pos":[3292,3540],"source":"Because the <xref:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism%2A> property represents the maximum degree of parallelism, the dataflow block might execute with a lesser degree of parallelism than you specify."},{"content":"The dataflow block can use a lesser degree of parallelism to meet its functional requirements or to account for a lack of available system resources.","pos":[3541,3690]},{"content":"A dataflow block never chooses a greater degree of parallelism than you specify.","pos":[3691,3771]},{"pos":[3780,3788],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3792,3881],"content":"<bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept>","source":"[Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)"}]}