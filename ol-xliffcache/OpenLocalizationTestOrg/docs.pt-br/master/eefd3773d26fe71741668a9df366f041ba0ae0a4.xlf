<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="assemblies-in-the-common-language-runtime.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eefd3773d26fe71741668a9df366f041ba0ae0a4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\app-domains\assemblies-in-the-common-language-runtime.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e0556afd9079671540ac4fc4ffc71705bc50c2c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44512649e92adee5124f5679a075852957accf43</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Assemblies in the Common Language Runtime</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Assemblies in the Common Language Runtime</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Assemblies are the building blocks of .NET Framework applications; they form the fundamental unit of deployment, version control, reuse, activation scoping, and security permissions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An assembly is a collection of types and resources that are built to work together and form a logical unit of functionality.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An assembly provides the common language runtime with the information it needs to be aware of type implementations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To the runtime, a type does not exist outside the context of an assembly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An assembly performs the following functions:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It contains code that the common language runtime executes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Microsoft intermediate language (MSIL) code in a portable executable (PE) file will not be executed if it does not have an associated assembly manifest.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Note that each assembly can have only one entry point (that is, <ph id="ph1">`DllMain`</ph>, <ph id="ph2">`WinMain`</ph>, or <ph id="ph3">`Main`</ph>).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It forms a security boundary.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An assembly is the unit at which permissions are requested and granted.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about security boundaries as they apply to assemblies, see <bpt id="p1">[</bpt>Assembly Security Considerations<ept id="p1">](../../../docs/framework/app-domains/assembly-security-considerations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It forms a type boundary.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Every type's identity includes the name of the assembly in which it resides.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A type called <ph id="ph1">`MyType`</ph> that is loaded in the scope of one assembly is not the same as a type called <ph id="ph2">`MyType`</ph> that is loaded in the scope of another assembly.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It forms a reference scope boundary.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The assembly's manifest contains assembly metadata that is used for resolving types and satisfying resource requests.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It specifies the types and resources that are exposed outside the assembly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The manifest also enumerates other assemblies on which it depends.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It forms a version boundary.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The assembly is the smallest versionable unit in the common language runtime; all types and resources in the same assembly are versioned as a unit.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The assembly's manifest describes the version dependencies you specify for any dependent assemblies.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about versioning, see <bpt id="p1">[</bpt>Assembly Versioning<ept id="p1">](../../../docs/framework/app-domains/assembly-versioning.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It forms a deployment unit.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When an application starts, only the assemblies that the application initially calls must be present.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Other assemblies, such as localization resources or assemblies containing utility classes, can be retrieved on demand.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This allows applications to be kept simple and thin when first downloaded.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about deploying assemblies, see <bpt id="p1">[</bpt>Deploying Applications<ept id="p1">](../../../docs/framework/deployment/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is the unit at which side-by-side execution is supported.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about running multiple versions of an assembly, see <bpt id="p1">[</bpt>Assemblies and Side-by-Side Execution<ept id="p1">](../../../docs/framework/app-domains/assemblies-and-side-by-side-execution.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Assemblies can be static or dynamic.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Static assemblies can include .NET Framework types (interfaces and classes), as well as resources for the assembly (bitmaps, JPEG files, resource files, and so on).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Static assemblies are stored on disk in portable executable (PE) files.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can also use the .NET Framework to create dynamic assemblies, which are run directly from memory and are not saved to disk before execution.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can save dynamic assemblies to disk after they have executed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There are several ways to create assemblies.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can use development tools, such as Visual Studio, that you have used in the past to create .dll or .exe files.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use tools provided in the <ph id="ph1">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph> to create assemblies with modules created in other development environments.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can also use common language runtime APIs, such as <ph id="ph1">&lt;xref:System.Reflection.Emit?displayProperty=nameWithType&gt;</ph>, to create dynamic assemblies.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assembly Contents<ept id="p1">](../../../docs/framework/app-domains/assembly-contents.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Describes the elements that make up an assembly.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assembly Manifest<ept id="p1">](../../../docs/framework/app-domains/assembly-manifest.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Describes the data in the assembly manifest, and how it is stored in assemblies.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Global Assembly Cache<ept id="p1">](../../../docs/framework/app-domains/gac.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Describes the global assembly cache and how it is used with assemblies.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strong-Named Assemblies<ept id="p1">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Describes the characteristics of strong-named assemblies.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assembly Security Considerations<ept id="p1">](../../../docs/framework/app-domains/assembly-security-considerations.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Discusses how security works with assemblies.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assembly Versioning<ept id="p1">](../../../docs/framework/app-domains/assembly-versioning.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Provides an overview of the .NET Framework versioning policy.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assembly Placement<ept id="p1">](../../../docs/framework/app-domains/assembly-placement.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Discusses where to locate assemblies.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assemblies and Side-by-Side Execution<ept id="p1">](../../../docs/framework/app-domains/assemblies-and-side-by-side-execution.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Provides an overview of using multiple versions of the runtime or of an assembly simultaneously.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming with Assemblies<ept id="p1">](../../../docs/framework/app-domains/programming-with-assemblies.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Describes how to create, sign, and set attributes on assemblies.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Emitting Dynamic Methods and Assemblies<ept id="p1">](../../../docs/framework/reflection-and-codedom/emitting-dynamic-methods-and-assemblies.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Describes how to create dynamic assemblies.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How the Runtime Locates Assemblies<ept id="p1">](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Describes how the .NET Framework resolves assembly references at run time.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>