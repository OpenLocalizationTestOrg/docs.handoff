{"content":"---\ntitle: \"Message Flow Overview\"\nms.date: \"03/30/2017\"\nms.assetid: fb0899e1-84cc-4d90-b45b-dc5a50063943\n---\n# Message Flow Overview\nIn a distributed system containing interconnected services, it is necessary to determine causal relationships between the services. It is important to understand the various components that were part of a request flow to support critical scenarios such as health monitoring, troubleshooting, and root cause analysis. To enable the correlation of traces between various services, in the .NET Framework 4 we added support through the following features:\n\n-   Analytic tracing: A high performance and low verbosity tracing feature using Event Tracing for Windows (ETW).\n\n-   End-to-end activity model for WCF/WF services: This feature supports correlation of traces generated by the <xref:System.ServiceModel> and <xref:System.Workflow.ComponentModel> namespaces.\n\n-   ETW tracking for WF: This feature uses tracking records generated by WF services to provide visibility into the workflow’s current state and progress.\n\n Errors logged in a tracking or tracing record can be used to find code defects or incorrectly formed messages. The ActivityId property of the Correlation node in the event’s message header can be used to determine the faulting activity. To enable message flow tracing by activity ID, see [Configuring Message Flow Tracing](../../../../docs/framework/wcf/diagnostics/etw/configuring-message-flow-tracing.md). This topic demonstrates how to enable message flow tracing in the project created in the Getting Started tutorial.\n\n### To enable message flow tracing in the Getting Started tutorial\n\n1.  Open Event Viewer by clicking **Start**, **Run**, and entering `eventvwr.exe`.\n\n2.  If you haven’t enabled analytic tracing, expand **Applications and Services Logs**, **Microsoft**, **Windows**, **Application Server-Applications**. Select **View**, **Show Analytic and Debug Logs**. Right-click **Analytic** and select **Enable Log**. Leave Event Viewer open so that traces can be viewed.\n\n3.  Open the sample created in the [Getting Started Tutorial](../../../../docs/framework/wcf/getting-started-tutorial.md) in Visual Studio 2012. Note that you must run Visual Studio 2012 as an administrator so that the service can be created. If you have the WCF samples installed, you can open the [Getting Started](../../../../docs/framework/wcf/samples/getting-started-sample.md), which contains the completed project created in the tutorial.\n\n4.  Right-click the **Service** project and select **Add**, **New Item**. Select **Application Configuration File** and click **OK**.\n\n5.  Add the following code to the App.Config file created in the previous step.\n\n    ```xml\n    <system.serviceModel>\n      <diagnostics>\n        <endToEndTracing propagateActivity=\"true\" messageFlowTracing=\"true\"/>\n      </diagnostics>\n    </system.serviceModel>\n    ```\n\n6.  Execute the server application without debugging by pressing CTRL+F5. Execute the client project by right-clicking the **Client** project and selecting **Debug**, **Start New Instance**.\n\n7.  To trace the events from the client to the server, add the following to the application configuration file in the Client project.\n\n    ```xml\n    <diagnostics>\n      <endToEndTracing propagateActivity=\"true\" messageFlowTracing=\"true\"/>\n    </diagnostics>\n    ```\n\n8.  In Program.cs in the client, add the following Using statement.\n\n    ```csharp\n    using System.Diagnostics;\n    ```\n\n9. In the Main method in the program.cs file in the client project, set the Trace GUID to be propagated in the event log.\n\n    ```csharp\n    Guid guid = Guid.NewGuid();\n    Trace.CorrelationManager.ActivityId = guid;\n    ```\n\n10. Refresh and examine the **Analytic**  log.  Look for an event with Event ID 220.  Select the event, and click the **Details** tab in the preview pane. This event will contain the correlation ID for the calling activity.\n\n    ```xml\n    <Correlation ActivityID=\"{A066CCF1-8AB3-459B-B62F-F79F957A5036}\" />\n    ```\n\n    > [!NOTE]\n    >  All events with the same GUID in the ActivityID are related to one request. This can be used to correlate messages from a specific client to a specific service. If the client called another service, then the same client could be identified by ActivityID.\n\n11. In some cases, the ActivityID can change from the original GUID to a new ActivityID. In that case, a transfer event is emitted. This event ID is 499, and the event will contain the following data in the header.\n\n    ```xml\n    <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n        <System>\n            <Provider Name=\"Microsoft-Windows-Application Server-Applications\" Guid=\"{c651f5f6-1c0d-492e-8ae1-b4efd7c9d503}\" />\n            <EventID>499</EventID>\n            ...\n            <Correlation ActivityID=\"{A066CCF1-8AB3-459B-B62F-F79F957A5036}\" RelatedActivityID=\"{85FC0930-9C49-42DA-804B-A7368104BD1B}\" />\n            ...\n       </System>\n    </Event>\n    ```\n\n    > [!NOTE]\n    >  The transfer event records the change of the active ActivityID from the GUID specified as the ActivityID to the GUID specified as RelatedActivityID. After the transfer event is emitted, all events will contain the new GUID as the ActivityID.\n","nodes":[{"pos":[4,105],"embed":true,"restype":"x-metadata","content":"title: \"Message Flow Overview\"\nms.date: \"03/30/2017\"\nms.assetid: fb0899e1-84cc-4d90-b45b-dc5a50063943","nodes":[{"content":"Message Flow Overview","nodes":[{"pos":[0,21],"content":"Message Flow Overview","nodes":[{"content":"Message Flow Overview","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[112,133],"content":"Message Flow Overview","linkify":"Message Flow Overview","nodes":[{"content":"Message Flow Overview","pos":[0,21]}]},{"content":"In a distributed system containing interconnected services, it is necessary to determine causal relationships between the services.","pos":[134,265]},{"content":"It is important to understand the various components that were part of a request flow to support critical scenarios such as health monitoring, troubleshooting, and root cause analysis.","pos":[266,450]},{"content":"To enable the correlation of traces between various services, in the .NET Framework 4 we added support through the following features:","pos":[451,585]},{"content":"Analytic tracing: A high performance and low verbosity tracing feature using Event Tracing for Windows (ETW).","pos":[591,700]},{"pos":[706,894],"content":"End-to-end activity model for WCF/WF services: This feature supports correlation of traces generated by the <ph id=\"ph1\">&lt;xref:System.ServiceModel&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Workflow.ComponentModel&gt;</ph> namespaces.","source":"End-to-end activity model for WCF/WF services: This feature supports correlation of traces generated by the <xref:System.ServiceModel> and <xref:System.Workflow.ComponentModel> namespaces."},{"content":"ETW tracking for WF: This feature uses tracking records generated by WF services to provide visibility into the workflow’s current state and progress.","pos":[900,1050]},{"content":"Errors logged in a tracking or tracing record can be used to find code defects or incorrectly formed messages.","pos":[1053,1163]},{"content":"The ActivityId property of the Correlation node in the event’s message header can be used to determine the faulting activity.","pos":[1164,1289]},{"content":"To enable message flow tracing by activity ID, see <bpt id=\"p1\">[</bpt>Configuring Message Flow Tracing<ept id=\"p1\">](../../../../docs/framework/wcf/diagnostics/etw/configuring-message-flow-tracing.md)</ept>.","pos":[1290,1460],"source":" To enable message flow tracing by activity ID, see [Configuring Message Flow Tracing](../../../../docs/framework/wcf/diagnostics/etw/configuring-message-flow-tracing.md)."},{"content":"This topic demonstrates how to enable message flow tracing in the project created in the Getting Started tutorial.","pos":[1461,1575]},{"pos":[1581,1643],"content":"To enable message flow tracing in the Getting Started tutorial","linkify":"To enable message flow tracing in the Getting Started tutorial","nodes":[{"content":"To enable message flow tracing in the Getting Started tutorial","pos":[0,62]}]},{"pos":[1649,1727],"content":"Open Event Viewer by clicking <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Run<ept id=\"p2\">**</ept>, and entering <ph id=\"ph1\">`eventvwr.exe`</ph>.","source":"Open Event Viewer by clicking **Start**, **Run**, and entering `eventvwr.exe`."},{"content":"If you haven’t enabled analytic tracing, expand <bpt id=\"p1\">**</bpt>Applications and Services Logs<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Microsoft<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Windows<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Application Server-Applications<ept id=\"p4\">**</ept>.","pos":[1733,1881],"source":"If you haven’t enabled analytic tracing, expand **Applications and Services Logs**, **Microsoft**, **Windows**, **Application Server-Applications**."},{"content":"Select <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Show Analytic and Debug Logs<ept id=\"p2\">**</ept>.","pos":[1882,1932],"source":" Select **View**, **Show Analytic and Debug Logs**."},{"content":"Right-click <bpt id=\"p1\">**</bpt>Analytic<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Enable Log<ept id=\"p2\">**</ept>.","pos":[1933,1984],"source":" Right-click **Analytic** and select **Enable Log**."},{"content":"Leave Event Viewer open so that traces can be viewed.","pos":[1985,2038]},{"content":"Open the sample created in the <bpt id=\"p1\">[</bpt>Getting Started Tutorial<ept id=\"p1\">](../../../../docs/framework/wcf/getting-started-tutorial.md)</ept> in Visual Studio 2012.","pos":[2044,2184],"source":"Open the sample created in the [Getting Started Tutorial](../../../../docs/framework/wcf/getting-started-tutorial.md) in Visual Studio 2012."},{"content":"Note that you must run Visual Studio 2012 as an administrator so that the service can be created.","pos":[2185,2282]},{"content":"If you have the WCF samples installed, you can open the <bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](../../../../docs/framework/wcf/samples/getting-started-sample.md)</ept>, which contains the completed project created in the tutorial.","pos":[2283,2485],"source":" If you have the WCF samples installed, you can open the [Getting Started](../../../../docs/framework/wcf/samples/getting-started-sample.md), which contains the completed project created in the tutorial."},{"content":"Right-click the <bpt id=\"p1\">**</bpt>Service<ept id=\"p1\">**</ept> project and select <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>New Item<ept id=\"p3\">**</ept>.","pos":[2491,2560],"source":"Right-click the **Service** project and select **Add**, **New Item**."},{"content":"Select <bpt id=\"p1\">**</bpt>Application Configuration File<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","pos":[2561,2620],"source":" Select **Application Configuration File** and click **OK**."},{"content":"Add the following code to the App.Config file created in the previous step.","pos":[2626,2701]},{"content":"Execute the server application without debugging by pressing CTRL+F5.","pos":[2899,2968]},{"content":"Execute the client project by right-clicking the <bpt id=\"p1\">**</bpt>Client<ept id=\"p1\">**</ept> project and selecting <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Start New Instance<ept id=\"p3\">**</ept>.","pos":[2969,3085],"source":" Execute the client project by right-clicking the **Client** project and selecting **Debug**, **Start New Instance**."},{"content":"To trace the events from the client to the server, add the following to the application configuration file in the Client project.","pos":[3091,3220]},{"content":"In Program.cs in the client, add the following Using statement.","pos":[3359,3422]},{"content":"In the Main method in the program.cs file in the client project, set the Trace GUID to be propagated in the event log.","pos":[3480,3598]},{"content":"Refresh and examine the <bpt id=\"p1\">**</bpt>Analytic<ept id=\"p1\">**</ept>  log.","pos":[3707,3749],"source":"Refresh and examine the **Analytic**  log."},{"content":"Look for an event with Event ID 220.","pos":[3751,3787]},{"content":"Select the event, and click the <bpt id=\"p1\">**</bpt>Details<ept id=\"p1\">**</ept> tab in the preview pane.","pos":[3789,3857],"source":"  Select the event, and click the **Details** tab in the preview pane."},{"content":"This event will contain the correlation ID for the calling activity.","pos":[3858,3926]},{"pos":[4026,4295],"content":"[!NOTE]\nAll events with the same GUID in the ActivityID are related to one request. This can be used to correlate messages from a specific client to a specific service. If the client called another service, then the same client could be identified by ActivityID.","leadings":["","    >  "],"nodes":[{"content":"All events with the same GUID in the ActivityID are related to one request. This can be used to correlate messages from a specific client to a specific service. If the client called another service, then the same client could be identified by ActivityID.","pos":[8,262],"nodes":[{"content":"All events with the same GUID in the ActivityID are related to one request.","pos":[0,75]},{"content":"This can be used to correlate messages from a specific client to a specific service.","pos":[76,160]},{"content":"If the client called another service, then the same client could be identified by ActivityID.","pos":[161,254]}]}]},{"content":"In some cases, the ActivityID can change from the original GUID to a new ActivityID.","pos":[4301,4385]},{"content":"In that case, a transfer event is emitted.","pos":[4386,4428]},{"content":"This event ID is 499, and the event will contain the following data in the header.","pos":[4429,4511]},{"pos":[4994,5250],"content":"[!NOTE]\nThe transfer event records the change of the active ActivityID from the GUID specified as the ActivityID to the GUID specified as RelatedActivityID. After the transfer event is emitted, all events will contain the new GUID as the ActivityID.","leadings":["","    >  "],"nodes":[{"content":"The transfer event records the change of the active ActivityID from the GUID specified as the ActivityID to the GUID specified as RelatedActivityID. After the transfer event is emitted, all events will contain the new GUID as the ActivityID.","pos":[8,249],"nodes":[{"content":"The transfer event records the change of the active ActivityID from the GUID specified as the ActivityID to the GUID specified as RelatedActivityID.","pos":[0,148]},{"content":"After the transfer event is emitted, all events will contain the new GUID as the ActivityID.","pos":[149,241]}]}]}]}