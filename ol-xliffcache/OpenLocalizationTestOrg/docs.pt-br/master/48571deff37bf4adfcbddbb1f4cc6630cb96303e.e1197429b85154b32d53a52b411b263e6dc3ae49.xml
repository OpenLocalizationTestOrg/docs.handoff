{"content":"---\ntitle: \"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 903c7e9a-f48d-4a07-a8a8-5450d2646efa\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)\nThis example demonstrates three ways to compare two file listings:  \n  \n-   By querying for a Boolean value that specifies whether the two file lists are identical.  \n  \n-   By querying for the intersection to retrieve the files that are in both folders.  \n  \n-   By querying for the set difference to retrieve the files that are in one folder but not the other.  \n  \n    > [!NOTE]\n    >  The techniques shown here can be adapted to compare sequences of objects of any type.  \n  \n The `FileComparer` class shown here demonstrates how to use a custom comparer class together with the Standard Query Operators. The class is not intended for use in real-world scenarios. It just uses the name and length in bytes of each file to determine whether the contents of each folder are identical or not. In a real-world scenario, you should modify this comparer to perform a more rigorous equality check.  \n  \n## Example  \n  \n```vb  \nModule CompareDirs  \n    Public Sub Main()  \n  \n        ' Create two identical or different temporary folders   \n        ' on a local drive and add files to them.  \n        ' Then set these file paths accordingly.  \n        Dim pathA As String = \"C:\\TestDir\"  \n        Dim pathB As String = \"C:\\TestDir2\"  \n  \n        ' Take a snapshot of the file system.   \n        Dim dir1 As New System.IO.DirectoryInfo(pathA)  \n        Dim dir2 As New System.IO.DirectoryInfo(pathB)  \n  \n        Dim list1 = dir1.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories)  \n        Dim list2 = dir2.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories)  \n  \n        ' Create the FileCompare object we'll use in each query  \n        Dim myFileCompare As New FileCompare  \n  \n        ' This query determines whether the two folders contain  \n        ' identical file lists, based on the custom file comparer  \n        ' that is defined in the FileCompare class.  \n        ' The query executes immediately because it returns a bool.  \n        Dim areIdentical As Boolean = list1.SequenceEqual(list2, myFileCompare)  \n        If areIdentical = True Then  \n            Console.WriteLine(\"The two folders are the same.\")  \n        Else  \n            Console.WriteLine(\"The two folders are not the same.\")  \n        End If  \n  \n        ' Find common files in both folders. It produces a sequence and doesn't execute  \n        ' until the foreach statement.  \n        Dim queryCommonFiles = list1.Intersect(list2, myFileCompare)  \n  \n        If queryCommonFiles.Count() > 0 Then  \n  \n            Console.WriteLine(\"The following files are in both folders:\")  \n            For Each fi As System.IO.FileInfo In queryCommonFiles  \n                Console.WriteLine(fi.FullName)  \n            Next  \n        Else  \n            Console.WriteLine(\"There are no common files in the two folders.\")  \n        End If  \n  \n        ' Find the set difference between the two folders.  \n        ' For this example we only check one way.  \n        Dim queryDirAOnly = list1.Except(list2, myFileCompare)  \n        Console.WriteLine(\"The following files are in dirA but not dirB:\")  \n        For Each fi As System.IO.FileInfo In queryDirAOnly  \n            Console.WriteLine(fi.FullName)  \n        Next  \n  \n        ' Keep the console window open in debug mode  \n        Console.WriteLine(\"Press any key to exit.\")  \n        Console.ReadKey()  \n    End Sub  \n  \n    ' This implementation defines a very simple comparison  \n    ' between two FileInfo objects. It only compares the name  \n    ' of the files being compared and their length in bytes.  \n    Public Class FileCompare  \n        Implements System.Collections.Generic.IEqualityComparer(Of System.IO.FileInfo)  \n  \n        Public Function Equals1(ByVal x As System.IO.FileInfo, ByVal y As System.IO.FileInfo) _  \n            As Boolean Implements System.Collections.Generic.IEqualityComparer(Of System.IO.FileInfo).Equals  \n  \n            If (x.Name = y.Name) And (x.Length = y.Length) Then  \n                Return True  \n            Else  \n                Return False  \n            End If  \n        End Function  \n  \n        ' Return a hash that reflects the comparison criteria. According to the   \n        ' rules for IEqualityComparer(Of T), if Equals is true, then the hash codes must  \n        ' also be equal. Because equality as defined here is a simple value equality, not  \n        ' reference identity, it is possible that two or more objects will produce the same  \n        ' hash code.  \n        Public Function GetHashCode1(ByVal fi As System.IO.FileInfo) _  \n            As Integer Implements System.Collections.Generic.IEqualityComparer(Of System.IO.FileInfo).GetHashCode  \n            Dim s As String = fi.Name & fi.Length  \n            Return s.GetHashCode()  \n        End Function  \n    End Class  \nEnd Module  \n```  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace.  \n  \n## See Also  \n [LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)   \n [LINQ and File Directories (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)","nodes":[{"pos":[4,468],"nodes":[{"content":"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,82],"content":"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic) | Microsoft Docs","pos":[0,82]}]}],"pos":[6,91],"yaml":true}],"content":"title: \"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 903c7e9a-f48d-4a07-a8a8-5450d2646efa\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[475,540],"content":"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)","linkify":"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)","nodes":[{"content":"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)","pos":[0,65]}]},{"content":"This example demonstrates three ways to compare two file listings:","pos":[541,607]},{"content":"By querying for a Boolean value that specifies whether the two file lists are identical.","pos":[617,705]},{"content":"By querying for the intersection to retrieve the files that are in both folders.","pos":[715,795]},{"content":"By querying for the set difference to retrieve the files that are in one folder but not the other.","pos":[805,903]},{"pos":[915,1015],"content":"[!NOTE]\nThe techniques shown here can be adapted to compare sequences of objects of any type.","leadings":["","    >  "],"nodes":[{"content":"The techniques shown here can be adapted to compare sequences of objects of any type.","pos":[8,93]}]},{"content":"The <ph id=\"ph1\">`FileComparer`</ph> class shown here demonstrates how to use a custom comparer class together with the Standard Query Operators.","pos":[1022,1149],"source":"The `FileComparer` class shown here demonstrates how to use a custom comparer class together with the Standard Query Operators."},{"content":"The class is not intended for use in real-world scenarios.","pos":[1150,1208]},{"content":"It just uses the name and length in bytes of each file to determine whether the contents of each folder are identical or not.","pos":[1209,1334]},{"content":"In a real-world scenario, you should modify this comparer to perform a more rigorous equality check.","pos":[1335,1435]},{"pos":[1444,1451],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5328,5346],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[5350,5513],"content":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <ph id=\"ph1\">`Imports`</ph> statement for the System.Linq namespace.","source":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace."},{"pos":[5522,5530],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept><ph id=\"ph1\"> </ph>","pos":[5534,5644],"source":"[LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","pos":[5648,5777],"source":"[LINQ and File Directories (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)"}]}