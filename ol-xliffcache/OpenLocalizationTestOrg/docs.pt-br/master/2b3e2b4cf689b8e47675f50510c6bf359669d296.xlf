<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b3e2b4cf689b8e47675f50510c6bf359669d296</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\how-to-define-a-generic-type-with-reflection-emit.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8e774675ad16f4a3a8962be8fc3f186935cd768</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47e0c5742576b2a7660f8edd1d64c92a8ee1b24c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Define a Generic Type with Reflection Emit | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Define a Generic Type with Reflection Emit</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic shows how to create a simple generic type with two type parameters, how to apply class constraints, interface constraints, and special constraints to the type parameters, and how to create members that use the type parameters of the class as parameter types and return types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A method is not generic just because it belongs to a generic type and uses the type parameters of that type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A method is generic only if it has its own type parameter list.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Most methods on generic types are not generic, as in this example.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For an example of emitting a generic method, see <bpt id="p1">[</bpt>How to: Define a Generic Method with Reflection Emit<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To define a generic type</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Define a dynamic assembly named <ph id="ph1">`GenericEmitExample1`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this example, the assembly is executed and saved to disk, so <ph id="ph1">&lt;xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName&gt;</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#2<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#2)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#2<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#2)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#2<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#2)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Define a dynamic module.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An assembly is made up of executable modules.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For a single-module assembly, the module name is the same as the assembly name, and the file name is the module name plus an extension.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#3<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#3)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#3<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#3)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#3<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#3)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Define a class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this example, the class is named <ph id="ph1">`Sample`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#4<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#4<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#4)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#4<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#4)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Define the generic type parameters of <ph id="ph1">`Sample`</ph> by passing an array of strings containing the names of the parameters to the <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This makes the class a generic type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The return value is an array of <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects representing the type parameters, which can be used in your emitted code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the following code, <ph id="ph1">`Sample`</ph> becomes a generic type with type parameters <ph id="ph2">`TFirst`</ph> and <ph id="ph3">`TSecond`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To make the code easier to read, each <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> is placed in a variable with the same name as the type parameter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#5<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#5<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#5)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#5<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#5)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add special constraints to the type parameters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, type parameter <ph id="ph1">`TFirst`</ph> is constrained to types that have parameterless constructors, and to reference types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#6<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#6)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#6<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#6)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#6<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#6)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Optionally add class and interface constraints to the type parameters.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this example, type parameter <ph id="ph1">`TFirst`</ph> is constrained to types that derive from the base class represented by the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object contained in the variable <ph id="ph3">`baseType`</ph>, and that implement the interfaces whose types are contained in the variables <ph id="ph4">`interfaceA`</ph> and <ph id="ph5">`interfaceB`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See the code example for the declaration and assignment of these variables.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#7<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#7)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#7<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#7)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#7<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#7)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Define a field.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this example, the type of the field is specified by type parameter <ph id="ph1">`TFirst`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Type&gt;</ph>, so you can use generic type parameters anywhere a type can be used.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#21<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#21)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#21<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#21)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#21<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#21)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Define a method that uses the type parameters of the generic type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that such methods are not generic unless they have their own type parameter lists.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code defines a <ph id="ph1">`static`</ph> method (<ph id="ph2">`Shared`</ph> in Visual Basic) that takes an array of <ph id="ph3">`TFirst`</ph> and returns a <ph id="ph4">`List&lt;TFirst&gt;`</ph> (<ph id="ph5">`List(Of TFirst)`</ph> in Visual Basic) containing all the elements of the array.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To define this method, it is necessary to create the type <ph id="ph1">`List&lt;TFirst&gt;`</ph> by calling <ph id="ph2">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> on the generic type definition, <ph id="ph3">`List&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">`T`</ph> is omitted when you use the <ph id="ph2">`typeof`</ph> operator (<ph id="ph3">`GetType`</ph> in Visual Basic) to get the generic type definition.) The parameter type is created by using the <ph id="ph4">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#22<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#22)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#22<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#22)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#22<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#22)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Emit the method body.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The method body consists of three opcodes that load the input array onto the stack, call the <ph id="ph1">`List&lt;TFirst&gt;`</ph> constructor that takes <ph id="ph2">`IEnumerable&lt;TFirst&gt;`</ph> (which does all the work of putting the input elements into the list), and return (leaving the new <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object on the stack).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The difficult part of emitting this code is getting the constructor.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method is not supported on a <ph id="ph2">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph>, so it is not possible to get the constructor of <ph id="ph3">`List&lt;TFirst&gt;`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>First, it is necessary to get the constructor of the generic type definition <ph id="ph1">`List&lt;T&gt;`</ph> and then to call a method that converts it to the corresponding constructor of <ph id="ph2">`List&lt;TFirst&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The constructor used for this code example takes an <ph id="ph1">`IEnumerable&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note, however, that this is not the generic type definition of the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> generic interface; instead, the type parameter <ph id="ph2">`T`</ph> from <ph id="ph3">`List&lt;T&gt;`</ph> must be substituted for the type parameter <ph id="ph4">`T`</ph> of <ph id="ph5">`IEnumerable&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>(This seems confusing only because both types have type parameters named <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>That is why this code example uses the names <ph id="ph1">`TFirst`</ph> and <ph id="ph2">`TSecond`</ph>.) To get the type of the constructor argument, start with the generic type definition <ph id="ph3">`IEnumerable&lt;T&gt;`</ph> and call <ph id="ph4">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> with the first generic type parameter of <ph id="ph5">`List&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The constructor argument list must be passed as an array, with just one argument in this case.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The generic type definition is expressed as <ph id="ph1">`IEnumerable&lt;&gt;`</ph> when you use the <ph id="ph2">`typeof`</ph> operator in C#, or <ph id="ph3">`IEnumerable(Of )`</ph> when you use the <ph id="ph4">`GetType`</ph> operator in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Now it is possible to get the constructor of <ph id="ph1">`List&lt;T&gt;`</ph> by calling <ph id="ph2">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> on the generic type definition.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To convert this constructor to the corresponding constructor of <ph id="ph1">`List&lt;TFirst&gt;`</ph>, pass <ph id="ph2">`List&lt;TFirst&gt;`</ph> and the constructor from <ph id="ph3">`List&lt;T&gt;`</ph> to the static <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#23<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#23)</ept><ept id="p1">]</ept>   <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#23<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#23)</ept><ept id="p3">]</ept>   <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#23<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#23)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Create the type and save the file.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#8<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#8)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#8<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#8)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#8<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#8)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Invoke the method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ExampleMethod`</ph> is not generic, but the type it belongs to is generic, so in order to get a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that can be invoked it is necessary to create a constructed type from the type definition for <ph id="ph3">`Sample`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The constructed type uses the <ph id="ph1">`Example`</ph> class, which satisfies the constraints on <ph id="ph2">`TFirst`</ph> because it is a reference type and has a default parameterless constructor, and the <ph id="ph3">`ExampleDerived`</ph> class which satisfies the constraints on <ph id="ph4">`TSecond`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>(The code for <ph id="ph1">`ExampleDerived`</ph> can be found in the example code section.) These two types are passed to <ph id="ph2">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> to create the constructed type.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> is then obtained using the <ph id="ph2">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#9<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#9)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#9<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#9)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#9<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#9)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following code creates an array of <ph id="ph1">`Example`</ph> objects, places that array in an array of type <ph id="ph2">&lt;xref:System.Object&gt;</ph> representing the arguments of the method to be invoked, and passes them to the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The first argument of the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method is a null reference because the method is <ph id="ph2">`static`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#10<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#10)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#10<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#10)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#10<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#10)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following code example defines a class named <ph id="ph1">`Sample`</ph>, along with a base class and two interfaces.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The program defines two generic type parameters for <ph id="ph1">`Sample`</ph>, turning it into a generic type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Type parameters are the only thing that makes a type generic.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The program shows this by displaying a test message before and after the definition of the type parameters.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The type parameter <ph id="ph1">`TSecond`</ph> is used to demonstrate class and interface constraints, using the base class and interfaces, and the type parameter <ph id="ph2">`TFirst`</ph> is used to demonstrate special constraints.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The code example defines a field and a method using the class's type parameters for the field type and for the parameter and return type of the method.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`Sample`</ph> class has been created, the method is invoked.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The program includes a method that lists information about a generic type, and a method that lists the special constraints on a type parameter.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These methods are used to display information about the finished <ph id="ph1">`Sample`</ph> class.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The program saves the finished module to disk as <ph id="ph1">`GenericEmitExample1.dll`</ph>, so you can open it with the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> and examine the MSIL for the <ph id="ph2">`Sample`</ph> class.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>EmitGenericType#1<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>EmitGenericType#1<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>EmitGenericType#1<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The code contains the C# <ph id="ph1">`using`</ph> statements (<ph id="ph2">`Imports`</ph> in Visual Basic) necessary for compilation.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>No additional assembly references are required.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Compile the code at the command line using csc.exe, vbc.exe, or cl.exe.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To compile the code in Visual Studio, place it in a console application project template.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Reflection Emit<ept id="p1">](http://msdn.microsoft.com/en-us/ccc6540d-0e2c-4d89-b456-eb7353f9e9ac)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Reflection Emit Dynamic Assembly Scenarios<ept id="p1">](http://msdn.microsoft.com/en-us/e1cc6750-e20f-473b-bb4e-f43bc66aecce)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>