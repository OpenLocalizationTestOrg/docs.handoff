<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="specifying-a-character-set.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">798fcacab5bd74dbd6569a68a3b598c0bb63a0a7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\specifying-a-character-set.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19168a1ef2c6ceb7c2b09c96bd1d7303b41b2d1a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a12b0d16c845b35ad37ebb3e50f8e96c08ed87ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Specifying a Character Set</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Specifying a Character Set</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field controls string marshaling and determines how platform invoke finds function names in a DLL.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes both behaviors.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Some APIs export two versions of functions that take string arguments: narrow (ANSI) and wide (Unicode).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Windows API, for instance, includes the following entry-point names for the <bpt id="p1">**</bpt>MessageBox<ept id="p1">**</ept> function:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MessageBoxA<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Provides 1-byte character ANSI formatting, distinguished by an "A" appended to the entry-point name.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Calls to <bpt id="p1">**</bpt>MessageBoxA<ept id="p1">**</ept> always marshal strings in ANSI format.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MessageBoxW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Provides 2-byte character Unicode formatting, distinguished by a "W" appended to the entry-point name.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Calls to <bpt id="p1">**</bpt>MessageBoxW<ept id="p1">**</ept> always marshal strings in Unicode format.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>String Marshaling and Name Matching</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CharSet`</ph> field accepts the following values:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet.Ansi&gt;</ph> (default value)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>String marshaling</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Platform invoke marshals strings from their managed format (Unicode) to ANSI format.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Name matching</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=nameWithType&gt;</ph> field is <ph id="ph2">`true`</ph>, as it is by default in <ph id="ph3">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph>, platform invoke searches only for the name you specify.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if you specify <bpt id="p1">**</bpt>MessageBox<ept id="p1">**</ept>, platform invoke searches for <bpt id="p2">**</bpt>MessageBox<ept id="p2">**</ept> and fails when it cannot locate the exact spelling.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`ExactSpelling`</ph> field is <ph id="ph2">`false`</ph>, as it is by default in C++ and C#, platform invoke searches for the unmangled alias first (<bpt id="p1">**</bpt>MessageBox<ept id="p1">**</ept>), then the mangled name (<bpt id="p2">**</bpt>MessageBoxA<ept id="p2">**</ept>) if the unmangled alias is not found.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Notice that ANSI name-matching behavior differs from Unicode name-matching behavior.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>String marshaling</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Platform invoke copies strings from their managed format (Unicode) to Unicode format.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Name matching</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`ExactSpelling`</ph> field is <ph id="ph2">`true`</ph>, as it is by default in <ph id="ph3">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph>, platform invoke searches only for the name you specify.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, if you specify <bpt id="p1">**</bpt>MessageBox<ept id="p1">**</ept>, platform invoke searches for <bpt id="p2">**</bpt>MessageBox<ept id="p2">**</ept> and fails if it cannot locate the exact spelling.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`ExactSpelling`</ph> field is <ph id="ph2">`false`</ph>, as it is by default in C++ and C#, platform invoke searches for the mangled name first (<bpt id="p1">**</bpt>MessageBoxW<ept id="p1">**</ept>), then the unmangled alias (<bpt id="p2">**</bpt>MessageBox<ept id="p2">**</ept>) if the mangled name is not found.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Notice that Unicode name-matching behavior differs from ANSI name-matching behavior.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Platform invoke chooses between ANSI and Unicode formats at run time, based on the target platform.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Specifying a Character Set in Visual Basic</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example declares the <bpt id="p1">**</bpt>MessageBox<ept id="p1">**</ept> function three times, each time with different character-set behavior.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can specify character-set behavior in Visual Basic by adding the <bpt id="p1">**</bpt>Ansi<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Unicode<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Auto<ept id="p3">**</ept> keyword to the declaration statement.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you omit the character-set keyword, as is done in the first declaration statement, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field defaults to the ANSI character set.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The second and third statements in the example explicitly specify a character set with a keyword.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Specifying a Character Set in C# and C++</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field identifies the underlying character set as ANSI or Unicode.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The character set controls how string arguments to a method should be marshaled.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use one of the following forms to indicate the character set:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example shows three managed definitions of the <bpt id="p1">**</bpt>MessageBox<ept id="p1">**</ept> function attributed to specify a character set.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the first definition, by its omission, the <ph id="ph1">`CharSet`</ph> field defaults to the ANSI character set.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Prototypes in Managed Code<ept id="p1">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](../../../docs/framework/interop/platform-invoke-examples.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling Data with Platform Invoke<ept id="p1">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>