{"content":"---\ntitle: \"+ Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"+_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"+ operator [C#]\"\n  - \"concatenation operator [C#]\"\n  - \"addition operator [C#]\"\nms.assetid: 93e56486-bb42-43c1-bd43-60af11e64e67\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# + Operator (C# Reference)\nThe `+` operator can function as either a unary or a binary operator.  \n  \n## Remarks  \n Unary `+` operators are predefined for all numeric types. The result of a unary `+` operation on a numeric type is just the value of the operand.  \n  \n Binary `+` operators are predefined for numeric and string types. For numeric types, + computes the sum of its two operands. When one or both operands are of type string, + concatenates the string representations of the operands.  \n  \n Delegate types also provide a binary `+` operator, which performs delegate concatenation.  \n  \n User-defined types can overload the unary `+` and binary `+` operators. Operations on integral types are generally allowed on enumeration. For more information, see [operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md).  \n  \n## Example  \n [!code-cs[csRefOperators#28](../../../csharp/language-reference/operators/codesnippet/CSharp/addition-operator_1.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)   \n [operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md)","nodes":[{"pos":[4,613],"embed":true,"restype":"x-metadata","content":"title: \"+ Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"+_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"+ operator [C#]\"\n  - \"concatenation operator [C#]\"\n  - \"addition operator [C#]\"\nms.assetid: 93e56486-bb42-43c1-bd43-60af11e64e67\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"+ Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[2,42],"content":"Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"Operator (C# Reference) | Microsoft Docs","pos":[0,40]}]}],"path":["title"]}],"yml":true},{"pos":[620,645],"content":"+ Operator (C# Reference)","linkify":"+ Operator (C# Reference)","nodes":[{"content":"+ Operator (C# Reference)","pos":[0,25]}]},{"pos":[646,715],"content":"The <ph id=\"ph1\">`+`</ph> operator can function as either a unary or a binary operator.","source":"The `+` operator can function as either a unary or a binary operator."},{"pos":[724,731],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Unary <ph id=\"ph1\">`+`</ph> operators are predefined for all numeric types.","pos":[735,792],"source":"Unary `+` operators are predefined for all numeric types."},{"content":"The result of a unary <ph id=\"ph1\">`+`</ph> operation on a numeric type is just the value of the operand.","pos":[793,880],"source":" The result of a unary `+` operation on a numeric type is just the value of the operand."},{"content":"Binary <ph id=\"ph1\">`+`</ph> operators are predefined for numeric and string types.","pos":[887,952],"source":"Binary `+` operators are predefined for numeric and string types."},{"content":"For numeric types, + computes the sum of its two operands.","pos":[953,1011]},{"content":"When one or both operands are of type string, + concatenates the string representations of the operands.","pos":[1012,1116]},{"pos":[1123,1212],"content":"Delegate types also provide a binary <ph id=\"ph1\">`+`</ph> operator, which performs delegate concatenation.","source":"Delegate types also provide a binary `+` operator, which performs delegate concatenation."},{"content":"User-defined types can overload the unary <ph id=\"ph1\">`+`</ph> and binary <ph id=\"ph2\">`+`</ph> operators.","pos":[1219,1290],"source":"User-defined types can overload the unary `+` and binary `+` operators."},{"content":"Operations on integral types are generally allowed on enumeration.","pos":[1291,1357]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>operator (C# Reference)<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>.","pos":[1358,1467],"source":" For more information, see [operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md)."},{"pos":[1476,1483],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1613,1638],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[1752,1760],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1764,1824],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1828,1895],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1899,1969],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>operator (C# Reference)<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>","pos":[1973,2055],"source":"[operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md)"}]}