<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="true-operator.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bba35ff8c73d41dac585c4bbb2fa42008735248b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\true-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cf292060e63a36ba78c6d14bace297d697954ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17d97d6d2a49844bee11447a458e5936fc2c61db</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>true Operator (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>true Operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>bool<ept id="p1">](../../../csharp/language-reference/keywords/bool.md)</ept> value <ph id="ph1">`true`</ph> to indicate that an operand is true and returns <ph id="ph2">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Prior to C# 2.0, the <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operators were used to create user-defined nullable value types that were compatible with types such as <ph id="ph3">`SqlBool`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, the language now provides built-in support for nullable value types, and whenever possible you should use those instead of overloading the <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With nullable Booleans, the expression <ph id="ph1">`a != b`</ph> is not necessarily equal to <ph id="ph2">`!(a == b)`</ph> because one or both of the values might be null.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You need to overload both the <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operators separately to correctly identify the null values in the expression.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example shows how to overload and use the <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A type that overloads the <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operators can be used for the controlling expression in <bpt id="p1">[</bpt>if<ept id="p1">](../../../csharp/language-reference/keywords/if-else.md)</ept>, <bpt id="p2">[</bpt>do<ept id="p2">](../../../csharp/language-reference/keywords/do.md)</ept>, <bpt id="p3">[</bpt>while<ept id="p3">](../../../csharp/language-reference/keywords/while.md)</ept>, and <bpt id="p4">[</bpt>for<ept id="p4">](../../../csharp/language-reference/keywords/for.md)</ept> statements and in <bpt id="p5">[</bpt>conditional expressions<ept id="p5">](../../../csharp/language-reference/operators/conditional-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If a type defines operator <ph id="ph1">`true`</ph>, it must also define operator <bpt id="p1">[</bpt>false<ept id="p1">](../../../csharp/language-reference/keywords/false.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A type cannot directly overload the conditional logical operators (<bpt id="p1">[</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p1">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept> and <bpt id="p2">[</bpt>&amp;#124;&amp;#124;<ept id="p2">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept>), but an equivalent effect can be achieved by overloading the regular logical operators and operators <ph id="ph2">`true`</ph> and <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](../../../csharp/language-reference/operators/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>false<ept id="p1">](../../../csharp/language-reference/keywords/false.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>