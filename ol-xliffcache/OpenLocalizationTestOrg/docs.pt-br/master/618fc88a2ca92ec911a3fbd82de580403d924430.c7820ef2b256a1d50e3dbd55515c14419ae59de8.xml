{"content":"---\ntitle: \"Using the iteration variable in a lambda expression may have unexpected results\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc42324\"\n  - \"bc42324\"\nhelpviewer_keywords: \n  - \"BC42324\"\nms.assetid: b5c2c4bd-3b2a-4a73-aaeb-55728eb03b68\n---\n# Using the iteration variable in a lambda expression may have unexpected results\nUsing the iteration variable in a lambda expression may have unexpected results. Instead, create a local variable within the loop and assign it the value of the iteration variable.  \n  \n This warning appears when you use a loop iteration variable in a lambda expression that is declared inside the loop. For example, the following example causes the warning to appear.  \n  \n```vb  \nFor i As Integer = 1 To 10  \n    ' The warning is given for the use of i.  \n    Dim exampleFunc As Func(Of Integer) = Function() i  \nNext  \n```  \n  \n The following example shows the unexpected results that might occur.  \n  \n```vb  \nModule Module1  \n    Sub Main()  \n        Dim array1 As Func(Of Integer)() = New Func(Of Integer)(4) {}  \n  \n        For i As Integer = 0 To 4  \n            array1(i) = Function() i  \n        Next  \n  \n        For Each funcElement In array1  \n            System.Console.WriteLine(funcElement())  \n        Next  \n  \n    End Sub  \nEnd Module  \n```  \n  \n The `For` loop creates an array of lambda expressions, each of which returns the value of the loop iteration variable `i`. When the lambda expressions are evaluated in the `For Each` loop, you might expect to see 0, 1, 2, 3, and 4 displayed, the successive values of `i` in the `For` loop. Instead, you see the final value of `i` displayed five times:  \n  \n `5`  \n  \n `5`  \n  \n `5`  \n  \n `5`  \n  \n `5`  \n  \n By default, this message is a warning. For more information about hiding warnings or treating warnings as errors, see [Configuring Warnings in Visual Basic](/visualstudio/ide/configuring-warnings-in-visual-basic).  \n  \n **Error ID:** BC42324  \n  \n## To correct this error  \n  \n-   Assign the value of the iteration variable to a local variable, and use the local variable in the lambda expression.  \n  \n```vb  \nModule Module1  \n    Sub Main()  \n        Dim array1 As Func(Of Integer)() = New Func(Of Integer)(4) {}  \n  \n        For i As Integer = 0 To 4  \n            Dim j = i  \n            array1(i) = Function() j  \n        Next  \n  \n        For Each funcElement In array1  \n            System.Console.WriteLine(funcElement())  \n        Next  \n  \n    End Sub  \nEnd Module  \n```  \n  \n## See also\n\n- [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)\n","nodes":[{"pos":[4,240],"embed":true,"restype":"x-metadata","content":"title: \"Using the iteration variable in a lambda expression may have unexpected results\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc42324\"\n  - \"bc42324\"\nhelpviewer_keywords: \n  - \"BC42324\"\nms.assetid: b5c2c4bd-3b2a-4a73-aaeb-55728eb03b68","nodes":[{"content":"Using the iteration variable in a lambda expression may have unexpected results","nodes":[{"pos":[0,79],"content":"Using the iteration variable in a lambda expression may have unexpected results","nodes":[{"content":"Using the iteration variable in a lambda expression may have unexpected results","pos":[0,79]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[247,326],"content":"Using the iteration variable in a lambda expression may have unexpected results","linkify":"Using the iteration variable in a lambda expression may have unexpected results","nodes":[{"content":"Using the iteration variable in a lambda expression may have unexpected results","pos":[0,79]}]},{"content":"Using the iteration variable in a lambda expression may have unexpected results.","pos":[327,407]},{"content":"Instead, create a local variable within the loop and assign it the value of the iteration variable.","pos":[408,507]},{"content":"This warning appears when you use a loop iteration variable in a lambda expression that is declared inside the loop.","pos":[514,630]},{"content":"For example, the following example causes the warning to appear.","pos":[631,695]},{"content":"The following example shows the unexpected results that might occur.","pos":[859,927]},{"content":"The <ph id=\"ph1\">`For`</ph> loop creates an array of lambda expressions, each of which returns the value of the loop iteration variable <ph id=\"ph2\">`i`</ph>.","pos":[1293,1415],"source":"The `For` loop creates an array of lambda expressions, each of which returns the value of the loop iteration variable `i`."},{"content":"When the lambda expressions are evaluated in the <ph id=\"ph1\">`For Each`</ph> loop, you might expect to see 0, 1, 2, 3, and 4 displayed, the successive values of <ph id=\"ph2\">`i`</ph> in the <ph id=\"ph3\">`For`</ph> loop.","pos":[1416,1582],"source":" When the lambda expressions are evaluated in the `For Each` loop, you might expect to see 0, 1, 2, 3, and 4 displayed, the successive values of `i` in the `For` loop."},{"content":"Instead, you see the final value of <ph id=\"ph1\">`i`</ph> displayed five times:","pos":[1583,1644],"source":" Instead, you see the final value of `i` displayed five times:"},{"content":"By default, this message is a warning.","pos":[1701,1739]},{"content":"For more information about hiding warnings or treating warnings as errors, see <bpt id=\"p1\">[</bpt>Configuring Warnings in Visual Basic<ept id=\"p1\">](/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.","pos":[1740,1914],"source":" For more information about hiding warnings or treating warnings as errors, see [Configuring Warnings in Visual Basic](/visualstudio/ide/configuring-warnings-in-visual-basic)."},{"pos":[1921,1942],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC42324","source":"**Error ID:** BC42324"},{"pos":[1951,1972],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Assign the value of the iteration variable to a local variable, and use the local variable in the lambda expression.","pos":[1982,2098]},{"pos":[2490,2498],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2502,2614],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"}]}