{"content":"---\ntitle: \".NET Framework Regular Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"pattern-matching with regular expressions, about pattern-matching\"\n  - \"substrings\"\n  - \"searching with regular expressions, about regular expressions\"\n  - \"pattern-matching with regular expressions\"\n  - \"searching with regular expressions\"\n  - \"parsing text with regular expressions\"\n  - \"regular expressions [.NET Framework], about regular expressions\"\n  - \"regular expressions [.NET Framework]\"\n  - \".NET Framework regular expressions, about\"\n  - \"characters [.NET Framework], regular expressions\"\n  - \"parsing text with regular expressions, overview\"\n  - \".NET Framework regular expressions\"\n  - \"strings [.NET Framework], regular expressions\"\nms.assetid: 521b3f6d-f869-42e1-93e5-158c54a6895d\ncaps.latest.revision: 24\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# .NET Regular Expressions\nRegular expressions provide a powerful, flexible, and efficient method for processing text. The extensive pattern-matching notation of regular expressions enables you to quickly parse large amounts of text to find specific character patterns; to validate text to ensure that it matches a predefined pattern (such as an e-mail address); to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection in order to generate a report. For many applications that deal with strings or that parse large blocks of text, regular expressions are an indispensable tool.  \n  \n## How Regular Expressions Work  \n The centerpiece of text processing with regular expressions is the regular expression engine, which is represented by the <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName> object in .NET. At a minimum, processing text using regular expressions requires that the regular expression engine be provided with the following two items of information:  \n  \n-   The regular expression pattern to identify in the text.  \n  \n     In .NET, regular expression patterns are defined by a special syntax or language, which is compatible with Perl 5 regular expressions and adds some additional features such as right-to-left matching. For more information, see [Regular Expression Language - Quick Reference](../../../docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n-   The text to parse for the regular expression pattern.  \n  \n The methods of the <xref:System.Text.RegularExpressions.Regex> class let you perform the following operations:  \n  \n-   Determine whether the regular expression pattern occurs in the input text by calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A?displayProperty=fullName> method. For an example that uses the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method for validating text, see [How to: Verify that Strings Are in Valid Email Format](../../../docs/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format.md).  \n  \n-   Retrieve one or all occurrences of text that matches the regular expression pattern by calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> or <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method. The former method returns a <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object that provides information about the matching text. The latter returns a <xref:System.Text.RegularExpressions.MatchCollection> object that contains one <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object for each match found in the parsed text.  \n  \n-   Replace text that matches the regular expression pattern by calling the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName> method. For examples that use the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to change date formats and remove invalid characters from a string, see [How to: Strip Invalid Characters from a String](../../../docs/standard/base-types/how-to-strip-invalid-characters-from-a-string.md) and [Example: Changing Date Formats](../../../docs/standard/base-types/regular-expression-example-changing-date-formats.md).  \n  \n For an overview of the regular expression object model, see [The Regular Expression Object Model](../../../docs/standard/base-types/the-regular-expression-object-model.md).  \n  \n For more information about the regular expression language, see [Regular Expression Language - Quick Reference](../../../docs/standard/base-types/regular-expression-language-quick-reference.md) or download and print one of these brochures:  \n  \n [Quick Reference in Word (.docx) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)   \n [Quick Reference in PDF (.pdf) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  \n  \n## Regular Expression Examples  \n The <xref:System.String> class includes a number of string search and replacement methods that you can use when you want to locate literal strings in a larger string. Regular expressions are most useful either when you want to locate one of several substrings in a larger string, or when you want to identify patterns in a string, as the following examples illustrate.  \n  \n### Example 1: Replacing Substrings  \n Assume that a mailing list contains names that sometimes include a title (Mr., Mrs., Miss, or Ms.) along with a first and last name. If you do not want to include the titles when you generate envelope labels from the list, you can use a regular expression to remove the titles, as the following example illustrates.  \n  \n [!code-csharp[Conceptual.Regex#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.regex/cs/example1.cs#2)]\n [!code-vb[Conceptual.Regex#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.regex/vb/example1.vb#2)]  \n  \n The regular expression pattern`(Mr\\.? |Mrs\\.? |Miss |Ms\\.? )` matches any occurrence of \"Mr \", \"Mr. \", \"Mrs \", \"Mrs. \", \"Miss \", \"Ms or \"Ms. \". The call to the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName> method replaces the matched string with <xref:System.String.Empty?displayProperty=fullName>; in other words, it removes it from the original string.  \n  \n### Example 2: Identifying Duplicated Words  \n Accidentally duplicating words is a common error that writers make. A regular expression can be used to identify duplicated words, as the following example shows.  \n  \n [!code-csharp[Conceptual.Regex#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.regex/cs/example2.cs#3)]\n [!code-vb[Conceptual.Regex#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.regex/vb/example2.vb#3)]  \n  \n The regular expression pattern `\\b(\\w+?)\\s\\1\\b` can be interpreted as follows:  \n  \n|||  \n|-|-|  \n|`\\b`|Start at a word boundary.|  \n|(\\w+?)|Match one or more word characters, but as few characters as possible. Together, they form a group that can be referred to as `\\1`.|  \n|`\\s`|Match a white-space character.|  \n|`\\1`|Match the substring that is equal to the group named `\\1`.|  \n|`\\b`|Match a word boundary.|  \n  \n The <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method is called with regular expression options set to <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>. Therefore, the match operation is case-insensitive, and the example identifies the substring \"This this\" as a duplication.  \n  \n Note that the input string includes the substring \"this? This\". However, because of the intervening punctuation mark, it is not identified as a duplication.  \n  \n### Example 3: Dynamically Building a Culture-Sensitive Regular Expression  \n The following example illustrates the power of regular expressions combined with the flexibility offered by .NET's globalization features. It uses the <xref:System.Globalization.NumberFormatInfo> object to determine the format of currency values in the system's current culture. It then uses that information to dynamically construct a regular expression that extracts currency values from the text. For each match, it extracts the subgroup that contains the numeric string only, converts it to a <xref:System.Decimal> value, and calculates a running total.  \n  \n [!code-csharp[Conceptual.Regex#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.regex/cs/example.cs#1)]\n [!code-vb[Conceptual.Regex#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.regex/vb/example.vb#1)]  \n  \n On a computer whose current culture is English - United States (en-US), the example dynamically builds the regular expression `\\$\\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\\.[0-9]+)?)`. This regular expression pattern can be interpreted as follows:  \n  \n|||  \n|-|-|  \n|`\\$`|Look for a single occurrence of the dollar symbol ($) in the input string. The regular expression pattern string includes a backslash to indicate that the dollar symbol is to be interpreted literally rather than as a regular expression anchor. (The $ symbol alone would indicate that the regular expression engine should try to begin its match at the end of a string.) To ensure that the current culture's currency symbol is not misinterpreted as a regular expression symbol, the example calls the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method to escape the character.|  \n|`\\s*`|Look for zero or more occurrences of a white-space character.|  \n|`[-+]?`|Look for zero or one occurrence of either a positive sign or a negative sign.|  \n|`([0-9]{0,3}(,[0-9]{3})*(\\.[0-9]+)?)`|The outer parentheses around this expression define it as a capturing group or a subexpression. If a match is found, information about this part of the matching string can be retrieved from the second <xref:System.Text.RegularExpressions.Group> object in the <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property. (The first element in the collection represents the entire match.)|  \n|`[0-9]{0,3}`|Look for zero to three occurrences of the decimal digits 0 through 9.|  \n|`(,[0-9]{3})*`|Look for zero or more occurrences of a group separator followed by three decimal digits.|  \n|`\\.`|Look for a single occurrence of the decimal separator.|  \n|`[0-9]+`|Look for one or more decimal digits.|  \n|`(\\.[0-9]+)?`|Look for zero or one occurrence of the decimal separator followed by at least one decimal digit.|  \n  \n If each of these subpatterns is found in the input string, the match succeeds, and a <xref:System.Text.RegularExpressions.Match> object that contains information about the match is added to the <xref:System.Text.RegularExpressions.MatchCollection> object.  \n  \n## Related Topics  \n  \n|Title|Description|  \n|-----------|-----------------|  \n|[Regular Expression Language - Quick Reference](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)|Provides information on the set of characters, operators, and constructs that you can use to define regular expressions.|  \n|[The Regular Expression Object Model](../../../docs/standard/base-types/the-regular-expression-object-model.md)|Provides information and code examples that illustrate how to use the regular expression classes.|  \n|[Details of Regular Expression Behavior](../../../docs/standard/base-types/details-of-regular-expression-behavior.md)|Provides information about the capabilities and behavior of .NET regular expressions.|  \n|[Regular Expression Examples](../../../docs/standard/base-types/regular-expression-examples.md)|Provides code examples that illustrate typical uses of regular expressions.|  \n  \n## Reference  \n <xref:System.Text.RegularExpressions?displayProperty=fullName>   \n <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName>   \n [Regular Expressions - Quick Reference (download in Word format)](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)   \n [Regular Expressions - Quick Reference (download in PDF format)](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)","nodes":[{"pos":[4,1023],"embed":true,"restype":"x-metadata","content":"title: \".NET Framework Regular Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"pattern-matching with regular expressions, about pattern-matching\"\n  - \"substrings\"\n  - \"searching with regular expressions, about regular expressions\"\n  - \"pattern-matching with regular expressions\"\n  - \"searching with regular expressions\"\n  - \"parsing text with regular expressions\"\n  - \"regular expressions [.NET Framework], about regular expressions\"\n  - \"regular expressions [.NET Framework]\"\n  - \".NET Framework regular expressions, about\"\n  - \"characters [.NET Framework], regular expressions\"\n  - \"parsing text with regular expressions, overview\"\n  - \".NET Framework regular expressions\"\n  - \"strings [.NET Framework], regular expressions\"\nms.assetid: 521b3f6d-f869-42e1-93e5-158c54a6895d\ncaps.latest.revision: 24\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":".NET Framework Regular Expressions | Microsoft Docs","nodes":[{"pos":[0,51],"content":".NET Framework Regular Expressions | Microsoft Docs","nodes":[{"content":".NET Framework Regular Expressions | Microsoft Docs","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[1030,1054],"content":".NET Regular Expressions","linkify":".NET Regular Expressions","nodes":[{"content":".NET Regular Expressions","pos":[0,24]}]},{"content":"Regular expressions provide a powerful, flexible, and efficient method for processing text.","pos":[1055,1146]},{"content":"The extensive pattern-matching notation of regular expressions enables you to quickly parse large amounts of text to find specific character patterns; to validate text to ensure that it matches a predefined pattern (such as an e-mail address); to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection in order to generate a report.","pos":[1147,1524]},{"content":"For many applications that deal with strings or that parse large blocks of text, regular expressions are an indispensable tool.","pos":[1525,1652]},{"pos":[1661,1689],"content":"How Regular Expressions Work","linkify":"How Regular Expressions Work","nodes":[{"content":"How Regular Expressions Work","pos":[0,28]}]},{"content":"The centerpiece of text processing with regular expressions is the regular expression engine, which is represented by the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;</ph> object in .NET.","pos":[1693,1899],"source":"The centerpiece of text processing with regular expressions is the regular expression engine, which is represented by the <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName> object in .NET."},{"content":"At a minimum, processing text using regular expressions requires that the regular expression engine be provided with the following two items of information:","pos":[1900,2056]},{"content":"The regular expression pattern to identify in the text.","pos":[2066,2121]},{"content":"In .NET, regular expression patterns are defined by a special syntax or language, which is compatible with Perl 5 regular expressions and adds some additional features such as right-to-left matching.","pos":[2132,2331]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[2332,2488],"source":" For more information, see [Regular Expression Language - Quick Reference](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)."},{"content":"The text to parse for the regular expression pattern.","pos":[2498,2551]},{"pos":[2558,2668],"content":"The methods of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class let you perform the following operations:","source":"The methods of the <xref:System.Text.RegularExpressions.Regex> class let you perform the following operations:"},{"content":"Determine whether the regular expression pattern occurs in the input text by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A?displayProperty=fullName&gt;</ph> method.","pos":[2678,2854],"source":"Determine whether the regular expression pattern occurs in the input text by calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A?displayProperty=fullName> method."},{"content":"For an example that uses the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A&gt;</ph> method for validating text, see <bpt id=\"p1\">[</bpt>How to: Verify that Strings Are in Valid Email Format<ept id=\"p1\">](../../../docs/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format.md)</ept>.","pos":[2855,3118],"source":" For an example that uses the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method for validating text, see [How to: Verify that Strings Are in Valid Email Format](../../../docs/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format.md)."},{"content":"Retrieve one or all occurrences of text that matches the regular expression pattern by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName&gt;</ph> method.","pos":[3128,3395],"source":"Retrieve one or all occurrences of text that matches the regular expression pattern by calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> or <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method."},{"content":"The former method returns a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=fullName&gt;</ph> object that provides information about the matching text.","pos":[3396,3550],"source":" The former method returns a <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object that provides information about the matching text."},{"content":"The latter returns a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object that contains one <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=fullName&gt;</ph> object for each match found in the parsed text.","pos":[3551,3767],"source":" The latter returns a <xref:System.Text.RegularExpressions.MatchCollection> object that contains one <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object for each match found in the parsed text."},{"content":"Replace text that matches the regular expression pattern by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName&gt;</ph> method.","pos":[3777,3936],"source":"Replace text that matches the regular expression pattern by calling the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName> method."},{"content":"For examples that use the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A&gt;</ph> method to change date formats and remove invalid characters from a string, see <bpt id=\"p1\">[</bpt>How to: Strip Invalid Characters from a String<ept id=\"p1\">](../../../docs/standard/base-types/how-to-strip-invalid-characters-from-a-string.md)</ept> and <bpt id=\"p2\">[</bpt>Example: Changing Date Formats<ept id=\"p2\">](../../../docs/standard/base-types/regular-expression-example-changing-date-formats.md)</ept>.","pos":[3937,4354],"source":" For examples that use the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to change date formats and remove invalid characters from a string, see [How to: Strip Invalid Characters from a String](../../../docs/standard/base-types/how-to-strip-invalid-characters-from-a-string.md) and [Example: Changing Date Formats](../../../docs/standard/base-types/regular-expression-example-changing-date-formats.md)."},{"pos":[4361,4533],"content":"For an overview of the regular expression object model, see <bpt id=\"p1\">[</bpt>The Regular Expression Object Model<ept id=\"p1\">](../../../docs/standard/base-types/the-regular-expression-object-model.md)</ept>.","source":"For an overview of the regular expression object model, see [The Regular Expression Object Model](../../../docs/standard/base-types/the-regular-expression-object-model.md)."},{"pos":[4540,4779],"content":"For more information about the regular expression language, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)</ept> or download and print one of these brochures:","source":"For more information about the regular expression language, see [Regular Expression Language - Quick Reference](../../../docs/standard/base-types/regular-expression-language-quick-reference.md) or download and print one of these brochures:"},{"pos":[4786,5128],"content":"[Quick Reference in Word (.docx) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)   \n[Quick Reference in PDF (.pdf) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Quick Reference in Word (.docx) format<ept id=\"p1\">](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)</ept><ph id=\"ph1\"> </ph>","pos":[0,171],"source":"[Quick Reference in Word (.docx) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx) "},{"content":"<bpt id=\"p1\">[</bpt>Quick Reference in PDF (.pdf) format<ept id=\"p1\">](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)</ept>","pos":[174,341],"source":"[Quick Reference in PDF (.pdf) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)"}]},{"pos":[5137,5164],"content":"Regular Expression Examples","linkify":"Regular Expression Examples","nodes":[{"content":"Regular Expression Examples","pos":[0,27]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class includes a number of string search and replacement methods that you can use when you want to locate literal strings in a larger string.","pos":[5168,5334],"source":"The <xref:System.String> class includes a number of string search and replacement methods that you can use when you want to locate literal strings in a larger string."},{"content":"Regular expressions are most useful either when you want to locate one of several substrings in a larger string, or when you want to identify patterns in a string, as the following examples illustrate.","pos":[5335,5536]},{"pos":[5546,5577],"content":"Example 1: Replacing Substrings","linkify":"Example 1: Replacing Substrings","nodes":[{"content":"Example 1: Replacing Substrings","pos":[0,31]}]},{"content":"Assume that a mailing list contains names that sometimes include a title (Mr., Mrs., Miss, or Ms.) along with a first and last name.","pos":[5581,5713]},{"content":"If you do not want to include the titles when you generate envelope labels from the list, you can use a regular expression to remove the titles, as the following example illustrates.","pos":[5714,5896]},{"content":"The regular expression pattern<ph id=\"ph1\">`(Mr\\.? |Mrs\\.? |Miss |Ms\\.? )`</ph> matches any occurrence of \"Mr \", \"Mr. \", \"Mrs \", \"Mrs. \", \"Miss \", \"Ms or \"Ms. \".","pos":[6149,6292],"source":"The regular expression pattern`(Mr\\.? |Mrs\\.? |Miss |Ms\\.? )` matches any occurrence of \"Mr \", \"Mr. \", \"Mrs \", \"Mrs. \", \"Miss \", \"Ms or \"Ms. \"."},{"content":"The call to the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName&gt;</ph> method replaces the matched string with <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>; in other words, it removes it from the original string.","pos":[6293,6537],"source":" The call to the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName> method replaces the matched string with <xref:System.String.Empty?displayProperty=fullName>; in other words, it removes it from the original string."},{"pos":[6547,6586],"content":"Example 2: Identifying Duplicated Words","linkify":"Example 2: Identifying Duplicated Words","nodes":[{"content":"Example 2: Identifying Duplicated Words","pos":[0,39]}]},{"content":"Accidentally duplicating words is a common error that writers make.","pos":[6590,6657]},{"content":"A regular expression can be used to identify duplicated words, as the following example shows.","pos":[6658,6752]},{"pos":[7005,7083],"content":"The regular expression pattern <ph id=\"ph1\">`\\b(\\w+?)\\s\\1\\b`</ph> can be interpreted as follows:","source":"The regular expression pattern `\\b(\\w+?)\\s\\1\\b` can be interpreted as follows:"},{"content":"Start at a word boundary.","pos":[7109,7134]},{"content":"(\\w+?)","pos":[7139,7145]},{"content":"Match one or more word characters, but as few characters as possible.","pos":[7146,7215]},{"content":"Together, they form a group that can be referred to as <ph id=\"ph1\">`\\1`</ph>.","pos":[7216,7276],"source":" Together, they form a group that can be referred to as `\\1`."},{"content":"Match a white-space character.","pos":[7286,7316]},{"pos":[7326,7384],"content":"Match the substring that is equal to the group named <ph id=\"ph1\">`\\1`</ph>.","source":"Match the substring that is equal to the group named `\\1`."},{"content":"Match a word boundary.","pos":[7394,7416]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName&gt;</ph> method is called with regular expression options set to <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph>.","pos":[7424,7640],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method is called with regular expression options set to <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>."},{"content":"Therefore, the match operation is case-insensitive, and the example identifies the substring \"This this\" as a duplication.","pos":[7641,7763]},{"content":"Note that the input string includes the substring \"this?","pos":[7770,7826]},{"content":"This\".","pos":[7827,7833]},{"content":"However, because of the intervening punctuation mark, it is not identified as a duplication.","pos":[7834,7926]},{"pos":[7936,8006],"content":"Example 3: Dynamically Building a Culture-Sensitive Regular Expression","linkify":"Example 3: Dynamically Building a Culture-Sensitive Regular Expression","nodes":[{"content":"Example 3: Dynamically Building a Culture-Sensitive Regular Expression","pos":[0,70]}]},{"content":"The following example illustrates the power of regular expressions combined with the flexibility offered by .NET's globalization features.","pos":[8010,8148]},{"content":"It uses the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object to determine the format of currency values in the system's current culture.","pos":[8149,8288],"source":" It uses the <xref:System.Globalization.NumberFormatInfo> object to determine the format of currency values in the system's current culture."},{"content":"It then uses that information to dynamically construct a regular expression that extracts currency values from the text.","pos":[8289,8409]},{"content":"For each match, it extracts the subgroup that contains the numeric string only, converts it to a <ph id=\"ph1\">&lt;xref:System.Decimal&gt;</ph> value, and calculates a running total.","pos":[8410,8567],"source":" For each match, it extracts the subgroup that contains the numeric string only, converts it to a <xref:System.Decimal> value, and calculates a running total."},{"content":"On a computer whose current culture is English - United States (en-US), the example dynamically builds the regular expression <ph id=\"ph1\">`\\$\\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\\.[0-9]+)?)`</ph>.","pos":[8818,8992],"source":"On a computer whose current culture is English - United States (en-US), the example dynamically builds the regular expression `\\$\\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\\.[0-9]+)?)`."},{"content":"This regular expression pattern can be interpreted as follows:","pos":[8993,9055]},{"content":"Look for a single occurrence of the dollar symbol ($) in the input string.","pos":[9081,9155]},{"content":"The regular expression pattern string includes a backslash to indicate that the dollar symbol is to be interpreted literally rather than as a regular expression anchor.","pos":[9156,9324]},{"content":"(The $ symbol alone would indicate that the regular expression engine should try to begin its match at the end of a string.) To ensure that the current culture's currency symbol is not misinterpreted as a regular expression symbol, the example calls the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Escape%2A&gt;</ph> method to escape the character.","pos":[9325,9664],"source":" (The $ symbol alone would indicate that the regular expression engine should try to begin its match at the end of a string.) To ensure that the current culture's currency symbol is not misinterpreted as a regular expression symbol, the example calls the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method to escape the character."},{"content":"Look for zero or more occurrences of a white-space character.","pos":[9675,9736]},{"content":"Look for zero or one occurrence of either a positive sign or a negative sign.","pos":[9749,9826]},{"content":"The outer parentheses around this expression define it as a capturing group or a subexpression.","pos":[9869,9964]},{"content":"If a match is found, information about this part of the matching string can be retrieved from the second <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object in the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object returned by the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property.","pos":[9965,10293],"source":" If a match is found, information about this part of the matching string can be retrieved from the second <xref:System.Text.RegularExpressions.Group> object in the <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property."},{"content":"(The first element in the collection represents the entire match.)","pos":[10294,10360]},{"content":"Look for zero to three occurrences of the decimal digits 0 through 9.","pos":[10378,10447]},{"content":"Look for zero or more occurrences of a group separator followed by three decimal digits.","pos":[10467,10555]},{"content":"Look for a single occurrence of the decimal separator.","pos":[10565,10619]},{"content":"Look for one or more decimal digits.","pos":[10633,10669]},{"content":"Look for zero or one occurrence of the decimal separator followed by at least one decimal digit.","pos":[10688,10784]},{"pos":[10792,11047],"content":"If each of these subpatterns is found in the input string, the match succeeds, and a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object that contains information about the match is added to the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.","source":"If each of these subpatterns is found in the input string, the match succeeds, and a <xref:System.Text.RegularExpressions.Match> object that contains information about the match is added to the <xref:System.Text.RegularExpressions.MatchCollection> object."},{"pos":[11056,11070],"content":"Related Topics","linkify":"Related Topics","nodes":[{"content":"Related Topics","pos":[0,14]}]},{"content":"Title","pos":[11077,11082]},{"content":"Description","pos":[11083,11094]},{"pos":[11133,11262],"content":"<bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>","source":"[Regular Expression Language - Quick Reference](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)"},{"content":"Provides information on the set of characters, operators, and constructs that you can use to define regular expressions.","pos":[11263,11383]},{"pos":[11388,11499],"content":"<bpt id=\"p1\">[</bpt>The Regular Expression Object Model<ept id=\"p1\">](../../../docs/standard/base-types/the-regular-expression-object-model.md)</ept>","source":"[The Regular Expression Object Model](../../../docs/standard/base-types/the-regular-expression-object-model.md)"},{"content":"Provides information and code examples that illustrate how to use the regular expression classes.","pos":[11500,11597]},{"pos":[11602,11719],"content":"<bpt id=\"p1\">[</bpt>Details of Regular Expression Behavior<ept id=\"p1\">](../../../docs/standard/base-types/details-of-regular-expression-behavior.md)</ept>","source":"[Details of Regular Expression Behavior](../../../docs/standard/base-types/details-of-regular-expression-behavior.md)"},{"content":"Provides information about the capabilities and behavior of .NET regular expressions.","pos":[11720,11805]},{"pos":[11810,11905],"content":"<bpt id=\"p1\">[</bpt>Regular Expression Examples<ept id=\"p1\">](../../../docs/standard/base-types/regular-expression-examples.md)</ept>","source":"[Regular Expression Examples](../../../docs/standard/base-types/regular-expression-examples.md)"},{"content":"Provides code examples that illustrate typical uses of regular expressions.","pos":[11906,11981]},{"pos":[11991,12000],"content":"Reference","linkify":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]},{"content":"<bpt id=\"p1\">[</bpt>Regular Expressions - Quick Reference (download in Word format)<ept id=\"p1\">](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)</ept><ph id=\"ph1\"> </ph>","pos":[12144,12340],"source":"[Regular Expressions - Quick Reference (download in Word format)](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx) "},{"content":"<bpt id=\"p1\">[</bpt>Regular Expressions - Quick Reference (download in PDF format)<ept id=\"p1\">](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)</ept>","pos":[12344,12537],"source":"[Regular Expressions - Quick Reference (download in PDF format)](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)"}]}