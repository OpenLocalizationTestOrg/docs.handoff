<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="animation-overview.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">256d0e616ef82cc997b5a9e9f2696165c5d86f9a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\animation-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e8128ff683c2a69d2e85fdbd866e1a6271183bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9defae9908def65acc5f223c15ceee0fc10a9107</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Animation Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Animation Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a powerful set of graphics and layout features that enable you to create attractive user interfaces and appealing documents.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Animation can make an attractive user interface even more spectacular and usable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By just animating a background color or applying an animated              <ph id="ph1">&lt;xref:System.Windows.Media.Transform&gt;</ph>, you can create dramatic screen transitions or provide helpful visual cues.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This overview provides an introduction to the              <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation and timing system.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It focuses on the animation of              <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> objects by using storyboards.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Introducing Animations</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Animation is an illusion that is created by quickly cycling through a series of images, each slightly different from the last.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The brain perceives the group of images as a single changing scene.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In film, this illusion is created by using cameras that record many photographs, or frames, each second.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When the frames are played back by a projector, the audience sees a moving picture.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Animation on a computer is similar.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, a program that makes a drawing of a rectangle fade out of view might work as follows.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The program creates a timer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The program checks the timer at set intervals to see how much time has elapsed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each time the program checks the timer, it computes the current opacity value for the rectangle based on how much time has elapsed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The program then updates the rectangle with the new value and redraws it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Prior to                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>,                  <ph id="ph2">[!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)]</ph> developers had to create and manage their own timing systems or use special custom libraries.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> includes an efficient timing system that is exposed through managed code and                  <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> and that is deeply integrated into the                  <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> framework.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation makes it easy to animate controls and other graphical objects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> handles all the behind-the-scenes work of managing a timing system and redrawing the screen efficiently.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It provides timing classes that enable you to focus on the effects you want to create, instead of the mechanics of achieving those effects.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> also makes it easy to create your own animations by exposing animation base classes from which your classes can inherit, to produce customized animations.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These custom animations gain many of the performance benefits of the standard animation classes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>WPF Property Animation System</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you understand a few important concepts about the timing system,                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animations can be easier to use.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Most important is that, in                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, you animate objects by applying animation to their individual properties.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, to make a framework element grow, you animate its                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To make an object fade from view, you animate its                  <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For a property to have animation capabilities, it must meet the following three requirements:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It must be a dependency property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It must belong to a class that inherits from                          <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> and implements the                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>There must be a compatible animation type available.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(If                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> does not provide one, you can create your own.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See the                          <bpt id="p1">[</bpt>Custom Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/custom-animations-overview.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> contains many objects that have                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Controls such as                  <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Controls.TabControl&gt;</ph>, and also                  <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph> and                  <ph id="ph4">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects inherit from                  <ph id="ph5">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Most of their properties are dependency properties.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use animations almost anywhere, which includes in styles and control templates.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Animations do not have to be visual; you can animate objects that are not part of the user interface if they meet the criteria that are described in this section.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example: Make an Element Fade In and Out of View</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This example shows how to use a                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation to animate the value of a dependency property.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It uses a                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph>, which is a type of animation that generates                  <ph id="ph2">&lt;xref:System.Double&gt;</ph> values, to animate the                  <ph id="ph3">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property of a                  <ph id="ph4">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As a result, the                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> fades in and out of view.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The first part of the example creates a                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The steps that follow show how to create an animation and apply it to the rectangle's                  <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property                 .</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following shows how to create a                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> element in a                  <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> in XAML.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleXaml_1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Window1.xaml#rectangleopacityfadeexamplexaml_1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following shows how to create a                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> element in a                  <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> in code.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Class1.cs#rectangleopacityfadeexamplecode_1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/Class1.vb#rectangleopacityfadeexamplecode_1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Part 1: Create a DoubleAnimation</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>One way to make an element fade in and out of view is to animate its                          <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Because the                          <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property is of type                          <ph id="ph2">&lt;xref:System.Double&gt;</ph>, you need an animation that produces double values.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> is one                          such animation                         .</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> creates a transition between two double values.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To specify its starting value, you set its                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation.From%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To specify its ending value, you set its                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation.To%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An opacity value of                                  <ph id="ph1">`1.0`</ph> makes the object completely opaque, and an opacity value of                                  <ph id="ph2">`0.0`</ph> makes it completely invisible.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To make the animation transition from                                  <ph id="ph1">`1.0`</ph> to                                  <ph id="ph2">`0.0`</ph> you set its                                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.DoubleAnimation.From%2A&gt;</ph> property to                                  <ph id="ph4">`1.0`</ph> and its                                  <ph id="ph5">&lt;xref:System.Windows.Media.Animation.DoubleAnimation.To%2A&gt;</ph> property to                                  <ph id="ph6">`0.0`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following shows how to create a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> in XAML.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleXaml_2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Window1.xaml#rectangleopacityfadeexamplexaml_2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following shows how to create a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> in code.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Class1.cs#rectangleopacityfadeexamplecode_2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/Class1.vb#rectangleopacityfadeexamplecode_2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Next, you must specify a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> of an animation specifies how long it takes to go from its starting value to its destination value.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following shows how to set the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> to five seconds in XAML.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleXaml_3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Window1.xaml#rectangleopacityfadeexamplexaml_3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following shows how to set the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> to five seconds in code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Class1.cs#rectangleopacityfadeexamplecode_3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/Class1.vb#rectangleopacityfadeexamplecode_3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The previous code showed an animation that transitions from                                  <ph id="ph1">`1.0`</ph> to                                  <ph id="ph2">`0.0`</ph>, which causes the target element to fade from completely opaque to completely invisible.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To make the element fade back into view after it vanishes, set the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A&gt;</ph> property of the animation to                                  <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To make the animation repeat indefinitely, set its                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.RepeatBehavior%2A&gt;</ph> property to                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.RepeatBehavior.Forever%2A&gt;</ph>.The following shows how to set the                                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A&gt;</ph> and                                  <ph id="ph4">&lt;xref:System.Windows.Media.Animation.Timeline.RepeatBehavior%2A&gt;</ph> properties in XAML.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleXaml_4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Window1.xaml#rectangleopacityfadeexamplexaml_4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following shows how to set the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A&gt;</ph> and                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.RepeatBehavior%2A&gt;</ph> properties in code.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Class1.cs#rectangleopacityfadeexamplecode_4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_4<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/Class1.vb#rectangleopacityfadeexamplecode_4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Part 2: Create a Storyboard</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To apply an animation to an object, you create a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> and use the                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> and                          <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt;</ph> attached properties to specify the object and property to animate.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Create the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> and add the animation as its child.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following shows how to create the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> in XAML.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleXaml_5<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Window1.xaml#rectangleopacityfadeexamplexaml_5)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To create the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> in code, declare a                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> variable at the class level.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_100<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/MainWindow.xaml.cs#rectangleopacityfadeexamplecode_100)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_100<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/MainWindow.xaml.vb#rectangleopacityfadeexamplecode_100)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Then initialize the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> and add the animation as its child.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_101<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/MainWindow.xaml.cs#rectangleopacityfadeexamplecode_101)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_101<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/MainWindow.xaml.vb#rectangleopacityfadeexamplecode_101)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> has to know where to apply the animation.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Use the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A?displayProperty=fullName&gt;</ph> attached property to specify the object to animate.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following shows how to set the target name of the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> to                                  <ph id="ph2">`MyRectangle`</ph> in XAML.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleXaml_6<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Window1.xaml#rectangleopacityfadeexamplexaml_6)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following shows how to set the target name of the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> to                                  <ph id="ph2">`MyRectangle`</ph> in code.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_102<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/MainWindow.xaml.cs#rectangleopacityfadeexamplecode_102)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_102<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/MainWindow.xaml.vb#rectangleopacityfadeexamplecode_102)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Use                                  the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt;</ph> attached property to specify the property to animate.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following shows how the animation is configured to target the                                  <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property of the                                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> in XAML                                 .</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleXaml_7<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/Window1.xaml#rectangleopacityfadeexamplexaml_7)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following shows how the animation is configured to target the                                  <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property of the                                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> in code.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_103<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/MainWindow.xaml.cs#rectangleopacityfadeexamplecode_103)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_103<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/MainWindow.xaml.vb#rectangleopacityfadeexamplecode_103)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information about                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt;</ph> syntax and for additional examples, see the                          <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Part 3 (XAML): Associate the Storyboard with a Trigger</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The easiest way to apply and start a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> in                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> is to use an event trigger                         .</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This section shows how to associate the                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> with a trigger in XAML.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Create a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> object and associate your storyboard with it.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> is a type of                                  <ph id="ph2">&lt;xref:System.Windows.TriggerAction&gt;</ph> that applies and starts a                                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws_snippet#RectangleOpacityFadeExampleInline_3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws_snippet/CS/RectangleOpacityFadeExample.xaml#rectangleopacityfadeexampleinline_3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Create an                                  <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> and add the                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> to its                                  <ph id="ph3">&lt;xref:System.Windows.EventTrigger.Actions%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Set the                                  <ph id="ph1">&lt;xref:System.Windows.EventTrigger.RoutedEvent%2A&gt;</ph> property of the                                  <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> to the routed event that you want to start the                                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>(For more information about routed events, see the                                  <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/routed-events-overview.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws_snippet#RectangleOpacityFadeExampleInline_2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws_snippet/CS/RectangleOpacityFadeExample.xaml#rectangleopacityfadeexampleinline_2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Add the                                  <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> to the                                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph> collection of the Rectangle.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws_snippet#RectangleOpacityFadeExampleInline_1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws_snippet/CS/RectangleOpacityFadeExample.xaml#rectangleopacityfadeexampleinline_1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Part 3 (Code): Associate the Storyboard with an Event Handler</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The easiest way to apply and start a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> in code is to use an event handler.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This section shows how to associate the                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> with an event handler in code.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Register for the                                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event of the rectangle.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_104<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/MainWindow.xaml.cs#rectangleopacityfadeexamplecode_104)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_104<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/MainWindow.xaml.vb#rectangleopacityfadeexamplecode_104)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Declare the event handler.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In the event handler, use the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.Begin%2A&gt;</ph> method to apply the storyboard.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_105<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/MainWindow.xaml.cs#rectangleopacityfadeexamplecode_105)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode_105<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/MainWindow.xaml.vb#rectangleopacityfadeexamplecode_105)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Complete Example</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following shows how to create a rectangle that fades in and out of view in XAML                         .</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleXaml<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/MainWindow.xaml#rectangleopacityfadeexamplexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The following shows how to create a rectangle that fades in and out of view in code.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws2/CSharp/MainWindow.xaml.cs#rectangleopacityfadeexamplecode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws2#RectangleOpacityFadeExampleCode<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws2/VisualBasic/MainWindow.xaml.vb#rectangleopacityfadeexamplecode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Animation Types</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Because animations generate property values, different animation types exist for different property types.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>To animate a property that takes a                  <ph id="ph1">&lt;xref:System.Double&gt;</ph>, such as the                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> property of an element, use an animation that produces                  <ph id="ph3">&lt;xref:System.Double&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To animate a property that takes a                  <ph id="ph1">&lt;xref:System.Windows.Point&gt;</ph>, use an animation that produces                  <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph> values, and so on.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Because of the number of different property types, there are several animation classes in the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Fortunately, they follow a strict naming convention that makes it easy to differentiate between them:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>                         <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>&gt;Animation</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Known as a "From/To/By" or "basic" animation, these animate between a starting and destination value, or by adding an offset value to its starting value.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To specify a starting value, set the From property of the animation.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>To specify an ending value, set the To property of the animation.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To specify an offset value, set the By property of the animation.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The examples in this overview use these animations, because they are the simplest to use.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>From/To/By animations are described in detail in the                          From/To/By Animations Overview.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>                         <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>&gt;AnimationUsingKeyFrames</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Key frame animations are more powerful than From/To/By animations because you can specify any number of target values and even control their interpolation method.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Some types can only be animated with key frame animations.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Key frame animations are described in detail in the                          <bpt id="p1">[</bpt>Key-Frame Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/key-frame-animations-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>                         <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>&gt;AnimationUsingPath</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Path animations enable you to use a geometric path in order to produce animated values.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>                         <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>&gt;AnimationBase</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Abstract class that, when you implement it, animates a <ph id="ph1">\&lt;</ph>                         <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>&gt; value.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This class serves as the base class for <ph id="ph1">\&lt;</ph>                         <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>&gt;Animation and <ph id="ph2">\&lt;</ph>                         <bpt id="p2">*</bpt>Type<ept id="p2">*</ept>&gt;AnimationUsingKeyFrames classes.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You have to deal directly with these classes only if you want to create your own custom animations.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Otherwise, use a <ph id="ph1">\&lt;</ph>                         <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>&gt;Animation or KeyFrame<ph id="ph2">\&lt;</ph>                         <bpt id="p2">*</bpt>Type<ept id="p2">*</ept>&gt;Animation.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In most cases, you will want to use the <ph id="ph1">\&lt;</ph>                 <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>&gt;Animation classes, such as                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.ColorAnimation&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The following table shows several common animation types and some properties with which they are used.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Property type</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Corresponding basic (From/To/By) animation</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Corresponding key frame animation</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Corresponding Path Animation</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Usage example</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Animate the                                  <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> of a                                  <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> or a                                  <ph id="ph3">&lt;xref:System.Windows.Media.GradientStop&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Animate the                                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> of a                                  <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> or the                                  <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> of a                                  <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Animate the                                  <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph> position of an                                  <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Animate the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock.Text%2A&gt;</ph> of a                                  <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> or the                                  <ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> of a                                  <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Animations Are Timelines</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>All the animation types inherit from the                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> class; therefore, all animations are specialized types of timelines.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> defines a segment of time.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>You can specify the                          <bpt id="p1">*</bpt>timing behaviors<ept id="p1">*</ept> of a timeline: its                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph>, how many times it is repeated, and even how fast time progresses for it.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Because an animation is a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph>, it also represents a segment of time.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>An animation also calculates output values as it progresses though its specified segment of time (or                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>As the animation progresses, or "plays," it updates the property that it is associated with.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Three frequently used timing properties are                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph>,                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A&gt;</ph>, and                          <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Timeline.RepeatBehavior%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The Duration Property</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>As previously mentioned, a timeline represents a segment of time.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The length of that segment is determined by the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> of the timeline, which is usually specified by using a                                  <ph id="ph2">&lt;xref:System.Windows.Duration.TimeSpan%2A&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>When a timeline reaches the end of its duration, it has completed an iteration.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>An animation uses its                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> property to determine its current value.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If you do not specify a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> value for an animation, it uses 1 second, which is the default.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The following syntax shows a simplified version of the                                  <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> attribute syntax for the                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hours<ept id="p1">*</ept> <ph id="ph1">`:`</ph> <bpt id="p2">*</bpt>minutes<ept id="p2">*</ept> <ph id="ph2">`:`</ph> <bpt id="p3">*</bpt>seconds<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The following table shows several                                  <ph id="ph1">&lt;xref:System.Windows.Duration&gt;</ph> settings and their resulting values.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Resulting value</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>0:0:5.5</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>5.5 seconds.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>0:30:5.5</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>30 minutes and 5.5 seconds.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>1:30:5.5</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>1 hour, 30 minutes, and 5.5 seconds.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>One way to specify a                                  <ph id="ph1">&lt;xref:System.Windows.Duration&gt;</ph> in code is to use the                                  <ph id="ph2">&lt;xref:System.TimeSpan.FromSeconds%2A&gt;</ph> method to create a                                  <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph>, then declare a new                                  <ph id="ph4">&lt;xref:System.Windows.Duration&gt;</ph> structure using that                                  <ph id="ph5">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>For more information about                                  <ph id="ph1">&lt;xref:System.Windows.Duration&gt;</ph> values and the complete                                  <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> syntax, see the                                  <ph id="ph3">&lt;xref:System.Windows.Duration&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>AutoReverse</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A&gt;</ph> property specifies whether a timeline plays backward after it reaches the end of its                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If you set this animation property to                                  <ph id="ph1">`true`</ph>, an animation reverses after it reaches the end of its                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph>, playing from its ending value back to its starting value.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>By default, this property is                                  <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>RepeatBehavior</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.RepeatBehavior%2A&gt;</ph> property specifies how many times a timeline plays.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>By default, timelines have an iteration count of                                  <ph id="ph1">`1.0`</ph>, which means they play one time and do not repeat at all.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For more information about these properties and others, see the                                  <bpt id="p1">[</bpt>Timing Behaviors Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/timing-behaviors-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Applying an Animation to a Property</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The previous sections describe the different types of animations and their timing properties.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This section shows how to apply the animation to the property that you want to animate.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects provide one way to apply animations to properties.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> is a                  <bpt id="p1">*</bpt>container timeline<ept id="p1">*</ept> that provides targeting information for the animations it contains.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Targeting Objects and Properties</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> class provides the                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> and                          <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt;</ph> attached properties.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>By setting these properties on an animation, you tell the animation what to animate.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>However, before an animation can target an object, the object must usually be given a name.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Assigning a name to a                          <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> differs from assigning a name to a                          <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Most controls and panels are framework elements; however, most purely graphical objects, such as brushes, transforms, and geometries, are freezable objects.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>If you are not sure whether a type is a                          <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or a                          <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, refer to the                          <bpt id="p1">**</bpt>Inheritance Hierarchy<ept id="p1">**</ept> section of its reference documentation.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>To make a                                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> an animation target, you give it a name by setting its                                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>In code, you must also use the                                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph> method to register the element name with the page to which it belongs.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>To make a                                  <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> object an animation target in                                  <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you use the                                  <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](../../../../docs/framework/xaml-services/x-name-directive.md)</ept> to assign it a name.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>In code, you just use the                                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph> method to register the object with the page to which it belongs.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The sections that follow provide an example of naming an element in                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> and code.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>For more detailed information about naming and targeting, see the                          <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Applying and Starting Storyboards</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>To start a storyboard in                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you associate it with an                          <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>An                          <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> is an object that describes what actions to take when a specified event occurs.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>One of those actions can be a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> action, which you use to start your storyboard.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Event triggers are similar in concept to event handlers because they enable you to specify how your application responds to a particular event.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Unlike event handlers, event triggers can be fully described in                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>; no other code is required.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>To start a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> in code, you can use an                          <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> or use the                          <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard.Begin%2A&gt;</ph> method of the                          <ph id="ph4">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Interactively Control a Storyboard</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The previous example showed how to start a                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> when an event occurs.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>You can also interactively control a                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> after it starts: you can pause, resume, stop, advance it to its fill period, seek, and remove the                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For more information and an example that shows how to interactively control a                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, see the                  <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>What Happens After an Animation Ends?</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph> property specifies how a timeline behaves when it ends.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>By default, a timeline starts                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockState&gt;</ph> when it ends.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An animation that is                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockState&gt;</ph> holds its final output value.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> in the previous example does not end because its                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.RepeatBehavior%2A&gt;</ph> property is set to                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.RepeatBehavior.Forever%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The following example animates a rectangle by using a similar animation.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Unlike the previous example, the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.RepeatBehavior%2A&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A&gt;</ph> properties of this animation are left at their default values.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Therefore, the animation progresses from 1 to 0 over five seconds and then stops.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation_ovws_snippet#FillBehaviorExampleRectangleInline<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws_snippet/CS/FillBehaviorExample.xaml#fillbehaviorexamplerectangleinline)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>animation_ovws_procedural_snip#FillBehaviorExampleRectangleInline<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws_procedural_snip/CSharp/FillBehaviorExample.cs#fillbehaviorexamplerectangleinline)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>animation_ovws_procedural_snip#FillBehaviorExampleRectangleInline<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws_procedural_snip/visualbasic/fillbehaviorexample.vb#fillbehaviorexamplerectangleinline)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Because its                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> was not changed from its default value, which is                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph>, the animation holds it final value, 0, when it ends.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Therefore, the                  <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> of the rectangle remains at 0 after the animation ends.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>If you set the                  <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> of the rectangle to another value, your code appears to have no effect, because the animation is still affecting the                  <ph id="ph2">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>One way to regain control of an animated property in code is to use the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A&gt;</ph> method and specify null for the                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For more information and an example, see                  <bpt id="p1">[</bpt>Set a Property After Animating It with a Storyboard<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-set-a-property-after-animating-it-with-a-storyboard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Note that, although setting a property value that has an                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockState&gt;</ph> or                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.ClockState&gt;</ph> animation appears to have no effect, the property value does change.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>For more information, see the                  <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Data Binding and Animating Animations</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Most animation properties can be data bound or animated; for example, you can animate the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> property of a                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>However, because of the way the timing system works, data bound or animated animations do not behave like other data bound or animated objects.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>To understand their behavior, it helps to understand what it means to apply an animation to a property.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Refer to the example in the previous section that showed how to animate the                  <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> of a rectangle.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>When the rectangle in the previous example is loaded, its event trigger applies the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The timing system creates a copy of the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> and its animation.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>These copies are frozen (made read-only) and                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects are created from them.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>These clocks do the actual work of animating the targeted properties.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The timing system creates a clock for the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> and applies it to the object and property that is specified by the                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt;</ph> of the                  <ph id="ph4">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In this case, the timing system applies the clock to the                  <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property of the object that is named "MyRectangle."</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Although a clock is also created for the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, the clock is not applied to any properties.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Its purpose is to control its child clock, the clock that is created for the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>For an animation to reflect data binding or animation changes, its clock must be regenerated.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Clocks are not regenerated for you automatically.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>To make an animation reflect changes, reapply its storyboard by using a                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> or the                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.Begin%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>When you use either of these methods, the animation restarts.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>In code, you can use the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.Seek%2A&gt;</ph> method to shift the storyboard back to its previous position.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>For an example of a data bound animation, see                  <bpt id="p1">[</bpt>Key Spline Animation Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160011)</ept>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For more information about how the animation and timing system works, see                  <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Other Ways to Animate</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The examples in this overview show how to animate by using storyboards.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>When you use code, you can animate in several other ways.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>For more information, see the                  <bpt id="p1">[</bpt>Property Animation Techniques Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/property-animation-techniques-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Animation Samples</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The following samples can help you start adding animation to your applications.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>From, To, and By Animation Target Values Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159988)</ept></source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Demonstrates different From/To/By settings.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Timing Behavior Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159970)</ept></source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Demonstrates the different ways you can control the timing behavior of an animation.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This sample also shows how to data bind the destination value of an animation.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Describes how the timing system uses the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> and                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> classes, which allow you to create animations.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Tips and Tricks<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-tips-and-tricks.md)</ept></source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Lists helpful tips for solving issues with animations, such as performance.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/custom-animations-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Describes how to extend the animation system with key frames, animation classes, or per-frame callbacks.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>From/To/By Animations Overview</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Describes how to create an animation that transitions between two values.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Key-Frame Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/key-frame-animations-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Describes how to create an animation with multiple target values, including the ability to control the interpolation method.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Easing Functions<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/easing-functions.md)</ept></source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Explains how to apply mathematical formulas to your animations to get realistic behavior, such as bouncing.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Path Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/path-animations-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Describes how to move or rotate an object along a complex path.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Property Animation Techniques Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/property-animation-techniques-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Describes property animations using storyboards, local animations, clocks, and per-frame animations.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Describes how to use storyboards with multiple timelines to create complex animations.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Timing Behaviors Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/timing-behaviors-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Describes the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> types and properties used in animations.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Timing Events Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/timing-events-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Describes the events available on the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> and                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects for executing code at points in the timeline, such as begin, pause, resume, skip, or stop.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How-to Topics<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-how-to-topics.md)</ept></source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Contains code examples for using animations and timelines in your application.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Clocks How-to Topics<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/clocks-how-to-topics.md)</ept></source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Contains code examples for using the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> object in your application.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Key-Frame How-to Topics<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/key-frame-animation-how-to-topics.md)</ept></source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Contains code examples for using key-frame animations in your application.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Path Animation How-to Topics<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/path-animation-how-to-topics.md)</ept></source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Contains code examples for using path animations in your application.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>