{"content":"---\ntitle: \"in (Generic Modifier) - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"contravariance, in keyword [C#]\"\n  - \"in keyword [C#]\"\n---\n# in (Generic Modifier) (C# Reference)\n\nFor generic type parameters, the `in` keyword specifies that the type parameter is contravariant. You can use the `in` keyword in generic interfaces and delegates.\n\nContravariance enables you to use a less derived type than that specified by the generic parameter. This allows for implicit conversion of classes that implement contravariant interfaces and implicit conversion of delegate types. Covariance and contravariance in generic type parameters are supported for reference types, but they are not supported for value types.\n\nA type can be declared contravariant in a generic interface or delegate only if it defines the type of a method's parameters and not of a method's return type. `In`, `ref`, and `out` parameters must be invariant, meaning they are neither covariant or contravariant.\n\nAn interface that has a contravariant type parameter allows its methods to accept arguments of less derived types than those specified by the interface type parameter. For example, in the <xref:System.Collections.Generic.IComparer%601> interface, type T is contravariant, you can assign an object of the `IComparer<Person>` type to an object of the `IComparer<Employee>` type without using any special conversion methods if `Employee` inherits `Person`.\n\nA contravariant delegate can be assigned another delegate of the same type, but with a less derived generic type parameter.\n\nFor more information, see [Covariance and Contravariance](../../programming-guide/concepts/covariance-contravariance/index.md).\n\n## Contravariant generic interface\n\nThe following example shows how to declare, extend, and implement a contravariant generic interface. It also shows how you can use implicit conversion for classes that implement this interface.\n\n[!code-csharp[csVarianceKeywords#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csvariancekeywords/cs/program.cs#1)]\n\n## Contravariant generic delegate\n\nThe following example shows how to declare, instantiate, and invoke a contravariant generic delegate. It also shows how you can implicitly convert a delegate type.\n\n[!code-csharp[csVarianceKeywords#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csvariancekeywords/cs/program.cs#2)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [out](out-generic-modifier.md)\n- [Covariance and Contravariance](../../programming-guide/concepts/covariance-contravariance/index.md)\n- [Modifiers](modifiers.md)\n","nodes":[{"pos":[4,172],"embed":true,"restype":"x-metadata","content":"title: \"in (Generic Modifier) - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"contravariance, in keyword [C#]\"\n  - \"in keyword [C#]\"","nodes":[{"content":"in (Generic Modifier) - C# Reference","nodes":[{"pos":[0,36],"content":"in (Generic Modifier) - C# Reference","nodes":[{"content":"in (Generic Modifier) - C# Reference","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[179,215],"content":"in (Generic Modifier) (C# Reference)","linkify":"in (Generic Modifier) (C# Reference)","nodes":[{"content":"in (Generic Modifier) (C# Reference)","pos":[0,36]}]},{"content":"For generic type parameters, the <ph id=\"ph1\">`in`</ph> keyword specifies that the type parameter is contravariant.","pos":[217,314],"source":"For generic type parameters, the `in` keyword specifies that the type parameter is contravariant."},{"content":"You can use the <ph id=\"ph1\">`in`</ph> keyword in generic interfaces and delegates.","pos":[315,380],"source":" You can use the `in` keyword in generic interfaces and delegates."},{"content":"Contravariance enables you to use a less derived type than that specified by the generic parameter.","pos":[382,481]},{"content":"This allows for implicit conversion of classes that implement contravariant interfaces and implicit conversion of delegate types.","pos":[482,611]},{"content":"Covariance and contravariance in generic type parameters are supported for reference types, but they are not supported for value types.","pos":[612,747]},{"content":"A type can be declared contravariant in a generic interface or delegate only if it defines the type of a method's parameters and not of a method's return type.","pos":[749,908]},{"content":"<ph id=\"ph1\">`In`</ph>, <ph id=\"ph2\">`ref`</ph>, and <ph id=\"ph3\">`out`</ph> parameters must be invariant, meaning they are neither covariant or contravariant.","pos":[909,1014],"source":"`In`, `ref`, and `out` parameters must be invariant, meaning they are neither covariant or contravariant."},{"content":"An interface that has a contravariant type parameter allows its methods to accept arguments of less derived types than those specified by the interface type parameter.","pos":[1016,1183]},{"content":"For example, in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface, type T is contravariant, you can assign an object of the <ph id=\"ph2\">`IComparer&lt;Person&gt;`</ph> type to an object of the <ph id=\"ph3\">`IComparer&lt;Employee&gt;`</ph> type without using any special conversion methods if <ph id=\"ph4\">`Employee`</ph> inherits <ph id=\"ph5\">`Person`</ph>.","pos":[1184,1469],"source":" For example, in the <xref:System.Collections.Generic.IComparer%601> interface, type T is contravariant, you can assign an object of the `IComparer<Person>` type to an object of the `IComparer<Employee>` type without using any special conversion methods if `Employee` inherits `Person`."},{"content":"A contravariant delegate can be assigned another delegate of the same type, but with a less derived generic type parameter.","pos":[1471,1594]},{"pos":[1596,1723],"content":"For more information, see <bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](../../programming-guide/concepts/covariance-contravariance/index.md)</ept>.","source":"For more information, see [Covariance and Contravariance](../../programming-guide/concepts/covariance-contravariance/index.md)."},{"pos":[1728,1759],"content":"Contravariant generic interface","linkify":"Contravariant generic interface","nodes":[{"content":"Contravariant generic interface","pos":[0,31]}]},{"content":"The following example shows how to declare, extend, and implement a contravariant generic interface.","pos":[1761,1861]},{"content":"It also shows how you can use implicit conversion for classes that implement this interface.","pos":[1862,1954]},{"pos":[2080,2110],"content":"Contravariant generic delegate","linkify":"Contravariant generic delegate","nodes":[{"content":"Contravariant generic delegate","pos":[0,30]}]},{"content":"The following example shows how to declare, instantiate, and invoke a contravariant generic delegate.","pos":[2112,2213]},{"content":"It also shows how you can implicitly convert a delegate type.","pos":[2214,2275]},{"pos":[2401,2426],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2492,2500],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2504,2534],"content":"<bpt id=\"p1\">[</bpt>out<ept id=\"p1\">](out-generic-modifier.md)</ept>","source":"[out](out-generic-modifier.md)"},{"pos":[2537,2637],"content":"<bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](../../programming-guide/concepts/covariance-contravariance/index.md)</ept>","source":"[Covariance and Contravariance](../../programming-guide/concepts/covariance-contravariance/index.md)"},{"pos":[2640,2665],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](modifiers.md)</ept>","source":"[Modifiers](modifiers.md)"}]}