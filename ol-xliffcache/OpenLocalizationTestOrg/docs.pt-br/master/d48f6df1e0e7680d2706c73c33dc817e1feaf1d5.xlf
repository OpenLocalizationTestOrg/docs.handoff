<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-iterate-file-directories-with-plinq.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d48f6df1e0e7680d2706c73c33dc817e1feaf1d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\how-to-iterate-file-directories-with-plinq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fca728a3640bd55a77736b23d618bd58eef9643f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">016cc14f49517a45278e66d5c97e76c92681aca8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Iterate File Directories with PLINQ</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Iterate File Directories with PLINQ</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows two simple ways to parallelize operations on file directories.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The first query uses the <ph id="ph1">&lt;xref:System.IO.Directory.GetFiles%2A&gt;</ph> method to populate an array of file names in a directory and all subdirectories.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This method does not return until the entire array is populated, and therefore it can introduce latency at the beginning of the operation.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, after the array is populated, PLINQ can process it in parallel very quickly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The second query uses the static <ph id="ph1">&lt;xref:System.IO.Directory.EnumerateDirectories%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> methods which begin returning results immediately.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This approach can be faster when you are iterating over large directory trees, although the processing time compared to the first example can depend on many factors.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These examples are intended to demonstrate usage, and might not run faster than the equivalent sequential LINQ to Objects query.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about speedup, see <bpt id="p1">[</bpt>Understanding Speedup in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example shows how to iterate over file directories in simple scenarios when you have access to all directories in the tree, the file sizes are not very large, and the access times are not significant.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This approach involves a period of latency at the beginning while the array of file names is being constructed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example shows how to iterate over file directories in simple scenarios when you have access to all directories in the tree, the file sizes are not very large, and the access times are not significant.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This approach begins producing results faster than the previous example.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">&lt;xref:System.IO.Directory.GetFiles%2A&gt;</ph>, be sure that you have sufficient permissions on all directories in the tree.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Otherwise an exception will be thrown and no results will be returned.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">&lt;xref:System.IO.Directory.EnumerateDirectories%2A&gt;</ph> in a PLINQ query, it is problematic to handle I/O exceptions in a graceful way that enables you to continue iterating.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If your code must handle I/O or unauthorized access exceptions, then you should consider the approach described in <bpt id="p1">[</bpt>How to: Iterate File Directories with the Parallel Class<ept id="p1">](../../../docs/standard/parallel-programming/how-to-iterate-file-directories-with-the-parallel-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If I/O latency is an issue, for example with file I/O over a network, consider using one of the asynchronous I/O techniques described in <bpt id="p1">[</bpt>TPL and Traditional .NET Framework Asynchronous Programming<ept id="p1">](../../../docs/standard/parallel-programming/tpl-and-traditional-async-programming.md)</ept> and in this <bpt id="p2">[</bpt>blog post<ept id="p2">](https://blogs.msdn.microsoft.com/pfxteam/2009/08/04/parallel-extensions-and-io/)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel LINQ (PLINQ)<ept id="p1">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>