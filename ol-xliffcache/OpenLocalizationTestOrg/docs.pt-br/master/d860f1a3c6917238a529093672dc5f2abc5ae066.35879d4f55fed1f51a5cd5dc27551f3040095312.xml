{"content":"---\ntitle: \"extern modifier - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"extern_CSharpKeyword\"\n  - \"extern\"\nhelpviewer_keywords: \n  - \"DllImport attribute\"\n  - \"extern keyword [C#]\"\nms.assetid: 9c3f02c4-51b8-4d80-9cb2-f2b6e1ae15c7\n---\n# extern (C# Reference)\n\nThe `extern` modifier is used to declare a method that is implemented externally. A common use of the `extern` modifier is with the `DllImport` attribute when you are using Interop services to call into unmanaged code. In this case, the method must also be declared as `static`, as shown in the following example:\n\n```csharp\n[DllImport(\"avifil32.dll\")]\nprivate static extern void AVIFileInit();\n```\n\nThe `extern` keyword can also define an external assembly alias, which makes it possible to reference different versions of the same component from within a single assembly. For more information, see [extern alias](extern-alias.md).\n\nIt is an error to use the [abstract](abstract.md) and `extern` modifiers together to modify the same member. Using the `extern` modifier means that the method is implemented outside the C# code, whereas using the `abstract` modifier means that the method implementation is not provided in the class.\n\nThe extern keyword has more limited uses in C# than in C++. To compare the C# keyword with the C++ keyword, see Using extern to Specify Linkage in the C++ Language Reference.\n\n## Example 1\n\nIn this example, the program receives a string from the user and displays it inside a message box. The program uses the `MessageBox` method imported from the User32.dll library.\n\n[!code-csharp[csrefKeywordsModifiers#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsModifiers/CS/csrefKeywordsModifiers.cs#8)]\n\n## Example 2\n\nThis example illustrates a C# program that calls into a C library (a native DLL).\n\n1. Create the following C file and name it `cmdll.c`:\n\n```c\n// cmdll.c\n// Compile with: -LD\nint __declspec(dllexport) SampleMethod(int i)\n{\n  return i*10;\n}\n```\n\n2. Open a Visual Studio x64 (or x32) Native Tools Command Prompt window from the Visual Studio installation directory and compile the `cmdll.c` file by typing **cl -LD cmdll.c** at the command prompt.\n\n3. In the same directory, create the following C# file and name it `cm.cs`:\n\n```csharp\n// cm.cs\nusing System;\nusing System.Runtime.InteropServices;\npublic class MainClass\n{\n    [DllImport(\"Cmdll.dll\")]\n      public static extern int SampleMethod(int x);\n\n    static void Main()\n    {\n        Console.WriteLine(\"SampleMethod() returns {0}.\", SampleMethod(5));\n    }\n}\n```\n\n4. Open a Visual Studio x64 (or x32) Native Tools Command Prompt window from the Visual Studio installation directory and compile the `cm.cs` file by typing:\n\n> **csc cm.cs** (for the x64 command prompt)\n> —or—\n> **csc -platform:x86 cm.cs** (for the x32 command prompt)\n\nThis will create the executable file `cm.exe`.\n\n5. Run `cm.exe`. The `SampleMethod` method passes the value 5 to the DLL file, which returns the value multiplied by 10.  The program produces the following output:\n\n```\nSampleMethod() returns 50.\n```\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=nameWithType>\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Modifiers](modifiers.md)\n","nodes":[{"pos":[4,261],"embed":true,"restype":"x-metadata","content":"title: \"extern modifier - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"extern_CSharpKeyword\"\n  - \"extern\"\nhelpviewer_keywords: \n  - \"DllImport attribute\"\n  - \"extern keyword [C#]\"\nms.assetid: 9c3f02c4-51b8-4d80-9cb2-f2b6e1ae15c7","nodes":[{"content":"extern modifier - C# Reference","nodes":[{"pos":[0,30],"content":"extern modifier - C# Reference","nodes":[{"content":"extern modifier - C# Reference","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[268,289],"content":"extern (C# Reference)","linkify":"extern (C# Reference)","nodes":[{"content":"extern (C# Reference)","pos":[0,21]}]},{"content":"The <ph id=\"ph1\">`extern`</ph> modifier is used to declare a method that is implemented externally.","pos":[291,372],"source":"The `extern` modifier is used to declare a method that is implemented externally."},{"content":"A common use of the <ph id=\"ph1\">`extern`</ph> modifier is with the <ph id=\"ph2\">`DllImport`</ph> attribute when you are using Interop services to call into unmanaged code.","pos":[373,509],"source":" A common use of the `extern` modifier is with the `DllImport` attribute when you are using Interop services to call into unmanaged code."},{"content":"In this case, the method must also be declared as <ph id=\"ph1\">`static`</ph>, as shown in the following example:","pos":[510,604],"source":" In this case, the method must also be declared as `static`, as shown in the following example:"},{"content":"The <ph id=\"ph1\">`extern`</ph> keyword can also define an external assembly alias, which makes it possible to reference different versions of the same component from within a single assembly.","pos":[691,864],"source":"The `extern` keyword can also define an external assembly alias, which makes it possible to reference different versions of the same component from within a single assembly."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>extern alias<ept id=\"p1\">](extern-alias.md)</ept>.","pos":[865,923],"source":" For more information, see [extern alias](extern-alias.md)."},{"content":"It is an error to use the <bpt id=\"p1\">[</bpt>abstract<ept id=\"p1\">](abstract.md)</ept> and <ph id=\"ph1\">`extern`</ph> modifiers together to modify the same member.","pos":[925,1033],"source":"It is an error to use the [abstract](abstract.md) and `extern` modifiers together to modify the same member."},{"content":"Using the <ph id=\"ph1\">`extern`</ph> modifier means that the method is implemented outside the C# code, whereas using the <ph id=\"ph2\">`abstract`</ph> modifier means that the method implementation is not provided in the class.","pos":[1034,1224],"source":" Using the `extern` modifier means that the method is implemented outside the C# code, whereas using the `abstract` modifier means that the method implementation is not provided in the class."},{"content":"The extern keyword has more limited uses in C# than in C++.","pos":[1226,1285]},{"content":"To compare the C# keyword with the C++ keyword, see Using extern to Specify Linkage in the C++ Language Reference.","pos":[1286,1400]},{"pos":[1405,1414],"content":"Example 1","linkify":"Example 1","nodes":[{"content":"Example 1","pos":[0,9]}]},{"content":"In this example, the program receives a string from the user and displays it inside a message box.","pos":[1416,1514]},{"content":"The program uses the <ph id=\"ph1\">`MessageBox`</ph> method imported from the User32.dll library.","pos":[1515,1593],"source":" The program uses the `MessageBox` method imported from the User32.dll library."},{"pos":[1742,1751],"content":"Example 2","linkify":"Example 2","nodes":[{"content":"Example 2","pos":[0,9]}]},{"content":"This example illustrates a C# program that calls into a C library (a native DLL).","pos":[1753,1834]},{"pos":[1839,1889],"content":"Create the following C file and name it <ph id=\"ph1\">`cmdll.c`</ph>:","source":"Create the following C file and name it `cmdll.c`:"},{"pos":[2001,2198],"content":"Open a Visual Studio x64 (or x32) Native Tools Command Prompt window from the Visual Studio installation directory and compile the <ph id=\"ph1\">`cmdll.c`</ph> file by typing <bpt id=\"p1\">**</bpt>cl -LD cmdll.c<ept id=\"p1\">**</ept> at the command prompt.","source":"Open a Visual Studio x64 (or x32) Native Tools Command Prompt window from the Visual Studio installation directory and compile the `cmdll.c` file by typing **cl -LD cmdll.c** at the command prompt."},{"pos":[2203,2275],"content":"In the same directory, create the following C# file and name it <ph id=\"ph1\">`cm.cs`</ph>:","source":"In the same directory, create the following C# file and name it `cm.cs`:"},{"pos":[2575,2729],"content":"Open a Visual Studio x64 (or x32) Native Tools Command Prompt window from the Visual Studio installation directory and compile the <ph id=\"ph1\">`cm.cs`</ph> file by typing:","source":"Open a Visual Studio x64 (or x32) Native Tools Command Prompt window from the Visual Studio installation directory and compile the `cm.cs` file by typing:"},{"pos":[2733,2841],"content":"<bpt id=\"p1\">**</bpt>csc cm.cs<ept id=\"p1\">**</ept> (for the x64 command prompt) —or— <bpt id=\"p2\">**</bpt>csc -platform:x86 cm.cs<ept id=\"p2\">**</ept> (for the x32 command prompt)","leadings":["","> ","> "],"source":"**csc cm.cs** (for the x64 command prompt)\n—or—\n**csc -platform:x86 cm.cs** (for the x32 command prompt)"},{"pos":[2843,2889],"content":"This will create the executable file <ph id=\"ph1\">`cm.exe`</ph>.","source":"This will create the executable file `cm.exe`."},{"content":"Run <ph id=\"ph1\">`cm.exe`</ph>.","pos":[2894,2907],"source":"Run `cm.exe`."},{"content":"The <ph id=\"ph1\">`SampleMethod`</ph> method passes the value 5 to the DLL file, which returns the value multiplied by 10.","pos":[2908,3011],"source":" The `SampleMethod` method passes the value 5 to the DLL file, which returns the value multiplied by 10."},{"content":"The program produces the following output:","pos":[3013,3055]},{"pos":[3096,3121],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[3187,3195],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3287,3314],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[3317,3373],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[3376,3399],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[3402,3427],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](modifiers.md)</ept>","source":"[Modifiers](modifiers.md)"}]}