<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="standard-query-operators-in-linq-to-entities-queries.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c666bad40d0e433ee5f8d2b1155e881d7042a85</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\language-reference\standard-query-operators-in-linq-to-entities-queries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce0234fc32c80b4d8b140194d6bc1b6174d06afb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5f9e31188b31030f2dd15f5c6bff537af1ab753</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Standard Query Operators in LINQ to Entities Queries</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Standard Query Operators in LINQ to Entities Queries</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In a query, you specify the information that you want to retrieve from the data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A query can also specify how that information should be sorted, grouped, and shaped before it is returned.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>LINQ provides a set of standard query methods that you can use in a query.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Most of these methods operate on sequences; in this context, a sequence is an object whose type implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface or the <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The standard query operators query functionality includes filtering, projection, aggregation, sorting, grouping, paging, and more.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Some of the more frequently used standard query operators have dedicated keyword syntax so that they can be called by using query expression syntax.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A query expression is a different, more readable way to express a query than the method-based equivalent.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Query expression clauses are translated into calls to the query methods at compile time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a list of standard query operators that have equivalent query expression clauses, see <bpt id="p1">[</bpt>Standard Query Operators Overview<ept id="p1">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/bb397896(v=vs.120))</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Not all of the standard query operators are supported in <ph id="ph1">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph> queries.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Supported and Unsupported LINQ Methods (LINQ to Entities)<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/supported-and-unsupported-linq-methods-linq-to-entities.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This topic provides information about the standard query operators that is specific to <ph id="ph1">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about known issues in <ph id="ph1">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph> queries, see <bpt id="p1">[</bpt>Known Issues and Considerations in LINQ to Entities<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/known-issues-and-considerations-in-linq-to-entities.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Projection and Filtering Methods</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Projection<ept id="p1">*</ept> refers to transforming the elements of a result set into a desired form.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, you can project a subset of the properties you need from each object in the result set, you can project a property and perform a mathematical calculation on it, or you can project the entire object from the result set.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The projection methods are <ph id="ph1">`Select`</ph> and <ph id="ph2">`SelectMany`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Filtering<ept id="p1">*</ept> refers to the operation of restricting the result set to contain only those elements that match a specified condition.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The filtering method is <ph id="ph1">`Where`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Most overloads of the projection and filtering methods are supported in <ph id="ph1">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph>, with the exception of those that accept a positional argument.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Join Methods</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Joining is an important operation in queries that target data sources that have no navigable relationships to each other.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A join of two data sources is the association of objects in one data source with objects in the other data source that share a common attribute or property.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The join methods are <ph id="ph1">`Join`</ph> and <ph id="ph2">`GroupJoin`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Most overloads of the join methods are supported, with the exception of those that use a <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is because the comparer cannot be translated to the data source.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Set Methods</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Set operations in LINQ are query operations that base their result sets on the presence or absence of equivalent elements within the same or in another collection (or set).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The set methods are <ph id="ph1">`All`</ph>, <ph id="ph2">`Any`</ph>, <ph id="ph3">`Concat`</ph>, <ph id="ph4">`Contains`</ph>, <ph id="ph5">`DefaultIfEmpty`</ph>, <ph id="ph6">`Distinct`</ph>, <ph id="ph7">`EqualAll`</ph>, <ph id="ph8">`Except`</ph>, <ph id="ph9">`Intersect`</ph>, and <ph id="ph10">`Union`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Most overloads of the set methods are supported in <ph id="ph1">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph>, though there are some differences in behavior compared to LINQ to Objects.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, set methods that use an <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> are not supported because the comparer cannot be translated to the data source.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Ordering Methods</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Ordering, or sorting, refers to the ordering the elements of a result set based on one or more attributes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>By specifying more than one sort criterion, you can break ties within a group.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Most overloads of the ordering methods are supported, with the exception of those that use an <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is because the comparer cannot be translated to the data source.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The ordering methods are <ph id="ph1">`OrderBy`</ph>, <ph id="ph2">`OrderByDescending`</ph>, <ph id="ph3">`ThenBy`</ph>, <ph id="ph4">`ThenByDescending`</ph>, and <ph id="ph5">`Reverse`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because the query is executed on the data source, the ordering behavior may differ from queries executed in the CLR.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is because ordering options, such as case ordering, kanji ordering, and null ordering, can be set in the data source.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Depending on the data source, these ordering options might produce different results than in the CLR.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you specify the same key selector in more than one ordering operation, a duplicate ordering will be produced.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is not valid and an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Grouping Methods</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Grouping refers to placing data into groups so that the elements in each group share a common attribute.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The grouping method is <ph id="ph1">`GroupBy`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Most overloads of the grouping methods are supported, with the exception of those that use an <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is because the comparer cannot be translated to the data source.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The grouping methods are mapped to the data source using a distinct sub-query for the key selector.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The key selector comparison sub-query is executed by using the semantics of the data source, including issues related to comparing <ph id="ph1">`null`</ph> values.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Aggregate Methods</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An aggregation operation computes a single value from a collection of values.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, calculating the average daily temperature from a month's worth of daily temperature values is an aggregation operation.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The aggregate methods are <ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Average`</ph>, <ph id="ph3">`Count`</ph>, <ph id="ph4">`LongCount`</ph>, <ph id="ph5">`Max`</ph>, <ph id="ph6">`Min`</ph>, and <ph id="ph7">`Sum`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Most overloads of the aggregate methods are supported.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For behavior related to null values, the aggregate methods use the data source semantics.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The behavior of the aggregation methods when null values are involved might be different, depending on which back-end data source is being used.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Aggregate method behavior using the semantics of the data source might also be different from what is expected from CLR methods.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example, the default behavior for the <ph id="ph1">`Sum`</ph> method on SQL Server is to ignore any null values instead of throwing an exception.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Any exceptions that result from aggregation, such as an overflow from the <ph id="ph1">`Sum`</ph> function, are thrown as data source exceptions or Entity Framework exceptions during the materialization of the query results.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For those methods that involve a calculation over a sequence, such as <ph id="ph1">`Sum`</ph> or <ph id="ph2">`Average`</ph>, the actual calculation is performed on the server.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>As a result, type conversions and loss of precision might occur on the server, and the results might differ from what is expected using CLR semantics.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The default behavior of the aggregate methods for null/non-null values is shown in the following table:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>No data</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>All null values</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Some null values</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>No null values</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns null.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Returns null.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Returns the average of the non-null values in a sequence.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of numeric values.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Returns 0</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns the number of null values in the sequence.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Returns the number of null and non-null values in the sequence.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the sequence.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns null.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns null.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns the maximum non-null value in a sequence.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns null.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns null.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns the minimum non-null value in a sequence.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns null.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns null.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Returns the sum of the non-null value in a sequence.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of numeric values.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Type Methods</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The two LINQ methods that deal with type conversion and testing are both supported in the context of the Entity Framework.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This means that the only supported types are types that map to the appropriate Entity Framework type.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For a list of these types, see <bpt id="p1">[</bpt>Conceptual Model Types (CSDL)<ept id="p1">](/ef/ef6/modeling/designer/advanced/edmx/csdl-spec#conceptual-model-types-csdl)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The type methods are <ph id="ph1">`Convert`</ph> and <ph id="ph2">`OfType`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OfType`</ph> is supported for entity types.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Convert`</ph> is supported for conceptual model primitive types.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The C# <ph id="ph1">`is`</ph> and <ph id="ph2">`as`</ph> methods are also supported.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Paging Methods</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Paging operations return a single element or multiple elements from a sequence.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The supported paging methods are <ph id="ph1">`First`</ph>, <ph id="ph2">`FirstOrDefault`</ph>, <ph id="ph3">`Single`</ph>, <ph id="ph4">`SingleOrDefault`</ph>, <ph id="ph5">`Skip`</ph>, and <ph id="ph6">`Take`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A number of paging methods are not supported, due either to the inability to map functions to the data source or to the lack of implicit ordering of sets on the data source.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Methods that return a default value are restricted to conceptual model primitive types and reference types with null defaults.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Paging methods that are executed on an empty sequence will return null.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Supported and Unsupported LINQ Methods (LINQ to Entities)<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/supported-and-unsupported-linq-methods-linq-to-entities.md)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Query Operators Overview<ept id="p1">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/bb397896(v=vs.120))</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>