{"content":"---\ntitle: \"^= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.^=\"\nhelpviewer_keywords: \n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"^= operator [Visual Basic]\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 397da132-2d96-4a85-a7bc-f7c730a608c9\n---\n# ^= Operator (Visual Basic)\nRaises the value of a variable or property to the power of an expression and assigns the result back to the variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty ^= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric variable or property.  \n  \n `expression`  \n Required. Any numeric expression.  \n  \n## Remarks  \n The element on the left side of the `^=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `^=` operator first raises the value of the variable or property (on the left-hand side of the operator) to the power of the value of the expression (on the right-hand side of the operator). The operator then assigns the result of that operation back to the variable or property.  \n  \n Visual Basic always performs exponentiation in the [Double Data Type](../../../visual-basic/language-reference/data-types/double-data-type.md). Operands of any different type are converted to `Double`, and the result is always `Double`.  \n  \n The value of `expression` can be fractional, negative, or both.  \n  \n## Overloading  \n The [^ Operator](../../../visual-basic/language-reference/operators/exponentiation-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `^` operator affects the behavior of the `^=` operator. If your code uses `^=` on a class or structure that overloads `^`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `^=` operator to raise the value of one `Integer` variable to the power of a second variable and assign the result to the first variable.  \n  \n [!code-vb[VbVbalrOperators#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#21)]  \n  \n## See also\n\n- [^ Operator](../../../visual-basic/language-reference/operators/exponentiation-operator.md)\n- [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,347],"embed":true,"restype":"x-metadata","content":"title: \"^= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.^=\"\nhelpviewer_keywords: \n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"^= operator [Visual Basic]\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 397da132-2d96-4a85-a7bc-f7c730a608c9","nodes":[{"content":"^= Operator (Visual Basic)","nodes":[{"pos":[0,26],"content":"^= Operator (Visual Basic)","nodes":[{"content":"^= Operator (Visual Basic)","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[354,380],"content":"^= Operator (Visual Basic)","linkify":"^= Operator (Visual Basic)","nodes":[{"content":"^= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Raises the value of a variable or property to the power of an expression and assigns the result back to the variable or property.","pos":[381,510]},{"pos":[519,525],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[584,589],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[617,626]},{"content":"Any numeric variable or property.","pos":[627,660]},{"content":"Required.","pos":[683,692]},{"content":"Any numeric expression.","pos":[693,716]},{"pos":[725,732],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`^=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[736,857],"source":"The element on the left side of the `^=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[858,968],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`^=`</ph> operator first raises the value of the variable or property (on the left-hand side of the operator) to the power of the value of the expression (on the right-hand side of the operator).","pos":[975,1169],"source":"The `^=` operator first raises the value of the variable or property (on the left-hand side of the operator) to the power of the value of the expression (on the right-hand side of the operator)."},{"content":"The operator then assigns the result of that operation back to the variable or property.","pos":[1170,1258]},{"content":"Visual Basic always performs exponentiation in the <bpt id=\"p1\">[</bpt>Double Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>.","pos":[1265,1408],"source":"Visual Basic always performs exponentiation in the [Double Data Type](../../../visual-basic/language-reference/data-types/double-data-type.md)."},{"content":"Operands of any different type are converted to <ph id=\"ph1\">`Double`</ph>, and the result is always <ph id=\"ph2\">`Double`</ph>.","pos":[1409,1501],"source":" Operands of any different type are converted to `Double`, and the result is always `Double`."},{"pos":[1508,1571],"content":"The value of <ph id=\"ph1\">`expression`</ph> can be fractional, negative, or both.","source":"The value of `expression` can be fractional, negative, or both."},{"pos":[1580,1591],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>^ Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/exponentiation-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1595,1832],"source":"The [^ Operator](../../../visual-basic/language-reference/operators/exponentiation-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`^`</ph> operator affects the behavior of the <ph id=\"ph2\">`^=`</ph> operator.","pos":[1833,1904],"source":" Overloading the `^` operator affects the behavior of the `^=` operator."},{"content":"If your code uses <ph id=\"ph1\">`^=`</ph> on a class or structure that overloads <ph id=\"ph2\">`^`</ph>, be sure you understand its redefined behavior.","pos":[1905,2018],"source":" If your code uses `^=` on a class or structure that overloads `^`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2019,2160],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2169,2176],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2180,2348],"content":"The following example uses the <ph id=\"ph1\">`^=`</ph> operator to raise the value of one <ph id=\"ph2\">`Integer`</ph> variable to the power of a second variable and assign the result to the first variable.","source":"The following example uses the `^=` operator to raise the value of one `Integer` variable to the power of a second variable and assign the result to the first variable."},{"pos":[2481,2489],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2493,2584],"content":"<bpt id=\"p1\">[</bpt>^ Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/exponentiation-operator.md)</ept>","source":"[^ Operator](../../../visual-basic/language-reference/operators/exponentiation-operator.md)"},{"pos":[2587,2685],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>","source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)"},{"pos":[2688,2786],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[2789,2901],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[2904,3028],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[3031,3116],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}