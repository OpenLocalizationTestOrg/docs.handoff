{"content":"---\ntitle: \"Option Infer Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.OptionInfer\"\n  - \"vb.Infer\"\nhelpviewer_keywords: \n  - \"variables [Visual Basic], declaring\"\n  - \"Option Infer statement [Visual Basic]\"\n  - \"Infer keyword [Visual Basic]\"\n  - \"declaring variables [Visual Basic], inferred\"\n  - \"inferred variable declaration\"\nms.assetid: 4ad3e6e9-8f5b-4209-a248-de22ef6e4652\n---\n# Option Infer Statement\nEnables the use of local type inference in declaring variables.  \n  \n## Syntax  \n  \n```  \nOption Infer { On | Off }  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`On`|Optional. Enables local type inference.|  \n|`Off`|Optional. Disables local type inference.|  \n  \n## Remarks  \n To set `Option Infer` in a file, type `Option Infer On` or `Option Infer Off` at the top of the file, before any other source code. If the value set for `Option Infer` in a file conflicts with the value set in the IDE or on the command line, the value in the file has precedence.  \n  \n When you set `Option Infer` to `On`, you can declare local variables without explicitly stating a data type. The compiler infers the data type of a variable from the type of its initialization expression.  \n  \n In the following illustration, `Option Infer` is turned on. The variable in the declaration `Dim someVar = 2` is declared as an integer by type inference.\n\n The following screenshot shows IntelliSense when Option Infer is on: \n  \n ![Screenshot showing IntelliSense view when Option Infer is on.](./media/option-infer-statement/option-infer-as-integer-on.png)  \n  \n In the following illustration, `Option Infer` is turned off. The variable in the declaration `Dim someVar = 2` is declared as an `Object` by type inference. In this example, the **Option Strict** setting is set to **Off** on the [Compile Page, Project Designer (Visual Basic)](/visualstudio/ide/reference/compile-page-project-designer-visual-basic).  \n  \n The following screenshot shows IntelliSense when Option Infer is off:\n \n ![Screenshot showing IntelliSense view when Option Infer is off.](./media/option-infer-statement/option-infer-as-object-off.png)  \n  \n> [!NOTE]\n>  When a variable is declared as an `Object`, the run-time type can change while the program is running. Visual Basic performs operations called *boxing* and *unboxing* to convert between an `Object` and a value type, which makes execution slower. For information about boxing and unboxing, see the [Visual Basic Language Specification](~/_vblang/spec/conversions.md#value-type-conversions).\n  \n Type inference applies at the procedure level, and does not apply outside a procedure in a class, structure, module, or interface.  \n  \n For additional information, see [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md).  \n  \n## When an Option Infer Statement Is Not Present  \n If the source code does not contain an `Option Infer` statement, the **Option Infer** setting on the [Compile Page, Project Designer (Visual Basic)](/visualstudio/ide/reference/compile-page-project-designer-visual-basic) is used. If the command-line compiler is used, the [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) compiler option is used.  \n  \n#### To set Option Infer in the IDE  \n  \n1.  In **Solution Explorer**, select a project. On the **Project** menu, click **Properties**.  \n  \n2.  Click the **Compile** tab.  \n  \n3.  Set the value in the **Option infer** box.  \n  \n When you create a new project, the **Option Infer** setting on the **Compile** tab is set to the **Option Infer** setting in the **VB Defaults** dialog box. To access the **VB Defaults** dialog box, on the **Tools** menu, click **Options**. In the **Options** dialog box, expand **Projects and Solutions**, and then click **VB Defaults**. The initial default setting in **VB Defaults** is `On`.  \n  \n#### To set Option Infer on the command line  \n  \n-   Include the [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) compiler option in the **vbc** command.  \n  \n## Default Data Types and Values  \n The following table describes the results of various combinations of specifying the data type and initializer in a `Dim` statement.  \n  \n|Data type specified?|Initializer specified?|Example|Result|  \n|---|---|---|---|  \n|No|No|`Dim qty`|If `Option Strict` is off (the default), the variable is set to `Nothing`.<br /><br /> If `Option Strict` is on, a compile-time error occurs.|  \n|No|Yes|`Dim qty = 5`|If `Option Infer` is on (the default), the variable takes the data type of the initializer. See [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md).<br /><br /> If `Option Infer` is off and `Option Strict` is off, the variable takes the data type of `Object`.<br /><br /> If `Option Infer` is off and `Option Strict` is on, a compile-time error occurs.|  \n|Yes|No|`Dim qty As Integer`|The variable is initialized to the default value for the data type. For more information, see [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md).|  \n|Yes|Yes|`Dim qty  As Integer = 5`|If the data type of the initializer is not convertible to the specified data type, a compile-time error occurs.|  \n  \n## Example  \n The following examples demonstrate how the `Option Infer` statement enables local type inference.  \n  \n [!code-vb[VbVbalrTypeInference#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTypeInference/VB/Class1.vb#6)]  \n  \n## Example  \n The following example demonstrates that the run-time type can differ when a variable is identified as an `Object`.  \n  \n [!code-vb[VbVbalrTypeInference#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTypeInference/VB/Class1.vb#11)]  \n  \n## See also\n\n- [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)\n- [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)\n- [Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md)\n- [Option Explicit Statement](../../../visual-basic/language-reference/statements/option-explicit-statement.md)\n- [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)\n- [Visual Basic Defaults, Projects, Options Dialog Box](/visualstudio/ide/reference/visual-basic-defaults-projects-options-dialog-box)\n- [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md)\n- [Boxing and Unboxing](../../../csharp/programming-guide/types/boxing-and-unboxing.md)\n","nodes":[{"pos":[4,399],"embed":true,"restype":"x-metadata","content":"title: \"Option Infer Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.OptionInfer\"\n  - \"vb.Infer\"\nhelpviewer_keywords: \n  - \"variables [Visual Basic], declaring\"\n  - \"Option Infer statement [Visual Basic]\"\n  - \"Infer keyword [Visual Basic]\"\n  - \"declaring variables [Visual Basic], inferred\"\n  - \"inferred variable declaration\"\nms.assetid: 4ad3e6e9-8f5b-4209-a248-de22ef6e4652","nodes":[{"content":"Option Infer Statement (Visual Basic)","nodes":[{"pos":[0,37],"content":"Option Infer Statement (Visual Basic)","nodes":[{"content":"Option Infer Statement (Visual Basic)","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[406,428],"content":"Option Infer Statement","linkify":"Option Infer Statement","nodes":[{"content":"Option Infer Statement","pos":[0,22]}]},{"content":"Enables the use of local type inference in declaring variables.","pos":[429,492]},{"pos":[501,507],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[559,564],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[571,575]},{"content":"Definition","pos":[576,586]},{"content":"Optional.","pos":[608,617]},{"content":"Enables local type inference.","pos":[618,647]},{"content":"Optional.","pos":[658,667]},{"content":"Disables local type inference.","pos":[668,698]},{"pos":[708,715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To set <ph id=\"ph1\">`Option Infer`</ph> in a file, type <ph id=\"ph2\">`Option Infer On`</ph> or <ph id=\"ph3\">`Option Infer Off`</ph> at the top of the file, before any other source code.","pos":[719,850],"source":"To set `Option Infer` in a file, type `Option Infer On` or `Option Infer Off` at the top of the file, before any other source code."},{"content":"If the value set for <ph id=\"ph1\">`Option Infer`</ph> in a file conflicts with the value set in the IDE or on the command line, the value in the file has precedence.","pos":[851,998],"source":" If the value set for `Option Infer` in a file conflicts with the value set in the IDE or on the command line, the value in the file has precedence."},{"content":"When you set <ph id=\"ph1\">`Option Infer`</ph> to <ph id=\"ph2\">`On`</ph>, you can declare local variables without explicitly stating a data type.","pos":[1005,1113],"source":"When you set `Option Infer` to `On`, you can declare local variables without explicitly stating a data type."},{"content":"The compiler infers the data type of a variable from the type of its initialization expression.","pos":[1114,1209]},{"content":"In the following illustration, <ph id=\"ph1\">`Option Infer`</ph> is turned on.","pos":[1216,1275],"source":"In the following illustration, `Option Infer` is turned on."},{"content":"The variable in the declaration <ph id=\"ph1\">`Dim someVar = 2`</ph> is declared as an integer by type inference.","pos":[1276,1370],"source":" The variable in the declaration `Dim someVar = 2` is declared as an integer by type inference."},{"content":"The following screenshot shows IntelliSense when Option Infer is on:","pos":[1373,1441]},{"content":"Screenshot showing IntelliSense view when Option Infer is on.","pos":[1449,1510]},{"content":"In the following illustration, <ph id=\"ph1\">`Option Infer`</ph> is turned off.","pos":[1581,1641],"source":"In the following illustration, `Option Infer` is turned off."},{"content":"The variable in the declaration <ph id=\"ph1\">`Dim someVar = 2`</ph> is declared as an <ph id=\"ph2\">`Object`</ph> by type inference.","pos":[1642,1737],"source":" The variable in the declaration `Dim someVar = 2` is declared as an `Object` by type inference."},{"content":"In this example, the <bpt id=\"p1\">**</bpt>Option Strict<ept id=\"p1\">**</ept> setting is set to <bpt id=\"p2\">**</bpt>Off<ept id=\"p2\">**</ept> on the <bpt id=\"p3\">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id=\"p3\">](/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept>.","pos":[1738,1930],"source":" In this example, the **Option Strict** setting is set to **Off** on the [Compile Page, Project Designer (Visual Basic)](/visualstudio/ide/reference/compile-page-project-designer-visual-basic)."},{"content":"The following screenshot shows IntelliSense when Option Infer is off:","pos":[1937,2006]},{"content":"Screenshot showing IntelliSense view when Option Infer is off.","pos":[2012,2074]},{"pos":[2146,2546],"content":"[!NOTE]\n When a variable is declared as an `Object`, the run-time type can change while the program is running. Visual Basic performs operations called *boxing* and *unboxing* to convert between an `Object` and a value type, which makes execution slower. For information about boxing and unboxing, see the [Visual Basic Language Specification](~/_vblang/spec/conversions.md#value-type-conversions).","leadings":["","> "],"nodes":[{"content":"When a variable is declared as an `Object`, the run-time type can change while the program is running. Visual Basic performs operations called *boxing* and *unboxing* to convert between an `Object` and a value type, which makes execution slower. For information about boxing and unboxing, see the [Visual Basic Language Specification](~/_vblang/spec/conversions.md#value-type-conversions).","pos":[9,398],"nodes":[{"content":"When a variable is declared as an <ph id=\"ph1\">`Object`</ph>, the run-time type can change while the program is running.","pos":[0,102],"source":"When a variable is declared as an `Object`, the run-time type can change while the program is running."},{"content":"Visual Basic performs operations called <bpt id=\"p1\">*</bpt>boxing<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>unboxing<ept id=\"p2\">*</ept> to convert between an <ph id=\"ph1\">`Object`</ph> and a value type, which makes execution slower.","pos":[103,245],"source":" Visual Basic performs operations called *boxing* and *unboxing* to convert between an `Object` and a value type, which makes execution slower."},{"content":"For information about boxing and unboxing, see the <bpt id=\"p1\">[</bpt>Visual Basic Language Specification<ept id=\"p1\">](~/_vblang/spec/conversions.md#value-type-conversions)</ept>.","pos":[246,389],"source":" For information about boxing and unboxing, see the [Visual Basic Language Specification](~/_vblang/spec/conversions.md#value-type-conversions)."}]}]},{"content":"Type inference applies at the procedure level, and does not apply outside a procedure in a class, structure, module, or interface.","pos":[2551,2681]},{"pos":[2688,2836],"content":"For additional information, see <bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.","source":"For additional information, see [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)."},{"pos":[2845,2890],"content":"When an Option Infer Statement Is Not Present","linkify":"When an Option Infer Statement Is Not Present","nodes":[{"content":"When an Option Infer Statement Is Not Present","pos":[0,45]}]},{"content":"If the source code does not contain an <ph id=\"ph1\">`Option Infer`</ph> statement, the <bpt id=\"p1\">**</bpt>Option Infer<ept id=\"p1\">**</ept> setting on the <bpt id=\"p2\">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id=\"p2\">](/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept> is used.","pos":[2894,3123],"source":"If the source code does not contain an `Option Infer` statement, the **Option Infer** setting on the [Compile Page, Project Designer (Visual Basic)](/visualstudio/ide/reference/compile-page-project-designer-visual-basic) is used."},{"content":"If the command-line compiler is used, the <bpt id=\"p1\">[</bpt>/optioninfer<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/optioninfer.md)</ept> compiler option is used.","pos":[3124,3275],"source":" If the command-line compiler is used, the [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) compiler option is used."},{"pos":[3286,3316],"content":"To set Option Infer in the IDE","linkify":"To set Option Infer in the IDE","nodes":[{"content":"To set Option Infer in the IDE","pos":[0,30]}]},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select a project.","pos":[3326,3369],"source":"In **Solution Explorer**, select a project."},{"content":"On the <bpt id=\"p1\">**</bpt>Project<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>.","pos":[3370,3416],"source":" On the **Project** menu, click **Properties**."},{"pos":[3426,3452],"content":"Click the <bpt id=\"p1\">**</bpt>Compile<ept id=\"p1\">**</ept> tab.","source":"Click the **Compile** tab."},{"pos":[3462,3504],"content":"Set the value in the <bpt id=\"p1\">**</bpt>Option infer<ept id=\"p1\">**</ept> box.","source":"Set the value in the **Option infer** box."},{"content":"When you create a new project, the <bpt id=\"p1\">**</bpt>Option Infer<ept id=\"p1\">**</ept> setting on the <bpt id=\"p2\">**</bpt>Compile<ept id=\"p2\">**</ept> tab is set to the <bpt id=\"p3\">**</bpt>Option Infer<ept id=\"p3\">**</ept> setting in the <bpt id=\"p4\">**</bpt>VB Defaults<ept id=\"p4\">**</ept> dialog box.","pos":[3511,3667],"source":"When you create a new project, the **Option Infer** setting on the **Compile** tab is set to the **Option Infer** setting in the **VB Defaults** dialog box."},{"content":"To access the <bpt id=\"p1\">**</bpt>VB Defaults<ept id=\"p1\">**</ept> dialog box, on the <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept> menu, click <bpt id=\"p3\">**</bpt>Options<ept id=\"p3\">**</ept>.","pos":[3668,3751],"source":" To access the **VB Defaults** dialog box, on the **Tools** menu, click **Options**."},{"content":"In the <bpt id=\"p1\">**</bpt>Options<ept id=\"p1\">**</ept> dialog box, expand <bpt id=\"p2\">**</bpt>Projects and Solutions<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>VB Defaults<ept id=\"p3\">**</ept>.","pos":[3752,3849],"source":" In the **Options** dialog box, expand **Projects and Solutions**, and then click **VB Defaults**."},{"content":"The initial default setting in <bpt id=\"p1\">**</bpt>VB Defaults<ept id=\"p1\">**</ept> is <ph id=\"ph1\">`On`</ph>.","pos":[3850,3905],"source":" The initial default setting in **VB Defaults** is `On`."},{"pos":[3916,3955],"content":"To set Option Infer on the command line","linkify":"To set Option Infer on the command line","nodes":[{"content":"To set Option Infer on the command line","pos":[0,39]}]},{"pos":[3965,4101],"content":"Include the <bpt id=\"p1\">[</bpt>/optioninfer<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/optioninfer.md)</ept> compiler option in the <bpt id=\"p2\">**</bpt>vbc<ept id=\"p2\">**</ept> command.","source":"Include the [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) compiler option in the **vbc** command."},{"pos":[4110,4139],"content":"Default Data Types and Values","linkify":"Default Data Types and Values","nodes":[{"content":"Default Data Types and Values","pos":[0,29]}]},{"pos":[4143,4274],"content":"The following table describes the results of various combinations of specifying the data type and initializer in a <ph id=\"ph1\">`Dim`</ph> statement.","source":"The following table describes the results of various combinations of specifying the data type and initializer in a `Dim` statement."},{"content":"Data type specified?","pos":[4281,4301]},{"content":"Initializer specified?","pos":[4302,4324]},{"content":"Example","pos":[4325,4332]},{"content":"Result","pos":[4333,4339]},{"content":"No","pos":[4364,4366]},{"content":"No","pos":[4367,4369]},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is off (the default), the variable is set to <ph id=\"ph2\">`Nothing`</ph>.","pos":[4380,4454],"source":"If `Option Strict` is off (the default), the variable is set to `Nothing`."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is on, a compile-time error occurs.","pos":[4467,4521],"source":"If `Option Strict` is on, a compile-time error occurs."},{"content":"No","pos":[4526,4528]},{"content":"Yes","pos":[4529,4532]},{"content":"If <ph id=\"ph1\">`Option Infer`</ph> is on (the default), the variable takes the data type of the initializer.","pos":[4547,4638],"source":"If `Option Infer` is on (the default), the variable takes the data type of the initializer."},{"content":"See <bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.","pos":[4639,4759],"source":" See [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)."},{"content":"If <ph id=\"ph1\">`Option Infer`</ph> is off and <ph id=\"ph2\">`Option Strict`</ph> is off, the variable takes the data type of <ph id=\"ph3\">`Object`</ph>.","pos":[4772,4870],"source":"If `Option Infer` is off and `Option Strict` is off, the variable takes the data type of `Object`."},{"content":"If <ph id=\"ph1\">`Option Infer`</ph> is off and <ph id=\"ph2\">`Option Strict`</ph> is on, a compile-time error occurs.","pos":[4883,4963],"source":"If `Option Infer` is off and `Option Strict` is on, a compile-time error occurs."},{"content":"Yes","pos":[4968,4971]},{"content":"No","pos":[4972,4974]},{"content":"The variable is initialized to the default value for the data type.","pos":[4996,5063]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.","pos":[5064,5176],"source":" For more information, see [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)."},{"content":"Yes","pos":[5181,5184]},{"content":"Yes","pos":[5185,5188]},{"content":"If the data type of the initializer is not convertible to the specified data type, a compile-time error occurs.","pos":[5215,5326]},{"pos":[5336,5343],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5347,5444],"content":"The following examples demonstrate how the <ph id=\"ph1\">`Option Infer`</ph> statement enables local type inference.","source":"The following examples demonstrate how the `Option Infer` statement enables local type inference."},{"pos":[5583,5590],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5594,5708],"content":"The following example demonstrates that the run-time type can differ when a variable is identified as an <ph id=\"ph1\">`Object`</ph>.","source":"The following example demonstrates that the run-time type can differ when a variable is identified as an `Object`."},{"pos":[5849,5857],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5861,5946],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[5949,6064],"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>","source":"[Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)"},{"pos":[6067,6174],"content":"<bpt id=\"p1\">[</bpt>Option Compare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept>","source":"[Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md)"},{"pos":[6177,6286],"content":"<bpt id=\"p1\">[</bpt>Option Explicit Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept>","source":"[Option Explicit Statement](../../../visual-basic/language-reference/statements/option-explicit-statement.md)"},{"pos":[6289,6394],"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","source":"[Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)"},{"pos":[6397,6529],"content":"<bpt id=\"p1\">[</bpt>Visual Basic Defaults, Projects, Options Dialog Box<ept id=\"p1\">](/visualstudio/ide/reference/visual-basic-defaults-projects-options-dialog-box)</ept>","source":"[Visual Basic Defaults, Projects, Options Dialog Box](/visualstudio/ide/reference/visual-basic-defaults-projects-options-dialog-box)"},{"pos":[6532,6616],"content":"<bpt id=\"p1\">[</bpt>/optioninfer<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/optioninfer.md)</ept>","source":"[/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md)"},{"pos":[6619,6704],"content":"<bpt id=\"p1\">[</bpt>Boxing and Unboxing<ept id=\"p1\">](../../../csharp/programming-guide/types/boxing-and-unboxing.md)</ept>","source":"[Boxing and Unboxing](../../../csharp/programming-guide/types/boxing-and-unboxing.md)"}]}