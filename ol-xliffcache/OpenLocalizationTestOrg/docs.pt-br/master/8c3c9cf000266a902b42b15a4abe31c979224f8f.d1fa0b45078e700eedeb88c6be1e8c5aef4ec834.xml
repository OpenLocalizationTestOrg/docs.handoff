{"content":"---\ntitle: \"How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"data grids [Windows Forms], disabling buttons\"\n  - \"buttons [Windows Forms], disabling in button columns\"\n  - \"DataGridView control [Windows Forms], disabling button cells\"\nms.assetid: 5c344d01-013a-4a6b-8f8d-62ec9321d81e\n---\n# How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control\nThe <xref:System.Windows.Forms.DataGridView> control includes the <xref:System.Windows.Forms.DataGridViewButtonCell> class for displaying cells with a user interface (UI) like a button. However, <xref:System.Windows.Forms.DataGridViewButtonCell> does not provide a way to disable the appearance of the button displayed by the cell.  \n  \n The following code example demonstrates how to customize the <xref:System.Windows.Forms.DataGridViewButtonCell> class to display buttons that can appear disabled. The example defines a new cell type, `DataGridViewDisableButtonCell`, that derives from <xref:System.Windows.Forms.DataGridViewButtonCell>. This cell type provides a new `Enabled` property that can be set to `false` to draw a disabled button in the cell. The example also defines a new column type, `DataGridViewDisableButtonColumn`, that displays `DataGridViewDisableButtonCell` objects. To demonstrate this new cell and column type, the current value of each <xref:System.Windows.Forms.DataGridViewCheckBoxCell> in the parent <xref:System.Windows.Forms.DataGridView> determines whether the `Enabled` property of the `DataGridViewDisableButtonCell` in the same row is `true` or `false`.  \n  \n> [!NOTE]\n>  When you derive from <xref:System.Windows.Forms.DataGridViewCell> or <xref:System.Windows.Forms.DataGridViewColumn> and add new properties to the derived class, be sure to override the `Clone` method to copy the new properties during cloning operations. You should also call the base class's `Clone` method so that the properties of the base class are copied to the new cell or column.  \n  \n## Example  \n [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#0)]\n [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#0)]  \n  \n## Compiling the Code  \n This example requires:  \n  \n-   References to the System, System.Drawing, System.Windows.Forms and System.Windows.Forms.VisualStyles assemblies.  \n  \n For information about building this example from the command line for Visual Basic or Visual C#, see [Building from the Command Line](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md) or [Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md). You can also build this example in Visual Studio by pasting the code into a new project.  \n  \n## See also\n\n- [Customizing the Windows Forms DataGridView Control](customizing-the-windows-forms-datagridview-control.md)\n- [DataGridView Control Architecture](datagridview-control-architecture-windows-forms.md)\n- [Column Types in the Windows Forms DataGridView Control](column-types-in-the-windows-forms-datagridview-control.md)\n","nodes":[{"pos":[4,402],"embed":true,"restype":"x-metadata","content":"title: \"How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"data grids [Windows Forms], disabling buttons\"\n  - \"buttons [Windows Forms], disabling in button columns\"\n  - \"DataGridView control [Windows Forms], disabling button cells\"\nms.assetid: 5c344d01-013a-4a6b-8f8d-62ec9321d81e","nodes":[{"content":"How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control","nodes":[{"pos":[0,84],"content":"How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control","nodes":[{"content":"How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control","pos":[0,84]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[409,493],"content":"How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control","linkify":"How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control","nodes":[{"content":"How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control","pos":[0,84]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control includes the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridViewButtonCell&gt;</ph> class for displaying cells with a user interface (UI) like a button.","pos":[494,679],"source":"The <xref:System.Windows.Forms.DataGridView> control includes the <xref:System.Windows.Forms.DataGridViewButtonCell> class for displaying cells with a user interface (UI) like a button."},{"content":"However, <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridViewButtonCell&gt;</ph> does not provide a way to disable the appearance of the button displayed by the cell.","pos":[680,825],"source":" However, <xref:System.Windows.Forms.DataGridViewButtonCell> does not provide a way to disable the appearance of the button displayed by the cell."},{"content":"The following code example demonstrates how to customize the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridViewButtonCell&gt;</ph> class to display buttons that can appear disabled.","pos":[832,994],"source":"The following code example demonstrates how to customize the <xref:System.Windows.Forms.DataGridViewButtonCell> class to display buttons that can appear disabled."},{"content":"The example defines a new cell type, <ph id=\"ph1\">`DataGridViewDisableButtonCell`</ph>, that derives from <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridViewButtonCell&gt;</ph>.","pos":[995,1134],"source":" The example defines a new cell type, `DataGridViewDisableButtonCell`, that derives from <xref:System.Windows.Forms.DataGridViewButtonCell>."},{"content":"This cell type provides a new <ph id=\"ph1\">`Enabled`</ph> property that can be set to <ph id=\"ph2\">`false`</ph> to draw a disabled button in the cell.","pos":[1135,1249],"source":" This cell type provides a new `Enabled` property that can be set to `false` to draw a disabled button in the cell."},{"content":"The example also defines a new column type, <ph id=\"ph1\">`DataGridViewDisableButtonColumn`</ph>, that displays <ph id=\"ph2\">`DataGridViewDisableButtonCell`</ph> objects.","pos":[1250,1383],"source":" The example also defines a new column type, `DataGridViewDisableButtonColumn`, that displays `DataGridViewDisableButtonCell` objects."},{"content":"To demonstrate this new cell and column type, the current value of each <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridViewCheckBoxCell&gt;</ph> in the parent <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> determines whether the <ph id=\"ph3\">`Enabled`</ph> property of the <ph id=\"ph4\">`DataGridViewDisableButtonCell`</ph> in the same row is <ph id=\"ph5\">`true`</ph> or <ph id=\"ph6\">`false`</ph>.","pos":[1384,1682],"source":" To demonstrate this new cell and column type, the current value of each <xref:System.Windows.Forms.DataGridViewCheckBoxCell> in the parent <xref:System.Windows.Forms.DataGridView> determines whether the `Enabled` property of the `DataGridViewDisableButtonCell` in the same row is `true` or `false`."},{"pos":[1690,2086],"content":"[!NOTE]\n When you derive from <xref:System.Windows.Forms.DataGridViewCell> or <xref:System.Windows.Forms.DataGridViewColumn> and add new properties to the derived class, be sure to override the `Clone` method to copy the new properties during cloning operations. You should also call the base class's `Clone` method so that the properties of the base class are copied to the new cell or column.","leadings":["","> "],"nodes":[{"content":"When you derive from <xref:System.Windows.Forms.DataGridViewCell> or <xref:System.Windows.Forms.DataGridViewColumn> and add new properties to the derived class, be sure to override the `Clone` method to copy the new properties during cloning operations. You should also call the base class's `Clone` method so that the properties of the base class are copied to the new cell or column.","pos":[9,394],"nodes":[{"content":"When you derive from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridViewCell&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridViewColumn&gt;</ph> and add new properties to the derived class, be sure to override the <ph id=\"ph3\">`Clone`</ph> method to copy the new properties during cloning operations.","pos":[0,253],"source":"When you derive from <xref:System.Windows.Forms.DataGridViewCell> or <xref:System.Windows.Forms.DataGridViewColumn> and add new properties to the derived class, be sure to override the `Clone` method to copy the new properties during cloning operations."},{"content":"You should also call the base class's <ph id=\"ph1\">`Clone`</ph> method so that the properties of the base class are copied to the new cell or column.","pos":[254,385],"source":" You should also call the base class's `Clone` method so that the properties of the base class are copied to the new cell or column."}]}]},{"pos":[2095,2102],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2476,2494],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"This example requires:","pos":[2498,2520]},{"content":"References to the System, System.Drawing, System.Windows.Forms and System.Windows.Forms.VisualStyles assemblies.","pos":[2530,2642]},{"content":"For information about building this example from the command line for Visual Basic or Visual C#, see <bpt id=\"p1\">[</bpt>Building from the Command Line<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept> or <bpt id=\"p2\">[</bpt>Command-line Building With csc.exe<ept id=\"p2\">](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.","pos":[2649,3003],"source":"For information about building this example from the command line for Visual Basic or Visual C#, see [Building from the Command Line](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md) or [Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)."},{"content":"You can also build this example in Visual Studio by pasting the code into a new project.","pos":[3004,3092]},{"pos":[3101,3109],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3113,3220],"content":"<bpt id=\"p1\">[</bpt>Customizing the Windows Forms DataGridView Control<ept id=\"p1\">](customizing-the-windows-forms-datagridview-control.md)</ept>","source":"[Customizing the Windows Forms DataGridView Control](customizing-the-windows-forms-datagridview-control.md)"},{"pos":[3223,3310],"content":"<bpt id=\"p1\">[</bpt>DataGridView Control Architecture<ept id=\"p1\">](datagridview-control-architecture-windows-forms.md)</ept>","source":"[DataGridView Control Architecture](datagridview-control-architecture-windows-forms.md)"},{"pos":[3313,3428],"content":"<bpt id=\"p1\">[</bpt>Column Types in the Windows Forms DataGridView Control<ept id=\"p1\">](column-types-in-the-windows-forms-datagridview-control.md)</ept>","source":"[Column Types in the Windows Forms DataGridView Control](column-types-in-the-windows-forms-datagridview-control.md)"}]}