{"content":"---\ntitle: \"How to: Store and Reuse Queries | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: a012bd79-1809-45e3-adea-0229532396cc\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# How to: Store and Reuse Queries\nWhen you have an application that executes structurally similar queries many times, you can often increase performance by compiling the query one time and executing it several times with different parameters. For example, an application might have to retrieve all the customers who are in a particular city, where the city is specified at runtime by the user in a form. [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] supports the use of *compiled queries* for this purpose.  \n  \n> [!NOTE]\n>  This pattern of usage represents the most common use for compiled queries. Other approaches are possible. For example, compiled queries can be stored as static members on a partial class that extends the code generated by the designer.  \n  \n## Example  \n In many scenarios you might want to reuse the queries across thread boundaries. In such cases, storing the compiled queries in static variables is especially effective. The following code example assumes a `Queries` class designed to store compiled queries, and assumes a Northwind class that represents a strongly typed <xref:System.Data.Linq.DataContext>.  \n  \n [!code-csharp[DLinqQuerying#6](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#6)]\n [!code-vb[DLinqQuerying#6](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#6)]  \n  \n [!code-csharp[DLinqQuerying#7](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#7)]\n [!code-vb[DLinqQuerying#7](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#7)]  \n  \n## Example  \n You cannot currently store (in static variables) queries that return an *anonymous type*, because type has no name to provide as a generic argument. The following example shows how you can work around the issue by creating a type that can represent the result, and then use it as a generic argument.  \n  \n [!code-csharp[DLinqQuerying#8](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#8)]\n [!code-vb[DLinqQuerying#8](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#8)]  \n  \n## See Also  \n <xref:System.Data.Linq.CompiledQuery>   \n [Query Concepts](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)   \n [Querying the Database](../../../../../../docs/framework/data/adonet/sql/linq/querying-the-database.md)","nodes":[{"pos":[12,60],"content":"How to: Store and Reuse Queries | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Store and Reuse Queries | Microsoft Docs","pos":[0,48]}]},{"pos":[369,400],"content":"How to: Store and Reuse Queries","linkify":"How to: Store and Reuse Queries","nodes":[{"content":"How to: Store and Reuse Queries","pos":[0,31]}]},{"content":"When you have an application that executes structurally similar queries many times, you can often increase performance by compiling the query one time and executing it several times with different parameters.","pos":[401,609]},{"content":"For example, an application might have to retrieve all the customers who are in a particular city, where the city is specified at runtime by the user in a form.","pos":[610,770]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> supports the use of <bpt id=\"p1\">*</bpt>compiled queries<ept id=\"p1\">*</ept> for this purpose.","pos":[771,895],"source":"[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] supports the use of *compiled queries* for this purpose."},{"pos":[903,1149],"content":"[!NOTE]\n This pattern of usage represents the most common use for compiled queries. Other approaches are possible. For example, compiled queries can be stored as static members on a partial class that extends the code generated by the designer.","leadings":["","> "],"nodes":[{"content":" This pattern of usage represents the most common use for compiled queries. Other approaches are possible. For example, compiled queries can be stored as static members on a partial class that extends the code generated by the designer.","pos":[8,244],"nodes":[{"content":"This pattern of usage represents the most common use for compiled queries.","pos":[1,75]},{"content":"Other approaches are possible.","pos":[76,106]},{"content":"For example, compiled queries can be stored as static members on a partial class that extends the code generated by the designer.","pos":[107,236]}]}]},{"pos":[1158,1165],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In many scenarios you might want to reuse the queries across thread boundaries.","pos":[1169,1248]},{"content":"In such cases, storing the compiled queries in static variables is especially effective.","pos":[1249,1337]},{"content":"The following code example assumes a <ph id=\"ph1\">`Queries`</ph> class designed to store compiled queries, and assumes a Northwind class that represents a strongly typed <ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.","pos":[1338,1526],"source":" The following code example assumes a `Queries` class designed to store compiled queries, and assumes a Northwind class that represents a strongly typed <xref:System.Data.Linq.DataContext>."},{"pos":[1533,1778],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqQuerying#6<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqQuerying#6<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqQuerying#6](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#6)]\n [!code-vb[DLinqQuerying#6](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#6)]"},{"pos":[1785,2030],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqQuerying#7<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqQuerying#7<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#7)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqQuerying#7](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#7)]\n [!code-vb[DLinqQuerying#7](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#7)]"},{"pos":[2039,2046],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"You cannot currently store (in static variables) queries that return an <bpt id=\"p1\">*</bpt>anonymous type<ept id=\"p1\">*</ept>, because type has no name to provide as a generic argument.","pos":[2050,2198],"source":"You cannot currently store (in static variables) queries that return an *anonymous type*, because type has no name to provide as a generic argument."},{"content":"The following example shows how you can work around the issue by creating a type that can represent the result, and then use it as a generic argument.","pos":[2199,2349]},{"pos":[2356,2601],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqQuerying#8<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqQuerying#8<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqQuerying#8](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQuerying/cs/Program.cs#8)]\n [!code-vb[DLinqQuerying#8](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQuerying/vb/Module1.vb#8)]"},{"pos":[2610,2618],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Data.Linq.CompiledQuery&gt;</ph>","pos":[2622,2659],"source":"<xref:System.Data.Linq.CompiledQuery> "},{"content":"<bpt id=\"p1\"> [</bpt>Query Concepts<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)</ept><ph id=\"ph1\"> </ph>","pos":[2663,2754],"source":" [Query Concepts](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Querying the Database<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/querying-the-database.md)</ept>","pos":[2757,2861],"source":" [Querying the Database](../../../../../../docs/framework/data/adonet/sql/linq/querying-the-database.md)"}]}