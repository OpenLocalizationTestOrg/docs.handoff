<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-the-message-class.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9b1c1242fe2686a66e41b777f904a71898159ea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\using-the-message-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fb8d83bfe68a106378d4c3f6790bc7fe64ecba3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">657dd94d1fa6eab03270523677f0670a849e7dc9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using the Message Class</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using the Message Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class is fundamental to Windows Communication Foundation (WCF).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All communication between clients and services ultimately results in <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instances being sent and received.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You would not usually interact with the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class directly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Instead, WCF service model constructs, such as data contracts, message contracts, and operation contracts, are used to describe incoming and outgoing messages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, in some advanced scenarios you can program using the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class directly.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, you might want to use the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you need an alternative way of creating outgoing message contents (for example, creating a message directly from a file on disk) instead of serializing <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> objects.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you need an alternative way of using incoming message contents (for example, when you want to apply an XSLT transformation to the raw XML contents) instead of deserializing into <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you need to deal with messages in a general way regardless of message contents (for example, when routing or forwarding messages when building a router, load-balancer, or a publish-subscribe system).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Before using the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class, familiarize yourself with the WCF data transfer architecture in <bpt id="p1">[</bpt>Data Transfer Architectural Overview<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-transfer-architectural-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> is a general-purpose container for data, but its design closely follows the design of a message in the SOAP protocol.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Just like in SOAP, a message has both a message body and headers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The message body contains the actual payload data, while the headers contain additional named data containers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The rules for reading and writing the body and the headers are different, for example, the headers are always buffered in memory and may be accessed in any order any number of times, while the body may be read only once and may be streamed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Normally, when using SOAP, the message body is mapped to the SOAP body and the message headers are mapped to the SOAP headers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Using the Message Class in Operations</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class as an input parameter of an operation, the return value of an operation, or both.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> is used anywhere in an operation, the following restrictions apply:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The operation cannot have any <ph id="ph1">`out`</ph> or <ph id="ph2">`ref`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There cannot be more than one <ph id="ph1">`input`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the parameter is present, it must be either Message or a message contract type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The return type must be either <ph id="ph1">`void`</ph>, <ph id="ph2">`Message`</ph>, or a message contract type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following code example contains a valid operation contract.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creating Basic Messages</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class provides static <ph id="ph2">`CreateMessage`</ph> factory methods that you can use to create basic messages.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`CreateMessage`</ph> overloads take a version parameter of type <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageVersion&gt;</ph> that indicates the SOAP and WS-Addressing versions to use for the message.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you want to use the same protocol versions as the incoming message, you can use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageVersion%2A&gt;</ph> property on the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> instance obtained from the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Most <ph id="ph1">`CreateMessage`</ph> overloads also have a string parameter that indicates the SOAP action to use for the message.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Version can be set to <ph id="ph1">`None`</ph> to disable SOAP envelope generation; the message consists of only the body.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Creating Messages from Objects</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The most basic <ph id="ph1">`CreateMessage`</ph> overload that takes only a version and an action creates a message with an empty body.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Another overload takes an additional <ph id="ph1">&lt;xref:System.Object&gt;</ph> parameter; this creates a message whose body is the serialized representation of the given object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> with default settings for serialization.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you want to use a different serializer, or you want the <ph id="ph1">`DataContractSerializer`</ph> configured differently, use the <ph id="ph2">`CreateMessage`</ph> overload that also takes an <ph id="ph3">`XmlObjectSerializer`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, to return an object in a message, you can use the following code.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Creating Messages from XML Readers</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>There are <ph id="ph1">`CreateMessage`</ph> overloads that take an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> or an <ph id="ph3">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> for the body instead of an object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this case, the body of the message contains the XML that results from reading from the passed XML reader.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, the following code returns a message with body contents read from an XML file.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Additionally, there are <ph id="ph1">`CreateMessage`</ph> overloads that take an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> or an <ph id="ph3">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> that represents the entire message and not just the body.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These overloads also take an integer <ph id="ph1">`maxSizeOfHeaders`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Headers are always buffered into memory as soon as the message is created, and this parameter limits the amount of buffering that takes place.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It is important to set this parameter to a safe value if the XML is coming from an untrusted source to mitigate the possibility of a denial of service attack.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The SOAP and WS-Addressing versions of the message the XML reader represents must match the versions indicated using the version parameter.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Creating Messages with BodyWriter</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>One <ph id="ph1">`CreateMessage`</ph> overload takes a <ph id="ph2">`BodyWriter`</ph> instance to describe the body of the message.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`BodyWriter`</ph> is an abstract class that can be derived to customize how message bodies are created.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can create your own <ph id="ph1">`BodyWriter`</ph> derived class to describe message bodies in a custom way.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You must override the <ph id="ph1">`BodyWriter.OnWriteBodyContents`</ph> method that takes an <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph>; this method is responsible for writing out the body.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Body writers can be buffered or non-buffered (streamed).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Buffered body writers can write out their contents any number of times, while streamed ones can write out their contents only once.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsBuffered`</ph> property indicates whether a body writer is buffered or not.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can set this for your body writer by calling the protected <ph id="ph1">`BodyWriter`</ph> constructor that takes an <ph id="ph2">`isBuffered`</ph> boolean parameter.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Body writers support creating a buffered body writer from a non-buffered body writer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can override the <ph id="ph1">`OnCreateBufferedCopy`</ph> method to customize this process.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>By default, an in-memory buffer that contains the XML returned by <ph id="ph1">`OnWriteBodyContents`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnCreateBufferedCopy`</ph> takes a <ph id="ph2">`maxBufferSize`</ph> integer parameter; if you override this method, you must not create buffers larger than this maximum size.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BodyWriter`</ph> class provides the <ph id="ph2">`WriteBodyContents`</ph> and <ph id="ph3">`CreateBufferedCopy`</ph> methods, which are essentially thin wrappers around <ph id="ph4">`OnWriteBodyContents`</ph> and <ph id="ph5">`OnCreateBufferedCopy`</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>These methods perform state checking to ensure that a non-buffered body writer is not accessed more than once.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>These methods are called directly only when creating custom <ph id="ph1">`Message`</ph> derived classes based on <ph id="ph2">`BodyWriters`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Creating Fault Messages</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can use certain <ph id="ph1">`CreateMessage`</ph> overloads to create SOAP fault messages.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The most basic of these takes a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageFault&gt;</ph> object that describes the fault.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Other overloads are provided for convenience.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The first such overload takes a <ph id="ph1">`FaultCode`</ph> and a reason string and creates a <ph id="ph2">`MessageFault`</ph> using <ph id="ph3">`MessageFault.CreateFault`</ph> using this information.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The other overload takes a detail object and also passes it to <ph id="ph1">`CreateFault`</ph> together with the fault code and the reason.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, the following operation returns a fault.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Extracting Message Body Data</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Message`</ph> class supports multiple ways of extracting information from its body.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>These can be classified into the following categories:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Getting the entire message body written out at once to an XML writer.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This is referred to as <bpt id="p1">*</bpt>writing a message<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Getting an XML reader over the message body.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This enables you to later access the message body piece-by-piece as required.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is referred to as <bpt id="p1">*</bpt>reading a message<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The entire message, including its body, can be copied to an in-memory buffer of the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageBuffer&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is referred to as <bpt id="p1">*</bpt>copying a message<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can access the body of a <ph id="ph1">`Message`</ph> only once, regardless of how it is accessed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A message object has a <ph id="ph1">`State`</ph> property, which is initially set to Created.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The three access methods described in the preceding list set the state to Written, Read, and Copied, respectively.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Additionally, a <ph id="ph1">`Close`</ph> method can set the state to Closed when the message body contents are no longer required.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The message body can be accessed only in the Created state, and there is no way to go back to the Created state after the state has changed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Writing Messages</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> method writes out the body contents of a given <ph id="ph2">`Message`</ph> instance to a given XML writer.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteBody%2A&gt;</ph> method does the same, except that it encloses the body contents in the appropriate wrapper element (for example, &lt;<ph id="ph2">`soap:body`</ph>&gt;).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Finally, <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteMessage%2A&gt;</ph> writes out the entire message, including the wrapping SOAP envelope and the headers.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If SOAP is turned off (<ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.Version&gt;</ph> is <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageVersion.None?displayProperty=nameWithType&gt;</ph>), all three methods do the same thing: they write out the message body contents.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example, the following code writes out the body of an incoming message to a file.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Two additional helper methods write out certain SOAP start element tags.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These methods do not access the message body and so they do not change the message state.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteStartBody%2A&gt;</ph> writes the start body element, for example, <ph id="ph2">`&lt;soap:Body&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteStartEnvelope%2A&gt;</ph> writes the start envelope element, for example, <ph id="ph2">`&lt;soap:Envelope&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To write the corresponding end element tags, call <ph id="ph1">`WriteEndElement`</ph> on the corresponding XML writer.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>These methods are rarely called directly.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Reading Messages</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The primary way to read a message body is to call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You get back an <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> that you can use to read the message body.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> transitions to the Read state as soon as <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents%2A&gt;</ph> is called, and not when you use the returned XML reader.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.GetBody%2A&gt;</ph> method also enables you to access the message body as a typed object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Internally, this method uses <ph id="ph1">`GetReaderAtBodyContents`</ph>, and so it also transitions the message state to the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageState.Read&gt;</ph> state (see the <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message.State%2A&gt;</ph> property).</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It is good practice to check the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.IsEmpty%2A&gt;</ph> property, in which case the message body is empty and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Also, if it is a received message (for example, the reply), you may also want to check <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.IsFault%2A&gt;</ph>, which indicates whether the message contains a fault.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The most basic overload of <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.GetBody%2A&gt;</ph> deserializes the message body into an instance of a type (indicated by the generic parameter) using a <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> configured with the default settings and with the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph%2A&gt;</ph> quota disabled.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you want to use a different serialization engine, or configure the <ph id="ph1">`DataContractSerializer`</ph> in a non-default way, use the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.GetBody%2A&gt;</ph> overload that takes an <ph id="ph3">&lt;xref:System.Runtime.Serialization.XmlObjectSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, the following code extracts data from a message body that contains a serialized <ph id="ph1">`Person`</ph> object and prints out the person’s name.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Copying a Message into a Buffer</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to access the message body more than once, for example, to forward the same message to multiple destinations as part of a publisher-subscriber system.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In this case, it is necessary to buffer the entire message (including the body) in memory.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You can do this by calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.CreateBufferedCopy%28System.Int32%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This method takes an integer parameter that represents the maximum buffer size, and creates a buffer not larger than this size.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It is important to set this to a safe value if the message is coming from an untrusted source.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The buffer is returned as a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageBuffer&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You can access data in the buffer in several ways.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The primary way is to call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.CreateMessage%2A&gt;</ph> to create <ph id="ph2">`Message`</ph> instances from the buffer.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Another way to access the data in the buffer is to implement the <ph id="ph1">&lt;xref:System.Xml.XPath.IXPathNavigable&gt;</ph> interface that the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageBuffer&gt;</ph> class implements to access the underlying XML directly.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageBuffer.CreateNavigator%2A&gt;</ph> overloads allow you to create <ph id="ph2">&lt;xref:System.Xml.XPath&gt;</ph> navigators protected by a node quota, limiting the number of XML nodes that can be visited.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This helps prevent denial of service attacks based on lengthy processing time.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This quote is disabled by default.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">`CreateNavigator`</ph> overloads allow you to specify how white space should be handled in the XML using the <ph id="ph2">&lt;xref:System.Xml.XmlSpace&gt;</ph> enumeration, with the default being <ph id="ph3">`XmlSpace.None`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A final way to access the contents of a message buffer is to write out its contents to a stream using <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteMessage%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the process of working with a <ph id="ph1">`MessageBuffer`</ph>: an incoming message is forwarded to multiple recipients, and then logged to a file.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Without buffering, this is not possible, because the message body can then be accessed only once.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MessageBuffer`</ph> class has other members worth noting.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageBuffer.Close%2A&gt;</ph> method can be called to free resources when the buffer contents are no longer required.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageBuffer.BufferSize%2A&gt;</ph> property returns the size of the allocated buffer.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageBuffer.MessageContentType%2A&gt;</ph> property returns the MIME content type of the message.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Accessing the Message Body for Debugging</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For debugging purposes, you can call the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.ToString%2A&gt;</ph> method to get a representation of the message as a string.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This representation generally matches the way a message would look on the wire if it were encoded with the text encoder, except that the XML would be better formatted for human readability.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The one exception to this is the message body.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The body can be read only once, and <ph id="ph1">`ToString`</ph> does not change the message state.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`ToString`</ph> method might not be able to access the body and might substitute a placeholder (for example, "…" or three dots) instead of the message body.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Therefore, do not use <ph id="ph1">`ToString`</ph> to log messages if the body content of the messages is important.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Accessing Other Message Parts</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Various properties are provided to access information about the message other than its body contents.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, these cannot be called once the message has been closed:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.Headers%2A&gt;</ph> property represents the message headers.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>See the section on "Working with Headers" later in this topic.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.Properties%2A&gt;</ph> property represents the message properties, which are pieces of named data attached to the message that do not generally get emitted when the message is sent.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>See the section on "Working with Properties" later in this topic.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.Version%2A&gt;</ph> property indicates the SOAP and WS-Addressing version associated with the message, or <ph id="ph2">`None`</ph> if SOAP is disabled.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.IsFault%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the message is a SOAP fault message.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.IsEmpty%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the message is empty.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.GetBodyAttribute%28System.String%2CSystem.String%29&gt;</ph> method to access a particular attribute on the body wrapper element (for example, <ph id="ph2">`&lt;soap:Body&gt;`</ph>) identified by a particular name and namespace.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If such an attribute is not found, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method can be called only when the <ph id="ph1">`Message`</ph> is in the Created state (when the message body has not yet been accessed).</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Working with Headers</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Message`</ph> can contain any number of named XML fragments, called <bpt id="p1">*</bpt>headers<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Each fragment normally maps to a SOAP header.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Headers are accessed through the <ph id="ph1">`Headers`</ph> property of type <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph> is a collection of <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageHeaderInfo&gt;</ph> objects, and individual headers can be accessed through its <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface or through its indexer.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example, the following code lists the names of all the headers in a <ph id="ph1">`Message`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Adding, Removing, Finding Headers</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You can add a new header at the end of all existing headers using the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Add%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Insert%2A&gt;</ph> method to insert a header at a particular index.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Existing headers are shifted for the inserted item.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Headers are ordered according to their index, and the first available index is 0.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>You can use the various <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom%2A&gt;</ph> method overloads to add headers from a different <ph id="ph2">`Message`</ph> or <ph id="ph3">`MessageHeaders`</ph> instance.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Some overloads copy one individual header, while others copy all of them.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Clear%2A&gt;</ph> method removes all headers.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.RemoveAt%2A&gt;</ph> method removes a header at a particular index (shifting all headers after it).</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.RemoveAll%2A&gt;</ph> method removes all headers with a particular name and namespace.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Retrieve a particular header using the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.FindHeader%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This method takes the name and namespace of the header to find, and returns its index.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If the header occurs more than once, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If the header is not found, it returns -1.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In the SOAP header model, headers can have an <ph id="ph1">`Actor`</ph> value that specifies the intended recipient of the header.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The most basic <ph id="ph1">`FindHeader`</ph> overload searches only headers intended for the ultimate receiver of the message.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>However, another overload enables you to specify which <ph id="ph1">`Actor`</ph> values are included in the search.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For more information, see the SOAP specification.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.CopyTo%28System.ServiceModel.Channels.MessageHeaderInfo%5B%5D%2CSystem.Int32%29&gt;</ph> method is provided to copy headers from a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph> collection to an array of <ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageHeaderInfo&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>To access the XML data in a header, you can call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.GetReaderAtHeader%2A&gt;</ph> and return an XML reader for the specific header index.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If you want to deserialize the header contents into an object, use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.GetHeader%60%601%28System.Int32%29&gt;</ph> or one of the other overloads.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The most basic overloads deserialize headers using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> configured in the default way.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If you want to use a different serializer or a different configuration of the <ph id="ph1">`DataContractSerializer`</ph>, use one of the overloads that take an <ph id="ph2">`XmlObjectSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>There are also overloads that take the header name, namespace, and optionally a list of <ph id="ph1">`Actor`</ph> values instead of an index; this is a combination of <ph id="ph2">`FindHeader`</ph> and <ph id="ph3">`GetHeader`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Working with Properties</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Message`</ph> instance can contain an arbitrary number of named objects of arbitrary types.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This collection is accessed through the <ph id="ph1">`Properties`</ph> property of type <ph id="ph2">`MessageProperties`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The collection implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface and acts as a mapping from <ph id="ph2">&lt;xref:System.String&gt;</ph> to <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Normally, property values do not map directly to any part of the message on the wire, but rather provide various message processing hints to the various channels in the WCF channel stack or to the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.CopyTo%28System.ServiceModel.Channels.MessageHeaderInfo%5B%5D%2CSystem.Int32%29&gt;</ph> service framework.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Data Transfer Architectural Overview<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-transfer-architectural-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Inheriting from the Message Class</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If the built-in message types created using <ph id="ph1">`CreateMessage`</ph> do not meet your requirements, create a class that derives from the <ph id="ph2">`Message`</ph> class.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Defining the Message Body Contents</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Three primary techniques exist for accessing data within a message body: writing, reading, and copying it to a buffer.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>These operations ultimately result in the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message.OnCreateBufferedCopy%2A&gt;</ph> methods being called, respectively, on your derived class of <ph id="ph4">`Message`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The base <ph id="ph1">`Message`</ph> class guarantees that only one of these methods is called for each <ph id="ph2">`Message`</ph> instance, and that it is not called more than once.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The base class also ensures that the methods are not called on a closed message.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>There is no need to track the message state in your implementation.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%2A&gt;</ph> is an abstract method and must be implemented.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The most basic way to define the body contents of your message is to write using this method.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For example, the following message contains 100,000 random numbers from 1 to 20.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnCreateBufferedCopy%2A&gt;</ph> methods have default implementations that work for most cases.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The default implementations call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%2A&gt;</ph>, buffer the results, and work with the resulting buffer.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>However, in some cases this may not be enough.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In the preceding example, reading the message results in 100,000 XML elements being buffered, which might not be desirable.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You might want to override <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents&gt;</ph> to return a custom <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> derived class that serves up random numbers.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>You can then override <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%2A&gt;</ph> to use the reader that the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents&gt;</ph> method returns, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Similarly, you might want to override <ph id="ph1">`OnCreateBufferedCopy`</ph> to return your own <ph id="ph2">`MessageBuffer`</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In addition to providing message body contents, your message derived class must also override the <ph id="ph1">`Version`</ph>, <ph id="ph2">`Headers`</ph>, and <ph id="ph3">`Properties`</ph> properties.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Note that if you create a copy of a message, the copy uses the message headers from the original.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Other Members that Can Be Overridden</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>You can override the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteStartEnvelope%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnWriteStartHeaders%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message.OnWriteStartBody%2A&gt;</ph> methods to specify how the SOAP envelope, SOAP headers, and SOAP body element start tags are written out. These normally correspond to <ph id="ph4">`&lt;soap:Envelope&gt;`</ph>, <ph id="ph5">`&lt;soap:Header&gt;`</ph>, and <ph id="ph6">`&lt;soap:Body&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>These methods should normally not write anything out if the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.Version&gt;</ph> property returns <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageVersion.None&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`OnGetReaderAtBodyContents`</ph> calls <ph id="ph2">`OnWriteStartEnvelope`</ph> and <ph id="ph3">`OnWriteStartBody`</ph> before calling <ph id="ph4">`OnWriteBodyContents`</ph> and buffering the results.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Headers are not written out.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteMessage%2A&gt;</ph> method to change the way the entire message is constructed from its various pieces.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnWriteMessage`</ph> method is called from <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.WriteMessage%2A&gt;</ph> and from the default <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message.OnCreateBufferedCopy%2A&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Note that overriding <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteMessage%2A&gt;</ph> is not a best practice.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>It is better to override the appropriate <ph id="ph1">`On`</ph> methods (for example, <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnWriteStartEnvelope%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message.OnWriteStartHeaders%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.ServiceModel.Channels.BodyWriter.OnWriteBodyContents%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnBodyToString%2A&gt;</ph> to override how your message body is represented during debugging.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The default is to represent it as three dots ("…").</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Note that this method can be called multiple times when the message state is anything other than Closed.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>An implementation of this method should never cause any action that must be performed only once (such as reading from a forward-only stream).</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnGetBodyAttribute%2A&gt;</ph> method to allow access to attributes on the SOAP body element.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This method can be called any number of times, but the <ph id="ph1">`Message`</ph> base type guarantees that it is only called when the message is in the Created state.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>It is not required to check the state in an implementation.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>, which indicates that there are no attributes on the body element.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">`Message`</ph> object must do any special cleanup when the message body is no longer required, you can override <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnClose%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsEmpty`</ph> and <ph id="ph2">`IsFault`</ph> properties can be overridden.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>By default, both return <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>