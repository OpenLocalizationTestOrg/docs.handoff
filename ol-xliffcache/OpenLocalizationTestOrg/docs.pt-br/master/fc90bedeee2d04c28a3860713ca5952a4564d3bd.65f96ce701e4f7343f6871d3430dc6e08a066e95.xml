{"content":"---\ntitle: \"64-bit Applications\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"applications [C++], 64-bit\"\n  - \"64-bit applications [C++]\"\n  - \"64-bit programming [C++]\"\nms.assetid: fd4026bc-2c3d-4b27-86dc-ec5e96018181\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# 64-bit Applications\nWhen you compile an application, you can specify that it should run on a Windows 64-bit operating system either as a native application or under WOW64 (Windows 32-bit on Windows 64-bit). WOW64 is a compatibility environment that enables a 32-bit application to run on a 64-bit system. WOW64 is included in all 64-bit versions of the Windows operating system.  \n  \n## Running 32-bit vs. 64-bit Applications on Windows  \n All applications that are built on the .NET Framework 1.0 or 1.1 are treated as 32-bit applications on a 64-bit operating system and are always executed under WOW64 and the 32-bit common language runtime (CLR). 32-bit applications that are built on the [!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)] or later versions also run under WOW64 on 64-bit systems.  \n  \n Visual Studio installs the 32-bit version of the CLR on an x86 computer, and both the 32-bit version and the appropriate 64-bit version of the CLR on a 64-bit Windows computer. (Because Visual Studio is a 32-bit application, when it is installed on a 64-bit system, it runs under WOW64.)  \n  \n> [!NOTE]\n>  Because of the design of x86 emulation and the WOW64 subsystem for the Itanium processor family, applications are restricted to execution on one processor. These factors reduce the performance and scalability of 32-bit .NET Framework applications that run on Itanium-based systems. We recommend that you use the [!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)], which includes native 64-bit support for Itanium-based systems, for increased performance and scalability.  \n  \n By default, when you run a 64-bit managed application on a 64-bit Windows operating system, you can create an object of no more than 2 gigabytes (GB). However, in the [!INCLUDE[net_v45](../../includes/net-v45-md.md)], you can increase this limit.  For more information, see the [\\<gcAllowVeryLargeObjects> element](../../docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md).  \n  \n Many assemblies run identically on both the 32-bit CLR and the 64-bit CLR. However, some programs may behave differently, depending on the CLR, if they contain one or more of the following:  \n  \n-   Structures that contain members that change size depending on the platform (for example, any pointer type).  \n  \n-   Pointer arithmetic that includes constant sizes.  \n  \n-   Incorrect platform invoke or COM declarations that use `Int32` for handles instead of `IntPtr`.  \n  \n-   Code that casts `IntPtr` to `Int32`.  \n  \n For more information about how to port a 32-bit application to run on the 64-bit CLR, see [Migrating 32-bit Managed Code to 64-bit](https://docs.microsoft.com/previous-versions/dotnet/articles/ms973190(v=msdn.10)).  \n  \n## General 64-Bit Programming Information  \n For general information about 64-bit programming, see the following documents:  \n  \n-   For more information about the 64-bit version of the CLR on a 64-bit Windows computer, see the [.NET Framework Developer Center](https://go.microsoft.com/fwlink/?LinkId=37079) on the MSDN website.  \n  \n-   In the [!INCLUDE[winsdkshort](../../includes/winsdkshort-md.md)] documentation, see [Programming Guide for 64-bit Windows](https://go.microsoft.com/fwlink/p/?LinkId=253512).  \n  \n-   For information about how to download a 64-bit version of the CLR, see [.NET Framework Developer Center Downloads](https://go.microsoft.com/fwlink/?LinkId=50953) on the MSDN website.  \n  \n-   For information about Visual Studio support for creating 64-bit applications, see [Visual Studio IDE 64-Bit Support](/visualstudio/ide/visual-studio-ide-64-bit-support).  \n  \n## Compiler Support for Creating 64-Bit Applications  \n By default, when you use the .NET Framework to build an application on either a 32-bit or a 64-bit computer, the application will run on a 64-bit computer as a native application (that is, not under WOW64). The following table lists documents that explain how to use Visual Studio compilers to create 64-bit applications that will run as native, under WOW64, or both.  \n  \n|Compiler|Compiler option|  \n|--------------|---------------------|  \n|Visual Basic|[/platform (Visual Basic)](~/docs/visual-basic/reference/command-line-compiler/platform.md)|  \n|Visual C#|[/platform (C# Compiler Options)](~/docs/csharp/language-reference/compiler-options/platform-compiler-option.md)|  \n|Visual C++|You can create platform-agnostic, Microsoft intermediate language (MSIL) applications by using **/clr:safe**. For more information, see [/clr (Common Language Runtime Compilation)](/cpp/build/reference/clr-common-language-runtime-compilation).<br /><br /> Visual C++ includes a separate compiler for each 64-bit operating system. For more information about how to use Visual C++ to create native applications that run on a 64-bit Windows operating system, see [64-bit Programming](/cpp/build/configuring-programs-for-64-bit-visual-cpp).|  \n  \n## Determining the Status of an .exe File or .dll File  \n To determine whether an .exe file or .dll file is meant to run only on a specific platform or under WOW64, use [CorFlags.exe (CorFlags Conversion Tool)](../../docs/framework/tools/corflags-exe-corflags-conversion-tool.md) with no options. You can also use CorFlags.exe to change the platform status of an .exe file or .dll file. The CLR header of a Visual Studio assembly has the major runtime version number set to 2 and the minor runtime version number set to 5. Applications that have the minor runtime version set to 0 are treated as legacy applications and are always executed under WOW64.  \n  \n To programmatically query an .exe or .dll to see whether it is meant to run only on a specific platform or under WOW64, use the <xref:System.Reflection.Module.GetPEKind%2A?displayProperty=nameWithType> method.\n","nodes":[{"pos":[4,261],"embed":true,"restype":"x-metadata","content":"title: \"64-bit Applications\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"applications [C++], 64-bit\"\n  - \"64-bit applications [C++]\"\n  - \"64-bit programming [C++]\"\nms.assetid: fd4026bc-2c3d-4b27-86dc-ec5e96018181\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"64-bit Applications","nodes":[{"pos":[0,19],"content":"64-bit Applications","nodes":[{"content":"64-bit Applications","pos":[0,19]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[268,287],"content":"64-bit Applications","linkify":"64-bit Applications","nodes":[{"content":"64-bit Applications","pos":[0,19]}]},{"content":"When you compile an application, you can specify that it should run on a Windows 64-bit operating system either as a native application or under WOW64 (Windows 32-bit on Windows 64-bit).","pos":[288,474]},{"content":"WOW64 is a compatibility environment that enables a 32-bit application to run on a 64-bit system.","pos":[475,572]},{"content":"WOW64 is included in all 64-bit versions of the Windows operating system.","pos":[573,646]},{"pos":[655,704],"content":"Running 32-bit vs. 64-bit Applications on Windows","linkify":"Running 32-bit vs. 64-bit Applications on Windows","nodes":[{"content":"Running 32-bit vs. 64-bit Applications on Windows","pos":[0,49]}]},{"content":"All applications that are built on the .NET Framework 1.0 or 1.1 are treated as 32-bit applications on a 64-bit operating system and are always executed under WOW64 and the 32-bit common language runtime (CLR).","pos":[708,918]},{"content":"32-bit applications that are built on the <ph id=\"ph1\">[!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)]</ph> or later versions also run under WOW64 on 64-bit systems.","pos":[919,1078],"source":" 32-bit applications that are built on the [!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)] or later versions also run under WOW64 on 64-bit systems."},{"content":"Visual Studio installs the 32-bit version of the CLR on an x86 computer, and both the 32-bit version and the appropriate 64-bit version of the CLR on a 64-bit Windows computer.","pos":[1085,1261]},{"content":"(Because Visual Studio is a 32-bit application, when it is installed on a 64-bit system, it runs under WOW64.)","pos":[1262,1372]},{"pos":[1380,1870],"content":"[!NOTE]\n Because of the design of x86 emulation and the WOW64 subsystem for the Itanium processor family, applications are restricted to execution on one processor. These factors reduce the performance and scalability of 32-bit .NET Framework applications that run on Itanium-based systems. We recommend that you use the [!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)], which includes native 64-bit support for Itanium-based systems, for increased performance and scalability.","leadings":["","> "],"nodes":[{"content":"Because of the design of x86 emulation and the WOW64 subsystem for the Itanium processor family, applications are restricted to execution on one processor. These factors reduce the performance and scalability of 32-bit .NET Framework applications that run on Itanium-based systems. We recommend that you use the [!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)], which includes native 64-bit support for Itanium-based systems, for increased performance and scalability.","pos":[9,488],"nodes":[{"content":"Because of the design of x86 emulation and the WOW64 subsystem for the Itanium processor family, applications are restricted to execution on one processor.","pos":[0,155]},{"content":"These factors reduce the performance and scalability of 32-bit .NET Framework applications that run on Itanium-based systems.","pos":[156,281]},{"content":"We recommend that you use the <ph id=\"ph1\">[!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)]</ph>, which includes native 64-bit support for Itanium-based systems, for increased performance and scalability.","pos":[282,479],"source":" We recommend that you use the [!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)], which includes native 64-bit support for Itanium-based systems, for increased performance and scalability."}]}]},{"content":"By default, when you run a 64-bit managed application on a 64-bit Windows operating system, you can create an object of no more than 2 gigabytes (GB).","pos":[1877,2027]},{"content":"However, in the <ph id=\"ph1\">[!INCLUDE[net_v45](../../includes/net-v45-md.md)]</ph>, you can increase this limit.","pos":[2028,2123],"source":" However, in the [!INCLUDE[net_v45](../../includes/net-v45-md.md)], you can increase this limit."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>gcAllowVeryLargeObjects&gt; element<ept id=\"p1\">](../../docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)</ept>.","pos":[2125,2284],"source":"  For more information, see the [\\<gcAllowVeryLargeObjects> element](../../docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)."},{"content":"Many assemblies run identically on both the 32-bit CLR and the 64-bit CLR.","pos":[2291,2365]},{"content":"However, some programs may behave differently, depending on the CLR, if they contain one or more of the following:","pos":[2366,2480]},{"content":"Structures that contain members that change size depending on the platform (for example, any pointer type).","pos":[2490,2597]},{"content":"Pointer arithmetic that includes constant sizes.","pos":[2607,2655]},{"pos":[2665,2760],"content":"Incorrect platform invoke or COM declarations that use <ph id=\"ph1\">`Int32`</ph> for handles instead of <ph id=\"ph2\">`IntPtr`</ph>.","source":"Incorrect platform invoke or COM declarations that use `Int32` for handles instead of `IntPtr`."},{"pos":[2770,2806],"content":"Code that casts <ph id=\"ph1\">`IntPtr`</ph> to <ph id=\"ph2\">`Int32`</ph>.","source":"Code that casts `IntPtr` to `Int32`."},{"pos":[2813,3027],"content":"For more information about how to port a 32-bit application to run on the 64-bit CLR, see <bpt id=\"p1\">[</bpt>Migrating 32-bit Managed Code to 64-bit<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/articles/ms973190(v=msdn.10))</ept>.","source":"For more information about how to port a 32-bit application to run on the 64-bit CLR, see [Migrating 32-bit Managed Code to 64-bit](https://docs.microsoft.com/previous-versions/dotnet/articles/ms973190(v=msdn.10))."},{"pos":[3036,3074],"content":"General 64-Bit Programming Information","linkify":"General 64-Bit Programming Information","nodes":[{"content":"General 64-Bit Programming Information","pos":[0,38]}]},{"content":"For general information about 64-bit programming, see the following documents:","pos":[3078,3156]},{"pos":[3166,3362],"content":"For more information about the 64-bit version of the CLR on a 64-bit Windows computer, see the <bpt id=\"p1\">[</bpt>.NET Framework Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=37079)</ept> on the MSDN website.","source":"For more information about the 64-bit version of the CLR on a 64-bit Windows computer, see the [.NET Framework Developer Center](https://go.microsoft.com/fwlink/?LinkId=37079) on the MSDN website."},{"pos":[3372,3545],"content":"In the <ph id=\"ph1\">[!INCLUDE[winsdkshort](../../includes/winsdkshort-md.md)]</ph> documentation, see <bpt id=\"p1\">[</bpt>Programming Guide for 64-bit Windows<ept id=\"p1\">](https://go.microsoft.com/fwlink/p/?LinkId=253512)</ept>.","source":"In the [!INCLUDE[winsdkshort](../../includes/winsdkshort-md.md)] documentation, see [Programming Guide for 64-bit Windows](https://go.microsoft.com/fwlink/p/?LinkId=253512)."},{"pos":[3555,3737],"content":"For information about how to download a 64-bit version of the CLR, see <bpt id=\"p1\">[</bpt>.NET Framework Developer Center Downloads<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=50953)</ept> on the MSDN website.","source":"For information about how to download a 64-bit version of the CLR, see [.NET Framework Developer Center Downloads](https://go.microsoft.com/fwlink/?LinkId=50953) on the MSDN website."},{"pos":[3747,3916],"content":"For information about Visual Studio support for creating 64-bit applications, see <bpt id=\"p1\">[</bpt>Visual Studio IDE 64-Bit Support<ept id=\"p1\">](/visualstudio/ide/visual-studio-ide-64-bit-support)</ept>.","source":"For information about Visual Studio support for creating 64-bit applications, see [Visual Studio IDE 64-Bit Support](/visualstudio/ide/visual-studio-ide-64-bit-support)."},{"pos":[3925,3974],"content":"Compiler Support for Creating 64-Bit Applications","linkify":"Compiler Support for Creating 64-Bit Applications","nodes":[{"content":"Compiler Support for Creating 64-Bit Applications","pos":[0,49]}]},{"content":"By default, when you use the .NET Framework to build an application on either a 32-bit or a 64-bit computer, the application will run on a 64-bit computer as a native application (that is, not under WOW64).","pos":[3978,4184]},{"content":"The following table lists documents that explain how to use Visual Studio compilers to create 64-bit applications that will run as native, under WOW64, or both.","pos":[4185,4345]},{"content":"Compiler","pos":[4352,4360]},{"content":"Compiler option","pos":[4361,4376]},{"content":"Visual Basic","pos":[4422,4434]},{"pos":[4435,4526],"content":"<bpt id=\"p1\">[</bpt>/platform (Visual Basic)<ept id=\"p1\">](~/docs/visual-basic/reference/command-line-compiler/platform.md)</ept>","source":"[/platform (Visual Basic)](~/docs/visual-basic/reference/command-line-compiler/platform.md)"},{"content":"Visual C#","pos":[4531,4540]},{"pos":[4541,4653],"content":"<bpt id=\"p1\">[</bpt>/platform (C# Compiler Options)<ept id=\"p1\">](~/docs/csharp/language-reference/compiler-options/platform-compiler-option.md)</ept>","source":"[/platform (C# Compiler Options)](~/docs/csharp/language-reference/compiler-options/platform-compiler-option.md)"},{"content":"Visual C++","pos":[4658,4668]},{"content":"You can create platform-agnostic, Microsoft intermediate language (MSIL) applications by using <bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept>.","pos":[4669,4778],"source":"You can create platform-agnostic, Microsoft intermediate language (MSIL) applications by using **/clr:safe**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/clr (Common Language Runtime Compilation)<ept id=\"p1\">](/cpp/build/reference/clr-common-language-runtime-compilation)</ept>.","pos":[4779,4912],"source":" For more information, see [/clr (Common Language Runtime Compilation)](/cpp/build/reference/clr-common-language-runtime-compilation)."},{"content":"Visual C++ includes a separate compiler for each 64-bit operating system.","pos":[4925,4998]},{"content":"For more information about how to use Visual C++ to create native applications that run on a 64-bit Windows operating system, see <bpt id=\"p1\">[</bpt>64-bit Programming<ept id=\"p1\">](/cpp/build/configuring-programs-for-64-bit-visual-cpp)</ept>.","pos":[4999,5205],"source":" For more information about how to use Visual C++ to create native applications that run on a 64-bit Windows operating system, see [64-bit Programming](/cpp/build/configuring-programs-for-64-bit-visual-cpp)."},{"pos":[5215,5266],"content":"Determining the Status of an .exe File or .dll File","linkify":"Determining the Status of an .exe File or .dll File","nodes":[{"content":"Determining the Status of an .exe File or .dll File","pos":[0,51]}]},{"content":"To determine whether an .exe file or .dll file is meant to run only on a specific platform or under WOW64, use <bpt id=\"p1\">[</bpt>CorFlags.exe (CorFlags Conversion Tool)<ept id=\"p1\">](../../docs/framework/tools/corflags-exe-corflags-conversion-tool.md)</ept> with no options.","pos":[5270,5508],"source":"To determine whether an .exe file or .dll file is meant to run only on a specific platform or under WOW64, use [CorFlags.exe (CorFlags Conversion Tool)](../../docs/framework/tools/corflags-exe-corflags-conversion-tool.md) with no options."},{"content":"You can also use CorFlags.exe to change the platform status of an .exe file or .dll file.","pos":[5509,5598]},{"content":"The CLR header of a Visual Studio assembly has the major runtime version number set to 2 and the minor runtime version number set to 5.","pos":[5599,5734]},{"content":"Applications that have the minor runtime version set to 0 are treated as legacy applications and are always executed under WOW64.","pos":[5735,5864]},{"pos":[5871,6080],"content":"To programmatically query an .exe or .dll to see whether it is meant to run only on a specific platform or under WOW64, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetPEKind%2A?displayProperty=nameWithType&gt;</ph> method.","source":"To programmatically query an .exe or .dll to see whether it is meant to run only on a specific platform or under WOW64, use the <xref:System.Reflection.Module.GetPEKind%2A?displayProperty=nameWithType> method."}]}