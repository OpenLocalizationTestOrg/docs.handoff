{"content":"---\ntitle: \"Modules cannot be generic | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"BC32073\"\n  - \"vbc32073\"\nhelpviewer_keywords: \n  - \"BC32073\"\nms.assetid: 47246e2b-51d4-4a10-a3ac-bc77b44fa2ca\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Modules cannot be generic\nA `Module` statement uses the `Of` keyword to introduce generic type parameters.  \n  \n You can define and use generic classes, structures, interfaces, procedures, and delegates. You cannot define generic modules.  \n  \n **Error ID:** BC32073  \n  \n## To correct this error  \n  \n1.  Remove the `Of` keyword from the `Module` statement.  \n  \n2.  If you want the functionality of a generic module, the closest approximation is a generic class. Use a [Class Statement](../../visual-basic/language-reference/statements/class-statement.md) instead of a `Module` statement.  \n  \n## See Also  \n [Module Statement](../../visual-basic/language-reference/statements/module-statement.md)   \n [Of](../../visual-basic/language-reference/statements/of-clause.md)   \n [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [How to: Define a Class That Can Provide Identical Functionality on Different Data Types](../../visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md)","nodes":[{"pos":[12,54],"content":"Modules cannot be generic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Modules cannot be generic | Microsoft Docs","pos":[0,42]}]},{"pos":[570,595],"content":"Modules cannot be generic","linkify":"Modules cannot be generic","nodes":[{"content":"Modules cannot be generic","pos":[0,25]}]},{"pos":[596,676],"content":"A <ph id=\"ph1\">`Module`</ph> statement uses the <ph id=\"ph2\">`Of`</ph> keyword to introduce generic type parameters.","source":"A `Module` statement uses the `Of` keyword to introduce generic type parameters."},{"content":"You can define and use generic classes, structures, interfaces, procedures, and delegates.","pos":[683,773]},{"content":"You cannot define generic modules.","pos":[774,808]},{"pos":[815,836],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32073","source":"**Error ID:** BC32073"},{"pos":[845,866],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[876,928],"content":"Remove the <ph id=\"ph1\">`Of`</ph> keyword from the <ph id=\"ph2\">`Module`</ph> statement.","source":"Remove the `Of` keyword from the `Module` statement."},{"content":"If you want the functionality of a generic module, the closest approximation is a generic class.","pos":[938,1034]},{"content":"Use a <bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/class-statement.md)</ept> instead of a <ph id=\"ph1\">`Module`</ph> statement.","pos":[1035,1160],"source":" Use a [Class Statement](../../visual-basic/language-reference/statements/class-statement.md) instead of a `Module` statement."},{"pos":[1169,1177],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Module Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/module-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[1181,1270],"source":"[Module Statement](../../visual-basic/language-reference/statements/module-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Of<ept id=\"p1\">](../../visual-basic/language-reference/statements/of-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[1273,1342],"source":" [Of](../../visual-basic/language-reference/statements/of-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[1345,1462],"source":" [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Define a Class That Can Provide Identical Functionality on Different Data Types<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md)</ept>","pos":[1465,1688],"source":" [How to: Define a Class That Can Provide Identical Functionality on Different Data Types](../../visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md)"}]}