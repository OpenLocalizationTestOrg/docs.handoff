{"content":"---\ntitle: \"Mathematical Functions\"\nms.date: \"03/30/2017\"\nms.assetid: b040c7cb-156d-40f2-9152-61065b18148c\n---\n# Mathematical Functions\n\nThe .NET Framework Data Provider for SQL Server (SqlClient) provides math functions that perform calculations on input values that are provided as arguments, and return a numeric value result. These functions are in the SqlServer namespace, which is available when you use SqlClient. A provider's namespace property allows the Entity Framework to discover which prefix is used by this provider for specific constructs, such as types and functions. The following table describes the SqlClient math functions.  \n  \n## ABS(expression)\n\nPerforms the absolute value function.\n\n**Arguments**\n\n`expression`: An `Int32`, `Int64`, `Double`, or `Decimal`.\n\n**Return Value**\n\nThe absolute value of the specified expression.\n\n**Example**\n\n`SqlServer.ABS(-2)`\n\n## ACOS(expression)\n\nReturns the arccosine value of the specified expression.\n\n**Arguments**\n\n`expression`: A `Double`.\n\n**Return Value**\n\nA `Double`.\n\n**Example**\n\n`SqlServer.ACOS(.9)`\n\n## ASIN(expression)\n\nReturns the arcsine value of the specified expression.\n\n**Arguments**\n\n`expression`: A `Double`.\n\n**Return Value**\n\nA `Double`.\n\n**Example**\n\n`SqlServer.ASIN(.9)`\n\n## ATAN(expression)\n\nReturns the arctangent value of the specified numeric expression.\n\n**Arguments**\n\n`expression`: A `Double`.\n\n**Return Value**\n\nA `Double`.\n\n**Example**\n\n`SqlServer.ATAN(9)`\n\n## ATN2(expression, expression)\n\nReturns the angle, in radians, whose tangent is between the two specified numeric expressions.\n\n**Arguments**\n\n`expression`: A `Double`.\n\n**Return Value**\n\nA `Double`.\n\n**Example**\n\n`SqlServer.ATN2(9, 8)`\n \n## CEILING(expression)\n\nConverts the specified expression to the smallest integer that is greater than or equal to it.\n\n**Arguments**\n\n`expression`: An `Int32`, `Int64`, `Double`, or `Decimal`.\n\n**Return Value**\n\nAn `Int32`, `Int64`, `Double`, or `Decimal`.\n\n**Example** \n\n[!code-csharp[DP EntityServices Concepts#SQLSERVER_CEILING](~/samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#sqlserver_ceiling)]\n[!code-sql[DP EntityServices Concepts#SQLSERVER_CEILING](~/samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#sqlserver_ceiling)]\n\n## COS(expression)\n\nCalculates the trigonometric cosine of the specified angle in radians. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** \n\n`SqlServer.COS(45)`\n\n## COT(expression)\n\nCalculates the trigonometric cotangent of the specified angle in radians. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** \n\n`SqlServer.COT(60)`\n  \n## DEGREES(radians)\n\nReturns the corresponding angle in degrees. \n\n**Arguments** \n\n`expression`: An `Int32`, `Int64`, `Double`, or `Decimal`. \n\n**Return Value** \n\nAn `Int32`, `Int64`, `Double`, or `Decimal`. \n\n**Example** \n\n`SqlServer.DEGREES(3.1)`\n\n## EXP(expression)\n\nCalculates the exponential value of a specified numeric expression. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** `SqlServer.EXP(1)`\n\n## FLOOR(expression)\n\nConverts the specified expression to the largest integer less than or equal to it. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** \n\n[!code-csharp[DP EntityServices Concepts#SQLSERVER_FLOOR](~/samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#sqlserver_floor)] \n[!code-sql[DP EntityServices Concepts#SQLSERVER_FLOOR](~/samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#sqlserver_floor)]\n\n## LOG(expression)\n\nCalculates the natural logarithm of the specified `float` expression. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** \n\n`SqlServer.LOG(100)`\n\n## LOG10(expression)\n\nReturns the base-10 logarithm of the specified `Double` expression. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** \n\n`SqlServer.LOG10(100)`\n\n## PI()\n\nReturns the constant value of pi as a `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** \n\n`SqlServer.PI()`\n\n## POWER(numeric_expression, power_expression)\n\nCalculates the value of a specified expression to a specified power.\n\n**Arguments** \n\n|  |  |\n|--|--|\n|`numeric_expression`| An `Int32`, `Int64`, `Double`, or `Decimal`.|\n|`power_expression`| A `Double` that represents the power to which to raise the `numeric_expression`.| \n\n**Return Value** \n\nThe value of the specified `numeric_expression` to the specified `power_expression`. \n\n**Example** \n\n`SqlServer.POWER(2,7)`\n\n## RADIANS(expression)\n\nConverts degrees to radians. \n\n**Arguments** \n\n`expression`: An `Int32`, `Int64`, `Double`, or `Decimal`. \n\n**Return Value** \n\nAn `Int32`, `Int64`, `Double`, or `Decimal`. \n\n**Example** \n\n`SqlServer.RADIANS(360.0)`\n\n## RAND([seed])\n\nReturns a random value from 0 through 1. \n\n**Arguments** \n\nThe seed value as an `Int32`. If the seed is not specified, the SQL Server Database Engine assigns a seed value at random. For a specified seed value, the result returned is always the same.\n\n**Return Value** \n\nA random `Double` value from 0 through 1. \n\n**Example** \n\n`SqlServer.RAND()`\n  \n## ROUND(numeric_expression, length[,function])\n\nReturns a numeric expression, rounded to the specified length or precision. \n\n**Arguments** \n\n|  |  |\n|--|--|\n|`numeric_expression`| An `Int32`, `Int64`, `Double`, or `Decimal`. \n|`length`| An `Int32` that represents the precision to which `numeric_expression` is to be rounded. When `length` is a positive number, `numeric_expression` is rounded to the number of decimal positions specified by `length`. When `length` is a negative number, `numeric_expression` is rounded on the left side of the decimal point, as specified by `length`.|\n|`function` | Optional. An `Int32` that represents the type of operation to perform. When function is omitted or has a value of 0 (default), `numeric_expression` is rounded. When a value other than 0 is specified, `numeric_expression` is truncated. |\n\n**Return Value** \n\nThe value of the specified `numeric_expression` to the specified `power_expression`.\n\n**Example** \n\n`SqlServer.ROUND(748.58, -3)`\n\n## SIGN(expression) \n\nReturns the positive (+1), zero (0), or negative (-1) sign of the specified expression. \n\n**Arguments** \n\n`expression`: `Int32`, `Int64`, `Double`, or `Decimal` \n\n**Return Value** \n\nAn `Int32`, `Int64`, `Double`, or `Decimal`. \n\n**Example** \n\n`SqlServer.SIGN(-10)`\n\n## SIN(expression)\n\nCalculates the trigonometric sine of the specified angle in radians, and returns a `Double` expression. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** `SqlServer.SIN(20)`\n\n## SQRT(expression)\n\nReturns the square root of the specified expression. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** `SqlServer.SQRT(3600)`\n\n## SQUARE(expression)\n\nReturns the square of the specified expression. \n\n**Arguments** \n\n`expression`: A `Double`. \n\n**Return Value** \n\nA `Double`. \n\n**Example** \n\n`SqlServer.SQUARE(25)`\n\n## TAN(expression)\n\nCalculates the tangent of a specified expression.\n\n**Arguments** \n\n`expression`: `Double` \n\n**Return Value** \n\n`Double` \n\n**Example** \n\n`SqlServer.TAN(45.0)`\n  \n## See also\n\nFor more information about the mathematical functions that SqlClient supports, see the documentation for the SQL Server version that you specified in the SqlClient provider manifest:\n\n- **SQL Server 2005:** [Mathematical Functions (Transact-SQL)](https://docs.microsoft.com/previous-versions/sql/sql-server-2005/ms177516(v=sql.90))\n- **SQL Server 2008:** [Mathematical Functions (Transact-SQL)](https://docs.microsoft.com/previous-versions/sql/sql-server-2008/ms177516(v=sql.100))\n- **SQL Server 2012 and later:** [Mathematical Functions (Transact-SQL)](/sql/t-sql/functions/mathematical-functions-transact-sql?view=sql-server-2017)\n\n- [SqlClient for Entity Framework Functions](sqlclient-for-ef-functions.md)\n","nodes":[{"pos":[4,106],"embed":true,"restype":"x-metadata","content":"title: \"Mathematical Functions\"\nms.date: \"03/30/2017\"\nms.assetid: b040c7cb-156d-40f2-9152-61065b18148c","nodes":[{"content":"Mathematical Functions","nodes":[{"pos":[0,22],"content":"Mathematical Functions","nodes":[{"content":"Mathematical Functions","pos":[0,22]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[113,135],"content":"Mathematical Functions","linkify":"Mathematical Functions","nodes":[{"content":"Mathematical Functions","pos":[0,22]}]},{"content":"The .NET Framework Data Provider for SQL Server (SqlClient) provides math functions that perform calculations on input values that are provided as arguments, and return a numeric value result.","pos":[137,329]},{"content":"These functions are in the SqlServer namespace, which is available when you use SqlClient.","pos":[330,420]},{"content":"A provider's namespace property allows the Entity Framework to discover which prefix is used by this provider for specific constructs, such as types and functions.","pos":[421,584]},{"content":"The following table describes the SqlClient math functions.","pos":[585,644]},{"pos":[653,668],"content":"ABS(expression)","linkify":"ABS(expression)","nodes":[{"content":"ABS(expression)","pos":[0,15]}]},{"content":"Performs the absolute value function.","pos":[670,707]},{"pos":[709,722],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[724,782],"content":"<ph id=\"ph1\">`expression`</ph>: An <ph id=\"ph2\">`Int32`</ph>, <ph id=\"ph3\">`Int64`</ph>, <ph id=\"ph4\">`Double`</ph>, or <ph id=\"ph5\">`Decimal`</ph>.","source":"`expression`: An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[784,800],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"content":"The absolute value of the specified expression.","pos":[802,849]},{"pos":[851,862],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[888,904],"content":"ACOS(expression)","linkify":"ACOS(expression)","nodes":[{"content":"ACOS(expression)","pos":[0,16]}]},{"content":"Returns the arccosine value of the specified expression.","pos":[906,962]},{"pos":[964,977],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[979,1004],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[1006,1022],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[1024,1035],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[1037,1048],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[1075,1091],"content":"ASIN(expression)","linkify":"ASIN(expression)","nodes":[{"content":"ASIN(expression)","pos":[0,16]}]},{"content":"Returns the arcsine value of the specified expression.","pos":[1093,1147]},{"pos":[1149,1162],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[1164,1189],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[1191,1207],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[1209,1220],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[1222,1233],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[1260,1276],"content":"ATAN(expression)","linkify":"ATAN(expression)","nodes":[{"content":"ATAN(expression)","pos":[0,16]}]},{"content":"Returns the arctangent value of the specified numeric expression.","pos":[1278,1343]},{"pos":[1345,1358],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[1360,1385],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[1387,1403],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[1405,1416],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[1418,1429],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[1455,1483],"content":"ATN2(expression, expression)","linkify":"ATN2(expression, expression)","nodes":[{"content":"ATN2(expression, expression)","pos":[0,28]}]},{"content":"Returns the angle, in radians, whose tangent is between the two specified numeric expressions.","pos":[1485,1579]},{"pos":[1581,1594],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[1596,1621],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[1623,1639],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[1641,1652],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[1654,1665],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[1695,1714],"content":"CEILING(expression)","linkify":"CEILING(expression)","nodes":[{"content":"CEILING(expression)","pos":[0,19]}]},{"content":"Converts the specified expression to the smallest integer that is greater than or equal to it.","pos":[1716,1810]},{"pos":[1812,1825],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[1827,1885],"content":"<ph id=\"ph1\">`expression`</ph>: An <ph id=\"ph2\">`Int32`</ph>, <ph id=\"ph3\">`Int64`</ph>, <ph id=\"ph4\">`Double`</ph>, or <ph id=\"ph5\">`Decimal`</ph>.","source":"`expression`: An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[1887,1903],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[1905,1949],"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`Decimal`</ph>.","source":"An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[1951,1962],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[2299,2314],"content":"COS(expression)","linkify":"COS(expression)","nodes":[{"content":"COS(expression)","pos":[0,15]}]},{"content":"Calculates the trigonometric cosine of the specified angle in radians.","pos":[2316,2386]},{"pos":[2389,2402],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[2405,2430],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[2433,2449],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[2452,2463],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[2466,2477],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[2504,2519],"content":"COT(expression)","linkify":"COT(expression)","nodes":[{"content":"COT(expression)","pos":[0,15]}]},{"content":"Calculates the trigonometric cotangent of the specified angle in radians.","pos":[2521,2594]},{"pos":[2597,2610],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[2613,2638],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[2641,2657],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[2660,2671],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[2674,2685],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[2714,2730],"content":"DEGREES(radians)","linkify":"DEGREES(radians)","nodes":[{"content":"DEGREES(radians)","pos":[0,16]}]},{"content":"Returns the corresponding angle in degrees.","pos":[2732,2775]},{"pos":[2778,2791],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[2794,2852],"content":"<ph id=\"ph1\">`expression`</ph>: An <ph id=\"ph2\">`Int32`</ph>, <ph id=\"ph3\">`Int64`</ph>, <ph id=\"ph4\">`Double`</ph>, or <ph id=\"ph5\">`Decimal`</ph>.","source":"`expression`: An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[2855,2871],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[2874,2918],"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`Decimal`</ph>.","source":"An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[2921,2932],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[2964,2979],"content":"EXP(expression)","linkify":"EXP(expression)","nodes":[{"content":"EXP(expression)","pos":[0,15]}]},{"content":"Calculates the exponential value of a specified numeric expression.","pos":[2981,3048]},{"pos":[3051,3064],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[3067,3092],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[3095,3111],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[3114,3125],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[3128,3158],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept> <ph id=\"ph1\">`SqlServer.EXP(1)`</ph>","source":"**Example** `SqlServer.EXP(1)`"},{"pos":[3163,3180],"content":"FLOOR(expression)","linkify":"FLOOR(expression)","nodes":[{"content":"FLOOR(expression)","pos":[0,17]}]},{"content":"Converts the specified expression to the largest integer less than or equal to it.","pos":[3182,3264]},{"pos":[3267,3280],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[3283,3308],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[3311,3327],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[3330,3341],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[3344,3355],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[3685,3700],"content":"LOG(expression)","linkify":"LOG(expression)","nodes":[{"content":"LOG(expression)","pos":[0,15]}]},{"pos":[3702,3771],"content":"Calculates the natural logarithm of the specified <ph id=\"ph1\">`float`</ph> expression.","source":"Calculates the natural logarithm of the specified `float` expression."},{"pos":[3774,3787],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[3790,3815],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[3818,3834],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[3837,3848],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[3851,3862],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[3890,3907],"content":"LOG10(expression)","linkify":"LOG10(expression)","nodes":[{"content":"LOG10(expression)","pos":[0,17]}]},{"pos":[3909,3976],"content":"Returns the base-10 logarithm of the specified <ph id=\"ph1\">`Double`</ph> expression.","source":"Returns the base-10 logarithm of the specified `Double` expression."},{"pos":[3979,3992],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[3995,4020],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[4023,4039],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[4042,4053],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[4056,4067],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[4097,4101],"content":"PI()","linkify":"PI()","nodes":[{"content":"PI()","pos":[0,4]}]},{"pos":[4103,4150],"content":"Returns the constant value of pi as a <ph id=\"ph1\">`Double`</ph>.","source":"Returns the constant value of pi as a `Double`."},{"pos":[4153,4169],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[4172,4183],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[4186,4197],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[4221,4264],"content":"POWER(numeric_expression, power_expression)","linkify":"POWER(numeric_expression, power_expression)","nodes":[{"content":"POWER(numeric_expression, power_expression)","pos":[0,43]}]},{"content":"Calculates the value of a specified expression to a specified power.","pos":[4266,4334]},{"pos":[4336,4349],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[4391,4435],"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`Decimal`</ph>.","source":"An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[4458,4538],"content":"A <ph id=\"ph1\">`Double`</ph> that represents the power to which to raise the <ph id=\"ph2\">`numeric_expression`</ph>.","source":"A `Double` that represents the power to which to raise the `numeric_expression`."},{"pos":[4542,4558],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[4561,4645],"content":"The value of the specified <ph id=\"ph1\">`numeric_expression`</ph> to the specified <ph id=\"ph2\">`power_expression`</ph>.","source":"The value of the specified `numeric_expression` to the specified `power_expression`."},{"pos":[4648,4659],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[4689,4708],"content":"RADIANS(expression)","linkify":"RADIANS(expression)","nodes":[{"content":"RADIANS(expression)","pos":[0,19]}]},{"content":"Converts degrees to radians.","pos":[4710,4738]},{"pos":[4741,4754],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[4757,4815],"content":"<ph id=\"ph1\">`expression`</ph>: An <ph id=\"ph2\">`Int32`</ph>, <ph id=\"ph3\">`Int64`</ph>, <ph id=\"ph4\">`Double`</ph>, or <ph id=\"ph5\">`Decimal`</ph>.","source":"`expression`: An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[4818,4834],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[4837,4881],"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`Decimal`</ph>.","source":"An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[4884,4895],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[4929,4941],"content":"RAND([seed])","linkify":"RAND([seed])","nodes":[{"content":"RAND([seed])","pos":[0,12]}]},{"content":"Returns a random value from 0 through 1.","pos":[4943,4983]},{"pos":[4986,4999],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"content":"The seed value as an <ph id=\"ph1\">`Int32`</ph>.","pos":[5002,5031],"source":"The seed value as an `Int32`."},{"content":"If the seed is not specified, the SQL Server Database Engine assigns a seed value at random.","pos":[5032,5124]},{"content":"For a specified seed value, the result returned is always the same.","pos":[5125,5192]},{"pos":[5194,5210],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[5213,5254],"content":"A random <ph id=\"ph1\">`Double`</ph> value from 0 through 1.","source":"A random `Double` value from 0 through 1."},{"pos":[5257,5268],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[5296,5340],"content":"ROUND(numeric_expression, length[,function])","linkify":"ROUND(numeric_expression, length[,function])","nodes":[{"content":"ROUND(numeric_expression, length[,function])","pos":[0,44]}]},{"content":"Returns a numeric expression, rounded to the specified length or precision.","pos":[5342,5417]},{"pos":[5420,5433],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[5475,5519],"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`Decimal`</ph>.","source":"An `Int32`, `Int64`, `Double`, or `Decimal`."},{"content":"An <ph id=\"ph1\">`Int32`</ph> that represents the precision to which <ph id=\"ph2\">`numeric_expression`</ph> is to be rounded.","pos":[5532,5620],"source":"An `Int32` that represents the precision to which `numeric_expression` is to be rounded."},{"content":"When <ph id=\"ph1\">`length`</ph> is a positive number, <ph id=\"ph2\">`numeric_expression`</ph> is rounded to the number of decimal positions specified by <ph id=\"ph3\">`length`</ph>.","pos":[5621,5746],"source":" When `length` is a positive number, `numeric_expression` is rounded to the number of decimal positions specified by `length`."},{"content":"When <ph id=\"ph1\">`length`</ph> is a negative number, <ph id=\"ph2\">`numeric_expression`</ph> is rounded on the left side of the decimal point, as specified by <ph id=\"ph3\">`length`</ph>.","pos":[5747,5879],"source":" When `length` is a negative number, `numeric_expression` is rounded on the left side of the decimal point, as specified by `length`."},{"content":"Optional.","pos":[5895,5904]},{"content":"An <ph id=\"ph1\">`Int32`</ph> that represents the type of operation to perform.","pos":[5905,5965],"source":" An `Int32` that represents the type of operation to perform."},{"content":"When function is omitted or has a value of 0 (default), <ph id=\"ph1\">`numeric_expression`</ph> is rounded.","pos":[5966,6054],"source":" When function is omitted or has a value of 0 (default), `numeric_expression` is rounded."},{"content":"When a value other than 0 is specified, <ph id=\"ph1\">`numeric_expression`</ph> is truncated.","pos":[6055,6129],"source":" When a value other than 0 is specified, `numeric_expression` is truncated."},{"pos":[6133,6149],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[6152,6236],"content":"The value of the specified <ph id=\"ph1\">`numeric_expression`</ph> to the specified <ph id=\"ph2\">`power_expression`</ph>.","source":"The value of the specified `numeric_expression` to the specified `power_expression`."},{"pos":[6238,6249],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[6286,6302],"content":"SIGN(expression)","linkify":"SIGN(expression)","nodes":[{"content":"SIGN(expression)","pos":[0,16]}]},{"content":"Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.","pos":[6305,6392]},{"pos":[6395,6408],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[6411,6465],"content":"<ph id=\"ph1\">`expression`</ph>: <ph id=\"ph2\">`Int32`</ph>, <ph id=\"ph3\">`Int64`</ph>, <ph id=\"ph4\">`Double`</ph>, or <ph id=\"ph5\">`Decimal`</ph>","source":"`expression`: `Int32`, `Int64`, `Double`, or `Decimal`"},{"pos":[6468,6484],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[6487,6531],"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, or <ph id=\"ph4\">`Decimal`</ph>.","source":"An `Int32`, `Int64`, `Double`, or `Decimal`."},{"pos":[6534,6545],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[6574,6589],"content":"SIN(expression)","linkify":"SIN(expression)","nodes":[{"content":"SIN(expression)","pos":[0,15]}]},{"pos":[6591,6694],"content":"Calculates the trigonometric sine of the specified angle in radians, and returns a <ph id=\"ph1\">`Double`</ph> expression.","source":"Calculates the trigonometric sine of the specified angle in radians, and returns a `Double` expression."},{"pos":[6697,6710],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[6713,6738],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[6741,6757],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[6760,6771],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[6774,6805],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept> <ph id=\"ph1\">`SqlServer.SIN(20)`</ph>","source":"**Example** `SqlServer.SIN(20)`"},{"pos":[6810,6826],"content":"SQRT(expression)","linkify":"SQRT(expression)","nodes":[{"content":"SQRT(expression)","pos":[0,16]}]},{"content":"Returns the square root of the specified expression.","pos":[6828,6880]},{"pos":[6883,6896],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[6899,6924],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[6927,6943],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[6946,6957],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[6960,6994],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept> <ph id=\"ph1\">`SqlServer.SQRT(3600)`</ph>","source":"**Example** `SqlServer.SQRT(3600)`"},{"pos":[6999,7017],"content":"SQUARE(expression)","linkify":"SQUARE(expression)","nodes":[{"content":"SQUARE(expression)","pos":[0,18]}]},{"content":"Returns the square of the specified expression.","pos":[7019,7066]},{"pos":[7069,7082],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[7085,7110],"content":"<ph id=\"ph1\">`expression`</ph>: A <ph id=\"ph2\">`Double`</ph>.","source":"`expression`: A `Double`."},{"pos":[7113,7129],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[7132,7143],"content":"A <ph id=\"ph1\">`Double`</ph>.","source":"A `Double`."},{"pos":[7146,7157],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[7187,7202],"content":"TAN(expression)","linkify":"TAN(expression)","nodes":[{"content":"TAN(expression)","pos":[0,15]}]},{"content":"Calculates the tangent of a specified expression.","pos":[7204,7253]},{"pos":[7255,7268],"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","source":"**Arguments**"},{"pos":[7271,7293],"content":"<ph id=\"ph1\">`expression`</ph>: <ph id=\"ph2\">`Double`</ph>","source":"`expression`: `Double`"},{"pos":[7296,7312],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[7326,7337],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[7368,7376],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"For more information about the mathematical functions that SqlClient supports, see the documentation for the SQL Server version that you specified in the SqlClient provider manifest:","pos":[7378,7560]},{"pos":[7564,7709],"content":"<bpt id=\"p1\">**</bpt>SQL Server 2005:<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt>Mathematical Functions (Transact-SQL)<ept id=\"p2\">](https://docs.microsoft.com/previous-versions/sql/sql-server-2005/ms177516(v=sql.90))</ept>","source":"**SQL Server 2005:** [Mathematical Functions (Transact-SQL)](https://docs.microsoft.com/previous-versions/sql/sql-server-2005/ms177516(v=sql.90))"},{"pos":[7712,7858],"content":"<bpt id=\"p1\">**</bpt>SQL Server 2008:<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt>Mathematical Functions (Transact-SQL)<ept id=\"p2\">](https://docs.microsoft.com/previous-versions/sql/sql-server-2008/ms177516(v=sql.100))</ept>","source":"**SQL Server 2008:** [Mathematical Functions (Transact-SQL)](https://docs.microsoft.com/previous-versions/sql/sql-server-2008/ms177516(v=sql.100))"},{"pos":[7861,8010],"content":"<bpt id=\"p1\">**</bpt>SQL Server 2012 and later:<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt>Mathematical Functions (Transact-SQL)<ept id=\"p2\">](/sql/t-sql/functions/mathematical-functions-transact-sql?view=sql-server-2017)</ept>","source":"**SQL Server 2012 and later:** [Mathematical Functions (Transact-SQL)](/sql/t-sql/functions/mathematical-functions-transact-sql?view=sql-server-2017)"},{"pos":[8014,8087],"content":"<bpt id=\"p1\">[</bpt>SqlClient for Entity Framework Functions<ept id=\"p1\">](sqlclient-for-ef-functions.md)</ept>","source":"[SqlClient for Entity Framework Functions](sqlclient-for-ef-functions.md)"}]}