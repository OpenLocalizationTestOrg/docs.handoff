<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="unsupported-scenarios.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8011f84ad1296c3e7aa70cb8ef6bf58bc140cbb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\unsupported-scenarios.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d8a4256a414e5b06dc8b75ce3dbd25657f05aef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf269a00b7c75689e9ff5a9548cf85e87922549a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Unsupported Scenarios | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unsupported Scenarios</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For various reasons, <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> does not support some specific security scenarios.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph> Home Edition does not implement the SSPI or Kerberos authentication protocols, and therefore <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not support running a service with Windows authentication on that platform.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Other authentication mechanisms, such as username/password and HTTP/HTTPS integrated authentication are supported when running <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> under Windows XP Home Edition.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Impersonation Scenarios</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Impersonated Identity Might Not Flow When Clients Make Asynchronous Calls</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When a WCF client makes asynchronous calls to a WCF service using Windows authentication under impersonation, authentication might occur with the identity of the client process instead of the impersonated identity.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows XP and Secure Context Token Cookie Enabled</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>does not support impersonation and an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when the following conditions exist:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The operating system is <ph id="ph1">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The authentication mode results in a Windows identity.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> is set to <ph id="ph3">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A state-based security context token (SCT) is created (by default, creation is disabled).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The state-based SCT can only be created using a custom binding.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: Create a Security Context Token for a Secure Session<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-security-context-token-for-a-secure-session.md)</ept>.) In code, the token is enabled by creating a security binding element (either <ph id="ph2">&lt;xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Channels.AsymmetricSecurityBindingElement&gt;</ph>) using the <ph id="ph4">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationBindingElement%28System.Boolean%29?displayProperty=fullName&gt;</ph> or the <ph id="ph5">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%28System.ServiceModel.Channels.SecurityBindingElement%2CSystem.Boolean%29?displayProperty=fullName&gt;</ph> method and setting the <ph id="ph6">`requireCancellation`</ph> parameter to <ph id="ph7">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The parameter refers to the caching of the SCT.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Setting the value to <ph id="ph1">`false`</ph> enables the state-based SCT feature.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Alternatively, in configuration, the token is enabled by creating a &lt;<ph id="ph1">`customBinding`</ph>&gt;, then adding a &lt;<ph id="ph2">`security`</ph>&gt; element, and setting the <ph id="ph3">`authenticationMode`</ph> attribute to SecureConversation and the <ph id="ph4">`requireSecurityContextCancellation`</ph> attribute to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The preceding requirements are specific.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosBindingElement%2A&gt;</ph> creates a binding element that results in a Windows identity, but does not establish an SCT.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Therefore, you can use it with the <ph id="ph1">`Required`</ph> option on <ph id="ph2">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Possible ASP.NET Conflict</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> can both enable or disable impersonation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> hosts an <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> application, a conflict may exist between the <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> and <ph id="ph4">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> configuration settings.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In case of conflict, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> setting takes precedence, unless the <ph id="ph2">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph>, in which case the <ph id="ph4">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> impersonation setting takes precedence.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Assembly Loads May Fail Under Impersonation</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the impersonated context does not have access rights to load an assembly and if it is the first time the common language runtime (CLR) is attempting to load the assembly for that AppDomain, the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> caches the failure.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Subsequent attempts to load that assembly (or assemblies) fail, even after reverting the impersonation, and even if the reverted context has access rights to load the assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is because the CLR does not re-attempt the load after the user context is changed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You must restart the application domain to recover from the failure.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The default value for the <ph id="ph1">&lt;xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.Security.WindowsClientCredential&gt;</ph> class is <ph id="ph3">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In most cases, an identification-level impersonation context has no rights to load any additional assemblies.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is the default value, so this is a very common condition to be aware of.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Identification-level impersonation also occurs when the impersonating process does not have the <ph id="ph1">`SeImpersonate`</ph> privilege.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Delegation and Impersonation<ept id="p1">](../../../../docs/framework/wcf/feature-details/delegation-and-impersonation-with-wcf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Delegation Requires Credential Negotiation</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To use the Kerberos authentication protocol with delegation, you must implement the Kerberos protocol with credential negotiation (sometimes called multi-leg or multi-step Kerberos).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you implement Kerberos authentication without credential negotiation (sometimes called one-shot or single-leg Kerberos), an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> how to implement credential negotiation, see <bpt id="p1">[</bpt>Debugging Windows Authentication Errors<ept id="p1">](../../../../docs/framework/wcf/feature-details/debugging-windows-authentication-errors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Cryptography</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>SHA-256 Supported Only for Symmetric Key Usages</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>supports a variety of encryption and signature digest creation algorithms that you can specify using the algorithm suite in the system-provided bindings.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For improved security, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports Secure Hash Algorithm (SHA) 2 algorithms, specifically SHA-256, for creating signature digest hashes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This release supports SHA-256 only for symmetric key usages, such as Kerberos keys, and where an X.509 certificate is not used to sign the message.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not support RSA signatures (used in X.509 certificates) using SHA-256 hash due to the current lack of support for RSA-SHA256 in the <ph id="ph2">[!INCLUDE[vstecwinfx](../../../../includes/vstecwinfx-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>FIPS-Compliant SHA-256 Hashes not Supported</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>does not support SHA-256 FIPS-compliant hashes, so algorithm suites that use SHA-256 are not supported by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> on systems where use of FIPS compliant algorithms is required.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>FIPS-Compliant Algorithms May Fail if Registry Is Edited</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can enable and disable Federal Information Processing Standards (FIPS)-compliant algorithms by using the Local Security Settings Microsoft Management Console (MMC) snap-in.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can also access the setting in the registry.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Note, however, that <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not support using the registry to reset the setting.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the value is set to anything other than 1 or 0, inconsistent results can occur between the CLR and the operating system.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>FIPS-Compliant AES Encryption Limitation</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>FIPS compliant AES encryption does not work in duplex callbacks under identification level impersonation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CNG/KSP Certificates</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Cryptography API: Next Generation (CNG)<ept id="p1">*</ept> is the long-term replacement for the CryptoAPI.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This API is available in unmanaged code on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>,  <ph id="ph2">[!INCLUDE[lserver](../../../../includes/lserver-md.md)]</ph> and later Windows versions.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>.NET Framework 4.6.1 and earlier versions do not support these certificates because they use the legacy CryptoAPI to handle CNG/KSP certificates.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The use of these certificates with   .NET Framework 4.6.1 and earlier versions will cause an exception.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>There are two possible ways to tell if a certificate uses KSP:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Do a <ph id="ph1">`p/invoke`</ph> of <ph id="ph2">`CertGetCertificateContextProperty`</ph>, and inspect <ph id="ph3">`dwProvType`</ph> on the returned <ph id="ph4">`CertGetCertificateContextProperty`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Use the  <ph id="ph1">`certutil`</ph> command from the command line for querying certificates.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Certutil tasks for troubleshooting certificates<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=120056)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Message Security Fails if Using ASP.NET Impersonation and ASP.NET Compatibility Is Required</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>does not support the following combination of settings because they can prevent client authentication from occurring:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Impersonation is enabled.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is done in the Web.config file by setting the <ph id="ph1">`impersonate`</ph> attribute of the &lt;<ph id="ph2">`identity`</ph>&gt; element to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>compatibility mode is enabled by setting the <ph id="ph1">`aspNetCompatibilityEnabled`</ph> attribute of the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>serviceHostingEnvironment&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicehostingenvironment.md)</ept> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Message mode security is used.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The work-around is to turn off the <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> compatibility mode.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Or, if the <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> compatibility mode is required, disable the <ph id="ph2">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> impersonation feature and use <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>-provided impersonation instead.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Delegation and Impersonation<ept id="p1">](../../../../docs/framework/wcf/feature-details/delegation-and-impersonation-with-wcf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>IPv6 Literal Address Failure</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Security requests fail when the client and service are on the same machine, and IPv6 literal addresses are used for the service.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Literal IPv6 addresses work if the service and client are on different machines.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>WSDL Retrieval Failures with Federated Trust</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>requires exactly one WSDL document for each node in the federated trust chain.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Be careful not to set up a loop when specifying endpoints.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One way in which loops can arise is using a WSDL download of federated trust chains with two or more links in the same WSDL document.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A common scenario that can produce this problem is a federated service where the Security Token Server and the service are contained inside the same ServiceHost.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An example of this situation is a service with the following three endpoint addresses:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>http://localhost/CalculatorService/service (the service)</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>http://localhost/CalculatorService/issue_ticket (the STS)</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>http://localhost/CalculatorService/mex (the metadata endpoint)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This throws an exception.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can make this scenario work by putting the <ph id="ph1">`issue_ticket`</ph> endpoint elsewhere.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>WSDL Import Attributes can be Lost</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>WCF loses track of the attributes on a <ph id="ph1">`&lt;wst:Claims&gt;`</ph> element in an <ph id="ph2">`RST`</ph> template when doing a WSDL import.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This happens during a WSDL import if you specify <ph id="ph1">`&lt;Claims&gt;`</ph> directly in <ph id="ph2">`WSFederationHttpBinding.Security.Message.TokenRequestParameters`</ph> or <ph id="ph3">`IssuedSecurityTokenRequestParameters.AdditionalRequestParameters`</ph> instead of using the claim type collections directly.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Since the import loses the attributes, the binding does not round trip properly through WSDL and hence is incorrect on the client side.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The fix is to modify the binding directly on the client after doing the import.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-in-wcf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Information Disclosure<ept id="p1">](../../../../docs/framework/wcf/feature-details/information-disclosure.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Elevation of Privilege<ept id="p1">](../../../../docs/framework/wcf/feature-details/elevation-of-privilege.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Denial of Service<ept id="p1">](../../../../docs/framework/wcf/feature-details/denial-of-service.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tampering<ept id="p1">](../../../../docs/framework/wcf/feature-details/tampering.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Replay Attacks<ept id="p1">](../../../../docs/framework/wcf/feature-details/replay-attacks.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>