<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-using-batchblock-and-batchedjoinblock-to-improve-efficiency.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0367b4224b49377d8d17045e044976e1c511a8ed</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\walkthrough-using-batchblock-and-batchedjoinblock-to-improve-efficiency.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9799aadabddb9b347e41d126e01c356e9ba36b4e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f316d4b0cb308c9305741efa9ddb4459dc4c96d7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Using BatchBlock and BatchedJoinBlock to Improve Efficiency</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Using BatchBlock and BatchedJoinBlock to Improve Efficiency</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The TPL Dataflow Library provides the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BatchBlock%601?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.BatchedJoinBlock%602?displayProperty=nameWithType&gt;</ph> classes so that you can receive and buffer data from one or more sources and then propagate out that buffered data as one collection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This batching mechanism is useful when you collect data from one or more sources and then process multiple data elements as a batch.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, consider an application that uses dataflow to insert records into a database.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This operation can be more efficient if multiple items are inserted at the same time instead of one at a time sequentially.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This document describes how to use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BatchBlock%601&gt;</ph> class to improve the efficiency of such database insert operations.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It also describes how to use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BatchedJoinBlock%602&gt;</ph> class to capture both the results and any exceptions that occur when the program reads from a database.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Read the Join Blocks section in the <bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept> document before you start this walkthrough.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Ensure that you have a copy of the Northwind database, Northwind.sdf, available on your computer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This file is typically located in the folder %Program Files%\Microsoft SQL Server Compact Edition\v3.5\Samples<ph id="ph1">\\</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In some versions of Windows, you cannot connect to Northwind.sdf if Visual Studio is running in a non-administrator mode.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To connect to Northwind.sdf, start Visual Studio or a Developer Command Prompt for Visual Studio in the <bpt id="p1">**</bpt>Run as administrator<ept id="p1">**</ept> mode.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This walkthrough contains the following sections:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating the Console Application<ept id="p1">](#creating)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Defining the Employee Class<ept id="p1">](#employeeClass)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Defining Employee Database Operations<ept id="p1">](#operations)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Adding Employee Data to the Database without Using Buffering<ept id="p1">](#nonBuffering)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Buffering to Add Employee Data to the Database<ept id="p1">](#buffering)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Buffered Join to Read Employee Data from the Database<ept id="p1">](#bufferedJoin)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The Complete Example<ept id="p1">](#complete)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creating the Console Application</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In Visual Studio, create a Visual C# or Visual Basic <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> project.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this document, the project is named <ph id="ph1">`DataflowBatchDatabase`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In your project, add a reference to System.Data.SqlServerCe.dll and a reference to System.Threading.Tasks.Dataflow.dll.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Ensure that Form1.cs (Form1.vb for Visual Basic) contains the following <ph id="ph1">`using`</ph> (<ph id="ph2">`Imports`</ph> in Visual Basic) statements.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Add the following data members to the <ph id="ph1">`Program`</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Defining the Employee Class</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Add to the <ph id="ph1">`Program`</ph> class the <ph id="ph2">`Employee`</ph> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Employee`</ph> class contains three properties, <ph id="ph2">`EmployeeID`</ph>, <ph id="ph3">`LastName`</ph>, and <ph id="ph4">`FirstName`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These properties correspond to the <ph id="ph1">`Employee ID`</ph>, <ph id="ph2">`Last Name`</ph>, and <ph id="ph3">`First Name`</ph> columns in the <ph id="ph4">`Employees`</ph> table in the Northwind database.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For this demonstration, the <ph id="ph1">`Employee`</ph> class also defines the <ph id="ph2">`Random`</ph> method, which creates an <ph id="ph3">`Employee`</ph> object that has random values for its properties.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Defining Employee Database Operations</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add to the <ph id="ph1">`Program`</ph> class the <ph id="ph2">`InsertEmployees`</ph>, <ph id="ph3">`GetEmployeeCount`</ph>, and <ph id="ph4">`GetEmployeeID`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InsertEmployees`</ph> method adds new employee records to the database.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetEmployeeCount`</ph> method retrieves the number of entries in the <ph id="ph2">`Employees`</ph> table.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetEmployeeID`</ph> method retrieves the identifier of the first employee that has the provided name.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Each of these methods takes a connection string to the Northwind database and uses functionality in the <ph id="ph1">`System.Data.SqlServerCe`</ph> namespace to communicate with the database.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Adding Employee Data to the Database Without Using Buffering</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Add to the <ph id="ph1">`Program`</ph> class the <ph id="ph2">`AddEmployees`</ph> and <ph id="ph3">`PostRandomEmployees`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddEmployees`</ph> method adds random employee data to the database by using dataflow.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It creates an <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object that calls the <ph id="ph2">`InsertEmployees`</ph> method to add an employee entry to the database.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddEmployees`</ph> method then calls the <ph id="ph2">`PostRandomEmployees`</ph> method to post multiple <ph id="ph3">`Employee`</ph> objects to the <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddEmployees`</ph> method then waits for all insert operations to finish.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Using Buffering to Add Employee Data to the Database</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add to the <ph id="ph1">`Program`</ph> class the <ph id="ph2">`AddEmployeesBatched`</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This method resembles <ph id="ph1">`AddEmployees`</ph>, except that it also uses the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.BatchBlock%601&gt;</ph> class to buffer multiple <ph id="ph3">`Employee`</ph> objects before it sends those objects to the <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BatchBlock%601&gt;</ph> class propagates out multiple elements as a collection, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object is modified to act on an array of <ph id="ph3">`Employee`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As in the <ph id="ph1">`AddEmployees`</ph> method, <ph id="ph2">`AddEmployeesBatched`</ph> calls the <ph id="ph3">`PostRandomEmployees`</ph> method to post multiple <ph id="ph4">`Employee`</ph> objects; however, <ph id="ph5">`AddEmployeesBatched`</ph> posts these objects to the <ph id="ph6">&lt;xref:System.Threading.Tasks.Dataflow.BatchBlock%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddEmployeesBatched`</ph>  method also waits for all insert operations to finish.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Using Buffered Join to Read Employee Data from the Database</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add to the <ph id="ph1">`Program`</ph> class the <ph id="ph2">`GetRandomEmployees`</ph> method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This method prints information about random employees to the console.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It creates several random <ph id="ph1">`Employee`</ph> objects and calls the <ph id="ph2">`GetEmployeeID`</ph> method to retrieve the unique identifier for each object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`GetEmployeeID`</ph> method throws an exception if there is no matching employee with the given first and last names, the <ph id="ph2">`GetRandomEmployees`</ph> method uses the <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.BatchedJoinBlock%602&gt;</ph> class to store <ph id="ph4">`Employee`</ph> objects for successful calls to <ph id="ph5">`GetEmployeeID`</ph> and <ph id="ph6">&lt;xref:System.Exception?displayProperty=nameWithType&gt;</ph> objects for calls that fail.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object in this example acts on a <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> object that holds a list of <ph id="ph3">`Employee`</ph> objects and a list of <ph id="ph4">&lt;xref:System.Exception&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BatchedJoinBlock%602&gt;</ph> object propagates out this data when the sum of the received <ph id="ph2">`Employee`</ph> and <ph id="ph3">&lt;xref:System.Exception&gt;</ph> object counts equals the batch size.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The Complete Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example shows the complete code.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method compares the time that is required to perform batched database insertions versus the time to perform non-batched database insertions.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It also demonstrates the use of buffered join to read employee data from the database and also report errors.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>