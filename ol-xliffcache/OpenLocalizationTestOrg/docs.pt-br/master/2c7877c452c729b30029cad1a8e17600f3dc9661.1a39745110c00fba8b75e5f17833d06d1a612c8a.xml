{"content":"---\ntitle: \"How To: Build Claims-Aware ASP.NET Application Using Windows Authentication\"\nms.date: \"03/30/2017\"\nms.assetid: 11c53d9d-d34a-44b4-8b5e-22e3eaeaee93\nauthor: \"BrucePerlerMS\"\n---\n# How To: Build Claims-Aware ASP.NET Application Using Windows Authentication\n## Applies To  \n  \n-   Microsoft® Windows® Identity Foundation (WIF)  \n  \n-   ASP.NET® Web Forms  \n  \n## Summary  \n This How-To provides detailed step-by-step procedures for creating a simple claims-aware ASP.NET Web Forms application that uses Windows authentication. It also provides instructions for how to test the application to verify that claims are presented when a user signs in using Windows authentication.  \n  \n## Contents  \n  \n-   Objectives  \n  \n-   Overview  \n  \n-   Summary of Steps  \n  \n-   Step 1 – Create a Simple ASP.NET Web Forms Application  \n  \n-   Step 2 – Configure ASP.NET Web Forms Application for Claims Using Windows Authentication  \n  \n-   Step 3 – Test Your Solution  \n  \n## Objectives  \n  \n-   Configure an ASP.NET Web Forms application for claims using Windows authentication  \n  \n-   Test the ASP.NET Web Forms application to see if it is working properly  \n  \n## Overview  \n In .NET 4.5, WIF and its claims-based authorization have been included as an integral part of the Framework. Previously, if you wanted claims from an ASP.NET user, you were required to install WIF, and then cast interfaces to Principal objects such as `Thread.CurrentPrincipal` or `HttpContext.Current.User`. Now, claims are served automatically by these Principal objects.  \n  \n Windows authentication has benefited from WIF’s inclusion in .NET 4.5 because all users authenticated by Windows credentials automatically have claims associated with them. You can begin using these claims immediately in an ASP.NET application that uses Windows authentication, as this How-To demonstrates.  \n  \n## Summary of Steps  \n  \n-   Step 1 – Create a Simple ASP.NET Web Forms Application  \n  \n-   Step 2 – Configure ASP.NET Web Forms Application for Claims Using Windows Authentication  \n  \n-   Step 3 – Test Your Solution  \n  \n## Step 1 – Create a Simple ASP.NET Web Forms Application  \n In this step, you will create a new ASP.NET Web Forms application.  \n  \n#### To create a simple ASP.NET application  \n  \n1.  Start Visual Studio, then click **File**, **New**, and then **Project**.  \n  \n2.  In the **New Project** window, click **ASP.NET Web Forms Application**.  \n  \n3.  In **Name**, enter `TestApp` and press **OK**.  \n  \n4.  After the **TestApp** project has been created, click on it in **Solution Explorer**. The project’s properties will appear in the **Properties** pane below **Solution Explorer**. Set the **Windows Authentication** property to **Enabled**.  \n  \n    > [!WARNING]\n    >  Windows authentication is disabled by default in new ASP.NET applications, so you must manually enable it.  \n  \n## Step 2 – Configure ASP.NET Web Forms Application for Claims Using Windows Authentication  \n In this step you will add a configuration entry to the *Web.config* configuration file and modify the *Default.aspx* file to display claims information for an account.  \n  \n#### To configure ASP.NET application for claims using Windows authentication  \n  \n1.  In the **TestApp** project’s *Default.aspx* file, replace the existing markup with the following:  \n  \n    ```  \n    <%@ Page Title=\"Home Page\" Language=\"C#\" MasterPageFile=\"~/Site.Master\" AutoEventWireup=\"true\"  \n        CodeBehind=\"Default.aspx.cs\" Inherits=\"TestApp._Default\" %>  \n  \n    <asp:Content runat=\"server\" ID=\"BodyContent\" ContentPlaceHolderID=\"MainContent\">  \n        <p>  \n            This page displays the claims associated with a Windows authenticated user.          \n        </p>  \n        <h3>Your Claims</h3>  \n        <p>  \n            <asp:GridView ID=\"ClaimsGridView\" runat=\"server\" CellPadding=\"3\">  \n                <AlternatingRowStyle BackColor=\"White\" />  \n                <HeaderStyle BackColor=\"#7AC0DA\" ForeColor=\"White\" />  \n            </asp:GridView>  \n        </p>  \n    </asp:Content>  \n    ```  \n  \n     This step adds a GridView control to your *Default.aspx* page that will be populated with the claims retrieved from Windows authentication.  \n  \n2.  Save the *Default.aspx* file, then open its code-behind file named *Default.aspx.cs*. Replace the existing code with the following:  \n  \n    ```csharp  \n    using System;  \n    using System.Web.UI;  \n    using System.Security.Claims;  \n  \n    namespace TestApp  \n    {  \n        public partial class _Default : Page  \n        {  \n            protected void Page_Load(object sender, EventArgs e)  \n            {  \n                ClaimsPrincipal claimsPrincipal = Page.User as ClaimsPrincipal;  \n                this.ClaimsGridView.DataSource = claimsPrincipal.Claims;  \n                this.ClaimsGridView.DataBind();  \n            }  \n        }  \n    }  \n    ```  \n  \n     The above code will display claims about an authenticated user.  \n  \n3.  To change the application’s authentication type, modify the **\\<authentication>** block in the **\\<system.web>** section of the project’s root *Web.config* file so that it only includes the following configuration entry:  \n  \n    ```xml  \n    <authentication mode=\"Windows\" />  \n    ```  \n  \n4.  Finally, modify the **\\<authorization>** block in the **\\<system.web>** section of the same *Web.config* file to force authentication:  \n  \n    ```xml  \n    <authorization>  \n        <deny users=\"?\" />  \n    </authorization>  \n    ```  \n  \n## Step 3 – Test Your Solution  \n In this step you will test your ASP.NET Web Forms application, and verify that claims are presented when a user signs in with Windows authentication.  \n  \n#### To test your ASP.NET Web Forms application for claims using Windows authentication  \n  \n1.  Press **F5** to build and run the application. You should be presented with *Default.aspx*, and your Windows account name (including domain name) should already appear as the authenticated user in the top right of the page. The page’s content should include a table filled with claims retrieved from your Windows account.\n","nodes":[{"pos":[4,183],"embed":true,"restype":"x-metadata","content":"title: \"How To: Build Claims-Aware ASP.NET Application Using Windows Authentication\"\nms.date: \"03/30/2017\"\nms.assetid: 11c53d9d-d34a-44b4-8b5e-22e3eaeaee93\nauthor: \"BrucePerlerMS\"","nodes":[{"content":"How To: Build Claims-Aware ASP.NET Application Using Windows Authentication","nodes":[{"pos":[0,75],"content":"How To: Build Claims-Aware ASP.NET Application Using Windows Authentication","nodes":[{"content":"How To: Build Claims-Aware ASP.NET Application Using Windows Authentication","pos":[0,75]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[190,265],"content":"How To: Build Claims-Aware ASP.NET Application Using Windows Authentication","linkify":"How To: Build Claims-Aware ASP.NET Application Using Windows Authentication","nodes":[{"content":"How To: Build Claims-Aware ASP.NET Application Using Windows Authentication","pos":[0,75]}]},{"pos":[269,279],"content":"Applies To","linkify":"Applies To","nodes":[{"content":"Applies To","pos":[0,10]}]},{"content":"Microsoft® Windows® Identity Foundation (WIF)","pos":[289,334]},{"content":"ASP.NET® Web Forms","pos":[344,362]},{"pos":[371,378],"content":"Summary","linkify":"Summary","nodes":[{"content":"Summary","pos":[0,7]}]},{"content":"This How-To provides detailed step-by-step procedures for creating a simple claims-aware ASP.NET Web Forms application that uses Windows authentication.","pos":[382,534]},{"content":"It also provides instructions for how to test the application to verify that claims are presented when a user signs in using Windows authentication.","pos":[535,683]},{"pos":[692,700],"content":"Contents","linkify":"Contents","nodes":[{"content":"Contents","pos":[0,8]}]},{"content":"Objectives","pos":[710,720]},{"content":"Overview","pos":[730,738]},{"content":"Summary of Steps","pos":[748,764]},{"content":"Step 1 – Create a Simple ASP.NET Web Forms Application","pos":[774,828]},{"content":"Step 2 – Configure ASP.NET Web Forms Application for Claims Using Windows Authentication","pos":[838,926]},{"content":"Step 3 – Test Your Solution","pos":[936,963]},{"pos":[972,982],"content":"Objectives","linkify":"Objectives","nodes":[{"content":"Objectives","pos":[0,10]}]},{"content":"Configure an ASP.NET Web Forms application for claims using Windows authentication","pos":[992,1074]},{"content":"Test the ASP.NET Web Forms application to see if it is working properly","pos":[1084,1155]},{"pos":[1164,1172],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"In .NET 4.5, WIF and its claims-based authorization have been included as an integral part of the Framework.","pos":[1176,1284]},{"content":"Previously, if you wanted claims from an ASP.NET user, you were required to install WIF, and then cast interfaces to Principal objects such as <ph id=\"ph1\">`Thread.CurrentPrincipal`</ph> or <ph id=\"ph2\">`HttpContext.Current.User`</ph>.","pos":[1285,1484],"source":" Previously, if you wanted claims from an ASP.NET user, you were required to install WIF, and then cast interfaces to Principal objects such as `Thread.CurrentPrincipal` or `HttpContext.Current.User`."},{"content":"Now, claims are served automatically by these Principal objects.","pos":[1485,1549]},{"content":"Windows authentication has benefited from WIF’s inclusion in .NET 4.5 because all users authenticated by Windows credentials automatically have claims associated with them.","pos":[1556,1728]},{"content":"You can begin using these claims immediately in an ASP.NET application that uses Windows authentication, as this How-To demonstrates.","pos":[1729,1862]},{"pos":[1871,1887],"content":"Summary of Steps","linkify":"Summary of Steps","nodes":[{"content":"Summary of Steps","pos":[0,16]}]},{"content":"Step 1 – Create a Simple ASP.NET Web Forms Application","pos":[1897,1951]},{"content":"Step 2 – Configure ASP.NET Web Forms Application for Claims Using Windows Authentication","pos":[1961,2049]},{"content":"Step 3 – Test Your Solution","pos":[2059,2086]},{"pos":[2095,2149],"content":"Step 1 – Create a Simple ASP.NET Web Forms Application","linkify":"Step 1 – Create a Simple ASP.NET Web Forms Application","nodes":[{"content":"Step 1 – Create a Simple ASP.NET Web Forms Application","pos":[0,54]}]},{"content":"In this step, you will create a new ASP.NET Web Forms application.","pos":[2153,2219]},{"pos":[2230,2268],"content":"To create a simple ASP.NET application","linkify":"To create a simple ASP.NET application","nodes":[{"content":"To create a simple ASP.NET application","pos":[0,38]}]},{"pos":[2278,2350],"content":"Start Visual Studio, then click <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"Start Visual Studio, then click **File**, **New**, and then **Project**."},{"pos":[2360,2431],"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> window, click <bpt id=\"p2\">**</bpt>ASP.NET Web Forms Application<ept id=\"p2\">**</ept>.","source":"In the **New Project** window, click **ASP.NET Web Forms Application**."},{"pos":[2441,2487],"content":"In <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>, enter <ph id=\"ph1\">`TestApp`</ph> and press <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","source":"In **Name**, enter `TestApp` and press **OK**."},{"content":"After the <bpt id=\"p1\">**</bpt>TestApp<ept id=\"p1\">**</ept> project has been created, click on it in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept>.","pos":[2497,2582],"source":"After the **TestApp** project has been created, click on it in **Solution Explorer**."},{"content":"The project’s properties will appear in the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> pane below <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept>.","pos":[2583,2675],"source":" The project’s properties will appear in the **Properties** pane below **Solution Explorer**."},{"content":"Set the <bpt id=\"p1\">**</bpt>Windows Authentication<ept id=\"p1\">**</ept> property to <bpt id=\"p2\">**</bpt>Enabled<ept id=\"p2\">**</ept>.","pos":[2676,2735],"source":" Set the **Windows Authentication** property to **Enabled**."},{"pos":[2747,2871],"content":"[!WARNING]\nWindows authentication is disabled by default in new ASP.NET applications, so you must manually enable it.","leadings":["","    >  "],"nodes":[{"content":"Windows authentication is disabled by default in new ASP.NET applications, so you must manually enable it.","pos":[11,117]}]},{"pos":[2880,2968],"content":"Step 2 – Configure ASP.NET Web Forms Application for Claims Using Windows Authentication","linkify":"Step 2 – Configure ASP.NET Web Forms Application for Claims Using Windows Authentication","nodes":[{"content":"Step 2 – Configure ASP.NET Web Forms Application for Claims Using Windows Authentication","pos":[0,88]}]},{"pos":[2972,3139],"content":"In this step you will add a configuration entry to the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> configuration file and modify the <bpt id=\"p2\">*</bpt>Default.aspx<ept id=\"p2\">*</ept> file to display claims information for an account.","source":"In this step you will add a configuration entry to the *Web.config* configuration file and modify the *Default.aspx* file to display claims information for an account."},{"pos":[3150,3222],"content":"To configure ASP.NET application for claims using Windows authentication","linkify":"To configure ASP.NET application for claims using Windows authentication","nodes":[{"content":"To configure ASP.NET application for claims using Windows authentication","pos":[0,72]}]},{"pos":[3232,3329],"content":"In the <bpt id=\"p1\">**</bpt>TestApp<ept id=\"p1\">**</ept> project’s <bpt id=\"p2\">*</bpt>Default.aspx<ept id=\"p2\">*</ept> file, replace the existing markup with the following:","source":"In the **TestApp** project’s *Default.aspx* file, replace the existing markup with the following:"},{"pos":[4074,4213],"content":"This step adds a GridView control to your <bpt id=\"p1\">*</bpt>Default.aspx<ept id=\"p1\">*</ept> page that will be populated with the claims retrieved from Windows authentication.","source":"This step adds a GridView control to your *Default.aspx* page that will be populated with the claims retrieved from Windows authentication."},{"content":"Save the <bpt id=\"p1\">*</bpt>Default.aspx<ept id=\"p1\">*</ept> file, then open its code-behind file named <bpt id=\"p2\">*</bpt>Default.aspx.cs<ept id=\"p2\">*</ept>.","pos":[4223,4308],"source":"Save the *Default.aspx* file, then open its code-behind file named *Default.aspx.cs*."},{"content":"Replace the existing code with the following:","pos":[4309,4354]},{"content":"The above code will display claims about an authenticated user.","pos":[4897,4960]},{"pos":[4970,5190],"content":"To change the application’s authentication type, modify the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>authentication&gt;<ept id=\"p1\">**</ept> block in the <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\&lt;</ph>system.web&gt;<ept id=\"p2\">**</ept> section of the project’s root <bpt id=\"p3\">*</bpt>Web.config<ept id=\"p3\">*</ept> file so that it only includes the following configuration entry:","source":"To change the application’s authentication type, modify the **\\<authentication>** block in the **\\<system.web>** section of the project’s root *Web.config* file so that it only includes the following configuration entry:"},{"pos":[5266,5400],"content":"Finally, modify the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>authorization&gt;<ept id=\"p1\">**</ept> block in the <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\&lt;</ph>system.web&gt;<ept id=\"p2\">**</ept> section of the same <bpt id=\"p3\">*</bpt>Web.config<ept id=\"p3\">*</ept> file to force authentication:","source":"Finally, modify the **\\<authorization>** block in the **\\<system.web>** section of the same *Web.config* file to force authentication:"},{"pos":[5509,5536],"content":"Step 3 – Test Your Solution","linkify":"Step 3 – Test Your Solution","nodes":[{"content":"Step 3 – Test Your Solution","pos":[0,27]}]},{"content":"In this step you will test your ASP.NET Web Forms application, and verify that claims are presented when a user signs in with Windows authentication.","pos":[5540,5689]},{"pos":[5700,5782],"content":"To test your ASP.NET Web Forms application for claims using Windows authentication","linkify":"To test your ASP.NET Web Forms application for claims using Windows authentication","nodes":[{"content":"To test your ASP.NET Web Forms application for claims using Windows authentication","pos":[0,82]}]},{"content":"Press <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> to build and run the application.","pos":[5792,5838],"source":"Press **F5** to build and run the application."},{"content":"You should be presented with <bpt id=\"p1\">*</bpt>Default.aspx<ept id=\"p1\">*</ept>, and your Windows account name (including domain name) should already appear as the authenticated user in the top right of the page.","pos":[5839,6015],"source":" You should be presented with *Default.aspx*, and your Windows account name (including domain name) should already appear as the authenticated user in the top right of the page."},{"content":"The page’s content should include a table filled with claims retrieved from your Windows account.","pos":[6016,6113]}]}