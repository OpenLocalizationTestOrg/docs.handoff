{"content":"---\ntitle: \"Using TCP Services\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"requesting data from Internet, TCP\"\n  - \"receiving data, TCP\"\n  - \"TcpClient class, about TcpClient class\"\n  - \"data requests, TCP\"\n  - \"application protocols, TCP\"\n  - \"network resources, TCP\"\n  - \"sending data, TCP\"\n  - \"TCP\"\n  - \"protocols, TCP\"\n  - \"Internet, TCP\"\nms.assetid: d2811830-3bcb-495c-b82d-cda9cf919aad\n---\n# Using TCP Services\nThe <xref:System.Net.Sockets.TcpClient> class requests data from an Internet resource using TCP. The methods and properties of **TcpClient** abstract the details for creating a <xref:System.Net.Sockets.Socket> for requesting and receiving data using TCP. Because the connection to the remote device is represented as a stream, data can be read and written with .NET Framework stream-handling techniques.  \n  \n The TCP protocol establishes a connection with a remote endpoint and then uses that connection to send and receive data packets. TCP is responsible for ensuring that data packets are sent to the endpoint and assembled in the correct order when they arrive.  \n  \n To establish a TCP connection, you must know the address of the network device hosting the service you need and you must know the TCP port that the service uses to communicate. The Internet Assigned Numbers Authority (Iana) defines port numbers for common services (see [Service Name and Transport Protocol Port Number Registry](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml)). Services not on the Iana list can have port numbers in the range 1,024 to 65,535.  \n  \n The following example demonstrates setting up a **TcpClient** to connect to a time server on TCP port 13.  \n  \n```vb  \nImports System  \nImports System.Net.Sockets  \nImports System.Text  \n  \nPublic Class TcpTimeClient  \n    Private const portNum As Integer = 13  \n    Private const hostName As String = \"host.contoso.com\"  \n  \n    ' Entry point  that delegates to C-style main Private Function.  \n    Public Overloads Shared Sub Main()  \n        System.Environment.ExitCode = _  \n            Main(System.Environment.GetCommandLineArgs())  \n    End Sub  \n  \n    Overloads Public Shared Function Main(args() As [String]) As Integer  \n        Try  \n            Dim client As New TcpClient(hostName, portNum)  \n  \n            Dim ns As NetworkStream = client.GetStream()  \n  \n            Dim bytes(1024) As Byte  \n            Dim bytesRead As Integer = ns.Read(bytes, 0, bytes.Length)  \n  \n            Console.WriteLine(Encoding.ASCII.GetString(bytes, 0, bytesRead))  \n  \n        Catch e As Exception  \n            Console.WriteLine(e.ToString())  \n        End Try  \n  \n        client.Close()  \n  \n        Return 0  \n    End Function 'Main  \nEnd Class 'TcpTimeClient  \n```  \n  \n```csharp  \nusing System;  \nusing System.Net.Sockets;  \nusing System.Text;  \n  \npublic class TcpTimeClient {  \n    private const int portNum = 13;  \n    private const string hostName = \"host.contoso.com\";  \n  \n    public static int Main(String[] args) {  \n        try {  \n            TcpClient client = new TcpClient(hostName, portNum);  \n  \n            NetworkStream ns = client.GetStream();  \n  \n            byte[] bytes = new byte[1024];  \n            int bytesRead = ns.Read(bytes, 0, bytes.Length);  \n  \n            Console.WriteLine(Encoding.ASCII.GetString(bytes,0,bytesRead));  \n  \n            client.Close();  \n  \n        } catch (Exception e) {  \n            Console.WriteLine(e.ToString());  \n        }  \n  \n        return 0;  \n    }  \n}  \n```  \n  \n <xref:System.Net.Sockets.TcpListener> is used to monitor a TCP port for incoming requests and then create either a **Socket** or a **TcpClient** that manages the connection to the client. The <xref:System.Net.Sockets.TcpListener.Start%2A> method enables listening, and the <xref:System.Net.Sockets.TcpListener.Stop%2A> method disables listening on the port. The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method accepts incoming connection requests and creates a **TcpClient** to handle the request, and the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method accepts incoming connection requests and creates a **Socket** to handle the request.  \n  \n The following example demonstrates creating a network time server using a **TcpListener** to monitor TCP port 13. When an incoming connection request is accepted, the time server responds with the current date and time from the host server.  \n  \n```vb  \nImports System  \nImports System.Net.Sockets  \nImports System.Text  \n  \nPublic Class TcpTimeServer  \n  \n    Private const portNum As Integer = 13  \n  \n    ' Entry point that delegates to C-style main Private Function.  \n    Public Overloads Shared Sub Main()  \n        System.Environment.ExitCode = _  \n            Main(System.Environment.GetCommandLineArgs())  \n    End Sub  \n  \n    Overloads Public Shared Function Main(args() As [String]) As Integer  \n        Dim done As Boolean = False  \n  \n        Dim listener As New TcpListener(portNum)  \n  \n        listener.Start()  \n  \n        While Not done  \n            Console.Write(\"Waiting for connection...\")  \n            Dim client As TcpClient = listener.AcceptTcpClient()  \n  \n            Console.WriteLine(\"Connection accepted.\")  \n            Dim ns As NetworkStream = client.GetStream()  \n  \n            Dim byteTime As Byte() = _  \n                Encoding.ASCII.GetBytes(DateTime.Now.ToString())  \n  \n            Try  \n                ns.Write(byteTime, 0, byteTime.Length)  \n                ns.Close()  \n                client.Close()  \n            Catch e As Exception  \n                Console.WriteLine(e.ToString())  \n            End Try  \n        End While  \n  \n        listener.Stop()  \n  \n        Return 0  \n    End Function 'Main  \nEnd Class 'TcpTimeServer  \n```  \n  \n```csharp  \nusing System;  \nusing System.Net.Sockets;  \nusing System.Text;  \n  \npublic class TcpTimeServer {  \n  \n    private const int portNum = 13;  \n  \n    public static int Main(String[] args) {  \n        bool done = false;  \n  \n        TcpListener listener = new TcpListener(portNum);  \n  \n        listener.Start();  \n  \n        while (!done) {  \n            Console.Write(\"Waiting for connection...\");  \n            TcpClient client = listener.AcceptTcpClient();  \n  \n            Console.WriteLine(\"Connection accepted.\");  \n            NetworkStream ns = client.GetStream();  \n  \n            byte[] byteTime = Encoding.ASCII.GetBytes(DateTime.Now.ToString());  \n  \n            try {  \n                ns.Write(byteTime, 0, byteTime.Length);  \n                ns.Close();  \n                client.Close();  \n            } catch (Exception e) {  \n                Console.WriteLine(e.ToString());  \n            }  \n        }  \n  \n        listener.Stop();  \n  \n        return 0;  \n    }  \n  \n}  \n```  \n  \n## See also\n","nodes":[{"pos":[4,432],"embed":true,"restype":"x-metadata","content":"title: \"Using TCP Services\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"requesting data from Internet, TCP\"\n  - \"receiving data, TCP\"\n  - \"TcpClient class, about TcpClient class\"\n  - \"data requests, TCP\"\n  - \"application protocols, TCP\"\n  - \"network resources, TCP\"\n  - \"sending data, TCP\"\n  - \"TCP\"\n  - \"protocols, TCP\"\n  - \"Internet, TCP\"\nms.assetid: d2811830-3bcb-495c-b82d-cda9cf919aad","nodes":[{"content":"Using TCP Services","nodes":[{"pos":[0,18],"content":"Using TCP Services","nodes":[{"content":"Using TCP Services","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[439,457],"content":"Using TCP Services","linkify":"Using TCP Services","nodes":[{"content":"Using TCP Services","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> class requests data from an Internet resource using TCP.","pos":[458,554],"source":"The <xref:System.Net.Sockets.TcpClient> class requests data from an Internet resource using TCP."},{"content":"The methods and properties of <bpt id=\"p1\">**</bpt>TcpClient<ept id=\"p1\">**</ept> abstract the details for creating a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> for requesting and receiving data using TCP.","pos":[555,712],"source":" The methods and properties of **TcpClient** abstract the details for creating a <xref:System.Net.Sockets.Socket> for requesting and receiving data using TCP."},{"content":"Because the connection to the remote device is represented as a stream, data can be read and written with .NET Framework stream-handling techniques.","pos":[713,861]},{"content":"The TCP protocol establishes a connection with a remote endpoint and then uses that connection to send and receive data packets.","pos":[868,996]},{"content":"TCP is responsible for ensuring that data packets are sent to the endpoint and assembled in the correct order when they arrive.","pos":[997,1124]},{"content":"To establish a TCP connection, you must know the address of the network device hosting the service you need and you must know the TCP port that the service uses to communicate.","pos":[1131,1307]},{"content":"The Internet Assigned Numbers Authority (Iana) defines port numbers for common services (see <bpt id=\"p1\">[</bpt>Service Name and Transport Protocol Port Number Registry<ept id=\"p1\">](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml)</ept>).","pos":[1308,1555],"source":" The Internet Assigned Numbers Authority (Iana) defines port numbers for common services (see [Service Name and Transport Protocol Port Number Registry](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml))."},{"content":"Services not on the Iana list can have port numbers in the range 1,024 to 65,535.","pos":[1556,1637]},{"pos":[1644,1749],"content":"The following example demonstrates setting up a <bpt id=\"p1\">**</bpt>TcpClient<ept id=\"p1\">**</ept> to connect to a time server on TCP port 13.","source":"The following example demonstrates setting up a **TcpClient** to connect to a time server on TCP port 13."},{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> is used to monitor a TCP port for incoming requests and then create either a <bpt id=\"p1\">**</bpt>Socket<ept id=\"p1\">**</ept> or a <bpt id=\"p2\">**</bpt>TcpClient<ept id=\"p2\">**</ept> that manages the connection to the client.","pos":[3578,3765],"source":"<xref:System.Net.Sockets.TcpListener> is used to monitor a TCP port for incoming requests and then create either a **Socket** or a **TcpClient** that manages the connection to the client."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method enables listening, and the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method disables listening on the port.","pos":[3766,3935],"source":" The <xref:System.Net.Sockets.TcpListener.Start%2A> method enables listening, and the <xref:System.Net.Sockets.TcpListener.Stop%2A> method disables listening on the port."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method accepts incoming connection requests and creates a <bpt id=\"p1\">**</bpt>TcpClient<ept id=\"p1\">**</ept> to handle the request, and the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method accepts incoming connection requests and creates a <bpt id=\"p2\">**</bpt>Socket<ept id=\"p2\">**</ept> to handle the request.","pos":[3936,4245],"source":" The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method accepts incoming connection requests and creates a **TcpClient** to handle the request, and the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method accepts incoming connection requests and creates a **Socket** to handle the request."},{"content":"The following example demonstrates creating a network time server using a <bpt id=\"p1\">**</bpt>TcpListener<ept id=\"p1\">**</ept> to monitor TCP port 13.","pos":[4252,4365],"source":"The following example demonstrates creating a network time server using a **TcpListener** to monitor TCP port 13."},{"content":"When an incoming connection request is accepted, the time server responds with the current date and time from the host server.","pos":[4366,4492]},{"pos":[6853,6861],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]}]}