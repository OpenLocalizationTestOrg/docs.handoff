{"content":"---\ntitle: \"Interlocked Operations | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Interlocked class, about Interlocked class\"\n  - \"threading [.NET Framework], Interlocked class\"\nms.assetid: cbda7114-c752-4f3e-ada1-b1e8dd262f2b\ncaps.latest.revision: 13\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Interlocked Operations\nThe <xref:System.Threading.Interlocked>class provides methods that synchronize access to a variable that is shared by multiple threads. The threads of different processes can use this mechanism if the variable is in shared memory. Interlocked operations are atomic — that is, the entire operation is a unit that cannot be interrupted by another interlocked operation on the same variable. This is important in operating systems with preemptive multithreading, where a thread can be suspended after loading a value from a memory address, but before having the chance to alter it and store it.  \n  \n The <xref:System.Threading.Interlocked> class provides the following operations:  \n  \n-   In the .NET Framework version 2.0, the <xref:System.Threading.Interlocked.Add%2A> method adds an integer value to a variable and returns the new value of the variable.  \n  \n-   In the .NET Framework version 2.0, the <xref:System.Threading.Interlocked.Read%2A> method reads a 64-bit integer value as an atomic operation. This is useful on 32-bit operating systems, where reading a 64-bit integer is not ordinarily an atomic operation.  \n  \n-   The <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A> methods increment or decrement a variable and return the resulting value.  \n  \n-   The <xref:System.Threading.Interlocked.Exchange%2A> method performs an atomic exchange of the value in a specified variable, returning that value and replacing it with a new value. In the .NET Framework version 2.0, a generic overload of this method can be used to perform this exchange on a variable of any reference type. See <xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29>.  \n  \n-   The <xref:System.Threading.Interlocked.CompareExchange%2A> method also exchanges two values, but contingent on the result of a comparison. In the .NET Framework version 2.0, a generic overload of this method can be used to perform this exchange on a variable of any reference type. See <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29>.  \n  \n On modern processors, the methods of the <xref:System.Threading.Interlocked> class can often be implemented by a single instruction. Thus, they provide very high-performance synchronization and can be used to build higher-level synchronization mechanisms, like spin locks.  \n  \n For an example that uses the <xref:System.Threading.Monitor> and <xref:System.Threading.Interlocked> classes in combination, see [Monitors](http://msdn.microsoft.com/library/33fe4aef-b44b-42fd-9e72-c908e39e75db).  \n  \n## CompareExchange Example  \n The <xref:System.Threading.Interlocked.CompareExchange%2A> method can be used to protect computations that are more complicated than simple increment and decrement. The following example demonstrates a thread-safe method that adds to a running total stored as a floating point number. (For integers, the <xref:System.Threading.Interlocked.Add%2A> method is a simpler solution.) For complete code examples, see the overloads of <xref:System.Threading.Interlocked.CompareExchange%2A> that take single-precision and double-precision floating-point arguments (<xref:System.Threading.Interlocked.CompareExchange%28System.Single%40%2CSystem.Single%2CSystem.Single%29> and <xref:System.Threading.Interlocked.CompareExchange%28System.Double%40%2CSystem.Double%2CSystem.Double%29>).  \n  \n [!code-cpp[Conceptual.Interlocked#1](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interlocked/cpp/source1.cpp#1)]\n [!code-csharp[Conceptual.Interlocked#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interlocked/cs/source1.cs#1)]\n [!code-vb[Conceptual.Interlocked#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interlocked/vb/source1.vb#1)]  \n  \n## Untyped Overloads of Exchange and CompareExchange  \n The <xref:System.Threading.Interlocked.Exchange%2A> and <xref:System.Threading.Interlocked.CompareExchange%2A> methods have overloads that take arguments of type <xref:System.Object>. The first argument of each of these overloads is `ref Object` (`ByRef … As Object` in Visual Basic), and type safety requires the variable passed to this argument to be typed strictly as <xref:System.Object>; you cannot simply cast the first argument to type <xref:System.Object> when calling these methods.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, use the generic overloads of the <xref:System.Threading.Interlocked.Exchange%2A> and <xref:System.Threading.Interlocked.CompareExchange%2A> methods to exchange strongly typed variables.  \n  \n The following code example shows a property of type `ClassA` that can be set only once, as it might be implemented in the .NET Framework version 1.0 or 1.1.  \n  \n [!code-cpp[Conceptual.Interlocked#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interlocked/cpp/source2.cpp#2)]\n [!code-csharp[Conceptual.Interlocked#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interlocked/cs/source2.cs#2)]\n [!code-vb[Conceptual.Interlocked#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interlocked/vb/source2.vb#2)]  \n  \n## See Also  \n <xref:System.Threading.Interlocked>   \n <xref:System.Threading.Monitor>   \n [Threading](../../../docs/standard/threading/index.md)   \n [Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)","nodes":[{"pos":[4,459],"embed":true,"restype":"x-metadata","content":"title: \"Interlocked Operations | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Interlocked class, about Interlocked class\"\n  - \"threading [.NET Framework], Interlocked class\"\nms.assetid: cbda7114-c752-4f3e-ada1-b1e8dd262f2b\ncaps.latest.revision: 13\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"Interlocked Operations | Microsoft Docs","nodes":[{"pos":[0,39],"content":"Interlocked Operations | Microsoft Docs","nodes":[{"content":"Interlocked Operations | Microsoft Docs","pos":[0,39]}]}],"path":["title"]}],"yml":true},{"pos":[466,488],"content":"Interlocked Operations","linkify":"Interlocked Operations","nodes":[{"content":"Interlocked Operations","pos":[0,22]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked&gt;</ph>class provides methods that synchronize access to a variable that is shared by multiple threads.","pos":[489,624],"source":"The <xref:System.Threading.Interlocked>class provides methods that synchronize access to a variable that is shared by multiple threads."},{"content":"The threads of different processes can use this mechanism if the variable is in shared memory.","pos":[625,719]},{"content":"Interlocked operations are atomic — that is, the entire operation is a unit that cannot be interrupted by another interlocked operation on the same variable.","pos":[720,877]},{"content":"This is important in operating systems with preemptive multithreading, where a thread can be suspended after loading a value from a memory address, but before having the chance to alter it and store it.","pos":[878,1080]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked&gt;</ph> class provides the following operations:","pos":[1087,1167],"source":"The <xref:System.Threading.Interlocked> class provides the following operations:"},{"content":"In the .NET Framework version 2.0, the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> method adds an integer value to a variable and returns the new value of the variable.","pos":[1177,1344],"source":"In the .NET Framework version 2.0, the <xref:System.Threading.Interlocked.Add%2A> method adds an integer value to a variable and returns the new value of the variable."},{"content":"In the .NET Framework version 2.0, the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method reads a 64-bit integer value as an atomic operation.","pos":[1354,1496],"source":"In the .NET Framework version 2.0, the <xref:System.Threading.Interlocked.Read%2A> method reads a 64-bit integer value as an atomic operation."},{"content":"This is useful on 32-bit operating systems, where reading a 64-bit integer is not ordinarily an atomic operation.","pos":[1497,1610]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph> methods increment or decrement a variable and return the resulting value.","pos":[1620,1799],"source":"The <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A> methods increment or decrement a variable and return the resulting value."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> method performs an atomic exchange of the value in a specified variable, returning that value and replacing it with a new value.","pos":[1809,1989],"source":"The <xref:System.Threading.Interlocked.Exchange%2A> method performs an atomic exchange of the value in a specified variable, returning that value and replacing it with a new value."},{"content":"In the .NET Framework version 2.0, a generic overload of this method can be used to perform this exchange on a variable of any reference type.","pos":[1990,2132]},{"content":"See <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29&gt;</ph>.","pos":[2133,2215],"source":" See <xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method also exchanges two values, but contingent on the result of a comparison.","pos":[2225,2363],"source":"The <xref:System.Threading.Interlocked.CompareExchange%2A> method also exchanges two values, but contingent on the result of a comparison."},{"content":"In the .NET Framework version 2.0, a generic overload of this method can be used to perform this exchange on a variable of any reference type.","pos":[2364,2506]},{"content":"See <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29&gt;</ph>.","pos":[2507,2606],"source":" See <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29>."},{"content":"On modern processors, the methods of the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked&gt;</ph> class can often be implemented by a single instruction.","pos":[2613,2745],"source":"On modern processors, the methods of the <xref:System.Threading.Interlocked> class can often be implemented by a single instruction."},{"content":"Thus, they provide very high-performance synchronization and can be used to build higher-level synchronization mechanisms, like spin locks.","pos":[2746,2885]},{"pos":[2892,3104],"content":"For an example that uses the <ph id=\"ph1\">&lt;xref:System.Threading.Monitor&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Interlocked&gt;</ph> classes in combination, see <bpt id=\"p1\">[</bpt>Monitors<ept id=\"p1\">](http://msdn.microsoft.com/library/33fe4aef-b44b-42fd-9e72-c908e39e75db)</ept>.","source":"For an example that uses the <xref:System.Threading.Monitor> and <xref:System.Threading.Interlocked> classes in combination, see [Monitors](http://msdn.microsoft.com/library/33fe4aef-b44b-42fd-9e72-c908e39e75db)."},{"pos":[3113,3136],"content":"CompareExchange Example","linkify":"CompareExchange Example","nodes":[{"content":"CompareExchange Example","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method can be used to protect computations that are more complicated than simple increment and decrement.","pos":[3140,3304],"source":"The <xref:System.Threading.Interlocked.CompareExchange%2A> method can be used to protect computations that are more complicated than simple increment and decrement."},{"content":"The following example demonstrates a thread-safe method that adds to a running total stored as a floating point number.","pos":[3305,3424]},{"content":"(For integers, the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> method is a simpler solution.) For complete code examples, see the overloads of <ph id=\"ph2\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> that take single-precision and double-precision floating-point arguments (<ph id=\"ph3\">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Single%40%2CSystem.Single%2CSystem.Single%29&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Double%40%2CSystem.Double%2CSystem.Double%29&gt;</ph>).","pos":[3425,3913],"source":" (For integers, the <xref:System.Threading.Interlocked.Add%2A> method is a simpler solution.) For complete code examples, see the overloads of <xref:System.Threading.Interlocked.CompareExchange%2A> that take single-precision and double-precision floating-point arguments (<xref:System.Threading.Interlocked.CompareExchange%28System.Single%40%2CSystem.Single%2CSystem.Single%29> and <xref:System.Threading.Interlocked.CompareExchange%28System.Double%40%2CSystem.Double%2CSystem.Double%29>)."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Interlocked#1<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interlocked/cpp/source1.cpp#1)</ept><ept id=\"p1\">]</ept>","pos":[3920,4045],"source":"[!code-cpp[Conceptual.Interlocked#1](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interlocked/cpp/source1.cpp#1)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Interlocked#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interlocked/cs/source1.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[4047,4176],"source":"[!code-csharp[Conceptual.Interlocked#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interlocked/cs/source1.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Conceptual.Interlocked#1<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interlocked/vb/source1.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[4178,4308],"source":"[!code-vb[Conceptual.Interlocked#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interlocked/vb/source1.vb#1)]"},{"pos":[4317,4366],"content":"Untyped Overloads of Exchange and CompareExchange","linkify":"Untyped Overloads of Exchange and CompareExchange","nodes":[{"content":"Untyped Overloads of Exchange and CompareExchange","pos":[0,49]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> methods have overloads that take arguments of type <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph>.","pos":[4370,4553],"source":"The <xref:System.Threading.Interlocked.Exchange%2A> and <xref:System.Threading.Interlocked.CompareExchange%2A> methods have overloads that take arguments of type <xref:System.Object>."},{"content":"The first argument of each of these overloads is <ph id=\"ph1\">`ref Object`</ph> (<ph id=\"ph2\">`ByRef … As Object`</ph> in Visual Basic), and type safety requires the variable passed to this argument to be typed strictly as <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph>; you cannot simply cast the first argument to type <ph id=\"ph4\">&lt;xref:System.Object&gt;</ph> when calling these methods.","pos":[4554,4861],"source":" The first argument of each of these overloads is `ref Object` (`ByRef … As Object` in Visual Basic), and type safety requires the variable passed to this argument to be typed strictly as <xref:System.Object>; you cannot simply cast the first argument to type <xref:System.Object> when calling these methods."},{"pos":[4869,5100],"content":"[!NOTE]\n In the .NET Framework version 2.0, use the generic overloads of the <xref:System.Threading.Interlocked.Exchange%2A> and <xref:System.Threading.Interlocked.CompareExchange%2A> methods to exchange strongly typed variables.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 2.0, use the generic overloads of the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> methods to exchange strongly typed variables.","pos":[9,229],"source":"In the .NET Framework version 2.0, use the generic overloads of the <xref:System.Threading.Interlocked.Exchange%2A> and <xref:System.Threading.Interlocked.CompareExchange%2A> methods to exchange strongly typed variables."}]},{"pos":[5107,5263],"content":"The following code example shows a property of type <ph id=\"ph1\">`ClassA`</ph> that can be set only once, as it might be implemented in the .NET Framework version 1.0 or 1.1.","source":"The following code example shows a property of type `ClassA` that can be set only once, as it might be implemented in the .NET Framework version 1.0 or 1.1."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Interlocked#2<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interlocked/cpp/source2.cpp#2)</ept><ept id=\"p1\">]</ept>","pos":[5270,5395],"source":"[!code-cpp[Conceptual.Interlocked#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interlocked/cpp/source2.cpp#2)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Interlocked#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interlocked/cs/source2.cs#2)</ept><ept id=\"p1\">]</ept>","pos":[5397,5526],"source":"[!code-csharp[Conceptual.Interlocked#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interlocked/cs/source2.cs#2)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Conceptual.Interlocked#2<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interlocked/vb/source2.vb#2)</ept><ept id=\"p1\">]</ept>","pos":[5528,5658],"source":"[!code-vb[Conceptual.Interlocked#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interlocked/vb/source2.vb#2)]"},{"pos":[5667,5675],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Interlocked&gt;</ph>","pos":[5679,5714],"source":"<xref:System.Threading.Interlocked> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Monitor&gt;</ph>","pos":[5719,5750],"source":"<xref:System.Threading.Monitor> "},{"content":"<bpt id=\"p1\">[</bpt>Threading<ept id=\"p1\">](../../../docs/standard/threading/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5755,5810],"source":"[Threading](../../../docs/standard/threading/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Threading Objects and Features<ept id=\"p1\">](../../../docs/standard/threading/threading-objects-and-features.md)</ept>","pos":[5814,5914],"source":"[Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)"}]}