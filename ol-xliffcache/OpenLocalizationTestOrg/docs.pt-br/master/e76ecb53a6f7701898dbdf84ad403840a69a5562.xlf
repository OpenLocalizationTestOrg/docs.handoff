<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e76ecb53a6f7701898dbdf84ad403840a69a5562</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\misc\bc30512.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89c06848bc357ac160e18eb680af8898c1729693</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89061c62f8f73a4aacdaf4fcfc67c5716c20e289</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Option Strict On disallows implicit conversions from &amp;#39;<ph id="ph1">&amp;lt;</ph>type1<ph id="ph2">&amp;gt;</ph>&amp;#39; to &amp;#39;<ph id="ph3">&amp;lt;</ph>type2<ph id="ph4">&amp;gt;</ph>&amp;#39; | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Option Strict On disallows implicit conversions from &amp;#39;<ph id="ph1">&amp;lt;</ph>type1<ph id="ph2">&amp;gt;</ph>&amp;#39; to &amp;#39;<ph id="ph3">&amp;lt;</ph>type2<ph id="ph4">&amp;gt;</ph>&amp;#39;</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You have tried to convert a type to another type that may not be able to contain the value, such as a <ph id="ph1">`Long`</ph> to an <ph id="ph2">`Integer`</ph>, while the type checking switch (<bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>) is set to <ph id="ph3">`On`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This type of conversion is called a <bpt id="p1">*</bpt>narrowing conversion<ept id="p1">*</ept>, and it is possible for it to fail at run time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For this reason, <ph id="ph1">`Option Strict On`</ph> disallows implicit narrowing conversions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error ID:<ept id="p1">**</ept> BC30512</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To correct this error</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Determine whether a conversion of any type exists from <ph id="ph1">`&lt;type1&gt;`</ph> to <ph id="ph2">`&lt;type2&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If both are <ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> elementary types, or if both are instances of classes, you can usually make this determination by consulting the table in <bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If only a narrowing conversion exists from <ph id="ph1">`&lt;type1&gt;`</ph> to <ph id="ph2">`&lt;type2&gt;`</ph>, you should use explicit casting.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CType Function<ept id="p1">](../../visual-basic/language-reference/functions/ctype-function.md)</ept> and <bpt id="p2">[</bpt>DirectCast Operator<ept id="p2">](../../visual-basic/language-reference/operators/directcast-operator.md)</ept> keywords throw a run-time exception if the conversion fails.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>TryCast Operator<ept id="p1">](../../visual-basic/language-reference/operators/trycast-operator.md)</ept> keyword applies only to reference types and returns <bpt id="p2">[</bpt>Nothing<ept id="p2">](../../visual-basic/language-reference/nothing.md)</ept> if the conversion fails.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If a narrowing conversion exists and your program can tolerate a run-time failure, or you are confident that a run-time failure is not possible, you can specify <ph id="ph1">`Option Strict Off`</ph> at the beginning of your source code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>But you should still enclose the conversion in a <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept> block to avoid unexpected results or early termination of your program.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If no conversion exists from <ph id="ph1">`&lt;type1&gt;`</ph> to <ph id="ph2">`&lt;type2&gt;`</ph>, you must re-evaluate your program logic.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You might be able to write code that can assign values to <ph id="ph1">`&lt;type2&gt;`</ph> corresponding to anticipated values of <ph id="ph2">`&lt;type1&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If no conversion exists from <ph id="ph1">`&lt;type1&gt;`</ph> to <ph id="ph2">`&lt;type2&gt;`</ph> and one of the types is a class or structure you have defined, you might be able to define a conversion operator from that type to or from the other type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Define a Conversion Operator<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In all cases and as a general guideline, you should avoid using narrowing conversions unless you can trap failures in a <ph id="ph1">`Catch`</ph> block and deal with them effectively.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Widening and Narrowing Conversions<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CType Function<ept id="p1">](../../visual-basic/language-reference/functions/ctype-function.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>DirectCast Operator<ept id="p1">](../../visual-basic/language-reference/operators/directcast-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TryCast Operator<ept id="p1">](../../visual-basic/language-reference/operators/trycast-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Nothing<ept id="p1">](../../visual-basic/language-reference/nothing.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Try...Catch...Finally Statement<ept id="p1">](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Define a Conversion Operator<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>