<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">921945eb4dcb43604f4ba62a35626f6b049351eb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\wcf-discovery-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c291760ee6762928d879e60bcefe836bacf7ac0e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db1e8d8a012fb5029e7767abd039b9627a1f0a01</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>WCF Discovery Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WCF Discovery Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Discovery APIs provide a unified programming model for the dynamic publication and discovery of Web services using the WS-Discovery protocol.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These APIs allow services to publish themselves and clients to find published services.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Once a service is made discoverable, the service has the ability to send announcement messages as well as listen for and respond to discovery requests.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Discoverable services can send Hello messages to announce their arrival on a network and Bye messages to announce their departure from a network.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To find a service, clients send a <ph id="ph1">`Probe`</ph> request that contains specific criteria such as service contract type, keywords, and scope on the network.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Services receive the <ph id="ph1">`Probe`</ph> request and determine whether they match the criteria.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a service matches, it responds by sending a <ph id="ph1">`ProbeMatch`</ph> message back to the client with the information necessary to contact the service.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Clients can also send <ph id="ph1">`Resolve`</ph> requests that allow them to find services that may have changed their endpoint address.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Matching services respond to <ph id="ph1">`Resolve`</ph> requests by sending a <ph id="ph2">`ResolveMatch`</ph> message back to the client.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Ad-Hoc and Managed Modes</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Discovery API supports two different modes: Managed and Ad-Hoc.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In Managed mode there is a centralized server called a discovery proxy that maintains information about available services.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The discovery proxy can be populated with information about services in a variety of ways.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, services can send announcement messages during start up to the discovery proxy or the proxy may read data from a database or a configuration file to determine what services are available.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How the discovery proxy is populated is completely up to the developer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Clients use the discovery proxy to retrieve information about available services.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When a client searches for a service it sends a <ph id="ph1">`Probe`</ph> message to the discovery proxy and the proxy determines whether any of the services it knows about match the service the client is searching for.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If there are matches the discovery proxy sends a <ph id="ph1">`ProbeMatch`</ph> response back to the client.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The client can then contact the service directly using the service information returned from the proxy.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The key principle behind Managed mode is that the discovery requests are sent in a unicast manner to one authority, the discovery proxy.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The .NET Framework contains key components that allow you to build your own proxy.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Clients and services can locate the proxy by multiple methods:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The proxy can respond to ad-hoc messages.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The proxy can send an announcement message during start up.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Clients and services can be written to look for a specific well-known endpoint.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In Ad-Hoc mode, there is no centralized server.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All discovery messages such as service announcements and client requests are sent in a multicast fashion.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By default the .NET Framework contains support for Ad-Hoc discovery over the UDP protocol.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if a service is configured to send out a Hello announcement on start up, it sends it out over a well-known, multicast address using the UDP protocol.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Clients have to actively listen for these announcements and process them accordingly.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When a client sends a <ph id="ph1">`Probe`</ph> message for a service it is sent over the network using a multicast protocol.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Each service that receives the request determines whether it matches the criteria in the <ph id="ph1">`Probe`</ph> message and responds directly to the client with a <ph id="ph2">`ProbeMatch`</ph> message if the service matches the criteria specified in the <ph id="ph3">`Probe`</ph> message.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Benefits of Using WCF Discovery</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because WCF Discovery is implemented using the WS-Discovery protocol it is interoperable with other clients, services, and proxies that implement WS-Discovery as well.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>WCF Discovery is built upon the existing WCF APIs, which makes it easy to add Discovery functionality to your existing services and clients.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Service discoverability can be easily added through the application configuration settings.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In addition, WCF Discovery also supports using the discovery protocol over other transports such as peer net, naming overlay, and HTTP.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>WCF Discovery provides support for a Managed mode of operation where a discovery proxy is used.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This can reduce network traffic as messages are sent directly to the discovery proxy instead of sending multicast messages to the entire network.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>WCF Discovery also allows for more flexibility when working with Web services.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, you can change the address of a service without having to reconfigure the client or the service.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When a client must access the service it can issue a <ph id="ph1">`Probe`</ph> message through a <ph id="ph2">`Find`</ph> request and expect the service to respond with its current address.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>WCF Discovery allows a client to search for a service based on different criteria including contract types, binding elements, namespace, scope, and keywords or version numbers.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>WCF Discovery enables runtime and design time discovery.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Adding discovery to your application can be used to enable other scenarios such as fault tolerance and auto configuration.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Service Publication</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To make a service discoverable, a <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior&gt;</ph> must be added to the service host and a discovery endpoint must be added to specify where to listen for discovery messages.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following code example shows how a self-hosted service can be modified to make it discoverable.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior&gt;</ph> instance must be added to a service description for the service to be discoverable.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.DiscoveryEndpoint&gt;</ph> instance must be added to the service host to tell the service where to listen for discovery requests.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In this example, a <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.UdpDiscoveryEndpoint&gt;</ph> (which is derived from <ph id="ph2">&lt;xref:System.ServiceModel.Discovery.DiscoveryEndpoint&gt;</ph>) is added to specify that the service should listen for discovery requests over the UDP multicast transport.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.UdpDiscoveryEndpoint&gt;</ph> is used for Ad-Hoc discovery because all messages are sent in a multicast fashion.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Announcement</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>By default, service publication does not send out announcement messages.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The service must be configured to send out announcement messages.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This provides additional flexibility for service writers because they can announce the service separately from listening for discovery messages.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Service announcement can also be used as a mechanism for registering services with a discovery proxy or other service registries.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following code shows how to configure a service to send announcement messages over a UDP binding.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Service Discovery</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A client application can use the <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.DiscoveryClient&gt;</ph> class to find services.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The developer creates an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.DiscoveryClient&gt;</ph> class that passes in a discovery endpoint that specifies where to send <ph id="ph2">`Probe`</ph> or <ph id="ph3">`Resolve`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The client then calls <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.DiscoveryClient.Find%2A&gt;</ph> that specifies search criteria within a <ph id="ph2">&lt;xref:System.ServiceModel.Discovery.FindCriteria&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If matching services are found, <ph id="ph1">&lt;xref:System.ServiceModel.Discovery.DiscoveryClient.Find%2A&gt;</ph> returns a collection of <ph id="ph2">&lt;xref:System.ServiceModel.Discovery.EndpointDiscoveryMetadata&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following code shows how to call the <ph id="ph1">`Find`</ph> method and then connect to a discovered service.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Discovery and Message Level Security</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When using message level security it is necessary to specify an <ph id="ph1">&lt;xref:System.ServiceModel.EndpointIdentity&gt;</ph> on the service discovery endpoint and a matching <ph id="ph2">&lt;xref:System.ServiceModel.EndpointIdentity&gt;</ph> on the client discovery endpoint.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> message level security, see <bpt id="p1">[</bpt>Message Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/message-security-in-wcf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Discovery and Web Hosted Services</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In order for WCF services to be discoverable they must be running.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>WCF services hosted under IIS or WAS do not run until IIS/WAS receives a message bound for the service, so they cannot be discoverable by default.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>There are two options for making Web-Hosted services discoverable:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Use the Windows Server AppFabric Auto-Start feature</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Use a discovery proxy to communicate on behalf of the service</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Windows Server AppFabric has an Auto-Start feature that will allow a service to be started before receiving any messages.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>With this Auto-Start set, an IIS/WAS hosted service can be configured to be discoverable.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> the Auto-Start feature see, <bpt id="p1">[</bpt>Windows Server AppFabric Auto-Start Feature<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=205545)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Along with turning on the Auto-Start feature, you must configure the service for discovery.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: Programmatically Add Discoverability to a WCF Service and Client<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-programmatically-add-discoverability-to-a-wcf-service-and-client.md)</ept><bpt id="p2">[</bpt>Configuring Discovery in a Configuration File<ept id="p2">](../../../../docs/framework/wcf/feature-details/configuring-discovery-in-a-configuration-file.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A discovery proxy can be used to communicate on behalf of the WCF service when the service is not running.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The proxy can listen for probe or resolve messages and respond to the client.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The client can then send messages directly to the service.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When the client sends a message to the service it will be instantiated to respond to the message.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> implementing a discovery proxy see, <bpt id="p1">[</bpt>Implementing a Discovery Proxy<ept id="p1">](../../../../docs/framework/wcf/feature-details/implementing-a-discovery-proxy.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For WCF Discovery to work correctly, all NICs (Network Interface Controller) should only have 1 IP address.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>