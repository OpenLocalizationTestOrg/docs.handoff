<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2563a334248740ff1bd4fc49662229d8f3bf27e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\developing-apps\programming\log-info\walkthrough-changing-where-my-application-log-writes-information.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb77ac855ef93ee50a2f892dc2bc6b4d83ca467e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c68316f8a4794f29c1590d433dd990a159d44dbe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Changing Where My.Application.Log Writes Information (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Changing Where My.Application.Log Writes Information (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`My.Application.Log`</ph> and <ph id="ph2">`My.Log`</ph> objects to log information about events that occur in your application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This walkthrough shows how to override the default settings and cause the <ph id="ph1">`Log`</ph> object to write to other log listeners.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Log`</ph> object can write information to several log listeners.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You need to determine the current configuration of the log listeners before changing the configurations.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id="p1">](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You may want to review <bpt id="p1">[</bpt>How to: Write Event Information to a Text File<ept id="p1">](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-event-information-to-a-text-file.md)</ept> or <bpt id="p2">[</bpt>How to: Write to an Application Event Log<ept id="p2">](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-to-an-application-event-log.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To add listeners</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Right-click app.config in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> and choose <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If there is no app.config file:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Add New Item<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, select <bpt id="p2">**</bpt>Application Configuration File<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`&lt;listeners&gt;`</ph> section, under the <ph id="ph2">`&lt;source&gt;`</ph> section with the <ph id="ph3">`name`</ph> attribute "DefaultSource", in the <ph id="ph4">`&lt;sources&gt;`</ph> section.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;sources&gt;`</ph> section is in the <ph id="ph2">`&lt;system.diagnostics&gt;`</ph> section, in the top-level <ph id="ph3">`&lt;configuration&gt;`</ph> section.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Add these elements to that <ph id="ph1">`&lt;listeners&gt;`</ph> section.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Uncomment the log listeners that you want to receive <ph id="ph1">`Log`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`&lt;sharedListeners&gt;`</ph> section, in the <ph id="ph2">`&lt;system.diagnostics&gt;`</ph> section, in the top-level <ph id="ph3">`&lt;configuration&gt;`</ph> section.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Add these elements to that <ph id="ph1">`&lt;sharedListeners&gt;`</ph> section.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The content of the app.config file should be similar to the following XML:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To reconfigure a listener</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Locate the listener's <ph id="ph1">`&lt;add&gt;`</ph> element from the <ph id="ph2">`&lt;sharedListeners&gt;`</ph> section.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`type`</ph> attribute gives the name of the listener type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This type must inherit from the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use the strongly named type name to ensure that the right type is used.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see the "To reference a strongly named type" section below.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Some types that you can use are:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener?displayProperty=fullName&gt;</ph> listener, which writes to a file log.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.EventLogTraceListener?displayProperty=fullName&gt;</ph> listener, which writes information to the computer event log specified by the <ph id="ph2">`initializeData`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DelimitedListTraceListener?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.XmlWriterTraceListener?displayProperty=fullName&gt;</ph> listeners, which write to the file specified in the <ph id="ph3">`initializeData`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener?displayProperty=fullName&gt;</ph> listener, which writes to the command-line console.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For information about where other types of log listeners write information, consult that type's documentation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When the application creates the log-listener object, it passes the <ph id="ph1">`initializeData`</ph> attribute as the constructor parameter.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The meaning of the <ph id="ph1">`initializeData`</ph> attribute depends on the trace listener.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After creating the log listener, the application sets the listener's properties.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>These properties are defined by the other attributes in the <ph id="ph1">`&lt;add&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information on the properties for a particular listener, see the documentation for that listener's type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To reference a strongly named type</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To ensure that the right type is used for your log listener, make sure to use the fully qualified type name and the strongly named assembly name.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The syntax of a strongly named type is as follows:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>type name<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph><bpt id="p2">*</bpt>assembly name<ept id="p2">*</ept>&gt;, <ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>version number<ept id="p3">*</ept>&gt;, <ph id="ph4">\&lt;</ph><bpt id="p4">*</bpt>culture<ept id="p4">*</ept>&gt;, <ph id="ph5">\&lt;</ph><bpt id="p5">*</bpt>strong name<ept id="p5">*</ept><ph id="ph6">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This code example shows how to determine the strongly named type name for a fully qualified type—"System.Diagnostics.FileLogTraceListener" in this case.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrMyApplicationLog#15<ept id="p2">](../../../../visual-basic/developing-apps/programming/log-info/codesnippet/VisualBasic/walkthrough-changing-where-my-application-log-writes-information_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is the output, and it can be used to uniquely reference a strongly named type, as in the "To add listeners" procedure above.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Write Event Information to a Text File<ept id="p1">](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-event-information-to-a-text-file.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Write to an Application Event Log<ept id="p1">](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-to-an-application-event-log.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>