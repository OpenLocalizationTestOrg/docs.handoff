{"content":"---\ntitle: \"Function Procedures (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Function procedures\"\n  - \"return values [Visual Basic], function procedures\"\n  - \"Visual Basic code, procedures\"\n  - \"procedures [Visual Basic], calling\"\n  - \"procedures [Visual Basic], Function procedures\"\n  - \"syntax [Visual Basic], function procedures\"\nms.assetid: 1b9f632c-553b-4cb6-920a-ded117ead8c0\n---\n# Function Procedures (Visual Basic)\nA `Function` procedure is a series of Visual Basic statements enclosed by the `Function` and `End Function` statements. The `Function` procedure performs a task and then returns control to the calling code. When it returns control, it also returns a value to the calling code.  \n  \n Each time the procedure is called, its statements run, starting with the first executable statement after the `Function` statement and ending with the first `End Function`, `Exit Function`, or `Return` statement encountered.  \n  \n You can define a `Function` procedure in a module, class, or structure. It is `Public` by default, which means you can call it from anywhere in your application that has access to the module, class, or structure in which you defined it.  \n  \n A `Function` procedure can take arguments, such as constants, variables, or expressions, which are passed to it by the calling code.  \n  \n## Declaration Syntax  \n The syntax for declaring a `Function` procedure is as follows:  \n  \n```vb  \n[Modifiers] Function FunctionName [(ParameterList)] As ReturnType  \n    [Statements]  \nEnd Function  \n```  \n  \n The *modifiers* can specify access level and information regarding overloading, overriding, sharing, and shadowing. For more information, see [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md).  \n  \n You declare each parameter the same way you do for [Sub Procedures](./sub-procedures.md).  \n  \n### Data Type  \n Every `Function` procedure has a data type, just as every variable does. This data type is specified by the `As` clause in the `Function` statement, and it determines the data type of the value the function returns to the calling code. The following sample declarations illustrate this.  \n  \n```vb  \nFunction yesterday() As Date  \nEnd Function  \n  \nFunction findSqrt(ByVal radicand As Single) As Single  \nEnd Function  \n```  \n  \n For more information, see \"Parts\" in [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md).  \n  \n## Returning Values  \n The value a `Function` procedure sends back to the calling code is called its return value. The procedure returns this value in one of two ways:  \n  \n-   It uses the `Return` statement to specify the return value, and returns control immediately to the calling program. The following example illustrates this.  \n  \n```vb  \nFunction FunctionName [(ParameterList)] As ReturnType  \n    ' The following statement immediately transfers control back  \n    ' to the calling code and returns the value of Expression.  \n    Return Expression  \nEnd Function  \n```  \n  \n-   It assigns a value to its own function name in one or more statements of the procedure. Control does not return to the calling program until an `Exit Function` or `End Function` statement is executed. The following example illustrates this.  \n  \n```vb  \nFunction FunctionName [(ParameterList)] As ReturnType  \n    ' The following statement does not transfer control back to the calling code.  \n    FunctionName = Expression  \n    ' When control returns to the calling code, Expression is the return value.  \nEnd Function  \n```  \n  \n The advantage of assigning the return value to the function name is that control does not return from the procedure until it encounters an `Exit Function` or `End Function` statement. This allows you to assign a preliminary value and adjust it later if necessary.  \n  \n For more information about returning values, see [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md). For information about returning arrays, see [Arrays](../../../../visual-basic/programming-guide/language-features/arrays/index.md).  \n  \n## Calling Syntax  \n You invoke a `Function` procedure by including its name and arguments either on the right side of an assignment statement or in an expression. You must provide values for all arguments that are not optional, and you must enclose the argument list in parentheses. If no arguments are supplied, you can optionally omit the parentheses.  \n  \n The syntax for a call to a `Function` procedure is as follows:  \n  \n *lvalue*  `=`  *functionname* `[(` *argumentlist* `)]`  \n  \n `If ((` *functionname* `[(` *argumentlist* `)] / 3) <=`  *expression* `) Then`  \n  \n When you call a `Function` procedure, you do not have to use its return value. If you do not, all the actions of the function are performed, but the return value is ignored. <xref:Microsoft.VisualBasic.Interaction.MsgBox%2A> is often called in this manner.  \n  \n### Illustration of Declaration and Call  \n The following `Function` procedure calculates the longest side, or hypotenuse, of a right triangle, given the values for the other two sides.  \n  \n [!code-vb[VbVbcnProcedures#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnProcedures/VB/Class1.vb#1)]  \n  \n The following example shows a typical call to `hypotenuse`.  \n  \n [!code-vb[VbVbcnProcedures#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnProcedures/VB/Class1.vb#6)]  \n  \n## See also\n\n- [Procedures](./index.md)\n- [Sub Procedures](./sub-procedures.md)\n- [Property Procedures](./property-procedures.md)\n- [Operator Procedures](./operator-procedures.md)\n- [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)\n- [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md)\n- [How to: Create a Procedure that Returns a Value](./how-to-create-a-procedure-that-returns-a-value.md)\n- [How to: Return a Value from a Procedure](./how-to-return-a-value-from-a-procedure.md)\n- [How to: Call a Procedure That Returns a Value](./how-to-call-a-procedure-that-returns-a-value.md)\n","nodes":[{"pos":[4,399],"embed":true,"restype":"x-metadata","content":"title: \"Function Procedures (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Function procedures\"\n  - \"return values [Visual Basic], function procedures\"\n  - \"Visual Basic code, procedures\"\n  - \"procedures [Visual Basic], calling\"\n  - \"procedures [Visual Basic], Function procedures\"\n  - \"syntax [Visual Basic], function procedures\"\nms.assetid: 1b9f632c-553b-4cb6-920a-ded117ead8c0","nodes":[{"content":"Function Procedures (Visual Basic)","nodes":[{"pos":[0,34],"content":"Function Procedures (Visual Basic)","nodes":[{"content":"Function Procedures (Visual Basic)","pos":[0,34]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[406,440],"content":"Function Procedures (Visual Basic)","linkify":"Function Procedures (Visual Basic)","nodes":[{"content":"Function Procedures (Visual Basic)","pos":[0,34]}]},{"content":"A <ph id=\"ph1\">`Function`</ph> procedure is a series of Visual Basic statements enclosed by the <ph id=\"ph2\">`Function`</ph> and <ph id=\"ph3\">`End Function`</ph> statements.","pos":[441,560],"source":"A `Function` procedure is a series of Visual Basic statements enclosed by the `Function` and `End Function` statements."},{"content":"The <ph id=\"ph1\">`Function`</ph> procedure performs a task and then returns control to the calling code.","pos":[561,647],"source":" The `Function` procedure performs a task and then returns control to the calling code."},{"content":"When it returns control, it also returns a value to the calling code.","pos":[648,717]},{"pos":[724,948],"content":"Each time the procedure is called, its statements run, starting with the first executable statement after the <ph id=\"ph1\">`Function`</ph> statement and ending with the first <ph id=\"ph2\">`End Function`</ph>, <ph id=\"ph3\">`Exit Function`</ph>, or <ph id=\"ph4\">`Return`</ph> statement encountered.","source":"Each time the procedure is called, its statements run, starting with the first executable statement after the `Function` statement and ending with the first `End Function`, `Exit Function`, or `Return` statement encountered."},{"content":"You can define a <ph id=\"ph1\">`Function`</ph> procedure in a module, class, or structure.","pos":[955,1026],"source":"You can define a `Function` procedure in a module, class, or structure."},{"content":"It is <ph id=\"ph1\">`Public`</ph> by default, which means you can call it from anywhere in your application that has access to the module, class, or structure in which you defined it.","pos":[1027,1191],"source":" It is `Public` by default, which means you can call it from anywhere in your application that has access to the module, class, or structure in which you defined it."},{"pos":[1198,1330],"content":"A <ph id=\"ph1\">`Function`</ph> procedure can take arguments, such as constants, variables, or expressions, which are passed to it by the calling code.","source":"A `Function` procedure can take arguments, such as constants, variables, or expressions, which are passed to it by the calling code."},{"pos":[1339,1357],"content":"Declaration Syntax","linkify":"Declaration Syntax","nodes":[{"content":"Declaration Syntax","pos":[0,18]}]},{"pos":[1361,1423],"content":"The syntax for declaring a <ph id=\"ph1\">`Function`</ph> procedure is as follows:","source":"The syntax for declaring a `Function` procedure is as follows:"},{"content":"The <bpt id=\"p1\">*</bpt>modifiers<ept id=\"p1\">*</ept> can specify access level and information regarding overloading, overriding, sharing, and shadowing.","pos":[1549,1664],"source":"The *modifiers* can specify access level and information regarding overloading, overriding, sharing, and shadowing."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.","pos":[1665,1790],"source":" For more information, see [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md)."},{"pos":[1797,1886],"content":"You declare each parameter the same way you do for <bpt id=\"p1\">[</bpt>Sub Procedures<ept id=\"p1\">](./sub-procedures.md)</ept>.","source":"You declare each parameter the same way you do for [Sub Procedures](./sub-procedures.md)."},{"pos":[1896,1905],"content":"Data Type","linkify":"Data Type","nodes":[{"content":"Data Type","pos":[0,9]}]},{"content":"Every <ph id=\"ph1\">`Function`</ph> procedure has a data type, just as every variable does.","pos":[1909,1981],"source":"Every `Function` procedure has a data type, just as every variable does."},{"content":"This data type is specified by the <ph id=\"ph1\">`As`</ph> clause in the <ph id=\"ph2\">`Function`</ph> statement, and it determines the data type of the value the function returns to the calling code.","pos":[1982,2144],"source":" This data type is specified by the `As` clause in the `Function` statement, and it determines the data type of the value the function returns to the calling code."},{"content":"The following sample declarations illustrate this.","pos":[2145,2195]},{"pos":[2339,2475],"content":"For more information, see \"Parts\" in <bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.","source":"For more information, see \"Parts\" in [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md)."},{"pos":[2484,2500],"content":"Returning Values","linkify":"Returning Values","nodes":[{"content":"Returning Values","pos":[0,16]}]},{"content":"The value a <ph id=\"ph1\">`Function`</ph> procedure sends back to the calling code is called its return value.","pos":[2504,2595],"source":"The value a `Function` procedure sends back to the calling code is called its return value."},{"content":"The procedure returns this value in one of two ways:","pos":[2596,2648]},{"content":"It uses the <ph id=\"ph1\">`Return`</ph> statement to specify the return value, and returns control immediately to the calling program.","pos":[2658,2773],"source":"It uses the `Return` statement to specify the return value, and returns control immediately to the calling program."},{"content":"The following example illustrates this.","pos":[2774,2813]},{"content":"It assigns a value to its own function name in one or more statements of the procedure.","pos":[3067,3154]},{"content":"Control does not return to the calling program until an <ph id=\"ph1\">`Exit Function`</ph> or <ph id=\"ph2\">`End Function`</ph> statement is executed.","pos":[3155,3267],"source":" Control does not return to the calling program until an `Exit Function` or `End Function` statement is executed."},{"content":"The following example illustrates this.","pos":[3268,3307]},{"content":"The advantage of assigning the return value to the function name is that control does not return from the procedure until it encounters an <ph id=\"ph1\">`Exit Function`</ph> or <ph id=\"ph2\">`End Function`</ph> statement.","pos":[3600,3783],"source":"The advantage of assigning the return value to the function name is that control does not return from the procedure until it encounters an `Exit Function` or `End Function` statement."},{"content":"This allows you to assign a preliminary value and adjust it later if necessary.","pos":[3784,3863]},{"content":"For more information about returning values, see <bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.","pos":[3870,4018],"source":"For more information about returning values, see [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md)."},{"content":"For information about returning arrays, see <bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.","pos":[4019,4150],"source":" For information about returning arrays, see [Arrays](../../../../visual-basic/programming-guide/language-features/arrays/index.md)."},{"pos":[4159,4173],"content":"Calling Syntax","linkify":"Calling Syntax","nodes":[{"content":"Calling Syntax","pos":[0,14]}]},{"content":"You invoke a <ph id=\"ph1\">`Function`</ph> procedure by including its name and arguments either on the right side of an assignment statement or in an expression.","pos":[4177,4319],"source":"You invoke a `Function` procedure by including its name and arguments either on the right side of an assignment statement or in an expression."},{"content":"You must provide values for all arguments that are not optional, and you must enclose the argument list in parentheses.","pos":[4320,4439]},{"content":"If no arguments are supplied, you can optionally omit the parentheses.","pos":[4440,4510]},{"pos":[4517,4579],"content":"The syntax for a call to a <ph id=\"ph1\">`Function`</ph> procedure is as follows:","source":"The syntax for a call to a `Function` procedure is as follows:"},{"pos":[4586,4640],"content":"<bpt id=\"p1\">*</bpt>lvalue<ept id=\"p1\">*</ept>  <ph id=\"ph1\">`=`</ph>  <bpt id=\"p2\">*</bpt>functionname<ept id=\"p2\">*</ept> <ph id=\"ph2\">`[(`</ph> <bpt id=\"p3\">*</bpt>argumentlist<ept id=\"p3\">*</ept> <ph id=\"ph3\">`)]`</ph>","source":"*lvalue*  `=`  *functionname* `[(` *argumentlist* `)]`"},{"pos":[4647,4725],"content":"<ph id=\"ph1\">`If ((`</ph> <bpt id=\"p1\">*</bpt>functionname<ept id=\"p1\">*</ept> <ph id=\"ph2\">`[(`</ph> <bpt id=\"p2\">*</bpt>argumentlist<ept id=\"p2\">*</ept> <ph id=\"ph3\">`)] / 3) &lt;=`</ph>  <bpt id=\"p3\">*</bpt>expression<ept id=\"p3\">*</ept> <ph id=\"ph4\">`) Then`</ph>","source":"`If ((` *functionname* `[(` *argumentlist* `)] / 3) <=`  *expression* `) Then`"},{"content":"When you call a <ph id=\"ph1\">`Function`</ph> procedure, you do not have to use its return value.","pos":[4732,4810],"source":"When you call a `Function` procedure, you do not have to use its return value."},{"content":"If you do not, all the actions of the function are performed, but the return value is ignored.","pos":[4811,4905]},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;</ph> is often called in this manner.","pos":[4906,4988],"source":"<xref:Microsoft.VisualBasic.Interaction.MsgBox%2A> is often called in this manner."},{"pos":[4998,5034],"content":"Illustration of Declaration and Call","linkify":"Illustration of Declaration and Call","nodes":[{"content":"Illustration of Declaration and Call","pos":[0,36]}]},{"pos":[5038,5179],"content":"The following <ph id=\"ph1\">`Function`</ph> procedure calculates the longest side, or hypotenuse, of a right triangle, given the values for the other two sides.","source":"The following `Function` procedure calculates the longest side, or hypotenuse, of a right triangle, given the values for the other two sides."},{"pos":[5308,5367],"content":"The following example shows a typical call to <ph id=\"ph1\">`hypotenuse`</ph>.","source":"The following example shows a typical call to `hypotenuse`."},{"pos":[5498,5506],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5510,5534],"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](./index.md)</ept>","source":"[Procedures](./index.md)"},{"pos":[5537,5574],"content":"<bpt id=\"p1\">[</bpt>Sub Procedures<ept id=\"p1\">](./sub-procedures.md)</ept>","source":"[Sub Procedures](./sub-procedures.md)"},{"pos":[5577,5624],"content":"<bpt id=\"p1\">[</bpt>Property Procedures<ept id=\"p1\">](./property-procedures.md)</ept>","source":"[Property Procedures](./property-procedures.md)"},{"pos":[5627,5674],"content":"<bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](./operator-procedures.md)</ept>","source":"[Operator Procedures](./operator-procedures.md)"},{"pos":[5677,5754],"content":"<bpt id=\"p1\">[</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](./procedure-parameters-and-arguments.md)</ept>","source":"[Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)"},{"pos":[5757,5855],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[5858,5960],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Procedure that Returns a Value<ept id=\"p1\">](./how-to-create-a-procedure-that-returns-a-value.md)</ept>","source":"[How to: Create a Procedure that Returns a Value](./how-to-create-a-procedure-that-returns-a-value.md)"},{"pos":[5963,6049],"content":"<bpt id=\"p1\">[</bpt>How to: Return a Value from a Procedure<ept id=\"p1\">](./how-to-return-a-value-from-a-procedure.md)</ept>","source":"[How to: Return a Value from a Procedure](./how-to-return-a-value-from-a-procedure.md)"},{"pos":[6052,6150],"content":"<bpt id=\"p1\">[</bpt>How to: Call a Procedure That Returns a Value<ept id=\"p1\">](./how-to-call-a-procedure-that-returns-a-value.md)</ept>","source":"[How to: Call a Procedure That Returns a Value](./how-to-call-a-procedure-that-returns-a-value.md)"}]}