{"content":"---\ntitle: \"Calling a DLL Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"unmanaged functions, calling\"\n  - \"unmanaged functions\"\n  - \"COM interop, platform invoke\"\n  - \"platform invoke, calling unmanaged functions\"\n  - \"interoperation with unmanaged code, platform invoke\"\n  - \"DLL functions\"\nms.assetid: 113646de-7ea0-4f0e-8df0-c46dab3e8733\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Calling a DLL Function\nAlthough calling unmanaged DLL functions is nearly identical to calling other managed code, there are differences that can make DLL functions seem confusing at first. This section introduces topics that describe some of the unusual calling-related issues.  \n  \n Structures that are returned from platform invoke calls must be data types that have the same representation in managed and unmanaged code. Such types are called *blittable types* because they do not require conversion (see [Blittable and Non-Blittable Types](../../../docs/framework/interop/blittable-and-non-blittable-types.md)). To call a function that has a non-blittable structure as its return type, you can define a blittable helper type of the same size as the non-blittable type and convert the data after the function returns.  \n  \n## In This Section  \n [Passing Structures](../../../docs/framework/interop/passing-structures.md)  \n Identifies the issues of passing data structures with a predefined layout.  \n  \n [Callback Functions](../../../docs/framework/interop/callback-functions.md)  \n Provides basic information about callback functions.  \n  \n [How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md)  \n Describes how to implement callback functions in managed code.  \n  \n## Related Sections  \n [Consuming Unmanaged DLL Functions](../../../docs/framework/interop/consuming-unmanaged-dll-functions.md)  \n Describes how to call unmanaged DLL functions using platform invoke.  \n  \n [Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)  \n Describes how to declare method parameters and pass arguments to functions exported by unmanaged libraries.","nodes":[{"pos":[12,51],"content":"Calling a DLL Function | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling a DLL Function | Microsoft Docs","pos":[0,39]}]},{"pos":[659,681],"content":"Calling a DLL Function","linkify":"Calling a DLL Function","nodes":[{"content":"Calling a DLL Function","pos":[0,22]}]},{"content":"Although calling unmanaged DLL functions is nearly identical to calling other managed code, there are differences that can make DLL functions seem confusing at first.","pos":[682,848]},{"content":"This section introduces topics that describe some of the unusual calling-related issues.","pos":[849,937]},{"content":"Structures that are returned from platform invoke calls must be data types that have the same representation in managed and unmanaged code.","pos":[944,1083]},{"content":"Such types are called <bpt id=\"p1\">*</bpt>blittable types<ept id=\"p1\">*</ept> because they do not require conversion (see <bpt id=\"p2\">[</bpt>Blittable and Non-Blittable Types<ept id=\"p2\">](../../../docs/framework/interop/blittable-and-non-blittable-types.md)</ept>).","pos":[1084,1275],"source":" Such types are called *blittable types* because they do not require conversion (see [Blittable and Non-Blittable Types](../../../docs/framework/interop/blittable-and-non-blittable-types.md))."},{"content":"To call a function that has a non-blittable structure as its return type, you can define a blittable helper type of the same size as the non-blittable type and convert the data after the function returns.","pos":[1276,1480]},{"pos":[1489,1504],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>Passing Structures<ept id=\"p1\">](../../../docs/framework/interop/passing-structures.md)</ept>","pos":[1508,1583],"source":"[Passing Structures](../../../docs/framework/interop/passing-structures.md)"},{"content":"Identifies the issues of passing data structures with a predefined layout.","pos":[1587,1661]},{"content":"<bpt id=\"p1\">[</bpt>Callback Functions<ept id=\"p1\">](../../../docs/framework/interop/callback-functions.md)</ept>","pos":[1668,1743],"source":"[Callback Functions](../../../docs/framework/interop/callback-functions.md)"},{"content":"Provides basic information about callback functions.","pos":[1747,1799]},{"content":"<bpt id=\"p1\">[</bpt>How to: Implement Callback Functions<ept id=\"p1\">](../../../docs/framework/interop/how-to-implement-callback-functions.md)</ept>","pos":[1806,1916],"source":"[How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md)"},{"content":"Describes how to implement callback functions in managed code.","pos":[1920,1982]},{"pos":[1991,2007],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"<bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](../../../docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>","pos":[2011,2116],"source":"[Consuming Unmanaged DLL Functions](../../../docs/framework/interop/consuming-unmanaged-dll-functions.md)"},{"content":"Describes how to call unmanaged DLL functions using platform invoke.","pos":[2120,2188]},{"content":"<bpt id=\"p1\">[</bpt>Marshaling Data with Platform Invoke<ept id=\"p1\">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept>","pos":[2195,2306],"source":"[Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)"},{"content":"Describes how to declare method parameters and pass arguments to functions exported by unmanaged libraries.","pos":[2310,2417]}]}