{"content":"---\ntitle: \"How to: Stream XML Fragments from an XmlReader (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: f67ce598-4a12-4dcb-9a07-24deca02a111\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Stream XML Fragments from an XmlReader (Visual Basic)\nWhen you have to process large XML files, it might not be feasible to load the whole XML tree into memory. This topic shows how to stream fragments using an <xref:System.Xml.XmlReader>.  \n  \n One of the most effective ways to use an <xref:System.Xml.XmlReader> to read <xref:System.Xml.Linq.XElement> objects is to write your own custom axis method. An axis method typically returns a collection such as <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, as shown in the example in this topic. In the custom axis method, after you create the XML fragment by calling the <xref:System.Xml.Linq.XNode.ReadFrom%2A> method, return the collection using `yield return`. This provides deferred execution semantics to your custom axis method.  \n  \n When you create an XML tree from an <xref:System.Xml.XmlReader> object, the <xref:System.Xml.XmlReader> must be positioned on an element. The <xref:System.Xml.Linq.XNode.ReadFrom%2A> method does not return until it has read the close tag of the element.  \n  \n If you want to create a partial tree, you can instantiate an <xref:System.Xml.XmlReader>, position the reader on the node that you want to convert to an <xref:System.Xml.Linq.XElement> tree, and then create the <xref:System.Xml.Linq.XElement> object.  \n  \n The topic [How to: Stream XML Fragments with Access to Header Information (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md) contains information and an example on how to stream a more complex document.  \n  \n The topic [How to: Perform Streaming Transform of Large XML Documents (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md) contains an example of using LINQ to XML to transform extremely large XML documents while maintaining a small memory footprint.  \n  \n## Example  \n This example creates a custom axis method. You can query it by using a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query. The custom axis method, `StreamRootChildDoc`, is a method that is designed specifically to read a document that has a repeating `Child` element.  \n  \n```vb  \nModule Module1  \n    Sub Main()  \n        Dim markup = \"<Root>\" &  \n                     \"  <Child Key=\"\"01\"\">\" &  \n                     \"    <GrandChild>aaa</GrandChild>\" &  \n                     \"  </Child>\" &  \n                     \"  <Child Key=\"\"02\"\">\" &  \n                     \"    <GrandChild>bbb</GrandChild>\" &  \n                     \"  </Child>\" &  \n                     \"  <Child Key=\"\"03\"\">\" &  \n                     \"    <GrandChild>ccc</GrandChild>\" &  \n                     \"  </Child>\" &  \n                     \"</Root>\"  \n  \n        Dim grandChildData =  \n             From el In New StreamRootChildDoc(New IO.StringReader(markup))  \n             Where CInt(el.@Key) > 1  \n             Select el.<GrandChild>.Value  \n  \n        For Each s In grandChildData  \n            Console.WriteLine(s)  \n        Next  \n    End Sub  \nEnd Module  \n  \nPublic Class StreamRootChildDoc  \n    Implements IEnumerable(Of XElement)  \n  \n    Private _stringReader As IO.StringReader  \n  \n    Public Sub New(ByVal stringReader As IO.StringReader)  \n        _stringReader = stringReader  \n    End Sub  \n  \n    Public Function GetEnumerator() As IEnumerator(Of XElement) Implements IEnumerable(Of XElement).GetEnumerator  \n        Return New StreamChildEnumerator(_stringReader)  \n    End Function  \n  \n    Public Function GetEnumerator1() As IEnumerator Implements IEnumerable.GetEnumerator  \n        Return Me.GetEnumerator()  \n    End Function  \nEnd Class  \n  \nPublic Class StreamChildEnumerator  \n    Implements IEnumerator(Of XElement)  \n  \n    Private _current As XElement  \n    Private _reader As Xml.XmlReader  \n    Private _stringReader As IO.StringReader  \n  \n    Public Sub New(ByVal stringReader As IO.StringReader)  \n        _stringReader = stringReader  \n        _reader = Xml.XmlReader.Create(_stringReader)  \n        _reader.MoveToContent()  \n    End Sub  \n  \n    Public ReadOnly Property Current As XElement Implements IEnumerator(Of XElement).Current  \n        Get  \n            Return _current  \n        End Get  \n    End Property  \n  \n    Public ReadOnly Property Current1 As Object Implements IEnumerator.Current  \n        Get  \n            Return Me.Current  \n        End Get  \n    End Property  \n  \n    Public Function MoveNext() As Boolean Implements IEnumerator.MoveNext  \n        While _reader.Read()  \n            Select Case _reader.NodeType  \n                Case Xml.XmlNodeType.Element  \n                    Dim el = TryCast(XElement.ReadFrom(_reader), XElement)  \n                    If el IsNot Nothing Then  \n                        _current = el  \n                        Return True  \n                    End If  \n            End Select  \n        End While  \n  \n        Return False  \n    End Function  \n  \n    Public Sub Reset() Implements IEnumerator.Reset  \n        _reader = Xml.XmlReader.Create(_stringReader)  \n        _reader.MoveToContent()  \n    End Sub  \n  \n#Region \"IDisposable Support\"  \n    Private disposedValue As Boolean ' To detect redundant calls  \n  \n    ' IDisposable  \n    Protected Overridable Sub Dispose(ByVal disposing As Boolean)  \n        If Not Me.disposedValue Then  \n            If disposing Then  \n                _reader.Close()  \n            End If  \n        End If  \n        Me.disposedValue = True  \n    End Sub  \n  \n    Public Sub Dispose() Implements IDisposable.Dispose  \n        Dispose(True)  \n        GC.SuppressFinalize(Me)  \n    End Sub  \n#End Region  \n  \nEnd Class  \n```  \n  \n This example produces the following output:  \n  \n```  \nbbb  \nccc  \n```  \n  \n In this example, the source document is very small. However, even if there were millions of `Child` elements, this example would still have a small memory footprint.  \n  \n## See Also  \n [Walkthrough: Implementing IEnumerable(Of T) in Visual Basic](../../../../visual-basic/programming-guide/language-features/control-flow/walkthrough-implementing-ienumerable-of-t.md)   \n [Parsing XML (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/parsing-xml.md)","nodes":[{"pos":[4,464],"nodes":[{"content":"How to: Stream XML Fragments from an XmlReader (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,78],"content":"How to: Stream XML Fragments from an XmlReader (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Stream XML Fragments from an XmlReader (Visual Basic) | Microsoft Docs","pos":[0,78]}]}],"pos":[6,87],"yaml":true}],"content":"title: \"How to: Stream XML Fragments from an XmlReader (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: f67ce598-4a12-4dcb-9a07-24deca02a111\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[471,532],"content":"How to: Stream XML Fragments from an XmlReader (Visual Basic)","linkify":"How to: Stream XML Fragments from an XmlReader (Visual Basic)","nodes":[{"content":"How to: Stream XML Fragments from an XmlReader (Visual Basic)","pos":[0,61]}]},{"content":"When you have to process large XML files, it might not be feasible to load the whole XML tree into memory.","pos":[533,639]},{"content":"This topic shows how to stream fragments using an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[640,718],"source":" This topic shows how to stream fragments using an <xref:System.Xml.XmlReader>."},{"content":"One of the most effective ways to use an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> to read <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects is to write your own custom axis method.","pos":[725,882],"source":"One of the most effective ways to use an <xref:System.Xml.XmlReader> to read <xref:System.Xml.Linq.XElement> objects is to write your own custom axis method."},{"content":"An axis method typically returns a collection such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, as shown in the example in this topic.","pos":[883,1061],"source":" An axis method typically returns a collection such as <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, as shown in the example in this topic."},{"content":"In the custom axis method, after you create the XML fragment by calling the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph> method, return the collection using <ph id=\"ph2\">`yield return`</ph>.","pos":[1062,1230],"source":" In the custom axis method, after you create the XML fragment by calling the <xref:System.Xml.Linq.XNode.ReadFrom%2A> method, return the collection using `yield return`."},{"content":"This provides deferred execution semantics to your custom axis method.","pos":[1231,1301]},{"content":"When you create an XML tree from an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> object, the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> must be positioned on an element.","pos":[1308,1445],"source":"When you create an XML tree from an <xref:System.Xml.XmlReader> object, the <xref:System.Xml.XmlReader> must be positioned on an element."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph> method does not return until it has read the close tag of the element.","pos":[1446,1561],"source":" The <xref:System.Xml.Linq.XNode.ReadFrom%2A> method does not return until it has read the close tag of the element."},{"content":"If you want to create a partial tree, you can instantiate an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>, position the reader on the node that you want to convert to an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> tree, and then create the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object.","pos":[1568,1818],"source":"If you want to create a partial tree, you can instantiate an <xref:System.Xml.XmlReader>, position the reader on the node that you want to convert to an <xref:System.Xml.Linq.XElement> tree, and then create the <xref:System.Xml.Linq.XElement> object."},{"pos":[1825,2115],"content":"The topic <bpt id=\"p1\">[</bpt>How to: Stream XML Fragments with Access to Header Information (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept> contains information and an example on how to stream a more complex document.","source":"The topic [How to: Stream XML Fragments with Access to Header Information (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md) contains information and an example on how to stream a more complex document."},{"pos":[2122,2454],"content":"The topic <bpt id=\"p1\">[</bpt>How to: Perform Streaming Transform of Large XML Documents (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md)</ept> contains an example of using LINQ to XML to transform extremely large XML documents while maintaining a small memory footprint.","source":"The topic [How to: Perform Streaming Transform of Large XML Documents (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md) contains an example of using LINQ to XML to transform extremely large XML documents while maintaining a small memory footprint."},{"pos":[2463,2470],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example creates a custom axis method.","pos":[2474,2516]},{"content":"You can query it by using a <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query.","pos":[2517,2618],"source":" You can query it by using a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query."},{"content":"The custom axis method, <ph id=\"ph1\">`StreamRootChildDoc`</ph>, is a method that is designed specifically to read a document that has a repeating <ph id=\"ph2\">`Child`</ph> element.","pos":[2619,2763],"source":" The custom axis method, `StreamRootChildDoc`, is a method that is designed specifically to read a document that has a repeating `Child` element."},{"content":"This example produces the following output:","pos":[6228,6271]},{"content":"In this example, the source document is very small.","pos":[6305,6356]},{"content":"However, even if there were millions of <ph id=\"ph1\">`Child`</ph> elements, this example would still have a small memory footprint.","pos":[6357,6470],"source":" However, even if there were millions of `Child` elements, this example would still have a small memory footprint."},{"pos":[6479,6487],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Implementing IEnumerable(Of T) in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/walkthrough-implementing-ienumerable-of-t.md)</ept><ph id=\"ph1\"> </ph>","pos":[6491,6673],"source":"[Walkthrough: Implementing IEnumerable(Of T) in Visual Basic](../../../../visual-basic/programming-guide/language-features/control-flow/walkthrough-implementing-ienumerable-of-t.md) "},{"content":"<bpt id=\"p1\">[</bpt>Parsing XML (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/parsing-xml.md)</ept>","pos":[6677,6778],"source":"[Parsing XML (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/parsing-xml.md)"}]}