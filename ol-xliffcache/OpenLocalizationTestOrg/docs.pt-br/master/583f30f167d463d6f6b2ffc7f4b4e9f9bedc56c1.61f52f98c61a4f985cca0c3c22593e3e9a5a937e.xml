{"content":"---\ntitle: \"OrElse Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"OrElse\"\n  - \"vb.OrElse\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"short-circuiting\"\n  - \"operators [Visual Basic], short-circuiting\"\n  - \"operators [Visual Basic], disjunction\"\n  - \"short-circuit evaluation\"\n  - \"OrElse operator [Visual Basic]\"\nms.assetid: 253803d8-05b0-47d7-b213-abd222847779\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# OrElse Operator (Visual Basic)\nPerforms short-circuiting inclusive logical disjunction on two expressions.  \n  \n## Syntax  \n  \n```  \n  \nresult = expression1 OrElse expression2  \n```  \n  \n## Parts  \n `result`  \n Required. Any `Boolean` expression.  \n  \n `expression1`  \n Required. Any `Boolean` expression.  \n  \n `expression2`  \n Required. Any `Boolean` expression.  \n  \n## Remarks  \n A logical operation is said to be *short-circuiting* if the compiled code can bypass the evaluation of one expression depending on the result of another expression. If the result of the first expression evaluated determines the final result of the operation, there is no need to evaluate the second expression, because it cannot change the final result. Short-circuiting can improve performance if the bypassed expression is complex, or if it involves procedure calls.  \n  \n If either or both expressions evaluate to `True`, `result` is `True`. The following table illustrates how `result` is determined.  \n  \n|If `expression1` is|And `expression2` is|The value of `result` is|  \n|-------------------------|--------------------------|------------------------------|  \n|`True`|(not evaluated)|`True`|  \n|`False`|`True`|`True`|  \n|`False`|`False`|`False`|  \n  \n## Data Types  \n The `OrElse` operator is defined only for the [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md). Visual Basic converts each operand as necessary to `Boolean` and performs the operation entirely in `Boolean`. If you assign the result to a numeric type, Visual Basic converts it from `Boolean` to that type. This could produce unexpected behavior. For example, `5 OrElse 12` results in `–1` when converted to `Integer`.  \n  \n## Overloading  \n The [Or Operator](../../../visual-basic/language-reference/operators/or-operator.md) and the [IsTrue Operator](../../../visual-basic/language-reference/operators/istrue-operator.md) can be *overloaded*, which means that a class or structure can redefine their behavior when an operand has the type of that class or structure. Overloading the `Or` and `IsTrue` operators affects the behavior of the `OrElse` operator. If your code uses `OrElse` on a class or structure that overloads `Or` and `IsTrue`, be sure you understand their redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `OrElse` operator to perform logical disjunction on two expressions. The result is a `Boolean` value that represents whether either of the two expressions is true. If the first expression is `True`, the second is not evaluated.  \n  \n [!code-vb[VbVbalrOperators#37](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/orelse-operator_1.vb)]  \n  \n The preceding example produces results of `True`, `True`, and `False` respectively. In the calculation of `firstCheck`, the second expression is not evaluated because the first is already `True`. However, the second expression is evaluated in the calculation of `secondCheck`.  \n  \n## Example  \n The following example shows an `If`...`Then` statement containing two procedure calls. If the first call returns `True`, the second procedure is not called. This could produce unexpected results if the second procedure performs important tasks that should always be performed when this section of the code runs.  \n  \n [!code-vb[VbVbalrOperators#38](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/orelse-operator_2.vb)]  \n  \n## See Also  \n [Logical/Bitwise Operators (Visual Basic)](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Or Operator](../../../visual-basic/language-reference/operators/or-operator.md)   \n [IsTrue Operator](../../../visual-basic/language-reference/operators/istrue-operator.md)   \n [Logical and Bitwise Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)","nodes":[{"pos":[12,59],"content":"OrElse Operator (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"OrElse Operator (Visual Basic) | Microsoft Docs","pos":[0,47]}]},{"pos":[768,798],"content":"OrElse Operator (Visual Basic)","linkify":"OrElse Operator (Visual Basic)","nodes":[{"content":"OrElse Operator (Visual Basic)","pos":[0,30]}]},{"content":"Performs short-circuiting inclusive logical disjunction on two expressions.","pos":[799,874]},{"pos":[883,889],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[958,963],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[979,988]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> expression.","pos":[989,1014],"source":" Any `Boolean` expression."},{"content":"Required.","pos":[1038,1047]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> expression.","pos":[1048,1073],"source":" Any `Boolean` expression."},{"content":"Required.","pos":[1097,1106]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> expression.","pos":[1107,1132],"source":" Any `Boolean` expression."},{"pos":[1141,1148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A logical operation is said to be <bpt id=\"p1\">*</bpt>short-circuiting<ept id=\"p1\">*</ept> if the compiled code can bypass the evaluation of one expression depending on the result of another expression.","pos":[1152,1316],"source":"A logical operation is said to be *short-circuiting* if the compiled code can bypass the evaluation of one expression depending on the result of another expression."},{"content":"If the result of the first expression evaluated determines the final result of the operation, there is no need to evaluate the second expression, because it cannot change the final result.","pos":[1317,1505]},{"content":"Short-circuiting can improve performance if the bypassed expression is complex, or if it involves procedure calls.","pos":[1506,1620]},{"content":"If either or both expressions evaluate to <ph id=\"ph1\">`True`</ph>, <ph id=\"ph2\">`result`</ph> is <ph id=\"ph3\">`True`</ph>.","pos":[1627,1696],"source":"If either or both expressions evaluate to `True`, `result` is `True`."},{"content":"The following table illustrates how <ph id=\"ph1\">`result`</ph> is determined.","pos":[1697,1756],"source":" The following table illustrates how `result` is determined."},{"pos":[1763,1782],"content":"If <ph id=\"ph1\">`expression1`</ph> is","source":"If `expression1` is"},{"pos":[1783,1803],"content":"And <ph id=\"ph1\">`expression2`</ph> is","source":"And `expression2` is"},{"pos":[1804,1828],"content":"The value of <ph id=\"ph1\">`result`</ph> is","source":"The value of `result` is"},{"content":"(not evaluated)","pos":[1928,1943]},{"pos":[2014,2024],"content":"Data Types","linkify":"Data Types","nodes":[{"content":"Data Types","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`OrElse`</ph> operator is defined only for the <bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept>.","pos":[2028,2168],"source":"The `OrElse` operator is defined only for the [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)."},{"content":"Visual Basic converts each operand as necessary to <ph id=\"ph1\">`Boolean`</ph> and performs the operation entirely in <ph id=\"ph2\">`Boolean`</ph>.","pos":[2169,2279],"source":" Visual Basic converts each operand as necessary to `Boolean` and performs the operation entirely in `Boolean`."},{"content":"If you assign the result to a numeric type, Visual Basic converts it from <ph id=\"ph1\">`Boolean`</ph> to that type.","pos":[2280,2377],"source":" If you assign the result to a numeric type, Visual Basic converts it from `Boolean` to that type."},{"content":"This could produce unexpected behavior.","pos":[2378,2417]},{"content":"For example, <ph id=\"ph1\">`5 OrElse 12`</ph> results in <ph id=\"ph2\">`–1`</ph> when converted to <ph id=\"ph3\">`Integer`</ph>.","pos":[2418,2489],"source":" For example, `5 OrElse 12` results in `–1` when converted to `Integer`."},{"pos":[2498,2509],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>Or Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/or-operator.md)</ept> and the <bpt id=\"p2\">[</bpt>IsTrue Operator<ept id=\"p2\">](../../../visual-basic/language-reference/operators/istrue-operator.md)</ept> can be <bpt id=\"p3\">*</bpt>overloaded<ept id=\"p3\">*</ept>, which means that a class or structure can redefine their behavior when an operand has the type of that class or structure.","pos":[2513,2838],"source":"The [Or Operator](../../../visual-basic/language-reference/operators/or-operator.md) and the [IsTrue Operator](../../../visual-basic/language-reference/operators/istrue-operator.md) can be *overloaded*, which means that a class or structure can redefine their behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`Or`</ph> and <ph id=\"ph2\">`IsTrue`</ph> operators affects the behavior of the <ph id=\"ph3\">`OrElse`</ph> operator.","pos":[2839,2929],"source":" Overloading the `Or` and `IsTrue` operators affects the behavior of the `OrElse` operator."},{"content":"If your code uses <ph id=\"ph1\">`OrElse`</ph> on a class or structure that overloads <ph id=\"ph2\">`Or`</ph> and <ph id=\"ph3\">`IsTrue`</ph>, be sure you understand their redefined behavior.","pos":[2930,3063],"source":" If your code uses `OrElse` on a class or structure that overloads `Or` and `IsTrue`, be sure you understand their redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[3064,3205],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[3214,3221],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`OrElse`</ph> operator to perform logical disjunction on two expressions.","pos":[3225,3324],"source":"The following example uses the `OrElse` operator to perform logical disjunction on two expressions."},{"content":"The result is a <ph id=\"ph1\">`Boolean`</ph> value that represents whether either of the two expressions is true.","pos":[3325,3419],"source":" The result is a `Boolean` value that represents whether either of the two expressions is true."},{"content":"If the first expression is <ph id=\"ph1\">`True`</ph>, the second is not evaluated.","pos":[3420,3483],"source":" If the first expression is `True`, the second is not evaluated."},{"pos":[3490,3618],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#37<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/orelse-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#37](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/orelse-operator_1.vb)]"},{"content":"The preceding example produces results of <ph id=\"ph1\">`True`</ph>, <ph id=\"ph2\">`True`</ph>, and <ph id=\"ph3\">`False`</ph> respectively.","pos":[3625,3708],"source":"The preceding example produces results of `True`, `True`, and `False` respectively."},{"content":"In the calculation of <ph id=\"ph1\">`firstCheck`</ph>, the second expression is not evaluated because the first is already <ph id=\"ph2\">`True`</ph>.","pos":[3709,3820],"source":" In the calculation of `firstCheck`, the second expression is not evaluated because the first is already `True`."},{"content":"However, the second expression is evaluated in the calculation of <ph id=\"ph1\">`secondCheck`</ph>.","pos":[3821,3901],"source":" However, the second expression is evaluated in the calculation of `secondCheck`."},{"pos":[3910,3917],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows an <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph> statement containing two procedure calls.","pos":[3921,4007],"source":"The following example shows an `If`...`Then` statement containing two procedure calls."},{"content":"If the first call returns <ph id=\"ph1\">`True`</ph>, the second procedure is not called.","pos":[4008,4077],"source":" If the first call returns `True`, the second procedure is not called."},{"content":"This could produce unexpected results if the second procedure performs important tasks that should always be performed when this section of the code runs.","pos":[4078,4232]},{"pos":[4239,4367],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#38<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/orelse-operator_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#38](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/orelse-operator_2.vb)]"},{"pos":[4376,4384],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Logical/Bitwise Operators (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[4388,4512],"source":"[Logical/Bitwise Operators (Visual Basic)](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[4515,4629],"source":" [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[4632,4758],"source":" [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Or Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/or-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[4761,4843],"source":" [Or Operator](../../../visual-basic/language-reference/operators/or-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IsTrue Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/istrue-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[4846,4936],"source":" [IsTrue Operator](../../../visual-basic/language-reference/operators/istrue-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Logical and Bitwise Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept>","pos":[4939,5105],"source":" [Logical and Bitwise Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)"}]}