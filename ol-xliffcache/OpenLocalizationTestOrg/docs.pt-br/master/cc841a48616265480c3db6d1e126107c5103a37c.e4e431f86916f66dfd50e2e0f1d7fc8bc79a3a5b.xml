{"content":"---\ntitle: \"Using Standard Exception Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"throwing exceptions, standard types\"\n  - \"catching exceptions\"\n  - \"exceptions, catching\"\n  - \"exceptions, throwing\"\nms.assetid: ab22ce03-78f9-4dca-8824-c7ed3bdccc27\ncaps.latest.revision: 17\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Using Standard Exception Types\nThis section describes the standard exceptions provided by the Framework and the details of their usage. The list is by no means exhaustive. Please refer to the .NET Framework reference documentation for usage of other Framework exception types.  \n  \n## Exception and SystemException  \n **X DO NOT** throw <xref:System.Exception?displayProperty=fullName> or <xref:System.SystemException?displayProperty=fullName>.  \n  \n **X DO NOT** catch `System.Exception` or `System.SystemException` in framework code, unless you intend to rethrow.  \n  \n **X AVOID** catching `System.Exception` or `System.SystemException`, except in top-level exception handlers.  \n  \n## ApplicationException  \n **X DO NOT** throw or derive from <xref:System.ApplicationException>.  \n  \n## InvalidOperationException  \n **✓ DO** throw an <xref:System.InvalidOperationException> if the object is in an inappropriate state.  \n  \n## ArgumentException, ArgumentNullException, and ArgumentOutOfRangeException  \n **✓ DO** throw <xref:System.ArgumentException> or one of its subtypes if bad arguments are passed to a member. Prefer the most derived exception type, if applicable.  \n  \n **✓ DO** set the `ParamName` property when throwing one of the subclasses of `ArgumentException`.  \n  \n This property represents the name of the parameter that caused the exception to be thrown. Note that the property can be set using one of the constructor overloads.  \n  \n **✓ DO** use `value` for the name of the implicit value parameter of property setters.  \n  \n## NullReferenceException, IndexOutOfRangeException, and AccessViolationException  \n **X DO NOT** allow publicly callable APIs to explicitly or implicitly throw <xref:System.NullReferenceException>, <xref:System.AccessViolationException>, or <xref:System.IndexOutOfRangeException>. These exceptions are reserved and thrown by the execution engine and in most cases indicate a bug.  \n  \n Do argument checking to avoid throwing these exceptions. Throwing these exceptions exposes implementation details of your method that might change over time.  \n  \n## StackOverflowException  \n **X DO NOT** explicitly throw <xref:System.StackOverflowException>. The exception should be explicitly thrown only by the CLR.  \n  \n **X DO NOT** catch `StackOverflowException`.  \n  \n It is almost impossible to write managed code that remains consistent in the presence of arbitrary stack overflows. The unmanaged parts of the CLR remain consistent by using probes to move stack overflows to well-defined places rather than by backing out from arbitrary stack overflows.  \n  \n## OutOfMemoryException  \n **X DO NOT** explicitly throw <xref:System.OutOfMemoryException>. This exception is to be thrown only by the CLR infrastructure.  \n  \n## ComException, SEHException, and ExecutionEngineException  \n **X DO NOT** explicitly throw <xref:System.Runtime.InteropServices.COMException>,  <xref:System.ExecutionEngineException>, and <xref:System.Runtime.InteropServices.SEHException>. These exceptions are to be thrown only by the CLR infrastructure.  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See Also  \n [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)   \n [Design Guidelines for Exceptions](../../../docs/standard/design-guidelines/exceptions.md)","nodes":[{"pos":[12,59],"content":"Using Standard Exception Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Standard Exception Types | Microsoft Docs","pos":[0,47]}]},{"pos":[552,582],"content":"Using Standard Exception Types","linkify":"Using Standard Exception Types","nodes":[{"content":"Using Standard Exception Types","pos":[0,30]}]},{"content":"This section describes the standard exceptions provided by the Framework and the details of their usage.","pos":[583,687]},{"content":"The list is by no means exhaustive.","pos":[688,723]},{"content":"Please refer to the .NET Framework reference documentation for usage of other Framework exception types.","pos":[724,828]},{"pos":[837,866],"content":"Exception and SystemException","linkify":"Exception and SystemException","nodes":[{"content":"Exception and SystemException","pos":[0,29]}]},{"pos":[870,996],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> throw <ph id=\"ph1\">&lt;xref:System.Exception?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.SystemException?displayProperty=fullName&gt;</ph>.","source":"**X DO NOT** throw <xref:System.Exception?displayProperty=fullName> or <xref:System.SystemException?displayProperty=fullName>."},{"pos":[1003,1117],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> catch <ph id=\"ph1\">`System.Exception`</ph> or <ph id=\"ph2\">`System.SystemException`</ph> in framework code, unless you intend to rethrow.","source":"**X DO NOT** catch `System.Exception` or `System.SystemException` in framework code, unless you intend to rethrow."},{"pos":[1124,1232],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> catching <ph id=\"ph1\">`System.Exception`</ph> or <ph id=\"ph2\">`System.SystemException`</ph>, except in top-level exception handlers.","source":"**X AVOID** catching `System.Exception` or `System.SystemException`, except in top-level exception handlers."},{"pos":[1241,1261],"content":"ApplicationException","linkify":"ApplicationException","nodes":[{"content":"ApplicationException","pos":[0,20]}]},{"pos":[1265,1334],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> throw or derive from <ph id=\"ph1\">&lt;xref:System.ApplicationException&gt;</ph>.","source":"**X DO NOT** throw or derive from <xref:System.ApplicationException>."},{"pos":[1343,1368],"content":"InvalidOperationException","linkify":"InvalidOperationException","nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[1372,1473],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> throw an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> if the object is in an inappropriate state.","source":"**✓ DO** throw an <xref:System.InvalidOperationException> if the object is in an inappropriate state."},{"pos":[1482,1555],"content":"ArgumentException, ArgumentNullException, and ArgumentOutOfRangeException","linkify":"ArgumentException, ArgumentNullException, and ArgumentOutOfRangeException","nodes":[{"content":"ArgumentException, ArgumentNullException, and ArgumentOutOfRangeException","pos":[0,73]}]},{"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> throw <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> or one of its subtypes if bad arguments are passed to a member.","pos":[1559,1669],"source":"**✓ DO** throw <xref:System.ArgumentException> or one of its subtypes if bad arguments are passed to a member."},{"content":"Prefer the most derived exception type, if applicable.","pos":[1670,1724]},{"pos":[1731,1828],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> set the <ph id=\"ph1\">`ParamName`</ph> property when throwing one of the subclasses of <ph id=\"ph2\">`ArgumentException`</ph>.","source":"**✓ DO** set the `ParamName` property when throwing one of the subclasses of `ArgumentException`."},{"content":"This property represents the name of the parameter that caused the exception to be thrown.","pos":[1835,1925]},{"content":"Note that the property can be set using one of the constructor overloads.","pos":[1926,1999]},{"pos":[2006,2092],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use <ph id=\"ph1\">`value`</ph> for the name of the implicit value parameter of property setters.","source":"**✓ DO** use `value` for the name of the implicit value parameter of property setters."},{"pos":[2101,2179],"content":"NullReferenceException, IndexOutOfRangeException, and AccessViolationException","linkify":"NullReferenceException, IndexOutOfRangeException, and AccessViolationException","nodes":[{"content":"NullReferenceException, IndexOutOfRangeException, and AccessViolationException","pos":[0,78]}]},{"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> allow publicly callable APIs to explicitly or implicitly throw <ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.AccessViolationException&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.","pos":[2183,2379],"source":"**X DO NOT** allow publicly callable APIs to explicitly or implicitly throw <xref:System.NullReferenceException>, <xref:System.AccessViolationException>, or <xref:System.IndexOutOfRangeException>."},{"content":"These exceptions are reserved and thrown by the execution engine and in most cases indicate a bug.","pos":[2380,2478]},{"content":"Do argument checking to avoid throwing these exceptions.","pos":[2485,2541]},{"content":"Throwing these exceptions exposes implementation details of your method that might change over time.","pos":[2542,2642]},{"pos":[2651,2673],"content":"StackOverflowException","linkify":"StackOverflowException","nodes":[{"content":"StackOverflowException","pos":[0,22]}]},{"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> explicitly throw <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph>.","pos":[2677,2744],"source":"**X DO NOT** explicitly throw <xref:System.StackOverflowException>."},{"content":"The exception should be explicitly thrown only by the CLR.","pos":[2745,2803]},{"pos":[2810,2854],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> catch <ph id=\"ph1\">`StackOverflowException`</ph>.","source":"**X DO NOT** catch `StackOverflowException`."},{"content":"It is almost impossible to write managed code that remains consistent in the presence of arbitrary stack overflows.","pos":[2861,2976]},{"content":"The unmanaged parts of the CLR remain consistent by using probes to move stack overflows to well-defined places rather than by backing out from arbitrary stack overflows.","pos":[2977,3147]},{"pos":[3156,3176],"content":"OutOfMemoryException","linkify":"OutOfMemoryException","nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> explicitly throw <ph id=\"ph1\">&lt;xref:System.OutOfMemoryException&gt;</ph>.","pos":[3180,3245],"source":"**X DO NOT** explicitly throw <xref:System.OutOfMemoryException>."},{"content":"This exception is to be thrown only by the CLR infrastructure.","pos":[3246,3308]},{"pos":[3317,3373],"content":"ComException, SEHException, and ExecutionEngineException","linkify":"ComException, SEHException, and ExecutionEngineException","nodes":[{"content":"ComException, SEHException, and ExecutionEngineException","pos":[0,56]}]},{"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> explicitly throw <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.COMException&gt;</ph>,  <ph id=\"ph2\">&lt;xref:System.ExecutionEngineException&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph>.","pos":[3377,3555],"source":"**X DO NOT** explicitly throw <xref:System.Runtime.InteropServices.COMException>,  <xref:System.ExecutionEngineException>, and <xref:System.Runtime.InteropServices.SEHException>."},{"content":"These exceptions are to be thrown only by the CLR infrastructure.","pos":[3556,3621]},{"pos":[3628,3695],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[3702,4106],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[4115,4123],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4127,4208],"source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Design Guidelines for Exceptions<ept id=\"p1\">](../../../docs/standard/design-guidelines/exceptions.md)</ept>","pos":[4211,4302],"source":" [Design Guidelines for Exceptions](../../../docs/standard/design-guidelines/exceptions.md)"}]}