{"content":"---\ntitle: \"Procedures in Visual Basic\"\nms.date: 04/28/2017\nhelpviewer_keywords: \n  - \"procedures [Visual Basic], structured code\"\n  - \"Visual Basic code, procedures\"\n  - \"procedures [Visual Basic], types of\"\n  - \"structured code [Visual Basic], procedures\"\n  - \"procedures\"\nms.assetid: 9effbcf0-80a0-4d1a-98f4-2c6920592766\n---\n# Procedures in Visual Basic\nA *procedure* is a block of Visual Basic statements enclosed by a declaration statement (`Function`, `Sub`, `Operator`, `Get`, `Set`) and a matching `End` declaration. All executable statements in Visual Basic must be within some procedure.  \n  \n## Calling a Procedure  \n You invoke a procedure from some other place in the code. This is known as a *procedure call*. When the procedure is finished running, it returns control to the code that invoked it, which is known as the *calling code*. The calling code is a statement, or an expression within a statement, that specifies the procedure by name and transfers control to it.  \n  \n## Returning from a Procedure  \n A procedure returns control to the calling code when it has finished running. To do this, it can use a [Return Statement](../../../../visual-basic/language-reference/statements/return-statement.md), the appropriate [Exit Statement](../../../../visual-basic/language-reference/statements/exit-statement.md) statement for the procedure, or the procedure's [End \\<keyword> Statement](../../../../visual-basic/language-reference/statements/end-keyword-statement.md) statement. Control then passes to the calling code following the point of the procedure call.  \n  \n-   With a `Return` statement, control returns immediately to the calling code. Statements following the `Return` statement do not run. You can have more than one `Return` statement in the same procedure.  \n  \n-   With an `Exit Sub` or `Exit Function` statement, control returns immediately to the calling code. Statements following the `Exit` statement do not run. You can have more than one `Exit` statement in the same procedure, and you can mix `Return` and `Exit` statements in the same procedure.  \n  \n-   If a procedure has no `Return` or `Exit` statements, it concludes with an `End Sub` or `End Function`, `End Get`, or `End Set` statement following the last statement of the procedure body. The `End` statement returns control immediately to the calling code. You can have only one `End` statement in a procedure.  \n  \n## Parameters and Arguments  \n In most cases, a procedure needs to operate on different data each time you call it. You can pass this information to the procedure as part of the procedure call. The procedure defines zero or more *parameters*, each of which represents a value it expects you to pass to it. Corresponding to each parameter in the procedure definition is an *argument* in the procedure call. An argument represents the value you pass to the corresponding parameter in a given procedure call.  \n  \n## Types of Procedures  \n Visual Basic uses several types of procedures:  \n  \n-   [Sub Procedures](./sub-procedures.md) perform actions but do not return a value to the calling code.  \n  \n-   Event-handling procedures are `Sub` procedures that execute in response to an event raised by user action or by an occurrence in a program.  \n  \n-   [Function Procedures](./function-procedures.md) return a value to the calling code. They can perform other actions before returning.\n\n    Some functions written in C# return a *reference return value*. Function callers can modify the return value, and this modification is reflected in the state of the called object. Starting with Visual Basic 2017, Visual Basic code can consume reference return values, although it cannot return a value by reference. For more information, see [Reference return values](ref-return-values.md).\n  \n-   [Property Procedures](./property-procedures.md) return and assign values of properties on objects or modules.  \n  \n-   [Operator Procedures](./operator-procedures.md) define the behavior of a standard operator when one or both of the operands is a newly-defined class or structure.  \n  \n-   [Generic Procedures in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md) define one or more *type parameters* in addition to their normal parameters, so the calling code can pass specific data types each time it makes a call.  \n  \n## Procedures and Structured Code  \n Every line of executable code in your application must be inside some procedure, such as `Main`, `calculate`, or `Button1_Click`. If you subdivide large procedures into smaller ones, your application is more readable.  \n  \n Procedures are useful for performing repeated or shared tasks, such as frequently used calculations, text and control manipulation, and database operations. You can call a procedure from many different places in your code, so you can use procedures as building blocks for your application.  \n  \n Structuring your code with procedures gives you the following benefits:  \n  \n-   Procedures allow you to break your programs into discrete logical units. You can debug separate units more easily than you can debug an entire program without procedures.  \n  \n-   After you develop procedures for use in one program, you can use them in other programs, often with little or no modification. This helps you avoid code duplication.  \n  \n## See also\n\n- [How to: Create a Procedure](./how-to-create-a-procedure.md)\n- [Sub Procedures](./sub-procedures.md)\n- [Function Procedures](./function-procedures.md)\n- [Property Procedures](./property-procedures.md)\n- [Operator Procedures](./operator-procedures.md)\n- [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)\n- [Recursive Procedures](./recursive-procedures.md)\n- [Procedure Overloading](./procedure-overloading.md)\n- [Generic Procedures in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)\n- [Objects and Classes](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)\n","nodes":[{"pos":[4,323],"embed":true,"restype":"x-metadata","content":"title: \"Procedures in Visual Basic\"\nms.date: 04/28/2017\nhelpviewer_keywords: \n  - \"procedures [Visual Basic], structured code\"\n  - \"Visual Basic code, procedures\"\n  - \"procedures [Visual Basic], types of\"\n  - \"structured code [Visual Basic], procedures\"\n  - \"procedures\"\nms.assetid: 9effbcf0-80a0-4d1a-98f4-2c6920592766","nodes":[{"content":"Procedures in Visual Basic","nodes":[{"pos":[0,26],"content":"Procedures in Visual Basic","nodes":[{"content":"Procedures in Visual Basic","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[330,356],"content":"Procedures in Visual Basic","linkify":"Procedures in Visual Basic","nodes":[{"content":"Procedures in Visual Basic","pos":[0,26]}]},{"content":"A <bpt id=\"p1\">*</bpt>procedure<ept id=\"p1\">*</ept> is a block of Visual Basic statements enclosed by a declaration statement (<ph id=\"ph1\">`Function`</ph>, <ph id=\"ph2\">`Sub`</ph>, <ph id=\"ph3\">`Operator`</ph>, <ph id=\"ph4\">`Get`</ph>, <ph id=\"ph5\">`Set`</ph>) and a matching <ph id=\"ph6\">`End`</ph> declaration.","pos":[357,524],"source":"A *procedure* is a block of Visual Basic statements enclosed by a declaration statement (`Function`, `Sub`, `Operator`, `Get`, `Set`) and a matching `End` declaration."},{"content":"All executable statements in Visual Basic must be within some procedure.","pos":[525,597]},{"pos":[606,625],"content":"Calling a Procedure","linkify":"Calling a Procedure","nodes":[{"content":"Calling a Procedure","pos":[0,19]}]},{"content":"You invoke a procedure from some other place in the code.","pos":[629,686]},{"content":"This is known as a <bpt id=\"p1\">*</bpt>procedure call<ept id=\"p1\">*</ept>.","pos":[687,723],"source":" This is known as a *procedure call*."},{"content":"When the procedure is finished running, it returns control to the code that invoked it, which is known as the <bpt id=\"p1\">*</bpt>calling code<ept id=\"p1\">*</ept>.","pos":[724,849],"source":" When the procedure is finished running, it returns control to the code that invoked it, which is known as the *calling code*."},{"content":"The calling code is a statement, or an expression within a statement, that specifies the procedure by name and transfers control to it.","pos":[850,985]},{"pos":[994,1020],"content":"Returning from a Procedure","linkify":"Returning from a Procedure","nodes":[{"content":"Returning from a Procedure","pos":[0,26]}]},{"content":"A procedure returns control to the calling code when it has finished running.","pos":[1024,1101]},{"content":"To do this, it can use a <bpt id=\"p1\">[</bpt>Return Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/return-statement.md)</ept>, the appropriate <bpt id=\"p2\">[</bpt>Exit Statement<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement for the procedure, or the procedure's <bpt id=\"p3\">[</bpt>End <ph id=\"ph1\">\\&lt;</ph>keyword&gt; Statement<ept id=\"p3\">](../../../../visual-basic/language-reference/statements/end-keyword-statement.md)</ept> statement.","pos":[1102,1496],"source":" To do this, it can use a [Return Statement](../../../../visual-basic/language-reference/statements/return-statement.md), the appropriate [Exit Statement](../../../../visual-basic/language-reference/statements/exit-statement.md) statement for the procedure, or the procedure's [End \\<keyword> Statement](../../../../visual-basic/language-reference/statements/end-keyword-statement.md) statement."},{"content":"Control then passes to the calling code following the point of the procedure call.","pos":[1497,1579]},{"content":"With a <ph id=\"ph1\">`Return`</ph> statement, control returns immediately to the calling code.","pos":[1589,1664],"source":"With a `Return` statement, control returns immediately to the calling code."},{"content":"Statements following the <ph id=\"ph1\">`Return`</ph> statement do not run.","pos":[1665,1720],"source":" Statements following the `Return` statement do not run."},{"content":"You can have more than one <ph id=\"ph1\">`Return`</ph> statement in the same procedure.","pos":[1721,1789],"source":" You can have more than one `Return` statement in the same procedure."},{"content":"With an <ph id=\"ph1\">`Exit Sub`</ph> or <ph id=\"ph2\">`Exit Function`</ph> statement, control returns immediately to the calling code.","pos":[1799,1896],"source":"With an `Exit Sub` or `Exit Function` statement, control returns immediately to the calling code."},{"content":"Statements following the <ph id=\"ph1\">`Exit`</ph> statement do not run.","pos":[1897,1950],"source":" Statements following the `Exit` statement do not run."},{"content":"You can have more than one <ph id=\"ph1\">`Exit`</ph> statement in the same procedure, and you can mix <ph id=\"ph2\">`Return`</ph> and <ph id=\"ph3\">`Exit`</ph> statements in the same procedure.","pos":[1951,2087],"source":" You can have more than one `Exit` statement in the same procedure, and you can mix `Return` and `Exit` statements in the same procedure."},{"content":"If a procedure has no <ph id=\"ph1\">`Return`</ph> or <ph id=\"ph2\">`Exit`</ph> statements, it concludes with an <ph id=\"ph3\">`End Sub`</ph> or <ph id=\"ph4\">`End Function`</ph>, <ph id=\"ph5\">`End Get`</ph>, or <ph id=\"ph6\">`End Set`</ph> statement following the last statement of the procedure body.","pos":[2097,2285],"source":"If a procedure has no `Return` or `Exit` statements, it concludes with an `End Sub` or `End Function`, `End Get`, or `End Set` statement following the last statement of the procedure body."},{"content":"The <ph id=\"ph1\">`End`</ph> statement returns control immediately to the calling code.","pos":[2286,2354],"source":" The `End` statement returns control immediately to the calling code."},{"content":"You can have only one <ph id=\"ph1\">`End`</ph> statement in a procedure.","pos":[2355,2408],"source":" You can have only one `End` statement in a procedure."},{"pos":[2417,2441],"content":"Parameters and Arguments","linkify":"Parameters and Arguments","nodes":[{"content":"Parameters and Arguments","pos":[0,24]}]},{"content":"In most cases, a procedure needs to operate on different data each time you call it.","pos":[2445,2529]},{"content":"You can pass this information to the procedure as part of the procedure call.","pos":[2530,2607]},{"content":"The procedure defines zero or more <bpt id=\"p1\">*</bpt>parameters<ept id=\"p1\">*</ept>, each of which represents a value it expects you to pass to it.","pos":[2608,2719],"source":" The procedure defines zero or more *parameters*, each of which represents a value it expects you to pass to it."},{"content":"Corresponding to each parameter in the procedure definition is an <bpt id=\"p1\">*</bpt>argument<ept id=\"p1\">*</ept> in the procedure call.","pos":[2720,2819],"source":" Corresponding to each parameter in the procedure definition is an *argument* in the procedure call."},{"content":"An argument represents the value you pass to the corresponding parameter in a given procedure call.","pos":[2820,2919]},{"pos":[2928,2947],"content":"Types of Procedures","linkify":"Types of Procedures","nodes":[{"content":"Types of Procedures","pos":[0,19]}]},{"content":"Visual Basic uses several types of procedures:","pos":[2951,2997]},{"pos":[3007,3107],"content":"<bpt id=\"p1\">[</bpt>Sub Procedures<ept id=\"p1\">](./sub-procedures.md)</ept> perform actions but do not return a value to the calling code.","source":"[Sub Procedures](./sub-procedures.md) perform actions but do not return a value to the calling code."},{"pos":[3117,3256],"content":"Event-handling procedures are <ph id=\"ph1\">`Sub`</ph> procedures that execute in response to an event raised by user action or by an occurrence in a program.","source":"Event-handling procedures are `Sub` procedures that execute in response to an event raised by user action or by an occurrence in a program."},{"content":"<bpt id=\"p1\">[</bpt>Function Procedures<ept id=\"p1\">](./function-procedures.md)</ept> return a value to the calling code.","pos":[3266,3349],"source":"[Function Procedures](./function-procedures.md) return a value to the calling code."},{"content":"They can perform other actions before returning.","pos":[3350,3398]},{"content":"Some functions written in C# return a <bpt id=\"p1\">*</bpt>reference return value<ept id=\"p1\">*</ept>.","pos":[3404,3467],"source":"Some functions written in C# return a *reference return value*."},{"content":"Function callers can modify the return value, and this modification is reflected in the state of the called object.","pos":[3468,3583]},{"content":"Starting with Visual Basic 2017, Visual Basic code can consume reference return values, although it cannot return a value by reference.","pos":[3584,3719]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Reference return values<ept id=\"p1\">](ref-return-values.md)</ept>.","pos":[3720,3794],"source":" For more information, see [Reference return values](ref-return-values.md)."},{"pos":[3802,3911],"content":"<bpt id=\"p1\">[</bpt>Property Procedures<ept id=\"p1\">](./property-procedures.md)</ept> return and assign values of properties on objects or modules.","source":"[Property Procedures](./property-procedures.md) return and assign values of properties on objects or modules."},{"pos":[3921,4083],"content":"<bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](./operator-procedures.md)</ept> define the behavior of a standard operator when one or both of the operands is a newly-defined class or structure.","source":"[Operator Procedures](./operator-procedures.md) define the behavior of a standard operator when one or both of the operands is a newly-defined class or structure."},{"pos":[4093,4377],"content":"<bpt id=\"p1\">[</bpt>Generic Procedures in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept> define one or more <bpt id=\"p2\">*</bpt>type parameters<ept id=\"p2\">*</ept> in addition to their normal parameters, so the calling code can pass specific data types each time it makes a call.","source":"[Generic Procedures in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md) define one or more *type parameters* in addition to their normal parameters, so the calling code can pass specific data types each time it makes a call."},{"pos":[4386,4416],"content":"Procedures and Structured Code","linkify":"Procedures and Structured Code","nodes":[{"content":"Procedures and Structured Code","pos":[0,30]}]},{"content":"Every line of executable code in your application must be inside some procedure, such as <ph id=\"ph1\">`Main`</ph>, <ph id=\"ph2\">`calculate`</ph>, or <ph id=\"ph3\">`Button1_Click`</ph>.","pos":[4420,4549],"source":"Every line of executable code in your application must be inside some procedure, such as `Main`, `calculate`, or `Button1_Click`."},{"content":"If you subdivide large procedures into smaller ones, your application is more readable.","pos":[4550,4637]},{"content":"Procedures are useful for performing repeated or shared tasks, such as frequently used calculations, text and control manipulation, and database operations.","pos":[4644,4800]},{"content":"You can call a procedure from many different places in your code, so you can use procedures as building blocks for your application.","pos":[4801,4933]},{"content":"Structuring your code with procedures gives you the following benefits:","pos":[4940,5011]},{"content":"Procedures allow you to break your programs into discrete logical units.","pos":[5021,5093]},{"content":"You can debug separate units more easily than you can debug an entire program without procedures.","pos":[5094,5191]},{"content":"After you develop procedures for use in one program, you can use them in other programs, often with little or no modification.","pos":[5201,5327]},{"content":"This helps you avoid code duplication.","pos":[5328,5366]},{"pos":[5375,5383],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5387,5447],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Procedure<ept id=\"p1\">](./how-to-create-a-procedure.md)</ept>","source":"[How to: Create a Procedure](./how-to-create-a-procedure.md)"},{"pos":[5450,5487],"content":"<bpt id=\"p1\">[</bpt>Sub Procedures<ept id=\"p1\">](./sub-procedures.md)</ept>","source":"[Sub Procedures](./sub-procedures.md)"},{"pos":[5490,5537],"content":"<bpt id=\"p1\">[</bpt>Function Procedures<ept id=\"p1\">](./function-procedures.md)</ept>","source":"[Function Procedures](./function-procedures.md)"},{"pos":[5540,5587],"content":"<bpt id=\"p1\">[</bpt>Property Procedures<ept id=\"p1\">](./property-procedures.md)</ept>","source":"[Property Procedures](./property-procedures.md)"},{"pos":[5590,5637],"content":"<bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](./operator-procedures.md)</ept>","source":"[Operator Procedures](./operator-procedures.md)"},{"pos":[5640,5717],"content":"<bpt id=\"p1\">[</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](./procedure-parameters-and-arguments.md)</ept>","source":"[Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)"},{"pos":[5720,5769],"content":"<bpt id=\"p1\">[</bpt>Recursive Procedures<ept id=\"p1\">](./recursive-procedures.md)</ept>","source":"[Recursive Procedures](./recursive-procedures.md)"},{"pos":[5772,5823],"content":"<bpt id=\"p1\">[</bpt>Procedure Overloading<ept id=\"p1\">](./procedure-overloading.md)</ept>","source":"[Procedure Overloading](./procedure-overloading.md)"},{"pos":[5826,5957],"content":"<bpt id=\"p1\">[</bpt>Generic Procedures in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept>","source":"[Generic Procedures in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)"},{"pos":[5960,6072],"content":"<bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>","source":"[Objects and Classes](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)"}]}