<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ba33ef5091b9fbb728e8a43e5b8935e48ee9bdb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\debug-trace-profile\tracing-and-instrumenting-applications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae7519a43f6983ff781860094149c53826da479b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">afcd9ca753d5fb7fa6403d5867d46eb60c3fcabb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Tracing and Instrumenting Applications | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tracing and Instrumenting Applications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Tracing is a way for you to monitor the execution of your application while it is running.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can add tracing and debugging instrumentation to your .NET Framework application when you develop it, and you can use that instrumentation both while you are developing the application and after you have deployed it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Diagnostics.Trace?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Debug?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.TraceSource?displayProperty=fullName&gt;</ph> classes to record information about errors and application execution in logs, text files, or other devices for later analysis.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">*</bpt>instrumentation<ept id="p1">*</ept> refers to an ability to monitor or measure the level of a product's performance and to diagnose errors.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In programming, this means the ability of an application to incorporate:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Code tracing<ept id="p1">**</ept> - Receiving informative messages about the execution of an application at run time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Debugging<ept id="p1">**</ept> - Tracking down and fixing programming errors in an application under development.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Debugging<ept id="p1">](/visualstudio/debugger/debugging-in-visual-studio)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Performance counters<ept id="p1">**</ept> - Components that allow you to track the performance of your application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Performance Counters<ept id="p1">](../../../docs/framework/debug-trace-profile/performance-counters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Event logs<ept id="p1">**</ept> - Components that allow you receive and track major events in the execution of your application.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Instrumenting your application by placing trace statements at strategic locations in your code is especially useful for distributed applications.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By using trace statements you can instrument an application not only to display information when things go wrong, but also to monitor how well the application is performing.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> class provides enhanced tracing features and can be used in place of the static methods of the older <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.Debug&gt;</ph> tracing classes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The familiar <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph> classes are still widely used, but the <ph id="ph3">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> class is recommended for new tracing commands, such as <ph id="ph4">&lt;xref:System.Diagnostics.TraceSource.TraceEvent%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Diagnostics.TraceSource.TraceData%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph> classes are identical, except that procedures and functions of the <ph id="ph3">&lt;xref:System.Diagnostics.Trace&gt;</ph> class are compiled by default into release builds, but those of the <ph id="ph4">&lt;xref:System.Diagnostics.Debug&gt;</ph> class are not.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph> classes provide the means to monitor and examine application performance either during development or after deployment.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> class to track particular types of actions in a deployed application as they occur (for example, creation of new database connections), and can therefore monitor the application's efficiency.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Code Tracing and Debugging</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>During development, you can use the output methods of the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph> class to display messages in the Output window of the Visual Studio integrated development environment (IDE).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Each of these examples will display "Hello World!"</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>in the Output window when the application is run in the debugger.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This enables you to debug your applications and optimize their performance based on their behavior in your test environment.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can debug your application in your debug build with the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph> conditional attribute turned on so that you receive all debugging output.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When your application is ready for release, you can compile your release build without turning on the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph> conditional attribute, so that the compiler will not include your debugging code in the final executable.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Compile Conditionally with Trace and Debug<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information on different build configurations for your application, see <bpt id="p1">[</bpt>Compiling and Building<ept id="p1">](/visualstudio/ide/compiling-and-building-in-visual-studio)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also trace code execution in an installed application, using methods of the <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>By placing <bpt id="p1">[</bpt>Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/trace-switches.md)</ept> in your code, you can control whether tracing occurs and how extensive it is.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This lets you monitor the status of your application in a production environment.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is especially important in a business application that uses multiple components running on multiple computers.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can control how the switches are used after deployment through the configuration file.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create, Initialize and Configure Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you are developing an application for which you intend to use tracing, you usually include both tracing and debugging messages in the application code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you are ready to deploy the application, you can compile your release build without turning on the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> conditional attribute.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, you can turn on the <bpt id="p1">**</bpt>Trace<ept id="p1">**</ept> conditional attribute so that the compiler includes your trace code in the executable.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Compile Conditionally with Trace and Debug<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Phases of Code Tracing</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>There are three phases of code tracing:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Instrumentation<ept id="p1">**</ept> — you add trace code to your application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tracing<ept id="p1">**</ept> — the tracing code writes information to the specified target.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Analysis<ept id="p1">**</ept> — you evaluate the tracing information to identify and understand problems in the application.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>During development, all debug and trace output methods write information to the Output window in Visual Studio by default.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In a deployed application, the methods write tracing information to the targets you specify.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information on specifying an output target for tracing or debugging, see <bpt id="p1">[</bpt>Trace Listeners<ept id="p1">](../../../docs/framework/debug-trace-profile/trace-listeners.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following is an overall view of the major steps typically involved in using tracing to analyze and correct potential problems in deployed applications.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information on how to perform these steps, see the appropriate link.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To use tracing in an application</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Consider which tracing output you will want to receive onsite after you have deployed the application.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create a set of switches.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Configure Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add the trace statements to the application code.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Determine where you want the tracing output to appear and add the appropriate listeners.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating and Initializing Trace Listeners<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-create-and-initialize-trace-listeners.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Test and debug your application and the tracing code it contains.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Compile the application into executable code using one of the following procedures:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu along with the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> page of the <bpt id="p3">**</bpt>Property Pages<ept id="p3">**</ept> dialog box in <bpt id="p4">**</bpt>Solution Explorer<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use this when compiling in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Trace<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> compiler directives for the command-line method of compiling.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Compiling Conditionally with Trace and Debug<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Use this when compiling from the command line.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If a problem occurs during run time, turn on the appropriate trace switch.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Configuring Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The tracing code writes tracing messages to a specified target, for example, a screen, a text file, or an event log.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The type of listener you included in the <bpt id="p1">**</bpt>Trace.Listeners<ept id="p1">**</ept> collection determines the target.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Analyze the tracing messages to identify and understand the problem in the application.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Trace Instrumentation and Distributed Applications</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When you create a distributed application, you might find it difficult to test the application in the manner in which it will be used.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Few development teams have the capability to test all possible combinations of operating systems or Web browsers (including all the localized language options), or to simulate the high number of users that will access the application at the same time.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Under these circumstances, you cannot test how a distributed application will respond to high volumes, different setups, and unique end-user behaviors.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Also, many parts of a distributed application have no user interface with which you can interact directly or view the activity of those parts.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, you can compensate for this by enabling distributed applications to describe certain events of interest to system administrators, especially things that go wrong, by <bpt id="p1">*</bpt>instrumenting<ept id="p1">*</ept> the application — that is, by placing trace statements at strategic locations in your code.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Then if something unexpected occurs at run time (for example, excessively slow response time), you can determine the likely cause.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>With trace statements you can avoid the difficult task of examining the original source code, modifying it, recompiling, and attempting to produce the run-time error within the debugging environment.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remember that you can instrument an application not only to display errors, but also to monitor performance.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Strategic Placement of Trace Statements</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You must exercise special care when placing your trace statements for use during run time.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You must consider what tracing information is likely to be needed in a deployed application, so that all likely tracing scenarios are adequately covered.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Because applications that use tracing vary widely, however, there are no general guidelines for strategic placement of tracing.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information on placing trace statements, see <bpt id="p1">[</bpt>How to: Add Trace Statements to Application Code<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-add-trace-statements-to-application-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Output from Tracing</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Trace output is collected by objects called <bpt id="p1">*</bpt>listeners<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A listener is an object that receives trace output and writes it to an output device (usually a window, log, or text file).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>When a trace listener is created, it is typically added to the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName&gt;</ph> collection, allowing the listener to receive all trace output.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Tracing information is always written at least to the default <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> output target, the <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If for some reason you have deleted the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> without adding any other listeners to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection, you will not receive any tracing messages.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Trace Listeners<ept id="p1">](../../../docs/framework/debug-trace-profile/trace-listeners.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The six <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph> members and <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph> methods that write tracing information are listed in the following table.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assert<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The specified text; or, if none is specified, the Call Stack.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The output is written only if the condition specified as an argument in the <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> statement is <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fail<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The specified text; or, if none is specified, the Call Stack.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Write<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The specified text.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WriteIf<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The specified text, if the condition specified as an argument in the <bpt id="p1">**</bpt>WriteIf<ept id="p1">**</ept> statement is satisfied.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WriteLine<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The specified text and a carriage return.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WriteLineIf<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The specified text and a carriage return, if the condition specified as an argument in the <bpt id="p1">**</bpt>WriteLineIf<ept id="p1">**</ept> statement is satisfied.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>All listeners in the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection receive the messages described in the above table, but the actions taken may vary depending on what kind of listener receives the message.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> displays an assertion dialog box when it receives a <bpt id="p1">**</bpt>Fail<ept id="p1">**</ept> or failed <bpt id="p2">**</bpt>Assert<ept id="p2">**</ept> notification, but a <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> simply writes the output to its stream.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can produce custom results by implementing your own listener.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A custom trace listener might, for example, display the messages to a message box, or connect to a database to add messages to a table.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>All custom listeners should support the six methods mentioned above.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information on creating developer-defined listeners, see <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> in the .NET Framework reference.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph>, the <bpt id="p1">**</bpt>Debug.Write<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Debug.WriteIf<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Debug.WriteLine<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Debug.WriteLineIf<ept id="p4">**</ept> methods have replaced the <bpt id="p5">**</bpt>Debug.Print<ept id="p5">**</ept> method that was available in earlier versions of Visual Basic.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Write<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WriteLine<ept id="p2">**</ept> methods always write the text that you specify.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assert<ept id="p1">**</ept>, <bpt id="p2">**</bpt>WriteIf<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>WriteLineIf<ept id="p3">**</ept> require a Boolean argument that controls whether or not they write the specified text; they write the specified text only if the expression is <bpt id="p4">**</bpt>true<ept id="p4">**</ept> (for <bpt id="p5">**</bpt>WriteIf<ept id="p5">**</ept> and <bpt id="p6">**</bpt>WriteLineIf<ept id="p6">**</ept>), or <bpt id="p7">**</bpt>false<ept id="p7">**</ept> (for <bpt id="p8">**</bpt>Assert<ept id="p8">**</ept>).</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Fail<ept id="p1">**</ept> method always writes the specified text.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add Trace Statements to Application Code<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-add-trace-statements-to-application-code.md)</ept> and the .NET Framework reference.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Security Concerns</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If you do not disable tracing and debugging before deploying an ASP.NET application, your application may reveal information about itself that could be exploited by a malicious program.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Compile Conditionally with Trace and Debug<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept>, <bpt id="p2">[</bpt>Compiling and Building<ept id="p2">](/visualstudio/ide/compiling-and-building-in-visual-studio)</ept>, and <bpt id="p3">[</bpt>How to: Create, Initialize and Configure Trace Switches<ept id="p3">](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Debugging is also configurable through Internet Information Services (IIS).</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.TraceSource&gt;</ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Code Contracts<ept id="p1">](../../../docs/framework/debug-trace-profile/code-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C#, F#, and Visual Basic Project Types<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/debugging-preparation-csharp-f-hash-and-visual-basic-project-types)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Add Trace Statements to Application Code<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-add-trace-statements-to-application-code.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Compile Conditionally with Trace and Debug<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create, Initialize and Configure Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create and Initialize Trace Sources<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-create-and-initialize-trace-sources.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Use TraceSource and Filters with Trace Listeners<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-use-tracesource-and-filters-with-trace-listeners.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Trace Listeners<ept id="p1">](../../../docs/framework/debug-trace-profile/trace-listeners.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/trace-switches.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>