{"content":"---\ntitle: \"Custom Composite using Native Activity | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: ef9e739c-8a8a-4d11-9e25-cb42c62e3c76\ncaps.latest.revision: 14\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Custom Composite using Native Activity\nThis sample demonstrates how to write a <xref:System.Activities.NativeActivity> that schedules other <xref:System.Activities.Activity> objects to control the flow of a workflow’s execution. This sample uses two common control flows, Sequence and While, to demonstrate how to do this.  \n  \n## Sample Details  \n Starting with `MySequence`, the first thing to notice is that it derives from <xref:System.Activities.NativeActivity>. <xref:System.Activities.NativeActivity> is the <xref:System.Activities.Activity> object that exposes the full breadth of the workflow runtime through the <xref:System.Activities.NativeActivityContext> passed to the `Execute` method.  \n  \n `MySequence` exposes a public collection of <xref:System.Activities.Activity> objects that gets populated by the workflow author. Before the workflow is executed, the workflow runtime calls the <xref:System.Activities.Activity.CacheMetadata%2A> method on each activity in a workflow. During this process, the runtime establishes parent-child relationships for data scoping and lifetime management. The default implementation of the <xref:System.Activities.Activity.CacheMetadata%2A> method uses the <xref:System.ComponentModel.TypeDescriptor> instance class for the `MySequence` activity to add any public property of type <xref:System.Activities.Activity> or <xref:System.Collections.IEnumerable>\\<<xref:System.Activities.Activity>> as children of the `MySequence` activity.  \n  \n Whenever an activity exposes a public collection of child activities, it is likely those child activities share state. It is a best practice for the parent activity, in this case `MySequence`, to also expose a collection of variables through which the child activities can accomplish this. Like child activities, the <xref:System.Activities.Activity.CacheMetadata%2A> method adds public properties of type <xref:System.Activities.Variable> or <xref:System.Collections.IEnumerable>\\<<xref:System.Activities.Variable>> as variables associated with the `MySequence` activity.  \n  \n Besides the public variables, which are manipulated by the children of `MySequence`, `MySequence` must also keep track of where it is in the execution of its children. It uses a private variable, `currentIndex`, to accomplish this. This variable is registered as part of the `MySequence` environment by adding a call to the <xref:System.Activities.NativeActivityMetadata.AddImplementationVariable%2A> method within the `MySequence` activity’s <xref:System.Activities.Activity.CacheMetadata%2A> method. The <xref:System.Activities.Activity> objects added to the `MySequence` `Activities` collection cannot access variables added this way.  \n  \n When `MySequence` is executed by the runtime, the runtime calls its <xref:System.Activities.NativeActivity.Execute%2A> method, passing in an <xref:System.Activities.NativeActivityContext>. The <xref:System.Activities.NativeActivityContext> is the activity’s proxy back into the runtime for dereferencing arguments and variables as well as scheduling other <xref:System.Activities.Activity> objects, or `ActivityDelegates`. `MySequence` uses an `InternalExecute` method to encapsulate the logic of scheduling the first child and all subsequent children in a single method. It starts by dereferencing the `currentIndex`. If it is equal to the count in the `Activities` collection, then the sequence is finished, the activity returns without scheduling any work and the runtime moves it into the <xref:System.Activities.ActivityInstanceState> state. If the `currentIndex` is less than the count of activities, the next child is obtained from the `Activities` collection and `MySequence` calls<xref:System.Activities.NativeActivityContext.ScheduleActivity%2A>, passing in the child to be scheduled and a <xref:System.Activities.CompletionCallback> that points at the `InternalExecute` method. Finally, the `currentIndex` is incremented and control is yielded back to the runtime. As long as an instance of `MySequence` has a child <xref:System.Activities.Activity> object scheduled, the runtime considers it to be in the Executing state.  \n  \n When the child activity completes, the <xref:System.Activities.CompletionCallback> is executed. The loop continues from the top. Like `Execute`, a <xref:System.Activities.CompletionCallback> takes an <xref:System.Activities.NativeActivityContext>, giving the implementer access to the runtime.  \n  \n `MyWhile` differs from `MySequence` in that it schedules a single <xref:System.Activities.Activity> object repeatedly, and in that it uses a <xref:System.Activities.Activity%601><bool\\> named `Condition` to determine whether this scheduling should occur. Like `MySequence`, `MyWhile` uses an `InternalExecute` method to centralize its scheduling logic. It schedules the `Condition`<xref:System.Activities.Activity><bool\\> with a <xref:System.Activities.CompletionCallback%601>\\<bool> named `OnEvaluationCompleted`. When the execution of `Condition` is completed, its result becomes available through this <xref:System.Activities.CompletionCallback> in a strongly-typed parameter named `result`. If `true`, `MyWhile` calls  <xref:System.Activities.NativeActivityContext.ScheduleActivity%2A>, passing in the `Body`<xref:System.Activities.Activity> object and `InternalExecute` as the <xref:System.Activities.CompletionCallback>. When the execution of `Body` completes, `Condition` gets scheduled again in `InternalExecute`, starting the loop over again. When the `Condition` returns `false`, an instance of `MyWhile` gives control back to the runtime without scheduling the `Body` and the runtime moves it to the <xref:System.Activities.ActivityInstanceState> state.  \n  \n#### To set up, build, and run the sample  \n  \n1.  Open the Composite.sln sample solution in [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)].  \n  \n2.  Build and run the solution.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Basic\\CustomActivities\\Code-Bodied\\CustomCompositeNativeActivity`  \n  \n## See Also","nodes":[{"pos":[12,67],"content":"Custom Composite using Native Activity | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Custom Composite using Native Activity | Microsoft Docs","pos":[0,55]}]},{"pos":[333,371],"content":"Custom Composite using Native Activity","linkify":"Custom Composite using Native Activity","nodes":[{"content":"Custom Composite using Native Activity","pos":[0,38]}]},{"content":"This sample demonstrates how to write a <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity&gt;</ph> that schedules other <ph id=\"ph2\">&lt;xref:System.Activities.Activity&gt;</ph> objects to control the flow of a workflow’s execution.","pos":[372,561],"source":"This sample demonstrates how to write a <xref:System.Activities.NativeActivity> that schedules other <xref:System.Activities.Activity> objects to control the flow of a workflow’s execution."},{"content":"This sample uses two common control flows, Sequence and While, to demonstrate how to do this.","pos":[562,655]},{"pos":[664,678],"content":"Sample Details","linkify":"Sample Details","nodes":[{"content":"Sample Details","pos":[0,14]}]},{"content":"Starting with <ph id=\"ph1\">`MySequence`</ph>, the first thing to notice is that it derives from <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivity&gt;</ph>.","pos":[682,800],"source":"Starting with `MySequence`, the first thing to notice is that it derives from <xref:System.Activities.NativeActivity>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity&gt;</ph> is the <ph id=\"ph2\">&lt;xref:System.Activities.Activity&gt;</ph> object that exposes the full breadth of the workflow runtime through the <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph> passed to the <ph id=\"ph4\">`Execute`</ph> method.","pos":[801,1033],"source":"<xref:System.Activities.NativeActivity> is the <xref:System.Activities.Activity> object that exposes the full breadth of the workflow runtime through the <xref:System.Activities.NativeActivityContext> passed to the `Execute` method."},{"content":"<ph id=\"ph1\">`MySequence`</ph> exposes a public collection of <ph id=\"ph2\">&lt;xref:System.Activities.Activity&gt;</ph> objects that gets populated by the workflow author.","pos":[1040,1169],"source":"`MySequence` exposes a public collection of <xref:System.Activities.Activity> objects that gets populated by the workflow author."},{"content":"Before the workflow is executed, the workflow runtime calls the <ph id=\"ph1\">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> method on each activity in a workflow.","pos":[1170,1323],"source":" Before the workflow is executed, the workflow runtime calls the <xref:System.Activities.Activity.CacheMetadata%2A> method on each activity in a workflow."},{"content":"During this process, the runtime establishes parent-child relationships for data scoping and lifetime management.","pos":[1324,1437]},{"content":"The default implementation of the <ph id=\"ph1\">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> instance class for the <ph id=\"ph3\">`MySequence`</ph> activity to add any public property of type <ph id=\"ph4\">&lt;xref:System.Activities.Activity&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Collections.IEnumerable&gt;</ph><ph id=\"ph6\">\\&lt;</ph><ph id=\"ph7\">&lt;xref:System.Activities.Activity&gt;</ph>&gt; as children of the <ph id=\"ph8\">`MySequence`</ph> activity.","pos":[1438,1815],"source":" The default implementation of the <xref:System.Activities.Activity.CacheMetadata%2A> method uses the <xref:System.ComponentModel.TypeDescriptor> instance class for the `MySequence` activity to add any public property of type <xref:System.Activities.Activity> or <xref:System.Collections.IEnumerable>\\<<xref:System.Activities.Activity>> as children of the `MySequence` activity."},{"content":"Whenever an activity exposes a public collection of child activities, it is likely those child activities share state.","pos":[1822,1940]},{"content":"It is a best practice for the parent activity, in this case <ph id=\"ph1\">`MySequence`</ph>, to also expose a collection of variables through which the child activities can accomplish this.","pos":[1941,2111],"source":" It is a best practice for the parent activity, in this case `MySequence`, to also expose a collection of variables through which the child activities can accomplish this."},{"content":"Like child activities, the <ph id=\"ph1\">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> method adds public properties of type <ph id=\"ph2\">&lt;xref:System.Activities.Variable&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph><ph id=\"ph4\">\\&lt;</ph><ph id=\"ph5\">&lt;xref:System.Activities.Variable&gt;</ph>&gt; as variables associated with the <ph id=\"ph6\">`MySequence`</ph> activity.","pos":[2112,2394],"source":" Like child activities, the <xref:System.Activities.Activity.CacheMetadata%2A> method adds public properties of type <xref:System.Activities.Variable> or <xref:System.Collections.IEnumerable>\\<<xref:System.Activities.Variable>> as variables associated with the `MySequence` activity."},{"content":"Besides the public variables, which are manipulated by the children of <ph id=\"ph1\">`MySequence`</ph>, <ph id=\"ph2\">`MySequence`</ph> must also keep track of where it is in the execution of its children.","pos":[2401,2568],"source":"Besides the public variables, which are manipulated by the children of `MySequence`, `MySequence` must also keep track of where it is in the execution of its children."},{"content":"It uses a private variable, <ph id=\"ph1\">`currentIndex`</ph>, to accomplish this.","pos":[2569,2632],"source":" It uses a private variable, `currentIndex`, to accomplish this."},{"content":"This variable is registered as part of the <ph id=\"ph1\">`MySequence`</ph> environment by adding a call to the <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivityMetadata.AddImplementationVariable%2A&gt;</ph> method within the <ph id=\"ph3\">`MySequence`</ph> activity’s <ph id=\"ph4\">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> method.","pos":[2633,2902],"source":" This variable is registered as part of the `MySequence` environment by adding a call to the <xref:System.Activities.NativeActivityMetadata.AddImplementationVariable%2A> method within the `MySequence` activity’s <xref:System.Activities.Activity.CacheMetadata%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Activity&gt;</ph> objects added to the <ph id=\"ph2\">`MySequence`</ph> <ph id=\"ph3\">`Activities`</ph> collection cannot access variables added this way.","pos":[2903,3038],"source":" The <xref:System.Activities.Activity> objects added to the `MySequence` `Activities` collection cannot access variables added this way."},{"content":"When <ph id=\"ph1\">`MySequence`</ph> is executed by the runtime, the runtime calls its <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph> method, passing in an <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph>.","pos":[3045,3233],"source":"When `MySequence` is executed by the runtime, the runtime calls its <xref:System.Activities.NativeActivity.Execute%2A> method, passing in an <xref:System.Activities.NativeActivityContext>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph> is the activity’s proxy back into the runtime for dereferencing arguments and variables as well as scheduling other <ph id=\"ph2\">&lt;xref:System.Activities.Activity&gt;</ph> objects, or <ph id=\"ph3\">`ActivityDelegates`</ph>.","pos":[3234,3467],"source":" The <xref:System.Activities.NativeActivityContext> is the activity’s proxy back into the runtime for dereferencing arguments and variables as well as scheduling other <xref:System.Activities.Activity> objects, or `ActivityDelegates`."},{"content":"<ph id=\"ph1\">`MySequence`</ph> uses an <ph id=\"ph2\">`InternalExecute`</ph> method to encapsulate the logic of scheduling the first child and all subsequent children in a single method.","pos":[3468,3616],"source":"`MySequence` uses an `InternalExecute` method to encapsulate the logic of scheduling the first child and all subsequent children in a single method."},{"content":"It starts by dereferencing the <ph id=\"ph1\">`currentIndex`</ph>.","pos":[3617,3663],"source":" It starts by dereferencing the `currentIndex`."},{"content":"If it is equal to the count in the <ph id=\"ph1\">`Activities`</ph> collection, then the sequence is finished, the activity returns without scheduling any work and the runtime moves it into the <ph id=\"ph2\">&lt;xref:System.Activities.ActivityInstanceState&gt;</ph> state.","pos":[3664,3891],"source":" If it is equal to the count in the `Activities` collection, then the sequence is finished, the activity returns without scheduling any work and the runtime moves it into the <xref:System.Activities.ActivityInstanceState> state."},{"content":"If the <ph id=\"ph1\">`currentIndex`</ph> is less than the count of activities, the next child is obtained from the <ph id=\"ph2\">`Activities`</ph> collection and <ph id=\"ph3\">`MySequence`</ph> calls<ph id=\"ph4\">&lt;xref:System.Activities.NativeActivityContext.ScheduleActivity%2A&gt;</ph>, passing in the child to be scheduled and a <ph id=\"ph5\">&lt;xref:System.Activities.CompletionCallback&gt;</ph> that points at the <ph id=\"ph6\">`InternalExecute`</ph> method.","pos":[3892,4233],"source":" If the `currentIndex` is less than the count of activities, the next child is obtained from the `Activities` collection and `MySequence` calls<xref:System.Activities.NativeActivityContext.ScheduleActivity%2A>, passing in the child to be scheduled and a <xref:System.Activities.CompletionCallback> that points at the `InternalExecute` method."},{"content":"Finally, the <ph id=\"ph1\">`currentIndex`</ph> is incremented and control is yielded back to the runtime.","pos":[4234,4320],"source":" Finally, the `currentIndex` is incremented and control is yielded back to the runtime."},{"content":"As long as an instance of <ph id=\"ph1\">`MySequence`</ph> has a child <ph id=\"ph2\">&lt;xref:System.Activities.Activity&gt;</ph> object scheduled, the runtime considers it to be in the Executing state.","pos":[4321,4478],"source":" As long as an instance of `MySequence` has a child <xref:System.Activities.Activity> object scheduled, the runtime considers it to be in the Executing state."},{"content":"When the child activity completes, the <ph id=\"ph1\">&lt;xref:System.Activities.CompletionCallback&gt;</ph> is executed.","pos":[4485,4580],"source":"When the child activity completes, the <xref:System.Activities.CompletionCallback> is executed."},{"content":"The loop continues from the top.","pos":[4581,4613]},{"content":"Like <ph id=\"ph1\">`Execute`</ph>, a <ph id=\"ph2\">&lt;xref:System.Activities.CompletionCallback&gt;</ph> takes an <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph>, giving the implementer access to the runtime.","pos":[4614,4778],"source":" Like `Execute`, a <xref:System.Activities.CompletionCallback> takes an <xref:System.Activities.NativeActivityContext>, giving the implementer access to the runtime."},{"content":"<ph id=\"ph1\">`MyWhile`</ph> differs from <ph id=\"ph2\">`MySequence`</ph> in that it schedules a single <ph id=\"ph3\">&lt;xref:System.Activities.Activity&gt;</ph> object repeatedly, and in that it uses a <ph id=\"ph4\">&lt;xref:System.Activities.Activity%601&gt;</ph>&lt;bool<ph id=\"ph5\">\\&gt;</ph> named <ph id=\"ph6\">`Condition`</ph> to determine whether this scheduling should occur.","pos":[4785,5039],"source":"`MyWhile` differs from `MySequence` in that it schedules a single <xref:System.Activities.Activity> object repeatedly, and in that it uses a <xref:System.Activities.Activity%601><bool\\> named `Condition` to determine whether this scheduling should occur."},{"content":"Like <ph id=\"ph1\">`MySequence`</ph>, <ph id=\"ph2\">`MyWhile`</ph> uses an <ph id=\"ph3\">`InternalExecute`</ph> method to centralize its scheduling logic.","pos":[5040,5137],"source":" Like `MySequence`, `MyWhile` uses an `InternalExecute` method to centralize its scheduling logic."},{"content":"It schedules the <ph id=\"ph1\">`Condition`</ph><ph id=\"ph2\">&lt;xref:System.Activities.Activity&gt;</ph>&lt;bool<ph id=\"ph3\">\\&gt;</ph> with a <ph id=\"ph4\">&lt;xref:System.Activities.CompletionCallback%601&gt;</ph><ph id=\"ph5\">\\&lt;</ph>bool&gt; named <ph id=\"ph6\">`OnEvaluationCompleted`</ph>.","pos":[5138,5299],"source":" It schedules the `Condition`<xref:System.Activities.Activity><bool\\> with a <xref:System.Activities.CompletionCallback%601>\\<bool> named `OnEvaluationCompleted`."},{"content":"When the execution of <ph id=\"ph1\">`Condition`</ph> is completed, its result becomes available through this <ph id=\"ph2\">&lt;xref:System.Activities.CompletionCallback&gt;</ph> in a strongly-typed parameter named <ph id=\"ph3\">`result`</ph>.","pos":[5300,5479],"source":" When the execution of `Condition` is completed, its result becomes available through this <xref:System.Activities.CompletionCallback> in a strongly-typed parameter named `result`."},{"content":"If <ph id=\"ph1\">`true`</ph>, <ph id=\"ph2\">`MyWhile`</ph> calls  <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivityContext.ScheduleActivity%2A&gt;</ph>, passing in the <ph id=\"ph4\">`Body`</ph><ph id=\"ph5\">&lt;xref:System.Activities.Activity&gt;</ph> object and <ph id=\"ph6\">`InternalExecute`</ph> as the <ph id=\"ph7\">&lt;xref:System.Activities.CompletionCallback&gt;</ph>.","pos":[5480,5711],"source":" If `true`, `MyWhile` calls  <xref:System.Activities.NativeActivityContext.ScheduleActivity%2A>, passing in the `Body`<xref:System.Activities.Activity> object and `InternalExecute` as the <xref:System.Activities.CompletionCallback>."},{"content":"When the execution of <ph id=\"ph1\">`Body`</ph> completes, <ph id=\"ph2\">`Condition`</ph> gets scheduled again in <ph id=\"ph3\">`InternalExecute`</ph>, starting the loop over again.","pos":[5712,5836],"source":" When the execution of `Body` completes, `Condition` gets scheduled again in `InternalExecute`, starting the loop over again."},{"content":"When the <ph id=\"ph1\">`Condition`</ph> returns <ph id=\"ph2\">`false`</ph>, an instance of <ph id=\"ph3\">`MyWhile`</ph> gives control back to the runtime without scheduling the <ph id=\"ph4\">`Body`</ph> and the runtime moves it to the <ph id=\"ph5\">&lt;xref:System.Activities.ActivityInstanceState&gt;</ph> state.","pos":[5837,6049],"source":" When the `Condition` returns `false`, an instance of `MyWhile` gives control back to the runtime without scheduling the `Body` and the runtime moves it to the <xref:System.Activities.ActivityInstanceState> state."},{"pos":[6060,6096],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[6106,6202],"content":"Open the Composite.sln sample solution in <ph id=\"ph1\">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.","source":"Open the Composite.sln sample solution in [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]."},{"content":"Build and run the solution.","pos":[6212,6239]},{"pos":[6247,6379],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[6433,6759],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[6760,6810]},{"pos":[6930,6938],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}