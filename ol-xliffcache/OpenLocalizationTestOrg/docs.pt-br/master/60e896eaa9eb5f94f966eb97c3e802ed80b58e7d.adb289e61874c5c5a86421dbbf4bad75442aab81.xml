{"content":"---\ntitle: \"How to: Examine and Instantiate Generic Types with Reflection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"reflection, generic types\"\n  - \"generics [.NET Framework], reflection\"\nms.assetid: f93b03b0-1778-43fc-bc6d-35983d210e74\ncaps.latest.revision: 16\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Examine and Instantiate Generic Types with Reflection\nInformation about generic types is obtained in the same way as information about other types: by examining a <xref:System.Type> object that represents the generic type. The principle difference is that a generic type has a list of <xref:System.Type> objects representing its generic type parameters. The first procedure in this section examines generic types.  \n  \n You can create a <xref:System.Type> object that represents a constructed type by binding type arguments to the type parameters of a generic type definition. The second procedure demonstrates this.  \n  \n### To examine a generic type and its type parameters  \n  \n1.  Get an instance of <xref:System.Type> that represents the generic type. In the following code, the type is obtained using the C# `typeof` operator (`GetType` in Visual Basic, `typeid` in Visual C++). See the <xref:System.Type> class topic for other ways to get a <xref:System.Type> object. Note that in the rest of this procedure, the type is contained in a method parameter named `t`.  \n  \n     [!code-cpp[HowToGeneric#2](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#2)]\n     [!code-csharp[HowToGeneric#2](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#2)]\n     [!code-vb[HowToGeneric#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#2)]  \n  \n2.  Use the <xref:System.Type.IsGenericType%2A> property to determine whether the type is generic, and use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether the type is a generic type definition.  \n  \n     [!code-cpp[HowToGeneric#3](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#3)]\n     [!code-csharp[HowToGeneric#3](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#3)]\n     [!code-vb[HowToGeneric#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#3)]  \n  \n3.  Get an array that contains the generic type arguments, using the <xref:System.Type.GetGenericArguments%2A> method.  \n  \n     [!code-cpp[HowToGeneric#4](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#4)]\n     [!code-csharp[HowToGeneric#4](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#4)]\n     [!code-vb[HowToGeneric#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#4)]  \n  \n4.  For each type argument, determine whether it is a type parameter (for example, in a generic type definition) or a type that has been specified for a type parameter (for example, in a constructed type), using the <xref:System.Type.IsGenericParameter%2A> property.  \n  \n     [!code-cpp[HowToGeneric#5](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#5)]\n     [!code-csharp[HowToGeneric#5](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#5)]\n     [!code-vb[HowToGeneric#5](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#5)]  \n  \n5.  In the type system, a generic type parameter is represented by an instance of <xref:System.Type>, just as ordinary types are. The following code displays the name and parameter position of a <xref:System.Type> object that represents a generic type parameter. The parameter position is trivial information here; it is of more interest when you are examining a type parameter that has been used as a type argument of another generic type.  \n  \n     [!code-cpp[HowToGeneric#6](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#6)]\n     [!code-csharp[HowToGeneric#6](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#6)]\n     [!code-vb[HowToGeneric#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#6)]  \n  \n6.  Determine the base type constraint and the interface constraints of a generic type parameter by using the <xref:System.Type.GetGenericParameterConstraints%2A> method to obtain all the constraints in a single array. Constraints are not guaranteed to be in any particular order.  \n  \n     [!code-cpp[HowToGeneric#7](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#7)]\n     [!code-csharp[HowToGeneric#7](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#7)]\n     [!code-vb[HowToGeneric#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#7)]  \n  \n7.  Use the <xref:System.Type.GenericParameterAttributes%2A> property to discover the special constraints on a type parameter, such as requiring that it be a reference type. The property also includes values that represent variance, which you can mask off as shown in the following code.  \n  \n     [!code-cpp[HowToGeneric#8](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#8)]\n     [!code-csharp[HowToGeneric#8](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#8)]\n     [!code-vb[HowToGeneric#8](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#8)]  \n  \n8.  The special constraint attributes are flags, and the same flag (<xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName>) that represents no special constraints also represents no covariance or contravariance. Thus, to test for either of these conditions you must use the appropriate mask. In this case, use <xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName> to isolate the special constraint flags.  \n  \n     [!code-cpp[HowToGeneric#9](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#9)]\n     [!code-csharp[HowToGeneric#9](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#9)]\n     [!code-vb[HowToGeneric#9](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#9)]  \n  \n## Constructing an Instance of a Generic Type  \n A generic type is like a template. You cannot create instances of it unless you specify real types for its generic type parameters. To do this at run time, using reflection, requires the <xref:System.Type.MakeGenericType%2A> method.  \n  \n#### To construct an instance of a generic type  \n  \n1.  Get a <xref:System.Type> object that represents the generic type. The following code gets the generic type <xref:System.Collections.Generic.Dictionary%602> in two different ways: by using the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload with a string describing the type, and by calling the <xref:System.Type.GetGenericTypeDefinition%2A> method on the constructed type `Dictionary\\<String, Example>` (`Dictionary(Of String, Example)` in Visual Basic). The <xref:System.Type.MakeGenericType%2A> method requires a generic type definition.  \n  \n     [!code-cpp[HowToGeneric#10](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#10)]\n     [!code-csharp[HowToGeneric#10](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#10)]\n     [!code-vb[HowToGeneric#10](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#10)]  \n  \n2.  Construct an array of type arguments to substitute for the type parameters. The array must contain the correct number of <xref:System.Type> objects, in the same order as they appear in the type parameter list. In this case, the key (first type parameter) is of type <xref:System.String>, and the values in the dictionary are instances of a class named `Example`.  \n  \n     [!code-cpp[HowToGeneric#11](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#11)]\n     [!code-csharp[HowToGeneric#11](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#11)]\n     [!code-vb[HowToGeneric#11](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#11)]  \n  \n3.  Call the <xref:System.Type.MakeGenericType%2A> method to bind the type arguments to the type parameters and construct the type.  \n  \n     [!code-cpp[HowToGeneric#12](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#12)]\n     [!code-csharp[HowToGeneric#12](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#12)]\n     [!code-vb[HowToGeneric#12](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#12)]  \n  \n4.  Use the <xref:System.Activator.CreateInstance%28System.Type%29> method overload to create an object of the constructed type. The following code stores two instances of the `Example` class in the resulting `Dictionary<String, Example>` object.  \n  \n     [!code-cpp[HowToGeneric#13](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#13)]\n     [!code-csharp[HowToGeneric#13](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#13)]\n     [!code-vb[HowToGeneric#13](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#13)]  \n  \n## Example  \n The following code example defines a `DisplayGenericType` method to examine the generic type definitions and constructed types used in the code and display their information. The `DisplayGenericType` method shows how to use the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.GenericParameterPosition%2A> properties and the <xref:System.Type.GetGenericArguments%2A> method.  \n  \n The example also defines a `DisplayGenericParameter` method to examine a generic type parameter and display its constraints.  \n  \n The code example defines a set of test types, including a generic type that illustrates type parameter constraints, and shows how to display information about these types.  \n  \n The example constructs a type from the <xref:System.Collections.Generic.Dictionary%602> class by creating an array of type arguments and calling the <xref:System.Type.MakeGenericType%2A> method. The program compares the <xref:System.Type> object constructed using <xref:System.Type.MakeGenericType%2A> with a <xref:System.Type> object obtained using `typeof` (`GetType` in Visual Basic), demonstrating that they are the same. Similarly, the program uses the <xref:System.Type.GetGenericTypeDefinition%2A> method to obtain the generic type definition of the constructed type, and compares it to the <xref:System.Type> object representing the <xref:System.Collections.Generic.Dictionary%602> class.  \n  \n [!code-cpp[HowToGeneric#1](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#1)]\n [!code-csharp[HowToGeneric#1](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#1)]\n [!code-vb[HowToGeneric#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#1)]  \n  \n## Compiling the Code  \n  \n-   The code contains the C# `using` statements (`Imports` in Visual Basic) necessary for compilation.  \n  \n-   No additional assembly references are required.  \n  \n-   Compile the code at the command line using csc.exe, vbc.exe, or cl.exe. To compile the code in Visual Studio, place it in a console application project template.  \n  \n## See Also  \n <xref:System.Type>   \n <xref:System.Reflection.MethodInfo>   \n [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)   \n [Viewing Type Information](../../../docs/framework/reflection-and-codedom/viewing-type-information.md)   \n [Generics](../../../docs/standard/generics/index.md)","nodes":[{"pos":[4,485],"embed":true,"restype":"x-metadata","content":"title: \"How to: Examine and Instantiate Generic Types with Reflection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"reflection, generic types\"\n  - \"generics [.NET Framework], reflection\"\nms.assetid: f93b03b0-1778-43fc-bc6d-35983d210e74\ncaps.latest.revision: 16\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Examine and Instantiate Generic Types with Reflection | Microsoft Docs","nodes":[{"pos":[0,78],"content":"How to: Examine and Instantiate Generic Types with Reflection | Microsoft Docs","nodes":[{"content":"How to: Examine and Instantiate Generic Types with Reflection | Microsoft Docs","pos":[0,78]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[492,553],"content":"How to: Examine and Instantiate Generic Types with Reflection","linkify":"How to: Examine and Instantiate Generic Types with Reflection","nodes":[{"content":"How to: Examine and Instantiate Generic Types with Reflection","pos":[0,61]}]},{"content":"Information about generic types is obtained in the same way as information about other types: by examining a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents the generic type.","pos":[554,722],"source":"Information about generic types is obtained in the same way as information about other types: by examining a <xref:System.Type> object that represents the generic type."},{"content":"The principle difference is that a generic type has a list of <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> objects representing its generic type parameters.","pos":[723,853],"source":" The principle difference is that a generic type has a list of <xref:System.Type> objects representing its generic type parameters."},{"content":"The first procedure in this section examines generic types.","pos":[854,913]},{"content":"You can create a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents a constructed type by binding type arguments to the type parameters of a generic type definition.","pos":[920,1076],"source":"You can create a <xref:System.Type> object that represents a constructed type by binding type arguments to the type parameters of a generic type definition."},{"content":"The second procedure demonstrates this.","pos":[1077,1116]},{"pos":[1126,1175],"content":"To examine a generic type and its type parameters","linkify":"To examine a generic type and its type parameters","nodes":[{"content":"To examine a generic type and its type parameters","pos":[0,49]}]},{"content":"Get an instance of <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> that represents the generic type.","pos":[1185,1256],"source":"Get an instance of <xref:System.Type> that represents the generic type."},{"content":"In the following code, the type is obtained using the C# <ph id=\"ph1\">`typeof`</ph> operator (<ph id=\"ph2\">`GetType`</ph> in Visual Basic, <ph id=\"ph3\">`typeid`</ph> in Visual C++).","pos":[1257,1384],"source":" In the following code, the type is obtained using the C# `typeof` operator (`GetType` in Visual Basic, `typeid` in Visual C++)."},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> class topic for other ways to get a <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object.","pos":[1385,1474],"source":" See the <xref:System.Type> class topic for other ways to get a <xref:System.Type> object."},{"content":"Note that in the rest of this procedure, the type is contained in a method parameter named <ph id=\"ph1\">`t`</ph>.","pos":[1475,1570],"source":" Note that in the rest of this procedure, the type is contained in a method parameter named `t`."},{"pos":[1581,1902],"content":"[!code-cpp[HowToGeneric#2](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#2)]\n [!code-csharp[HowToGeneric#2](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#2)]\n [!code-vb[HowToGeneric#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#2)]","leadings":["","    ","    "],"nodes":[]},{"pos":[1912,2133],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property to determine whether the type is generic, and use the <ph id=\"ph2\">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph> property to determine whether the type is a generic type definition.","source":"Use the <xref:System.Type.IsGenericType%2A> property to determine whether the type is generic, and use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether the type is a generic type definition."},{"pos":[2144,2465],"content":"[!code-cpp[HowToGeneric#3](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#3)]\n [!code-csharp[HowToGeneric#3](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#3)]\n [!code-vb[HowToGeneric#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#3)]","leadings":["","    ","    "],"nodes":[]},{"pos":[2475,2589],"content":"Get an array that contains the generic type arguments, using the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph> method.","source":"Get an array that contains the generic type arguments, using the <xref:System.Type.GetGenericArguments%2A> method."},{"pos":[2600,2921],"content":"[!code-cpp[HowToGeneric#4](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#4)]\n [!code-csharp[HowToGeneric#4](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#4)]\n [!code-vb[HowToGeneric#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#4)]","leadings":["","    ","    "],"nodes":[]},{"pos":[2931,3193],"content":"For each type argument, determine whether it is a type parameter (for example, in a generic type definition) or a type that has been specified for a type parameter (for example, in a constructed type), using the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph> property.","source":"For each type argument, determine whether it is a type parameter (for example, in a generic type definition) or a type that has been specified for a type parameter (for example, in a constructed type), using the <xref:System.Type.IsGenericParameter%2A> property."},{"pos":[3204,3525],"content":"[!code-cpp[HowToGeneric#5](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#5)]\n [!code-csharp[HowToGeneric#5](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#5)]\n [!code-vb[HowToGeneric#5](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#5)]","leadings":["","    ","    "],"nodes":[]},{"content":"In the type system, a generic type parameter is represented by an instance of <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph>, just as ordinary types are.","pos":[3535,3660],"source":"In the type system, a generic type parameter is represented by an instance of <xref:System.Type>, just as ordinary types are."},{"content":"The following code displays the name and parameter position of a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents a generic type parameter.","pos":[3661,3793],"source":" The following code displays the name and parameter position of a <xref:System.Type> object that represents a generic type parameter."},{"content":"The parameter position is trivial information here; it is of more interest when you are examining a type parameter that has been used as a type argument of another generic type.","pos":[3794,3971]},{"pos":[3982,4303],"content":"[!code-cpp[HowToGeneric#6](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#6)]\n [!code-csharp[HowToGeneric#6](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#6)]\n [!code-vb[HowToGeneric#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#6)]","leadings":["","    ","    "],"nodes":[]},{"content":"Determine the base type constraint and the interface constraints of a generic type parameter by using the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph> method to obtain all the constraints in a single array.","pos":[4313,4527],"source":"Determine the base type constraint and the interface constraints of a generic type parameter by using the <xref:System.Type.GetGenericParameterConstraints%2A> method to obtain all the constraints in a single array."},{"content":"Constraints are not guaranteed to be in any particular order.","pos":[4528,4589]},{"pos":[4600,4921],"content":"[!code-cpp[HowToGeneric#7](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#7)]\n [!code-csharp[HowToGeneric#7](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#7)]\n [!code-vb[HowToGeneric#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#7)]","leadings":["","    ","    "],"nodes":[]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph> property to discover the special constraints on a type parameter, such as requiring that it be a reference type.","pos":[4931,5100],"source":"Use the <xref:System.Type.GenericParameterAttributes%2A> property to discover the special constraints on a type parameter, such as requiring that it be a reference type."},{"content":"The property also includes values that represent variance, which you can mask off as shown in the following code.","pos":[5101,5214]},{"pos":[5225,5546],"content":"[!code-cpp[HowToGeneric#8](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#8)]\n [!code-csharp[HowToGeneric#8](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#8)]\n [!code-vb[HowToGeneric#8](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#8)]","leadings":["","    ","    "],"nodes":[]},{"content":"The special constraint attributes are flags, and the same flag (<ph id=\"ph1\">&lt;xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName&gt;</ph>) that represents no special constraints also represents no covariance or contravariance.","pos":[5556,5785],"source":"The special constraint attributes are flags, and the same flag (<xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName>) that represents no special constraints also represents no covariance or contravariance."},{"content":"Thus, to test for either of these conditions you must use the appropriate mask.","pos":[5786,5865]},{"content":"In this case, use <ph id=\"ph1\">&lt;xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName&gt;</ph> to isolate the special constraint flags.","pos":[5866,6001],"source":" In this case, use <xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName> to isolate the special constraint flags."},{"pos":[6012,6333],"content":"[!code-cpp[HowToGeneric#9](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#9)]\n [!code-csharp[HowToGeneric#9](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#9)]\n [!code-vb[HowToGeneric#9](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#9)]","leadings":["","    ","    "],"nodes":[]},{"pos":[6342,6384],"content":"Constructing an Instance of a Generic Type","linkify":"Constructing an Instance of a Generic Type","nodes":[{"content":"Constructing an Instance of a Generic Type","pos":[0,42]}]},{"content":"A generic type is like a template.","pos":[6388,6422]},{"content":"You cannot create instances of it unless you specify real types for its generic type parameters.","pos":[6423,6519]},{"content":"To do this at run time, using reflection, requires the <ph id=\"ph1\">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method.","pos":[6520,6620],"source":" To do this at run time, using reflection, requires the <xref:System.Type.MakeGenericType%2A> method."},{"pos":[6631,6673],"content":"To construct an instance of a generic type","linkify":"To construct an instance of a generic type","nodes":[{"content":"To construct an instance of a generic type","pos":[0,42]}]},{"content":"Get a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents the generic type.","pos":[6683,6748],"source":"Get a <xref:System.Type> object that represents the generic type."},{"content":"The following code gets the generic type <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> in two different ways: by using the <ph id=\"ph2\">&lt;xref:System.Type.GetType%28System.String%29?displayProperty=fullName&gt;</ph> method overload with a string describing the type, and by calling the <ph id=\"ph3\">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph> method on the constructed type <ph id=\"ph4\">`Dictionary\\&lt;String, Example&gt;`</ph> (<ph id=\"ph5\">`Dictionary(Of String, Example)`</ph> in Visual Basic).","pos":[6749,7176],"source":" The following code gets the generic type <xref:System.Collections.Generic.Dictionary%602> in two different ways: by using the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload with a string describing the type, and by calling the <xref:System.Type.GetGenericTypeDefinition%2A> method on the constructed type `Dictionary\\<String, Example>` (`Dictionary(Of String, Example)` in Visual Basic)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method requires a generic type definition.","pos":[7177,7261],"source":" The <xref:System.Type.MakeGenericType%2A> method requires a generic type definition."},{"pos":[7272,7599],"content":"[!code-cpp[HowToGeneric#10](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#10)]\n [!code-csharp[HowToGeneric#10](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#10)]\n [!code-vb[HowToGeneric#10](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#10)]","leadings":["","    ","    "],"nodes":[]},{"content":"Construct an array of type arguments to substitute for the type parameters.","pos":[7609,7684]},{"content":"The array must contain the correct number of <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> objects, in the same order as they appear in the type parameter list.","pos":[7685,7818],"source":" The array must contain the correct number of <xref:System.Type> objects, in the same order as they appear in the type parameter list."},{"content":"In this case, the key (first type parameter) is of type <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>, and the values in the dictionary are instances of a class named <ph id=\"ph2\">`Example`</ph>.","pos":[7819,7971],"source":" In this case, the key (first type parameter) is of type <xref:System.String>, and the values in the dictionary are instances of a class named `Example`."},{"pos":[7982,8309],"content":"[!code-cpp[HowToGeneric#11](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#11)]\n [!code-csharp[HowToGeneric#11](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#11)]\n [!code-vb[HowToGeneric#11](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#11)]","leadings":["","    ","    "],"nodes":[]},{"pos":[8319,8446],"content":"Call the <ph id=\"ph1\">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method to bind the type arguments to the type parameters and construct the type.","source":"Call the <xref:System.Type.MakeGenericType%2A> method to bind the type arguments to the type parameters and construct the type."},{"pos":[8457,8784],"content":"[!code-cpp[HowToGeneric#12](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#12)]\n [!code-csharp[HowToGeneric#12](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#12)]\n [!code-vb[HowToGeneric#12](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#12)]","leadings":["","    ","    "],"nodes":[]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%28System.Type%29&gt;</ph> method overload to create an object of the constructed type.","pos":[8794,8918],"source":"Use the <xref:System.Activator.CreateInstance%28System.Type%29> method overload to create an object of the constructed type."},{"content":"The following code stores two instances of the <ph id=\"ph1\">`Example`</ph> class in the resulting <ph id=\"ph2\">`Dictionary&lt;String, Example&gt;`</ph> object.","pos":[8919,9036],"source":" The following code stores two instances of the `Example` class in the resulting `Dictionary<String, Example>` object."},{"pos":[9047,9374],"content":"[!code-cpp[HowToGeneric#13](../../../samples/snippets/cpp/VS_Snippets_CLR/HowToGeneric/cpp/ur.cpp#13)]\n [!code-csharp[HowToGeneric#13](../../../samples/snippets/csharp/VS_Snippets_CLR/HowToGeneric/CS/ur.cs#13)]\n [!code-vb[HowToGeneric#13](../../../samples/snippets/visualbasic/VS_Snippets_CLR/HowToGeneric/VB/ur.vb#13)]","leadings":["","    ","    "],"nodes":[]},{"pos":[9383,9390],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a <ph id=\"ph1\">`DisplayGenericType`</ph> method to examine the generic type definitions and constructed types used in the code and display their information.","pos":[9394,9568],"source":"The following code example defines a `DisplayGenericType` method to examine the generic type definitions and constructed types used in the code and display their information."},{"content":"The <ph id=\"ph1\">`DisplayGenericType`</ph> method shows how to use the <ph id=\"ph2\">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph> properties and the <ph id=\"ph5\">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph> method.","pos":[9569,9820],"source":" The `DisplayGenericType` method shows how to use the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.GenericParameterPosition%2A> properties and the <xref:System.Type.GetGenericArguments%2A> method."},{"pos":[9827,9951],"content":"The example also defines a <ph id=\"ph1\">`DisplayGenericParameter`</ph> method to examine a generic type parameter and display its constraints.","source":"The example also defines a `DisplayGenericParameter` method to examine a generic type parameter and display its constraints."},{"content":"The code example defines a set of test types, including a generic type that illustrates type parameter constraints, and shows how to display information about these types.","pos":[9958,10129]},{"content":"The example constructs a type from the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class by creating an array of type arguments and calling the <ph id=\"ph2\">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method.","pos":[10136,10330],"source":"The example constructs a type from the <xref:System.Collections.Generic.Dictionary%602> class by creating an array of type arguments and calling the <xref:System.Type.MakeGenericType%2A> method."},{"content":"The program compares the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object constructed using <ph id=\"ph2\">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> with a <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> object obtained using <ph id=\"ph4\">`typeof`</ph> (<ph id=\"ph5\">`GetType`</ph> in Visual Basic), demonstrating that they are the same.","pos":[10331,10561],"source":" The program compares the <xref:System.Type> object constructed using <xref:System.Type.MakeGenericType%2A> with a <xref:System.Type> object obtained using `typeof` (`GetType` in Visual Basic), demonstrating that they are the same."},{"content":"Similarly, the program uses the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph> method to obtain the generic type definition of the constructed type, and compares it to the <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object representing the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class.","pos":[10562,10832],"source":" Similarly, the program uses the <xref:System.Type.GetGenericTypeDefinition%2A> method to obtain the generic type definition of the constructed type, and compares it to the <xref:System.Type> object representing the <xref:System.Collections.Generic.Dictionary%602> class."},{"pos":[11161,11179],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[11189,11287],"content":"The code contains the C# <ph id=\"ph1\">`using`</ph> statements (<ph id=\"ph2\">`Imports`</ph> in Visual Basic) necessary for compilation.","source":"The code contains the C# `using` statements (`Imports` in Visual Basic) necessary for compilation."},{"content":"No additional assembly references are required.","pos":[11297,11344]},{"content":"Compile the code at the command line using csc.exe, vbc.exe, or cl.exe.","pos":[11354,11425]},{"content":"To compile the code in Visual Studio, place it in a console application project template.","pos":[11426,11515]},{"pos":[11524,11532],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Reflection and Generic Types<ept id=\"p1\">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[11599,11710],"source":"[Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Viewing Type Information<ept id=\"p1\">](../../../docs/framework/reflection-and-codedom/viewing-type-information.md)</ept><ph id=\"ph1\"> </ph>","pos":[11714,11817],"source":"[Viewing Type Information](../../../docs/framework/reflection-and-codedom/viewing-type-information.md) "},{"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../../../docs/standard/generics/index.md)</ept>","pos":[11821,11873],"source":"[Generics](../../../docs/standard/generics/index.md)"}]}