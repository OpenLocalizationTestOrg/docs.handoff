<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="introduction-to-classes.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b4c135b7adf96de3a234cde02485a1e84fc9fd3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\intro-to-csharp\introduction-to-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b87dc4622155741bac4cdca14619a1127639dc7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38a0aec62b1ad2dfeef793b5f21175dab1f570bc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Classes and objects  - Introduction to C# tutorial</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Create your first C# program and explore object oriented concepts</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Explore object oriented programming with classes and objects</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial expects that you have a machine you can use for development.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET topic <bpt id="p1">[</bpt>Get Started in 10 minutes<ept id="p1">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A quick overview of the commands you'll use is in the <bpt id="p1">[</bpt>Become familiar with the development tools<ept id="p1">](local-environment.md)</ept> with links to more details.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create your application</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using a terminal window, create a directory named <bpt id="p1">**</bpt>classes<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You'll build your application there.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Change to that directory and type <ph id="ph1">`dotnet new console`</ph> in the console window.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This command creates your application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It should look like this:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this tutorial, you're going to create new types that represent a bank account.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Typically developers define each class in a different text file.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>That makes it easier to manage as a program grows in size.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Create a new file named <bpt id="p1">**</bpt>BankAccount.cs<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>classes<ept id="p2">**</ept> directory.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This file will contain the definition of a <bpt id="p1">***</bpt>bank account<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Object Oriented programming organizes code by creating types in the form of <bpt id="p1">***</bpt>classes<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These classes contain the code that represents a specific entity.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BankAccount`</ph> class represents a bank account.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code implements specific operations through methods and properties.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this tutorial, the bank account supports this behavior:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It has a 10-digit number that uniquely identifies the bank account.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It has a string that stores the name or names of the owners.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The balance can be retrieved.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It accepts deposits.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It accepts withdrawals.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The initial balance must be positive.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Withdrawals cannot result in a negative balance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Define the bank account type</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can start by creating the basics of a class that defines that behavior.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It would look like this:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Before going on, let's take a look at what you've built.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`namespace`</ph> declaration provides a way to logically organize your code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This tutorial is relatively small, so you'll put all the code in one namespace.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`public class BankAccount`</ph> defines the class, or type, you are creating.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Everything inside the <ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph> that follows the class declaration defines the behavior of the class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>There are five <bpt id="p1">***</bpt>members<ept id="p1">***</ept> of the <ph id="ph1">`BankAccount`</ph> class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The first three are <bpt id="p1">***</bpt>properties<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Properties are data elements and can have code that enforces validation or other rules.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The last two are <bpt id="p1">***</bpt>methods<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Methods are blocks of code that perform a single function.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Reading the names of each of the members should provide enough information for you or another developer to understand what the class does.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Open a new account</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The first feature to implement is to open a bank account.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When a customer opens an account, they must supply an initial balance, and information about the owner or owners of that account.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Creating a new object of the <ph id="ph1">`BankAccount`</ph> type means defining a <bpt id="p1">***</bpt>constructor<ept id="p1">***</ept> that assigns those values.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>constructor<ept id="p1">***</ept> is a member that has the same name as the class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It is used to initialize objects of that class type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Add the following constructor to the <ph id="ph1">`BankAccount`</ph> type:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Constructors are called when you create an object using <bpt id="p1">[</bpt><ph id="ph1">`new`</ph><ept id="p1">](../../language-reference/keywords/new.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Replace the line <ph id="ph1">`Console.WriteLine("Hello World!");`</ph> in <bpt id="p1">***</bpt>program.cs<ept id="p1">***</ept> with the following line (replace <ph id="ph2">`&lt;name&gt;`</ph> with your name):</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`dotnet run`</ph> to see what happens.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Did you notice that the account number is blank?</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It's time to fix that.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The account number should be assigned when the object is constructed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>But it shouldn't be the responsibility of the caller to create it.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BankAccount`</ph> class code should know how to assign new account numbers.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A simple way to do this is to start with a 10-digit number.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Increment it when each new account is created.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Finally, store the current account number when an object is constructed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Add the following member declaration to the <ph id="ph1">`BankAccount`</ph> class:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This is a data member.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It's <ph id="ph1">`private`</ph>, which means it can only be accessed by code inside the <ph id="ph2">`BankAccount`</ph> class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It's a way of separating the public responsibilities (like having an account number) from the private implementation (how account numbers are generated.) It is also <ph id="ph1">`static`</ph>, which means it is shared by all of the <ph id="ph2">`BankAccount`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The value of a non-static variable is unique to each instance of the <ph id="ph1">`BankAccount`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Add the following two lines to the constructor to assign the account number:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`dotnet run`</ph> to see the results.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Create deposits and withdrawals</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Your bank account class needs to accept deposits and withdrawals to work correctly.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Let's implement deposits and withdrawals by creating a journal of every transaction for the account.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>That has a few advantages over simply updating the balance on each transaction.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The history can be used to audit all transactions and manage daily balances.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>By computing the balance from the history of all transactions when needed, any errors in a single transaction that are fixed will be correctly reflected in the balance on the next computation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Let's start by creating a new type to represent a transaction.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is a simple type that doesn't have any responsibilities.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It needs a few properties.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Create a new file named <bpt id="p1">***</bpt>Transaction.cs<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Add the following code to it:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Now, let's add a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of <ph id="ph2">`Transaction`</ph> objects to the <ph id="ph3">`BankAccount`</ph> class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Add the following declaration:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class requires you to import a different namespace.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Add the following at the beginning of <bpt id="p1">**</bpt>BankAccount.cs<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Now, let's change how the <ph id="ph1">`Balance`</ph> is reported.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It can be found by summing the values of all transactions.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Modify the declaration of <ph id="ph1">`Balance`</ph> in the <ph id="ph2">`BankAccount`</ph> class to the following:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This example shows an important aspect of <bpt id="p1">***</bpt>properties<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You're now computing the balance when another programmer asks for the value.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Your computation enumerates all transactions, and provides the sum as the current balance.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Next, implement the <ph id="ph1">`MakeDeposit`</ph> and <ph id="ph2">`MakeWithdrawal`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These methods will enforce the final two rules: that the initial balance must be positive, and that any withdrawal must not create a negative balance.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This introduces the concept of <bpt id="p1">***</bpt>exceptions<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The standard way of indicating that a method cannot complete its work successfully is to throw an exception.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The type of exception and the message associated with it describe the error.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Here, the <ph id="ph1">`MakeDeposit`</ph> method throws an exception if the amount of the deposit is negative.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MakeWithdrawal`</ph> method throws an exception if the withdrawal amount is negative, or if applying the withdrawal results in a negative balance:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`throw`</ph><ept id="p1">](../../language-reference/keywords/throw.md)</ept> statement <bpt id="p2">**</bpt>throws<ept id="p2">**</ept> an exception.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Execution of the current block ends, and control transfers to the first matching <ph id="ph1">`catch`</ph> block found in the call stack.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You'll add a <ph id="ph1">`catch`</ph> block to test this code a little later on.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The constructor should get one change so that it adds an initial transaction, rather than updating the balance directly.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Since you already wrote the <ph id="ph1">`MakeDeposit`</ph> method, call it from your constructor.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The finished constructor should look like this:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.DateTime.Now?displayProperty=nameWithType&gt;</ph> is a property that returns the current date and time.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Test this by adding a few deposits and withdrawals in your <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Next, test that you are catching error conditions by trying to create an account with a negative balance:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">[</bpt><ph id="ph1">`try`</ph> and <ph id="ph2">`catch`</ph> statements<ept id="p1">](../../language-reference/keywords/try-catch.md)</ept> to mark a block of code that may throw exceptions and to catch those errors that you expect.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can use the same technique to test the code that throws an exception for a negative balance:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Save the file and type <ph id="ph1">`dotnet run`</ph> to try it.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Challenge - log all transactions</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>To finish this tutorial, you can write the <ph id="ph1">`GetAccountHistory`</ph> method that creates a <ph id="ph2">`string`</ph> for the transaction history.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Add this method to the <ph id="ph1">`BankAccount`</ph> type:</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This uses the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class to format a string that contains one line for each transaction.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You've seen the string formatting code earlier in these tutorials.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>One new character is <ph id="ph1">`\t`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>That inserts a tab to format the output.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Add this line to test it in <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`dotnet run`</ph> to see the results.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If you got stuck, you can see the source for this tutorial <bpt id="p1">[</bpt>in our GitHub repo<ept id="p1">](https://github.com/dotnet/samples/tree/master/csharp/classes-quickstart/)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Congratulations, you've finished all our introduction to C# tutorials.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you're eager to learn more, try more of our <bpt id="p1">[</bpt>tutorials<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>