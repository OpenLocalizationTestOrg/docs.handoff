{"content":"---\ntitle: \"Configuration and Metadata Support\"\nms.date: \"03/30/2017\"\nms.assetid: 27c240cb-8cab-472c-87f8-c864f4978758\n---\n# Configuration and Metadata Support\nThis topic describes how to enable configuration and metadata support for bindings and binding elements.  \n  \n## Overview of Configuration and Metadata  \n This topic discusses the following tasks, which are optional items 1, 2, and 4 in the [Developing Channels](../../../../docs/framework/wcf/extending/developing-channels.md) task list.  \n  \n-   Enabling configuration file support for a binding element.  \n  \n-   Enabling configuration file support for a binding.  \n  \n-   Exporting WSDL and policy assertions for a binding element.  \n  \n-   Identifying WSDL and policy assertions to insert and configure your binding or binding element.  \n  \n For information about creating user-defined bindings and binding elements, see [Creating User-Defined Bindings](../../../../docs/framework/wcf/extending/creating-user-defined-bindings.md) and [Creating a BindingElement](../../../../docs/framework/wcf/extending/creating-a-bindingelement.md), respectively.  \n  \n## Adding Configuration Support  \n To enable configuration file support for a channel, you must implement two configuration sections, <xref:System.ServiceModel.Configuration.BindingElementExtensionElement?displayProperty=nameWithType>, which enables configuration support for binding elements, and the <xref:System.ServiceModel.Configuration.StandardBindingElement?displayProperty=nameWithType> and <xref:System.ServiceModel.Configuration.StandardBindingCollectionElement%602?displayProperty=nameWithType>, which enable configuration support for bindings.  \n  \n An easier way to do this is to use the [ConfigurationCodeGenerator](../../../../docs/framework/wcf/samples/configurationcodegenerator.md) sample tool to generate configuration code for your bindings and binding elements.  \n  \n### Extending BindingElementExtensionElement  \n The following example code is taken from the [Transport: UDP](../../../../docs/framework/wcf/samples/transport-udp.md) sample. The `UdpTransportElement` is a <xref:System.ServiceModel.Configuration.BindingElementExtensionElement> that exposes `UdpTransportBindingElement` to the configuration system. With a few basic overrides, the sample defines the configuration section name, the type of the binding element and how to create the binding element. Users can then register the extension section in a configuration file as follows.  \n  \n```xml  \n<configuration>  \n  <system.serviceModel>  \n    <extensions>  \n      <bindingElementExtensions>  \n      <add name=\"udpTransport\" type=\"Microsoft.ServiceModel.Samples.UdpTransportElement, UdpTransport />  \n      </bindingElementExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```  \n  \n The extension can be referenced from custom bindings to use UDP as the transport.  \n  \n```xml  \n<configuration>  \n  <system.serviceModel>  \n    <bindings>  \n      <customBinding>  \n       <binding configurationName=\"UdpCustomBinding\">  \n         <udpTransport/>  \n       </binding>  \n      </customBinding>  \n    </bindings>  \n  </system.serviceModel>  \n</configuration>  \n```  \n  \n### Adding Configuration for a Binding  \n The section `SampleProfileUdpBindingCollectionElement` is a <xref:System.ServiceModel.Configuration.StandardBindingCollectionElement%602> that exposes `SampleProfileUdpBinding` to the configuration system. The bulk of the implementation is delegated to the `SampleProfileUdpBindingConfigurationElement`, which derives from <xref:System.ServiceModel.Configuration.StandardBindingElement>. The `SampleProfileUdpBindingConfigurationElement` has properties that correspond to the properties on `SampleProfileUdpBinding`, and functions to map from the `ConfigurationElement` binding. Finally, the `OnApplyConfiguration` method is overridden in the `SampleProfileUdpBinding`, as shown in the following sample code.  \n  \n```csharp \nprotected override void OnApplyConfiguration(string configurationName)  \n{  \n            if (binding == null)  \n                throw new ArgumentNullException(\"binding\");  \n  \n            if (binding.GetType() != typeof(SampleProfileUdpBinding))  \n            {  \n                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture,  \n                    \"Invalid type for binding. Expected type: {0}. Type passed in: {1}.\",  \n                    typeof(SampleProfileUdpBinding).AssemblyQualifiedName,  \n                    binding.GetType().AssemblyQualifiedName));  \n            }  \n            SampleProfileUdpBinding udpBinding = (SampleProfileUdpBinding)binding;  \n  \n            udpBinding.OrderedSession = this.OrderedSession;  \n            udpBinding.ReliableSessionEnabled = this.ReliableSessionEnabled;  \n            udpBinding.SessionInactivityTimeout = this.SessionInactivityTimeout;  \n            if (this.ClientBaseAddress != null)  \n                   udpBinding.ClientBaseAddress = ClientBaseAddress;  \n}  \n```  \n  \n To register this handler with the configuration system, add the following section to the relevant configuration file.  \n  \n```xml  \n<configuration>  \n  <configSections>  \n     <sectionGroup name=\"system.serviceModel\">  \n         <sectionGroup name=\"bindings\">  \n                 <section name=\"sampleProfileUdpBinding\" type=\"Microsoft.ServiceModel.Samples.SampleProfileUdpBindingCollectionElement, UdpTransport />  \n         </sectionGroup>  \n     </sectionGroup>  \n  </configSections>  \n</configuration>  \n```  \n  \n It can then be referenced from the [\\<system.serviceModel>](../../../../docs/framework/configure-apps/file-schema/wcf/system-servicemodel.md) configuration section.  \n  \n```xml  \n<configuration>  \n  <system.serviceModel>  \n    <client>  \n      <endpoint configurationName=\"calculator\"  \n                address=\"soap.udp://localhost:8001/\"   \n                bindingConfiguration=\"CalculatorServer\"  \n                binding=\"sampleProfileUdpBinding\"   \n                contract= \"Microsoft.ServiceModel.Samples.ICalculatorContract\">  \n      </endpoint>  \n    </client>  \n  </system.serviceModel>  \n</configuration>  \n```  \n  \n## Adding Metadata Support for a Binding Element  \n To integrate a channel into the metadata system, it must support both the import and export of policy. This allows tools such as [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) to generate clients of the binding element.  \n  \n### Adding WSDL Support  \n The transport binding element in a binding is responsible for exporting and importing addressing information in metadata. When using a SOAP binding, the transport binding element should also export a correct transport URI in metadata. The following example code is taken from the [Transport: UDP](../../../../docs/framework/wcf/samples/transport-udp.md) sample.  \n  \n#### WSDL Export  \n To export addressing information, the `UdpTransportBindingElement` implements the <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> interface. The <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%2A?displayProperty=nameWithType> method adds the correct addressing information to the WSDL port.  \n  \n```csharp  \nif (context.WsdlPort != null)  \n{  \n    AddAddressToWsdlPort(context.WsdlPort, context.Endpoint.Address, encodingBindingElement.MessageVersion.Addressing);  \n}  \n```  \n  \n The `UdpTransportBindingElement` implementation of the <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%2A> method also exports a transport URI when the endpoint uses a SOAP binding:  \n  \n```csharp  \nWsdlNS.SoapBinding soapBinding = GetSoapBinding(context, exporter);  \nif (soapBinding != null)  \n{  \n    soapBinding.Transport = UdpPolicyStrings.UdpNamespace;  \n}  \n```  \n  \n#### WSDL Import  \n To extend the WSDL import system to handle importing the addresses, add the following configuration to the configuration file for Svcutil.exe as shown in the Svcutil.exe.config file:  \n  \n```xml  \n<configuration>  \n  <system.serviceModel>  \n    <client>  \n      <metadata>  \n        <wsdlImporters>  \n          <extension type=\" Microsoft.ServiceModel.Samples.UdpBindingElementImporter, UdpTransport\" />  \n        </policyImporters>  \n      </metadata>  \n    </client>  \n  </system.serviceModel>  \n</configuration>  \n```  \n  \n When running Svcutil.exe, there are two options for getting Svcutil.exe to load the WSDL import extensions:  \n  \n1.  Point Svcutil.exe to the configuration file using the /SvcutilConfig:\\<file>.  \n  \n2.  Add the configuration section to Svcutil.exe.config in the same directory as Svcutil.exe.  \n  \n The `UdpBindingElementImporter` type implements the <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> interface. The `ImportEndpoint` method imports the address from the WSDL port:  \n  \n```csharp  \nBindingElementCollection bindingElements = context.Endpoint.Binding.CreateBindingElements();  \nTransportBindingElement transportBindingElement = bindingElements.Find<TransportBindingElement>();  \nif (transportBindingElement is UdpTransportBindingElement)  \n{  \n    ImportAddress(context);  \n}  \n```  \n  \n### Adding Policy Support  \n The custom binding element can export policy assertions in the WSDL binding for a service endpoint to express the capabilities of that binding element. The following example code is taken from the [Transport: UDP](../../../../docs/framework/wcf/samples/transport-udp.md) sample.  \n  \n#### Policy Export  \n The `UdpTransportBindingElement` type implements <xref:System.ServiceModel.Description.IPolicyExportExtension?displayProperty=nameWithType> to add support for exporting policy. As a result, <xref:System.ServiceModel.Description.MetadataExporter?displayProperty=nameWithType> includes `UdpTransportBindingElement` in the generation of policy for any binding that includes it.  \n  \n In <xref:System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy%2A?displayProperty=nameWithType>, add an assertion for UDP and another assertion if the channel is in multicast mode. This is because multicast mode affects how the communication stack is constructed, and thus must be coordinated between both sides.  \n  \n```csharp  \nICollection<XmlElement> bindingAssertions = context.GetBindingAssertions();  \nXmlDocument xmlDocument = new XmlDocument();  \nbindingAssertions.Add(xmlDocument.CreateElement(  \nUdpPolicyStrings.Prefix, UdpPolicyStrings.TransportAssertion, UdpPolicyStrings.UdpNamespace));  \nif (Multicast)  \n{  \n    bindingAssertions.Add(xmlDocument.CreateElement(  \nUdpPolicyStrings.Prefix, UdpPolicyStrings.MulticastAssertion,     UdpPolicyStrings.UdpNamespace));  \n}  \n```  \n  \n Because custom transport binding elements are responsible for handling addressing, the <xref:System.ServiceModel.Description.IPolicyExportExtension?displayProperty=nameWithType> implementation on the `UdpTransportBindingElement` must also handle exporting the appropriate WS-Addressing policy assertions to indicate the version of WS-Addressing being used.  \n  \n```csharp  \nAddWSAddressingAssertion(context, encodingBindingElement.MessageVersion.Addressing);  \n```  \n  \n#### Policy Import  \n To extend the policy import system, add the following configuration to the configuration file for Svcutil.exe as shown in the Svcutil.exe.config file:  \n  \n```xml  \n<configuration>  \n  <system.serviceModel>  \n    <client>  \n      <metadata>  \n        <policyImporters>  \n          <extension type=\" Microsoft.ServiceModel.Samples.UdpBindingElementImporter, UdpTransport\" />  \n        </policyImporters>  \n      </metadata>  \n    </client>  \n  </system.serviceModel>  \n</configuration>  \n```  \n  \n Then we implement <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType> from our registered class (`UdpBindingElementImporter`). In <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A?displayProperty=nameWithType>, examine the assertions in the appropriate namespace and process the ones for generating the transport and checking if it is multicast. In addition, remove the assertions that the importer handles from the list of binding assertions. Again, when running Svcutil.exe, there are two options for integration:  \n  \n1.  Point Svcutil.exe to our configuration file using the /SvcutilConfig:\\<file>.  \n  \n2.  Add the configuration section to Svcutil.exe.config in the same directory as Svcutil.exe.  \n  \n### Adding a Custom Standard Binding Importer  \n Svcutil.exe and the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> type, by default, recognize and import system-provided bindings. Otherwise, the binding gets imported as a <xref:System.ServiceModel.Channels.CustomBinding?displayProperty=nameWithType> instance. To enable Svcutil.exe and the <xref:System.ServiceModel.Description.WsdlImporter> to import the `SampleProfileUdpBinding` the `UdpBindingElementImporter` also acts as a custom standard binding importer.  \n  \n A custom standard binding importer implements the `ImportEndpoint` method on the <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> interface to examine the <xref:System.ServiceModel.Channels.CustomBinding?displayProperty=nameWithType> instance imported from metadata to see if it could have been generated by specific standard binding.  \n  \n```csharp  \nif (context.Endpoint.Binding is CustomBinding)  \n{  \n    Binding binding;  \n    if (transportBindingElement is UdpTransportBindingElement)  \n    {  \n        //if TryCreate is true, the CustomBinding will be replace by a SampleProfileUdpBinding in the  \n        //generated config file for better typed generation.  \n        if (SampleProfileUdpBinding.TryCreate(bindingElements, out binding))  \n        {  \n            binding.Name = context.Endpoint.Binding.Name;  \n            binding.Namespace = context.Endpoint.Binding.Namespace;  \n            context.Endpoint.Binding = binding;  \n        }  \n    }  \n}  \n```  \n  \n Generally, implementing a custom standard binding importer involves checking the properties of the imported binding elements to verify that only properties that could have been set by the standard binding have changed and all other properties are their defaults. A basic strategy for implementing a standard binding importer is to create an instance of the standard binding, propagate the properties from the binding elements to the standard binding instance that the standard binding supports, and the compare the binding elements from the standard binding with the imported binding elements.\n","nodes":[{"pos":[4,118],"embed":true,"restype":"x-metadata","content":"title: \"Configuration and Metadata Support\"\nms.date: \"03/30/2017\"\nms.assetid: 27c240cb-8cab-472c-87f8-c864f4978758","nodes":[{"content":"Configuration and Metadata Support","nodes":[{"pos":[0,34],"content":"Configuration and Metadata Support","nodes":[{"content":"Configuration and Metadata Support","pos":[0,34]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[125,159],"content":"Configuration and Metadata Support","linkify":"Configuration and Metadata Support","nodes":[{"content":"Configuration and Metadata Support","pos":[0,34]}]},{"content":"This topic describes how to enable configuration and metadata support for bindings and binding elements.","pos":[160,264]},{"pos":[273,311],"content":"Overview of Configuration and Metadata","linkify":"Overview of Configuration and Metadata","nodes":[{"content":"Overview of Configuration and Metadata","pos":[0,38]}]},{"pos":[315,498],"content":"This topic discusses the following tasks, which are optional items 1, 2, and 4 in the <bpt id=\"p1\">[</bpt>Developing Channels<ept id=\"p1\">](../../../../docs/framework/wcf/extending/developing-channels.md)</ept> task list.","source":"This topic discusses the following tasks, which are optional items 1, 2, and 4 in the [Developing Channels](../../../../docs/framework/wcf/extending/developing-channels.md) task list."},{"content":"Enabling configuration file support for a binding element.","pos":[508,566]},{"content":"Enabling configuration file support for a binding.","pos":[576,626]},{"content":"Exporting WSDL and policy assertions for a binding element.","pos":[636,695]},{"content":"Identifying WSDL and policy assertions to insert and configure your binding or binding element.","pos":[705,800]},{"pos":[807,1112],"content":"For information about creating user-defined bindings and binding elements, see <bpt id=\"p1\">[</bpt>Creating User-Defined Bindings<ept id=\"p1\">](../../../../docs/framework/wcf/extending/creating-user-defined-bindings.md)</ept> and <bpt id=\"p2\">[</bpt>Creating a BindingElement<ept id=\"p2\">](../../../../docs/framework/wcf/extending/creating-a-bindingelement.md)</ept>, respectively.","source":"For information about creating user-defined bindings and binding elements, see [Creating User-Defined Bindings](../../../../docs/framework/wcf/extending/creating-user-defined-bindings.md) and [Creating a BindingElement](../../../../docs/framework/wcf/extending/creating-a-bindingelement.md), respectively."},{"pos":[1121,1149],"content":"Adding Configuration Support","linkify":"Adding Configuration Support","nodes":[{"content":"Adding Configuration Support","pos":[0,28]}]},{"pos":[1153,1673],"content":"To enable configuration file support for a channel, you must implement two configuration sections, <ph id=\"ph1\">&lt;xref:System.ServiceModel.Configuration.BindingElementExtensionElement?displayProperty=nameWithType&gt;</ph>, which enables configuration support for binding elements, and the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Configuration.StandardBindingElement?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ServiceModel.Configuration.StandardBindingCollectionElement%602?displayProperty=nameWithType&gt;</ph>, which enable configuration support for bindings.","source":"To enable configuration file support for a channel, you must implement two configuration sections, <xref:System.ServiceModel.Configuration.BindingElementExtensionElement?displayProperty=nameWithType>, which enables configuration support for binding elements, and the <xref:System.ServiceModel.Configuration.StandardBindingElement?displayProperty=nameWithType> and <xref:System.ServiceModel.Configuration.StandardBindingCollectionElement%602?displayProperty=nameWithType>, which enable configuration support for bindings."},{"pos":[1680,1900],"content":"An easier way to do this is to use the <bpt id=\"p1\">[</bpt>ConfigurationCodeGenerator<ept id=\"p1\">](../../../../docs/framework/wcf/samples/configurationcodegenerator.md)</ept> sample tool to generate configuration code for your bindings and binding elements.","source":"An easier way to do this is to use the [ConfigurationCodeGenerator](../../../../docs/framework/wcf/samples/configurationcodegenerator.md) sample tool to generate configuration code for your bindings and binding elements."},{"pos":[1910,1950],"content":"Extending BindingElementExtensionElement","linkify":"Extending BindingElementExtensionElement","nodes":[{"content":"Extending BindingElementExtensionElement","pos":[0,40]}]},{"content":"The following example code is taken from the <bpt id=\"p1\">[</bpt>Transport: UDP<ept id=\"p1\">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.","pos":[1954,2080],"source":"The following example code is taken from the [Transport: UDP](../../../../docs/framework/wcf/samples/transport-udp.md) sample."},{"content":"The <ph id=\"ph1\">`UdpTransportElement`</ph> is a <ph id=\"ph2\">&lt;xref:System.ServiceModel.Configuration.BindingElementExtensionElement&gt;</ph> that exposes <ph id=\"ph3\">`UdpTransportBindingElement`</ph> to the configuration system.","pos":[2081,2254],"source":" The `UdpTransportElement` is a <xref:System.ServiceModel.Configuration.BindingElementExtensionElement> that exposes `UdpTransportBindingElement` to the configuration system."},{"content":"With a few basic overrides, the sample defines the configuration section name, the type of the binding element and how to create the binding element.","pos":[2255,2404]},{"content":"Users can then register the extension section in a configuration file as follows.","pos":[2405,2486]},{"content":"The extension can be referenced from custom bindings to use UDP as the transport.","pos":[2818,2899]},{"pos":[3204,3238],"content":"Adding Configuration for a Binding","linkify":"Adding Configuration for a Binding","nodes":[{"content":"Adding Configuration for a Binding","pos":[0,34]}]},{"content":"The section <ph id=\"ph1\">`SampleProfileUdpBindingCollectionElement`</ph> is a <ph id=\"ph2\">&lt;xref:System.ServiceModel.Configuration.StandardBindingCollectionElement%602&gt;</ph> that exposes <ph id=\"ph3\">`SampleProfileUdpBinding`</ph> to the configuration system.","pos":[3242,3447],"source":"The section `SampleProfileUdpBindingCollectionElement` is a <xref:System.ServiceModel.Configuration.StandardBindingCollectionElement%602> that exposes `SampleProfileUdpBinding` to the configuration system."},{"content":"The bulk of the implementation is delegated to the <ph id=\"ph1\">`SampleProfileUdpBindingConfigurationElement`</ph>, which derives from <ph id=\"ph2\">&lt;xref:System.ServiceModel.Configuration.StandardBindingElement&gt;</ph>.","pos":[3448,3629],"source":" The bulk of the implementation is delegated to the `SampleProfileUdpBindingConfigurationElement`, which derives from <xref:System.ServiceModel.Configuration.StandardBindingElement>."},{"content":"The <ph id=\"ph1\">`SampleProfileUdpBindingConfigurationElement`</ph> has properties that correspond to the properties on <ph id=\"ph2\">`SampleProfileUdpBinding`</ph>, and functions to map from the <ph id=\"ph3\">`ConfigurationElement`</ph> binding.","pos":[3630,3820],"source":" The `SampleProfileUdpBindingConfigurationElement` has properties that correspond to the properties on `SampleProfileUdpBinding`, and functions to map from the `ConfigurationElement` binding."},{"content":"Finally, the <ph id=\"ph1\">`OnApplyConfiguration`</ph> method is overridden in the <ph id=\"ph2\">`SampleProfileUdpBinding`</ph>, as shown in the following sample code.","pos":[3821,3950],"source":" Finally, the `OnApplyConfiguration` method is overridden in the `SampleProfileUdpBinding`, as shown in the following sample code."},{"content":"To register this handler with the configuration system, add the following section to the relevant configuration file.","pos":[5018,5135]},{"pos":[5535,5699],"content":"It can then be referenced from the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>system.serviceModel&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/system-servicemodel.md)</ept> configuration section.","source":"It can then be referenced from the [\\<system.serviceModel>](../../../../docs/framework/configure-apps/file-schema/wcf/system-servicemodel.md) configuration section."},{"pos":[6165,6210],"content":"Adding Metadata Support for a Binding Element","linkify":"Adding Metadata Support for a Binding Element","nodes":[{"content":"Adding Metadata Support for a Binding Element","pos":[0,45]}]},{"content":"To integrate a channel into the metadata system, it must support both the import and export of policy.","pos":[6214,6316]},{"content":"This allows tools such as <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to generate clients of the binding element.","pos":[6317,6519],"source":" This allows tools such as [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) to generate clients of the binding element."},{"pos":[6529,6548],"content":"Adding WSDL Support","linkify":"Adding WSDL Support","nodes":[{"content":"Adding WSDL Support","pos":[0,19]}]},{"content":"The transport binding element in a binding is responsible for exporting and importing addressing information in metadata.","pos":[6552,6673]},{"content":"When using a SOAP binding, the transport binding element should also export a correct transport URI in metadata.","pos":[6674,6786]},{"content":"The following example code is taken from the <bpt id=\"p1\">[</bpt>Transport: UDP<ept id=\"p1\">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.","pos":[6787,6913],"source":" The following example code is taken from the [Transport: UDP](../../../../docs/framework/wcf/samples/transport-udp.md) sample."},{"pos":[6924,6935],"content":"WSDL Export","linkify":"WSDL Export","nodes":[{"content":"WSDL Export","pos":[0,11]}]},{"content":"To export addressing information, the <ph id=\"ph1\">`UdpTransportBindingElement`</ph> implements the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType&gt;</ph> interface.","pos":[6939,7120],"source":"To export addressing information, the `UdpTransportBindingElement` implements the <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%2A?displayProperty=nameWithType&gt;</ph> method adds the correct addressing information to the WSDL port.","pos":[7121,7296],"source":" The <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%2A?displayProperty=nameWithType> method adds the correct addressing information to the WSDL port."},{"pos":[7486,7693],"content":"The <ph id=\"ph1\">`UdpTransportBindingElement`</ph> implementation of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%2A&gt;</ph> method also exports a transport URI when the endpoint uses a SOAP binding:","source":"The `UdpTransportBindingElement` implementation of the <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%2A> method also exports a transport URI when the endpoint uses a SOAP binding:"},{"pos":[7891,7902],"content":"WSDL Import","linkify":"WSDL Import","nodes":[{"content":"WSDL Import","pos":[0,11]}]},{"content":"To extend the WSDL import system to handle importing the addresses, add the following configuration to the configuration file for Svcutil.exe as shown in the Svcutil.exe.config file:","pos":[7906,8088]},{"content":"When running Svcutil.exe, there are two options for getting Svcutil.exe to load the WSDL import extensions:","pos":[8433,8540]},{"content":"Point Svcutil.exe to the configuration file using the /SvcutilConfig:<ph id=\"ph1\">\\&lt;</ph>file&gt;.","pos":[8550,8627],"source":"Point Svcutil.exe to the configuration file using the /SvcutilConfig:\\<file>."},{"content":"Add the configuration section to Svcutil.exe.config in the same directory as Svcutil.exe.","pos":[8637,8726]},{"content":"The <ph id=\"ph1\">`UdpBindingElementImporter`</ph> type implements the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType&gt;</ph> interface.","pos":[8733,8884],"source":"The `UdpBindingElementImporter` type implements the <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> interface."},{"content":"The <ph id=\"ph1\">`ImportEndpoint`</ph> method imports the address from the WSDL port:","pos":[8885,8952],"source":" The `ImportEndpoint` method imports the address from the WSDL port:"},{"pos":[9278,9299],"content":"Adding Policy Support","linkify":"Adding Policy Support","nodes":[{"content":"Adding Policy Support","pos":[0,21]}]},{"content":"The custom binding element can export policy assertions in the WSDL binding for a service endpoint to express the capabilities of that binding element.","pos":[9303,9454]},{"content":"The following example code is taken from the <bpt id=\"p1\">[</bpt>Transport: UDP<ept id=\"p1\">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.","pos":[9455,9581],"source":" The following example code is taken from the [Transport: UDP](../../../../docs/framework/wcf/samples/transport-udp.md) sample."},{"pos":[9592,9605],"content":"Policy Export","linkify":"Policy Export","nodes":[{"content":"Policy Export","pos":[0,13]}]},{"content":"The <ph id=\"ph1\">`UdpTransportBindingElement`</ph> type implements <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension?displayProperty=nameWithType&gt;</ph> to add support for exporting policy.","pos":[9609,9785],"source":"The `UdpTransportBindingElement` type implements <xref:System.ServiceModel.Description.IPolicyExportExtension?displayProperty=nameWithType> to add support for exporting policy."},{"content":"As a result, <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.MetadataExporter?displayProperty=nameWithType&gt;</ph> includes <ph id=\"ph2\">`UdpTransportBindingElement`</ph> in the generation of policy for any binding that includes it.","pos":[9786,9983],"source":" As a result, <xref:System.ServiceModel.Description.MetadataExporter?displayProperty=nameWithType> includes `UdpTransportBindingElement` in the generation of policy for any binding that includes it."},{"content":"In <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy%2A?displayProperty=nameWithType&gt;</ph>, add an assertion for UDP and another assertion if the channel is in multicast mode.","pos":[9990,10184],"source":"In <xref:System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy%2A?displayProperty=nameWithType>, add an assertion for UDP and another assertion if the channel is in multicast mode."},{"content":"This is because multicast mode affects how the communication stack is constructed, and thus must be coordinated between both sides.","pos":[10185,10316]},{"pos":[10798,11154],"content":"Because custom transport binding elements are responsible for handling addressing, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension?displayProperty=nameWithType&gt;</ph> implementation on the <ph id=\"ph2\">`UdpTransportBindingElement`</ph> must also handle exporting the appropriate WS-Addressing policy assertions to indicate the version of WS-Addressing being used.","source":"Because custom transport binding elements are responsible for handling addressing, the <xref:System.ServiceModel.Description.IPolicyExportExtension?displayProperty=nameWithType> implementation on the `UdpTransportBindingElement` must also handle exporting the appropriate WS-Addressing policy assertions to indicate the version of WS-Addressing being used."},{"pos":[11273,11286],"content":"Policy Import","linkify":"Policy Import","nodes":[{"content":"Policy Import","pos":[0,13]}]},{"content":"To extend the policy import system, add the following configuration to the configuration file for Svcutil.exe as shown in the Svcutil.exe.config file:","pos":[11290,11440]},{"content":"Then we implement <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType&gt;</ph> from our registered class (<ph id=\"ph2\">`UdpBindingElementImporter`</ph>).","pos":[11787,11952],"source":"Then we implement <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType> from our registered class (`UdpBindingElementImporter`)."},{"content":"In <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A?displayProperty=nameWithType&gt;</ph>, examine the assertions in the appropriate namespace and process the ones for generating the transport and checking if it is multicast.","pos":[11953,12198],"source":" In <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A?displayProperty=nameWithType>, examine the assertions in the appropriate namespace and process the ones for generating the transport and checking if it is multicast."},{"content":"In addition, remove the assertions that the importer handles from the list of binding assertions.","pos":[12199,12296]},{"content":"Again, when running Svcutil.exe, there are two options for integration:","pos":[12297,12368]},{"content":"Point Svcutil.exe to our configuration file using the /SvcutilConfig:<ph id=\"ph1\">\\&lt;</ph>file&gt;.","pos":[12378,12455],"source":"Point Svcutil.exe to our configuration file using the /SvcutilConfig:\\<file>."},{"content":"Add the configuration section to Svcutil.exe.config in the same directory as Svcutil.exe.","pos":[12465,12554]},{"pos":[12564,12605],"content":"Adding a Custom Standard Binding Importer","linkify":"Adding a Custom Standard Binding Importer","nodes":[{"content":"Adding a Custom Standard Binding Importer","pos":[0,41]}]},{"content":"Svcutil.exe and the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType&gt;</ph> type, by default, recognize and import system-provided bindings.","pos":[12609,12774],"source":"Svcutil.exe and the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> type, by default, recognize and import system-provided bindings."},{"content":"Otherwise, the binding gets imported as a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CustomBinding?displayProperty=nameWithType&gt;</ph> instance.","pos":[12775,12905],"source":" Otherwise, the binding gets imported as a <xref:System.ServiceModel.Channels.CustomBinding?displayProperty=nameWithType> instance."},{"content":"To enable Svcutil.exe and the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.WsdlImporter&gt;</ph> to import the <ph id=\"ph2\">`SampleProfileUdpBinding`</ph> the <ph id=\"ph3\">`UdpBindingElementImporter`</ph> also acts as a custom standard binding importer.","pos":[12906,13108],"source":" To enable Svcutil.exe and the <xref:System.ServiceModel.Description.WsdlImporter> to import the `SampleProfileUdpBinding` the `UdpBindingElementImporter` also acts as a custom standard binding importer."},{"pos":[13115,13489],"content":"A custom standard binding importer implements the <ph id=\"ph1\">`ImportEndpoint`</ph> method on the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType&gt;</ph> interface to examine the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.CustomBinding?displayProperty=nameWithType&gt;</ph> instance imported from metadata to see if it could have been generated by specific standard binding.","source":"A custom standard binding importer implements the `ImportEndpoint` method on the <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> interface to examine the <xref:System.ServiceModel.Channels.CustomBinding?displayProperty=nameWithType> instance imported from metadata to see if it could have been generated by specific standard binding."},{"content":"Generally, implementing a custom standard binding importer involves checking the properties of the imported binding elements to verify that only properties that could have been set by the standard binding have changed and all other properties are their defaults.","pos":[14128,14390]},{"content":"A basic strategy for implementing a standard binding importer is to create an instance of the standard binding, propagate the properties from the binding elements to the standard binding instance that the standard binding supports, and the compare the binding elements from the standard binding with the imported binding elements.","pos":[14391,14721]}]}