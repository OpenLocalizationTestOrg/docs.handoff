<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-creating-a-windows-service-application-in-the-component-designer.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7952256d1b225fe22cd189833a046590cdf0a9f2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-services\walkthrough-creating-a-windows-service-application-in-the-component-designer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f9e5319a060538918f00bf7a62139ae05096ba6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e5293191e4ff1fa556c7322d92c98e523f54b74</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Tutorial: Create a Windows service app</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tutorial: Create a Windows service app</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article demonstrates how to create a Windows service app in Visual Studio that writes messages to an event log.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create a service</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To begin, create the project and set the values that are required for the service to function correctly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>From the Visual Studio <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>New<ept id="p2">**</ept><ph id="ph1"> &gt; </ph><bpt id="p3">**</bpt>Project<ept id="p3">**</ept> (or press <bpt id="p4">**</bpt>Ctrl<ept id="p4">**</ept><ph id="ph2">+</ph><bpt id="p5">**</bpt>Shift<ept id="p5">**</ept><ph id="ph3">+</ph><bpt id="p6">**</bpt>N<ept id="p6">**</ept>) to open the <bpt id="p7">**</bpt>New Project<ept id="p7">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Navigate to and select the <bpt id="p1">**</bpt>Windows Service (.NET Framework)<ept id="p1">**</ept> project template.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To find it, expand <bpt id="p1">**</bpt>Installed<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept>, then select <bpt id="p4">**</bpt>Windows Desktop<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Or, enter <bpt id="p1">*</bpt>Windows Service<ept id="p1">*</ept> in the search box on the upper right and press <bpt id="p2">**</bpt>Enter<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Windows Service template in New Project dialog in Visual Studio</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you don't see the <bpt id="p1">**</bpt>Windows Service<ept id="p1">**</ept> template, you may need to install the <bpt id="p2">**</bpt>.NET desktop development<ept id="p2">**</ept> workload:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, select <bpt id="p2">**</bpt>Open Visual Studio Installer<ept id="p2">**</ept> on the lower left.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>.NET desktop development<ept id="p1">**</ept> workload, and then select <bpt id="p2">**</bpt>Modify<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Name<ept id="p1">**</ept>, enter <bpt id="p2">*</bpt>MyNewService<ept id="p2">*</ept>, and then select <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> tab appears (<bpt id="p2">**</bpt>Service1.cs [Design]<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Service1.vb [Design]<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The project template includes a component class named <ph id="ph1">`Service1`</ph> that inherits from <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It includes much of the basic service code, such as the code to start the service.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Rename the service</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Rename the service from <bpt id="p1">**</bpt>Service1<ept id="p1">**</ept> to <bpt id="p2">**</bpt>MyNewService<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Service1.cs<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Service1.vb<ept id="p3">**</ept>, and choose <bpt id="p4">**</bpt>Rename<ept id="p4">**</ept> from the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Rename the file to <bpt id="p1">**</bpt>MyNewService.cs<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>MyNewService.vb<ept id="p2">**</ept>, and then press <bpt id="p3">**</bpt>Enter<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A pop-up window appears asking whether you would like to rename all references to the code element <bpt id="p1">*</bpt>Service1<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the pop-up window, select <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Rename prompt<ept id="p1">]</ept><bpt id="p2">(media/windows-service-rename.png "</bpt>Windows service rename prompt<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> tab, select <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> from the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, change the <bpt id="p2">**</bpt>ServiceName<ept id="p2">**</ept> value to <bpt id="p3">*</bpt>MyNewService<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Service properties<ept id="p1">]</ept><bpt id="p2">(media/windows-service-properties.png "</bpt>Windows service properties<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save All<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Add features to the service</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this section, you add a custom event log to the Windows service.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLog&gt;</ph> component is an example of the type of component you can add to a Windows service.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Add custom event log functionality</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, from the shortcut menu for <bpt id="p2">**</bpt>MyNewService.cs<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>MyNewService.vb<ept id="p3">**</ept>, choose <bpt id="p4">**</bpt>View Designer<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>, expand <bpt id="p2">**</bpt>Components<ept id="p2">**</ept>, and then drag the <bpt id="p3">**</bpt>EventLog<ept id="p3">**</ept> component to the <bpt id="p4">**</bpt>Service1.cs [Design]<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>Service1.vb [Design]<ept id="p5">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, from the shortcut menu for <bpt id="p2">**</bpt>MyNewService.cs<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>MyNewService.vb<ept id="p3">**</ept>, choose <bpt id="p4">**</bpt>View Code<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Define a custom event log.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For C#, edit the existing <ph id="ph1">`MyNewService()`</ph> constructor; for Visual Basic, add the <ph id="ph2">`New()`</ph> constructor:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`using`</ph> statement to <bpt id="p1">**</bpt>MyNewService.cs<ept id="p1">**</ept> (if it doesn't already exist), or an <ph id="ph2">`Imports`</ph> statement <bpt id="p2">**</bpt>MyNewService.vb<ept id="p2">**</ept>, for the <ph id="ph3">&lt;xref:System.Diagnostics?displayProperty=nameWithType&gt;</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save All<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Define what occurs when the service starts</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the code editor for <bpt id="p1">**</bpt>MyNewService.cs<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MyNewService.vb<ept id="p2">**</ept>, locate the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method; Visual Studio automatically created an empty method definition when you created the project.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add code that writes an entry to the event log when the service starts:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Polling</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Because a service application is designed to be long-running, it usually polls or monitors the system, which you set up in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnStart`</ph> method must return to the operating system after the service's operation has begun so that the system isn't blocked.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To set up a simple polling mechanism, use the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The timer raises an <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event at regular intervals, at which time your service can do its monitoring.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component as follows:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Set the properties of the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component in the <ph id="ph2">`MyNewService.OnStart`</ph> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Start the timer by calling the <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Set up the polling mechanism.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Add the following code in the <ph id="ph1">`MyNewService.OnStart`</ph> event to set up the polling mechanism:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`using`</ph> statement to <bpt id="p1">**</bpt>MyNewService.cs<ept id="p1">**</ept>, or an <ph id="ph2">`Imports`</ph> statement to <bpt id="p2">**</bpt>MyNewService.vb<ept id="p2">**</ept>, for the <ph id="ph3">&lt;xref:System.Timers?displayProperty=nameWithType&gt;</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`MyNewService`</ph> class, add the <ph id="ph2">`OnTimer`</ph> method to handle the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`MyNewService`</ph> class, add a member variable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It contains the identifier of the next event to write into the event log:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Instead of running all your work on the main thread, you can run tasks by using background worker threads.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Define what occurs when the service is stopped</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Insert a line of code in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method that adds an entry to the event log when the service is stopped:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Define other actions for the service</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can override the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> methods to define additional processing for your component.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following code shows how you to override the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> method in the <ph id="ph2">`MyNewService`</ph> class:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Set service status</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Services report their status to the <bpt id="p1">[</bpt>Service Control Manager<ept id="p1">](/windows/desktop/Services/service-control-manager)</ept> so that a user can tell whether a service is functioning correctly.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>By default, a service that inherits from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> reports a limited set of status settings, which include SERVICE_STOPPED, SERVICE_PAUSED, and SERVICE_RUNNING.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If a service takes a while to start up, it's useful to report a SERVICE_START_PENDING status.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can implement the SERVICE_START_PENDING and SERVICE_STOP_PENDING status settings by adding code that calls the Windows <bpt id="p1">[</bpt>SetServiceStatus<ept id="p1">](/windows/desktop/api/winsvc/nf-winsvc-setservicestatus)</ept> function.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Implement service pending status</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`using`</ph> statement to <bpt id="p1">**</bpt>MyNewService.cs<ept id="p1">**</ept>, or an <ph id="ph2">`Imports`</ph> statement to <bpt id="p2">**</bpt>MyNewService.vb<ept id="p2">**</ept>, for the <ph id="ph3">&lt;xref:System.Runtime.InteropServices?displayProperty=nameWithType&gt;</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Add the following code to <bpt id="p1">**</bpt>MyNewService.cs<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>MyNewService.vb<ept id="p2">**</ept>, to declare the <ph id="ph1">`ServiceState`</ph> values and to add a structure for the status, which you'll use in a platform invoke call:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`MyNewService`</ph> class, declare the <bpt id="p1">[</bpt>SetServiceStatus<ept id="p1">](/windows/desktop/api/winsvc/nf-winsvc-setservicestatus)</ept> function by using <bpt id="p2">[</bpt>platform invoke<ept id="p2">](../interop/consuming-unmanaged-dll-functions.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To implement the SERVICE_START_PENDING status, add the following code to the beginning of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Add code to the end of the <ph id="ph1">`OnStart`</ph> method to set the status to SERVICE_RUNNING:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>(Optional) If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is a long-running method, repeat this procedure in the <ph id="ph2">`OnStop`</ph> method.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Implement the SERVICE_STOP_PENDING status and return the SERVICE_STOPPED status before the <ph id="ph1">`OnStop`</ph> method exits.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The Service Control Manager uses the <ph id="ph1">`dwWaitHint`</ph> and <ph id="ph2">`dwCheckpoint`</ph> members of the <bpt id="p1">[</bpt>SERVICE_STATUS structure<ept id="p1">](/windows/desktop/api/winsvc/ns-winsvc-_service_status)</ept> to determine how much time to wait for a Windows service to start or shut down.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">`OnStart`</ph> and <ph id="ph2">`OnStop`</ph> methods run long, your service can request more time by calling <ph id="ph3">`SetServiceStatus`</ph> again with an incremented <ph id="ph4">`dwCheckPoint`</ph> value.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Add installers to the service</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Before you run a Windows service, you need to install it, which registers it with the Service Control Manager.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Add installers to your project to handle the registration details.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, from the shortcut menu for <bpt id="p2">**</bpt>MyNewService.cs<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>MyNewService.vb<ept id="p3">**</ept>, choose <bpt id="p4">**</bpt>View Designer<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view, select the background area, then choose <bpt id="p2">**</bpt>Add Installer<ept id="p2">**</ept> from the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>By default, Visual Studio adds a component class named <ph id="ph1">`ProjectInstaller`</ph>, which contains two installers, to your project.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>These installers are for your service and for the service's associated process.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view for <bpt id="p2">**</bpt>ProjectInstaller<ept id="p2">**</ept>, select <bpt id="p3">**</bpt>serviceInstaller1<ept id="p3">**</ept> for a Visual C# project, or <bpt id="p4">**</bpt>ServiceInstaller1<ept id="p4">**</ept> for a Visual Basic project, then choose <bpt id="p5">**</bpt>Properties<ept id="p5">**</ept> from the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, verify the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property is set to <bpt id="p2">**</bpt>MyNewService<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Add text to the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Description%2A&gt;</ph> property, such as <bpt id="p1">*</bpt>A sample service<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This text appears in the <bpt id="p1">**</bpt>Description<ept id="p1">**</ept> column of the <bpt id="p2">**</bpt>Services<ept id="p2">**</ept> window and describes the service to the user.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Service description in the Services window.<ept id="p1">]</ept><bpt id="p2">(media/windows-service-description.png "</bpt>Service description<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Add text to the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">*</bpt>MyNewService Display Name<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This text appears in the <bpt id="p1">**</bpt>Display Name<ept id="p1">**</ept> column of the <bpt id="p2">**</bpt>Services<ept id="p2">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This name can be different from the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property, which is the name the system uses (for example, the name you use for the <ph id="ph2">`net start`</ph> command to start your service).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph> from the drop-down list.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When you're finished, the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> windows should look like the following figure:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Installer Properties for a Windows service<ept id="p1">]</ept><bpt id="p2">(media/windows-service-installer-properties.png "</bpt>Windows service installer properties<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view for <bpt id="p2">**</bpt>ProjectInstaller<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>serviceProcessInstaller1<ept id="p3">**</ept> for a Visual C# project, or <bpt id="p4">**</bpt>ServiceProcessInstaller1<ept id="p4">**</ept> for a Visual Basic project, then choose <bpt id="p5">**</bpt>Properties<ept id="p5">**</ept> from the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceAccount.LocalSystem&gt;</ph> from the drop-down list.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This setting installs the service and runs it by using the local system account.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceAccount.LocalSystem&gt;</ph> account has broad permissions, including the ability to write to the event log.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Use this account with caution, because it might increase your risk of attacks from malicious software.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For other tasks, consider using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceAccount.LocalService&gt;</ph> account, which acts as a non-privileged user on the local computer and presents anonymous credentials to any remote server.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This example fails if you try to use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceAccount.LocalService&gt;</ph> account, because it needs permission to write to the event log.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information about installers, see <bpt id="p1">[</bpt>How to: Add installers to your service application<ept id="p1">](how-to-add-installers-to-your-service-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>(Optional) Set startup parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Before you decide to add startup parameters, consider whether it's the best way to pass information to your service.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Although they're easy to use and parse, and a user can easily override them, they might be harder for a user to discover and use without documentation.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Generally, if your service requires more than just a few startup parameters, you should use the registry or a configuration file instead.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A Windows service can accept command-line arguments, or startup parameters.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When you add code to process startup parameters, a user can start your service with their own custom startup parameters in the service properties window.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>However, these startup parameters aren't persisted the next time the service starts.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To set startup parameters permanently, set them in the registry.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Each Windows service has a registry entry under the <bpt id="p1">**</bpt>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services<ept id="p1">**</ept> subkey.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Under each service's subkey, use the <bpt id="p1">**</bpt>Parameters<ept id="p1">**</ept> subkey to store information that your service can access.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can use application configuration files for a Windows service the same way you do for other types of programs.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For sample code, see <ph id="ph1">&lt;xref:System.Configuration.ConfigurationManager.AppSettings?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To add startup parameters</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>MyNewService.Designer.vb<ept id="p2">**</ept>, then choose <bpt id="p3">**</bpt>View Code<ept id="p3">**</ept> from the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Main`</ph> method, change the code to add an input parameter and pass it to the service constructor:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>MyNewService.cs<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>MyNewService.vb<ept id="p2">**</ept>, change the <ph id="ph1">`MyNewService`</ph> constructor to process the input parameter as follows:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This code sets the event source and log name according to the startup parameters that the user supplies.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If no arguments are supplied, it uses default values.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>To specify the command-line arguments, add the following code to the <ph id="ph1">`ProjectInstaller`</ph> class in <bpt id="p1">**</bpt>ProjectInstaller.cs<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>ProjectInstaller.vb<ept id="p2">**</ept>:</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Typically, this value contains the full path to the executable for the Windows service.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For the service to start up correctly, the user must supply quotation marks for the path and each individual parameter.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A user can change the parameters in the <bpt id="p1">**</bpt>ImagePath<ept id="p1">**</ept> registry entry to change the startup parameters for the Windows service.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>However, a better way is to change the value programmatically and expose the functionality in a user-friendly way, such as by using a management or configuration utility.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Build the service</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, choose <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> from the shortcut menu for the <bpt id="p3">**</bpt>MyNewService<ept id="p3">**</ept> project.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The property pages for your project appear.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> tab, in the <bpt id="p2">**</bpt>Startup object<ept id="p2">**</ept> list, choose <bpt id="p3">**</bpt>MyNewService.Program<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>Sub Main<ept id="p4">**</ept> for Visual Basic projects.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To build the project, in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, choose <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> from the shortcut menu for your project (or press <bpt id="p3">**</bpt>Ctrl<ept id="p3">**</ept><ph id="ph1">+</ph><bpt id="p4">**</bpt>Shift<ept id="p4">**</ept><ph id="ph2">+</ph><bpt id="p5">**</bpt>B<ept id="p5">**</ept>).</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Install the service</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Now that you've built the Windows service, you can install it.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To install a Windows service, you must have administrator credentials on the computer where it's installed.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">[</bpt>Developer Command Prompt for Visual Studio<ept id="p1">](https://docs.microsoft.com/dotnet/framework/tools/developer-command-prompt-for-vs)</ept> with administrative credentials.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>From the Windows <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>Developer Command Prompt for VS 2017<ept id="p2">**</ept> in the Visual Studio folder, then select <bpt id="p3">**</bpt>More<ept id="p3">**</ept><ph id="ph1"> &gt; </ph><bpt id="p4">**</bpt>Run as Administrator<ept id="p4">**</ept> from the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Developer Command Prompt for Visual Studio<ept id="p1">**</ept> window, navigate to the folder that contains your project's output (by default, the <bpt id="p2">*</bpt>\bin\Debug<ept id="p2">*</ept> subdirectory of your project).</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Enter the following command:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the service installs successfully, the command reports success.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If the system can't find <bpt id="p1">*</bpt>installutil.exe<ept id="p1">*</ept>, make sure that it exists on your computer.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This tool is installed with the .NET Framework to the folder <bpt id="p1">*</bpt>%windir%\Microsoft.NET\Framework[64]<ph id="ph1">\\</ph><ph id="ph2">&amp;lt;</ph>framework version<ph id="ph3">&amp;gt;</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example, the default path for the 64-bit version is <bpt id="p1">*</bpt>%windir%\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>installutil.exe<ept id="p1">**</ept> process fails, check the install log to find out why.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>By default, the log is in the same folder as the service executable.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The installation can fail if:</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> class isn't present on the <ph id="ph2">`ProjectInstaller`</ph> class.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The attribute isn't set to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProjectInstaller`</ph> class isn't defined as <ph id="ph2">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Install and uninstall services<ept id="p1">](how-to-install-and-uninstall-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Start and run the service</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In Windows, open the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> desktop app.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Windows<ept id="p1">**</ept><ph id="ph1">+</ph><bpt id="p2">**</bpt>R<ept id="p2">**</ept> to open the <bpt id="p3">**</bpt>Run<ept id="p3">**</ept> box, enter <bpt id="p4">*</bpt>services.msc<ept id="p4">*</ept>, and then press <bpt id="p5">**</bpt>Enter<ept id="p5">**</ept> or select <bpt id="p6">**</bpt>OK<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You should see your service listed in <bpt id="p1">**</bpt>Services<ept id="p1">**</ept>, displayed alphabetically by the display name that you set for it.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>MyNewService in the Services window.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>To start the service, choose <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> from the service's shortcut menu.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To stop the service, choose <bpt id="p1">**</bpt>Stop<ept id="p1">**</ept> from the service's shortcut menu.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>(Optional) From the command line, use the commands <bpt id="p1">**</bpt>net start <ph id="ph1">&amp;lt;</ph>service name<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> and <bpt id="p2">**</bpt>net stop <ph id="ph3">&amp;lt;</ph>service name<ph id="ph4">&amp;gt;</ph><ept id="p2">**</ept> to start and stop your service.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Verify the event log output of your service</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In Windows, open the <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept> desktop app.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Enter <bpt id="p1">*</bpt>Event Viewer<ept id="p1">*</ept> in the Windows search bar, and then select <bpt id="p2">**</bpt>Event Viewer<ept id="p2">**</ept> from the search results.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>In Visual Studio, you can access event logs by opening <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu (or press <bpt id="p3">**</bpt>Ctrl<ept id="p3">**</ept><ph id="ph1">+</ph><bpt id="p4">**</bpt>Alt<ept id="p4">**</ept><ph id="ph2">+</ph><bpt id="p5">**</bpt>S<ept id="p5">**</ept>) and expanding the <bpt id="p6">**</bpt>Event Logs<ept id="p6">**</ept> node for the local computer.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept>, expand <bpt id="p2">**</bpt>Applications and Services Logs<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Locate the listing for <bpt id="p1">**</bpt>MyNewLog<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>MyLogFile1<ept id="p2">**</ept> if you followed the procedure to add command-line arguments) and expand it.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You should see the entries for the two actions (start and stop) that your service performed.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Use the Event Viewer to see the event log entries</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Clean up resources</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If you no longer need the Windows service app, you can remove it.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Developer Command Prompt for Visual Studio<ept id="p1">**</ept> with administrative credentials.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Developer Command Prompt for Visual Studio<ept id="p1">**</ept> window, navigate to the folder that contains your project's output.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Enter the following command:</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If the service uninstalls successfully, the command reports that your service was successfully removed.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Install and uninstall services<ept id="p1">](how-to-install-and-uninstall-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Now that you've created the service, you can:</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Create a standalone setup program for others to use to install your Windows service.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>WiX Toolset<ept id="p1">](http://wixtoolset.org/)</ept> to create an installer for a Windows service.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For other ideas, see <bpt id="p1">[</bpt>Create an installer package<ept id="p1">](/visualstudio/deployment/deploying-applications-services-and-components#create-an-installer-package-windows-desktop)</ept>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Explore the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component, which enables you to send commands to the service you've installed.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Instead of creating the event log when the application runs, use an installer to create an event log when you install the application.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The event log is deleted by the installer when you uninstall the application.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows service applications<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Windows service applications<ept id="p1">](introduction-to-windows-service-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Debug Windows service applications<ept id="p1">](how-to-debug-windows-service-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Services (Windows)<ept id="p1">](/windows/desktop/Services/services)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>