<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="filtering.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">667cc1cc95208c5c653ec4088d69ae105a2f8889</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\filtering.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8ba09569e7cd64e29ec2f1964fb2dfaae572df3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6f2a48b6245ecb79f94bd93db1802f209f45b83</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Filtering</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Filtering</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Windows Communication Foundation (WCF) filtering system can use declarative filters to match messages and make operational decisions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use filters to determine what to do with a message by examining part of the message.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The filtering system is composed of a set of classes that can efficiently determine which of a set of filters are <ph id="ph1">`true`</ph> for a particular WCF message.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The filtering system is a core component of WCF messaging; it is designed to be extremely fast.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each filter implementation has been optimized for a particular kind of matching against WCF messages.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The filtering system is not thread safe.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The application must handle any locking semantics.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It does, however, support a multi-reader, single writer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Where Filtering Fits</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Filtering is performed after a message is received and is part of the process of dispatching the message to the proper application component.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The design of the filtering system addresses the requirements of several WCF subsystems, including messaging, routing, security, event handling, and system management.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Filters</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The filter engine has two primary components, filters and filter tables.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A filter makes Boolean decisions about a message based on user-specified logical conditions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Filters implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MessageFilter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A&gt;</ph> methods are used to determine if a message satisfies a filter.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One of the methods tests the message's header, but cannot inspect the message body.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The other method takes a <bpt id="p1">*</bpt>message buffer<ept id="p1">*</ept> as an input parameter and can inspect the message body.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Filters are not usually tested individually, but as part of a filter table, which is a generic class that the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MessageFilterTable%601.CreateFilterTable%2A&gt;</ph> method creates.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The several kinds of filters each specialize in matching on a particular kind of Boolean condition.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once you construct a filter, you cannot change the criteria that a filter uses; to modify a filter's criteria, construct a new one and delete the existing filter.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Action Filters</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ActionMessageFilter&gt;</ph> contains a list of action strings.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If any of the actions in the filter’s list matches the Action header in the message or message buffer, the <ph id="ph1">`Match`</ph> method returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the list is empty, the filter is considered a match-all filter and any message or message buffer matches and <ph id="ph1">`Match`</ph> returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If none of the actions in the filter’s list matches the Action header in the message or message buffer, <ph id="ph1">`Match`</ph> returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If there is no action in the message and the filter’s list is non-empty, then <ph id="ph1">`Match`</ph> returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Endpoint Address Filters</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter&gt;</ph> filters messages and message buffers based on an endpoint address, as represented in their header collection.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For a message to pass such a filter, the following conditions must be met:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The filter’s address Uniform Resource Identifier (URI) must be the same as the one in the message To header.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Each endpoint parameter in the address of the filter (<ph id="ph1">`address.Headers`</ph> collection) must find a header in the message to map on.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Extra headers in the message or message buffer are acceptable for the match to remain <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Prefix Endpoint Address Filters</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter&gt;</ph> functions just like the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter&gt;</ph> filter, except that the match can be on a prefix of the message URI.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, a filter specifying the address <ph id="ph1">`http://www.adatum.com`</ph> matches messages addressed to <ph id="ph2">`http://www.adatum.com/userA`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>XPath Message Filters</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilter&gt;</ph> uses an XPath expression to determine whether an XML document contains specific elements, attributes, text, or other XML syntactic constructs.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The filter is optimized to be extremely efficient for a strict subset of XPath.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The XML Path Language is described in the <bpt id="p1">[</bpt>W3C XML Path Language 1.0 specification<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=94779)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Typically, an application uses an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilter&gt;</ph> at an endpoint to query the contents of a SOAP message and then takes the appropriate action based on the results of that query.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A queuing process, for example, may use an XPath query to inspect the priority element of a known header to decide whether to move a message to the front of the queue.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Filter Tables</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Filter tables are used to store key-value pairs, where a filter is the key and some associated data is the value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The filter data can be used to indicate what actions to take if a message matches the filter and the type of the filter data is the generic parameter for the filter table class.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The filter data can consist of routing rules, session security state, listeners on a channel, and so on.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The data can be used where data flow control is necessary.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Filter tables implement the generic interface <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Filter tables have several methods that match a message against all the filters in the table and return an unordered collection of matching filters or data.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Some of the match methods are multiple-match and return all matching items.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Others are single-match, returning only one item, and throw a <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MultipleFilterMatchesException&gt;</ph> if more than one filter matches.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Message Filter Table</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MessageFilterTable%601&gt;</ph> is the most general implementation of <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can store filters of all types in the table.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can assign numeric priorities to filters, where the highest priority is signified by the highest number.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Multiple types of filters can have the same priority.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A particular type of filter can appear in more than one priority level.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Matching is done starting with the highest priority, and once matching filters are found with a given priority, no filters with lower priorities are examined.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Therefore, if you are using a single-filter match method, and more than one filter matches a message, but each matching filter has a different priority, then no exception is thrown and the filter with the highest priority is returned.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Similarly, a multiple-filter match method returns only those matching filters with the highest priority.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>XPath Message Filter Table</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilterTable%601&gt;</ph> is optimized for declarative XPath filters, so the table key is a <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilterTable%601&gt;</ph> class optimizes matching for a subset of XPath that covers most of the messaging scenarios and also supports the full XPath 1.0 grammar.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It has optimized algorithms for efficient parallel matching.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This table has several specialized <ph id="ph1">`Match`</ph> methods that operate over an <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> and a <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator&gt;</ph> extends the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class by adding a <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator.CurrentPosition%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This property allows positions within the XML document to be saved and loaded quickly without having to clone the navigator, an expensive memory allocation that the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> requires for such an operation.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The WCF XPath engine must frequently record the position of the cursor in the course of executing queries on XML documents, so the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator&gt;</ph> provides an important optimization for message processing.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Customer Scenarios</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can use filtering any time you want to send a message to different processing modules depending on data contained in the message.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Two typical scenarios are routing a message based on its action code and de-multiplexing a stream of messages based on the messages' endpoint address.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Routing</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The listener of an endpoint listens for messages that have one or more action codes in the message's SOAP header.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You implement this by creating an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ActionMessageFilter&gt;</ph> by passing an array that contains the action codes to its constructor.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It uses that filter to register with the <ph id="ph1">`ListenerFactory`</ph>, so only messages whose action matches one of those in the filter get to that particular endpoint.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>De-multiplexing</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When multiple endpoints fan out from the same <ph id="ph1">`ServiceListener`</ph> off the wire, the only way to de-multiplex messages and know whether they belong to a certain endpoint address, is to use <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter&gt;</ph>s, which select messages toward the registered endpoints by performing a lookup on the information stored in the headers.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In these filters, only those messages that pass have all necessary headers that correspond to both:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The URI in the <ph id="ph1">`EndpointAddress`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The rest of the endpoint parameters in the <ph id="ph1">`EndpointAddress`</ph> as specified in the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Transfer and Serialization<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-transfer-and-serialization.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>