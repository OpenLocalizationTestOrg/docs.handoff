<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="event-statement.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f600f3ed37f38ddd7d86300231e0c447f458aa6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\event-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0591c01cf2168fc194e29527fc6125cd535034ad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c96f86cae954b856e6b46eda91ff2c327656016</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Event Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Event Statement</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares a user-defined event.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Part</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>List of attributes that apply to this event.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Multiple attributes are separated by commas.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You must enclose the <bpt id="p1">[</bpt>Attribute List<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept> in angle brackets ("<ph id="ph1">`&lt;`</ph>" and "<ph id="ph2">`&gt;`</ph>").</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specifies what code can access the event.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept>—any code that can access the element that declares it can access it.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>—only code within its class or a derived class can access it.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>—only code in the same assembly can access it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept>—only code in the element that declares it can access it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Protected Friend<ept id="p1">](../../language-reference/modifiers/protected-friend.md)</ept>-only code in the event's class, a derived class, or the same assembly can access it.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- </ph><bpt id="p1">[</bpt>Private Protected<ept id="p1">](../../language-reference/modifiers/private-protected.md)</ept>-only code in the event's class or a derived class in the same assembly can access it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Specifies that this event is not associated with a specific instance of a class or structure.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Indicates that this event redeclares and hides an identically named programming element, or set of overloaded elements, in a base class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can shadow any kind of declared element with any other kind.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, if a <ph id="ph1">`Private`</ph> element shadows a base-class element, code that does not have permission to access the <ph id="ph2">`Private`</ph> element accesses the base-class element instead.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Name of the event; follows standard variable naming conventions.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>List of local variables that represent the parameters of this event.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You must enclose the <bpt id="p1">[</bpt>Parameter List<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept> in parentheses.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Indicates that this event implements an event of an interface.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`Implements`</ph> is supplied.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>List of <ph id="ph1">`Sub`</ph> procedures being implemented.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Multiple procedures are separated by commas:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>implementedprocedure<ept id="p1">*</ept> [ , <bpt id="p2">*</bpt>implementedprocedure<ept id="p2">*</ept> ... ]</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`implementedprocedure`</ph> has the following syntax and parts:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`interface`</ph>.<ph id="ph2">`definedname`</ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`interface`</ph> - Required.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Name of an interface that this procedure's containing class or structure is implementing.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`Definedname`</ph> - Required.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Name by which the procedure is defined in <ph id="ph1">`interface`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This does not have to be the same as <ph id="ph1">`name`</ph>, the name that this procedure is using to implement the defined procedure.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Events declared as <ph id="ph1">`Custom`</ph> must define custom <ph id="ph2">`AddHandler`</ph>, <ph id="ph3">`RemoveHandler`</ph>, and <ph id="ph4">`RaiseEvent`</ph> accessors.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The name of a delegate that specifies the event-handler signature.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Declares an <ph id="ph1">`AddHandler`</ph> accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the <ph id="ph2">`AddHandler`</ph> statement or implicitly by using the <ph id="ph3">`Handles`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`AddHandler`</ph> block.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Parameter name.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Declares a <ph id="ph1">`RemoveHandler`</ph> accessor, which specifies the statements to execute when an event handler is removed using the <ph id="ph2">`RemoveHandler`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`RemoveHandler`</ph> block.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Declares a <ph id="ph1">`RaiseEvent`</ph> accessor, which specifies the statements to execute when the event is raised using the <ph id="ph2">`RaiseEvent`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Typically, this invokes a list of delegates maintained by the <ph id="ph1">`AddHandler`</ph> and <ph id="ph2">`RemoveHandler`</ph> accessors.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`RaiseEvent`</ph> block.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>List of parameters that matches the parameters required by the <ph id="ph1">`delegatename`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You must enclose the <bpt id="p1">[</bpt>Parameter List<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept> in parentheses.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Statements that contain the bodies of the <ph id="ph1">`AddHandler`</ph>, <ph id="ph2">`RemoveHandler`</ph>, and <ph id="ph3">`RaiseEvent`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`Event`</ph> block.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Once the event has been declared, use the <ph id="ph1">`RaiseEvent`</ph> statement to raise the event.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A typical event might be declared and raised as shown in the following fragments:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can declare event arguments just as you do arguments of procedures, with the following exceptions: events cannot have named arguments, <ph id="ph1">`ParamArray`</ph> arguments, or <ph id="ph2">`Optional`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Events do not have return values.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To handle an event, you must associate it with an event handler subroutine using either the <ph id="ph1">`Handles`</ph> or <ph id="ph2">`AddHandler`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The signatures of the subroutine and the event must match.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To handle a shared event, you must use the <ph id="ph1">`AddHandler`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Event`</ph> only at module level.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This means the <bpt id="p1">*</bpt>declaration context<ept id="p1">*</ept> for an event must be a class, structure, module, or interface, and cannot be a source file, namespace, procedure, or block.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In most circumstances, you can use the first syntax in the Syntax section of this topic for declaring events.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>However, some scenarios require that you have more control over the detailed behavior of the event.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The last syntax in the Syntax section of this topic, which uses the <ph id="ph1">`Custom`</ph> keyword, provides that control by enabling you to define custom events.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In a custom event, you specify exactly what occurs when code adds or removes an event handler to or from the event, or when code raises the event.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For examples, see <bpt id="p1">[</bpt>How to: Declare Custom Events To Conserve Memory<ept id="p1">](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md)</ept> and <bpt id="p2">[</bpt>How to: Declare Custom Events To Avoid Blocking<ept id="p2">](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following example uses events to count down seconds from 10 to 0.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The code illustrates several of the event-related methods, properties, and statements.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This includes the <ph id="ph1">`RaiseEvent`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The class that raises an event is the event source, and the methods that process the event are the event handlers.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An event source can have multiple handlers for the events it generates.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When the class raises the event, that event is raised on every class that has elected to handle events for that instance of the object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The example also uses a form (<ph id="ph1">`Form1`</ph>) with a button (<ph id="ph2">`Button1`</ph>) and a text box (<ph id="ph3">`TextBox1`</ph>).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you click the button, the first text box displays a countdown from 10 to 0 seconds.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When the full time (10 seconds) has elapsed, the first text box displays "Done".</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The code for <ph id="ph1">`Form1`</ph> specifies the initial and terminal states of the form.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It also contains the code executed when events are raised.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To use this example, open a new Windows Forms project.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Then add a button named <ph id="ph1">`Button1`</ph> and a text box named <ph id="ph2">`TextBox1`</ph> to the main form, named <ph id="ph3">`Form1`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Then right-click the form and click <bpt id="p1">**</bpt>View Code<ept id="p1">**</ept> to open the code editor.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`WithEvents`</ph> variable to the declarations section of the <ph id="ph2">`Form1`</ph> class:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Add the following code to the code for <ph id="ph1">`Form1`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Replace any duplicate procedures that may exist, such as <ph id="ph1">`Form_Load`</ph> or <ph id="ph2">`Button_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Press F5 to run the previous example, and click the button labeled <bpt id="p1">**</bpt>Start<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The first text box starts to count down the seconds.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When the full time (10 seconds) has elapsed, the first text box displays "Done".</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My.Application.DoEvents`</ph> method does not process events in the same way the form does.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To enable the form to handle the events directly, you can use multithreading.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Managed Threading<ept id="p1">](../../../standard/threading/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>RaiseEvent Statement<ept id="p1">](../../../visual-basic/language-reference/statements/raiseevent-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implements Statement<ept id="p1">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](../../../visual-basic/programming-guide/language-features/events/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AddHandler Statement<ept id="p1">](../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>RemoveHandler Statement<ept id="p1">](../../../visual-basic/language-reference/statements/removehandler-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Handles<ept id="p1">](../../../visual-basic/language-reference/statements/handles-clause.md)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegate Statement<ept id="p1">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Declare Custom Events To Conserve Memory<ept id="p1">](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Declare Custom Events To Avoid Blocking<ept id="p1">](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>