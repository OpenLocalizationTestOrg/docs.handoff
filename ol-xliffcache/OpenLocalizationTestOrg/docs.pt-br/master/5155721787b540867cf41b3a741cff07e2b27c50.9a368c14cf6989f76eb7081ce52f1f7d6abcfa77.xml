{"content":"---\ntitle: \"How to: Create GenericPrincipal and GenericIdentity Objects | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"Creating Generic Identity Objects\"\n  - \"GenericPrincipal Objects\"\n  - \"Creating GenericPrincipal Objects\"\n  - \"GenericIdentity Objects\"\nms.assetid: 465694cf-258b-4747-9dae-35b01a5bcdbb\ncaps.latest.revision: 10\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# How to: Create GenericPrincipal and GenericIdentity Objects\nYou can use the <xref:System.Security.Principal.GenericIdentity> class in conjunction with the <xref:System.Security.Principal.GenericPrincipal> class to create an authorization scheme that exists independent of a Windows domain.  \n  \n### To create a GenericPrincipal object  \n  \n1.  Create a new instance of the identity class and initialize it with the name you want it to hold. The following code creates a new **GenericIdentity** object and initializes it with the name `MyUser`.  \n  \n    ```vb  \n    Dim MyIdentity As New GenericIdentity(\"MyUser\")  \n    ```  \n  \n    ```csharp  \n    GenericIdentity MyIdentity = new GenericIdentity(\"MyUser\");  \n    ```  \n  \n2.  Create a new instance of the **GenericPrincipal** class and initialize it with the previously created **GenericIdentity** object and an array of strings that represent the roles that you want associated with this principal. The following code example specifies an array of strings that represent an administrator role and a user role. The **GenericPrincipal** is then initialized with the previous **GenericIdentity** and the string array.  \n  \n    ```vb  \n    Dim MyStringArray As String() = {\"Manager\", \"Teller\"}  \n    DIm MyPrincipal As New GenericPrincipal(MyIdentity, MyStringArray)  \n    ```  \n  \n    ```csharp  \n    String[] MyStringArray = {\"Manager\", \"Teller\"};  \n    GenericPrincipal MyPrincipal = new GenericPrincipal(MyIdentity, MyStringArray);  \n    ```  \n  \n3.  Use the following code to attach the principal to the current thread. This is valuable in situations where the principal must be validated several times, it must be validated by other code running in your application, or it must be validated by a <xref:System.Security.Permissions.PrincipalPermission> object. You can still perform role-based validation on the principal object without attaching it to the thread. For more information, see [Replacing a Principal Object](../../../docs/standard/security/replacing-a-principal-object.md).  \n  \n    ```vb  \n    Thread.CurrentPrincipal = MyPrincipal  \n    ```  \n  \n    ```csharp  \n    Thread.CurrentPrincipal = MyPrincipal;  \n    ```  \n  \n## Example  \n The following code example demonstrates how to create an instance of a **GenericPrincipal** and a **GenericIdentity**. This code displays the values of these objects to the console.  \n  \n```vb  \nImports System  \nImports System.Security.Principal  \nImports System.Threading  \n  \nPublic Class Class1  \n  \n    Public Shared Sub Main()  \n        ' Create generic identity.  \n        Dim MyIdentity As New GenericIdentity(\"MyIdentity\")  \n  \n        ' Create generic principal.  \n        Dim MyStringArray As String() =  {\"Manager\", \"Teller\"}  \n        Dim MyPrincipal As New GenericPrincipal(MyIdentity, MyStringArray)  \n  \n        ' Attach the principal to the current thread.  \n        ' This is not required unless repeated validation must occur,  \n        ' other code in your application must validate, or the   \n        ' PrincipalPermisson object is used.   \n        Thread.CurrentPrincipal = MyPrincipal  \n  \n        ' Print values to the console.  \n        Dim Name As String = MyPrincipal.Identity.Name  \n        Dim Auth As Boolean = MyPrincipal.Identity.IsAuthenticated  \n        Dim IsInRole As Boolean = MyPrincipal.IsInRole(\"Manager\")  \n  \n        Console.WriteLine(\"The Name is: {0}\", Name)  \n        Console.WriteLine(\"The IsAuthenticated is: {0}\", Auth)  \n        Console.WriteLine(\"Is this a Manager? {0}\", IsInRole)  \n  \n    End Sub  \n  \nEnd Class  \n```  \n  \n```csharp  \nusing System;  \nusing System.Security.Principal;  \nusing System.Threading;  \n  \npublic class Class1  \n{  \n    public static int Main(string[] args)  \n    {  \n    // Create generic identity.  \n    GenericIdentity MyIdentity = new GenericIdentity(\"MyIdentity\");  \n  \n    // Create generic principal.  \n    String[] MyStringArray = {\"Manager\", \"Teller\"};  \n    GenericPrincipal MyPrincipal =   \n        new GenericPrincipal(MyIdentity, MyStringArray);  \n  \n    // Attach the principal to the current thread.  \n    // This is not required unless repeated validation must occur,  \n    // other code in your application must validate, or the   \n    // PrincipalPermisson object is used.   \n    Thread.CurrentPrincipal = MyPrincipal;  \n  \n    // Print values to the console.  \n    String Name =  MyPrincipal.Identity.Name;  \n    bool Auth =  MyPrincipal.Identity.IsAuthenticated;   \n    bool IsInRole =  MyPrincipal.IsInRole(\"Manager\");  \n  \n    Console.WriteLine(\"The Name is: {0}\", Name);  \n    Console.WriteLine(\"The IsAuthenticated is: {0}\", Auth);  \n    Console.WriteLine(\"Is this a Manager? {0}\", IsInRole);  \n  \n    return 0;  \n    }  \n}  \n```  \n  \n When executed, the application displays output similar to the following.  \n  \n```  \nThe Name is: MyIdentity  \nThe IsAuthenticated is: True  \nIs this a Manager? True  \n```  \n  \n## See Also  \n <xref:System.Security.Principal.GenericIdentity>   \n <xref:System.Security.Principal.GenericPrincipal>   \n <xref:System.Security.Permissions.PrincipalPermission>   \n [Replacing a Principal Object](../../../docs/standard/security/replacing-a-principal-object.md)   \n [Principal and Identity Objects](../../../docs/standard/security/principal-and-identity-objects.md)","nodes":[{"pos":[12,88],"content":"How to: Create GenericPrincipal and GenericIdentity Objects | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create GenericPrincipal and GenericIdentity Objects | Microsoft Docs","pos":[0,76]}]},{"pos":[597,656],"content":"How to: Create GenericPrincipal and GenericIdentity Objects","linkify":"How to: Create GenericPrincipal and GenericIdentity Objects","nodes":[{"content":"How to: Create GenericPrincipal and GenericIdentity Objects","pos":[0,59]}]},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Security.Principal.GenericIdentity&gt;</ph> class in conjunction with the <ph id=\"ph2\">&lt;xref:System.Security.Principal.GenericPrincipal&gt;</ph> class to create an authorization scheme that exists independent of a Windows domain.","pos":[657,886],"source":"You can use the <xref:System.Security.Principal.GenericIdentity> class in conjunction with the <xref:System.Security.Principal.GenericPrincipal> class to create an authorization scheme that exists independent of a Windows domain."},{"pos":[896,931],"content":"To create a GenericPrincipal object","linkify":"To create a GenericPrincipal object","nodes":[{"content":"To create a GenericPrincipal object","pos":[0,35]}]},{"content":"Create a new instance of the identity class and initialize it with the name you want it to hold.","pos":[941,1037]},{"content":"The following code creates a new <bpt id=\"p1\">**</bpt>GenericIdentity<ept id=\"p1\">**</ept> object and initializes it with the name <ph id=\"ph1\">`MyUser`</ph>.","pos":[1038,1140],"source":" The following code creates a new **GenericIdentity** object and initializes it with the name `MyUser`."},{"content":"Create a new instance of the <bpt id=\"p1\">**</bpt>GenericPrincipal<ept id=\"p1\">**</ept> class and initialize it with the previously created <bpt id=\"p2\">**</bpt>GenericIdentity<ept id=\"p2\">**</ept> object and an array of strings that represent the roles that you want associated with this principal.","pos":[1324,1547],"source":"Create a new instance of the **GenericPrincipal** class and initialize it with the previously created **GenericIdentity** object and an array of strings that represent the roles that you want associated with this principal."},{"content":"The following code example specifies an array of strings that represent an administrator role and a user role.","pos":[1548,1658]},{"content":"The <bpt id=\"p1\">**</bpt>GenericPrincipal<ept id=\"p1\">**</ept> is then initialized with the previous <bpt id=\"p2\">**</bpt>GenericIdentity<ept id=\"p2\">**</ept> and the string array.","pos":[1659,1763],"source":" The **GenericPrincipal** is then initialized with the previous **GenericIdentity** and the string array."},{"content":"Use the following code to attach the principal to the current thread.","pos":[2100,2169]},{"content":"This is valuable in situations where the principal must be validated several times, it must be validated by other code running in your application, or it must be validated by a <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> object.","pos":[2170,2409],"source":" This is valuable in situations where the principal must be validated several times, it must be validated by other code running in your application, or it must be validated by a <xref:System.Security.Permissions.PrincipalPermission> object."},{"content":"You can still perform role-based validation on the principal object without attaching it to the thread.","pos":[2410,2513]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Replacing a Principal Object<ept id=\"p1\">](../../../docs/standard/security/replacing-a-principal-object.md)</ept>.","pos":[2514,2636],"source":" For more information, see [Replacing a Principal Object](../../../docs/standard/security/replacing-a-principal-object.md)."},{"pos":[2788,2795],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates how to create an instance of a <bpt id=\"p1\">**</bpt>GenericPrincipal<ept id=\"p1\">**</ept> and a <bpt id=\"p2\">**</bpt>GenericIdentity<ept id=\"p2\">**</ept>.","pos":[2799,2917],"source":"The following code example demonstrates how to create an instance of a **GenericPrincipal** and a **GenericIdentity**."},{"content":"This code displays the values of these objects to the console.","pos":[2918,2980]},{"content":"When executed, the application displays output similar to the following.","pos":[5335,5407]},{"pos":[5514,5522],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Principal.GenericIdentity&gt;</ph>","pos":[5526,5574],"source":"<xref:System.Security.Principal.GenericIdentity> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Principal.GenericPrincipal&gt;</ph>","pos":[5579,5628],"source":" <xref:System.Security.Principal.GenericPrincipal> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph>","pos":[5633,5687],"source":" <xref:System.Security.Permissions.PrincipalPermission> "},{"content":"<bpt id=\"p1\"> [</bpt>Replacing a Principal Object<ept id=\"p1\">](../../../docs/standard/security/replacing-a-principal-object.md)</ept><ph id=\"ph1\"> </ph>","pos":[5691,5788],"source":" [Replacing a Principal Object](../../../docs/standard/security/replacing-a-principal-object.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Principal and Identity Objects<ept id=\"p1\">](../../../docs/standard/security/principal-and-identity-objects.md)</ept>","pos":[5791,5891],"source":" [Principal and Identity Objects](../../../docs/standard/security/principal-and-identity-objects.md)"}]}