{"content":"---\ntitle: \"How to: Log Exceptions in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"exceptions, logging\"\n  - \"exceptions, tracking\"\nms.assetid: a26c60e2-ae39-444a-aebb-33eccadc0eeb\n---\n# How to: Log Exceptions in Visual Basic\nYou can use the `My.Application.Log` and `My.Log` objects to log information about exceptions that occur in your application. These examples show how to use the `My.Application.Log.WriteException` method to log exceptions that you catch explicitly and exceptions that are unhandled.  \n  \n For logging tracing information, use the `My.Application.Log.WriteEntry` method. For more information, see <xref:Microsoft.VisualBasic.Logging.Log.WriteEntry%2A>  \n  \n### To log a handled exception  \n  \n1.  Create the method that will generate the exception information.  \n  \n     [!code-vb[VbVbalrMyApplicationLog#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#9)]  \n  \n2.  Use a `Try...Catch` block to catch the exception.  \n  \n     [!code-vb[VbVbalrMyApplicationLog#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#6)]  \n  \n3.  Put the code that could generate an exception in the `Try` block.  \n  \n     Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception.  \n  \n     [!code-vb[VbVbalrMyApplicationLog#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#7)]  \n  \n4.  In the `Catch` block, use the `My.Application.Log.WriteException` method to write the exception information.  \n  \n     [!code-vb[VbVbalrMyApplicationLog#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#8)]  \n  \n     The following example shows the complete code for logging a handled exception.  \n  \n     [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  \n  \n### To log an unhandled exception  \n  \n1.  Have a project selected in **Solution Explorer**. On the **Project** menu, choose **Properties**.  \n  \n2.  Click the **Application** tab.  \n  \n3.  Click the **View Application Events** button to open the Code Editor.  \n  \n     This opens the ApplicationEvents.vb file.  \n  \n4.  Have the ApplicationEvents.vb file open in the Code Editor. On the **General** menu, choose **MyApplication Events**.  \n  \n5.  On the **Declarations** menu, choose **UnhandledException**.  \n  \n     The application raises the <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> event before the main application runs.  \n  \n6.  Add the `My.Application.Log.WriteException` method to the `UnhandledException` event handler.  \n  \n     [!code-vb[VbVbalrMyApplicationLog#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/MyEventsFake.vb#4)]  \n  \n     The following example shows the complete code for logging an unhandled exception.  \n  \n     [!code-vb[VbVbalrMyApplicationLog#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/MyEventsFake.vb#5)]  \n  \n## See also\n\n- <xref:Microsoft.VisualBasic.Logging.Log?displayProperty=nameWithType>\n- <xref:Microsoft.VisualBasic.Logging.Log.WriteEntry%2A>\n- <xref:Microsoft.VisualBasic.Logging.Log.WriteException%2A>\n- [Working with Application Logs](../../../../visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)\n- [How to: Write Log Messages](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)\n- [Walkthrough: Determining Where My.Application.Log Writes Information](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)\n- [Walkthrough: Changing Where My.Application.Log Writes Information](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)\n","nodes":[{"pos":[4,195],"embed":true,"restype":"x-metadata","content":"title: \"How to: Log Exceptions in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"exceptions, logging\"\n  - \"exceptions, tracking\"\nms.assetid: a26c60e2-ae39-444a-aebb-33eccadc0eeb","nodes":[{"content":"How to: Log Exceptions in Visual Basic","nodes":[{"pos":[0,38],"content":"How to: Log Exceptions in Visual Basic","nodes":[{"content":"How to: Log Exceptions in Visual Basic","pos":[0,38]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[202,240],"content":"How to: Log Exceptions in Visual Basic","linkify":"How to: Log Exceptions in Visual Basic","nodes":[{"content":"How to: Log Exceptions in Visual Basic","pos":[0,38]}]},{"content":"You can use the <ph id=\"ph1\">`My.Application.Log`</ph> and <ph id=\"ph2\">`My.Log`</ph> objects to log information about exceptions that occur in your application.","pos":[241,366],"source":"You can use the `My.Application.Log` and `My.Log` objects to log information about exceptions that occur in your application."},{"content":"These examples show how to use the <ph id=\"ph1\">`My.Application.Log.WriteException`</ph> method to log exceptions that you catch explicitly and exceptions that are unhandled.","pos":[367,523],"source":" These examples show how to use the `My.Application.Log.WriteException` method to log exceptions that you catch explicitly and exceptions that are unhandled."},{"content":"For logging tracing information, use the <ph id=\"ph1\">`My.Application.Log.WriteEntry`</ph> method.","pos":[530,610],"source":"For logging tracing information, use the `My.Application.Log.WriteEntry` method."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.Log.WriteEntry%2A&gt;</ph>","pos":[611,691],"source":" For more information, see <xref:Microsoft.VisualBasic.Logging.Log.WriteEntry%2A>"},{"pos":[701,727],"content":"To log a handled exception","linkify":"To log a handled exception","nodes":[{"content":"To log a handled exception","pos":[0,26]}]},{"content":"Create the method that will generate the exception information.","pos":[737,800]},{"pos":[949,998],"content":"Use a <ph id=\"ph1\">`Try...Catch`</ph> block to catch the exception.","source":"Use a `Try...Catch` block to catch the exception."},{"pos":[1147,1212],"content":"Put the code that could generate an exception in the <ph id=\"ph1\">`Try`</ph> block.","source":"Put the code that could generate an exception in the `Try` block."},{"pos":[1223,1320],"content":"Uncomment the <ph id=\"ph1\">`Dim`</ph> and <ph id=\"ph2\">`MsgBox`</ph> lines to cause a <ph id=\"ph3\">&lt;xref:System.NullReferenceException&gt;</ph> exception.","source":"Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception."},{"pos":[1469,1577],"content":"In the <ph id=\"ph1\">`Catch`</ph> block, use the <ph id=\"ph2\">`My.Application.Log.WriteException`</ph> method to write the exception information.","source":"In the `Catch` block, use the `My.Application.Log.WriteException` method to write the exception information."},{"content":"The following example shows the complete code for logging a handled exception.","pos":[1727,1805]},{"pos":[1956,1985],"content":"To log an unhandled exception","linkify":"To log an unhandled exception","nodes":[{"content":"To log an unhandled exception","pos":[0,29]}]},{"content":"Have a project selected in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>.","pos":[1995,2044],"source":"Have a project selected in **Solution Explorer**."},{"content":"On the <bpt id=\"p1\">**</bpt>Project<ept id=\"p1\">**</ept> menu, choose <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>.","pos":[2045,2092],"source":" On the **Project** menu, choose **Properties**."},{"pos":[2102,2132],"content":"Click the <bpt id=\"p1\">**</bpt>Application<ept id=\"p1\">**</ept> tab.","source":"Click the **Application** tab."},{"pos":[2142,2211],"content":"Click the <bpt id=\"p1\">**</bpt>View Application Events<ept id=\"p1\">**</ept> button to open the Code Editor.","source":"Click the **View Application Events** button to open the Code Editor."},{"content":"This opens the ApplicationEvents.vb file.","pos":[2222,2263]},{"content":"Have the ApplicationEvents.vb file open in the Code Editor.","pos":[2273,2332]},{"content":"On the <bpt id=\"p1\">**</bpt>General<ept id=\"p1\">**</ept> menu, choose <bpt id=\"p2\">**</bpt>MyApplication Events<ept id=\"p2\">**</ept>.","pos":[2333,2390],"source":" On the **General** menu, choose **MyApplication Events**."},{"pos":[2400,2460],"content":"On the <bpt id=\"p1\">**</bpt>Declarations<ept id=\"p1\">**</ept> menu, choose <bpt id=\"p2\">**</bpt>UnhandledException<ept id=\"p2\">**</ept>.","source":"On the **Declarations** menu, choose **UnhandledException**."},{"pos":[2471,2633],"content":"The application raises the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException&gt;</ph> event before the main application runs.","source":"The application raises the <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> event before the main application runs."},{"pos":[2643,2736],"content":"Add the <ph id=\"ph1\">`My.Application.Log.WriteException`</ph> method to the <ph id=\"ph2\">`UnhandledException`</ph> event handler.","source":"Add the `My.Application.Log.WriteException` method to the `UnhandledException` event handler."},{"content":"The following example shows the complete code for logging an unhandled exception.","pos":[2893,2974]},{"pos":[3129,3137],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3331,3458],"content":"<bpt id=\"p1\">[</bpt>Working with Application Logs<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept>","source":"[Working with Application Logs](../../../../visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)"},{"pos":[3461,3581],"content":"<bpt id=\"p1\">[</bpt>How to: Write Log Messages<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)</ept>","source":"[How to: Write Log Messages](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)"},{"pos":[3584,3788],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Determining Where My.Application.Log Writes Information](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)"},{"pos":[3791,3989],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Changing Where My.Application.Log Writes Information<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Changing Where My.Application.Log Writes Information](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)"}]}