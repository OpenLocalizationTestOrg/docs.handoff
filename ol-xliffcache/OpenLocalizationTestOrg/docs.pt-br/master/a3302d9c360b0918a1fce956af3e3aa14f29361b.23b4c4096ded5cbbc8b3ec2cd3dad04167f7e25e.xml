{"content":"---\ntitle: \"ScrollViewer Overview\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"controls [WPF], ScrollViewer\"\n  - \"ScrollViewer control [WPF], about ScrollViewer control\"\nms.assetid: 94a13b94-cfdf-4b12-a1aa-90cb50c6e9b9\n---\n# ScrollViewer Overview\nContent within a user interface is often larger than a computer screen's display area. The <xref:System.Windows.Controls.ScrollViewer> control provides a convenient way to enable scrolling of content in [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] applications. This topic introduces the <xref:System.Windows.Controls.ScrollViewer> element and provides several usage examples.  \n  \n<a name=\"what_is_a_scrollviewer_element\"></a>   \n## The ScrollViewer Control  \n There are two predefined elements that enable scrolling in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] applications: <xref:System.Windows.Controls.Primitives.ScrollBar> and <xref:System.Windows.Controls.ScrollViewer>. The <xref:System.Windows.Controls.ScrollViewer> control encapsulates horizontal and vertical <xref:System.Windows.Controls.Primitives.ScrollBar> elements and a content container (such as a <xref:System.Windows.Controls.Panel> element) in order to display other visible elements in a scrollable area. You must build a custom object in order to use the <xref:System.Windows.Controls.Primitives.ScrollBar> element for content scrolling. However, you can use the <xref:System.Windows.Controls.ScrollViewer> element by itself because it is a composite control that encapsulates <xref:System.Windows.Controls.Primitives.ScrollBar> functionality.  \n  \n The <xref:System.Windows.Controls.ScrollViewer> control responds to both mouse and keyboard commands, and defines numerous methods with which to scroll content by predetermined increments. You can use the <xref:System.Windows.Controls.ScrollViewer.ScrollChanged> event to detect a change in a <xref:System.Windows.Controls.ScrollViewer> state.  \n  \n A <xref:System.Windows.Controls.ScrollViewer> can only have one child, typically a <xref:System.Windows.Controls.Panel> element that can host a <xref:System.Windows.Controls.Panel.Children%2A> collection of elements. The <xref:System.Windows.Controls.ContentPresenter.Content%2A> property defines the sole child of the <xref:System.Windows.Controls.ScrollViewer>.  \n  \n<a name=\"scrollviewer_physical_vs_logical\"></a>   \n## Physical vs. Logical Scrolling  \n Physical scrolling is used to scroll content by a predetermined physical increment, typically by a value that is declared in pixels. Logical scrolling is used to scroll to the next item in the logical tree. Physical scrolling is the default scroll behavior for most <xref:System.Windows.Controls.Panel> elements. [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] supports both types of scrolling.  \n  \n#### The IScrollInfo Interface  \n The <xref:System.Windows.Controls.Primitives.IScrollInfo> interface represents the main scrolling region within a <xref:System.Windows.Controls.ScrollViewer> or derived control. The interface defines scrolling properties and methods that can be implemented by <xref:System.Windows.Controls.Panel> elements that require scrolling by logical unit, rather than by a physical increment. Casting an instance of <xref:System.Windows.Controls.Primitives.IScrollInfo> to a derived <xref:System.Windows.Controls.Panel> and then using its scrolling methods provides a useful way to scroll to the next logical unit in a child collection, rather than by pixel increment. By default, the <xref:System.Windows.Controls.ScrollViewer> control supports scrolling by physical units.  \n  \n <xref:System.Windows.Controls.StackPanel> and <xref:System.Windows.Controls.VirtualizingStackPanel> both implement <xref:System.Windows.Controls.Primitives.IScrollInfo> and natively support logical scrolling. For layout controls that natively support logical scrolling, you can still achieve physical scrolling by wrapping the host <xref:System.Windows.Controls.Panel> element in a <xref:System.Windows.Controls.ScrollViewer> and setting the <xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A> property to `false`.  \n  \n The following code example demonstrates how to cast an instance of <xref:System.Windows.Controls.Primitives.IScrollInfo> to a <xref:System.Windows.Controls.StackPanel> and use content scrolling methods (<xref:System.Windows.Controls.Primitives.IScrollInfo.LineUp%2A> and <xref:System.Windows.Controls.Primitives.IScrollInfo.LineDown%2A>) defined by the interface.  \n  \n [!code-csharp[IScrollInfoMethods#3](~/samples/snippets/csharp/VS_Snippets_Wpf/IScrollInfoMethods/CSharp/Window1.xaml.cs#3)]\n [!code-vb[IScrollInfoMethods#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/IScrollInfoMethods/VisualBasic/Window1.xaml.vb#3)]  \n  \n<a name=\"scrollviewer_markup_syntax_and_sample\"></a>   \n## Defining and Using a ScrollViewer Element  \n The following example creates a <xref:System.Windows.Controls.ScrollViewer> in a window that contains some text and a rectangle. <xref:System.Windows.Controls.Primitives.ScrollBar> elements appear only when they are necessary. When you resize the window, the <xref:System.Windows.Controls.Primitives.ScrollBar> elements appear and disappear, due to updated values of the <xref:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility%2A> and <xref:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility%2A> properties.  \n  \n [!code-cpp[ScrollViewer#1](~/samples/snippets/cpp/VS_Snippets_Wpf/ScrollViewer/CPP/ScrollViewer_wcp.cpp#1)]\n [!code-csharp[ScrollViewer#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ScrollViewer/CSharp/ScrollViewer_wcp.cs#1)]\n [!code-vb[ScrollViewer#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ScrollViewer/VisualBasic/ScrollViewer.vb#1)]\n [!code-xaml[ScrollViewer#1](~/samples/snippets/xaml/VS_Snippets_Wpf/ScrollViewer/XAML/Pane1.xaml#1)]  \n  \n<a name=\"scrollviewer_styling_scrollviewer\"></a>   \n## Styling a ScrollViewer  \n Like all controls in Windows Presentation Foundation, the <xref:System.Windows.Controls.ScrollViewer> can be styled in order to change the default rendering behavior of the control. For additional information on control styling, see [Styling and Templating](styling-and-templating.md).  \n  \n<a name=\"scrollviewer_scroll_vs_paginate\"></a>   \n## Paginating Documents  \n For document content, an alternative to scrolling is to choose a document container that supports pagination. <xref:System.Windows.Documents.FlowDocument> is for documents that are designed to be hosted within a viewing control, such as <xref:System.Windows.Controls.FlowDocumentPageViewer>, that supports paginating content across multiple pages, preventing the need for scrolling. <xref:System.Windows.Controls.DocumentViewer> provides a solution for viewing <xref:System.Windows.Documents.FixedDocument> content, which uses traditional scrolling to display content outside the realm of the display area.  \n  \n For additional information about document formats and presentation options, see [Documents in WPF](../advanced/documents-in-wpf.md).  \n  \n## See also\n\n- <xref:System.Windows.Controls.ScrollViewer>\n- <xref:System.Windows.Controls.Primitives.ScrollBar>\n- <xref:System.Windows.Controls.Primitives.IScrollInfo>\n- [How to: Create a Scroll Viewer](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752352(v=vs.90))\n- [Documents in WPF](../advanced/documents-in-wpf.md)\n- [ScrollBar Styles and Templates](scrollbar-styles-and-templates.md)\n- [Controls](../advanced/optimizing-performance-controls.md)\n","nodes":[{"pos":[4,267],"embed":true,"restype":"x-metadata","content":"title: \"ScrollViewer Overview\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"controls [WPF], ScrollViewer\"\n  - \"ScrollViewer control [WPF], about ScrollViewer control\"\nms.assetid: 94a13b94-cfdf-4b12-a1aa-90cb50c6e9b9","nodes":[{"content":"ScrollViewer Overview","nodes":[{"pos":[0,21],"content":"ScrollViewer Overview","nodes":[{"content":"ScrollViewer Overview","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[274,295],"content":"ScrollViewer Overview","linkify":"ScrollViewer Overview","nodes":[{"content":"ScrollViewer Overview","pos":[0,21]}]},{"content":"Content within a user interface is often larger than a computer screen's display area.","pos":[296,382]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control provides a convenient way to enable scrolling of content in <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> applications.","pos":[383,592],"source":" The <xref:System.Windows.Controls.ScrollViewer> control provides a convenient way to enable scrolling of content in [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] applications."},{"content":"This topic introduces the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> element and provides several usage examples.","pos":[593,707],"source":" This topic introduces the <xref:System.Windows.Controls.ScrollViewer> element and provides several usage examples."},{"pos":[765,789],"content":"The ScrollViewer Control","linkify":"The ScrollViewer Control","nodes":[{"content":"The ScrollViewer Control","pos":[0,24]}]},{"content":"There are two predefined elements that enable scrolling in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications: <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>.","pos":[793,1048],"source":"There are two predefined elements that enable scrolling in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] applications: <xref:System.Windows.Controls.Primitives.ScrollBar> and <xref:System.Windows.Controls.ScrollViewer>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control encapsulates horizontal and vertical <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> elements and a content container (such as a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element) in order to display other visible elements in a scrollable area.","pos":[1049,1348],"source":" The <xref:System.Windows.Controls.ScrollViewer> control encapsulates horizontal and vertical <xref:System.Windows.Controls.Primitives.ScrollBar> elements and a content container (such as a <xref:System.Windows.Controls.Panel> element) in order to display other visible elements in a scrollable area."},{"content":"You must build a custom object in order to use the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> element for content scrolling.","pos":[1349,1482],"source":" You must build a custom object in order to use the <xref:System.Windows.Controls.Primitives.ScrollBar> element for content scrolling."},{"content":"However, you can use the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> element by itself because it is a composite control that encapsulates <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> functionality.","pos":[1483,1688],"source":" However, you can use the <xref:System.Windows.Controls.ScrollViewer> element by itself because it is a composite control that encapsulates <xref:System.Windows.Controls.Primitives.ScrollBar> functionality."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control responds to both mouse and keyboard commands, and defines numerous methods with which to scroll content by predetermined increments.","pos":[1695,1883],"source":"The <xref:System.Windows.Controls.ScrollViewer> control responds to both mouse and keyboard commands, and defines numerous methods with which to scroll content by predetermined increments."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer.ScrollChanged&gt;</ph> event to detect a change in a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> state.","pos":[1884,2038],"source":" You can use the <xref:System.Windows.Controls.ScrollViewer.ScrollChanged> event to detect a change in a <xref:System.Windows.Controls.ScrollViewer> state."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> can only have one child, typically a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element that can host a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection of elements.","pos":[2045,2261],"source":"A <xref:System.Windows.Controls.ScrollViewer> can only have one child, typically a <xref:System.Windows.Controls.Panel> element that can host a <xref:System.Windows.Controls.Panel.Children%2A> collection of elements."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ContentPresenter.Content%2A&gt;</ph> property defines the sole child of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>.","pos":[2262,2408],"source":" The <xref:System.Windows.Controls.ContentPresenter.Content%2A> property defines the sole child of the <xref:System.Windows.Controls.ScrollViewer>."},{"pos":[2468,2498],"content":"Physical vs. Logical Scrolling","linkify":"Physical vs. Logical Scrolling","nodes":[{"content":"Physical vs. Logical Scrolling","pos":[0,30]}]},{"content":"Physical scrolling is used to scroll content by a predetermined physical increment, typically by a value that is declared in pixels.","pos":[2502,2634]},{"content":"Logical scrolling is used to scroll to the next item in the logical tree.","pos":[2635,2708]},{"content":"Physical scrolling is the default scroll behavior for most <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements.","pos":[2709,2814],"source":" Physical scrolling is the default scroll behavior for most <xref:System.Windows.Controls.Panel> elements."},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> supports both types of scrolling.","pos":[2815,2930],"source":"[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] supports both types of scrolling."},{"pos":[2941,2966],"content":"The IScrollInfo Interface","linkify":"The IScrollInfo Interface","nodes":[{"content":"The IScrollInfo Interface","pos":[0,25]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.IScrollInfo&gt;</ph> interface represents the main scrolling region within a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> or derived control.","pos":[2970,3147],"source":"The <xref:System.Windows.Controls.Primitives.IScrollInfo> interface represents the main scrolling region within a <xref:System.Windows.Controls.ScrollViewer> or derived control."},{"content":"The interface defines scrolling properties and methods that can be implemented by <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements that require scrolling by logical unit, rather than by a physical increment.","pos":[3148,3352],"source":" The interface defines scrolling properties and methods that can be implemented by <xref:System.Windows.Controls.Panel> elements that require scrolling by logical unit, rather than by a physical increment."},{"content":"Casting an instance of <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.IScrollInfo&gt;</ph> to a derived <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> and then using its scrolling methods provides a useful way to scroll to the next logical unit in a child collection, rather than by pixel increment.","pos":[3353,3628],"source":" Casting an instance of <xref:System.Windows.Controls.Primitives.IScrollInfo> to a derived <xref:System.Windows.Controls.Panel> and then using its scrolling methods provides a useful way to scroll to the next logical unit in a child collection, rather than by pixel increment."},{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control supports scrolling by physical units.","pos":[3629,3734],"source":" By default, the <xref:System.Windows.Controls.ScrollViewer> control supports scrolling by physical units."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> both implement <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.IScrollInfo&gt;</ph> and natively support logical scrolling.","pos":[3741,3949],"source":"<xref:System.Windows.Controls.StackPanel> and <xref:System.Windows.Controls.VirtualizingStackPanel> both implement <xref:System.Windows.Controls.Primitives.IScrollInfo> and natively support logical scrolling."},{"content":"For layout controls that natively support logical scrolling, you can still achieve physical scrolling by wrapping the host <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element in a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and setting the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id=\"ph4\">`false`</ph>.","pos":[3950,4267],"source":" For layout controls that natively support logical scrolling, you can still achieve physical scrolling by wrapping the host <xref:System.Windows.Controls.Panel> element in a <xref:System.Windows.Controls.ScrollViewer> and setting the <xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A> property to `false`."},{"pos":[4274,4637],"content":"The following code example demonstrates how to cast an instance of <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.IScrollInfo&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> and use content scrolling methods (<ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.IScrollInfo.LineUp%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Primitives.IScrollInfo.LineDown%2A&gt;</ph>) defined by the interface.","source":"The following code example demonstrates how to cast an instance of <xref:System.Windows.Controls.Primitives.IScrollInfo> to a <xref:System.Windows.Controls.StackPanel> and use content scrolling methods (<xref:System.Windows.Controls.Primitives.IScrollInfo.LineUp%2A> and <xref:System.Windows.Controls.Primitives.IScrollInfo.LineDown%2A>) defined by the interface."},{"pos":[4963,5004],"content":"Defining and Using a ScrollViewer Element","linkify":"Defining and Using a ScrollViewer Element","nodes":[{"content":"Defining and Using a ScrollViewer Element","pos":[0,41]}]},{"content":"The following example creates a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> in a window that contains some text and a rectangle.","pos":[5008,5136],"source":"The following example creates a <xref:System.Windows.Controls.ScrollViewer> in a window that contains some text and a rectangle."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> elements appear only when they are necessary.","pos":[5137,5234],"source":"<xref:System.Windows.Controls.Primitives.ScrollBar> elements appear only when they are necessary."},{"content":"When you resize the window, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> elements appear and disappear, due to updated values of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility%2A&gt;</ph> properties.","pos":[5235,5562],"source":" When you resize the window, the <xref:System.Windows.Controls.Primitives.ScrollBar> elements appear and disappear, due to updated values of the <xref:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility%2A> and <xref:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility%2A> properties."},{"pos":[6075,6097],"content":"Styling a ScrollViewer","linkify":"Styling a ScrollViewer","nodes":[{"content":"Styling a ScrollViewer","pos":[0,22]}]},{"content":"Like all controls in Windows Presentation Foundation, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> can be styled in order to change the default rendering behavior of the control.","pos":[6101,6282],"source":"Like all controls in Windows Presentation Foundation, the <xref:System.Windows.Controls.ScrollViewer> can be styled in order to change the default rendering behavior of the control."},{"content":"For additional information on control styling, see <bpt id=\"p1\">[</bpt>Styling and Templating<ept id=\"p1\">](styling-and-templating.md)</ept>.","pos":[6283,6386],"source":" For additional information on control styling, see [Styling and Templating](styling-and-templating.md)."},{"pos":[6445,6465],"content":"Paginating Documents","linkify":"Paginating Documents","nodes":[{"content":"Paginating Documents","pos":[0,20]}]},{"content":"For document content, an alternative to scrolling is to choose a document container that supports pagination.","pos":[6469,6578]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> is for documents that are designed to be hosted within a viewing control, such as <ph id=\"ph2\">&lt;xref:System.Windows.Controls.FlowDocumentPageViewer&gt;</ph>, that supports paginating content across multiple pages, preventing the need for scrolling.","pos":[6579,6851],"source":"<xref:System.Windows.Documents.FlowDocument> is for documents that are designed to be hosted within a viewing control, such as <xref:System.Windows.Controls.FlowDocumentPageViewer>, that supports paginating content across multiple pages, preventing the need for scrolling."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.DocumentViewer&gt;</ph> provides a solution for viewing <ph id=\"ph2\">&lt;xref:System.Windows.Documents.FixedDocument&gt;</ph> content, which uses traditional scrolling to display content outside the realm of the display area.","pos":[6852,7075],"source":"<xref:System.Windows.Controls.DocumentViewer> provides a solution for viewing <xref:System.Windows.Documents.FixedDocument> content, which uses traditional scrolling to display content outside the realm of the display area."},{"pos":[7082,7214],"content":"For additional information about document formats and presentation options, see <bpt id=\"p1\">[</bpt>Documents in WPF<ept id=\"p1\">](../advanced/documents-in-wpf.md)</ept>.","source":"For additional information about document formats and presentation options, see [Documents in WPF](../advanced/documents-in-wpf.md)."},{"pos":[7223,7231],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7391,7511],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Scroll Viewer<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752352(v=vs.90))</ept>","source":"[How to: Create a Scroll Viewer](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752352(v=vs.90))"},{"pos":[7514,7565],"content":"<bpt id=\"p1\">[</bpt>Documents in WPF<ept id=\"p1\">](../advanced/documents-in-wpf.md)</ept>","source":"[Documents in WPF](../advanced/documents-in-wpf.md)"},{"pos":[7568,7635],"content":"<bpt id=\"p1\">[</bpt>ScrollBar Styles and Templates<ept id=\"p1\">](scrollbar-styles-and-templates.md)</ept>","source":"[ScrollBar Styles and Templates](scrollbar-styles-and-templates.md)"},{"pos":[7638,7696],"content":"<bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](../advanced/optimizing-performance-controls.md)</ept>","source":"[Controls](../advanced/optimizing-performance-controls.md)"}]}