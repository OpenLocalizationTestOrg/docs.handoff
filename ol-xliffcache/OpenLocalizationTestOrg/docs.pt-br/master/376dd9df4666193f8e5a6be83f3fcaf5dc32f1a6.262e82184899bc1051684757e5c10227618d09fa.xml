{"content":"---\ntitle: \"Converting Strings to .NET Framework Data Types\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 65455ef3-9120-412c-819b-d0f59f88ac09\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Converting Strings to .NET Framework Data Types\nIf you want to convert a string to a .NET Framework data type, use the **XmlConvert** method that fits the application requirements. For a list of all conversion methods available in the **XmlConvert** class, see <xref:System.Xml.XmlConvert>.  \n  \n The string returned from the **ToString** method is a string version of the data that is passed in. Additionally, there are several .NET Framework types that convert using the **XmlConvert** class yet they do not use the methods in the **System.Convert** class. The **XmlConvert** class follows the XML Schema (XSD) data type specification and has a data type that the **XmlConvert** can map to.  \n  \n The following table lists .NET Framework data types and the string types that are returned using XML Schema (XSD) data type mapping. These .NET Framework types cannot be processed using **System.Convert**.  \n  \n|.NET Framework type|String returned|  \n|-------------------------|---------------------|  \n|Boolean|\"true\", \"false\"|  \n|Single.PositiveInfinity|\"INF\"|  \n|Single.NegativeInfinity|\"-INF\"|  \n|Double.PositiveInfinity|\"INF\"|  \n|Double.NegativeInfinity|\"-INF\"|  \n|DateTime|Format is \"yyyy-MM-ddTHH:mm:sszzzzzz\" and its subsets.|  \n|Timespan|Format is PnYnMnTnHnMnS that is, `P2Y10M15DT10H30M20S` is a duration of 2 years, 10 months, 15 days, 10 hours, 30 minutes, and 20 seconds.|  \n  \n> [!NOTE]\n>  If converting any of the .NET Framework types listed in the table to a string using the **ToString** method, the returned string is not the base type, but the XML Schema (XSD) string type.  \n  \n The **DateTime** and **Timespan** value type differs in that a **DateTime** represents an instant in time, whereas a **TimeSpan** represents a time interval. The **DateTime** and **Timespan** formats are specified in the XML Schema (XSD) data types specification. For example:  \n  \n```vb  \nDim writer As New XmlTextWriter(\"myfile.xml\", Nothing)  \nDim [date] As New DateTime(2001, 8, 4)  \nwriter.WriteElementString(\"Date\", XmlConvert.ToString([date]))  \n```  \n  \n```csharp  \nXmlTextWriter writer = new XmlTextWriter(\"myfile.xml\", null);  \nDateTime date = new DateTime (2001, 08, 04);  \nwriter.WriteElementString(\"Date\", XmlConvert.ToString(date));  \n```  \n  \n **Output**  \n  \n `<Date>2001-08-04T00:00:00</Date>`.  \n  \n The following code converts an integer to a string:  \n  \n```vb  \nDim writer As New XmlTextWriter(\"myfile.xml\", Nothing)  \nDim value As Int32 = 200  \nwriter.WriteElementString(\"Number\", XmlConvert.ToString(value))  \n```  \n  \n```csharp  \nXmlTextWriter writer = new XmlTextWriter(\"myfile.xml\", null);  \nInt32 value = 200;  \nwriter.WriteElementString(\"Number\", XmlConvert.ToString(value));  \n```  \n  \n **Output**  \n  \n `<Number>200</Number>`  \n  \n However, if you are converting a string to **Boolean**, **Single**, or **Double**, the .NET Framework type that is returned is not the same as the type returned when using the **System.Convert** class.  \n  \n## String to Boolean  \n The following table shows what type is generated for the given input strings, when converting a string to **Boolean** using the **ToBoolean** method.  \n  \n|Valid string input parameter|.NET Framework output type|  \n|----------------------------------|--------------------------------|  \n|\"true\"|Boolean.True|  \n|\"1\"|Boolean.True|  \n|\"false\"|Boolean.False|  \n|\"0\"|Boolean.False|  \n  \n For example, given the following XML:  \n  \n **Input**  \n  \n```xml  \n<Boolean>true</Boolean>  \n<Boolean>1</Boolean>   \n```  \n  \n Both can be understood by the following code, and **bvalue** is **System.Boolean.True**:  \n  \n```vb  \nDim bvalue As Boolean = _  \n   XmlConvert.ToBoolean(reader.ReadElementString())  \nConsole.WriteLine(bvalue)  \n```  \n  \n```csharp  \nBoolean bvalue = XmlConvert.ToBoolean(reader.ReadElementString());  \nConsole.WriteLine(bvalue);  \n```  \n  \n## String to Single  \n The following table shows what type is generated for the given input strings, when converting a string to a **Single** using the **ToSingle** method.  \n  \n|Valid string input parameter|.NET Framework output type|  \n|----------------------------------|--------------------------------|  \n|\"INF\"|Single.PositiveInfinity|  \n|\"-INF\"|Single.NegativeInfinity|  \n  \n## String to Double  \n The following table shows what type is generated for the given input strings, when converting a string to a **Single** using the **ToDouble** method.  \n  \n|Valid string input parameter|.NET Framework output type|  \n|----------------------------------|--------------------------------|  \n|\"INF\"|Double.PositiveInfinity|  \n|\"-INF\"|Double.NegativeInfinity|  \n  \n The following code writes `<Infinity>INF</Infinity>`:  \n  \n```vb  \nDim value As Double = Double.PositiveInfinity  \nwriter.WriteElementString(\"Infinity\", XmlConvert.ToString(value))  \n```  \n  \n```csharp  \nDouble value = Double.PositiveInfinity;  \nwriter.WriteElementString(\"Infinity\", XmlConvert.ToString(value));  \n```  \n  \n## See also\n\n- [Conversion of XML Data Types](../../../../docs/standard/data/xml/conversion-of-xml-data-types.md)\n- [Converting .NET Framework Types to Strings](../../../../docs/standard/data/xml/converting-dotnet-types-to-strings.md)\n","nodes":[{"pos":[4,233],"embed":true,"restype":"x-metadata","content":"title: \"Converting Strings to .NET Framework Data Types\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 65455ef3-9120-412c-819b-d0f59f88ac09\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Converting Strings to .NET Framework Data Types","nodes":[{"pos":[0,47],"content":"Converting Strings to .NET Framework Data Types","nodes":[{"content":"Converting Strings to .NET Framework Data Types","pos":[0,47]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[240,287],"content":"Converting Strings to .NET Framework Data Types","linkify":"Converting Strings to .NET Framework Data Types","nodes":[{"content":"Converting Strings to .NET Framework Data Types","pos":[0,47]}]},{"content":"If you want to convert a string to a .NET Framework data type, use the <bpt id=\"p1\">**</bpt>XmlConvert<ept id=\"p1\">**</ept> method that fits the application requirements.","pos":[288,420],"source":"If you want to convert a string to a .NET Framework data type, use the **XmlConvert** method that fits the application requirements."},{"content":"For a list of all conversion methods available in the <bpt id=\"p1\">**</bpt>XmlConvert<ept id=\"p1\">**</ept> class, see <ph id=\"ph1\">&lt;xref:System.Xml.XmlConvert&gt;</ph>.","pos":[421,530],"source":" For a list of all conversion methods available in the **XmlConvert** class, see <xref:System.Xml.XmlConvert>."},{"content":"The string returned from the <bpt id=\"p1\">**</bpt>ToString<ept id=\"p1\">**</ept> method is a string version of the data that is passed in.","pos":[537,636],"source":"The string returned from the **ToString** method is a string version of the data that is passed in."},{"content":"Additionally, there are several .NET Framework types that convert using the <bpt id=\"p1\">**</bpt>XmlConvert<ept id=\"p1\">**</ept> class yet they do not use the methods in the <bpt id=\"p2\">**</bpt>System.Convert<ept id=\"p2\">**</ept> class.","pos":[637,798],"source":" Additionally, there are several .NET Framework types that convert using the **XmlConvert** class yet they do not use the methods in the **System.Convert** class."},{"content":"The <bpt id=\"p1\">**</bpt>XmlConvert<ept id=\"p1\">**</ept> class follows the XML Schema (XSD) data type specification and has a data type that the <bpt id=\"p2\">**</bpt>XmlConvert<ept id=\"p2\">**</ept> can map to.","pos":[799,932],"source":" The **XmlConvert** class follows the XML Schema (XSD) data type specification and has a data type that the **XmlConvert** can map to."},{"content":"The following table lists .NET Framework data types and the string types that are returned using XML Schema (XSD) data type mapping.","pos":[939,1071]},{"content":"These .NET Framework types cannot be processed using <bpt id=\"p1\">**</bpt>System.Convert<ept id=\"p1\">**</ept>.","pos":[1072,1144],"source":" These .NET Framework types cannot be processed using **System.Convert**."},{"content":".NET Framework type","pos":[1151,1170]},{"content":"String returned","pos":[1171,1186]},{"content":"Boolean","pos":[1243,1250]},{"content":"\"true\", \"false\"","pos":[1251,1266]},{"content":"Single.PositiveInfinity","pos":[1271,1294]},{"content":"\"INF\"","pos":[1295,1300]},{"content":"Single.NegativeInfinity","pos":[1305,1328]},{"content":"\"-INF\"","pos":[1329,1335]},{"content":"Double.PositiveInfinity","pos":[1340,1363]},{"content":"\"INF\"","pos":[1364,1369]},{"content":"Double.NegativeInfinity","pos":[1374,1397]},{"content":"\"-INF\"","pos":[1398,1404]},{"content":"DateTime","pos":[1409,1417]},{"content":"Format is \"yyyy-MM-ddTHH:mm:sszzzzzz\" and its subsets.","pos":[1418,1472]},{"content":"Timespan","pos":[1477,1485]},{"pos":[1486,1624],"content":"Format is PnYnMnTnHnMnS that is, <ph id=\"ph1\">`P2Y10M15DT10H30M20S`</ph> is a duration of 2 years, 10 months, 15 days, 10 hours, 30 minutes, and 20 seconds.","source":"Format is PnYnMnTnHnMnS that is, `P2Y10M15DT10H30M20S` is a duration of 2 years, 10 months, 15 days, 10 hours, 30 minutes, and 20 seconds."},{"pos":[1633,1832],"content":"[!NOTE]\n If converting any of the .NET Framework types listed in the table to a string using the **ToString** method, the returned string is not the base type, but the XML Schema (XSD) string type.","leadings":["","> "],"nodes":[{"content":"If converting any of the .NET Framework types listed in the table to a string using the <bpt id=\"p1\">**</bpt>ToString<ept id=\"p1\">**</ept> method, the returned string is not the base type, but the XML Schema (XSD) string type.","pos":[9,197],"source":"If converting any of the .NET Framework types listed in the table to a string using the **ToString** method, the returned string is not the base type, but the XML Schema (XSD) string type."}]},{"content":"The <bpt id=\"p1\">**</bpt>DateTime<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Timespan<ept id=\"p2\">**</ept> value type differs in that a <bpt id=\"p3\">**</bpt>DateTime<ept id=\"p3\">**</ept> represents an instant in time, whereas a <bpt id=\"p4\">**</bpt>TimeSpan<ept id=\"p4\">**</ept> represents a time interval.","pos":[1839,1996],"source":"The **DateTime** and **Timespan** value type differs in that a **DateTime** represents an instant in time, whereas a **TimeSpan** represents a time interval."},{"content":"The <bpt id=\"p1\">**</bpt>DateTime<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Timespan<ept id=\"p2\">**</ept> formats are specified in the XML Schema (XSD) data types specification.","pos":[1997,2102],"source":" The **DateTime** and **Timespan** formats are specified in the XML Schema (XSD) data types specification."},{"content":"For example:","pos":[2103,2115]},{"pos":[2498,2508],"content":"<bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept>","source":"**Output**"},{"pos":[2515,2550],"content":"<ph id=\"ph1\">`&lt;Date&gt;2001-08-04T00:00:00&lt;/Date&gt;`</ph>.","source":"`<Date>2001-08-04T00:00:00</Date>`."},{"content":"The following code converts an integer to a string:","pos":[2557,2608]},{"pos":[2955,2965],"content":"<bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept>","source":"**Output**"},{"pos":[3001,3202],"content":"However, if you are converting a string to <bpt id=\"p1\">**</bpt>Boolean<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Single<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>Double<ept id=\"p3\">**</ept>, the .NET Framework type that is returned is not the same as the type returned when using the <bpt id=\"p4\">**</bpt>System.Convert<ept id=\"p4\">**</ept> class.","source":"However, if you are converting a string to **Boolean**, **Single**, or **Double**, the .NET Framework type that is returned is not the same as the type returned when using the **System.Convert** class."},{"pos":[3211,3228],"content":"String to Boolean","linkify":"String to Boolean","nodes":[{"content":"String to Boolean","pos":[0,17]}]},{"pos":[3232,3381],"content":"The following table shows what type is generated for the given input strings, when converting a string to <bpt id=\"p1\">**</bpt>Boolean<ept id=\"p1\">**</ept> using the <bpt id=\"p2\">**</bpt>ToBoolean<ept id=\"p2\">**</ept> method.","source":"The following table shows what type is generated for the given input strings, when converting a string to **Boolean** using the **ToBoolean** method."},{"content":"Valid string input parameter","pos":[3388,3416]},{"content":".NET Framework output type","pos":[3417,3443]},{"content":"\"true\"","pos":[3520,3526]},{"content":"Boolean.True","pos":[3527,3539]},{"content":"\"1\"","pos":[3544,3547]},{"content":"Boolean.True","pos":[3548,3560]},{"content":"\"false\"","pos":[3565,3572]},{"content":"Boolean.False","pos":[3573,3586]},{"content":"\"0\"","pos":[3591,3594]},{"content":"Boolean.False","pos":[3595,3608]},{"content":"For example, given the following XML:","pos":[3616,3653]},{"pos":[3660,3669],"content":"<bpt id=\"p1\">**</bpt>Input<ept id=\"p1\">**</ept>","source":"**Input**"},{"pos":[3744,3832],"content":"Both can be understood by the following code, and <bpt id=\"p1\">**</bpt>bvalue<ept id=\"p1\">**</ept> is <bpt id=\"p2\">**</bpt>System.Boolean.True<ept id=\"p2\">**</ept>:","source":"Both can be understood by the following code, and **bvalue** is **System.Boolean.True**:"},{"pos":[4087,4103],"content":"String to Single","linkify":"String to Single","nodes":[{"content":"String to Single","pos":[0,16]}]},{"pos":[4107,4256],"content":"The following table shows what type is generated for the given input strings, when converting a string to a <bpt id=\"p1\">**</bpt>Single<ept id=\"p1\">**</ept> using the <bpt id=\"p2\">**</bpt>ToSingle<ept id=\"p2\">**</ept> method.","source":"The following table shows what type is generated for the given input strings, when converting a string to a **Single** using the **ToSingle** method."},{"content":"Valid string input parameter","pos":[4263,4291]},{"content":".NET Framework output type","pos":[4292,4318]},{"content":"\"INF\"","pos":[4395,4400]},{"content":"Single.PositiveInfinity","pos":[4401,4424]},{"content":"\"-INF\"","pos":[4429,4435]},{"content":"Single.NegativeInfinity","pos":[4436,4459]},{"pos":[4469,4485],"content":"String to Double","linkify":"String to Double","nodes":[{"content":"String to Double","pos":[0,16]}]},{"pos":[4489,4638],"content":"The following table shows what type is generated for the given input strings, when converting a string to a <bpt id=\"p1\">**</bpt>Single<ept id=\"p1\">**</ept> using the <bpt id=\"p2\">**</bpt>ToDouble<ept id=\"p2\">**</ept> method.","source":"The following table shows what type is generated for the given input strings, when converting a string to a **Single** using the **ToDouble** method."},{"content":"Valid string input parameter","pos":[4645,4673]},{"content":".NET Framework output type","pos":[4674,4700]},{"content":"\"INF\"","pos":[4777,4782]},{"content":"Double.PositiveInfinity","pos":[4783,4806]},{"content":"\"-INF\"","pos":[4811,4817]},{"content":"Double.NegativeInfinity","pos":[4818,4841]},{"pos":[4849,4902],"content":"The following code writes <ph id=\"ph1\">`&lt;Infinity&gt;INF&lt;/Infinity&gt;`</ph>:","source":"The following code writes `<Infinity>INF</Infinity>`:"},{"pos":[5176,5184],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5188,5286],"content":"<bpt id=\"p1\">[</bpt>Conversion of XML Data Types<ept id=\"p1\">](../../../../docs/standard/data/xml/conversion-of-xml-data-types.md)</ept>","source":"[Conversion of XML Data Types](../../../../docs/standard/data/xml/conversion-of-xml-data-types.md)"},{"pos":[5289,5407],"content":"<bpt id=\"p1\">[</bpt>Converting .NET Framework Types to Strings<ept id=\"p1\">](../../../../docs/standard/data/xml/converting-dotnet-types-to-strings.md)</ept>","source":"[Converting .NET Framework Types to Strings](../../../../docs/standard/data/xml/converting-dotnet-types-to-strings.md)"}]}