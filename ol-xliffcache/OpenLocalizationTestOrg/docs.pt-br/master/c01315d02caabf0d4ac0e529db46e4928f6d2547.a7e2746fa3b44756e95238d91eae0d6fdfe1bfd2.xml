{"content":"---\ntitle: \"How to: Validate Input with the Windows Forms DataGrid Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"DataGrid control [Windows Forms], examples\"\n  - \"user input, validating\"\n  - \"examples [Windows Forms], DataGrid control\"\n  - \"DataGrid control [Windows Forms], validating input\"\n  - \"validation, user input\"\nms.assetid: f1e9c3a0-d0a1-4893-a615-b4b0db046c63\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Validate Input with the Windows Forms DataGrid Control\n> [!NOTE]\n>  The <xref:System.Windows.Forms.DataGridView> control replaces and adds functionality to the <xref:System.Windows.Forms.DataGrid> control; however, the <xref:System.Windows.Forms.DataGrid> control is retained for both backward compatibility and future use, if you choose. For more information, see [Differences Between the Windows Forms DataGridView and DataGrid Controls](../../../../docs/framework/winforms/controls/differences-between-the-windows-forms-datagridview-and-datagrid-controls.md).  \n  \n There are two types of input validation available for the Windows Forms <xref:System.Windows.Forms.DataGrid> control. If the user attempts to enter a value that is of an unacceptable data type for the cell, for example a string into an integer, the new invalid value is replaced with the old value. This kind of input validation is done automatically and cannot be customized.  \n  \n The other type of input validation can be used to reject any unacceptable data, for example a 0 value in a field that must be greater than or equal to 1, or an inappropriate string. This is done in the dataset by writing an event handler for the <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event. The example below uses the <xref:System.Data.DataTable.ColumnChanging> event because the unacceptable value is disallowed for the \"Product\" column in particular. You might use the <xref:System.Data.DataTable.RowChanging> event for checking that the value of an \"End Date\" column is later than the \"Start Date\" column in the same row.  \n  \n### To validate user input  \n  \n1.  Write code to handle the <xref:System.Data.DataTable.ColumnChanging> event for the appropriate table. When inappropriate input is detected, call the <xref:System.Data.DataRow.SetColumnError%2A> method of the <xref:System.Data.DataRow> object.  \n  \n    ```vb  \n    Private Sub Customers_ColumnChanging(ByVal sender As Object, _  \n    ByVal e As System.Data.DataColumnChangeEventArgs)  \n       ' Only check for errors in the Product column  \n       If (e.Column.ColumnName.Equals(\"Product\")) Then  \n          ' Do not allow \"Automobile\" as a product.  \n          If CType(e.ProposedValue, String) = \"Automobile\" Then  \n             Dim badValue As Object = e.ProposedValue  \n             e.ProposedValue = \"Bad Data\"  \n             e.Row.RowError = \"The Product column contians an error\"  \n             e.Row.SetColumnError(e.Column, \"Product cannot be \" & _  \n             CType(badValue, String))  \n          End If  \n       End If  \n    End Sub  \n  \n    ```  \n  \n    ```csharp  \n    //Handle column changing events on the Customers table  \n    private void Customers_ColumnChanging(object sender, System.Data.DataColumnChangeEventArgs e) {  \n  \n       //Only check for errors in the Product column  \n       if (e.Column.ColumnName.Equals(\"Product\")) {  \n  \n          //Do not allow \"Automobile\" as a product  \n          if (e.ProposedValue.Equals(\"Automobile\")) {  \n             object badValue = e.ProposedValue;  \n             e.ProposedValue = \"Bad Data\";  \n             e.Row.RowError = \"The Product column contains an error\";  \n             e.Row.SetColumnError(e.Column, \"Product cannot be \" + badValue);  \n          }  \n       }  \n    }  \n  \n    ```  \n  \n2.  Connect the event handler to the event.  \n  \n     Place the following code within either the form's <xref:System.Windows.Forms.Form.Load> event or its constructor.  \n  \n    ```vb  \n    ' Assumes the grid is bound to a dataset called customersDataSet1  \n    ' with a table called Customers.  \n    ' Put this code in the form's Load event or its constructor.  \n    AddHandler customersDataSet1.Tables(\"Customers\").ColumnChanging, AddressOf Customers_ColumnChanging  \n  \n    ```  \n  \n    ```csharp  \n    // Assumes the grid is bound to a dataset called customersDataSet1  \n    // with a table called Customers.  \n    // Put this code in the form's Load event or its constructor.  \n    customersDataSet1.Tables[\"Customers\"].ColumnChanging += new DataColumnChangeEventHandler(this.Customers_ColumnChanging);  \n  \n    ```  \n  \n## See Also  \n <xref:System.Windows.Forms.DataGrid>   \n <xref:System.Data.DataTable.ColumnChanging>   \n <xref:System.Data.DataRow.SetColumnError%2A>   \n [DataGrid Control](../../../../docs/framework/winforms/controls/datagrid-control-windows-forms.md)","nodes":[{"pos":[4,657],"nodes":[{"content":"How to: Validate Input with the Windows Forms DataGrid Control | Microsoft Docs","nodes":[{"pos":[0,79],"content":"How to: Validate Input with the Windows Forms DataGrid Control | Microsoft Docs","nodes":[{"content":"How to: Validate Input with the Windows Forms DataGrid Control | Microsoft Docs","pos":[0,79]}]}],"pos":[6,88],"yaml":true}],"content":"title: \"How to: Validate Input with the Windows Forms DataGrid Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"DataGrid control [Windows Forms], examples\"\n  - \"user input, validating\"\n  - \"examples [Windows Forms], DataGrid control\"\n  - \"DataGrid control [Windows Forms], validating input\"\n  - \"validation, user input\"\nms.assetid: f1e9c3a0-d0a1-4893-a615-b4b0db046c63\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","yamlblock":true},{"pos":[664,726],"content":"How to: Validate Input with the Windows Forms DataGrid Control","linkify":"How to: Validate Input with the Windows Forms DataGrid Control","nodes":[{"content":"How to: Validate Input with the Windows Forms DataGrid Control","pos":[0,62]}]},{"pos":[729,1234],"content":"[!NOTE]\n The <xref:System.Windows.Forms.DataGridView> control replaces and adds functionality to the <xref:System.Windows.Forms.DataGrid> control; however, the <xref:System.Windows.Forms.DataGrid> control is retained for both backward compatibility and future use, if you choose. For more information, see [Differences Between the Windows Forms DataGridView and DataGrid Controls](../../../../docs/framework/winforms/controls/differences-between-the-windows-forms-datagridview-and-datagrid-controls.md).","leadings":["","> "],"nodes":[{"content":"The <xref:System.Windows.Forms.DataGridView> control replaces and adds functionality to the <xref:System.Windows.Forms.DataGrid> control; however, the <xref:System.Windows.Forms.DataGrid> control is retained for both backward compatibility and future use, if you choose. For more information, see [Differences Between the Windows Forms DataGridView and DataGrid Controls](../../../../docs/framework/winforms/controls/differences-between-the-windows-forms-datagridview-and-datagrid-controls.md).","pos":[9,503],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control replaces and adds functionality to the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGrid&gt;</ph> control; however, the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.DataGrid&gt;</ph> control is retained for both backward compatibility and future use, if you choose.","pos":[0,270],"source":"The <xref:System.Windows.Forms.DataGridView> control replaces and adds functionality to the <xref:System.Windows.Forms.DataGrid> control; however, the <xref:System.Windows.Forms.DataGrid> control is retained for both backward compatibility and future use, if you choose."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Differences Between the Windows Forms DataGridView and DataGrid Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/differences-between-the-windows-forms-datagridview-and-datagrid-controls.md)</ept>.","pos":[271,494],"source":" For more information, see [Differences Between the Windows Forms DataGridView and DataGrid Controls](../../../../docs/framework/winforms/controls/differences-between-the-windows-forms-datagridview-and-datagrid-controls.md)."}]}]},{"content":"There are two types of input validation available for the Windows Forms <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGrid&gt;</ph> control.","pos":[1241,1358],"source":"There are two types of input validation available for the Windows Forms <xref:System.Windows.Forms.DataGrid> control."},{"content":"If the user attempts to enter a value that is of an unacceptable data type for the cell, for example a string into an integer, the new invalid value is replaced with the old value.","pos":[1359,1539]},{"content":"This kind of input validation is done automatically and cannot be customized.","pos":[1540,1617]},{"content":"The other type of input validation can be used to reject any unacceptable data, for example a 0 value in a field that must be greater than or equal to 1, or an inappropriate string.","pos":[1624,1805]},{"content":"This is done in the dataset by writing an event handler for the <ph id=\"ph1\">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event.","pos":[1806,1964],"source":" This is done in the dataset by writing an event handler for the <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event."},{"content":"The example below uses the <ph id=\"ph1\">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph> event because the unacceptable value is disallowed for the \"Product\" column in particular.","pos":[1965,2126],"source":" The example below uses the <xref:System.Data.DataTable.ColumnChanging> event because the unacceptable value is disallowed for the \"Product\" column in particular."},{"content":"You might use the <ph id=\"ph1\">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event for checking that the value of an \"End Date\" column is later than the \"Start Date\" column in the same row.","pos":[2127,2298],"source":" You might use the <xref:System.Data.DataTable.RowChanging> event for checking that the value of an \"End Date\" column is later than the \"Start Date\" column in the same row."},{"pos":[2308,2330],"content":"To validate user input","linkify":"To validate user input","nodes":[{"content":"To validate user input","pos":[0,22]}]},{"content":"Write code to handle the <ph id=\"ph1\">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph> event for the appropriate table.","pos":[2340,2441],"source":"Write code to handle the <xref:System.Data.DataTable.ColumnChanging> event for the appropriate table."},{"content":"When inappropriate input is detected, call the <ph id=\"ph1\">&lt;xref:System.Data.DataRow.SetColumnError%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Data.DataRow&gt;</ph> object.","pos":[2442,2582],"source":" When inappropriate input is detected, call the <xref:System.Data.DataRow.SetColumnError%2A> method of the <xref:System.Data.DataRow> object."},{"content":"Connect the event handler to the event.","pos":[4007,4046]},{"content":"Place the following code within either the form's <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> event or its constructor.","pos":[4057,4170],"source":"Place the following code within either the form's <xref:System.Windows.Forms.Form.Load> event or its constructor."},{"pos":[4831,4839],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGrid&gt;</ph>","pos":[4843,4879],"source":"<xref:System.Windows.Forms.DataGrid> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph>","pos":[4884,4927],"source":"<xref:System.Data.DataTable.ColumnChanging> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Data.DataRow.SetColumnError%2A&gt;</ph>","pos":[4932,4976],"source":"<xref:System.Data.DataRow.SetColumnError%2A> "},{"content":"<bpt id=\"p1\">[</bpt>DataGrid Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/datagrid-control-windows-forms.md)</ept>","pos":[4981,5079],"source":"[DataGrid Control](../../../../docs/framework/winforms/controls/datagrid-control-windows-forms.md)"}]}