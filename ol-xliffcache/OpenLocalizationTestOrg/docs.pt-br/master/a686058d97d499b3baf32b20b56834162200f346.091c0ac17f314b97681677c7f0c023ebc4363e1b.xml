{"content":"---\ntitle: \"Parsing text files with the TextFieldParser object (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"TextFieldParser object, using\"\n  - \"I/O [Visual Basic], parsing files\"\n  - \"files, parsing\"\nms.assetid: fc31d6e6-af0c-403f-8a00-d556b2c57567\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Parsing text files with the TextFieldParser object (Visual Basic)\nThe `TextFieldParser` object allows you to parse and process very large file that are structured as delimited-width columns of text, such as log files or legacy database information. Parsing a text file with `TextFieldParser` is similar to iterating over a text file, while the parse method to extract fields of text is similar to string manipulation methods used to tokenize delimited strings.  \n  \n## Parsing different types of text files  \n Text files may have fields of various width, delimited by a character such as a comma or a tab space. Define `TextFieldType` and the delimiter, as in the following example, which uses the `SetDelimiters` method to define a tab-delimited text file:  \n  \n [!code-vb[VbVbalrTextFieldParser#21](../../../../visual-basic/developing-apps/development-with-my/codesnippet/VisualBasic/parsing-text-files-with-the-textfieldparser-object_1.vb)]  \n  \n Other text files may have field widths that are fixed. In such cases, you need to define the `TextFieldType` as `FixedWidth` and define the widths of each field, as in the following example. This example uses the `SetFieldWidths` method to define the columns of text: the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width.  \n  \n [!code-vb[VbVbalrTextFieldParser#22](../../../../visual-basic/developing-apps/development-with-my/codesnippet/VisualBasic/parsing-text-files-with-the-textfieldparser-object_2.vb)]  \n  \n Once the format is defined, you can loop through the file, using the `ReadFields` method to process each line in turn.  \n  \n If a field does not match the specified format, a <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception is thrown. When such exceptions are thrown, the `ErrorLine` and `ErrorLineNumber` properties hold the text causing the exception and the line number of that text.  \n  \n## Parsing files with multiple formats  \n The `PeekChars` method of the `TextFieldParser` object can be used to check each field before reading it, allowing you to define multiple formats for the fields and react accordingly. For more information, see [How to: Read From Text Files with Multiple Formats](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md).  \n  \n## See also  \n <xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>   \n <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>","nodes":[{"pos":[4,679],"embed":true,"restype":"x-metadata","content":"title: \"Parsing text files with the TextFieldParser object (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"TextFieldParser object, using\"\n  - \"I/O [Visual Basic], parsing files\"\n  - \"files, parsing\"\nms.assetid: fc31d6e6-af0c-403f-8a00-d556b2c57567\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Parsing text files with the TextFieldParser object (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,82],"content":"Parsing text files with the TextFieldParser object (Visual Basic) | Microsoft Docs","nodes":[{"content":"Parsing text files with the TextFieldParser object (Visual Basic) | Microsoft Docs","pos":[0,82]}]}],"path":["title"]}],"yml":true},{"pos":[686,751],"content":"Parsing text files with the TextFieldParser object (Visual Basic)","linkify":"Parsing text files with the TextFieldParser object (Visual Basic)","nodes":[{"content":"Parsing text files with the TextFieldParser object (Visual Basic)","pos":[0,65]}]},{"content":"The <ph id=\"ph1\">`TextFieldParser`</ph> object allows you to parse and process very large file that are structured as delimited-width columns of text, such as log files or legacy database information.","pos":[752,934],"source":"The `TextFieldParser` object allows you to parse and process very large file that are structured as delimited-width columns of text, such as log files or legacy database information."},{"content":"Parsing a text file with <ph id=\"ph1\">`TextFieldParser`</ph> is similar to iterating over a text file, while the parse method to extract fields of text is similar to string manipulation methods used to tokenize delimited strings.","pos":[935,1146],"source":" Parsing a text file with `TextFieldParser` is similar to iterating over a text file, while the parse method to extract fields of text is similar to string manipulation methods used to tokenize delimited strings."},{"pos":[1155,1192],"content":"Parsing different types of text files","linkify":"Parsing different types of text files","nodes":[{"content":"Parsing different types of text files","pos":[0,37]}]},{"content":"Text files may have fields of various width, delimited by a character such as a comma or a tab space.","pos":[1196,1297]},{"content":"Define <ph id=\"ph1\">`TextFieldType`</ph> and the delimiter, as in the following example, which uses the <ph id=\"ph2\">`SetDelimiters`</ph> method to define a tab-delimited text file:","pos":[1298,1443],"source":" Define `TextFieldType` and the delimiter, as in the following example, which uses the `SetDelimiters` method to define a tab-delimited text file:"},{"content":"Other text files may have field widths that are fixed.","pos":[1636,1690]},{"content":"In such cases, you need to define the <ph id=\"ph1\">`TextFieldType`</ph> as <ph id=\"ph2\">`FixedWidth`</ph> and define the widths of each field, as in the following example.","pos":[1691,1826],"source":" In such cases, you need to define the `TextFieldType` as `FixedWidth` and define the widths of each field, as in the following example."},{"content":"This example uses the <ph id=\"ph1\">`SetFieldWidths`</ph> method to define the columns of text: the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width.","pos":[1827,2014],"source":" This example uses the `SetFieldWidths` method to define the columns of text: the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width."},{"pos":[2207,2325],"content":"Once the format is defined, you can loop through the file, using the <ph id=\"ph1\">`ReadFields`</ph> method to process each line in turn.","source":"Once the format is defined, you can loop through the file, using the `ReadFields` method to process each line in turn."},{"content":"If a field does not match the specified format, a <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> exception is thrown.","pos":[2332,2461],"source":"If a field does not match the specified format, a <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception is thrown."},{"content":"When such exceptions are thrown, the <ph id=\"ph1\">`ErrorLine`</ph> and <ph id=\"ph2\">`ErrorLineNumber`</ph> properties hold the text causing the exception and the line number of that text.","pos":[2462,2613],"source":" When such exceptions are thrown, the `ErrorLine` and `ErrorLineNumber` properties hold the text causing the exception and the line number of that text."},{"pos":[2622,2657],"content":"Parsing files with multiple formats","linkify":"Parsing files with multiple formats","nodes":[{"content":"Parsing files with multiple formats","pos":[0,35]}]},{"content":"The <ph id=\"ph1\">`PeekChars`</ph> method of the <ph id=\"ph2\">`TextFieldParser`</ph> object can be used to check each field before reading it, allowing you to define multiple formats for the fields and react accordingly.","pos":[2661,2844],"source":"The `PeekChars` method of the `TextFieldParser` object can be used to check each field before reading it, allowing you to define multiple formats for the fields and react accordingly."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Read From Text Files with Multiple Formats<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)</ept>.","pos":[2845,3056],"source":" For more information, see [How to: Read From Text Files with Multiple Formats](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)."},{"pos":[3065,3073],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]}]}