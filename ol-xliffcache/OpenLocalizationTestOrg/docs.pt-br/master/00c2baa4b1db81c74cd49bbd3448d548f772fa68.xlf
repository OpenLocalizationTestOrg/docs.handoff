<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="group-elements-in-a-sequence.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00c2baa4b1db81c74cd49bbd3448d548f772fa68</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\group-elements-in-a-sequence.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7aded9cf4ae93a5e695ee5114f3b44c5da377fe7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b2f7dfbe50d1f0b73757b47bdacec9d7b8a101a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Group Elements in a Sequence | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Group Elements in a Sequence</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph> operator groups the elements of a sequence.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following examples use the Northwind database.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Null column values in <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph> queries can sometimes throw an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see the "GroupBy InvalidOperationException" section of <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example partitions <ph id="ph1">`Products`</ph> by <ph id="ph2">`CategoryID`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph> to find the maximum unit price for each <ph id="ph2">`CategoryID`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example uses Average to find the average <ph id="ph1">`UnitPrice`</ph> for each <ph id="ph2">`CategoryID`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph> to find the total <ph id="ph2">`UnitPrice`</ph> for each <ph id="ph3">`CategoryID`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> to find the number of discontinued <ph id="ph2">`Products`</ph> in each <ph id="ph3">`CategoryID`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example uses a following <ph id="ph1">`where`</ph> clause to find all categories that have at least 10 products.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example groups products by <ph id="ph1">`CategoryID`</ph> and <ph id="ph2">`SupplierID`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example returns two sequences of products.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The first sequence contains products with unit price less than or equal to 10.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The second sequence contains products with unit price greater than 10.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%2A&gt;</ph> operator can take only a single key argument.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you need to group by more than one key, you must create an anonymous type, as in the following example:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Examples<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Downloading Sample Databases<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>