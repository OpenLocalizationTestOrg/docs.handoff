{"content":"---\ntitle: \"Join Operations (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 39ab4854-ac84-4738-9d0b-3cb79be84db4\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Join Operations (Visual Basic)\nA *join* of two data sources is the association of objects in one data source with objects that share a common attribute in another data source.  \n  \n Joining is an important operation in queries that target data sources whose relationships to each other cannot be followed directly. In object-oriented programming, this could mean a correlation between objects that is not modeled, such as the backwards direction of a one-way relationship. An example of a one-way relationship is a Customer class that has a property of type City, but the City class does not have a property that is a collection of Customer objects. If you have a list of City objects and you want to find all the customers in each city, you could use a join operation to find them.  \n  \n The join methods provided in the LINQ framework are <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>. These methods perform equijoins, or joins that match two data sources based on equality of their keys. (For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned. The <xref:System.Linq.Enumerable.GroupJoin%2A> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins. A left outer join is a join that returns each element of the first (left) data source, even if it has no correlated elements in the other data source.  \n  \n The following illustration shows a conceptual view of two sets and the elements within those sets that are included in either an inner join or a left outer join.  \n  \n ![Two overlapping circles showing inner&#47;outer.](../../../../csharp/programming-guide/concepts/linq/media/joincircles.png \"JoinCircles\")  \n  \n## Methods  \n  \n|Method Name|Description|Visual Basic Query Expression Syntax|More Information|  \n|-----------------|-----------------|------------------------------------------|----------------------|  \n|Join|Joins two sequences based on key selector functions and extracts pairs of values.|`From x In …, y In … Where x.a = y.a`<br /><br /> -or-<br /><br /> `Join … [As …]In … On …`|<xref:System.Linq.Enumerable.Join%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.Join%2A?displayProperty=fullName>|  \n|GroupJoin|Joins two sequences based on key selector functions and groups the resulting matches for each element.|`Group Join … In … On …`|<xref:System.Linq.Enumerable.GroupJoin%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.GroupJoin%2A?displayProperty=fullName>|  \n  \n## See Also  \n <xref:System.Linq>   \n [Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)   \n [Anonymous Types](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)   \n [Formulate Joins and Cross-Product Queries](http://msdn.microsoft.com/library/d8072ede-0521-4670-9bec-1778ceeb875b)   \n [Join Clause](../../../../visual-basic/language-reference/queries/join-clause.md)   \n [How to: Join Content from Dissimilar Files (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)   \n [How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)","nodes":[{"pos":[4,433],"embed":true,"restype":"x-metadata","content":"title: \"Join Operations (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 39ab4854-ac84-4738-9d0b-3cb79be84db4\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"Join Operations (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"Join Operations (Visual Basic) | Microsoft Docs","nodes":[{"content":"Join Operations (Visual Basic) | Microsoft Docs","pos":[0,47]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[440,470],"content":"Join Operations (Visual Basic)","linkify":"Join Operations (Visual Basic)","nodes":[{"content":"Join Operations (Visual Basic)","pos":[0,30]}]},{"pos":[471,615],"content":"A <bpt id=\"p1\">*</bpt>join<ept id=\"p1\">*</ept> of two data sources is the association of objects in one data source with objects that share a common attribute in another data source.","source":"A *join* of two data sources is the association of objects in one data source with objects that share a common attribute in another data source."},{"content":"Joining is an important operation in queries that target data sources whose relationships to each other cannot be followed directly.","pos":[622,754]},{"content":"In object-oriented programming, this could mean a correlation between objects that is not modeled, such as the backwards direction of a one-way relationship.","pos":[755,912]},{"content":"An example of a one-way relationship is a Customer class that has a property of type City, but the City class does not have a property that is a collection of Customer objects.","pos":[913,1089]},{"content":"If you have a list of City objects and you want to find all the customers in each city, you could use a join operation to find them.","pos":[1090,1222]},{"content":"The join methods provided in the LINQ framework are <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.","pos":[1229,1366],"source":"The join methods provided in the LINQ framework are <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>."},{"content":"These methods perform equijoins, or joins that match two data sources based on equality of their keys.","pos":[1367,1469]},{"content":"(For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned.","pos":[1470,1774],"source":" (For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins.","pos":[1775,1949],"source":" The <xref:System.Linq.Enumerable.GroupJoin%2A> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins."},{"content":"A left outer join is a join that returns each element of the first (left) data source, even if it has no correlated elements in the other data source.","pos":[1950,2100]},{"content":"The following illustration shows a conceptual view of two sets and the elements within those sets that are included in either an inner join or a left outer join.","pos":[2107,2268]},{"pos":[2275,2414],"content":"<bpt id=\"p1\">![</bpt>Two overlapping circles showing inner&amp;#47;outer.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../csharp/programming-guide/concepts/linq/media/joincircles.png \"</bpt>JoinCircles<ept id=\"p2\">\")</ept>","source":"![Two overlapping circles showing inner&#47;outer.](../../../../csharp/programming-guide/concepts/linq/media/joincircles.png \"JoinCircles\")"},{"pos":[2423,2430],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[2437,2448]},{"content":"Description","pos":[2449,2460]},{"content":"Visual Basic Query Expression Syntax","pos":[2461,2497]},{"content":"More Information","pos":[2498,2514]},{"content":"Join","pos":[2625,2629]},{"content":"Joins two sequences based on key selector functions and extracts pairs of values.","pos":[2630,2711]},{"content":"-or-","pos":[2762,2766]},{"content":"GroupJoin","pos":[2945,2954]},{"content":"Joins two sequences based on key selector functions and groups the resulting matches for each element.","pos":[2955,3057]},{"pos":[3239,3247],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[3274,3420],"source":"[Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3424,3543],"source":"[Anonymous Types](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Formulate Joins and Cross-Product Queries<ept id=\"p1\">](http://msdn.microsoft.com/library/d8072ede-0521-4670-9bec-1778ceeb875b)</ept><ph id=\"ph1\"> </ph>","pos":[3547,3663],"source":"[Formulate Joins and Cross-Product Queries](http://msdn.microsoft.com/library/d8072ede-0521-4670-9bec-1778ceeb875b) "},{"content":"<bpt id=\"p1\">[</bpt>Join Clause<ept id=\"p1\">](../../../../visual-basic/language-reference/queries/join-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[3667,3749],"source":"[Join Clause](../../../../visual-basic/language-reference/queries/join-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Join Content from Dissimilar Files (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[3753,3928],"source":"[How to: Join Content from Dissimilar Files (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)</ept>","pos":[3932,4136],"source":"[How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)"}]}