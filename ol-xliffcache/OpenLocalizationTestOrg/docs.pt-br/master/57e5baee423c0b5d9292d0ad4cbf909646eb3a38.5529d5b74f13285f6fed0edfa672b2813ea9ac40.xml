{"content":"---\ntitle: \"~ Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/05/2018\nf1_keywords: \n  - \"~_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"tilde (~) one's complement operator [C#]\"\n  - \"~ operator [C#]\"\n  - \"~ [C#], bitwise complement operator\"\n  - \"bitwise complement operator [C#]\"\nms.assetid: 11bc078a-50e2-4d7e-9896-67ef669dc602\n---\n# ~ Operator (C# Reference)\n\nThe bitwise complement operator `~` is a unary operator that produces a bitwise complement of its operand by reversing each bit. All integer types support the `~` operator.\n\n> [!NOTE]\n> The `~` symbol is also used to declare finalizers. For more information, see [Finalizers](../../programming-guide/classes-and-structs/destructors.md).\n\nThe following example demonstrates the usage of the `~` operator:\n\n[!code-csharp-interactive[bitwise NOT](~/samples/snippets/csharp/language-reference/operators/BitwiseComplementExamples.cs#Example)]\n\n> [!NOTE]\n> The preceding example uses the binary literals [introduced in C# 7.0](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements) and [enhanced  in C# 7.2](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals).\n\n## Operator overloadability\n\nUser-defined types can [overload](../keywords/operator.md) the `~` operator.\n\n## C# language specification\n\nFor more information, see the [Bitwise complement operator](~/_csharplang/spec/expressions.md#bitwise-complement-operator) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [Finalizers](../../programming-guide/classes-and-structs/destructors.md)\n- [& operator](and-operator.md)\n- [| operator](or-operator.md)\n- [^ operator](xor-operator.md)\n","nodes":[{"pos":[4,336],"embed":true,"restype":"x-metadata","content":"title: \"~ Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/05/2018\nf1_keywords: \n  - \"~_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"tilde (~) one's complement operator [C#]\"\n  - \"~ operator [C#]\"\n  - \"~ [C#], bitwise complement operator\"\n  - \"bitwise complement operator [C#]\"\nms.assetid: 11bc078a-50e2-4d7e-9896-67ef669dc602","nodes":[{"content":"~ Operator - C# Reference","nodes":[{"pos":[0,25],"content":"~ Operator - C# Reference","nodes":[{"content":"~ Operator - C# Reference","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[343,368],"content":"~ Operator (C# Reference)","linkify":"~ Operator (C# Reference)","nodes":[{"content":"~ Operator (C# Reference)","pos":[0,25]}]},{"content":"The bitwise complement operator <ph id=\"ph1\">`~`</ph> is a unary operator that produces a bitwise complement of its operand by reversing each bit.","pos":[370,498],"source":"The bitwise complement operator `~` is a unary operator that produces a bitwise complement of its operand by reversing each bit."},{"content":"All integer types support the <ph id=\"ph1\">`~`</ph> operator.","pos":[499,542],"source":" All integer types support the `~` operator."},{"pos":[546,706],"content":"[!NOTE]\nThe `~` symbol is also used to declare finalizers. For more information, see [Finalizers](../../programming-guide/classes-and-structs/destructors.md).","leadings":["","> "],"nodes":[{"content":"The `~` symbol is also used to declare finalizers. For more information, see [Finalizers](../../programming-guide/classes-and-structs/destructors.md).","pos":[8,158],"nodes":[{"content":"The <ph id=\"ph1\">`~`</ph> symbol is also used to declare finalizers.","pos":[0,50],"source":"The `~` symbol is also used to declare finalizers."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](../../programming-guide/classes-and-structs/destructors.md)</ept>.","pos":[51,150],"source":" For more information, see [Finalizers](../../programming-guide/classes-and-structs/destructors.md)."}]}]},{"pos":[708,773],"content":"The following example demonstrates the usage of the <ph id=\"ph1\">`~`</ph> operator:","source":"The following example demonstrates the usage of the `~` operator:"},{"pos":[911,1153],"content":"[!NOTE]\nThe preceding example uses the binary literals [introduced in C# 7.0](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements) and [enhanced  in C# 7.2](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals).","leadings":["","> "],"nodes":[{"content":"The preceding example uses the binary literals <bpt id=\"p1\">[</bpt>introduced in C# 7.0<ept id=\"p1\">](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements)</ept> and <bpt id=\"p2\">[</bpt>enhanced  in C# 7.2<ept id=\"p2\">](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals)</ept>.","pos":[8,240],"source":"The preceding example uses the binary literals [introduced in C# 7.0](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements) and [enhanced  in C# 7.2](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals)."}]},{"pos":[1158,1182],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"pos":[1184,1260],"content":"User-defined types can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../keywords/operator.md)</ept> the <ph id=\"ph1\">`~`</ph> operator.","source":"User-defined types can [overload](../keywords/operator.md) the `~` operator."},{"pos":[1265,1290],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1292,1494],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Bitwise complement operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#bitwise-complement-operator)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Bitwise complement operator](~/_csharplang/spec/expressions.md#bitwise-complement-operator) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1499,1507],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1511,1538],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1541,1597],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1600,1624],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[1627,1699],"content":"<bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](../../programming-guide/classes-and-structs/destructors.md)</ept>","source":"[Finalizers](../../programming-guide/classes-and-structs/destructors.md)"},{"pos":[1702,1731],"content":"<bpt id=\"p1\">[</bpt>&amp; operator<ept id=\"p1\">](and-operator.md)</ept>","source":"[& operator](and-operator.md)"},{"pos":[1734,1762],"content":"<bpt id=\"p1\">[</bpt>| operator<ept id=\"p1\">](or-operator.md)</ept>","source":"[| operator](or-operator.md)"},{"pos":[1765,1794],"content":"<bpt id=\"p1\">[</bpt>^ operator<ept id=\"p1\">](xor-operator.md)</ept>","source":"[^ operator](xor-operator.md)"}]}