{"content":"---\ntitle: \"Compiler Warning (level 3) CS0414 | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"CS0414\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS0414\"\nms.assetid: 6a0a80be-799b-4d9c-a7e0-6b91e9ce7be0\ncaps.latest.revision: 11\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Warning (level 3) CS0414\nThe private field 'field' is assigned but its value is never used  \n  \n This warning can occur in several scenarios in which the compiler can verify that a variable is never referenced:  \n  \n-   A private field is assigned a constant value but is never subsequently read. The unnecessary assignment could effect performance. Consider removing the field.  \n  \n-   A private or internal static field is assigned a constant value only in the initializer. Consider changing the field to a const.  \n  \n-   A private or internal field is assigned constant values and only used in blocks that are excluded by #ifdef directives. Consider putting the field inside the #ifdef block.  \n  \n-   A private or internal field is assigned constant values in multiple locations but not otherwise accessed. If you do not need the field, consider removing it. Otherwise, use it in some appropriate way.  \n  \n In other situations, or where the suggested workaround is not acceptable, use #pragma 0414.  \n  \n The following sample shows one way in which CS0414 will be generated:  \n  \n```  \n// CS0414  \n// compile with: /W3  \nclass C  \n{  \n   private int i = 1;  // CS0414  \n  \n   public static void Main()  \n   { }  \n}  \n```  \n  \n **Note** If the variable `i` is declared as `protected or public`, no error will be generated because the compiler cannot know whether a derived class might use it or some other client code might instantiate the class and reference the variable  \n  \n## See Also  \n [C# Compiler Errors](../../csharp/language-reference/compiler-messages/index.md)   \n [C# Compiler Options](../../csharp/language-reference/compiler-options/index.md)","nodes":[{"pos":[4,571],"nodes":[{"content":"Compiler Warning (level 3) CS0414 | Microsoft Docs","nodes":[{"pos":[0,50],"content":"Compiler Warning (level 3) CS0414 | Microsoft Docs","nodes":[{"content":"Compiler Warning (level 3) CS0414 | Microsoft Docs","pos":[0,50]}]}],"pos":[6,59],"yaml":true}],"content":"title: \"Compiler Warning (level 3) CS0414 | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"CS0414\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS0414\"\nms.assetid: 6a0a80be-799b-4d9c-a7e0-6b91e9ce7be0\ncaps.latest.revision: 11\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[578,611],"content":"Compiler Warning (level 3) CS0414","linkify":"Compiler Warning (level 3) CS0414","nodes":[{"content":"Compiler Warning (level 3) CS0414","pos":[0,33]}]},{"content":"The private field 'field' is assigned but its value is never used","pos":[612,677]},{"content":"This warning can occur in several scenarios in which the compiler can verify that a variable is never referenced:","pos":[684,797]},{"content":"A private field is assigned a constant value but is never subsequently read.","pos":[807,883]},{"content":"The unnecessary assignment could effect performance.","pos":[884,936]},{"content":"Consider removing the field.","pos":[937,965]},{"content":"A private or internal static field is assigned a constant value only in the initializer.","pos":[975,1063]},{"content":"Consider changing the field to a const.","pos":[1064,1103]},{"content":"A private or internal field is assigned constant values and only used in blocks that are excluded by #ifdef directives.","pos":[1113,1232]},{"content":"Consider putting the field inside the #ifdef block.","pos":[1233,1284]},{"content":"A private or internal field is assigned constant values in multiple locations but not otherwise accessed.","pos":[1294,1399]},{"content":"If you do not need the field, consider removing it.","pos":[1400,1451]},{"content":"Otherwise, use it in some appropriate way.","pos":[1452,1494]},{"content":"In other situations, or where the suggested workaround is not acceptable, use #pragma 0414.","pos":[1501,1592]},{"content":"The following sample shows one way in which CS0414 will be generated:","pos":[1599,1668]},{"pos":[1821,2065],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> If the variable <ph id=\"ph1\">`i`</ph> is declared as <ph id=\"ph2\">`protected or public`</ph>, no error will be generated because the compiler cannot know whether a derived class might use it or some other client code might instantiate the class and reference the variable","source":"**Note** If the variable `i` is declared as `protected or public`, no error will be generated because the compiler cannot know whether a derived class might use it or some other client code might instantiate the class and reference the variable"},{"pos":[2074,2082],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Compiler Errors<ept id=\"p1\">](../../csharp/language-reference/compiler-messages/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2086,2167],"source":"[C# Compiler Errors](../../csharp/language-reference/compiler-messages/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Compiler Options<ept id=\"p1\">](../../csharp/language-reference/compiler-options/index.md)</ept>","pos":[2171,2251],"source":"[C# Compiler Options](../../csharp/language-reference/compiler-options/index.md)"}]}