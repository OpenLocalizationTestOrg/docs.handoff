<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-implement-a-producer-consumer-dataflow-pattern.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ad212117cc51c17b2a0f68a98bee24e1dd3fa05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\how-to-implement-a-producer-consumer-dataflow-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bafbe57fe6a1d31a6cf7afe74d5683327813db5f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7907ec16ea04660608155c8319a5528cfd826291</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Implement a Producer-Consumer Dataflow Pattern</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Implement a Producer-Consumer Dataflow Pattern</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document describes how to use the TPL Dataflow Library to implement a producer-consumer pattern.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this pattern, the <bpt id="p1">*</bpt>producer<ept id="p1">*</ept> sends messages to a message block, and the <bpt id="p2">*</bpt>consumer<ept id="p2">*</ept> reads messages from that block.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a basic producer- consumer model that uses dataflow.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Produce`</ph> method writes arrays that contain random bytes of data to a <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601?displayProperty=nameWithType&gt;</ph> object and the <ph id="ph3">`Consume`</ph> method reads bytes from a <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601?displayProperty=nameWithType&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By acting on the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> interfaces, instead of their derived types, you can write reusable code that can act on a variety of dataflow block types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> class acts as both a source block and as a target block, the producer and the consumer can use a shared object to transfer data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Produce`</ph> method calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A&gt;</ph> method in a loop to synchronously write data to the target block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`Produce`</ph> method writes all data to the target block, it calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A&gt;</ph> method to indicate that the block will never have additional data available.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Consume`</ph> method uses the <bpt id="p1">[</bpt>async<ept id="p1">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id="p2">[</bpt>await<ept id="p2">](~/docs/csharp/language-reference/keywords/await.md)</ept> operators (<bpt id="p3">[</bpt>Async<ept id="p3">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id="p4">[</bpt>Await<ept id="p4">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> in Visual Basic) to asynchronously compute the total number of bytes that are received from the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To act asynchronously, the <ph id="ph1">`Consume`</ph> method calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync%2A&gt;</ph> method to receive a notification when the source block has data available and when the source block will never have additional data available.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`DataflowProducerConsumer.cs`</ph> (<ph id="ph2">`DataflowProducerConsumer.vb`</ph> for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Visual C#</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowProducerConsumer.cs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Visual Basic</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowProducerConsumer.vb<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The preceding example uses just one consumer to process the source data.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you have multiple consumers in your application, use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> method to read data from the source block, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> method returns <ph id="ph2">`False`</ph> when no data is available.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When multiple consumers must access the source block concurrently, this mechanism guarantees that data is still available after the call to <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>