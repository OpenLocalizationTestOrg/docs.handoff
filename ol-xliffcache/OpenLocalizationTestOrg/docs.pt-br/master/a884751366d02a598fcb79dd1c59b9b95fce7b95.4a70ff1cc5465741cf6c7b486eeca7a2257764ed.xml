{"content":"---\ntitle: \"How to: Manually Manage Buffered Graphics | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"flicker, reducing by manually managing graphics\"\n  - \"graphics, managing buffered\"\n  - \"BufferedGraphicsContext class\"\nms.assetid: 4c2a90ee-bbbe-4ff6-9170-1b06c195c918\ncaps.latest.revision: 8\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Manually Manage Buffered Graphics\nFor more advanced double buffering scenarios, you can use the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] classes to implement your own double-buffering logic. The class responsible for allocating and managing individual graphics buffers is the <xref:System.Drawing.BufferedGraphicsContext> class. Every application has its own default <xref:System.Drawing.BufferedGraphicsContext> that manages all of the default double buffering for that application. You can retrieve a reference to this instance by calling the <xref:System.Drawing.BufferedGraphicsManager.Current%2A>.  \n  \n### To obtain a reference to the default BufferedGraphicsContext  \n  \n-   Set the <xref:System.Drawing.BufferedGraphicsManager.Current%2A> property, as shown in the following code example.  \n  \n     [!code-csharp[System.Windows.Forms.LegacyBufferedGraphics#11](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LegacyBufferedGraphics/CS/Class1.cs#11)]\n     [!code-vb[System.Windows.Forms.LegacyBufferedGraphics#11](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LegacyBufferedGraphics/VB/Class1.vb#11)]  \n  \n    > [!NOTE]\n    >  You do not need to call the `Dispose` method on the <xref:System.Drawing.BufferedGraphicsContext> reference that you receive from the <xref:System.Drawing.BufferedGraphicsManager> class. The <xref:System.Drawing.BufferedGraphicsManager> handles all of the memory allocation and distribution for default <xref:System.Drawing.BufferedGraphicsContext> instances.  \n  \n     For graphically intensive applications such as animation, you can sometimes improve performance by using a dedicated <xref:System.Drawing.BufferedGraphicsContext> instead of the <xref:System.Drawing.BufferedGraphicsContext> provided by the <xref:System.Drawing.BufferedGraphicsManager>. This enables you to create and manage graphics buffers individually, without incurring the performance overhead of managing all the other buffered graphics associated with your application, though the memory consumed by the application will be greater.  \n  \n### To create a dedicated BufferedGraphicsContext  \n  \n-   Declare and create a new instance of the <xref:System.Drawing.BufferedGraphicsContext> class, as shown in the following code example.  \n  \n     [!code-csharp[System.Windows.Forms.LegacyBufferedGraphics#12](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LegacyBufferedGraphics/CS/Class1.cs#12)]\n     [!code-vb[System.Windows.Forms.LegacyBufferedGraphics#12](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LegacyBufferedGraphics/VB/Class1.vb#12)]  \n  \n## See Also  \n <xref:System.Drawing.BufferedGraphicsContext>   \n [Double Buffered Graphics](../../../../docs/framework/winforms/advanced/double-buffered-graphics.md)   \n [How to: Manually Render Buffered Graphics](../../../../docs/framework/winforms/advanced/how-to-manually-render-buffered-graphics.md)","nodes":[{"pos":[4,546],"embed":true,"restype":"x-metadata","content":"title: \"How to: Manually Manage Buffered Graphics | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"flicker, reducing by manually managing graphics\"\n  - \"graphics, managing buffered\"\n  - \"BufferedGraphicsContext class\"\nms.assetid: 4c2a90ee-bbbe-4ff6-9170-1b06c195c918\ncaps.latest.revision: 8\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"How to: Manually Manage Buffered Graphics | Microsoft Docs","nodes":[{"pos":[0,58],"content":"How to: Manually Manage Buffered Graphics | Microsoft Docs","nodes":[{"content":"How to: Manually Manage Buffered Graphics | Microsoft Docs","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[553,594],"content":"How to: Manually Manage Buffered Graphics","linkify":"How to: Manually Manage Buffered Graphics","nodes":[{"content":"How to: Manually Manage Buffered Graphics","pos":[0,41]}]},{"content":"For more advanced double buffering scenarios, you can use the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> classes to implement your own double-buffering logic.","pos":[595,774],"source":"For more advanced double buffering scenarios, you can use the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] classes to implement your own double-buffering logic."},{"content":"The class responsible for allocating and managing individual graphics buffers is the <ph id=\"ph1\">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> class.","pos":[775,912],"source":" The class responsible for allocating and managing individual graphics buffers is the <xref:System.Drawing.BufferedGraphicsContext> class."},{"content":"Every application has its own default <ph id=\"ph1\">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> that manages all of the default double buffering for that application.","pos":[913,1067],"source":" Every application has its own default <xref:System.Drawing.BufferedGraphicsContext> that manages all of the default double buffering for that application."},{"content":"You can retrieve a reference to this instance by calling the <ph id=\"ph1\">&lt;xref:System.Drawing.BufferedGraphicsManager.Current%2A&gt;</ph>.","pos":[1068,1186],"source":" You can retrieve a reference to this instance by calling the <xref:System.Drawing.BufferedGraphicsManager.Current%2A>."},{"pos":[1196,1256],"content":"To obtain a reference to the default BufferedGraphicsContext","linkify":"To obtain a reference to the default BufferedGraphicsContext","nodes":[{"content":"To obtain a reference to the default BufferedGraphicsContext","pos":[0,60]}]},{"pos":[1266,1380],"content":"Set the <ph id=\"ph1\">&lt;xref:System.Drawing.BufferedGraphicsManager.Current%2A&gt;</ph> property, as shown in the following code example.","source":"Set the <xref:System.Drawing.BufferedGraphicsManager.Current%2A> property, as shown in the following code example."},{"pos":[1391,1758],"content":"[!code-csharp[System.Windows.Forms.LegacyBufferedGraphics#11](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LegacyBufferedGraphics/CS/Class1.cs#11)]\n [!code-vb[System.Windows.Forms.LegacyBufferedGraphics#11](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LegacyBufferedGraphics/VB/Class1.vb#11)]","leadings":["","    "],"nodes":[]},{"pos":[1770,2144],"content":"[!NOTE]\nYou do not need to call the `Dispose` method on the <xref:System.Drawing.BufferedGraphicsContext> reference that you receive from the <xref:System.Drawing.BufferedGraphicsManager> class. The <xref:System.Drawing.BufferedGraphicsManager> handles all of the memory allocation and distribution for default <xref:System.Drawing.BufferedGraphicsContext> instances.","leadings":["","    >  "],"nodes":[{"content":"You do not need to call the `Dispose` method on the <xref:System.Drawing.BufferedGraphicsContext> reference that you receive from the <xref:System.Drawing.BufferedGraphicsManager> class. The <xref:System.Drawing.BufferedGraphicsManager> handles all of the memory allocation and distribution for default <xref:System.Drawing.BufferedGraphicsContext> instances.","pos":[8,367],"nodes":[{"content":"You do not need to call the <ph id=\"ph1\">`Dispose`</ph> method on the <ph id=\"ph2\">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> reference that you receive from the <ph id=\"ph3\">&lt;xref:System.Drawing.BufferedGraphicsManager&gt;</ph> class.","pos":[0,186],"source":"You do not need to call the `Dispose` method on the <xref:System.Drawing.BufferedGraphicsContext> reference that you receive from the <xref:System.Drawing.BufferedGraphicsManager> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Drawing.BufferedGraphicsManager&gt;</ph> handles all of the memory allocation and distribution for default <ph id=\"ph2\">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> instances.","pos":[187,359],"source":" The <xref:System.Drawing.BufferedGraphicsManager> handles all of the memory allocation and distribution for default <xref:System.Drawing.BufferedGraphicsContext> instances."}]}]},{"content":"For graphically intensive applications such as animation, you can sometimes improve performance by using a dedicated <ph id=\"ph1\">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> instead of the <ph id=\"ph2\">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Drawing.BufferedGraphicsManager&gt;</ph>.","pos":[2155,2441],"source":"For graphically intensive applications such as animation, you can sometimes improve performance by using a dedicated <xref:System.Drawing.BufferedGraphicsContext> instead of the <xref:System.Drawing.BufferedGraphicsContext> provided by the <xref:System.Drawing.BufferedGraphicsManager>."},{"content":"This enables you to create and manage graphics buffers individually, without incurring the performance overhead of managing all the other buffered graphics associated with your application, though the memory consumed by the application will be greater.","pos":[2442,2694]},{"pos":[2704,2749],"content":"To create a dedicated BufferedGraphicsContext","linkify":"To create a dedicated BufferedGraphicsContext","nodes":[{"content":"To create a dedicated BufferedGraphicsContext","pos":[0,45]}]},{"pos":[2759,2892],"content":"Declare and create a new instance of the <ph id=\"ph1\">&lt;xref:System.Drawing.BufferedGraphicsContext&gt;</ph> class, as shown in the following code example.","source":"Declare and create a new instance of the <xref:System.Drawing.BufferedGraphicsContext> class, as shown in the following code example."},{"pos":[2903,3270],"content":"[!code-csharp[System.Windows.Forms.LegacyBufferedGraphics#12](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LegacyBufferedGraphics/CS/Class1.cs#12)]\n [!code-vb[System.Windows.Forms.LegacyBufferedGraphics#12](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LegacyBufferedGraphics/VB/Class1.vb#12)]","leadings":["","    "],"nodes":[]},{"pos":[3279,3287],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Double Buffered Graphics<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/double-buffered-graphics.md)</ept><ph id=\"ph1\"> </ph>","pos":[3341,3442],"source":"[Double Buffered Graphics](../../../../docs/framework/winforms/advanced/double-buffered-graphics.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Manually Render Buffered Graphics<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/how-to-manually-render-buffered-graphics.md)</ept>","pos":[3446,3579],"source":"[How to: Manually Render Buffered Graphics](../../../../docs/framework/winforms/advanced/how-to-manually-render-buffered-graphics.md)"}]}