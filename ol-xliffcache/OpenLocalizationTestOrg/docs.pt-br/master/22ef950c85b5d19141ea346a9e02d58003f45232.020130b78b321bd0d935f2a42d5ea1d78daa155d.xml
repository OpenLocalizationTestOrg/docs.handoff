{"content":"---\ntitle: \"yield (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"yield\"\n  - \"yield_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"yield keyword [C#]\"\nms.assetid: 1089194f-9e53-46a2-8642-53ccbe9d414d\ncaps.latest.revision: 46\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# yield (C# Reference)\nWhen you use the `yield` keyword in a statement, you indicate that the method, operator, or `get` accessor in which it appears is an iterator. Using `yield` to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration, see <xref:System.Collections.Generic.IEnumerator%601> for an example) when you implement the <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> pattern for a custom collection type.  \n  \n The following example shows the two forms of the `yield` statement.  \n  \n```csharp  \nyield return <expression>;  \nyield break;  \n```  \n  \n## Remarks  \n You use a `yield return` statement to return each element one at a time.  \n  \n You consume an iterator method by using a [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement or LINQ query. Each iteration of the `foreach` loop calls the iterator method. When a `yield return` statement is reached in the iterator method, `expression` is returned, and the current location in code is retained. Execution is restarted from that location the next time that the iterator function is called.  \n  \n You can use a `yield break` statement to end the iteration.  \n  \n For more information about iterators, see [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7).  \n  \n## Iterator Methods and get Accessors  \n The declaration of an iterator must meet the following requirements:  \n  \n-   The return type must be <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, <xref:System.Collections.IEnumerator>, or <xref:System.Collections.Generic.IEnumerator%601>.  \n  \n-   The declaration can't have any [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out.md) parameters.  \n  \n The `yield` type of an iterator that returns <xref:System.Collections.IEnumerable> or <xref:System.Collections.IEnumerator> is `object`.  If the iterator returns <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Collections.Generic.IEnumerator%601>, there must be an implicit conversion from the type of the expression in the `yield return` statement to the generic type parameter .  \n  \n You can't include a `yield return` or `yield break` statement in methods that have the following characteristics:  \n  \n-   Anonymous methods. For more information, see [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).  \n  \n-   Methods that contain unsafe blocks. For more information, see [unsafe](../../../csharp/language-reference/keywords/unsafe.md).  \n  \n## Exception Handling  \n A `yield return` statement can't be located in a try-catch block. A `yield return` statement can be located in the try block of a try-finally statement.  \n  \n A `yield break` statement can be located in a try block or a catch block but not a finally block.  \n  \n If the `foreach` body (outside of the iterator method) throws an exception, a `finally` block in the iterator method is executed.  \n  \n## Technical Implementation  \n The following code returns an `IEnumerable<string>` from an iterator method and then iterates through its elements.  \n  \n```csharp  \nIEnumerable<string> elements = MyIteratorMethod();  \nforeach (string element in elements)  \n{  \n   ...  \n}  \n```  \n  \n The call to `MyIteratorMethod` doesn't execute the body of the method. Instead the call returns an `IEnumerable<string>` into the `elements` variable.  \n  \n On an iteration of the `foreach` loop, the <xref:System.Collections.IEnumerator.MoveNext%2A> method is called for `elements`. This call executes the body of `MyIteratorMethod` until the next `yield return` statement is reached. The expression returned by the `yield return` statement determines not only the value of the `element` variable for consumption by the loop body but also the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property of elements, which is an `IEnumerable<string>`.  \n  \n On each subsequent iteration of the `foreach` loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a `yield return` statement. The `foreach` loop completes when the end of the iterator method or a `yield break` statement is reached.  \n  \n## Example  \n The following example has a `yield return` statement that's inside a `for` loop. Each iteration of the `foreach` statement body in `Process` creates a call to the `Power` iterator function. Each call to the iterator function proceeds to the next execution of the `yield return` statement, which occurs during the next iteration of the `for` loop.  \n  \n The return type of the iterator method is <xref:System.Collections.IEnumerable>, which is an iterator interface type. When the iterator method is called, it returns an enumerable object that contains the powers of a number.  \n  \n [!code-cs[csrefKeywordsContextual#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/yield_1.cs)]  \n  \n## Example  \n The following example demonstrates a `get` accessor that is an iterator. In the example, each `yield return` statement returns an instance of a user-defined class.  \n  \n [!code-cs[csrefKeywordsContextual#21](../../../csharp/language-reference/keywords/codesnippet/CSharp/yield_2.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [foreach, in](../../../csharp/language-reference/keywords/foreach-in.md)   \n [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)","nodes":[{"pos":[4,564],"nodes":[{"content":"yield (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,37],"content":"yield (C# Reference) | Microsoft Docs","nodes":[{"content":"yield (C# Reference) | Microsoft Docs","pos":[0,37]}]}],"pos":[6,46],"yaml":true}],"content":"title: \"yield (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"yield\"\n  - \"yield_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"yield keyword [C#]\"\nms.assetid: 1089194f-9e53-46a2-8642-53ccbe9d414d\ncaps.latest.revision: 46\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[571,591],"content":"yield (C# Reference)","linkify":"yield (C# Reference)","nodes":[{"content":"yield (C# Reference)","pos":[0,20]}]},{"content":"When you use the <ph id=\"ph1\">`yield`</ph> keyword in a statement, you indicate that the method, operator, or <ph id=\"ph2\">`get`</ph> accessor in which it appears is an iterator.","pos":[592,734],"source":"When you use the `yield` keyword in a statement, you indicate that the method, operator, or `get` accessor in which it appears is an iterator."},{"content":"Using <ph id=\"ph1\">`yield`</ph> to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration, see <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> for an example) when you implement the <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator&gt;</ph> pattern for a custom collection type.","pos":[735,1078],"source":" Using `yield` to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration, see <xref:System.Collections.Generic.IEnumerator%601> for an example) when you implement the <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> pattern for a custom collection type."},{"pos":[1085,1152],"content":"The following example shows the two forms of the <ph id=\"ph1\">`yield`</ph> statement.","source":"The following example shows the two forms of the `yield` statement."},{"pos":[1226,1233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1237,1309],"content":"You use a <ph id=\"ph1\">`yield return`</ph> statement to return each element one at a time.","source":"You use a `yield return` statement to return each element one at a time."},{"content":"You consume an iterator method by using a <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statement or LINQ query.","pos":[1316,1451],"source":"You consume an iterator method by using a [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement or LINQ query."},{"content":"Each iteration of the <ph id=\"ph1\">`foreach`</ph> loop calls the iterator method.","pos":[1452,1515],"source":" Each iteration of the `foreach` loop calls the iterator method."},{"content":"When a <ph id=\"ph1\">`yield return`</ph> statement is reached in the iterator method, <ph id=\"ph2\">`expression`</ph> is returned, and the current location in code is retained.","pos":[1516,1654],"source":" When a `yield return` statement is reached in the iterator method, `expression` is returned, and the current location in code is retained."},{"content":"Execution is restarted from that location the next time that the iterator function is called.","pos":[1655,1748]},{"pos":[1755,1814],"content":"You can use a <ph id=\"ph1\">`yield break`</ph> statement to end the iteration.","source":"You can use a `yield break` statement to end the iteration."},{"pos":[1821,1947],"content":"For more information about iterators, see <bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.","source":"For more information about iterators, see [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)."},{"pos":[1956,1990],"content":"Iterator Methods and get Accessors","linkify":"Iterator Methods and get Accessors","nodes":[{"content":"Iterator Methods and get Accessors","pos":[0,34]}]},{"content":"The declaration of an iterator must meet the following requirements:","pos":[1994,2062]},{"content":"The return type must be <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.","pos":[2072,2278],"source":"The return type must be <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, <xref:System.Collections.IEnumerator>, or <xref:System.Collections.Generic.IEnumerator%601>."},{"pos":[2288,2449],"content":"The declaration can't have any <bpt id=\"p1\">[</bpt>ref<ept id=\"p1\">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id=\"p2\">[</bpt>out<ept id=\"p2\">](../../../csharp/language-reference/keywords/out.md)</ept> parameters.","source":"The declaration can't have any [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out.md) parameters."},{"content":"The <ph id=\"ph1\">`yield`</ph> type of an iterator that returns <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator&gt;</ph> is <ph id=\"ph4\">`object`</ph>.","pos":[2456,2592],"source":"The `yield` type of an iterator that returns <xref:System.Collections.IEnumerable> or <xref:System.Collections.IEnumerator> is `object`."},{"content":"If the iterator returns <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>, there must be an implicit conversion from the type of the expression in the <ph id=\"ph3\">`yield return`</ph> statement to the generic type parameter .","pos":[2594,2854],"source":"  If the iterator returns <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Collections.Generic.IEnumerator%601>, there must be an implicit conversion from the type of the expression in the `yield return` statement to the generic type parameter ."},{"pos":[2861,2974],"content":"You can't include a <ph id=\"ph1\">`yield return`</ph> or <ph id=\"ph2\">`yield break`</ph> statement in methods that have the following characteristics:","source":"You can't include a `yield return` or `yield break` statement in methods that have the following characteristics:"},{"content":"Anonymous methods.","pos":[2984,3002]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.","pos":[3003,3138],"source":" For more information, see [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)."},{"content":"Methods that contain unsafe blocks.","pos":[3148,3183]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept>.","pos":[3184,3274],"source":" For more information, see [unsafe](../../../csharp/language-reference/keywords/unsafe.md)."},{"pos":[3283,3301],"content":"Exception Handling","linkify":"Exception Handling","nodes":[{"content":"Exception Handling","pos":[0,18]}]},{"content":"A <ph id=\"ph1\">`yield return`</ph> statement can't be located in a try-catch block.","pos":[3305,3370],"source":"A `yield return` statement can't be located in a try-catch block."},{"content":"A <ph id=\"ph1\">`yield return`</ph> statement can be located in the try block of a try-finally statement.","pos":[3371,3457],"source":" A `yield return` statement can be located in the try block of a try-finally statement."},{"pos":[3464,3561],"content":"A <ph id=\"ph1\">`yield break`</ph> statement can be located in a try block or a catch block but not a finally block.","source":"A `yield break` statement can be located in a try block or a catch block but not a finally block."},{"pos":[3568,3697],"content":"If the <ph id=\"ph1\">`foreach`</ph> body (outside of the iterator method) throws an exception, a <ph id=\"ph2\">`finally`</ph> block in the iterator method is executed.","source":"If the `foreach` body (outside of the iterator method) throws an exception, a `finally` block in the iterator method is executed."},{"pos":[3706,3730],"content":"Technical Implementation","linkify":"Technical Implementation","nodes":[{"content":"Technical Implementation","pos":[0,24]}]},{"pos":[3734,3849],"content":"The following code returns an <ph id=\"ph1\">`IEnumerable&lt;string&gt;`</ph> from an iterator method and then iterates through its elements.","source":"The following code returns an `IEnumerable<string>` from an iterator method and then iterates through its elements."},{"content":"The call to <ph id=\"ph1\">`MyIteratorMethod`</ph> doesn't execute the body of the method.","pos":[3986,4056],"source":"The call to `MyIteratorMethod` doesn't execute the body of the method."},{"content":"Instead the call returns an <ph id=\"ph1\">`IEnumerable&lt;string&gt;`</ph> into the <ph id=\"ph2\">`elements`</ph> variable.","pos":[4057,4136],"source":" Instead the call returns an `IEnumerable<string>` into the `elements` variable."},{"content":"On an iteration of the <ph id=\"ph1\">`foreach`</ph> loop, the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method is called for <ph id=\"ph3\">`elements`</ph>.","pos":[4143,4268],"source":"On an iteration of the `foreach` loop, the <xref:System.Collections.IEnumerator.MoveNext%2A> method is called for `elements`."},{"content":"This call executes the body of <ph id=\"ph1\">`MyIteratorMethod`</ph> until the next <ph id=\"ph2\">`yield return`</ph> statement is reached.","pos":[4269,4370],"source":" This call executes the body of `MyIteratorMethod` until the next `yield return` statement is reached."},{"content":"The expression returned by the <ph id=\"ph1\">`yield return`</ph> statement determines not only the value of the <ph id=\"ph2\">`element`</ph> variable for consumption by the loop body but also the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property of elements, which is an <ph id=\"ph4\">`IEnumerable&lt;string&gt;`</ph>.","pos":[4371,4646],"source":" The expression returned by the `yield return` statement determines not only the value of the `element` variable for consumption by the loop body but also the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property of elements, which is an `IEnumerable<string>`."},{"content":"On each subsequent iteration of the <ph id=\"ph1\">`foreach`</ph> loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a <ph id=\"ph2\">`yield return`</ph> statement.","pos":[4653,4832],"source":"On each subsequent iteration of the `foreach` loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a `yield return` statement."},{"content":"The <ph id=\"ph1\">`foreach`</ph> loop completes when the end of the iterator method or a <ph id=\"ph2\">`yield break`</ph> statement is reached.","pos":[4833,4938],"source":" The `foreach` loop completes when the end of the iterator method or a `yield break` statement is reached."},{"pos":[4947,4954],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example has a <ph id=\"ph1\">`yield return`</ph> statement that's inside a <ph id=\"ph2\">`for`</ph> loop.","pos":[4958,5038],"source":"The following example has a `yield return` statement that's inside a `for` loop."},{"content":"Each iteration of the <ph id=\"ph1\">`foreach`</ph> statement body in <ph id=\"ph2\">`Process`</ph> creates a call to the <ph id=\"ph3\">`Power`</ph> iterator function.","pos":[5039,5147],"source":" Each iteration of the `foreach` statement body in `Process` creates a call to the `Power` iterator function."},{"content":"Each call to the iterator function proceeds to the next execution of the <ph id=\"ph1\">`yield return`</ph> statement, which occurs during the next iteration of the <ph id=\"ph2\">`for`</ph> loop.","pos":[5148,5304],"source":" Each call to the iterator function proceeds to the next execution of the `yield return` statement, which occurs during the next iteration of the `for` loop."},{"content":"The return type of the iterator method is <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph>, which is an iterator interface type.","pos":[5311,5428],"source":"The return type of the iterator method is <xref:System.Collections.IEnumerable>, which is an iterator interface type."},{"content":"When the iterator method is called, it returns an enumerable object that contains the powers of a number.","pos":[5429,5534]},{"pos":[5541,5653],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsContextual#5<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/yield_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsContextual#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/yield_1.cs)]"},{"pos":[5662,5669],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates a <ph id=\"ph1\">`get`</ph> accessor that is an iterator.","pos":[5673,5745],"source":"The following example demonstrates a `get` accessor that is an iterator."},{"content":"In the example, each <ph id=\"ph1\">`yield return`</ph> statement returns an instance of a user-defined class.","pos":[5746,5836],"source":" In the example, each `yield return` statement returns an instance of a user-defined class."},{"pos":[5843,5956],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsContextual#21<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/yield_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsContextual#21](../../../csharp/language-reference/keywords/codesnippet/CSharp/yield_2.cs)]"},{"pos":[5965,5990],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[6104,6112],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[6116,6176],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[6180,6247],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>foreach, in<ept id=\"p1\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept><ph id=\"ph1\"> </ph>","pos":[6251,6324],"source":"[foreach, in](../../../csharp/language-reference/keywords/foreach-in.md) "},{"content":"<bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>","pos":[6328,6411],"source":"[Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)"}]}