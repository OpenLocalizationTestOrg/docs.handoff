<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="synchronizing-data-for-multithreading.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbb4d16364b1a65a0a57578ca0c21f097a3874de</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\synchronizing-data-for-multithreading.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5740431e7281a95d615f878f3f447648926df87</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b192f514ecd075ceba131a28e96bcf0cfa1b97ca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Synchronizing Data for Multithreading | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Synchronizing Data for Multithreading</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When multiple threads can make calls to the properties and methods of a single object, it is critical that those calls be synchronized.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Otherwise one thread might interrupt what another thread is doing, and the object could be left in an invalid state.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A class whose members are protected from such interruptions is called thread-safe.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Common Language Infrastructure provides several strategies to synchronize access to instance and static members:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Synchronized code regions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class or compiler support for this class to synchronize only the code block that needs it, improving performance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Manual synchronization.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use the synchronization objects provided by the .NET Framework class library.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Overview of Synchronization Primitives<ept id="p1">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept>, which includes a discussion of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Synchronized contexts.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> to enable simple, automatic synchronization for <ph id="ph2">&lt;xref:System.ContextBoundObject&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Collection classes in the <ph id="ph1">&lt;xref:System.Collections.Concurrent?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These classes provide built-in synchronized add and remove operations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread-Safe Collections<ept id="p1">](../../../docs/standard/collections/thread-safe/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The common language runtime provides a thread model in which classes fall into a number of categories that can be synchronized in a variety of different ways depending on the requirements.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following table shows what synchronization support is provided for fields and methods with a given synchronization category.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Category</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Global fields</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Static fields</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Static methods</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Instance fields</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Instance methods</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specific code blocks</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>No Synchronization</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Synchronized Context</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Synchronized Code Regions</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Only if marked</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Only if marked</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Only if marked</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Manual Synchronization</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Manual</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Manual</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Manual</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Manual</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Manual</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Manual</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>No Synchronization</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is the default for objects.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Any thread can access any method or field at any time.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Only one thread at a time should access these objects.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Manual Synchronization</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The .NET Framework class library provides a number of classes for synchronizing threads.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Overview of Synchronization Primitives<ept id="p1">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Synchronized Code Regions</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class or a compiler keyword to synchronize blocks of code, instance methods, and static methods.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>There is no support for synchronized static fields.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Both Visual Basic and C# support the marking of blocks of code with a particular language keyword, the <ph id="ph1">`lock`</ph> statement in C# or the <ph id="ph2">`SyncLock`</ph> statement in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the code is executed by a thread, an attempt is made to acquire the lock.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the lock has already been acquired by another thread, the thread blocks until the lock becomes available.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When the thread exits the synchronized block of code, the lock is released, no matter how the thread exits the block.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> and <ph id="ph2">`SyncLock`</ph> statements are implemented using <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=fullName&gt;</ph>, so other methods of <ph id="ph5">&lt;xref:System.Threading.Monitor&gt;</ph> can be used in conjunction with them within the synchronized region.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can also decorate a method with a <bpt id="p1">**</bpt>MethodImplAttribute<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MethodImplOptions.Synchronized<ept id="p2">**</ept>, which has the same effect as using <bpt id="p3">**</bpt>Monitor<ept id="p3">**</ept> or one of the compiler keywords to lock the entire body of the method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> can be used to break a thread out of blocking operations such as waiting for access to a synchronized region of code.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Thread.Interrupt<ept id="p1">**</ept> is also used to break threads out of operations like <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Do not lock the type — that is, <ph id="ph1">`typeof(MyType)`</ph> in C#, <ph id="ph2">`GetType(MyType)`</ph> in Visual Basic, or <ph id="ph3">`MyType::typeid`</ph> in C++ — in order to protect <ph id="ph4">`static`</ph> methods (<ph id="ph5">`Shared`</ph> methods in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use a private static object instead.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Similarly, do not use <ph id="ph1">`this`</ph> in C# (<ph id="ph2">`Me`</ph> in Visual Basic) to lock instance methods.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Use a private object instead.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A class or instance can be locked by code other than your own, potentially causing deadlocks or performance problems.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Compiler Support</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Both Visual Basic and C# support a language keyword that uses <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=fullName&gt;</ph> to lock the object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Visual Basic supports the <bpt id="p1">[</bpt>SyncLock<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> statement; C# supports the <bpt id="p2">[</bpt>lock<ept id="p2">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In both cases, if an exception is thrown in the code block, the lock acquired by the <bpt id="p1">**</bpt>lock<ept id="p1">**</ept> or <bpt id="p2">**</bpt>SyncLock<ept id="p2">**</ept> is released automatically.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The C# and Visual Basic compilers emit a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>finally<ept id="p2">**</ept> block with <bpt id="p3">**</bpt>Monitor.Enter<ept id="p3">**</ept> at the beginning of the try, and <bpt id="p4">**</bpt>Monitor.Exit<ept id="p4">**</ept> in the <bpt id="p5">**</bpt>finally<ept id="p5">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If an exception is thrown inside the <bpt id="p1">**</bpt>lock<ept id="p1">**</ept> or <bpt id="p2">**</bpt>SyncLock<ept id="p2">**</ept> block, the <bpt id="p3">**</bpt>finally<ept id="p3">**</ept> handler runs to allow you to do any clean-up work.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Synchronized Context</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>SynchronizationAttribute<ept id="p1">**</ept> on any <bpt id="p2">**</bpt>ContextBoundObject<ept id="p2">**</ept> to synchronize all instance methods and fields.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>All objects in the same context domain share the same lock.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Multiple threads are allowed to access the methods and fields, but only a single thread is allowed at any one time.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threads and Threading<ept id="p1">](../../../docs/standard/threading/threads-and-threading.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overview of Synchronization Primitives<ept id="p1">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SyncLock Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>lock Statement<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>