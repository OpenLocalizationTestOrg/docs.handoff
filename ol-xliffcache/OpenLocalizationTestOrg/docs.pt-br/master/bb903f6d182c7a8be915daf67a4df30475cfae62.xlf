<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-transfer-architectural-overview.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb903f6d182c7a8be915daf67a4df30475cfae62</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\data-transfer-architectural-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f51e05246d56360f10e7ca6fed90bf7043f4c20d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ee70cd118e85a696241deabbf552100100c0a9c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Transfer Architectural Overview</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Transfer Architectural Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Communication Foundation (WCF) can be thought of as a messaging infrastructure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can receive messages, process them, and dispatch them to user code for further action, or it can construct messages from data given by user code and deliver them to a destination.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic, which is intended for advanced developers, describes the architecture for handling messages and the contained data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For a simpler, task-oriented view of how to send and receive data, see <bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic discusses WCF implementation details that are not visible by examining the WCF object model.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Two words of caution are in order with regard to documented implementation details.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>First, the descriptions are simplified; actual implementation may be more complex due to optimizations or other reasons.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Second, you should never rely on specific implementation details, even documented ones, because these may change without notice from version to version or even in a servicing release.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Basic Architecture</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the core of WCF message-handling capabilities is the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class, which is described in detail in <bpt id="p1">[</bpt>Using the Message Class<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-the-message-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The run-time components of WCF can be divided into two major parts: the channel stack and the service framework, with the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class being the connection point.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The channel stack is responsible for converting between a valid <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instance and some action that corresponds to the sending or receiving of message data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On the sending side, the channel stack takes a valid <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instance and, after some processing, performs some action that logically corresponds to sending the message.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The action may be sending TCP or HTTP packets, queuing the message in Message Queuing, writing the message to a database, saving it to a file share, or any other action, depending on the implementation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The most common action is sending the message over a network protocol.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the receive side, the opposite happensâ€”an action is detected (which may be TCP or HTTP packets arriving or any other action), and, after processing, the channel stack converts this action into a valid <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use WCF by using the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class and the channel stack directly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, doing so is difficult and time-consuming.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object provides no metadata support, so you cannot generate strongly typed WCF clients if you use WCF in this manner.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Therefore, WCF includes a service framework that provides an easy-to-use programming model that you can use to construct and receive <ph id="ph1">`Message`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The service framework maps services to <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> types through the notion of service contracts, and dispatches messages to user operations that are simply <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> methods marked with the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute (for more details, see <bpt id="p1">[</bpt>Designing Service Contracts<ept id="p1">](../../../../docs/framework/wcf/designing-service-contracts.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These methods may have parameters and return values.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>On the service side, the service framework converts incoming <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instances into parameters and converts return values into outgoing <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instances.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On the client side, it does the opposite.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, consider the <ph id="ph1">`FindAirfare`</ph> operation below.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Suppose <ph id="ph1">`FindAirfare`</ph> is called on the client.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The service framework on the client converts the <ph id="ph1">`FromCity`</ph> and <ph id="ph2">`ToCity`</ph> parameters into an outgoing <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instance and passes it to the channel stack to be sent.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>On the service side, when a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instance arrives from the channel stack, the service framework extracts the relevant data from the message to populate the <ph id="ph2">`FromCity`</ph> and <ph id="ph3">`ToCity`</ph> parameters and then calls the service-side <ph id="ph4">`FindAirfare`</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When the method returns, the service framework takes the returned integer value and the <ph id="ph1">`IsDirectFlight`</ph> output parameter and creates a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object instance that contains this information.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It then passes the <ph id="ph1">`Message`</ph> instance to the channel stack to be sent back to the client.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On the client side, a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instance that contains the response message emerges from the channel stack.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The service framework extracts the return value and the <ph id="ph1">`IsDirectFlight`</ph> value and returns these to the caller of the client.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Message Class</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class is intended to be an abstract representation of a message, but its design is strongly tied to the SOAP message.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> contains three major pieces of information: a message body, message headers, and message properties.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Message Body</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The message body is intended to represent the actual data payload of the message.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The message body is always represented as an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This does not mean that all messages created or received in WCF must be in XML format.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It is up to the channel stack to decide how to interpret the message body.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It may emit it as XML, convert it to some other format, or even omit it entirely.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Of course, with most of the bindings WCF supplies, the message body is represented as XML content in the body section of a SOAP envelope.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It is important to realize that the <ph id="ph1">`Message`</ph> class does not necessarily contain a buffer with XML data representing the body.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Logically, <ph id="ph1">`Message`</ph> contains an XML Infoset, but this Infoset may be dynamically constructed and may never physically exist in memory.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Putting Data into the Message Body</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There is no uniform mechanism to put data into a message body.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class has an abstract method, <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph>, which takes an <ph id="ph3">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Each subclass of the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class is responsible for overriding this method and writing out its own contents.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The message body logically contains the XML Infoset that <ph id="ph1">`OnWriteBodyContent`</ph> produces.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, consider the following <ph id="ph1">`Message`</ph> subclass.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Physically, an <ph id="ph1">`AirfareRequestMessage`</ph> instance contains only two strings ("fromCity" and "toCity").</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, logically the message contains the following XML infoset:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Of course, you would normally not create messages in this manner, because you can use the service framework to create a message like the preceding one from operation contract parameters.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class has static <ph id="ph2">`CreateMessage`</ph> methods that you can use to create messages with common types of content: an empty message, a message that contains an object serialized to XML with the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, a message that contains a SOAP fault, a message that contains XML represented by an <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Getting Data from a Message Body</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can extract the data stored in a message body in two main ways:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can get the entire message body at one time by calling the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> method and passing in an XML writer.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The complete message body is written out to this writer.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Getting the entire message body at one time is also called <bpt id="p1">*</bpt>writing a message<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Writing is done primarily by the channel stack when sending messagesâ€”some part of the channel stack will usually get access to the entire message body, encode it, and send it.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Another way to get information out of the message body is to call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents&gt;</ph> and get an XML reader.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The message body can then be accessed sequentially as needed by calling methods on the reader.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Getting the message body piece-by-piece is also called <bpt id="p1">*</bpt>reading a message<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Reading the message is primarily used by the service framework when receiving messages.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, when the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is in use, the service framework will get an XML reader over the body and pass it to the deserialization engine, which will then start reading the message element-by-element and constructing the corresponding object graph.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A message body can be retrieved only once.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This makes it possible to work with forward-only streams.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, you can write an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> override that reads from a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> and returns the results as an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You will never need to "rewind" to the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteBodyContents`</ph> and <ph id="ph2">`GetReaderAtBodyContents`</ph> methods simply check that the message body has never been retrieved before, and then call <ph id="ph3">`OnWriteBodyContents`</ph> or <ph id="ph4">`OnGetReaderAtBodyContents`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Message Usage in WCF</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Most messages can be classified as either <bpt id="p1">*</bpt>outgoing<ept id="p1">*</ept> (those that are created by the service framework to be sent by the channel stack) or <bpt id="p2">*</bpt>incoming<ept id="p2">*</ept> (those that arrive from the channel stack and are interpreted by the service framework).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Furthermore, the channel stack can operate in either buffered or streaming mode.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The service framework may also expose a streamed or nonstreamed programming model.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This leads to the cases listed in the following table, along with simplified details of their implementation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Message type</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Body data in message</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Write (OnWriteBodyContents) implementation</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Read (OnGetReaderAtBodyContents) Implementation</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Outgoing, created from nonstreamed programming model</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The data needed to write the message (for example, an object and the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> instance needed to serialize it)*</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Custom logic to write out the message based on the stored data (for example, call <ph id="ph1">`WriteObject`</ph> on the <ph id="ph2">`DataContractSerializer`</ph> if that is the serializer in use)*</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`OnWriteBodyContents`</ph>, buffer the results, return an XML reader over the buffer</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Outgoing, created from streamed programming model</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Stream`</ph> with the data to be written*</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Write out data from the stored stream using the <ph id="ph1">&lt;xref:System.Xml.IStreamProvider&gt;</ph> mechanism*</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`OnWriteBodyContents`</ph>, buffer the results, return an XML reader over the buffer</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Incoming from streaming channel stack</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Stream`</ph> object that represents the data coming in over the network with an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> over it</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Write out the contents from the stored <ph id="ph1">`XmlReader`</ph> using <ph id="ph2">`WriteNode`</ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns the stored <ph id="ph1">`XmlReader`</ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Incoming from nonstreaming channel stack</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A buffer that contains body data with an <ph id="ph1">`XmlReader`</ph> over it</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Writes out the contents from the stored <ph id="ph1">`XmlReader`</ph> using <ph id="ph2">`WriteNode`</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns the stored lang</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\*</ph> These items are not implemented directly in <ph id="ph2">`Message`</ph> subclasses, but in subclasses of the <ph id="ph3">&lt;xref:System.ServiceModel.Channels.BodyWriter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.BodyWriter&gt;</ph>, see <bpt id="p1">[</bpt>Using the Message Class<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-the-message-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Message Headers</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A message may contain headers.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A header logically consists of an XML Infoset that is associated with a name, a namespace, and a few other properties.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Message headers are accessed using the <ph id="ph1">`Headers`</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Each header is represented by a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeader&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Normally, message headers are mapped to SOAP message headers when using a channel stack configured to work with SOAP messages.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Putting information into a message header and extracting information from it is similar to using the message body.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The process is somewhat simplified because streaming is not supported.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It is possible to access the contents of the same header more than once, and headers can be accessed in arbitrary order, forcing headers to always be buffered.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>There is no general-purpose mechanism available to get an XML reader over a header, but there is a <ph id="ph1">`MessageHeader`</ph> subclass internal to WCF that represents a readable header with such a capability.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This type of <ph id="ph1">`MessageHeader`</ph> is created by the channel stack when a message with custom application headers comes in.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This enables the service framework to use a deserialization engine, such as the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, to interpret these headers.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using the Message Class<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-the-message-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Message Properties</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A message may contain properties.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>property<ept id="p1">*</ept> is any <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> object that is associated with a string name.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Properties are accessed through the <ph id="ph1">`Properties`</ph> property on <ph id="ph2">`Message`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Unlike the message body and message headers (which normally map to the SOAP body and SOAP headers, respectively), message properties are normally not sent or received along with the messages.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Message properties exist primarily as a communication mechanism to pass data about the message between the various channels in the channel stack, and between the channel stack and the service model.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For example, the HTTP transport channel included as part of WCF is capable of producing various HTTP status codes, such as "404 (Not Found)" and "500 (Internal Server Error)," when it sends replies to clients.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Before sending a reply message, it checks to see whether the <ph id="ph1">`Properties`</ph> of the <ph id="ph2">`Message`</ph> contain a property called "httpResponse" that contains an object of type <ph id="ph3">&lt;xref:System.ServiceModel.Channels.HttpResponseMessageProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If such a property is found, it will look at the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusCode%2A&gt;</ph> property and use that status code.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If it is not found, the default "200 (OK)" code is used.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using the Message Class<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-the-message-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The Message as a Whole</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>So far, we have discussed methods for accessing the various parts of the message in isolation.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class also provides methods to work with the entire message as a whole.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`WriteMessage`</ph> method writes out the entire message to an XML writer.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For this to be possible, a mapping must be defined between the entire <ph id="ph1">`Message`</ph> instance and an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Such a mapping, in fact, exists: WCF uses the SOAP standard to define this mapping.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Message`</ph> instance is written out as an XML Infoset, the resulting Infoset is the valid SOAP envelope that contains the message.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Thus, <ph id="ph1">`WriteMessage`</ph> would normally perform the following steps:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Write the SOAP envelope element opening tag.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Write the SOAP header element opening tag, write out all of the headers, and close the header element.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Write the SOAP body element opening tag.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`WriteBodyContents`</ph> or an equivalent method to write out the body.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Close the body and envelope elements.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The preceding steps are closely tied to the SOAP standard.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This is complicated by the fact that multiple versions of SOAP exist, for example, it is impossible to write out the SOAP envelope element correctly without knowing the SOAP version in use.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Also, in some cases, it may be desirable to turn off this complex SOAP-specific mapping completely.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For these purposes, a <ph id="ph1">`Version`</ph> property is provided on <ph id="ph2">`Message`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>It can be set to the SOAP version to use when writing out the message, or it can be set to <ph id="ph1">`None`</ph> to prevent any SOAP-specific mappings.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Version`</ph> property is set to <ph id="ph2">`None`</ph>, methods that work with the entire message act as if the message consisted of its body only, for example, <ph id="ph3">`WriteMessage`</ph> would simply call <ph id="ph4">`WriteBodyContents`</ph> instead of performing the multiple steps listed above.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It is expected that on incoming messages, <ph id="ph1">`Version`</ph> will be auto-detected and set correctly.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The Channel Stack</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Channels</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>As stated before, the channel stack is responsible for converting outgoing <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instances into some action (such as sending packets over the network), or converting some action (such as receiving network packets) into incoming <ph id="ph2">`Message`</ph> instances.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The channel stack is composed of one or more channels ordered in a sequence.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>An outgoing <ph id="ph1">`Message`</ph> instance is passed to the first channel in the stack (also called the <bpt id="p1">*</bpt>topmost channel<ept id="p1">*</ept>), which passes it to the next channel down in stack, and so on.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The message terminates in the last channel, which is called the <bpt id="p1">*</bpt>transport channel<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Incoming messages originate in the transport channel and are passed from channel to channel up the stack.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>From the topmost channel, the message is usually passed into the service framework.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>While this is the usual pattern for application messages, some channels may work slightly differently, for example, they may send their own infrastructure messages without being passed a message from a channel above.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Channels may operate on the message in various ways as it passes through the stack.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The most common operation is adding a header to an outgoing message and reading headers on an incoming message.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example, a channel may compute the digital signature of a message and add it as a header.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A channel may also inspect this digital signature header on incoming messages and block messages that do not have a valid signature from making their way up the channel stack.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Channels also often set or inspect message properties.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The message body is usually not modified, although this is allowed, for example, the WCF security channel can encrypt the message body.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Transport Channels and Message Encoders</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The bottommost channel in the stack is responsible for actually transforming an outgoing <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph>, as modified by other channels, into some action.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>On the receive side, this is the channel that converts some action into a <ph id="ph1">`Message`</ph> that other channels process.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>As stated previously, the actions may be varied: sending or receiving network packets over various protocols, reading or writing the message in a database, or queuing or dequeuing the message in a Message Queuing queue, to provide but a few examples.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>All these actions have one thing in common: they require a transformation between the WCF<ph id="ph1">`Message`</ph> instance and an actual group of bytes that can be sent, received, read, written, queued, or dequeued.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The process of converting a <ph id="ph1">`Message`</ph> into a group of bytes is called <bpt id="p1">*</bpt>encoding<ept id="p1">*</ept>, and the reverse process of creating a <ph id="ph2">`Message`</ph> from a group of bytes is called <bpt id="p2">*</bpt>decoding<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Most transport channels use components called <bpt id="p1">*</bpt>message encoders<ept id="p1">*</ept> to accomplish the encoding and decoding work.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A message encoder is a subclass of the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MessageEncoder`</ph> includes various <ph id="ph2">`ReadMessage`</ph> and <ph id="ph3">`WriteMessage`</ph> method overloads to convert between <ph id="ph4">`Message`</ph> and groups of bytes.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>On the sending side, a buffering transport channel passes the <ph id="ph1">`Message`</ph> object that it received from a channel above it to <ph id="ph2">`WriteMessage`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>It gets back an array of bytes, which it then uses to perform its action (such as packaging these bytes as valid TCP packets and sending them to the correct destination).</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A streaming transport channel first creates a <ph id="ph1">`Stream`</ph> (for example, over the outgoing TCP connection), and then passes both the <ph id="ph2">`Stream`</ph> and the <ph id="ph3">`Message`</ph> it needs to send to the appropriate <ph id="ph4">`WriteMessage`</ph> overload, which writes out the message.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>On the receiving side, a buffering transport channel extracts incoming bytes (for example, from incoming TCP packets) into an array and calls <ph id="ph1">`ReadMessage`</ph> to get a <ph id="ph2">`Message`</ph> object that it can pass further up the channel stack.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A streaming transport channel creates a <ph id="ph1">`Stream`</ph> object (for example, a network stream over the incoming TCP connection) and passes that to <ph id="ph2">`ReadMessage`</ph> to get back a <ph id="ph3">`Message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The separation between the transport channels and the message encoder is not mandatory; it is possible to write a transport channel that does not use a message encoder.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>However, the advantage of this separation is ease of composition.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>As long as a transport channel uses only the base <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph>, it can work with any WCF or third-party message encoder.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Likewise, the same encoder can normally be used in any transport channel.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Message Encoder Operation</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To describe the typical operation of an encoder, it is useful to consider the following four cases.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Operation</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Comment</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Encoding, Buffered</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In buffered mode, the encoder normally creates a variable-size buffer and then creates an XML writer over it.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>It then calls <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteMessage%28System.Xml.XmlWriter%29&gt;</ph> on the message being encoded, which writes out the headers and then the body using <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.WriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph>, as explained in the preceding section about <ph id="ph3">`Message`</ph> in this topic.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The contents of the buffer (represented as an array of bytes) are then returned for the transport channel to use.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Encoding, Streamed</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In streamed mode, the operation is similar to the above, but simpler.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>There is no need for a buffer.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An XML writer is normally created over the stream and <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.WriteMessage%28System.Xml.XmlWriter%29&gt;</ph> is called on the <ph id="ph2">`Message`</ph> to write it out to this writer.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Decoding, Buffered</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>When decoding in buffered mode, a special <ph id="ph1">`Message`</ph> subclass that contains the buffered data is normally created.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The headers of the message are read, and an XML reader positioned on the message body is created.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>This is the reader that will be returned with <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Decoding, Streamed</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When decoding in streamed mode, a special Message subclass is normally created.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The stream is advanced just enough to read all the headers and position it on the message body.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>An XML reader is then created over the stream.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This is the reader that will be returned with <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Encoders can perform other functions as well.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>For example, the encoders can pool XML readers and writers.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>It is expensive to create a new XML reader or writer every time one is needed.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Therefore, encoders normally maintain a pool of readers and a pool of writers of configurable size.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>In the descriptions of encoder operation described previously, whenever the phrase "create an XML reader/writer" is used, it normally means "take one from the pool, or create one if one is not available."</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The encoder (and the <ph id="ph1">`Message`</ph> subclasses it creates while decoding) contain logic to return readers and writers to the pools once they are no longer needed (for example, when the <ph id="ph2">`Message`</ph> is closed).</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>WCF provides three message encoders, although it is possible to create additional custom types.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The supplied types are Text, Binary, and Message Transmission Optimization Mechanism (MTOM).</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>These are described in detail in <bpt id="p1">[</bpt>Choosing a Message Encoder<ept id="p1">](../../../../docs/framework/wcf/feature-details/choosing-a-message-encoder.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The IStreamProvider Interface</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>When writing an outgoing message that contains a streamed body to an XML writer, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> uses a sequence of calls similar to the following in its <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> implementation:</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Write any necessary information preceding the stream (for example, the opening XML tag).</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Write the stream.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Write any information following the stream (for example, the closing XML tag).</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This works well with encodings that are similar to the textual XML encoding.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>However, some encodings do not place XML Infoset information (for example, tags for starting and ending XML elements) together with the data contained within elements.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>For example, in the MTOM encoding, the message is split into multiple parts.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>One part contains the XML Infoset, which may contain references to other parts for actual element contents.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The XML Infoset is normally small compared to the streamed contents, so it makes sense to buffer the Infoset, write it out, and then write the contents in a streamed way.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>This means that by the time the closing element tag is written, the stream should not have been written out yet.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For this purpose, the <ph id="ph1">&lt;xref:System.Xml.IStreamProvider&gt;</ph> interface is used.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The interface has a <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> method that returns the stream to be written.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The correct way to write out a streamed message body in <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> is as follows:</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Write any necessary information preceding the stream (for example, the opening XML tag).</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`WriteValue`</ph> overload on the <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> that takes an <ph id="ph3">&lt;xref:System.Xml.IStreamProvider&gt;</ph>, with an <ph id="ph4">`IStreamProvider`</ph> implementation that returns the stream to be written.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Write any information following the stream (for example, the closing XML tag).</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>With this approach, the XML writer has a choice of when to call <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> and write out the streamed data.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>For example, the textual and binary XML writers will call it immediately and write out the streamed contents in-between the start and end tags.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The MTOM writer may decide to call <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> later, when it is ready to write the appropriate part of the message.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Representing Data in the Service Framework</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>As stated in the "Basic Architecture" section of this topic, the service framework is the part of WCF that, among other things, is responsible for converting between a user-friendly programming model for message data and actual <ph id="ph1">`Message`</ph> instances.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Normally, a message exchange is represented in the service framework as a <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> method marked with the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The method can take in some parameters and can return a return value or out parameters (or both).</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>On the service side, the input parameters represent the incoming message, and the return value and out parameters represent the outgoing message.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>On the client side, the reverse is true.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The programming model for describing messages using parameters and the return value is described in detail in <bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>However, this section will provide a brief overview.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Programming Models</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The WCF service framework supports five different programming models for describing messages:</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>1. The Empty Message</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>This is the simplest case.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To describe an empty incoming message, do not use any input parameters.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>To describe an empty outgoing message, use a void return value and do not use any out parameters:</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Note that this is different from a one-way operation contract:</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`SetDesiredTemperature`</ph> example, a two-way message exchange pattern is described.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A message is returned from the operation, but it is empty.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>It is possible to return a fault from the operation.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>In the "Set Lightbulb" example, the message exchange pattern is one-way, so there is no outgoing message to describe.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The service cannot communicate any status back to the client in this case.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>2. Using the Message Class Directly</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>It is possible to use the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class (or one of its subclasses) directly in an operation contract.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>In this case, the service framework just passes the <ph id="ph1">`Message`</ph> from the operation to the channel stack and vice versa, with no further processing.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>There are two main use cases for using <ph id="ph1">`Message`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>You can use this for advanced scenarios, when none of the other programming models gives you enough flexibility to describe your message.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For example, you might want to use files on disk to describe a message, with the fileâ€™s properties becoming message headers and the fileâ€™s contents becoming the message body.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>You can then create something similar to the following.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The second common use for <ph id="ph1">`Message`</ph> in an operation contract is when a service does not care about the particular message contents and acts on the message as on a black box.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>For example, you might have a service that forwards messages to multiple other recipients.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The contract can be written as follows.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The Action="*" line effectively turns off message dispatching and ensures that all messages sent to the <ph id="ph1">`IForwardingService`</ph> contract make their way to the <ph id="ph2">`ForwardMessage`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>(Normally, the dispatcher would examine the messageâ€™s "Action" header to determine which operation it is intended for.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Action="<ph id="ph1">\*</ph>" means "all possible values of the Action header".) The combination of Action="<ph id="ph2">\*</ph>" and using Message as a parameter is known as the "universal contract" because it is able to receive all possible messages.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>To be able to send all possible messages, use Message as the return value and set <ph id="ph1">`ReplyAction`</ph> to "<ph id="ph2">\*</ph>".</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>This will prevent the service framework from adding its own Action header, enabling you to control this header using the <ph id="ph1">`Message`</ph> object you return.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>3. Message Contracts</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>WCF provides a declarative programming model for describing messages, called <bpt id="p1">*</bpt>message contracts<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This model is described in detail in <bpt id="p1">[</bpt>Using Message Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-message-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Essentially, the entire message is represented by a single <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> type that uses attributes like the <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.MessageHeaderAttribute&gt;</ph> to describe which parts of the message contract class should map to which part of the message.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Message contracts provide a lot of control over the resulting <ph id="ph1">`Message`</ph> instances (although obviously not as much control as using the <ph id="ph2">`Message`</ph> class directly).</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>For example, message bodies are often composed of multiple pieces of information, each represented by its own XML element.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>These elements can either occur directly in the body (<bpt id="p1">*</bpt>bare<ept id="p1">*</ept> mode) or can be <bpt id="p2">*</bpt>wrapped<ept id="p2">*</ept> in an encompassing XML element.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Using the message contract programming model enables you to make the bare-versus-wrapped decision and control the name of the wrapper name and namespace.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The following code example of a message contract demonstrates these features.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Items marked to be serialized (with the <ph id="ph1">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute&gt;</ph>, or other related attributes) must be serializable to participate in a message contract.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>For more information, see the "Serialization" section later in this topic.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>4. Parameters</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Often, a developer who wants to describe an operation that acts on multiple pieces of data does not need the degree of control that message contracts provide.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For example, when creating new services, one does not usually want to make the bare-versus-wrapped decision and decide on the wrapper element name.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Making these decisions often requires deep knowledge of Web services and SOAP.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The WCF service framework can automatically pick the best and most interoperable SOAP representation for sending or receiving multiple related pieces of information, without forcing these choices on the user.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>This is accomplished by simply describing these pieces of information as parameters or return values of an operation contract.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>For example, consider the following operation contract.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The service framework automatically decides to put all three pieces of information (<ph id="ph1">`customerID`</ph>, <ph id="ph2">`item`</ph>, and <ph id="ph3">`quantity`</ph>) into the message body and wrap them in a wrapper element named <ph id="ph4">`SubmitOrderRequest`</ph>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Describing the information to be sent or received as a simple list of operation contract parameters is the recommended approach, unless special reasons exist to move to the more-complex message contract or <ph id="ph1">`Message`</ph>-based programming models.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>5. Stream</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`Stream`</ph> or one of its subclasses in an operation contract or as a sole message body part in a message contract can be considered a separate programming model from the ones described above.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`Stream`</ph> in this way is the only way to guarantee that your contract will be usable in a streamed fashion, short of writing your own streaming-compatible <ph id="ph2">`Message`</ph> subclass.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Large Data and Streaming<ept id="p1">](../../../../docs/framework/wcf/feature-details/large-data-and-streaming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Stream`</ph> or one of its subclasses is used in this way, the serializer is not invoked.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>For outgoing messages, a special streaming <ph id="ph1">`Message`</ph> subclass is created and the stream is written out as described in the section on the <ph id="ph2">&lt;xref:System.Xml.IStreamProvider&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For incoming messages, the service framework creates a <ph id="ph1">`Stream`</ph> subclass over the incoming message and provides it to the operation.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Programming Model Restrictions</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The programming models described above cannot be arbitrarily combined.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>For example, if an operation accepts a message contract type, the message contract must be its only input parameter.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Furthermore, the operation must then either return an empty message (return type of void) or another message contract.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>These programming model restrictions are described in the topics for each specific programming model: <bpt id="p1">[</bpt>Using Message Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-message-contracts.md)</ept>, <bpt id="p2">[</bpt>Using the Message Class<ept id="p2">](../../../../docs/framework/wcf/feature-details/using-the-message-class.md)</ept>, and <bpt id="p3">[</bpt>Large Data and Streaming<ept id="p3">](../../../../docs/framework/wcf/feature-details/large-data-and-streaming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Message Formatters</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The programming models described above are supported by plugging in components called <bpt id="p1">*</bpt>message formatters<ept id="p1">*</ept> into the service framework.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Message formatters are types that implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageFormatter&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageFormatter&gt;</ph> interface, or both, for use in clients and service WCF clients, respectively.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Message formatters are normally plugged in by behaviors.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph> plugs in the data contract message formatter.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>This is done on the service side by setting <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation.Formatter%2A&gt;</ph> to the correct formatter in the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%28System.ServiceModel.Description.OperationDescription%2CSystem.ServiceModel.Dispatcher.DispatchOperation%29&gt;</ph> method, or on the client side by setting <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.Formatter%2A&gt;</ph> to the correct formatter in the <ph id="ph4">&lt;xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%28System.ServiceModel.Description.OperationDescription%2CSystem.ServiceModel.Dispatcher.ClientOperation%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The following tables lists the methods that a message formatter may implement.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Interface</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Converts an incoming <ph id="ph1">`Message`</ph> to operation parameters</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Creates an outgoing <ph id="ph1">`Message`</ph> from operation return value/out parameters</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Creates an outgoing <ph id="ph1">`Message`</ph> from operation parameters</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Converts an incoming <ph id="ph1">`Message`</ph> to a return value/out parameters</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Serialization</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Whenever you use message contracts or parameters to describe message contents, you must use serialization to convert between <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> types and XML Infoset representation.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Serialization is used in other places in WCF, for example, <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> has a Generic <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.GetBody%2A&gt;</ph> method that you can use to read the entire body of the message deserialized into an object.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>WCF supports two serialization technologies "out of the box" for serializing and deserializing parameters and message parts: the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and the <ph id="ph2">`XmlSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Additionally, you can write custom serializers.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>However, other parts of WCF (such as the Generic <ph id="ph1">`GetBody`</ph> method or SOAP fault serialization) may be restricted to use only the <ph id="ph2">&lt;xref:System.Runtime.Serialization.XmlObjectSerializer&gt;</ph> subclasses (<ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and <ph id="ph4">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph>, but not the <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>), or may even be hard-coded to use only the <ph id="ph6">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlSerializer`</ph> is the serialization engine used in <ph id="ph2">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> Web services.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataContractSerializer`</ph> is the new serialization engine that understands the new data contract programming model.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph> is the default choice, and the choice to use the <ph id="ph2">`XmlSerializer`</ph> can be made on a per-operation basis using the <ph id="ph3">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior.DataContractFormatAttribute%2A&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Description.XmlSerializerOperationBehavior&gt;</ph> are the operation behaviors responsible for plugging in the message formatters for the <ph id="ph3">`DataContractSerializer`</ph> and the <ph id="ph4">`XmlSerializer`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph> behavior can actually operate with any serializer that derives from <ph id="ph2">&lt;xref:System.Runtime.Serialization.XmlObjectSerializer&gt;</ph>, including the <ph id="ph3">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph> (described in detail in Using Stand-Alone Serialization).</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The behavior calls one of the <ph id="ph1">`CreateSerializer`</ph> virtual method overloads to obtain the serializer.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>To plug in a different serializer, create a new <ph id="ph1">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph> subclass and override both <ph id="ph2">`CreateSerializer`</ph> overloads.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>