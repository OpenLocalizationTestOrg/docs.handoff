<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="service-identity-sample.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fcb967af6d95169817dea3f17ea350cf21494d56</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\service-identity-sample.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89cece2ae54d4b54e71bcbfa29e32f644eaba62a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25d4d60e7f46e70f9436ef0e5a834d1e940b4425</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Service Identity Sample</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Service Identity Sample</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This service identity sample demonstrates how to set the identity for a service.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>At design time, a client can retrieve the identity using the service's metadata and then at runtime the client can authenticate the service's identity.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The concept of service identity is to allow a client to authenticate a service before calling any of its operations, thereby protecting the client from unauthenticated calls.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>On a secure connection the service also authenticates a client's credentials before allowing it access, but this is not the focus of this sample.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See the samples in <bpt id="p1">[</bpt>Client<ept id="p1">](../../../../docs/framework/wcf/samples/client.md)</ept> that show server authentication.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The setup procedure and build instructions for this sample are located at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This sample illustrates the following features:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How to set the different types of identity on different endpoints for a service.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each type of identity has different capabilities.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type of identity to use is dependent on the type of security credentials used on the endpoint's binding.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Identity can either be set declaratively in configuration or imperatively in code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Typically for both the client and the service you should use configuration to set the identity.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>How to set a custom identity on the client.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A custom identity is typically a customization of an existing type of identity that enables the client to examine other claim information provided in the service's credentials to make authorization decisions before calling the service.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This sample checks the identity of a specific certificate called identity.com and the RSA key contained within this certificate.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When using the Certificate and RSA identity types in configuration on the client, an easy way to get these values is to inspect the WSDL for the service where these values are serialized.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following sample code shows how to configure the identity of a service endpoint with the Domain Name Server (DNS) of a certificate using a WSHttpBinding.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The identity can also be specified in configuration in the App.config file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the UPN (User Principal Name) identity for a service endpoint.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A custom identity can be set on the client by deriving from the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointIdentity&gt;</ph> and the <ph id="ph2">&lt;xref:System.ServiceModel.Security.IdentityVerifier&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Conceptually the <ph id="ph1">&lt;xref:System.ServiceModel.Security.IdentityVerifier&gt;</ph> class can be considered to be the client equivalent of the service's <ph id="ph2">`AuthorizationManager`</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code example shows an implementation of <ph id="ph1">`OrgEndpointIdentity`</ph>, which stores an organization name to match in the subject name of the server's certificate.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The authorization check for the organization name occurs in the <ph id="ph1">`CheckAccess`</ph> method on the <ph id="ph2">`CustomIdentityVerifier`</ph> class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This sample uses a certificate called identity.com which is in the language-specific Identity solution folder.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-computer configuration, follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To run the sample on the same computer</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph> or <ph id="ph2">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>, import the Identity.pfx certificate file in the Identity solution folder into the LocalMachine/My (Personal) certificate store using the MMC snap-in tool.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This file is password protected.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>During the import you are asked for a password.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`xyz`</ph> into the password box.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>How to: View Certificates with the MMC Snap-in<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-view-certificates-with-the-mmc-snap-in.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Once this is done, run Setup.bat in a Developer Command Prompt for Visual Studio with administrator privileges, which copies this certificate to the CurrentUser/Trusted People store for use on the client.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph>, run Setup.bat from the sample install folder inside a Visual Studio 2012 command prompt with administrator privileges.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This installs all the certificates required for running the sample.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The Setup.bat batch file is designed to be run from a Visual Studio 2012 Command Prompt.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The PATH environment variable set within the Visual Studio 2012 Command Prompt points to the directory that contains executables required by the Setup.bat script.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Ensure that you remove the certificates by running Cleanup.bat when you have finished with the sample.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Other security samples use the same certificates.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Launch Service.exe from the \service\bin directory.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Ensure that the service indicates that it is ready and displays a prompt to Press <ph id="ph1">\&lt;</ph>Enter&gt; to terminate the service.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Launch Client.exe from \client\bin directory or by pressing F5 in Visual Studio to build and run.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Client activity is displayed on the client console application.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the client and service are not able to communicate, see <bpt id="p1">[</bpt>Troubleshooting Tips for WCF Samples<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms751511(v=vs.90))</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To run the sample across computers</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Before building the client part of the sample, be sure to change the value for the service's endpoint address in the Client.cs file in the <ph id="ph1">`CallServiceCustomClientIdentity`</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Then build the sample.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Create a directory on the service computer.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Copy the service program files from service\bin to the directory on the service computer.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Also copy the Setup.bat and Cleanup.bat files to the service computer.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Create a directory on the client computer for the client binaries.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Copy the client program files to the client directory on the client computer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Also copy the Setup.bat, Cleanup.bat, and ImportServiceCert.bat files to the client.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>On the service, run <ph id="ph1">`setup.bat service`</ph> in a Developer Command Prompt for Visual Studio opened with administrator privileges.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Running <ph id="ph1">`setup.bat`</ph> with the <ph id="ph2">`service`</ph> argument creates a service certificate with the fully-qualified domain name of the computer and exports the service certificate to a file named Service.cer.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Copy the Service.cer file from the service directory to the client directory on the client computer.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the Client.exe.config file on the client computer, change the address value of the endpoint to match the new address of your service.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>There are multiple instances that must be changed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>On the client, run ImportServiceCert.bat in a Developer Command Prompt for Visual Studio opened with administrator privileges.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This imports the service certificate from the Service.cer file into the CurrentUser - TrustedPeople store.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>On the service computer, launch the Service.exe from the command prompt.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>On the client computer, launch Client.exe from a command prompt.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If the client and service are not able to communicate, see <bpt id="p1">[</bpt>Troubleshooting Tips for WCF Samples<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms751511(v=vs.90))</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To clean up after the sample</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Run Cleanup.bat in the samples folder once you have finished running the sample.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This script does not remove service certificates on a client when running this sample across computers.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you have run Windows Communication Foundation (WCF) samples that use certificates across computers, be sure to clear the service certificates that have been installed in the CurrentUser - TrustedPeople store.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To do this, use the following command: <ph id="ph1">`certmgr -del -r CurrentUser -s TrustedPeople -c -n &lt;Fully Qualified Server Machine Name&gt;`</ph> For example: <ph id="ph2">`certmgr -del -r CurrentUser -s TrustedPeople -c -n server1.contoso.com`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>