{"content":"---\ntitle: \"How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 387d7c97-95dd-4a50-9761-7e9cf8ae9e6a\n---\n# How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)\nSometimes files that have the same name may be located in more than one folder. For example, under the Visual Studio installation folder, several folders have a readme.htm file. This example shows how to query for such duplicate file names under a specified root folder. The second example shows how to query for files whose size and creation times also match.  \n  \n## Example  \n  \n```vb  \nModule QueryDuplicateFileNames  \n  \n    Public Sub Main()  \n  \n        Dim path As String = \"C:\\Program Files\\Microsoft Visual Studio 9.0\\Common7\"  \n        QueryDuplicates1(path)  \n        ' Uncomment to run this query instead  \n        ' QueryDuplicates2(path)  \n  \n    End Sub  \n    Sub QueryDuplicates1(ByVal root As String)  \n        Dim dir As New System.IO.DirectoryInfo(root)  \n        Dim duplicates = From aFile In dir.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories) _  \n                                 Order By aFile.Name _  \n                                 Group aFile By aFile.Name Into newGroup = Group _  \n                                 Where newGroup.Count() >= 2 _  \n                                 Select newGroup  \n  \n        ' Page the display so that the results can be read.  \n        Dim trimLength = root.Length  \n        PageOutput(duplicates, trimLength)  \n  \n    End Sub  \n    Sub QueryDuplicates2(ByVal root As String)  \n  \n        ' This time a composite key is used. This sub finds all files  \n        ' that have been copied into multiple subfolders.  \n        Dim dir As New System.IO.DirectoryInfo(root)  \n  \n        Dim duplicates = From aFile In Dir.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories) _  \n                                 Order By aFile.Name _  \n                                 Group aFile By aFile.Name, aFile.CreationTime, aFile.Length Into newGroup = Group _  \n                                 Where newGroup.Count() >= 2 _  \n                                 Select newGroup  \n  \n        ' Page the display so that the results can be read.  \n        Dim trimLength = root.Length  \n        PageOutput(duplicates, trimLength)  \n  \n    End Sub  \n    ' Pages console display for large query results. No more than one group per page.  \n    ' This sub specifically works with group queries of FileInfo objects  \n    ' but can be modified for any type.  \n    Sub PageOutput(ByVal groupQuery, ByVal charsToSkip)  \n  \n        ' \"3\" = 1 line for extension key + 1 for \"Press any key\" + 1 for input cursor.  \n        Dim numLines As Integer = Console.WindowHeight - 3  \n        ' Flag to indicate whether there are more results to display  \n        Dim goAgain As Boolean = True  \n  \n        For Each fg As IEnumerable(Of System.IO.FileInfo) In groupQuery  \n            ' Start a new extension at the top of a page.  \n            Dim currentLine As Integer = 0  \n  \n            Do While (currentLine < fg.Count())  \n                Console.Clear()  \n  \n                ' Get the next page of results  \n                ' No more than one filename per page  \n                Dim resultPage = From file In fg _  \n                                Skip currentLine Take numLines  \n  \n                ' Execute the query. Trim the paths in the output.  \n                For Each line In resultPage  \n                    Console.WriteLine(vbTab & line.FullName.Substring(charsToSkip))  \n                Next  \n  \n                ' Advance the current position  \n                currentLine = numLines + currentLine  \n  \n                ' Give the user a chance to break out of the loop  \n                Console.WriteLine(\"Press any key for next page or the 'End' key to exit.\")  \n                Dim key As ConsoleKey = Console.ReadKey().Key  \n                If key = ConsoleKey.End Then  \n                    goAgain = False  \n                    Exit For  \n                End If  \n            Loop  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n The first query uses a simple key to determine a match; this finds files that have the same name but whose contents might be different. The second query uses a compound key to match against three properties of the <xref:System.IO.FileInfo> object. This query is much more likely to find files that have the same name and similar or identical content.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace.  \n  \n## See also\n\n- [LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)\n- [LINQ and File Directories (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)\n","nodes":[{"pos":[4,157],"embed":true,"restype":"x-metadata","content":"title: \"How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 387d7c97-95dd-4a50-9761-7e9cf8ae9e6a","nodes":[{"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)","nodes":[{"pos":[0,75],"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)","nodes":[{"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)","pos":[0,75]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[164,239],"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)","linkify":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)","nodes":[{"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)","pos":[0,75]}]},{"content":"Sometimes files that have the same name may be located in more than one folder.","pos":[240,319]},{"content":"For example, under the Visual Studio installation folder, several folders have a readme.htm file.","pos":[320,417]},{"content":"This example shows how to query for such duplicate file names under a specified root folder.","pos":[418,510]},{"content":"The second example shows how to query for files whose size and creation times also match.","pos":[511,600]},{"pos":[609,616],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The first query uses a simple key to determine a match; this finds files that have the same name but whose contents might be different.","pos":[4139,4274]},{"content":"The second query uses a compound key to match against three properties of the <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> object.","pos":[4275,4386],"source":" The second query uses a compound key to match against three properties of the <xref:System.IO.FileInfo> object."},{"content":"This query is much more likely to find files that have the same name and similar or identical content.","pos":[4387,4489]},{"pos":[4498,4516],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[4520,4683],"content":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <ph id=\"ph1\">`Imports`</ph> statement for the System.Linq namespace.","source":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace."},{"pos":[4692,4700],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4704,4813],"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept>","source":"[LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)"},{"pos":[4816,4945],"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","source":"[LINQ and File Directories (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-file-directories.md)"}]}