{"content":"---\ntitle: \"Main() and Command-Line Arguments (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"CS5001\"\n  - \"main_CSharpKeyword\"\n  - \"Main\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"Main method [C#]\"\n  - \"C# language, command-line arguments\"\n  - \"arguments [C#], command-line\"\n  - \"command line [C#], arguments\"\n  - \"command-line arguments [C#], Main method\"\nms.assetid: 73a17231-cf96-44ea-aa8a-54807c6fb1f4\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Main() and Command-Line Arguments (C# Programming Guide)\nThe `Main` method is the entry point of a C# console application or windows application. (Libraries and services do not require a `Main` method as an entry point.). When the application is started, the `Main` method is the first method that is invoked.  \n  \n There can only be one entry point in a C# program. If you have more than one class that has a `Main` method, you must compile your program with the **/main** compiler option to specify which `Main` method to use as the entry point. For more information, see [/main (C# Compiler Options)](../../../csharp/language-reference/compiler-options/main-compiler-option.md).  \n  \n [!code-cs[csProgGuideMain#17](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-and-command-line-arguments_1.cs)]  \n  \n## Overview  \n  \n-   The `Main` method is the entry point of an .exe program; it is where the program control starts and ends.  \n  \n-   `Main` is declared inside a class or struct. `Main` must be [static](../../../csharp/language-reference/keywords/static.md) and it should not be [public](../../../csharp/language-reference/keywords/public.md). (In the earlier example, it receives the default access of [private](../../../csharp/language-reference/keywords/private.md).) The enclosing class or struct is not required to be static.  \n  \n-   `Main` can either have a `void` or `int` return type.  \n  \n-   The `Main` method can be declared with or without a `string[]` parameter that contains command-line arguments. When using [!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)] to create Windows Forms applications, you can add the parameter manually or else use the <xref:System.Environment> class to obtain the command-line arguments. Parameters are read as zero-indexed command-line arguments. Unlike C and C++, the name of the program is not treated as the first command-line argument.  \n  \n## In This Section  \n  \n-   [Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/command-line-arguments.md)  \n  \n-   [How to: Display Command Line Arguments](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)  \n  \n-   [How to: Access Command-Line Arguments Using foreach](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)  \n  \n-   [Main() Return Values](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)   \n [Inside a C# Program](../../../csharp/programming-guide/inside-a-program/index.md)   \n [\\<paveover>C# Sample Applications](http://msdn.microsoft.com/en-us/9a9d7aaa-51d3-4224-b564-95409b0f3e15)","nodes":[{"pos":[4,773],"nodes":[{"content":"Main() and Command-Line Arguments (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,73],"content":"Main() and Command-Line Arguments (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Main() and Command-Line Arguments (C# Programming Guide) | Microsoft Docs","pos":[0,73]}]}],"pos":[6,82],"yaml":true}],"content":"title: \"Main() and Command-Line Arguments (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"CS5001\"\n  - \"main_CSharpKeyword\"\n  - \"Main\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"Main method [C#]\"\n  - \"C# language, command-line arguments\"\n  - \"arguments [C#], command-line\"\n  - \"command line [C#], arguments\"\n  - \"command-line arguments [C#], Main method\"\nms.assetid: 73a17231-cf96-44ea-aa8a-54807c6fb1f4\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[780,836],"content":"Main() and Command-Line Arguments (C# Programming Guide)","linkify":"Main() and Command-Line Arguments (C# Programming Guide)","nodes":[{"content":"Main() and Command-Line Arguments (C# Programming Guide)","pos":[0,56]}]},{"content":"The <ph id=\"ph1\">`Main`</ph> method is the entry point of a C# console application or windows application.","pos":[837,925],"source":"The `Main` method is the entry point of a C# console application or windows application."},{"content":"(Libraries and services do not require a <ph id=\"ph1\">`Main`</ph> method as an entry point.).","pos":[926,1001],"source":" (Libraries and services do not require a `Main` method as an entry point.)."},{"content":"When the application is started, the <ph id=\"ph1\">`Main`</ph> method is the first method that is invoked.","pos":[1002,1089],"source":" When the application is started, the `Main` method is the first method that is invoked."},{"content":"There can only be one entry point in a C# program.","pos":[1096,1146]},{"content":"If you have more than one class that has a <ph id=\"ph1\">`Main`</ph> method, you must compile your program with the <bpt id=\"p1\">**</bpt>/main<ept id=\"p1\">**</ept> compiler option to specify which <ph id=\"ph2\">`Main`</ph> method to use as the entry point.","pos":[1147,1327],"source":" If you have more than one class that has a `Main` method, you must compile your program with the **/main** compiler option to specify which `Main` method to use as the entry point."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/main (C# Compiler Options)<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/main-compiler-option.md)</ept>.","pos":[1328,1461],"source":" For more information, see [/main (C# Compiler Options)](../../../csharp/language-reference/compiler-options/main-compiler-option.md)."},{"pos":[1468,1606],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideMain#17<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-and-command-line-arguments_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideMain#17](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-and-command-line-arguments_1.cs)]"},{"pos":[1615,1623],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"pos":[1633,1738],"content":"The <ph id=\"ph1\">`Main`</ph> method is the entry point of an .exe program; it is where the program control starts and ends.","source":"The `Main` method is the entry point of an .exe program; it is where the program control starts and ends."},{"content":"<ph id=\"ph1\">`Main`</ph> is declared inside a class or struct.","pos":[1748,1792],"source":"`Main` is declared inside a class or struct."},{"content":"<ph id=\"ph1\">`Main`</ph> must be <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> and it should not be <bpt id=\"p2\">[</bpt>public<ept id=\"p2\">](../../../csharp/language-reference/keywords/public.md)</ept>.","pos":[1793,1957],"source":"`Main` must be [static](../../../csharp/language-reference/keywords/static.md) and it should not be [public](../../../csharp/language-reference/keywords/public.md)."},{"content":"(In the earlier example, it receives the default access of <bpt id=\"p1\">[</bpt>private<ept id=\"p1\">](../../../csharp/language-reference/keywords/private.md)</ept>.) The enclosing class or struct is not required to be static.","pos":[1958,2144],"source":" (In the earlier example, it receives the default access of [private](../../../csharp/language-reference/keywords/private.md).) The enclosing class or struct is not required to be static."},{"pos":[2154,2207],"content":"<ph id=\"ph1\">`Main`</ph> can either have a <ph id=\"ph2\">`void`</ph> or <ph id=\"ph3\">`int`</ph> return type.","source":"`Main` can either have a `void` or `int` return type."},{"content":"The <ph id=\"ph1\">`Main`</ph> method can be declared with or without a <ph id=\"ph2\">`string[]`</ph> parameter that contains command-line arguments.","pos":[2217,2327],"source":"The `Main` method can be declared with or without a `string[]` parameter that contains command-line arguments."},{"content":"When using <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph> to create Windows Forms applications, you can add the parameter manually or else use the <ph id=\"ph2\">&lt;xref:System.Environment&gt;</ph> class to obtain the command-line arguments.","pos":[2328,2555],"source":" When using [!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)] to create Windows Forms applications, you can add the parameter manually or else use the <xref:System.Environment> class to obtain the command-line arguments."},{"content":"Parameters are read as zero-indexed command-line arguments.","pos":[2556,2615]},{"content":"Unlike C and C++, the name of the program is not treated as the first command-line argument.","pos":[2616,2708]},{"pos":[2717,2732],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"pos":[2742,2849],"content":"<bpt id=\"p1\">[</bpt>Command-Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/command-line-arguments.md)</ept>","source":"[Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/command-line-arguments.md)"},{"pos":[2859,2997],"content":"<bpt id=\"p1\">[</bpt>How to: Display Command Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept>","source":"[How to: Display Command Line Arguments](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)"},{"pos":[3007,3171],"content":"<bpt id=\"p1\">[</bpt>How to: Access Command-Line Arguments Using foreach<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept>","source":"[How to: Access Command-Line Arguments Using foreach](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)"},{"pos":[3181,3282],"content":"<bpt id=\"p1\">[</bpt>Main() Return Values<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)</ept>","source":"[Main() Return Values](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)"},{"pos":[3291,3316],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3430,3438],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Command-line Building With csc.exe<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept><ph id=\"ph1\"> </ph>","pos":[3442,3570],"source":"[Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3574,3641],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept><ph id=\"ph1\"> </ph>","pos":[3645,3721],"source":"[Methods](../../../csharp/programming-guide/classes-and-structs/methods.md) "},{"content":"<bpt id=\"p1\">[</bpt>Inside a C# Program<ept id=\"p1\">](../../../csharp/programming-guide/inside-a-program/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3725,3808],"source":"[Inside a C# Program](../../../csharp/programming-guide/inside-a-program/index.md) "},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>paveover&gt;C# Sample Applications<ept id=\"p1\">](http://msdn.microsoft.com/en-us/9a9d7aaa-51d3-4224-b564-95409b0f3e15)</ept>","pos":[3812,3917],"source":"[\\<paveover>C# Sample Applications](http://msdn.microsoft.com/en-us/9a9d7aaa-51d3-4224-b564-95409b0f3e15)"}]}