<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="mitigation-new-64-bit-jit-compiler.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3177ae53d8b932a52dccf11b12d44fd07ec1c4f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\migration-guide\mitigation-new-64-bit-jit-compiler.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70fd77832a882a5cbfd5b51e2b14a6247ac8027a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">caeea20a37462e1d7ac756689ff01d61edda8b42</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Mitigation: New 64-bit JIT Compiler</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Mitigation: New 64-bit JIT Compiler</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.6, the runtime includes a new 64-bit JIT compiler for just-in-time compilation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This change does not affect compilation with the  32-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Unexpected behavior or exceptions</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In some cases, compilation with the new 64-bit JIT compiler results in a runtime exception or in behavior that is not observed when executing code compiled by the older 64-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The known differences include the following:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All of these known issues have been addressed in the new 64-bit compiler released with the .NET Framework 4.6.2.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Most have also been addressed in service releases of the .NET Framework 4.6 and 4.6.1 that are included with Windows Update.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can eliminate these issues by ensuring that your version of Windows is up to date, or by upgrading to the .NET Framework 4.6.2.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Under certain conditions, an unboxing operation may throw a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> in Release builds with optimization turned on.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In some cases, execution of production code in a large method body may throw a <ph id="ph1">&lt;xref:System.StackOverflowException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Under certain conditions, structures passed to a method are treated as reference types rather than value types in Release builds.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>One of the manifestations of this issue is that the individual items in a collection appear in an unexpected order.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Under certain conditions, the comparison of <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> values with their high bit set is incorrect if optimization is enabled.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Under certain conditions, particularly when initializing array values, memory initialization by the <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Initblk?displayProperty=nameWithType&gt;</ph> IL instruction may initialize memory with an incorrect value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This can result either in an unhandled exception or incorrect output.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Under certain rare conditions, a conditional bit test can return the incorrect <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value or throw an exception if compiler optimizations are enabled.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Under certain conditions, if an <ph id="ph1">`if`</ph> statement is used to test for a condition before entering  a <ph id="ph2">`try`</ph> block and in the exit from the <ph id="ph3">`try`</ph> block, and the same condition is evaluated in the <ph id="ph4">`catch`</ph> or <ph id="ph5">`finally`</ph> block, the new 64-bit JIT compiler removes the <ph id="ph6">`if`</ph> condition from the <ph id="ph7">`catch`</ph> or <ph id="ph8">`finally`</ph> block when it optimizes code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As a result, code inside the <ph id="ph1">`if`</ph> statement in the <ph id="ph2">`catch`</ph> or <ph id="ph3">`finally`</ph> block is executed unconditionally.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Mitigation of known issues</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you encounter the issues listed above, you can address them by doing any of the following:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Upgrade to the .NET Framework 4.6.2.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The new 64-bit compiler included with the .NET Framework 4.6.2 addresses each of these known issues.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Ensure that your version of Windows is up to date by running Windows Update.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Service updates to the .NET Framework 4.6 and 4.6.1 address each of these issues except the <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> in an unboxing operation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Compile with the older 64-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Mitigation of other issues<ept id="p1">](#Other)</ept> section for more information on how to do this.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Mitigation of other issues</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you encounter any other difference in behavior between code compiled with the older 64-bit compiler and the new 64-bit JIT compiler, or between the debug and release versions of your app that are both compiled with the new 64-bit JIT compiler, you can do the following to compile your app with the older 64-bit JIT compiler:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On a per-application basis, you can add the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>useLegacyJit&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/uselegacyjit-element.md)</ept> element to your application's configuration file.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following disables compilation with the new 64-bit JIT compiler and instead uses the legacy 64-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On a per-user basis, you can add a <ph id="ph1">`REG_DWORD`</ph> value named <ph id="ph2">`useLegacyJit`</ph> to the <ph id="ph3">`HKEY_CURRENT_USER\SOFTWARE\Microsoft\.NETFramework`</ph> key of the registry.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A value of 1 enables the legacy 64-bit JIT compiler; a value of 0 disables it and enables the new 64-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>On a per-machine basis, you can add a <ph id="ph1">`REG_DWORD`</ph> value named <ph id="ph2">`useLegacyJit`</ph> to the <ph id="ph3">`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework`</ph> key of the registry.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A value of 1 enables the legacy 64-bit JIT compiler; a value of 0 disables it and enables the new 64-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can also let us know about the problem by reporting a bug on <bpt id="p1">[</bpt>Microsoft Connect<ept id="p1">](https://connect.microsoft.com/VisualStudio)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Changes<ept id="p1">](../../../docs/framework/migration-guide/runtime-changes-in-the-net-framework-4-6.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>useLegacyJit&gt; Element<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/uselegacyjit-element.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>