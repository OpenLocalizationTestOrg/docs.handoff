{"content":"---\ntitle: \"Scope of Default Namespaces in C#1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: fe826236-830f-457a-9027-7ad62c909fae\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Scope of Default Namespaces in C#\nDefault namespaces as represented in the XML tree are not in scope for queries. If you have XML that is in a default namespace, you still must declare an <xref:System.Xml.Linq.XNamespace> variable, and combine it with the local name to make a qualified name to be used in the query.  \n  \n One of the most common problems when querying XML trees is that if the XML tree has a default namespace, the developer sometimes writes the query as though the XML were not in a namespace.  \n  \n The first set of examples in this topic shows a typical way that XML in a default namespace is loaded, but is queried improperly.  \n  \n The second set of examples show the necessary corrections so that you can query XML in a namespace.  \n  \n## Example  \n This example shows the creation of XML in a namespace, and a query that returns an empty result set.  \n  \n### Code  \n  \n```csharp  \nXElement root = XElement.Parse(  \n@\"<Root xmlns='http://www.adventure-works.com'>  \n    <Child>1</Child>  \n    <Child>2</Child>  \n    <Child>3</Child>  \n    <AnotherChild>4</AnotherChild>  \n    <AnotherChild>5</AnotherChild>  \n    <AnotherChild>6</AnotherChild>  \n</Root>\");  \nIEnumerable<XElement> c1 =  \n    from el in root.Elements(\"Child\")  \n    select el;  \nConsole.WriteLine(\"Result set follows:\");  \nforeach (XElement el in c1)  \n    Console.WriteLine((int)el);  \nConsole.WriteLine(\"End of result set\");  \n```  \n  \n### Comments  \n This example produces the following result:  \n  \n```  \nResult set follows:  \nEnd of result set  \n```  \n  \n## Example  \n This example shows the creation of XML in a namespace, and a query that is coded properly.  \n  \n In contrast to the incorrectly coded example above, the correct approach when using C# is to declare and initialize an <xref:System.Xml.Linq.XNamespace> object, and to use it when specifying <xref:System.Xml.Linq.XName> objects. In this case, the argument to the <xref:System.Xml.Linq.XElement.Elements%2A> method is an <xref:System.Xml.Linq.XName> object.  \n  \n### Code  \n  \n```csharp  \nXElement root = XElement.Parse(  \n@\"<Root xmlns='http://www.adventure-works.com'>  \n    <Child>1</Child>  \n    <Child>2</Child>  \n    <Child>3</Child>  \n    <AnotherChild>4</AnotherChild>  \n    <AnotherChild>5</AnotherChild>  \n    <AnotherChild>6</AnotherChild>  \n</Root>\");  \nXNamespace aw = \"http://www.adventure-works.com\";  \nIEnumerable<XElement> c1 =  \n    from el in root.Elements(aw + \"Child\")  \n    select el;  \nConsole.WriteLine(\"Result set follows:\");  \nforeach (XElement el in c1)  \n    Console.WriteLine((int)el);  \nConsole.WriteLine(\"End of result set\");  \n```  \n  \n### Comments  \n This example produces the following result:  \n  \n```  \nResult set follows:  \n1  \n2  \n3  \nEnd of result set  \n```  \n  \n## See Also  \n [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)","nodes":[{"pos":[12,63],"content":"Scope of Default Namespaces in C#1 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Scope of Default Namespaces in C#1 | Microsoft Docs","pos":[0,51]}]},{"pos":[422,455],"content":"Scope of Default Namespaces in C#","linkify":"Scope of Default Namespaces in C#","nodes":[{"content":"Scope of Default Namespaces in C#","pos":[0,33]}]},{"content":"Default namespaces as represented in the XML tree are not in scope for queries.","pos":[456,535]},{"content":"If you have XML that is in a default namespace, you still must declare an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> variable, and combine it with the local name to make a qualified name to be used in the query.","pos":[536,738],"source":" If you have XML that is in a default namespace, you still must declare an <xref:System.Xml.Linq.XNamespace> variable, and combine it with the local name to make a qualified name to be used in the query."},{"content":"One of the most common problems when querying XML trees is that if the XML tree has a default namespace, the developer sometimes writes the query as though the XML were not in a namespace.","pos":[745,933]},{"content":"The first set of examples in this topic shows a typical way that XML in a default namespace is loaded, but is queried improperly.","pos":[940,1069]},{"content":"The second set of examples show the necessary corrections so that you can query XML in a namespace.","pos":[1076,1175]},{"pos":[1184,1191],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows the creation of XML in a namespace, and a query that returns an empty result set.","pos":[1195,1295]},{"pos":[1305,1309],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[1853,1861],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"This example produces the following result:","pos":[1865,1908]},{"pos":[1974,1981],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows the creation of XML in a namespace, and a query that is coded properly.","pos":[1985,2075]},{"content":"In contrast to the incorrectly coded example above, the correct approach when using C# is to declare and initialize an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object, and to use it when specifying <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects.","pos":[2082,2310],"source":"In contrast to the incorrectly coded example above, the correct approach when using C# is to declare and initialize an <xref:System.Xml.Linq.XNamespace> object, and to use it when specifying <xref:System.Xml.Linq.XName> objects."},{"content":"In this case, the argument to the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Elements%2A&gt;</ph> method is an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object.","pos":[2311,2438],"source":" In this case, the argument to the <xref:System.Xml.Linq.XElement.Elements%2A> method is an <xref:System.Xml.Linq.XName> object."},{"pos":[2448,2452],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[3053,3061],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"This example produces the following result:","pos":[3065,3108]},{"pos":[3186,3194],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3198,3315],"content":"<bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>","source":"[Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)"}]}