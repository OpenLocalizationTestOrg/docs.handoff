{"content":"---\ntitle: \"Nesting of TransactionScope within a service | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e7e1ba64-1384-4eba-add8-415636e2d6d0\ncaps.latest.revision: 7\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Nesting of TransactionScope within a service\nThis sample consists of two scenarios that run showing how to handle <xref:System.Activities.Statements.TransactionScope> activity instances within a service. First the transaction is initiated using the <xref:System.Activities.Statements.TransactionScope> activity to create a new transaction on the client and <xref:System.ServiceModel.Activities.TransactedReceiveScope> to receive and scope the lifetime of the transaction on the server. The first scenario within the service runs a secondary <xref:System.Activities.Statements.TransactionScope> activity to demonstrate the nesting of the <xref:System.Activities.Statements.TransactionScope> activities within the service. The second scenario shows how time-outs are respected within the nested <xref:System.Activities.Statements.TransactionScope> activities.  \n  \n## Client Application  \n The client application runs a workflow that starts a <xref:System.Activities.Statements.TransactionScope> activity, prints the distributed transaction ID, sends a message to the server, flows the transaction, receives the reply, prints the distributed transaction ID again and completes. It does this once for each service scenario.  \n  \n## Server Application  \n The server project is hosted in <xref:System.ServiceModel.Activities.WorkflowServiceHost>, which creates the endpoint to listen for the message from the client. The workflow is centered on the <xref:System.ServiceModel.Activities.TransactedReceiveScope>, which receives the flowed transaction from the client, prints the distributed transaction ID and then executes a second <xref:System.Activities.Statements.TransactionScope> activity. In the first scenario, the transaction is completed successfully. In the second scenario, the body of the <xref:System.Activities.Statements.TransactionScope> activity is a five-second delay and the time-out for the transaction is set to two seconds. When the transaction times out the transaction is aborted.  \n  \n#### To run the sample  \n  \n1.  Open the TransactionServiceExample.sln solution in [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)].  \n  \n2.  To build the solution, press CTRL+SHIFT+B or select **Build Solution** from the **Build** menu.  \n  \n3.  Once the build has succeeded, right-click the solution and select **Set Startup Projects**. From the dialog box, select **Multiple Startup Projects** and ensure the action for both projects is **Start**.  \n  \n4.  Press F5 or select **Start Debugging** from the **Debug** menu. Alternatively, you can press CTRL+F5 or select **Start Without Debugging** from the **Debug** menu to run without debugging.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Basic\\Transactions\\TRSComposability`","nodes":[{"pos":[12,73],"content":"Nesting of TransactionScope within a service | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Nesting of TransactionScope within a service | Microsoft Docs","pos":[0,61]}]},{"pos":[338,382],"content":"Nesting of TransactionScope within a service","linkify":"Nesting of TransactionScope within a service","nodes":[{"content":"Nesting of TransactionScope within a service","pos":[0,44]}]},{"content":"This sample consists of two scenarios that run showing how to handle <ph id=\"ph1\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activity instances within a service.","pos":[383,541],"source":"This sample consists of two scenarios that run showing how to handle <xref:System.Activities.Statements.TransactionScope> activity instances within a service."},{"content":"First the transaction is initiated using the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activity to create a new transaction on the client and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph> to receive and scope the lifetime of the transaction on the server.","pos":[542,823],"source":" First the transaction is initiated using the <xref:System.Activities.Statements.TransactionScope> activity to create a new transaction on the client and <xref:System.ServiceModel.Activities.TransactedReceiveScope> to receive and scope the lifetime of the transaction on the server."},{"content":"The first scenario within the service runs a secondary <ph id=\"ph1\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activity to demonstrate the nesting of the <ph id=\"ph2\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activities within the service.","pos":[824,1058],"source":" The first scenario within the service runs a secondary <xref:System.Activities.Statements.TransactionScope> activity to demonstrate the nesting of the <xref:System.Activities.Statements.TransactionScope> activities within the service."},{"content":"The second scenario shows how time-outs are respected within the nested <ph id=\"ph1\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activities.","pos":[1059,1195],"source":" The second scenario shows how time-outs are respected within the nested <xref:System.Activities.Statements.TransactionScope> activities."},{"pos":[1204,1222],"content":"Client Application","linkify":"Client Application","nodes":[{"content":"Client Application","pos":[0,18]}]},{"content":"The client application runs a workflow that starts a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activity, prints the distributed transaction ID, sends a message to the server, flows the transaction, receives the reply, prints the distributed transaction ID again and completes.","pos":[1226,1513],"source":"The client application runs a workflow that starts a <xref:System.Activities.Statements.TransactionScope> activity, prints the distributed transaction ID, sends a message to the server, flows the transaction, receives the reply, prints the distributed transaction ID again and completes."},{"content":"It does this once for each service scenario.","pos":[1514,1558]},{"pos":[1567,1585],"content":"Server Application","linkify":"Server Application","nodes":[{"content":"Server Application","pos":[0,18]}]},{"content":"The server project is hosted in <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph>, which creates the endpoint to listen for the message from the client.","pos":[1589,1749],"source":"The server project is hosted in <xref:System.ServiceModel.Activities.WorkflowServiceHost>, which creates the endpoint to listen for the message from the client."},{"content":"The workflow is centered on the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph>, which receives the flowed transaction from the client, prints the distributed transaction ID and then executes a second <ph id=\"ph2\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activity.","pos":[1750,2026],"source":" The workflow is centered on the <xref:System.ServiceModel.Activities.TransactedReceiveScope>, which receives the flowed transaction from the client, prints the distributed transaction ID and then executes a second <xref:System.Activities.Statements.TransactionScope> activity."},{"content":"In the first scenario, the transaction is completed successfully.","pos":[2027,2092]},{"content":"In the second scenario, the body of the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activity is a five-second delay and the time-out for the transaction is set to two seconds.","pos":[2093,2277],"source":" In the second scenario, the body of the <xref:System.Activities.Statements.TransactionScope> activity is a five-second delay and the time-out for the transaction is set to two seconds."},{"content":"When the transaction times out the transaction is aborted.","pos":[2278,2336]},{"pos":[2347,2364],"content":"To run the sample","linkify":"To run the sample","nodes":[{"content":"To run the sample","pos":[0,17]}]},{"pos":[2374,2479],"content":"Open the TransactionServiceExample.sln solution in <ph id=\"ph1\">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.","source":"Open the TransactionServiceExample.sln solution in [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]."},{"pos":[2489,2584],"content":"To build the solution, press CTRL+SHIFT+B or select <bpt id=\"p1\">**</bpt>Build Solution<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Build<ept id=\"p2\">**</ept> menu.","source":"To build the solution, press CTRL+SHIFT+B or select **Build Solution** from the **Build** menu."},{"content":"Once the build has succeeded, right-click the solution and select <bpt id=\"p1\">**</bpt>Set Startup Projects<ept id=\"p1\">**</ept>.","pos":[2594,2685],"source":"Once the build has succeeded, right-click the solution and select **Set Startup Projects**."},{"content":"From the dialog box, select <bpt id=\"p1\">**</bpt>Multiple Startup Projects<ept id=\"p1\">**</ept> and ensure the action for both projects is <bpt id=\"p2\">**</bpt>Start<ept id=\"p2\">**</ept>.","pos":[2686,2797],"source":" From the dialog box, select **Multiple Startup Projects** and ensure the action for both projects is **Start**."},{"content":"Press F5 or select <bpt id=\"p1\">**</bpt>Start Debugging<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept> menu.","pos":[2807,2870],"source":"Press F5 or select **Start Debugging** from the **Debug** menu."},{"content":"Alternatively, you can press CTRL+F5 or select <bpt id=\"p1\">**</bpt>Start Without Debugging<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept> menu to run without debugging.","pos":[2871,2995],"source":" Alternatively, you can press CTRL+F5 or select **Start Without Debugging** from the **Debug** menu to run without debugging."},{"pos":[3003,3135],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[3189,3515],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[3516,3566]}]}