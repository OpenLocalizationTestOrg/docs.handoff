{"content":"---\ntitle: \"NativeActivity Base Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 254a4c50-425b-426d-a32f-0f7234925bac\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# NativeActivity Base Class\n<xref:System.Activities.NativeActivity> is an abstract class with a protected constructor. Like <xref:System.Activities.CodeActivity>, <xref:System.Activities.NativeActivity> is used for writing imperative behavior by implementing an <xref:System.Activities.NativeActivity.Execute%2A> method. Unlike <xref:System.Activities.CodeActivity>, <xref:System.Activities.NativeActivity> has access to all of the exposed features of the workflow runtime through the <xref:System.Activities.NativeActivityContext> object passed to the <xref:System.Activities.NativeActivity.Execute%2A> method.  \n  \n## Using NativeActivityContext  \n Features of the workflow runtime can be accessed from within the <xref:System.Activities.NativeActivity.Execute%2A> method by using members of the `context` parameter, of type <xref:System.Activities.NativeActivityContext>. The features available through <xref:System.Activities.NativeActivityContext> include the following:  \n  \n-   Getting and setting of arguments and variables.  \n  \n-   Scheduling child activities with <xref:System.Activities.NativeActivityContext.ScheduleActivity%2A>  \n  \n-   Aborting activity execution using <xref:System.Activities.NativeActivityContext.Abort%2A>.  \n  \n-   Canceling child execution using <xref:System.Activities.NativeActivityContext.CancelChild%2A> and <xref:System.Activities.NativeActivityContext.CancelChildren%2A>.  \n  \n-   Access to activity bookmarks using such methods as <xref:System.Activities.NativeActivityContext.CreateBookmark%2A>, <xref:System.Activities.NativeActivityContext.RemoveBookmark%2A>, and <xref:System.Activities.NativeActivityContext.ResumeBookmark%2A>.  \n  \n-   Custom tracking features using <xref:System.Activities.CodeActivityContext.Track%2A>.  \n  \n-   Access to the activity’s execution properties and value properties using <xref:System.Activities.CodeActivityContext.GetProperty%2A> and <xref:System.Activities.NativeActivityContext.GetValue%2A>.  \n  \n-   Scheduling activity actions and functions using <xref:System.Activities.NativeActivityContext.ScheduleAction%2A> and <xref:System.Activities.NativeActivityContext.ScheduleFunc%2A>.  \n  \n#### To create a custom activity that inherits from NativeActivity  \n  \n1.  Open[!INCLUDE[vs2010](../../../includes/vs2010-md.md)].  \n  \n2.  Select **File**, **New**, and then **Project**. Select **Workflow 4.0** under **Visual C#** in the **Project Types** window, and select the **v2010** node. Select **Activity Library** in the **Templates** window. Name the new project HelloActivity.  \n  \n3.  Right-click Activity1.xaml in the HelloActivity project and select **Delete**.  \n  \n4.  Right-click the HelloActivity project and select **Add**, and then **Class**. Name the new class HelloActivity.cs.  \n  \n5.  In the HelloActivity.cs file, add the following `using` directives.  \n  \n    ```csharp  \n    using System.Activities;  \n    using System.Activities.Statements;  \n    ```  \n  \n6.  Make the new class inherit from <xref:System.Activities.NativeActivity> by adding a base class to the class declaration.  \n  \n    ```csharp  \n    class HelloActivity : NativeActivity  \n    ```  \n  \n7.  Add functionality to the class by adding an <xref:System.Activities.NativeActivity.Execute%2A> method.  \n  \n    ```csharp  \n    protected override void Execute(NativeActivityContext context)  \n    {  \n        Console.WriteLine(\"Hello World!\");  \n    }  \n    ```  \n  \n8.  Override the <xref:System.Activities.NativeActivity.CacheMetadata%2A> method and call the appropriate Add method to let the workflow runtime know about the custom activity’s variables, arguments, children, and delegates. For more information see the <xref:System.Activities.NativeActivityMetadata> class.  \n  \n9. Use the <xref:System.Activities.NativeActivityContext> object to schedule a bookmark. See <xref:System.Activities.WorkflowApplicationIdleEventArgs.Bookmarks%2A> for details on how to create, schedule, and resume a bookmark.  \n  \n    ```  \n    protected override void Execute(NativeActivityContext context)  \n        {  \n            // Create a Bookmark and wait for it to be resumed.  \n            context.CreateBookmark(BookmarkName.Get(context),   \n                new BookmarkCallback(OnResumeBookmark));  \n        }  \n    ```","nodes":[{"pos":[12,54],"content":"NativeActivity Base Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"NativeActivity Base Class | Microsoft Docs","pos":[0,42]}]},{"pos":[319,344],"content":"NativeActivity Base Class","linkify":"NativeActivity Base Class","nodes":[{"content":"NativeActivity Base Class","pos":[0,25]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity&gt;</ph> is an abstract class with a protected constructor.","pos":[345,435],"source":"<xref:System.Activities.NativeActivity> is an abstract class with a protected constructor."},{"content":"Like <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivity&gt;</ph> is used for writing imperative behavior by implementing an <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph> method.","pos":[436,637],"source":" Like <xref:System.Activities.CodeActivity>, <xref:System.Activities.NativeActivity> is used for writing imperative behavior by implementing an <xref:System.Activities.NativeActivity.Execute%2A> method."},{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivity&gt;</ph> has access to all of the exposed features of the workflow runtime through the <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph> object passed to the <ph id=\"ph4\">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph> method.","pos":[638,928],"source":" Unlike <xref:System.Activities.CodeActivity>, <xref:System.Activities.NativeActivity> has access to all of the exposed features of the workflow runtime through the <xref:System.Activities.NativeActivityContext> object passed to the <xref:System.Activities.NativeActivity.Execute%2A> method."},{"pos":[937,964],"content":"Using NativeActivityContext","linkify":"Using NativeActivityContext","nodes":[{"content":"Using NativeActivityContext","pos":[0,27]}]},{"content":"Features of the workflow runtime can be accessed from within the <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph> method by using members of the <ph id=\"ph2\">`context`</ph> parameter, of type <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph>.","pos":[968,1191],"source":"Features of the workflow runtime can be accessed from within the <xref:System.Activities.NativeActivity.Execute%2A> method by using members of the `context` parameter, of type <xref:System.Activities.NativeActivityContext>."},{"content":"The features available through <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph> include the following:","pos":[1192,1292],"source":" The features available through <xref:System.Activities.NativeActivityContext> include the following:"},{"content":"Getting and setting of arguments and variables.","pos":[1302,1349]},{"content":"Scheduling child activities with <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityContext.ScheduleActivity%2A&gt;</ph>","pos":[1359,1458],"source":"Scheduling child activities with <xref:System.Activities.NativeActivityContext.ScheduleActivity%2A>"},{"content":"Aborting activity execution using <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityContext.Abort%2A&gt;</ph>.","pos":[1468,1558],"source":"Aborting activity execution using <xref:System.Activities.NativeActivityContext.Abort%2A>."},{"content":"Canceling child execution using <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityContext.CancelChild%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivityContext.CancelChildren%2A&gt;</ph>.","pos":[1568,1731],"source":"Canceling child execution using <xref:System.Activities.NativeActivityContext.CancelChild%2A> and <xref:System.Activities.NativeActivityContext.CancelChildren%2A>."},{"content":"Access to activity bookmarks using such methods as <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityContext.CreateBookmark%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivityContext.RemoveBookmark%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivityContext.ResumeBookmark%2A&gt;</ph>.","pos":[1741,1993],"source":"Access to activity bookmarks using such methods as <xref:System.Activities.NativeActivityContext.CreateBookmark%2A>, <xref:System.Activities.NativeActivityContext.RemoveBookmark%2A>, and <xref:System.Activities.NativeActivityContext.ResumeBookmark%2A>."},{"content":"Custom tracking features using <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivityContext.Track%2A&gt;</ph>.","pos":[2003,2088],"source":"Custom tracking features using <xref:System.Activities.CodeActivityContext.Track%2A>."},{"content":"Access to the activity’s execution properties and value properties using <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivityContext.GetProperty%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivityContext.GetValue%2A&gt;</ph>.","pos":[2098,2294],"source":"Access to the activity’s execution properties and value properties using <xref:System.Activities.CodeActivityContext.GetProperty%2A> and <xref:System.Activities.NativeActivityContext.GetValue%2A>."},{"content":"Scheduling activity actions and functions using <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityContext.ScheduleAction%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivityContext.ScheduleFunc%2A&gt;</ph>.","pos":[2304,2484],"source":"Scheduling activity actions and functions using <xref:System.Activities.NativeActivityContext.ScheduleAction%2A> and <xref:System.Activities.NativeActivityContext.ScheduleFunc%2A>."},{"pos":[2495,2556],"content":"To create a custom activity that inherits from NativeActivity","linkify":"To create a custom activity that inherits from NativeActivity","nodes":[{"content":"To create a custom activity that inherits from NativeActivity","pos":[0,61]}]},{"pos":[2566,2621],"content":"Open<ph id=\"ph1\">[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]</ph>.","source":"Open[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]."},{"content":"Select <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","pos":[2631,2678],"source":"Select **File**, **New**, and then **Project**."},{"content":"Select <bpt id=\"p1\">**</bpt>Workflow 4.0<ept id=\"p1\">**</ept> under <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>Project Types<ept id=\"p3\">**</ept> window, and select the <bpt id=\"p4\">**</bpt>v2010<ept id=\"p4\">**</ept> node.","pos":[2679,2786],"source":" Select **Workflow 4.0** under **Visual C#** in the **Project Types** window, and select the **v2010** node."},{"content":"Select <bpt id=\"p1\">**</bpt>Activity Library<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>Templates<ept id=\"p2\">**</ept> window.","pos":[2787,2843],"source":" Select **Activity Library** in the **Templates** window."},{"content":"Name the new project HelloActivity.","pos":[2844,2879]},{"pos":[2889,2967],"content":"Right-click Activity1.xaml in the HelloActivity project and select <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept>.","source":"Right-click Activity1.xaml in the HelloActivity project and select **Delete**."},{"content":"Right-click the HelloActivity project and select <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, and then <bpt id=\"p2\">**</bpt>Class<ept id=\"p2\">**</ept>.","pos":[2977,3054],"source":"Right-click the HelloActivity project and select **Add**, and then **Class**."},{"content":"Name the new class HelloActivity.cs.","pos":[3055,3091]},{"pos":[3101,3168],"content":"In the HelloActivity.cs file, add the following <ph id=\"ph1\">`using`</ph> directives.","source":"In the HelloActivity.cs file, add the following `using` directives."},{"content":"Make the new class inherit from <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity&gt;</ph> by adding a base class to the class declaration.","pos":[3280,3400],"source":"Make the new class inherit from <xref:System.Activities.NativeActivity> by adding a base class to the class declaration."},{"content":"Add functionality to the class by adding an <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph> method.","pos":[3482,3584],"source":"Add functionality to the class by adding an <xref:System.Activities.NativeActivity.Execute%2A> method."},{"content":"Override the <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity.CacheMetadata%2A&gt;</ph> method and call the appropriate Add method to let the workflow runtime know about the custom activity’s variables, arguments, children, and delegates.","pos":[3753,3973],"source":"Override the <xref:System.Activities.NativeActivity.CacheMetadata%2A> method and call the appropriate Add method to let the workflow runtime know about the custom activity’s variables, arguments, children, and delegates."},{"content":"For more information see the <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityMetadata&gt;</ph> class.","pos":[3974,4057],"source":" For more information see the <xref:System.Activities.NativeActivityMetadata> class."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph> object to schedule a bookmark.","pos":[4066,4151],"source":"Use the <xref:System.Activities.NativeActivityContext> object to schedule a bookmark."},{"content":"See <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplicationIdleEventArgs.Bookmarks%2A&gt;</ph> for details on how to create, schedule, and resume a bookmark.","pos":[4152,4289],"source":" See <xref:System.Activities.WorkflowApplicationIdleEventArgs.Bookmarks%2A> for details on how to create, schedule, and resume a bookmark."}]}