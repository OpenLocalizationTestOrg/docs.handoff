{"content":"---\ntitle: \"How to: Perform Lazy Initialization of Objects | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"lazy initialization in .NET, how to perform\"\nms.assetid: 8cd68620-dcc3-4f20-8835-c728a6820e71\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Perform Lazy Initialization of Objects\nThe <xref:System.Lazy%601?displayProperty=fullName> class simplifies the work of performing lazy initialization and instantiation of objects. By initializing objects in a lazy manner, you can avoid having to create them at all if they are never needed, or you can postpone their initialization until they are first accessed. For more information, see [Lazy Initialization](../../../docs/framework/performance/lazy-initialization.md).  \n  \n## Example  \n The following example shows how to initialize a value with <xref:System.Lazy%601>. Assume that the lazy variable might not be needed, depending on some other code that sets the `someCondition` variable to true or false.  \n  \n```vb  \nDim someCondition As Boolean = False  \n  \nSub Main()  \n    'Initializing a value with a big computation, computed in parallel  \n    Dim _data As Lazy(Of Integer) = New Lazy(Of Integer)(Function()  \n                                                             Dim result =  \n                                                                 ParallelEnumerable.Range(0, 1000).  \n                                                                 Aggregate(Function(x, y)  \n                                                                               Return x + y  \n                                                                           End Function)  \n                                                             Return result  \n                                                         End Function)  \n  \n    '  do work that may or may not set someCondition to True  \n    ' ...  \n    '  Initialize the data only if needed  \n    If someCondition = True Then  \n  \n        If (_data.Value > 100) Then  \n  \n            Console.WriteLine(\"Good data\")  \n        End If  \n    End If  \nEnd Sub  \n```  \n  \n```csharp  \n  static bool someCondition = false;    \n  //Initializing a value with a big computation, computed in parallel  \n  Lazy<int> _data = new Lazy<int>(delegate  \n  {  \n      return ParallelEnumerable.Range(0, 1000).  \n          Select(i => Compute(i)).Aggregate((x,y) => x + y);  \n  }, LazyExecutionMode.EnsureSingleThreadSafeExecution);  \n  \n  // Do some work that may or may not set someCondition to true.  \n  //  ...  \n  // Initialize the data only if necessary  \n  if (someCondition)  \n{  \n    if (_data.Value > 100)  \n      {  \n          Console.WriteLine(\"Good data\");  \n      }  \n}  \n```  \n  \n## Example  \n The following example shows how to use the <xref:System.Threading.ThreadLocal%601?displayProperty=fullName> class to initialize a type that is visible only to the current object instance on the current thread.  \n  \n [!code-csharp[CDS#13](../../../samples/snippets/csharp/VS_Snippets_Misc/cds/cs/cds2.cs#13)]\n [!code-vb[CDS#13](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds/vb/lazyhowto.vb#13)]  \n  \n## See Also  \n <xref:System.Threading.LazyInitializer?displayProperty=fullName>   \n [Lazy Initialization](../../../docs/framework/performance/lazy-initialization.md)","nodes":[{"pos":[4,444],"nodes":[{"content":"How to: Perform Lazy Initialization of Objects | Microsoft Docs","nodes":[{"pos":[0,63],"content":"How to: Perform Lazy Initialization of Objects | Microsoft Docs","nodes":[{"content":"How to: Perform Lazy Initialization of Objects | Microsoft Docs","pos":[0,63]}]}],"pos":[6,72],"yaml":true}],"content":"title: \"How to: Perform Lazy Initialization of Objects | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"lazy initialization in .NET, how to perform\"\nms.assetid: 8cd68620-dcc3-4f20-8835-c728a6820e71\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[451,497],"content":"How to: Perform Lazy Initialization of Objects","linkify":"How to: Perform Lazy Initialization of Objects","nodes":[{"content":"How to: Perform Lazy Initialization of Objects","pos":[0,46]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Lazy%601?displayProperty=fullName&gt;</ph> class simplifies the work of performing lazy initialization and instantiation of objects.","pos":[498,639],"source":"The <xref:System.Lazy%601?displayProperty=fullName> class simplifies the work of performing lazy initialization and instantiation of objects."},{"content":"By initializing objects in a lazy manner, you can avoid having to create them at all if they are never needed, or you can postpone their initialization until they are first accessed.","pos":[640,822]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lazy Initialization<ept id=\"p1\">](../../../docs/framework/performance/lazy-initialization.md)</ept>.","pos":[823,931],"source":" For more information, see [Lazy Initialization](../../../docs/framework/performance/lazy-initialization.md)."},{"pos":[940,947],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to initialize a value with <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph>.","pos":[951,1033],"source":"The following example shows how to initialize a value with <xref:System.Lazy%601>."},{"content":"Assume that the lazy variable might not be needed, depending on some other code that sets the <ph id=\"ph1\">`someCondition`</ph> variable to true or false.","pos":[1034,1170],"source":" Assume that the lazy variable might not be needed, depending on some other code that sets the `someCondition` variable to true or false."},{"pos":[2893,2900],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to use the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadLocal%601?displayProperty=fullName&gt;</ph> class to initialize a type that is visible only to the current object instance on the current thread.","pos":[2904,3113],"source":"The following example shows how to use the <xref:System.Threading.ThreadLocal%601?displayProperty=fullName> class to initialize a type that is visible only to the current object instance on the current thread."},{"pos":[3120,3310],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CDS#13<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/cds/cs/cds2.cs#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>CDS#13<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds/vb/lazyhowto.vb#13)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[CDS#13](../../../samples/snippets/csharp/VS_Snippets_Misc/cds/cs/cds2.cs#13)]\n [!code-vb[CDS#13](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds/vb/lazyhowto.vb#13)]"},{"pos":[3319,3327],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.LazyInitializer?displayProperty=fullName&gt;</ph>","pos":[3331,3395],"source":"<xref:System.Threading.LazyInitializer?displayProperty=fullName> "},{"content":"<bpt id=\"p1\">[</bpt>Lazy Initialization<ept id=\"p1\">](../../../docs/framework/performance/lazy-initialization.md)</ept>","pos":[3400,3481],"source":"[Lazy Initialization](../../../docs/framework/performance/lazy-initialization.md)"}]}