<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64f6354a6a5f2fdd078e7ae9a1bfafc65d53373d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\types\walkthrough-creating-and-using-dynamic-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ce3f264cc8bb55fabbbea17fd8e09312e430ace</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8abdc337374c42213041cf7eadd8dbe2ca566192</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dynamic objects expose members such as properties and methods at run time, instead of in at compile time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This enables you to create objects to work with structures that do not match a static type or format.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you can use a dynamic object to reference the HTML Document Object Model (DOM), which can contain any combination of valid HTML markup elements and attributes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Because each HTML document is unique, the members for a particular HTML document are determined at run time.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A common method to reference an attribute of an HTML element is to pass the name of the attribute to the <ph id="ph1">`GetProperty`</ph> method of the element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To reference the <ph id="ph1">`id`</ph> attribute of the HTML element <ph id="ph2">`&lt;div id="Div1"&gt;`</ph>, you first obtain a reference to the <ph id="ph3">`&lt;div&gt;`</ph> element, and then use <ph id="ph4">`divElement.GetProperty("id")`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you use a dynamic object, you can reference the <ph id="ph1">`id`</ph> attribute as <ph id="ph2">`divElement.id`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Dynamic objects also provide convenient access to dynamic languages such as IronPython and IronRuby.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use a dynamic object to refer to a dynamic script that is interpreted at run time.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You reference a dynamic object by using late binding.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In C#, you specify the type of a late-bound object as <ph id="ph1">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, you specify the type of a late-bound object as <ph id="ph2">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>dynamic<ept id="p1">](../../../csharp/language-reference/keywords/dynamic.md)</ept> and <bpt id="p2">[</bpt>Early and Late Binding<ept id="p2">](../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can create custom dynamic objects by using the classes in the <ph id="ph1">&lt;xref:System.Dynamic?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, you can create an <ph id="ph1">&lt;xref:System.Dynamic.ExpandoObject&gt;</ph> and specify the members of that object at run time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also create your own type that inherits the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can then override the members of the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class to provide run-time dynamic functionality.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this walkthrough you will perform the following tasks:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create a custom object that dynamically exposes the contents of a text file as properties of an object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create a project that uses an <ph id="ph1">`IronPython`</ph> library.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You need IronPython 2.6.1 for .NET 4.0 to complete this walkthrough.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can download IronPython 2.6.1 for .NET 4.0 from <bpt id="p1">[</bpt>CodePlex<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=187223)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creating a Custom Dynamic Object</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first project that you create in this walkthrough defines a custom dynamic object that searches the contents of a text file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Text to search for is specified by the name of a dynamic property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, if calling code specifies <ph id="ph1">`dynamicFile.Sample`</ph>, the dynamic class returns a generic list of strings that contains all of the lines from the file that begin with "Sample".</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The search is case-insensitive.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The dynamic class also supports two optional arguments.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The first argument is a search option enum value that specifies that the dynamic class should search for matches at the start of the line, the end of the line, or anywhere in the line.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The second argument specifies that the dynamic class should trim leading and trailing spaces from each line before searching.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, if calling code specifies <ph id="ph1">`dynamicFile.Sample(StringSearchOption.Contains)`</ph>, the dynamic class searches for "Sample" anywhere in a line.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If calling code specifies <ph id="ph1">`dynamicFile.Sample(StringSearchOption.StartsWith, false)`</ph>, the dynamic class searches for "Sample" at the start of each line, and does not remove leading and trailing spaces.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The default behavior of the dynamic class is to search for a match at the start of each line and to remove leading and trailing spaces.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To create a custom dynamic class</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Start <ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, point to <bpt id="p2">**</bpt>New<ept id="p2">**</ept> and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, in the <bpt id="p2">**</bpt>Project Types<ept id="p2">**</ept> pane, make sure that <bpt id="p3">**</bpt>Windows<ept id="p3">**</ept> is selected.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Templates<ept id="p2">**</ept> pane.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type <ph id="ph1">`DynamicSample`</ph>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The new project is created.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Right-click the DynamicSample project and point to <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Class<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type <ph id="ph1">`ReadOnlyFile`</ph>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A new file is added that contains the ReadOnlyFile class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>At the top of the ReadOnlyFile.cs or ReadOnlyFile.vb file, add the following code to import the <ph id="ph1">&lt;xref:System.IO?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic?displayProperty=fullName&gt;</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthrough#1<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_1.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthrough#1<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_1.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The custom dynamic object uses an enum to determine the search criteria.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Before the class statement, add the following enum definition.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthrough#2<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_2.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthrough#2<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_2.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Update the class statement to inherit the <ph id="ph1">`DynamicObject`</ph> class, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthrough#3<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_3.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthrough#3<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_3.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`ReadOnlyFile`</ph> class to define a private field for the file path and a constructor for the <ph id="ph2">`ReadOnlyFile`</ph> class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthrough#4<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_4.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthrough#4<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_4.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`GetPropertyValue`</ph> method to the <ph id="ph2">`ReadOnlyFile`</ph> class.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetPropertyValue`</ph> method takes, as input, search criteria and returns the lines from a text file that match that search criteria.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The dynamic methods provided by the <ph id="ph1">`ReadOnlyFile`</ph> class call the <ph id="ph2">`GetPropertyValue`</ph> method to retrieve their respective results.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthrough#5<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_5.cs)</ept><ept id="p1">]</ept>   <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthrough#5<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_5.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`GetPropertyValue`</ph> method, add the following code to override the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> method is called when a member of a dynamic class is requested and no arguments are specified.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`binder`</ph> argument contains information about the referenced member, and the <ph id="ph2">`result`</ph> argument references the result returned for the specified member.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> method returns a Boolean value that returns <ph id="ph2">`true`</ph> if the requested member exists; otherwise it returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthrough#6<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_6.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthrough#6<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_6.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`TryGetMember`</ph> method, add the following code to override the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> method is called when a member of a dynamic class is requested with arguments.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`binder`</ph> argument contains information about the referenced member, and the <ph id="ph2">`result`</ph> argument references the result returned for the specified member.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`args`</ph> argument contains an array of the arguments that are passed to the member.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> method returns a Boolean value that returns <ph id="ph2">`true`</ph> if the requested member exists; otherwise it returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The custom version of the <ph id="ph1">`TryInvokeMember`</ph> method expects the first argument to be a value from the <ph id="ph2">`StringSearchOption`</ph> enum that you defined in a previous step.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TryInvokeMember`</ph> method expects the second argument to be a Boolean value.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If one or both arguments are valid values, they are passed to the <ph id="ph1">`GetPropertyValue`</ph> method to retrieve the results.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthrough#7<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_7.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthrough#7<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_7.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Save and close the file.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To create a sample text file</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Right-click the DynamicSample project and point to <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>New Item<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, select <bpt id="p2">**</bpt>General<ept id="p2">**</ept>, and then select the <bpt id="p3">**</bpt>Text File<ept id="p3">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Leave the default name of TextFile1.txt in the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, and then click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A new text file is added to the project.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Copy the following text to the TextFile1.txt file.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Save and close the file.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To create a sample application that uses the custom dynamic object</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, double-click the Module1.vb file if you are using <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> or the Program.cs file if you are using Visual C#.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Add the following code to the Main procedure to create an instance of the <ph id="ph1">`ReadOnlyFile`</ph> class for the TextFile1.txt file.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The code uses late binding to call dynamic members and retrieve lines of text that contain the string "Customer".</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthrough#8<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_8.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthrough#8<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_8.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Save the file and press CTRL+F5 to build and run the application.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Calling a Dynamic Language Library</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The next project that you create in this walkthrough accesses a library that is written in the dynamic language IronPython.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Before you create this project, you must have IronPython 2.6.1 for .NET 4.0 installed.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can download IronPython 2.6.1 for .NET 4.0 from <bpt id="p1">[</bpt>CodePlex<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=187223)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To create a custom dynamic class</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph>, on the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, point to <bpt id="p2">**</bpt>New<ept id="p2">**</ept> and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, in the <bpt id="p2">**</bpt>Project Types<ept id="p2">**</ept> pane, make sure that <bpt id="p3">**</bpt>Windows<ept id="p3">**</ept> is selected.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Templates<ept id="p2">**</ept> pane.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type <ph id="ph1">`DynamicIronPythonSample`</ph>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The new project is created.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you are using <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, right-click the DynamicIronPythonSample project and then click <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you are using Visual C#, in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> folder and then click <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Browse<ept id="p1">**</ept> tab, browse to the folder where the IronPython libraries are installed.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, C:\Program Files\IronPython 2.6 for .NET 4.0.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>IronPython.dll<ept id="p1">**</ept>, <bpt id="p2">**</bpt>IronPython.Modules.dll<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Microsoft.Scripting.dll<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Microsoft.Dynamic.dll<ept id="p4">**</ept> libraries.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you are using <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, edit the Module1.vb file.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you are using Visual C#, edit the Program.cs file.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>At the top of the file, add the following code to import the <ph id="ph1">`Microsoft.Scripting.Hosting`</ph> and <ph id="ph2">`IronPython.Hosting`</ph> namespaces from the IronPython libraries.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthroughIronPython#1<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_9.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthroughIronPython#1<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_9.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In the Main method, add the following code to create a new <ph id="ph1">`Microsoft.Scripting.Hosting.ScriptRuntime`</ph> object to host the IronPython libraries.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ScriptRuntime`</ph> object loads the IronPython library module random.py.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthroughIronPython#2<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_10.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthroughIronPython#2<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_10.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>After the code to load the random.py module, add the following code to create an array of integers.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The array is passed to the <ph id="ph1">`shuffle`</ph> method of the random.py module, which randomly sorts the values in the array.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>VbDynamicWalkthroughIronPython#3<ept id="p2">](../../../csharp/programming-guide/types/codesnippet/CSharp/walkthrough-creating-and-using-dynamic-objects_11.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbDynamicWalkthroughIronPython#3<ept id="p4">](../../../csharp/programming-guide/types/codesnippet/VisualBasic/walkthrough-creating-and-using-dynamic-objects_11.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Save the file and press CTRL+F5 to build and run the application.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Type dynamic<ept id="p1">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Early and Late Binding<ept id="p1">](../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>dynamic<ept id="p1">](../../../csharp/language-reference/keywords/dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Implementing Dynamic Interfaces (external blog)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=230895)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>