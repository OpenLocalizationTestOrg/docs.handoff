<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed3d3fcd7570a3cc9995085edf7313cb661aa08a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\network-programming\using-an-asynchronous-server-socket.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6527c2232cc9bc65fd87be919e07b0183b466cc7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c442a77e1fd7f61ffef6a57a6b70e6f7f352ebf6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using an Asynchronous Server Socket | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using an Asynchronous Server Socket</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Asynchronous server sockets use the .NET Framework asynchronous programming model to process network service requests.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class follows the standard .NET Framework asynchronous naming pattern; for example, the synchronous <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Accept%2A&gt;</ph> method corresponds to the asynchronous <ph id="ph3">&lt;xref:System.Net.Sockets.Socket.BeginAccept%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Net.Sockets.Socket.EndAccept%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An asynchronous server socket requires a method to begin accepting connection requests from the network, a callback method to handle the connection requests and begin receiving data from the network, and a callback method to end receiving the data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>All these methods are discussed further in this section.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the following example, to begin accepting connection requests from the network, the method <ph id="ph1">`StartListening`</ph> initializes the <bpt id="p1">**</bpt>Socket<ept id="p1">**</ept> and then uses the <bpt id="p2">**</bpt>BeginAccept<ept id="p2">**</ept> method to start accepting new connections.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The accept callback method is called when a new connection request is received on the socket.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is responsible for getting the <bpt id="p1">**</bpt>Socket<ept id="p1">**</ept> instance that will handle the connection and handing that <bpt id="p2">**</bpt>Socket<ept id="p2">**</ept> off to the thread that will process the request.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The accept callback method implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate; it returns a void and takes a single parameter of type <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example is the shell of an accept callback method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>BeginAccept<ept id="p1">**</ept> method takes two parameters, an <bpt id="p2">**</bpt>AsyncCallback<ept id="p2">**</ept> delegate that points to the accept callback method and an object that is used to pass state information to the callback method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the following example, the listening <bpt id="p1">**</bpt>Socket<ept id="p1">**</ept> is passed to the callback method through the <bpt id="p2">*</bpt>state<ept id="p2">*</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This example creates an <bpt id="p1">**</bpt>AsyncCallback<ept id="p1">**</ept> delegate and starts accepting connections from the network.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Asynchronous sockets use threads from the system thread pool to process incoming connections.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>One thread is responsible for accepting connections, another thread is used to handle each incoming connection, and another thread is responsible for receiving data from the connection.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These could be the same thread, depending on which thread is assigned by the thread pool.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent?displayProperty=fullName&gt;</ph> class suspends execution of the main thread and signals when execution can continue.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows an asynchronous method that creates an asynchronous TCP/IP socket on the local computer and begins accepting connections.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It assumes that there is a global <bpt id="p1">**</bpt>ManualResetEvent<ept id="p1">**</ept> named <ph id="ph1">`allDone`</ph>, that the method is a member of a class named <ph id="ph2">`SocketListener`</ph>, and that a callback method named <ph id="ph3">`acceptCallback`</ph> is defined.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The accept callback method (<ph id="ph1">`acceptCallback`</ph> in the preceding example) is responsible for signaling the main application thread to continue processing, establishing the connection with the client, and starting the asynchronous read of data from the client.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example is the first part of an implementation of the <ph id="ph1">`acceptCallback`</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This section of the method signals the main application thread to continue processing and establishes the connection to the client.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It assumes a global <bpt id="p1">**</bpt>ManualResetEvent<ept id="p1">**</ept> named <ph id="ph1">`allDone`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Reading data from a client socket requires a state object that passes values between asynchronous calls.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example implements a state object for receiving a string from the remote client.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It contains fields for the client socket, a data buffer for receiving data, and a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> for creating the data string sent by the client.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Placing these fields in the state object allows their values to be preserved across multiple calls to read data from the client socket.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The section of the <ph id="ph1">`acceptCallback`</ph> method that starts receiving the data from the client socket first initializes an instance of the <ph id="ph2">`StateObject`</ph> class and then calls the <ph id="ph3">&lt;xref:System.Net.Sockets.Socket.BeginReceive%2A&gt;</ph> method to start reading the data from the client socket asynchronously.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows the complete <ph id="ph1">`acceptCallback`</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It assumes that there is a global <bpt id="p1">**</bpt>ManualResetEvent<ept id="p1">**</ept> named <ph id="ph1">`allDone,`</ph> that the <ph id="ph2">`StateObject`</ph> class is defined, and that the <ph id="ph3">`readCallback`</ph> method is defined in a class named <ph id="ph4">`SocketListener`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The final method that needs to be implemented for the asynchronous socket server is the read callback method that returns the data sent by the client.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Like the accept callback method, the read callback method is an <bpt id="p1">**</bpt>AsyncCallback<ept id="p1">**</ept> delegate.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This method reads one or more bytes from the client socket into the data buffer and then calls the <bpt id="p1">**</bpt>BeginReceive<ept id="p1">**</ept> method again until the data sent by the client is complete.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Once the entire message has been read from the client, the string is displayed on the console and the server socket handling the connection to the client is closed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following sample implements the <ph id="ph1">`readCallback`</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It assumes that the <ph id="ph1">`StateObject`</ph> class is defined.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using a Synchronous Server Socket<ept id="p1">](../../../docs/framework/network-programming/using-a-synchronous-server-socket.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Asynchronous Server Socket Example<ept id="p1">](../../../docs/framework/network-programming/asynchronous-server-socket-example.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Threading<ept id="p1">](../../../docs/standard/threading/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Listening with Sockets<ept id="p1">](../../../docs/framework/network-programming/listening-with-sockets.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>