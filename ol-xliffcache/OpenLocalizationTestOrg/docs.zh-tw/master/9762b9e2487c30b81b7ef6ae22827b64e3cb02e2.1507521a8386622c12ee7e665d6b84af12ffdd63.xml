{"content":"---\ntitle: \"How to: access a member with a pointer - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"pointers [C#], member access\"\nms.assetid: 1e998498-8c85-4a78-8ce2-4d8c20f08342\n---\n# How to: access a member with a pointer (C# Programming Guide)\nTo access a member of a struct that is declared in an unsafe context, you can use the member access operator as shown in the following example in which `p` is a pointer to a [struct](../../../csharp/language-reference/keywords/struct.md) that contains a member `x`.  \n  \n```  \nCoOrds* p = &home;  \np -> x = 25; //member access operator ->  \n```  \n  \n## Example  \n In this example, a [struct](../../../csharp/language-reference/keywords/struct.md), `CoOrds`, that contains the two coordinates `x` and `y` is declared and instantiated. By using the member access operator `->` and a pointer to the instance `home`, `x` and `y` are assigned values.  \n  \n> [!NOTE]\n>  Notice that the expression `p->x` is equivalent to the expression `(*p).x`, and you can obtain the same result by using either of the two expressions.  \n  \n [!code-csharp[csProgGuidePointers#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers2.cs#9)]  \n  \n [!code-csharp[csProgGuidePointers#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers.cs#10)]  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)\n- [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)\n- [Types](../../../csharp/language-reference/keywords/types.md)\n- [unsafe](../../../csharp/language-reference/keywords/unsafe.md)\n- [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)\n- [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)\n","nodes":[{"pos":[4,220],"embed":true,"restype":"x-metadata","content":"title: \"How to: access a member with a pointer - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"pointers [C#], member access\"\nms.assetid: 1e998498-8c85-4a78-8ce2-4d8c20f08342","nodes":[{"content":"How to: access a member with a pointer - C# Programming Guide","nodes":[{"pos":[0,61],"content":"How to: access a member with a pointer - C# Programming Guide","nodes":[{"content":"How to: access a member with a pointer - C# Programming Guide","pos":[0,61]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[227,288],"content":"How to: access a member with a pointer (C# Programming Guide)","linkify":"How to: access a member with a pointer (C# Programming Guide)","nodes":[{"content":"How to: access a member with a pointer (C# Programming Guide)","pos":[0,61]}]},{"pos":[289,554],"content":"To access a member of a struct that is declared in an unsafe context, you can use the member access operator as shown in the following example in which <ph id=\"ph1\">`p`</ph> is a pointer to a <bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../../../csharp/language-reference/keywords/struct.md)</ept> that contains a member <ph id=\"ph2\">`x`</ph>.","source":"To access a member of a struct that is declared in an unsafe context, you can use the member access operator as shown in the following example in which `p` is a pointer to a [struct](../../../csharp/language-reference/keywords/struct.md) that contains a member `x`."},{"pos":[642,649],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a <bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../../../csharp/language-reference/keywords/struct.md)</ept>, <ph id=\"ph1\">`CoOrds`</ph>, that contains the two coordinates <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph> is declared and instantiated.","pos":[653,822],"source":"In this example, a [struct](../../../csharp/language-reference/keywords/struct.md), `CoOrds`, that contains the two coordinates `x` and `y` is declared and instantiated."},{"content":"By using the member access operator <ph id=\"ph1\">`-&gt;`</ph> and a pointer to the instance <ph id=\"ph2\">`home`</ph>, <ph id=\"ph3\">`x`</ph> and <ph id=\"ph4\">`y`</ph> are assigned values.","pos":[823,934],"source":" By using the member access operator `->` and a pointer to the instance `home`, `x` and `y` are assigned values."},{"pos":[942,1103],"content":"[!NOTE]\n Notice that the expression `p->x` is equivalent to the expression `(*p).x`, and you can obtain the same result by using either of the two expressions.","leadings":["","> "],"nodes":[{"content":"Notice that the expression <ph id=\"ph1\">`p-&gt;x`</ph> is equivalent to the expression <ph id=\"ph2\">`(*p).x`</ph>, and you can obtain the same result by using either of the two expressions.","pos":[9,159],"source":"Notice that the expression `p->x` is equivalent to the expression `(*p).x`, and you can obtain the same result by using either of the two expressions."}]},{"pos":[1373,1381],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1385,1451],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1454,1554],"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept>","source":"[Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)"},{"pos":[1557,1645],"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept>","source":"[Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)"},{"pos":[1648,1709],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept>","source":"[Types](../../../csharp/language-reference/keywords/types.md)"},{"pos":[1712,1775],"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept>","source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md)"},{"pos":[1778,1859],"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept>","source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)"},{"pos":[1862,1933],"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","source":"[stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}