<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ef8b93bf0a2cf98c5251b888b61db9ab12d9a71</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tour-of-csharp\attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">031da66b116359d1379d912b22308687a5839a11</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b1c360c66b87d00e05c03a2b256d4f01120feb2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C# Attributes | A tour of the C# language</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn about declarative programming using attributes in C#</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, csharp</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Attributes</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Types, members, and other entities in a C# program support modifiers that control certain aspects of their behavior.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, the accessibility of a method is controlled using the <ph id="ph1">`public`</ph>, <ph id="ph2">`protected`</ph>, <ph id="ph3">`internal`</ph>, and <ph id="ph4">`private`</ph> modifiers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>C# generalizes this capability such that user-defined types of declarative information can be attached to program entities and retrieved at run-time.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Programs specify this additional declarative information by defining and using <bpt id="p1">***</bpt>attributes<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example declares a <ph id="ph1">`HelpAttribute`</ph> attribute that can be placed on program entities to provide links to their associated documentation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AttributeDefined<ept id="p2">](../../../samples/snippets/csharp/tour/attributes/Program.cs#L3-L20)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All attribute classes derive from the <ph id="ph1">@System.Attribute</ph> base class provided by the standard library.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Attributes can be applied by giving their name, along with any arguments, inside square brackets just before the associated declaration.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If an attributeâ€™s name ends in <ph id="ph1">`Attribute`</ph>, that part of the name can be omitted when the attribute is referenced.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`HelpAttribute`</ph> attribute can be used as follows.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AttributeApplied<ept id="p2">](../../../samples/snippets/csharp/tour/attributes/Program.cs#L22-L28)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example attaches a <ph id="ph1">`HelpAttribute`</ph> to the <ph id="ph2">`Widget`</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It adds another <ph id="ph1">`HelpAttribute`</ph> to the <ph id="ph2">`Display`</ph> method in the class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The public constructors of an attribute class control the information that must be provided when the attribute is attached to a program entity.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Additional information can be provided by referencing public read-write properties of the attribute class (such as the reference to the <ph id="ph1">`Topic`</ph> property previously).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When a particular attribute is requested through reflection, the constructor for the attribute class is invoked with the information provided in the program source, and the resulting attribute instance is returned.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If additional information was provided through properties, those properties are set to the given values before the attribute instance is returned.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous<ept id="p1">](delegates.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>