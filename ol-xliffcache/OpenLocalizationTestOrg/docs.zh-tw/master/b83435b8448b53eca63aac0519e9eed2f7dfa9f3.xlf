<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="null-conditional-operators.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b83435b8448b53eca63aac0519e9eed2f7dfa9f3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\null-conditional-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5728f93761cea51d7719840f9481cb8e260db023</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8381acb118ac3a7b81e3b395c5eb8facefa7cd6c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Null-conditional Operators (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>?.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>and ?() null-conditional operators (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Tests the value of the left-hand operand for null (<ph id="ph1">`Nothing`</ph>) before performing a member access (<ph id="ph2">`?.`</ph>) or index (<ph id="ph3">`?()`</ph>) operation; returns <ph id="ph4">`Nothing`</ph> if the left-hand operand evaluates to <ph id="ph5">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Note that in expressions that ordinarily return value types, the null-conditional operator returns a <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These operators help you write less code to handle null checks, especially when descending into data structures.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For comparison, the alternative code for the first of these expressions without a null-conditional operator is:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The null-conditional operators are short-circuiting.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If one operation in a chain of conditional member access and index operations returns <ph id="ph1">`Nothing`</ph>, the rest of the chainâ€™s execution stops.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`C(E)`</ph> isn't evaluated if <ph id="ph2">`A`</ph>, <ph id="ph3">`B`</ph>, or <ph id="ph4">`C`</ph> evaluates to <ph id="ph5">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Another use for null-conditional member access is to invoke delegates in a thread-safe way with much less code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example defines two types, a <ph id="ph1">`NewsBroadcaster`</ph> and a <ph id="ph2">`NewsReceiver`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>News items are sent to the receiver by the <ph id="ph1">`NewsBroadcaster.SendNews`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If there are no elements in the <ph id="ph1">`SendNews`</ph> invocation list, the <ph id="ph2">`SendNews`</ph> delegate throws a <ph id="ph3">&lt;xref:System.NullReferenceException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Before null conditional operators, code like the following ensured that the delegate invocation list was not <ph id="ph1">`Nothing`</ph>:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The new way is much simpler:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The new way is thread-safe because the compiler generates code to evaluate <ph id="ph1">`SendNews`</ph> one time only, keeping the result in a temporary variable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You need to explicitly call the <ph id="ph1">`Invoke`</ph> method because there is no null-conditional delegate invocation syntax <ph id="ph2">`SendNews?(String)`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators (Visual Basic)<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Programming Guide<ept id="p1">](../../../visual-basic/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Language Reference<ept id="p1">](../../../visual-basic/language-reference/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>