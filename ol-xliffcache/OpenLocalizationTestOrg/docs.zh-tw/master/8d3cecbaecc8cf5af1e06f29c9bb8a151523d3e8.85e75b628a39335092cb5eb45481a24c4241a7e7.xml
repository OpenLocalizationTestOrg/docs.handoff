{"content":"---\ntitle: \"Delegates with Named vs. Anonymous Methods - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"delegates [C#], with named vs. anonymous methods\"\n  - \"methods [C#], in delegates\"\nms.assetid: 98fa8c61-66b6-4146-986c-3236c4045733\n---\n# Delegates with Named vs. Anonymous Methods (C# Programming Guide)\nA [delegate](../../../csharp/language-reference/keywords/delegate.md) can be associated with a named method. When you instantiate a delegate by using a named method, the method is passed as a parameter, for example:  \n  \n [!code-csharp[csProgGuideDelegates#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideDelegates/CS/Delegates.cs#1)]  \n  \n This is called using a named method. Delegates constructed with a named method can encapsulate either a [static](../../../csharp/language-reference/keywords/static.md) method or an instance method. Named methods are the only way to instantiate a delegate in earlier versions of C#. However, in a situation where creating a new method is unwanted overhead, C# enables you to instantiate a delegate and immediately specify a code block that the delegate will process when it is called. The block can contain either a lambda expression or an anonymous method. For more information, see [Anonymous Functions](../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md).  \n  \n## Remarks  \n The method that you pass as a delegate parameter must have the same signature as the delegate declaration.  \n  \n A delegate instance may encapsulate either static or instance method.  \n  \n Although the delegate can use an [out](../../../csharp/language-reference/keywords/out-parameter-modifier.md) parameter, we do not recommend its use with multicast event delegates because you cannot know which delegate will be called.  \n  \n## Example 1  \n The following is a simple example of declaring and using a delegate. Notice that both the delegate, `Del`, and the associated method, `MultiplyNumbers`, have the same signature  \n  \n [!code-csharp[csProgGuideDelegates#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideDelegates/CS/Delegates.cs#2)]  \n  \n## Example 2  \n In the following example, one delegate is mapped to both static and instance methods and returns specific information from each.  \n  \n [!code-csharp[csProgGuideDelegates#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideDelegates/CS/Delegates.cs#3)]  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Delegates](../../../csharp/programming-guide/delegates/index.md)\n- [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)\n- [How to: Combine Delegates (Multicast Delegates)](../../../csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)\n- [Events](../../../csharp/programming-guide/events/index.md)\n","nodes":[{"pos":[4,277],"embed":true,"restype":"x-metadata","content":"title: \"Delegates with Named vs. Anonymous Methods - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"delegates [C#], with named vs. anonymous methods\"\n  - \"methods [C#], in delegates\"\nms.assetid: 98fa8c61-66b6-4146-986c-3236c4045733","nodes":[{"content":"Delegates with Named vs. Anonymous Methods - C# Programming Guide","nodes":[{"pos":[0,65],"content":"Delegates with Named vs. Anonymous Methods - C# Programming Guide","nodes":[{"content":"Delegates with Named vs. Anonymous Methods - C# Programming Guide","pos":[0,65]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[284,349],"content":"Delegates with Named vs. Anonymous Methods (C# Programming Guide)","linkify":"Delegates with Named vs. Anonymous Methods (C# Programming Guide)","nodes":[{"content":"Delegates with Named vs. Anonymous Methods (C# Programming Guide)","pos":[0,65]}]},{"content":"A <bpt id=\"p1\">[</bpt>delegate<ept id=\"p1\">](../../../csharp/language-reference/keywords/delegate.md)</ept> can be associated with a named method.","pos":[350,458],"source":"A [delegate](../../../csharp/language-reference/keywords/delegate.md) can be associated with a named method."},{"content":"When you instantiate a delegate by using a named method, the method is passed as a parameter, for example:","pos":[459,565]},{"content":"This is called using a named method.","pos":[704,740]},{"content":"Delegates constructed with a named method can encapsulate either a <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> method or an instance method.","pos":[741,901],"source":" Delegates constructed with a named method can encapsulate either a [static](../../../csharp/language-reference/keywords/static.md) method or an instance method."},{"content":"Named methods are the only way to instantiate a delegate in earlier versions of C#.","pos":[902,985]},{"content":"However, in a situation where creating a new method is unwanted overhead, C# enables you to instantiate a delegate and immediately specify a code block that the delegate will process when it is called.","pos":[986,1187]},{"content":"The block can contain either a lambda expression or an anonymous method.","pos":[1188,1260]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Anonymous Functions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)</ept>.","pos":[1261,1400],"source":" For more information, see [Anonymous Functions](../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)."},{"pos":[1409,1416],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method that you pass as a delegate parameter must have the same signature as the delegate declaration.","pos":[1420,1526]},{"content":"A delegate instance may encapsulate either static or instance method.","pos":[1533,1602]},{"pos":[1609,1843],"content":"Although the delegate can use an <bpt id=\"p1\">[</bpt>out<ept id=\"p1\">](../../../csharp/language-reference/keywords/out-parameter-modifier.md)</ept> parameter, we do not recommend its use with multicast event delegates because you cannot know which delegate will be called.","source":"Although the delegate can use an [out](../../../csharp/language-reference/keywords/out-parameter-modifier.md) parameter, we do not recommend its use with multicast event delegates because you cannot know which delegate will be called."},{"pos":[1852,1861],"content":"Example 1","linkify":"Example 1","nodes":[{"content":"Example 1","pos":[0,9]}]},{"content":"The following is a simple example of declaring and using a delegate.","pos":[1865,1933]},{"content":"Notice that both the delegate, <ph id=\"ph1\">`Del`</ph>, and the associated method, <ph id=\"ph2\">`MultiplyNumbers`</ph>, have the same signature","pos":[1934,2041],"source":" Notice that both the delegate, `Del`, and the associated method, `MultiplyNumbers`, have the same signature"},{"pos":[2182,2191],"content":"Example 2","linkify":"Example 2","nodes":[{"content":"Example 2","pos":[0,9]}]},{"content":"In the following example, one delegate is mapped to both static and instance methods and returns specific information from each.","pos":[2195,2323]},{"pos":[2464,2472],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2476,2542],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2545,2610],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept>","source":"[Delegates](../../../csharp/programming-guide/delegates/index.md)"},{"pos":[2613,2721],"content":"<bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>","source":"[Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)"},{"pos":[2724,2866],"content":"<bpt id=\"p1\">[</bpt>How to: Combine Delegates (Multicast Delegates)<ept id=\"p1\">](../../../csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)</ept>","source":"[How to: Combine Delegates (Multicast Delegates)](../../../csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)"},{"pos":[2869,2928],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>","source":"[Events](../../../csharp/programming-guide/events/index.md)"}]}