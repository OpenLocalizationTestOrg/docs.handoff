<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="async-return-types.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2a15b87e97dea43c37f720856be2892ad6966a3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\async\async-return-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98084f84d2ddd2595fc0800580148f0e5f30f2c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14ca087ead183690fdd98a684fa4e2bc85b1f3d4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Async Return Types (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Async Return Types (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Async methods can have the following return types:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, for an async method that returns a value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, for an async method that performs an operation but returns no value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`void`</ph>, for an event handler.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, any type that has an accessible <ph id="ph1">`GetAwaiter`</ph> method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The object returned by the <ph id="ph1">`GetAwaiter`</ph> method must implement the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ICriticalNotifyCompletion?displayProperty=nameWithType&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about async methods, see <bpt id="p1">[</bpt>Asynchronous Programming with async and await (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each return type is examined in one of the following sections, and you can find a full example that uses all three types at the end of the topic.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_TaskTReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Task<ph id="ph1">\&lt;</ph>TResult<ph id="ph2">\&gt;</ph> Return Type</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> return type is used for an async method that contains a <bpt id="p1">[</bpt>return<ept id="p1">](../../../../csharp/language-reference/keywords/return.md)</ept> (C#) statement in which the operand has type <ph id="ph2">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`GetLeisureHours`</ph> async method contains a <ph id="ph2">`return`</ph> statement that returns an integer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Therefore, the method declaration must specify a return type of <ph id="ph1">`Task&lt;int&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> async method is a placeholder for an operation that returns a string.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`GetLeisureHours`</ph> is called from within an await expression in the <ph id="ph2">`ShowTodaysInfo`</ph> method, the await expression retrieves the integer value (the value of <ph id="ph3">`leisureHours`</ph>) that's stored in the task returned by the <ph id="ph4">`GetLeisureHours`</ph> method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about await expressions, see <bpt id="p1">[</bpt>await<ept id="p1">](../../../../csharp/language-reference/keywords/await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can better understand how this happens by separating the call to <ph id="ph1">`GetLeisureHours`</ph> from the application of <ph id="ph2">`await`</ph>, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A call to method <ph id="ph1">`GetLeisureHours`</ph> that isn't immediately awaited returns a <ph id="ph2">`Task&lt;int&gt;`</ph>, as you would expect from the declaration of the method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The task is assigned to the <ph id="ph1">`integerTask`</ph> variable in the example.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`integerTask`</ph> is a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, it contains a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result&gt;</ph> property of type <ph id="ph4">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`TResult`</ph> represents an integer type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`await`</ph> is applied to <ph id="ph2">`integerTask`</ph>, the await expression evaluates to the contents of the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property of <ph id="ph4">`integerTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">`ret`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property is a blocking property.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you try to access it before its task is finished, the thread that's currently active is blocked until the task completes and the value is available.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In most cases, you should access the value by using <ph id="ph1">`await`</ph> instead of accessing the property directly.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The previous example retrieved the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property to block the main thread so that the <ph id="ph2">`ShowTodaysInfo`</ph> method could finish execution before the application ended.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_TaskReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Task Return Type</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Async methods that don't contain a <ph id="ph1">`return`</ph> statement or that contain a <ph id="ph2">`return`</ph> statement that doesn't return an operand usually have a return type of <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Such methods return <ph id="ph1">`void`</ph> if they run synchronously.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you use a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> return type for an async method, a calling method can use an <ph id="ph2">`await`</ph> operator to suspend the caller's completion until the called async method has finished.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`WaitAndApologize`</ph> async method doesn't contain a <ph id="ph2">`return`</ph> statement, so the method returns a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This enables <ph id="ph1">`WaitAndApologize`</ph> to be awaited.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> type doesn't include a <ph id="ph2">`Result`</ph> property because it has no return value.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WaitAndApologize`</ph> is awaited by using an await statement instead of an await expression, similar to the calling statement for a synchronous void-returning method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The application of an await operator in this case doesn't produce a value.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As in the previous <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> example, you can separate the call to <ph id="ph2">`WaitAndApologize`</ph> from the application of an await operator, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, remember that a <ph id="ph1">`Task`</ph> doesn't have a <ph id="ph2">`Result`</ph> property, and that no value is produced when an await operator is applied to a <ph id="ph3">`Task`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code separates calling the <ph id="ph1">`WaitAndApologize`</ph> method from awaiting the task that the method returns.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_VoidReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Void return type</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`void`</ph> return type in asynchronous event handlers, which require a <ph id="ph2">`void`</ph> return type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For methods other than event handlers that don't return a value, you should return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instead, because an async method that returns <ph id="ph2">`void`</ph> can't be awaited.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Any caller of such a method must be able to continue to completion without waiting for the called async method to finish, and the caller must be independent of any values or exceptions that the async method generates.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The caller of a void-returning async method can't catch exceptions that are thrown from the method, and such unhandled exceptions are likely to cause your application to fail.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If an exception occurs in an async method that returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, the exception is stored in the returned task and is rethrown when the task is awaited.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Therefore, make sure that any async method that can produce an exception has a return type of <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> and that calls to the method are awaited.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about how to catch exceptions in async methods, see the <bpt id="p1">[</bpt>Exceptions in Async Methods<ept id="p1">](../../../language-reference/keywords/try-catch.md#exceptions-in-async-methods)</ept> section of the <bpt id="p2">[</bpt>try-catch<ept id="p2">](../../../language-reference/keywords/try-catch.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example shows the behavior of an async event handler.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Note that in the example code, an async event handler must let the main thread know when it finishes.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Then the main thread can wait for an async event handler to complete before exiting the program.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Generalized async return types and ValueTask<ph id="ph1">\&lt;</ph>TResult<ph id="ph2">\&gt;</ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, an async method can return any type that has an accessible <ph id="ph1">`GetAwaiter`</ph> method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> are reference types, memory allocation in performance-critical paths, particularly when allocations occur in tight loops, can adversely affect performance.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Support for generalized return types means that you can return a lightweight value type instead of a reference type to avoid additional memory allocations.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>.NET provides the <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType&gt;</ph> structure as a light-weight implementation of a generalized task-returning value.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType&gt;</ph> type, you must add the <ph id="ph2">`System.Threading.Tasks.Extensions`</ph> NuGet package to your project.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> structure to retrieve the value of two dice rolls.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using async and await (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Control Flow in Async Programs (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>async<ept id="p1">](../../../../csharp/language-reference/keywords/async.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](../../../../csharp/language-reference/keywords/await.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>