<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">609fd25f5604c0489998ca971181806a657cf2d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\how-to-combine-linq-queries-with-regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe0d97f80136d40d91996570373041e47565a191</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02db4554e39ffd53fb2152191e1ba1906fd8fc93</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Combine LINQ Queries with Regular Expressions (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Combine LINQ Queries with Regular Expressions (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class to create a regular expression for more complex matching in text strings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The LINQ query makes it easy to filter on exactly the files that you want to search with the regular expression, and to shape the results.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Note that you can also query the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object that is returned by a <ph id="ph2">`RegEx`</ph> search.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In this example only the value of each match is produced in the results.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, it is also possible to use LINQ to perform all kinds of filtering, sorting, and grouping on that collection.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> is a non-generic <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> collection, you have to explicitly state the type of the range variable in the query.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id="ph1">`using`</ph> directives for the System.Linq and System.IO namespaces.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ and Strings (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ and File Directories (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>