<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66d79b3e03226735b140180f7dc0b76974ac232c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\varieties-of-custom-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c28902fcbae2bcb4a53147a4ce56276425cfcbf0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba0e2466f6124b59bc0272538a11b428f3e6339e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Varieties of Custom Controls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Varieties of Custom Controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>With the .NET Framework, you can develop and implement new controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can extend the functionality of the familiar user control as well as existing controls through inheritance.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also write custom controls that perform their own painting.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Deciding which kind of control to create can be confusing.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic highlights the differences among the various kinds of controls from which you can inherit, and provides you with information about how to choose a particular kind of control for your project.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For information about authoring a control to use on Web Forms, see <bpt id="p1">[</bpt>Developing Custom ASP.NET Server Controls<ept id="p1">](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Base Control Class</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for Windows Forms controls.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It provides the infrastructure required for visual display in Windows Forms applications.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class performs the following tasks to provide visual display in Windows Forms applications:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Exposes a window handle.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Manages message routing.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Provides mouse and keyboard events, and many other user interface events.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Provides advanced layout features.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Contains many properties specific to visual display, such as <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Provides the security and threading support necessary for a Windows Forms control to act as a Microsoft® ActiveX® control.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because so much of the infrastructure is provided by the base class, it is relatively easy to develop your own Windows Forms controls.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Kinds of Controls</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Windows Forms supports three kinds of user-defined controls: <bpt id="p1">*</bpt>composite<ept id="p1">*</ept>, <bpt id="p2">*</bpt>extended<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>custom<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following sections describe each kind of control and give recommendations for choosing the kind to use in your projects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Composite Controls</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A composite control is a collection of Windows Forms controls encapsulated in a common container.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This kind of control is sometimes called a <bpt id="p1">*</bpt>user control<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The contained controls are called <bpt id="p1">*</bpt>constituent controls<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A composite control holds all of the inherent functionality associated with each of the contained Windows Forms controls and enables you to selectively expose and bind their properties.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A composite control also provides a great deal of default keyboard handling functionality with no extra development effort on your part.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, a composite control could be built to display customer address data from a database.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This control could include a <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control to display the database fields, a <ph id="ph2">&lt;xref:System.Windows.Forms.BindingSource&gt;</ph> to handle binding to a data source, and a <ph id="ph3">&lt;xref:System.Windows.Forms.BindingNavigator&gt;</ph> control to move through the records.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You could selectively expose data binding properties, and you could package and reuse the entire control from application to application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For an example of this kind of composite control, see <bpt id="p1">[</bpt>How to: Apply Attributes in Windows Forms Controls<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-apply-attributes-in-windows-forms-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To author a composite control, derive from the <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> base class provides keyboard routing for child controls and enables child controls to work as a group.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Developing a Composite Windows Forms Control<ept id="p1">](../../../../docs/framework/winforms/controls/developing-a-composite-windows-forms-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Inherit from the <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> class if:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You want to combine the functionality of several Windows Forms controls into a single reusable unit.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Extended Controls</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can derive an inherited control from any existing Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>With this approach, you can retain all of the inherent functionality of a Windows Forms control, and then extend that functionality by adding custom properties, methods, or other features.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>With this option, you can override the base control's paint logic, and then extend its user interface by changing its appearance.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, you can create a control derived from the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control that tracks how many times a user has clicked it.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In some controls, you can also add a custom appearance to the graphical user interface of your control by overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method of the base class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For an extended button that tracks clicks, you can override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method to call the base implementation of <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph>, and then draw the click count in one corner of the <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> control's client area.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Inherit from a Windows Forms control if:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Most of the functionality you need is already identical to an existing Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You do not need a custom graphical user interface, or you want to design a new graphical user interface for an existing control.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Custom Controls</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Another way to create a control is to create one substantially from the beginning by inheriting from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class provides all of the basic functionality required by controls, including mouse and keyboard handling events, but no control-specific functionality or graphical interface.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Creating a control by inheriting from the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class requires much more thought and effort than inheriting from <ph id="ph2">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> or an existing Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Because a great deal of implementation is left for you, your control can have greater flexibility than a composite or extended control, and you can tailor your control to suit your exact needs.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To implement a custom control, you must write code for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> event of the control, as well as any feature-specific code you need.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can also override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method and handle windows messages directly.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This is the most powerful way to create a control, but to use this technique effectively, you need to be familiar with the Microsoft Win32® API.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An example of a custom control is a clock control that duplicates the appearance and behavior of an analog clock.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Custom painting is invoked to cause the hands of the clock to move in response to <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> events from an internal <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Develop a Simple Windows Forms Control<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-develop-a-simple-windows-forms-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Inherit from the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class if:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You want to provide a custom graphical representation of your control.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You need to implement custom functionality that is not available through standard controls.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Although the Windows Forms infrastructure has been optimized to host Windows Forms controls, you can still use ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>There is support for this task in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add ActiveX Controls to Windows Forms<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-add-activex-controls-to-windows-forms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Windowless Controls</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The Microsoft Visual Basic® 6.0and ActiveX technologies support <bpt id="p1">*</bpt>windowless<ept id="p1">*</ept> controls.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Windowless controls are not supported in Windows Forms.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Custom Design Experience</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you need to implement a custom design-time experience, you can author your own designer.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For composite controls, derive your custom designer class from the <ph id="ph1">&lt;xref:System.Windows.Forms.Design.ParentControlDesigner&gt;</ph> or the <ph id="ph2">&lt;xref:System.Windows.Forms.Design.DocumentDesigner&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For extended and custom controls, derive your custom designer class from the <ph id="ph1">&lt;xref:System.Windows.Forms.Design.ControlDesigner&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ComponentModel.DesignerAttribute&gt;</ph> to associate your control with your designer.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extending Design-Time Support<ept id="p1">](http://msdn.microsoft.com/library/d6ac8a6a-42fd-4bc8-bf33-b212811297e2)</ept> and <bpt id="p2">[</bpt>How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features<ept id="p2">](http://msdn.microsoft.com/library/8e0bad0e-56f3-43d2-bf63-a945c654d97c)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id="p1">](../../../../docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Develop a Simple Windows Forms Control<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-develop-a-simple-windows-forms-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Developing a Composite Windows Forms Control<ept id="p1">](../../../../docs/framework/winforms/controls/developing-a-composite-windows-forms-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Extending Design-Time Support<ept id="p1">](http://msdn.microsoft.com/library/d6ac8a6a-42fd-4bc8-bf33-b212811297e2)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features<ept id="p1">](http://msdn.microsoft.com/library/8e0bad0e-56f3-43d2-bf63-a945c654d97c)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>