{"content":"---\ntitle: \"How to: Call an Event Handler in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Visual Basic code, procedures\"\n  - \"event handlers [Visual Basic], calling\"\n  - \"event handlers\"\n  - \"procedures [Visual Basic], event handlers\"\n  - \"procedures [Visual Basic], calling\"\nms.assetid: 72e18ef8-144e-40df-a1f4-066a57271e28\n---\n# How to: Call an Event Handler in Visual Basic\nAn *event* is an action or occurrence — such as a mouse click or a credit limit exceeded — that is recognized by some program component, and for which you can write code to respond. An *event handler* is the code you write to respond to an event.  \n  \n An event handler in Visual Basic is a `Sub` procedure. However, you do not normally call it the same way as other `Sub` procedures. Instead, you identify the procedure as a handler for the event. You can do this either with a [Handles](../../../../visual-basic/language-reference/statements/handles-clause.md) clause and a [WithEvents](../../../../visual-basic/language-reference/modifiers/withevents.md) variable, or with an [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md). Using a `Handles` clause is the default way to declare an event handler in Visual Basic. This is the way the event handlers are written by the designers when you program in the integrated development environment (IDE). The `AddHandler` statement is suitable for raising events dynamically at run time.  \n  \n When the event occurs, Visual Basic automatically calls the event handler procedure. Any code that has access to the event can cause it to occur by executing a [RaiseEvent Statement](../../../../visual-basic/language-reference/statements/raiseevent-statement.md).  \n  \n You can associate more than one event handler with the same event. In some cases you can dissociate a handler from an event. For more information, see [Events](../../../../visual-basic/programming-guide/language-features/events/index.md).  \n  \n### To call an event handler using Handles and WithEvents  \n  \n1.  Make sure the event is declared with an [Event Statement](../../../../visual-basic/language-reference/statements/event-statement.md).  \n  \n2.  Declare an object variable at module or class level, using the [WithEvents](../../../../visual-basic/language-reference/modifiers/withevents.md) keyword. The `As` clause for this variable must specify the class that raises the event.  \n  \n3.  In the declaration of the event-handling `Sub` procedure, add a [Handles](../../../../visual-basic/language-reference/statements/handles-clause.md) clause that specifies the `WithEvents` variable and the event name.  \n  \n4.  When the event occurs, Visual Basic automatically calls the `Sub` procedure. Your code can use a `RaiseEvent` statement to make the event occur.  \n  \n     The following example defines an event and a `WithEvents` variable that refers to the class that raises the event. The event-handling `Sub` procedure uses a `Handles` clause to specify the class and event it handles.  \n  \n     [!code-vb[VbVbcnProcedures#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnProcedures/VB/Class1.vb#4)]  \n  \n### To call an event handler using AddHandler  \n  \n1.  Make sure the event is declared with an `Event` statement.  \n  \n2.  Execute an [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md) to dynamically connect the event-handling `Sub` procedure with the event.  \n  \n3.  When the event occurs, Visual Basic automatically calls the `Sub` procedure. Your code can use a `RaiseEvent` statement to make the event occur.  \n  \n     The following example defines a `Sub` procedure to handle the <xref:System.Windows.Forms.Form.Closing> event of a form. It then uses the [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md) to associate the `catchClose` procedure as an event handler for <xref:System.Windows.Forms.Form.Closing>.  \n  \n     [!code-vb[VbVbcnProcedures#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnProcedures/VB/Class1.vb#5)]  \n  \n     You can dissociate an event handler from an event by executing the [RemoveHandler Statement](../../../../visual-basic/language-reference/statements/removehandler-statement.md).  \n  \n## See also\n\n- [Procedures](./index.md)\n- [Sub Procedures](./sub-procedures.md)\n- [Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md)\n- [AddressOf Operator](../../../../visual-basic/language-reference/operators/addressof-operator.md)\n- [How to: Create a Procedure](./how-to-create-a-procedure.md)\n- [How to: Call a Procedure that Does Not Return a Value](./how-to-call-a-procedure-that-does-not-return-a-value.md)\n","nodes":[{"pos":[4,340],"embed":true,"restype":"x-metadata","content":"title: \"How to: Call an Event Handler in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Visual Basic code, procedures\"\n  - \"event handlers [Visual Basic], calling\"\n  - \"event handlers\"\n  - \"procedures [Visual Basic], event handlers\"\n  - \"procedures [Visual Basic], calling\"\nms.assetid: 72e18ef8-144e-40df-a1f4-066a57271e28","nodes":[{"content":"How to: Call an Event Handler in Visual Basic","nodes":[{"pos":[0,45],"content":"How to: Call an Event Handler in Visual Basic","nodes":[{"content":"How to: Call an Event Handler in Visual Basic","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[347,392],"content":"How to: Call an Event Handler in Visual Basic","linkify":"How to: Call an Event Handler in Visual Basic","nodes":[{"content":"How to: Call an Event Handler in Visual Basic","pos":[0,45]}]},{"content":"An <bpt id=\"p1\">*</bpt>event<ept id=\"p1\">*</ept> is an action or occurrence — such as a mouse click or a credit limit exceeded — that is recognized by some program component, and for which you can write code to respond.","pos":[393,574],"source":"An *event* is an action or occurrence — such as a mouse click or a credit limit exceeded — that is recognized by some program component, and for which you can write code to respond."},{"content":"An <bpt id=\"p1\">*</bpt>event handler<ept id=\"p1\">*</ept> is the code you write to respond to an event.","pos":[575,639],"source":" An *event handler* is the code you write to respond to an event."},{"content":"An event handler in Visual Basic is a <ph id=\"ph1\">`Sub`</ph> procedure.","pos":[646,700],"source":"An event handler in Visual Basic is a `Sub` procedure."},{"content":"However, you do not normally call it the same way as other <ph id=\"ph1\">`Sub`</ph> procedures.","pos":[701,777],"source":" However, you do not normally call it the same way as other `Sub` procedures."},{"content":"Instead, you identify the procedure as a handler for the event.","pos":[778,841]},{"content":"You can do this either with a <bpt id=\"p1\">[</bpt>Handles<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause and a <bpt id=\"p2\">[</bpt>WithEvents<ept id=\"p2\">](../../../../visual-basic/language-reference/modifiers/withevents.md)</ept> variable, or with an <bpt id=\"p3\">[</bpt>AddHandler Statement<ept id=\"p3\">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>.","pos":[842,1175],"source":" You can do this either with a [Handles](../../../../visual-basic/language-reference/statements/handles-clause.md) clause and a [WithEvents](../../../../visual-basic/language-reference/modifiers/withevents.md) variable, or with an [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md)."},{"content":"Using a <ph id=\"ph1\">`Handles`</ph> clause is the default way to declare an event handler in Visual Basic.","pos":[1176,1264],"source":" Using a `Handles` clause is the default way to declare an event handler in Visual Basic."},{"content":"This is the way the event handlers are written by the designers when you program in the integrated development environment (IDE).","pos":[1265,1394]},{"content":"The <ph id=\"ph1\">`AddHandler`</ph> statement is suitable for raising events dynamically at run time.","pos":[1395,1477],"source":" The `AddHandler` statement is suitable for raising events dynamically at run time."},{"content":"When the event occurs, Visual Basic automatically calls the event handler procedure.","pos":[1484,1568]},{"content":"Any code that has access to the event can cause it to occur by executing a <bpt id=\"p1\">[</bpt>RaiseEvent Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/raiseevent-statement.md)</ept>.","pos":[1569,1747],"source":" Any code that has access to the event can cause it to occur by executing a [RaiseEvent Statement](../../../../visual-basic/language-reference/statements/raiseevent-statement.md)."},{"content":"You can associate more than one event handler with the same event.","pos":[1754,1820]},{"content":"In some cases you can dissociate a handler from an event.","pos":[1821,1878]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.","pos":[1879,1992],"source":" For more information, see [Events](../../../../visual-basic/programming-guide/language-features/events/index.md)."},{"pos":[2002,2055],"content":"To call an event handler using Handles and WithEvents","linkify":"To call an event handler using Handles and WithEvents","nodes":[{"content":"To call an event handler using Handles and WithEvents","pos":[0,53]}]},{"pos":[2065,2198],"content":"Make sure the event is declared with an <bpt id=\"p1\">[</bpt>Event Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/event-statement.md)</ept>.","source":"Make sure the event is declared with an [Event Statement](../../../../visual-basic/language-reference/statements/event-statement.md)."},{"content":"Declare an object variable at module or class level, using the <bpt id=\"p1\">[</bpt>WithEvents<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/withevents.md)</ept> keyword.","pos":[2208,2361],"source":"Declare an object variable at module or class level, using the [WithEvents](../../../../visual-basic/language-reference/modifiers/withevents.md) keyword."},{"content":"The <ph id=\"ph1\">`As`</ph> clause for this variable must specify the class that raises the event.","pos":[2362,2441],"source":" The `As` clause for this variable must specify the class that raises the event."},{"pos":[2451,2666],"content":"In the declaration of the event-handling <ph id=\"ph1\">`Sub`</ph> procedure, add a <bpt id=\"p1\">[</bpt>Handles<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause that specifies the <ph id=\"ph2\">`WithEvents`</ph> variable and the event name.","source":"In the declaration of the event-handling `Sub` procedure, add a [Handles](../../../../visual-basic/language-reference/statements/handles-clause.md) clause that specifies the `WithEvents` variable and the event name."},{"content":"When the event occurs, Visual Basic automatically calls the <ph id=\"ph1\">`Sub`</ph> procedure.","pos":[2676,2752],"source":"When the event occurs, Visual Basic automatically calls the `Sub` procedure."},{"content":"Your code can use a <ph id=\"ph1\">`RaiseEvent`</ph> statement to make the event occur.","pos":[2753,2820],"source":" Your code can use a `RaiseEvent` statement to make the event occur."},{"content":"The following example defines an event and a <ph id=\"ph1\">`WithEvents`</ph> variable that refers to the class that raises the event.","pos":[2831,2945],"source":"The following example defines an event and a `WithEvents` variable that refers to the class that raises the event."},{"content":"The event-handling <ph id=\"ph1\">`Sub`</ph> procedure uses a <ph id=\"ph2\">`Handles`</ph> clause to specify the class and event it handles.","pos":[2946,3047],"source":" The event-handling `Sub` procedure uses a `Handles` clause to specify the class and event it handles."},{"pos":[3183,3224],"content":"To call an event handler using AddHandler","linkify":"To call an event handler using AddHandler","nodes":[{"content":"To call an event handler using AddHandler","pos":[0,41]}]},{"pos":[3234,3292],"content":"Make sure the event is declared with an <ph id=\"ph1\">`Event`</ph> statement.","source":"Make sure the event is declared with an `Event` statement."},{"pos":[3302,3489],"content":"Execute an <bpt id=\"p1\">[</bpt>AddHandler Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> to dynamically connect the event-handling <ph id=\"ph1\">`Sub`</ph> procedure with the event.","source":"Execute an [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md) to dynamically connect the event-handling `Sub` procedure with the event."},{"content":"When the event occurs, Visual Basic automatically calls the <ph id=\"ph1\">`Sub`</ph> procedure.","pos":[3499,3575],"source":"When the event occurs, Visual Basic automatically calls the `Sub` procedure."},{"content":"Your code can use a <ph id=\"ph1\">`RaiseEvent`</ph> statement to make the event occur.","pos":[3576,3643],"source":" Your code can use a `RaiseEvent` statement to make the event occur."},{"content":"The following example defines a <ph id=\"ph1\">`Sub`</ph> procedure to handle the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event of a form.","pos":[3654,3773],"source":"The following example defines a `Sub` procedure to handle the <xref:System.Windows.Forms.Form.Closing> event of a form."},{"content":"It then uses the <bpt id=\"p1\">[</bpt>AddHandler Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> to associate the <ph id=\"ph1\">`catchClose`</ph> procedure as an event handler for <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph>.","pos":[3774,3999],"source":" It then uses the [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md) to associate the `catchClose` procedure as an event handler for <xref:System.Windows.Forms.Form.Closing>."},{"pos":[4136,4312],"content":"You can dissociate an event handler from an event by executing the <bpt id=\"p1\">[</bpt>RemoveHandler Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/removehandler-statement.md)</ept>.","source":"You can dissociate an event handler from an event by executing the [RemoveHandler Statement](../../../../visual-basic/language-reference/statements/removehandler-statement.md)."},{"pos":[4321,4329],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4333,4357],"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](./index.md)</ept>","source":"[Procedures](./index.md)"},{"pos":[4360,4397],"content":"<bpt id=\"p1\">[</bpt>Sub Procedures<ept id=\"p1\">](./sub-procedures.md)</ept>","source":"[Sub Procedures](./sub-procedures.md)"},{"pos":[4400,4488],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[4491,4588],"content":"<bpt id=\"p1\">[</bpt>AddressOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/addressof-operator.md)</ept>","source":"[AddressOf Operator](../../../../visual-basic/language-reference/operators/addressof-operator.md)"},{"pos":[4591,4651],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Procedure<ept id=\"p1\">](./how-to-create-a-procedure.md)</ept>","source":"[How to: Create a Procedure](./how-to-create-a-procedure.md)"},{"pos":[4654,4768],"content":"<bpt id=\"p1\">[</bpt>How to: Call a Procedure that Does Not Return a Value<ept id=\"p1\">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept>","source":"[How to: Call a Procedure that Does Not Return a Value](./how-to-call-a-procedure-that-does-not-return-a-value.md)"}]}