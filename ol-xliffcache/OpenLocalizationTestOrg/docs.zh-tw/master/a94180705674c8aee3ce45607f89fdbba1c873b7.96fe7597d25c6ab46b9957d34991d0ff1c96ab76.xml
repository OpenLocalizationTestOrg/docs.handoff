{"content":"---\ntitle: \"How to: Project a New Type (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 8cfb24f5-89b2-4cfb-b85d-e7963f8f1845\n---\n# How to: Project a New Type (LINQ to XML) (Visual Basic)\nOther examples in this section have shown queries that return results as <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, <xref:System.Collections.Generic.IEnumerable%601> of `string`, and <xref:System.Collections.Generic.IEnumerable%601> of `int`. These are common result types, but they are not appropriate for every scenario. In many cases you will want your queries to return an <xref:System.Collections.Generic.IEnumerable%601> of some other type.  \n  \n## Example  \n This example shows how to instantiate objects in the `Select` clause. The code first defines a new class with a constructor, and then modifies the `Select` statement so that the expression is a new instance of the new class.  \n  \n This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md).  \n  \n```vb  \nPublic Class NameQty  \n    Public name As String  \n    Public qty As Integer  \n    Public Sub New(ByVal n As String, ByVal q As Integer)  \n        name = n  \n        qty = q  \n    End Sub  \nEnd Class  \n  \nPublic Class Program  \n    Shared Sub Main()  \n        Dim po As XElement = XElement.Load(\"PurchaseOrder.xml\")  \n  \n        Dim nqList As IEnumerable(Of NameQty) = _  \n            From n In po...<Item> _  \n            Select New NameQty( _  \n                n.<ProductName>.Value, CInt(n.<Quantity>.Value))  \n  \n        For Each n As NameQty In nqList  \n            Console.WriteLine(n.name & \":\" & n.qty)  \n        Next  \n    End Sub  \nEnd Class  \n```  \n  \n This example uses the `M:System.Xml.Linq.XElement.Element` method that was introduced in the topic [How to: Retrieve a Single Child Element (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-retrieve-a-single-child-element-linq-to-xml.md). It also uses casts to retrieve the values of the elements that are returned by the `M:System.Xml.Linq.XElement.Element` method.  \n  \n This example produces the following output:  \n  \n```  \nLawnmower:1  \nBaby Monitor:2  \n```  \n  \n## See also\n\n- [Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)\n","nodes":[{"pos":[4,137],"embed":true,"restype":"x-metadata","content":"title: \"How to: Project a New Type (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 8cfb24f5-89b2-4cfb-b85d-e7963f8f1845","nodes":[{"content":"How to: Project a New Type (LINQ to XML) (Visual Basic)","nodes":[{"pos":[0,55],"content":"How to: Project a New Type (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Project a New Type (LINQ to XML) (Visual Basic)","pos":[0,55]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[144,199],"content":"How to: Project a New Type (LINQ to XML) (Visual Basic)","linkify":"How to: Project a New Type (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Project a New Type (LINQ to XML) (Visual Basic)","pos":[0,55]}]},{"content":"Other examples in this section have shown queries that return results as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph4\">`string`</ph>, and <ph id=\"ph5\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph6\">`int`</ph>.","pos":[200,485],"source":"Other examples in this section have shown queries that return results as <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, <xref:System.Collections.Generic.IEnumerable%601> of `string`, and <xref:System.Collections.Generic.IEnumerable%601> of `int`."},{"content":"These are common result types, but they are not appropriate for every scenario.","pos":[486,565]},{"content":"In many cases you will want your queries to return an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of some other type.","pos":[566,689],"source":" In many cases you will want your queries to return an <xref:System.Collections.Generic.IEnumerable%601> of some other type."},{"pos":[698,705],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows how to instantiate objects in the <ph id=\"ph1\">`Select`</ph> clause.","pos":[709,778],"source":"This example shows how to instantiate objects in the `Select` clause."},{"content":"The code first defines a new class with a constructor, and then modifies the <ph id=\"ph1\">`Select`</ph> statement so that the expression is a new instance of the new class.","pos":[779,933],"source":" The code first defines a new class with a constructor, and then modifies the `Select` statement so that the expression is a new instance of the new class."},{"pos":[940,1154],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)."},{"content":"This example uses the <ph id=\"ph1\">`M:System.Xml.Linq.XElement.Element`</ph> method that was introduced in the topic <bpt id=\"p1\">[</bpt>How to: Retrieve a Single Child Element (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-retrieve-a-single-child-element-linq-to-xml.md)</ept>.","pos":[1832,2114],"source":"This example uses the `M:System.Xml.Linq.XElement.Element` method that was introduced in the topic [How to: Retrieve a Single Child Element (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-retrieve-a-single-child-element-linq-to-xml.md)."},{"content":"It also uses casts to retrieve the values of the elements that are returned by the <ph id=\"ph1\">`M:System.Xml.Linq.XElement.Element`</ph> method.","pos":[2115,2242],"source":" It also uses casts to retrieve the values of the elements that are returned by the `M:System.Xml.Linq.XElement.Element` method."},{"content":"This example produces the following output:","pos":[2249,2292]},{"pos":[2347,2355],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2359,2526],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}