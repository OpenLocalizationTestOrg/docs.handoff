{"content":"---\ntitle: \"How to: Parse a String (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 896e1b4b-f9bd-4975-8bc1-55b6badce1ac\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Parse a String (Visual Basic)\nThis topic shows how to create an XML tree in C#.  \n  \n## Example  \n You can parse a string in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] by using the `XElement.Parse` method. However, it is more efficient to use XML literals, as shown in following code, because XML literals do not suffer from the same performance penalties as parsing XML from a string.  \n  \n By using XML literals, you can just copy and paste your XML into your [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] program.  \n  \n> [!NOTE]\n>  Parsing text or loading an XML document from a text file is less efficient than functional construction. If you are initializing an XML tree from code, it takes less processor time to use functional construction than to parse text.  \n  \n```vb  \nDim contacts as XElement = _  \n    <Contacts>  \n        <Contact>  \n            <Name>Patrick Hines</Name>  \n            <Phone Type=\"home\">206-555-0144</Phone>  \n            <Phone Type=\"work\">425-555-0145</Phone>  \n            <Address>  \n            <Street1>123 Main St</Street1>  \n            <City>Mercer Island</City>  \n            <State>WA</State>  \n            <Postal>68042</Postal>  \n            </Address>  \n            <NetWorth>10</NetWorth>  \n        </Contact>  \n        <Contact>  \n            <Name>Gretchen Rivas</Name>  \n            <Phone Type=\"mobile\">206-555-0163</Phone>  \n            <Address>  \n            <Street1>123 Main St</Street1>  \n            <City>Mercer Island</City>  \n            <State>WA</State>  \n            <Postal>68042</Postal>  \n            </Address>  \n            <NetWorth>11</NetWorth>  \n        </Contact>  \n    </Contacts>  \n```  \n  \n## See Also  \n [Parsing XML (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/parsing-xml.md)","nodes":[{"pos":[12,66],"content":"How to: Parse a String (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Parse a String (Visual Basic) | Microsoft Docs","pos":[0,54]}]},{"pos":[447,484],"content":"How to: Parse a String (Visual Basic)","linkify":"How to: Parse a String (Visual Basic)","nodes":[{"content":"How to: Parse a String (Visual Basic)","pos":[0,37]}]},{"content":"This topic shows how to create an XML tree in C#.","pos":[485,534]},{"pos":[543,550],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"You can parse a string in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> by using the <ph id=\"ph2\">`XElement.Parse`</ph> method.","pos":[554,710],"source":"You can parse a string in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] by using the `XElement.Parse` method."},{"content":"However, it is more efficient to use XML literals, as shown in following code, because XML literals do not suffer from the same performance penalties as parsing XML from a string.","pos":[711,890]},{"pos":[897,1068],"content":"By using XML literals, you can just copy and paste your XML into your <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> program.","source":"By using XML literals, you can just copy and paste your XML into your [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] program."},{"pos":[1076,1318],"content":"[!NOTE]\n Parsing text or loading an XML document from a text file is less efficient than functional construction. If you are initializing an XML tree from code, it takes less processor time to use functional construction than to parse text.","leadings":["","> "],"nodes":[{"content":" Parsing text or loading an XML document from a text file is less efficient than functional construction. If you are initializing an XML tree from code, it takes less processor time to use functional construction than to parse text.","pos":[8,240],"nodes":[{"content":"Parsing text or loading an XML document from a text file is less efficient than functional construction.","pos":[1,105]},{"content":"If you are initializing an XML tree from code, it takes less processor time to use functional construction than to parse text.","pos":[106,232]}]}]},{"pos":[2223,2231],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2235,2336],"content":"<bpt id=\"p1\">[</bpt>Parsing XML (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/parsing-xml.md)</ept>","source":"[Parsing XML (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/parsing-xml.md)"}]}