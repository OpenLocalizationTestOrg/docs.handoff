<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="iterators.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b0e1d509cf80e13d2cee3cf0ddf2021d6c84c5b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\iterators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a45620fd91e79363cb3fd597337830a0497bc8c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b17a5183d6fc781037071567ed2f1f0f23d3fb1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Iterate through collections in C#</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Iterators (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> can be used to step through collections such as lists and arrays.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An iterator method or <ph id="ph1">`get`</ph> accessor performs a custom iteration over a collection.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An iterator method uses the <bpt id="p1">[</bpt>yield return<ept id="p1">](../../../csharp/language-reference/keywords/yield.md)</ept> statement to return each element one at a time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`yield return`</ph> statement is reached, the current location in code is remembered.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time the iterator function is called.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You consume an iterator from client code by using a <bpt id="p1">[</bpt>foreach<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statement or by using a LINQ query.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the following example, the first iteration of the <ph id="ph1">`foreach`</ph> loop causes execution to proceed in the <ph id="ph2">`SomeNumbers`</ph> iterator method until the first <ph id="ph3">`yield return`</ph> statement is reached.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This iteration returns a value of 3, and the current location in the iterator method is retained.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>On the next iteration of the loop, execution in the iterator method continues from where it left off, again stopping when it reaches a <ph id="ph1">`yield return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This iteration returns a value of 5, and the current location in the iterator method is again retained.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The loop completes when the end of the iterator method is reached.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The return type of an iterator method or <ph id="ph1">`get`</ph> accessor can be <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.IEnumerator&gt;</ph>, or <ph id="ph5">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">`yield break`</ph> statement to end the iteration.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For all examples in this topic except the Simple Iterator example, include <bpt id="p1">[</bpt>using<ept id="p1">](../../../csharp/language-reference/keywords/using-directive.md)</ept> directives for the <ph id="ph1">`System.Collections`</ph> and <ph id="ph2">`System.Collections.Generic`</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Simple Iterator</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example has a single <ph id="ph1">`yield return`</ph> statement that is inside a <bpt id="p1">[</bpt>for<ept id="p1">](../../../csharp/language-reference/keywords/for.md)</ept> loop.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`Main`</ph>, each iteration of the <ph id="ph2">`foreach`</ph> statement body creates a call to the iterator function, which proceeds to the next <ph id="ph3">`yield return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creating a Collection Class</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`DaysOfTheWeek`</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, which requires a <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The compiler implicitly calls the <ph id="ph1">`GetEnumerator`</ph> method, which returns an <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetEnumerator`</ph> method returns each string one at a time by using the <ph id="ph2">`yield return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">`Zoo`</ph> class that contains a collection of animals.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`foreach`</ph> statement that refers to the class instance (<ph id="ph2">`theZoo`</ph>) implicitly calls the <ph id="ph3">`GetEnumerator`</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`foreach`</ph> statements that refer to the <ph id="ph2">`Birds`</ph> and <ph id="ph3">`Mammals`</ph> properties use the <ph id="ph4">`AnimalsForType`</ph> named iterator method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using Iterators with a Generic List</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method assigns values to an array of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method returns the array values by using the <ph id="ph2">`yield return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In addition to the generic <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method, the non-generic <ph id="ph2">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method must also be implemented.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This is because <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The non-generic implementation defers to the generic implementation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The example uses named iterators to support various ways of iterating through the same collection of data.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These named iterators are the <ph id="ph1">`TopToBottom`</ph> and <ph id="ph2">`BottomToTop`</ph> properties, and the <ph id="ph3">`TopN`</ph> method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BottomToTop`</ph> property uses an iterator in a <ph id="ph2">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Syntax Information</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An iterator can occur as a method or <ph id="ph1">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An iterator cannot occur in an event, instance constructor, static constructor, or static finalizer.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An implicit conversion must exist from the expression type in the <ph id="ph1">`yield return`</ph> statement to the type argument for the IEnumerable<ph id="ph2">\&lt;</ph>T&gt; returned by the iterator.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In C#, an iterator method cannot have any <ph id="ph1">`in`</ph>, <ph id="ph2">`ref`</ph>, or <ph id="ph3">`out`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In C#, "yield" is not a reserved word and has special meaning only when it is used before a <ph id="ph1">`return`</ph> or <ph id="ph2">`break`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Technical Implementation</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Although you write an iterator as a method, the compiler translates it into a nested class that is, in effect, a state machine.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This class keeps track of the position of the iterator as long the <ph id="ph1">`foreach`</ph> loop in the client code continues.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To see what the compiler does, you can use the Ildasm.exe tool to view the Microsoft intermediate language code that's generated for an iterator method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you create an iterator for a <bpt id="p1">[</bpt>class<ept id="p1">](../../../csharp/language-reference/keywords/class.md)</ept> or <bpt id="p2">[</bpt>struct<ept id="p2">](../../../csharp/language-reference/keywords/struct.md)</ept>, you don't have to implement the whole <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When the compiler detects the iterator, it automatically generates the <ph id="ph1">`Current`</ph>, <ph id="ph2">`MoveNext`</ph>, and <ph id="ph3">`Dispose`</ph> methods of the <ph id="ph4">&lt;xref:System.Collections.IEnumerator&gt;</ph> or <ph id="ph5">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>On each successive iteration of the <ph id="ph1">`foreach`</ph> loop (or the direct call to <ph id="ph2">`IEnumerator.MoveNext`</ph>), the next iterator code body resumes after the previous <ph id="ph3">`yield return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It then continues to the next <ph id="ph1">`yield return`</ph> statement until the end of the iterator body is reached, or until a <ph id="ph2">`yield break`</ph> statement is encountered.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Iterators don't support the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To reiterate from the start, you must obtain a new iterator.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> on the iterator returned by an iterator method throws a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For additional information, see the <bpt id="p1">[</bpt>C# Language Specification<ept id="p1">](~/_csharplang/spec/classes.md#iterators)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use of Iterators</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Iterators enable you to maintain the simplicity of a <ph id="ph1">`foreach`</ph> loop when you need to use complex code to populate a list sequence.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This can be useful when you want to do the following:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Modify the list sequence after the first <ph id="ph1">`foreach`</ph> loop iteration.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Avoid fully loading a large list before the first iteration of a <ph id="ph1">`foreach`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An example is a paged fetch to load a batch of table rows.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Another example is the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> method, which implements iterators within the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Encapsulate building the list in the iterator.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the iterator method, you can build the list and then yield each result in a loop.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>foreach, in<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>yield<ept id="p1">](../../../csharp/language-reference/keywords/yield.md)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using foreach with Arrays<ept id="p1">](../../../csharp/programming-guide/arrays/using-foreach-with-arrays.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](../../../csharp/programming-guide/generics/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>