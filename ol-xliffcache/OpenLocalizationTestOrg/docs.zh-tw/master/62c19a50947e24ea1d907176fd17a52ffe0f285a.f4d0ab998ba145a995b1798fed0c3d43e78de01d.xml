{"content":"---\ntitle: \"fixed Statement (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"fixed_CSharpKeyword\"\n  - \"fixed\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"fixed keyword [C#]\"\nms.assetid: 7ea6db08-ad49-4a7a-b934-d8c4acad1c3a\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fixed Statement (C# Reference)\nThe `fixed` statement prevents the garbage collector from relocating a movable variable. The `fixed` statement is only permitted in an [unsafe](../../../csharp/language-reference/keywords/unsafe.md) context. `Fixed` can also be used to create [fixed size buffers](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md).  \n  \n The `fixed` statement sets a pointer to a managed variable and \"pins\" that variable during the execution of the statement. Without `fixed`, pointers to movable managed variables would be of little use since garbage collection could relocate the variables unpredictably. The C# compiler only lets you assign a pointer to a managed variable in a `fixed` statement.  \n  \n [!code-cs[csrefKeywordsFixedLock#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_1.cs)]  \n  \n You can initialize a pointer by using an array, a string, a fixed-size buffer, or the address of a variable. The following example illustrates the use of variable addresses, arrays, and strings. For more information about fixed-size buffers, see [Fixed Size Buffers](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md).  \n  \n [!code-cs[csrefKeywordsFixedLock#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_2.cs)]  \n  \n You can initialize multiple pointers, as long as they are all of the same type.  \n  \n```csharp\nfixed (byte* ps = srcarray, pd = dstarray) {...}  \n```\n  \n To initialize pointers of different types, simply nest `fixed` statements, as shown in the following example.  \n  \n [!code-cs[csrefKeywordsFixedLock#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_3.cs)]  \n  \n After the code in the statement is executed, any pinned variables are unpinned and subject to garbage collection. Therefore, do not point to those variables outside the `fixed` statement.  \n  \n> [!NOTE]\n>  Pointers initialized in fixed statements cannot be modified.  \n  \n In unsafe mode, you can allocate memory on the stack, where it is not subject to garbage collection and therefore does not need to be pinned. For more information, see [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md).  \n  \n## Example  \n [!code-cs[csrefKeywordsFixedLock#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_4.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [unsafe](../../../csharp/language-reference/keywords/unsafe.md)   \n [Fixed Size Buffers](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md)","nodes":[{"pos":[4,574],"nodes":[{"content":"fixed Statement (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"fixed Statement (C# Reference) | Microsoft Docs","nodes":[{"content":"fixed Statement (C# Reference) | Microsoft Docs","pos":[0,47]}]}],"pos":[6,56],"yaml":true}],"content":"title: \"fixed Statement (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"fixed_CSharpKeyword\"\n  - \"fixed\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"fixed keyword [C#]\"\nms.assetid: 7ea6db08-ad49-4a7a-b934-d8c4acad1c3a\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[581,611],"content":"fixed Statement (C# Reference)","linkify":"fixed Statement (C# Reference)","nodes":[{"content":"fixed Statement (C# Reference)","pos":[0,30]}]},{"content":"The <ph id=\"ph1\">`fixed`</ph> statement prevents the garbage collector from relocating a movable variable.","pos":[612,700],"source":"The `fixed` statement prevents the garbage collector from relocating a movable variable."},{"content":"The <ph id=\"ph1\">`fixed`</ph> statement is only permitted in an <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept> context.","pos":[701,819],"source":" The `fixed` statement is only permitted in an [unsafe](../../../csharp/language-reference/keywords/unsafe.md) context."},{"content":"<ph id=\"ph1\">`Fixed`</ph> can also be used to create <bpt id=\"p1\">[</bpt>fixed size buffers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept>.","pos":[820,954],"source":"`Fixed` can also be used to create [fixed size buffers](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md)."},{"content":"The <ph id=\"ph1\">`fixed`</ph> statement sets a pointer to a managed variable and \"pins\" that variable during the execution of the statement.","pos":[961,1083],"source":"The `fixed` statement sets a pointer to a managed variable and \"pins\" that variable during the execution of the statement."},{"content":"Without <ph id=\"ph1\">`fixed`</ph>, pointers to movable managed variables would be of little use since garbage collection could relocate the variables unpredictably.","pos":[1084,1230],"source":" Without `fixed`, pointers to movable managed variables would be of little use since garbage collection could relocate the variables unpredictably."},{"content":"The C# compiler only lets you assign a pointer to a managed variable in a <ph id=\"ph1\">`fixed`</ph> statement.","pos":[1231,1323],"source":" The C# compiler only lets you assign a pointer to a managed variable in a `fixed` statement."},{"pos":[1330,1451],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsFixedLock#1<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsFixedLock#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_1.cs)]"},{"content":"You can initialize a pointer by using an array, a string, a fixed-size buffer, or the address of a variable.","pos":[1458,1566]},{"content":"The following example illustrates the use of variable addresses, arrays, and strings.","pos":[1567,1652]},{"content":"For more information about fixed-size buffers, see <bpt id=\"p1\">[</bpt>Fixed Size Buffers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept>.","pos":[1653,1803],"source":" For more information about fixed-size buffers, see [Fixed Size Buffers](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md)."},{"pos":[1810,1931],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsFixedLock#2<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsFixedLock#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_2.cs)]"},{"content":"You can initialize multiple pointers, as long as they are all of the same type.","pos":[1938,2017]},{"pos":[2092,2201],"content":"To initialize pointers of different types, simply nest <ph id=\"ph1\">`fixed`</ph> statements, as shown in the following example.","source":"To initialize pointers of different types, simply nest `fixed` statements, as shown in the following example."},{"pos":[2208,2329],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsFixedLock#3<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsFixedLock#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_3.cs)]"},{"content":"After the code in the statement is executed, any pinned variables are unpinned and subject to garbage collection.","pos":[2336,2449]},{"content":"Therefore, do not point to those variables outside the <ph id=\"ph1\">`fixed`</ph> statement.","pos":[2450,2523],"source":" Therefore, do not point to those variables outside the `fixed` statement."},{"pos":[2531,2602],"content":"[!NOTE]\n Pointers initialized in fixed statements cannot be modified.","leadings":["","> "],"nodes":[{"content":"Pointers initialized in fixed statements cannot be modified.","pos":[9,69]}]},{"content":"In unsafe mode, you can allocate memory on the stack, where it is not subject to garbage collection and therefore does not need to be pinned.","pos":[2609,2750]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>.","pos":[2751,2849],"source":" For more information, see [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)."},{"pos":[2858,2865],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2869,2990],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsFixedLock#4<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsFixedLock#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/fixed-statement_4.cs)]"},{"pos":[2999,3024],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3138,3146],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3150,3210],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3214,3281],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3285,3353],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept><ph id=\"ph1\"> </ph>","pos":[3357,3421],"source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md) "},{"content":"<bpt id=\"p1\">[</bpt>Fixed Size Buffers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept>","pos":[3425,3523],"source":"[Fixed Size Buffers](../../../csharp/programming-guide/unsafe-code-pointers/fixed-size-buffers.md)"}]}