<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d054a0824e9f072d38c01c2894606c5c492a2481</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\group-clause.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec8093ec655bce39b914a66d2d2b8d99d8676296</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4db11f30c5144dfac5c4b918b5daf8c890fbdad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>group clause (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>group clause (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`group`</ph> clause returns a sequence of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects that contain zero or more items that match the key value for the group.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you can group a sequence of strings according to the first letter in each string.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this case, the first letter is the key and has a type <bpt id="p1">[</bpt>char<ept id="p1">](../../../csharp/language-reference/keywords/char.md)</ept>, and is stored in the <ph id="ph1">`Key`</ph> property of each <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The compiler infers the type of the key.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can end a query expression with a <ph id="ph1">`group`</ph> clause, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#10<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/group-clause_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you want to perform additional query operations on each group, you can specify a temporary identifier by using the <bpt id="p1">[</bpt>into<ept id="p1">](../../../csharp/language-reference/keywords/into.md)</ept> contextual keyword.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">`into`</ph>, you must continue with the query, and eventually end it with either a <ph id="ph2">`select`</ph> statement or another <ph id="ph3">`group`</ph> clause, as shown in the following excerpt:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#11<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/group-clause_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>More complete examples of the use of <ph id="ph1">`group`</ph> with and without <ph id="ph2">`into`</ph> are provided in the Example section of this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Enumerating the Results of a Group Query</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects produced by a <ph id="ph2">`group`</ph> query are essentially a list of lists, you must use a nested <bpt id="p1">[</bpt>foreach<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> loop to access the items in each group.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The outer loop iterates over the group keys, and the inner loop iterates over each item in the group itself.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A group may have a key but no elements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following is the <ph id="ph1">`foreach`</ph> loop that executes the query in the previous code examples:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#12<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/group-clause_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Key Types</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Group keys can be any type, such as a string, a built-in numeric type, or a user-defined named type or anonymous type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Grouping by string</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The previous code examples used a <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A string key could easily have been specified instead, for example the complete last name:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#13<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/group-clause_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Grouping by bool</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows the use of a bool value for a key to divide the results into two groups.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the value is produced by a sub-expression in the <ph id="ph1">`group`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#14<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/group-clause_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Grouping by numeric range</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The next example uses an expression to create numeric group keys that represent a percentile range.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note the use of <bpt id="p1">[</bpt>let<ept id="p1">](../../../csharp/language-reference/keywords/let-clause.md)</ept> as a convenient location to store a method call result, so that you do not have to call the method two times in the <ph id="ph1">`group`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note also in the <ph id="ph1">`group`</ph> clause that to avoid a "divide by zero" exception the code checks to make sure that the student does not have an average of zero.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about how to safely use methods in query expressions, see <bpt id="p1">[</bpt>How to: Handle Exceptions in Query Expressions<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-handle-exceptions-in-query-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#15<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/group-clause_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Grouping by Composite Keys</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use a composite key when you want to group elements according to more than one key.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You create a composite key by using an anonymous type or a named type to hold the key element.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the following example, assume that a class <ph id="ph1">`Person`</ph> has been declared with members named <ph id="ph2">`surname`</ph> and <ph id="ph3">`city`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`group`</ph> clause causes a separate group to be created for each set of persons with the same last name and the same city.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Use a named type if you must pass the query variable to another method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Create a special class using auto-implemented properties for the keys, and then override the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can also use a struct, in which case you do not strictly have to override those methods.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>How to: Implement a Lightweight Class with Auto-Implemented Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md)</ept> and <bpt id="p2">[</bpt>How to: Query for Duplicate Files in a Directory Tree<ept id="p2">](../../programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The latter topic has a code example that demonstrates how to use a composite key with a named type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example shows the standard pattern for ordering source data into groups when no additional query logic is applied to the groups.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is called a grouping without a continuation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The elements in an array of strings are grouped according to their first letter.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The result of the query is an <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> type that contains a public <ph id="ph2">`Key`</ph> property of type <ph id="ph3">`char`</ph> and an <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection that contains each item in the grouping.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The result of a <ph id="ph1">`group`</ph> clause is a sequence of sequences.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Therefore, to access the individual elements within each returned group, use a nested <ph id="ph1">`foreach`</ph> loop inside the loop that iterates the group keys, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#16<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/group-clause_7.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example shows how to perform additional logic on the groups after you have created them, by using a <bpt id="p1">*</bpt>continuation<ept id="p1">*</ept> with <ph id="ph1">`into`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>into<ept id="p1">](../../../csharp/language-reference/keywords/into.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example queries each group to select only those whose key value is a vowel.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#17<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/group-clause_8.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>At compile time, <ph id="ph1">`group`</ph> clauses are translated into calls to the <ph id="ph2">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Query Keywords (LINQ)<ept id="p1">](../../../csharp/language-reference/keywords/query-keywords.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ Query Expressions<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create a Nested Group<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-create-a-nested-group.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Group Query Results<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-group-query-results.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Perform a Subquery on a Grouping Operation<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-a-subquery-on-a-grouping-operation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>