<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="equality-operators.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98b96f5b4c6d6ea70687a97c849e89573c67c37e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\equality-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16b7a7a34f4c99cd2114c76b398372c6bf7472b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de73bb5572733ea2b03e3e66147a2744e380c906</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Equality operators - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Equality operators (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`==`</ph> (equality)<ept id="p1">](#equality-operator-)</ept> and <bpt id="p2">[</bpt><ph id="ph2">`!=`</ph> (inequality)<ept id="p2">](#inequality-operator-)</ept> operators check if their operands are equal or not.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Equality operator ==</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The equality operator <ph id="ph1">`==`</ph> returns <ph id="ph2">`true`</ph> if its operands are equal, <ph id="ph3">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Value types equality</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Operands of the <bpt id="p1">[</bpt>built-in value types<ept id="p1">](../keywords/value-types-table.md)</ept> are equal if their values are equal:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For equality and relational operators <ph id="ph1">`==`</ph>, <ph id="ph2">`&gt;`</ph>, <ph id="ph3">`&lt;`</ph>, <ph id="ph4">`&gt;=`</ph>, and <ph id="ph5">`&lt;=`</ph>, if any of the operands is not a number (<ph id="ph6">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> or <ph id="ph7">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph>), the result of operation is <ph id="ph8">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>That means that the <ph id="ph1">`NaN`</ph> value is neither greater than, less than, nor equal to any other <ph id="ph2">`double`</ph> (or <ph id="ph3">`float`</ph>) value, including <ph id="ph4">`NaN`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information and examples, see the <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph> reference article.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Two operands of the same <bpt id="p1">[</bpt>enum<ept id="p1">](../keywords/enum.md)</ept> type are equal if the corresponding values of the underlying integral type are equal.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>User-defined <bpt id="p1">[</bpt>struct<ept id="p1">](../keywords/struct.md)</ept> types don't support the <ph id="ph1">`==`</ph> operator by default.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To support the <ph id="ph1">`==`</ph> operator, a user-defined struct must <bpt id="p1">[</bpt>overload<ept id="p1">](#operator-overloadability)</ept> it.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.3, the <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> operators are supported by C# <bpt id="p1">[</bpt>tuples<ept id="p1">](../../tuples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Equality and tuples<ept id="p1">](../../tuples.md#equality-and-tuples)</ept> section of the <bpt id="p2">[</bpt>C# tuple types<ept id="p2">](../../tuples.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>String equality</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Two <bpt id="p1">[</bpt>string<ept id="p1">](../keywords/string.md)</ept> operands are equal when both of them are <ph id="ph1">`null`</ph> or both string instances are of the same length and have identical characters in each character position:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>That is case-sensitive ordinal comparison.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about string comparison, see <bpt id="p1">[</bpt>How to compare strings in C#<ept id="p1">](../../how-to/compare-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Reference types equality</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Two other than <ph id="ph1">`string`</ph> reference type operands are equal when they refer to the same object:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>As the example shows, user-defined reference types support the <ph id="ph1">`==`</ph> operator by default.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, a user-defined reference type can overload the <ph id="ph1">`==`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a reference type overloads the <ph id="ph1">`==`</ph> operator, use the <ph id="ph2">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> method to check if two references of that type refer to the same object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Inequality operator !=</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The inequality operator <ph id="ph1">`!=`</ph> returns <ph id="ph2">`true`</ph> if its operands are not equal, <ph id="ph3">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For the operands of the <bpt id="p1">[</bpt>built-in types<ept id="p1">](../keywords/built-in-types-table.md)</ept>, the expression <ph id="ph1">`x != y`</ph> produces the same result as the expression <ph id="ph2">`!(x == y)`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about type equality, see the <bpt id="p1">[</bpt>Equality operator<ept id="p1">](#equality-operator-)</ept> section.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the usage of the <ph id="ph1">`!=`</ph> operator:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Operator overloadability</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>User-defined types can <bpt id="p1">[</bpt>overload<ept id="p1">](../keywords/operator.md)</ept> the <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a type overloads one of the two operators, it must also overload another one.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Relational and type-testing operators<ept id="p1">](~/_csharplang/spec/expressions.md#relational-and-type-testing-operators)</ept> section of the <bpt id="p2">[</bpt>C# language specification<ept id="p2">](~/_csharplang/spec/introduction.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Equality comparisons<ept id="p1">](../../programming-guide/statements-expressions-operators/equality-comparisons.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>