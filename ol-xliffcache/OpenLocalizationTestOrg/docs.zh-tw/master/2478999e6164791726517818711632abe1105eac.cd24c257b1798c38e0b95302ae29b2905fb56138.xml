{"content":"---\ntitle: \"ICorDebugManagedCallback2::ExceptionUnwind Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorDebugManagedCallback2.ExceptionUnwind\"\napi_location: \n  - \"mscordbi.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorDebugManagedCallback2::ExceptionUnwind\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorDebugManagedCallback2::ExceptionUnwind method [.NET Framework debugging]\"\n  - \"ExceptionUnwind method [.NET Framework debugging]\"\nms.assetid: aaf5938d-179c-4eaa-8d35-8523a4fadded\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# ICorDebugManagedCallback2::ExceptionUnwind Method\nProvides a status notification during the exception unwinding process.  \n  \n## Syntax  \n  \n```  \nHRESULT ExceptionUnwind (  \n    [in] ICorDebugAppDomain                  *pAppDomain,  \n    [in] ICorDebugThread                     *pThread,  \n    [in] CorDebugExceptionUnwindCallbackType  dwEventType,  \n    [in] DWORD                                dwFlags  \n);  \n```  \n  \n#### Parameters  \n `pAppDomain`  \n [in] A pointer to an ICorDebugAppDomain object that represents the application domain containing the thread on which the exception was thrown.  \n  \n `pThread`  \n [in] A pointer to an ICorDebugThread object that represents the thread on which the exception was thrown.  \n  \n `dwEventType`  \n [in] A value of the CorDebugExceptionUnwindCallbackType enumeration that specifies the event that is being signaled by the callback during the unwind phase.  \n  \n `dwFlags`  \n [in] A value of the [CorDebugExceptionFlags](../../../../docs/framework/unmanaged-api/debugging/cordebugexceptionflags-enumeration.md) enumeration that specifies additional information about the exception.  \n  \n## Remarks  \n `ExceptionUnwind` is called at various points during the unwind phase of the exception-handling process. `ExceptionUnwind` can be called more than once while unwinding a single exception.  \n  \n If `dwEventType` = DEBUG_EXCEPTION_INTERCEPTED, the instruction pointer will be in the leaf frame of the thread, at the sequence point before (this may be several instructions before) the instruction that led to the exception.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorDebug.idl, CorDebug.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [ICorDebugManagedCallback2 Interface](../../../../docs/framework/unmanaged-api/debugging/icordebugmanagedcallback2-interface.md)   \n [ICorDebugManagedCallback Interface](../../../../docs/framework/unmanaged-api/debugging/icordebugmanagedcallback-interface.md)","nodes":[{"pos":[12,78],"content":"ICorDebugManagedCallback2::ExceptionUnwind Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ICorDebugManagedCallback2::ExceptionUnwind Method | Microsoft Docs","pos":[0,66]}]},{"pos":[770,819],"content":"ICorDebugManagedCallback2::ExceptionUnwind Method","linkify":"ICorDebugManagedCallback2::ExceptionUnwind Method","nodes":[{"content":"ICorDebugManagedCallback2::ExceptionUnwind Method","pos":[0,49]}]},{"content":"Provides a status notification during the exception unwinding process.","pos":[820,890]},{"pos":[899,905],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1198,1208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A pointer to an ICorDebugAppDomain object that represents the application domain containing the thread on which the exception was thrown.","pos":[1228,1370]},{"content":"[in] A pointer to an ICorDebugThread object that represents the thread on which the exception was thrown.","pos":[1390,1495]},{"content":"[in] A value of the CorDebugExceptionUnwindCallbackType enumeration that specifies the event that is being signaled by the callback during the unwind phase.","pos":[1519,1675]},{"content":"[in] A value of the <bpt id=\"p1\">[</bpt>CorDebugExceptionFlags<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/cordebugexceptionflags-enumeration.md)</ept> enumeration that specifies additional information about the exception.","pos":[1695,1900],"source":" [in] A value of the [CorDebugExceptionFlags](../../../../docs/framework/unmanaged-api/debugging/cordebugexceptionflags-enumeration.md) enumeration that specifies additional information about the exception."},{"pos":[1909,1916],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`ExceptionUnwind`</ph> is called at various points during the unwind phase of the exception-handling process.","pos":[1920,2024],"source":"`ExceptionUnwind` is called at various points during the unwind phase of the exception-handling process."},{"content":"<ph id=\"ph1\">`ExceptionUnwind`</ph> can be called more than once while unwinding a single exception.","pos":[2025,2107],"source":"`ExceptionUnwind` can be called more than once while unwinding a single exception."},{"pos":[2114,2340],"content":"If <ph id=\"ph1\">`dwEventType`</ph> = DEBUG_EXCEPTION_INTERCEPTED, the instruction pointer will be in the leaf frame of the thread, at the sequence point before (this may be several instructions before) the instruction that led to the exception.","source":"If `dwEventType` = DEBUG_EXCEPTION_INTERCEPTED, the instruction pointer will be in the leaf frame of the thread, at the sequence point before (this may be several instructions before) the instruction that led to the exception."},{"pos":[2349,2361],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2365,2469],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2476,2512],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorDebug.idl, CorDebug.h","source":"**Header:** CorDebug.idl, CorDebug.h"},{"pos":[2519,2544],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2551,2659],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[2668,2676],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICorDebugManagedCallback2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/icordebugmanagedcallback2-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[2680,2809],"source":"[ICorDebugManagedCallback2 Interface](../../../../docs/framework/unmanaged-api/debugging/icordebugmanagedcallback2-interface.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ICorDebugManagedCallback Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/icordebugmanagedcallback-interface.md)</ept>","pos":[2812,2939],"source":" [ICorDebugManagedCallback Interface](../../../../docs/framework/unmanaged-api/debugging/icordebugmanagedcallback-interface.md)"}]}