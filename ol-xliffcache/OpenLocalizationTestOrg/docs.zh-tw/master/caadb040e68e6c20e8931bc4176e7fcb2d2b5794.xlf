<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">caadb040e68e6c20e8931bc4176e7fcb2d2b5794</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\developing-apps\customizing-extending-my\extending-the-my-namespace.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cd59878a5f76c8273b65a096abfc4beaa2a38a0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36bf7dcde046095ac663e4ceaa51e6e7c3e60fd1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Extending the My Namespace in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Extending the My Namespace in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> namespace in Visual Basic exposes properties and methods that enable you to easily take advantage of the power of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> namespace simplifies common programming problems, often reducing a difficult task to a single line of code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Additionally, the <ph id="ph1">`My`</ph> namespace is fully extensible so that you can customize the behavior of <ph id="ph2">`My`</ph> and add new services to its hierarchy to adapt to specific application needs.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic discusses both how to customize existing members of the <ph id="ph1">`My`</ph> namespace and how to add your own custom classes to the <ph id="ph2">`My`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Topic Contents<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Customizing Existing My Namespace Members<ept id="p1">](#customizing)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Adding Members to My Objects<ept id="p1">](#addingtoobjects)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Adding Custom Objects to the My Namespace<ept id="p1">](#addingcustom)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Adding Members to the My Namespace<ept id="p1">](#addingtonamespace)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Adding Events to Custom My Objects<ept id="p1">](#addingevents)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Design Guidelines<ept id="p1">](#design)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Designing Class Libraries for My<ept id="p1">](#designing)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Packaging and Deploying Extensions<ept id="p1">](#packaging)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="customizing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Customizing Existing My Namespace Members</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> namespace in Visual Basic exposes frequently used information about your application, your computer, and more.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For a complete list of the objects in the <ph id="ph1">`My`</ph> namespace, see <bpt id="p1">[</bpt>My Reference<ept id="p1">](../../../visual-basic/language-reference/keywords/my-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You may have to customize existing members of the <ph id="ph1">`My`</ph> namespace so that they better match the needs of your application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Any property of an object in the <ph id="ph1">`My`</ph> namespace that is not read-only can be set to a custom value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, assume that you frequently use the <ph id="ph1">`My.User`</ph> object to access the current security context for the user running your application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, your company uses a custom user object to expose additional information and capabilities for users within the company.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this scenario, you can replace the default value of the <ph id="ph1">`My.User.CurrentPrincipal`</ph> property with an instance of your own custom principal object, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnExtendingMy#1<ept id="p2">](../../../visual-basic/developing-apps/customizing-extending-my/codesnippet/VisualBasic/extending-the-my-namespace_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">`CurrentPrincipal`</ph> property on the <ph id="ph2">`My.User`</ph> object changes the identity under which the application runs.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My.User`</ph> object, in turn, returns information about the newly specified user.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="addingtoobjects"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Adding Members to My Objects</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The types returned from <ph id="ph1">`My.Application`</ph> and <ph id="ph2">`My.Computer`</ph> are defined as <ph id="ph3">`Partial`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Therefore, you can extend the <ph id="ph1">`My.Application`</ph> and <ph id="ph2">`My.Computer`</ph> objects by creating a <ph id="ph3">`Partial`</ph> class named <ph id="ph4">`MyApplication`</ph> or <ph id="ph5">`MyComputer`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The class cannot be a <ph id="ph1">`Private`</ph> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you specify the class as part of the <ph id="ph1">`My`</ph> namespace, you can add properties and methods that will be included with the <ph id="ph2">`My.Application`</ph> or <ph id="ph3">`My.Computer`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the following example adds a property named <ph id="ph1">`DnsServerIPAddresses`</ph> to the <ph id="ph2">`My.Computer`</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnExtendingMy#2<ept id="p2">](../../../visual-basic/developing-apps/customizing-extending-my/codesnippet/VisualBasic/extending-the-my-namespace_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="addingcustom"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Adding Custom Objects to the My Namespace</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`My`</ph> namespace provides solutions for many common programming tasks, you may encounter tasks that the <ph id="ph2">`My`</ph> namespace does not address.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, your application might access custom directory services for user data, or your application might use assemblies that are not installed by default with Visual Basic.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can extend the <ph id="ph1">`My`</ph> namespace to include custom solutions to common tasks that are specific to your environment.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> namespace can easily be extended to add new members to meet growing application needs.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Additionally, you can deploy your <ph id="ph1">`My`</ph> namespace extensions to other developers as a Visual Basic template.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="addingtonamespace"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Adding Members to the My Namespace</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`My`</ph> is a namespace like any other namespace, you can add top-level properties to it by just adding a module and specifying a <ph id="ph2">`Namespace`</ph> of <ph id="ph3">`My`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Annotate the module with the <ph id="ph1">`HideModuleName`</ph> attribute as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HideModuleName`</ph> attribute ensures that IntelliSense will not display the module name when it displays the members of the <ph id="ph2">`My`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnExtendingMy#3<ept id="p2">](../../../visual-basic/developing-apps/customizing-extending-my/codesnippet/VisualBasic/extending-the-my-namespace_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To add members to the <ph id="ph1">`My`</ph> namespace, add properties as needed to the module.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For each property added to the <ph id="ph1">`My`</ph> namespace, add a private field of type <ph id="ph2">`ThreadSafeObjectProvider(Of T)`</ph>, where the type is the type returned by your custom property.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This field is used to create thread-safe object instances to be returned by the property by calling the <ph id="ph1">`GetInstance`</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>As a result, each thread that is accessing the extended property receives its own instance of the returned type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example adds a property named <ph id="ph1">`SampleExtension`</ph> that is of type <ph id="ph2">`SampleExtension`</ph> to the <ph id="ph3">`My`</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnExtendingMy#4<ept id="p2">](../../../visual-basic/developing-apps/customizing-extending-my/codesnippet/VisualBasic/extending-the-my-namespace_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="addingevents"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Adding Events to Custom My Objects</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`My.Application`</ph> object to expose events for your custom <ph id="ph2">`My`</ph> objects by extending the <ph id="ph3">`MyApplication`</ph> partial class in the <ph id="ph4">`My`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For Windows-based projects, you can double-click the <bpt id="p1">**</bpt>My Project<ept id="p1">**</ept> node in for your project in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the Visual Basic <bpt id="p1">**</bpt>Project Designer<ept id="p1">**</ept>, click the <ph id="ph1">`Application`</ph> tab and then click the <ph id="ph2">`View Application Events`</ph> button.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A new file that is named ApplicationEvents.vb will be created.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It contains the following code for extending the <ph id="ph1">`MyApplication`</ph> class.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnExtendingMy#5<ept id="p2">](../../../visual-basic/developing-apps/customizing-extending-my/codesnippet/VisualBasic/extending-the-my-namespace_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can add event handlers for your custom <ph id="ph1">`My`</ph> objects by adding custom event handlers to the <ph id="ph2">`MyApplication`</ph> class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Custom events enable you to add code that will execute when an event handler is added, removed, or the event is raised.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`AddHandler`</ph> code for a custom event runs only if code is added by a user to handle the event.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, consider that the <ph id="ph1">`SampleExtension`</ph> object from the previous section has a <ph id="ph2">`Load`</ph> event that you want to add a custom event handler for.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following code example shows a custom event handler named <ph id="ph1">`SampleExtensionLoad`</ph> that will be invoked when the <ph id="ph2">`My.SampleExtension.Load`</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When code is added to handle the new <ph id="ph1">`My.SampleExtensionLoad`</ph> event, the <ph id="ph2">`AddHandler`</ph> part of this custom event code is executed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyApplication_SampleExtensionLoad`</ph> method is included in the code example to show an example of an event handler that handles the <ph id="ph2">`My.SampleExtensionLoad`</ph> event.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`SampleExtensionLoad`</ph> event will be available when you select the <bpt id="p1">**</bpt>My Application Events<ept id="p1">**</ept> option in the left drop-down list above the Code Editor when you are editing the ApplicationEvents.vb file.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnExtendingMy#6<ept id="p2">](../../../visual-basic/developing-apps/customizing-extending-my/codesnippet/VisualBasic/extending-the-my-namespace_6.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="design"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Design Guidelines</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When you develop extensions to the <ph id="ph1">`My`</ph> namespace, use the following guidelines to help minimize the maintenance costs of your extension components.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Include only the extension logic.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The logic included in the <ph id="ph1">`My`</ph> namespace extension should include only the code that is needed to expose the required functionality in the <ph id="ph2">`My`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Because your extension will reside in user projects as source code, updating the extension component incurs a high maintenance cost and should be avoided if possible.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Minimize project assumptions.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When you create your extensions of the <ph id="ph1">`My`</ph> namespace, do not assume a set of references, project-level imports, or specific compiler settings (for example, <ph id="ph2">`Option Strict`</ph> off).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Instead, minimize dependencies and fully qualify all type references by using the <ph id="ph1">`Global`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Also, ensure that the extension compiles with <ph id="ph1">`Option Strict`</ph> on to minimize errors in the extension.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Isolate the extension code.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Placing the code in a single file makes your extension easily deployable as a Visual Studio item template.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information, see "Packaging and Deploying Extensions" later in this topic.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Placing all the <ph id="ph1">`My`</ph> namespace extension code in a single file or a separate folder in a project will also help users locate the <ph id="ph2">`My`</ph> namespace extension.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="designing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Designing Class Libraries for My</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>As is the case with most object models, some design patterns work well in the <ph id="ph1">`My`</ph> namespace and others do not.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When designing an extension to the <ph id="ph1">`My`</ph> namespace, consider the following principles:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Stateless methods.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Methods in the <ph id="ph1">`My`</ph> namespace should provide a complete solution to a specific task.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Ensure that the parameter values that are passed to the method provide all the input required to complete the particular task.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Avoid creating methods that rely on prior state, such as open connections to resources.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Global instances.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The only state that is maintained in the <ph id="ph1">`My`</ph> namespace is global to the project.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`My.Application.Info`</ph> encapsulates state that is shared throughout the application.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Simple parameter types.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Keep things simple by avoiding complex parameter types.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Instead, create methods that either take no parameter input or that take simple input types such as strings, primitive types, and so on.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Factory methods.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Some types are necessarily difficult to instantiate.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Providing factory methods as extensions to the <ph id="ph1">`My`</ph> namespace enables you to more easily discover and consume types that fall into this category.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An example of a factory method that works well is <ph id="ph1">`My.Computer.FileSystem.OpenTextFileReader`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>There are several stream types available in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>By specifying text files specifically, the <ph id="ph1">`OpenTextFileReader`</ph> helps the user understand which stream to use.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>These guidelines do not preclude general design principles for class libraries.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Rather, they are recommendations that are optimized for developers who are using Visual Basic and the <ph id="ph1">`My`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For general design principles for creating class libraries, see <bpt id="p1">[</bpt>Framework Design Guidelines<ept id="p1">](../../../standard/design-guidelines/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="packaging"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Packaging and Deploying Extensions</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can include <ph id="ph1">`My`</ph> namespace extensions in a Visual Studio project template, or you can package your extensions and deploy them as a Visual Studio item template.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When you package your <ph id="ph1">`My`</ph> namespace extensions as a Visual Studio item template, you can take advantage of additional capabilities provided by Visual Basic.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>These capabilities enable you to include an extension when a project references a particular assembly, or enable users to explicitly add your <ph id="ph1">`My`</ph> namespace extension by using the <bpt id="p1">**</bpt>My Extensions<ept id="p1">**</ept> page of the Visual Basic Project Designer.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For details about how to deploy <ph id="ph1">`My`</ph> namespace extensions, see <bpt id="p1">[</bpt>Packaging and Deploying Custom My Extensions<ept id="p1">](../../../visual-basic/developing-apps/customizing-extending-my/packaging-and-deploying-custom-my-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Packaging and Deploying Custom My Extensions<ept id="p1">](../../../visual-basic/developing-apps/customizing-extending-my/packaging-and-deploying-custom-my-extensions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extending the Visual Basic Application Model<ept id="p1">](../../../visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Customizing Which Objects are Available in My<ept id="p1">](../../../visual-basic/developing-apps/customizing-extending-my/customizing-which-objects-are-available-in-my.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>My Extensions Page, Project Designer<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/my-extensions-page-project-designer-visual-basic)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Page, Project Designer (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Partial<ept id="p1">](../../../visual-basic/language-reference/modifiers/partial.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>