{"content":"---\ntitle: \"() Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"()_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"type conversion [C#], () operator\"\n  - \"cast operator [C#]\"\n  - \"() operator [C#]\"\nms.assetid: 846e1f94-8a8c-42fc-a42c-fbd38e70d8cc\ncaps.latest.revision: 22\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# () Operator (C# Reference)\nIn addition to being used to specify the order of operations in an expression, parentheses are used to perform the following tasks:  \n  \n1.  Specify casts, or type conversions.  \n  \n     [!code-cs[csRefOperators#1](../../../csharp/language-reference/operators/codesnippet/CSharp/invocation-operator_1.cs)]  \n  \n2.  Invoke methods or delegates.  \n  \n     [!code-cs[csRefOperators#2](../../../csharp/language-reference/operators/codesnippet/CSharp/invocation-operator_2.cs)]  \n  \n## Remarks  \n A cast explicitly invokes the conversion operator from one type to another; the cast fails if no such conversion operator is defined. To define a conversion operator, see [explicit](../../../csharp/language-reference/keywords/explicit.md) and [implicit](../../../csharp/language-reference/keywords/implicit.md).  \n  \n The `()` operator cannot be overloaded.  \n  \n For more information, see [Casting and Type Conversions](../../../csharp/programming-guide/types/casting-and-type-conversions.md).  \n  \n A cast expression could lead to ambiguous syntax. For example, the expression `(x)–y` could be either interpreted as a cast expression (a cast of –y to type x) or as an additive expression combined with a parenthesized expression, which computes the value x – y.  \n  \n For more information about method invocation, see [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,618],"nodes":[{"content":"() Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"() Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"() Operator (C# Reference) | Microsoft Docs","pos":[0,43]}]}],"pos":[6,52],"yaml":true}],"content":"title: \"() Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"()_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"type conversion [C#], () operator\"\n  - \"cast operator [C#]\"\n  - \"() operator [C#]\"\nms.assetid: 846e1f94-8a8c-42fc-a42c-fbd38e70d8cc\ncaps.latest.revision: 22\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[625,651],"content":"() Operator (C# Reference)","linkify":"() Operator (C# Reference)","nodes":[{"content":"() Operator (C# Reference)","pos":[0,26]}]},{"content":"In addition to being used to specify the order of operations in an expression, parentheses are used to perform the following tasks:","pos":[652,783]},{"content":"Specify casts, or type conversions.","pos":[793,828]},{"pos":[839,957],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#1<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/invocation-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#1](../../../csharp/language-reference/operators/codesnippet/CSharp/invocation-operator_1.cs)]"},{"content":"Invoke methods or delegates.","pos":[967,995]},{"pos":[1006,1124],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#2<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/invocation-operator_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#2](../../../csharp/language-reference/operators/codesnippet/CSharp/invocation-operator_2.cs)]"},{"pos":[1133,1140],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A cast explicitly invokes the conversion operator from one type to another; the cast fails if no such conversion operator is defined.","pos":[1144,1277]},{"content":"To define a conversion operator, see <bpt id=\"p1\">[</bpt>explicit<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit.md)</ept> and <bpt id=\"p2\">[</bpt>implicit<ept id=\"p2\">](../../../csharp/language-reference/keywords/implicit.md)</ept>.","pos":[1278,1455],"source":" To define a conversion operator, see [explicit](../../../csharp/language-reference/keywords/explicit.md) and [implicit](../../../csharp/language-reference/keywords/implicit.md)."},{"pos":[1462,1501],"content":"The <ph id=\"ph1\">`()`</ph> operator cannot be overloaded.","source":"The `()` operator cannot be overloaded."},{"pos":[1508,1638],"content":"For more information, see <bpt id=\"p1\">[</bpt>Casting and Type Conversions<ept id=\"p1\">](../../../csharp/programming-guide/types/casting-and-type-conversions.md)</ept>.","source":"For more information, see [Casting and Type Conversions](../../../csharp/programming-guide/types/casting-and-type-conversions.md)."},{"content":"A cast expression could lead to ambiguous syntax.","pos":[1645,1694]},{"content":"For example, the expression <ph id=\"ph1\">`(x)–y`</ph> could be either interpreted as a cast expression (a cast of –y to type x) or as an additive expression combined with a parenthesized expression, which computes the value x – y.","pos":[1695,1907],"source":" For example, the expression `(x)–y` could be either interpreted as a cast expression (a cast of –y to type x) or as an additive expression combined with a parenthesized expression, which computes the value x – y."},{"pos":[1914,2040],"content":"For more information about method invocation, see <bpt id=\"p1\">[</bpt>Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept>.","source":"For more information about method invocation, see [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)."},{"pos":[2049,2074],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2188,2196],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2200,2260],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2264,2331],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[2335,2404],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}