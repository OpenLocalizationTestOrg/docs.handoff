{"content":"---\ntitle: \"How to: Write Queries with Complex Filtering (C#)\"\nms.date: 07/20/2015\nms.assetid: 4065d901-cf89-4e47-8bf9-abb65acfb003\n---\n# How to: Write Queries with Complex Filtering (C#)\nSometimes you want to write LINQ to XML queries with complex filters. For example, you might have to find all elements that have a child element with a particular name and value. This topic gives an example of writing a query with complex filtering.  \n  \n## Example  \n This example shows how to find all `PurchaseOrder` elements that have a child `Address` element that has a `Type` attribute equal to \"Shipping\" and a child `State` element equal to \"NY\". It uses a nested query in the `Where` clause, and the `Any` operator returns `true` if the collection has any elements in it. For information about using method-based query syntax, see [Query Syntax and Method Syntax in LINQ](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md).  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md).  \n  \n For more information about the `Any` operator, see [Quantifier Operations (C#)](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md).  \n  \n```csharp  \nXElement root = XElement.Load(\"PurchaseOrders.xml\");  \nIEnumerable<XElement> purchaseOrders =  \n    from el in root.Elements(\"PurchaseOrder\")  \n    where   \n        (from add in el.Elements(\"Address\")  \n        where  \n            (string)add.Attribute(\"Type\") == \"Shipping\" &&  \n            (string)add.Element(\"State\") == \"NY\"  \n        select add)  \n        .Any()  \n    select el;  \nforeach (XElement el in purchaseOrders)  \n    Console.WriteLine((string)el.Attribute(\"PurchaseOrderNumber\"));  \n```  \n  \n This code produces the following output:  \n  \n```  \n99505  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md).  \n  \n```csharp  \nXElement root = XElement.Load(\"PurchaseOrdersInNamespace.xml\");  \nXNamespace aw = \"http://www.adventure-works.com\";  \nIEnumerable<XElement> purchaseOrders =  \n    from el in root.Elements(aw + \"PurchaseOrder\")  \n    where  \n        (from add in el.Elements(aw + \"Address\")  \n         where  \n             (string)add.Attribute(aw + \"Type\") == \"Shipping\" &&  \n             (string)add.Element(aw + \"State\") == \"NY\"  \n         select add)  \n        .Any()  \n    select el;  \nforeach (XElement el in purchaseOrders)  \n    Console.WriteLine((string)el.Attribute(aw + \"PurchaseOrderNumber\"));  \n```  \n  \n This code produces the following output:  \n  \n```  \n99505  \n```  \n  \n## See also\n\n- <xref:System.Xml.Linq.XElement.Attribute%2A>\n- <xref:System.Xml.Linq.XContainer.Elements%2A>\n- [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)\n- [Projection Operations (C#)](../../../../csharp/programming-guide/concepts/linq/projection-operations.md)\n- [Quantifier Operations (C#)](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)\n","nodes":[{"pos":[4,131],"embed":true,"restype":"x-metadata","content":"title: \"How to: Write Queries with Complex Filtering (C#)\"\nms.date: 07/20/2015\nms.assetid: 4065d901-cf89-4e47-8bf9-abb65acfb003","nodes":[{"content":"How to: Write Queries with Complex Filtering (C#)","nodes":[{"pos":[0,49],"content":"How to: Write Queries with Complex Filtering (C#)","nodes":[{"content":"How to: Write Queries with Complex Filtering (C#)","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[138,187],"content":"How to: Write Queries with Complex Filtering (C#)","linkify":"How to: Write Queries with Complex Filtering (C#)","nodes":[{"content":"How to: Write Queries with Complex Filtering (C#)","pos":[0,49]}]},{"content":"Sometimes you want to write LINQ to XML queries with complex filters.","pos":[188,257]},{"content":"For example, you might have to find all elements that have a child element with a particular name and value.","pos":[258,366]},{"content":"This topic gives an example of writing a query with complex filtering.","pos":[367,437]},{"pos":[446,453],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows how to find all <ph id=\"ph1\">`PurchaseOrder`</ph> elements that have a child <ph id=\"ph2\">`Address`</ph> element that has a <ph id=\"ph3\">`Type`</ph> attribute equal to \"Shipping\" and a child <ph id=\"ph4\">`State`</ph> element equal to \"NY\".","pos":[457,643],"source":"This example shows how to find all `PurchaseOrder` elements that have a child `Address` element that has a `Type` attribute equal to \"Shipping\" and a child `State` element equal to \"NY\"."},{"content":"It uses a nested query in the <ph id=\"ph1\">`Where`</ph> clause, and the <ph id=\"ph2\">`Any`</ph> operator returns <ph id=\"ph3\">`true`</ph> if the collection has any elements in it.","pos":[644,769],"source":" It uses a nested query in the `Where` clause, and the `Any` operator returns `true` if the collection has any elements in it."},{"content":"For information about using method-based query syntax, see <bpt id=\"p1\">[</bpt>Query Syntax and Method Syntax in LINQ<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept>.","pos":[770,964],"source":" For information about using method-based query syntax, see [Query Syntax and Method Syntax in LINQ](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)."},{"pos":[971,1183],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)."},{"pos":[1190,1347],"content":"For more information about the <ph id=\"ph1\">`Any`</ph> operator, see <bpt id=\"p1\">[</bpt>Quantifier Operations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)</ept>.","source":"For more information about the `Any` operator, see [Quantifier Operations (C#)](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)."},{"content":"This code produces the following output:","pos":[1874,1914]},{"pos":[1946,1953],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1957,2031]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[2032,2176],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[2183,2399],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders in a Namespace<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[3017,3057]},{"pos":[3089,3097],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3196,3311],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"},{"pos":[3314,3419],"content":"<bpt id=\"p1\">[</bpt>Projection Operations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/projection-operations.md)</ept>","source":"[Projection Operations (C#)](../../../../csharp/programming-guide/concepts/linq/projection-operations.md)"},{"pos":[3422,3527],"content":"<bpt id=\"p1\">[</bpt>Quantifier Operations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)</ept>","source":"[Quantifier Operations (C#)](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)"}]}