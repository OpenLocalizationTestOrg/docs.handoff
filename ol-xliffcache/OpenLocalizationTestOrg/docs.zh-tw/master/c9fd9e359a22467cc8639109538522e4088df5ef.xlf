<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-ci-with-cli.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9fd9e359a22467cc8639109538522e4088df5ef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\using-ci-with-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe90bb306f5ac1af31c4575e091503da46328600</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29db78aa9367eae33697ecd93056251880d7b38b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using .NET Core SDK and tools in Continuous Integration (CI)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Information on the usage of the .NET Core SDK and its tools on the build server.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using .NET Core SDK and tools in Continuous Integration (CI)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This document outlines using the .NET Core SDK and its tools on a build server.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Core toolset works both interactively, where a developer types commands at a command prompt, and automatically, where a Continuous Integration (CI) server runs a build script.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The commands, options, inputs, and outputs are the same, and the only things you supply are a way to acquire the tooling and a system to build your app.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This document focuses on scenarios of tool acquisition for CI with recommendations on how to design and structure your build scripts.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Installation options for CI build servers</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using the native installers</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Native installers are available for macOS, Linux, and Windows.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The installers require admin (sudo) access to the build server.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The advantage of using a native installer is that it installs all of the native dependencies required for the tooling to run.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Native installers also provide a system-wide installation of the SDK.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>macOS users should use the PKG installers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On Linux, there's a choice of using a feed-based package manager, such as apt-get for Ubuntu or yum for CentOS, or using the packages themselves, DEB or RPM.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>On Windows, use the MSI installer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The latest stable binaries are found at <bpt id="p1">[</bpt>.NET downloads<ept id="p1">](https://dotnet.microsoft.com/download)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you wish to use the latest (and potentially unstable) pre-release tooling, use the links provided at the <bpt id="p1">[</bpt>dotnet/core-sdk GitHub repository<ept id="p1">](https://github.com/dotnet/core-sdk#installers-and-binaries)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For Linux distributions, <ph id="ph1">`tar.gz`</ph> archives (also known as <ph id="ph2">`tarballs`</ph>) are available; use the installation scripts within the archives to install .NET Core.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using the installer script</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using the installer script allows for non-administrative installation on your build server and easy automation for obtaining the tooling.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The script takes care of downloading the tooling and extracting it into a default or specified location for use.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can also specify a version of the tooling that you wish to install and whether you want to install the entire SDK or only the shared runtime.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The installer script is automated to run at the start of the build to fetch and install the desired version of the SDK.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>desired version<ept id="p1">*</ept> is whatever version of the SDK your projects require to build.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The script allows you to install the SDK in a local directory on the server, run the tools from the installed location, and then clean up (or let the CI service clean up) after the build.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This provides encapsulation and isolation to your entire build process.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The installation script reference is found in the <bpt id="p1">[</bpt>dotnet-install<ept id="p1">](dotnet-install-script.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure DevOps Services<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When using the installer script, native dependencies aren't installed automatically.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You must install the native dependencies if the operating system doesn't have them.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Prerequisites for .NET Core on Linux<ept id="p1">](../linux-prerequisites.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CI setup examples</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This section describes a manual setup using a PowerShell or bash script, along with a description of several software as a service (SaaS) CI solutions.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The SaaS CI solutions covered are <bpt id="p1">[</bpt>Travis CI<ept id="p1">](https://travis-ci.org/)</ept>, <bpt id="p2">[</bpt>AppVeyor<ept id="p2">](https://www.appveyor.com/)</ept>, and <bpt id="p3">[</bpt>Azure Pipelines<ept id="p3">](https://docs.microsoft.com/azure/devops/pipelines/index)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Manual setup</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each SaaS service has its own methods for creating and configuring a build process.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you use different SaaS solution than those listed or require customization beyond the pre-packaged support, you must perform at least some manual configuration.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In general, a manual setup requires you to acquire a version of the tools (or the latest nightly builds of the tools) and run your build script.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use a PowerShell or bash script to orchestrate the .NET Core commands or use a project file that outlines the build process.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>orchestration section<ept id="p1">](#orchestrating-the-build)</ept> provides more detail on these options.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After you create a script that performs a manual CI build server setup, use it on your dev machine to build your code locally for testing purposes.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Once you confirm that the script is running well locally, deploy it to your CI build server.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A relatively simple PowerShell script demonstrates how to obtain the .NET Core SDK and install it on a Windows build server:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You provide the implementation for your build process at the end of the script.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The script acquires the tools and then executes your build process.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For UNIX machines, the following bash script performs the actions described in the PowerShell script in a similar manner:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Travis CI</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can configure <bpt id="p1">[</bpt>Travis CI<ept id="p1">](https://travis-ci.org/)</ept> to install the .NET Core SDK using the <ph id="ph1">`csharp`</ph> language and the <ph id="ph2">`dotnet`</ph> key.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see the official Travis CI docs on <bpt id="p1">[</bpt>Building a C#, F#, or Visual Basic Project<ept id="p1">](https://docs.travis-ci.com/user/languages/csharp/)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Note as you access the Travis CI information that the community-maintained <ph id="ph1">`language: csharp`</ph> language identifier works for all .NET languages, including F#, and Mono.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Travis CI runs both macOS and Linux jobs in a <bpt id="p1">*</bpt>build matrix<ept id="p1">*</ept>, where you specify a combination of runtime, environment, and exclusions/inclusions to cover your build combinations for your app.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Customizing the Build<ept id="p1">](https://docs.travis-ci.com/user/customizing-the-build)</ept> article in the Travis CI documentation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The MSBuild-based tools include the LTS (1.0.x) and Current (1.1.x) runtimes in the package; so by installing the SDK, you receive everything you need to build.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>AppVeyor</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AppVeyor<ept id="p1">](https://www.appveyor.com/)</ept> installs the .NET Core 1.0.1 SDK with the <ph id="ph1">`Visual Studio 2017`</ph> build worker image.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Other build images with different versions of the .NET Core SDK are available.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>appveyor.yml example<ept id="p1">](https://github.com/dotnet/docs/blob/master/appveyor.yml)</ept> and the <bpt id="p2">[</bpt>Build worker images<ept id="p2">](https://www.appveyor.com/docs/build-environment/#build-worker-images)</ept> article in the AppVeyor docs.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK binaries are downloaded and unzipped in a subdirectory using the install script, and then they're added to the <ph id="ph1">`PATH`</ph> environment variable.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Add a build matrix to run integration tests with multiple versions of the .NET Core SDK:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Azure DevOps Services</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Configure Azure DevOps Services to build .NET Core projects using one of these approaches:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Run the script from the <bpt id="p1">[</bpt>manual setup step<ept id="p1">](#manual-setup)</ept> using your commands.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Create a build composed of several Azure DevOps Services built-in build tasks that are configured to use .NET Core tools.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Both solutions are valid.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Using a manual setup script, you control the version of the tools that you receive, since you download them as part of the build.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The build is run from a script that you must create.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This article only covers the manual option.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information on composing a build with Azure DevOps Services build tasks, see the <bpt id="p1">[</bpt>Azure Pipelines<ept id="p1">](https://docs.microsoft.com/azure/devops/pipelines/index)</ept> documentation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To use a manual setup script in Azure DevOps Services, create a new build definition and specify the script to run for the build step.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This is accomplished using the Azure DevOps Services user interface:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Start by creating a new build definition.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Once you reach the screen that provides you an option to define what kind of a build you wish to create, select the <bpt id="p1">**</bpt>Empty<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Selecting an empty build definition</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>After configuring the repository to build, you're directed to the build definitions.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Add build step<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Adding a build step</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You're presented with the <bpt id="p1">**</bpt>Task catalog<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The catalog contains tasks that you use in the build.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Since you have a script, select the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> button for <bpt id="p2">**</bpt>PowerShell: Run a PowerShell script<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Adding a PowerShell script step</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Configure the build step.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Add the script from the repository that you're building:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Specifying the PowerShell script to run</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Orchestrating the build</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Most of this document describes how to acquire the .NET Core tools and configure various CI services without providing information on how to orchestrate, or <bpt id="p1">*</bpt>actually build<ept id="p1">*</ept>, your code with .NET Core.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The choices on how to structure the build process depend on many factors that can't be covered in a general way here.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information on orchestrating your builds with each technology, explore the resources and samples provided in the documentation sets of <bpt id="p1">[</bpt>Travis CI<ept id="p1">](https://travis-ci.org/)</ept>, <bpt id="p2">[</bpt>AppVeyor<ept id="p2">](https://www.appveyor.com/)</ept>, and <bpt id="p3">[</bpt>Azure Pipelines<ept id="p3">](https://docs.microsoft.com/azure/devops/pipelines/index)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Two general approaches that you take in structuring the build process for .NET Core code using the .NET Core tools are using MSBuild directly or using the .NET Core command-line commands.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Which approach you should take is determined by your comfort level with the approaches and trade-offs in complexity.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>MSBuild provides you the ability to express your build process as tasks and targets, but it comes with the added complexity of learning MSBuild project file syntax.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Using the .NET Core command-line tools is perhaps simpler, but it requires you to write orchestration logic in a scripting language like <ph id="ph1">`bash`</ph> or PowerShell.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET downloads - Linux<ept id="p1">](https://dotnet.microsoft.com/download?initial-os=linux)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>