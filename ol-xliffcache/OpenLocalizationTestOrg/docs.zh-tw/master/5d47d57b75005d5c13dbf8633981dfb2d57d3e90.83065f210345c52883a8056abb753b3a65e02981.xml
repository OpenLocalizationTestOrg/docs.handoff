{"content":"---\ntitle: \"For...Next Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Step\"\n  - \"vb.Next\"\n  - \"vb.To\"\n  - \"vb.for\"\nhelpviewer_keywords: \n  - \"infinite loops\"\n  - \"Next keyword [Visual Basic], For...Next statements\"\n  - \"For keyword [Visual Basic], For...Next statements\"\n  - \"Step keyword [Visual Basic], For...Next statements\"\n  - \"operator overloading, For...Next statement\"\n  - \"To keyword [Visual Basic], For...Next statements\"\n  - \"endless loops\"\n  - \"loops, endless\"\n  - \"instructions, repeating\"\n  - \"Next statement [Visual Basic], For...Next\"\n  - \"For...Next statements\"\n  - \"loop structures [Visual Basic], For...Next\"\n  - \"loops, infinite\"\n  - \"Exit statement [Visual Basic], For...Next statements\"\n  - \"For statement [Visual Basic]\"\nms.assetid: f5fc0d51-67ce-4c36-9f09-31c9a91c94e9\n---\n# For...Next Statement (Visual Basic)\nRepeats a group of statements a specified number of times.  \n  \n## Syntax  \n  \n```  \nFor counter [ As datatype ] = start To end [ Step step ]  \n    [ statements ]  \n    [ Continue For ]  \n    [ statements ]  \n    [ Exit For ]  \n    [ statements ]  \nNext [ counter ]  \n```  \n  \n## Parts  \n  \n|Part|Description|  \n|----------|-----------------|  \n|`counter`|Required in the `For` statement. Numeric variable. The control variable for the loop. For more information, see [Counter Argument](#BKMK_Counter) later in this topic.|  \n|`datatype`|Optional. Data type of `counter`. For more information, see [Counter Argument](#BKMK_Counter) later in this topic.|  \n|`start`|Required. Numeric expression. The initial value of `counter`.|  \n|`end`|Required. Numeric expression. The final value of `counter`.|  \n|`step`|Optional. Numeric expression. The amount by which `counter` is incremented each time through the loop.|  \n|`statements`|Optional. One or more statements between `For` and `Next` that run the specified number of times.|  \n|`Continue For`|Optional. Transfers control to the next loop iteration.|  \n|`Exit For`|Optional. Transfers control out of the `For` loop.|  \n|`Next`|Required. Terminates the definition of the `For` loop.|  \n  \n> [!NOTE]\n>  The `To` keyword is used in this statement to specify the range for the counter. You can also use this keyword in the [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) and in array declarations. For more information about array declarations, see [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md).  \n  \n## Simple Examples  \n You use a `For`...`Next` structure when you want to repeat a set of statements a set number of times.  \n  \n In the following example, the `index` variable starts with a value of 1 and is incremented with each iteration of the loop, ending after the value of `index` reaches 5.  \n  \n [!code-vb[VbVbalrStatements#111](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class7.vb#111)]  \n  \n In the following example, the `number` variable starts at 2 and is reduced by 0.25 on each iteration of the loop, ending after the value of `number` reaches 0. The `Step` argument of `-.25` reduces the value by 0.25 on each iteration of the loop.  \n  \n [!code-vb[VbVbalrStatements#112](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class7.vb#112)]  \n  \n> [!TIP]\n>  A [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) or [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md) works well when you don't know in advance how many times to run the statements in the loop. However, when you expect to run the loop a specific number of times, a `For`...`Next` loop is a better choice. You determine the number of iterations when you first enter the loop.  \n  \n## Nesting Loops  \n You can nest `For` loops by putting one loop within another. The following example demonstrates nested `For`...`Next` structures that have different step values. The outer loop creates a string for every iteration of the loop. The inner loop decrements a loop counter variable for every iteration of the loop.  \n  \n [!code-vb[VbVbalrStatements#113](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class7.vb#113)]  \n  \n When nesting loops, each loop must have a unique `counter` variable.  \n  \n You can also nest different kinds control structures within each other. For more information, see [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md).  \n  \n## Exit For and Continue For  \n The `Exit For` statement immediately exits the `For`…`Next` loop and transfers control to the statement that follows the `Next` statement.  \n  \n The `Continue For` statement transfers control immediately to the next iteration of the loop. For more information, see [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md).  \n  \n The following example illustrates the use of the `Continue For` and `Exit For` statements.  \n  \n [!code-vb[VbVbalrStatements#115](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class7.vb#115)]  \n  \n You can put any number of `Exit For` statements in a `For`…`Next` loop. When used within nested `For`…`Next` loops, `Exit For` exits the innermost loop and transfers control to the next higher level of nesting.  \n  \n `Exit For` is often used after you evaluate some condition (for example, in an `If`...`Then`...`Else` structure). You might want to use `Exit For` for the following conditions:  \n  \n-   Continuing to iterate is unnecessary or impossible. An erroneous value or a termination request might create this condition.  \n  \n-   A `Try`...`Catch`...`Finally` statement catches an exception. You might use `Exit For` at the end of the `Finally` block.  \n  \n-   You have an endless loop, which is a loop that could run a large or even infinite number of times. If you detect such a condition, you can use `Exit For` to escape the loop. For more information, see [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md).  \n  \n## Technical Implementation  \n When a `For`...`Next` loop starts, Visual Basic evaluates `start`, `end`, and `step`. Visual Basic evaluates these values only at this time and then assigns `start` to `counter`. Before the statement block runs, Visual Basic compares `counter` to `end`. If `counter` is already larger than the `end` value (or smaller if `step` is negative), the `For` loop ends and control passes to the statement that follows the `Next` statement. Otherwise, the statement block runs.  \n  \n Each time Visual Basic encounters the `Next` statement, it increments `counter` by `step` and returns to the `For` statement. Again it compares `counter` to `end`, and again it either runs the block or exits the loop, depending on the result. This process continues until `counter` passes `end` or an `Exit For` statement is encountered.  \n  \n The loop doesn't stop until `counter` has passed `end`. If `counter` is equal to `end`, the loop continues. The comparison that determines whether to run the block is `counter` <= `end` if `step` is positive and `counter` >= `end` if `step` is negative.  \n  \n If you change the value of `counter` while inside a loop, your code might be more difficult to read and debug. Changing the value of `start`, `end`, or `step` doesn't affect the iteration values that were determined when the loop was first entered.  \n  \n If you nest loops, the compiler signals an error if it encounters the `Next` statement of an outer nesting level before the `Next` statement of an inner level. However, the compiler can detect this overlapping error only if you specify `counter` in every `Next` statement.  \n  \n### Step Argument  \n The value of `step` can be either positive or negative. This parameter determines loop processing according to the following table:  \n  \n|**Step value**|**Loop executes if**|  \n|--------------------|--------------------------|  \n|Positive or zero|`counter` <= `end`|  \n|Negative|`counter` >= `end`|  \n  \n The default value of `step` is 1.  \n  \n### <a name=\"BKMK_Counter\"></a> Counter Argument  \n The following table indicates whether `counter` defines a new local variable that’s scoped to the entire `For…Next` loop. This determination depends on whether `datatype` is present and whether `counter` is already defined.  \n  \n|Is `datatype` present?|Is `counter` already defined?|Result (whether `counter` defines a new local variable that’s scoped to the entire `For...Next` loop)|  \n|----------------------------|-----------------------------------|-------------------------------------------------------------------------------------------------------------|  \n|No|Yes|No, because `counter` is already defined. If the scope of `counter` isn't local to the procedure, a compile-time warning occurs.|  \n|No|No|Yes. The data type is inferred from the `start`, `end`, and `step` expressions. For information about type inference, see [Option Infer Statement](../../../visual-basic/language-reference/statements/option-infer-statement.md) and [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md).|  \n|Yes|Yes|Yes, but only if the existing `counter` variable is defined outside the procedure. That variable remains separate. If the scope of the existing `counter` variable is local to the procedure, a compile-time error occurs.|  \n|Yes|No|Yes.|  \n  \n The data type of `counter` determines the type of the iteration, which must be one of the following types:  \n  \n-   A `Byte`, `SByte`, `UShort`, `Short`, `UInteger`, `Integer`, `ULong`, `Long`, `Decimal`, `Single`, or `Double`.  \n  \n-   An enumeration that you declare by using an [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md).  \n  \n-   An `Object`.  \n  \n-   A type `T` that has the following operators, where `B` is a type that can be used in a `Boolean` expression.  \n  \n     `Public Shared Operator >= (op1 As T, op2 As T) As B`  \n  \n     `Public Shared Operator <= (op1 As T, op2 As T) As B`  \n  \n     `Public Shared Operator - (op1 As T, op2 As T) As T`  \n  \n     `Public Shared Operator + (op1 As T, op2 As T) As T`  \n  \n You can optionally specify the `counter` variable in the `Next` statement. This syntax improves the readability of your program, especially if you have nested `For` loops. You must specify the variable that appears in the corresponding `For` statement.  \n  \n The `start`, `end`, and `step` expressions can evaluate to any data type that widens to the type of `counter`. If you use a user-defined type for `counter`, you might have to define the `CType` conversion operator to convert the types of `start`, `end`, or `step` to the type of `counter`.  \n  \n## Example  \n The following example removes all elements from a generic list. Instead of a [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md), the example shows a `For`...`Next` statement that iterates in descending order. The example uses this technique because the `removeAt` method causes elements after the removed element to have a lower index value.  \n  \n [!code-vb[VbVbalrStatements#114](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class7.vb#114)]  \n  \n## Example  \n The following example iterates through an enumeration that's declared by using an [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md).  \n  \n [!code-vb[VbVbalrStatements#116](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class7.vb#116)]  \n  \n## Example  \n In the following example, the statement parameters use a class that has operator overloads for the `+`, `-`, `>=`, and `<=` operators.  \n  \n [!code-vb[VbVbalrStatements#117](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class7.vb#117)]  \n  \n## See also\n\n- <xref:System.Collections.Generic.List%601>\n- [Loop Structures](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)\n- [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)\n- [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)\n- [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)\n- [Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)\n- [Collections](../../programming-guide/concepts/collections.md)\n","nodes":[{"pos":[4,813],"embed":true,"restype":"x-metadata","content":"title: \"For...Next Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Step\"\n  - \"vb.Next\"\n  - \"vb.To\"\n  - \"vb.for\"\nhelpviewer_keywords: \n  - \"infinite loops\"\n  - \"Next keyword [Visual Basic], For...Next statements\"\n  - \"For keyword [Visual Basic], For...Next statements\"\n  - \"Step keyword [Visual Basic], For...Next statements\"\n  - \"operator overloading, For...Next statement\"\n  - \"To keyword [Visual Basic], For...Next statements\"\n  - \"endless loops\"\n  - \"loops, endless\"\n  - \"instructions, repeating\"\n  - \"Next statement [Visual Basic], For...Next\"\n  - \"For...Next statements\"\n  - \"loop structures [Visual Basic], For...Next\"\n  - \"loops, infinite\"\n  - \"Exit statement [Visual Basic], For...Next statements\"\n  - \"For statement [Visual Basic]\"\nms.assetid: f5fc0d51-67ce-4c36-9f09-31c9a91c94e9","nodes":[{"content":"For...Next Statement (Visual Basic)","nodes":[{"pos":[0,35],"content":"For...Next Statement (Visual Basic)","nodes":[{"content":"For...Next Statement (Visual Basic)","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[820,855],"content":"For...Next Statement (Visual Basic)","linkify":"For...Next Statement (Visual Basic)","nodes":[{"content":"For...Next Statement (Visual Basic)","pos":[0,35]}]},{"content":"Repeats a group of statements a specified number of times.","pos":[856,914]},{"pos":[923,929],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1136,1141],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Part","pos":[1148,1152]},{"content":"Description","pos":[1153,1164]},{"content":"Required in the <ph id=\"ph1\">`For`</ph> statement.","pos":[1212,1244],"source":"Required in the `For` statement."},{"content":"Numeric variable.","pos":[1245,1262]},{"content":"The control variable for the loop.","pos":[1263,1297]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Counter Argument<ept id=\"p1\">](#BKMK_Counter)</ept> later in this topic.","pos":[1298,1378],"source":" For more information, see [Counter Argument](#BKMK_Counter) later in this topic."},{"content":"Optional.","pos":[1394,1403]},{"content":"Data type of <ph id=\"ph1\">`counter`</ph>.","pos":[1404,1427],"source":" Data type of `counter`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Counter Argument<ept id=\"p1\">](#BKMK_Counter)</ept> later in this topic.","pos":[1428,1508],"source":" For more information, see [Counter Argument](#BKMK_Counter) later in this topic."},{"content":"Required.","pos":[1521,1530]},{"content":"Numeric expression.","pos":[1531,1550]},{"content":"The initial value of <ph id=\"ph1\">`counter`</ph>.","pos":[1551,1582],"source":" The initial value of `counter`."},{"content":"Required.","pos":[1593,1602]},{"content":"Numeric expression.","pos":[1603,1622]},{"content":"The final value of <ph id=\"ph1\">`counter`</ph>.","pos":[1623,1652],"source":" The final value of `counter`."},{"content":"Optional.","pos":[1664,1673]},{"content":"Numeric expression.","pos":[1674,1693]},{"content":"The amount by which <ph id=\"ph1\">`counter`</ph> is incremented each time through the loop.","pos":[1694,1766],"source":" The amount by which `counter` is incremented each time through the loop."},{"content":"Optional.","pos":[1784,1793]},{"content":"One or more statements between <ph id=\"ph1\">`For`</ph> and <ph id=\"ph2\">`Next`</ph> that run the specified number of times.","pos":[1794,1881],"source":" One or more statements between `For` and `Next` that run the specified number of times."},{"content":"Optional.","pos":[1901,1910]},{"content":"Transfers control to the next loop iteration.","pos":[1911,1956]},{"content":"Optional.","pos":[1972,1981]},{"content":"Transfers control out of the <ph id=\"ph1\">`For`</ph> loop.","pos":[1982,2022],"source":" Transfers control out of the `For` loop."},{"content":"Required.","pos":[2034,2043]},{"content":"Terminates the definition of the <ph id=\"ph1\">`For`</ph> loop.","pos":[2044,2088],"source":" Terminates the definition of the `For` loop."},{"pos":[2097,2494],"content":"[!NOTE]\n The `To` keyword is used in this statement to specify the range for the counter. You can also use this keyword in the [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) and in array declarations. For more information about array declarations, see [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md).","leadings":["","> "],"nodes":[{"content":"The `To` keyword is used in this statement to specify the range for the counter. You can also use this keyword in the [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) and in array declarations. For more information about array declarations, see [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md).","pos":[9,395],"nodes":[{"content":"The <ph id=\"ph1\">`To`</ph> keyword is used in this statement to specify the range for the counter.","pos":[0,80],"source":"The `To` keyword is used in this statement to specify the range for the counter."},{"content":"You can also use this keyword in the <bpt id=\"p1\">[</bpt>Select...Case Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept> and in array declarations.","pos":[81,248],"source":" You can also use this keyword in the [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) and in array declarations."},{"content":"For more information about array declarations, see <bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.","pos":[249,386],"source":" For more information about array declarations, see [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)."}]}]},{"pos":[2503,2518],"content":"Simple Examples","linkify":"Simple Examples","nodes":[{"content":"Simple Examples","pos":[0,15]}]},{"pos":[2522,2623],"content":"You use a <ph id=\"ph1\">`For`</ph>...<ph id=\"ph2\">`Next`</ph> structure when you want to repeat a set of statements a set number of times.","source":"You use a `For`...`Next` structure when you want to repeat a set of statements a set number of times."},{"pos":[2630,2798],"content":"In the following example, the <ph id=\"ph1\">`index`</ph> variable starts with a value of 1 and is incremented with each iteration of the loop, ending after the value of <ph id=\"ph2\">`index`</ph> reaches 5.","source":"In the following example, the `index` variable starts with a value of 1 and is incremented with each iteration of the loop, ending after the value of `index` reaches 5."},{"content":"In the following example, the <ph id=\"ph1\">`number`</ph> variable starts at 2 and is reduced by 0.25 on each iteration of the loop, ending after the value of <ph id=\"ph2\">`number`</ph> reaches 0.","pos":[2933,3092],"source":"In the following example, the `number` variable starts at 2 and is reduced by 0.25 on each iteration of the loop, ending after the value of `number` reaches 0."},{"content":"The <ph id=\"ph1\">`Step`</ph> argument of <ph id=\"ph2\">`-.25`</ph> reduces the value by 0.25 on each iteration of the loop.","pos":[3093,3179],"source":" The `Step` argument of `-.25` reduces the value by 0.25 on each iteration of the loop."},{"pos":[3315,3810],"content":"[!TIP]\n A [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) or [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md) works well when you don't know in advance how many times to run the statements in the loop. However, when you expect to run the loop a specific number of times, a `For`...`Next` loop is a better choice. You determine the number of iterations when you first enter the loop.","leadings":["","> "],"nodes":[{"content":"A [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) or [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md) works well when you don't know in advance how many times to run the statements in the loop. However, when you expect to run the loop a specific number of times, a `For`...`Next` loop is a better choice. You determine the number of iterations when you first enter the loop.","pos":[8,493],"nodes":[{"content":"A <bpt id=\"p1\">[</bpt>While...End While Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept> or <bpt id=\"p2\">[</bpt>Do...Loop Statement<ept id=\"p2\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept> works well when you don't know in advance how many times to run the statements in the loop.","pos":[0,304],"source":"A [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) or [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md) works well when you don't know in advance how many times to run the statements in the loop."},{"content":"However, when you expect to run the loop a specific number of times, a <ph id=\"ph1\">`For`</ph>...<ph id=\"ph2\">`Next`</ph> loop is a better choice.","pos":[305,415],"source":" However, when you expect to run the loop a specific number of times, a `For`...`Next` loop is a better choice."},{"content":"You determine the number of iterations when you first enter the loop.","pos":[416,485]}]}]},{"pos":[3819,3832],"content":"Nesting Loops","linkify":"Nesting Loops","nodes":[{"content":"Nesting Loops","pos":[0,13]}]},{"content":"You can nest <ph id=\"ph1\">`For`</ph> loops by putting one loop within another.","pos":[3836,3896],"source":"You can nest `For` loops by putting one loop within another."},{"content":"The following example demonstrates nested <ph id=\"ph1\">`For`</ph>...<ph id=\"ph2\">`Next`</ph> structures that have different step values.","pos":[3897,3997],"source":" The following example demonstrates nested `For`...`Next` structures that have different step values."},{"content":"The outer loop creates a string for every iteration of the loop.","pos":[3998,4062]},{"content":"The inner loop decrements a loop counter variable for every iteration of the loop.","pos":[4063,4145]},{"pos":[4280,4348],"content":"When nesting loops, each loop must have a unique <ph id=\"ph1\">`counter`</ph> variable.","source":"When nesting loops, each loop must have a unique `counter` variable."},{"content":"You can also nest different kinds control structures within each other.","pos":[4355,4426]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.","pos":[4427,4582],"source":" For more information, see [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)."},{"pos":[4591,4616],"content":"Exit For and Continue For","linkify":"Exit For and Continue For","nodes":[{"content":"Exit For and Continue For","pos":[0,25]}]},{"content":"The <ph id=\"ph1\">`Exit For`</ph> statement immediately exits the <ph id=\"ph2\">`For`</ph>…<ph id=\"ph3\">`Next`</ph>","pos":[4620,4679],"source":"The `Exit For` statement immediately exits the `For`…`Next`"},{"content":"loop and transfers control to the statement that follows the <ph id=\"ph1\">`Next`</ph> statement.","pos":[4680,4758],"source":" loop and transfers control to the statement that follows the `Next` statement."},{"content":"The <ph id=\"ph1\">`Continue For`</ph> statement transfers control immediately to the next iteration of the loop.","pos":[4765,4858],"source":"The `Continue For` statement transfers control immediately to the next iteration of the loop."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Continue Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>.","pos":[4859,4981],"source":" For more information, see [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)."},{"pos":[4988,5078],"content":"The following example illustrates the use of the <ph id=\"ph1\">`Continue For`</ph> and <ph id=\"ph2\">`Exit For`</ph> statements.","source":"The following example illustrates the use of the `Continue For` and `Exit For` statements."},{"content":"You can put any number of <ph id=\"ph1\">`Exit For`</ph> statements in a <ph id=\"ph2\">`For`</ph>…<ph id=\"ph3\">`Next`</ph>","pos":[5213,5278],"source":"You can put any number of `Exit For` statements in a `For`…`Next`"},{"content":"loop.","pos":[5279,5284]},{"content":"When used within nested <ph id=\"ph1\">`For`</ph>…<ph id=\"ph2\">`Next`</ph>","pos":[5285,5321],"source":" When used within nested `For`…`Next`"},{"content":"loops, <ph id=\"ph1\">`Exit For`</ph> exits the innermost loop and transfers control to the next higher level of nesting.","pos":[5322,5423],"source":" loops, `Exit For` exits the innermost loop and transfers control to the next higher level of nesting."},{"content":"<ph id=\"ph1\">`Exit For`</ph> is often used after you evaluate some condition (for example, in an <ph id=\"ph2\">`If`</ph>...<ph id=\"ph3\">`Then`</ph>...<ph id=\"ph4\">`Else`</ph> structure).","pos":[5430,5543],"source":"`Exit For` is often used after you evaluate some condition (for example, in an `If`...`Then`...`Else` structure)."},{"content":"You might want to use <ph id=\"ph1\">`Exit For`</ph> for the following conditions:","pos":[5544,5606],"source":" You might want to use `Exit For` for the following conditions:"},{"content":"Continuing to iterate is unnecessary or impossible.","pos":[5616,5667]},{"content":"An erroneous value or a termination request might create this condition.","pos":[5668,5740]},{"content":"A <ph id=\"ph1\">`Try`</ph>...<ph id=\"ph2\">`Catch`</ph>...<ph id=\"ph3\">`Finally`</ph> statement catches an exception.","pos":[5750,5811],"source":"A `Try`...`Catch`...`Finally` statement catches an exception."},{"content":"You might use <ph id=\"ph1\">`Exit For`</ph> at the end of the <ph id=\"ph2\">`Finally`</ph> block.","pos":[5812,5871],"source":" You might use `Exit For` at the end of the `Finally` block."},{"content":"You have an endless loop, which is a loop that could run a large or even infinite number of times.","pos":[5881,5979]},{"content":"If you detect such a condition, you can use <ph id=\"ph1\">`Exit For`</ph> to escape the loop.","pos":[5980,6054],"source":" If you detect such a condition, you can use `Exit For` to escape the loop."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>.","pos":[6055,6177],"source":" For more information, see [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)."},{"pos":[6186,6210],"content":"Technical Implementation","linkify":"Technical Implementation","nodes":[{"content":"Technical Implementation","pos":[0,24]}]},{"content":"When a <ph id=\"ph1\">`For`</ph>...<ph id=\"ph2\">`Next`</ph> loop starts, Visual Basic evaluates <ph id=\"ph3\">`start`</ph>, <ph id=\"ph4\">`end`</ph>, and <ph id=\"ph5\">`step`</ph>.","pos":[6214,6299],"source":"When a `For`...`Next` loop starts, Visual Basic evaluates `start`, `end`, and `step`."},{"content":"Visual Basic evaluates these values only at this time and then assigns <ph id=\"ph1\">`start`</ph> to <ph id=\"ph2\">`counter`</ph>.","pos":[6300,6392],"source":" Visual Basic evaluates these values only at this time and then assigns `start` to `counter`."},{"content":"Before the statement block runs, Visual Basic compares <ph id=\"ph1\">`counter`</ph> to <ph id=\"ph2\">`end`</ph>.","pos":[6393,6467],"source":" Before the statement block runs, Visual Basic compares `counter` to `end`."},{"content":"If <ph id=\"ph1\">`counter`</ph> is already larger than the <ph id=\"ph2\">`end`</ph> value (or smaller if <ph id=\"ph3\">`step`</ph> is negative), the <ph id=\"ph4\">`For`</ph> loop ends and control passes to the statement that follows the <ph id=\"ph5\">`Next`</ph> statement.","pos":[6468,6646],"source":" If `counter` is already larger than the `end` value (or smaller if `step` is negative), the `For` loop ends and control passes to the statement that follows the `Next` statement."},{"content":"Otherwise, the statement block runs.","pos":[6647,6683]},{"content":"Each time Visual Basic encounters the <ph id=\"ph1\">`Next`</ph> statement, it increments <ph id=\"ph2\">`counter`</ph> by <ph id=\"ph3\">`step`</ph> and returns to the <ph id=\"ph4\">`For`</ph> statement.","pos":[6690,6815],"source":"Each time Visual Basic encounters the `Next` statement, it increments `counter` by `step` and returns to the `For` statement."},{"content":"Again it compares <ph id=\"ph1\">`counter`</ph> to <ph id=\"ph2\">`end`</ph>, and again it either runs the block or exits the loop, depending on the result.","pos":[6816,6932],"source":" Again it compares `counter` to `end`, and again it either runs the block or exits the loop, depending on the result."},{"content":"This process continues until <ph id=\"ph1\">`counter`</ph> passes <ph id=\"ph2\">`end`</ph> or an <ph id=\"ph3\">`Exit For`</ph> statement is encountered.","pos":[6933,7027],"source":" This process continues until `counter` passes `end` or an `Exit For` statement is encountered."},{"content":"The loop doesn't stop until <ph id=\"ph1\">`counter`</ph> has passed <ph id=\"ph2\">`end`</ph>.","pos":[7034,7089],"source":"The loop doesn't stop until `counter` has passed `end`."},{"content":"If <ph id=\"ph1\">`counter`</ph> is equal to <ph id=\"ph2\">`end`</ph>, the loop continues.","pos":[7090,7141],"source":" If `counter` is equal to `end`, the loop continues."},{"content":"The comparison that determines whether to run the block is <ph id=\"ph1\">`counter`</ph><ph id=\"ph2\"> &lt;= </ph><ph id=\"ph3\">`end`</ph> if <ph id=\"ph4\">`step`</ph> is positive and <ph id=\"ph5\">`counter`</ph><ph id=\"ph6\"> &gt;= </ph><ph id=\"ph7\">`end`</ph> if <ph id=\"ph8\">`step`</ph> is negative.","pos":[7142,7287],"source":" The comparison that determines whether to run the block is `counter` <= `end` if `step` is positive and `counter` >= `end` if `step` is negative."},{"content":"If you change the value of <ph id=\"ph1\">`counter`</ph> while inside a loop, your code might be more difficult to read and debug.","pos":[7294,7404],"source":"If you change the value of `counter` while inside a loop, your code might be more difficult to read and debug."},{"content":"Changing the value of <ph id=\"ph1\">`start`</ph>, <ph id=\"ph2\">`end`</ph>, or <ph id=\"ph3\">`step`</ph> doesn't affect the iteration values that were determined when the loop was first entered.","pos":[7405,7542],"source":" Changing the value of `start`, `end`, or `step` doesn't affect the iteration values that were determined when the loop was first entered."},{"content":"If you nest loops, the compiler signals an error if it encounters the <ph id=\"ph1\">`Next`</ph> statement of an outer nesting level before the <ph id=\"ph2\">`Next`</ph> statement of an inner level.","pos":[7549,7708],"source":"If you nest loops, the compiler signals an error if it encounters the `Next` statement of an outer nesting level before the `Next` statement of an inner level."},{"content":"However, the compiler can detect this overlapping error only if you specify <ph id=\"ph1\">`counter`</ph> in every <ph id=\"ph2\">`Next`</ph> statement.","pos":[7709,7821],"source":" However, the compiler can detect this overlapping error only if you specify `counter` in every `Next` statement."},{"pos":[7831,7844],"content":"Step Argument","linkify":"Step Argument","nodes":[{"content":"Step Argument","pos":[0,13]}]},{"content":"The value of <ph id=\"ph1\">`step`</ph> can be either positive or negative.","pos":[7848,7903],"source":"The value of `step` can be either positive or negative."},{"content":"This parameter determines loop processing according to the following table:","pos":[7904,7979]},{"pos":[7986,8000],"content":"<bpt id=\"p1\">**</bpt>Step value<ept id=\"p1\">**</ept>","source":"**Step value**"},{"pos":[8001,8021],"content":"<bpt id=\"p1\">**</bpt>Loop executes if<ept id=\"p1\">**</ept>","source":"**Loop executes if**"},{"content":"Positive or zero","pos":[8078,8094]},{"content":"Negative","pos":[8118,8126]},{"pos":[8153,8186],"content":"The default value of <ph id=\"ph1\">`step`</ph> is 1.","source":"The default value of `step` is 1."},{"pos":[8196,8240],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_Counter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Counter Argument","linkify":"<a name=\"BKMK_Counter\"></a> Counter Argument","source":"<a name=\"BKMK_Counter\"></a> Counter Argument"},{"content":"The following table indicates whether <ph id=\"ph1\">`counter`</ph> defines a new local variable that’s scoped to the entire <ph id=\"ph2\">`For…Next`</ph> loop.","pos":[8244,8365],"source":"The following table indicates whether `counter` defines a new local variable that’s scoped to the entire `For…Next` loop."},{"content":"This determination depends on whether <ph id=\"ph1\">`datatype`</ph> is present and whether <ph id=\"ph2\">`counter`</ph> is already defined.","pos":[8366,8467],"source":" This determination depends on whether `datatype` is present and whether `counter` is already defined."},{"pos":[8474,8496],"content":"Is <ph id=\"ph1\">`datatype`</ph> present?","source":"Is `datatype` present?"},{"pos":[8497,8526],"content":"Is <ph id=\"ph1\">`counter`</ph> already defined?","source":"Is `counter` already defined?"},{"pos":[8527,8628],"content":"Result (whether <ph id=\"ph1\">`counter`</ph> defines a new local variable that’s scoped to the entire <ph id=\"ph2\">`For...Next`</ph> loop)","source":"Result (whether `counter` defines a new local variable that’s scoped to the entire `For...Next` loop)"},{"content":"No","pos":[8812,8814]},{"content":"Yes","pos":[8815,8818]},{"content":"No, because <ph id=\"ph1\">`counter`</ph> is already defined.","pos":[8819,8860],"source":"No, because `counter` is already defined."},{"content":"If the scope of <ph id=\"ph1\">`counter`</ph> isn't local to the procedure, a compile-time warning occurs.","pos":[8861,8947],"source":" If the scope of `counter` isn't local to the procedure, a compile-time warning occurs."},{"content":"No","pos":[8952,8954]},{"content":"No","pos":[8955,8957]},{"content":"Yes.","pos":[8958,8962]},{"content":"The data type is inferred from the <ph id=\"ph1\">`start`</ph>, <ph id=\"ph2\">`end`</ph>, and <ph id=\"ph3\">`step`</ph> expressions.","pos":[8963,9037],"source":" The data type is inferred from the `start`, `end`, and `step` expressions."},{"content":"For information about type inference, see <bpt id=\"p1\">[</bpt>Option Infer Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> and <bpt id=\"p2\">[</bpt>Local Type Inference<ept id=\"p2\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.","pos":[9038,9304],"source":" For information about type inference, see [Option Infer Statement](../../../visual-basic/language-reference/statements/option-infer-statement.md) and [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)."},{"content":"Yes","pos":[9309,9312]},{"content":"Yes","pos":[9313,9316]},{"content":"Yes, but only if the existing <ph id=\"ph1\">`counter`</ph> variable is defined outside the procedure.","pos":[9317,9399],"source":"Yes, but only if the existing `counter` variable is defined outside the procedure."},{"content":"That variable remains separate.","pos":[9400,9431]},{"content":"If the scope of the existing <ph id=\"ph1\">`counter`</ph> variable is local to the procedure, a compile-time error occurs.","pos":[9432,9535],"source":" If the scope of the existing `counter` variable is local to the procedure, a compile-time error occurs."},{"content":"Yes","pos":[9540,9543]},{"content":"No","pos":[9544,9546]},{"content":"Yes.","pos":[9547,9551]},{"pos":[9559,9665],"content":"The data type of <ph id=\"ph1\">`counter`</ph> determines the type of the iteration, which must be one of the following types:","source":"The data type of `counter` determines the type of the iteration, which must be one of the following types:"},{"pos":[9675,9786],"content":"A <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`SByte`</ph>, <ph id=\"ph3\">`UShort`</ph>, <ph id=\"ph4\">`Short`</ph>, <ph id=\"ph5\">`UInteger`</ph>, <ph id=\"ph6\">`Integer`</ph>, <ph id=\"ph7\">`ULong`</ph>, <ph id=\"ph8\">`Long`</ph>, <ph id=\"ph9\">`Decimal`</ph>, <ph id=\"ph10\">`Single`</ph>, or <ph id=\"ph11\">`Double`</ph>.","source":"A `Byte`, `SByte`, `UShort`, `Short`, `UInteger`, `Integer`, `ULong`, `Long`, `Decimal`, `Single`, or `Double`."},{"pos":[9796,9928],"content":"An enumeration that you declare by using an <bpt id=\"p1\">[</bpt>Enum Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/enum-statement.md)</ept>.","source":"An enumeration that you declare by using an [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)."},{"pos":[9938,9950],"content":"An <ph id=\"ph1\">`Object`</ph>.","source":"An `Object`."},{"pos":[9960,10068],"content":"A type <ph id=\"ph1\">`T`</ph> that has the following operators, where <ph id=\"ph2\">`B`</ph> is a type that can be used in a <ph id=\"ph3\">`Boolean`</ph> expression.","source":"A type `T` that has the following operators, where `B` is a type that can be used in a `Boolean` expression."},{"content":"You can optionally specify the <ph id=\"ph1\">`counter`</ph> variable in the <ph id=\"ph2\">`Next`</ph> statement.","pos":[10329,10403],"source":"You can optionally specify the `counter` variable in the `Next` statement."},{"content":"This syntax improves the readability of your program, especially if you have nested <ph id=\"ph1\">`For`</ph> loops.","pos":[10404,10500],"source":" This syntax improves the readability of your program, especially if you have nested `For` loops."},{"content":"You must specify the variable that appears in the corresponding <ph id=\"ph1\">`For`</ph> statement.","pos":[10501,10581],"source":" You must specify the variable that appears in the corresponding `For` statement."},{"content":"The <ph id=\"ph1\">`start`</ph>, <ph id=\"ph2\">`end`</ph>, and <ph id=\"ph3\">`step`</ph> expressions can evaluate to any data type that widens to the type of <ph id=\"ph4\">`counter`</ph>.","pos":[10588,10698],"source":"The `start`, `end`, and `step` expressions can evaluate to any data type that widens to the type of `counter`."},{"content":"If you use a user-defined type for <ph id=\"ph1\">`counter`</ph>, you might have to define the <ph id=\"ph2\">`CType`</ph> conversion operator to convert the types of <ph id=\"ph3\">`start`</ph>, <ph id=\"ph4\">`end`</ph>, or <ph id=\"ph5\">`step`</ph> to the type of <ph id=\"ph6\">`counter`</ph>.","pos":[10699,10877],"source":" If you use a user-defined type for `counter`, you might have to define the `CType` conversion operator to convert the types of `start`, `end`, or `step` to the type of `counter`."},{"pos":[10886,10893],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example removes all elements from a generic list.","pos":[10897,10960]},{"content":"Instead of a <bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>, the example shows a <ph id=\"ph1\">`For`</ph>...<ph id=\"ph2\">`Next`</ph> statement that iterates in descending order.","pos":[10961,11162],"source":" Instead of a [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md), the example shows a `For`...`Next` statement that iterates in descending order."},{"content":"The example uses this technique because the <ph id=\"ph1\">`removeAt`</ph> method causes elements after the removed element to have a lower index value.","pos":[11163,11295],"source":" The example uses this technique because the `removeAt` method causes elements after the removed element to have a lower index value."},{"pos":[11432,11439],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11443,11613],"content":"The following example iterates through an enumeration that's declared by using an <bpt id=\"p1\">[</bpt>Enum Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/enum-statement.md)</ept>.","source":"The following example iterates through an enumeration that's declared by using an [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)."},{"pos":[11750,11757],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11761,11895],"content":"In the following example, the statement parameters use a class that has operator overloads for the <ph id=\"ph1\">`+`</ph>, <ph id=\"ph2\">`-`</ph>, <ph id=\"ph3\">`&gt;=`</ph>, and <ph id=\"ph4\">`&lt;=`</ph> operators.","source":"In the following example, the statement parameters use a class that has operator overloads for the `+`, `-`, `>=`, and `<=` operators."},{"pos":[12032,12040],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[12089,12197],"content":"<bpt id=\"p1\">[</bpt>Loop Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept>","source":"[Loop Structures](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)"},{"pos":[12200,12311],"content":"<bpt id=\"p1\">[</bpt>While...End While Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept>","source":"[While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)"},{"pos":[12314,12409],"content":"<bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>","source":"[Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)"},{"pos":[12412,12540],"content":"<bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>","source":"[Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)"},{"pos":[12543,12630],"content":"<bpt id=\"p1\">[</bpt>Exit Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept>","source":"[Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)"},{"pos":[12633,12695],"content":"<bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../programming-guide/concepts/collections.md)</ept>","source":"[Collections](../../programming-guide/concepts/collections.md)"}]}