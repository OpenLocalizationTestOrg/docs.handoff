{"content":"---\ntitle: \"Specifying XML Values as Parameters | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2c4d08b8-fc29-4614-97fa-29c8ff7ca5b3\ncaps.latest.revision: 5\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Specifying XML Values as Parameters\nIf a query requires a parameter whose value is an XML string, developers can supply that value using an instance of the **SqlXml** data type. There really are no tricks; XML columns in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] accept parameter values in exactly the same way as other data types.  \n  \n## Example  \n The following console application creates a new table in the **AdventureWorks** database. The new table includes a column named **SalesID** and an XML column named **SalesInfo**.  \n  \n> [!NOTE]\n>  The **AdventureWorks** sample database is not installed by default when you install [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. You can install it by running SQL Server Setup.  \n  \n The example prepares a <xref:System.Data.SqlClient.SqlCommand> object to insert a row in the new table. A saved file provides the XML data needed for the **SalesInfo** column.  \n  \n To create the file needed for the example to run, create a new text file in the same folder as your project. Name the file MyTestStoreData.xml. Open the file in Notepad and copy and paste the following text:  \n  \n```xml  \n<StoreSurvey xmlns=\"http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey\">  \n  <AnnualSales>300000</AnnualSales>  \n  <AnnualRevenue>30000</AnnualRevenue>  \n  <BankName>International Bank</BankName>  \n  <BusinessType>BM</BusinessType>  \n  <YearOpened>1970</YearOpened>  \n  <Specialty>Road</Specialty>  \n  <SquareFeet>7000</SquareFeet>  \n  <Brands>3</Brands>  \n  <Internet>T1</Internet>  \n  <NumberEmployees>2</NumberEmployees>  \n</StoreSurvey>  \n```  \n  \n```vb  \nImports System  \nImports System.Data.SqlClient  \nImports System.Data.SqlTypes  \nImports System.Xml  \n  \nModule Module1  \n    Sub Main()  \n  \n        Using connection As SqlConnection = New SqlConnection(GetConnectionString())  \n        connection.Open()  \n  \n        ' Create a sample table (dropping first if it already  \n        ' exists.)  \n        Dim commandNewTable As String = _  \n         \"IF EXISTS (SELECT * FROM dbo.sysobjects \" & _  \n         \"WHERE id = object_id(N'[dbo].[XmlDataTypeSample]') \" & _  \n         \"AND OBJECTPROPERTY(id, N'IsUserTable') = 1) \" & _  \n         \"DROP TABLE [dbo].[XmlDataTypeSample];\" & _  \n         \"CREATE TABLE [dbo].[XmlDataTypeSample](\" & _  \n         \"[SalesID] [int] IDENTITY(1,1) NOT NULL, \" & _  \n         \"[SalesInfo] [xml])\"  \n  \n        Dim commandAdd As New _  \n         SqlCommand(commandNewTable, connection)  \n        commandAdd.ExecuteNonQuery()  \n  \n        Dim commandText As String = _  \n         \"INSERT INTO [dbo].[XmlDataTypeSample] \" & _  \n           \"([SalesInfo] ) \" & _  \n           \"VALUES(@xmlParameter )\"  \n  \n        Dim command As New SqlCommand(commandText, connection)  \n  \n        ' Read the saved XML document as a   \n        ' SqlXml-data typed variable.  \n        Dim newXml As SqlXml = _  \n         New SqlXml(New XmlTextReader(\"MyTestStoreData.xml\"))  \n  \n        ' Supply the SqlXml value for the value of the parameter.  \n        command.Parameters.AddWithValue(\"@xmlParameter\", newXml)  \n  \n        Dim result As Integer = command.ExecuteNonQuery()  \n        Console.WriteLine(result & \" row was added.\")  \n        Console.WriteLine(\"Press Enter to continue.\")  \n        Console.ReadLine()  \n    End Using  \nEnd Sub  \n  \n    Private Function GetConnectionString() As String  \n        ' To avoid storing the connection string in your code,              \n        ' you can retrieve it from a configuration file.   \n        Return \"Data Source=(local);Integrated Security=SSPI;\" & _  \n          \"Initial Catalog=AdventureWorks\"  \n    End Function  \nEnd Module  \n```  \n  \n```csharp  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \nusing System.Xml;  \nusing System.Data.SqlTypes;  \n  \nclass Class1  \n{  \n    static void Main()  \n    {  \n        using (SqlConnection connection = new SqlConnection(GetConnectionString()))  \n       {  \n        connection.Open();  \n        //  Create a sample table (dropping first if it already  \n        //  exists.)  \n  \n        string commandNewTable =   \n            \"IF EXISTS (SELECT * FROM dbo.sysobjects \" +   \n            \"WHERE id = \" +  \n                  \"object_id(N'[dbo].[XmlDataTypeSample]') \" +   \n            \"AND OBJECTPROPERTY(id, N'IsUserTable') = 1) \" +   \n            \"DROP TABLE [dbo].[XmlDataTypeSample];\" +   \n            \"CREATE TABLE [dbo].[XmlDataTypeSample](\" +   \n            \"[SalesID] [int] IDENTITY(1,1) NOT NULL, \" +   \n            \"[SalesInfo] [xml])\";  \n        SqlCommand commandAdd =   \n                   new SqlCommand(commandNewTable, connection);  \n        commandAdd.ExecuteNonQuery();  \n        string commandText =   \n            \"INSERT INTO [dbo].[XmlDataTypeSample] \" +   \n            \"([SalesInfo] ) \" +   \n            \"VALUES(@xmlParameter )\";  \n        SqlCommand command =   \n                  new SqlCommand(commandText, connection);  \n  \n        //  Read the saved XML document as a   \n        //  SqlXml-data typed variable.  \n        SqlXml newXml =   \n            new SqlXml(new XmlTextReader(\"MyTestStoreData.xml\"));  \n  \n        //  Supply the SqlXml value for the value of the parameter.  \n        command.Parameters.AddWithValue(\"@xmlParameter\", newXml);  \n  \n        int result = command.ExecuteNonQuery();  \n        Console.WriteLine(result + \" row was added.\");  \n        Console.WriteLine(\"Press Enter to continue.\");  \n        Console.ReadLine();  \n    }  \n  }  \n  \n    private static string GetConnectionString()  \n    {  \n        // To avoid storing the connection string in your code,              \n        // you can retrieve it from a configuration file.   \n        return \"Data Source=(local);Integrated Security=true;\" +  \n        \"Initial Catalog=AdventureWorks; \";  \n    }  \n}  \n```  \n  \n## See Also  \n <xref:System.Data.SqlTypes.SqlXml>   \n [XML Data in SQL Server](../../../../../docs/framework/data/adonet/sql/xml-data-in-sql-server.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[12,64],"content":"Specifying XML Values as Parameters | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Specifying XML Values as Parameters | Microsoft Docs","pos":[0,52]}]},{"pos":[373,408],"content":"Specifying XML Values as Parameters","linkify":"Specifying XML Values as Parameters","nodes":[{"content":"Specifying XML Values as Parameters","pos":[0,35]}]},{"content":"If a query requires a parameter whose value is an XML string, developers can supply that value using an instance of the <bpt id=\"p1\">**</bpt>SqlXml<ept id=\"p1\">**</ept> data type.","pos":[409,550],"source":"If a query requires a parameter whose value is an XML string, developers can supply that value using an instance of the **SqlXml** data type."},{"content":"There really are no tricks; XML columns in <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> accept parameter values in exactly the same way as other data types.","pos":[551,729],"source":" There really are no tricks; XML columns in [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)] accept parameter values in exactly the same way as other data types."},{"pos":[738,745],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following console application creates a new table in the <bpt id=\"p1\">**</bpt>AdventureWorks<ept id=\"p1\">**</ept> database.","pos":[749,838],"source":"The following console application creates a new table in the **AdventureWorks** database."},{"content":"The new table includes a column named <bpt id=\"p1\">**</bpt>SalesID<ept id=\"p1\">**</ept> and an XML column named <bpt id=\"p2\">**</bpt>SalesInfo<ept id=\"p2\">**</ept>.","pos":[839,927],"source":" The new table includes a column named **SalesID** and an XML column named **SalesInfo**."},{"pos":[935,1145],"content":"[!NOTE]\n The **AdventureWorks** sample database is not installed by default when you install [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. You can install it by running SQL Server Setup.","leadings":["","> "],"nodes":[{"content":" The **AdventureWorks** sample database is not installed by default when you install [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. You can install it by running SQL Server Setup.","pos":[8,208],"nodes":[{"content":"The <bpt id=\"p1\">**</bpt>AdventureWorks<ept id=\"p1\">**</ept> sample database is not installed by default when you install <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph>.","pos":[1,152],"source":" The **AdventureWorks** sample database is not installed by default when you install [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]."},{"content":"You can install it by running SQL Server Setup.","pos":[153,200]}]}]},{"content":"The example prepares a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> object to insert a row in the new table.","pos":[1152,1255],"source":"The example prepares a <xref:System.Data.SqlClient.SqlCommand> object to insert a row in the new table."},{"content":"A saved file provides the XML data needed for the <bpt id=\"p1\">**</bpt>SalesInfo<ept id=\"p1\">**</ept> column.","pos":[1256,1327],"source":" A saved file provides the XML data needed for the **SalesInfo** column."},{"content":"To create the file needed for the example to run, create a new text file in the same folder as your project.","pos":[1334,1442]},{"content":"Name the file MyTestStoreData.xml.","pos":[1443,1477]},{"content":"Open the file in Notepad and copy and paste the following text:","pos":[1478,1541]},{"pos":[6239,6247],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>XML Data in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/xml-data-in-sql-server.md)</ept><ph id=\"ph1\"> </ph>","pos":[6289,6388],"source":" [XML Data in SQL Server](../../../../../docs/framework/data/adonet/sql/xml-data-in-sql-server.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[6391,6495],"source":" [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}