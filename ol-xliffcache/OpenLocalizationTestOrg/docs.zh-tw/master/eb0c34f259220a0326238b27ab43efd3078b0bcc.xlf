<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="x-static-markup-extension.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb0c34f259220a0326238b27ab43efd3078b0bcc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-static-markup-extension.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">540b01f4f99fb31b3dc47fcfdff8326438660bc6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">301ba4d82b7c614fe141f4d164b4b6612ebf6489</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>x:Static Markup Extension</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:Static Markup Extension</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>References any static by-value code entity that is defined in a <ph id="ph1">[!INCLUDE[TLA#tla_cls](../../../includes/tlasharptla-cls-md.md)]</ph>â€“compliant way.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The static property that is referenced can be used to provide the value of a property in XAML.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A prefix that refers to a mapped, non-default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`prefix`</ph> is shown explicitly in the usage because you rarely reference static properties that come from a default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The name of the type that defines the desired static member.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The name of the desired static value member (a constant, a static property, a field, or an enumeration value).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The code entity that is referenced must be one of the following:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A constant</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A static property</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A field</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An enumeration value</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Specifying any other code entity, such as a nonstatic property, causes a compile-time error if the XAML is markup compiled, or a XAML load-time parse exception.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can make <ph id="ph1">`x:Static`</ph> references to static fields or properties that are not in the default XAML namespace for the current XAML document; however, this requires a prefix mapping.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>XAML namespaces are almost always defined on the root element of the XAML document.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The lookup operations for static properties can be performed by .NET Framework XAML Services and its XAML readers and XAML writers, when they are running with the default XAML schema context.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This XAML schema context can use CLR reflection to provide the necessary static values for object graph construction.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeName`</ph> you specify is actually a XAML type name, not a CLR type name, although these are essentially the same name when using the default XAML schema context or when using all existing CLR-based XAML-implementing frameworks.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use caution when you make <ph id="ph1">`x:Static`</ph> references that are not directly the type of a property's value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the XAML processing sequence, provided values from a markup extension do not invoke additional value conversion.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is true even if your <ph id="ph1">`x:Static`</ph> reference creates a text string, and a value conversion for attribute values based on text string typically occurs either for that specific member or for any member values of the return type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Attribute syntax is the most common syntax used with this markup extension.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The string token provided after the <ph id="ph1">`x:Static`</ph> identifier string is assigned as the <ph id="ph2">&lt;xref:System.Windows.Markup.StaticExtension.Member%2A&gt;</ph> value of the underlying <ph id="ph3">&lt;xref:System.Windows.Markup.StaticExtension&gt;</ph> extension class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There are two other XAML usages that are technically possible.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, these usages are less common because they are unnecessarily verbose:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Object element syntax.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Attribute syntax with explicit Member property for initialization string.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the .NET Framework XAML Services implementation, the handling for this markup extension is defined by the <ph id="ph1">&lt;xref:System.Windows.Markup.StaticExtension&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Static`</ph> is a markup extension.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>All markup extensions in XAML use the <ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph> characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must provide a value.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information about markup extensions, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](markup-extensions-for-xaml-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The default XAML namespace you use for WPF programming does not contain many useful static properties, and most of the useful static properties have support such as type converters that facilitate the usage without requiring <ph id="ph1">`{x:Static}`</ph> .</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For static properties, you must map a prefix for a XAML namespace if one of the following is true:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You are referencing a type that exists in WPF but is not part of the default XAML namespace for WPF (<ph id="ph1">[!INCLUDE[TLA#tla_wpfxmlnsv1](../../../includes/tlasharptla-wpfxmlnsv1-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is a fairly common scenario for using <ph id="ph1">`x:Static`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, you might use an <ph id="ph1">`x:Static`</ph> reference with a XAML namespace mapping to the <ph id="ph2">&lt;xref:System&gt;</ph> CLR namespace and mscorlib assembly in order to reference the static properties of the <ph id="ph3">&lt;xref:System.Environment&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You are referencing a type from a custom assembly.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You are referencing a type that exists in a WPF assembly, but that type is within a CLR namespace that was not mapped to be part of the WPF default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The mapping of CLR namespaces into the default XAML namespace for WPF is performed by definitions in the various WPF assemblies (for more information about this concept, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](../wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Non-mapped CLR namespaces can exist if that CLR namespace is composed mostly of class definitions that are not typically intended for XAML, such as <ph id="ph1">&lt;xref:System.Windows.Threading&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information on how to use prefixes and XAML namespaces for WPF, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](../wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Type Markup Extension<ept id="p1">](x-type-markup-extension.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](types-migrated-from-wpf-to-system-xaml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>