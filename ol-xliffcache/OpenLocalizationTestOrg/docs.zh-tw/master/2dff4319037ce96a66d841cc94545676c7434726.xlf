<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dff4319037ce96a66d841cc94545676c7434726</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\atomized-xname-and-xnamespace-objects-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e99ab3ab46e285f12dbd34e421d4654d1e1fdfa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4675566ec65c239312a117998d25916c95e72bd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Atomized XName and XNamespace Objects (LINQ to XML) (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Atomized XName and XNamespace Objects (LINQ to XML) (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects are <bpt id="p1">*</bpt>atomized<ept id="p1">*</ept>; that is, if they contain the same qualified name, they refer to the same object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This yields performance benefits for queries: When you compare two atomized names for equality, the underlying intermediate language only has to determine whether the two references point to the same object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The underlying code does not have to do string comparisons, which would be time consuming.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Atomization Semantics</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Atomization means that if two <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects have the same local name, and they are in the same namespace, they share the same instance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the same way, if two <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects have the same namespace URI, they share the same instance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For a class to enable atomized objects, the constructor for the class must be private, not public.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is because if the constructor were public, you could create a non-atomized object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> classes implement an implicit conversion operator to convert a string into an <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> or <ph id="ph4">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is how you get an instance of these objects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You cannot get an instance by using a constructor, because the constructor is inaccessible.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> also implement the equality and inequality operators, to determine whether the two objects being compared are references to the same instance.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code creates some <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects and demonstrates that identical names share the same instance.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, the benefit of atomized objects is that when you use one of the axis methods that take an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> as a parameter, the axis method only has to determine that two names reference the same instance to select the desired elements.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example passes an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> to the <ph id="ph2">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> method call, which then has better performance because of the atomization pattern.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performance (LINQ to XML) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/performance-linq-to-xml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>