<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7a574504e78dcc7615adc0fbd3741e02d007f5c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\how-to-define-a-generic-method-with-reflection-emit.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab818b153c20ddcbb66dd97b615c5275332dda95</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd9c89fe76bf7dc5e2801cee6967b479022e2c16</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Define a Generic Method with Reflection Emit | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Define a Generic Method with Reflection Emit</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The first procedure shows how to create a simple generic method with two type parameters, and how to apply class constraints, interface constraints, and special constraints to the type parameters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The second procedure shows how to emit the method body, and how to use the type parameters of the generic method to create instances of generic types and to call their methods.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The third procedure shows how to invoke the generic method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A method is not generic just because it belongs to a generic type and uses the type parameters of that type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A method is generic only if it has its own type parameter list.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A generic method can appear on a nongeneric type, as in this example.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For an example of a nongeneric method on a generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To define a generic method</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Before beginning, it is useful to look at how the generic method appears when written using a high-level language.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code is included in the example code for this topic, along with code to call the generic method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The method has two type parameters, <ph id="ph1">`TInput`</ph> and <ph id="ph2">`TOutput`</ph>, the second of which must be a reference type (<ph id="ph3">`class`</ph>), must have a parameterless constructor (<ph id="ph4">`new`</ph>), and must implement <ph id="ph5">`ICollection(Of TInput)`</ph> (<ph id="ph6">`ICollection&lt;TInput&gt;`</ph> in C#).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This interface constraint ensures that the <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601.Add%2A?displayProperty=fullName&gt;</ph> method can be used to add elements to the <ph id="ph2">`TOutput`</ph> collection that the method creates.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The method has one formal parameter, <ph id="ph1">`input`</ph>, which is an array of <ph id="ph2">`TInput`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The method creates a collection of type <ph id="ph1">`TOutput`</ph> and copies the elements of <ph id="ph2">`input`</ph> to the collection.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#20<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#20)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#20<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#20)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Define a dynamic assembly and a dynamic module to contain the type the generic method belongs to.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this case, the assembly has only one module, named <ph id="ph1">`DemoMethodBuilder1`</ph>, and the module name is the same as the assembly name plus an extension.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example, the assembly is saved to disk and also executed, so <ph id="ph1">&lt;xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName&gt;</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine DemoMethodBuilder1.dll and to compare it to the Microsoft intermediate language (MSIL) for the method shown in step 1.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#2)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Define the type the generic method belongs to.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The type does not have to be generic.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A generic method can belong to either a generic or nongeneric type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, the type is a class, is not generic, and is named <ph id="ph1">`DemoType`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#3)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Define the generic method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the types of a generic method's formal parameters are specified by generic type parameters of the generic method, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29&gt;</ph> method overload to define the method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The generic type parameters of the method are not yet defined, so you cannot specify the types of the method's formal parameters in the call to <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this example, the method is named <ph id="ph1">`Factory`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The method is public and <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Define the generic type parameters of <ph id="ph1">`DemoMethod`</ph> by passing an array of strings containing the names of the parameters to the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This makes the method a generic method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code makes <ph id="ph1">`Factory`</ph> a generic method with type parameters <ph id="ph2">`TInput`</ph> and <ph id="ph3">`TOutput`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To make the code easier to read, variables with these names are created to hold the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects representing the two type parameters.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Optionally add special constraints to the type parameters.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Special constraints are added using the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`TOutput`</ph> is constrained to be a reference type and to have a parameterless constructor.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#6<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#6)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#6<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Optionally add class and interface constraints to the type parameters.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In this example, type parameter <ph id="ph1">`TOutput`</ph> is constrained to types that implement the <ph id="ph2">`ICollection(Of TInput)`</ph> (<ph id="ph3">`ICollection&lt;TInput&gt;`</ph> in C#) interface.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This ensures that the <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601.Add%2A&gt;</ph> method can be used to add elements.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#7)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#7<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Define the formal parameters of the method, using the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`Factory`</ph> method has one parameter, an array of <ph id="ph2">`TInput`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This type is created by calling the <ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> that represents <ph id="ph3">`TInput`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The argument of <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph> is an array of <ph id="ph2">&lt;xref:System.Type&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#8<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#8)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#8<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Define the return type for the method, using the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In this example, an instance of <ph id="ph1">`TOutput`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#9<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#9)</ept><ept id="p1">]</ept>   <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#9<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Emit the method body, using <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For details, see the accompanying procedure for emitting the method body.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you emit calls to methods of generic types, and the type arguments of those types are type parameters of the generic method, you must use the <ph id="ph1">`static`</ph><ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29&gt;</ph> method overloads of the <ph id="ph5">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class to obtain constructed forms of the methods.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The accompanying procedure for emitting the method body demonstrates this.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Complete the type that contains the method and save the assembly.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The accompanying procedure for invoking the generic method shows two ways to invoke the completed method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#14<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#14)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#14<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#14)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To emit the method body</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Get a code generator and declare local variables and labels.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DeclareLocal%2A&gt;</ph> method is used to declare local variables.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Factory`</ph> method has four local variables: <ph id="ph2">`retVal`</ph> to hold the new <ph id="ph3">`TOutput`</ph> that is returned by the method, <ph id="ph4">`ic`</ph> to hold the <ph id="ph5">`TOutput`</ph> when it is cast to <ph id="ph6">`ICollection(Of TInput)`</ph> (<ph id="ph7">`ICollection&lt;TInput&gt;`</ph> in C#), <ph id="ph8">`input`</ph> to hold the input array of <ph id="ph9">`TInput`</ph> objects, and <ph id="ph10">`index`</ph> to iterate through the array.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The method also has two labels, one to enter the loop (<ph id="ph1">`enterLoop`</ph>) and one for the top of the loop (<ph id="ph2">`loopAgain`</ph>), defined using the <ph id="ph3">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The first thing the method does is to load its argument using <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Ldarg_0&gt;</ph> opcode and to store it in the local variable <ph id="ph2">`input`</ph> using <ph id="ph3">&lt;xref:System.Reflection.Emit.OpCodes.Stloc_S&gt;</ph> opcode.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#10<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#10)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#10<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Emit code to create an instance of <ph id="ph1">`TOutput`</ph>, using the generic method overload of the <ph id="ph2">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Using this overload requires the specified type to have a parameterless constructor, which is the reason for adding that constraint to <ph id="ph1">`TOutput`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Create the constructed generic method by passing <ph id="ph1">`TOutput`</ph> to <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>After emitting code to call the method, emit code to store it in the local variable <ph id="ph1">`retVal`</ph> using <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Stloc_S&gt;</ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#11<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#11)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#11<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#11)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Emit code to cast the new <ph id="ph1">`TOutput`</ph> object to <ph id="ph2">`ICollection(Of TInput)`</ph> and store it in the local variable <ph id="ph3">`ic`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#31<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#31)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#31<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#31)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Get a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> representing the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601.Add%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The method is acting on an <ph id="ph1">`ICollection(Of TInput)`</ph> (<ph id="ph2">`ICollection&lt;TInput&gt;`</ph> in C#), so it is necessary to get the <ph id="ph3">`Add`</ph> method specific to that constructed type.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You cannot use the <ph id="ph1">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method to get this <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> directly from <ph id="ph3">`icollOfTInput`</ph>, because <ph id="ph4">&lt;xref:System.Type.GetMethod%2A&gt;</ph> is not supported on a type that has been constructed with a <ph id="ph5">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Instead, call <ph id="ph1">&lt;xref:System.Type.GetMethod%2A&gt;</ph> on <ph id="ph2">`icoll`</ph>, which contains the generic type definition for the <ph id="ph3">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Then use the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29&gt;</ph><ph id="ph2">`static`</ph> method to produce the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the constructed type.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The following code demonstrates this.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#12<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#12)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#12<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#12)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Emit code to initialize the <ph id="ph1">`index`</ph> variable, by loading a 32-bit integer 0 and storing it in the variable.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Emit code to branch to the label <ph id="ph1">`enterLoop`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This label has not yet been marked, because it is inside the loop.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Code for the loop is emitted in the next step.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#32<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#32)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#32<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#32)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Emit code for the loop.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The first step is to mark the top of the loop, by calling <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph> with the <ph id="ph2">`loopAgain`</ph> label.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Branch statements that use the label will now branch to this point in the code.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The next step is to push the <ph id="ph1">`TOutput`</ph> object, cast to <ph id="ph2">`ICollection(Of TInput)`</ph>, onto the stack.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>It is not needed immediately, but needs to be in position for calling the <ph id="ph1">`Add`</ph> method.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Next the input array is pushed onto the stack, then the <ph id="ph1">`index`</ph> variable containing the current index into the array.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Ldelem&gt;</ph> opcode pops the index and the array off the stack and pushes the indexed array element onto the stack.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The stack is now ready for the call to the <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601.Add%2A?displayProperty=fullName&gt;</ph> method, which pops the collection and the new element off the stack and adds the element to the collection.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The rest of the code in the loop increments the index and tests to see whether the loop is finished: The index and a 32-bit integer 1 are pushed onto the stack and added, leaving the sum on the stack; the sum is stored in <ph id="ph1">`index`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph> is called to set this point as the entry point for the loop.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The index is loaded again.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The input array is pushed on the stack, and <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Ldlen&gt;</ph> is emitted to get its length.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The index and the length are now on the stack, and <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Clt&gt;</ph> is emitted to compare them.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If the index is less than the length, <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Brtrue_S&gt;</ph> branches back to the beginning of the loop.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#13<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#13)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#13<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#13)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Emit code to push the <ph id="ph1">`TOutput`</ph> object onto the stack and return from the method.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The local variables <ph id="ph1">`retVal`</ph> and <ph id="ph2">`ic`</ph> both contain references to the new <ph id="ph3">`TOutput`</ph>; <ph id="ph4">`ic`</ph> is used only to access the <ph id="ph5">&lt;xref:System.Collections.Generic.ICollection%601.Add%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#33<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#33)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#33<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#33)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To invoke the generic method</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Factory`</ph> is a generic method definition.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In order to invoke it, you must assign types to its generic type parameters.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method to do this.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following code creates a constructed generic method, specifying <ph id="ph1">&lt;xref:System.String&gt;</ph> for <ph id="ph2">`TInput`</ph> and <ph id="ph3">`List(Of String)`</ph> (<ph id="ph4">`List&lt;string&gt;`</ph> in C#) for <ph id="ph5">`TOutput`</ph>, and displays a string representation of the method.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#21<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#21)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#21<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#21)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To invoke the method late-bound, use the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following code creates an array of <ph id="ph1">&lt;xref:System.Object&gt;</ph>, containing as its only element an array of strings, and passes it as the argument list for the generic method.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The first parameter of <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> is a null reference because the method is <ph id="ph2">`static`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The return value is cast to <ph id="ph1">`List(Of String)`</ph>, and its first element is displayed.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#22<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#22)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#22<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#22)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To invoke the method using a delegate, you must have a delegate that matches the signature of the constructed generic method.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An easy way to do this is to create a generic delegate.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following code creates an instance of the generic delegate <ph id="ph1">`D`</ph> defined in the example code, using the <ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29?displayProperty=fullName&gt;</ph> method overload, and invokes the delegate.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Delegates perform better than late-bound calls.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#23<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#23)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#23<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#23)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The emitted method can also be called from a program that refers to the saved assembly.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following code example creates a nongeneric type, <ph id="ph1">`DemoType`</ph>, with a generic method, <ph id="ph2">`Factory`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This method has two generic type parameters, <ph id="ph1">`TInput`</ph> to specify an input type and <ph id="ph2">`TOutput`</ph> to specify an output type.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TOutput`</ph> type parameter is constrained to implement <ph id="ph2">`ICollection&lt;TInput&gt;`</ph> (<ph id="ph3">`ICollection(Of TInput)`</ph> in Visual Basic), to be a reference type, and to have a parameterless constructor.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The method has one formal parameter, which is an array of <ph id="ph1">`TInput`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The method returns an instance of <ph id="ph1">`TOutput`</ph> that contains all the elements of the input array.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TOutput`</ph> can be any generic collection type that implements the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When the code is executed, the dynamic assembly is saved as DemoGenericMethod1.dll, and can be examined using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A good way to learn how to emit code is to write a Visual Basic, C#, or Visual C++ program that performs the task you are trying to emit, and use the disassembler to examine the MSIL produced by the compiler.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The code example includes source code that is equivalent to the emitted method.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The emitted method is invoked late-bound and also by using a generic delegate declared in the code example.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GenericMethodHowTo#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/GenericMethodHowTo/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>GenericMethodHowTo#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodHowTo/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The code contains the C# <ph id="ph1">`using`</ph> statements (<ph id="ph2">`Imports`</ph> in Visual Basic) necessary for compilation.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>No additional assembly references are required.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Compile the code at the command line using csc.exe, vbc.exe, or cl.exe.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To compile the code in Visual Studio, place it in a console application project template.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>