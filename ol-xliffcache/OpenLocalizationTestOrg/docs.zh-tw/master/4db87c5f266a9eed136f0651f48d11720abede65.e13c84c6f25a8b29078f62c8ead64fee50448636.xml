{"content":"---\ntitle: \"XAML Loading and Dependency Properties\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"custom dependency properties [WPF]\"\n  - \"dependency properties [WPF], XAML loading and\"\n  - \"loading XML data [WPF]\"\nms.assetid: 6eea9f4e-45ce-413b-a266-f08238737bf2\n---\n# XAML Loading and Dependency Properties\nThe current [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] implementation of its [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor is inherently dependency property aware. The [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor uses property system methods for dependency properties when loading binary [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] and processing attributes that are dependency properties. This effectively bypasses the property wrappers. When you implement custom dependency properties, you must account for this behavior and should avoid placing any other code in your property wrapper other than the property system methods <xref:System.Windows.DependencyObject.GetValue%2A> and <xref:System.Windows.DependencyObject.SetValue%2A>.  \n\n<a name=\"prerequisites\"></a>   \n## Prerequisites  \n This topic assumes that you understand dependency properties both as consumer and author and have read [Dependency Properties Overview](dependency-properties-overview.md) and [Custom Dependency Properties](custom-dependency-properties.md). You should also have read [XAML Overview (WPF)](xaml-overview-wpf.md) and [XAML Syntax In Detail](xaml-syntax-in-detail.md).  \n  \n<a name=\"implementation\"></a>   \n## The WPF XAML Loader Implementation, and Performance  \n For implementation reasons, it is computationally less expensive to identify a property as a dependency property and access the property system <xref:System.Windows.DependencyObject.SetValue%2A> method to set it, rather than using the property wrapper and its setter. This is because a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor must infer the entire object model of the backing code based only on knowing the type and member relationships that are indicated by the structure of the markup and various strings.  \n  \n The type is looked up through a combination of xmlns and assembly attributes, but identifying the members, determining which could support being set as an attribute, and resolving what types the property values support would otherwise require extensive reflection using <xref:System.Reflection.PropertyInfo>. Because dependency properties on a given type are accessible as a storage table through the property system, the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] implementation of its [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor uses this table and infers that any given property *ABC* can be more efficiently set by calling <xref:System.Windows.DependencyObject.SetValue%2A> on the containing <xref:System.Windows.DependencyObject> derived type, using the dependency property identifier *ABCProperty*.  \n  \n<a name=\"implications\"></a>   \n## Implications for Custom Dependency Properties  \n Because the current [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] implementation of the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor behavior for property setting bypasses the wrappers entirely, you should not put any additional logic into the set definitions of the wrapper for your custom dependency property. If you put such logic in the set definition, then the logic will not be executed when the property is set in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] rather than in code.  \n  \n Similarly, other aspects of the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor that obtain property values from [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processing also use <xref:System.Windows.DependencyObject.GetValue%2A> rather than using the wrapper. Therefore, you should also avoid any additional implementation in the `get` definition beyond the <xref:System.Windows.DependencyObject.GetValue%2A> call.  \n  \n The following example is a recommended dependency property definition with wrappers, where the property identifier is stored as a `public` `static` `readonly` field, and the `get` and `set` definitions contain no code beyond the necessary property system methods that define the dependency property backing.  \n  \n [!code-csharp[WPFAquariumSln#AGWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#agwithwrapper)]\n [!code-vb[WPFAquariumSln#AGWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#agwithwrapper)]  \n  \n## See also\n\n- [Dependency Properties Overview](dependency-properties-overview.md)\n- [XAML Overview (WPF)](xaml-overview-wpf.md)\n- [Dependency Property Metadata](dependency-property-metadata.md)\n- [Collection-Type Dependency Properties](collection-type-dependency-properties.md)\n- [Dependency Property Security](dependency-property-security.md)\n- [Safe Constructor Patterns for DependencyObjects](safe-constructor-patterns-for-dependencyobjects.md)\n","nodes":[{"pos":[4,300],"embed":true,"restype":"x-metadata","content":"title: \"XAML Loading and Dependency Properties\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"custom dependency properties [WPF]\"\n  - \"dependency properties [WPF], XAML loading and\"\n  - \"loading XML data [WPF]\"\nms.assetid: 6eea9f4e-45ce-413b-a266-f08238737bf2","nodes":[{"content":"XAML Loading and Dependency Properties","nodes":[{"pos":[0,38],"content":"XAML Loading and Dependency Properties","nodes":[{"content":"XAML Loading and Dependency Properties","pos":[0,38]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[307,345],"content":"XAML Loading and Dependency Properties","linkify":"XAML Loading and Dependency Properties","nodes":[{"content":"XAML Loading and Dependency Properties","pos":[0,38]}]},{"content":"The current <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> implementation of its <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor is inherently dependency property aware.","pos":[346,584],"source":"The current [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] implementation of its [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor is inherently dependency property aware."},{"content":"The <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor uses property system methods for dependency properties when loading binary <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> and processing attributes that are dependency properties.","pos":[585,957],"source":" The [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor uses property system methods for dependency properties when loading binary [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] and processing attributes that are dependency properties."},{"content":"This effectively bypasses the property wrappers.","pos":[958,1006]},{"content":"When you implement custom dependency properties, you must account for this behavior and should avoid placing any other code in your property wrapper other than the property system methods <ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>.","pos":[1007,1301],"source":" When you implement custom dependency properties, you must account for this behavior and should avoid placing any other code in your property wrapper other than the property system methods <xref:System.Windows.DependencyObject.GetValue%2A> and <xref:System.Windows.DependencyObject.SetValue%2A>."},{"pos":[1340,1353],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"This topic assumes that you understand dependency properties both as consumer and author and have read <bpt id=\"p1\">[</bpt>Dependency Properties Overview<ept id=\"p1\">](dependency-properties-overview.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Dependency Properties<ept id=\"p2\">](custom-dependency-properties.md)</ept>.","pos":[1357,1596],"source":"This topic assumes that you understand dependency properties both as consumer and author and have read [Dependency Properties Overview](dependency-properties-overview.md) and [Custom Dependency Properties](custom-dependency-properties.md)."},{"content":"You should also have read <bpt id=\"p1\">[</bpt>XAML Overview (WPF)<ept id=\"p1\">](xaml-overview-wpf.md)</ept> and <bpt id=\"p2\">[</bpt>XAML Syntax In Detail<ept id=\"p2\">](xaml-syntax-in-detail.md)</ept>.","pos":[1597,1721],"source":" You should also have read [XAML Overview (WPF)](xaml-overview-wpf.md) and [XAML Syntax In Detail](xaml-syntax-in-detail.md)."},{"pos":[1763,1814],"content":"The WPF XAML Loader Implementation, and Performance","linkify":"The WPF XAML Loader Implementation, and Performance","nodes":[{"content":"The WPF XAML Loader Implementation, and Performance","pos":[0,51]}]},{"content":"For implementation reasons, it is computationally less expensive to identify a property as a dependency property and access the property system <ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> method to set it, rather than using the property wrapper and its setter.","pos":[1818,2085],"source":"For implementation reasons, it is computationally less expensive to identify a property as a dependency property and access the property system <xref:System.Windows.DependencyObject.SetValue%2A> method to set it, rather than using the property wrapper and its setter."},{"content":"This is because a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor must infer the entire object model of the backing code based only on knowing the type and member relationships that are indicated by the structure of the markup and various strings.","pos":[2086,2367],"source":" This is because a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor must infer the entire object model of the backing code based only on knowing the type and member relationships that are indicated by the structure of the markup and various strings."},{"content":"The type is looked up through a combination of xmlns and assembly attributes, but identifying the members, determining which could support being set as an attribute, and resolving what types the property values support would otherwise require extensive reflection using <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.","pos":[2374,2682],"source":"The type is looked up through a combination of xmlns and assembly attributes, but identifying the members, determining which could support being set as an attribute, and resolving what types the property values support would otherwise require extensive reflection using <xref:System.Reflection.PropertyInfo>."},{"content":"Because dependency properties on a given type are accessible as a storage table through the property system, the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> implementation of its <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor uses this table and infers that any given property <bpt id=\"p1\">*</bpt>ABC<ept id=\"p1\">*</ept> can be more efficiently set by calling <ph id=\"ph3\">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> on the containing <ph id=\"ph4\">&lt;xref:System.Windows.DependencyObject&gt;</ph> derived type, using the dependency property identifier <bpt id=\"p2\">*</bpt>ABCProperty<ept id=\"p2\">*</ept>.","pos":[2683,3255],"source":" Because dependency properties on a given type are accessible as a storage table through the property system, the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] implementation of its [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor uses this table and infers that any given property *ABC* can be more efficiently set by calling <xref:System.Windows.DependencyObject.SetValue%2A> on the containing <xref:System.Windows.DependencyObject> derived type, using the dependency property identifier *ABCProperty*."},{"pos":[3295,3340],"content":"Implications for Custom Dependency Properties","linkify":"Implications for Custom Dependency Properties","nodes":[{"content":"Implications for Custom Dependency Properties","pos":[0,45]}]},{"content":"Because the current <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> implementation of the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor behavior for property setting bypasses the wrappers entirely, you should not put any additional logic into the set definitions of the wrapper for your custom dependency property.","pos":[3344,3728],"source":"Because the current [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] implementation of the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor behavior for property setting bypasses the wrappers entirely, you should not put any additional logic into the set definitions of the wrapper for your custom dependency property."},{"content":"If you put such logic in the set definition, then the logic will not be executed when the property is set in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> rather than in code.","pos":[3729,3930],"source":" If you put such logic in the set definition, then the logic will not be executed when the property is set in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] rather than in code."},{"content":"Similarly, other aspects of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor that obtain property values from <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processing also use <ph id=\"ph3\">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> rather than using the wrapper.","pos":[3937,4257],"source":"Similarly, other aspects of the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor that obtain property values from [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processing also use <xref:System.Windows.DependencyObject.GetValue%2A> rather than using the wrapper."},{"content":"Therefore, you should also avoid any additional implementation in the <ph id=\"ph1\">`get`</ph> definition beyond the <ph id=\"ph2\">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> call.","pos":[4258,4412],"source":" Therefore, you should also avoid any additional implementation in the `get` definition beyond the <xref:System.Windows.DependencyObject.GetValue%2A> call."},{"pos":[4419,4726],"content":"The following example is a recommended dependency property definition with wrappers, where the property identifier is stored as a <ph id=\"ph1\">`public`</ph> <ph id=\"ph2\">`static`</ph> <ph id=\"ph3\">`readonly`</ph> field, and the <ph id=\"ph4\">`get`</ph> and <ph id=\"ph5\">`set`</ph> definitions contain no code beyond the necessary property system methods that define the dependency property backing.","source":"The following example is a recommended dependency property definition with wrappers, where the property identifier is stored as a `public` `static` `readonly` field, and the `get` and `set` definitions contain no code beyond the necessary property system methods that define the dependency property backing."},{"pos":[5054,5062],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5066,5133],"content":"<bpt id=\"p1\">[</bpt>Dependency Properties Overview<ept id=\"p1\">](dependency-properties-overview.md)</ept>","source":"[Dependency Properties Overview](dependency-properties-overview.md)"},{"pos":[5136,5179],"content":"<bpt id=\"p1\">[</bpt>XAML Overview (WPF)<ept id=\"p1\">](xaml-overview-wpf.md)</ept>","source":"[XAML Overview (WPF)](xaml-overview-wpf.md)"},{"pos":[5182,5245],"content":"<bpt id=\"p1\">[</bpt>Dependency Property Metadata<ept id=\"p1\">](dependency-property-metadata.md)</ept>","source":"[Dependency Property Metadata](dependency-property-metadata.md)"},{"pos":[5248,5329],"content":"<bpt id=\"p1\">[</bpt>Collection-Type Dependency Properties<ept id=\"p1\">](collection-type-dependency-properties.md)</ept>","source":"[Collection-Type Dependency Properties](collection-type-dependency-properties.md)"},{"pos":[5332,5395],"content":"<bpt id=\"p1\">[</bpt>Dependency Property Security<ept id=\"p1\">](dependency-property-security.md)</ept>","source":"[Dependency Property Security](dependency-property-security.md)"},{"pos":[5398,5499],"content":"<bpt id=\"p1\">[</bpt>Safe Constructor Patterns for DependencyObjects<ept id=\"p1\">](safe-constructor-patterns-for-dependencyobjects.md)</ept>","source":"[Safe Constructor Patterns for DependencyObjects](safe-constructor-patterns-for-dependencyobjects.md)"}]}