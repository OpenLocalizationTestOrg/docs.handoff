{"content":"---\ntitle: \"Parameters and Return Values for Multithreaded Procedures (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: cbdce172-7ff6-41a9-bb21-53a7c6f538a5\ncaps.latest.revision: 4\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Parameters and Return Values for Multithreaded Procedures (Visual Basic)\nSupplying and returning values in a multithreaded application is complicated because the constructor for the thread class must be passed a reference to a procedure that takes no arguments and returns no value. The following sections show some simple ways to supply parameters and return values from procedures on separate threads.  \n  \n## Supplying Parameters for Multithreaded Procedures  \n The best way to supply parameters for a multithreaded method call is to wrap the target method in a class and define fields for that class that will serve as parameters for the new thread. The advantage of this approach is that you can create a new instance of the class, with its own parameters, every time you want to start a new thread. For example, suppose you have a function that calculates the area of a triangle, as in the following code:  \n  \n```vb  \nFunction CalcArea(ByVal Base As Double, ByVal Height As Double) As Double  \n    CalcArea = 0.5 * Base * Height  \nEnd Function  \n```  \n  \n You can write a class that wraps the `CalcArea` function and creates fields to store input parameters, as follows:  \n  \n```vb  \nClass AreaClass  \n    Public Base As Double  \n    Public Height As Double  \n    Public Area As Double  \n    Sub CalcArea()  \n        Area = 0.5 * Base * Height  \n        MessageBox.Show(\"The area is: \" & Area.ToString)  \n    End Sub  \nEnd Class  \n```  \n  \n To use the `AreaClass`, you can create an `AreaClass` object, and set the `Base` and `Height` properties as shown in the following code:  \n  \n```vb  \nProtected Sub TestArea()  \n    Dim AreaObject As New AreaClass  \n    Dim Thread As New System.Threading.Thread(  \n                        AddressOf AreaObject.CalcArea)  \n    AreaObject.Base = 30  \n    AreaObject.Height = 40  \n    Thread.Start()  \nEnd Sub  \n```  \n  \n Notice that the `TestArea` procedure does not check the value of the `Area` field after calling the `CalcArea` method. Because `CalcArea` runs on a separate thread, the `Area` field is not guaranteed to be set if you check it immediately after calling `Thread.Start`. The next section discusses a better way to return values from multithreaded procedures.  \n  \n## Returning Values from Multithreaded Procedures  \n Returning values from procedures that run on separate threads is complicated by the fact that the procedures cannot be functions and cannot use `ByRef` arguments. The easiest way to return values is to use the <xref:System.ComponentModel.BackgroundWorker> component to manage your threads and raise an event when the task is done, and process the results with an event handler.  \n  \n The following example returns a value by raising an event from a procedure running on a separate thread:  \n  \n```vb  \nPrivate Class AreaClass2  \n    Public Base As Double  \n    Public Height As Double  \n    Function CalcArea() As Double  \n        ' Calculate the area of a triangle.  \n        Return 0.5 * Base * Height  \n    End Function  \nEnd Class  \n  \nPrivate WithEvents BackgroundWorker1 As New System.ComponentModel.BackgroundWorker  \n  \nPrivate Sub TestArea2()  \n    Dim AreaObject2 As New AreaClass2  \n    AreaObject2.Base = 30  \n    AreaObject2.Height = 40  \n  \n    ' Start the asynchronous operation.  \n    BackgroundWorker1.RunWorkerAsync(AreaObject2)  \nEnd Sub  \n  \n' This method runs on the background thread when it starts.  \nPrivate Sub BackgroundWorker1_DoWork(  \n    ByVal sender As Object,   \n    ByVal e As System.ComponentModel.DoWorkEventArgs  \n    ) Handles BackgroundWorker1.DoWork  \n  \n    Dim AreaObject2 As AreaClass2 = CType(e.Argument, AreaClass2)  \n    ' Return the value through the Result property.  \n    e.Result = AreaObject2.CalcArea()  \nEnd Sub  \n  \n' This method runs on the main thread when the background thread finishes.  \nPrivate Sub BackgroundWorker1_RunWorkerCompleted(  \n    ByVal sender As Object,  \n    ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs  \n    ) Handles BackgroundWorker1.RunWorkerCompleted  \n  \n    ' Access the result through the Result property.  \n    Dim Area As Double = CDbl(e.Result)  \n    MessageBox.Show(\"The area is: \" & Area.ToString)  \nEnd Sub  \n```  \n  \n You can provide parameters and return values to thread-pool threads by using the optional `ByVal` state-object variable of the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method. Thread-timer threads also support a state object for this purpose. For information on thread pooling and thread timers, see [Thread Pooling (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)[Thread Pooling](http://msdn.microsoft.com/library/4b8bb2c8-8ca4-457c-9afd-d11bc9a05701) and [Thread Timers (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-timers.md).  \n  \n## See Also  \n [Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md)   \n [Thread Pooling (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)   \n [Thread Synchronization (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-synchronization.md)   \n [Events](../../../../visual-basic/programming-guide/language-features/events/index.md)   \n [Multithreaded Applications (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/multithreaded-applications.md)   \n [Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md)   \n [Multithreading in Components](http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779)","nodes":[{"pos":[4,475],"nodes":[{"content":"Parameters and Return Values for Multithreaded Procedures (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,89],"content":"Parameters and Return Values for Multithreaded Procedures (Visual Basic) | Microsoft Docs","nodes":[{"content":"Parameters and Return Values for Multithreaded Procedures (Visual Basic) | Microsoft Docs","pos":[0,89]}]}],"pos":[6,98],"yaml":true}],"content":"title: \"Parameters and Return Values for Multithreaded Procedures (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: cbdce172-7ff6-41a9-bb21-53a7c6f538a5\ncaps.latest.revision: 4\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[482,554],"content":"Parameters and Return Values for Multithreaded Procedures (Visual Basic)","linkify":"Parameters and Return Values for Multithreaded Procedures (Visual Basic)","nodes":[{"content":"Parameters and Return Values for Multithreaded Procedures (Visual Basic)","pos":[0,72]}]},{"content":"Supplying and returning values in a multithreaded application is complicated because the constructor for the thread class must be passed a reference to a procedure that takes no arguments and returns no value.","pos":[555,764]},{"content":"The following sections show some simple ways to supply parameters and return values from procedures on separate threads.","pos":[765,885]},{"pos":[894,943],"content":"Supplying Parameters for Multithreaded Procedures","linkify":"Supplying Parameters for Multithreaded Procedures","nodes":[{"content":"Supplying Parameters for Multithreaded Procedures","pos":[0,49]}]},{"content":"The best way to supply parameters for a multithreaded method call is to wrap the target method in a class and define fields for that class that will serve as parameters for the new thread.","pos":[947,1135]},{"content":"The advantage of this approach is that you can create a new instance of the class, with its own parameters, every time you want to start a new thread.","pos":[1136,1286]},{"content":"For example, suppose you have a function that calculates the area of a triangle, as in the following code:","pos":[1287,1393]},{"pos":[1545,1659],"content":"You can write a class that wraps the <ph id=\"ph1\">`CalcArea`</ph> function and creates fields to store input parameters, as follows:","source":"You can write a class that wraps the `CalcArea` function and creates fields to store input parameters, as follows:"},{"pos":[1930,2066],"content":"To use the <ph id=\"ph1\">`AreaClass`</ph>, you can create an <ph id=\"ph2\">`AreaClass`</ph> object, and set the <ph id=\"ph3\">`Base`</ph> and <ph id=\"ph4\">`Height`</ph> properties as shown in the following code:","source":"To use the `AreaClass`, you can create an `AreaClass` object, and set the `Base` and `Height` properties as shown in the following code:"},{"content":"Notice that the <ph id=\"ph1\">`TestArea`</ph> procedure does not check the value of the <ph id=\"ph2\">`Area`</ph> field after calling the <ph id=\"ph3\">`CalcArea`</ph> method.","pos":[2348,2466],"source":"Notice that the `TestArea` procedure does not check the value of the `Area` field after calling the `CalcArea` method."},{"content":"Because <ph id=\"ph1\">`CalcArea`</ph> runs on a separate thread, the <ph id=\"ph2\">`Area`</ph> field is not guaranteed to be set if you check it immediately after calling <ph id=\"ph3\">`Thread.Start`</ph>.","pos":[2467,2615],"source":" Because `CalcArea` runs on a separate thread, the `Area` field is not guaranteed to be set if you check it immediately after calling `Thread.Start`."},{"content":"The next section discusses a better way to return values from multithreaded procedures.","pos":[2616,2703]},{"pos":[2712,2758],"content":"Returning Values from Multithreaded Procedures","linkify":"Returning Values from Multithreaded Procedures","nodes":[{"content":"Returning Values from Multithreaded Procedures","pos":[0,46]}]},{"content":"Returning values from procedures that run on separate threads is complicated by the fact that the procedures cannot be functions and cannot use <ph id=\"ph1\">`ByRef`</ph> arguments.","pos":[2762,2924],"source":"Returning values from procedures that run on separate threads is complicated by the fact that the procedures cannot be functions and cannot use `ByRef` arguments."},{"content":"The easiest way to return values is to use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to manage your threads and raise an event when the task is done, and process the results with an event handler.","pos":[2925,3139],"source":" The easiest way to return values is to use the <xref:System.ComponentModel.BackgroundWorker> component to manage your threads and raise an event when the task is done, and process the results with an event handler."},{"content":"The following example returns a value by raising an event from a procedure running on a separate thread:","pos":[3146,3250]},{"content":"You can provide parameters and return values to thread-pool threads by using the optional <ph id=\"ph1\">`ByVal`</ph> state-object variable of the <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.","pos":[4685,4875],"source":"You can provide parameters and return values to thread-pool threads by using the optional `ByVal` state-object variable of the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method."},{"content":"Thread-timer threads also support a state object for this purpose.","pos":[4876,4942]},{"content":"For information on thread pooling and thread timers, see <bpt id=\"p1\">[</bpt>Thread Pooling (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept><bpt id=\"p2\">[</bpt>Thread Pooling<ept id=\"p2\">](http://msdn.microsoft.com/library/4b8bb2c8-8ca4-457c-9afd-d11bc9a05701)</ept> and <bpt id=\"p3\">[</bpt>Thread Timers (Visual Basic)<ept id=\"p3\">](../../../../visual-basic/programming-guide/concepts/threading/thread-timers.md)</ept>.","pos":[4943,5316],"source":" For information on thread pooling and thread timers, see [Thread Pooling (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)[Thread Pooling](http://msdn.microsoft.com/library/4b8bb2c8-8ca4-457c-9afd-d11bc9a05701) and [Thread Timers (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-timers.md)."},{"pos":[5325,5333],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md)</ept><ph id=\"ph1\"> </ph>","pos":[5337,5547],"source":"[Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md) "},{"content":"<bpt id=\"p1\">[</bpt>Thread Pooling (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept><ph id=\"ph1\"> </ph>","pos":[5551,5664],"source":"[Thread Pooling (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md) "},{"content":"<bpt id=\"p1\">[</bpt>Thread Synchronization (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/thread-synchronization.md)</ept><ph id=\"ph1\"> </ph>","pos":[5668,5797],"source":"[Thread Synchronization (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/thread-synchronization.md) "},{"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5801,5888],"source":"[Events](../../../../visual-basic/programming-guide/language-features/events/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Multithreaded Applications (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/multithreaded-applications.md)</ept><ph id=\"ph1\"> </ph>","pos":[5892,6029],"source":"[Multithreaded Applications (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/multithreaded-applications.md) "},{"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[6033,6126],"source":"[Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Multithreading in Components<ept id=\"p1\">](http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779)</ept>","pos":[6130,6232],"source":"[Multithreading in Components](http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779)"}]}