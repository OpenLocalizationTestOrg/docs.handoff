<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="generic-field-and-setfield-methods-linq-to-dataset.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c7f1fef5d1fa575cd6d3bfdb7e6cbbea79ade28</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\generic-field-and-setfield-methods-linq-to-dataset.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8171b8b78dd1620c873cda1796509d4db5f34d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0e68a27f768ba45f22a0952d36e8c564bc818f0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Generic Field and SetField Methods (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generic Field and SetField Methods (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> provides extension methods to the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> class for accessing column values: the <ph id="ph3">&lt;xref:System.Data.DataRowExtensions.Field%2A&gt;</ph> method and the <ph id="ph4">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These methods provide easier access to column values for developers, especially regarding null values.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> uses <ph id="ph2">&lt;xref:System.DBNull.Value&gt;</ph> to represent null values, whereas <ph id="ph3">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> uses the nullable type support introduced in the <ph id="ph4">[!INCLUDE[dnprdnlong](../../../../includes/dnprdnlong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using the pre-existing column accessor in <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> requires you to cast the return object to the appropriate type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a particular field in a <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> can be null, you must explicitly check for a null value because returning <ph id="ph2">&lt;xref:System.DBNull.Value&gt;</ph> and implicitly casting it to another type throws an <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the following example, if the <ph id="ph1">&lt;xref:System.Data.DataRow.IsNull%2A&gt;</ph> method was not used to check for a null value, an exception would be thrown if the indexer returned <ph id="ph2">&lt;xref:System.DBNull.Value&gt;</ph> and tried to cast it to a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataRowExtensions.Field%2A&gt;</ph> method provides access to the column values of a <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> and the <ph id="ph3">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> sets column values in a <ph id="ph4">&lt;xref:System.Data.DataRow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">&lt;xref:System.Data.DataRowExtensions.Field%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> method handle nullable types, so you do not have to explicitly check for null values as in the previous example.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Both methods are generic methods, also, so you do not have to cast the return type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataRowExtensions.Field%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Note that the data type specified in the generic parameter <ph id="ph1">`T`</ph> of the <ph id="ph2">&lt;xref:System.Data.DataRowExtensions.Field%2A&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> method must match the type of the underlying value.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Otherwise, an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The specified column name must also match the name of a column in the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>, or an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> will be thrown.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In both cases, the exception is thrown at run time during the enumeration of the data when the query is executed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> method itself does not perform any type conversions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This does not mean, however, that a type conversion will not occur.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> method exposes the <ph id="ph2">[!INCLUDE[ado_whidbey_long](../../../../includes/ado-whidbey-long-md.md)]</ph> behavior of the <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A type conversion could be performed by the <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> object and the converted value would then be saved to the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>