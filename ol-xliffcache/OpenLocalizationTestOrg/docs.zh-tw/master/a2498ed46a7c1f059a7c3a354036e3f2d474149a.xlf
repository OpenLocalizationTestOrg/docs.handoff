<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dynamically-loading-and-using-types.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2498ed46a7c1f059a7c3a354036e3f2d474149a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\dynamically-loading-and-using-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">721ab822ae82321a0f01bd1c08f09b754004cc5b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f1c9668ac9d6ed8cc9f79ebaf15c48a2b1dcc84</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Dynamically Loading and Using Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dynamically Loading and Using Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reflection provides infrastructure used by language compilers such as <ph id="ph1">[!INCLUDE[vbprvbext](../../../includes/vbprvbext-md.md)]</ph> and JScript to implement implicit late binding.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Binding is the process of locating the declaration (that is, the implementation) that corresponds to a uniquely specified type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When this process occurs at run time rather than at compile time, it is called late binding.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph> allows you to use implicit late binding in your code; the Visual Basic compiler calls a helper method that uses reflection to obtain the object type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The arguments passed to the helper method cause the appropriate method to be invoked at run time.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These arguments are the instance (an object) on which to invoke the method, the name of the invoked method (a string), and the arguments passed to the invoked method (an array of objects).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the following example, the Visual Basic compiler uses reflection implicitly to call a method on an object whose type is not known at compile time.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>HelloWorld<ept id="p1">**</ept> class has a <bpt id="p2">**</bpt>PrintHello<ept id="p2">**</ept> method that prints out "Hello World" concatenated with some text that is passed to the <bpt id="p3">**</bpt>PrintHello<ept id="p3">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>PrintHello<ept id="p1">**</ept> method called in this example is actually a <ph id="ph1">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph>; the Visual Basic code allows the <bpt id="p2">**</bpt>PrintHello<ept id="p2">**</ept> method to be invoked as if the type of the object (helloObj) were known at compile time (early binding) rather than at run time (late binding).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Custom Binding</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In addition to being used implicitly by compilers for late binding, reflection can be used explicitly in code to accomplish late binding.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>common language runtime<ept id="p1">](../../../docs/standard/clr.md)</ept> supports multiple programming languages, and the binding rules of these languages differ.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the early-bound case, code generators can completely control this binding.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, in late binding through reflection, binding must be controlled by customized binding.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> class provides custom control of member selection and invocation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Using custom binding, you can load an assembly at run time, obtain information about types in that assembly, specify the type that you want, and then invoke methods or access fields or properties on that type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This technique is useful if you do not know an object's type at compile time, such as when the object type is dependent on user input.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a simple custom binder that provides no argument type conversion.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Code for <ph id="ph1">`Simple_Type.dll`</ph> precedes the main example.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Be sure to build <ph id="ph1">`Simple_Type.dll`</ph> and then include a reference to it in the project at build time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>InvokeMember and CreateInstance</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph> to invoke a member of a type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CreateInstance<ept id="p1">**</ept> methods of various classes, such as <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.Assembly.CreateInstance%2A?displayProperty=fullName&gt;</ph>, are specialized forms of <bpt id="p2">**</bpt>InvokeMember<ept id="p2">**</ept> that create new instances of the specified type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Binder<ept id="p1">**</ept> class is used for overload resolution and argument coercion in these methods.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example shows the three possible combinations of argument coercion (type conversion) and member selection.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In Case 1, no argument coercion or member selection is needed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In Case 2, only member selection is needed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In Case 3, only argument coercion is needed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Overload resolution is needed when more than one member with the same name is available.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.Binder.BindToField%2A?displayProperty=fullName&gt;</ph> methods are used to resolve binding to a single member.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Binder.BindToMethod<ept id="p1">**</ept> also provides property resolution through the <bpt id="p2">**</bpt>get<ept id="p2">**</ept> and <bpt id="p3">**</bpt>set<ept id="p3">**</ept> property accessors.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BindToMethod<ept id="p1">**</ept> returns the <ph id="ph1">&lt;xref:System.Reflection.MethodBase&gt;</ph> to invoke, or a null reference (<bpt id="p2">**</bpt>Nothing<ept id="p2">**</ept> in Visual Basic) if no such invocation is possible.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MethodBase<ept id="p1">**</ept> return value need not be one of those contained in the <bpt id="p2">*</bpt>match<ept id="p2">*</ept> parameter, although that is the usual case.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When ByRef arguments are present, the caller might want to get them back.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Therefore, <bpt id="p1">**</bpt>Binder<ept id="p1">**</ept> allows a client to map the array of arguments back to its original form if <bpt id="p2">**</bpt>BindToMethod<ept id="p2">**</ept> has manipulated the argument array.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In order to do this, the caller must be guaranteed that the order of the arguments is unchanged.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When arguments are passed by name, <bpt id="p1">**</bpt>Binder<ept id="p1">**</ept> reorders the argument array, and that is what the caller sees.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Reflection.Binder.ReorderArgumentArray%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The set of available members are those members defined in the type or any base type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Reflection.BindingFlags&gt;</ph> is specified, members of any accessibility will be returned in the set.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>BindingFlags.NonPublic<ept id="p1">**</ept> is not specified, the binder must enforce accessibility rules.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When specifying the <bpt id="p1">**</bpt>Public<ept id="p1">**</ept> or <bpt id="p2">**</bpt>NonPublic<ept id="p2">**</ept> binding flag, you must also specify the <bpt id="p3">**</bpt>Instance<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Static<ept id="p4">**</ept> binding flag, or no members will be returned.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If there is only one member of the given name, no callback is necessary, and binding is done on that method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Case 1 of the code example illustrates this point: Only one <bpt id="p1">**</bpt>PrintBob<ept id="p1">**</ept> method is available, and therefore no callback is needed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If there is more than one member in the available set, all these methods are passed to <bpt id="p1">**</bpt>BindToMethod<ept id="p1">**</ept>, which selects the appropriate method and returns it.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In Case 2 of the code example, there are two methods named <bpt id="p1">**</bpt>PrintValue<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The appropriate method is selected by the call to <bpt id="p1">**</bpt>BindToMethod<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Binder.ChangeType%2A&gt;</ph> performs argument coercion (type conversion), which converts the actual arguments to the type of the formal arguments of the selected method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ChangeType<ept id="p1">**</ept> is called for every argument even if the types match exactly.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In Case 3 of the code example, an actual argument of type <bpt id="p1">**</bpt>String<ept id="p1">**</ept> with a value of "5.5" is passed to a method with a formal argument of type <bpt id="p2">**</bpt>Double<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For the invocation to succeed, the string value "5.5" must be converted to a double value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ChangeType<ept id="p1">**</ept> performs this conversion.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ChangeType<ept id="p1">**</ept> performs only lossless or <bpt id="p2">[</bpt>widening coercions<ept id="p2">](../../../docs/standard/base-types/type-conversion.md)</ept>, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Source type</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Target type</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Any type</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Its base type</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Any type</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Interface it implements</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Char</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>UInt16, UInt32, Int32, UInt64, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Byte</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>SByte</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Int16, Int32, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>UInt16</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>UInt32, Int32, UInt64, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Int16</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Int32, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>UInt32</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>UInt64, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Int32</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>UInt64</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Single, Double</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Int64</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Single, Double</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Single</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Double</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Nonreference type</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Reference type</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type&gt;</ph> class has <bpt id="p1">**</bpt>Get<ept id="p1">**</ept> methods that use parameters of type <bpt id="p2">**</bpt>Binder<ept id="p2">**</ept> to resolve references to a particular member.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type.GetConstructor%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt;</ph> search for a particular member of the current type by providing signature information for that member.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Binder.SelectMethod%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.Binder.SelectProperty%2A?displayProperty=fullName&gt;</ph> are called back on to select the given signature information of the appropriate methods.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Viewing Type Information<ept id="p1">](../../../docs/framework/reflection-and-codedom/viewing-type-information.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Conversion in the .NET Framework<ept id="p1">](../../../docs/standard/base-types/type-conversion.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>