{"content":"---\ntitle: \"is - C# Reference\"\nms.custom: seodec18\n\nms.date: 02/17/2017\nf1_keywords: \n  - \"is_CSharpKeyword\"\n  - \"is\"\nhelpviewer_keywords: \n  - \"is keyword [C#]\"\nms.assetid: bc62316a-d41f-4f90-8300-c6f4f0556e43\n---\n# is (C# Reference)\n\nChecks if an object is compatible with a given type, or (starting with C# 7.0) tests an expression against a pattern.\n\n## Testing for type compatibility\n\nThe `is` keyword evaluates type compatibility at runtime. It determines whether an object instance or the result of an expression can be converted to a specified type. It has the syntax\n\n```csharp\n   expr is type\n```\n\nwhere *expr* is an expression that evaluates to an instance of some type, and *type* is the name of the type to which the result of *expr* is to be converted. The `is` statement is `true` if *expr* is non-null and the object that results from evaluating the expression can be converted to *type*; otherwise, it returns `false`.\n\nFor example, the following code determines if `obj` can be cast to an instance of the `Person` type:\n\n[!code-csharp[is#1](../../../../samples/snippets/csharp/language-reference/keywords/is/is1.cs#1)]\n\nThe `is` statement is true if:\n\n- *expr* is an instance of the same type as *type*.\n\n- *expr* is an instance of a type that derives from *type*. In other words, the result of *expr* can be upcast to an instance of *type*.\n\n- *expr* has a compile-time type that is a base class of *type*, and *expr* has a runtime type that is *type* or is derived from *type*. The *compile-time type* of a variable is the variable's type as defined in its declaration. The *runtime type* of a variable is the type of the instance that is assigned to that variable.\n\n- *expr* is an instance of a type that implements the *type* interface.\n\nThe following example shows that the `is` expression evaluates to `true` for each of these conversions.\n\n[!code-csharp[is#3](../../../../samples/snippets/csharp/language-reference/keywords/is/is3.cs#3)]\n\nThe `is` keyword generates a compile-time warning if the expression is known to always be either `true` or `false`. It only considers reference conversions, boxing conversions, and unboxing conversions; it does not consider user-defined conversions or conversions defined by a type's [implicit](implicit.md) and [explicit](explicit.md) operators. The following example generates warnings because the result of the conversion is known at compile-time. Note that the `is` expression for conversions from `int` to `long` and `double` return false, since these conversions are handled by the [implicit](implicit.md) operator.\n\n[!code-csharp[is#2](../../../../samples/snippets/csharp/language-reference/keywords/is/is2.cs#2)]\n\n`expr` can be any expression that returns a value, with the exception of anonymous methods and lambda expressions. The following example uses  `is` to evaluate the return value of a method call.   \n[!code-csharp[is#4](../../../../samples/snippets/csharp/language-reference/keywords/is/is4.cs#4)]\n\nStarting with C# 7.0, you can use pattern matching with the [type pattern](#type) to write more concise code that uses the `is` statement.\n\n## Pattern matching with `is`\n\nStarting with C# 7.0, the `is` and [switch](../../../csharp/language-reference/keywords/switch.md) statements support pattern matching. The `is` keyword supports the following patterns:\n\n- [Type pattern](#type),  which tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type.\n\n- [Constant pattern](#constant), which tests whether an expression evaluates to a specified constant value.\n\n- [var pattern](#var), a match that always succeeds and binds the value of an expression to a new local variable. \n\n### <a name=\"type\" /> Type pattern </a>\n\nWhen using the type pattern to perform pattern matching, `is` tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type. It is a straightforward extension of the `is` statement that enables concise type evaluation and conversion. The general form of the `is` type pattern is:\n\n```csharp\n   expr is type varname \n```\n\nwhere *expr* is an expression that evaluates to an instance of some type, *type* is the name of the type to which the result of *expr* is to be converted, and *varname* is the object to which the result of *expr* is converted if the `is` test is `true`. \n\nThe `is` expression is `true` if *expr* is not `null`, and any of the following is true:\n\n- *expr* is an instance of the same type as *type*.\n\n- *expr* is an instance of a type that derives from *type*. In other words, the result of *expr* can be upcast to an instance of *type*.\n\n- *expr* has a compile-time type that is a base class of *type*, and *expr* has a runtime type that is *type* or is derived from *type*. The *compile-time type* of a variable is the variable's type as defined in its declaration. The *runtime type* of a variable is the type of the instance that is assigned to that variable.\n\n- *expr* is an instance of a type that implements the *type* interface.\n\nIf *expr* is `true` and `is` is used with an `if` statement, *varname* is assigned and has local scope within the `if` statement only.\n\nThe following example uses the `is` type pattern to provide the implementation of a type's <xref:System.IComparable.CompareTo(System.Object)?displayProperty=nameWithType> method.\n\n[!code-csharp[is#5](../../../../samples/snippets/csharp/language-reference/keywords/is/is-type-pattern5.cs#5)]\n\nWithout pattern matching, this code might be written as follows. The use of type pattern matching produces more compact, readable code by eliminating the need to test whether the result of a conversion is a `null`.  \n\n[!code-csharp[is#6](../../../../samples/snippets/csharp/language-reference/keywords/is/is-type-pattern6.cs#6)]\n\nThe `is` type pattern also produces more compact code when determining the type of a value type. The following example uses the `is` type pattern to determine whether an object is a `Person` or a `Dog` instance before displaying the value of an appropriate property. \n\n[!code-csharp[is#9](../../../../samples/snippets/csharp/language-reference/keywords/is/is-type-pattern9.cs#9)]\n\nThe equivalent code without pattern matching requires a separate assignment that includes an explicit cast.\n\n[!code-csharp[is#10](../../../../samples/snippets/csharp/language-reference/keywords/is/is-type-pattern10.cs#10)]\n\n### <a name=\"constant\" /> Constant pattern\n\nWhen performing pattern matching with the constant pattern, `is` tests whether an expression equals a specified constant. In C# 6 and earlier versions, the constant pattern is supported by the [switch](switch.md) statement. Starting with C# 7.0, it is supported by the `is` statement as well. Its syntax is:\n\n```csharp\n   expr is constant\n```\n\nwhere *expr* is the expression to evaluate, and *constant* is the value to test for. *constant* can be any of the following constant expressions: \n\n- A literal value.\n\n- The name of a declared `const` variable.\n\n- An enumeration constant.\n\nThe constant expression is evaluated as follows:\n\n- If *expr* and *constant* are integral types, the C# equality operator determines whether the expression returns `true` (that is, whether `expr == constant`).\n\n- Otherwise, the value of the expression is determined by a call to the static [Object.Equals(expr, constant)](xref:System.Object.Equals(System.Object,System.Object)) method.  \n\nThe following example combines the type and constant patterns to test whether an object is a `Dice` instance and, if it is, to determine whether the value of a dice roll is 6.\n\n[!code-csharp[is#7](../../../../samples/snippets/csharp/language-reference/keywords/is/is-const-pattern7.cs#7)]\n\nChecking for `null` can be performed using the constant pattern. The `null` keyword is supported by the `is` statement. Its syntax is:\n\n```csharp \n   expr is null\n```\n\nThe following example shows a comparison of `null` checks:\n\n[!code-csharp[is#11](../../../../samples/snippets/csharp/language-reference/keywords/is/is-const-pattern11.cs#11)]\n \n### <a name=\"var\" /> var pattern </a>\n\nA pattern match with the var pattern always succeeds. Its syntax is\n\n```csharp \n   expr is var varname\n```\n\nwhere the value of *expr* is always assigned to a local variable named *varname*. *varname* is a static variable of the same type as *expr*. The following example uses the var pattern to assign an expression to a variable named `obj`. It then displays the value and the type of `obj`.\n\n[!code-csharp[is#8](../../../../samples/snippets/csharp/language-reference/keywords/is/is-var-pattern8.cs#8)]\n\nNote that if *expr* is `null`, the `is` expression still is true and assigns `null` to *varname*. \n\n## C# Language Specification\n  \n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [typeof](../../../csharp/language-reference/keywords/typeof.md)\n- [as](../../../csharp/language-reference/keywords/as.md)\n- [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)\n","nodes":[{"pos":[4,210],"embed":true,"restype":"x-metadata","content":"title: \"is - C# Reference\"\nms.custom: seodec18\n\nms.date: 02/17/2017\nf1_keywords: \n  - \"is_CSharpKeyword\"\n  - \"is\"\nhelpviewer_keywords: \n  - \"is keyword [C#]\"\nms.assetid: bc62316a-d41f-4f90-8300-c6f4f0556e43","nodes":[{"content":"is - C# Reference","nodes":[{"pos":[0,17],"content":"is - C# Reference","nodes":[{"content":"is - C# Reference","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[217,234],"content":"is (C# Reference)","linkify":"is (C# Reference)","nodes":[{"content":"is (C# Reference)","pos":[0,17]}]},{"content":"Checks if an object is compatible with a given type, or (starting with C# 7.0) tests an expression against a pattern.","pos":[236,353]},{"pos":[358,388],"content":"Testing for type compatibility","linkify":"Testing for type compatibility","nodes":[{"content":"Testing for type compatibility","pos":[0,30]}]},{"content":"The <ph id=\"ph1\">`is`</ph> keyword evaluates type compatibility at runtime.","pos":[390,447],"source":"The `is` keyword evaluates type compatibility at runtime."},{"content":"It determines whether an object instance or the result of an expression can be converted to a specified type.","pos":[448,557]},{"content":"It has the syntax","pos":[558,575]},{"content":"where <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is an expression that evaluates to an instance of some type, and <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept> is the name of the type to which the result of <bpt id=\"p3\">*</bpt>expr<ept id=\"p3\">*</ept> is to be converted.","pos":[608,766],"source":"where *expr* is an expression that evaluates to an instance of some type, and *type* is the name of the type to which the result of *expr* is to be converted."},{"content":"The <ph id=\"ph1\">`is`</ph> statement is <ph id=\"ph2\">`true`</ph> if <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is non-null and the object that results from evaluating the expression can be converted to <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>; otherwise, it returns <ph id=\"ph3\">`false`</ph>.","pos":[767,935],"source":" The `is` statement is `true` if *expr* is non-null and the object that results from evaluating the expression can be converted to *type*; otherwise, it returns `false`."},{"pos":[937,1037],"content":"For example, the following code determines if <ph id=\"ph1\">`obj`</ph> can be cast to an instance of the <ph id=\"ph2\">`Person`</ph> type:","source":"For example, the following code determines if `obj` can be cast to an instance of the `Person` type:"},{"pos":[1138,1168],"content":"The <ph id=\"ph1\">`is`</ph> statement is true if:","source":"The `is` statement is true if:"},{"pos":[1172,1221],"content":"<bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is an instance of the same type as <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>.","source":"*expr* is an instance of the same type as *type*."},{"content":"<bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is an instance of a type that derives from <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>.","pos":[1225,1282],"source":"*expr* is an instance of a type that derives from *type*."},{"content":"In other words, the result of <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> can be upcast to an instance of <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>.","pos":[1283,1359],"source":" In other words, the result of *expr* can be upcast to an instance of *type*."},{"content":"<bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> has a compile-time type that is a base class of <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>expr<ept id=\"p3\">*</ept> has a runtime type that is <bpt id=\"p4\">*</bpt>type<ept id=\"p4\">*</ept> or is derived from <bpt id=\"p5\">*</bpt>type<ept id=\"p5\">*</ept>.","pos":[1363,1497],"source":"*expr* has a compile-time type that is a base class of *type*, and *expr* has a runtime type that is *type* or is derived from *type*."},{"content":"The <bpt id=\"p1\">*</bpt>compile-time type<ept id=\"p1\">*</ept> of a variable is the variable's type as defined in its declaration.","pos":[1498,1589],"source":" The *compile-time type* of a variable is the variable's type as defined in its declaration."},{"content":"The <bpt id=\"p1\">*</bpt>runtime type<ept id=\"p1\">*</ept> of a variable is the type of the instance that is assigned to that variable.","pos":[1590,1685],"source":" The *runtime type* of a variable is the type of the instance that is assigned to that variable."},{"pos":[1689,1758],"content":"<bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is an instance of a type that implements the <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept> interface.","source":"*expr* is an instance of a type that implements the *type* interface."},{"pos":[1760,1863],"content":"The following example shows that the <ph id=\"ph1\">`is`</ph> expression evaluates to <ph id=\"ph2\">`true`</ph> for each of these conversions.","source":"The following example shows that the `is` expression evaluates to `true` for each of these conversions."},{"content":"The <ph id=\"ph1\">`is`</ph> keyword generates a compile-time warning if the expression is known to always be either <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`false`</ph>.","pos":[1964,2079],"source":"The `is` keyword generates a compile-time warning if the expression is known to always be either `true` or `false`."},{"content":"It only considers reference conversions, boxing conversions, and unboxing conversions; it does not consider user-defined conversions or conversions defined by a type's <bpt id=\"p1\">[</bpt>implicit<ept id=\"p1\">](implicit.md)</ept> and <bpt id=\"p2\">[</bpt>explicit<ept id=\"p2\">](explicit.md)</ept> operators.","pos":[2080,2310],"source":" It only considers reference conversions, boxing conversions, and unboxing conversions; it does not consider user-defined conversions or conversions defined by a type's [implicit](implicit.md) and [explicit](explicit.md) operators."},{"content":"The following example generates warnings because the result of the conversion is known at compile-time.","pos":[2311,2414]},{"content":"Note that the <ph id=\"ph1\">`is`</ph> expression for conversions from <ph id=\"ph2\">`int`</ph> to <ph id=\"ph3\">`long`</ph> and <ph id=\"ph4\">`double`</ph> return false, since these conversions are handled by the <bpt id=\"p1\">[</bpt>implicit<ept id=\"p1\">](implicit.md)</ept> operator.","pos":[2415,2585],"source":" Note that the `is` expression for conversions from `int` to `long` and `double` return false, since these conversions are handled by the [implicit](implicit.md) operator."},{"content":"<ph id=\"ph1\">`expr`</ph> can be any expression that returns a value, with the exception of anonymous methods and lambda expressions.","pos":[2686,2800],"source":"`expr` can be any expression that returns a value, with the exception of anonymous methods and lambda expressions."},{"content":"The following example uses  <ph id=\"ph1\">`is`</ph> to evaluate the return value of a method call.","pos":[2801,2880],"source":" The following example uses  `is` to evaluate the return value of a method call."},{"pos":[2983,3121],"content":"Starting with C# 7.0, you can use pattern matching with the <bpt id=\"p1\">[</bpt>type pattern<ept id=\"p1\">](#type)</ept> to write more concise code that uses the <ph id=\"ph1\">`is`</ph> statement.","source":"Starting with C# 7.0, you can use pattern matching with the [type pattern](#type) to write more concise code that uses the `is` statement."},{"pos":[3126,3152],"content":"Pattern matching with <ph id=\"ph1\">`is`</ph>","linkify":"Pattern matching with `is`","source":"Pattern matching with `is`"},{"content":"Starting with C# 7.0, the <ph id=\"ph1\">`is`</ph> and <bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](../../../csharp/language-reference/keywords/switch.md)</ept> statements support pattern matching.","pos":[3154,3289],"source":"Starting with C# 7.0, the `is` and [switch](../../../csharp/language-reference/keywords/switch.md) statements support pattern matching."},{"content":"The <ph id=\"ph1\">`is`</ph> keyword supports the following patterns:","pos":[3290,3339],"source":" The `is` keyword supports the following patterns:"},{"pos":[3343,3493],"content":"<bpt id=\"p1\">[</bpt>Type pattern<ept id=\"p1\">](#type)</ept>,  which tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type.","source":"[Type pattern](#type),  which tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type."},{"pos":[3497,3602],"content":"<bpt id=\"p1\">[</bpt>Constant pattern<ept id=\"p1\">](#constant)</ept>, which tests whether an expression evaluates to a specified constant value.","source":"[Constant pattern](#constant), which tests whether an expression evaluates to a specified constant value."},{"pos":[3606,3717],"content":"<bpt id=\"p1\">[</bpt>var pattern<ept id=\"p1\">](#var)</ept>, a match that always succeeds and binds the value of an expression to a new local variable.","source":"[var pattern](#var), a match that always succeeds and binds the value of an expression to a new local variable."},{"pos":[3724,3759],"content":"<ph id=\"ph1\">&lt;a name=\"type\" /&gt;</ph> Type pattern <ph id=\"ph2\">&lt;/a&gt;</ph>","linkify":"<a name=\"type\" /> Type pattern </a>","source":"<a name=\"type\" /> Type pattern </a>"},{"content":"When using the type pattern to perform pattern matching, <ph id=\"ph1\">`is`</ph> tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type.","pos":[3761,3943],"source":"When using the type pattern to perform pattern matching, `is` tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type."},{"content":"It is a straightforward extension of the <ph id=\"ph1\">`is`</ph> statement that enables concise type evaluation and conversion.","pos":[3944,4052],"source":" It is a straightforward extension of the `is` statement that enables concise type evaluation and conversion."},{"content":"The general form of the <ph id=\"ph1\">`is`</ph> type pattern is:","pos":[4053,4098],"source":" The general form of the `is` type pattern is:"},{"pos":[4140,4393],"content":"where <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is an expression that evaluates to an instance of some type, <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept> is the name of the type to which the result of <bpt id=\"p3\">*</bpt>expr<ept id=\"p3\">*</ept> is to be converted, and <bpt id=\"p4\">*</bpt>varname<ept id=\"p4\">*</ept> is the object to which the result of <bpt id=\"p5\">*</bpt>expr<ept id=\"p5\">*</ept> is converted if the <ph id=\"ph1\">`is`</ph> test is <ph id=\"ph2\">`true`</ph>.","source":"where *expr* is an expression that evaluates to an instance of some type, *type* is the name of the type to which the result of *expr* is to be converted, and *varname* is the object to which the result of *expr* is converted if the `is` test is `true`."},{"pos":[4396,4484],"content":"The <ph id=\"ph1\">`is`</ph> expression is <ph id=\"ph2\">`true`</ph> if <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is not <ph id=\"ph3\">`null`</ph>, and any of the following is true:","source":"The `is` expression is `true` if *expr* is not `null`, and any of the following is true:"},{"pos":[4488,4537],"content":"<bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is an instance of the same type as <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>.","source":"*expr* is an instance of the same type as *type*."},{"content":"<bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is an instance of a type that derives from <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>.","pos":[4541,4598],"source":"*expr* is an instance of a type that derives from *type*."},{"content":"In other words, the result of <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> can be upcast to an instance of <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>.","pos":[4599,4675],"source":" In other words, the result of *expr* can be upcast to an instance of *type*."},{"content":"<bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> has a compile-time type that is a base class of <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>expr<ept id=\"p3\">*</ept> has a runtime type that is <bpt id=\"p4\">*</bpt>type<ept id=\"p4\">*</ept> or is derived from <bpt id=\"p5\">*</bpt>type<ept id=\"p5\">*</ept>.","pos":[4679,4813],"source":"*expr* has a compile-time type that is a base class of *type*, and *expr* has a runtime type that is *type* or is derived from *type*."},{"content":"The <bpt id=\"p1\">*</bpt>compile-time type<ept id=\"p1\">*</ept> of a variable is the variable's type as defined in its declaration.","pos":[4814,4905],"source":" The *compile-time type* of a variable is the variable's type as defined in its declaration."},{"content":"The <bpt id=\"p1\">*</bpt>runtime type<ept id=\"p1\">*</ept> of a variable is the type of the instance that is assigned to that variable.","pos":[4906,5001],"source":" The *runtime type* of a variable is the type of the instance that is assigned to that variable."},{"pos":[5005,5074],"content":"<bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is an instance of a type that implements the <bpt id=\"p2\">*</bpt>type<ept id=\"p2\">*</ept> interface.","source":"*expr* is an instance of a type that implements the *type* interface."},{"pos":[5076,5210],"content":"If <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`is`</ph> is used with an <ph id=\"ph3\">`if`</ph> statement, <bpt id=\"p2\">*</bpt>varname<ept id=\"p2\">*</ept> is assigned and has local scope within the <ph id=\"ph4\">`if`</ph> statement only.","source":"If *expr* is `true` and `is` is used with an `if` statement, *varname* is assigned and has local scope within the `if` statement only."},{"pos":[5212,5390],"content":"The following example uses the <ph id=\"ph1\">`is`</ph> type pattern to provide the implementation of a type's <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo(System.Object)?displayProperty=nameWithType&gt;</ph> method.","source":"The following example uses the `is` type pattern to provide the implementation of a type's <xref:System.IComparable.CompareTo(System.Object)?displayProperty=nameWithType> method."},{"content":"Without pattern matching, this code might be written as follows.","pos":[5504,5568]},{"content":"The use of type pattern matching produces more compact, readable code by eliminating the need to test whether the result of a conversion is a <ph id=\"ph1\">`null`</ph>.","pos":[5569,5718],"source":" The use of type pattern matching produces more compact, readable code by eliminating the need to test whether the result of a conversion is a `null`."},{"content":"The <ph id=\"ph1\">`is`</ph> type pattern also produces more compact code when determining the type of a value type.","pos":[5834,5930],"source":"The `is` type pattern also produces more compact code when determining the type of a value type."},{"content":"The following example uses the <ph id=\"ph1\">`is`</ph> type pattern to determine whether an object is a <ph id=\"ph2\">`Person`</ph> or a <ph id=\"ph3\">`Dog`</ph> instance before displaying the value of an appropriate property.","pos":[5931,6100],"source":" The following example uses the `is` type pattern to determine whether an object is a `Person` or a `Dog` instance before displaying the value of an appropriate property."},{"content":"The equivalent code without pattern matching requires a separate assignment that includes an explicit cast.","pos":[6215,6322]},{"pos":[6443,6481],"content":"<ph id=\"ph1\">&lt;a name=\"constant\" /&gt;</ph> Constant pattern","linkify":"<a name=\"constant\" /> Constant pattern","source":"<a name=\"constant\" /> Constant pattern"},{"content":"When performing pattern matching with the constant pattern, <ph id=\"ph1\">`is`</ph> tests whether an expression equals a specified constant.","pos":[6483,6604],"source":"When performing pattern matching with the constant pattern, `is` tests whether an expression equals a specified constant."},{"content":"In C# 6 and earlier versions, the constant pattern is supported by the <bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](switch.md)</ept> statement.","pos":[6605,6706],"source":" In C# 6 and earlier versions, the constant pattern is supported by the [switch](switch.md) statement."},{"content":"Starting with C# 7.0, it is supported by the <ph id=\"ph1\">`is`</ph> statement as well.","pos":[6707,6775],"source":" Starting with C# 7.0, it is supported by the `is` statement as well."},{"content":"Its syntax is:","pos":[6776,6790]},{"content":"where <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is the expression to evaluate, and <bpt id=\"p2\">*</bpt>constant<ept id=\"p2\">*</ept> is the value to test for.","pos":[6827,6911],"source":"where *expr* is the expression to evaluate, and *constant* is the value to test for."},{"content":"<bpt id=\"p1\">*</bpt>constant<ept id=\"p1\">*</ept> can be any of the following constant expressions:","pos":[6912,6972],"source":"*constant* can be any of the following constant expressions:"},{"content":"A literal value.","pos":[6977,6993]},{"pos":[6997,7037],"content":"The name of a declared <ph id=\"ph1\">`const`</ph> variable.","source":"The name of a declared `const` variable."},{"content":"An enumeration constant.","pos":[7041,7065]},{"content":"The constant expression is evaluated as follows:","pos":[7067,7115]},{"pos":[7119,7276],"content":"If <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>constant<ept id=\"p2\">*</ept> are integral types, the C# equality operator determines whether the expression returns <ph id=\"ph1\">`true`</ph> (that is, whether <ph id=\"ph2\">`expr == constant`</ph>).","source":"If *expr* and *constant* are integral types, the C# equality operator determines whether the expression returns `true` (that is, whether `expr == constant`)."},{"pos":[7280,7452],"content":"Otherwise, the value of the expression is determined by a call to the static <bpt id=\"p1\">[</bpt>Object.Equals(expr, constant)<ept id=\"p1\">](xref:System.Object.Equals(System.Object,System.Object))</ept> method.","source":"Otherwise, the value of the expression is determined by a call to the static [Object.Equals(expr, constant)](xref:System.Object.Equals(System.Object,System.Object)) method."},{"pos":[7456,7631],"content":"The following example combines the type and constant patterns to test whether an object is a <ph id=\"ph1\">`Dice`</ph> instance and, if it is, to determine whether the value of a dice roll is 6.","source":"The following example combines the type and constant patterns to test whether an object is a `Dice` instance and, if it is, to determine whether the value of a dice roll is 6."},{"content":"Checking for <ph id=\"ph1\">`null`</ph> can be performed using the constant pattern.","pos":[7746,7810],"source":"Checking for `null` can be performed using the constant pattern."},{"content":"The <ph id=\"ph1\">`null`</ph> keyword is supported by the <ph id=\"ph2\">`is`</ph> statement.","pos":[7811,7865],"source":" The `null` keyword is supported by the `is` statement."},{"content":"Its syntax is:","pos":[7866,7880]},{"pos":[7914,7972],"content":"The following example shows a comparison of <ph id=\"ph1\">`null`</ph> checks:","source":"The following example shows a comparison of `null` checks:"},{"pos":[8095,8128],"content":"<ph id=\"ph1\">&lt;a name=\"var\" /&gt;</ph> var pattern <ph id=\"ph2\">&lt;/a&gt;</ph>","linkify":"<a name=\"var\" /> var pattern </a>","source":"<a name=\"var\" /> var pattern </a>"},{"content":"A pattern match with the var pattern always succeeds.","pos":[8130,8183]},{"content":"Its syntax is","pos":[8184,8197]},{"content":"where the value of <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is always assigned to a local variable named <bpt id=\"p2\">*</bpt>varname<ept id=\"p2\">*</ept>.","pos":[8238,8319],"source":"where the value of *expr* is always assigned to a local variable named *varname*."},{"content":"<bpt id=\"p1\">*</bpt>varname<ept id=\"p1\">*</ept> is a static variable of the same type as <bpt id=\"p2\">*</bpt>expr<ept id=\"p2\">*</ept>.","pos":[8320,8378],"source":"*varname* is a static variable of the same type as *expr*."},{"content":"The following example uses the var pattern to assign an expression to a variable named <ph id=\"ph1\">`obj`</ph>.","pos":[8379,8472],"source":" The following example uses the var pattern to assign an expression to a variable named `obj`."},{"content":"It then displays the value and the type of <ph id=\"ph1\">`obj`</ph>.","pos":[8473,8522],"source":" It then displays the value and the type of `obj`."},{"pos":[8635,8732],"content":"Note that if <bpt id=\"p1\">*</bpt>expr<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">`is`</ph> expression still is true and assigns <ph id=\"ph3\">`null`</ph> to <bpt id=\"p2\">*</bpt>varname<ept id=\"p2\">*</ept>.","source":"Note that if *expr* is `null`, the `is` expression still is true and assigns `null` to *varname*."},{"pos":[8738,8763],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[8835,8843],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8847,8906],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[8909,8976],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[8979,9042],"content":"<bpt id=\"p1\">[</bpt>typeof<ept id=\"p1\">](../../../csharp/language-reference/keywords/typeof.md)</ept>","source":"[typeof](../../../csharp/language-reference/keywords/typeof.md)"},{"pos":[9045,9100],"content":"<bpt id=\"p1\">[</bpt>as<ept id=\"p1\">](../../../csharp/language-reference/keywords/as.md)</ept>","source":"[as](../../../csharp/language-reference/keywords/as.md)"},{"pos":[9103,9188],"content":"<bpt id=\"p1\">[</bpt>Operator Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept>","source":"[Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)"}]}