{"content":"---\ntitle: \"Commonly Used Collection Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"collections [.NET Framework], generic\"\n  - \"objects [.NET Framework], grouping in collections\"\n  - \"generics [.NET Framework], collections\"\n  - \"IList interface, grouping data in collections\"\n  - \"IDictionary interface, grouping data in collections\"\n  - \"grouping data in collections, generic collection types\"\n  - \"Collections classes\"\n  - \"generic collections\"\nms.assetid: f5d4c6a4-0d7b-4944-a9fb-3b12d9ebfd55\ncaps.latest.revision: 29\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# Commonly Used Collection Types\nCollection types are the common variations of data collections, such as hash tables, queues, stacks, bags, dictionaries, and lists.  \n  \n Collections are based on the <xref:System.Collections.ICollection> interface, the <xref:System.Collections.IList> interface, the <xref:System.Collections.IDictionary> interface, or their generic counterparts. The <xref:System.Collections.IList> interface and the <xref:System.Collections.IDictionary> interface are both derived from the <xref:System.Collections.ICollection> interface; therefore, all collections are based on the <xref:System.Collections.ICollection> interface either directly or indirectly. In collections based on the <xref:System.Collections.IList> interface (such as <xref:System.Array>, <xref:System.Collections.ArrayList>, or <xref:System.Collections.Generic.List%601>) or directly on the <xref:System.Collections.ICollection> interface (such as <xref:System.Collections.Queue>, <xref:System.Collections.Concurrent.ConcurrentQueue%601>, <xref:System.Collections.Stack>, <xref:System.Collections.Concurrent.ConcurrentStack%601> or <xref:System.Collections.Generic.LinkedList%601>), every element contains only a value. In collections based on the <xref:System.Collections.IDictionary> interface (such as the <xref:System.Collections.Hashtable> and <xref:System.Collections.SortedList> classes, the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.Generic.SortedList%602>generic classes), or the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> classes, every element contains both a key and a value.  The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is unique because it is a list of values with keys embedded within the values and, therefore, it behaves like a list and like a dictionary.  \n  \n Generic collections are the best solution to strong typing. However, if your language does not support generics, the <xref:System.Collections> namespace includes base collections, such as <xref:System.Collections.CollectionBase>, <xref:System.Collections.ReadOnlyCollectionBase>, and <xref:System.Collections.DictionaryBase>, which are abstract base classes that can be extended to create collection classes that are strongly typed. When efficient multi-threaded collection access is required, use the generic collections in the <xref:System.Collections.Concurrent> namespace.  \n  \n Collections can vary, depending on how the elements are stored, how they are sorted, how searches are performed, and how comparisons are made. The <xref:System.Collections.Queue> class and the <xref:System.Collections.Generic.Queue%601> generic class provide first-in-first-out lists, while the <xref:System.Collections.Stack> class and the <xref:System.Collections.Generic.Stack%601>generic class provide last-in-first-out lists. The <xref:System.Collections.SortedList> class and the <xref:System.Collections.Generic.SortedList%602> generic class provide sorted versions of the <xref:System.Collections.Hashtable> class and the <xref:System.Collections.Generic.Dictionary%602> generic class. The elements of a <xref:System.Collections.Hashtable> or a <xref:System.Collections.Generic.Dictionary%602> are accessible only by the key of the element, but the elements of a <xref:System.Collections.SortedList> or a <xref:System.Collections.ObjectModel.KeyedCollection%602> are accessible either by the key or by the index of the element. The indexes in all collections are zero-based, except <xref:System.Array>, which allows arrays that are not zero-based.  \n  \n The LINQ to Objects feature allows you to use LINQ queries to access in-memory objects as long as the object type implements <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>. LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard `foreach` loops; and provide filtering, ordering and grouping capabilities. LINQ queries can also improve performance. For more information, see [LINQ to Objects](http://msdn.microsoft.com/library/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) and [Parallel LINQ (PLINQ)](../../../docs/standard/parallel-programming/parallel-linq-plinq.md).  \n  \n## Related Topics  \n  \n|Title|Description|  \n|-----------|-----------------|  \n|[Collections and Data Structures](../../../docs/standard/collections/index.md)|Discusses the various collection types available in the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)], including stacks, queues, lists, arrays, and dictionaries.|  \n|[Hashtable and Dictionary Collection Types](../../../docs/standard/collections/hashtable-and-dictionary-collection-types.md)|Describes the features of generic and nongeneric hash-based dictionary types.|  \n|[Sorted Collection Types](../../../docs/standard/collections/sorted-collection-types.md)|Describes classes that provide sorting functionality for lists and sets.|  \n|[Generics](../../../docs/standard/generics/index.md)|Describes the generics feature, including the generic collections, delegates, and interfaces provided by the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]. Provides links to feature documentation for C#, Visual Basic, and Visual C++, and to supporting technologies such as reflection.|  \n  \n## Reference  \n <xref:System.Collections?displayProperty=fullName>  \n  \n <xref:System.Collections.Generic?displayProperty=fullName>  \n  \n <xref:System.Collections.ICollection?displayProperty=fullName>  \n  \n <xref:System.Collections.Generic.ICollection%601?displayProperty=fullName>  \n  \n <xref:System.Collections.IList?displayProperty=fullName>  \n  \n <xref:System.Collections.Generic.IList%601?displayProperty=fullName>  \n  \n <xref:System.Collections.IDictionary?displayProperty=fullName>  \n  \n <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>","nodes":[{"pos":[12,59],"content":"Commonly Used Collection Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Commonly Used Collection Types | Microsoft Docs","pos":[0,47]}]},{"pos":[738,768],"content":"Commonly Used Collection Types","linkify":"Commonly Used Collection Types","nodes":[{"content":"Commonly Used Collection Types","pos":[0,30]}]},{"content":"Collection types are the common variations of data collections, such as hash tables, queues, stacks, bags, dictionaries, and lists.","pos":[769,900]},{"content":"Collections are based on the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> interface, the <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph> interface, the <ph id=\"ph3\">&lt;xref:System.Collections.IDictionary&gt;</ph> interface, or their generic counterparts.","pos":[907,1115],"source":"Collections are based on the <xref:System.Collections.ICollection> interface, the <xref:System.Collections.IList> interface, the <xref:System.Collections.IDictionary> interface, or their generic counterparts."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph> interface and the <ph id=\"ph2\">&lt;xref:System.Collections.IDictionary&gt;</ph> interface are both derived from the <ph id=\"ph3\">&lt;xref:System.Collections.ICollection&gt;</ph> interface; therefore, all collections are based on the <ph id=\"ph4\">&lt;xref:System.Collections.ICollection&gt;</ph> interface either directly or indirectly.","pos":[1116,1415],"source":" The <xref:System.Collections.IList> interface and the <xref:System.Collections.IDictionary> interface are both derived from the <xref:System.Collections.ICollection> interface; therefore, all collections are based on the <xref:System.Collections.ICollection> interface either directly or indirectly."},{"content":"In collections based on the <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph> interface (such as <ph id=\"ph2\">&lt;xref:System.Array&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>) or directly on the <ph id=\"ph5\">&lt;xref:System.Collections.ICollection&gt;</ph> interface (such as <ph id=\"ph6\">&lt;xref:System.Collections.Queue&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Collections.Stack&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> or <ph id=\"ph10\">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>), every element contains only a value.","pos":[1416,1947],"source":" In collections based on the <xref:System.Collections.IList> interface (such as <xref:System.Array>, <xref:System.Collections.ArrayList>, or <xref:System.Collections.Generic.List%601>) or directly on the <xref:System.Collections.ICollection> interface (such as <xref:System.Collections.Queue>, <xref:System.Collections.Concurrent.ConcurrentQueue%601>, <xref:System.Collections.Stack>, <xref:System.Collections.Concurrent.ConcurrentStack%601> or <xref:System.Collections.Generic.LinkedList%601>), every element contains only a value."},{"content":"In collections based on the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> interface (such as the <ph id=\"ph2\">&lt;xref:System.Collections.Hashtable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> classes, the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>generic classes), or the <ph id=\"ph6\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> classes, every element contains both a key and a value.","pos":[1948,2370],"source":" In collections based on the <xref:System.Collections.IDictionary> interface (such as the <xref:System.Collections.Hashtable> and <xref:System.Collections.SortedList> classes, the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.Generic.SortedList%602>generic classes), or the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> classes, every element contains both a key and a value."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is unique because it is a list of values with keys embedded within the values and, therefore, it behaves like a list and like a dictionary.","pos":[2372,2579],"source":"  The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is unique because it is a list of values with keys embedded within the values and, therefore, it behaves like a list and like a dictionary."},{"content":"Generic collections are the best solution to strong typing.","pos":[2586,2645]},{"content":"However, if your language does not support generics, the <ph id=\"ph1\">&lt;xref:System.Collections&gt;</ph> namespace includes base collections, such as <ph id=\"ph2\">&lt;xref:System.Collections.CollectionBase&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Collections.DictionaryBase&gt;</ph>, which are abstract base classes that can be extended to create collection classes that are strongly typed.","pos":[2646,3018],"source":" However, if your language does not support generics, the <xref:System.Collections> namespace includes base collections, such as <xref:System.Collections.CollectionBase>, <xref:System.Collections.ReadOnlyCollectionBase>, and <xref:System.Collections.DictionaryBase>, which are abstract base classes that can be extended to create collection classes that are strongly typed."},{"content":"When efficient multi-threaded collection access is required, use the generic collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace.","pos":[3019,3162],"source":" When efficient multi-threaded collection access is required, use the generic collections in the <xref:System.Collections.Concurrent> namespace."},{"content":"Collections can vary, depending on how the elements are stored, how they are sorted, how searches are performed, and how comparisons are made.","pos":[3169,3311]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Queue&gt;</ph> class and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class provide first-in-first-out lists, while the <ph id=\"ph3\">&lt;xref:System.Collections.Stack&gt;</ph> class and the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>generic class provide last-in-first-out lists.","pos":[3312,3599],"source":" The <xref:System.Collections.Queue> class and the <xref:System.Collections.Generic.Queue%601> generic class provide first-in-first-out lists, while the <xref:System.Collections.Stack> class and the <xref:System.Collections.Generic.Stack%601>generic class provide last-in-first-out lists."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> class and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> generic class provide sorted versions of the <ph id=\"ph3\">&lt;xref:System.Collections.Hashtable&gt;</ph> class and the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> generic class.","pos":[3600,3862],"source":" The <xref:System.Collections.SortedList> class and the <xref:System.Collections.Generic.SortedList%602> generic class provide sorted versions of the <xref:System.Collections.Hashtable> class and the <xref:System.Collections.Generic.Dictionary%602> generic class."},{"content":"The elements of a <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> or a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> are accessible only by the key of the element, but the elements of a <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> or a <ph id=\"ph4\">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> are accessible either by the key or by the index of the element.","pos":[3863,4204],"source":" The elements of a <xref:System.Collections.Hashtable> or a <xref:System.Collections.Generic.Dictionary%602> are accessible only by the key of the element, but the elements of a <xref:System.Collections.SortedList> or a <xref:System.Collections.ObjectModel.KeyedCollection%602> are accessible either by the key or by the index of the element."},{"content":"The indexes in all collections are zero-based, except <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph>, which allows arrays that are not zero-based.","pos":[4205,4324],"source":" The indexes in all collections are zero-based, except <xref:System.Array>, which allows arrays that are not zero-based."},{"content":"The LINQ to Objects feature allows you to use LINQ queries to access in-memory objects as long as the object type implements <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[4331,4547],"source":"The LINQ to Objects feature allows you to use LINQ queries to access in-memory objects as long as the object type implements <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>."},{"content":"LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard <ph id=\"ph1\">`foreach`</ph> loops; and provide filtering, ordering and grouping capabilities.","pos":[4548,4735],"source":" LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard `foreach` loops; and provide filtering, ordering and grouping capabilities."},{"content":"LINQ queries can also improve performance.","pos":[4736,4778]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>LINQ to Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/73cafe73-37cf-46e7-bfa7-97c7eea7ced9)</ept> and <bpt id=\"p2\">[</bpt>Parallel LINQ (PLINQ)<ept id=\"p2\">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept>.","pos":[4779,4991],"source":" For more information, see [LINQ to Objects](http://msdn.microsoft.com/library/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) and [Parallel LINQ (PLINQ)](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)."},{"pos":[5000,5014],"content":"Related Topics","linkify":"Related Topics","nodes":[{"content":"Related Topics","pos":[0,14]}]},{"content":"Title","pos":[5021,5026]},{"content":"Description","pos":[5027,5038]},{"pos":[5077,5155],"content":"<bpt id=\"p1\">[</bpt>Collections and Data Structures<ept id=\"p1\">](../../../docs/standard/collections/index.md)</ept>","source":"[Collections and Data Structures](../../../docs/standard/collections/index.md)"},{"pos":[5156,5332],"content":"Discusses the various collection types available in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph>, including stacks, queues, lists, arrays, and dictionaries.","source":"Discusses the various collection types available in the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)], including stacks, queues, lists, arrays, and dictionaries."},{"pos":[5337,5461],"content":"<bpt id=\"p1\">[</bpt>Hashtable and Dictionary Collection Types<ept id=\"p1\">](../../../docs/standard/collections/hashtable-and-dictionary-collection-types.md)</ept>","source":"[Hashtable and Dictionary Collection Types](../../../docs/standard/collections/hashtable-and-dictionary-collection-types.md)"},{"content":"Describes the features of generic and nongeneric hash-based dictionary types.","pos":[5462,5539]},{"pos":[5544,5632],"content":"<bpt id=\"p1\">[</bpt>Sorted Collection Types<ept id=\"p1\">](../../../docs/standard/collections/sorted-collection-types.md)</ept>","source":"[Sorted Collection Types](../../../docs/standard/collections/sorted-collection-types.md)"},{"content":"Describes classes that provide sorting functionality for lists and sets.","pos":[5633,5705]},{"pos":[5710,5762],"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../../../docs/standard/generics/index.md)</ept>","source":"[Generics](../../../docs/standard/generics/index.md)"},{"content":"Describes the generics feature, including the generic collections, delegates, and interfaces provided by the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph>.","pos":[5763,5933],"source":"Describes the generics feature, including the generic collections, delegates, and interfaces provided by the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]."},{"content":"Provides links to feature documentation for C#, Visual Basic, and Visual C++, and to supporting technologies such as reflection.","pos":[5934,6062]},{"pos":[6072,6081],"content":"Reference","linkify":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]}]}