{"content":"---\ntitle: \"How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nf1_keywords: \n  - \"ListItem\"\nhelpviewer_keywords: \n  - \"examples [Windows Forms], TreeView control\"\n  - \"examples [Windows Forms], ListView control\"\n  - \"ListView control [Windows Forms], adding custom information\"\n  - \"TreeView control [Windows Forms], adding custom information\"\nms.assetid: 68be11de-1d5b-430e-901f-cfbe48d14b19\n---\n# How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)\nYou can create a derived node in a Windows Forms <xref:System.Windows.Forms.TreeView> control or a derived item in a <xref:System.Windows.Forms.ListView> control. Derivation allows you to add any fields you require, as well as custom methods and constructors for handling them. One use of this feature is to attach a Customer object to each tree node or list item. The examples here are for a <xref:System.Windows.Forms.TreeView> control, but the same approach can be used for a <xref:System.Windows.Forms.ListView> control.  \n  \n### To derive a tree node  \n  \n-   Create a new node class, derived from the <xref:System.Windows.Forms.TreeNode> class, which has a custom field to record a file path.  \n  \n    ```vb  \n    Class myTreeNode  \n       Inherits TreeNode  \n  \n       Public FilePath As String  \n  \n       Sub New(ByVal fp As String)  \n          MyBase.New()  \n          FilePath = fp  \n          Me.Text = fp.Substring(fp.LastIndexOf(\"\\\"))  \n       End Sub  \n    End Class  \n    ```  \n  \n    ```csharp  \n    class myTreeNode : TreeNode  \n    {  \n       public string FilePath;  \n  \n       public myTreeNode(string fp)  \n       {  \n          FilePath = fp;  \n          this.Text = fp.Substring(fp.LastIndexOf(\"\\\\\"));  \n       }  \n    }  \n    ```  \n  \n    ```cpp  \n    ref class myTreeNode : public TreeNode  \n    {  \n    public:  \n       System::String ^ FilePath;  \n  \n       myTreeNode(System::String ^ fp)  \n       {  \n          FilePath = fp;  \n          this->Text = fp->Substring(fp->LastIndexOf(\"\\\\\"));  \n       }  \n    };  \n    ```  \n  \n### To use a derived tree node  \n  \n1.  You can use the new derived tree node as a parameter to function calls.  \n  \n     In the example below, the path set for the location of the text file is the My Documents folder. This is done because you can assume that most computers running the Windows operating system will include this directory. This also allows users with minimal system access levels to safely run the application.  \n  \n    ```vb  \n    ' You should replace the bold text file   \n    ' in the sample below with a text file of your own choosing.  \n    TreeView1.Nodes.Add(New myTreeNode (System.Environment.GetFolderPath _  \n       (System.Environment.SpecialFolder.Personal) _  \n       & \"\\ TextFile.txt \") )  \n    ```  \n  \n    ```csharp  \n    // You should replace the bold text file   \n    // in the sample below with a text file of your own choosing.  \n    // Note the escape character used (@) when specifying the path.  \n    treeView1.Nodes.Add(new myTreeNode (System.Environment.GetFolderPath _  \n       (System.Environment.SpecialFolder.Personal) _  \n       + @\"\\TextFile.txt\") );  \n    ```  \n  \n    ```cpp  \n    // You should replace the bold text file   \n    // in the sample below with a text file of your own choosing.  \n    treeView1->Nodes->Add(new myTreeNode(String::Concat(  \n       System::Environment::GetFolderPath  \n       (System::Environment::SpecialFolder::Personal),  \n       \"\\\\TextFile.txt\")));  \n    ```  \n  \n2.  If you are passed the tree node and it is typed as a <xref:System.Windows.Forms.TreeNode> class, then you will need to cast to your derived class. Casting is an explicit conversion from one type of object to another. For more information on casting, see [Implicit and Explicit Conversions](~/docs/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md) (Visual Basic), [() Operator](~/docs/csharp/language-reference/operators/invocation-operator.md) (Visual C#), or [Cast Operator: ()](/cpp/cpp/cast-operator-parens) ([!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)]).  \n  \n    ```vb  \n    Public Sub TreeView1_AfterSelect(ByVal sender As Object, ByVal e As System.Windows.Forms.TreeViewEventArgs) Handles TreeView1.AfterSelect  \n       Dim mynode As myTreeNode  \n       mynode = CType(e.node, myTreeNode)  \n       MessageBox.Show(\"Node selected is \" & mynode.filepath)  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    protected void treeView1_AfterSelect (object sender,  \n    System.Windows.Forms.TreeViewEventArgs e)  \n    {  \n       myTreeNode myNode = (myTreeNode)e.Node;  \n       MessageBox.Show(\"Node selected is \" + myNode.FilePath);  \n    }  \n    ```  \n  \n    ```cpp  \n    private:  \n       System::Void treeView1_AfterSelect(System::Object ^  sender,  \n          System::Windows::Forms::TreeViewEventArgs ^  e)  \n       {  \n          myTreeNode ^ myNode = safe_cast<myTreeNode^>(e->Node);  \n          MessageBox::Show(String::Concat(\"Node selected is \",   \n             myNode->FilePath));  \n       }  \n    ```  \n  \n## See also\n\n- [TreeView Control](treeview-control-windows-forms.md)\n- [ListView Control](listview-control-windows-forms.md)\n","nodes":[{"pos":[4,489],"embed":true,"restype":"x-metadata","content":"title: \"How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nf1_keywords: \n  - \"ListItem\"\nhelpviewer_keywords: \n  - \"examples [Windows Forms], TreeView control\"\n  - \"examples [Windows Forms], ListView control\"\n  - \"ListView control [Windows Forms], adding custom information\"\n  - \"TreeView control [Windows Forms], adding custom information\"\nms.assetid: 68be11de-1d5b-430e-901f-cfbe48d14b19","nodes":[{"content":"How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)","nodes":[{"pos":[0,80],"content":"How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)","nodes":[{"content":"How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)","pos":[0,80]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[496,576],"content":"How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)","linkify":"How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)","nodes":[{"content":"How to: Add Custom Information to a TreeView or ListView Control (Windows Forms)","pos":[0,80]}]},{"content":"You can create a derived node in a Windows Forms <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> control or a derived item in a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ListView&gt;</ph> control.","pos":[577,739],"source":"You can create a derived node in a Windows Forms <xref:System.Windows.Forms.TreeView> control or a derived item in a <xref:System.Windows.Forms.ListView> control."},{"content":"Derivation allows you to add any fields you require, as well as custom methods and constructors for handling them.","pos":[740,854]},{"content":"One use of this feature is to attach a Customer object to each tree node or list item.","pos":[855,941]},{"content":"The examples here are for a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> control, but the same approach can be used for a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ListView&gt;</ph> control.","pos":[942,1101],"source":" The examples here are for a <xref:System.Windows.Forms.TreeView> control, but the same approach can be used for a <xref:System.Windows.Forms.ListView> control."},{"pos":[1111,1132],"content":"To derive a tree node","linkify":"To derive a tree node","nodes":[{"content":"To derive a tree node","pos":[0,21]}]},{"pos":[1142,1275],"content":"Create a new node class, derived from the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeNode&gt;</ph> class, which has a custom field to record a file path.","source":"Create a new node class, derived from the <xref:System.Windows.Forms.TreeNode> class, which has a custom field to record a file path."},{"pos":[2134,2160],"content":"To use a derived tree node","linkify":"To use a derived tree node","nodes":[{"content":"To use a derived tree node","pos":[0,26]}]},{"content":"You can use the new derived tree node as a parameter to function calls.","pos":[2170,2241]},{"content":"In the example below, the path set for the location of the text file is the My Documents folder.","pos":[2252,2348]},{"content":"This is done because you can assume that most computers running the Windows operating system will include this directory.","pos":[2349,2470]},{"content":"This also allows users with minimal system access levels to safely run the application.","pos":[2471,2558]},{"content":"If you are passed the tree node and it is typed as a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeNode&gt;</ph> class, then you will need to cast to your derived class.","pos":[3582,3728],"source":"If you are passed the tree node and it is typed as a <xref:System.Windows.Forms.TreeNode> class, then you will need to cast to your derived class."},{"content":"Casting is an explicit conversion from one type of object to another.","pos":[3729,3798]},{"content":"For more information on casting, see <bpt id=\"p1\">[</bpt>Implicit and Explicit Conversions<ept id=\"p1\">](~/docs/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept> (Visual Basic), <bpt id=\"p2\">[</bpt>() Operator<ept id=\"p2\">](~/docs/csharp/language-reference/operators/invocation-operator.md)</ept> (Visual C#), or <bpt id=\"p3\">[</bpt>Cast Operator: ()<ept id=\"p3\">](/cpp/cpp/cast-operator-parens)</ept> (<ph id=\"ph1\">[!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)]</ph>).","pos":[3799,4197],"source":" For more information on casting, see [Implicit and Explicit Conversions](~/docs/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md) (Visual Basic), [() Operator](~/docs/csharp/language-reference/operators/invocation-operator.md) (Visual C#), or [Cast Operator: ()](/cpp/cpp/cast-operator-parens) ([!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)])."},{"pos":[5158,5166],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5170,5223],"content":"<bpt id=\"p1\">[</bpt>TreeView Control<ept id=\"p1\">](treeview-control-windows-forms.md)</ept>","source":"[TreeView Control](treeview-control-windows-forms.md)"},{"pos":[5226,5279],"content":"<bpt id=\"p1\">[</bpt>ListView Control<ept id=\"p1\">](listview-control-windows-forms.md)</ept>","source":"[ListView Control](listview-control-windows-forms.md)"}]}