<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="security-and-remoting-considerations.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46e2e1c327a683782b68069ace2ad6c40bbc856e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\misc\security-and-remoting-considerations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">201dfedc5f85f9f731c9d639f2f8c99d3685446a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa35e2c316f25c37a544406a74b63f1eb48b934a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Security and Remoting Considerations</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Security and Remoting Considerations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Remoting allows you to set up transparent calling between application domains, processes, or computers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the code access security stack walk cannot cross process or machine boundaries (it does apply between application domains of the same process).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Any class that is remotable (derived from a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> class) needs to take responsibility for security.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Either the code should be used only in closed environments where the calling code can be implicitly trusted, or remoting calls should be designed so that they do not subject protected code to outside entry that could be used maliciously.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Generally, you should never expose methods, properties, or events that are protected by declarative <bpt id="p1">[</bpt>LinkDemand<ept id="p1">](../../../docs/framework/misc/link-demands.md)</ept> and <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction.InheritanceDemand&gt;</ph> security checks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With remoting, these checks are not enforced.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Other security checks, such as <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction.Demand&gt;</ph>, <bpt id="p1">[</bpt>Assert<ept id="p1">](../../../docs/framework/misc/using-the-assert-method.md)</ept>, and so on, work between application domains within a process but do not work in cross-process or cross-machine scenarios.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Protected objects</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Some objects hold security state in themselves.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These objects should not be passed to untrusted code, which would then acquire security authorization beyond its own permissions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>One example is creating a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> is demanded at the time of creation and, if it succeeds, the file object is returned.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, if this object reference is passed to code without file permissions, the object will be able to read and write to this particular file.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The simplest defense for such an object is to demand the same <bpt id="p1">**</bpt>FileIOPermission<ept id="p1">**</ept> of any code that seeks to get the object reference through a public API element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Application domain crossing issues</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To isolate code in managed hosting environments, it is common to generate multiple child application domains with explicit policy reducing the permission levels for various assemblies.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, the policy for those assemblies remains unchanged in the default application domain.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If one of the child application domains can force the default application domain to load an assembly, the effect of code isolation is lost and types in the forcibly loaded assembly will be able to run code at a higher level of trust.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An application domain can force another application domain to load an assembly and run code contained therein by calling a proxy to an object hosted in the other application domain.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To obtain a cross-application-domain proxy, the application domain hosting the object must distribute one through a method call parameter or return value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Or, if the application domain was just created, the creator has a proxy to the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> object by default.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Thus, to avoid breaking code isolation, an application domain with a higher level of trust should not distribute references to marshaled-by-reference objects (instances of classes derived from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>) in its domain to application domains with lower levels of trust.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Usually, the default application domain creates the child application domains with a control object in each one.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The control object manages the new application domain and occasionally takes orders from the default application domain, but it cannot actually contact the domain directly.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Occasionally, the default application domain calls its proxy to the control object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, there might be cases in which it is necessary for the control object to call back to the default application domain.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In these cases, the default application domain passes a marshal-by-reference callback object to the constructor of the control object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the control object to protect this proxy.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the control object were to place the proxy on a public static field of a public class, or otherwise publicly expose the proxy, this would open up a dangerous mechanism for other code to call back into the default application domain.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For this reason, control objects are always implicitly trusted to keep the proxy private.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Secure Coding Guidelines<ept id="p1">](../../../docs/standard/security/secure-coding-guidelines.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>