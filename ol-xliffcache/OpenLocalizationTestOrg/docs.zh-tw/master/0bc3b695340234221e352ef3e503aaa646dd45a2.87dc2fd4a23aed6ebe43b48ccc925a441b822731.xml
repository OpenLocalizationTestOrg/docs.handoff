{"content":"---\ntitle: \"Type '<typename>' cannot inherit from a type parameter\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc32055\"\n  - \"vbc32055\"\nhelpviewer_keywords: \n  - \"BC32055\"\nms.assetid: 97af7cad-6e40-41e3-892d-1fbcbd86356d\n---\n# Type '\\<typename>' cannot inherit from a type parameter\nA class or interface includes an [Inherits Statement](../../visual-basic/language-reference/statements/inherits-statement.md) specifying a generic type parameter.  \n  \n A type cannot inherit from a type that is not yet defined. Inheritance involves the ability to reuse members of the base class, which in turn requires that these members be defined. A generic type parameter is a placeholder that is to be replaced by a specific type supplied by a type argument. Therefore, a type cannot inherit from the placeholder.  \n  \n **Error ID:** BC32055  \n  \n## To correct this error  \n  \n-   If the inheriting type must inherit from another type, use a specific type instead of a type parameter.  \n  \n-   If the base type must be represented by a generic type parameter, no other type can inherit from it. Remove the [Inherits Statement](../../visual-basic/language-reference/statements/inherits-statement.md).  \n  \n## See also\n\n- [Inheritance basics (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)\n- [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n","nodes":[{"pos":[4,215],"embed":true,"restype":"x-metadata","content":"title: \"Type '<typename>' cannot inherit from a type parameter\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc32055\"\n  - \"vbc32055\"\nhelpviewer_keywords: \n  - \"BC32055\"\nms.assetid: 97af7cad-6e40-41e3-892d-1fbcbd86356d","nodes":[{"content":"Type '<typename>' cannot inherit from a type parameter","nodes":[{"pos":[0,54],"content":"Type '<ph id=\"ph1\">&lt;typename&gt;</ph>' cannot inherit from a type parameter","source":"Type '<typename>' cannot inherit from a type parameter"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[222,277],"content":"Type '\\<typename>' cannot inherit from a type parameter","linkify":"Type '\\<typename>' cannot inherit from a type parameter","nodes":[{"content":"Type '<ph id=\"ph1\">\\&lt;</ph>typename&gt;' cannot inherit from a type parameter","pos":[0,55],"source":"Type '\\<typename>' cannot inherit from a type parameter"}]},{"pos":[278,440],"content":"A class or interface includes an <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/inherits-statement.md)</ept> specifying a generic type parameter.","source":"A class or interface includes an [Inherits Statement](../../visual-basic/language-reference/statements/inherits-statement.md) specifying a generic type parameter."},{"content":"A type cannot inherit from a type that is not yet defined.","pos":[447,505]},{"content":"Inheritance involves the ability to reuse members of the base class, which in turn requires that these members be defined.","pos":[506,628]},{"content":"A generic type parameter is a placeholder that is to be replaced by a specific type supplied by a type argument.","pos":[629,741]},{"content":"Therefore, a type cannot inherit from the placeholder.","pos":[742,796]},{"pos":[803,824],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32055","source":"**Error ID:** BC32055"},{"pos":[833,854],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"If the inheriting type must inherit from another type, use a specific type instead of a type parameter.","pos":[864,967]},{"content":"If the base type must be represented by a generic type parameter, no other type can inherit from it.","pos":[977,1077]},{"content":"Remove the <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/inherits-statement.md)</ept>.","pos":[1078,1182],"source":" Remove the [Inherits Statement](../../visual-basic/language-reference/statements/inherits-statement.md)."},{"pos":[1191,1199],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1203,1337],"content":"<bpt id=\"p1\">[</bpt>Inheritance basics (Visual Basic)<ept id=\"p1\">](~/docs/visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept>","source":"[Inheritance basics (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)"},{"pos":[1340,1455],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"}]}