{"content":"---\ntitle: \"Iterator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Iterator\"\nhelpviewer_keywords: \n  - \"Iterator keyword [Visual Basic]\"\nms.assetid: 69cb0b04-ac87-49d0-bcfe-810c0d60daff\n---\n# Iterator (Visual Basic)\nSpecifies that a function or `Get` accessor is an iterator.  \n  \n## Remarks  \n An *iterator* performs a custom iteration over a collection. An iterator uses the [Yield](../../../visual-basic/language-reference/statements/yield-statement.md) statement to return each element in the collection one at a time. When a `Yield` statement is reached, the current location in code is retained. Execution is restarted from that location the next time that the iterator function is called.  \n  \n An iterator can be implemented as a function or as a `Get` accessor of a property definition. The `Iterator` modifier appears in the declaration of the iterator function or `Get` accessor.  \n  \n You call an iterator from client code by using a [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md).  \n  \n The return type of an iterator function or `Get` accessor can be <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, <xref:System.Collections.IEnumerator>, or <xref:System.Collections.Generic.IEnumerator%601>.  \n  \n An iterator cannot have any `ByRef` parameters.  \n  \n An iterator cannot occur in an event, instance constructor, static constructor, or static destructor.  \n  \n An iterator can be an anonymous function. For more information, see [Iterators](../../programming-guide/concepts/iterators.md).  \n  \n## Usage  \n The `Iterator` modifier can be used in these contexts:  \n  \n-   [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n-   [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n## Example  \n The following example demonstrates an iterator function. The iterator function has a `Yield` statement that is inside a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) loop. Each iteration of the [For Each](../../../visual-basic/language-reference/statements/for-each-next-statement.md) statement body in `Main` creates a call to the `Power` iterator function. Each call to the iterator function proceeds to the next execution of the `Yield` statement, which occurs during the next iteration of the `For…Next` loop.  \n  \n [!code-vb[VbVbalrStatements#98](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class2.vb#98)]  \n  \n## Example  \n The following example demonstrates a `Get` accessor that is an iterator. The `Iterator` modifier is in the property declaration.  \n  \n [!code-vb[VbVbalrStatements#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class2.vb#99)]  \n  \n For additional examples, see [Iterators](../../programming-guide/concepts/iterators.md).  \n  \n## See also\n\n- <xref:System.Runtime.CompilerServices.IteratorStateMachineAttribute>\n- [Iterators](../../programming-guide/concepts/iterators.md)\n- [Yield Statement](../../../visual-basic/language-reference/statements/yield-statement.md)\n","nodes":[{"pos":[4,197],"embed":true,"restype":"x-metadata","content":"title: \"Iterator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Iterator\"\nhelpviewer_keywords: \n  - \"Iterator keyword [Visual Basic]\"\nms.assetid: 69cb0b04-ac87-49d0-bcfe-810c0d60daff","nodes":[{"content":"Iterator (Visual Basic)","nodes":[{"pos":[0,23],"content":"Iterator (Visual Basic)","nodes":[{"content":"Iterator (Visual Basic)","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[204,227],"content":"Iterator (Visual Basic)","linkify":"Iterator (Visual Basic)","nodes":[{"content":"Iterator (Visual Basic)","pos":[0,23]}]},{"pos":[228,287],"content":"Specifies that a function or <ph id=\"ph1\">`Get`</ph> accessor is an iterator.","source":"Specifies that a function or `Get` accessor is an iterator."},{"pos":[296,303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An <bpt id=\"p1\">*</bpt>iterator<ept id=\"p1\">*</ept> performs a custom iteration over a collection.","pos":[307,367],"source":"An *iterator* performs a custom iteration over a collection."},{"content":"An iterator uses the <bpt id=\"p1\">[</bpt>Yield<ept id=\"p1\">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element in the collection one at a time.","pos":[368,534],"source":" An iterator uses the [Yield](../../../visual-basic/language-reference/statements/yield-statement.md) statement to return each element in the collection one at a time."},{"content":"When a <ph id=\"ph1\">`Yield`</ph> statement is reached, the current location in code is retained.","pos":[535,613],"source":" When a `Yield` statement is reached, the current location in code is retained."},{"content":"Execution is restarted from that location the next time that the iterator function is called.","pos":[614,707]},{"content":"An iterator can be implemented as a function or as a <ph id=\"ph1\">`Get`</ph> accessor of a property definition.","pos":[714,807],"source":"An iterator can be implemented as a function or as a `Get` accessor of a property definition."},{"content":"The <ph id=\"ph1\">`Iterator`</ph> modifier appears in the declaration of the iterator function or <ph id=\"ph2\">`Get`</ph> accessor.","pos":[808,902],"source":" The `Iterator` modifier appears in the declaration of the iterator function or `Get` accessor."},{"pos":[909,1066],"content":"You call an iterator from client code by using a <bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.","source":"You call an iterator from client code by using a [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)."},{"pos":[1073,1320],"content":"The return type of an iterator function or <ph id=\"ph1\">`Get`</ph> accessor can be <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.","source":"The return type of an iterator function or `Get` accessor can be <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, <xref:System.Collections.IEnumerator>, or <xref:System.Collections.Generic.IEnumerator%601>."},{"pos":[1327,1374],"content":"An iterator cannot have any <ph id=\"ph1\">`ByRef`</ph> parameters.","source":"An iterator cannot have any `ByRef` parameters."},{"content":"An iterator cannot occur in an event, instance constructor, static constructor, or static destructor.","pos":[1381,1482]},{"content":"An iterator can be an anonymous function.","pos":[1489,1530]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](../../programming-guide/concepts/iterators.md)</ept>.","pos":[1531,1616],"source":" For more information, see [Iterators](../../programming-guide/concepts/iterators.md)."},{"pos":[1625,1630],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"pos":[1634,1688],"content":"The <ph id=\"ph1\">`Iterator`</ph> modifier can be used in these contexts:","source":"The `Iterator` modifier can be used in these contexts:"},{"pos":[1698,1793],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[1803,1898],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[1907,1914],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates an iterator function.","pos":[1918,1974]},{"content":"The iterator function has a <ph id=\"ph1\">`Yield`</ph> statement that is inside a <bpt id=\"p1\">[</bpt>For…Next<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> loop.","pos":[1975,2129],"source":" The iterator function has a `Yield` statement that is inside a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) loop."},{"content":"Each iteration of the <bpt id=\"p1\">[</bpt>For Each<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> statement body in <ph id=\"ph1\">`Main`</ph> creates a call to the <ph id=\"ph2\">`Power`</ph> iterator function.","pos":[2130,2316],"source":" Each iteration of the [For Each](../../../visual-basic/language-reference/statements/for-each-next-statement.md) statement body in `Main` creates a call to the `Power` iterator function."},{"content":"Each call to the iterator function proceeds to the next execution of the <ph id=\"ph1\">`Yield`</ph> statement, which occurs during the next iteration of the <ph id=\"ph2\">`For…Next`</ph> loop.","pos":[2317,2471],"source":" Each call to the iterator function proceeds to the next execution of the `Yield` statement, which occurs during the next iteration of the `For…Next` loop."},{"pos":[2606,2613],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates a <ph id=\"ph1\">`Get`</ph> accessor that is an iterator.","pos":[2617,2689],"source":"The following example demonstrates a `Get` accessor that is an iterator."},{"content":"The <ph id=\"ph1\">`Iterator`</ph> modifier is in the property declaration.","pos":[2690,2745],"source":" The `Iterator` modifier is in the property declaration."},{"pos":[2878,2966],"content":"For additional examples, see <bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](../../programming-guide/concepts/iterators.md)</ept>.","source":"For additional examples, see [Iterators](../../programming-guide/concepts/iterators.md)."},{"pos":[2975,2983],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3058,3116],"content":"<bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](../../programming-guide/concepts/iterators.md)</ept>","source":"[Iterators](../../programming-guide/concepts/iterators.md)"},{"pos":[3119,3208],"content":"<bpt id=\"p1\">[</bpt>Yield Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept>","source":"[Yield Statement](../../../visual-basic/language-reference/statements/yield-statement.md)"}]}