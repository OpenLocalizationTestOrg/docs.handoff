{"content":"---\ntitle: \"Using Variance in Interfaces for Generic Collections (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: c867fcea-7462-4995-b9c5-542feec74036\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Using Variance in Interfaces for Generic Collections (Visual Basic)\nA covariant interface allows its methods to return more derived types than those specified in the interface. A contravariant interface allows its methods to accept parameters of less derived types than those specified in the interface.  \n  \n In .NET Framework 4, several existing interfaces became covariant and contravariant. These include <xref:System.Collections.Generic.IEnumerable%601> and <xref:System.IComparable%601>. This enables you to reuse methods that operate with generic collections of base types for collections of derived types.  \n  \n For a list of variant interfaces in the .NET Framework, see [Variance in Generic Interfaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md).  \n  \n## Converting Generic Collections  \n The following example illustrates the benefits of covariance support in the <xref:System.Collections.Generic.IEnumerable%601> interface. The `PrintFullName` method accepts a collection of the `IEnumerable(Of Person)` type as a parameter. However, you can reuse it for a collection of the `IEnumerable(Of Person)` type because `Employee` inherits `Person`.  \n  \n```vb  \n' Simple hierarchy of classes.  \nPublic Class Person  \n    Public Property FirstName As String  \n    Public Property LastName As String  \nEnd Class  \n  \nPublic Class Employee  \n    Inherits Person  \nEnd Class  \n  \n' The method has a parameter of the IEnumerable(Of Person) type.  \nPublic Sub PrintFullName(ByVal persons As IEnumerable(Of Person))  \n    For Each person As Person In persons  \n        Console.WriteLine(  \n            \"Name: \" & person.FirstName & \" \" & person.LastName)  \n    Next  \nEnd Sub  \n  \nSub Main()  \n    Dim employees As IEnumerable(Of Employee) = New List(Of Employee)  \n  \n    ' You can pass IEnumerable(Of Employee),   \n    ' although the method expects IEnumerable(Of Person).  \n  \n    PrintFullName(employees)  \n  \nEnd Sub  \n```  \n  \n## Comparing Generic Collections  \n The following example illustrates the benefits of contravariance support in the <xref:System.Collections.Generic.IComparer%601> interface. The `PersonComparer` class implements the `IComparer(Of Person)` interface. However, you can reuse this class to compare a sequence of objects of the `Employee` type because `Employee` inherits `Person`.  \n  \n```vb  \n' Simple hierarhcy of classes.  \nPublic Class Person  \n    Public Property FirstName As String  \n    Public Property LastName As String  \nEnd Class  \n  \nPublic Class Employee  \n    Inherits Person  \nEnd Class  \n' The custom comparer for the Person type  \n' with standard implementations of Equals()  \n' and GetHashCode() methods.  \nClass PersonComparer  \n    Implements IEqualityComparer(Of Person)  \n  \n    Public Function Equals1(  \n        ByVal x As Person,  \n        ByVal y As Person) As Boolean _  \n        Implements IEqualityComparer(Of Person).Equals  \n  \n        If x Is y Then Return True  \n        If x Is Nothing OrElse y Is Nothing Then Return False  \n        Return (x.FirstName = y.FirstName) AndAlso  \n            (x.LastName = y.LastName)  \n    End Function  \n    Public Function GetHashCode1(  \n        ByVal person As Person) As Integer _  \n        Implements IEqualityComparer(Of Person).GetHashCode  \n  \n        If person Is Nothing Then Return 0  \n        Dim hashFirstName =  \n            If(person.FirstName Is Nothing,  \n            0, person.FirstName.GetHashCode())  \n        Dim hashLastName = person.LastName.GetHashCode()  \n        Return hashFirstName Xor hashLastName  \n    End Function  \nEnd Class  \n  \nSub Main()  \n    Dim employees = New List(Of Employee) From {  \n        New Employee With {.FirstName = \"Michael\", .LastName = \"Alexander\"},  \n        New Employee With {.FirstName = \"Jeff\", .LastName = \"Price\"}  \n    }  \n  \n    ' You can pass PersonComparer,   \n    ' which implements IEqualityComparer(Of Person),  \n    ' although the method expects IEqualityComparer(Of Employee)  \n  \n    Dim noduplicates As IEnumerable(Of Employee) = employees.Distinct(New PersonComparer())  \n  \n    For Each employee In noduplicates  \n        Console.WriteLine(employee.FirstName & \" \" & employee.LastName)  \n    Next  \nEnd Sub  \n```  \n  \n## See Also  \n [Variance in Generic Interfaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)","nodes":[{"pos":[12,96],"content":"Using Variance in Interfaces for Generic Collections (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Variance in Interfaces for Generic Collections (Visual Basic) | Microsoft Docs","pos":[0,84]}]},{"pos":[477,544],"content":"Using Variance in Interfaces for Generic Collections (Visual Basic)","linkify":"Using Variance in Interfaces for Generic Collections (Visual Basic)","nodes":[{"content":"Using Variance in Interfaces for Generic Collections (Visual Basic)","pos":[0,67]}]},{"content":"A covariant interface allows its methods to return more derived types than those specified in the interface.","pos":[545,653]},{"content":"A contravariant interface allows its methods to accept parameters of less derived types than those specified in the interface.","pos":[654,780]},{"content":"In .NET Framework 4, several existing interfaces became covariant and contravariant.","pos":[787,871]},{"content":"These include <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph>.","pos":[872,970],"source":" These include <xref:System.Collections.Generic.IEnumerable%601> and <xref:System.IComparable%601>."},{"content":"This enables you to reuse methods that operate with generic collections of base types for collections of derived types.","pos":[971,1090]},{"pos":[1097,1318],"content":"For a list of variant interfaces in the .NET Framework, see <bpt id=\"p1\">[</bpt>Variance in Generic Interfaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept>.","source":"For a list of variant interfaces in the .NET Framework, see [Variance in Generic Interfaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)."},{"pos":[1327,1357],"content":"Converting Generic Collections","linkify":"Converting Generic Collections","nodes":[{"content":"Converting Generic Collections","pos":[0,30]}]},{"content":"The following example illustrates the benefits of covariance support in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.","pos":[1361,1497],"source":"The following example illustrates the benefits of covariance support in the <xref:System.Collections.Generic.IEnumerable%601> interface."},{"content":"The <ph id=\"ph1\">`PrintFullName`</ph> method accepts a collection of the <ph id=\"ph2\">`IEnumerable(Of Person)`</ph> type as a parameter.","pos":[1498,1598],"source":" The `PrintFullName` method accepts a collection of the `IEnumerable(Of Person)` type as a parameter."},{"content":"However, you can reuse it for a collection of the <ph id=\"ph1\">`IEnumerable(Of Person)`</ph> type because <ph id=\"ph2\">`Employee`</ph> inherits <ph id=\"ph3\">`Person`</ph>.","pos":[1599,1716],"source":" However, you can reuse it for a collection of the `IEnumerable(Of Person)` type because `Employee` inherits `Person`."},{"pos":[2497,2526],"content":"Comparing Generic Collections","linkify":"Comparing Generic Collections","nodes":[{"content":"Comparing Generic Collections","pos":[0,29]}]},{"content":"The following example illustrates the benefits of contravariance support in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface.","pos":[2530,2668],"source":"The following example illustrates the benefits of contravariance support in the <xref:System.Collections.Generic.IComparer%601> interface."},{"content":"The <ph id=\"ph1\">`PersonComparer`</ph> class implements the <ph id=\"ph2\">`IComparer(Of Person)`</ph> interface.","pos":[2669,2744],"source":" The `PersonComparer` class implements the `IComparer(Of Person)` interface."},{"content":"However, you can reuse this class to compare a sequence of objects of the <ph id=\"ph1\">`Employee`</ph> type because <ph id=\"ph2\">`Employee`</ph> inherits <ph id=\"ph3\">`Person`</ph>.","pos":[2745,2872],"source":" However, you can reuse this class to compare a sequence of objects of the `Employee` type because `Employee` inherits `Person`."},{"pos":[4756,4764],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4768,4928],"content":"<bpt id=\"p1\">[</bpt>Variance in Generic Interfaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept>","source":"[Variance in Generic Interfaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)"}]}