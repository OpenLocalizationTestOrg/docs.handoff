{"content":"---\ntitle: \"How to: Call WCF Service Operations Asynchronously\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 0face17f-43ca-417b-9b33-737c0fc360df\n---\n# How to: Call WCF Service Operations Asynchronously\nThis topic covers how a client can access a service operation asynchronously. The service in this topic implements the `ICalculator` interface. The client can call the operations on this interface asynchronously by using the event-driven asynchronous calling model. (For more information about the event-based asynchronous calling model, see [Multithreaded Programming with the Event-based Asynchronous Pattern](https://go.microsoft.com/fwlink/?LinkId=248184)). For an example that shows how to implement an operation asynchronously in a service, see [How to: Implement an Asynchronous Service Operation](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md). For more information about synchronous and asynchronous operations, see [Synchronous and Asynchronous Operations](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md).  \n  \n> [!NOTE]\n>  The event-driven asynchronous calling model is not supported when using a <xref:System.ServiceModel.ChannelFactory%601>. For information about making asynchronous calls using the <xref:System.ServiceModel.ChannelFactory%601>, see [How to: Call Operations Asynchronously Using a Channel Factory](../../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md).  \n  \n## Procedure  \n  \n#### To call WCF service operations asynchronously  \n  \n1.  Run the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool with both the `/async` and the `/tcv:Version35` command options together as shown in the following command.  \n  \n    ```  \n    svcutil /n:http://Microsoft.ServiceModel.Samples,Microsoft.ServiceModel.Samples http://localhost:8000/servicemodelsamples/service/mex /a /tcv:Version35  \n    ```  \n  \n     This generates, in addition to the synchronous and standard delegate-based asynchronous operations, a WCF client class that contains:  \n  \n    -   Two <`operationName`>`Async` operations for use with the event-based asynchronous calling approach. For example:  \n  \n         [!code-csharp[EventAsync#1](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/generatedclient.cs#1)]\n         [!code-vb[EventAsync#1](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/generatedclient.vb#1)]  \n  \n    -   Operation completed events of the form <`operationName`>`Completed` for use with the event-based asynchronous calling approach. For example:  \n  \n         [!code-csharp[EventAsync#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/generatedclient.cs#2)]\n         [!code-vb[EventAsync#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/generatedclient.vb#2)]  \n  \n    -   <xref:System.EventArgs?displayProperty=nameWithType> types for each operation (of the form <`operationName`>`CompletedEventArgs`) for use with the event-based asynchronous calling approach. For example:  \n  \n         [!code-csharp[EventAsync#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/generatedclient.cs#3)]\n         [!code-vb[EventAsync#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/generatedclient.vb#3)]  \n  \n2.  In the calling application, create a callback method to be called when the asynchronous operation is complete, as shown in the following sample code.  \n  \n     [!code-csharp[EventAsync#4](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/client.cs#4)]\n     [!code-vb[EventAsync#4](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/client.vb#4)]  \n  \n3.  Prior to calling the operation, use a new generic <xref:System.EventHandler%601?displayProperty=nameWithType> of type <`operationName`>`EventArgs` to add the handler method (created in the preceding step) to the <`operationName`>`Completed` event. Then call the <`operationName`>`Async` method. For example:  \n  \n     [!code-csharp[EventAsync#5](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/client.cs#5)]\n     [!code-vb[EventAsync#5](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/client.vb#5)]  \n  \n## Example  \n  \n> [!NOTE]\n>  The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the `Result` property and the others are returned as properties on the <xref:System.EventArgs> object. One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <xref:System.EventArgs> object returns one value as the `Result` property and the remainder are properties of the <xref:System.EventArgs> object.If you want to receive the message object as the `Result` property and have the returned values as properties on that object, use the `/messageContract` command option. This generates a signature that returns the response message as the `Result` property on the <xref:System.EventArgs> object. All internal return values are then properties of the response message object.  \n  \n [!code-csharp[EventAsync#6](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/client.cs#6)]\n [!code-vb[EventAsync#6](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/client.vb#6)]  \n  \n## See also\n\n- [How to: Implement an Asynchronous Service Operation](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)\n","nodes":[{"pos":[4,168],"embed":true,"restype":"x-metadata","content":"title: \"How to: Call WCF Service Operations Asynchronously\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 0face17f-43ca-417b-9b33-737c0fc360df","nodes":[{"content":"How to: Call WCF Service Operations Asynchronously","nodes":[{"pos":[0,50],"content":"How to: Call WCF Service Operations Asynchronously","nodes":[{"content":"How to: Call WCF Service Operations Asynchronously","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[175,225],"content":"How to: Call WCF Service Operations Asynchronously","linkify":"How to: Call WCF Service Operations Asynchronously","nodes":[{"content":"How to: Call WCF Service Operations Asynchronously","pos":[0,50]}]},{"content":"This topic covers how a client can access a service operation asynchronously.","pos":[226,303]},{"content":"The service in this topic implements the <ph id=\"ph1\">`ICalculator`</ph> interface.","pos":[304,369],"source":" The service in this topic implements the `ICalculator` interface."},{"content":"The client can call the operations on this interface asynchronously by using the event-driven asynchronous calling model.","pos":[370,491]},{"content":"(For more information about the event-based asynchronous calling model, see <bpt id=\"p1\">[</bpt>Multithreaded Programming with the Event-based Asynchronous Pattern<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=248184)</ept>).","pos":[492,687],"source":" (For more information about the event-based asynchronous calling model, see [Multithreaded Programming with the Event-based Asynchronous Pattern](https://go.microsoft.com/fwlink/?LinkId=248184))."},{"content":"For an example that shows how to implement an operation asynchronously in a service, see <bpt id=\"p1\">[</bpt>How to: Implement an Asynchronous Service Operation<ept id=\"p1\">](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept>.","pos":[688,917],"source":" For an example that shows how to implement an operation asynchronously in a service, see [How to: Implement an Asynchronous Service Operation](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)."},{"content":"For more information about synchronous and asynchronous operations, see <bpt id=\"p1\">[</bpt>Synchronous and Asynchronous Operations<ept id=\"p1\">](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)</ept>.","pos":[918,1107],"source":" For more information about synchronous and asynchronous operations, see [Synchronous and Asynchronous Operations](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)."},{"pos":[1115,1534],"content":"[!NOTE]\n The event-driven asynchronous calling model is not supported when using a <xref:System.ServiceModel.ChannelFactory%601>. For information about making asynchronous calls using the <xref:System.ServiceModel.ChannelFactory%601>, see [How to: Call Operations Asynchronously Using a Channel Factory](../../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md).","leadings":["","> "],"nodes":[{"content":"The event-driven asynchronous calling model is not supported when using a <xref:System.ServiceModel.ChannelFactory%601>. For information about making asynchronous calls using the <xref:System.ServiceModel.ChannelFactory%601>, see [How to: Call Operations Asynchronously Using a Channel Factory](../../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md).","pos":[9,417],"nodes":[{"content":"The event-driven asynchronous calling model is not supported when using a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>.","pos":[0,120],"source":"The event-driven asynchronous calling model is not supported when using a <xref:System.ServiceModel.ChannelFactory%601>."},{"content":"For information about making asynchronous calls using the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>, see <bpt id=\"p1\">[</bpt>How to: Call Operations Asynchronously Using a Channel Factory<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md)</ept>.","pos":[121,408],"source":" For information about making asynchronous calls using the <xref:System.ServiceModel.ChannelFactory%601>, see [How to: Call Operations Asynchronously Using a Channel Factory](../../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md)."}]}]},{"pos":[1543,1552],"content":"Procedure","linkify":"Procedure","nodes":[{"content":"Procedure","pos":[0,9]}]},{"pos":[1563,1608],"content":"To call WCF service operations asynchronously","linkify":"To call WCF service operations asynchronously","nodes":[{"content":"To call WCF service operations asynchronously","pos":[0,45]}]},{"pos":[1618,1871],"content":"Run the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool with both the <ph id=\"ph1\">`/async`</ph> and the <ph id=\"ph2\">`/tcv:Version35`</ph> command options together as shown in the following command.","source":"Run the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool with both the `/async` and the `/tcv:Version35` command options together as shown in the following command."},{"content":"This generates, in addition to the synchronous and standard delegate-based asynchronous operations, a WCF client class that contains:","pos":[2063,2196]},{"content":"Two &lt;<ph id=\"ph1\">`operationName`</ph><ph id=\"ph2\">&gt;</ph><ph id=\"ph3\">`Async`</ph> operations for use with the event-based asynchronous calling approach.","pos":[2210,2309],"source":"Two <`operationName`>`Async` operations for use with the event-based asynchronous calling approach."},{"content":"For example:","pos":[2310,2322]},{"pos":[2337,2580],"content":"[!code-csharp[EventAsync#1](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/generatedclient.cs#1)]\n [!code-vb[EventAsync#1](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/generatedclient.vb#1)]","leadings":["","        "],"nodes":[]},{"content":"Operation completed events of the form &lt;<ph id=\"ph1\">`operationName`</ph><ph id=\"ph2\">&gt;</ph><ph id=\"ph3\">`Completed`</ph> for use with the event-based asynchronous calling approach.","pos":[2594,2721],"source":"Operation completed events of the form <`operationName`>`Completed` for use with the event-based asynchronous calling approach."},{"content":"For example:","pos":[2722,2734]},{"pos":[2749,2992],"content":"[!code-csharp[EventAsync#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/generatedclient.cs#2)]\n [!code-vb[EventAsync#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/generatedclient.vb#2)]","leadings":["","        "],"nodes":[]},{"content":"<ph id=\"ph1\">&lt;xref:System.EventArgs?displayProperty=nameWithType&gt;</ph> types for each operation (of the form &lt;<ph id=\"ph2\">`operationName`</ph><ph id=\"ph3\">&gt;</ph><ph id=\"ph4\">`CompletedEventArgs`</ph>) for use with the event-based asynchronous calling approach.","pos":[3006,3195],"source":"<xref:System.EventArgs?displayProperty=nameWithType> types for each operation (of the form <`operationName`>`CompletedEventArgs`) for use with the event-based asynchronous calling approach."},{"content":"For example:","pos":[3196,3208]},{"pos":[3223,3466],"content":"[!code-csharp[EventAsync#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/generatedclient.cs#3)]\n [!code-vb[EventAsync#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/generatedclient.vb#3)]","leadings":["","        "],"nodes":[]},{"content":"In the calling application, create a callback method to be called when the asynchronous operation is complete, as shown in the following sample code.","pos":[3476,3625]},{"pos":[3636,3857],"content":"[!code-csharp[EventAsync#4](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/client.cs#4)]\n [!code-vb[EventAsync#4](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/client.vb#4)]","leadings":["","    "],"nodes":[]},{"content":"Prior to calling the operation, use a new generic <ph id=\"ph1\">&lt;xref:System.EventHandler%601?displayProperty=nameWithType&gt;</ph> of type &lt;<ph id=\"ph2\">`operationName`</ph><ph id=\"ph3\">&gt;</ph><ph id=\"ph4\">`EventArgs`</ph> to add the handler method (created in the preceding step) to the &lt;<ph id=\"ph5\">`operationName`</ph><ph id=\"ph6\">&gt;</ph><ph id=\"ph7\">`Completed`</ph> event.","pos":[3867,4114],"source":"Prior to calling the operation, use a new generic <xref:System.EventHandler%601?displayProperty=nameWithType> of type <`operationName`>`EventArgs` to add the handler method (created in the preceding step) to the <`operationName`>`Completed` event."},{"content":"Then call the &lt;<ph id=\"ph1\">`operationName`</ph><ph id=\"ph2\">&gt;</ph><ph id=\"ph3\">`Async`</ph> method.","pos":[4115,4161],"source":" Then call the <`operationName`>`Async` method."},{"content":"For example:","pos":[4162,4174]},{"pos":[4185,4406],"content":"[!code-csharp[EventAsync#5](../../../../samples/snippets/csharp/VS_Snippets_CFX/eventasync/cs/client.cs#5)]\n [!code-vb[EventAsync#5](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/eventasync/vb/client.vb#5)]","leadings":["","    "],"nodes":[]},{"pos":[4415,4422],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4430,5360],"content":"[!NOTE]\n The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the `Result` property and the others are returned as properties on the <xref:System.EventArgs> object. One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <xref:System.EventArgs> object returns one value as the `Result` property and the remainder are properties of the <xref:System.EventArgs> object.If you want to receive the message object as the `Result` property and have the returned values as properties on that object, use the `/messageContract` command option. This generates a signature that returns the response message as the `Result` property on the <xref:System.EventArgs> object. All internal return values are then properties of the response message object.","leadings":["","> "],"nodes":[{"content":"The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the `Result` property and the others are returned as properties on the <xref:System.EventArgs> object. One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <xref:System.EventArgs> object returns one value as the `Result` property and the remainder are properties of the <xref:System.EventArgs> object.If you want to receive the message object as the `Result` property and have the returned values as properties on that object, use the `/messageContract` command option. This generates a signature that returns the response message as the `Result` property on the <xref:System.EventArgs> object. All internal return values are then properties of the response message object.","pos":[9,928],"nodes":[{"content":"The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the <ph id=\"ph1\">`Result`</ph> property and the others are returned as properties on the <ph id=\"ph2\">&lt;xref:System.EventArgs&gt;</ph> object.","pos":[0,235],"source":"The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the `Result` property and the others are returned as properties on the <xref:System.EventArgs> object."},{"content":"One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <ph id=\"ph1\">&lt;xref:System.EventArgs&gt;</ph> object returns one value as the <ph id=\"ph2\">`Result`</ph> property and the remainder are properties of the <ph id=\"ph3\">&lt;xref:System.EventArgs&gt;</ph> object.If you want to receive the message object as the <ph id=\"ph4\">`Result`</ph> property and have the returned values as properties on that object, use the <ph id=\"ph5\">`/messageContract`</ph> command option.","pos":[236,715],"source":" One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <xref:System.EventArgs> object returns one value as the `Result` property and the remainder are properties of the <xref:System.EventArgs> object.If you want to receive the message object as the `Result` property and have the returned values as properties on that object, use the `/messageContract` command option."},{"content":"This generates a signature that returns the response message as the <ph id=\"ph1\">`Result`</ph> property on the <ph id=\"ph2\">&lt;xref:System.EventArgs&gt;</ph> object.","pos":[716,840],"source":" This generates a signature that returns the response message as the `Result` property on the <xref:System.EventArgs> object."},{"content":"All internal return values are then properties of the response message object.","pos":[841,919]}]}]},{"pos":[5593,5601],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5605,5744],"content":"<bpt id=\"p1\">[</bpt>How to: Implement an Asynchronous Service Operation<ept id=\"p1\">](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept>","source":"[How to: Implement an Asynchronous Service Operation](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)"}]}