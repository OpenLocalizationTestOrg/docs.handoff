<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="structured-navigation-overview.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5ad682ce5bcdd57a84efa6cd87b693cda26ccc4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\structured-navigation-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa3d28e25977961e29297932243cd41ffb3b7d2a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e7adf3aa36395700e3317b7aae0baf8d8eef2a8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Structured Navigation Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Structured Navigation Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Content that can be hosted by an <ph id="ph1">[!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)]</ph>, a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>, or a <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> is composed of pages that can be identified by pack <ph id="ph4">[!INCLUDE[TLA#tla_uri#plural](../../../../includes/tlasharptla-urisharpplural-md.md)]</ph> and navigated to by hyperlinks.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The structure of pages and the ways in which they can be navigated, as defined by hyperlinks, is known as a navigation topology.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Such a topology suits a variety of application types, particularly those that navigate through documents.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For such applications, the user can navigate from one page to another page without either page needing to know anything about the other.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, other types of applications have pages that do need to know when they have been navigated between.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, consider a human resources application that has one page to list all the employees in an organizationâ€”the "List Employees" page.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This page could also allow users to add a new employee by clicking a hyperlink.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When clicked, the page navigates to an "Add an Employee" page to gather the new employee's details and return them to the "List Employees" page to create the new employee and update the list.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This style of navigation is similar to calling a method to perform some processing and return a value, which is known as structured programming.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As such, this style of navigation is known as <bpt id="p1">*</bpt>structured navigation<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> class doesn't implement support for structured navigation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> and extends it with the basic constructs required for structured navigation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This topic shows how to establish structured navigation using <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Structured Navigation</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When one page calls another page in a structured navigation, some or all of the following behaviors are required:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The calling page navigates to the called page, optionally passing parameters required by the called page.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The called page, when a user has completed using the calling page, returns specifically to the calling page, optionally:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returning state information that describes how the calling page was completed (for example, whether a user pressed an OK button or a Cancel button).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returning that data that was collected from the user (for example, new employee details).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When the calling page returns to the called page, the called page is removed from navigation history to isolate one instance of a called page from another.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These behaviors are illustrated by the following figure.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Flow between calling page and called page<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/structurednavigationoverviewfigure1.png "</bpt>StructuredNavigationOverviewFigure1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can implement these behaviors by using a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> as the called page.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Structured Navigation with PageFunction</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This topic shows how to implement the basic mechanics of structured navigation involving a single <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this sample, a <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> calls a <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> to get a <ph id="ph3">&lt;xref:System.String&gt;</ph> value from the user and return it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creating a Calling Page</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The page that calls a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> can be either a <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this example, it is a <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CallingPageDefaultMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml#callingpagedefaultmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CallingPageDefaultMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml#callingpagedefaultmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CallingPageDefaultCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml.cs#callingpagedefaultcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CallingPageDefaultCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CallingPage.xaml.vb#callingpagedefaultcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CallingPageDefaultCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml.cs#callingpagedefaultcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CallingPageDefaultCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CallingPage.xaml.vb#callingpagedefaultcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CallingPageDefaultCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml.cs#callingpagedefaultcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CallingPageDefaultCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CallingPage.xaml.vb#callingpagedefaultcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Creating a Page Function to Call</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because the calling page can use the called page to collect and return data from the user, <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> is implemented as a generic class whose type argument specifies the type of the value that the called page will return.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following code shows the initial implementation of the called page, using a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>, which returns a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CalledPageFunctionMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml#calledpagefunctionmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CalledPageFunctionCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml.cs#calledpagefunctioncodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CalledPageFunctionCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CalledPageFunction.xaml.vb#calledpagefunctioncodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CalledPageFunctionCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml.cs#calledpagefunctioncodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#CalledPageFunctionCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CalledPageFunction.xaml.vb#calledpagefunctioncodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The declaration of a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> is similar to the declaration of a <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> with the addition of the type arguments.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>As you can see from the code example, the type arguments are specified in both <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup, using the <ph id="ph2">`x:TypeArguments`</ph> attribute, and code-behind, using standard generic type argument syntax.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You don't have to use only <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> classes as type arguments.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> could be called to gather domain-specific data that is abstracted as a custom type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following code shows how to use a custom type as a type argument for a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypeCODE1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/CSharp/CustomType.cs#customtypecode1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypeCODE1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/VisualBasic/CustomType.vb#customtypecode1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypeCODE2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/CSharp/CustomType.cs#customtypecode2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypeCODE2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/VisualBasic/CustomType.vb#customtypecode2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypePageFunctionMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/CSharp/CustomTypePageFunction.xaml#customtypepagefunctionmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypePageFunctionMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/CSharp/CustomTypePageFunction.xaml#customtypepagefunctionmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypePageFunctionCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/CSharp/CustomTypePageFunction.xaml.cs#customtypepagefunctioncodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypePageFunctionCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/VisualBasic/CustomTypePageFunction.xaml.vb#customtypepagefunctioncodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypePageFunctionCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/CSharp/CustomTypePageFunction.xaml.cs#customtypepagefunctioncodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CustomTypePageFunctionSnippets#CustomTypePageFunctionCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/CustomTypePageFunctionSnippets/VisualBasic/CustomTypePageFunction.xaml.vb#customtypepagefunctioncodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The type arguments for the <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> provide the foundation for the communication between a calling page and the called page, which are discussed in the following sections.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>As you'll see, the type that is identified with the declaration of a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> plays an important role in returning data from a <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> to the calling page.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Calling a PageFunction and Passing Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To call a page, the calling page must instantiate the called page and navigate to it using the <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.Navigate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This allows the calling page to pass initial data to the called page, such as default values for the data being gathered by the called page.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following code shows the called page with a non-default constructor to accept parameters from the calling page.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#AcceptsInitialDataCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml.cs#acceptsinitialdatacodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#AcceptsInitialDataCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CalledPageFunction.xaml.vb#acceptsinitialdatacodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#AcceptsInitialDataCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml.cs#acceptsinitialdatacodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#AcceptsInitialDataCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CalledPageFunction.xaml.vb#acceptsinitialdatacodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#AcceptsInitialDataCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml.cs#acceptsinitialdatacodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#AcceptsInitialDataCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CalledPageFunction.xaml.vb#acceptsinitialdatacodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#AcceptsInitialDataCODEBEHIND4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml.cs#acceptsinitialdatacodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#AcceptsInitialDataCODEBEHIND4<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CalledPageFunction.xaml.vb#acceptsinitialdatacodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following code shows the calling page handling the <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink.Click&gt;</ph> event of the <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> to instantiate the called page and pass it an initial string value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#PassingDataMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml#passingdatamarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#PassingDataCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml.cs#passingdatacodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#PassingDataCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CallingPage.xaml.vb#passingdatacodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#PassingDataCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml.cs#passingdatacodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#PassingDataCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CallingPage.xaml.vb#passingdatacodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#PassingDataCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml.cs#passingdatacodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#PassingDataCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CallingPage.xaml.vb#passingdatacodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You are not required to pass parameters to the called page.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Instead, you could do the following:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>From the calling page:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Instantiate the called                                          <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> using the default constructor.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Store the parameters in                                          <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Navigate to the called                                          <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>From the called                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Retrieve and use the parameters stored in                                          <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>But, as you'll see shortly, you'll still need use code to instantiate and navigate to the called page to collect the data returned by the called page.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For this reason, the <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> needs to be kept alive; otherwise, the next time you navigate to the <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>, <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> instantiates the <ph id="ph4">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> using the default constructor.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Before the called page can return, however, it needs to return data that can be retrieved by the calling page.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returning Task Result and Task Data from a Task to a Calling Page</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Once the user has finished using the called page, signified in this example by pressing either the OK or Cancel buttons, the called page needs to return.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Since the calling page used the called page to collect data from the user, the calling page requires two types of information:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Whether the user canceled the called page (by pressing either the OK button or the Cancel button in this example).</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This allows the calling page to determine whether to process the data that the calling page gathered from the user.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The data that was provided by the user.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To return information,                          <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> implements the                          <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601.OnReturn%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following code shows how to call it.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#ReturnCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml.cs#returncodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#ReturnCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CalledPageFunction.xaml.vb#returncodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#ReturnCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CalledPageFunction.xaml.cs#returncodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#ReturnCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CalledPageFunction.xaml.vb#returncodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In this example, if a user presses the Cancel button, a value of <ph id="ph1">`null`</ph> is returned to the calling page.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the OK button is pressed instead, the string value provided by the user is returned.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601.OnReturn%2A&gt;</ph> is a <ph id="ph2">`protected``virtual`</ph> method that you call to return your data to the calling page.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Your data needs to be packaged in an instance of the generic <ph id="ph1">&lt;xref:System.Windows.Navigation.ReturnEventArgs%601&gt;</ph> type, whose type argument specifies the type of value that <ph id="ph2">&lt;xref:System.Windows.Navigation.ReturnEventArgs%601.Result%2A&gt;</ph> returns.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In this way, when you declare a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> with a particular type argument, you are stating that a <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> will return an instance of the type that is specified by the type argument.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In this example, the type argument and, consequently, the return value is of type <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601.OnReturn%2A&gt;</ph> is called, the calling page needs some way of receiving the return value of the <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For this reason, <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601.Return&gt;</ph> event for calling pages to handle.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601.OnReturn%2A&gt;</ph> is called, <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601.Return&gt;</ph> is raised, so the calling page can register with <ph id="ph3">&lt;xref:System.Windows.Navigation.PageFunction%601.Return&gt;</ph> to receive the notification.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#ProcessResultCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml.cs#processresultcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#ProcessResultCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CallingPage.xaml.vb#processresultcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#ProcessResultCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StructuredNavigationSample/CSharp/CallingPage.xaml.cs#processresultcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StructuredNavigationSample#ProcessResultCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StructuredNavigationSample/VisualBasic/CallingPage.xaml.vb#processresultcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Removing Task Pages When a Task Completes</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>When a called page returns, and the user didn't cancel the called page, the calling page will process the data that was provided by the user and also returned from the called page.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Data acquisition in this way is usually an isolated activity; when the called page returns, the calling page needs to create and navigate to a new calling page to capture more data.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>However, unless a called page is removed from the journal, a user will be able to navigate back to a previous instance of the calling page.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Whether a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> is retained in the journal is determined by the <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunctionBase.RemoveFromJournal%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>By default, a page function is automatically removed when <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601.OnReturn%2A&gt;</ph> is called because <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunctionBase.RemoveFromJournal%2A&gt;</ph> is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>To keep a page function in navigation history after <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601.OnReturn%2A&gt;</ph> is called, set <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunctionBase.RemoveFromJournal%2A&gt;</ph> to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Other Types of Structured Navigation</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This topic illustrates the most basic use of a <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> to support call/return structured navigation.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This foundation provides you with the ability to create more complex types of structured navigation.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For example, sometimes multiple pages are required by a calling page to gather enough data from a user or to perform a task.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The use of multiple pages is referred to as a "wizard".</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In other cases, applications may have complex navigation topologies that depend on structured navigation to operate effectively.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Navigation Topologies Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-topologies-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Navigation Topologies Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-topologies-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>