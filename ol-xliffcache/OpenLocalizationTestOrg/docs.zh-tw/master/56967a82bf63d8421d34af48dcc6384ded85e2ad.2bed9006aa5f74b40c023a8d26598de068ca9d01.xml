{"content":"---\ntitle: \"LINQ and File Directories (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 159fd5c3-3926-4071-ae78-d8e423287eb7\n---\n# LINQ and File Directories (Visual Basic)\nMany file system operations are essentially queries and are therefore well-suited to the LINQ approach.  \n  \n Note that the queries in this section are non-destructive. They are not used to change the contents of the original files or folders. This follows the rule that queries should not cause any side-effects. In general, any code (including queries that perform create / update / delete operators) that modifies source data should be kept separate from the code that just queries the data.  \n  \n This section contains the following topics:  \n  \n [How to: Query for Files with a Specified Attribute or Name (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-files-with-a-specified-attribute-or-name.md)  \n Shows how to search for files by examining one or more properties of its <xref:System.IO.FileInfo> object.  \n  \n [How to: Group Files by Extension (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md)  \n Shows how to return groups of <xref:System.IO.FileInfo> object based on their file name extension.  \n  \n [How to: Query for the Total Number of Bytes in a Set of Folders (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-the-total-number-of-bytes-in-a-set-of-folders.md)  \n Shows how to return the total number of bytes in all the files in a specified directory tree.  \n  \n [How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md)s  \n Shows how to return all the files that are present in two specified folders, and also all the files that are present in one folder but not the other.  \n  \n [How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-the-largest-file-or-files-in-a-directory-tree.md)  \n Shows how to return the largest or smallest file, or a specified number of files, in a directory tree.  \n  \n [How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md)  \n Shows how to group for all file names that occur in more than one location in a specified directory tree. Also shows how to perform more complex comparisons based on a custom comparer.  \n  \n [How to: Query the Contents of Files in a Folder (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-the-contents-of-files-in-a-folder-linq.md)  \n Shows how to iterate through folders in a tree, open each file, and query the file's contents.  \n  \n## Comments  \n There is some complexity involved in creating a data source that accurately represents the contents of the file system and handles exceptions gracefully. The examples in this section create a snapshot collection of <xref:System.IO.FileInfo> objects that represents all the files under a specified root folder and all its subfolders. The actual state of each <xref:System.IO.FileInfo> may change in the time between when you begin and end executing a query. For example, you can create a list of <xref:System.IO.FileInfo> objects to use as a data source. If you try to access the `Length` property in a query, the <xref:System.IO.FileInfo> object will try to access the file system to update the value of `Length`. If the file no longer exists, you will get a <xref:System.IO.FileNotFoundException> in your query, even though you are not querying the file system directly. Some queries in this section use a separate method that consumes these particular exceptions in certain cases. Another option is to keep your data source updated dynamically by using the <xref:System.IO.FileSystemWatcher>.  \n  \n## See also\n\n- [LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)\n","nodes":[{"pos":[4,122],"embed":true,"restype":"x-metadata","content":"title: \"LINQ and File Directories (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 159fd5c3-3926-4071-ae78-d8e423287eb7","nodes":[{"content":"LINQ and File Directories (Visual Basic)","nodes":[{"pos":[0,40],"content":"LINQ and File Directories (Visual Basic)","nodes":[{"content":"LINQ and File Directories (Visual Basic)","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[129,169],"content":"LINQ and File Directories (Visual Basic)","linkify":"LINQ and File Directories (Visual Basic)","nodes":[{"content":"LINQ and File Directories (Visual Basic)","pos":[0,40]}]},{"content":"Many file system operations are essentially queries and are therefore well-suited to the LINQ approach.","pos":[170,273]},{"content":"Note that the queries in this section are non-destructive.","pos":[280,338]},{"content":"They are not used to change the contents of the original files or folders.","pos":[339,413]},{"content":"This follows the rule that queries should not cause any side-effects.","pos":[414,483]},{"content":"In general, any code (including queries that perform create / update / delete operators) that modifies source data should be kept separate from the code that just queries the data.","pos":[484,664]},{"content":"This section contains the following topics:","pos":[671,714]},{"content":"<bpt id=\"p1\">[</bpt>How to: Query for Files with a Specified Attribute or Name (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-files-with-a-specified-attribute-or-name.md)</ept>","pos":[721,915],"source":"[How to: Query for Files with a Specified Attribute or Name (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-files-with-a-specified-attribute-or-name.md)"},{"content":"Shows how to search for files by examining one or more properties of its <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> object.","pos":[919,1025],"source":"Shows how to search for files by examining one or more properties of its <xref:System.IO.FileInfo> object."},{"content":"<bpt id=\"p1\">[</bpt>How to: Group Files by Extension (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md)</ept>","pos":[1032,1186],"source":"[How to: Group Files by Extension (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md)"},{"content":"Shows how to return groups of <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> object based on their file name extension.","pos":[1190,1288],"source":"Shows how to return groups of <xref:System.IO.FileInfo> object based on their file name extension."},{"content":"<bpt id=\"p1\">[</bpt>How to: Query for the Total Number of Bytes in a Set of Folders (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-the-total-number-of-bytes-in-a-set-of-folders.md)</ept>","pos":[1295,1506],"source":"[How to: Query for the Total Number of Bytes in a Set of Folders (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-the-total-number-of-bytes-in-a-set-of-folders.md)"},{"content":"Shows how to return the total number of bytes in all the files in a specified directory tree.","pos":[1510,1603]},{"content":"<bpt id=\"p1\">[</bpt>How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md)</ept>s","pos":[1610,1787],"source":"[How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md)s"},{"content":"Shows how to return all the files that are present in two specified folders, and also all the files that are present in one folder but not the other.","pos":[1791,1940]},{"content":"<bpt id=\"p1\">[</bpt>How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-the-largest-file-or-files-in-a-directory-tree.md)</ept>","pos":[1947,2158],"source":"[How to: Query for the Largest File or Files in a Directory Tree (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-the-largest-file-or-files-in-a-directory-tree.md)"},{"content":"Shows how to return the largest or smallest file, or a specified number of files, in a directory tree.","pos":[2162,2264]},{"content":"<bpt id=\"p1\">[</bpt>How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md)</ept>","pos":[2271,2467],"source":"[How to: Query for Duplicate Files in a Directory Tree (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md)"},{"content":"Shows how to group for all file names that occur in more than one location in a specified directory tree.","pos":[2471,2576]},{"content":"Also shows how to perform more complex comparisons based on a custom comparer.","pos":[2577,2655]},{"content":"<bpt id=\"p1\">[</bpt>How to: Query the Contents of Files in a Folder (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-the-contents-of-files-in-a-folder-linq.md)</ept>","pos":[2662,2846],"source":"[How to: Query the Contents of Files in a Folder (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-query-the-contents-of-files-in-a-folder-linq.md)"},{"content":"Shows how to iterate through folders in a tree, open each file, and query the file's contents.","pos":[2850,2944]},{"pos":[2953,2961],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"There is some complexity involved in creating a data source that accurately represents the contents of the file system and handles exceptions gracefully.","pos":[2965,3118]},{"content":"The examples in this section create a snapshot collection of <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> objects that represents all the files under a specified root folder and all its subfolders.","pos":[3119,3297],"source":" The examples in this section create a snapshot collection of <xref:System.IO.FileInfo> objects that represents all the files under a specified root folder and all its subfolders."},{"content":"The actual state of each <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> may change in the time between when you begin and end executing a query.","pos":[3298,3421],"source":" The actual state of each <xref:System.IO.FileInfo> may change in the time between when you begin and end executing a query."},{"content":"For example, you can create a list of <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> objects to use as a data source.","pos":[3422,3518],"source":" For example, you can create a list of <xref:System.IO.FileInfo> objects to use as a data source."},{"content":"If you try to access the <ph id=\"ph1\">`Length`</ph> property in a query, the <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> object will try to access the file system to update the value of <ph id=\"ph3\">`Length`</ph>.","pos":[3519,3678],"source":" If you try to access the `Length` property in a query, the <xref:System.IO.FileInfo> object will try to access the file system to update the value of `Length`."},{"content":"If the file no longer exists, you will get a <ph id=\"ph1\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> in your query, even though you are not querying the file system directly.","pos":[3679,3836],"source":" If the file no longer exists, you will get a <xref:System.IO.FileNotFoundException> in your query, even though you are not querying the file system directly."},{"content":"Some queries in this section use a separate method that consumes these particular exceptions in certain cases.","pos":[3837,3947]},{"content":"Another option is to keep your data source updated dynamically by using the <ph id=\"ph1\">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.","pos":[3948,4059],"source":" Another option is to keep your data source updated dynamically by using the <xref:System.IO.FileSystemWatcher>."},{"pos":[4068,4076],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4080,4189],"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept>","source":"[LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)"}]}