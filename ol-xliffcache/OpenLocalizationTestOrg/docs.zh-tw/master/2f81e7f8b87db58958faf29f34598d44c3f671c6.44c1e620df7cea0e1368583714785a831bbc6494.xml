{"content":"---\ntitle: \"Thread Timers (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 52ed71e8-4fd9-43a4-ae40-04cce7cff23f\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Thread Timers (C#)\nThe <xref:System.Threading.Timer?displayProperty=fullName> class is useful for periodically running a task on a separate thread. For example, you could use a thread timer to check the status and integrity of a database or to back up critical files.  \n  \n## Thread Timer Example  \n The following example starts a task every two seconds and uses a flag to initiate the <xref:System.IDisposable.Dispose%2A> method that stops the timer. This example posts status to the output window.  \n  \n```csharp  \nprivate class StateObjClass  \n{  \n    // Used to hold parameters for calls to TimerTask.  \n    public int SomeValue;  \n    public System.Threading.Timer TimerReference;  \n    public bool TimerCanceled;  \n}  \n  \npublic void RunTimer()  \n{  \n    StateObjClass StateObj = new StateObjClass();  \n    StateObj.TimerCanceled = false;  \n    StateObj.SomeValue = 1;  \n    System.Threading.TimerCallback TimerDelegate =  \n        new System.Threading.TimerCallback(TimerTask);  \n  \n    // Create a timer that calls a procedure every 2 seconds.  \n    // Note: There is no Start method; the timer starts running as soon as   \n    // the instance is created.  \n    System.Threading.Timer TimerItem =  \n        new System.Threading.Timer(TimerDelegate, StateObj, 2000, 2000);  \n  \n    // Save a reference for Dispose.  \n    StateObj.TimerReference = TimerItem;    \n  \n    // Run for ten loops.  \n    while (StateObj.SomeValue < 10)   \n    {  \n        // Wait one second.  \n        System.Threading.Thread.Sleep(1000);    \n    }  \n  \n    // Request Dispose of the timer object.  \n    StateObj.TimerCanceled = true;    \n}  \n  \nprivate void TimerTask(object StateObj)  \n{  \n    StateObjClass State = (StateObjClass)StateObj;  \n    // Use the interlocked class to increment the counter variable.  \n    System.Threading.Interlocked.Increment(ref State.SomeValue);  \n    System.Diagnostics.Debug.WriteLine(\"Launched new thread  \" + DateTime.Now.ToString());  \n    if (State.TimerCanceled)      \n    // Dispose Requested.  \n    {  \n        State.TimerReference.Dispose();  \n        System.Diagnostics.Debug.WriteLine(\"Done  \" + DateTime.Now.ToString());  \n    }  \n}  \n```  \n  \n Thread timers are particularly useful when the <xref:System.Windows.Forms.Timer?displayProperty=fullName> object is unavailable, such as when you are developing console applications.  \n  \n## See Also  \n <xref:System.Threading>   \n [Multithreaded Applications (C#)](../../../../csharp/programming-guide/concepts/threading/multithreaded-applications.md)","nodes":[{"pos":[12,47],"content":"Thread Timers (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Thread Timers (C#) | Microsoft Docs","pos":[0,35]}]},{"pos":[406,424],"content":"Thread Timers (C#)","linkify":"Thread Timers (C#)","nodes":[{"content":"Thread Timers (C#)","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> class is useful for periodically running a task on a separate thread.","pos":[425,553],"source":"The <xref:System.Threading.Timer?displayProperty=fullName> class is useful for periodically running a task on a separate thread."},{"content":"For example, you could use a thread timer to check the status and integrity of a database or to back up critical files.","pos":[554,673]},{"pos":[682,702],"content":"Thread Timer Example","linkify":"Thread Timer Example","nodes":[{"content":"Thread Timer Example","pos":[0,20]}]},{"content":"The following example starts a task every two seconds and uses a flag to initiate the <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method that stops the timer.","pos":[706,857],"source":"The following example starts a task every two seconds and uses a flag to initiate the <xref:System.IDisposable.Dispose%2A> method that stops the timer."},{"content":"This example posts status to the output window.","pos":[858,905]},{"content":"Thread timers are particularly useful when the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</ph> object is unavailable, such as when you are developing console applications.","pos":[2581,2763],"source":"Thread timers are particularly useful when the <xref:System.Windows.Forms.Timer?displayProperty=fullName> object is unavailable, such as when you are developing console applications."},{"pos":[2772,2780],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading&gt;</ph>","pos":[2784,2807],"source":"<xref:System.Threading> "},{"content":"<bpt id=\"p1\"> [</bpt>Multithreaded Applications (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/threading/multithreaded-applications.md)</ept>","pos":[2811,2932],"source":" [Multithreaded Applications (C#)](../../../../csharp/programming-guide/concepts/threading/multithreaded-applications.md)"}]}