<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-programmatically-print-xps-files.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f113516fd96b88ea04b5ee155f808200dd2c893d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\how-to-programmatically-print-xps-files.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d02631c95ac8b9c60918b6f431f60d7ca2945bbd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11a11283ac000aa8ebee4c7ca5573b4fcd74f067</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Programmatically Print XPS Files</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Programmatically Print XPS Files</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use one overload of the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.AddJob%2A&gt;</ph> method to print <ph id="ph2">[!INCLUDE[TLA#tla_xps](../../../../includes/tlasharptla-xps-md.md)]</ph> files without opening a <ph id="ph3">&lt;xref:System.Windows.Controls.PrintDialog&gt;</ph> or, in principle, any <ph id="ph4">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> at all.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also print <ph id="ph1">[!INCLUDE[TLA#tla_xps](../../../../includes/tlasharptla-xps-md.md)]</ph> files using the many <ph id="ph2">&lt;xref:System.Windows.Xps.XpsDocumentWriter.Write%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A&gt;</ph> methods of the <ph id="ph4">&lt;xref:System.Windows.Xps.XpsDocumentWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more about this, <bpt id="p1">[</bpt>Printing an XPS Document<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms771525(v=vs.90))</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Another way of printing <ph id="ph1">[!INCLUDE[TLA#tla_xps](../../../../includes/tlasharptla-xps-md.md)]</ph> is to use the <ph id="ph2">&lt;xref:System.Windows.Controls.PrintDialog.PrintDocument%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Controls.PrintDialog.PrintVisual%2A&gt;</ph> methods of the <ph id="ph4">&lt;xref:System.Windows.Controls.PrintDialog&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Invoke a Print Dialog<ept id="p1">](how-to-invoke-a-print-dialog.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The main steps to using the three-parameter <ph id="ph1">&lt;xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method are as follows.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The example below gives details.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Determine if the printer is an XPSDrv printer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Printing Overview<ept id="p1">](printing-overview.md)</ept> for more about XPSDrv.)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the printer is not an XPSDrv printer, set the thread's apartment to single thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instantiate a print server and print queue object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Call the method, specifying a job name, the file to be printed, and a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> flag indicating whether or not the printer is an XPSDrv printer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The example below shows how to batch print all <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> files in a directory.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Although the application prompts the user to specify the directory, the three-parameter <ph id="ph1">&lt;xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method does not require a <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It can be used in any code path where you have an <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> file name and path that you can pass to it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The three-parameter <ph id="ph1">&lt;xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29&gt;</ph> overload of <ph id="ph2">&lt;xref:System.Printing.PrintQueue.AddJob%2A&gt;</ph> must run in a single thread apartment whenever the <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> parameter is <ph id="ph4">`false`</ph>, which it must be when a non-XPSDrv printer is being used.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the default apartment state for <ph id="ph1">[!INCLUDE[TLA#tla_net](../../../../includes/tlasharptla-net-md.md)]</ph> is multiple thread.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This default must be reversed since the example assumes a non-XPSDrv printer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There are two ways to change the default.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>One way is to simply add the <ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph> (that is, "<ph id="ph2">`[System.STAThreadAttribute()]`</ph>") just above the first line of the application's <ph id="ph3">`Main`</ph> method (usually "<ph id="ph4">`static void Main(string[] args)`</ph>").</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, many applications require that the <ph id="ph1">`Main`</ph> method have a multi-threaded apartment state, so there is a second method: put the call to <ph id="ph2">&lt;xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29&gt;</ph> in a separate thread whose apartment state is set to <ph id="ph3">&lt;xref:System.Threading.ApartmentState.STA&gt;</ph> with <ph id="ph4">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The example below uses this second technique.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Accordingly, the example begins by instantiating a <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> object and passing it a <bpt id="p1">**</bpt>PrintXPS<ept id="p1">**</ept> method as the <ph id="ph2">&lt;xref:System.Threading.ThreadStart&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>(The <bpt id="p1">**</bpt>PrintXPS<ept id="p1">**</ept> method is defined later in the example.) Next the thread is set to a single thread apartment.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The only remaining code of the <ph id="ph1">`Main`</ph> method starts the new thread.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The meat of the example is in the <ph id="ph1">`static`</ph><bpt id="p1">**</bpt>BatchXPSPrinter.PrintXPS<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>After creating a print server and queue, the method prompts the user for a directory containing <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> files.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After validating the existence of the directory and the presence of <ph id="ph1">\*</ph>.xps files in it, the method adds each such file to the print queue.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The example assumes that the printer is non-XPSDrv, so we are passing <ph id="ph1">`false`</ph> to the last parameter of <ph id="ph2">&lt;xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For this reason, the method will validate the <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> markup in the file before it attempts to convert it to the printer's page description language.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the validation fails, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The example code will catch the exception, notify the user about it, and then go on to process the next <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you are using an XPSDrv printer, then you can set the final parameter to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In that case, since <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> is the printer's page description language, the method will send the file to the printer without validating it or converting it to another page description language.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you are uncertain at design time whether the application will be using an XPSDrv printer, you can modify the application to have it read the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.IsXpsDevice%2A&gt;</ph> property and branch according to what it finds.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Since there will initially be few XPSDrv printers available immediately after the release of <ph id="ph1">[!INCLUDE[TLA#tla_winvista](../../../../includes/tlasharptla-winvista-md.md)]</ph> and Microsoft .NET Framework, you may need to disguise a non-XPSDrv printer as an XPSDrv printer.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To do so, add Pipelineconfig.xml to the list of files in the following registry key of the computer running your application:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows NT x86\Drivers\Version-3<ph id="ph1">\\</ph><bpt id="p1">*</bpt><ph id="ph2">\&lt;</ph>PseudoXPSPrinter&gt;<ept id="p1">*</ept>\DependentFiles</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>PseudoXPSPrinter&gt;<ept id="p1">*</ept> is any print queue.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The machine must then be rebooted.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This disguise will enable you to pass <ph id="ph1">`true`</ph> as the final parameter of <ph id="ph2">&lt;xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29&gt;</ph> without causing an exception, but since <bpt id="p1">*</bpt><ph id="ph3">\&lt;</ph>PseudoXPSPrinter&gt;<ept id="p1">*</ept> is not really an XPSDrv printer, only garbage will print.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> For simplicity, the example above uses the presence of an <ph id="ph1">\*</ph>.xps extension as its test that a file is <ph id="ph2">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> files do not have to have this extension.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>isXPS.exe (isXPS Conformance Tool)<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/aa348104(v=vs.100))</ept> is one way of testing a file for <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> validity.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XPS Documents<ept id="p1">](/windows/desktop/printdocs/documents)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Printing an XPS Document<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms771525(v=vs.90))</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managed and Unmanaged Threading<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/5s8ee185(v=vs.100))</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>isXPS.exe (isXPS Conformance Tool)<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/aa348104(v=vs.100))</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Documents in WPF<ept id="p1">](documents-in-wpf.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Printing Overview<ept id="p1">](printing-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>