<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="introduction-to-plinq.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">670ed89754aa9b4d2052bb1186e0139618190cd6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\introduction-to-plinq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19975fc26c0581486772ad7cfd6a29ec5edfc6d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd9074b1f15ff36d234c0d99bb763a1e82c79fe8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Introduction to PLINQ</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introduction to PLINQ</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>What is a Parallel Query?</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Language-Integrated Query (LINQ) was introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](../../../includes/net-v35-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It features a unified model for querying any <ph id="ph1">&lt;xref:System.Collections.IEnumerable?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType&gt;</ph> data source in a type-safe manner.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>LINQ to Objects is the name for LINQ queries that are run against in-memory collections such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> and arrays.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article assumes that you have a basic understanding of LINQ.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Language-Integrated Query (LINQ) - C#<ept id="p1">](../../csharp/programming-guide/concepts/linq/index.md)</ept> or <bpt id="p2">[</bpt>Language-Integrated Query (LINQ) - Visual Basic<ept id="p2">](../../visual-basic/programming-guide/concepts/linq/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Parallel LINQ (PLINQ) is a parallel implementation of the LINQ pattern.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A PLINQ query in many ways resembles a non-parallel LINQ to Objects query.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>PLINQ queries, just like sequential <ph id="ph1">[!INCLUDE[vbteclinq](../../../includes/vbteclinq-md.md)]</ph> queries, operate on any in-memory <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> data source, and have deferred execution, which means they do not begin executing until the query is enumerated.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The primary difference is that PLINQ attempts to make full use of all the processors on the system.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It does this by partitioning the data source into segments, and then executing the query on each segment on separate worker threads in parallel on multiple processors.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In many cases, parallel execution means that the query runs significantly faster.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Through parallel execution, PLINQ can achieve significant performance improvements over legacy code for certain kinds of queries, often just by adding the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsParallel%2A&gt;</ph> query operation to the data source.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, parallelism can introduce its own complexities, and not all query operations run faster in PLINQ.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In fact, parallelization actually slows down certain queries.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, you should understand how issues such as ordering affect parallel queries.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Understanding Speedup in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This documentation uses lambda expressions to define delegates in PLINQ.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you are not familiar with lambda expressions in C# or Visual Basic, see <bpt id="p1">[</bpt>Lambda Expressions in PLINQ and TPL<ept id="p1">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The remainder of this article gives an overview of the main PLINQ classes, and discusses how to create PLINQ queries.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Each section contains links to more detailed information and code examples.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The ParallelEnumerable Class</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable?displayProperty=nameWithType&gt;</ph> class exposes almost all of PLINQ's functionality.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It and the rest of the <ph id="ph1">&lt;xref:System.Linq?displayProperty=nameWithType&gt;</ph> namespace types are compiled into the System.Core.dll assembly.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The default C# and Visual Basic projects in Visual Studio both reference the assembly and import the namespace.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable&gt;</ph> includes implementations of all the standard query operators that LINQ to Objects supports, although it does not attempt to parallelize each one.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you are not familiar with <ph id="ph1">[!INCLUDE[vbteclinq](../../../includes/vbteclinq-md.md)]</ph>, see <bpt id="p1">[</bpt>Introduction to LINQ (C#)<ept id="p1">](../../csharp/programming-guide/concepts/linq/introduction-to-linq.md)</ept> and <bpt id="p2">[</bpt>Introduction to LINQ (Visual Basic)<ept id="p2">](../../visual-basic/programming-guide/concepts/linq/introduction-to-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In addition to the standard query operators, the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable&gt;</ph> class contains a set of methods that enable behaviors specific to parallel execution.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These PLINQ-specific methods are listed in the following table.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>ParallelEnumerable Operator</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The entry point for PLINQ.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specifies that the rest of the query should be parallelized, if it is possible.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Specifies that the rest of the query should be run sequentially, as a non-parallel LINQ query.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Specifies that PLINQ should preserve the ordering of the source sequence for the rest of the query, or until the ordering is changed, for example by the use of an orderby (Order By in Visual Basic) clause.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Specifies that PLINQ for the rest of the query is not required to preserve the ordering of the source sequence.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Specifies that PLINQ should periodically monitor the state of the provided cancellation token and cancel execution if it is requested.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of processors that PLINQ should use to parallelize the query.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Provides a hint about how PLINQ should, if it is possible, merge parallel results back into just one sequence on the consuming thread.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Specifies whether PLINQ should parallelize the query even when the default behavior would be to run it sequentially.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A multithreaded enumeration method that, unlike iterating over the results of the query, enables results to be processed in parallel without first merging back to the consumer thread.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.Aggregate%2A&gt;</ph> overload</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An overload that is unique to PLINQ and enables intermediate aggregation over thread-local partitions, plus a final aggregation function to combine the results of all partitions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Opt-in Model</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you write a query, opt in to PLINQ by invoking the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsParallel%2A?displayProperty=nameWithType&gt;</ph> extension method on the data source, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsParallel%2A&gt;</ph> extension method binds the subsequent query operators, in this case, <ph id="ph2">`where`</ph> and <ph id="ph3">`select`</ph>, to the <ph id="ph4">&lt;xref:System.Linq.ParallelEnumerable?displayProperty=nameWithType&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Execution Modes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>By default, PLINQ is conservative.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>At run time, the PLINQ infrastructure analyzes the overall structure of the query.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the query is likely to yield speedups by parallelization, PLINQ partitions the source sequence into tasks that can be run concurrently.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If it is not safe to parallelize a query, PLINQ just runs the query sequentially.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If PLINQ has a choice between a potentially expensive parallel algorithm or an inexpensive sequential algorithm, it chooses the sequential algorithm by default.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.WithExecutionMode%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Linq.ParallelExecutionMode?displayProperty=nameWithType&gt;</ph> enumeration to instruct PLINQ to select the parallel algorithm.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is useful when you know by testing and measurement that a particular query executes faster in parallel.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Specify the Execution Mode in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/how-to-specify-the-execution-mode-in-plinq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Degree of Parallelism</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>By default, PLINQ uses all of the processors on the host computer.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can instruct PLINQ to use no more than a specified number of processors by using the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.WithDegreeOfParallelism%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is useful when you want to make sure that other processes running on the computer receive a certain amount of CPU time.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following snippet limits the query to utilizing a maximum of two processors.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In cases where a query is performing a significant amount of non-compute-bound work such as File I/O, it might be beneficial to specify a degree of parallelism greater than the number of cores on the machine.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Ordered Versus Unordered Parallel Queries</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In some queries, a query operator must produce results that preserve the ordering of the source sequence.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>PLINQ provides the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsOrdered%2A&gt;</ph> operator for this purpose.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsOrdered%2A&gt;</ph> is distinct from <ph id="ph2">&lt;xref:System.Linq.ParallelEnumerable.AsSequential%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsOrdered%2A&gt;</ph> sequence is still processed in parallel, but its results are buffered and sorted.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Because order preservation typically involves extra work, an <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsOrdered%2A&gt;</ph> sequence might be processed more slowly than the default <ph id="ph2">&lt;xref:System.Linq.ParallelEnumerable.AsUnordered%2A&gt;</ph> sequence.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Whether a particular ordered parallel operation is faster than a sequential version of the operation depends on many factors.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following code example shows how to opt in to order preservation.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Order Preservation in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/order-preservation-in-plinq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Parallel vs. Sequential Queries</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Some operations require that the source data be delivered in a sequential manner.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable&gt;</ph> query operators revert to sequential mode automatically when it is required.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For user-defined query operators and user delegates that require sequential execution, PLINQ provides the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsSequential%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsSequential%2A&gt;</ph>, all subsequent operators in the query are executed sequentially until <ph id="ph2">&lt;xref:System.Linq.ParallelEnumerable.AsParallel%2A&gt;</ph> is called again.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Combine Parallel and Sequential LINQ Queries<ept id="p1">](../../../docs/standard/parallel-programming/how-to-combine-parallel-and-sequential-linq-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Options for Merging Query Results</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When a PLINQ query executes in parallel, its results from each worker thread must be merged back onto the main thread for consumption by a <ph id="ph1">`foreach`</ph> loop (<ph id="ph2">`For Each`</ph> in Visual Basic), or insertion into a list or array.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In some cases, it might be beneficial to specify a particular kind of merge operation, for example, to begin producing results more quickly.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For this purpose, PLINQ supports the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.WithMergeOptions%2A&gt;</ph> method, and the <ph id="ph2">&lt;xref:System.Linq.ParallelMergeOptions&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Merge Options in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/merge-options-in-plinq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The ForAll Operator</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In sequential <ph id="ph1">[!INCLUDE[vbteclinq](../../../includes/vbteclinq-md.md)]</ph> queries, execution is deferred until the query is enumerated either in a <ph id="ph2">`foreach`</ph> (<ph id="ph3">`For Each`</ph> in Visual Basic) loop or by invoking a method such as <ph id="ph4">&lt;xref:System.Linq.ParallelEnumerable.ToList%2A&gt;</ph> , <ph id="ph5">&lt;xref:System.Linq.ParallelEnumerable.ToArray%2A&gt;</ph> , or <ph id="ph6">&lt;xref:System.Linq.ParallelEnumerable.ToDictionary%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In PLINQ, you can also use <ph id="ph1">`foreach`</ph> to execute the query and iterate through the results.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`foreach`</ph> itself does not run in parallel, and therefore, it requires that the output from all parallel tasks be merged back into the thread on which the loop is running.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In PLINQ, you can use <ph id="ph1">`foreach`</ph> when you must preserve the final ordering of the query results, and also whenever you are processing the results in a serial manner, for example when you are calling <ph id="ph2">`Console.WriteLine`</ph> for each element.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For faster query execution when order preservation is not required and when the processing of the results can itself be parallelized, use the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.ForAll%2A&gt;</ph> method to execute a PLINQ query.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.ForAll%2A&gt;</ph> does not perform this final merge step.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.ForAll%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601?displayProperty=nameWithType&gt;</ph> is used here because it is optimized for multiple threads adding concurrently without attempting to remove any items.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following illustration shows the difference between <ph id="ph1">`foreach`</ph> and <ph id="ph2">&lt;xref:System.Linq.ParallelEnumerable.ForAll%2A&gt;</ph> with regard to query execution.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>ForAll vs. ForEach<ept id="p1">]</ept><bpt id="p2">(../../../docs/standard/parallel-programming/media/vs-isvnt-allvseach.png "</bpt>VS_ISVNT_ALLvsEACH<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Cancellation</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>PLINQ is integrated with the cancellation types in <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Cancellation in Managed Threads<ept id="p1">](../../../docs/standard/threading/cancellation-in-managed-threads.md)</ept>.) Therefore, unlike sequential LINQ to Objects queries, PLINQ queries can be canceled.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To create a cancelable PLINQ query, use the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.WithCancellation%2A&gt;</ph> operator on the query and provide a <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> instance as the argument.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property on the token is set to true, PLINQ will notice it, stop processing on all threads, and throw an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It is possible that a PLINQ query might continue to process some elements after the cancellation token is set.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For greater responsiveness, you can also respond to cancellation requests in long-running user delegates.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Cancel a PLINQ Query<ept id="p1">](../../../docs/standard/parallel-programming/how-to-cancel-a-plinq-query.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When a PLINQ query executes, multiple exceptions might be thrown from different threads simultaneously.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Also, the code to handle the exception might be on a different thread than the code that threw the exception.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>PLINQ uses the <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> type to encapsulate all the exceptions that were thrown by a query, and marshal those exceptions back to the calling thread.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>On the calling thread, only one try-catch block is required.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>However, you can iterate through all of the exceptions that are encapsulated in the <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> and catch any that you can safely recover from.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In rare cases, some exceptions may be thrown that are not wrapped in an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, and <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>s  are also not wrapped.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When exceptions are allowed to bubble up back to the joining thread, then it is possible that a query may continue to process some items after the exception is raised.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Handle Exceptions in a PLINQ Query<ept id="p1">](../../../docs/standard/parallel-programming/how-to-handle-exceptions-in-a-plinq-query.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Custom Partitioners</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In some cases, you can improve query performance by writing a custom partitioner that takes advantage of some characteristic of the source data.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the query, the custom partitioner itself is the enumerable object that is queried.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>PLINQ supports a fixed number of partitions (although data may be dynamically reassigned to those partitions during run time for load balancing.).</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> support only dynamic partitioning, which means that the number of partitions changes at run time.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Custom Partitioners for PLINQ and TPL<ept id="p1">](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Measuring PLINQ Performance</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>In many cases, a query can be parallelized, but the overhead of setting up the parallel query outweighs the performance benefit gained.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If a query does not perform much computation or if the data source is small, a PLINQ query may be slower than a sequential LINQ to Objects query.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You can use the Parallel Performance Analyzer in Visual Studio Team Server to compare the performance of various queries, to locate processing bottlenecks, and to determine whether your query is running in parallel or sequentially.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Concurrency Visualizer<ept id="p1">](/visualstudio/profiling/concurrency-visualizer)</ept> and <bpt id="p2">[</bpt>How to: Measure PLINQ Query Performance<ept id="p2">](../../../docs/standard/parallel-programming/how-to-measure-plinq-query-performance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel LINQ (PLINQ)<ept id="p1">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Understanding Speedup in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/understanding-speedup-in-plinq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>