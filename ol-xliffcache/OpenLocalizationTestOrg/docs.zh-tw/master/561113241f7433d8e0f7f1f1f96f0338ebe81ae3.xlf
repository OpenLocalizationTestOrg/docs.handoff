<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">561113241f7433d8e0f7f1f1f96f0338ebe81ae3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\exceptions\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e11bae8e99a83d727c4d8873ecc621202e74086</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">314ba7d7a82f6838ebcdd8788c79196a2470c0fb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exceptions and Exception Handling (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exceptions and Exception Handling (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The C# language's exception handling features help you deal with any unexpected or exceptional situations that occur when a program is running.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Exception handling uses the <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, and <ph id="ph3">`finally`</ph> keywords to try actions that may not succeed, to handle failures when you decide that it is reasonable to do so, and to clean up resources afterward.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Exceptions can be generated by the common language runtime (CLR), by the .NET Framework or any third-party libraries, or by application code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Exceptions are created by using the <ph id="ph1">`throw`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In many cases, an exception may be thrown not by a method that your code has called directly, but by another method further down in the call stack.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When this happens, the CLR will unwind the stack, looking for a method with a <ph id="ph1">`catch`</ph> block for the specific exception type, and it will execute the first such <ph id="ph2">`catch`</ph> block that if finds.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If it finds no appropriate <ph id="ph1">`catch`</ph> block anywhere in the call stack, it will terminate the process and display a message to the user.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this example, a method tests for division by zero and catches the error.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Without the exception handling, this program would terminate with a <bpt id="p1">**</bpt>DivideByZeroException was unhandled<ept id="p1">**</ept> error.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#18<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exceptions-and-exception-handling_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Exceptions Overview</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Exceptions have the following properties:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Exceptions are types that all ultimately derive from <ph id="ph1">`System.Exception`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`try`</ph> block around the statements that might throw exceptions.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Once an exception occurs in the <ph id="ph1">`try`</ph> block, the flow of control jumps to the first associated exception handler that is present anywhere in the call stack.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In C#, the <ph id="ph1">`catch`</ph> keyword is used to define an exception handler.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If no exception handler for a given exception is present, the program stops executing with an error message.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Do not catch an exception unless you can handle it and leave the application in a known state.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you catch <ph id="ph1">`System.Exception`</ph>, rethrow it using the <ph id="ph2">`throw`</ph> keyword at the end of the <ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`catch`</ph> block defines an exception variable, you can use it to obtain more information about the type of exception that occurred.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Exceptions can be explicitly generated by a program by using the <ph id="ph1">`throw`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Exception objects contain detailed information about the error, such as the state of the call stack and a text description of the error.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Code in a <ph id="ph1">`finally`</ph> block is executed even if an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`finally`</ph> block to release resources, for example to close any streams or files that were opened in the <ph id="ph2">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Managed exceptions in the .NET Framework are implemented on top of the Win32 structured exception handling mechanism.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Structured Exception Handling (C/C++)<ept id="p1">](https://docs.microsoft.com/cpp/cpp/structured-exception-handling-c-cpp)</ept> and <bpt id="p2">[</bpt>A Crash Course on the Depths of Win32 Structured Exception Handling<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=119654)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See the following topics for more information about exceptions and exception handling:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Exceptions<ept id="p1">](../../../csharp/programming-guide/exceptions/using-exceptions.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/exception-handling.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating and Throwing Exceptions<ept id="p1">](../../../csharp/programming-guide/exceptions/creating-and-throwing-exceptions.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compiler-Generated Exceptions<ept id="p1">](../../../csharp/programming-guide/exceptions/compiler-generated-exceptions.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Handle an Exception Using try/catch (C# Programming Guide)<ept id="p1">](../../../csharp/programming-guide/exceptions/how-to-handle-an-exception-using-try-catch.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Execute Cleanup Code Using finally<ept id="p1">](../../../csharp/programming-guide/exceptions/how-to-execute-cleanup-code-using-finally.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.SystemException&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>throw<ept id="p1">](../../../csharp/language-reference/keywords/throw.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try-catch<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-finally.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try-catch-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../../standard/exceptions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Hierarchy<ept id="p1">](http://msdn.microsoft.com/library/f7d68675-be06-40fb-a555-05f0c5a6f66b)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Reliable .NET Code<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=112400)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Minidumps for Specific Exceptions<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=112408)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>