{"content":"---\ntitle: \"[] Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"[]_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"subscript operator [C#]\"\n  - \"square brackets [ ] operator [C#]\"\n  - \"[] operator [C#]\"\n  - \"indexing operator [C#]\"\nms.assetid: 5c16bb45-88f7-45ff-b42c-1af1972b042c\ncaps.latest.revision: 20\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# [] Operator (C# Reference)\nSquare brackets (`[]`) are used for arrays, indexers, and attributes. They can also be used with pointers.  \n  \n## Remarks  \n An array type is a type followed by `[]`:  \n  \n [!code-cs[csRefOperators#43](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_1.cs)]  \n  \n To access an element of an array, the index of the desired element is enclosed in brackets:  \n  \n [!code-cs[csRefOperators#44](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_2.cs)]  \n  \n An exception is thrown if an array index is out of range.  \n  \n The array indexing operator cannot be overloaded; however, types can define indexers, and properties that take one or more parameters. Indexer parameters are enclosed in square brackets, just like array indexes, but indexer parameters can be declared to be of any type, unlike array indexes, which must be integral.  \n  \n For example, the .NET Framework defines a `Hashtable` type that associates keys and values of arbitrary type:  \n  \n [!code-cs[csRefOperators#45](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_3.cs)]  \n  \n Square brackets are also used to specify [Attributes](../../../csharp/programming-guide/concepts/attributes/index.md):  \n  \n [!code-cs[csRefOperators#46](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_4.cs)]  \n  \n You can use square brackets to index off a pointer:  \n  \n [!code-cs[csRefOperators#47](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_5.cs)]  \n  \n No bounds checking is performed.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)   \n [Arrays](../../../csharp/programming-guide/arrays/index.md)   \n [Indexers](../../../csharp/programming-guide/indexers/index.md)   \n [unsafe](../../../csharp/language-reference/keywords/unsafe.md)   \n [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)\n","nodes":[{"pos":[4,652],"nodes":[{"content":"[] Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"[] Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"[] Operator (C# Reference) | Microsoft Docs","pos":[0,43]}]}],"pos":[6,52],"yaml":true}],"content":"title: \"[] Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"[]_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"subscript operator [C#]\"\n  - \"square brackets [ ] operator [C#]\"\n  - \"[] operator [C#]\"\n  - \"indexing operator [C#]\"\nms.assetid: 5c16bb45-88f7-45ff-b42c-1af1972b042c\ncaps.latest.revision: 20\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[659,685],"content":"[] Operator (C# Reference)","linkify":"[] Operator (C# Reference)","nodes":[{"content":"[] Operator (C# Reference)","pos":[0,26]}]},{"content":"Square brackets (<ph id=\"ph1\">`[]`</ph>) are used for arrays, indexers, and attributes.","pos":[686,755],"source":"Square brackets (`[]`) are used for arrays, indexers, and attributes."},{"content":"They can also be used with pointers.","pos":[756,792]},{"pos":[801,808],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[812,853],"content":"An array type is a type followed by <ph id=\"ph1\">`[]`</ph>:","source":"An array type is a type followed by `[]`:"},{"pos":[860,974],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#43<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#43](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_1.cs)]"},{"content":"To access an element of an array, the index of the desired element is enclosed in brackets:","pos":[981,1072]},{"pos":[1079,1193],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#44<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#44](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_2.cs)]"},{"content":"An exception is thrown if an array index is out of range.","pos":[1200,1257]},{"content":"The array indexing operator cannot be overloaded; however, types can define indexers, and properties that take one or more parameters.","pos":[1264,1398]},{"content":"Indexer parameters are enclosed in square brackets, just like array indexes, but indexer parameters can be declared to be of any type, unlike array indexes, which must be integral.","pos":[1399,1579]},{"pos":[1586,1695],"content":"For example, the .NET Framework defines a <ph id=\"ph1\">`Hashtable`</ph> type that associates keys and values of arbitrary type:","source":"For example, the .NET Framework defines a `Hashtable` type that associates keys and values of arbitrary type:"},{"pos":[1702,1816],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#45<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#45](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_3.cs)]"},{"pos":[1823,1941],"content":"Square brackets are also used to specify <bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](../../../csharp/programming-guide/concepts/attributes/index.md)</ept>:","source":"Square brackets are also used to specify [Attributes](../../../csharp/programming-guide/concepts/attributes/index.md):"},{"pos":[1948,2062],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#46<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#46](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_4.cs)]"},{"content":"You can use square brackets to index off a pointer:","pos":[2069,2120]},{"pos":[2127,2241],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#47<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#47](../../../csharp/language-reference/operators/codesnippet/CSharp/index-operator_5.cs)]"},{"content":"No bounds checking is performed.","pos":[2248,2280]},{"pos":[2289,2314],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2428,2436],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2440,2500],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2504,2571],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2575,2645],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2649,2709],"source":"[Arrays](../../../csharp/programming-guide/arrays/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2713,2777],"source":"[Indexers](../../../csharp/programming-guide/indexers/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept><ph id=\"ph1\"> </ph>","pos":[2781,2845],"source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md) "},{"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept>","pos":[2849,2930],"source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)"}]}