{"content":"---\ntitle: \"How to: Request data by using the WebRequest class\"\nms.date: \"03/21/2019\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"downloading Internet resources, steps\"\n  - \"requesting data from Internet, steps\"\n  - \"WebRequest class, receiving data\"\n  - \"receiving data, using WebRequest class\"\n  - \"Internet, requesting data\"\nms.assetid: 368b8d0f-dc5e-4469-a8b8-b2adbf5dd800\n---\n# How to: Request data by using the WebRequest class\nThe following procedure describes the steps to request a resource, such as a Web page or a file, from a server. The resource must be identified by a URI.  \n  \n## To request data from a host server  \n  \n1.  Create a <xref:System.Net.WebRequest> instance by calling <xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType> with the URI of a resource. For example: \n  \n    ```csharp  \n    WebRequest request = WebRequest.Create(\"http://www.contoso.com/default.html\");  \n    ```  \n  \n    ```vb  \n    Dim request as WebRequest = WebRequest.Create(\"http://www.contoso.com/default.html\")  \n    ```  \n  \n    > [!NOTE]\n    > The .NET Framework provides protocol-specific classes derived from the <xref:System.Net.WebRequest> and <xref:System.Net.WebResponse> classes for URIs that begin with *http:*, *https:*, *ftp:*, and *file:*.\n    If you need to set or read protocol-specific properties, you must cast your <xref:System.Net.WebRequest> or <xref:System.Net.WebResponse> object to a protocol-specific object type. For more information, see [Programming pluggable protocols](programming-pluggable-protocols.md). \n  \n2.  Set any property values that you need in your `WebRequest` object. For example, to enable authentication, set the <xref:System.Net.WebRequest.Credentials%2A?displayProperty=nameWithType> property to an instance of the <xref:System.Net.NetworkCredential> class:  \n  \n    ```csharp  \n    request.Credentials = CredentialCache.DefaultCredentials;  \n    ```  \n  \n    ```vb  \n    request.Credentials = CredentialCache.DefaultCredentials  \n    ```  \n  \n3.  Send the request to the server by calling <xref:System.Net.WebRequest.GetResponse%2A?displayProperty=nameWithType>. This method returns an object containing the server's response. The returned <xref:System.Net.WebResponse> object's type is determined by the scheme of the request's URI. For example:\n  \n    ```csharp  \n    WebResponse response = request.GetResponse();  \n    ```  \n  \n    ```vb  \n    Dim response As WebResponse = request.GetResponse()  \n    ```  \n  \n4.  You can access the properties of your `WebResponse` object or cast it to a protocol-specific instance to read protocol-specific properties. \n\n    For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebResponse>, cast your `WebResponse` object to an `HttpWebResponse` reference. The following code example shows how to display the HTTP-specific <xref:System.Net.HttpWebResponse.StatusDescription%2A?displayProperty=nameWithType> property sent with a response:\n  \n    ```csharp  \n    Console.WriteLine (((HttpWebResponse)response).StatusDescription);  \n    ```  \n  \n    ```vb  \n    Console.WriteLine(CType(response,HttpWebResponse).StatusDescription)  \n    ```  \n  \n5.  To get the stream containing response data sent by the server, call the <xref:System.Net.WebResponse.GetResponseStream%2A?displayProperty=nameWithType> method. For example:  \n  \n    ```csharp  \n    Stream dataStream = response.GetResponseStream();  \n    ```  \n  \n    ```vb  \n    Dim dataStream As Stream = response.GetResponseStream()  \n    ```  \n  \n6.  After you've read the data from the response object, either close it with the <xref:System.Net.WebResponse.Close%2A?displayProperty=nameWithType> method or close the response stream with the <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> method. If you don't close either the response object or the stream, your application can run out of server connections and become unable to process additional requests. Because the `WebResponse.Close` method calls `Stream.Close` when it closes the response, it's not necessary to call `Close` on both the response and stream objects, although doing so isn't harmful. For example:\n  \n    ```csharp  \n    response.Close();  \n    ```  \n  \n    ```vb  \n    response.Close()  \n    ```  \n  \n## Example  \n\nThe following code example shows how to create a request to a web server and read the data in its response:  \n  \n[!code-csharp[RequestDataUsingWebRequest](../../../samples/snippets/csharp/VS_Snippets_Network/RequestDataUsingWebRequest/cs/WebRequestGetExample.cs)]\n[!code-vb[RequestDataUsingWebRequest](../../../samples/snippets/visualbasic/VS_Snippets_Network/RequestDataUsingWebRequest/vb/WebRequestGetExample.vb)]\n\n## See also\n\n- [Creating internet requests](creating-internet-requests.md)\n- [Using Streams on the network](using-streams-on-the-network.md)\n- [Accessing the internet through a proxy](accessing-the-internet-through-a-proxy.md)\n- [Requesting data](requesting-data.md)\n- [How to: Send data by using the WebRequest class](how-to-send-data-using-the-webrequest-class.md)\n","nodes":[{"pos":[4,393],"embed":true,"restype":"x-metadata","content":"title: \"How to: Request data by using the WebRequest class\"\nms.date: \"03/21/2019\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"downloading Internet resources, steps\"\n  - \"requesting data from Internet, steps\"\n  - \"WebRequest class, receiving data\"\n  - \"receiving data, using WebRequest class\"\n  - \"Internet, requesting data\"\nms.assetid: 368b8d0f-dc5e-4469-a8b8-b2adbf5dd800","nodes":[{"content":"How to: Request data by using the WebRequest class","nodes":[{"pos":[0,50],"content":"How to: Request data by using the WebRequest class","nodes":[{"content":"How to: Request data by using the WebRequest class","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[400,450],"content":"How to: Request data by using the WebRequest class","linkify":"How to: Request data by using the WebRequest class","nodes":[{"content":"How to: Request data by using the WebRequest class","pos":[0,50]}]},{"content":"The following procedure describes the steps to request a resource, such as a Web page or a file, from a server.","pos":[451,562]},{"content":"The resource must be identified by a URI.","pos":[563,604]},{"pos":[613,647],"content":"To request data from a host server","linkify":"To request data from a host server","nodes":[{"content":"To request data from a host server","pos":[0,34]}]},{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Net.WebRequest&gt;</ph> instance by calling <ph id=\"ph2\">&lt;xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType&gt;</ph> with the URI of a resource.","pos":[657,810],"source":"Create a <xref:System.Net.WebRequest> instance by calling <xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType> with the URI of a resource."},{"content":"For example:","pos":[811,823]},{"pos":[1064,1566],"content":"[!NOTE]\nThe .NET Framework provides protocol-specific classes derived from the <xref:System.Net.WebRequest> and <xref:System.Net.WebResponse> classes for URIs that begin with *http:*, *https:*, *ftp:*, and *file:*.\nIf you need to set or read protocol-specific properties, you must cast your <xref:System.Net.WebRequest> or <xref:System.Net.WebResponse> object to a protocol-specific object type. For more information, see [Programming pluggable protocols](programming-pluggable-protocols.md).","leadings":["","    > ","    "],"nodes":[{"content":"The .NET Framework provides protocol-specific classes derived from the <xref:System.Net.WebRequest> and <xref:System.Net.WebResponse> classes for URIs that begin with *http:*, *https:*, *ftp:*, and *file:*.\nIf you need to set or read protocol-specific properties, you must cast your <xref:System.Net.WebRequest> or <xref:System.Net.WebResponse> object to a protocol-specific object type. For more information, see [Programming pluggable protocols](programming-pluggable-protocols.md).","pos":[8,492],"nodes":[{"content":"The .NET Framework provides protocol-specific classes derived from the <ph id=\"ph1\">&lt;xref:System.Net.WebRequest&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.WebResponse&gt;</ph> classes for URIs that begin with <bpt id=\"p1\">*</bpt>http:<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>https:<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>ftp:<ept id=\"p3\">*</ept>, and <bpt id=\"p4\">*</bpt>file:<ept id=\"p4\">*</ept>.","pos":[0,206],"source":"The .NET Framework provides protocol-specific classes derived from the <xref:System.Net.WebRequest> and <xref:System.Net.WebResponse> classes for URIs that begin with *http:*, *https:*, *ftp:*, and *file:*."},{"content":"If you need to set or read protocol-specific properties, you must cast your <ph id=\"ph1\">&lt;xref:System.Net.WebRequest&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.WebResponse&gt;</ph> object to a protocol-specific object type.","pos":[207,387],"source":"\nIf you need to set or read protocol-specific properties, you must cast your <xref:System.Net.WebRequest> or <xref:System.Net.WebResponse> object to a protocol-specific object type."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Programming pluggable protocols<ept id=\"p1\">](programming-pluggable-protocols.md)</ept>.","pos":[388,484],"source":" For more information, see [Programming pluggable protocols](programming-pluggable-protocols.md)."}]}]},{"content":"Set any property values that you need in your <ph id=\"ph1\">`WebRequest`</ph> object.","pos":[1575,1641],"source":"Set any property values that you need in your `WebRequest` object."},{"content":"For example, to enable authentication, set the <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.Credentials%2A?displayProperty=nameWithType&gt;</ph> property to an instance of the <ph id=\"ph2\">&lt;xref:System.Net.NetworkCredential&gt;</ph> class:","pos":[1642,1835],"source":" For example, to enable authentication, set the <xref:System.Net.WebRequest.Credentials%2A?displayProperty=nameWithType> property to an instance of the <xref:System.Net.NetworkCredential> class:"},{"content":"Send the request to the server by calling <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.GetResponse%2A?displayProperty=nameWithType&gt;</ph>.","pos":[2026,2141],"source":"Send the request to the server by calling <xref:System.Net.WebRequest.GetResponse%2A?displayProperty=nameWithType>."},{"content":"This method returns an object containing the server's response.","pos":[2142,2205]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Net.WebResponse&gt;</ph> object's type is determined by the scheme of the request's URI.","pos":[2206,2312],"source":" The returned <xref:System.Net.WebResponse> object's type is determined by the scheme of the request's URI."},{"content":"For example:","pos":[2313,2325]},{"pos":[2497,2636],"content":"You can access the properties of your <ph id=\"ph1\">`WebResponse`</ph> object or cast it to a protocol-specific instance to read protocol-specific properties.","source":"You can access the properties of your `WebResponse` object or cast it to a protocol-specific instance to read protocol-specific properties."},{"content":"For example, to access the HTTP-specific properties of <ph id=\"ph1\">&lt;xref:System.Net.HttpWebResponse&gt;</ph>, cast your <ph id=\"ph2\">`WebResponse`</ph> object to an <ph id=\"ph3\">`HttpWebResponse`</ph> reference.","pos":[2643,2798],"source":"For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebResponse>, cast your `WebResponse` object to an `HttpWebResponse` reference."},{"content":"The following code example shows how to display the HTTP-specific <ph id=\"ph1\">&lt;xref:System.Net.HttpWebResponse.StatusDescription%2A?displayProperty=nameWithType&gt;</ph> property sent with a response:","pos":[2799,2979],"source":" The following code example shows how to display the HTTP-specific <xref:System.Net.HttpWebResponse.StatusDescription%2A?displayProperty=nameWithType> property sent with a response:"},{"content":"To get the stream containing response data sent by the server, call the <ph id=\"ph1\">&lt;xref:System.Net.WebResponse.GetResponseStream%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[3189,3348],"source":"To get the stream containing response data sent by the server, call the <xref:System.Net.WebResponse.GetResponseStream%2A?displayProperty=nameWithType> method."},{"content":"For example:","pos":[3349,3361]},{"content":"After you've read the data from the response object, either close it with the <ph id=\"ph1\">&lt;xref:System.Net.WebResponse.Close%2A?displayProperty=nameWithType&gt;</ph> method or close the response stream with the <ph id=\"ph2\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[3543,3803],"source":"After you've read the data from the response object, either close it with the <xref:System.Net.WebResponse.Close%2A?displayProperty=nameWithType> method or close the response stream with the <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> method."},{"content":"If you don't close either the response object or the stream, your application can run out of server connections and become unable to process additional requests.","pos":[3804,3965]},{"content":"Because the <ph id=\"ph1\">`WebResponse.Close`</ph> method calls <ph id=\"ph2\">`Stream.Close`</ph> when it closes the response, it's not necessary to call <ph id=\"ph3\">`Close`</ph> on both the response and stream objects, although doing so isn't harmful.","pos":[3966,4163],"source":" Because the `WebResponse.Close` method calls `Stream.Close` when it closes the response, it's not necessary to call `Close` on both the response and stream objects, although doing so isn't harmful."},{"content":"For example:","pos":[4164,4176]},{"pos":[4284,4291],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example shows how to create a request to a web server and read the data in its response:","pos":[4295,4402]},{"pos":[4715,4723],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4727,4786],"content":"<bpt id=\"p1\">[</bpt>Creating internet requests<ept id=\"p1\">](creating-internet-requests.md)</ept>","source":"[Creating internet requests](creating-internet-requests.md)"},{"pos":[4789,4852],"content":"<bpt id=\"p1\">[</bpt>Using Streams on the network<ept id=\"p1\">](using-streams-on-the-network.md)</ept>","source":"[Using Streams on the network](using-streams-on-the-network.md)"},{"pos":[4855,4938],"content":"<bpt id=\"p1\">[</bpt>Accessing the internet through a proxy<ept id=\"p1\">](accessing-the-internet-through-a-proxy.md)</ept>","source":"[Accessing the internet through a proxy](accessing-the-internet-through-a-proxy.md)"},{"pos":[4941,4978],"content":"<bpt id=\"p1\">[</bpt>Requesting data<ept id=\"p1\">](requesting-data.md)</ept>","source":"[Requesting data](requesting-data.md)"},{"pos":[4981,5078],"content":"<bpt id=\"p1\">[</bpt>How to: Send data by using the WebRequest class<ept id=\"p1\">](how-to-send-data-using-the-webrequest-class.md)</ept>","source":"[How to: Send data by using the WebRequest class](how-to-send-data-using-the-webrequest-class.md)"}]}