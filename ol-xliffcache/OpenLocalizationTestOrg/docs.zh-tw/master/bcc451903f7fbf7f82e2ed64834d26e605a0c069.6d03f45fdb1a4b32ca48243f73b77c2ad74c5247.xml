{"content":"---\ntitle: \"How to: Build a Multifile Assembly\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"assemblies [.NET Framework], multifile\"\n  - \"entry point for assembly\"\n  - \"compiling assemblies\"\n  - \"Al.exe\"\n  - \"command-line compilers\"\n  - \"assembly manifest, multifile assemblies\"\n  - \"assemblies [.NET Framework], compiling\"\n  - \"Assembly Linker\"\n  - \"code modules\"\n  - \"multifile assemblies\"\nms.assetid: 261c5583-8a76-412d-bda7-9b8ee3b131e5\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Build a Multifile Assembly\nThis article explains how to create a multifile assembly and provides code that illustrates each step in the procedure.\n\n> [!NOTE]\n> The Visual Studio IDE for C# and Visual Basic can only be used to create single-file assemblies. If you want to create multifile assemblies, you must use the command-line compilers or Visual Studio with Visual C++.\n\n### To create a multifile assembly\n\n01. Compile all files that contain namespaces referenced by other modules in the assembly into code modules. The default extension for code modules is .netmodule.\n\n    For example, let's say the `Stringer` file has a namespace called `myStringer`, which includes a class called `Stringer`. The `Stringer` class contains a method called `StringerMethod` that writes a single line to the console.\n\n    [!code-cpp[Conceptual.Assembly.Multifile#1](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/stringer.cpp#1)]\n    [!code-csharp[Conceptual.Assembly.Multifile#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/stringer.cs#1)]\n    [!code-vb[Conceptual.Assembly.Multifile#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/stringer.vb#1)]\n\n    Use the following command to compile this code:\n\n    [!code-cpp[Conceptual.Assembly.Multifile#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/stringer.cpp#2)]\n    [!code-csharp[Conceptual.Assembly.Multifile#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/stringer.cs#2)]\n    [!code-vb[Conceptual.Assembly.Multifile#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/stringer.vb#2)]\n\n    Specifying the *module* parameter with the **/t:** compiler option indicates that the file should be compiled as a module rather than as an assembly. The compiler produces a module called `Stringer.netmodule`, which can be added to an assembly.\n\n02. Compile all other modules, using the necessary compiler options to indicate the other modules that are referenced in the code. This step uses the **/addmodule** compiler option.\n\n    In the following example, a code module called `Client` has an entry point `Main` method that references a method in the `Stringer.dll` module created in step 1.\n\n    [!code-cpp[Conceptual.Assembly.Multifile#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/client.cpp#3)]\n    [!code-csharp[Conceptual.Assembly.Multifile#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/client.cs#3)]\n    [!code-vb[Conceptual.Assembly.Multifile#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/client.vb#3)]\n\n    Use the following command to compile this code:\n\n    [!code-cpp[Conceptual.Assembly.Multifile#4](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/client.cpp#4)]\n    [!code-csharp[Conceptual.Assembly.Multifile#4](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/client.cs#4)]\n    [!code-vb[Conceptual.Assembly.Multifile#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/client.vb#4)]\n\n    Specify the **/t:module** option because this module will be added to an assembly in a future step. Specify the **/addmodule** option because the code in `Client` references a namespace created by the code in `Stringer.netmodule`. The compiler produces a module called `Client.netmodule` that contains a reference to another module, `Stringer.netmodule`.\n\n    >[!NOTE]\n    >The C# and Visual Basic compilers support directly creating multifile assemblies using the following two different syntaxes.\n    >\n    >- Two compilations create a two-file assembly:\n    >\n    >    [!code-cpp[Conceptual.Assembly.Multifile#5](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/client.cpp#5)]\n    >    [!code-csharp[Conceptual.Assembly.Multifile#5](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/client.cs#5)]\n    >    [!code-vb[Conceptual.Assembly.Multifile#5](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/client.vb#5)]\n    >\n    >- One compilation creates a two-file assembly:\n    >\n    >    [!code-cpp[Conceptual.Assembly.Multifile#6](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/client.cpp#6)]\n    >    [!code-csharp[Conceptual.Assembly.Multifile#6](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/client.cs#6)]\n    >    [!code-vb[Conceptual.Assembly.Multifile#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/client.vb#6)]\n\n03. Use the [Assembly Linker (Al.exe)](../../../docs/framework/tools/al-exe-assembly-linker.md) to create the output file that contains the assembly manifest. This file contains reference information for all modules or resources that are part of the assembly.\n\n    At the command prompt, type the following command:\n\n    **al** \\<*module name*> \\<*module name*> â€¦ **/main:**\\<*method name*> **/out:**\\<*file name*> **/target:**\\<*assembly file type*>\n\n    In this command, the *module name* arguments specify the name of each module to include in the assembly. The **/main:** option specifies the method name that is the assembly's entry point. The **/out:** option specifies the name of the output file, which contains assembly metadata. The **/target:** option specifies that the assembly is a console application executable (.exe) file, a Windows executable (.win) file, or a library (.lib) file.\n\n    In the following example, Al.exe creates an assembly that is a console application executable called `myAssembly.exe`. The application consists of two modules called `Client.netmodule` and `Stringer.netmodule`, and the executable file called `myAssembly.exe,` which contains only assembly metadata. The entry point of the assembly is the `Main` method in the class `MainClientApp`, which is located in `Client.dll`.\n\n    ```\n    al Client.netmodule Stringer.netmodule /main:MainClientApp.Main /out:myAssembly.exe /target:exe\n    ```\n\n    You can use the [MSIL Disassembler (Ildasm.exe)](../../../docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the contents of an assembly, or determine whether a file is an assembly or a module.\n\n## See also\n\n- [Creating Assemblies](../../../docs/framework/app-domains/create-assemblies.md)\n- [How to: View Assembly Contents](../../../docs/framework/app-domains/how-to-view-assembly-contents.md)\n- [How the Runtime Locates Assemblies](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)\n- [Multifile Assemblies](../../../docs/framework/app-domains/multifile-assemblies.md)\n","nodes":[{"pos":[4,528],"embed":true,"restype":"x-metadata","content":"title: \"How to: Build a Multifile Assembly\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"assemblies [.NET Framework], multifile\"\n  - \"entry point for assembly\"\n  - \"compiling assemblies\"\n  - \"Al.exe\"\n  - \"command-line compilers\"\n  - \"assembly manifest, multifile assemblies\"\n  - \"assemblies [.NET Framework], compiling\"\n  - \"Assembly Linker\"\n  - \"code modules\"\n  - \"multifile assemblies\"\nms.assetid: 261c5583-8a76-412d-bda7-9b8ee3b131e5\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Build a Multifile Assembly","nodes":[{"pos":[0,34],"content":"How to: Build a Multifile Assembly","nodes":[{"content":"How to: Build a Multifile Assembly","pos":[0,34]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[535,569],"content":"How to: Build a Multifile Assembly","linkify":"How to: Build a Multifile Assembly","nodes":[{"content":"How to: Build a Multifile Assembly","pos":[0,34]}]},{"content":"This article explains how to create a multifile assembly and provides code that illustrates each step in the procedure.","pos":[570,689]},{"pos":[693,917],"content":"[!NOTE]\nThe Visual Studio IDE for C# and Visual Basic can only be used to create single-file assemblies. If you want to create multifile assemblies, you must use the command-line compilers or Visual Studio with Visual C++.","leadings":["","> "],"nodes":[{"content":"The Visual Studio IDE for C# and Visual Basic can only be used to create single-file assemblies. If you want to create multifile assemblies, you must use the command-line compilers or Visual Studio with Visual C++.","pos":[8,222],"nodes":[{"content":"The Visual Studio IDE for C# and Visual Basic can only be used to create single-file assemblies.","pos":[0,96]},{"content":"If you want to create multifile assemblies, you must use the command-line compilers or Visual Studio with Visual C++.","pos":[97,214]}]}]},{"pos":[923,953],"content":"To create a multifile assembly","linkify":"To create a multifile assembly","nodes":[{"content":"To create a multifile assembly","pos":[0,30]}]},{"content":"Compile all files that contain namespaces referenced by other modules in the assembly into code modules.","pos":[959,1063]},{"content":"The default extension for code modules is .netmodule.","pos":[1064,1117]},{"content":"For example, let's say the <ph id=\"ph1\">`Stringer`</ph> file has a namespace called <ph id=\"ph2\">`myStringer`</ph>, which includes a class called <ph id=\"ph3\">`Stringer`</ph>.","pos":[1123,1244],"source":"For example, let's say the `Stringer` file has a namespace called `myStringer`, which includes a class called `Stringer`."},{"content":"The <ph id=\"ph1\">`Stringer`</ph> class contains a method called <ph id=\"ph2\">`StringerMethod`</ph> that writes a single line to the console.","pos":[1245,1349],"source":" The `Stringer` class contains a method called `StringerMethod` that writes a single line to the console."},{"pos":[1355,1794],"content":"[!code-cpp[Conceptual.Assembly.Multifile#1](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/stringer.cpp#1)]\n[!code-csharp[Conceptual.Assembly.Multifile#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/stringer.cs#1)]\n[!code-vb[Conceptual.Assembly.Multifile#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/stringer.vb#1)]","leadings":["","    ","    "],"nodes":[]},{"content":"Use the following command to compile this code:","pos":[1800,1847]},{"pos":[1853,2292],"content":"[!code-cpp[Conceptual.Assembly.Multifile#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/stringer.cpp#2)]\n[!code-csharp[Conceptual.Assembly.Multifile#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/stringer.cs#2)]\n[!code-vb[Conceptual.Assembly.Multifile#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/stringer.vb#2)]","leadings":["","    ","    "],"nodes":[]},{"content":"Specifying the <bpt id=\"p1\">*</bpt>module<ept id=\"p1\">*</ept> parameter with the <bpt id=\"p2\">**</bpt>/t:<ept id=\"p2\">**</ept> compiler option indicates that the file should be compiled as a module rather than as an assembly.","pos":[2298,2447],"source":"Specifying the *module* parameter with the **/t:** compiler option indicates that the file should be compiled as a module rather than as an assembly."},{"content":"The compiler produces a module called <ph id=\"ph1\">`Stringer.netmodule`</ph>, which can be added to an assembly.","pos":[2448,2542],"source":" The compiler produces a module called `Stringer.netmodule`, which can be added to an assembly."},{"content":"Compile all other modules, using the necessary compiler options to indicate the other modules that are referenced in the code.","pos":[2548,2674]},{"content":"This step uses the <bpt id=\"p1\">**</bpt>/addmodule<ept id=\"p1\">**</ept> compiler option.","pos":[2675,2725],"source":" This step uses the **/addmodule** compiler option."},{"pos":[2731,2892],"content":"In the following example, a code module called <ph id=\"ph1\">`Client`</ph> has an entry point <ph id=\"ph2\">`Main`</ph> method that references a method in the <ph id=\"ph3\">`Stringer.dll`</ph> module created in step 1.","source":"In the following example, a code module called `Client` has an entry point `Main` method that references a method in the `Stringer.dll` module created in step 1."},{"pos":[2898,3331],"content":"[!code-cpp[Conceptual.Assembly.Multifile#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/client.cpp#3)]\n[!code-csharp[Conceptual.Assembly.Multifile#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/client.cs#3)]\n[!code-vb[Conceptual.Assembly.Multifile#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/client.vb#3)]","leadings":["","    ","    "],"nodes":[]},{"content":"Use the following command to compile this code:","pos":[3337,3384]},{"pos":[3390,3823],"content":"[!code-cpp[Conceptual.Assembly.Multifile#4](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/client.cpp#4)]\n[!code-csharp[Conceptual.Assembly.Multifile#4](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/client.cs#4)]\n[!code-vb[Conceptual.Assembly.Multifile#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/client.vb#4)]","leadings":["","    ","    "],"nodes":[]},{"content":"Specify the <bpt id=\"p1\">**</bpt>/t:module<ept id=\"p1\">**</ept> option because this module will be added to an assembly in a future step.","pos":[3829,3928],"source":"Specify the **/t:module** option because this module will be added to an assembly in a future step."},{"content":"Specify the <bpt id=\"p1\">**</bpt>/addmodule<ept id=\"p1\">**</ept> option because the code in <ph id=\"ph1\">`Client`</ph> references a namespace created by the code in <ph id=\"ph2\">`Stringer.netmodule`</ph>.","pos":[3929,4059],"source":" Specify the **/addmodule** option because the code in `Client` references a namespace created by the code in `Stringer.netmodule`."},{"content":"The compiler produces a module called <ph id=\"ph1\">`Client.netmodule`</ph> that contains a reference to another module, <ph id=\"ph2\">`Stringer.netmodule`</ph>.","pos":[4060,4183],"source":" The compiler produces a module called `Client.netmodule` that contains a reference to another module, `Stringer.netmodule`."},{"pos":[4190,4327],"content":"[!NOTE]\nThe C# and Visual Basic compilers support directly creating multifile assemblies using the following two different syntaxes.","leadings":["","    >"],"nodes":[{"content":"The C# and Visual Basic compilers support directly creating multifile assemblies using the following two different syntaxes.","pos":[8,132]}]},{"content":"Two compilations create a two-file assembly:","pos":[4341,4385]},{"pos":[4401,4844],"content":"[!code-cpp[Conceptual.Assembly.Multifile#5](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/client.cpp#5)]\n [!code-csharp[Conceptual.Assembly.Multifile#5](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/client.cs#5)]\n [!code-vb[Conceptual.Assembly.Multifile#5](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/client.vb#5)]","leadings":["","    >   ","    >   "],"nodes":[]},{"content":"One compilation creates a two-file assembly:","pos":[4858,4902]},{"pos":[4918,5361],"content":"[!code-cpp[Conceptual.Assembly.Multifile#6](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.assembly.multifile/cpp/client.cpp#6)]\n [!code-csharp[Conceptual.Assembly.Multifile#6](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.assembly.multifile/cs/client.cs#6)]\n [!code-vb[Conceptual.Assembly.Multifile#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.assembly.multifile/vb/client.vb#6)]","leadings":["","    >   ","    >   "],"nodes":[]},{"content":"Use the <bpt id=\"p1\">[</bpt>Assembly Linker (Al.exe)<ept id=\"p1\">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> to create the output file that contains the assembly manifest.","pos":[5367,5521],"source":"Use the [Assembly Linker (Al.exe)](../../../docs/framework/tools/al-exe-assembly-linker.md) to create the output file that contains the assembly manifest."},{"content":"This file contains reference information for all modules or resources that are part of the assembly.","pos":[5522,5622]},{"content":"At the command prompt, type the following command:","pos":[5628,5678]},{"content":"<bpt id=\"p1\">**</bpt>al<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph><bpt id=\"p2\">*</bpt>module name<ept id=\"p2\">*</ept><ph id=\"ph2\">&gt; </ph><ph id=\"ph3\">\\&lt;</ph><bpt id=\"p3\">*</bpt>module name<ept id=\"p3\">*</ept>&gt; â€¦","pos":[5684,5726],"source":"**al** \\<*module name*> \\<*module name*> â€¦"},{"content":"<bpt id=\"p1\">**</bpt>/main:<ept id=\"p1\">**</ept><ph id=\"ph1\">\\&lt;</ph><bpt id=\"p2\">*</bpt>method name<ept id=\"p2\">*</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p3\">**</bpt>/out:<ept id=\"p3\">**</ept><ph id=\"ph3\">\\&lt;</ph><bpt id=\"p4\">*</bpt>file name<ept id=\"p4\">*</ept><ph id=\"ph4\">&gt; </ph><bpt id=\"p5\">**</bpt>/target:<ept id=\"p5\">**</ept><ph id=\"ph5\">\\&lt;</ph><bpt id=\"p6\">*</bpt>assembly file type<ept id=\"p6\">*</ept><ph id=\"ph6\">&gt;</ph>","pos":[5727,5813],"source":"**/main:**\\<*method name*> **/out:**\\<*file name*> **/target:**\\<*assembly file type*>"},{"content":"In this command, the <bpt id=\"p1\">*</bpt>module name<ept id=\"p1\">*</ept> arguments specify the name of each module to include in the assembly.","pos":[5819,5923],"source":"In this command, the *module name* arguments specify the name of each module to include in the assembly."},{"content":"The <bpt id=\"p1\">**</bpt>/main:<ept id=\"p1\">**</ept> option specifies the method name that is the assembly's entry point.","pos":[5924,6007],"source":" The **/main:** option specifies the method name that is the assembly's entry point."},{"content":"The <bpt id=\"p1\">**</bpt>/out:<ept id=\"p1\">**</ept> option specifies the name of the output file, which contains assembly metadata.","pos":[6008,6101],"source":" The **/out:** option specifies the name of the output file, which contains assembly metadata."},{"content":"The <bpt id=\"p1\">**</bpt>/target:<ept id=\"p1\">**</ept> option specifies that the assembly is a console application executable (.exe) file, a Windows executable (.win) file, or a library (.lib) file.","pos":[6102,6262],"source":" The **/target:** option specifies that the assembly is a console application executable (.exe) file, a Windows executable (.win) file, or a library (.lib) file."},{"content":"In the following example, Al.exe creates an assembly that is a console application executable called <ph id=\"ph1\">`myAssembly.exe`</ph>.","pos":[6268,6386],"source":"In the following example, Al.exe creates an assembly that is a console application executable called `myAssembly.exe`."},{"content":"The application consists of two modules called <ph id=\"ph1\">`Client.netmodule`</ph> and <ph id=\"ph2\">`Stringer.netmodule`</ph>, and the executable file called <ph id=\"ph3\">`myAssembly.exe,`</ph> which contains only assembly metadata.","pos":[6387,6566],"source":" The application consists of two modules called `Client.netmodule` and `Stringer.netmodule`, and the executable file called `myAssembly.exe,` which contains only assembly metadata."},{"content":"The entry point of the assembly is the <ph id=\"ph1\">`Main`</ph> method in the class <ph id=\"ph2\">`MainClientApp`</ph>, which is located in <ph id=\"ph3\">`Client.dll`</ph>.","pos":[6567,6683],"source":" The entry point of the assembly is the `Main` method in the class `MainClientApp`, which is located in `Client.dll`."},{"pos":[6806,7011],"content":"You can use the <bpt id=\"p1\">[</bpt>MSIL Disassembler (Ildasm.exe)<ept id=\"p1\">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the contents of an assembly, or determine whether a file is an assembly or a module.","source":"You can use the [MSIL Disassembler (Ildasm.exe)](../../../docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the contents of an assembly, or determine whether a file is an assembly or a module."},{"pos":[7016,7024],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7028,7107],"content":"<bpt id=\"p1\">[</bpt>Creating Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/create-assemblies.md)</ept>","source":"[Creating Assemblies](../../../docs/framework/app-domains/create-assemblies.md)"},{"pos":[7110,7212],"content":"<bpt id=\"p1\">[</bpt>How to: View Assembly Contents<ept id=\"p1\">](../../../docs/framework/app-domains/how-to-view-assembly-contents.md)</ept>","source":"[How to: View Assembly Contents](../../../docs/framework/app-domains/how-to-view-assembly-contents.md)"},{"pos":[7215,7325],"content":"<bpt id=\"p1\">[</bpt>How the Runtime Locates Assemblies<ept id=\"p1\">](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept>","source":"[How the Runtime Locates Assemblies](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)"},{"pos":[7328,7411],"content":"<bpt id=\"p1\">[</bpt>Multifile Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/multifile-assemblies.md)</ept>","source":"[Multifile Assemblies](../../../docs/framework/app-domains/multifile-assemblies.md)"}]}