<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="configuring-bindings-for-wcf-services.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">009011100af86e315aa41beb822b1448e2f21b25</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\configuring-bindings-for-wcf-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbdf53b8325ec998e311963f993c6303150c25df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b3e0071b23a4fea9ed9f2cfcc20f63655229ad1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Configuring Bindings for Windows Communication Foundation Services</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Configuring Bindings for Windows Communication Foundation Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When creating an application, you often want to defer decisions to the administrator after the deployment of the application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, there is often no way of knowing in advance what a service address, or Uniform Resource Identifier (URI), will be.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Instead of hard-coding an address, it is preferable to allow an administrator to do so after creating a service.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This flexibility is accomplished through configuration.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> with the <ph id="ph1">`/config`</ph> switch to quickly create configuration files.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Major Sections</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Windows Communication Foundation (WCF) configuration scheme includes the following three major sections (<ph id="ph1">`serviceModel`</ph>, <ph id="ph2">`bindings`</ph>, and <ph id="ph3">`services`</ph>):</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>ServiceModel Elements</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the section bounded by the <ph id="ph1">`system.ServiceModel`</ph> element to configure a service type with one or more endpoints, as well as settings for a service.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each endpoint can then be configured with an address, a contract, and a binding.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about endpoints, see <bpt id="p1">[</bpt>Endpoint Creation Overview<ept id="p1">](../../../docs/framework/wcf/endpoint-creation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If no endpoints are specified, the runtime adds default endpoints.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about default endpoints, bindings, and behaviors, see <bpt id="p1">[</bpt>Simplified Configuration<ept id="p1">](../../../docs/framework/wcf/simplified-configuration.md)</ept> and <bpt id="p2">[</bpt>Simplified Configuration for WCF Services<ept id="p2">](../../../docs/framework/wcf/samples/simplified-configuration-for-wcf-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A binding specifies transports (HTTP, TCP, pipes, Message Queuing) and protocols (Security, Reliability, Transaction flows) and consists of binding elements, each of which specifies an aspect of how an endpoint communicates with the world.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, specifying the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>basicHttpBinding&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/wcf/basichttpbinding.md)</ept> element indicates to use HTTP as the transport for an endpoint.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is used to wire up the endpoint at run time when the service using this endpoint is opened.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There are two kinds of bindings: predefined and custom.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Predefined bindings contain useful combinations of elements that are used in common scenarios.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For a list of predefined binding types that WCF provides, see <bpt id="p1">[</bpt>System-Provided Bindings<ept id="p1">](../../../docs/framework/wcf/system-provided-bindings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If no predefined binding collection has the correct combination of features that a service application needs, you can construct custom bindings to meet the application's requirements.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information about custom bindings, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>customBinding&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following four examples illustrate the most common binding configurations used for setting up a WCF service.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifying an Endpoint to Use a Binding Type</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first example illustrates how to specify an endpoint configured with an address, a contract, and a binding.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`name`</ph> attribute indicates which service type the configuration is for.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When you create a service in your code with the <ph id="ph1">`HelloWorld`</ph> contract, it is initialized with all of the endpoints defined in the example configuration.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the assembly implements only one service contract, the <ph id="ph1">`name`</ph> attribute can be omitted because the service uses the only available type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The attribute takes a string, which must be in the format <ph id="ph1">`Namespace.Class, AssemblyName, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`address`</ph> attribute specifies the URI that other endpoints use to communicate to the service.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The URI can be either an absolute or relative path.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If a relative address is provided, the host is expected to provide a base address that is appropriate for the transport scheme used in the binding.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If an address is not configured, the base address is assumed to be the address for that endpoint.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`contract`</ph> attribute specifies the contract this endpoint is exposing.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The service implementation type must implement the contract type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a service implementation implements a single contract type, then this property can be omitted.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`binding`</ph> attribute selects a predefined or custom binding to use for this specific endpoint.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An endpoint that does not explicitly select a binding uses the default binding selection, which is <ph id="ph1">`BasicHttpBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Modifying a Predefined Binding</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the following example, a predefined binding is modified.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It can then be used to configure any endpoint in the service.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The binding is modified by setting the <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.IBindingConfigurationElement.ReceiveTimeout%2A&gt;</ph> value to 1 second.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Note that the property returns a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>That altered binding is found in the bindings section.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This altered binding can now be used when creating any endpoint by setting the <ph id="ph1">`binding`</ph> attribute in the <ph id="ph2">`endpoint`</ph> element.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you give a particular name to the binding, the <ph id="ph1">`bindingConfiguration`</ph> specified in the service endpoint must match with it.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Configuring a Behavior to Apply to a Service</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the following example, a specific behavior is configured for the service type.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ServiceMetadataBehavior`</ph> element is used to enable the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to query the service and generate Web Services Description Language (WSDL) documents from the metadata.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you give a particular name to the behavior, the <ph id="ph1">`behaviorConfiguration`</ph> specified in the service or endpoint section must match it.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The preceding configuration enables a client to call and get the metadata of the "HelloWorld" typed service.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Specifying a Service with Two Endpoints Using Different Binding Values</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In this last example, two endpoints are configured for the <ph id="ph1">`HelloWorld`</ph> service type.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Each endpoint uses a different customized  <ph id="ph1">`bindingConfiguration`</ph> attribute of the same binding type (each modifies the <ph id="ph2">`basicHttpBinding`</ph>).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can get the same behavior using the default configuration by adding a <ph id="ph1">`protocolMapping`</ph> section and configuring the bindings as demonstrated in the following example.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Simplified Configuration<ept id="p1">](../../../docs/framework/wcf/simplified-configuration.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System-Provided Bindings<ept id="p1">](../../../docs/framework/wcf/system-provided-bindings.md)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Endpoint Creation Overview<ept id="p1">](../../../docs/framework/wcf/endpoint-creation-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Bindings to Configure Services and Clients<ept id="p1">](../../../docs/framework/wcf/using-bindings-to-configure-services-and-clients.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>