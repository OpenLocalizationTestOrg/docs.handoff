{"content":"---\ntitle: \"How to: Use Pointers to Copy an Array of Bytes  - C# Programming Guide\"\nms.custom: seodec18\nms.date: 04/20/2018\nhelpviewer_keywords: \n  - \"byte arrays [C#]\"\n  - \"arrays [C#], byte\"\n  - \"pointers [C#], to copy bytes\"\n---\n# How to: Use Pointers to Copy an Array of Bytes  (C# Programming Guide)\n\nThe following example uses pointers to copy bytes from one array to another.\n\nThis example uses the [unsafe](../../language-reference/keywords/unsafe.md) keyword, which enables you to use pointers in the `Copy` method. The [fixed](../../language-reference/keywords/fixed-statement.md) statement is used to declare pointers to the source and destination arrays. The `fixed` statement *pins* the location of the source and destination arrays in memory so that they will not be moved by garbage collection. The memory blocks for the arrays are unpinned when the `fixed` block is completed. Because the `Copy` method in this example uses the `unsafe` keyword, it must be compiled with the [-unsafe](../../language-reference/compiler-options/unsafe-compiler-option.md) compiler option.\n\nThis example accesses the elements of both arrays using indices rather than a second unmanaged pointer. The declaration of the `pSource` and `pTarget` pointers pins the arrays. This feature is available starting with C# 7.3.\n\n## Example\n\n[!code-csharp[Struct with embedded inline array](../../../../samples/snippets/csharp/keywords/FixedKeywordExamples.cs#8)]\n\n## See also\n\n- [C# Programming Guide](../index.md)\n- [Unsafe Code and Pointers](index.md)\n- [-unsafe (C# Compiler Options)](../../language-reference/compiler-options/unsafe-compiler-option.md)\n- [Garbage Collection](../../../standard/garbage-collection/index.md)\n","nodes":[{"pos":[4,227],"embed":true,"restype":"x-metadata","content":"title: \"How to: Use Pointers to Copy an Array of Bytes  - C# Programming Guide\"\nms.custom: seodec18\nms.date: 04/20/2018\nhelpviewer_keywords: \n  - \"byte arrays [C#]\"\n  - \"arrays [C#], byte\"\n  - \"pointers [C#], to copy bytes\"","nodes":[{"content":"How to: Use Pointers to Copy an Array of Bytes  - C# Programming Guide","nodes":[{"pos":[0,70],"content":"How to: Use Pointers to Copy an Array of Bytes  - C# Programming Guide","nodes":[{"content":"How to: Use Pointers to Copy an Array of Bytes  - C# Programming Guide","pos":[0,70]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[234,304],"content":"How to: Use Pointers to Copy an Array of Bytes  (C# Programming Guide)","linkify":"How to: Use Pointers to Copy an Array of Bytes  (C# Programming Guide)","nodes":[{"content":"How to: Use Pointers to Copy an Array of Bytes  (C# Programming Guide)","pos":[0,70]}]},{"content":"The following example uses pointers to copy bytes from one array to another.","pos":[306,382]},{"content":"This example uses the <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../language-reference/keywords/unsafe.md)</ept> keyword, which enables you to use pointers in the <ph id=\"ph1\">`Copy`</ph> method.","pos":[384,524],"source":"This example uses the [unsafe](../../language-reference/keywords/unsafe.md) keyword, which enables you to use pointers in the `Copy` method."},{"content":"The <bpt id=\"p1\">[</bpt>fixed<ept id=\"p1\">](../../language-reference/keywords/fixed-statement.md)</ept> statement is used to declare pointers to the source and destination arrays.","pos":[525,666],"source":" The [fixed](../../language-reference/keywords/fixed-statement.md) statement is used to declare pointers to the source and destination arrays."},{"content":"The <ph id=\"ph1\">`fixed`</ph> statement <bpt id=\"p1\">*</bpt>pins<ept id=\"p1\">*</ept> the location of the source and destination arrays in memory so that they will not be moved by garbage collection.","pos":[667,809],"source":" The `fixed` statement *pins* the location of the source and destination arrays in memory so that they will not be moved by garbage collection."},{"content":"The memory blocks for the arrays are unpinned when the <ph id=\"ph1\">`fixed`</ph> block is completed.","pos":[810,892],"source":" The memory blocks for the arrays are unpinned when the `fixed` block is completed."},{"content":"Because the <ph id=\"ph1\">`Copy`</ph> method in this example uses the <ph id=\"ph2\">`unsafe`</ph> keyword, it must be compiled with the <bpt id=\"p1\">[</bpt>-unsafe<ept id=\"p1\">](../../language-reference/compiler-options/unsafe-compiler-option.md)</ept> compiler option.","pos":[893,1086],"source":" Because the `Copy` method in this example uses the `unsafe` keyword, it must be compiled with the [-unsafe](../../language-reference/compiler-options/unsafe-compiler-option.md) compiler option."},{"content":"This example accesses the elements of both arrays using indices rather than a second unmanaged pointer.","pos":[1088,1191]},{"content":"The declaration of the <ph id=\"ph1\">`pSource`</ph> and <ph id=\"ph2\">`pTarget`</ph> pointers pins the arrays.","pos":[1192,1264],"source":" The declaration of the `pSource` and `pTarget` pointers pins the arrays."},{"content":"This feature is available starting with C# 7.3.","pos":[1265,1312]},{"pos":[1317,1324],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1452,1460],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1464,1499],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[1502,1538],"content":"<bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](index.md)</ept>","source":"[Unsafe Code and Pointers](index.md)"},{"pos":[1541,1641],"content":"<bpt id=\"p1\">[</bpt>-unsafe (C# Compiler Options)<ept id=\"p1\">](../../language-reference/compiler-options/unsafe-compiler-option.md)</ept>","source":"[-unsafe (C# Compiler Options)](../../language-reference/compiler-options/unsafe-compiler-option.md)"},{"pos":[1644,1711],"content":"<bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](../../../standard/garbage-collection/index.md)</ept>","source":"[Garbage Collection](../../../standard/garbage-collection/index.md)"}]}