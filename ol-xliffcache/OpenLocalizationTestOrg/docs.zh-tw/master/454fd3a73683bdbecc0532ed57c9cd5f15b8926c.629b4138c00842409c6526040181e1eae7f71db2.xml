{"content":"---\ntitle: \"Defining an Event in Windows Forms Controls | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"events [Windows Forms], defining within Windows Forms custom controls\"\n  - \"custom controls [Windows Forms], events using code\"\nms.assetid: d89f1096-8061-42e2-a855-a1f053f1940a\ncaps.latest.revision: 10\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Defining an Event in Windows Forms Controls\nFor details about defining custom events, see [Events](../../../../docs/standard/events/index.md). If you define an event that does not have any associated data, use the base type for event data, <xref:System.EventArgs>, and use <xref:System.EventHandler> as the event delegate. All that remains to do is to define an event member and a protected `On`*EventName* method that raises the event.  \n  \n The following code fragment shows how the `FlashTrackBar` custom control defines a custom event, `ValueChanged`. For the complete code for the `FlashTrackBar` sample, see the [How to: Create a Windows Forms Control That Shows Progress](../../../../docs/framework/winforms/controls/how-to-create-a-windows-forms-control-that-shows-progress.md).  \n  \n```vb  \nOption Explicit  \nOption Strict  \n  \nImports System  \nImports System.Windows.Forms  \nImports System.Drawing  \n  \nPublic Class FlashTrackBar  \n   Inherits Control  \n  \n   ' The event does not have any data, so EventHandler is adequate   \n   ' as the event delegate.          \n   ' Define the event member using the event keyword.  \n   ' In this case, for efficiency, the event is defined   \n   ' using the event property construct.  \n   Public Event ValueChanged As EventHandler  \n   ' The protected method that raises the ValueChanged   \n   ' event when the value has actually   \n   ' changed. Derived controls can override this method.    \n   Protected Overridable Sub OnValueChanged(e As EventArgs)  \n      RaiseEvent ValueChanged(Me, e)  \n   End Sub  \nEnd Class  \n```  \n  \n```csharp  \nusing System;  \nusing System.Windows.Forms;  \nusing System.Drawing;  \n  \npublic class FlashTrackBar : Control {  \n   // The event does not have any data, so EventHandler is adequate   \n   // as the event delegate.  \n   private EventHandler onValueChanged;  \n   // Define the event member using the event keyword.  \n   // In this case, for efficiency, the event is defined   \n   // using the event property construct.  \n   public event EventHandler ValueChanged {  \n            add {  \n                onValueChanged += value;  \n            }  \n            remove {  \n                onValueChanged -= value;  \n            }  \n        }  \n   // The protected method that raises the ValueChanged  \n   // event when the value has actually   \n   // changed. Derived controls can override this method.    \n   protected virtual void OnValueChanged(EventArgs e) {  \n      if (ValueChanged != null) {  \n         ValueChanged(this, e);  \n      }  \n   }  \n}  \n```  \n  \n## See Also  \n [Events in Windows Forms Controls](../../../../docs/framework/winforms/controls/events-in-windows-forms-controls.md)   \n [Events](../../../../docs/standard/events/index.md)   \n [Events](../../../../docs/standard/events/index.md)","nodes":[{"pos":[4,558],"nodes":[{"content":"Defining an Event in Windows Forms Controls | Microsoft Docs","nodes":[{"pos":[0,60],"content":"Defining an Event in Windows Forms Controls | Microsoft Docs","nodes":[{"content":"Defining an Event in Windows Forms Controls | Microsoft Docs","pos":[0,60]}]}],"pos":[6,69],"yaml":true}],"content":"title: \"Defining an Event in Windows Forms Controls | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"events [Windows Forms], defining within Windows Forms custom controls\"\n  - \"custom controls [Windows Forms], events using code\"\nms.assetid: d89f1096-8061-42e2-a855-a1f053f1940a\ncaps.latest.revision: 10\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","yamlblock":true},{"pos":[565,608],"content":"Defining an Event in Windows Forms Controls","linkify":"Defining an Event in Windows Forms Controls","nodes":[{"content":"Defining an Event in Windows Forms Controls","pos":[0,43]}]},{"content":"For details about defining custom events, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../../docs/standard/events/index.md)</ept>.","pos":[609,707],"source":"For details about defining custom events, see [Events](../../../../docs/standard/events/index.md)."},{"content":"If you define an event that does not have any associated data, use the base type for event data, <ph id=\"ph1\">&lt;xref:System.EventArgs&gt;</ph>, and use <ph id=\"ph2\">&lt;xref:System.EventHandler&gt;</ph> as the event delegate.","pos":[708,887],"source":" If you define an event that does not have any associated data, use the base type for event data, <xref:System.EventArgs>, and use <xref:System.EventHandler> as the event delegate."},{"content":"All that remains to do is to define an event member and a protected <ph id=\"ph1\">`On`</ph><bpt id=\"p1\">*</bpt>EventName<ept id=\"p1\">*</ept> method that raises the event.","pos":[888,1001],"source":" All that remains to do is to define an event member and a protected `On`*EventName* method that raises the event."},{"content":"The following code fragment shows how the <ph id=\"ph1\">`FlashTrackBar`</ph> custom control defines a custom event, <ph id=\"ph2\">`ValueChanged`</ph>.","pos":[1008,1120],"source":"The following code fragment shows how the `FlashTrackBar` custom control defines a custom event, `ValueChanged`."},{"content":"For the complete code for the <ph id=\"ph1\">`FlashTrackBar`</ph> sample, see the <bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.","pos":[1121,1351],"source":" For the complete code for the `FlashTrackBar` sample, see the [How to: Create a Windows Forms Control That Shows Progress](../../../../docs/framework/winforms/controls/how-to-create-a-windows-forms-control-that-shows-progress.md)."},{"pos":[3115,3123],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Events in Windows Forms Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/events-in-windows-forms-controls.md)</ept><ph id=\"ph1\"> </ph>","pos":[3127,3244],"source":"[Events in Windows Forms Controls](../../../../docs/framework/winforms/controls/events-in-windows-forms-controls.md) "},{"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../../docs/standard/events/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3248,3300],"source":"[Events](../../../../docs/standard/events/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../../docs/standard/events/index.md)</ept>","pos":[3304,3355],"source":"[Events](../../../../docs/standard/events/index.md)"}]}