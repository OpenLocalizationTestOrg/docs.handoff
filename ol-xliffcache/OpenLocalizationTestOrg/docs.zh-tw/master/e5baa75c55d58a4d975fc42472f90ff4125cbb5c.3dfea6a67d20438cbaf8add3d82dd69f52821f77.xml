{"content":"---\ntitle: \"where (generic type constraint) (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"whereconstraint\"\n  - \"whereconstraint_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"where (generic type constraint) [C#]\"\nms.assetid: d7aa871b-0714-416a-bab2-96f87ada4310\ncaps.latest.revision: 10\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# where (generic type constraint) (C# Reference)\nIn a generic type definition, the `where` clause is used to specify constraints on the types that can be used as arguments for a type parameter defined in a generic declaration. For example, you can declare a generic class, `MyGenericClass`, such that the type parameter `T` implements the <xref:System.IComparable%601> interface:  \n  \n```csharp  \npublic class MyGenericClass<T> where T:IComparable { }  \n```  \n  \n> [!NOTE]\n>  For more information on the where clause in a query expression, see [where clause](../../../csharp/language-reference/keywords/where-clause.md).  \n  \n In addition to interface constraints, a `where` clause can include a base class constraint, which states that a type must have the specified class as a base class (or be that class itself) in order to be used as a type argument for that generic type. If such a constraint is used, it must appear before any other constraints on that type parameter.  \n  \n [!code-cs[csrefKeywordsContextual#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-generic-type-constraint_1.cs)]  \n  \n The `where` clause may also include a constructor constraint. It is possible to create an instance of a type parameter using the new operator; however, in order to do so the type parameter must be constrained by the constructor constraint, `new()`. The [new() Constraint](../../../csharp/language-reference/keywords/new-constraint.md) lets the compiler know that any type argument supplied must have an accessible parameterless--or default-- constructor. For example:  \n  \n [!code-cs[csrefKeywordsContextual#7](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-generic-type-constraint_2.cs)]  \n  \n The `new()` constraint appears last in the `where` clause.  \n  \n With multiple type parameters, use one `where` clause for each type parameter, for example:  \n  \n [!code-cs[csrefKeywordsContextual#8](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-generic-type-constraint_3.cs)]  \n  \n You can also attach constraints to type parameters of generic methods, like this:  \n  \n```csharp  \npublic bool MyMethod<T>(T t) where T : IMyInterface { }  \n```  \n  \n Notice that the syntax to describe type parameter constraints on delegates is the same as that of methods:  \n  \n```csharp  \ndelegate T MyDelegate<T>() where T : new()  \n```  \n  \n For information on generic delegates, see [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md).  \n  \n For details on the syntax and use of constraints, see [Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md)   \n [new Constraint](../../../csharp/language-reference/keywords/new-constraint.md)   \n [Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)","nodes":[{"pos":[4,628],"embed":true,"restype":"x-metadata","content":"title: \"where (generic type constraint) (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"whereconstraint\"\n  - \"whereconstraint_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"where (generic type constraint) [C#]\"\nms.assetid: d7aa871b-0714-416a-bab2-96f87ada4310\ncaps.latest.revision: 10\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"where (generic type constraint) (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,63],"content":"where (generic type constraint) (C# Reference) | Microsoft Docs","nodes":[{"content":"where (generic type constraint) (C# Reference) | Microsoft Docs","pos":[0,63]}]}],"path":["title"]}],"yml":true},{"pos":[635,681],"content":"where (generic type constraint) (C# Reference)","linkify":"where (generic type constraint) (C# Reference)","nodes":[{"content":"where (generic type constraint) (C# Reference)","pos":[0,46]}]},{"content":"In a generic type definition, the <ph id=\"ph1\">`where`</ph> clause is used to specify constraints on the types that can be used as arguments for a type parameter defined in a generic declaration.","pos":[682,859],"source":"In a generic type definition, the `where` clause is used to specify constraints on the types that can be used as arguments for a type parameter defined in a generic declaration."},{"content":"For example, you can declare a generic class, <ph id=\"ph1\">`MyGenericClass`</ph>, such that the type parameter <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> interface:","pos":[860,1012],"source":" For example, you can declare a generic class, `MyGenericClass`, such that the type parameter `T` implements the <xref:System.IComparable%601> interface:"},{"pos":[1098,1253],"content":"[!NOTE]\n For more information on the where clause in a query expression, see [where clause](../../../csharp/language-reference/keywords/where-clause.md).","leadings":["","> "],"nodes":[{"content":"For more information on the where clause in a query expression, see <bpt id=\"p1\">[</bpt>where clause<ept id=\"p1\">](../../../csharp/language-reference/keywords/where-clause.md)</ept>.","pos":[9,153],"source":"For more information on the where clause in a query expression, see [where clause](../../../csharp/language-reference/keywords/where-clause.md)."}]},{"content":"In addition to interface constraints, a <ph id=\"ph1\">`where`</ph> clause can include a base class constraint, which states that a type must have the specified class as a base class (or be that class itself) in order to be used as a type argument for that generic type.","pos":[1260,1510],"source":"In addition to interface constraints, a `where` clause can include a base class constraint, which states that a type must have the specified class as a base class (or be that class itself) in order to be used as a type argument for that generic type."},{"content":"If such a constraint is used, it must appear before any other constraints on that type parameter.","pos":[1511,1608]},{"content":"The <ph id=\"ph1\">`where`</ph> clause may also include a constructor constraint.","pos":[1758,1819],"source":"The `where` clause may also include a constructor constraint."},{"content":"It is possible to create an instance of a type parameter using the new operator; however, in order to do so the type parameter must be constrained by the constructor constraint, <ph id=\"ph1\">`new()`</ph>.","pos":[1820,2006],"source":" It is possible to create an instance of a type parameter using the new operator; however, in order to do so the type parameter must be constrained by the constructor constraint, `new()`."},{"content":"The <bpt id=\"p1\">[</bpt>new() Constraint<ept id=\"p1\">](../../../csharp/language-reference/keywords/new-constraint.md)</ept> lets the compiler know that any type argument supplied must have an accessible parameterless--or default-- constructor.","pos":[2007,2212],"source":" The [new() Constraint](../../../csharp/language-reference/keywords/new-constraint.md) lets the compiler know that any type argument supplied must have an accessible parameterless--or default-- constructor."},{"content":"For example:","pos":[2213,2225]},{"pos":[2375,2433],"content":"The <ph id=\"ph1\">`new()`</ph> constraint appears last in the <ph id=\"ph2\">`where`</ph> clause.","source":"The `new()` constraint appears last in the `where` clause."},{"pos":[2440,2531],"content":"With multiple type parameters, use one <ph id=\"ph1\">`where`</ph> clause for each type parameter, for example:","source":"With multiple type parameters, use one `where` clause for each type parameter, for example:"},{"content":"You can also attach constraints to type parameters of generic methods, like this:","pos":[2681,2762]},{"content":"Notice that the syntax to describe type parameter constraints on delegates is the same as that of methods:","pos":[2848,2954]},{"pos":[3027,3154],"content":"For information on generic delegates, see <bpt id=\"p1\">[</bpt>Generic Delegates<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-delegates.md)</ept>.","source":"For information on generic delegates, see [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md)."},{"pos":[3161,3326],"content":"For details on the syntax and use of constraints, see <bpt id=\"p1\">[</bpt>Constraints on Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)</ept>.","source":"For details on the syntax and use of constraints, see [Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)."},{"pos":[3335,3360],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3474,3482],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3486,3546],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3550,3617],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Introduction to Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/introduction-to-generics.md)</ept><ph id=\"ph1\"> </ph>","pos":[3621,3720],"source":"[Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md) "},{"content":"<bpt id=\"p1\">[</bpt>new Constraint<ept id=\"p1\">](../../../csharp/language-reference/keywords/new-constraint.md)</ept><ph id=\"ph1\"> </ph>","pos":[3724,3804],"source":"[new Constraint](../../../csharp/language-reference/keywords/new-constraint.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constraints on Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)</ept>","pos":[3808,3918],"source":"[Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)"}]}