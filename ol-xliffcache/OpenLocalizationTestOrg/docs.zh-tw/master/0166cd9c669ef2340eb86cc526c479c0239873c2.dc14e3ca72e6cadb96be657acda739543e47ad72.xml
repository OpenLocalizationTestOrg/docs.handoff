{"content":"---\ntitle: \"Walkthrough: Creating Your First Touch Application | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"creating a touch-sensitive application [WPF]\"\n  - \"touchscreen applications [WPF], creating\"\n  - \"touch-sensitive applications [WPF], creating\"\n  - \"creating a touchscreen application [WPF]\"\nms.assetid: d69e602e-9a25-4e24-950b-e89eaa2a906b\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Walkthrough: Creating Your First Touch Application\n[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] enables applications to respond to touch. For example, you can interact with an application by using one or more fingers on a touch-sensitive device, such as a touchscreen This walkthrough creates an application that enables the user to move, resize, or rotate a single object by using touch.  \n  \n## Prerequisites  \n You need the following components to complete this walkthrough:  \n  \n-   [!INCLUDE[vs_dev10_ext](../../../../includes/vs-dev10-ext-md.md)].  \n  \n-   Windows 7.  \n  \n-   A device that accepts touch input, such as a touchscreen, that supports Windows Touch.  \n  \n Additionally, you should have a basic understanding of how to create an application in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], especially how to subscribe to and handle an event. For more information, see [Walkthrough: My First WPF Desktop Application](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md).  \n  \n## Creating the Application  \n  \n#### To create the application  \n  \n1.  Create a new WPF Application project in Visual Basic or Visual C# named `BasicManipulation`. For more information, see [How to: Create a New WPF Application Project](http://msdn.microsoft.com/en-us/1f6aea7a-33e1-4d3f-8555-1daa42e95d82).  \n  \n2.  Replace the contents of MainWindow.xaml with the following XAML.  \n  \n     This markup creates a simple application that contains a red <xref:System.Windows.Shapes.Rectangle> on a <xref:System.Windows.Controls.Canvas>. The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the <xref:System.Windows.Shapes.Rectangle> is set to true so that it will receive manipulation events. The application subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events. These events contain the logic to move the <xref:System.Windows.Shapes.Rectangle> when the user manipulates it.  \n  \n     [!code-xml[BasicManipulation#UI](../../../../samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  \n  \n3.  If you are using Visual Basic, in the first line of MainWindow.xaml, replace `x:Class=\"BasicManipulation.MainWindow\"` with `x:Class=\"MainWindow\"`.  \n  \n4.  In the `MainWindow` class, add the following <xref:System.Windows.UIElement.ManipulationStarting> event handler.  \n  \n     The <xref:System.Windows.UIElement.ManipulationStarting> event occurs when [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] detects that touch input begins to manipulate an object. The code specifies that the position of the manipulation should be relative to the <xref:System.Windows.Window> by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.  \n  \n     [!code-csharp[BasicManipulation#ManipulationStarting](../../../../samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]\n     [!code-vb[BasicManipulation#ManipulationStarting](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  \n  \n5.  In the `MainWindow` class, add the following <xref:System.Windows.Input.ManipulationDelta> event handler.  \n  \n     The <xref:System.Windows.Input.ManipulationDelta> event occurs when the touch input changes position and can occur multiple times during a manipulation. The event can also occur after a finger is raised. For example, if the user drags a finger across a screen, the <xref:System.Windows.Input.ManipulationDelta> event occurs multiple times as the finger moves. When the user raises a finger from the screen, the <xref:System.Windows.Input.ManipulationDelta> event keeps occurring to simulate inertia.  \n  \n     The code applies the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> to the <xref:System.Windows.UIElement.RenderTransform%2A> of the <xref:System.Windows.Shapes.Rectangle> to move it as the user moves the touch input. It also checks whether the <xref:System.Windows.Shapes.Rectangle> is outside the bounds of the <xref:System.Windows.Window> when the event occurs during inertia. If so, the application calls the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A?displayProperty=fullName> method to end the manipulation.  \n  \n     [!code-csharp[BasicManipulation#ManipulationDelta](../../../../samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]\n     [!code-vb[BasicManipulation#ManipulationDelta](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  \n  \n6.  In the `MainWindow` class, add the following <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler.  \n  \n     The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user raises all fingers from the screen. The code sets the initial velocity and deceleration for the movement, expansion, and rotation of the rectangle.  \n  \n     [!code-csharp[BasicManipulation#ManipulationInertiaStarting](../../../../samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]\n     [!code-vb[BasicManipulation#ManipulationInertiaStarting](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  \n  \n7.  Build and run the project.  \n  \n     You should see a red square appear in the window.  \n  \n## Testing the Application  \n To test the application, try the following manipulations. Note that you can do more than one of the following at the same time.  \n  \n-   To move the <xref:System.Windows.Shapes.Rectangle>, put a finger on the <xref:System.Windows.Shapes.Rectangle> and move the finger across the screen.  \n  \n-   To resize the <xref:System.Windows.Shapes.Rectangle>, put two fingers on the <xref:System.Windows.Shapes.Rectangle> and move the fingers closer together or farther apart from each other.  \n  \n-   To rotate the <xref:System.Windows.Shapes.Rectangle>, put two fingers on the <xref:System.Windows.Shapes.Rectangle> and rotate the fingers around each other.  \n  \n To cause inertia, quickly raise your fingers from the screen as you perform the previous manipulations. The <xref:System.Windows.Shapes.Rectangle> will continue to move, resize, or rotate for a few seconds before it stops.  \n  \n## See Also  \n <xref:System.Windows.UIElement.ManipulationStarting?displayProperty=fullName>   \n <xref:System.Windows.UIElement.ManipulationDelta?displayProperty=fullName>   \n <xref:System.Windows.UIElement.ManipulationInertiaStarting?displayProperty=fullName>","nodes":[{"pos":[4,597],"embed":true,"restype":"x-metadata","content":"title: \"Walkthrough: Creating Your First Touch Application | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"creating a touch-sensitive application [WPF]\"\n  - \"touchscreen applications [WPF], creating\"\n  - \"touch-sensitive applications [WPF], creating\"\n  - \"creating a touchscreen application [WPF]\"\nms.assetid: d69e602e-9a25-4e24-950b-e89eaa2a906b\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"Walkthrough: Creating Your First Touch Application | Microsoft Docs","nodes":[{"pos":[0,67],"content":"Walkthrough: Creating Your First Touch Application | Microsoft Docs","nodes":[{"content":"Walkthrough: Creating Your First Touch Application | Microsoft Docs","pos":[0,67]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[604,654],"content":"Walkthrough: Creating Your First Touch Application","linkify":"Walkthrough: Creating Your First Touch Application","nodes":[{"content":"Walkthrough: Creating Your First Touch Application","pos":[0,50]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> enables applications to respond to touch.","pos":[655,778],"source":"[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] enables applications to respond to touch."},{"content":"For example, you can interact with an application by using one or more fingers on a touch-sensitive device, such as a touchscreen This walkthrough creates an application that enables the user to move, resize, or rotate a single object by using touch.","pos":[779,1029]},{"pos":[1038,1051],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You need the following components to complete this walkthrough:","pos":[1055,1118]},{"pos":[1128,1194],"content":"<ph id=\"ph1\">[!INCLUDE[vs_dev10_ext](../../../../includes/vs-dev10-ext-md.md)]</ph>.","source":"[!INCLUDE[vs_dev10_ext](../../../../includes/vs-dev10-ext-md.md)]."},{"content":"Windows 7.","pos":[1204,1214]},{"content":"A device that accepts touch input, such as a touchscreen, that supports Windows Touch.","pos":[1224,1310]},{"content":"Additionally, you should have a basic understanding of how to create an application in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, especially how to subscribe to and handle an event.","pos":[1317,1538],"source":"Additionally, you should have a basic understanding of how to create an application in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], especially how to subscribe to and handle an event."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: My First WPF Desktop Application<ept id=\"p1\">](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept>.","pos":[1539,1709],"source":" For more information, see [Walkthrough: My First WPF Desktop Application](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)."},{"pos":[1718,1742],"content":"Creating the Application","linkify":"Creating the Application","nodes":[{"content":"Creating the Application","pos":[0,24]}]},{"pos":[1753,1778],"content":"To create the application","linkify":"To create the application","nodes":[{"content":"To create the application","pos":[0,25]}]},{"content":"Create a new WPF Application project in Visual Basic or Visual C# named <ph id=\"ph1\">`BasicManipulation`</ph>.","pos":[1788,1880],"source":"Create a new WPF Application project in Visual Basic or Visual C# named `BasicManipulation`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Create a New WPF Application Project<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1f6aea7a-33e1-4d3f-8555-1daa42e95d82)</ept>.","pos":[1881,2024],"source":" For more information, see [How to: Create a New WPF Application Project](http://msdn.microsoft.com/en-us/1f6aea7a-33e1-4d3f-8555-1daa42e95d82)."},{"content":"Replace the contents of MainWindow.xaml with the following XAML.","pos":[2034,2098]},{"content":"This markup creates a simple application that contains a red <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> on a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.","pos":[2109,2252],"source":"This markup creates a simple application that contains a red <xref:System.Windows.Shapes.Rectangle> on a <xref:System.Windows.Controls.Canvas>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> is set to true so that it will receive manipulation events.","pos":[2253,2428],"source":" The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the <xref:System.Windows.Shapes.Rectangle> is set to true so that it will receive manipulation events."},{"content":"The application subscribes to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> events.","pos":[2429,2639],"source":" The application subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events."},{"content":"These events contain the logic to move the <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> when the user manipulates it.","pos":[2640,2751],"source":" These events contain the logic to move the <xref:System.Windows.Shapes.Rectangle> when the user manipulates it."},{"pos":[2902,3048],"content":"If you are using Visual Basic, in the first line of MainWindow.xaml, replace <ph id=\"ph1\">`x:Class=\"BasicManipulation.MainWindow\"`</ph> with <ph id=\"ph2\">`x:Class=\"MainWindow\"`</ph>.","source":"If you are using Visual Basic, in the first line of MainWindow.xaml, replace `x:Class=\"BasicManipulation.MainWindow\"` with `x:Class=\"MainWindow\"`."},{"pos":[3058,3170],"content":"In the <ph id=\"ph1\">`MainWindow`</ph> class, add the following <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event handler.","source":"In the `MainWindow` class, add the following <xref:System.Windows.UIElement.ManipulationStarting> event handler."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event occurs when <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> detects that touch input begins to manipulate an object.","pos":[3181,3394],"source":"The <xref:System.Windows.UIElement.ManipulationStarting> event occurs when [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] detects that touch input begins to manipulate an object."},{"content":"The code specifies that the position of the manipulation should be relative to the <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> by setting the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph> property.","pos":[3395,3614],"source":" The code specifies that the position of the manipulation should be relative to the <xref:System.Windows.Window> by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property."},{"pos":[3625,3981],"content":"[!code-csharp[BasicManipulation#ManipulationStarting](../../../../samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]\n [!code-vb[BasicManipulation#ManipulationStarting](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]","leadings":["","    "],"nodes":[]},{"pos":[3991,4096],"content":"In the <ph id=\"ph1\">`MainWindow`</ph> class, add the following <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph> event handler.","source":"In the `MainWindow` class, add the following <xref:System.Windows.Input.ManipulationDelta> event handler."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph> event occurs when the touch input changes position and can occur multiple times during a manipulation.","pos":[4107,4259],"source":"The <xref:System.Windows.Input.ManipulationDelta> event occurs when the touch input changes position and can occur multiple times during a manipulation."},{"content":"The event can also occur after a finger is raised.","pos":[4260,4310]},{"content":"For example, if the user drags a finger across a screen, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph> event occurs multiple times as the finger moves.","pos":[4311,4466],"source":" For example, if the user drags a finger across a screen, the <xref:System.Windows.Input.ManipulationDelta> event occurs multiple times as the finger moves."},{"content":"When the user raises a finger from the screen, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph> event keeps occurring to simulate inertia.","pos":[4467,4606],"source":" When the user raises a finger from the screen, the <xref:System.Windows.Input.ManipulationDelta> event keeps occurring to simulate inertia."},{"content":"The code applies the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> of the <ph id=\"ph3\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> to move it as the user moves the touch input.","pos":[4617,4863],"source":"The code applies the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> to the <xref:System.Windows.UIElement.RenderTransform%2A> of the <xref:System.Windows.Shapes.Rectangle> to move it as the user moves the touch input."},{"content":"It also checks whether the <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> is outside the bounds of the <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph> when the event occurs during inertia.","pos":[4864,5025],"source":" It also checks whether the <xref:System.Windows.Shapes.Rectangle> is outside the bounds of the <xref:System.Windows.Window> when the event occurs during inertia."},{"content":"If so, the application calls the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A?displayProperty=fullName&gt;</ph> method to end the manipulation.","pos":[5026,5182],"source":" If so, the application calls the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A?displayProperty=fullName> method to end the manipulation."},{"pos":[5193,5537],"content":"[!code-csharp[BasicManipulation#ManipulationDelta](../../../../samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]","leadings":["","    "],"nodes":[]},{"pos":[5547,5666],"content":"In the <ph id=\"ph1\">`MainWindow`</ph> class, add the following <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event handler.","source":"In the `MainWindow` class, add the following <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event occurs when the user raises all fingers from the screen.","pos":[5677,5803],"source":"The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user raises all fingers from the screen."},{"content":"The code sets the initial velocity and deceleration for the movement, expansion, and rotation of the rectangle.","pos":[5804,5915]},{"pos":[5926,6310],"content":"[!code-csharp[BasicManipulation#ManipulationInertiaStarting](../../../../samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]\n [!code-vb[BasicManipulation#ManipulationInertiaStarting](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]","leadings":["","    "],"nodes":[]},{"content":"Build and run the project.","pos":[6320,6346]},{"content":"You should see a red square appear in the window.","pos":[6357,6406]},{"pos":[6415,6438],"content":"Testing the Application","linkify":"Testing the Application","nodes":[{"content":"Testing the Application","pos":[0,23]}]},{"content":"To test the application, try the following manipulations.","pos":[6442,6499]},{"content":"Note that you can do more than one of the following at the same time.","pos":[6500,6569]},{"content":"To move the <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>, put a finger on the <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> and move the finger across the screen.","pos":[6579,6728],"source":"To move the <xref:System.Windows.Shapes.Rectangle>, put a finger on the <xref:System.Windows.Shapes.Rectangle> and move the finger across the screen."},{"content":"To resize the <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>, put two fingers on the <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> and move the fingers closer together or farther apart from each other.","pos":[6738,6924],"source":"To resize the <xref:System.Windows.Shapes.Rectangle>, put two fingers on the <xref:System.Windows.Shapes.Rectangle> and move the fingers closer together or farther apart from each other."},{"content":"To rotate the <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>, put two fingers on the <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> and rotate the fingers around each other.","pos":[6934,7091],"source":"To rotate the <xref:System.Windows.Shapes.Rectangle>, put two fingers on the <xref:System.Windows.Shapes.Rectangle> and rotate the fingers around each other."},{"content":"To cause inertia, quickly raise your fingers from the screen as you perform the previous manipulations.","pos":[7098,7201]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> will continue to move, resize, or rotate for a few seconds before it stops.","pos":[7202,7320],"source":" The <xref:System.Windows.Shapes.Rectangle> will continue to move, resize, or rotate for a few seconds before it stops."},{"pos":[7329,7337],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}