{"content":"---\ntitle: \"Partial Trust Best Practices | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0d052bc0-5b98-4c50-8bb5-270cc8a8b145\ncaps.latest.revision: 17\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Partial Trust Best Practices\nThis topic describes best practices when running [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] in a partial trust environment.  \n  \n## Serialization  \n Apply the following practices when using the <xref:System.Runtime.Serialization.DataContractSerializer> in a partially-trusted application.  \n  \n-   All serializable types must be explicitly marked with the `[DataContract]` attribute. The following techniques are not supported in a partial trust environment:  \n  \n-   Marking classes to be serialized with the <xref:System.SerializableAttribute>.  \n  \n-   Implementing the <xref:System.Runtime.Serialization.ISerializable> interface to allow a class to control its serialization process.  \n  \n### Using DataContractSerializer  \n  \n-   All types marked with the `[DataContract]` attribute must be public. Non-public types cannot be serialized in a partial trust environment.  \n  \n-   All `[DataContract]` members in a serializable `[DataContract]` type must be public. A type with a non-public `[DataMember]` cannot be serialized in a partial trust environment.  \n  \n-   Methods that handle serialization events (such as `OnSerializing`, `OnSerialized`, `OnDeserializing`, and `OnDeserialized`) must be declared as public. However, both explicit and implicit implementations of <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%28System.Object%29> are supported.  \n  \n-   `[DataContract]` types implemented in assemblies marked with the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> must not perform security-related actions in the type constructor, as the <xref:System.Runtime.Serialization.DataContractSerializer> does not call the constructor of the newly-instantiated object during deserialization. Specifically, the following common security techniques must be avoided for `[DataContract]` types:  \n  \n-   Attempting to restrict partial trust access by making the type's constructor internal or private.  \n  \n-   Restricting access to the type by adding a `[LinkDemand]` to the type's constructor.  \n  \n-   Assuming that because the object has been successfully instantiated, any validation checks enforced by the constructor have passed successfully.  \n  \n### Using IXmlSerializable  \n The following best practices apply for types that implement <xref:System.Xml.Serialization.IXmlSerializable> and are serialized using the <xref:System.Runtime.Serialization.DataContractSerializer>:  \n  \n-   The <xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A> static method implementations must be `public`.  \n  \n-   The instance methods that implement the <xref:System.Xml.Serialization.IXmlSerializable> interface must be `public`.  \n  \n## Using WCF from Fully-Trusted Platform Code that Allows Calls from Partially Trusted Callers  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] partial trust security model assumes that any caller of a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] public method or property is running in the code access security (CAS) context of the hosting application. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] also assumes that only one application security context exists for each <xref:System.AppDomain>, and that this context is established at <xref:System.AppDomain> creation time by a trusted host (for example, by a call to <xref:System.AppDomain.CreateDomain%2A> or by the ASP.NET Application Manager).  \n  \n This security model applies to user-written applications that cannot assert additional CAS permissions, such as user code running in a Medium Trust ASP.NET application. However, fully-trusted platform code (for example, a third-party assembly that is installed in the global assembly cache and accepts calls from partially-trusted code) must take explicit care when calling into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] on behalf of a partially-trusted application to avoid introducing application-level security vulnerabilities.  \n  \n Full-trust code should avoid altering the CAS permission set of the current thread (by calling <xref:System.Security.PermissionSet.Assert%2A>, <xref:System.Security.PermissionSet.PermitOnly%2A>, or <xref:System.Security.PermissionSet.Deny%2A>) prior to calling [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] APIs on behalf of partially-trusted code. Asserting, denying, or otherwise creating a thread-specific permission context that is independent of the application-level security context can result in unexpected behavior. Depending on the application, this behavior may result in application-level security vulnerabilities.  \n  \n Code that calls into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] using a thread-specific permission context must be prepared to handle the following situations that may arise:  \n  \n-   The thread-specific security context may not be maintained for the duration of the operation, which results in potential security exceptions.  \n  \n-   Internal [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] code as well as any user-provided callbacks may run in a different security context than the one under which the call was originally initiated. These contexts include:  \n  \n    -   The application permission context.  \n  \n    -   Any thread-specific permission context previously created by other user threads used to call into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] during the lifetime of the currently running <xref:System.AppDomain>.  \n  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] guarantees that partially-trusted code cannot obtain full-trust permissions unless such permissions are asserted by a fully-trusted component prior to calling into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] public APIs. However, it does not guarantee that the effects of asserting full trust is isolated to a particular thread, operation, or user action.  \n  \n As a best practice, avoid creating thread-specific permission context by calling <xref:System.Security.PermissionSet.Assert%2A>, <xref:System.Security.PermissionSet.PermitOnly%2A>, or <xref:System.Security.PermissionSet.Deny%2A>. Instead, grant or deny the privilege to the application itself, so that no <xref:System.Security.PermissionSet.Assert%2A>, <xref:System.Security.PermissionSet.Deny%2A>, or <xref:System.Security.PermissionSet.PermitOnly%2A> is required.  \n  \n## See Also  \n <xref:System.Runtime.Serialization.DataContractSerializer>   \n <xref:System.Xml.Serialization.IXmlSerializable>","nodes":[{"pos":[12,57],"content":"Partial Trust Best Practices | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Partial Trust Best Practices | Microsoft Docs","pos":[0,45]}]},{"pos":[356,384],"content":"Partial Trust Best Practices","linkify":"Partial Trust Best Practices","nodes":[{"content":"Partial Trust Best Practices","pos":[0,28]}]},{"pos":[385,521],"content":"This topic describes best practices when running <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> in a partial trust environment.","source":"This topic describes best practices when running [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] in a partial trust environment."},{"pos":[530,543],"content":"Serialization","linkify":"Serialization","nodes":[{"content":"Serialization","pos":[0,13]}]},{"content":"Apply the following practices when using the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> in a partially-trusted application.","pos":[547,686],"source":"Apply the following practices when using the <xref:System.Runtime.Serialization.DataContractSerializer> in a partially-trusted application."},{"content":"All serializable types must be explicitly marked with the <ph id=\"ph1\">`[DataContract]`</ph> attribute.","pos":[696,781],"source":"All serializable types must be explicitly marked with the `[DataContract]` attribute."},{"content":"The following techniques are not supported in a partial trust environment:","pos":[782,856]},{"content":"Marking classes to be serialized with the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph>.","pos":[866,944],"source":"Marking classes to be serialized with the <xref:System.SerializableAttribute>."},{"content":"Implementing the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface to allow a class to control its serialization process.","pos":[954,1085],"source":"Implementing the <xref:System.Runtime.Serialization.ISerializable> interface to allow a class to control its serialization process."},{"pos":[1095,1123],"content":"Using DataContractSerializer","linkify":"Using DataContractSerializer","nodes":[{"content":"Using DataContractSerializer","pos":[0,28]}]},{"content":"All types marked with the <ph id=\"ph1\">`[DataContract]`</ph> attribute must be public.","pos":[1133,1201],"source":"All types marked with the `[DataContract]` attribute must be public."},{"content":"Non-public types cannot be serialized in a partial trust environment.","pos":[1202,1271]},{"content":"All <ph id=\"ph1\">`[DataContract]`</ph> members in a serializable <ph id=\"ph2\">`[DataContract]`</ph> type must be public.","pos":[1281,1365],"source":"All `[DataContract]` members in a serializable `[DataContract]` type must be public."},{"content":"A type with a non-public <ph id=\"ph1\">`[DataMember]`</ph> cannot be serialized in a partial trust environment.","pos":[1366,1458],"source":" A type with a non-public `[DataMember]` cannot be serialized in a partial trust environment."},{"content":"Methods that handle serialization events (such as <ph id=\"ph1\">`OnSerializing`</ph>, <ph id=\"ph2\">`OnSerialized`</ph>, <ph id=\"ph3\">`OnDeserializing`</ph>, and <ph id=\"ph4\">`OnDeserialized`</ph>) must be declared as public.","pos":[1468,1619],"source":"Methods that handle serialization events (such as `OnSerializing`, `OnSerialized`, `OnDeserializing`, and `OnDeserialized`) must be declared as public."},{"content":"However, both explicit and implicit implementations of <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%28System.Object%29&gt;</ph> are supported.","pos":[1620,1787],"source":" However, both explicit and implicit implementations of <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%28System.Object%29> are supported."},{"content":"<ph id=\"ph1\">`[DataContract]`</ph> types implemented in assemblies marked with the <ph id=\"ph2\">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> must not perform security-related actions in the type constructor, as the <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> does not call the constructor of the newly-instantiated object during deserialization.","pos":[1797,2142],"source":"`[DataContract]` types implemented in assemblies marked with the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> must not perform security-related actions in the type constructor, as the <xref:System.Runtime.Serialization.DataContractSerializer> does not call the constructor of the newly-instantiated object during deserialization."},{"content":"Specifically, the following common security techniques must be avoided for <ph id=\"ph1\">`[DataContract]`</ph> types:","pos":[2143,2241],"source":" Specifically, the following common security techniques must be avoided for `[DataContract]` types:"},{"content":"Attempting to restrict partial trust access by making the type's constructor internal or private.","pos":[2251,2348]},{"pos":[2358,2442],"content":"Restricting access to the type by adding a <ph id=\"ph1\">`[LinkDemand]`</ph> to the type's constructor.","source":"Restricting access to the type by adding a `[LinkDemand]` to the type's constructor."},{"content":"Assuming that because the object has been successfully instantiated, any validation checks enforced by the constructor have passed successfully.","pos":[2452,2596]},{"pos":[2606,2628],"content":"Using IXmlSerializable","linkify":"Using IXmlSerializable","nodes":[{"content":"Using IXmlSerializable","pos":[0,22]}]},{"content":"The following best practices apply for types that implement <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> and are serialized using the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>:","pos":[2632,2829],"source":"The following best practices apply for types that implement <xref:System.Xml.Serialization.IXmlSerializable> and are serialized using the <xref:System.Runtime.Serialization.DataContractSerializer>:"},{"pos":[2839,2952],"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A&gt;</ph> static method implementations must be <ph id=\"ph2\">`public`</ph>.","source":"The <xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A> static method implementations must be `public`."},{"pos":[2962,3078],"content":"The instance methods that implement the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface must be <ph id=\"ph2\">`public`</ph>.","source":"The instance methods that implement the <xref:System.Xml.Serialization.IXmlSerializable> interface must be `public`."},{"pos":[3087,3178],"content":"Using WCF from Fully-Trusted Platform Code that Allows Calls from Partially Trusted Callers","linkify":"Using WCF from Fully-Trusted Platform Code that Allows Calls from Partially Trusted Callers","nodes":[{"content":"Using WCF from Fully-Trusted Platform Code that Allows Calls from Partially Trusted Callers","pos":[0,91]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> partial trust security model assumes that any caller of a <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> public method or property is running in the code access security (CAS) context of the hosting application.","pos":[3182,3462],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] partial trust security model assumes that any caller of a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] public method or property is running in the code access security (CAS) context of the hosting application."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> also assumes that only one application security context exists for each <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph>, and that this context is established at <ph id=\"ph3\">&lt;xref:System.AppDomain&gt;</ph> creation time by a trusted host (for example, by a call to <ph id=\"ph4\">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> or by the ASP.NET Application Manager).","pos":[3463,3818],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] also assumes that only one application security context exists for each <xref:System.AppDomain>, and that this context is established at <xref:System.AppDomain> creation time by a trusted host (for example, by a call to <xref:System.AppDomain.CreateDomain%2A> or by the ASP.NET Application Manager)."},{"content":"This security model applies to user-written applications that cannot assert additional CAS permissions, such as user code running in a Medium Trust ASP.NET application.","pos":[3825,3993]},{"content":"However, fully-trusted platform code (for example, a third-party assembly that is installed in the global assembly cache and accepts calls from partially-trusted code) must take explicit care when calling into <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> on behalf of a partially-trusted application to avoid introducing application-level security vulnerabilities.","pos":[3994,4369],"source":" However, fully-trusted platform code (for example, a third-party assembly that is installed in the global assembly cache and accepts calls from partially-trusted code) must take explicit care when calling into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] on behalf of a partially-trusted application to avoid introducing application-level security vulnerabilities."},{"content":"Full-trust code should avoid altering the CAS permission set of the current thread (by calling <ph id=\"ph1\">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph>) prior to calling <ph id=\"ph4\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> APIs on behalf of partially-trusted code.","pos":[4376,4734],"source":"Full-trust code should avoid altering the CAS permission set of the current thread (by calling <xref:System.Security.PermissionSet.Assert%2A>, <xref:System.Security.PermissionSet.PermitOnly%2A>, or <xref:System.Security.PermissionSet.Deny%2A>) prior to calling [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] APIs on behalf of partially-trusted code."},{"content":"Asserting, denying, or otherwise creating a thread-specific permission context that is independent of the application-level security context can result in unexpected behavior.","pos":[4735,4910]},{"content":"Depending on the application, this behavior may result in application-level security vulnerabilities.","pos":[4911,5012]},{"pos":[5019,5206],"content":"Code that calls into <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> using a thread-specific permission context must be prepared to handle the following situations that may arise:","source":"Code that calls into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] using a thread-specific permission context must be prepared to handle the following situations that may arise:"},{"content":"The thread-specific security context may not be maintained for the duration of the operation, which results in potential security exceptions.","pos":[5216,5357]},{"content":"Internal <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> code as well as any user-provided callbacks may run in a different security context than the one under which the call was originally initiated.","pos":[5367,5575],"source":"Internal [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] code as well as any user-provided callbacks may run in a different security context than the one under which the call was originally initiated."},{"content":"These contexts include:","pos":[5576,5599]},{"content":"The application permission context.","pos":[5613,5648]},{"pos":[5662,5885],"content":"Any thread-specific permission context previously created by other user threads used to call into <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> during the lifetime of the currently running <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph>.","source":"Any thread-specific permission context previously created by other user threads used to call into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] during the lifetime of the currently running <xref:System.AppDomain>."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> guarantees that partially-trusted code cannot obtain full-trust permissions unless such permissions are asserted by a fully-trusted component prior to calling into <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> public APIs.","pos":[5892,6180],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] guarantees that partially-trusted code cannot obtain full-trust permissions unless such permissions are asserted by a fully-trusted component prior to calling into [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] public APIs."},{"content":"However, it does not guarantee that the effects of asserting full trust is isolated to a particular thread, operation, or user action.","pos":[6181,6315]},{"content":"As a best practice, avoid creating thread-specific permission context by calling <ph id=\"ph1\">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph>.","pos":[6322,6551],"source":"As a best practice, avoid creating thread-specific permission context by calling <xref:System.Security.PermissionSet.Assert%2A>, <xref:System.Security.PermissionSet.PermitOnly%2A>, or <xref:System.Security.PermissionSet.Deny%2A>."},{"content":"Instead, grant or deny the privilege to the application itself, so that no <ph id=\"ph1\">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph> is required.","pos":[6552,6787],"source":" Instead, grant or deny the privilege to the application itself, so that no <xref:System.Security.PermissionSet.Assert%2A>, <xref:System.Security.PermissionSet.Deny%2A>, or <xref:System.Security.PermissionSet.PermitOnly%2A> is required."},{"pos":[6796,6804],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}