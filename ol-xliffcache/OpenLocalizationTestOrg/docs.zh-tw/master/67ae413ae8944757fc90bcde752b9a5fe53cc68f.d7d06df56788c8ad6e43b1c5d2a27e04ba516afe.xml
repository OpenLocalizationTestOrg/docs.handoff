{"content":"---\ntitle: \"ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method\"\nms.date: \"03/30/2017\"\nms.assetid: b933dfe6-7833-40cb-aad8-40842dc3034f\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method\n\nReturns an enumerator to all the methods that are defined in a given NGen module and inline a given method.\n\n## Syntax\n\n```cpp\nHRESULT EnumNgenModuleMethodsInliningThisMethod(\n        [in] ModuleID inlinersModuleId,\n        [in] ModuleID inlineeModuleId,\n        [in] mdMethodDef inlineeMethodId,\n        [out] BOOL *incompleteData,\n        [out] ICorProfilerMethodEnum** ppEnum\n);\n```\n\n## Parameters\n\n`inlinersModuleId`\\\n[in] The identifier of an NGen module.\n\n`inlineeModuleId`\\\n[in] The identifier of a module that defines `inlineeMethodId`. See the Remarks section for more information.\n\n`inlineeMethodId`\\\n[in] The identifier of an inlined method. See the Remarks section for more information.\n\n`incompleteData`\\\n[out] A flag that indicates whether `ppEnum` contains all methods inlining a given method.  See the Remarks section for more information.\n\n`ppEnum`\\\n[out] A pointer to the address of an enumerator\n\n## Remarks\n\n`inlineeModuleId` and `inlineeMethodId` together form the full identifier for the method that might be inlined. For example, assume module `A` defines a method `Simple.Add`:\n\n```csharp\nSimple.Add(int a, int b)\n{ return a + b; }\n```\n\nand module B defines `Fancy.AddTwice`:\n\n```csharp\nFancy.AddTwice(int a, int b)\n{ return Simple.Add(a,b) + Simple.Add(a,b); }\n```\n\nLets also assume that `Fancy.AddTwice` inlines the call to `SimpleAdd`. A profiler could use this enumerator to find all methods defined in module B which inline `Simple.Add`, and the result would enumerate `AddTwice`.  `inlineeModuleId` is the identifier of module `A`, and `inlineeMethodId` is the identifier of `Simple.Add(int a, int b)`.\n\nIf `incompleteData` is true after the function returns, the enumerator does not contain all methods inlining a given method. This can happen when one or more direct or indirect dependencies of inliners module haven't been loaded yet. If a profiler needs accurate data, it should retry later when more modules are loaded, preferably on each module load.\n\nThe `EnumNgenModuleMethodsInliningThisMethod` method can be used to work around limitations on inlining for ReJIT. ReJIT lets a profiler change the implementation of a method and then create new code for it on the fly. For example, we could change `Simple.Add` as follows:\n\n```csharp\nSimple.Add(int a, int b)\n{ return 42; }\n```\n\nHowever because `Fancy.AddTwice` has already inlined `Simple.Add`, it continues to have the same behavior as before. To work around that limitation, the caller has to search for all methods in all modules that inline `Simple.Add` and use `ICorProfilerInfo5::RequestRejit` on each of those methods. When the methods are re-compiled, they will have the new behavior of `Simple.Add` instead of the old behavior.\n\n## Requirements\n\n**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).\n\n**Header:** CorProf.idl, CorProf.h\n\n**Library:** CorGuids.lib\n\n**.NET Framework Versions:** [!INCLUDE[net_current_v46plus](../../../../includes/net-current-v46plus-md.md)]\n\n## See also\n\n- [ICorProfilerInfo6 Interface](icorprofilerinfo6-interface.md)","nodes":[{"pos":[4,189],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method\"\nms.date: \"03/30/2017\"\nms.assetid: b933dfe6-7833-40cb-aad8-40842dc3034f\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method","nodes":[{"pos":[0,65],"content":"ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method","nodes":[{"content":"ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method","pos":[0,65]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[196,261],"content":"ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method","linkify":"ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method","nodes":[{"content":"ICorProfilerInfo6::EnumNgenModuleMethodsInliningThisMethod Method","pos":[0,65]}]},{"content":"Returns an enumerator to all the methods that are defined in a given NGen module and inline a given method.","pos":[263,370]},{"pos":[375,381],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[653,663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of an NGen module.","pos":[685,723]},{"content":"[in] The identifier of a module that defines <ph id=\"ph1\">`inlineeMethodId`</ph>.","pos":[744,807],"source":"[in] The identifier of a module that defines `inlineeMethodId`."},{"content":"See the Remarks section for more information.","pos":[808,853]},{"content":"[in] The identifier of an inlined method.","pos":[874,915]},{"content":"See the Remarks section for more information.","pos":[916,961]},{"content":"[out] A flag that indicates whether <ph id=\"ph1\">`ppEnum`</ph> contains all methods inlining a given method.","pos":[981,1071],"source":"[out] A flag that indicates whether `ppEnum` contains all methods inlining a given method."},{"content":"See the Remarks section for more information.","pos":[1073,1118]},{"content":"[out] A pointer to the address of an enumerator","pos":[1130,1177]},{"pos":[1182,1189],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`inlineeModuleId`</ph> and <ph id=\"ph2\">`inlineeMethodId`</ph> together form the full identifier for the method that might be inlined.","pos":[1191,1302],"source":"`inlineeModuleId` and `inlineeMethodId` together form the full identifier for the method that might be inlined."},{"content":"For example, assume module <ph id=\"ph1\">`A`</ph> defines a method <ph id=\"ph2\">`Simple.Add`</ph>:","pos":[1303,1364],"source":" For example, assume module `A` defines a method `Simple.Add`:"},{"pos":[1424,1462],"content":"and module B defines <ph id=\"ph1\">`Fancy.AddTwice`</ph>:","source":"and module B defines `Fancy.AddTwice`:"},{"content":"Lets also assume that <ph id=\"ph1\">`Fancy.AddTwice`</ph> inlines the call to <ph id=\"ph2\">`SimpleAdd`</ph>.","pos":[1554,1625],"source":"Lets also assume that `Fancy.AddTwice` inlines the call to `SimpleAdd`."},{"content":"A profiler could use this enumerator to find all methods defined in module B which inline <ph id=\"ph1\">`Simple.Add`</ph>, and the result would enumerate <ph id=\"ph2\">`AddTwice`</ph>.","pos":[1626,1772],"source":" A profiler could use this enumerator to find all methods defined in module B which inline `Simple.Add`, and the result would enumerate `AddTwice`."},{"content":"<ph id=\"ph1\">`inlineeModuleId`</ph> is the identifier of module <ph id=\"ph2\">`A`</ph>, and <ph id=\"ph3\">`inlineeMethodId`</ph> is the identifier of <ph id=\"ph4\">`Simple.Add(int a, int b)`</ph>.","pos":[1774,1895],"source":"`inlineeModuleId` is the identifier of module `A`, and `inlineeMethodId` is the identifier of `Simple.Add(int a, int b)`."},{"content":"If <ph id=\"ph1\">`incompleteData`</ph> is true after the function returns, the enumerator does not contain all methods inlining a given method.","pos":[1897,2021],"source":"If `incompleteData` is true after the function returns, the enumerator does not contain all methods inlining a given method."},{"content":"This can happen when one or more direct or indirect dependencies of inliners module haven't been loaded yet.","pos":[2022,2130]},{"content":"If a profiler needs accurate data, it should retry later when more modules are loaded, preferably on each module load.","pos":[2131,2249]},{"content":"The <ph id=\"ph1\">`EnumNgenModuleMethodsInliningThisMethod`</ph> method can be used to work around limitations on inlining for ReJIT.","pos":[2251,2365],"source":"The `EnumNgenModuleMethodsInliningThisMethod` method can be used to work around limitations on inlining for ReJIT."},{"content":"ReJIT lets a profiler change the implementation of a method and then create new code for it on the fly.","pos":[2366,2469]},{"content":"For example, we could change <ph id=\"ph1\">`Simple.Add`</ph> as follows:","pos":[2470,2523],"source":" For example, we could change `Simple.Add` as follows:"},{"content":"However because <ph id=\"ph1\">`Fancy.AddTwice`</ph> has already inlined <ph id=\"ph2\">`Simple.Add`</ph>, it continues to have the same behavior as before.","pos":[2580,2696],"source":"However because `Fancy.AddTwice` has already inlined `Simple.Add`, it continues to have the same behavior as before."},{"content":"To work around that limitation, the caller has to search for all methods in all modules that inline <ph id=\"ph1\">`Simple.Add`</ph> and use <ph id=\"ph2\">`ICorProfilerInfo5::RequestRejit`</ph> on each of those methods.","pos":[2697,2877],"source":" To work around that limitation, the caller has to search for all methods in all modules that inline `Simple.Add` and use `ICorProfilerInfo5::RequestRejit` on each of those methods."},{"content":"When the methods are re-compiled, they will have the new behavior of <ph id=\"ph1\">`Simple.Add`</ph> instead of the old behavior.","pos":[2878,2988],"source":" When the methods are re-compiled, they will have the new behavior of `Simple.Add` instead of the old behavior."},{"pos":[2993,3005],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3007,3111],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3113,3147],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[3149,3174],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[3176,3284],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v46plus](../../../../includes/net-current-v46plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v46plus](../../../../includes/net-current-v46plus-md.md)]"},{"pos":[3289,3297],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3301,3362],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo6 Interface<ept id=\"p1\">](icorprofilerinfo6-interface.md)</ept>","source":"[ICorProfilerInfo6 Interface](icorprofilerinfo6-interface.md)"}]}