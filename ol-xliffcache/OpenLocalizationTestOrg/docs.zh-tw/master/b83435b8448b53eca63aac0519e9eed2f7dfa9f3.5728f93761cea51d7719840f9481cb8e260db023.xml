{"content":"---\ntitle: \"Null-conditional Operators (Visual Basic)\"\nms.date: 10/19/2018\nhelpviewer_keywords: \n  - \"null-conditional operators [Visual Basic]\"\n  - \"?. operator [Visual Basic]\"\n  - \"?[] operator [C#]\"\n  - \"?[] operator [Visual Basic]\"\n---\n# ?. and ?() null-conditional operators (Visual Basic)\n\nTests the value of the left-hand operand for null (`Nothing`) before performing a member access (`?.`) or index (`?()`) operation; returns `Nothing` if the left-hand operand evaluates to `Nothing`. Note that in expressions that ordinarily return value types, the null-conditional operator returns a <xref:System.Nullable%601>.\n\nThese operators help you write less code to handle null checks, especially when descending into data structures. For example:\n\n```vb\n' Nothing if customers is Nothing  \nDim length As Integer? = customers?.Length  \n\n' Nothing if customers is Nothing\nDim first As Customer = customers?(0)\n\n' Nothing if customers, the first customer, or Orders is Nothing\nDim count As Integer? = customers?(0)?.Orders?.Count()   \n```\n\nFor comparison, the alternative code for the first of these expressions without a null-conditional operator is:\n\n```vb\nDim length As Integer\nIf customers IsNot Nothing Then\n   length = customers.Length\nEnd If\n```\n\nThe null-conditional operators are short-circuiting.  If one operation in a chain of conditional member access and index operations returns `Nothing`, the rest of the chain’s execution stops.  In the following example, `C(E)` isn't evaluated if `A`, `B`, or `C` evaluates to `Nothing`.\n\n```vb\nA?.B?.C?(E);\n```\n\nAnother use for null-conditional member access is to invoke delegates in a thread-safe way with much less code.  The following example defines two types, a `NewsBroadcaster` and a `NewsReceiver`. News items are sent to the receiver by the `NewsBroadcaster.SendNews` delegate.\n\n```vb\nPublic Module NewsBroadcaster\n   Dim SendNews As Action(Of String) \n\n   Public Sub Main()\n      Dim rec As New NewsReceiver()\n      Dim rec2 As New NewsReceiver()\n      SendNews?.Invoke(\"Just in: A newsworthy item...\")\n   End Sub\n\n   Public Sub Register(client As Action(Of String))\n      SendNews = SendNews.Combine({SendNews, client})\n   End Sub\nEnd Module\n\nPublic Class NewsReceiver\n   Public Sub New()\n      NewsBroadcaster.Register(AddressOf Me.DisplayNews)\n   End Sub\n\n   Public Sub DisplayNews(newsItem As String)\n      Console.WriteLine(newsItem)\n   End Sub\nEnd Class\n```\n\nIf there are no elements in the `SendNews` invocation list, the `SendNews` delegate throws a <xref:System.NullReferenceException>. Before \nnull conditional operators, code like the following ensured that the delegate invocation list was not `Nothing`:\n\n```vb  \nSendNews = SendNews.Combine({SendNews, client})  \nIf SendNews IsNot Nothing Then \n   SendNews(\"Just in...\")\nEnd If\n```\n\nThe new way is much simpler:  \n\n```vb\nSendNews = SendNews.Combine({SendNews, client})  \nSendNews?.Invoke(\"Just in...\")\n```\n\nThe new way is thread-safe because the compiler generates code to evaluate `SendNews` one time only, keeping the result in a temporary variable. You need to explicitly call the `Invoke` method because there is no null-conditional delegate invocation syntax `SendNews?(String)`.  \n\n## See also\n\n- [Operators (Visual Basic)](index.md)\n- [Visual Basic Programming Guide](../../../visual-basic/programming-guide/index.md)\n- [Visual Basic Language Reference](../../../visual-basic/language-reference/index.md)\n","nodes":[{"pos":[4,235],"embed":true,"restype":"x-metadata","content":"title: \"Null-conditional Operators (Visual Basic)\"\nms.date: 10/19/2018\nhelpviewer_keywords: \n  - \"null-conditional operators [Visual Basic]\"\n  - \"?. operator [Visual Basic]\"\n  - \"?[] operator [C#]\"\n  - \"?[] operator [Visual Basic]\"","nodes":[{"content":"Null-conditional Operators (Visual Basic)","nodes":[{"pos":[0,41],"content":"Null-conditional Operators (Visual Basic)","nodes":[{"content":"Null-conditional Operators (Visual Basic)","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[242,294],"content":"?. and ?() null-conditional operators (Visual Basic)","linkify":"?. and ?() null-conditional operators (Visual Basic)","nodes":[{"content":"?. and ?() null-conditional operators (Visual Basic)","pos":[0,52],"nodes":[{"content":"?.","pos":[0,2]},{"content":"and ?() null-conditional operators (Visual Basic)","pos":[3,52]}]}]},{"content":"Tests the value of the left-hand operand for null (<ph id=\"ph1\">`Nothing`</ph>) before performing a member access (<ph id=\"ph2\">`?.`</ph>) or index (<ph id=\"ph3\">`?()`</ph>) operation; returns <ph id=\"ph4\">`Nothing`</ph> if the left-hand operand evaluates to <ph id=\"ph5\">`Nothing`</ph>.","pos":[296,493],"source":"Tests the value of the left-hand operand for null (`Nothing`) before performing a member access (`?.`) or index (`?()`) operation; returns `Nothing` if the left-hand operand evaluates to `Nothing`."},{"content":"Note that in expressions that ordinarily return value types, the null-conditional operator returns a <ph id=\"ph1\">&lt;xref:System.Nullable%601&gt;</ph>.","pos":[494,622],"source":" Note that in expressions that ordinarily return value types, the null-conditional operator returns a <xref:System.Nullable%601>."},{"content":"These operators help you write less code to handle null checks, especially when descending into data structures.","pos":[624,736]},{"content":"For example:","pos":[737,749]},{"content":"For comparison, the alternative code for the first of these expressions without a null-conditional operator is:","pos":[1040,1151]},{"content":"The null-conditional operators are short-circuiting.","pos":[1254,1306]},{"content":"If one operation in a chain of conditional member access and index operations returns <ph id=\"ph1\">`Nothing`</ph>, the rest of the chain’s execution stops.","pos":[1308,1445],"source":"  If one operation in a chain of conditional member access and index operations returns `Nothing`, the rest of the chain’s execution stops."},{"content":"In the following example, <ph id=\"ph1\">`C(E)`</ph> isn't evaluated if <ph id=\"ph2\">`A`</ph>, <ph id=\"ph3\">`B`</ph>, or <ph id=\"ph4\">`C`</ph> evaluates to <ph id=\"ph5\">`Nothing`</ph>.","pos":[1447,1539],"source":"  In the following example, `C(E)` isn't evaluated if `A`, `B`, or `C` evaluates to `Nothing`."},{"content":"Another use for null-conditional member access is to invoke delegates in a thread-safe way with much less code.","pos":[1565,1676]},{"content":"The following example defines two types, a <ph id=\"ph1\">`NewsBroadcaster`</ph> and a <ph id=\"ph2\">`NewsReceiver`</ph>.","pos":[1678,1760],"source":"  The following example defines two types, a `NewsBroadcaster` and a `NewsReceiver`."},{"content":"News items are sent to the receiver by the <ph id=\"ph1\">`NewsBroadcaster.SendNews`</ph> delegate.","pos":[1761,1840],"source":" News items are sent to the receiver by the `NewsBroadcaster.SendNews` delegate."},{"content":"If there are no elements in the <ph id=\"ph1\">`SendNews`</ph> invocation list, the <ph id=\"ph2\">`SendNews`</ph> delegate throws a <ph id=\"ph3\">&lt;xref:System.NullReferenceException&gt;</ph>.","pos":[2429,2559],"source":"If there are no elements in the `SendNews` invocation list, the `SendNews` delegate throws a <xref:System.NullReferenceException>."},{"content":"Before null conditional operators, code like the following ensured that the delegate invocation list was not <ph id=\"ph1\">`Nothing`</ph>:","pos":[2560,2680],"source":" Before \nnull conditional operators, code like the following ensured that the delegate invocation list was not `Nothing`:"},{"content":"The new way is much simpler:","pos":[2810,2838]},{"content":"The new way is thread-safe because the compiler generates code to evaluate <ph id=\"ph1\">`SendNews`</ph> one time only, keeping the result in a temporary variable.","pos":[2934,3078],"source":"The new way is thread-safe because the compiler generates code to evaluate `SendNews` one time only, keeping the result in a temporary variable."},{"content":"You need to explicitly call the <ph id=\"ph1\">`Invoke`</ph> method because there is no null-conditional delegate invocation syntax <ph id=\"ph2\">`SendNews?(String)`</ph>.","pos":[3079,3211],"source":" You need to explicitly call the `Invoke` method because there is no null-conditional delegate invocation syntax `SendNews?(String)`."},{"pos":[3218,3226],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3230,3266],"content":"<bpt id=\"p1\">[</bpt>Operators (Visual Basic)<ept id=\"p1\">](index.md)</ept>","source":"[Operators (Visual Basic)](index.md)"},{"pos":[3269,3351],"content":"<bpt id=\"p1\">[</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../../visual-basic/programming-guide/index.md)</ept>","source":"[Visual Basic Programming Guide](../../../visual-basic/programming-guide/index.md)"},{"pos":[3354,3438],"content":"<bpt id=\"p1\">[</bpt>Visual Basic Language Reference<ept id=\"p1\">](../../../visual-basic/language-reference/index.md)</ept>","source":"[Visual Basic Language Reference](../../../visual-basic/language-reference/index.md)"}]}