{"content":"---\ntitle: \"XDocument Class Overview (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 63305603-ab54-49fc-84e4-f76eecc59549\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# XDocument Class Overview (C#)\nThis topic introduces the <xref:System.Xml.Linq.XDocument> class.  \n  \n## Overview of the XDocument class  \n The <xref:System.Xml.Linq.XDocument> class contains the information necessary for a valid XML document. This includes an XML declaration, processing instructions, and comments.  \n  \n Note that you only have to create <xref:System.Xml.Linq.XDocument> objects if you require the specific functionality provided by the <xref:System.Xml.Linq.XDocument> class. In many circumstances, you can work directly with <xref:System.Xml.Linq.XElement>. Working directly with <xref:System.Xml.Linq.XElement> is a simpler programming model.  \n  \n <xref:System.Xml.Linq.XDocument> derives from <xref:System.Xml.Linq.XContainer>. Therefore, it can contain child nodes. However, <xref:System.Xml.Linq.XDocument> objects can have only one child <xref:System.Xml.Linq.XElement> node. This reflects the XML standard that there can be only one root element in an XML document.  \n  \n## Components of XDocument  \n An <xref:System.Xml.Linq.XDocument> can contain the following elements:  \n  \n-   One <xref:System.Xml.Linq.XDeclaration> object. <xref:System.Xml.Linq.XDeclaration> enables you to specify the pertinent parts of an XML declaration: the XML version, the encoding of the document, and whether the XML document is stand-alone.  \n  \n-   One <xref:System.Xml.Linq.XElement> object. This is the root node of the XML document.  \n  \n-   Any number of <xref:System.Xml.Linq.XProcessingInstruction> objects. A processing instruction communicates information to an application that processes the XML.  \n  \n-   Any number of <xref:System.Xml.Linq.XComment> objects. The comments will be siblings to the root element. The <xref:System.Xml.Linq.XComment> object cannot be the first argument in the list, because it is not valid for an XML document to start with a comment.  \n  \n-   One <xref:System.Xml.Linq.XDocumentType> for the DTD.  \n  \n When you serialize an <xref:System.Xml.Linq.XDocument>, even if `XDocument.Declaration` is `null`, the output will have an XML declaration if the writer has `Writer.Settings.OmitXmlDeclaration` set to `false` (the default).  \n  \n By default, [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] sets the version to \"1.0\", and sets the encoding to \"utf-8\".  \n  \n## Using XElement without XDocument  \n As previously mentioned, the <xref:System.Xml.Linq.XElement> class is the main class in the [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] programming interface. In many cases, your application will not require that you create a document. By using the <xref:System.Xml.Linq.XElement> class, you can create an XML tree, add other XML trees to it, modify the XML tree, and save it.  \n  \n## Using XDocument  \n To construct an <xref:System.Xml.Linq.XDocument>, use functional construction, just like you do to construct <xref:System.Xml.Linq.XElement> objects.  \n  \n The following code creates an <xref:System.Xml.Linq.XDocument> object and its associated contained objects.  \n  \n```csharp  \nXDocument d = new XDocument(  \n    new XComment(\"This is a comment.\"),  \n    new XProcessingInstruction(\"xml-stylesheet\",  \n        \"href='mystyle.css' title='Compact' type='text/css'\"),  \n    new XElement(\"Pubs\",  \n        new XElement(\"Book\",  \n            new XElement(\"Title\", \"Artifacts of Roman Civilization\"),  \n            new XElement(\"Author\", \"Moreno, Jordao\")  \n        ),  \n        new XElement(\"Book\",  \n            new XElement(\"Title\", \"Midieval Tools and Implements\"),  \n            new XElement(\"Author\", \"Gazit, Inbar\")  \n        )  \n    ),  \n    new XComment(\"This is another comment.\")  \n);  \nd.Declaration = new XDeclaration(\"1.0\", \"utf-8\", \"true\");  \nConsole.WriteLine(d);  \n  \nd.Save(\"test.xml\");  \n```  \n  \n When you examine the file test.xml, you get the following output:  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<!--This is a comment.-->  \n<?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  \n<Pubs>  \n  <Book>  \n    <Title>Artifacts of Roman Civilization</Title>  \n    <Author>Moreno, Jordao</Author>  \n  </Book>  \n  <Book>  \n    <Title>Midieval Tools and Implements</Title>  \n    <Author>Gazit, Inbar</Author>  \n  </Book>  \n</Pubs>  \n<!--This is another comment.-->  \n```  \n  \n## See Also  \n [LINQ to XML Programming Overview (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-programming-overview.md)","nodes":[{"pos":[12,58],"content":"XDocument Class Overview (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"XDocument Class Overview (C#) | Microsoft Docs","pos":[0,46]}]},{"pos":[417,446],"content":"XDocument Class Overview (C#)","linkify":"XDocument Class Overview (C#)","nodes":[{"content":"XDocument Class Overview (C#)","pos":[0,29]}]},{"content":"This topic introduces the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> class.","pos":[447,512],"source":"This topic introduces the <xref:System.Xml.Linq.XDocument> class."},{"pos":[521,552],"content":"Overview of the XDocument class","linkify":"Overview of the XDocument class","nodes":[{"content":"Overview of the XDocument class","pos":[0,31]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> class contains the information necessary for a valid XML document.","pos":[556,659],"source":"The <xref:System.Xml.Linq.XDocument> class contains the information necessary for a valid XML document."},{"content":"This includes an XML declaration, processing instructions, and comments.","pos":[660,732]},{"content":"Note that you only have to create <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> objects if you require the specific functionality provided by the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> class.","pos":[739,911],"source":"Note that you only have to create <xref:System.Xml.Linq.XDocument> objects if you require the specific functionality provided by the <xref:System.Xml.Linq.XDocument> class."},{"content":"In many circumstances, you can work directly with <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[912,994],"source":" In many circumstances, you can work directly with <xref:System.Xml.Linq.XElement>."},{"content":"Working directly with <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> is a simpler programming model.","pos":[995,1080],"source":" Working directly with <xref:System.Xml.Linq.XElement> is a simpler programming model."},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> derives from <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph>.","pos":[1087,1167],"source":"<xref:System.Xml.Linq.XDocument> derives from <xref:System.Xml.Linq.XContainer>."},{"content":"Therefore, it can contain child nodes.","pos":[1168,1206]},{"content":"However, <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> objects can have only one child <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> node.","pos":[1207,1318],"source":" However, <xref:System.Xml.Linq.XDocument> objects can have only one child <xref:System.Xml.Linq.XElement> node."},{"content":"This reflects the XML standard that there can be only one root element in an XML document.","pos":[1319,1409]},{"pos":[1418,1441],"content":"Components of XDocument","linkify":"Components of XDocument","nodes":[{"content":"Components of XDocument","pos":[0,23]}]},{"content":"An <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> can contain the following elements:","pos":[1445,1516],"source":"An <xref:System.Xml.Linq.XDocument> can contain the following elements:"},{"content":"One <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDeclaration&gt;</ph> object.","pos":[1526,1573],"source":"One <xref:System.Xml.Linq.XDeclaration> object."},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDeclaration&gt;</ph> enables you to specify the pertinent parts of an XML declaration: the XML version, the encoding of the document, and whether the XML document is stand-alone.","pos":[1574,1767],"source":"<xref:System.Xml.Linq.XDeclaration> enables you to specify the pertinent parts of an XML declaration: the XML version, the encoding of the document, and whether the XML document is stand-alone."},{"content":"One <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object.","pos":[1777,1820],"source":"One <xref:System.Xml.Linq.XElement> object."},{"content":"This is the root node of the XML document.","pos":[1821,1863]},{"content":"Any number of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XProcessingInstruction&gt;</ph> objects.","pos":[1873,1941],"source":"Any number of <xref:System.Xml.Linq.XProcessingInstruction> objects."},{"content":"A processing instruction communicates information to an application that processes the XML.","pos":[1942,2033]},{"content":"Any number of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XComment&gt;</ph> objects.","pos":[2043,2097],"source":"Any number of <xref:System.Xml.Linq.XComment> objects."},{"content":"The comments will be siblings to the root element.","pos":[2098,2148]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XComment&gt;</ph> object cannot be the first argument in the list, because it is not valid for an XML document to start with a comment.","pos":[2149,2302],"source":" The <xref:System.Xml.Linq.XComment> object cannot be the first argument in the list, because it is not valid for an XML document to start with a comment."},{"content":"One <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph> for the DTD.","pos":[2312,2365],"source":"One <xref:System.Xml.Linq.XDocumentType> for the DTD."},{"pos":[2372,2595],"content":"When you serialize an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, even if <ph id=\"ph2\">`XDocument.Declaration`</ph> is <ph id=\"ph3\">`null`</ph>, the output will have an XML declaration if the writer has <ph id=\"ph4\">`Writer.Settings.OmitXmlDeclaration`</ph> set to <ph id=\"ph5\">`false`</ph> (the default).","source":"When you serialize an <xref:System.Xml.Linq.XDocument>, even if `XDocument.Declaration` is `null`, the output will have an XML declaration if the writer has `Writer.Settings.OmitXmlDeclaration` set to `false` (the default)."},{"pos":[2602,2777],"content":"By default, <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> sets the version to \"1.0\", and sets the encoding to \"utf-8\".","source":"By default, [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] sets the version to \"1.0\", and sets the encoding to \"utf-8\"."},{"pos":[2786,2818],"content":"Using XElement without XDocument","linkify":"Using XElement without XDocument","nodes":[{"content":"Using XElement without XDocument","pos":[0,32]}]},{"content":"As previously mentioned, the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class is the main class in the <ph id=\"ph2\">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> programming interface.","pos":[2822,3039],"source":"As previously mentioned, the <xref:System.Xml.Linq.XElement> class is the main class in the [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] programming interface."},{"content":"In many cases, your application will not require that you create a document.","pos":[3040,3116]},{"content":"By using the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class, you can create an XML tree, add other XML trees to it, modify the XML tree, and save it.","pos":[3117,3257],"source":" By using the <xref:System.Xml.Linq.XElement> class, you can create an XML tree, add other XML trees to it, modify the XML tree, and save it."},{"pos":[3266,3281],"content":"Using XDocument","linkify":"Using XDocument","nodes":[{"content":"Using XDocument","pos":[0,15]}]},{"content":"To construct an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, use functional construction, just like you do to construct <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects.","pos":[3285,3434],"source":"To construct an <xref:System.Xml.Linq.XDocument>, use functional construction, just like you do to construct <xref:System.Xml.Linq.XElement> objects."},{"content":"The following code creates an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> object and its associated contained objects.","pos":[3441,3548],"source":"The following code creates an <xref:System.Xml.Linq.XDocument> object and its associated contained objects."},{"content":"When you examine the file test.xml, you get the following output:","pos":[4299,4364]},{"pos":[4809,4817],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4821,4948],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML Programming Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-programming-overview.md)</ept>","source":"[LINQ to XML Programming Overview (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-programming-overview.md)"}]}