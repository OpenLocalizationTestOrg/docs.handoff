{"content":"---\ntitle: \"How to: Validate Using XSD (LINQ to XML) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 6a7f83a9-2d74-4c2b-8417-0a8595879516\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Validate Using XSD (LINQ to XML) (C#)\nThe <xref:System.Xml.Schema> namespace contains extension methods that make it easy to validate an XML tree against an XML Schema Definition Language (XSD) file. For more information, see the <xref:System.Xml.Schema.Extensions.Validate%2A> method documentation.  \n  \n## Example  \n The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set. One of the documents is valid, the other is not.  \n  \n```csharp  \nstring xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child2\", \"content1\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n```  \n  \n## Example  \n The following example validates that the XML document from [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md) is valid per the schema from [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md). It then modifies the source XML document. It changes the `CustomerID` attribute on the first customer. After the change, orders will then refer to a customer that does not exist, so the XML document will no longer validate.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md).  \n  \n This example uses the following XSD schema: [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md).  \n  \n```csharp  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", \"CustomersOrders.xsd\");  \n  \nConsole.WriteLine(\"Attempting to validate\");  \nXDocument custOrdDoc = XDocument.Load(\"CustomersOrders.xml\");  \nbool errors = false;  \ncustOrdDoc.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrdDoc {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \n// Modify the source document so that it will not validate.  \ncustOrdDoc.Root.Element(\"Orders\").Element(\"Order\").Element(\"CustomerID\").Value = \"AAAAA\";  \nConsole.WriteLine(\"Attempting to validate after modification\");  \nerrors = false;  \ncustOrdDoc.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrdDoc {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n This example produces the following output:  \n  \n```  \nAttempting to validate  \ncustOrdDoc validated  \n  \nAttempting to validate after modification  \nThe key sequence 'AAAAA' in Keyref fails to refer to some key.  \ncustOrdDoc did not validate  \n```  \n  \n## See Also  \n <xref:System.Xml.Schema.Extensions.Validate%2A>   \n [Creating XML Trees (C#)](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)","nodes":[{"pos":[12,74],"content":"How to: Validate Using XSD (LINQ to XML) (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Validate Using XSD (LINQ to XML) (C#) | Microsoft Docs","pos":[0,62]}]},{"pos":[433,478],"content":"How to: Validate Using XSD (LINQ to XML) (C#)","linkify":"How to: Validate Using XSD (LINQ to XML) (C#)","nodes":[{"content":"How to: Validate Using XSD (LINQ to XML) (C#)","pos":[0,45]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Schema&gt;</ph> namespace contains extension methods that make it easy to validate an XML tree against an XML Schema Definition Language (XSD) file.","pos":[479,640],"source":"The <xref:System.Xml.Schema> namespace contains extension methods that make it easy to validate an XML tree against an XML Schema Definition Language (XSD) file."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph> method documentation.","pos":[641,740],"source":" For more information, see the <xref:System.Xml.Schema.Extensions.Validate%2A> method documentation."},{"pos":[749,756],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph>, then validates two <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> objects against the schema set.","pos":[760,915],"source":"The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set."},{"content":"One of the documents is valid, the other is not.","pos":[916,964]},{"content":"This example produces the following output:","pos":[2545,2588]},{"pos":[2795,2802],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example validates that the XML document from <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept> is valid per the schema from <bpt id=\"p2\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)</ept>.","pos":[2806,3187],"source":"The following example validates that the XML document from [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md) is valid per the schema from [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)."},{"content":"It then modifies the source XML document.","pos":[3188,3229]},{"content":"It changes the <ph id=\"ph1\">`CustomerID`</ph> attribute on the first customer.","pos":[3230,3290],"source":" It changes the `CustomerID` attribute on the first customer."},{"content":"After the change, orders will then refer to a customer that does not exist, so the XML document will no longer validate.","pos":[3291,3411]},{"pos":[3418,3624],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)."},{"pos":[3631,3808],"content":"This example uses the following XSD schema: <bpt id=\"p1\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)</ept>.","source":"This example uses the following XSD schema: [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)."},{"content":"This example produces the following output:","pos":[4886,4929]},{"pos":[5143,5151],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph>","pos":[5155,5202],"source":"<xref:System.Xml.Schema.Extensions.Validate%2A> "},{"content":"<bpt id=\"p1\"> [</bpt>Creating XML Trees (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)</ept>","pos":[5206,5306],"source":" [Creating XML Trees (C#)](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)"}]}