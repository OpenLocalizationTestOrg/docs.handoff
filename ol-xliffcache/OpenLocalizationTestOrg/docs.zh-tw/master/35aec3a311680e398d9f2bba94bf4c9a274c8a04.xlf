<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="trace-listeners.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35aec3a311680e398d9f2bba94bf4c9a274c8a04</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\debug-trace-profile\trace-listeners.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c0cce490b73c695aed1e71c390e5de6217d57</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ccc1c1680bd6d2386cd04615ef98c2773a0fe9fe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Trace Listeners</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Trace Listeners</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When using <bpt id="p1">**</bpt>Trace<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> and <ph id="ph1">&lt;xref:System.Diagnostics.TraceSource&gt;</ph>, you must have a mechanism for collecting and recording the messages that are sent.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Trace messages are received by <bpt id="p1">*</bpt>listeners<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The purpose of a listener is to collect, store, and route tracing messages.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Listeners direct the tracing output to an appropriate target, such as a log, window, or text file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Listeners are available to the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Trace<ept id="p2">**</ept>, and <ph id="ph1">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes, each of which can send its output to a variety of listener objects.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following are the commonly used predefined listeners:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> redirects output to an instance of the <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> class or to anything that is a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It can also write to the console or to a file, because these are <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Diagnostics.EventLogTraceListener&gt;</ph> redirects output to an event log.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> emits <bpt id="p1">**</bpt>Write<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WriteLine<ept id="p2">**</ept> messages to the <bpt id="p3">**</bpt>OutputDebugString<ept id="p3">**</ept> and to the <bpt id="p4">**</bpt>Debugger.Log<ept id="p4">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In Visual Studio, this causes the debugging messages to appear in the Output window.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fail<ept id="p1">**</ept> and failed <bpt id="p2">**</bpt>Assert<ept id="p2">**</ept> messages also emit to the <bpt id="p3">**</bpt>OutputDebugString<ept id="p3">**</ept> Windows API and the <bpt id="p4">**</bpt>Debugger.Log<ept id="p4">**</ept> method, and also cause a message box to be displayed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This behavior is the default behavior for <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Trace<ept id="p2">**</ept> messages, because <bpt id="p3">**</bpt>DefaultTraceListener<ept id="p3">**</ept> is automatically included in every <ph id="ph1">`Listeners`</ph> collection and is the only listener automatically included.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> directs tracing or debugging output to either the standard output or the standard error stream.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.DelimitedListTraceListener&gt;</ph> directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The trace output is in a delimited text format that uses the delimiter specified by the <ph id="ph1">&lt;xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Diagnostics.XmlWriterTraceListener&gt;</ph> directs tracing or debugging output as XML-encoded data to a <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> or to a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph>, such as a <ph id="ph4">&lt;xref:System.IO.FileStream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you want any listener besides the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> to receive <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Trace<ept id="p2">**</ept> and <ph id="ph2">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> output, you must add it to the <ph id="ph3">`Listeners`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create and Initialize Trace Listeners<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-create-and-initialize-trace-listeners.md)</ept> and <bpt id="p2">[</bpt>How to: Use TraceSource and Filters with Trace Listeners<ept id="p2">](../../../docs/framework/debug-trace-profile/how-to-use-tracesource-and-filters-with-trace-listeners.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Any listener in the <bpt id="p1">**</bpt>Listeners<ept id="p1">**</ept> collection gets the same messages from the trace output methods.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, suppose you set up two listeners: a <bpt id="p1">**</bpt>TextWriterTraceListener<ept id="p1">**</ept> and an <bpt id="p2">**</bpt>EventLogTraceListener<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Each listener receives the same message.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TextWriterTraceListener<ept id="p1">**</ept> would direct its output to a stream, and the <bpt id="p2">**</bpt>EventLogTraceListener<ept id="p2">**</ept> would direct its output to an event log.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to send output to the <bpt id="p1">**</bpt>Listeners<ept id="p1">**</ept> collection.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Debug and trace share the same <bpt id="p1">**</bpt>Listeners<ept id="p1">**</ept> collection, so if you add a listener object to a <bpt id="p2">**</bpt>Debug.Listeners<ept id="p2">**</ept> collection in your application, it gets added to the <bpt id="p3">**</bpt>Trace.Listeners<ept id="p3">**</ept> collection as well.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a listener to send tracing information to a console:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Developer-Defined Listeners</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can define your own listeners by inheriting from the <bpt id="p1">**</bpt>TraceListener<ept id="p1">**</ept> base class and overriding its methods with your customized methods.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information on creating developer-defined listeners, see <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> in the .NET Framework reference.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tracing and Instrumenting Applications<ept id="p1">](../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/trace-switches.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>