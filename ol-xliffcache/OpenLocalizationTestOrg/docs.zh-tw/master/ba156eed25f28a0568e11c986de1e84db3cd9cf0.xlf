<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="for.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba156eed25f28a0568e11c986de1e84db3cd9cf0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\for.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">919b520db47e5c1645b2c71cee2402f6d74fef6b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85d71b7568329bf0c1fd04a85628da2bdb6daeb5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>C# for statement</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>for (C# reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`for`</ph> statement executes a statement or a block of statements while a specified Boolean expression evaluates to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>At any point within the <ph id="ph1">`for`</ph> statement block, you can break out of the loop by using the <bpt id="p1">[</bpt>break<ept id="p1">](break.md)</ept> statement, or step to the next iteration in the loop by using the <bpt id="p2">[</bpt>continue<ept id="p2">](continue.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You also can exit a <ph id="ph1">`for`</ph> loop by the <bpt id="p1">[</bpt>goto<ept id="p1">](goto.md)</ept>, <bpt id="p2">[</bpt>return<ept id="p2">](return.md)</ept>, or <bpt id="p3">[</bpt>throw<ept id="p3">](throw.md)</ept> statements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Structure of the <ph id="ph1">`for`</ph> statement</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`for`</ph> statement defines <bpt id="p1">*</bpt>initializer<ept id="p1">*</ept>, <bpt id="p2">*</bpt>condition<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>iterator<ept id="p3">*</ept> sections:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All three sections are optional.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The body of the loop is either a statement or a block of statements.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`for`</ph> statement with all of the sections defined:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>initializer<ept id="p1">*</ept> section</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The statements in the <bpt id="p1">*</bpt>initializer<ept id="p1">*</ept> section are executed only once, before entering the loop.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>initializer<ept id="p1">*</ept> section is either of the following:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The declaration and initialization of a local loop variable, which can't be accessed from outside the loop.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Zero or more statement expressions from the following list, separated by commas:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>assignment<ept id="p1">](../operators/assignment-operator.md)</ept> statement</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>invocation of a method</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>prefix or postfix <bpt id="p1">[</bpt>increment<ept id="p1">](../operators/arithmetic-operators.md#increment-operator-)</ept> expression, such as <ph id="ph1">`++i`</ph> or <ph id="ph2">`i++`</ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>prefix or postfix <bpt id="p1">[</bpt>decrement<ept id="p1">](../operators/arithmetic-operators.md#decrement-operator---)</ept> expression, such as <ph id="ph1">`--i`</ph> or <ph id="ph2">`i--`</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>creation of an object by using <bpt id="p1">[</bpt>new<ept id="p1">](new-operator.md)</ept> keyword</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](await.md)</ept> expression</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>initializer<ept id="p1">*</ept> section in the example above declares and initializes the local loop variable <ph id="ph1">`i`</ph>:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>condition<ept id="p1">*</ept> section</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>condition<ept id="p1">*</ept> section, if present, must be a boolean expression.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That expression is evaluated before every loop iteration.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>condition<ept id="p1">*</ept> section is not present or the boolean expression evaluates to <ph id="ph1">`true`</ph>, the next loop iteration is executed; otherwise, the loop is exited.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>condition<ept id="p1">*</ept> section in the example above determines if the loop terminates based on the value of the local loop variable:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> section</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> section defines what happens after each iteration of the body of the loop.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> section contains zero or more of the following statement expressions, separated by commas:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>assignment<ept id="p1">](../operators/assignment-operator.md)</ept> statement</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>invocation of a method</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>prefix or postfix <bpt id="p1">[</bpt>increment<ept id="p1">](../operators/arithmetic-operators.md#increment-operator-)</ept> expression, such as <ph id="ph1">`++i`</ph> or <ph id="ph2">`i++`</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>prefix or postfix <bpt id="p1">[</bpt>decrement<ept id="p1">](../operators/arithmetic-operators.md#decrement-operator---)</ept> expression, such as <ph id="ph1">`--i`</ph> or <ph id="ph2">`i--`</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>creation of an object by using <bpt id="p1">[</bpt>new<ept id="p1">](new-operator.md)</ept> keyword</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](await.md)</ept> expression</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> section in the example above increments the local loop variable:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example illustrates several less common usages of the <ph id="ph1">`for`</ph> statement sections: assigning a value to an external loop variable in the <bpt id="p1">*</bpt>initializer<ept id="p1">*</ept> section, invoking a method in both the <bpt id="p2">*</bpt>initializer<ept id="p2">*</ept> and the <bpt id="p3">*</bpt>iterator<ept id="p3">*</ept> sections, and changing the values of two variables in the <bpt id="p4">*</bpt>iterator<ept id="p4">*</ept> section.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> to run the example code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After that you can modify the code and run it again.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example defines the infinite <ph id="ph1">`for`</ph> loop:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>The for statement<ept id="p1">](~/_csharplang/spec/statements.md#the-for-statement)</ept> section of the <bpt id="p2">[</bpt>C# language specification<ept id="p2">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Iteration Statements<ept id="p1">](iteration-statements.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>foreach, in<ept id="p1">](foreach-in.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>