{"content":"---\ntitle: \"Static Constructors (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"static constructors [C#]\"\n  - \"constructors [C#], static\"\nms.assetid: 151ec95e-3c4d-4ed7-885d-95b7a3be2e7d\ncaps.latest.revision: 23\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Static Constructors (C# Programming Guide)\nA static constructor is used to initialize any [static](../../../csharp/language-reference/keywords/static.md) data, or to perform a particular action that needs to be performed once only. It is called automatically before the first instance is created or any static members are referenced.  \n  \n [!code-cs[csProgGuideObjects#14](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/static-constructors_1.cs)]  \n  \n Static constructors have the following properties:  \n  \n-   A static constructor does not take access modifiers or have parameters.  \n  \n-   A static constructor is called automatically to initialize the [class](../../../csharp/language-reference/keywords/class.md) before the first instance is created or any static members are referenced.  \n  \n-   A static constructor cannot be called directly.  \n  \n-   The user has no control on when the static constructor is executed in the program.  \n  \n-   A typical use of static constructors is when the class is using a log file and the constructor is used to write entries to this file.  \n  \n-   Static constructors are also useful when creating wrapper classes for unmanaged code, when the constructor can call the `LoadLibrary` method.  \n  \n-   If a static constructor throws an exception, the runtime will not invoke it a second time, and the type will remain uninitialized for the lifetime of the application domain in which your program is running.  \n  \n## Example  \n In this example, class `Bus` has a static constructor. When the first instance of `Bus` is created (`bus1`), the static constructor is invoked to initialize the class. The sample output verifies that the static constructor runs only one time, even though two instances of `Bus` are created, and that it runs before the instance constructor runs.  \n  \n [!code-cs[csProgGuideObjects#15](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/static-constructors_2.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)   \n [Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)   \n [Static Classes and Static Class Members](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)   \n [Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)","nodes":[{"pos":[4,577],"embed":true,"restype":"x-metadata","content":"title: \"Static Constructors (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"static constructors [C#]\"\n  - \"constructors [C#], static\"\nms.assetid: 151ec95e-3c4d-4ed7-885d-95b7a3be2e7d\ncaps.latest.revision: 23\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Static Constructors (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,59],"content":"Static Constructors (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Static Constructors (C# Programming Guide) | Microsoft Docs","pos":[0,59]}]}],"path":["title"]}],"yml":true},{"pos":[584,626],"content":"Static Constructors (C# Programming Guide)","linkify":"Static Constructors (C# Programming Guide)","nodes":[{"content":"Static Constructors (C# Programming Guide)","pos":[0,42]}]},{"content":"A static constructor is used to initialize any <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> data, or to perform a particular action that needs to be performed once only.","pos":[627,815],"source":"A static constructor is used to initialize any [static](../../../csharp/language-reference/keywords/static.md) data, or to perform a particular action that needs to be performed once only."},{"content":"It is called automatically before the first instance is created or any static members are referenced.","pos":[816,917]},{"content":"Static constructors have the following properties:","pos":[1063,1113]},{"content":"A static constructor does not take access modifiers or have parameters.","pos":[1123,1194]},{"pos":[1204,1403],"content":"A static constructor is called automatically to initialize the <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../../../csharp/language-reference/keywords/class.md)</ept> before the first instance is created or any static members are referenced.","source":"A static constructor is called automatically to initialize the [class](../../../csharp/language-reference/keywords/class.md) before the first instance is created or any static members are referenced."},{"content":"A static constructor cannot be called directly.","pos":[1413,1460]},{"content":"The user has no control on when the static constructor is executed in the program.","pos":[1470,1552]},{"content":"A typical use of static constructors is when the class is using a log file and the constructor is used to write entries to this file.","pos":[1562,1695]},{"pos":[1705,1846],"content":"Static constructors are also useful when creating wrapper classes for unmanaged code, when the constructor can call the <ph id=\"ph1\">`LoadLibrary`</ph> method.","source":"Static constructors are also useful when creating wrapper classes for unmanaged code, when the constructor can call the `LoadLibrary` method."},{"content":"If a static constructor throws an exception, the runtime will not invoke it a second time, and the type will remain uninitialized for the lifetime of the application domain in which your program is running.","pos":[1856,2062]},{"pos":[2071,2078],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, class <ph id=\"ph1\">`Bus`</ph> has a static constructor.","pos":[2082,2136],"source":"In this example, class `Bus` has a static constructor."},{"content":"When the first instance of <ph id=\"ph1\">`Bus`</ph> is created (<ph id=\"ph2\">`bus1`</ph>), the static constructor is invoked to initialize the class.","pos":[2137,2249],"source":" When the first instance of `Bus` is created (`bus1`), the static constructor is invoked to initialize the class."},{"content":"The sample output verifies that the static constructor runs only one time, even though two instances of <ph id=\"ph1\">`Bus`</ph> are created, and that it runs before the instance constructor runs.","pos":[2250,2427],"source":" The sample output verifies that the static constructor runs only one time, even though two instances of `Bus` are created, and that it runs before the instance constructor runs."},{"pos":[2575,2583],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2587,2654],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2658,2744],"source":"[Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constructors.md)</ept><ph id=\"ph1\"> </ph>","pos":[2748,2834],"source":"[Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md) "},{"content":"<bpt id=\"p1\">[</bpt>Static Classes and Static Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)</ept><ph id=\"ph1\"> </ph>","pos":[2838,2978],"source":"[Static Classes and Static Class Members](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md) "},{"content":"<bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/destructors.md)</ept>","pos":[2982,3064],"source":"[Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)"}]}