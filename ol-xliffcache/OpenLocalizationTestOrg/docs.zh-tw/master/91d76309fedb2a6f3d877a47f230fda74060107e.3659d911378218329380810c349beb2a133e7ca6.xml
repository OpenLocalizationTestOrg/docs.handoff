{"content":"---\ntitle: \"await - C# Reference\"\nms.custom: seodec18\nms.date: 05/22/2017\nf1_keywords: \n  - \"await_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"await keyword [C#]\"\n  - \"await [C#]\"\nms.assetid: 50725c24-ac76-4ca7-bca1-dd57642ffedb\n---\n# await (C# Reference)\nThe `await` operator is applied to a task in an asynchronous method to insert a suspension point in the execution of the method until the awaited task completes. The task represents ongoing work.  \n  \n`await` can only be used in an asynchronous method modified by the [async](../../../csharp/language-reference/keywords/async.md) keyword. Such a method, defined by using the `async` modifier and usually containing one or more `await` expressions, is referred to as an *async method*.  \n  \n> [!NOTE]\n> The `async` and `await` keywords were introduced in C# 5. For an introduction to async programming, see [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md).  \n  \nThe task to which the `await` operator is applied typically is returned by a call to a method that implements the [Task-Based Asynchronous Pattern](../../../standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md). They include methods that return <xref:System.Threading.Tasks.Task>, <xref:System.Threading.Tasks.Task%601>, <xref:System.Threading.Tasks.ValueTask>, and <xref:System.Threading.Tasks.ValueTask%601> objects.  \n\nIn the following example, the <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A?displayProperty=nameWithType> method returns a `Task<byte[]>`. The task is a promise to produce the actual byte array when the task is complete. The `await` operator suspends execution until the work of the <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A> method is complete. In the meantime, control is returned to the caller of `GetPageSizeAsync`. When the task finishes execution, the `await` expression evaluates to a byte array.  \n\n[!code-csharp[await-example](../../../../samples/snippets/csharp/language-reference/keywords/await/await1.cs)]  \n\n> [!IMPORTANT]\n> For the complete example, see [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md). You can download the sample from [Developer Code Samples](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f) on the Microsoft website. The example is in the AsyncWalkthrough_HttpClient project.  \n  \nAs shown in the previous example, if `await` is applied to the result of a method call that returns a `Task<TResult>`, then the type of the `await` expression is `TResult`. If `await` is applied to the result of a method call that returns a `Task`, then the type of the `await` expression is `void`. The following example illustrates the difference.  \n  \n```csharp  \n// await keyword used with a method that returns a Task<TResult>.  \nTResult result = await AsyncMethodThatReturnsTaskTResult();  \n  \n// await keyword used with a method that returns a Task.  \nawait AsyncMethodThatReturnsTask();  \n\n// await keyword used with a method that returns a ValueTask<TResult>.\nTResult result = await AsyncMethodThatReturnsValueTaskTResult();\n```  \n  \nAn `await` expression does not block the thread on which it is executing. Instead, it causes the compiler to sign up the rest of the async method as a continuation on the awaited task. Control then returns to the caller of the async method. When the task completes, it invokes its continuation, and execution of the async method resumes where it left off.  \n  \nAn `await` expression can occur only in the body of its enclosing method, lambda expression, or anonymous method, which must be marked with an `async` modifier. The term *await* serves as a keyword only in that context. Elsewhere, it is interpreted as an identifier. Within the method, lambda expression, or anonymous method, an `await` expression cannot occur in the body of a synchronous function, in a query expression, in the block of a [lock statement](../../../csharp/language-reference/keywords/lock-statement.md), or in an [unsafe](../../../csharp/language-reference/keywords/unsafe.md) context.  \n  \n## Exceptions  \nMost async methods return a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>. The properties of the returned task carry information about its status and history, such as whether the task is complete, whether the async method caused an exception or was canceled, and what the final result is. The `await` operator accesses those properties by calling methods on the object returned by the `GetAwaiter` method.  \n  \nIf you await a task-returning async method that causes an exception, the `await` operator rethrows the exception.  \n  \nIf you await a task-returning async method that's canceled, the `await` operator rethrows an <xref:System.OperationCanceledException>.  \n  \nA single task that is in a faulted state can reflect multiple exceptions. For example, the task might be the result of a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>. When you await such a task, the await operation rethrows only one of the exceptions. However, you can't predict which of the exceptions is rethrown.  \n  \nFor examples of error handling in async methods, see [try-catch](../../../csharp/language-reference/keywords/try-catch.md).  \n  \n## Example  \nThe following example returns the total number of characters in the pages whose URLs are passed to it as command line arguments. The example calls the `GetPageLengthsAsync` method, which is marked with the `async` keyword. The `GetPageLengthsAsync` method in turn uses the `await` keyword to await calls to the <xref:System.Net.Http.HttpClient.GetStringAsync%2A?displayProperty=nameWithType> method.  \n\n[!code-csharp[await-example](../../../../samples/snippets/csharp/language-reference/keywords/await/await2.cs)]  \n\nThe preceding example uses C# 7.1, which supports the [`async` `Main` method](../../programming-guide/main-and-command-args/index.md). Because earlier C# versions don't support application entry points that return <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>, you cannot apply the `async` modifier to the `Main` method and await the `GetPageLengthsAsync` method call. In that case, you can ensure that the `Main` method waits for the async operation to complete by retrieving the value of the <xref:System.Threading.Tasks.Task%601.Result?displayProperty=nameWithType> property. For tasks that do not return a value, you can call the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method. For information about how to select the language version, see [Select the C# language version](../configure-language-version.md).\n\n## See also\n\n- [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md)\n- [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)\n- [async](../../../csharp/language-reference/keywords/async.md)\n","nodes":[{"pos":[4,226],"embed":true,"restype":"x-metadata","content":"title: \"await - C# Reference\"\nms.custom: seodec18\nms.date: 05/22/2017\nf1_keywords: \n  - \"await_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"await keyword [C#]\"\n  - \"await [C#]\"\nms.assetid: 50725c24-ac76-4ca7-bca1-dd57642ffedb","nodes":[{"content":"await - C# Reference","nodes":[{"pos":[0,20],"content":"await - C# Reference","nodes":[{"content":"await - C# Reference","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[233,253],"content":"await (C# Reference)","linkify":"await (C# Reference)","nodes":[{"content":"await (C# Reference)","pos":[0,20]}]},{"content":"The <ph id=\"ph1\">`await`</ph> operator is applied to a task in an asynchronous method to insert a suspension point in the execution of the method until the awaited task completes.","pos":[254,415],"source":"The `await` operator is applied to a task in an asynchronous method to insert a suspension point in the execution of the method until the awaited task completes."},{"content":"The task represents ongoing work.","pos":[416,449]},{"content":"<ph id=\"ph1\">`await`</ph> can only be used in an asynchronous method modified by the <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](../../../csharp/language-reference/keywords/async.md)</ept> keyword.","pos":[455,592],"source":"`await` can only be used in an asynchronous method modified by the [async](../../../csharp/language-reference/keywords/async.md) keyword."},{"content":"Such a method, defined by using the <ph id=\"ph1\">`async`</ph> modifier and usually containing one or more <ph id=\"ph2\">`await`</ph> expressions, is referred to as an <bpt id=\"p1\">*</bpt>async method<ept id=\"p1\">*</ept>.","pos":[593,738],"source":" Such a method, defined by using the `async` modifier and usually containing one or more `await` expressions, is referred to as an *async method*."},{"pos":[746,967],"content":"[!NOTE]\nThe `async` and `await` keywords were introduced in C# 5. For an introduction to async programming, see [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md).","leadings":["","> "],"nodes":[{"content":"The `async` and `await` keywords were introduced in C# 5. For an introduction to async programming, see [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md).","pos":[8,219],"nodes":[{"content":"The <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords were introduced in C# 5.","pos":[0,57],"source":"The `async` and `await` keywords were introduced in C# 5."},{"content":"For an introduction to async programming, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/index.md)</ept>.","pos":[58,211],"source":" For an introduction to async programming, see [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md)."}]}]},{"content":"The task to which the <ph id=\"ph1\">`await`</ph> operator is applied typically is returned by a call to a method that implements the <bpt id=\"p1\">[</bpt>Task-Based Asynchronous Pattern<ept id=\"p1\">](../../../standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept>.","pos":[973,1213],"source":"The task to which the `await` operator is applied typically is returned by a call to a method that implements the [Task-Based Asynchronous Pattern](../../../standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)."},{"content":"They include methods that return <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.ValueTask&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> objects.","pos":[1214,1420],"source":" They include methods that return <xref:System.Threading.Tasks.Task>, <xref:System.Threading.Tasks.Task%601>, <xref:System.Threading.Tasks.ValueTask>, and <xref:System.Threading.Tasks.ValueTask%601> objects."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A?displayProperty=nameWithType&gt;</ph> method returns a <ph id=\"ph2\">`Task&lt;byte[]&gt;`</ph>.","pos":[1424,1570],"source":"In the following example, the <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A?displayProperty=nameWithType> method returns a `Task<byte[]>`."},{"content":"The task is a promise to produce the actual byte array when the task is complete.","pos":[1571,1652]},{"content":"The <ph id=\"ph1\">`await`</ph> operator suspends execution until the work of the <ph id=\"ph2\">&lt;xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A&gt;</ph> method is complete.","pos":[1653,1789],"source":" The `await` operator suspends execution until the work of the <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A> method is complete."},{"content":"In the meantime, control is returned to the caller of <ph id=\"ph1\">`GetPageSizeAsync`</ph>.","pos":[1790,1863],"source":" In the meantime, control is returned to the caller of `GetPageSizeAsync`."},{"content":"When the task finishes execution, the <ph id=\"ph1\">`await`</ph> expression evaluates to a byte array.","pos":[1864,1947],"source":" When the task finishes execution, the `await` expression evaluates to a byte array."},{"pos":[2067,2490],"content":"[!IMPORTANT]\nFor the complete example, see [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md). You can download the sample from [Developer Code Samples](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f) on the Microsoft website. The example is in the AsyncWalkthrough_HttpClient project.","leadings":["","> "],"nodes":[{"content":"For the complete example, see [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md). You can download the sample from [Developer Code Samples](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f) on the Microsoft website. The example is in the AsyncWalkthrough_HttpClient project.","pos":[13,421],"nodes":[{"content":"For the complete example, see <bpt id=\"p1\">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.","pos":[0,196],"source":"For the complete example, see [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)."},{"content":"You can download the sample from <bpt id=\"p1\">[</bpt>Developer Code Samples<ept id=\"p1\">](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)</ept> on the Microsoft website.","pos":[197,349],"source":" You can download the sample from [Developer Code Samples](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f) on the Microsoft website."},{"content":"The example is in the AsyncWalkthrough_HttpClient project.","pos":[350,408]}]}]},{"content":"As shown in the previous example, if <ph id=\"ph1\">`await`</ph> is applied to the result of a method call that returns a <ph id=\"ph2\">`Task&lt;TResult&gt;`</ph>, then the type of the <ph id=\"ph3\">`await`</ph> expression is <ph id=\"ph4\">`TResult`</ph>.","pos":[2496,2668],"source":"As shown in the previous example, if `await` is applied to the result of a method call that returns a `Task<TResult>`, then the type of the `await` expression is `TResult`."},{"content":"If <ph id=\"ph1\">`await`</ph> is applied to the result of a method call that returns a <ph id=\"ph2\">`Task`</ph>, then the type of the <ph id=\"ph3\">`await`</ph> expression is <ph id=\"ph4\">`void`</ph>.","pos":[2669,2795],"source":" If `await` is applied to the result of a method call that returns a `Task`, then the type of the `await` expression is `void`."},{"content":"The following example illustrates the difference.","pos":[2796,2845]},{"content":"An <ph id=\"ph1\">`await`</ph> expression does not block the thread on which it is executing.","pos":[3239,3312],"source":"An `await` expression does not block the thread on which it is executing."},{"content":"Instead, it causes the compiler to sign up the rest of the async method as a continuation on the awaited task.","pos":[3313,3423]},{"content":"Control then returns to the caller of the async method.","pos":[3424,3479]},{"content":"When the task completes, it invokes its continuation, and execution of the async method resumes where it left off.","pos":[3480,3594]},{"content":"An <ph id=\"ph1\">`await`</ph> expression can occur only in the body of its enclosing method, lambda expression, or anonymous method, which must be marked with an <ph id=\"ph2\">`async`</ph> modifier.","pos":[3600,3760],"source":"An `await` expression can occur only in the body of its enclosing method, lambda expression, or anonymous method, which must be marked with an `async` modifier."},{"content":"The term <bpt id=\"p1\">*</bpt>await<ept id=\"p1\">*</ept> serves as a keyword only in that context.","pos":[3761,3819],"source":" The term *await* serves as a keyword only in that context."},{"content":"Elsewhere, it is interpreted as an identifier.","pos":[3820,3866]},{"content":"Within the method, lambda expression, or anonymous method, an <ph id=\"ph1\">`await`</ph> expression cannot occur in the body of a synchronous function, in a query expression, in the block of a <bpt id=\"p1\">[</bpt>lock statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/lock-statement.md)</ept>, or in an <bpt id=\"p2\">[</bpt>unsafe<ept id=\"p2\">](../../../csharp/language-reference/keywords/unsafe.md)</ept> context.","pos":[3867,4203],"source":" Within the method, lambda expression, or anonymous method, an `await` expression cannot occur in the body of a synchronous function, in a query expression, in the block of a [lock statement](../../../csharp/language-reference/keywords/lock-statement.md), or in an [unsafe](../../../csharp/language-reference/keywords/unsafe.md) context."},{"pos":[4212,4222],"content":"Exceptions","linkify":"Exceptions","nodes":[{"content":"Exceptions","pos":[0,10]}]},{"content":"Most async methods return a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[4225,4330],"source":"Most async methods return a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>."},{"content":"The properties of the returned task carry information about its status and history, such as whether the task is complete, whether the async method caused an exception or was canceled, and what the final result is.","pos":[4331,4544]},{"content":"The <ph id=\"ph1\">`await`</ph> operator accesses those properties by calling methods on the object returned by the <ph id=\"ph2\">`GetAwaiter`</ph> method.","pos":[4545,4661],"source":" The `await` operator accesses those properties by calling methods on the object returned by the `GetAwaiter` method."},{"pos":[4667,4780],"content":"If you await a task-returning async method that causes an exception, the <ph id=\"ph1\">`await`</ph> operator rethrows the exception.","source":"If you await a task-returning async method that causes an exception, the `await` operator rethrows the exception."},{"pos":[4786,4920],"content":"If you await a task-returning async method that's canceled, the <ph id=\"ph1\">`await`</ph> operator rethrows an <ph id=\"ph2\">&lt;xref:System.OperationCanceledException&gt;</ph>.","source":"If you await a task-returning async method that's canceled, the `await` operator rethrows an <xref:System.OperationCanceledException>."},{"content":"A single task that is in a faulted state can reflect multiple exceptions.","pos":[4926,4999]},{"content":"For example, the task might be the result of a call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph>.","pos":[5000,5130],"source":" For example, the task might be the result of a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>."},{"content":"When you await such a task, the await operation rethrows only one of the exceptions.","pos":[5131,5215]},{"content":"However, you can't predict which of the exceptions is rethrown.","pos":[5216,5279]},{"pos":[5285,5408],"content":"For examples of error handling in async methods, see <bpt id=\"p1\">[</bpt>try-catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept>.","source":"For examples of error handling in async methods, see [try-catch](../../../csharp/language-reference/keywords/try-catch.md)."},{"pos":[5417,5424],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example returns the total number of characters in the pages whose URLs are passed to it as command line arguments.","pos":[5427,5555]},{"content":"The example calls the <ph id=\"ph1\">`GetPageLengthsAsync`</ph> method, which is marked with the <ph id=\"ph2\">`async`</ph> keyword.","pos":[5556,5649],"source":" The example calls the `GetPageLengthsAsync` method, which is marked with the `async` keyword."},{"content":"The <ph id=\"ph1\">`GetPageLengthsAsync`</ph> method in turn uses the <ph id=\"ph2\">`await`</ph> keyword to await calls to the <ph id=\"ph3\">&lt;xref:System.Net.Http.HttpClient.GetStringAsync%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[5650,5826],"source":" The `GetPageLengthsAsync` method in turn uses the `await` keyword to await calls to the <xref:System.Net.Http.HttpClient.GetStringAsync%2A?displayProperty=nameWithType> method."},{"content":"The preceding example uses C# 7.1, which supports the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`async`</ph> <ph id=\"ph2\">`Main`</ph> method<ept id=\"p1\">](../../programming-guide/main-and-command-args/index.md)</ept>.","pos":[5944,6078],"source":"The preceding example uses C# 7.1, which supports the [`async` `Main` method](../../programming-guide/main-and-command-args/index.md)."},{"content":"Because earlier C# versions don't support application entry points that return <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, you cannot apply the <ph id=\"ph3\">`async`</ph> modifier to the <ph id=\"ph4\">`Main`</ph> method and await the <ph id=\"ph5\">`GetPageLengthsAsync`</ph> method call.","pos":[6079,6343],"source":" Because earlier C# versions don't support application entry points that return <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>, you cannot apply the `async` modifier to the `Main` method and await the `GetPageLengthsAsync` method call."},{"content":"In that case, you can ensure that the <ph id=\"ph1\">`Main`</ph> method waits for the async operation to complete by retrieving the value of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601.Result?displayProperty=nameWithType&gt;</ph> property.","pos":[6344,6553],"source":" In that case, you can ensure that the `Main` method waits for the async operation to complete by retrieving the value of the <xref:System.Threading.Tasks.Task%601.Result?displayProperty=nameWithType> property."},{"content":"For tasks that do not return a value, you can call the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[6554,6688],"source":" For tasks that do not return a value, you can call the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method."},{"content":"For information about how to select the language version, see <bpt id=\"p1\">[</bpt>Select the C# language version<ept id=\"p1\">](../configure-language-version.md)</ept>.","pos":[6689,6818],"source":" For information about how to select the language version, see [Select the C# language version](../configure-language-version.md)."},{"pos":[6823,6831],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6835,6941],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md)"},{"pos":[6944,7109],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>","source":"[Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)"},{"pos":[7112,7173],"content":"<bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](../../../csharp/language-reference/keywords/async.md)</ept>","source":"[async](../../../csharp/language-reference/keywords/async.md)"}]}