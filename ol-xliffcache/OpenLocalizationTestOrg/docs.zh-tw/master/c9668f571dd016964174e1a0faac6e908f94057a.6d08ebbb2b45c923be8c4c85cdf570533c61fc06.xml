{"content":"---\ntitle: \"How to: Modify an Office Open XML Document (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 1cefd7f5-8e39-44c4-869c-f8021538a777\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Modify an Office Open XML Document (Visual Basic)\nThis topic presents an example that opens an Office Open XML document, modifies it, and saves it.  \n  \n For more information on Office Open XML, see [www.openxmldeveloper.org](http://go.microsoft.com/fwlink/?LinkID=95573).  \n  \n## Example  \n This example finds the first paragraph element in the document. It retrieves the text from the paragraph, and then deletes all text runs in the paragraph. It creates a new text run that consists of the first paragraph text that has been converted to upper case. It then serializes the changed XML into the Open XML package and closes it.  \n  \n This example uses classes found in the WindowsBase assembly. It uses types in the <xref:System.IO.Packaging?displayProperty=fullName> namespace.  \n  \n```vb  \nImports <xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\">  \n  \nModule Module1  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(ByVal source As IEnumerable(Of String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As String In source  \n            sb.Append(s)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item))  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As T In source  \n            sb.Append(s).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String), ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item)).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    Public Function ParagraphText(ByVal e As XElement) As String  \n        Dim w As XNamespace = e.Name.Namespace  \n        Return (e.<w:r>.<w:t>).StringConcatenate(Function(element) CStr(element))  \n    End Function  \n  \n    ' Following function is required because VB does not support short circuit evaluation  \n    Private Function GetStyleOfParagraph(ByVal styleNode As XElement, _  \n                                         ByVal defaultStyle As String) As String  \n        If (styleNode Is Nothing) Then  \n            Return defaultStyle  \n        Else  \n            Return styleNode.@w:val  \n        End If  \n    End Function  \n  \n    Sub Main()  \n        Dim fileName = \"SampleDoc.docx\"  \n  \n        Dim documentRelationshipType = _  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"  \n        Dim stylesRelationshipType = _  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\"  \n        Dim wordmlNamespace = _  \n          \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"  \n  \n        Using wdPackage As Package = Package.Open(fileName, FileMode.Open, FileAccess.ReadWrite)  \n            Dim docPackageRelationship As PackageRelationship = wdPackage _  \n                    .GetRelationshipsByType(documentRelationshipType).FirstOrDefault()  \n            If (docPackageRelationship IsNot Nothing) Then  \n                Dim documentUri As Uri = PackUriHelper.ResolvePartUri(New Uri(\"/\", _  \n                            UriKind.Relative), docPackageRelationship.TargetUri)  \n                Dim documentPart As PackagePart = wdPackage.GetPart(documentUri)  \n  \n                '  Load the document XML in the part into an XDocument instance.  \n                Dim xDoc As XDocument = XDocument.Load(XmlReader.Create(documentPart.GetStream()))  \n  \n                '  Find the styles part. There will only be one.  \n                Dim styleRelation As PackageRelationship = documentPart _  \n                        .GetRelationshipsByType(stylesRelationshipType).FirstOrDefault()  \n                Dim stylePart As PackagePart = Nothing  \n                Dim styleDoc As XDocument = Nothing  \n  \n                If (styleRelation IsNot Nothing) Then  \n                    Dim styleUri As Uri = PackUriHelper.ResolvePartUri( _  \n                            documentUri, styleRelation.TargetUri)  \n                    stylePart = wdPackage.GetPart(styleUri)  \n  \n                    ' Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()))  \n                End If  \n  \n                Dim paraNode As XElement = xDoc.Root.<w:body>...<w:p>.FirstOrDefault()  \n  \n                Dim paraText As String = ParagraphText(paraNode)  \n  \n                ' Remove all text runs.  \n                paraNode...<w:r>.Remove()  \n  \n                paraNode.Add(<w:r><w:t><%= paraText.ToUpper() %></w:t></w:r>)  \n  \n                ' Save the XML into the package.  \n                Using xw As XmlWriter = _  \n                  XmlWriter.Create(documentPart.GetStream(FileMode.Create, FileAccess.Write))  \n                    xDoc.Save(xw)  \n                End Using  \n  \n                Console.WriteLine(\"New first paragraph: >{0}<\", paraText.ToUpper())  \n            End If  \n        End Using  \n    End Sub  \nEnd Module  \n```  \n  \n If you open `SampleDoc.docx` after running this program, you can see that this program converted the first paragraph in the document to upper case.  \n  \n When run with the sample Open XML document described in [Creating the Source Office Open XML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md), this example produces the following output:  \n  \n```  \nNew first paragraph: >PARSING WORDPROCESSINGML WITH LINQ TO XML<  \n```  \n  \n## See Also  \n [Advanced Query Techniques (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)","nodes":[{"pos":[12,86],"content":"How to: Modify an Office Open XML Document (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Modify an Office Open XML Document (Visual Basic) | Microsoft Docs","pos":[0,74]}]},{"pos":[393,450],"content":"How to: Modify an Office Open XML Document (Visual Basic)","linkify":"How to: Modify an Office Open XML Document (Visual Basic)","nodes":[{"content":"How to: Modify an Office Open XML Document (Visual Basic)","pos":[0,57]}]},{"content":"This topic presents an example that opens an Office Open XML document, modifies it, and saves it.","pos":[451,548]},{"pos":[555,673],"content":"For more information on Office Open XML, see <bpt id=\"p1\">[</bpt>www.openxmldeveloper.org<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=95573)</ept>.","source":"For more information on Office Open XML, see [www.openxmldeveloper.org](http://go.microsoft.com/fwlink/?LinkID=95573)."},{"pos":[682,689],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example finds the first paragraph element in the document.","pos":[693,756]},{"content":"It retrieves the text from the paragraph, and then deletes all text runs in the paragraph.","pos":[757,847]},{"content":"It creates a new text run that consists of the first paragraph text that has been converted to upper case.","pos":[848,954]},{"content":"It then serializes the changed XML into the Open XML package and closes it.","pos":[955,1030]},{"content":"This example uses classes found in the WindowsBase assembly.","pos":[1037,1097]},{"content":"It uses types in the <ph id=\"ph1\">&lt;xref:System.IO.Packaging?displayProperty=fullName&gt;</ph> namespace.","pos":[1098,1181],"source":" It uses types in the <xref:System.IO.Packaging?displayProperty=fullName> namespace."},{"pos":[6257,6404],"content":"If you open <ph id=\"ph1\">`SampleDoc.docx`</ph> after running this program, you can see that this program converted the first paragraph in the document to upper case.","source":"If you open `SampleDoc.docx` after running this program, you can see that this program converted the first paragraph in the document to upper case."},{"pos":[6411,6679],"content":"When run with the sample Open XML document described in <bpt id=\"p1\">[</bpt>Creating the Source Office Open XML Document (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>, this example produces the following output:","source":"When run with the sample Open XML document described in [Creating the Source Office Open XML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md), this example produces the following output:"},{"pos":[6770,6778],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6782,6937],"content":"<bpt id=\"p1\">[</bpt>Advanced Query Techniques (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)</ept>","source":"[Advanced Query Techniques (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)"}]}