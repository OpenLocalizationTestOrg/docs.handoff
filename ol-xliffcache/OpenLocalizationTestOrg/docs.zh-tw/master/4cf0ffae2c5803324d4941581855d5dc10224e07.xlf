<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="decrypting-data.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cf0ffae2c5803324d4941581855d5dc10224e07</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\decrypting-data.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">986bcc4e24ab6c62fcd66c0b0fc632e774a2c951</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">815470630f4b1076a52c58e218a215de8d187c8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Decrypting Data</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Decrypting Data</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Decryption is the reverse operation of encryption.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For secret-key encryption, you must know both the key and IV that were used to encrypt the data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For public-key encryption, you must know either the public key (if the data was encrypted using the private key) or the private key (if the data was encrypted using the public key).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Symmetric Decryption</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The decryption of data encrypted with symmetric algorithms is similar to the process used to encrypt data with symmetric algorithms.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> class is used with symmetric cryptography classes provided by the .NET Framework to decrypt data read from any managed stream object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to create a new instance of the <ph id="ph1">&lt;xref:System.Security.Cryptography.RijndaelManaged&gt;</ph> class and use it to perform decryption on a <ph id="ph2">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example first creates a new instance of the <bpt id="p1">**</bpt>RijndaelManaged<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Next it creates a <bpt id="p1">**</bpt>CryptoStream<ept id="p1">**</ept> object and initializes it to the value of a managed stream called <ph id="ph1">`myStream`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Next, the <bpt id="p1">**</bpt>CreateDecryptor<ept id="p1">**</ept> method from the <bpt id="p2">**</bpt>RijndaelManaged<ept id="p2">**</ept> class is passed the same key and IV that was used for encryption and is then passed to the <bpt id="p3">**</bpt>CryptoStream<ept id="p3">**</ept> constructor.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Finally, the <bpt id="p1">**</bpt>CryptoStreamMode.Read<ept id="p1">**</ept> enumeration is passed to the <bpt id="p2">**</bpt>CryptoStream<ept id="p2">**</ept> constructor to specify read access to the stream.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example shows the entire process of creating a stream, decrypting the stream, reading from the stream, and closing the streams.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> object is created that initializes a network stream when a connection to the listening object is made.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The network stream is then decrypted using the <bpt id="p1">**</bpt>CryptoStream<ept id="p1">**</ept> class and the <bpt id="p2">**</bpt>RijndaelManaged<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This example assumes that the key and IV values have been either successfully transferred or previously agreed upon.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It does not show the code needed to encrypt and transfer these values.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For the previous sample to work, an encrypted connection must be made to the listener.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The connection must use the same key, IV, and algorithm used in the listener.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If such a connection is made, the message is decrypted and displayed to the console.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Asymmetric Decryption</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Typically, a party (party A) generates both a public and private key and stores the key either in memory or in a cryptographic key container.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Party A then sends the public key to another party (party B).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using the public key, party B encrypts data and sends the data back to party A. After receiving the data, party A decrypts it using the private key that corresponds.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Decryption will be successful only if party A uses the private key that corresponds to the public key Party B used to encrypt the data.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For information on how to store an asymmetric key in secure cryptographic key container and how to later retrieve the asymmetric key, see <bpt id="p1">[</bpt>How to: Store Asymmetric Keys in a Key Container<ept id="p1">](../../../docs/standard/security/how-to-store-asymmetric-keys-in-a-key-container.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example illustrates the decryption of two arrays of bytes that represent a symmetric key and IV.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For information on how to extract the asymmetric public key from the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object in a format that you can easily send to a third party, see <bpt id="p1">[</bpt>Encrypting Data<ept id="p1">](../../../docs/standard/security/encrypting-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generating Keys for Encryption and Decryption<ept id="p1">](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Encrypting Data<ept id="p1">](../../../docs/standard/security/encrypting-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](../../../docs/standard/security/cryptographic-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>