{"content":"---\ntitle: \"Functional Construction (LINQ to XML) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: feac4273-39ab-43ae-bab7-4059c807a785\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Functional Construction (LINQ to XML) (Visual Basic)\n[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] provides a powerful way to create XML elements called *functional construction*. Functional construction is the ability to create an XML tree in a single statement.  \n  \n There are several key features of the [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] programming interface that enable functional construction:  \n  \n-   The <xref:System.Xml.Linq.XElement> constructor takes various types of arguments for content. For example, you can pass another <xref:System.Xml.Linq.XElement> object, which becomes a child element. You can pass an <xref:System.Xml.Linq.XAttribute> object, which becomes an attribute of the element. Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.  \n  \n-   The <xref:System.Xml.Linq.XElement> constructor takes a `params` array of type <xref:System.Object>, so that you can pass any number of objects to the constructor. This enables you to create an element that has complex content.  \n  \n-   If an object implements <xref:System.Collections.Generic.IEnumerable%601>, the collection in the object is enumerated, and all items in the collection are added. If the collection contains <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> objects, each item in the collection is added separately. This is important because it lets you pass the results of a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query to the constructor.  \n  \n The following is an example:  \n  \n These features enable you to write code using XML literals to create an XML tree, and also to write code that uses the results of [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] queries when you create an XML tree:  \n  \n```vb  \nDim srcTree As XElement = _  \n    <Root>  \n        <Element>1</Element>  \n        <Element>2</Element>  \n        <Element>3</Element>  \n        <Element>4</Element>  \n        <Element>5</Element>  \n    </Root>  \nDim xmlTree As XElement = _  \n    <Root>  \n        <Child>1</Child>  \n        <Child>2</Child>  \n        <%= From el In srcTree.Elements() _  \n            Where CInt(el) > 2 _  \n            Select el %>  \n    </Root>  \nConsole.WriteLine(xmlTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <Child>1</Child>  \n  <Child>2</Child>  \n  <Element>3</Element>  \n  <Element>4</Element>  \n  <Element>5</Element>  \n</Root>  \n```  \n  \n## See Also  \n [Creating XML Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)","nodes":[{"pos":[4,455],"embed":true,"restype":"x-metadata","content":"title: \"Functional Construction (LINQ to XML) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: feac4273-39ab-43ae-bab7-4059c807a785\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"Functional Construction (LINQ to XML) (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,69],"content":"Functional Construction (LINQ to XML) (Visual Basic) | Microsoft Docs","nodes":[{"content":"Functional Construction (LINQ to XML) (Visual Basic) | Microsoft Docs","pos":[0,69]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[462,514],"content":"Functional Construction (LINQ to XML) (Visual Basic)","linkify":"Functional Construction (LINQ to XML) (Visual Basic)","nodes":[{"content":"Functional Construction (LINQ to XML) (Visual Basic)","pos":[0,52]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides a powerful way to create XML elements called <bpt id=\"p1\">*</bpt>functional construction<ept id=\"p1\">*</ept>.","pos":[515,698],"source":"[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] provides a powerful way to create XML elements called *functional construction*."},{"content":"Functional construction is the ability to create an XML tree in a single statement.","pos":[699,782]},{"pos":[789,988],"content":"There are several key features of the <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> programming interface that enable functional construction:","source":"There are several key features of the [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] programming interface that enable functional construction:"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor takes various types of arguments for content.","pos":[998,1091],"source":"The <xref:System.Xml.Linq.XElement> constructor takes various types of arguments for content."},{"content":"For example, you can pass another <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object, which becomes a child element.","pos":[1092,1196],"source":" For example, you can pass another <xref:System.Xml.Linq.XElement> object, which becomes a child element."},{"content":"You can pass an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> object, which becomes an attribute of the element.","pos":[1197,1297],"source":" You can pass an <xref:System.Xml.Linq.XAttribute> object, which becomes an attribute of the element."},{"content":"Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.","pos":[1298,1415]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor takes a <ph id=\"ph2\">`params`</ph> array of type <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph>, so that you can pass any number of objects to the constructor.","pos":[1425,1588],"source":"The <xref:System.Xml.Linq.XElement> constructor takes a `params` array of type <xref:System.Object>, so that you can pass any number of objects to the constructor."},{"content":"This enables you to create an element that has complex content.","pos":[1589,1652]},{"content":"If an object implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, the collection in the object is enumerated, and all items in the collection are added.","pos":[1662,1823],"source":"If an object implements <xref:System.Collections.Generic.IEnumerable%601>, the collection in the object is enumerated, and all items in the collection are added."},{"content":"If the collection contains <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects, each item in the collection is added separately.","pos":[1824,1977],"source":" If the collection contains <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> objects, each item in the collection is added separately."},{"content":"This is important because it lets you pass the results of a <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query to the constructor.","pos":[1978,2130],"source":" This is important because it lets you pass the results of a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query to the constructor."},{"content":"The following is an example:","pos":[2137,2165]},{"pos":[2172,2405],"content":"These features enable you to write code using XML literals to create an XML tree, and also to write code that uses the results of <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries when you create an XML tree:","source":"These features enable you to write code using XML literals to create an XML tree, and also to write code that uses the results of [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] queries when you create an XML tree:"},{"content":"This example produces the following output:","pos":[2889,2932]},{"pos":[3095,3103],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3107,3222],"content":"<bpt id=\"p1\">[</bpt>Creating XML Trees (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept>","source":"[Creating XML Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)"}]}