{"content":"---\ntitle: \"Assembly Names | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-bcl\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"names [.NET Framework], assemblies\"\n  - \"assemblies [.NET Framework], names\"\nms.assetid: 8f8c2c90-f15d-400e-87e7-a757e4f04d0e\ncaps.latest.revision: 14\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Assembly Names\nAn assembly's name is stored in metadata and has a significant impact on the assembly's scope and use by an application. A strong-named assembly has a fully qualified name that includes the assembly's name, culture, public key, and version number. This is frequently referred to as the display name, and for loaded assemblies can be obtained by using the <xref:System.Reflection.Assembly.FullName%2A> property.  \n  \n The runtime uses this information to locate the assembly and differentiate it from other assemblies with the same name. For example, a strong-named assembly called `myTypes` could have the following fully qualified name:  \n  \n```  \nmyTypes, Version=1.0.1234.0, Culture=en-US, PublicKeyToken=b77a5c561934e089c, ProcessorArchitecture=msil  \n```  \n  \n> [!NOTE]\n>  Processor architecture is added to the assembly identity in the .NET Framework version 2.0, to allow processor-specific versions of assemblies. You can create versions of an assembly whose identity differs only by processor architecture, for example 32-bit and 64-bit processor-specific versions. Processor architecture is not required for strong names. For more information, see <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  \n  \n In this example, the fully qualified name indicates that the `myTypes` assembly has a strong name with a public key token, has the culture value for US English, and has a version number of 1.0.1234.0. Its processor architecture is \"msil\", which means that it will be just-in-time (JIT)-compiled to 32-bit code or 64-bit code depending on the operating system and processor.  \n  \n Code that requests types in an assembly must use a fully qualified assembly name. This is called fully qualified binding. Partial binding, which specifies only an assembly name, is not permitted when referencing assemblies in the .NET Framework.  \n  \n All assembly references to assemblies that make up the .NET Framework also must contain a fully qualified name of the assembly. For example, to reference the System.Data .NET Framework assembly for version 1.0 would include:  \n  \n```  \n  \nSystem.data, version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089  \n  \n```  \n  \n Note that the version corresponds to the version number of all .NET Framework assemblies that shipped with .NET Framework version 1.0. For .NET Framework assemblies, the culture value is always neutral, and the public key is the same as shown in the above example.  \n  \n For example, to add an assembly reference in a configuration file to set up a trace listener, you would include the fully qualified name of the system .NET Framework assembly:  \n  \n```  \n<add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" initializeData=\"c:\\myListener.log\" />  \n```  \n  \n> [!NOTE]\n>  The runtime treats assembly names as case-insensitive when binding to an assembly, but preserves whatever case is used in an assembly name. Several tools in the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)] handle assembly names as case-sensitive. For best results, manage assembly names as though they were case-sensitive.  \n  \n## Naming Application Components  \n The runtime does not consider the file name when determining an assembly's identity. The assembly identity, which consists of the assembly name, version, culture, and strong name, must be clear to the runtime.  \n  \n For example, if you have an assembly called myAssembly.exe that references an assembly called myAssembly.dll, binding occurs correctly if you execute myAssembly.exe. However, if another application executes myAssembly.exe using the method <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName>, the runtime determines that \"myAssembly\" is already loaded when myAssembly.exe requests binding to \"myAssembly.\" In this case, myAssembly.dll is never loaded. Because myAssembly.exe does not contain the requested type , a <xref:System.TypeLoadException> occurs.  \n  \n To avoid this problem, make sure the assemblies that make up your application do not have the same assembly name or place assemblies with the same name in different directories.  \n  \n> [!NOTE]\n>  If you put a strong-named assembly in the global assembly cache, the assembly's file name must match the assembly name (not including the file name extension, such as .exe or .dll). For example, if the file name of an assembly is myAssembly.dll, the assembly name must be myAssembly. Private assemblies deployed only in the root application directory can have an assembly name that is different from the file name.  \n  \n## See Also  \n [How to: Determine an Assembly's Fully Qualified Name](../../../docs/framework/app-domains/how-to-determine-assembly-fully-qualified-name.md)   \n [Creating Assemblies](../../../docs/framework/app-domains/create-assemblies.md)   \n [Strong-Named Assemblies](../../../docs/framework/app-domains/strong-named-assemblies.md)   \n [Global Assembly Cache](../../../docs/framework/app-domains/gac.md)   \n [How the Runtime Locates Assemblies](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)   \n [Programming with Assemblies](../../../docs/framework/app-domains/programming-with-assemblies.md)","nodes":[{"pos":[4,444],"nodes":[{"content":"Assembly Names | Microsoft Docs","nodes":[{"pos":[0,31],"content":"Assembly Names | Microsoft Docs","nodes":[{"content":"Assembly Names | Microsoft Docs","pos":[0,31]}]}],"pos":[6,40],"yaml":true}],"content":"title: \"Assembly Names | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-bcl\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"names [.NET Framework], assemblies\"\n  - \"assemblies [.NET Framework], names\"\nms.assetid: 8f8c2c90-f15d-400e-87e7-a757e4f04d0e\ncaps.latest.revision: 14\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[451,465],"content":"Assembly Names","linkify":"Assembly Names","nodes":[{"content":"Assembly Names","pos":[0,14]}]},{"content":"An assembly's name is stored in metadata and has a significant impact on the assembly's scope and use by an application.","pos":[466,586]},{"content":"A strong-named assembly has a fully qualified name that includes the assembly's name, culture, public key, and version number.","pos":[587,713]},{"content":"This is frequently referred to as the display name, and for loaded assemblies can be obtained by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.FullName%2A&gt;</ph> property.","pos":[714,876],"source":" This is frequently referred to as the display name, and for loaded assemblies can be obtained by using the <xref:System.Reflection.Assembly.FullName%2A> property."},{"content":"The runtime uses this information to locate the assembly and differentiate it from other assemblies with the same name.","pos":[883,1002]},{"content":"For example, a strong-named assembly called <ph id=\"ph1\">`myTypes`</ph> could have the following fully qualified name:","pos":[1003,1103],"source":" For example, a strong-named assembly called `myTypes` could have the following fully qualified name:"},{"pos":[1233,1712],"content":"[!NOTE]\n Processor architecture is added to the assembly identity in the .NET Framework version 2.0, to allow processor-specific versions of assemblies. You can create versions of an assembly whose identity differs only by processor architecture, for example 32-bit and 64-bit processor-specific versions. Processor architecture is not required for strong names. For more information, see <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":"Processor architecture is added to the assembly identity in the .NET Framework version 2.0, to allow processor-specific versions of assemblies. You can create versions of an assembly whose identity differs only by processor architecture, for example 32-bit and 64-bit processor-specific versions. Processor architecture is not required for strong names. For more information, see <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","pos":[9,477],"nodes":[{"content":"Processor architecture is added to the assembly identity in the .NET Framework version 2.0, to allow processor-specific versions of assemblies.","pos":[0,143]},{"content":"You can create versions of an assembly whose identity differs only by processor architecture, for example 32-bit and 64-bit processor-specific versions.","pos":[144,296]},{"content":"Processor architecture is not required for strong names.","pos":[297,353]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName&gt;</ph>.","pos":[354,468],"source":" For more information, see <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>."}]}]},{"content":"In this example, the fully qualified name indicates that the <ph id=\"ph1\">`myTypes`</ph> assembly has a strong name with a public key token, has the culture value for US English, and has a version number of 1.0.1234.0.","pos":[1719,1919],"source":"In this example, the fully qualified name indicates that the `myTypes` assembly has a strong name with a public key token, has the culture value for US English, and has a version number of 1.0.1234.0."},{"content":"Its processor architecture is \"msil\", which means that it will be just-in-time (JIT)-compiled to 32-bit code or 64-bit code depending on the operating system and processor.","pos":[1920,2092]},{"content":"Code that requests types in an assembly must use a fully qualified assembly name.","pos":[2099,2180]},{"content":"This is called fully qualified binding.","pos":[2181,2220]},{"content":"Partial binding, which specifies only an assembly name, is not permitted when referencing assemblies in the .NET Framework.","pos":[2221,2344]},{"content":"All assembly references to assemblies that make up the .NET Framework also must contain a fully qualified name of the assembly.","pos":[2351,2478]},{"content":"For example, to reference the System.Data .NET Framework assembly for version 1.0 would include:","pos":[2479,2575]},{"content":"Note that the version corresponds to the version number of all .NET Framework assemblies that shipped with .NET Framework version 1.0.","pos":[2687,2821]},{"content":"For .NET Framework assemblies, the culture value is always neutral, and the public key is the same as shown in the above example.","pos":[2822,2951]},{"content":"For example, to add an assembly reference in a configuration file to set up a trace listener, you would include the fully qualified name of the system .NET Framework assembly:","pos":[2958,3133]},{"pos":[3347,3694],"content":"[!NOTE]\n The runtime treats assembly names as case-insensitive when binding to an assembly, but preserves whatever case is used in an assembly name. Several tools in the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)] handle assembly names as case-sensitive. For best results, manage assembly names as though they were case-sensitive.","leadings":["","> "],"nodes":[{"content":"The runtime treats assembly names as case-insensitive when binding to an assembly, but preserves whatever case is used in an assembly name. Several tools in the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)] handle assembly names as case-sensitive. For best results, manage assembly names as though they were case-sensitive.","pos":[9,345],"nodes":[{"content":"The runtime treats assembly names as case-insensitive when binding to an assembly, but preserves whatever case is used in an assembly name.","pos":[0,139]},{"content":"Several tools in the <ph id=\"ph1\">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph> handle assembly names as case-sensitive.","pos":[140,260],"source":" Several tools in the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)] handle assembly names as case-sensitive."},{"content":"For best results, manage assembly names as though they were case-sensitive.","pos":[261,336]}]}]},{"pos":[3703,3732],"content":"Naming Application Components","linkify":"Naming Application Components","nodes":[{"content":"Naming Application Components","pos":[0,29]}]},{"content":"The runtime does not consider the file name when determining an assembly's identity.","pos":[3736,3820]},{"content":"The assembly identity, which consists of the assembly name, version, culture, and strong name, must be clear to the runtime.","pos":[3821,3945]},{"content":"For example, if you have an assembly called myAssembly.exe that references an assembly called myAssembly.dll, binding occurs correctly if you execute myAssembly.exe.","pos":[3952,4117]},{"content":"However, if another application executes myAssembly.exe using the method <ph id=\"ph1\">&lt;xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName&gt;</ph>, the runtime determines that \"myAssembly\" is already loaded when myAssembly.exe requests binding to \"myAssembly.\"","pos":[4118,4372],"source":" However, if another application executes myAssembly.exe using the method <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName>, the runtime determines that \"myAssembly\" is already loaded when myAssembly.exe requests binding to \"myAssembly.\""},{"content":"In this case, myAssembly.dll is never loaded.","pos":[4373,4418]},{"content":"Because myAssembly.exe does not contain the requested type , a <ph id=\"ph1\">&lt;xref:System.TypeLoadException&gt;</ph> occurs.","pos":[4419,4521],"source":" Because myAssembly.exe does not contain the requested type , a <xref:System.TypeLoadException> occurs."},{"content":"To avoid this problem, make sure the assemblies that make up your application do not have the same assembly name or place assemblies with the same name in different directories.","pos":[4528,4705]},{"pos":[4713,5138],"content":"[!NOTE]\n If you put a strong-named assembly in the global assembly cache, the assembly's file name must match the assembly name (not including the file name extension, such as .exe or .dll). For example, if the file name of an assembly is myAssembly.dll, the assembly name must be myAssembly. Private assemblies deployed only in the root application directory can have an assembly name that is different from the file name.","leadings":["","> "],"nodes":[{"content":"If you put a strong-named assembly in the global assembly cache, the assembly's file name must match the assembly name (not including the file name extension, such as .exe or .dll). For example, if the file name of an assembly is myAssembly.dll, the assembly name must be myAssembly. Private assemblies deployed only in the root application directory can have an assembly name that is different from the file name.","pos":[9,423],"nodes":[{"content":"If you put a strong-named assembly in the global assembly cache, the assembly's file name must match the assembly name (not including the file name extension, such as .exe or .dll).","pos":[0,181]},{"content":"For example, if the file name of an assembly is myAssembly.dll, the assembly name must be myAssembly.","pos":[182,283]},{"content":"Private assemblies deployed only in the root application directory can have an assembly name that is different from the file name.","pos":[284,414]}]}]},{"pos":[5147,5155],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Determine an Assembly's Fully Qualified Name<ept id=\"p1\">](../../../docs/framework/app-domains/how-to-determine-assembly-fully-qualified-name.md)</ept><ph id=\"ph1\"> </ph>","pos":[5159,5301],"source":"[How to: Determine an Assembly's Fully Qualified Name](../../../docs/framework/app-domains/how-to-determine-assembly-fully-qualified-name.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/create-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[5305,5385],"source":"[Creating Assemblies](../../../docs/framework/app-domains/create-assemblies.md) "},{"content":"<bpt id=\"p1\">[</bpt>Strong-Named Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[5389,5479],"source":"[Strong-Named Assemblies](../../../docs/framework/app-domains/strong-named-assemblies.md) "},{"content":"<bpt id=\"p1\">[</bpt>Global Assembly Cache<ept id=\"p1\">](../../../docs/framework/app-domains/gac.md)</ept><ph id=\"ph1\"> </ph>","pos":[5483,5551],"source":"[Global Assembly Cache](../../../docs/framework/app-domains/gac.md) "},{"content":"<bpt id=\"p1\">[</bpt>How the Runtime Locates Assemblies<ept id=\"p1\">](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[5555,5666],"source":"[How the Runtime Locates Assemblies](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md) "},{"content":"<bpt id=\"p1\">[</bpt>Programming with Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/programming-with-assemblies.md)</ept>","pos":[5670,5767],"source":"[Programming with Assemblies](../../../docs/framework/app-domains/programming-with-assemblies.md)"}]}