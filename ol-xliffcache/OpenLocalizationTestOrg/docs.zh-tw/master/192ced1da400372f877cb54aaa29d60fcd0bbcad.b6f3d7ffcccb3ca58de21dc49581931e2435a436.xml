{"content":"---\ntitle: \"Data Types in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"data types [Visual Basic], declaring\"\n  - \"typing\"\n  - \"data types [Visual Basic]\"\n  - \"Visual Basic code, data types\"\n  - \"data types [Visual Basic], improving speed with\"\nms.assetid: 5e1b9aaf-c7ca-4b29-9b22-0e82ed8e85e2\n---\n# Data Types in Visual Basic\nThe *data type* of a programming element refers to what kind of data it can hold and how it stores that data. Data types apply to all values that can be stored in computer memory or participate in the evaluation of an expression. Every variable, literal, constant, enumeration, property, procedure parameter, procedure argument, and procedure return value has a data type.  \n  \n## Declared Data Types  \n You define a programming element with a declaration statement, and you specify its data type with the `As` clause. The following table shows the statements you use to declare various elements.  \n  \n|Programming element|Data type declaration|  \n|-------------------------|---------------------------|  \n|Variable|In a [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)<br /><br /> `Dim`   `amount As Double`<br /><br /> `Static`   `yourName As String`<br /><br /> `Public`   `billsPaid As Decimal = 0`|  \n|Literal|With a literal type character; see \"Literal Type Characters\" in [Type Characters](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)<br /><br /> `Dim searchChar As Char = \".\"`  `C`|  \n|Constant|In a [Const Statement](../../../../visual-basic/language-reference/statements/const-statement.md)<br /><br /> `Const`   `modulus As Single = 4.17825F`|  \n|Enumeration|In an [Enum Statement](../../../../visual-basic/language-reference/statements/enum-statement.md)<br /><br /> `Public`   `Enum`   `colors`|  \n|Property|In a [Property Statement](../../../../visual-basic/language-reference/statements/property-statement.md)<br /><br /> `Property`   `region() As String`|  \n|Procedure parameter|In a [Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md), [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md), or [Operator Statement](../../../../visual-basic/language-reference/statements/operator-statement.md)<br /><br /> `Sub addSale(ByVal`   `amount`   `As Double)`|  \n|Procedure argument|In the calling code; each argument is a programming element that has already been declared, or an expression containing declared elements<br /><br /> `subString = Left(`  `inputString`  `,`   `5`  `)`|  \n|Procedure return value|In a [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md) or [Operator Statement](../../../../visual-basic/language-reference/statements/operator-statement.md)<br /><br /> `Function convert(ByVal b As Byte)`   `As String`|  \n  \n For a list of Visual Basic data types, see [Data Types](../../../../visual-basic/language-reference/data-types/index.md).  \n  \n## See also\n\n- [Type Characters](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)\n- [Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)\n- [Composite Data Types](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)\n- [Generic Types in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)\n- [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)\n- [Structures](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)\n- [Tuples](tuples.md)\n- [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)\n- [Data Types](../../../../visual-basic/language-reference/data-types/index.md)\n- [Efficient Use of Data Types](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n","nodes":[{"pos":[4,308],"embed":true,"restype":"x-metadata","content":"title: \"Data Types in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"data types [Visual Basic], declaring\"\n  - \"typing\"\n  - \"data types [Visual Basic]\"\n  - \"Visual Basic code, data types\"\n  - \"data types [Visual Basic], improving speed with\"\nms.assetid: 5e1b9aaf-c7ca-4b29-9b22-0e82ed8e85e2","nodes":[{"content":"Data Types in Visual Basic","nodes":[{"pos":[0,26],"content":"Data Types in Visual Basic","nodes":[{"content":"Data Types in Visual Basic","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[315,341],"content":"Data Types in Visual Basic","linkify":"Data Types in Visual Basic","nodes":[{"content":"Data Types in Visual Basic","pos":[0,26]}]},{"content":"The <bpt id=\"p1\">*</bpt>data type<ept id=\"p1\">*</ept> of a programming element refers to what kind of data it can hold and how it stores that data.","pos":[342,451],"source":"The *data type* of a programming element refers to what kind of data it can hold and how it stores that data."},{"content":"Data types apply to all values that can be stored in computer memory or participate in the evaluation of an expression.","pos":[452,571]},{"content":"Every variable, literal, constant, enumeration, property, procedure parameter, procedure argument, and procedure return value has a data type.","pos":[572,714]},{"pos":[723,742],"content":"Declared Data Types","linkify":"Declared Data Types","nodes":[{"content":"Declared Data Types","pos":[0,19]}]},{"content":"You define a programming element with a declaration statement, and you specify its data type with the <ph id=\"ph1\">`As`</ph> clause.","pos":[746,860],"source":"You define a programming element with a declaration statement, and you specify its data type with the `As` clause."},{"content":"The following table shows the statements you use to declare various elements.","pos":[861,938]},{"content":"Programming element","pos":[945,964]},{"content":"Data type declaration","pos":[965,986]},{"content":"Variable","pos":[1049,1057]},{"content":"In a <bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","pos":[1058,1151],"source":"In a [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)"},{"content":"<ph id=\"ph1\">`Dim`</ph>   <ph id=\"ph2\">`amount As Double`</ph>","pos":[1164,1190],"source":"`Dim`   `amount As Double`"},{"content":"<ph id=\"ph1\">`Static`</ph>   <ph id=\"ph2\">`yourName As String`</ph>","pos":[1203,1234],"source":"`Static`   `yourName As String`"},{"content":"<ph id=\"ph1\">`Public`</ph>   <ph id=\"ph2\">`billsPaid As Decimal = 0`</ph>","pos":[1247,1284],"source":"`Public`   `billsPaid As Decimal = 0`"},{"content":"Literal","pos":[1289,1296]},{"content":"With a literal type character; see \"Literal Type Characters\" in <bpt id=\"p1\">[</bpt>Type Characters<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept>","pos":[1297,1470],"source":"With a literal type character; see \"Literal Type Characters\" in [Type Characters](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)"},{"content":"<ph id=\"ph1\">`Dim searchChar As Char = \".\"`</ph>  <ph id=\"ph2\">`C`</ph>","pos":[1483,1518],"source":"`Dim searchChar As Char = \".\"`  `C`"},{"content":"Constant","pos":[1523,1531]},{"content":"In a <bpt id=\"p1\">[</bpt>Const Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/const-statement.md)</ept>","pos":[1532,1629],"source":"In a [Const Statement](../../../../visual-basic/language-reference/statements/const-statement.md)"},{"content":"<ph id=\"ph1\">`Const`</ph>   <ph id=\"ph2\">`modulus As Single = 4.17825F`</ph>","pos":[1642,1682],"source":"`Const`   `modulus As Single = 4.17825F`"},{"content":"Enumeration","pos":[1687,1698]},{"content":"In an <bpt id=\"p1\">[</bpt>Enum Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/enum-statement.md)</ept>","pos":[1699,1795],"source":"In an [Enum Statement](../../../../visual-basic/language-reference/statements/enum-statement.md)"},{"content":"<ph id=\"ph1\">`Public`</ph>   <ph id=\"ph2\">`Enum`</ph>   <ph id=\"ph3\">`colors`</ph>","pos":[1808,1836],"source":"`Public`   `Enum`   `colors`"},{"content":"Property","pos":[1841,1849]},{"content":"In a <bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/property-statement.md)</ept>","pos":[1850,1953],"source":"In a [Property Statement](../../../../visual-basic/language-reference/statements/property-statement.md)"},{"content":"<ph id=\"ph1\">`Property`</ph>   <ph id=\"ph2\">`region() As String`</ph>","pos":[1966,1999],"source":"`Property`   `region() As String`"},{"content":"Procedure parameter","pos":[2004,2023]},{"content":"In a <bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept>, <bpt id=\"p2\">[</bpt>Function Statement<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>, or <bpt id=\"p3\">[</bpt>Operator Statement<ept id=\"p3\">](../../../../visual-basic/language-reference/statements/operator-statement.md)</ept>","pos":[2024,2320],"source":"In a [Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md), [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md), or [Operator Statement](../../../../visual-basic/language-reference/statements/operator-statement.md)"},{"content":"<ph id=\"ph1\">`Sub addSale(ByVal`</ph>   <ph id=\"ph2\">`amount`</ph>   <ph id=\"ph3\">`As Double)`</ph>","pos":[2333,2378],"source":"`Sub addSale(ByVal`   `amount`   `As Double)`"},{"content":"Procedure argument","pos":[2383,2401]},{"content":"In the calling code; each argument is a programming element that has already been declared, or an expression containing declared elements","pos":[2402,2539]},{"content":"<ph id=\"ph1\">`subString = Left(`</ph>  <ph id=\"ph2\">`inputString`</ph>  <ph id=\"ph3\">`,`</ph>   <ph id=\"ph4\">`5`</ph>  <ph id=\"ph5\">`)`</ph>","pos":[2552,2602],"source":"`subString = Left(`  `inputString`  `,`   `5`  `)`"},{"content":"Procedure return value","pos":[2607,2629]},{"content":"In a <bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept> or <bpt id=\"p2\">[</bpt>Operator Statement<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/operator-statement.md)</ept>","pos":[2630,2835],"source":"In a [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md) or [Operator Statement](../../../../visual-basic/language-reference/statements/operator-statement.md)"},{"content":"<ph id=\"ph1\">`Function convert(ByVal b As Byte)`</ph>   <ph id=\"ph2\">`As String`</ph>","pos":[2848,2897],"source":"`Function convert(ByVal b As Byte)`   `As String`"},{"pos":[2905,3026],"content":"For a list of Visual Basic data types, see <bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/index.md)</ept>.","source":"For a list of Visual Basic data types, see [Data Types](../../../../visual-basic/language-reference/data-types/index.md)."},{"pos":[3035,3043],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3047,3156],"content":"<bpt id=\"p1\">[</bpt>Type Characters<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept>","source":"[Type Characters](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)"},{"pos":[3159,3280],"content":"<bpt id=\"p1\">[</bpt>Elementary Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept>","source":"[Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)"},{"pos":[3283,3402],"content":"<bpt id=\"p1\">[</bpt>Composite Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept>","source":"[Composite Data Types](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)"},{"pos":[3405,3526],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[3529,3670],"content":"<bpt id=\"p1\">[</bpt>Value Types and Reference Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>","source":"[Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)"},{"pos":[3673,3800],"content":"<bpt id=\"p1\">[</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>","source":"[Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)"},{"pos":[3803,3902],"content":"<bpt id=\"p1\">[</bpt>Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept>","source":"[Structures](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)"},{"pos":[3905,3924],"content":"<bpt id=\"p1\">[</bpt>Tuples<ept id=\"p1\">](tuples.md)</ept>","source":"[Tuples](tuples.md)"},{"pos":[3927,4058],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","source":"[Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"},{"pos":[4061,4138],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[4141,4274],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}