{"content":"---\ntitle: \"How to: Control the Availability of a Variable (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"access levels, declared elements\"\n  - \"Private keyword, accessing variables\"\n  - \"access levels, variables\"\n  - \"Public keyword, accessing variables\"\n  - \"Friend keyword, accessing variables\"\n  - \"variables [Visual Basic], access level\"\n  - \"declared elements, access level\"\n  - \"Protected keyword, accessing variables\"\nms.assetid: eaf4f073-7922-43ce-ae1e-90ff376ae947\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Control the Availability of a Variable (Visual Basic)\nYou control the availability of a variable by specifying its *access level*. The access level determines what code has permission to read or write to the variable.  \n  \n-   *Member variables* (defined at module level and outside any procedure) default to public access, which means any code that can see them can access them. You can change this by specifying an access modifier.  \n  \n-   *Local variables* (defined inside a procedure) nominally have public access, although only code within their procedure can access them. You cannot change the access level of a local variable, but you can change the access level of the procedure that contains it.  \n  \n For more information, see [Access Levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n## Private and Public Access  \n  \n#### To make a variable accessible only from within its module, class, or structure  \n  \n1.  Place the [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md) for the variable inside the module, class, or structure, but outside any procedure.  \n  \n2.  Include the [Private](../../../../visual-basic/language-reference/modifiers/private.md) keyword in the `Dim` statement.  \n  \n     You can read or write to the variable from anywhere within the module, class, or structure, but not from outside it.  \n  \n#### To make a variable accessible from any code that can see it  \n  \n1.  For a member variable, place the `Dim` statement for the variable inside a module, class, or structure, but outside any procedure.  \n  \n2.  Include the [Public](../../../../visual-basic/language-reference/modifiers/public.md) keyword in the `Dim` statement.  \n  \n     You can read or write to the variable from any code that interoperates with your assembly.  \n  \n -or-  \n  \n1.  For a local variable, place the `Dim` statement for the variable inside a procedure.  \n  \n2.  Do not include the `Public` keyword in the `Dim` statement.  \n  \n     You can read or write to the variable from anywhere within the procedure, but not from outside it.  \n  \n## Protected and Friend Access  \n You can limit the access level of a variable to its class and any derived classes, or to its assembly. You can also specify the union of these limitations, which allows access from code in any derived class or in any other place in the same assembly. You specify this union by combining the `Protected` and `Friend` keywords in the same declaration.  \n  \n#### To make a variable accessible only from within its class and any derived classes  \n  \n1.  Place the `Dim` statement for the variable inside a class, but outside any procedure.  \n  \n2.  Include the [Protected](../../../../visual-basic/language-reference/modifiers/protected.md) keyword in the `Dim` statement.  \n  \n     You can read or write to the variable from anywhere within the class, as well as from within any class derived from it, but not from outside any class in the derivation chain.  \n  \n#### To make a variable accessible only from within the same assembly  \n  \n1.  Place the `Dim` statement for the variable inside a module, class, or structure, but outside any procedure.  \n  \n2.  Include the [Friend](../../../../visual-basic/language-reference/modifiers/friend.md) keyword in the `Dim` statement.  \n  \n     You can read or write to the variable from anywhere within the module, class, or structure, as well as from any code in the same assembly, but not from outside the assembly.  \n  \n## Example  \n The following example shows declarations of variables with `Public`, `Protected`, `Friend`, `Protected Friend`, and `Private` access levels. Note that when the `Dim` statement specifies an access level, you do not need to include the `Dim` keyword.  \n  \n```  \nPublic Class classForEverybody  \nProtected Class classForMyHeirs  \nFriend stringForThisProject As String  \nProtected Friend stringForProjectAndHeirs As String  \nPrivate numberForMeOnly As Integer  \n```  \n  \n## .NET Framework Security  \n The more restrictive the access level of a variable, the smaller the chances that malicious code can make improper use of it.  \n  \n## See Also  \n [Access Levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)   \n [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)   \n [Public](../../../../visual-basic/language-reference/modifiers/public.md)   \n [Protected](../../../../visual-basic/language-reference/modifiers/protected.md)   \n [Friend](../../../../visual-basic/language-reference/modifiers/friend.md)   \n [Private](../../../../visual-basic/language-reference/modifiers/private.md)","nodes":[{"pos":[12,90],"content":"How to: Control the Availability of a Variable (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Control the Availability of a Variable (Visual Basic) | Microsoft Docs","pos":[0,78]}]},{"pos":[910,971],"content":"How to: Control the Availability of a Variable (Visual Basic)","linkify":"How to: Control the Availability of a Variable (Visual Basic)","nodes":[{"content":"How to: Control the Availability of a Variable (Visual Basic)","pos":[0,61]}]},{"content":"You control the availability of a variable by specifying its <bpt id=\"p1\">*</bpt>access level<ept id=\"p1\">*</ept>.","pos":[972,1048],"source":"You control the availability of a variable by specifying its *access level*."},{"content":"The access level determines what code has permission to read or write to the variable.","pos":[1049,1135]},{"content":"<bpt id=\"p1\">*</bpt>Member variables<ept id=\"p1\">*</ept> (defined at module level and outside any procedure) default to public access, which means any code that can see them can access them.","pos":[1145,1297],"source":"*Member variables* (defined at module level and outside any procedure) default to public access, which means any code that can see them can access them."},{"content":"You can change this by specifying an access modifier.","pos":[1298,1351]},{"content":"<bpt id=\"p1\">*</bpt>Local variables<ept id=\"p1\">*</ept> (defined inside a procedure) nominally have public access, although only code within their procedure can access them.","pos":[1361,1496],"source":"*Local variables* (defined inside a procedure) nominally have public access, although only code within their procedure can access them."},{"content":"You cannot change the access level of a local variable, but you can change the access level of the procedure that contains it.","pos":[1497,1623]},{"pos":[1630,1785],"content":"For more information, see <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","source":"For more information, see [Access Levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[1794,1819],"content":"Private and Public Access","linkify":"Private and Public Access","nodes":[{"content":"Private and Public Access","pos":[0,25]}]},{"pos":[1830,1908],"content":"To make a variable accessible only from within its module, class, or structure","linkify":"To make a variable accessible only from within its module, class, or structure","nodes":[{"content":"To make a variable accessible only from within its module, class, or structure","pos":[0,78]}]},{"pos":[1918,2100],"content":"Place the <bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept> for the variable inside the module, class, or structure, but outside any procedure.","source":"Place the [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md) for the variable inside the module, class, or structure, but outside any procedure."},{"pos":[2110,2229],"content":"Include the <bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/private.md)</ept> keyword in the <ph id=\"ph1\">`Dim`</ph> statement.","source":"Include the [Private](../../../../visual-basic/language-reference/modifiers/private.md) keyword in the `Dim` statement."},{"content":"You can read or write to the variable from anywhere within the module, class, or structure, but not from outside it.","pos":[2240,2356]},{"pos":[2367,2426],"content":"To make a variable accessible from any code that can see it","linkify":"To make a variable accessible from any code that can see it","nodes":[{"content":"To make a variable accessible from any code that can see it","pos":[0,59]}]},{"pos":[2436,2566],"content":"For a member variable, place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside a module, class, or structure, but outside any procedure.","source":"For a member variable, place the `Dim` statement for the variable inside a module, class, or structure, but outside any procedure."},{"pos":[2576,2693],"content":"Include the <bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/public.md)</ept> keyword in the <ph id=\"ph1\">`Dim`</ph> statement.","source":"Include the [Public](../../../../visual-basic/language-reference/modifiers/public.md) keyword in the `Dim` statement."},{"content":"You can read or write to the variable from any code that interoperates with your assembly.","pos":[2704,2794]},{"content":"-or-","pos":[2801,2805]},{"pos":[2815,2899],"content":"For a local variable, place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside a procedure.","source":"For a local variable, place the `Dim` statement for the variable inside a procedure."},{"pos":[2909,2968],"content":"Do not include the <ph id=\"ph1\">`Public`</ph> keyword in the <ph id=\"ph2\">`Dim`</ph> statement.","source":"Do not include the `Public` keyword in the `Dim` statement."},{"content":"You can read or write to the variable from anywhere within the procedure, but not from outside it.","pos":[2979,3077]},{"pos":[3086,3113],"content":"Protected and Friend Access","linkify":"Protected and Friend Access","nodes":[{"content":"Protected and Friend Access","pos":[0,27]}]},{"content":"You can limit the access level of a variable to its class and any derived classes, or to its assembly.","pos":[3117,3219]},{"content":"You can also specify the union of these limitations, which allows access from code in any derived class or in any other place in the same assembly.","pos":[3220,3367]},{"content":"You specify this union by combining the <ph id=\"ph1\">`Protected`</ph> and <ph id=\"ph2\">`Friend`</ph> keywords in the same declaration.","pos":[3368,3466],"source":" You specify this union by combining the `Protected` and `Friend` keywords in the same declaration."},{"pos":[3477,3557],"content":"To make a variable accessible only from within its class and any derived classes","linkify":"To make a variable accessible only from within its class and any derived classes","nodes":[{"content":"To make a variable accessible only from within its class and any derived classes","pos":[0,80]}]},{"pos":[3567,3652],"content":"Place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside a class, but outside any procedure.","source":"Place the `Dim` statement for the variable inside a class, but outside any procedure."},{"pos":[3662,3785],"content":"Include the <bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/protected.md)</ept> keyword in the <ph id=\"ph1\">`Dim`</ph> statement.","source":"Include the [Protected](../../../../visual-basic/language-reference/modifiers/protected.md) keyword in the `Dim` statement."},{"content":"You can read or write to the variable from anywhere within the class, as well as from within any class derived from it, but not from outside any class in the derivation chain.","pos":[3796,3971]},{"pos":[3982,4046],"content":"To make a variable accessible only from within the same assembly","linkify":"To make a variable accessible only from within the same assembly","nodes":[{"content":"To make a variable accessible only from within the same assembly","pos":[0,64]}]},{"pos":[4056,4163],"content":"Place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside a module, class, or structure, but outside any procedure.","source":"Place the `Dim` statement for the variable inside a module, class, or structure, but outside any procedure."},{"pos":[4173,4290],"content":"Include the <bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept> keyword in the <ph id=\"ph1\">`Dim`</ph> statement.","source":"Include the [Friend](../../../../visual-basic/language-reference/modifiers/friend.md) keyword in the `Dim` statement."},{"content":"You can read or write to the variable from anywhere within the module, class, or structure, as well as from any code in the same assembly, but not from outside the assembly.","pos":[4301,4474]},{"pos":[4483,4490],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows declarations of variables with <ph id=\"ph1\">`Public`</ph>, <ph id=\"ph2\">`Protected`</ph>, <ph id=\"ph3\">`Friend`</ph>, <ph id=\"ph4\">`Protected Friend`</ph>, and <ph id=\"ph5\">`Private`</ph> access levels.","pos":[4494,4634],"source":"The following example shows declarations of variables with `Public`, `Protected`, `Friend`, `Protected Friend`, and `Private` access levels."},{"content":"Note that when the <ph id=\"ph1\">`Dim`</ph> statement specifies an access level, you do not need to include the <ph id=\"ph2\">`Dim`</ph> keyword.","pos":[4635,4742],"source":" Note that when the `Dim` statement specifies an access level, you do not need to include the `Dim` keyword."},{"pos":[4964,4987],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"The more restrictive the access level of a variable, the smaller the chances that malicious code can make improper use of it.","pos":[4991,5116]},{"pos":[5125,5133],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept><ph id=\"ph1\"> </ph>","pos":[5137,5266],"source":"[Access Levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[5269,5359],"source":" [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Public<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/public.md)</ept><ph id=\"ph1\"> </ph>","pos":[5362,5437],"source":" [Public](../../../../visual-basic/language-reference/modifiers/public.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Protected<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/protected.md)</ept><ph id=\"ph1\"> </ph>","pos":[5440,5521],"source":" [Protected](../../../../visual-basic/language-reference/modifiers/protected.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Friend<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept><ph id=\"ph1\"> </ph>","pos":[5524,5599],"source":" [Friend](../../../../visual-basic/language-reference/modifiers/friend.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Private<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/private.md)</ept>","pos":[5602,5678],"source":" [Private](../../../../visual-basic/language-reference/modifiers/private.md)"}]}