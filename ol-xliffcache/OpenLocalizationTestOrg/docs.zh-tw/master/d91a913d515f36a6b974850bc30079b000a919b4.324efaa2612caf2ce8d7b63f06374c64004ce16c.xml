{"content":"---\ntitle: \"If...Then...Else Statement (Visual Basic)\"\nms.date: 04/16/2018\nf1_keywords: \n  - \"vb.ElseIf\"\n  - \"vb.Then\"\n  - \"vb.If\"\n  - \"vb.EndIf\"\nhelpviewer_keywords: \n  - \"ElseIf statement [Visual Basic], If...Then...Else\"\n  - \"Then statement [Visual Basic], If...Then...Else\"\n  - \"control flow [Visual Basic], branching\"\n  - \"execution [Visual Basic], conditional\"\n  - \"TypeOf...Is expression, and If...Then...Else statements\"\n  - \"If...Then...Else statements\"\n  - \"If statement [Visual Basic], If...Then...Else\"\n  - \"If statement [Visual Basic]\"\n  - \"Is operator [Visual Basic], in If...Then...Else statements\"\n  - \"If Operator [Visual Basic]\"\n  - \"branching [Visual Basic], conditional\"\n  - \"If function [Visual Basic], and If...Then...Else statements\"\n  - \"Else statement [Visual Basic]\"\nms.assetid: 790068a2-1307-4e28-8a72-be5ebda099e9\n---\n# If...Then...Else Statement (Visual Basic)\nConditionally executes a group of statements, depending on the value of an expression.  \n  \n## Syntax  \n  \n```  \n' Multiline syntax:  \nIf condition [ Then ]  \n    [ statements ]  \n[ ElseIf elseifcondition [ Then ]  \n    [ elseifstatements ] ]  \n[ Else  \n    [ elsestatements ] ]  \nEnd If  \n  \n' Single-line syntax:  \nIf condition Then [ statements ] [ Else [ elsestatements ] ]  \n```  \n\n## Quick links to example code\n\nThis article includes several examples that illustrate uses of the `If`...`Then`...`Else` statement:\n\n* [Multiline syntax example](#multi-line)\n* [Nested syntax example](#nested)\n* [Single-line syntax example](#single-line)\n\n## Parts  \n `condition`  \n Required. Expression. Must evaluate to `True` or `False`, or to a data type that is implicitly convertible to `Boolean`.  \n  \n If the expression is a [Nullable](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md) `Boolean` variable that evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), the condition is treated as if the expression is `False` and the `Else` block is executed.  \n  \n `Then`  \n Required in the single-line syntax; optional in the multiline syntax.  \n  \n `statements`  \n Optional. One or more statements following `If`...`Then` that are executed if `condition` evaluates to `True`.  \n  \n `elseifcondition`  \n Required if `ElseIf` is present. Expression. Must evaluate to `True` or `False`, or to a data type that is implicitly convertible to `Boolean`.  \n  \n `elseifstatements`  \n Optional. One or more statements following `ElseIf`...`Then` that are executed if `elseifcondition` evaluates to `True`.  \n  \n `elsestatements`  \n Optional. One or more statements that are executed if no previous `condition` or `elseifcondition` expression evaluates to `True`.  \n  \n `End If`  \n Terminates the multiline version of `If`...`Then`...`Else` block.  \n  \n## Remarks  \n  \n### Multiline syntax  \n When an `If`...`Then`...`Else` statement is encountered, `condition` is tested. If `condition` is `True`, the statements following `Then` are executed. If `condition` is `False`, each `ElseIf` statement (if there are any) is evaluated in order. When a `True` `elseifcondition` is found, the statements immediately following the associated `ElseIf` are executed. If no `elseifcondition` evaluates to `True`, or if there are no `ElseIf` statements, the statements following `Else` are executed. After executing the statements following `Then`, `ElseIf`, or `Else`, execution continues with the statement following `End If`.  \n  \n The `ElseIf` and `Else` clauses are both optional. You can have as many `ElseIf` clauses as you want in an `If`...`Then`...`Else` statement, but no `ElseIf` clause can appear after an `Else` clause. `If`...`Then`...`Else` statements can be nested within each other.  \n  \n In the multiline syntax, the `If` statement must be the only statement on the first line. The `ElseIf`, `Else`, and `End If` statements can be preceded only by a line label. The `If`...`Then`...`Else` block must end with an `End If` statement.  \n  \n> [!TIP]\n>  The [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) might be more useful when you evaluate a single expression that has several possible values.  \n  \n### Single-Line syntax  \n You can use the single-line syntax for a single condition with code to execute if it's true. However, the multiple-line syntax provides more structure and flexibility and is easier to read, maintain, and debug.  \n  \n What follows the `Then` keyword is examined to determine whether a statement is a single-line `If`. If anything other than a comment appears after `Then` on the same line, the statement is treated as a single-line `If` statement. If `Then` is absent, it must be the start of a multiple-line `If`...`Then`...`Else`.  \n  \n In the single-line syntax, you can have multiple statements executed as the result of an `If`...`Then` decision. All statements must be on the same line and be separated by colons.  \n\n## Multiline syntax example\n\n<a name=\"multi-line\"></a>\n \n The following example illustrates the use of the multiline syntax of the `If`...`Then`...`Else` statement.  \n  \n [!code-vb[VbVbalrStatements#101](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class6.vb#101)]\n\n## Nested syntax example\n\n<a name=\"nested\"></a>\n\n The following example contains nested `If`...`Then`...`Else` statements.  \n  \n [!code-vb[VbVbalrStatements#102](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class6.vb#102)]\n\n## Single-Line syntax example\n  \n<a name=\"single-line\"></a>\n The following example illustrates the use of the single-line syntax.  \n  \n [!code-vb[VbVbalrStatements#103](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class6.vb#103)]\n  \n## See also\n\n- <xref:Microsoft.VisualBasic.Interaction.Choose%2A>\n- <xref:Microsoft.VisualBasic.Interaction.Switch%2A>\n- [#If...Then...#Else Directives](../../../visual-basic/language-reference/directives/if-then-else-directives.md)\n- [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md)\n- [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)\n- [Decision Structures](../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)\n- [Logical and Bitwise Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)\n- [If Operator](../../../visual-basic/language-reference/operators/if-operator.md)\n","nodes":[{"pos":[4,841],"embed":true,"restype":"x-metadata","content":"title: \"If...Then...Else Statement (Visual Basic)\"\nms.date: 04/16/2018\nf1_keywords: \n  - \"vb.ElseIf\"\n  - \"vb.Then\"\n  - \"vb.If\"\n  - \"vb.EndIf\"\nhelpviewer_keywords: \n  - \"ElseIf statement [Visual Basic], If...Then...Else\"\n  - \"Then statement [Visual Basic], If...Then...Else\"\n  - \"control flow [Visual Basic], branching\"\n  - \"execution [Visual Basic], conditional\"\n  - \"TypeOf...Is expression, and If...Then...Else statements\"\n  - \"If...Then...Else statements\"\n  - \"If statement [Visual Basic], If...Then...Else\"\n  - \"If statement [Visual Basic]\"\n  - \"Is operator [Visual Basic], in If...Then...Else statements\"\n  - \"If Operator [Visual Basic]\"\n  - \"branching [Visual Basic], conditional\"\n  - \"If function [Visual Basic], and If...Then...Else statements\"\n  - \"Else statement [Visual Basic]\"\nms.assetid: 790068a2-1307-4e28-8a72-be5ebda099e9","nodes":[{"content":"If...Then...Else Statement (Visual Basic)","nodes":[{"pos":[0,41],"content":"If...Then...Else Statement (Visual Basic)","nodes":[{"content":"If...Then...Else Statement (Visual Basic)","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[848,889],"content":"If...Then...Else Statement (Visual Basic)","linkify":"If...Then...Else Statement (Visual Basic)","nodes":[{"content":"If...Then...Else Statement (Visual Basic)","pos":[0,41]}]},{"content":"Conditionally executes a group of statements, depending on the value of an expression.","pos":[890,976]},{"pos":[985,991],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1280,1307],"content":"Quick links to example code","linkify":"Quick links to example code","nodes":[{"content":"Quick links to example code","pos":[0,27]}]},{"pos":[1309,1409],"content":"This article includes several examples that illustrate uses of the <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statement:","source":"This article includes several examples that illustrate uses of the `If`...`Then`...`Else` statement:"},{"pos":[1413,1452],"content":"<bpt id=\"p1\">[</bpt>Multiline syntax example<ept id=\"p1\">](#multi-line)</ept>","source":"[Multiline syntax example](#multi-line)"},{"pos":[1455,1487],"content":"<bpt id=\"p1\">[</bpt>Nested syntax example<ept id=\"p1\">](#nested)</ept>","source":"[Nested syntax example](#nested)"},{"pos":[1490,1532],"content":"<bpt id=\"p1\">[</bpt>Single-line syntax example<ept id=\"p1\">](#single-line)</ept>","source":"[Single-line syntax example](#single-line)"},{"pos":[1537,1542],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1561,1570]},{"content":"Expression.","pos":[1571,1582]},{"content":"Must evaluate to <ph id=\"ph1\">`True`</ph> or <ph id=\"ph2\">`False`</ph>, or to a data type that is implicitly convertible to <ph id=\"ph3\">`Boolean`</ph>.","pos":[1583,1681],"source":" Must evaluate to `True` or `False`, or to a data type that is implicitly convertible to `Boolean`."},{"pos":[1688,2007],"content":"If the expression is a <bpt id=\"p1\">[</bpt>Nullable<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept> <ph id=\"ph1\">`Boolean`</ph> variable that evaluates to <bpt id=\"p2\">[</bpt>Nothing<ept id=\"p2\">](../../../visual-basic/language-reference/nothing.md)</ept>, the condition is treated as if the expression is <ph id=\"ph2\">`False`</ph> and the <ph id=\"ph3\">`Else`</ph> block is executed.","source":"If the expression is a [Nullable](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md) `Boolean` variable that evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), the condition is treated as if the expression is `False` and the `Else` block is executed."},{"content":"Required in the single-line syntax; optional in the multiline syntax.","pos":[2024,2093]},{"content":"Optional.","pos":[2116,2125]},{"content":"One or more statements following <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph> that are executed if <ph id=\"ph3\">`condition`</ph> evaluates to <ph id=\"ph4\">`True`</ph>.","pos":[2126,2226],"source":" One or more statements following `If`...`Then` that are executed if `condition` evaluates to `True`."},{"content":"Required if <ph id=\"ph1\">`ElseIf`</ph> is present.","pos":[2254,2286],"source":"Required if `ElseIf` is present."},{"content":"Expression.","pos":[2287,2298]},{"content":"Must evaluate to <ph id=\"ph1\">`True`</ph> or <ph id=\"ph2\">`False`</ph>, or to a data type that is implicitly convertible to <ph id=\"ph3\">`Boolean`</ph>.","pos":[2299,2397],"source":" Must evaluate to `True` or `False`, or to a data type that is implicitly convertible to `Boolean`."},{"content":"Optional.","pos":[2426,2435]},{"content":"One or more statements following <ph id=\"ph1\">`ElseIf`</ph>...<ph id=\"ph2\">`Then`</ph> that are executed if <ph id=\"ph3\">`elseifcondition`</ph> evaluates to <ph id=\"ph4\">`True`</ph>.","pos":[2436,2546],"source":" One or more statements following `ElseIf`...`Then` that are executed if `elseifcondition` evaluates to `True`."},{"content":"Optional.","pos":[2573,2582]},{"content":"One or more statements that are executed if no previous <ph id=\"ph1\">`condition`</ph> or <ph id=\"ph2\">`elseifcondition`</ph> expression evaluates to <ph id=\"ph3\">`True`</ph>.","pos":[2583,2703],"source":" One or more statements that are executed if no previous `condition` or `elseifcondition` expression evaluates to `True`."},{"content":"Terminates the multiline version of <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> block.","pos":[2722,2787],"source":"Terminates the multiline version of `If`...`Then`...`Else` block."},{"pos":[2796,2803],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2813,2829],"content":"Multiline syntax","linkify":"Multiline syntax","nodes":[{"content":"Multiline syntax","pos":[0,16]}]},{"content":"When an <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statement is encountered, <ph id=\"ph4\">`condition`</ph> is tested.","pos":[2833,2912],"source":"When an `If`...`Then`...`Else` statement is encountered, `condition` is tested."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`True`</ph>, the statements following <ph id=\"ph3\">`Then`</ph> are executed.","pos":[2913,2984],"source":" If `condition` is `True`, the statements following `Then` are executed."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`False`</ph>, each <ph id=\"ph3\">`ElseIf`</ph> statement (if there are any) is evaluated in order.","pos":[2985,3077],"source":" If `condition` is `False`, each `ElseIf` statement (if there are any) is evaluated in order."},{"content":"When a <ph id=\"ph1\">`True`</ph> <ph id=\"ph2\">`elseifcondition`</ph> is found, the statements immediately following the associated <ph id=\"ph3\">`ElseIf`</ph> are executed.","pos":[3078,3194],"source":" When a `True` `elseifcondition` is found, the statements immediately following the associated `ElseIf` are executed."},{"content":"If no <ph id=\"ph1\">`elseifcondition`</ph> evaluates to <ph id=\"ph2\">`True`</ph>, or if there are no <ph id=\"ph3\">`ElseIf`</ph> statements, the statements following <ph id=\"ph4\">`Else`</ph> are executed.","pos":[3195,3325],"source":" If no `elseifcondition` evaluates to `True`, or if there are no `ElseIf` statements, the statements following `Else` are executed."},{"content":"After executing the statements following <ph id=\"ph1\">`Then`</ph>, <ph id=\"ph2\">`ElseIf`</ph>, or <ph id=\"ph3\">`Else`</ph>, execution continues with the statement following <ph id=\"ph4\">`End If`</ph>.","pos":[3326,3454],"source":" After executing the statements following `Then`, `ElseIf`, or `Else`, execution continues with the statement following `End If`."},{"content":"The <ph id=\"ph1\">`ElseIf`</ph> and <ph id=\"ph2\">`Else`</ph> clauses are both optional.","pos":[3461,3511],"source":"The `ElseIf` and `Else` clauses are both optional."},{"content":"You can have as many <ph id=\"ph1\">`ElseIf`</ph> clauses as you want in an <ph id=\"ph2\">`If`</ph>...<ph id=\"ph3\">`Then`</ph>...<ph id=\"ph4\">`Else`</ph> statement, but no <ph id=\"ph5\">`ElseIf`</ph> clause can appear after an <ph id=\"ph6\">`Else`</ph> clause.","pos":[3512,3659],"source":" You can have as many `ElseIf` clauses as you want in an `If`...`Then`...`Else` statement, but no `ElseIf` clause can appear after an `Else` clause."},{"content":"<ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statements can be nested within each other.","pos":[3660,3726],"source":"`If`...`Then`...`Else` statements can be nested within each other."},{"content":"In the multiline syntax, the <ph id=\"ph1\">`If`</ph> statement must be the only statement on the first line.","pos":[3733,3822],"source":"In the multiline syntax, the `If` statement must be the only statement on the first line."},{"content":"The <ph id=\"ph1\">`ElseIf`</ph>, <ph id=\"ph2\">`Else`</ph>, and <ph id=\"ph3\">`End If`</ph> statements can be preceded only by a line label.","pos":[3823,3906],"source":" The `ElseIf`, `Else`, and `End If` statements can be preceded only by a line label."},{"content":"The <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> block must end with an <ph id=\"ph4\">`End If`</ph> statement.","pos":[3907,3976],"source":" The `If`...`Then`...`Else` block must end with an `End If` statement."},{"pos":[3984,4194],"content":"[!TIP]\n The [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) might be more useful when you evaluate a single expression that has several possible values.","leadings":["","> "],"nodes":[{"content":"The <bpt id=\"p1\">[</bpt>Select...Case Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept> might be more useful when you evaluate a single expression that has several possible values.","pos":[8,208],"source":"The [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) might be more useful when you evaluate a single expression that has several possible values."}]},{"pos":[4204,4222],"content":"Single-Line syntax","linkify":"Single-Line syntax","nodes":[{"content":"Single-Line syntax","pos":[0,18]}]},{"content":"You can use the single-line syntax for a single condition with code to execute if it's true.","pos":[4226,4318]},{"content":"However, the multiple-line syntax provides more structure and flexibility and is easier to read, maintain, and debug.","pos":[4319,4436]},{"content":"What follows the <ph id=\"ph1\">`Then`</ph> keyword is examined to determine whether a statement is a single-line <ph id=\"ph2\">`If`</ph>.","pos":[4443,4542],"source":"What follows the `Then` keyword is examined to determine whether a statement is a single-line `If`."},{"content":"If anything other than a comment appears after <ph id=\"ph1\">`Then`</ph> on the same line, the statement is treated as a single-line <ph id=\"ph2\">`If`</ph> statement.","pos":[4543,4672],"source":" If anything other than a comment appears after `Then` on the same line, the statement is treated as a single-line `If` statement."},{"content":"If <ph id=\"ph1\">`Then`</ph> is absent, it must be the start of a multiple-line <ph id=\"ph2\">`If`</ph>...<ph id=\"ph3\">`Then`</ph>...<ph id=\"ph4\">`Else`</ph>.","pos":[4673,4757],"source":" If `Then` is absent, it must be the start of a multiple-line `If`...`Then`...`Else`."},{"content":"In the single-line syntax, you can have multiple statements executed as the result of an <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph> decision.","pos":[4764,4876],"source":"In the single-line syntax, you can have multiple statements executed as the result of an `If`...`Then` decision."},{"content":"All statements must be on the same line and be separated by colons.","pos":[4877,4944]},{"pos":[4951,4975],"content":"Multiline syntax example","linkify":"Multiline syntax example","nodes":[{"content":"Multiline syntax example","pos":[0,24]}]},{"pos":[5006,5112],"content":"The following example illustrates the use of the multiline syntax of the <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statement.","source":"The following example illustrates the use of the multiline syntax of the `If`...`Then`...`Else` statement."},{"pos":[5245,5266],"content":"Nested syntax example","linkify":"Nested syntax example","nodes":[{"content":"Nested syntax example","pos":[0,21]}]},{"pos":[5292,5364],"content":"The following example contains nested <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statements.","source":"The following example contains nested `If`...`Then`...`Else` statements."},{"pos":[5497,5523],"content":"Single-Line syntax example","linkify":"Single-Line syntax example","nodes":[{"content":"Single-Line syntax example","pos":[0,26]}]},{"pos":[5527,5623],"content":"<bpt id=\"p1\">&lt;a name=\"single-line\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> The following example illustrates the use of the single-line syntax.","source":"<a name=\"single-line\"></a>\n The following example illustrates the use of the single-line syntax."},{"pos":[5758,5766],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5876,5987],"content":"<bpt id=\"p1\">[</bpt>#If...Then...#Else Directives<ept id=\"p1\">](../../../visual-basic/language-reference/directives/if-then-else-directives.md)</ept>","source":"[#If...Then...#Else Directives](../../../visual-basic/language-reference/directives/if-then-else-directives.md)"},{"pos":[5990,6093],"content":"<bpt id=\"p1\">[</bpt>Select...Case Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept>","source":"[Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md)"},{"pos":[6096,6224],"content":"<bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>","source":"[Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)"},{"pos":[6227,6343],"content":"<bpt id=\"p1\">[</bpt>Decision Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)</ept>","source":"[Decision Structures](../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)"},{"pos":[6346,6511],"content":"<bpt id=\"p1\">[</bpt>Logical and Bitwise Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept>","source":"[Logical and Bitwise Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)"},{"pos":[6514,6594],"content":"<bpt id=\"p1\">[</bpt>If Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/if-operator.md)</ept>","source":"[If Operator](../../../visual-basic/language-reference/operators/if-operator.md)"}]}