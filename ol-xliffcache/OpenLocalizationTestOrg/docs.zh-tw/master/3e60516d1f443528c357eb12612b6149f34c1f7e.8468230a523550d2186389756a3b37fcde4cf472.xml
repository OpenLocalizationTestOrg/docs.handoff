{"content":"---\ntitle: \"?: Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"?:_CSharpKeyword\"\n  - \"?_CSharpKeyword\"\n  - \":_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"?: operator [C#]\"\n  - \"conditional operator (?:) [C#]\"\nms.assetid: e83a17f1-7500-48ba-8bee-2fbc4c847af4\ncaps.latest.revision: 23\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# ?: Operator (C# Reference)\nThe conditional operator (`?:`) returns one of two values depending on the value of a Boolean expression. Following is the syntax for the conditional operator.  \n  \n```  \ncondition ? first_expression : second_expression;  \n```  \n  \n## Remarks  \n The `condition` must evaluate to `true` or `false`. If `condition` is `true`, `first_expression` is evaluated and becomes the result. If `condition` is `false`, `second_expression` is evaluated and becomes the result. Only one of the two expressions is evaluated.  \n  \n Either the type of `first_expression` and `second_expression` must be the same, or an implicit conversion must exist from one type to the other.  \n  \n You can express calculations that might otherwise require an `if-else` construction more concisely by using the conditional operator. For example, the following code uses first an `if` statement and then a conditional operator to classify an integer as positive or negative.  \n  \n```  \n  \nint input = Convert.ToInt32(Console.ReadLine());  \nstring classify;  \n  \n// if-else construction.  \nif (input > 0)  \n    classify = \"positive\";  \nelse  \n    classify = \"negative\";  \n  \n// ?: conditional operator.  \nclassify = (input > 0) ? \"positive\" : \"negative\";  \n  \n```  \n  \n The conditional operator is right-associative. The expression `a ? b : c ? d : e` is evaluated as `a ? b : (c ? d : e)`, not as `(a ? b : c) ? d : e`.  \n  \n The conditional operator cannot be overloaded.  \n  \n## Example  \n [!code-cs[csRefOperators#41](../../../csharp/language-reference/operators/codesnippet/CSharp/conditional-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)   \n [if-else](../../../csharp/language-reference/keywords/if-else.md)   \n [?. and ?Operators](../../../csharp/language-reference/operators/null-conditional-operators.md)   \n [?? Operator](../../../csharp/language-reference/operators/null-conditional-operator.md)","nodes":[{"pos":[4,660],"embed":true,"restype":"x-metadata","content":"title: \"?: Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"?:_CSharpKeyword\"\n  - \"?_CSharpKeyword\"\n  - \":_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"?: operator [C#]\"\n  - \"conditional operator (?:) [C#]\"\nms.assetid: e83a17f1-7500-48ba-8bee-2fbc4c847af4\ncaps.latest.revision: 23\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"?: Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"?: Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"?: Operator (C# Reference) | Microsoft Docs","pos":[0,43]}]}],"path":["title"]}],"yml":true},{"pos":[667,693],"content":"?: Operator (C# Reference)","linkify":"?: Operator (C# Reference)","nodes":[{"content":"?: Operator (C# Reference)","pos":[0,26]}]},{"content":"The conditional operator (<ph id=\"ph1\">`?:`</ph>) returns one of two values depending on the value of a Boolean expression.","pos":[694,799],"source":"The conditional operator (`?:`) returns one of two values depending on the value of a Boolean expression."},{"content":"Following is the syntax for the conditional operator.","pos":[800,853]},{"pos":[929,936],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`condition`</ph> must evaluate to <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`false`</ph>.","pos":[940,991],"source":"The `condition` must evaluate to `true` or `false`."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`true`</ph>, <ph id=\"ph3\">`first_expression`</ph> is evaluated and becomes the result.","pos":[992,1073],"source":" If `condition` is `true`, `first_expression` is evaluated and becomes the result."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">`second_expression`</ph> is evaluated and becomes the result.","pos":[1074,1157],"source":" If `condition` is `false`, `second_expression` is evaluated and becomes the result."},{"content":"Only one of the two expressions is evaluated.","pos":[1158,1203]},{"pos":[1210,1354],"content":"Either the type of <ph id=\"ph1\">`first_expression`</ph> and <ph id=\"ph2\">`second_expression`</ph> must be the same, or an implicit conversion must exist from one type to the other.","source":"Either the type of `first_expression` and `second_expression` must be the same, or an implicit conversion must exist from one type to the other."},{"content":"You can express calculations that might otherwise require an <ph id=\"ph1\">`if-else`</ph> construction more concisely by using the conditional operator.","pos":[1361,1494],"source":"You can express calculations that might otherwise require an `if-else` construction more concisely by using the conditional operator."},{"content":"For example, the following code uses first an <ph id=\"ph1\">`if`</ph> statement and then a conditional operator to classify an integer as positive or negative.","pos":[1495,1635],"source":" For example, the following code uses first an `if` statement and then a conditional operator to classify an integer as positive or negative."},{"content":"The conditional operator is right-associative.","pos":[1930,1976]},{"content":"The expression <ph id=\"ph1\">`a ? b : c ? d : e`</ph> is evaluated as <ph id=\"ph2\">`a ? b : (c ? d : e)`</ph>, not as <ph id=\"ph3\">`(a ? b : c) ? d : e`</ph>.","pos":[1977,2080],"source":" The expression `a ? b : c ? d : e` is evaluated as `a ? b : (c ? d : e)`, not as `(a ? b : c) ? d : e`."},{"content":"The conditional operator cannot be overloaded.","pos":[2087,2133]},{"pos":[2142,2149],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2282,2290],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2294,2354],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2358,2425],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2429,2499],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>if-else<ept id=\"p1\">](../../../csharp/language-reference/keywords/if-else.md)</ept><ph id=\"ph1\"> </ph>","pos":[2503,2569],"source":"[if-else](../../../csharp/language-reference/keywords/if-else.md) "},{"content":"<bpt id=\"p1\">[</bpt>?. and ?Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/null-conditional-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2573,2669],"source":"[?. and ?Operators](../../../csharp/language-reference/operators/null-conditional-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>?? Operator<ept id=\"p1\">](../../../csharp/language-reference/operators/null-conditional-operator.md)</ept>","pos":[2673,2761],"source":"[?? Operator](../../../csharp/language-reference/operators/null-conditional-operator.md)"}]}