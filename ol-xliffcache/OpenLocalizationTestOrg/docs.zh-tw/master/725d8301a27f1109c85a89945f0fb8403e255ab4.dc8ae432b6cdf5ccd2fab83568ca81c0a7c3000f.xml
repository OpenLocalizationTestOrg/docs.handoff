{"content":"---\ntitle: Introduction to Docker\ndescription: This article provides an introduction and overview to Docker in the context of a .NET Core application.\nms.date: 03/20/2019\nms.custom: \"mvc, seodec18\"\n---\n\n# Introduction to .NET and Docker\n\n.NET Core can easily run in a Docker container. Containers provide a lightweight way to isolate your application from the rest of the host system, sharing just the kernel, and using resources given to your application. If you're unfamiliar with Docker, it's highly recommended that you read through Docker's [overview documentation](https://docs.docker.com/engine/docker-overview/).\n\nFor more information about how to install Docker, see the download page for [Docker Desktop: Community Edition](https://www.docker.com/products/docker-desktop).\n\n## Docker basics\n\nThere are a few concepts you should be familiar with. The Docker client has a command line interface program you use to manage images and containers. As previously stated, you should take the time to read through the [Docker overview](https://docs.docker.com/engine/docker-overview/) documentation. \n\n### Images\n\nAn image is an ordered collection of filesystem changes that form the basis of a container. The image doesn't have a state and is read-only. Much the time an image is based on another image, but with some customization. For example, when you create an new image for your application, you would base it on an existing image that already contains the .NET Core runtime.\n\nBecause containers are created from images, images have a set of run parameters (such as a starting executable) that run when the container starts.\n\n### Containers\n\nA container is a runnable instance of an image. As you build your image, you deploy your application and dependencies. Then, multiple containers can be instantiated, each isolated from one another. Each container instance has its own filesystem, memory, and network interface.\n\n### Registries\n\nContainer registries are a collection of image repositories. You can base your images on a registry image. You can create containers directly from an image in a registry. The [relationship between Docker containers, images, and registries](../../standard/microservices-architecture/container-docker-introduction/docker-containers-images-registries.md) is an important concept when [architecting and building containerized applications or microservices](../../standard/microservices-architecture/architect-microservice-container-applications/index.md). This approach greatly shortens the time between development and deployment.\n\nDocker has a public registry hosted at the [Docker Hub](https://hub.docker.com/) that you can use. [.NET Core related images](https://hub.docker.com/_/microsoft-dotnet-core/) are listed at the Docker Hub. \n\nThe Microsoft Container Registry (MCR) is the official source of Microsoft-provided container images. The MCR is built on Azure CDN to provide globally-replicated images. However, the MCR does not have a public-facing website and the primary way to learn about Microsoft-provided container images is through the [Microsoft Docker Hub pages](https://hub.docker.com/_/microsoft-dotnet-core/).\n\n### Dockerfile\n\nA **Dockerfile** is a file that defines a set of instructions that creates an image. Each instruction in the **Dockerfile** creates a layer in the image. For the most part, when you rebuild the image only the layers that have changed are rebuilt. The **Dockerfile** can be distributed to others and allows them to recreate to create a new image in the same manner you created it. While this allows you to distribute the *instructions* on how to create the image, the main way to distribute your image is to publish it to a registry.\n\n## .NET Core images\n\nOfficial .NET Core Docker images are published to the Microsoft Container Registry (MCR) and are discoverable at the [Microsoft .NET Core Docker Hub repository](https://hub.docker.com/_/microsoft-dotnet-core/). Each repository contains images for different combinations of the .NET (SDK or Runtime) and OS that you can use. \n\nMicrosoft provides images that are tailored for specific scenarios. For example, the [ASP.NET Core repository](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/) provides images that are built for running ASP.NET Core apps in production.\n\n## Azure services\n\nVarious Azure services support containers. You create a Docker image for your application and deploy it to one of the following services:\n\n* [Azure Kubernetes Service (AKS)](https://azure.microsoft.com/services/kubernetes-service/)\\\nScale and orchestrate Linux containers using Kubernetes.\n\n* [Azure App Service](https://azure.microsoft.com/services/app-service/containers/)\\\nDeploy web apps or APIs using Linux containers in a PaaS environment.\n\n* [Azure Batch](https://azure.microsoft.com/services/batch/)\\\nRun repetitive compute jobs using containers.\n\n* [Azure Service Fabric](https://azure.microsoft.com/services/service-fabric/)\\\nLift, shift, and modernize .NET applications to microservices using Windows Server containers\n\n* [Azure Container Registry](https://azure.microsoft.com/services/container-registry/)\\\nStore and manage container images across all types of Azure deployments.\n\n## Next steps\n\n* [Learn how to containerize a .NET Core application.](build-docker-netcore-container.md)\n* [Try the Learn ASP.NET Core Microservice tutorial.](https://dotnet.microsoft.com/learn/web/aspnet-microservice-tutorial/intro)\n","nodes":[{"pos":[4,197],"embed":true,"restype":"x-metadata","content":"title: Introduction to Docker\ndescription: This article provides an introduction and overview to Docker in the context of a .NET Core application.\nms.date: 03/20/2019\nms.custom: \"mvc, seodec18\"","nodes":[{"content":"Introduction to Docker","nodes":[{"pos":[0,22],"content":"Introduction to Docker","nodes":[{"content":"Introduction to Docker","pos":[0,22]}]}],"path":["title"],"nosxs":false},{"content":"This article provides an introduction and overview to Docker in the context of a .NET Core application.","nodes":[{"pos":[0,103],"content":"This article provides an introduction and overview to Docker in the context of a .NET Core application.","nodes":[{"content":"This article provides an introduction and overview to Docker in the context of a .NET Core application.","pos":[0,103]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[205,236],"content":"Introduction to .NET and Docker","linkify":"Introduction to .NET and Docker","nodes":[{"content":"Introduction to .NET and Docker","pos":[0,31]}]},{"content":".NET Core can easily run in a Docker container.","pos":[238,285]},{"content":"Containers provide a lightweight way to isolate your application from the rest of the host system, sharing just the kernel, and using resources given to your application.","pos":[286,456]},{"content":"If you're unfamiliar with Docker, it's highly recommended that you read through Docker's <bpt id=\"p1\">[</bpt>overview documentation<ept id=\"p1\">](https://docs.docker.com/engine/docker-overview/)</ept>.","pos":[457,620],"source":" If you're unfamiliar with Docker, it's highly recommended that you read through Docker's [overview documentation](https://docs.docker.com/engine/docker-overview/)."},{"pos":[622,782],"content":"For more information about how to install Docker, see the download page for <bpt id=\"p1\">[</bpt>Docker Desktop: Community Edition<ept id=\"p1\">](https://www.docker.com/products/docker-desktop)</ept>.","source":"For more information about how to install Docker, see the download page for [Docker Desktop: Community Edition](https://www.docker.com/products/docker-desktop)."},{"pos":[787,800],"content":"Docker basics","linkify":"Docker basics","nodes":[{"content":"Docker basics","pos":[0,13]}]},{"content":"There are a few concepts you should be familiar with.","pos":[802,855]},{"content":"The Docker client has a command line interface program you use to manage images and containers.","pos":[856,951]},{"content":"As previously stated, you should take the time to read through the <bpt id=\"p1\">[</bpt>Docker overview<ept id=\"p1\">](https://docs.docker.com/engine/docker-overview/)</ept> documentation.","pos":[952,1100],"source":" As previously stated, you should take the time to read through the [Docker overview](https://docs.docker.com/engine/docker-overview/) documentation."},{"pos":[1107,1113],"content":"Images","linkify":"Images","nodes":[{"content":"Images","pos":[0,6]}]},{"content":"An image is an ordered collection of filesystem changes that form the basis of a container.","pos":[1115,1206]},{"content":"The image doesn't have a state and is read-only.","pos":[1207,1255]},{"content":"Much the time an image is based on another image, but with some customization.","pos":[1256,1334]},{"content":"For example, when you create an new image for your application, you would base it on an existing image that already contains the .NET Core runtime.","pos":[1335,1482]},{"content":"Because containers are created from images, images have a set of run parameters (such as a starting executable) that run when the container starts.","pos":[1484,1631]},{"pos":[1637,1647],"content":"Containers","linkify":"Containers","nodes":[{"content":"Containers","pos":[0,10]}]},{"content":"A container is a runnable instance of an image.","pos":[1649,1696]},{"content":"As you build your image, you deploy your application and dependencies.","pos":[1697,1767]},{"content":"Then, multiple containers can be instantiated, each isolated from one another.","pos":[1768,1846]},{"content":"Each container instance has its own filesystem, memory, and network interface.","pos":[1847,1925]},{"pos":[1931,1941],"content":"Registries","linkify":"Registries","nodes":[{"content":"Registries","pos":[0,10]}]},{"content":"Container registries are a collection of image repositories.","pos":[1943,2003]},{"content":"You can base your images on a registry image.","pos":[2004,2049]},{"content":"You can create containers directly from an image in a registry.","pos":[2050,2113]},{"content":"The <bpt id=\"p1\">[</bpt>relationship between Docker containers, images, and registries<ept id=\"p1\">](../../standard/microservices-architecture/container-docker-introduction/docker-containers-images-registries.md)</ept> is an important concept when <bpt id=\"p2\">[</bpt>architecting and building containerized applications or microservices<ept id=\"p2\">](../../standard/microservices-architecture/architect-microservice-container-applications/index.md)</ept>.","pos":[2114,2494],"source":" The [relationship between Docker containers, images, and registries](../../standard/microservices-architecture/container-docker-introduction/docker-containers-images-registries.md) is an important concept when [architecting and building containerized applications or microservices](../../standard/microservices-architecture/architect-microservice-container-applications/index.md)."},{"content":"This approach greatly shortens the time between development and deployment.","pos":[2495,2570]},{"content":"Docker has a public registry hosted at the <bpt id=\"p1\">[</bpt>Docker Hub<ept id=\"p1\">](https://hub.docker.com/)</ept> that you can use.","pos":[2572,2670],"source":"Docker has a public registry hosted at the [Docker Hub](https://hub.docker.com/) that you can use."},{"content":"<bpt id=\"p1\">[</bpt>.NET Core related images<ept id=\"p1\">](https://hub.docker.com/_/microsoft-dotnet-core/)</ept> are listed at the Docker Hub.","pos":[2671,2776],"source":"[.NET Core related images](https://hub.docker.com/_/microsoft-dotnet-core/) are listed at the Docker Hub."},{"content":"The Microsoft Container Registry (MCR) is the official source of Microsoft-provided container images.","pos":[2779,2880]},{"content":"The MCR is built on Azure CDN to provide globally-replicated images.","pos":[2881,2949]},{"content":"However, the MCR does not have a public-facing website and the primary way to learn about Microsoft-provided container images is through the <bpt id=\"p1\">[</bpt>Microsoft Docker Hub pages<ept id=\"p1\">](https://hub.docker.com/_/microsoft-dotnet-core/)</ept>.","pos":[2950,3169],"source":" However, the MCR does not have a public-facing website and the primary way to learn about Microsoft-provided container images is through the [Microsoft Docker Hub pages](https://hub.docker.com/_/microsoft-dotnet-core/)."},{"pos":[3175,3185],"content":"Dockerfile","linkify":"Dockerfile","nodes":[{"content":"Dockerfile","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>Dockerfile<ept id=\"p1\">**</ept> is a file that defines a set of instructions that creates an image.","pos":[3187,3271],"source":"A **Dockerfile** is a file that defines a set of instructions that creates an image."},{"content":"Each instruction in the <bpt id=\"p1\">**</bpt>Dockerfile<ept id=\"p1\">**</ept> creates a layer in the image.","pos":[3272,3340],"source":" Each instruction in the **Dockerfile** creates a layer in the image."},{"content":"For the most part, when you rebuild the image only the layers that have changed are rebuilt.","pos":[3341,3433]},{"content":"The <bpt id=\"p1\">**</bpt>Dockerfile<ept id=\"p1\">**</ept> can be distributed to others and allows them to recreate to create a new image in the same manner you created it.","pos":[3434,3566],"source":" The **Dockerfile** can be distributed to others and allows them to recreate to create a new image in the same manner you created it."},{"content":"While this allows you to distribute the <bpt id=\"p1\">*</bpt>instructions<ept id=\"p1\">*</ept> on how to create the image, the main way to distribute your image is to publish it to a registry.","pos":[3567,3719],"source":" While this allows you to distribute the *instructions* on how to create the image, the main way to distribute your image is to publish it to a registry."},{"pos":[3724,3740],"content":".NET Core images","linkify":".NET Core images","nodes":[{"content":".NET Core images","pos":[0,16]}]},{"content":"Official .NET Core Docker images are published to the Microsoft Container Registry (MCR) and are discoverable at the <bpt id=\"p1\">[</bpt>Microsoft .NET Core Docker Hub repository<ept id=\"p1\">](https://hub.docker.com/_/microsoft-dotnet-core/)</ept>.","pos":[3742,3952],"source":"Official .NET Core Docker images are published to the Microsoft Container Registry (MCR) and are discoverable at the [Microsoft .NET Core Docker Hub repository](https://hub.docker.com/_/microsoft-dotnet-core/)."},{"content":"Each repository contains images for different combinations of the .NET (SDK or Runtime) and OS that you can use.","pos":[3953,4065]},{"content":"Microsoft provides images that are tailored for specific scenarios.","pos":[4068,4135]},{"content":"For example, the <bpt id=\"p1\">[</bpt>ASP.NET Core repository<ept id=\"p1\">](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/)</ept> provides images that are built for running ASP.NET Core apps in production.","pos":[4136,4310],"source":" For example, the [ASP.NET Core repository](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/) provides images that are built for running ASP.NET Core apps in production."},{"pos":[4315,4329],"content":"Azure services","linkify":"Azure services","nodes":[{"content":"Azure services","pos":[0,14]}]},{"content":"Various Azure services support containers.","pos":[4331,4373]},{"content":"You create a Docker image for your application and deploy it to one of the following services:","pos":[4374,4468]},{"content":"<bpt id=\"p1\">[</bpt>Azure Kubernetes Service (AKS)<ept id=\"p1\">](https://azure.microsoft.com/services/kubernetes-service/)</ept><ph id=\"ph1\">\\</ph>","pos":[4472,4563],"source":"[Azure Kubernetes Service (AKS)](https://azure.microsoft.com/services/kubernetes-service/)\\"},{"content":"Scale and orchestrate Linux containers using Kubernetes.","pos":[4564,4620]},{"content":"<bpt id=\"p1\">[</bpt>Azure App Service<ept id=\"p1\">](https://azure.microsoft.com/services/app-service/containers/)</ept><ph id=\"ph1\">\\</ph>","pos":[4624,4706],"source":"[Azure App Service](https://azure.microsoft.com/services/app-service/containers/)\\"},{"content":"Deploy web apps or APIs using Linux containers in a PaaS environment.","pos":[4707,4776]},{"content":"<bpt id=\"p1\">[</bpt>Azure Batch<ept id=\"p1\">](https://azure.microsoft.com/services/batch/)</ept><ph id=\"ph1\">\\</ph>","pos":[4780,4839],"source":"[Azure Batch](https://azure.microsoft.com/services/batch/)\\"},{"content":"Run repetitive compute jobs using containers.","pos":[4840,4885]},{"content":"<bpt id=\"p1\">[</bpt>Azure Service Fabric<ept id=\"p1\">](https://azure.microsoft.com/services/service-fabric/)</ept><ph id=\"ph1\">\\</ph>","pos":[4889,4966],"source":"[Azure Service Fabric](https://azure.microsoft.com/services/service-fabric/)\\"},{"content":"Lift, shift, and modernize .NET applications to microservices using Windows Server containers","pos":[4967,5060]},{"content":"<bpt id=\"p1\">[</bpt>Azure Container Registry<ept id=\"p1\">](https://azure.microsoft.com/services/container-registry/)</ept><ph id=\"ph1\">\\</ph>","pos":[5064,5149],"source":"[Azure Container Registry](https://azure.microsoft.com/services/container-registry/)\\"},{"content":"Store and manage container images across all types of Azure deployments.","pos":[5150,5222]},{"pos":[5227,5237],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"pos":[5241,5328],"content":"<bpt id=\"p1\">[</bpt>Learn how to containerize a .NET Core application.<ept id=\"p1\">](build-docker-netcore-container.md)</ept>","source":"[Learn how to containerize a .NET Core application.](build-docker-netcore-container.md)"},{"pos":[5331,5457],"content":"<bpt id=\"p1\">[</bpt>Try the Learn ASP.NET Core Microservice tutorial.<ept id=\"p1\">](https://dotnet.microsoft.com/learn/web/aspnet-microservice-tutorial/intro)</ept>","source":"[Try the Learn ASP.NET Core Microservice tutorial.](https://dotnet.microsoft.com/learn/web/aspnet-microservice-tutorial/intro)"}]}