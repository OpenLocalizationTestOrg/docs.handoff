{"content":"---\ntitle: \"How to: Create Signed Friend Assemblies (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: f2afd83d-b044-484b-a56d-56d0a8a40647\ncaps.latest.revision: 4\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Create Signed Friend Assemblies (Visual Basic)\nThis example shows how to use friend assemblies with assemblies that have strong names. Both assemblies must be strong named. Although both assemblies in this example use the same keys, you could use different keys for two assemblies.  \n  \n### To create a signed assembly and a friend assembly  \n  \n1.  Open a command prompt.  \n  \n2.  Use the following sequence of commands with the Strong Name tool to generate a keyfile and to display its public key. For more information, see [Sn.exe (Strong Name Tool)](https://msdn.microsoft.com/library/k5b5tt23).  \n  \n    1.  Generate a strong-name key for this example and store it in the file FriendAssemblies.snk:  \n  \n         `sn -k FriendAssemblies.snk`  \n  \n    2.  Extract the public key from FriendAssemblies.snk and put it into FriendAssemblies.publickey:  \n  \n         `sn -p FriendAssemblies.snk FriendAssemblies.publickey`  \n  \n    3.  Display the public key stored in the file FriendAssemblies.publickey:  \n  \n         `sn -tp FriendAssemblies.publickey`  \n  \n3.  Create a Visual Basic file named `friend_signed_A` that contains the following code. The code uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to declare friend_signed_B as a friend assembly.  \n  \n     The Strong Name tool generates a new public key every time it runs. Therefore, you must replace the public key in the following code with the public key you just generated, as shown in the following example.  \n  \n    ```vb  \n    ' friend_signed_A.vb  \n    ' Compile with:   \n    ' Vbc /target:library /keyfile:FriendAssemblies.snk friend_signed_A.vb  \n    Imports System.Runtime.CompilerServices  \n  \n    <Assembly: InternalsVisibleTo(\"friend_signed_B, PublicKey=0024000004800000940000000602000000240000525341310004000001000100e3aedce99b7e10823920206f8e46cd5558b4ec7345bd1a5b201ffe71660625dcb8f9a08687d881c8f65a0dcf042f81475d2e88f3e3e273c8311ee40f952db306c02fbfc5d8bc6ee1e924e6ec8fe8c01932e0648a0d3e5695134af3bb7fab370d3012d083fa6b83179dd3d031053f72fc1f7da8459140b0af5afc4d2804deccb6\")>   \n    Public Class Class1  \n        Public Sub Test()  \n            System.Console.WriteLine(\"Class1.Test\")  \n            System.Console.ReadLine()  \n        End Sub  \n    End Class  \n    ```  \n  \n4.  Compile and sign friend_signed_A by using the following command.  \n  \n    ```vb  \n    Vbc /target:library /keyfile:FriendAssemblies.snk friend_signed_A.vb  \n    ```  \n  \n5.  Create a Visual Basic file that is named `friend_signed_B` and contains the following code. Because friend_signed_A specifies friend_signed_B as a friend assembly, the code in friend_signed_B can access `Friend` types and members from friend_signed_A. The file contains the following code.  \n  \n    ```vb  \n    ' friend_signed_B.vb  \n    ' Compile with:   \n    ' Vbc /keyfile:FriendAssemblies.snk /r:friend_signed_A.dll friend_signed_B.vb  \n    Module Sample  \n        Public Sub Main()  \n            Dim inst As New Class1  \n            inst.Test()  \n        End Sub  \n    End Module  \n    ```  \n  \n6.  Compile and sign friend_signed_B by using the following command.  \n  \n    ```vb  \n    Vbc /keyfile:FriendAssemblies.snk /r:friend_signed_A.dll friend_signed_B.vb  \n    ```  \n  \n     The name of the assembly generated by the compiler must match the friend assembly name passed to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute. You can explicitly set the assembly by using the `/out` compiler option. For more information, see [/out (Visual Basic)](../../../../visual-basic/reference/command-line-compiler/out.md).  \n  \n7.  Run the friend_signed_B.exe file.  \n  \n     The program prints the string \"Class1.Test\".  \n  \n## .NET Framework Security  \n There are similarities between the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute and the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The main difference is that <xref:System.Security.Permissions.StrongNameIdentityPermission> can demand security permissions to run a particular section of code, whereas the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute controls the visibility of `Friend` types and members.  \n  \n## See Also  \n <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>   \n [Assemblies and the Global Assembly Cache (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)   \n [Friend Assemblies (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/friend-assemblies.md)   \n [How to: Create Unsigned Friend Assemblies (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-unsigned-friend-assemblies.md)   \n [/keyfile](../../../../visual-basic/reference/command-line-compiler/keyfile.md)   \n [Sn.exe (Strong Name Tool)](https://msdn.microsoft.com/library/k5b5tt23)   \n [Creating and Using Strong-Named Assemblies](https://msdn.microsoft.com/library/xwb8f617)   \n [Programming Concepts](../../../../visual-basic/programming-guide/concepts/index.md)","nodes":[{"pos":[12,83],"content":"How to: Create Signed Friend Assemblies (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create Signed Friend Assemblies (Visual Basic) | Microsoft Docs","pos":[0,71]}]},{"pos":[464,518],"content":"How to: Create Signed Friend Assemblies (Visual Basic)","linkify":"How to: Create Signed Friend Assemblies (Visual Basic)","nodes":[{"content":"How to: Create Signed Friend Assemblies (Visual Basic)","pos":[0,54]}]},{"content":"This example shows how to use friend assemblies with assemblies that have strong names.","pos":[519,606]},{"content":"Both assemblies must be strong named.","pos":[607,644]},{"content":"Although both assemblies in this example use the same keys, you could use different keys for two assemblies.","pos":[645,753]},{"pos":[763,812],"content":"To create a signed assembly and a friend assembly","linkify":"To create a signed assembly and a friend assembly","nodes":[{"content":"To create a signed assembly and a friend assembly","pos":[0,49]}]},{"content":"Open a command prompt.","pos":[822,844]},{"content":"Use the following sequence of commands with the Strong Name tool to generate a keyfile and to display its public key.","pos":[854,971]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Sn.exe (Strong Name Tool)<ept id=\"p1\">](https://msdn.microsoft.com/library/k5b5tt23)</ept>.","pos":[972,1071],"source":" For more information, see [Sn.exe (Strong Name Tool)](https://msdn.microsoft.com/library/k5b5tt23)."},{"content":"Generate a strong-name key for this example and store it in the file FriendAssemblies.snk:","pos":[1085,1175]},{"content":"Extract the public key from FriendAssemblies.snk and put it into FriendAssemblies.publickey:","pos":[1232,1324]},{"content":"Display the public key stored in the file FriendAssemblies.publickey:","pos":[1408,1477]},{"content":"Create a Visual Basic file named <ph id=\"ph1\">`friend_signed_A`</ph> that contains the following code.","pos":[1537,1621],"source":"Create a Visual Basic file named `friend_signed_A` that contains the following code."},{"content":"The code uses the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to declare friend_signed_B as a friend assembly.","pos":[1622,1765],"source":" The code uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to declare friend_signed_B as a friend assembly."},{"content":"The Strong Name tool generates a new public key every time it runs.","pos":[1776,1843]},{"content":"Therefore, you must replace the public key in the following code with the public key you just generated, as shown in the following example.","pos":[1844,1983]},{"content":"Compile and sign friend_signed_A by using the following command.","pos":[2765,2829]},{"content":"Create a Visual Basic file that is named <ph id=\"ph1\">`friend_signed_B`</ph> and contains the following code.","pos":[2939,3030],"source":"Create a Visual Basic file that is named `friend_signed_B` and contains the following code."},{"content":"Because friend_signed_A specifies friend_signed_B as a friend assembly, the code in friend_signed_B can access <ph id=\"ph1\">`Friend`</ph> types and members from friend_signed_A.","pos":[3031,3190],"source":" Because friend_signed_A specifies friend_signed_B as a friend assembly, the code in friend_signed_B can access `Friend` types and members from friend_signed_A."},{"content":"The file contains the following code.","pos":[3191,3228]},{"content":"Compile and sign friend_signed_B by using the following command.","pos":[3543,3607]},{"content":"The name of the assembly generated by the compiler must match the friend assembly name passed to the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute.","pos":[3725,3903],"source":"The name of the assembly generated by the compiler must match the friend assembly name passed to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute."},{"content":"You can explicitly set the assembly by using the <ph id=\"ph1\">`/out`</ph> compiler option.","pos":[3904,3976],"source":" You can explicitly set the assembly by using the `/out` compiler option."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/out (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/reference/command-line-compiler/out.md)</ept>.","pos":[3977,4090],"source":" For more information, see [/out (Visual Basic)](../../../../visual-basic/reference/command-line-compiler/out.md)."},{"content":"Run the friend_signed_B.exe file.","pos":[4100,4133]},{"content":"The program prints the string \"Class1.Test\".","pos":[4144,4188]},{"pos":[4197,4220],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"There are similarities between the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute and the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt;</ph> class.","pos":[4224,4414],"source":"There are similarities between the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute and the <xref:System.Security.Permissions.StrongNameIdentityPermission> class."},{"content":"The main difference is that <ph id=\"ph1\">&lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt;</ph> can demand security permissions to run a particular section of code, whereas the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute controls the visibility of <ph id=\"ph3\">`Friend`</ph> types and members.","pos":[4415,4719],"source":" The main difference is that <xref:System.Security.Permissions.StrongNameIdentityPermission> can demand security permissions to run a particular section of code, whereas the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute controls the visibility of `Friend` types and members."},{"pos":[4728,4736],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Assemblies and the Global Assembly Cache (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4810,4946],"source":" [Assemblies and the Global Assembly Cache (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Friend Assemblies (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/assemblies-gac/friend-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[4949,5074],"source":" [Friend Assemblies (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/friend-assemblies.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Create Unsigned Friend Assemblies (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-unsigned-friend-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[5077,5249],"source":" [How to: Create Unsigned Friend Assemblies (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-unsigned-friend-assemblies.md) "},{"content":"<bpt id=\"p1\"> [</bpt>/keyfile<ept id=\"p1\">](../../../../visual-basic/reference/command-line-compiler/keyfile.md)</ept><ph id=\"ph1\"> </ph>","pos":[5252,5333],"source":" [/keyfile](../../../../visual-basic/reference/command-line-compiler/keyfile.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Sn.exe (Strong Name Tool)<ept id=\"p1\">](https://msdn.microsoft.com/library/k5b5tt23)</ept><ph id=\"ph1\"> </ph>","pos":[5336,5410],"source":" [Sn.exe (Strong Name Tool)](https://msdn.microsoft.com/library/k5b5tt23) "},{"content":"<bpt id=\"p1\"> [</bpt>Creating and Using Strong-Named Assemblies<ept id=\"p1\">](https://msdn.microsoft.com/library/xwb8f617)</ept><ph id=\"ph1\"> </ph>","pos":[5413,5504],"source":" [Creating and Using Strong-Named Assemblies](https://msdn.microsoft.com/library/xwb8f617) "},{"content":"<bpt id=\"p1\"> [</bpt>Programming Concepts<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/index.md)</ept>","pos":[5507,5592],"source":" [Programming Concepts](../../../../visual-basic/programming-guide/concepts/index.md)"}]}