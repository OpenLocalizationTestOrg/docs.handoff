{"content":"---\ntitle: \"Connection Events | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 5a29de74-acfc-4134-8616-829dd7ce0710\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Connection Events\nAll of the .NET Framework data providers have **Connection** objects with two events that you can use to retrieve informational messages from a data source or to determine if the state of a **Connection** has changed. The following table describes the events of the **Connection** object.  \n  \n|Event|Description|  \n|-----------|-----------------|  \n|**InfoMessage**|Occurs when an informational message is returned from a data source. Informational messages are messages from a data source that do not result in an exception being thrown.|  \n|**StateChange**|Occurs when the state of the **Connection** changes.|  \n  \n## Working with the InfoMessage Event  \n You can retrieve warnings and informational messages from a SQL Server data source using the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event of the <xref:System.Data.SqlClient.SqlConnection> object. Errors returned from the data source with a severity level of 11 through 16 cause an exception to be thrown. However, the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event can be used to obtain messages from the data source that are not associated with an error. In the case of Microsoft SQL Server, any error with a severity of 10 or less is considered to be an informational message, and can be captured by using the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event. For more information, see the \"Error Message Severity Levels\" topic in SQL Server Books Online.  \n  \n The <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event receives an <xref:System.Data.SqlClient.SqlInfoMessageEventArgs> object containing, in its **Errors** property, a collection of the messages from the data source. You can query the **Error** objects in this collection for the error number and message text, as well as the source of the error. The .NET Framework Data Provider for SQL Server also includes detail about the database, stored procedure, and line number that the message came from.  \n  \n### Example  \n The following code example shows how to add an event handler for the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.  \n  \n```vb  \n' Assumes that connection represents a SqlConnection object.  \n  AddHandler connection.InfoMessage, _  \n    New SqlInfoMessageEventHandler(AddressOf OnInfoMessage)  \n  \nPrivate Shared Sub OnInfoMessage(sender As Object, _  \n  args As SqlInfoMessageEventArgs)  \n  Dim err As SqlError  \n  For Each err In args.Errors  \n    Console.WriteLine(\"The {0} has received a severity {1}, _  \n       state {2} error number {3}\\n\" & _  \n      \"on line {4} of procedure {5} on server {6}:\\n{7}\", _  \n      err.Source, err.Class, err.State, err.Number, err.LineNumber, _  \n    err.Procedure, err.Server, err.Message)  \n  Next  \nEnd Sub  \n  \n```  \n  \n```csharp  \n// Assumes that connection represents a SqlConnection object.  \n  connection.InfoMessage +=   \n    new SqlInfoMessageEventHandler(OnInfoMessage);  \n  \nprotected static void OnInfoMessage(  \n  object sender, SqlInfoMessageEventArgs args)  \n{  \n  foreach (SqlError err in args.Errors)  \n  {  \n    Console.WriteLine(  \n  \"The {0} has received a severity {1}, state {2} error number {3}\\n\" +  \n  \"on line {4} of procedure {5} on server {6}:\\n{7}\",  \n   err.Source, err.Class, err.State, err.Number, err.LineNumber,   \n   err.Procedure, err.Server, err.Message);  \n  }  \n}  \n  \n```  \n  \n## Handling Errors as InfoMessages  \n The <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event will normally fire only for informational and warning messages that are sent from the server. However, when an actual error occurs, the execution of the **ExecuteNonQuery** or **ExecuteReader** method that initiated the server operation is halted and an exception is thrown.  \n  \n If you want to continue processing the rest of the statements in a command regardless of any errors produced by the server, set the <xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A> property of the <xref:System.Data.SqlClient.SqlConnection> to `true`. Doing this causes the connection to fire the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event for errors instead of throwing an exception and interrupting processing. The client application can then handle this event and respond to error conditions.  \n  \n> [!NOTE]\n>  An error with a severity level of 17 or above that causes the server to stop processing the command must be handled as an exception. In this case, an exception is thrown regardless of how the error is handled in the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.  \n  \n## Working with the StateChange Event  \n The **StateChange** event occurs when the state of a **Connection** changes. The **StateChange** event receives <xref:System.Data.StateChangeEventArgs> that enable you to determine the change in state of the **Connection** by using the **OriginalState** and **CurrentState** properties. The **OriginalState** property is a <xref:System.Data.ConnectionState> enumeration that indicates the state of the **Connection** before it changed. **CurrentState** is a <xref:System.Data.ConnectionState> enumeration that indicates the state of the **Connection** after it changed.  \n  \n The following code example uses the **StateChange** event to write a message to the console when the state of the **Connection** changes.  \n  \n```vb  \n' Assumes connection represents a SqlConnection object.  \n  AddHandler connection.StateChange, _  \n    New StateChangeEventHandler(AddressOf OnStateChange)  \n  \nProtected Shared Sub OnStateChange( _  \n  sender As Object, args As StateChangeEventArgs)  \n  \n  Console.WriteLine( _  \n  \"The current Connection state has changed from {0} to {1}.\", _  \n  args.OriginalState, args.CurrentState)  \nEnd Sub  \n  \n```  \n  \n```csharp  \n// Assumes connection represents a SqlConnection object.  \n  connection.StateChange  += new StateChangeEventHandler(OnStateChange);  \n  \nprotected static void OnStateChange(object sender,   \n  StateChangeEventArgs args)  \n{  \n  Console.WriteLine(  \n    \"The current Connection state has changed from {0} to {1}.\",  \n      args.OriginalState, args.CurrentState);  \n}  \n```  \n  \n## See Also  \n [Connecting to a Data Source](../../../../docs/framework/data/adonet/connecting-to-a-data-source.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[12,46],"content":"Connection Events | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Connection Events | Microsoft Docs","pos":[0,34]}]},{"pos":[355,372],"content":"Connection Events","linkify":"Connection Events","nodes":[{"content":"Connection Events","pos":[0,17]}]},{"content":"All of the .NET Framework data providers have <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> objects with two events that you can use to retrieve informational messages from a data source or to determine if the state of a <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> has changed.","pos":[373,590],"source":"All of the .NET Framework data providers have **Connection** objects with two events that you can use to retrieve informational messages from a data source or to determine if the state of a **Connection** has changed."},{"content":"The following table describes the events of the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> object.","pos":[591,661],"source":" The following table describes the events of the **Connection** object."},{"content":"Event","pos":[668,673]},{"content":"Description","pos":[674,685]},{"pos":[724,739],"content":"<bpt id=\"p1\">**</bpt>InfoMessage<ept id=\"p1\">**</ept>","source":"**InfoMessage**"},{"content":"Occurs when an informational message is returned from a data source.","pos":[740,808]},{"content":"Informational messages are messages from a data source that do not result in an exception being thrown.","pos":[809,912]},{"pos":[917,932],"content":"<bpt id=\"p1\">**</bpt>StateChange<ept id=\"p1\">**</ept>","source":"**StateChange**"},{"pos":[933,985],"content":"Occurs when the state of the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> changes.","source":"Occurs when the state of the **Connection** changes."},{"pos":[995,1029],"content":"Working with the InfoMessage Event","linkify":"Working with the InfoMessage Event","nodes":[{"content":"Working with the InfoMessage Event","pos":[0,34]}]},{"content":"You can retrieve warnings and informational messages from a SQL Server data source using the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event of the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object.","pos":[1033,1244],"source":"You can retrieve warnings and informational messages from a SQL Server data source using the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event of the <xref:System.Data.SqlClient.SqlConnection> object."},{"content":"Errors returned from the data source with a severity level of 11 through 16 cause an exception to be thrown.","pos":[1245,1353]},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event can be used to obtain messages from the data source that are not associated with an error.","pos":[1354,1518],"source":" However, the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event can be used to obtain messages from the data source that are not associated with an error."},{"content":"In the case of Microsoft SQL Server, any error with a severity of 10 or less is considered to be an informational message, and can be captured by using the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event.","pos":[1519,1736],"source":" In the case of Microsoft SQL Server, any error with a severity of 10 or less is considered to be an informational message, and can be captured by using the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event."},{"content":"For more information, see the \"Error Message Severity Levels\" topic in SQL Server Books Online.","pos":[1737,1832]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event receives an <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlInfoMessageEventArgs&gt;</ph> object containing, in its <bpt id=\"p1\">**</bpt>Errors<ept id=\"p1\">**</ept> property, a collection of the messages from the data source.","pos":[1839,2066],"source":"The <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event receives an <xref:System.Data.SqlClient.SqlInfoMessageEventArgs> object containing, in its **Errors** property, a collection of the messages from the data source."},{"content":"You can query the <bpt id=\"p1\">**</bpt>Error<ept id=\"p1\">**</ept> objects in this collection for the error number and message text, as well as the source of the error.","pos":[2067,2196],"source":" You can query the **Error** objects in this collection for the error number and message text, as well as the source of the error."},{"content":"The .NET Framework Data Provider for SQL Server also includes detail about the database, stored procedure, and line number that the message came from.","pos":[2197,2347]},{"pos":[2357,2364],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example shows how to add an event handler for the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event.","pos":[2368,2498],"source":"The following code example shows how to add an event handler for the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event."},{"pos":[3744,3775],"content":"Handling Errors as InfoMessages","linkify":"Handling Errors as InfoMessages","nodes":[{"content":"Handling Errors as InfoMessages","pos":[0,31]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event will normally fire only for informational and warning messages that are sent from the server.","pos":[3779,3937],"source":"The <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event will normally fire only for informational and warning messages that are sent from the server."},{"content":"However, when an actual error occurs, the execution of the <bpt id=\"p1\">**</bpt>ExecuteNonQuery<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ExecuteReader<ept id=\"p2\">**</ept> method that initiated the server operation is halted and an exception is thrown.","pos":[3938,4118],"source":" However, when an actual error occurs, the execution of the **ExecuteNonQuery** or **ExecuteReader** method that initiated the server operation is halted and an exception is thrown."},{"content":"If you want to continue processing the rest of the statements in a command regardless of any errors produced by the server, set the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> to <ph id=\"ph3\">`true`</ph>.","pos":[4125,4405],"source":"If you want to continue processing the rest of the statements in a command regardless of any errors produced by the server, set the <xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A> property of the <xref:System.Data.SqlClient.SqlConnection> to `true`."},{"content":"Doing this causes the connection to fire the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event for errors instead of throwing an exception and interrupting processing.","pos":[4406,4584],"source":" Doing this causes the connection to fire the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event for errors instead of throwing an exception and interrupting processing."},{"content":"The client application can then handle this event and respond to error conditions.","pos":[4585,4667]},{"pos":[4675,4963],"content":"[!NOTE]\n An error with a severity level of 17 or above that causes the server to stop processing the command must be handled as an exception. In this case, an exception is thrown regardless of how the error is handled in the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.","leadings":["","> "],"nodes":[{"content":" An error with a severity level of 17 or above that causes the server to stop processing the command must be handled as an exception. In this case, an exception is thrown regardless of how the error is handled in the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.","pos":[8,286],"nodes":[{"content":"An error with a severity level of 17 or above that causes the server to stop processing the command must be handled as an exception.","pos":[1,133]},{"content":"In this case, an exception is thrown regardless of how the error is handled in the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event.","pos":[134,278],"source":" In this case, an exception is thrown regardless of how the error is handled in the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event."}]}]},{"pos":[4972,5006],"content":"Working with the StateChange Event","linkify":"Working with the StateChange Event","nodes":[{"content":"Working with the StateChange Event","pos":[0,34]}]},{"content":"The <bpt id=\"p1\">**</bpt>StateChange<ept id=\"p1\">**</ept> event occurs when the state of a <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> changes.","pos":[5010,5086],"source":"The **StateChange** event occurs when the state of a **Connection** changes."},{"content":"The <bpt id=\"p1\">**</bpt>StateChange<ept id=\"p1\">**</ept> event receives <ph id=\"ph1\">&lt;xref:System.Data.StateChangeEventArgs&gt;</ph> that enable you to determine the change in state of the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> by using the <bpt id=\"p3\">**</bpt>OriginalState<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>CurrentState<ept id=\"p4\">**</ept> properties.","pos":[5087,5296],"source":" The **StateChange** event receives <xref:System.Data.StateChangeEventArgs> that enable you to determine the change in state of the **Connection** by using the **OriginalState** and **CurrentState** properties."},{"content":"The <bpt id=\"p1\">**</bpt>OriginalState<ept id=\"p1\">**</ept> property is a <ph id=\"ph1\">&lt;xref:System.Data.ConnectionState&gt;</ph> enumeration that indicates the state of the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> before it changed.","pos":[5297,5445],"source":" The **OriginalState** property is a <xref:System.Data.ConnectionState> enumeration that indicates the state of the **Connection** before it changed."},{"content":"<bpt id=\"p1\">**</bpt>CurrentState<ept id=\"p1\">**</ept> is a <ph id=\"ph1\">&lt;xref:System.Data.ConnectionState&gt;</ph> enumeration that indicates the state of the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> after it changed.","pos":[5446,5579],"source":"**CurrentState** is a <xref:System.Data.ConnectionState> enumeration that indicates the state of the **Connection** after it changed."},{"pos":[5586,5723],"content":"The following code example uses the <bpt id=\"p1\">**</bpt>StateChange<ept id=\"p1\">**</ept> event to write a message to the console when the state of the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> changes.","source":"The following code example uses the **StateChange** event to write a message to the console when the state of the **Connection** changes."},{"pos":[6542,6550],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Connecting to a Data Source<ept id=\"p1\">](../../../../docs/framework/data/adonet/connecting-to-a-data-source.md)</ept><ph id=\"ph1\"> </ph>","pos":[6554,6655],"source":"[Connecting to a Data Source](../../../../docs/framework/data/adonet/connecting-to-a-data-source.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[6658,6762],"source":" [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}