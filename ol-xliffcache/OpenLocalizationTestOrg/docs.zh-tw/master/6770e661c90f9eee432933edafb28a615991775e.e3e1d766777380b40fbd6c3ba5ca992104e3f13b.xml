{"content":"---\ntitle: \"How to: Modify an Office Open XML Document (C#)\"\nms.date: 07/20/2015\nms.assetid: 467d489c-2b1b-453b-a757-8ac180e82a96\n---\n# How to: Modify an Office Open XML Document (C#)\nThis topic presents an example that opens an Office Open XML document, modifies it, and saves it.  \n  \n For more information on Office Open XML, see [Open XML SDK](https://github.com/OfficeDev/Open-XML-SDK) and [www.ericwhite.com](http://ericwhite.com/).  \n  \n## Example  \n This example finds the first paragraph element in the document. It retrieves the text from the paragraph, and then deletes all text runs in the paragraph. It creates a new text run that consists of the first paragraph text that has been converted to upper case. It then serializes the changed XML into the Open XML package and closes it.  \n  \n This example uses classes found in the WindowsBase assembly. It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace.  \n  \n```csharp  \npublic static class LocalExtensions  \n{  \n    public static string StringConcatenate(this IEnumerable<string> source)  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        foreach (string s in source)  \n            sb.Append(s);  \n        return sb.ToString();  \n    }  \n  \n    public static string StringConcatenate<T>(this IEnumerable<T> source,  \n        Func<T, string> func)  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        foreach (T item in source)  \n            sb.Append(func(item));  \n        return sb.ToString();  \n    }  \n  \n    public static string StringConcatenate(this IEnumerable<string> source, string separator)  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        foreach (string s in source)  \n            sb.Append(s).Append(separator);  \n        return sb.ToString();  \n    }  \n  \n    public static string StringConcatenate<T>(this IEnumerable<T> source,  \n        Func<T, string> func, string separator)  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        foreach (T item in source)  \n            sb.Append(func(item)).Append(separator);  \n        return sb.ToString();  \n    }  \n}  \n  \nclass Program  \n{  \n    public static string ParagraphText(XElement e)  \n    {  \n        XNamespace w = e.Name.Namespace;  \n        return e  \n               .Elements(w + \"r\")  \n               .Elements(w + \"t\")  \n               .StringConcatenate(element => (string)element);  \n    }  \n  \n    static void Main(string[] args)  \n    {  \n        const string fileName = \"SampleDoc.docx\";  \n  \n        const string documentRelationshipType =  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\";  \n        const string stylesRelationshipType =  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\";  \n        const string wordmlNamespace =  \n          \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\";  \n        XNamespace w = wordmlNamespace;  \n  \n        using (Package wdPackage = Package.Open(fileName, FileMode.Open, FileAccess.ReadWrite))  \n        {  \n            PackageRelationship docPackageRelationship =  \n              wdPackage.GetRelationshipsByType(documentRelationshipType).FirstOrDefault();  \n            if (docPackageRelationship != null)  \n            {  \n                Uri documentUri = PackUriHelper.ResolvePartUri(new Uri(\"/\", UriKind.Relative),  \n                  docPackageRelationship.TargetUri);  \n                PackagePart documentPart = wdPackage.GetPart(documentUri);  \n  \n                //  Load the document XML in the part into an XDocument instance.  \n                XDocument xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()));  \n  \n                //  Find the styles part. There will only be one.  \n                PackageRelationship styleRelation =  \n                  documentPart.GetRelationshipsByType(stylesRelationshipType).FirstOrDefault();  \n                PackagePart stylePart = null;  \n                XDocument styleDoc = null;  \n  \n                if (styleRelation != null)  \n                {  \n                    Uri styleUri = PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri);  \n                    stylePart = wdPackage.GetPart(styleUri);  \n  \n                    //  Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()));  \n                }  \n  \n                XElement paraNode = xDoc  \n                                    .Root  \n                                    .Element(w + \"body\")  \n                                    .Descendants(w + \"p\")  \n                                    .FirstOrDefault();  \n  \n                string paraText = ParagraphText(paraNode);  \n  \n                // remove all text runs  \n                paraNode.Descendants(w + \"r\").Remove();  \n  \n                paraNode.Add(  \n                    new XElement(w + \"r\",  \n                        new XElement(w + \"t\", paraText.ToUpper())  \n                    )  \n                );  \n  \n                //  Save the XML into the package  \n                using (XmlWriter xw =  \n                  XmlWriter.Create(documentPart.GetStream(FileMode.Create, FileAccess.Write)))  \n                {  \n                    xDoc.Save(xw);  \n                }  \n  \n                Console.WriteLine(\"New first paragraph: >{0}<\", paraText.ToUpper());  \n            }  \n        }  \n    }  \n}  \n```  \n  \n If you open `SampleDoc.docx` after running this program, you can see that this program converted the first paragraph in the document to upper case.  \n  \n When run with the sample Open XML document described in [Creating the Source Office Open XML Document (C#)](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md), this example produces the following output:  \n  \n```  \nNew first paragraph: >PARSING WORDPROCESSINGML WITH LINQ TO XML<  \n```  \n  \n## See also\n\n- [Advanced Query Techniques (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)\n","nodes":[{"pos":[4,129],"embed":true,"restype":"x-metadata","content":"title: \"How to: Modify an Office Open XML Document (C#)\"\nms.date: 07/20/2015\nms.assetid: 467d489c-2b1b-453b-a757-8ac180e82a96","nodes":[{"content":"How to: Modify an Office Open XML Document (C#)","nodes":[{"pos":[0,47],"content":"How to: Modify an Office Open XML Document (C#)","nodes":[{"content":"How to: Modify an Office Open XML Document (C#)","pos":[0,47]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[136,183],"content":"How to: Modify an Office Open XML Document (C#)","linkify":"How to: Modify an Office Open XML Document (C#)","nodes":[{"content":"How to: Modify an Office Open XML Document (C#)","pos":[0,47]}]},{"content":"This topic presents an example that opens an Office Open XML document, modifies it, and saves it.","pos":[184,281]},{"pos":[288,438],"content":"For more information on Office Open XML, see <bpt id=\"p1\">[</bpt>Open XML SDK<ept id=\"p1\">](https://github.com/OfficeDev/Open-XML-SDK)</ept> and <bpt id=\"p2\">[</bpt>www.ericwhite.com<ept id=\"p2\">](http://ericwhite.com/)</ept>.","source":"For more information on Office Open XML, see [Open XML SDK](https://github.com/OfficeDev/Open-XML-SDK) and [www.ericwhite.com](http://ericwhite.com/)."},{"pos":[447,454],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example finds the first paragraph element in the document.","pos":[458,521]},{"content":"It retrieves the text from the paragraph, and then deletes all text runs in the paragraph.","pos":[522,612]},{"content":"It creates a new text run that consists of the first paragraph text that has been converted to upper case.","pos":[613,719]},{"content":"It then serializes the changed XML into the Open XML package and closes it.","pos":[720,795]},{"content":"This example uses classes found in the WindowsBase assembly.","pos":[802,862]},{"content":"It uses types in the <ph id=\"ph1\">&lt;xref:System.IO.Packaging?displayProperty=nameWithType&gt;</ph> namespace.","pos":[863,950],"source":" It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace."},{"pos":[5507,5654],"content":"If you open <ph id=\"ph1\">`SampleDoc.docx`</ph> after running this program, you can see that this program converted the first paragraph in the document to upper case.","source":"If you open `SampleDoc.docx` after running this program, you can see that this program converted the first paragraph in the document to upper case."},{"pos":[5661,5913],"content":"When run with the sample Open XML document described in <bpt id=\"p1\">[</bpt>Creating the Source Office Open XML Document (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>, this example produces the following output:","source":"When run with the sample Open XML document described in [Creating the Source Office Open XML Document (C#)](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md), this example produces the following output:"},{"pos":[6004,6012],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6016,6155],"content":"<bpt id=\"p1\">[</bpt>Advanced Query Techniques (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)</ept>","source":"[Advanced Query Techniques (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)"}]}