<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="creating-a-datatable-from-a-query-linq-to-dataset.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f750f2d23430691016fc2cf1e5e9d44d80da2a9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\creating-a-datatable-from-a-query-linq-to-dataset.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">180140fc742337de291b00dafa3928f32f20dec2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">079e4a7a1b02e78a0ef825dd2cfd6adf2a1fe1bf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Creating a DataTable From a Query (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating a DataTable From a Query (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Data binding is a common use of <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> method takes the results of a query and copies the data into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>, which can then be used for data binding.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When the data operations have been performed, the new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is merged back into the source <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> method uses the following process to create a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from a query:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> method clones a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from the source table (a <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph> object that implements the <ph id="ph4">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> source has generally originated from a <ph id="ph2">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> expression or method query.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The schema of the cloned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is built from the columns of the first enumerated <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> object in the source table and the name of the cloned table is the name of the source table with the word "query" appended to it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For each row in the source table, the content of the row is copied into a new <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> object, which is then inserted into the cloned table.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataRow.RowError%2A&gt;</ph> properties are preserved across the copy operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> is thrown if the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects in the source are from different tables.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The cloned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is returned after all <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects in the input queryable table have been copied.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the source sequence does not contain any <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> objects, the method returns an empty <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that calling the <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> method will cause the query bound to the source table to execute.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> method encounters either a null reference or nullable value type in a row in the source table, it replaces the value with <ph id="ph2">&lt;xref:System.DBNull.Value&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This way, null values are handled correctly in the returned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note: The <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> method accepts as input a query that can return rows from multiple <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> or <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> method will copy the data but not the properties from the source <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> or <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> objects to the returned <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You will need to explicitly set the properties on the returned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Data.DataTable.Locale%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example queries the SalesOrderHeader table for orders after August 8, 2001 and uses the <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from that query.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is then bound to a <ph id="ph2">&lt;xref:System.Windows.Forms.BindingSource&gt;</ph>, which acts as proxy for a <ph id="ph3">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creating a Custom CopyToDataTable<ph id="ph1">\&lt;</ph>T&gt; Method</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The existing <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;</ph> methods only operate on an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> source where the generic parameter <ph id="ph3">`T`</ph> is of type <ph id="ph4">&lt;xref:System.Data.DataRow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Although this is useful, it does not allow tables to be created from a sequence of scalar types, from queries that return anonymous types, or from queries that perform table joins.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For an example of how to implement two custom <ph id="ph1">`CopyToDataTable`</ph> methods that load a table from a sequence of scalar or anonymous types, see <bpt id="p1">[</bpt>How to: Implement CopyToDataTable<ph id="ph2">\&lt;</ph>T&gt; Where the Generic Type T Is Not a DataRow<ept id="p1">](../../../../docs/framework/data/adonet/implement-copytodatatable-where-type-not-a-datarow.md)</ept>s.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The examples in this section use the following custom types:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This example performs a join over the <ph id="ph1">`SalesOrderHeader`</ph> and <ph id="ph2">`SalesOrderDetail`</ph> tables to get online orders from the month of August and creates a table from the query.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example queries a collection for items of price greater than $9.99 and creates a table from the query results.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example queries a collection for items of price greater than 9.99 and projects the results.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The returned sequence of anonymous types is loaded into an existing table.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example queries a collection for items of price greater than $9.99 and projects the results.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The returned sequence of anonymous types is loaded into an existing table.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The table schema is automatically expanded because the <ph id="ph1">`Book`</ph> and <ph id="ph2">`Movies`</ph> types are derived from the <ph id="ph3">`Item`</ph> type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example queries a collection for items of price greater than $9.99 and returns a sequence of <ph id="ph1">&lt;xref:System.Double&gt;</ph>, which is loaded into a new table.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming Guide<ept id="p1">](../../../../docs/framework/data/adonet/programming-guide-linq-to-dataset.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Field and SetField Methods<ept id="p1">](../../../../docs/framework/data/adonet/generic-field-and-setfield-methods-linq-to-dataset.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to DataSet Examples<ept id="p1">](../../../../docs/framework/data/adonet/linq-to-dataset-examples.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>