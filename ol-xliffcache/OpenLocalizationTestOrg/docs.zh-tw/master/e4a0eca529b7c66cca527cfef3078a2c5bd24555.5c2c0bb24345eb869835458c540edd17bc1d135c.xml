{"content":"---\ntitle: \"Implicit Numeric Conversions Table (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"conversions [C#], implicit numeric\"\n  - \"implicit numeric conversions [C#]\"\n  - \"numeric conversions [C#], implicit\"\n  - \"types [C#], implicit numeric conversions\"\nms.assetid: 72eb5a94-0491-48bf-8032-d7ebfdfeb8d8\ncaps.latest.revision: 12\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Implicit Numeric Conversions Table (C# Reference)\nThe following table shows the predefined implicit numeric conversions. Implicit conversions might occur in many situations, including method invoking and assignment statements.  \n  \n|From|To|  \n|----------|--------|  \n|[sbyte](../../../csharp/language-reference/keywords/sbyte.md)|`short`, `int`, `long`, `float`, `double`, or `decimal`|  \n|[byte](../../../csharp/language-reference/keywords/byte.md)|`short`, `ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`|  \n|[short](../../../csharp/language-reference/keywords/short.md)|`int`, `long`, `float`, `double`, or `decimal`|  \n|[ushort](../../../csharp/language-reference/keywords/ushort.md)|`int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`|  \n|[int](../../../csharp/language-reference/keywords/int.md)|`long`, `float`, `double`, or `decimal`|  \n|[uint](../../../csharp/language-reference/keywords/uint.md)|`long`, `ulong`, `float`, `double`, or `decimal`|  \n|[long](../../../csharp/language-reference/keywords/long.md)|`float`, `double`, or `decimal`|  \n|[char](../../../csharp/language-reference/keywords/char.md)|`ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`|  \n|[float](../../../csharp/language-reference/keywords/float.md)|`double`|  \n|[ulong](../../../csharp/language-reference/keywords/ulong.md)|`float`, `double`, or `decimal`|  \n  \n## Remarks  \n  \n-   Precision but not magnitude might be lost in the conversions from `int`, `uint`,  `long`, or `ulong` to `float` and from `long` or `ulong` to `double`.  \n  \n-   There are no implicit conversions to the `char` type.  \n  \n-   There are no implicit conversions between floating-point types and the `decimal` type.  \n  \n-   A constant expression of type `int` can be converted to `sbyte`, `byte`, `short`, `ushort`, `uint`, or `ulong`, provided the value of the constant expression is within the range of the destination type.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)   \n [Casting and Type Conversions](../../../csharp/programming-guide/types/casting-and-type-conversions.md)","nodes":[{"pos":[4,685],"nodes":[{"content":"Implicit Numeric Conversions Table (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,66],"content":"Implicit Numeric Conversions Table (C# Reference) | Microsoft Docs","nodes":[{"content":"Implicit Numeric Conversions Table (C# Reference) | Microsoft Docs","pos":[0,66]}]}],"pos":[6,75],"yaml":true}],"content":"title: \"Implicit Numeric Conversions Table (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"conversions [C#], implicit numeric\"\n  - \"implicit numeric conversions [C#]\"\n  - \"numeric conversions [C#], implicit\"\n  - \"types [C#], implicit numeric conversions\"\nms.assetid: 72eb5a94-0491-48bf-8032-d7ebfdfeb8d8\ncaps.latest.revision: 12\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[692,741],"content":"Implicit Numeric Conversions Table (C# Reference)","linkify":"Implicit Numeric Conversions Table (C# Reference)","nodes":[{"content":"Implicit Numeric Conversions Table (C# Reference)","pos":[0,49]}]},{"content":"The following table shows the predefined implicit numeric conversions.","pos":[742,812]},{"content":"Implicit conversions might occur in many situations, including method invoking and assignment statements.","pos":[813,918]},{"content":"From","pos":[925,929]},{"content":"To","pos":[930,932]},{"pos":[961,1022],"content":"<bpt id=\"p1\">[</bpt>sbyte<ept id=\"p1\">](../../../csharp/language-reference/keywords/sbyte.md)</ept>","source":"[sbyte](../../../csharp/language-reference/keywords/sbyte.md)"},{"pos":[1023,1078],"content":"<ph id=\"ph1\">`short`</ph>, <ph id=\"ph2\">`int`</ph>, <ph id=\"ph3\">`long`</ph>, <ph id=\"ph4\">`float`</ph>, <ph id=\"ph5\">`double`</ph>, or <ph id=\"ph6\">`decimal`</ph>","source":"`short`, `int`, `long`, `float`, `double`, or `decimal`"},{"pos":[1083,1142],"content":"<bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](../../../csharp/language-reference/keywords/byte.md)</ept>","source":"[byte](../../../csharp/language-reference/keywords/byte.md)"},{"pos":[1143,1225],"content":"<ph id=\"ph1\">`short`</ph>, <ph id=\"ph2\">`ushort`</ph>, <ph id=\"ph3\">`int`</ph>, <ph id=\"ph4\">`uint`</ph>, <ph id=\"ph5\">`long`</ph>, <ph id=\"ph6\">`ulong`</ph>, <ph id=\"ph7\">`float`</ph>, <ph id=\"ph8\">`double`</ph>, or <ph id=\"ph9\">`decimal`</ph>","source":"`short`, `ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`"},{"pos":[1230,1291],"content":"<bpt id=\"p1\">[</bpt>short<ept id=\"p1\">](../../../csharp/language-reference/keywords/short.md)</ept>","source":"[short](../../../csharp/language-reference/keywords/short.md)"},{"pos":[1292,1338],"content":"<ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`long`</ph>, <ph id=\"ph3\">`float`</ph>, <ph id=\"ph4\">`double`</ph>, or <ph id=\"ph5\">`decimal`</ph>","source":"`int`, `long`, `float`, `double`, or `decimal`"},{"pos":[1343,1406],"content":"<bpt id=\"p1\">[</bpt>ushort<ept id=\"p1\">](../../../csharp/language-reference/keywords/ushort.md)</ept>","source":"[ushort](../../../csharp/language-reference/keywords/ushort.md)"},{"pos":[1407,1470],"content":"<ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`uint`</ph>, <ph id=\"ph3\">`long`</ph>, <ph id=\"ph4\">`ulong`</ph>, <ph id=\"ph5\">`float`</ph>, <ph id=\"ph6\">`double`</ph>, or <ph id=\"ph7\">`decimal`</ph>","source":"`int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`"},{"pos":[1475,1532],"content":"<bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>","source":"[int](../../../csharp/language-reference/keywords/int.md)"},{"pos":[1533,1572],"content":"<ph id=\"ph1\">`long`</ph>, <ph id=\"ph2\">`float`</ph>, <ph id=\"ph3\">`double`</ph>, or <ph id=\"ph4\">`decimal`</ph>","source":"`long`, `float`, `double`, or `decimal`"},{"pos":[1577,1636],"content":"<bpt id=\"p1\">[</bpt>uint<ept id=\"p1\">](../../../csharp/language-reference/keywords/uint.md)</ept>","source":"[uint](../../../csharp/language-reference/keywords/uint.md)"},{"pos":[1637,1685],"content":"<ph id=\"ph1\">`long`</ph>, <ph id=\"ph2\">`ulong`</ph>, <ph id=\"ph3\">`float`</ph>, <ph id=\"ph4\">`double`</ph>, or <ph id=\"ph5\">`decimal`</ph>","source":"`long`, `ulong`, `float`, `double`, or `decimal`"},{"pos":[1690,1749],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept>","source":"[long](../../../csharp/language-reference/keywords/long.md)"},{"pos":[1750,1781],"content":"<ph id=\"ph1\">`float`</ph>, <ph id=\"ph2\">`double`</ph>, or <ph id=\"ph3\">`decimal`</ph>","source":"`float`, `double`, or `decimal`"},{"pos":[1786,1845],"content":"<bpt id=\"p1\">[</bpt>char<ept id=\"p1\">](../../../csharp/language-reference/keywords/char.md)</ept>","source":"[char](../../../csharp/language-reference/keywords/char.md)"},{"pos":[1846,1919],"content":"<ph id=\"ph1\">`ushort`</ph>, <ph id=\"ph2\">`int`</ph>, <ph id=\"ph3\">`uint`</ph>, <ph id=\"ph4\">`long`</ph>, <ph id=\"ph5\">`ulong`</ph>, <ph id=\"ph6\">`float`</ph>, <ph id=\"ph7\">`double`</ph>, or <ph id=\"ph8\">`decimal`</ph>","source":"`ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`, or `decimal`"},{"pos":[1924,1985],"content":"<bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept>","source":"[float](../../../csharp/language-reference/keywords/float.md)"},{"pos":[1999,2060],"content":"<bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](../../../csharp/language-reference/keywords/ulong.md)</ept>","source":"[ulong](../../../csharp/language-reference/keywords/ulong.md)"},{"pos":[2061,2092],"content":"<ph id=\"ph1\">`float`</ph>, <ph id=\"ph2\">`double`</ph>, or <ph id=\"ph3\">`decimal`</ph>","source":"`float`, `double`, or `decimal`"},{"pos":[2102,2109],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2119,2270],"content":"Precision but not magnitude might be lost in the conversions from <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`uint`</ph>,  <ph id=\"ph3\">`long`</ph>, or <ph id=\"ph4\">`ulong`</ph> to <ph id=\"ph5\">`float`</ph> and from <ph id=\"ph6\">`long`</ph> or <ph id=\"ph7\">`ulong`</ph> to <ph id=\"ph8\">`double`</ph>.","source":"Precision but not magnitude might be lost in the conversions from `int`, `uint`,  `long`, or `ulong` to `float` and from `long` or `ulong` to `double`."},{"pos":[2280,2333],"content":"There are no implicit conversions to the <ph id=\"ph1\">`char`</ph> type.","source":"There are no implicit conversions to the `char` type."},{"pos":[2343,2429],"content":"There are no implicit conversions between floating-point types and the <ph id=\"ph1\">`decimal`</ph> type.","source":"There are no implicit conversions between floating-point types and the `decimal` type."},{"pos":[2439,2641],"content":"A constant expression of type <ph id=\"ph1\">`int`</ph> can be converted to <ph id=\"ph2\">`sbyte`</ph>, <ph id=\"ph3\">`byte`</ph>, <ph id=\"ph4\">`short`</ph>, <ph id=\"ph5\">`ushort`</ph>, <ph id=\"ph6\">`uint`</ph>, or <ph id=\"ph7\">`ulong`</ph>, provided the value of the constant expression is within the range of the destination type.","source":"A constant expression of type `int` can be converted to `sbyte`, `byte`, `short`, `ushort`, `uint`, or `ulong`, provided the value of the constant expression is within the range of the destination type."},{"pos":[2650,2675],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2789,2797],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2801,2861],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2865,2932],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[2936,3028],"source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3032,3124],"source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3128,3248],"source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Casting and Type Conversions<ept id=\"p1\">](../../../csharp/programming-guide/types/casting-and-type-conversions.md)</ept>","pos":[3252,3355],"source":"[Casting and Type Conversions](../../../csharp/programming-guide/types/casting-and-type-conversions.md)"}]}