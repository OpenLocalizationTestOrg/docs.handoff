{"content":"---\ntitle: \"Accessing Attributes by Using Reflection (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: c56e41da-5433-464f-a7bf-2a722e78bc9f\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Accessing Attributes by Using Reflection (Visual Basic)\nThe fact that you can define custom attributes and place them in your source code would be of little value without some way of retrieving that information and acting on it. By using reflection, you can retrieve the information that was defined with custom attributes. The key method is `GetCustomAttributes`, which returns an array of objects that are the run-time equivalents of the source code attributes. This method has several overloaded versions. For more information, see <xref:System.Attribute>.  \n  \n An attribute specification such as:  \n  \n```vb  \n<Author(\"P. Ackerman\", Version:=1.1)>   \nClass SampleClass  \n    ' P. Ackerman's code goes here...  \nEnd Class  \n```  \n  \n is conceptually equivalent to this:  \n  \n```vb  \nDim anonymousAuthorObject As Author = New Author(\"P. Ackerman\")  \nanonymousAuthorObject.version = 1.1  \n```  \n  \n However, the code is not executed until `SampleClass` is queried for attributes. Calling `GetCustomAttributes` on `SampleClass` causes an `Author` object to be constructed and initialized as above. If the class has other attributes, other attribute objects are constructed similarly. `GetCustomAttributes` then returns the `Author` object and any other attribute objects in an array. You can then iterate over this array, determine what attributes were applied based on the type of each array element, and extract information from the attribute objects.  \n  \n## Example  \n Here is a complete example. A custom attribute is defined, applied to several entities, and retrieved via reflection.  \n  \n```vb  \n' Multiuse attribute  \n<System.AttributeUsage(System.AttributeTargets.Class Or   \n                       System.AttributeTargets.Struct,   \n                       AllowMultiple:=True)>   \nPublic Class Author  \n    Inherits System.Attribute  \n    Private name As String  \n    Public version As Double  \n    Sub New(ByVal authorName As String)  \n        name = authorName  \n  \n        ' Default value  \n        version = 1.0  \n    End Sub  \n  \n    Function GetName() As String  \n        Return name  \n    End Function          \nEnd Class  \n  \n' Class with the Author attribute  \n<Author(\"P. Ackerman\")>   \nPublic Class FirstClass  \nEnd Class  \n  \n' Class without the Author attribute  \nPublic Class SecondClass  \nEnd Class  \n  \n' Class with multiple Author attributes.  \n<Author(\"P. Ackerman\"), Author(\"R. Koch\", Version:=2.0)>   \nPublic Class ThirdClass  \nEnd Class  \n  \nClass TestAuthorAttribute  \n    Sub Main()  \n        PrintAuthorInfo(GetType(FirstClass))  \n        PrintAuthorInfo(GetType(SecondClass))  \n        PrintAuthorInfo(GetType(ThirdClass))  \n    End Sub  \n  \n    Private Shared Sub PrintAuthorInfo(ByVal t As System.Type)  \n        System.Console.WriteLine(\"Author information for {0}\", t)  \n  \n        ' Using reflection  \n        Dim attrs() As System.Attribute = System.Attribute.GetCustomAttributes(t)  \n  \n        ' Displaying output  \n        For Each attr In attrs  \n            Dim a As Author = CType(attr, Author)  \n            System.Console.WriteLine(\"   {0}, version {1:f}\", a.GetName(), a.version)  \n        Next              \n    End Sub  \n  \n    ' Output:  \n    '   Author information for FirstClass  \n    '     P. Ackerman, version 1.00  \n    ' Author information for SecondClass  \n    ' Author information for ThirdClass  \n    '  R. Koch, version 2.00  \n    '  P. Ackerman, version 1.00  \n  \nEnd Class  \n```  \n  \n## See Also  \n <xref:System.Reflection>   \n <xref:System.Attribute>   \n [Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md)   \n [Retrieving Information Stored in Attributes](../../../../standard/attributes/retrieving-information-stored-in-attributes.md)   \n [Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md)   \n [Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md)   \n [Creating Custom Attributes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)","nodes":[{"pos":[4,458],"nodes":[{"content":"Accessing Attributes by Using Reflection (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,72],"content":"Accessing Attributes by Using Reflection (Visual Basic) | Microsoft Docs","nodes":[{"content":"Accessing Attributes by Using Reflection (Visual Basic) | Microsoft Docs","pos":[0,72]}]}],"pos":[6,81],"yaml":true}],"content":"title: \"Accessing Attributes by Using Reflection (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: c56e41da-5433-464f-a7bf-2a722e78bc9f\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[465,520],"content":"Accessing Attributes by Using Reflection (Visual Basic)","linkify":"Accessing Attributes by Using Reflection (Visual Basic)","nodes":[{"content":"Accessing Attributes by Using Reflection (Visual Basic)","pos":[0,55]}]},{"content":"The fact that you can define custom attributes and place them in your source code would be of little value without some way of retrieving that information and acting on it.","pos":[521,693]},{"content":"By using reflection, you can retrieve the information that was defined with custom attributes.","pos":[694,788]},{"content":"The key method is <ph id=\"ph1\">`GetCustomAttributes`</ph>, which returns an array of objects that are the run-time equivalents of the source code attributes.","pos":[789,928],"source":" The key method is `GetCustomAttributes`, which returns an array of objects that are the run-time equivalents of the source code attributes."},{"content":"This method has several overloaded versions.","pos":[929,973]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Attribute&gt;</ph>.","pos":[974,1024],"source":" For more information, see <xref:System.Attribute>."},{"content":"An attribute specification such as:","pos":[1031,1066]},{"content":"is conceptually equivalent to this:","pos":[1203,1238]},{"content":"However, the code is not executed until <ph id=\"ph1\">`SampleClass`</ph> is queried for attributes.","pos":[1366,1446],"source":"However, the code is not executed until `SampleClass` is queried for attributes."},{"content":"Calling <ph id=\"ph1\">`GetCustomAttributes`</ph> on <ph id=\"ph2\">`SampleClass`</ph> causes an <ph id=\"ph3\">`Author`</ph> object to be constructed and initialized as above.","pos":[1447,1563],"source":" Calling `GetCustomAttributes` on `SampleClass` causes an `Author` object to be constructed and initialized as above."},{"content":"If the class has other attributes, other attribute objects are constructed similarly.","pos":[1564,1649]},{"content":"<ph id=\"ph1\">`GetCustomAttributes`</ph> then returns the <ph id=\"ph2\">`Author`</ph> object and any other attribute objects in an array.","pos":[1650,1749],"source":"`GetCustomAttributes` then returns the `Author` object and any other attribute objects in an array."},{"content":"You can then iterate over this array, determine what attributes were applied based on the type of each array element, and extract information from the attribute objects.","pos":[1750,1919]},{"pos":[1928,1935],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Here is a complete example.","pos":[1939,1966]},{"content":"A custom attribute is defined, applied to several entities, and retrieved via reflection.","pos":[1967,2056]},{"pos":[3919,3927],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection&gt;</ph>","pos":[3931,3955],"source":"<xref:System.Reflection> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Attribute&gt;</ph>","pos":[3960,3983],"source":"<xref:System.Attribute> "},{"content":"<bpt id=\"p1\">[</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../../../visual-basic/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3988,4074],"source":"[Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Retrieving Information Stored in Attributes<ept id=\"p1\">](../../../../standard/attributes/retrieving-information-stored-in-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[4078,4204],"source":"[Retrieving Information Stored in Attributes](../../../../standard/attributes/retrieving-information-stored-in-attributes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/reflection.md)</ept><ph id=\"ph1\"> </ph>","pos":[4208,4303],"source":"[Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/language-reference/attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[4307,4394],"source":"[Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating Custom Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept>","pos":[4398,4535],"source":"[Creating Custom Attributes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)"}]}