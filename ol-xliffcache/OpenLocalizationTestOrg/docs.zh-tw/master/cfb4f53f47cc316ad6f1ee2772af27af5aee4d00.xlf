<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="working-with-linq.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfb4f53f47cc316ad6f1ee2772af27af5aee4d00</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\working-with-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41aaf43d0ddc135136f32fd4a3cb658d4d27e771</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff87c2871a4172e6baadb1baebd2b6f3954042b3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Working with LINQ</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This tutorial teaches you how to generate sequences with LINQ, write methods for use in LINQ queries, and distinguish between eager and lazy evaluation.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Working with LINQ</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Introduction</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you features in .NET Core and the C# language.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You’ll learn:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>How to generate sequences with LINQ.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How to write methods that can be easily used in LINQ queries.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How to distinguish between eager and lazy evaluation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You'll learn these techniques by building an application that demonstrates one of the basic skills of any magician: the <bpt id="p1">[</bpt>faro shuffle<ept id="p1">](https://en.wikipedia.org/wiki/Faro_shuffle)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Briefly, a faro shuffle is a technique where you split a card deck exactly in half, then the shuffle interleaves each one card from each half to rebuild the original deck.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Magicians use this technique because every card is in a known location after each shuffle, and the order is a repeating pattern.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For your purposes, it is a light hearted look at manipulating sequences of data.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The application you'll build will construct a card deck, and then perform a sequence of shuffles, writing the sequence out each time.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You'll also compare the updated order to the original order.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This tutorial has multiple steps.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>After each step, you can run the application and see the progress.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also see the <bpt id="p1">[</bpt>completed sample<ept id="p1">](https://github.com/dotnet/samples/blob/master/csharp/getting-started/console-linq)</ept> in the dotnet/samples GitHub repository.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For download instructions, see <bpt id="p1">[</bpt>Samples and Tutorials<ept id="p1">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You’ll need to setup your machine to run .NET core.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can find the installation instructions on the <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept> page.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can run this application on Windows, Ubuntu Linux, OS X or in a Docker container.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You’ll need to install your favorite code editor.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The descriptions below use <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com/)</ept> which is an open source, cross platform editor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, you can use whatever tools you are comfortable with.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Create the Application</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The first step is to create a new application.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Open a command prompt and create a new directory for your application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Make that the current directory.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Type the command <ph id="ph1">`dotnet new console`</ph> at the command prompt.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This creates the starter files for a basic "Hello World" application.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you've never used C# before, <bpt id="p1">[</bpt>this tutorial<ept id="p1">](console-teleprompter.md)</ept> explains the structure of a C# program.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can read that and then return here to learn more about LINQ.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creating the Data Set</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Before you begin, make sure that the following lines are at the top of the <ph id="ph1">`Program.cs`</ph> file generated by <ph id="ph2">`dotnet new console`</ph>:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If these three lines (<ph id="ph1">`using`</ph> statements) aren't at the top of the file, our program will not compile.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Now that you have all of the references that you'll need, consider what constitutes a deck of cards.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Commonly, a deck of playing cards has four suits, and each suit has thirteen values.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Normally, you might consider creating a <ph id="ph1">`Card`</ph> class right off the bat and populating a collection of <ph id="ph2">`Card`</ph> objects by hand.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>With LINQ, you can be more concise than the usual way of dealing with creating a deck of cards.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Instead of creating a <ph id="ph1">`Card`</ph> class, you can create two sequences to represent suites and ranks, respectively.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You'll create a really simple pair of <bpt id="p1">[</bpt><bpt id="p2">*</bpt>iterator methods<ept id="p2">*</ept><ept id="p1">](../iterators.md#enumeration-sources-with-iterator-methods)</ept> that will generate the ranks and suits as <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>s of strings:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Place these underneath the <ph id="ph1">`Main`</ph> method in your <ph id="ph2">`Program.cs`</ph> file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>These two methods both utilize the <ph id="ph1">`yield return`</ph> syntax to produce a sequence as they run.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The compiler builds an object that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and generates the sequence of strings as they are requested.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Now, use these iterator methods to create the deck of cards.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You'll place the LINQ query in our <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Here's a look at it:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The multiple <ph id="ph1">`from`</ph> clauses produce a <ph id="ph2">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>, which creates a single sequence from combining each element in the first sequence with each element in the second sequence.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The order is important for our purposes.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first element in the first source sequence (Suits) is combined with every element in the second sequence (Ranks).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This produces all thirteen cards of first suit.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>That process is repeated with each element in the first sequence (Suits).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The end result is a deck of cards ordered by suits, followed by values.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It's important to keep in mind that whether you choose to write your LINQ in the query syntax used above or use method syntax instead, it's always possible to go from one form of syntax to the other.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The above query written in query syntax can be written in method syntax as:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The compiler translates LINQ statements written with query syntax into the equivalent method call syntax.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Therefore, regardless of your syntax choice, the two versions of the query produce the same result.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Choose which syntax works best for your situation: for instance, if you're working in a team where some of the members have difficulty with method syntax, try to prefer using query syntax.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Go ahead and run the sample you've built at this point.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It will display all 52 cards in the deck.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You may find it very helpful to run this sample under a debugger to observe how the <ph id="ph1">`Suits()`</ph> and <ph id="ph2">`Ranks()`</ph> methods execute.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can clearly see that each string in each sequence is generated only as it is needed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A console window showing the app writing out 52 cards.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Manipulating the Order</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Next, focus on how you're going to shuffle the cards in the deck.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The first step in any good shuffle is to split the deck in two.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods that are part of the LINQ APIs provide that feature for you.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Place them underneath the <ph id="ph1">`foreach`</ph> loop:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>However, there's no shuffle method to take advantage of in the standard library, so you'll have to write your own.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The shuffle method you'll be creating illustrates several techniques that you'll use with LINQ-based programs, so each part of this process will be explained in steps.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In order to add some functionality to how you interact with the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> you'll get back from LINQ queries, you'll need to write some special kinds of methods called <bpt id="p1">[</bpt>extension methods<ept id="p1">](../../csharp/programming-guide/classes-and-structs/extension-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Briefly, an extension method is a special purpose <bpt id="p1">*</bpt>static method<ept id="p1">*</ept> that adds new functionality to an already-existing type without having to modify the original type you want to add functionality to.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Give your extension methods a new home by adding a new <bpt id="p1">*</bpt>static<ept id="p1">*</ept> class file to your program called <ph id="ph1">`Extensions.cs`</ph>, and then start building out the first extension method:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Look at the method signature for a moment, specifically the parameters:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can see the addition of the <ph id="ph1">`this`</ph> modifier on the first argument to the method.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>That means you call the method as though it were a member method of the type of the first argument.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This method declaration also follows a standard idiom where the input and output types are <ph id="ph1">`IEnumerable&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>That practice enables LINQ methods to be chained together to perform more complex queries.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Naturally, since you split the deck into halves, you'll need to join those halves together.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In code, this means you'll be enumerating both of the sequences you acquired through <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> at once, <bpt id="p1">*</bpt><ph id="ph3">`interleaving`</ph><ept id="p1">*</ept> the elements, and creating one sequence: your now-shuffled deck of cards.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Writing a LINQ method that works with two sequences requires that you understand how <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> works.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface has one method: <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The object returned by <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> has a method to move to the next element, and a property that retrieves the current element in the sequence.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You will use those two members to enumerate the collection and return the elements.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This Interleave method will be an iterator method, so instead of building a collection and returning the collection, you'll use the <ph id="ph1">`yield return`</ph> syntax shown above.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Here's the implementation of that method:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Now that you've written this method, go back to the <ph id="ph1">`Main`</ph> method and shuffle the deck once:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>How many shuffles it takes to set the deck back to its original order?</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To find out, you'll need to write a method that determines if two sequences are equal.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>After you have that method, you'll need to place the code that shuffles the deck in a loop, and check to see when the deck is back in order.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Writing a method to determine if the two sequences are equal should be straightforward.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>It's a similar structure to the method you wrote to shuffle the deck.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Only this time, instead of <ph id="ph1">`yield return`</ph>ing each element, you'll compare the matching elements of each sequence.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When the entire sequence has been enumerated, if every element matches, the sequences are the same:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This shows a second LINQ idiom: terminal methods.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>They take a sequence as input (or in this case, two sequences), and return a single scalar value.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When using terminal methods, they are always the final method in a chain of methods for a LINQ query, hence the name "terminal".</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can see this in action when you use it to determine when the deck is back in its original order.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Put the shuffle code inside a loop, and stop when the sequence is back in its original order by applying the <ph id="ph1">`SequenceEquals()`</ph> method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can see it would always be the final method in any query, because it returns a single value instead of a sequence:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Run the code you've got so far and take note of how the deck rearranges on each shuffle.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>After 8 shuffles (iterations of the do-while loop), the deck returns to the original configuration it was in when you first created it from the starting LINQ query.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Optimizations</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The sample you've built so far executes an <bpt id="p1">*</bpt>out shuffle<ept id="p1">*</ept>, where the top and bottom cards stay the same on each run.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Let's make one change: we'll use an <bpt id="p1">*</bpt>in shuffle<ept id="p1">*</ept> instead, where all 52 cards change position.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For an in shuffle, you interleave the deck so that the first card in the bottom half becomes the first card in the deck.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>That means the last card in the top half becomes the bottom card.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This is a simple change to a singular line of code.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Update the current shuffle query by switching the positions of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This will change the order of the top and bottom halves of the deck:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Run the program again, and you'll see that it takes 52 iterations for the deck to reorder itself.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You'll also start to notice some serious performance degradations as the program continues to run.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>There are a number of reasons for this.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can tackle one of the major causes of this performance drop: inefficient use of <bpt id="p1">[</bpt><bpt id="p2">*</bpt>lazy evaluation<ept id="p2">*</ept><ept id="p1">](../programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Briefly, lazy evaluation states that the evaluation of a statement is not performed until its value is needed.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>LINQ queries are statements that are evaluated lazily.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The sequences are generated only as the elements are requested.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Usually, that's a major benefit of LINQ.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>However, in a use such as this program, this causes exponential growth in execution time.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remember that we generated the original deck using a LINQ query.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Each shuffle is generated by performing three LINQ queries on the previous deck.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>All these are performed lazily.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>That also means they are performed again each time the sequence is requested.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>By the time you get to the 52nd iteration, you're regenerating the original deck many, many times.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Let's write a log to demonstrate this behavior.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Then, you'll fix it.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In your <ph id="ph1">`Extensions.cs`</ph> file, type in or copy the method below.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This extension method creates a new file called <ph id="ph1">`debug.log`</ph> within your project directory and records what query is currently being executed to the log file.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This extension method can be appended to any query to mark that the query executed.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Next, instrument the definition of each query with a log message:</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Notice that you don't log every time you access a query.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>You log only when you create the original query.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The program still takes a long time to run, but now you can see why.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If you run out of patience running the in shuffle with logging turned on, switch back to the out shuffle.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You'll still see the lazy evaluation effects.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In one run, it executes 2592 queries, including all the value and suit generation.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You can improve the performance of the code here to reduce the number of executions you make.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A simple fix you can make is to <bpt id="p1">*</bpt>cache<ept id="p1">*</ept> the results of the original LINQ query that constructs the deck of cards.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Currently, you're executing the queries again and again every time the do-while loop goes through an iteration, re-constructing the deck of cards and reshuffling it every time.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>To cache the deck of cards, you can leverage the LINQ methods <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph>; when you append them to the queries, they'll perform the same actions you've told them to, but now they'll store the results in an array or a list, depending on which method you choose to call.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Append the LINQ method <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> to both queries and run the program again:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Now the out shuffle is down to 30 queries.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Run again with the in shuffle and you'll see similar improvements: it now executes 162 queries.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Please note that this example is <bpt id="p1">**</bpt>designed<ept id="p1">**</ept> to highlight the use cases where lazy evaluation can cause performance difficulties.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>While it's important to see where lazy evaluation can impact code performance, it's equally important to understand that not all queries should run eagerly.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The performance hit you incur without using <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> is because each new arrangement of the deck of cards is built from the previous arrangement.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Using lazy evaluation means each new deck configuration is built from the original deck, even executing the code that built the <ph id="ph1">`startingDeck`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>That causes a large amount of extra work.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In practice, some algorithms run well using eager evaluation, and others run well using lazy evaluation.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For daily usage, lazy evaluation is usually a better choice when the data source is a separate process, like a database engine.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For databases, lazy evaluation allows more complex queries to execute only one round trip to the database process and back to the rest of your code.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>LINQ is flexible whether you choose to utilize lazy or eager evaluation, so measure your processes and pick whichever kind of evaluation gives you the best performance.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In this project, you covered:</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>using LINQ queries to aggregate data into a meaningful sequence</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>writing Extension methods to add our own custom functionality to LINQ queries</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>locating areas in our code where our LINQ queries might run into performance issues like degraded speed</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>lazy and eager evaluation in regards to LINQ queries and the implications they might have on query performance</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Aside from LINQ, you learned a bit about a technique magicians use for card tricks.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Magicians use the Faro shuffle because they can control where every card moves in the deck.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Now that you know, don't spoil it for everyone else!</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more information on LINQ, see:</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Language Integrated Query (LINQ)<ept id="p1">](../programming-guide/concepts/linq/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ<ept id="p1">](../programming-guide/concepts/linq/introduction-to-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started With LINQ in C#<ept id="p1">](../programming-guide/concepts/linq/getting-started-with-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic LINQ Query Operations (C#)<ept id="p1">](../programming-guide/concepts/linq/basic-linq-query-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Transformations With LINQ (C#)<ept id="p1">](../programming-guide/concepts/linq/data-transformations-with-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Syntax and Method Syntax in LINQ (C#)<ept id="p1">](../programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Features That Support LINQ<ept id="p1">](../programming-guide/concepts/linq/features-that-support-linq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>