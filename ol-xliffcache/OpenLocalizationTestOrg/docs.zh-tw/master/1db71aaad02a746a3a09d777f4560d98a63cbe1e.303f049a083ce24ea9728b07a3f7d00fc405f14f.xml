{"content":"---\ntitle: \"&gt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \">_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"> operator [C#]\"\n  - \"greater than operator (>) [C#]\"\nms.assetid: 26d3cb69-9c0b-4cc5-858b-5be1abd6659d\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &gt; Operator (C# Reference)\nAll numeric and enumeration types define a \"greater than\" relational operator (`>`) that returns `true` if the first operand is greater than the second, `false` otherwise.  \n  \n## Remarks  \n User-defined types can overload the `>` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)). If `>` is overloaded, [<](../../../csharp/language-reference/operators/less-than-operator.md) must also be overloaded. When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.  \n  \n## Example  \n [!code-cs[csRefOperators#29](../../../csharp/language-reference/operators/codesnippet/CSharp/greater-than-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)   \n [explicit](../../../csharp/language-reference/keywords/explicit.md)","nodes":[{"pos":[4,590],"embed":true,"restype":"x-metadata","content":"title: \"&gt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \">_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"> operator [C#]\"\n  - \"greater than operator (>) [C#]\"\nms.assetid: 26d3cb69-9c0b-4cc5-858b-5be1abd6659d\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"&gt; Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,45],"content":"&gt; Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;gt;</ph> Operator (C# Reference) | Microsoft Docs","pos":[0,45],"source":"&gt; Operator (C# Reference) | Microsoft Docs"}]}],"path":["title"]}],"yml":true},{"pos":[597,625],"content":"&gt; Operator (C# Reference)","linkify":"&gt; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;gt;</ph> Operator (C# Reference)","pos":[0,28],"source":"&gt; Operator (C# Reference)"}]},{"pos":[626,797],"content":"All numeric and enumeration types define a \"greater than\" relational operator (<ph id=\"ph1\">`&gt;`</ph>) that returns <ph id=\"ph2\">`true`</ph> if the first operand is greater than the second, <ph id=\"ph3\">`false`</ph> otherwise.","source":"All numeric and enumeration types define a \"greater than\" relational operator (`>`) that returns `true` if the first operand is greater than the second, `false` otherwise."},{"pos":[806,813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined types can overload the <ph id=\"ph1\">`&gt;`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","pos":[817,940],"source":"User-defined types can overload the `>` operator (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"content":"If <ph id=\"ph1\">`&gt;`</ph> is overloaded, <bpt id=\"p1\">[</bpt><ph id=\"ph2\">&lt;</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/less-than-operator.md)</ept> must also be overloaded.","pos":[941,1059],"source":" If `>` is overloaded, [<](../../../csharp/language-reference/operators/less-than-operator.md) must also be overloaded."},{"content":"When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.","pos":[1060,1175]},{"pos":[1184,1191],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1325,1333],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1337,1397],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1401,1468],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1472,1542],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>explicit<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit.md)</ept>","pos":[1546,1613],"source":"[explicit](../../../csharp/language-reference/keywords/explicit.md)"}]}