{"content":"---\ntitle: \"float (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"float\"\n  - \"float_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"float keyword [C#]\"\n  - \"floating-point numbers [C#], float keyword\"\nms.assetid: 1e77db7b-dedb-48b7-8dd1-b055e96a9258\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# float (C# Reference)\nThe `float` keyword signifies a simple type that stores 32-bit floating-point values. The following table shows the precision and approximate range for the `float` type.  \n  \n|Type|Approximate range|Precision|.NET Framework type|  \n|----------|-----------------------|---------------|-------------------------|  \n|`float`|-3.4 × 10<sup>38</sup>to +3.4 × 10<sup>38</sup>|7 digits|<xref:System.Single?displayProperty=fullName>|  \n  \n## Literals  \n By default, a real numeric literal on the right side of the assignment operator is treated as [double](double.md). Therefore, to initialize a float variable, use the suffix `f` or `F`, as in the following example:  \n  \n```csharp\nfloat x = 3.5F;  \n```\n  \n If you do not use the suffix in the previous declaration, you will get a compilation error because you are trying to store a [double](double.md) value into a `float` variable.  \n  \n## Conversions  \n You can mix numeric integral types and floating-point types in an expression. In this case, the integral types are converted to floating-point types. The evaluation of the expression is performed according to the following rules:  \n  \n-   If one of the floating-point types is [double](double.md), the expression evaluates to [double](double.md) or [bool](bool.md) in relational or Boolean expressions.  \n  \n-   If there is no [double](double.md) type in the expression, the expression evaluates to `float` or [bool](bool.md) in relational or Boolean expressions.  \n  \n A floating-point expression can contain the following sets of values:  \n  \n-   Positive and negative zero  \n  \n-   Positive and negative infinity  \n  \n-   Not-a-Number value (NaN)  \n  \n-   The finite set of nonzero values  \n  \n For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the [IEEE](http://go.microsoft.com/fwlink/?LinkId=26269) Web site.  \n  \n## Example  \n In the following example, an [int](int.md), a [short](short.md), and a `float` are included in a mathematical expression giving a `float` result. (Remember that `float` is an alias for the <xref:System.Single?displayProperty=fullName> type.) Notice that there is no [double](double.md) in the expression.  \n  \n [!code-cs[csrefKeywordsTypes#13](../../../csharp/language-reference/keywords/codesnippet/CSharp/float_1.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.Single>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Casting and Type Conversions](../../../csharp/programming-guide/types/casting-and-type-conversions.md)   \n [C# Keywords](index.md)   \n [Integral Types Table](integral-types-table.md)   \n [Built-In Types Table](built-in-types-table.md)   \n [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)","nodes":[{"pos":[4,613],"embed":true,"restype":"x-metadata","content":"title: \"float (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"float\"\n  - \"float_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"float keyword [C#]\"\n  - \"floating-point numbers [C#], float keyword\"\nms.assetid: 1e77db7b-dedb-48b7-8dd1-b055e96a9258\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"float (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,37],"content":"float (C# Reference) | Microsoft Docs","nodes":[{"content":"float (C# Reference) | Microsoft Docs","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[620,640],"content":"float (C# Reference)","linkify":"float (C# Reference)","nodes":[{"content":"float (C# Reference)","pos":[0,20]}]},{"content":"The <ph id=\"ph1\">`float`</ph> keyword signifies a simple type that stores 32-bit floating-point values.","pos":[641,726],"source":"The `float` keyword signifies a simple type that stores 32-bit floating-point values."},{"content":"The following table shows the precision and approximate range for the <ph id=\"ph1\">`float`</ph> type.","pos":[727,810],"source":" The following table shows the precision and approximate range for the `float` type."},{"content":"Type","pos":[817,821]},{"content":"Approximate range","pos":[822,839]},{"content":"Precision","pos":[840,849]},{"content":".NET Framework type","pos":[850,869]},{"pos":[963,1010],"content":"-3.4 × 10<bpt id=\"p1\">&lt;sup&gt;</bpt>38<ept id=\"p1\">&lt;/sup&gt;</ept>to +3.4 × 10<bpt id=\"p2\">&lt;sup&gt;</bpt>38<ept id=\"p2\">&lt;/sup&gt;</ept>","source":"-3.4 × 10<sup>38</sup>to +3.4 × 10<sup>38</sup>"},{"content":"7 digits","pos":[1011,1019]},{"pos":[1075,1083],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"By default, a real numeric literal on the right side of the assignment operator is treated as <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept>.","pos":[1087,1201],"source":"By default, a real numeric literal on the right side of the assignment operator is treated as [double](double.md)."},{"content":"Therefore, to initialize a float variable, use the suffix <ph id=\"ph1\">`f`</ph> or <ph id=\"ph2\">`F`</ph>, as in the following example:","pos":[1202,1300],"source":" Therefore, to initialize a float variable, use the suffix `f` or `F`, as in the following example:"},{"pos":[1342,1517],"content":"If you do not use the suffix in the previous declaration, you will get a compilation error because you are trying to store a <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept> value into a <ph id=\"ph1\">`float`</ph> variable.","source":"If you do not use the suffix in the previous declaration, you will get a compilation error because you are trying to store a [double](double.md) value into a `float` variable."},{"pos":[1526,1537],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"You can mix numeric integral types and floating-point types in an expression.","pos":[1541,1618]},{"content":"In this case, the integral types are converted to floating-point types.","pos":[1619,1690]},{"content":"The evaluation of the expression is performed according to the following rules:","pos":[1691,1770]},{"pos":[1780,1943],"content":"If one of the floating-point types is <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept>, the expression evaluates to <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](double.md)</ept> or <bpt id=\"p3\">[</bpt>bool<ept id=\"p3\">](bool.md)</ept> in relational or Boolean expressions.","source":"If one of the floating-point types is [double](double.md), the expression evaluates to [double](double.md) or [bool](bool.md) in relational or Boolean expressions."},{"pos":[1953,2104],"content":"If there is no <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept> type in the expression, the expression evaluates to <ph id=\"ph1\">`float`</ph> or <bpt id=\"p2\">[</bpt>bool<ept id=\"p2\">](bool.md)</ept> in relational or Boolean expressions.","source":"If there is no [double](double.md) type in the expression, the expression evaluates to `float` or [bool](bool.md) in relational or Boolean expressions."},{"content":"A floating-point expression can contain the following sets of values:","pos":[2111,2180]},{"content":"Positive and negative zero","pos":[2190,2216]},{"content":"Positive and negative infinity","pos":[2226,2256]},{"content":"Not-a-Number value (NaN)","pos":[2266,2290]},{"content":"The finite set of nonzero values","pos":[2300,2332]},{"pos":[2339,2515],"content":"For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the <bpt id=\"p1\">[</bpt>IEEE<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=26269)</ept> Web site.","source":"For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the [IEEE](http://go.microsoft.com/fwlink/?LinkId=26269) Web site."},{"pos":[2524,2531],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>, a <bpt id=\"p2\">[</bpt>short<ept id=\"p2\">](short.md)</ept>, and a <ph id=\"ph1\">`float`</ph> are included in a mathematical expression giving a <ph id=\"ph2\">`float`</ph> result.","pos":[2535,2680],"source":"In the following example, an [int](int.md), a [short](short.md), and a `float` are included in a mathematical expression giving a `float` result."},{"content":"(Remember that <ph id=\"ph1\">`float`</ph> is an alias for the <ph id=\"ph2\">&lt;xref:System.Single?displayProperty=fullName&gt;</ph> type.) Notice that there is no <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept> in the expression.","pos":[2681,2839],"source":" (Remember that `float` is an alias for the <xref:System.Single?displayProperty=fullName> type.) Notice that there is no [double](double.md) in the expression."},{"pos":[2963,2988],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3102,3110],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3139,3199],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3203,3270],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Casting and Type Conversions<ept id=\"p1\">](../../../csharp/programming-guide/types/casting-and-type-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3274,3378],"source":"[Casting and Type Conversions](../../../csharp/programming-guide/types/casting-and-type-conversions.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3382,3406],"source":"[C# Keywords](index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3410,3458],"source":"[Integral Types Table](integral-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3462,3510],"source":"[Built-In Types Table](built-in-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3514,3590],"source":"[Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](explicit-numeric-conversions-table.md)</ept>","pos":[3594,3669],"source":"[Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)"}]}