{"content":"---\ntitle: \"How to: Call Operations Asynchronously Using a Channel Factory\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: cc17dd47-b9ad-451c-a362-e36e0aac7ba0\n---\n# How to: Call Operations Asynchronously Using a Channel Factory\nThis topic covers how a client can access a service operation asynchronously when using a <xref:System.ServiceModel.ChannelFactory%601>-based client application. (When using a <xref:System.ServiceModel.ClientBase%601?displayProperty=nameWithType> object to invoke a service you can use the event-driven asynchronous calling model. For more information, see [How to: Call Service Operations Asynchronously](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md). For more information about the event-based asynchronous calling model, see [Event-based Asynchronous Pattern (EAP)](../../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).)  \n  \n The service in this topic implements the `ICalculator` interface. The client can call the operations on this interface asynchronously, which means that operations like `Add` are split into two methods, `BeginAdd` and `EndAdd`, the former of which initiates the call and the latter of which retrieves the result when the operation completes. For an example showing how to implement an operation asynchronously in a service, see [How to: Implement an Asynchronous Service Operation](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md). For details about synchronous and asynchronous operations, see [Synchronous and Asynchronous Operations](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md).  \n  \n## Procedure  \n  \n#### To call WCF service operations asynchronously  \n  \n1.  Run the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool with the `/async` option as shown in the following command.  \n  \n    ```  \n    svcutil /n:http://Microsoft.ServiceModel.Samples,Microsoft.ServiceModel.Samples http://localhost:8000/servicemodelsamples/service/mex /a  \n    ```  \n  \n     This generates an asynchronous client version of the service contract for the operation.  \n  \n2.  Create a callback function to be called when the asynchronous operation is complete, as shown in the following sample code.  \n  \n     [!code-csharp[C_How_To_CF_Async#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#2)]\n     [!code-vb[C_How_To_CF_Async#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#2)]  \n  \n3.  To access a service operation asynchronously, create the client and call the `Begin[Operation]` (for example, `BeginAdd`) and specify a callback function, as shown in the following sample code.  \n  \n     [!code-csharp[C_How_To_CF_Async#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#3)]\n     [!code-vb[C_How_To_CF_Async#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#3)]  \n  \n     When the callback function executes, the client calls `End<operation>` (for example, `EndAdd`) to retrieve the result.  \n  \n## Example  \n The service that is used with the client code that is used in the preceding procedure implements the `ICalculator` interface as shown in the following code. On the service side, the `Add` and `Subtract` operations of the contract are invoked synchronously by the Windows Communication Foundation (WCF) run time, even though the preceding client steps are invoked asynchronously on the client. The `Multiply` and `Divide` operations are used to invoke the service asynchronously on the service side, even if the client invokes them synchronously. This example sets the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property to `true`. This property setting, in combination with the implementation of the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] asynchronous pattern, tells the run time to invoke the operation asynchronously.  \n  \n [!code-csharp[C_How_To_CF_Async#4](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/service.cs#4)]\n [!code-vb[C_How_To_CF_Async#4](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/service.vb#4)]  \n","nodes":[{"pos":[4,180],"embed":true,"restype":"x-metadata","content":"title: \"How to: Call Operations Asynchronously Using a Channel Factory\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: cc17dd47-b9ad-451c-a362-e36e0aac7ba0","nodes":[{"content":"How to: Call Operations Asynchronously Using a Channel Factory","nodes":[{"pos":[0,62],"content":"How to: Call Operations Asynchronously Using a Channel Factory","nodes":[{"content":"How to: Call Operations Asynchronously Using a Channel Factory","pos":[0,62]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[187,249],"content":"How to: Call Operations Asynchronously Using a Channel Factory","linkify":"How to: Call Operations Asynchronously Using a Channel Factory","nodes":[{"content":"How to: Call Operations Asynchronously Using a Channel Factory","pos":[0,62]}]},{"content":"This topic covers how a client can access a service operation asynchronously when using a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>-based client application.","pos":[250,411],"source":"This topic covers how a client can access a service operation asynchronously when using a <xref:System.ServiceModel.ChannelFactory%601>-based client application."},{"content":"(When using a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601?displayProperty=nameWithType&gt;</ph> object to invoke a service you can use the event-driven asynchronous calling model.","pos":[412,580],"source":" (When using a <xref:System.ServiceModel.ClientBase%601?displayProperty=nameWithType> object to invoke a service you can use the event-driven asynchronous calling model."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Call Service Operations Asynchronously<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept>.","pos":[581,757],"source":" For more information, see [How to: Call Service Operations Asynchronously](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)."},{"content":"For more information about the event-based asynchronous calling model, see <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id=\"p1\">](../../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept>.)","pos":[758,976],"source":" For more information about the event-based asynchronous calling model, see [Event-based Asynchronous Pattern (EAP)](../../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).)"},{"content":"The service in this topic implements the <ph id=\"ph1\">`ICalculator`</ph> interface.","pos":[983,1048],"source":"The service in this topic implements the `ICalculator` interface."},{"content":"The client can call the operations on this interface asynchronously, which means that operations like <ph id=\"ph1\">`Add`</ph> are split into two methods, <ph id=\"ph2\">`BeginAdd`</ph> and <ph id=\"ph3\">`EndAdd`</ph>, the former of which initiates the call and the latter of which retrieves the result when the operation completes.","pos":[1049,1323],"source":" The client can call the operations on this interface asynchronously, which means that operations like `Add` are split into two methods, `BeginAdd` and `EndAdd`, the former of which initiates the call and the latter of which retrieves the result when the operation completes."},{"content":"For an example showing how to implement an operation asynchronously in a service, see <bpt id=\"p1\">[</bpt>How to: Implement an Asynchronous Service Operation<ept id=\"p1\">](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept>.","pos":[1324,1550],"source":" For an example showing how to implement an operation asynchronously in a service, see [How to: Implement an Asynchronous Service Operation](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)."},{"content":"For details about synchronous and asynchronous operations, see <bpt id=\"p1\">[</bpt>Synchronous and Asynchronous Operations<ept id=\"p1\">](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)</ept>.","pos":[1551,1731],"source":" For details about synchronous and asynchronous operations, see [Synchronous and Asynchronous Operations](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)."},{"pos":[1740,1749],"content":"Procedure","linkify":"Procedure","nodes":[{"content":"Procedure","pos":[0,9]}]},{"pos":[1760,1805],"content":"To call WCF service operations asynchronously","linkify":"To call WCF service operations asynchronously","nodes":[{"content":"To call WCF service operations asynchronously","pos":[0,45]}]},{"pos":[1815,2020],"content":"Run the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool with the <ph id=\"ph1\">`/async`</ph> option as shown in the following command.","source":"Run the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool with the `/async` option as shown in the following command."},{"content":"This generates an asynchronous client version of the service contract for the operation.","pos":[2197,2285]},{"content":"Create a callback function to be called when the asynchronous operation is complete, as shown in the following sample code.","pos":[2295,2418]},{"pos":[2429,2678],"content":"[!code-csharp[C_How_To_CF_Async#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#2)]\n [!code-vb[C_How_To_CF_Async#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#2)]","leadings":["","    "],"nodes":[]},{"pos":[2688,2881],"content":"To access a service operation asynchronously, create the client and call the <ph id=\"ph1\">`Begin[Operation]`</ph> (for example, <ph id=\"ph2\">`BeginAdd`</ph>) and specify a callback function, as shown in the following sample code.","source":"To access a service operation asynchronously, create the client and call the `Begin[Operation]` (for example, `BeginAdd`) and specify a callback function, as shown in the following sample code."},{"pos":[2892,3141],"content":"[!code-csharp[C_How_To_CF_Async#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#3)]\n [!code-vb[C_How_To_CF_Async#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#3)]","leadings":["","    "],"nodes":[]},{"pos":[3152,3270],"content":"When the callback function executes, the client calls <ph id=\"ph1\">`End&lt;operation&gt;`</ph> (for example, <ph id=\"ph2\">`EndAdd`</ph>) to retrieve the result.","source":"When the callback function executes, the client calls `End<operation>` (for example, `EndAdd`) to retrieve the result."},{"pos":[3279,3286],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The service that is used with the client code that is used in the preceding procedure implements the <ph id=\"ph1\">`ICalculator`</ph> interface as shown in the following code.","pos":[3290,3446],"source":"The service that is used with the client code that is used in the preceding procedure implements the `ICalculator` interface as shown in the following code."},{"content":"On the service side, the <ph id=\"ph1\">`Add`</ph> and <ph id=\"ph2\">`Subtract`</ph> operations of the contract are invoked synchronously by the Windows Communication Foundation (WCF) run time, even though the preceding client steps are invoked asynchronously on the client.","pos":[3447,3682],"source":" On the service side, the `Add` and `Subtract` operations of the contract are invoked synchronously by the Windows Communication Foundation (WCF) run time, even though the preceding client steps are invoked asynchronously on the client."},{"content":"The <ph id=\"ph1\">`Multiply`</ph> and <ph id=\"ph2\">`Divide`</ph> operations are used to invoke the service asynchronously on the service side, even if the client invokes them synchronously.","pos":[3683,3835],"source":" The `Multiply` and `Divide` operations are used to invoke the service asynchronously on the service side, even if the client invokes them synchronously."},{"content":"This example sets the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[3836,3947],"source":" This example sets the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property to `true`."},{"content":"This property setting, in combination with the implementation of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> asynchronous pattern, tells the run time to invoke the operation asynchronously.","pos":[3948,4161],"source":" This property setting, in combination with the implementation of the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] asynchronous pattern, tells the run time to invoke the operation asynchronously."}]}