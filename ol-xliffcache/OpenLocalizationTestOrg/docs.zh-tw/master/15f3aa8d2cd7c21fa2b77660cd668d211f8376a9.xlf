<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-threads-and-threading.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15f3aa8d2cd7c21fa2b77660cd668d211f8376a9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\using-threads-and-threading.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bef523faa65498ed0eefb09b51799bca2c3f0d51</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22feb52a326691310447fc3daf02606a4b1f2336</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using threads and threading</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using threads and threading</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>With .NET, you can write applications that perform multiple operations at the same time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Operations with the potential of holding up other operations can execute on separate threads, a process known as <bpt id="p1">*</bpt>multithreading<ept id="p1">*</ept> or <bpt id="p2">*</bpt>free threading<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Applications that use multithreading are more responsive to user input because the user interface stays active as processor-intensive tasks execute on separate threads.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Multithreading is also useful when you create scalable applications, because you can add threads as the workload increases.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you need more control over the behavior of the application's threads, you can manage the threads yourself.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, starting with the .NET Framework 4, multithreaded programming is greatly simplified with the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task?displayProperty=nameWithType&gt;</ph> classes, <bpt id="p1">[</bpt>Parallel LINQ (PLINQ)<ept id="p1">](../parallel-programming/parallel-linq-plinq.md)</ept>, new concurrent collection classes in the <ph id="ph3">&lt;xref:System.Collections.Concurrent?displayProperty=nameWithType&gt;</ph> namespace, and a new programming model that is based on the concept of tasks rather than threads.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Parallel Programming<ept id="p1">](../parallel-programming/index.md)</ept> and <bpt id="p2">[</bpt>Task Parallel Library (TPL)<ept id="p2">](../parallel-programming/task-parallel-library-tpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How to: Create and start a new thread</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You create a new thread by creating a new instance of the <ph id="ph1">&lt;xref:System.Threading.Thread?displayProperty=nameWithType&gt;</ph> class and providing the name of the method that you want to execute on a new thread to the constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To start a created thread, call the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information and examples, see the <bpt id="p1">[</bpt>Creating threads and passing data at start time<ept id="p1">](creating-threads-and-passing-data-at-start-time.md)</ept> article and the <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to: Stop a thread</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To terminate the execution of a thread, use the <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>That method raises a <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> on the thread on which it's invoked.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Destroying threads<ept id="p1">](destroying-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Beginning with the .NET Framework 4, you can use the <ph id="ph1">&lt;xref:System.Threading.CancellationToken?displayProperty=nameWithType&gt;</ph> to cancel a thread cooperatively.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Canceling threads cooperatively<ept id="p1">](canceling-threads-cooperatively.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType&gt;</ph> method to make the calling thread wait for the termination of the thread on which the method is invoked.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>How to: Pause or interrupt a thread</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method to pause the current thread for a specified amount of time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can interrupt a blocked thread by calling the <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Pausing and interrupting threads<ept id="p1">](pausing-and-resuming-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Thread properties</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following table presents some of the <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> if a thread has been started and has not yet terminated normally or aborted.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets or sets a Boolean that indicates if a thread is a background thread.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Background threads are like foreground threads, but a background thread doesn't prevent a process from stopping.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once all foreground threads that belong to a process have stopped, the common language runtime ends the process by calling the <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method on background threads that are still alive.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Foreground and Background Threads<ept id="p1">](foreground-and-background-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of a thread.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Most frequently used to discover individual threads when you debug.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref:System.Threading.ThreadPriority&gt;</ph> value that is used by the operating system to prioritize thread scheduling.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Scheduling threads<ept id="p1">](scheduling-threads.md)</ept> and the <ph id="ph1">&lt;xref:System.Threading.ThreadPriority&gt;</ph> reference.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> value containing the current states of a thread.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threads and Threading<ept id="p1">](threads-and-threading.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel Programming<ept id="p1">](../parallel-programming/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>