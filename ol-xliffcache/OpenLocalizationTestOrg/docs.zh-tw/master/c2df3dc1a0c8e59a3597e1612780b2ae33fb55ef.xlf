<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-binding-overview.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2df3dc1a0c8e59a3597e1612780b2ae33fb55ef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\data\data-binding-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f10fc5d5d263e65a17f1e749036e98261a6bad41</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1e8a7275be8828012731b7003454e0314d20ef9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Binding Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Binding Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> data binding provides a simple and consistent way for applications to present and interact with data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Elements can be bound to data from a variety of data sources in the form of <ph id="ph1">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> objects and <ph id="ph2">[!INCLUDE[TLA#tla_xml](../../../../includes/tlasharptla-xml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>s such as <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>s such as <ph id="ph4">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Controls.ListView&gt;</ph> have built-in functionality to enable flexible styling of single data items or collections of data items.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Sort, filter, and group views can be generated on top of the data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The data binding functionality in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> has several advantages over traditional models, including a broad range of properties that inherently support data binding, flexible <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> representation of data, and clean separation of business logic from <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic first discusses concepts fundamental to <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> data binding and then goes into the usage of the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> class and other features of data binding.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>What Is Data Binding?</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Data binding is the process that establishes a connection between the application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> and business logic.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the binding has the correct settings and the data provides the proper notifications, then, when the data changes its value, the elements that are bound to the data reflect changes automatically.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Data binding can also mean that if an outer representation of the data in an element changes, then the underlying data can be automatically updated to reflect the change.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, if the user edits the value in a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> element, the underlying data value is automatically updated to reflect that change.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A typical use of data binding is to place server or local configuration data into forms or other <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> controls.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, this concept is expanded to include the binding of a broad range of properties to a variety of data sources.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, dependency properties of elements can be bound to <ph id="ph2">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> objects (including <ph id="ph3">[!INCLUDE[TLA#tla_adonet](../../../../includes/tlasharptla-adonet-md.md)]</ph> objects or objects associated with Web Services and Web properties) and <ph id="ph4">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For an example of data binding, take a look at the following application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> from the <bpt id="p1">[</bpt>Data Binding Demo<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=163703)</ept>:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data binding sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databinding-databindingdemo.png "</bpt>DataBinding_DataBindingDemo<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The above is the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> of an application that displays a list of auction items.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The application demonstrates the following features of data binding:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The content of the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> is bound to a collection of <bpt id="p1">*</bpt>AuctionItem<ept id="p1">*</ept> objects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>AuctionItem<ept id="p1">*</ept> object has properties such as <bpt id="p2">*</bpt>Description<ept id="p2">*</ept>, <bpt id="p3">*</bpt>StartPrice<ept id="p3">*</ept>, <bpt id="p4">*</bpt>StartDate<ept id="p4">*</ept>, <bpt id="p5">*</bpt>Category<ept id="p5">*</ept>, <bpt id="p6">*</bpt>SpecialFeatures<ept id="p6">*</ept>, etc.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The data (<bpt id="p1">*</bpt>AuctionItem<ept id="p1">*</ept> objects) displayed in the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> is templated so that the description and the current price are shown for each item.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is done using a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In addition, the appearance of each item depends on the <bpt id="p1">*</bpt>SpecialFeatures<ept id="p1">*</ept> value of the <bpt id="p2">*</bpt>AuctionItem<ept id="p2">*</ept> being displayed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>SpecialFeatures<ept id="p1">*</ept> value of the <bpt id="p2">*</bpt>AuctionItem<ept id="p2">*</ept> is <bpt id="p3">*</bpt>Color<ept id="p3">*</ept>, the item has a blue border.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the value is <bpt id="p1">*</bpt>Highlight<ept id="p1">*</ept>, the item has an orange border and a star.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Data Templating<ept id="p1">](#data_templating)</ept> section provides information about data templating.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The user can group, filter, or sort the data using the <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>es provided.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the image above, the "Group by category" and "Sort by category and date" <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>es are selected.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You may have noticed that the data is grouped based on the category of the product, and the category name is in alphabetical order.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It is difficult to notice from the image but the items are also sorted by the start date within each category.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is done using a <bpt id="p1">*</bpt>collection view<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Binding to Collections<ept id="p1">](#binding_to_collections)</ept> section discusses collection views.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When the user selects an item, the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> displays the details of the selected item.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is called the <bpt id="p1">*</bpt>Master-Detail scenario<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Master-Detail Scenario<ept id="p1">](#master_detail_scenario)</ept> section provides information about this type of binding scenario.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The type of the <bpt id="p1">*</bpt>StartDate<ept id="p1">*</ept> property is <ph id="ph1">&lt;xref:System.DateTime&gt;</ph>, which returns a date that includes the time to the millisecond.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In this application, a custom converter has been used so that a shorter date string is displayed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Data Conversion<ept id="p1">](#data_conversion)</ept> section provides information about converters.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When the user clicks the <bpt id="p1">*</bpt>Add Product<ept id="p1">*</ept> button, the following form comes up:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Add Product Listing page<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databinding-demo-addproductlisting.png "</bpt>DataBinding_Demo_AddProductListing<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The user can edit the fields in the form, preview the product listing using the short preview and the more detailed preview panes, and then click <bpt id="p1">*</bpt>submit<ept id="p1">*</ept> to add the new product listing.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Any existing grouping, filtering and sorting functionalities will apply to the new entry.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this particular case, the item entered in the above image will be displayed as the second item within the <bpt id="p1">*</bpt>Computer<ept id="p1">*</ept> category.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Not shown in this image is the validation logic provided in the <bpt id="p1">*</bpt>Start Date<ept id="p1">*</ept> <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the user enters an invalid date (invalid formatting or a past date), the user will be notified with a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> and a red exclamation point next to the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Data Validation<ept id="p1">](#data_validation)</ept> section discusses how to create validation logic.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Before going into the different features of data binding outlined above, we will first discuss in the next section the fundamental concepts that are critical to understanding <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> data binding.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Basic Data Binding Concepts</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Regardless of what element you are binding and the nature of your data source, each binding always follows the model illustrated by the following figure:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Basic data binding diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingmostbasic.png "</bpt>DataBindingMostBasic<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As illustrated by the above figure, data binding is essentially the bridge between your binding target and your binding source.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The figure demonstrates the following fundamental <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> data binding concepts:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Typically, each binding has these four components: a binding target object, a target property, a binding source, and a path to the value in the binding source to use.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, if you want to bind the content of a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> to the <bpt id="p1">*</bpt>Name<ept id="p1">*</ept> property of an <bpt id="p2">*</bpt>Employee<ept id="p2">*</ept> object, your target object is the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, the target property is the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox.Text%2A&gt;</ph> property, the value to use is <bpt id="p3">*</bpt>Name<ept id="p3">*</ept>, and the source object is the <bpt id="p4">*</bpt>Employee<ept id="p4">*</ept> object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The target property must be a dependency property.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Most <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> properties are dependency properties and most dependency properties, except read-only ones, support data binding by default.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(Only <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> types can define dependency properties and all <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>s derive from <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph>.)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Although not specified in the figure, it should be noted that the binding source object is not restricted to being a custom <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> data binding supports data in the form of <ph id="ph2">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> objects and <ph id="ph3">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To provide some examples, your binding source may be a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, any list object, a <ph id="ph2">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> object that is associated with <ph id="ph3">[!INCLUDE[TLA#tla_adonet](../../../../includes/tlasharptla-adonet-md.md)]</ph> data or Web Services, or an XmlNode that contains your <ph id="ph4">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> data.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Binding Sources Overview<ept id="p1">](../../../../docs/framework/wpf/data/binding-sources-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>As you read through other <ph id="ph1">[!INCLUDE[TLA#tla_sdk](../../../../includes/tlasharptla-sdk-md.md)]</ph> topics, it is important to remember that when you are establishing a binding, you are binding a binding target <bpt id="p1">*</bpt>to<ept id="p1">*</ept> a binding source.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, if you are displaying some underlying <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> data in a <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> using data binding, you are binding your <ph id="ph3">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> to the <ph id="ph4">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> data.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To establish a binding, you use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The rest of this topic discusses many of the concepts associated with and some of the properties and usage of the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Direction of the Data Flow</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As mentioned previously and as indicated by the arrow in the figure above, the data flow of a binding can go from the binding target to the binding source (for example, the source value changes when a user edits the value of a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>) and/or from the binding source to the binding target (for example, your <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> content gets updated with changes in the binding source) if the binding source provides the proper notifications.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You may want your application to enable users to change the data and propagate it back to the source object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Or you may not want to enable users to update the source data.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can control this by setting the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> property of your <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following figure illustrates the different types of data flow:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data binding data flow<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databinding-dataflow.png "</bpt>DataBinding_DataFlow<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding causes changes to the source property to automatically update the target property, but changes to the target property are not propagated back to the source property.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This type of binding is appropriate if the control being bound is implicitly read-only.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For instance, you may bind to a source such as a stock ticker or perhaps your target property has no control interface provided for making changes, such as a data-bound background color of a table.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If there is no need to monitor the changes of the target property, using the <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding mode avoids the overhead of the <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding mode.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding causes changes to either the source property or the target property to automatically update the other.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This type of binding is appropriate for editable forms or other fully-interactive <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> scenarios.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Most properties default to <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding, but some dependency properties (typically properties of user-editable controls such as the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox.Text%2A&gt;</ph> property of <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> and the <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ToggleButton.IsChecked%2A&gt;</ph> property of <ph id="ph5">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>) default to <ph id="ph6">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A programmatic way to determine whether a dependency property binds one-way or two-way by default is to get the property metadata of the property using <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.GetMetadata%2A&gt;</ph> and then check the Boolean value of the <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> is the reverse of <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding; it updates the source property when the target property changes.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>One example scenario is if you only need to re-evaluate the source value from the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Not illustrated in the figure is <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding, which causes the source property to initialize the target property, but subsequent changes do not propagate.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This means that if the data context undergoes a change or the object in the data context changes, then the change is not reflected in the target property.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This type of binding is appropriate if you are using data where either a snapshot of the current state is appropriate to use or the data is truly static.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This type of binding is also useful if you want to initialize your target property with some value from a source property and the data context is not known in advance.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This is essentially a simpler form of <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding that provides better performance in cases where the source value does not change.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Note that to detect source changes (applicable to <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> bindings), the source must implement a suitable property change notification mechanism such as <ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Implement Property Change Notification<ept id="p1">](../../../../docs/framework/wpf/data/how-to-implement-property-change-notification.md)</ept> for an example of an <ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> property page provides more information about binding modes and an example of how to specify the direction of a binding.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>What Triggers Source Updates</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Bindings that are <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> listen for changes in the target property and propagate them back to the source.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This is known as updating the source.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, you may edit the text of a TextBox to change the underlying source value.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>As described in the last section, the direction of the data flow is determined by the value of the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> property of the binding.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>However, does your source value get updated while you are editing the text or after you finish editing the text and point your mouse away from the TextBox?</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> property of the binding determines what triggers the update of the source.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The dots of the right arrows in the following figure illustrate the role of the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> property:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>UpdateSourceTrigger diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingupdatesourcetrigger.png "</bpt>DataBindingUpdateSourceTrigger<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> value is <ph id="ph2">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>, then the value pointed to by the right arrow of <ph id="ph3">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> or the <ph id="ph4">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> bindings gets updated as soon as the target property changes.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>However, if the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> value is <ph id="ph2">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>, then that value only gets updated with the new value when the target property loses focus.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Similar to the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> property, different dependency properties have different default <ph id="ph2">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The default value for most dependency properties is <ph id="ph1">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>, while the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox.Text%2A&gt;</ph> property has a default value of <ph id="ph3">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This means that source updates usually happen whenever the target property changes, which is fine for <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>es and other simple controls.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, for text fields, updating after every keystroke can diminish performance and it denies the user the usual opportunity to backspace and fix typing errors before committing to the new value.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>That is why the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox.Text%2A&gt;</ph> property has a default value of <ph id="ph2">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph> instead of <ph id="ph3">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> property page for information about how to find the default <ph id="ph2">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> value of a dependency property.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following table provides an example scenario for each <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> value using the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> as an example:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>UpdateSourceTrigger value</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When the Source Value Gets Updated</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Example Scenario for TextBox</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>LostFocus (default for <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox.Text%2A?displayProperty=fullName&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>When the TextBox control loses focus</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> that is associated with validation logic (see Data Validation section)</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>PropertyChanged</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>As you type into the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls in a chat room window</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Explicit</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When the application calls <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression.UpdateSource%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls in an editable form (updates the source values only when the user clicks the submit button)</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Control When the TextBox Text Updates the Source<ept id="p1">](../../../../docs/framework/wpf/data/how-to-control-when-the-textbox-text-updates-the-source.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Creating a Binding</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>To recapitulate some of the concepts discussed in the previous sections, you establish a binding using the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object, and each binding usually has four components: binding target, target property, binding source, and a path to the source value to use.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This section discusses how to set up a binding.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Consider the following example, in which the binding source object is a class named <bpt id="p1">*</bpt>MyData<ept id="p1">*</ept> that is defined in the <bpt id="p2">*</bpt>SDKSample<ept id="p2">*</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For demonstration purposes, <bpt id="p1">*</bpt>MyData<ept id="p1">*</ept> class has a string property named <bpt id="p2">*</bpt>ColorName<ept id="p2">*</ept>, of which the value is set to "Red".</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Thus, this example generates a button with a red background.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more details on the binding declaration syntax and for examples of how to set up a binding in code, see <bpt id="p1">[</bpt>Binding Declarations Overview<ept id="p1">](../../../../docs/framework/wpf/data/binding-declarations-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If we apply this example to our basic diagram, the resulting figure looks like the following.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This is a <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding because the Background property supports <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding by default.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data binding diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingbuttonbackgroundexample.png "</bpt>DataBindingButtonBackgroundExample<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You may wonder why this works even though the <bpt id="p1">*</bpt>ColorName<ept id="p1">*</ept> property is of type string while the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property is of type <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This is default type conversion at work and is discussed in the <bpt id="p1">[</bpt>Data Conversion<ept id="p1">](#data_conversion)</ept> section.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specifying the Binding Source</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Notice that in the previous example, the binding source is specified by setting the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> property on the <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> then inherits the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> value from the <ph id="ph3">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>, which is its parent element.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To reiterate, the binding source object is one of the four necessary components of a binding.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Therefore, without the binding source object being specified, the binding would do nothing.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>There are several ways to specify the binding source object.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> property on a parent element is useful when you are binding multiple properties to the same source.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>However, sometimes it may be more appropriate to specify the binding source on individual binding declarations.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For the previous example, instead of using the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> property, you can specify the binding source by setting the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph> property directly on the binding declaration of the button, as in the following example:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Other than setting the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> property on an element directly, inheriting the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> value from an ancestor (such as the button in the first example), and explicitly specifying the binding source by setting the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph> property on the <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph> (such as the button the last example), you can also use the <ph id="ph5">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph> property or the <ph id="ph6">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph> property to specify the binding source.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph> property is useful when you are binding to other elements in your application, such as when you are using a slider to adjust the width of a button.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph> property is useful when the binding is specified in a <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Specify the Binding Source<ept id="p1">](../../../../docs/framework/wpf/data/how-to-specify-the-binding-source.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Specifying the Path to the Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If your binding source is an object, you use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property to specify the value to use for your binding.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If you are binding to <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> data, you use the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> property to specify the value.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In some cases, it may be applicable to use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property even when your data is <ph id="ph2">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For example, if you want to access the Name property of a returned XmlNode (as a result of an XPath query), you should use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property in addition to the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For syntax information and examples, see the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> property pages.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Note that although we have emphasized that the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> to the value to use is one of the four necessary components of a binding, in the scenarios which you want to bind to an entire object, the value to use would be the same as the binding source object.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>In those cases, it is applicable to not specify a <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The above example uses the empty binding syntax: {Binding}.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> inherits the DataContext from a parent DockPanel element (not shown in this example).</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When the path is not specified, the default is to bind to the entire object.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>In other words, in this example, the path has been left out because we are binding the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.ItemsSource%2A&gt;</ph> property to the entire object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>(See the <bpt id="p1">[</bpt>Binding to Collections<ept id="p1">](#binding_to_collections)</ept> section for an in-depth discussion.)</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Other than binding to a collection, this scenario is also useful when you want to bind to an entire object instead of just a single property of an object.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>For example, if your source object is of type string and you simply want to bind to the string itself.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Another common scenario is when you want to bind an element to an object with several properties.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Note that you may need to apply custom logic so that the data is meaningful to your bound target property.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The custom logic may be in the form of a custom converter (if default type conversion does not exist).</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Data Conversion<ept id="p1">](#data_conversion)</ept> for information about converters.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Binding and BindingExpression</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Before getting into other features and usages of data binding, it would be useful to introduce the <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>As you have seen in previous sections, the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> class is the high-level class for the declaration of a binding; the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> class provides many properties that allow you to specify the characteristics of a binding.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A related class, <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph>, is the underlying object that maintains the connection between the source and the target.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A binding contains all the information that can be shared across several binding expressions.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph> is an instance expression that cannot be shared and contains all the instance information of the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For example, consider the following, where <bpt id="p1">*</bpt>myDataObject<ept id="p1">*</ept> is an instance of <bpt id="p2">*</bpt>MyData<ept id="p2">*</ept> class, <bpt id="p3">*</bpt>myBinding<ept id="p3">*</ept> is the source <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object, and <bpt id="p4">*</bpt>MyData<ept id="p4">*</ept> class is a defined class that contains a string property named <bpt id="p5">*</bpt>MyDataProperty<ept id="p5">*</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This example binds the text content of <bpt id="p1">*</bpt>mytext<ept id="p1">*</ept>, an instance of <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, to <bpt id="p2">*</bpt>MyDataProperty<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You can use the same <bpt id="p1">*</bpt>myBinding<ept id="p1">*</ept> object to create other bindings.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, you may use <bpt id="p1">*</bpt>myBinding<ept id="p1">*</ept> object to bind the text content of a check box to <bpt id="p2">*</bpt>MyDataProperty<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In that scenario, there will be two instances of <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph> sharing the <bpt id="p1">*</bpt>myBinding<ept id="p1">*</ept> object.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph> object can be obtained through the return value of calling <ph id="ph2">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A&gt;</ph> on a data-bound object.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The following topics demonstrate some of the usages of the <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get the Binding Object from a Bound Target Property<ept id="p1">](../../../../docs/framework/wpf/data/how-to-get-the-binding-object-from-a-bound-target-property.md)</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Control When the TextBox Text Updates the Source<ept id="p1">](../../../../docs/framework/wpf/data/how-to-control-when-the-textbox-text-updates-the-source.md)</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Data Conversion</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In the previous example, the button is red because its <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property is bound to a string property with the value "Red".</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This works because a type converter is present on the <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> type to convert the string value to a <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To add this information to the figure in the <bpt id="p1">[</bpt>Creating a Binding<ept id="p1">](#creating_a_binding)</ept> section, the diagram looks like the following:</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data binding diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingbuttondefaultconversion.png "</bpt>DataBindingButtonDefaultConversion<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>However, what if instead of having a property of type string your binding source object has a <bpt id="p1">*</bpt>Color<ept id="p1">*</ept> property of type <ph id="ph1">&lt;xref:System.Windows.Media.Color&gt;</ph>?</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>In that case, in order for the binding to work you would need to first turn the <bpt id="p1">*</bpt>Color<ept id="p1">*</ept> property value into something that the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property accepts.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>You would need to create a custom converter by implementing the <ph id="ph1">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph> interface, as in the following example:</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph> reference page provides more information.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Now the custom converter is used instead of default conversion, and our diagram looks like this:</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data binding diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingconvertercolorexample.png "</bpt>DataBindingConverterColorExample<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To reiterate, default conversions may be available because of type converters that are present in the type being bound to.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This behavior will depend on which type converters are available in the target.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If in doubt, create your own converter.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Following are some typical scenarios where it makes sense to implement a data converter:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Your data should be displayed differently, depending on culture.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>For instance, you might want to implement a currency converter or a calendar date/time converter based on the values or standards used in a particular culture.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The data being used is not necessarily intended to change the text value of a property, but is instead intended to change some other value, such as the source for an image, or the color or style of the display text.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Converters can be used in this instance by converting the binding of a property that might not seem to be appropriate, such as binding a text field to the Background property of a table cell.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>More than one control or to multiple properties of controls are bound to the same data.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In this case, the primary binding might just display the text, whereas other bindings handle specific display issues but still use the same binding as source information.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>So far we have not yet discussed <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph>, where a target property has a collection of bindings.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>In the case of a <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph>, you use a custom <ph id="ph2">&lt;xref:System.Windows.Data.IMultiValueConverter&gt;</ph> to produce a final value from the values of the bindings.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>For example, color may be computed from red, blue, and green values, which can be values from the same or different binding source objects.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> class page for examples and information.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Binding to Collections</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A binding source object can be treated either as a single object of which the properties contain data or as a data collection of polymorphic objects that are often grouped together (such as the result of a query to a database).</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>So far we've only discussed binding to single objects, however, binding to a data collection is a common scenario.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For example, a common scenario is to use an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> such as a <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.ListView&gt;</ph>, or <ph id="ph4">&lt;xref:System.Windows.Controls.TreeView&gt;</ph> to display a data collection, such as in the application shown in the <bpt id="p1">[</bpt>What Is Data Binding?<ept id="p1">](#what_is_data_binding)</ept> section.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Fortunately, our basic diagram still applies.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If you are binding an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> to a collection, the diagram looks like this:</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data binding ItemsControl diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingitemscontrol.png "</bpt>DataBindingItemsControl<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>As shown in this diagram, to bind an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> to a collection object, <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.ItemsSource%2A&gt;</ph> property is the property to use.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>You can think of <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.ItemsSource%2A&gt;</ph> property as the content of the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Note that the binding is <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> because the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.ItemsSource%2A&gt;</ph> property supports <ph id="ph3">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> binding by default.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>How to Implement Collections</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>You can enumerate over any collection that implements the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>However, to set up dynamic bindings so that insertions or deletions in the collection update the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> automatically, the collection must implement the <ph id="ph2">&lt;xref:System.Collections.Specialized.INotifyCollectionChanged&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This interface exposes an event that should be raised whenever the underlying collection changes.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.ObservableCollection%601&gt;</ph> class, which is a built-in implementation of a data collection that exposes the <ph id="ph3">&lt;xref:System.Collections.Specialized.INotifyCollectionChanged&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Note that to fully support transferring data values from source objects to targets, each object in your collection that supports bindable properties must also implement the <ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Binding Sources Overview<ept id="p1">](../../../../docs/framework/wpf/data/binding-sources-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Before implementing your own collection, consider using <ph id="ph1">&lt;xref:System.Collections.ObjectModel.ObservableCollection%601&gt;</ph> or one of the existing collection classes, such as <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>, and <ph id="ph4">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph>, among many others.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If you have an advanced scenario and want to implement your own collection, consider using <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>, which provides a non-generic collection of objects that can be individually accessed by index and thus the best performance.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Collection Views</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Once your <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> is bound to a data collection, you may want to sort, filter, or group the data.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>To do that, you use collection views, which are classes that implement the <ph id="ph1">&lt;xref:System.ComponentModel.ICollectionView&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>What Are Collection Views?</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A collection view is a layer on top of a binding source collection that allows you to navigate and display the source collection based on sort, filter, and group queries, without having to change the underlying source collection itself.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>A collection view also maintains a pointer to the current item in the collection.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If the source collection implements the <ph id="ph1">&lt;xref:System.Collections.Specialized.INotifyCollectionChanged&gt;</ph> interface, the changes raised by the <ph id="ph2">&lt;xref:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&gt;</ph> event are propagated to the views.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Because views do not change the underlying source collections, each source collection can have multiple views associated with it.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For example, you may have a collection of <bpt id="p1">*</bpt>Task<ept id="p1">*</ept> objects.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>With the use of views, you can display that same data in different ways.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>For example, on the left side of your page you may want to show tasks sorted by priority, and on the right side, grouped by area.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>How to Create a View</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>One way to create and use a view is to instantiate the view object directly and then use it as the binding source.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For example, consider the <bpt id="p1">[</bpt>Data Binding Demo<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=163703)</ept> application shown in the <bpt id="p2">[</bpt>What Is Data Binding?<ept id="p2">](#what_is_data_binding)</ept> section.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The application is implemented such that the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> binds to a view over the data collection instead of the data collection directly.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The following example is extracted from the <bpt id="p1">[</bpt>Data Binding Demo<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=163703)</ept> application.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.CollectionViewSource&gt;</ph> class is the <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> proxy of a class that inherits from <ph id="ph3">&lt;xref:System.Windows.Data.CollectionView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>In this particular example, the <ph id="ph1">&lt;xref:System.Windows.Data.CollectionViewSource.Source%2A&gt;</ph> of the view is bound to the <bpt id="p1">*</bpt>AuctionItems<ept id="p1">*</ept> collection (of type <ph id="ph2">&lt;xref:System.Collections.ObjectModel.ObservableCollection%601&gt;</ph>) of the current application object.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The resource <bpt id="p1">*</bpt>listingDataView<ept id="p1">*</ept> then serves as the binding source for elements in the application, such as the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>To create another view for the same collection, you can create another <ph id="ph1">&lt;xref:System.Windows.Data.CollectionViewSource&gt;</ph> instance and give it a different <ph id="ph2">`x:Key`</ph> name.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The following table shows which view data types are created as the default collection view or by <ph id="ph1">&lt;xref:System.Windows.Data.CollectionViewSource&gt;</ph> based on the source collection type.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Source collection type</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Collection view type</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>An internal type based on <ph id="ph1">&lt;xref:System.Windows.Data.CollectionView&gt;</ph></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Cannot group items.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Fastest.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Using a Default View</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Specifying a collection view as a binding source is one way to create and use a collection view.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>WPF also creates a default collection view for every collection used as a binding source.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>If you bind directly to a collection, WPF binds to its default view.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Note that this default view is shared by all bindings to the same collection, so a change made to a default view by one bound control or code (such as sorting or a change to the current item pointer, discussed later) is reflected in all other bindings to the same collection.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>To get the default view, you use the <ph id="ph1">&lt;xref:System.Windows.Data.CollectionViewSource.GetDefaultView%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Get the Default View of a Data Collection<ept id="p1">](../../../../docs/framework/wpf/data/how-to-get-the-default-view-of-a-data-collection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Collection Views with ADO.NET DataTables</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>To improve performance, collection views for ADO.NET <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> objects delegate sorting and filtering to the <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This causes sorting and filtering to be shared across all collection views of the data source.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>To enable each collection view to sort and filter independently, initialize each collection view with its own <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Sorting</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>As mentioned before, views can apply a sort order to a collection.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>As it exists in the underlying collection, your data may or may not have a relevant, inherent order.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The view over the collection allows you to impose an order, or change the default order, based on comparison criteria that you supply.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Because it is a client-based view of the data, a common scenario is that the user might want to sort columns of tabular data per the value that the column corresponds to.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Using views, this user-driven sort can be applied, again without making any changes to the underlying collection or even having to requery for the collection content.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Sort a GridView Column When a Header Is Clicked<ept id="p1">](../../../../docs/framework/wpf/controls/how-to-sort-a-gridview-column-when-a-header-is-clicked.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The following example shows the sorting logic of the "Sort by category and date" <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> of the application <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> in the <bpt id="p1">[</bpt>What Is Data Binding?<ept id="p1">](#what_is_data_binding)</ept> section:</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Filtering</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Views can also apply a filter to a collection.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>This means that although an item might exist in the collection, this particular view is intended to show only a certain subset of the full collection.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>You might filter on a condition in the data.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>For instance, as is done by the application in the <bpt id="p1">[</bpt>What Is Data Binding?<ept id="p1">](#what_is_data_binding)</ept> section, the "Show only bargains" <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> contains logic to filter out items that cost $25 or more.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The following code is executed to set <bpt id="p1">*</bpt>ShowOnlyBargainsFilter<ept id="p1">*</ept> as the <ph id="ph1">&lt;xref:System.Windows.Data.CollectionViewSource.Filter&gt;</ph> event handler when that <ph id="ph2">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is selected:</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>ShowOnlyBargainsFilter<ept id="p1">*</ept> event handler has the following implementation:</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>If you are using one of the <ph id="ph1">&lt;xref:System.Windows.Data.CollectionView&gt;</ph> classes directly instead of <ph id="ph2">&lt;xref:System.Windows.Data.CollectionViewSource&gt;</ph>, you would use the <ph id="ph3">&lt;xref:System.Windows.Data.CollectionView.Filter%2A&gt;</ph> property to specify a callback.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Filter Data in a View<ept id="p1">](../../../../docs/framework/wpf/data/how-to-filter-data-in-a-view.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Grouping</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Except for the internal class that views an <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> collection, all collection views support the functionality of grouping, which allows the user to partition the collection in the collection view into logical groups.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The groups can be explicit, where the user supplies a list of groups, or implicit, where the groups are generated dynamically depending on the data.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The following example shows the logic of the "Group by category" <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>For another grouping example, see <bpt id="p1">[</bpt>Group Items in a ListView That Implements a GridView<ept id="p1">](../../../../docs/framework/wpf/controls/how-to-group-items-in-a-listview-that-implements-a-gridview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Current Item Pointers</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Views also support the notion of a current item.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>You can navigate through the objects in a collection view.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>As you navigate, you are moving an item pointer that allows you to retrieve the object that exists at that particular location in the collection.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Navigate Through the Objects in a Data CollectionView<ept id="p1">](../../../../docs/framework/wpf/data/how-to-navigate-through-the-objects-in-a-data-collectionview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Because WPF binds to a collection only by using a view (either a view you specify, or the collection's default view), all bindings to collections have a current item pointer.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>When binding to a view, the slash ("/") character in a <ph id="ph1">`Path`</ph> value designates the current item of the view.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>In the following example, the data context is a collection view.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The first line binds to the collection.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The second line binds to the current item in the collection.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The third line binds to the <ph id="ph1">`Description`</ph> property of the current item in the collection.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The slash and property syntax can also be stacked to traverse a hierarchy of collections.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The following example binds to the current item of a collection named <ph id="ph1">`Offices`</ph>, which is a property of the current item of the source collection.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The current item pointer can be affected by any sorting or filtering that is applied to the collection.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Sorting preserves the current item pointer on the last item selected, but the collection view is now restructured around it.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>(Perhaps the selected item was at the beginning of the list before, but now the selected item might be somewhere in the middle.) Filtering preserves the selected item if that selection remains in view after the filtering.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Otherwise, the current item pointer is set to the first item of the filtered collection view.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Master-Detail Binding Scenario</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The notion of a current item is useful not only for navigation of items in a collection, but also for the master-detail binding scenario.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Consider the application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> in the <bpt id="p1">[</bpt>What Is Data Binding?<ept id="p1">](#what_is_data_binding)</ept> section again.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>In that application, the selection within the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> determines the content shown in the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>To put it in another way, when a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> item is selected, the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> shows the details of the selected item.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>You can implement the master-detail scenario simply by having two or more controls bound to the same view.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The following example from the <bpt id="p1">[</bpt>Data Binding Demo<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=163703)</ept> shows the markup of the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> you see on the application <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> in the <bpt id="p2">[</bpt>What Is Data Binding?<ept id="p2">](#what_is_data_binding)</ept> section:</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Notice that both of the controls are bound to the same source, the <bpt id="p1">*</bpt>listingDataView<ept id="p1">*</ept> static resource (see the definition of this resource in the <bpt id="p2">[</bpt>How to Create a View section<ept id="p2">](#how_to_create_a_view)</ept>).</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>This works because when a singleton object (the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> in this case) is bound to a collection view, it automatically binds to the <ph id="ph2">&lt;xref:System.Windows.Data.CollectionView.CurrentItem%2A&gt;</ph> of the view.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">&lt;xref:System.Windows.Data.CollectionViewSource&gt;</ph> objects automatically synchronize currency and selection.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>If your list control is not bound to a <ph id="ph1">&lt;xref:System.Windows.Data.CollectionViewSource&gt;</ph> object as in this example, then you would need to set its <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem%2A&gt;</ph> property to <ph id="ph3">`true`</ph> for this to work.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>For other examples, see <bpt id="p1">[</bpt>Bind to a Collection and Display Information Based on Selection<ept id="p1">](../../../../docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md)</ept> and <bpt id="p2">[</bpt>Use the Master-Detail Pattern with Hierarchical Data<ept id="p2">](../../../../docs/framework/wpf/data/how-to-use-the-master-detail-pattern-with-hierarchical-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>You may have noticed that the above example uses a template.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>In fact, the data would not be displayed the way we wish without the use of templates (the one explicitly used by the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> and the one implicitly used by the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>We now turn to data templating in the next section.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Data Templating</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Without the use of data templates, our application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> in the <bpt id="p1">[</bpt>What Is Data Binding?<ept id="p1">](#what_is_data_binding)</ept> section would look like the following:</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data Binding Demo without Data Templates<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingdemotemplates.png "</bpt>DataBindingDemoTemplates<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>As shown in the example in the previous section, both the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> control and the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> are bound to the entire collection object (or more specifically, the view over the collection object) of <bpt id="p1">*</bpt>AuctionItem<ept id="p1">*</ept>s.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Without specific instructions of how to display the data collection, the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> is displaying a string representation of each object in the underlying collection and the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> is displaying a string representation of the object it is bound to.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>To solve that problem, the application defines <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>s.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>As shown in the example in the previous section, the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> explicitly uses the <bpt id="p1">*</bpt>detailsProductListingTemplate<ept id="p1">*</ept><ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> control implicitly uses the following <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> when displaying the <bpt id="p1">*</bpt>AuctionItem<ept id="p1">*</ept> objects in the collection:</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>With the use of those two <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>s, the resulting UI is the one shown in the <bpt id="p1">[</bpt>What Is Data Binding?<ept id="p1">](#what_is_data_binding)</ept> section.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>As you can see from that screenshot, in addition to letting you place data in your controls, <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>s allow you to define compelling visuals for your data.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.DataTrigger&gt;</ph>s are used in the above <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> so that <bpt id="p1">*</bpt>AuctionItem<ept id="p1">*</ept>s with <bpt id="p2">*</bpt>SpecialFeatures<ept id="p2">*</ept> value of <bpt id="p3">*</bpt>HighLight<ept id="p3">*</ept> would be displayed with an orange border and a star.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>For more information about data templates, see the <bpt id="p1">[</bpt>Data Templating Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-templating-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Data Validation</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Most applications that take user input need to have validation logic to ensure that the user has entered the expected information.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The validation checks can be based on type, range, format, or other application-specific requirements.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>This section discusses how data validation works in the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Associating Validation Rules with a Binding</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> data binding model allows you to associate <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A&gt;</ph> with your <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>For example, the following example binds a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> to a property named <ph id="ph2">`StartPrice`</ph> and adds a <ph id="ph3">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> object to the <ph id="ph4">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> object checks whether the value of a property is valid.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> has the following two types of built-in <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> objects:</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> checks for exceptions thrown during the update of the binding source property.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>In the previous example, <ph id="ph1">`StartPrice`</ph> is of type integer.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>When the user enters a value that cannot be converted to an integer, an exception is thrown, causing the binding to be marked as invalid.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>An alternative syntax to setting the <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> explicitly is to set the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A&gt;</ph> property to <ph id="ph3">`true`</ph> on your <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph> object checks for errors that are raised by objects that implement the <ph id="ph2">&lt;xref:System.ComponentModel.IDataErrorInfo&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>For an example of using this validation rule, see <ph id="ph1">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>An alternative syntax to setting the <ph id="ph1">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph> explicitly is to set the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A&gt;</ph> property to <ph id="ph3">`true`</ph> on your <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>You can also create your own validation rule by deriving from the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> class and implementing the <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The following example shows the rule used by the <bpt id="p1">*</bpt>Add Product Listing<ept id="p1">*</ept> "Start Date" <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> from the <bpt id="p2">[</bpt>What Is Data Binding?<ept id="p2">](#what_is_data_binding)</ept> section:</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>StartDateEntryForm<ept id="p1">*</ept> <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> uses this <bpt id="p2">*</bpt>FutureDateRule<ept id="p2">*</ept>, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Note that because the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> value is <ph id="ph2">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>, the binding engine updates the source value on every keystroke, which means it also checks every rule in the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A&gt;</ph> collection on every keystroke.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>We discuss this further in the Validation Process section.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Providing Visual Feedback</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>If the user enters an invalid value, you may want to provide some feedback about the error on the application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>One way to provide such feedback is to set the <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A?displayProperty=fullName&gt;</ph> attached property to a custom <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>As shown in the previous subsection, the <bpt id="p1">*</bpt>StartDateEntryForm<ept id="p1">*</ept> <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> uses an <ph id="ph2">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A&gt;</ph> called <bpt id="p2">*</bpt>validationTemplate<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The following example shows the definition of <bpt id="p1">*</bpt>validationTemplate<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.AdornedElementPlaceholder&gt;</ph> element specifies where the control being adorned should be placed.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>In addition, you may also use a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> to display the error message.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Both the <bpt id="p1">*</bpt>StartDateEntryForm<ept id="p1">*</ept> and the <bpt id="p2">*</bpt>StartPriceEntryForm<ept id="p2">*</ept><ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>es use the style <bpt id="p3">*</bpt>textStyleTextBox<ept id="p3">*</ept>, which creates a <ph id="ph2">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> that displays the error message.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The following example shows the definition of <bpt id="p1">*</bpt>textStyleTextBox<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The attached property <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName&gt;</ph> is <ph id="ph2">`true`</ph> when one or more of the bindings on the properties of the bound element are in error.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>With the custom <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>, the <bpt id="p1">*</bpt>StartDateEntryForm<ept id="p1">*</ept> <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> looks like the following when there is a validation error:</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data binding validation error<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingdemo-validation.PNG "</bpt>DataBindingDemo_Validation<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> has associated validation rules but you do not specify an <ph id="ph2">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A&gt;</ph> on the bound control, a default <ph id="ph3">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A&gt;</ph> will be used to notify users when there is a validation error.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A&gt;</ph> is a control template that defines a red border in the adorner layer.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>With the default <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>, the <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> of the <bpt id="p1">*</bpt>StartPriceEntryForm<ept id="p1">*</ept> <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> looks like the following when there is a validation error:</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data binding validation error<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databindingdemo-validationdefault.PNG "</bpt>DataBindingDemo_ValidationDefault<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>For an example of how to provide logic to validate all controls in a dialog box, see the Custom Dialog Boxes section in the <bpt id="p1">[</bpt>Dialog Boxes Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/dialog-boxes-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Validation Process</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Validation usually occurs when the value of a target is transferred to the binding source property.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>This occurs on <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> bindings.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>To reiterate, what causes a source update depends on the value of the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> property, as described in the <bpt id="p1">[</bpt>What Triggers Source Updates<ept id="p1">](#what_triggers_source_updates)</ept> section.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The following describes the <bpt id="p1">*</bpt>validation<ept id="p1">*</ept> process.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Note that if a validation error or other type of error occurs at any time during this process, the process is halted.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The binding engine checks if there are any custom <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> objects defined whose <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> is set to <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> for that <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph>, in which case it calls the <ph id="ph5">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method on each <ph id="ph6">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> until one of them runs into an error or until all of them pass.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The binding engine then calls the converter, if one exists.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>If the converter succeeds, the binding engine checks if there are any custom <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> objects defined whose <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> is set to <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> for that <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph>, in which case it calls the <ph id="ph5">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method on each <ph id="ph6">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> that has <ph id="ph7">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> set to <ph id="ph8">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> until one of them runs into an error or until all of them pass.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The binding engine sets the source property.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The binding engine checks if there are any custom <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> objects defined whose <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> is set to <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> for that <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph>, in which case it calls the <ph id="ph5">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method on each <ph id="ph6">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> that has <ph id="ph7">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> set to <ph id="ph8">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> until one of them runs into an error or until all of them pass.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph> is associated with a binding and its <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> is set to the default, <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph>, the <ph id="ph4">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph> is checked at this point.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>This is also the point when bindings that have the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A&gt;</ph> set to <ph id="ph2">`true`</ph> are checked.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The binding engine checks if there are any custom <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> objects defined whose <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> is set to <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> for that <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph>, in which case it calls the <ph id="ph5">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method on each <ph id="ph6">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> that has <ph id="ph7">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> set to <ph id="ph8">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> until one of them runs into an error or until all of them pass.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> does not pass at any time throughout this process, the binding engine creates a <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> object and adds it to the <ph id="ph3">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> collection of the bound element.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Before the binding engine runs the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> objects at any given step, it removes any <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> that was added to the <ph id="ph3">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> attached property of the bound element during that step.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> whose <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> is set to <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph> failed, the next time the validation process occurs, the binding engine removes that <ph id="ph4">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> immediately before it calls any <ph id="ph5">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> that has <ph id="ph6">&lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt;</ph> set to <ph id="ph7">&lt;xref:System.Windows.Controls.ValidationStep&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> is not empty, the <ph id="ph2">&lt;xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName&gt;</ph> attached property of the element is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Also, if the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.NotifyOnValidationError%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> is set to <ph id="ph3">`true`</ph>, then the binding engine raises the <ph id="ph4">&lt;xref:System.Windows.Controls.Validation.Error?displayProperty=fullName&gt;</ph> attached event on the element.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Also note that a valid value transfer in either direction (target to source or source to target) clears the <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>If the binding either has an <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> associated with it, or had the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph> and an exception is thrown when the binding engine sets the source, the binding engine checks to see if there is a <ph id="ph4">&lt;xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>You have the option to use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A&gt;</ph> callback to provide a custom handler for handling exceptions.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A&gt;</ph> is not specified on the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>, the binding engine creates a <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> with the exception and adds it to the <ph id="ph4">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> collection of the bound element.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Debugging Mechanism</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>You can set the attached property <ph id="ph1">&lt;xref:System.Diagnostics.PresentationTraceSources.TraceLevel%2A?displayProperty=fullName&gt;</ph> on a binding-related object to receive information about the status of a specific binding.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph></source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What's New in WPF Version 4.5<ept id="p1">](../../../../docs/framework/wpf/getting-started/whats-new.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Bind to the Results of a LINQ Query<ept id="p1">](../../../../docs/framework/wpf/data/how-to-bind-to-the-results-of-a-linq-query.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-data-binding.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding Demo<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=163703)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How-to Topics<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-how-to-topics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Bind to an ADO.NET Data Source<ept id="p1">](../../../../docs/framework/wpf/data/how-to-bind-to-an-ado-net-data-source.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>