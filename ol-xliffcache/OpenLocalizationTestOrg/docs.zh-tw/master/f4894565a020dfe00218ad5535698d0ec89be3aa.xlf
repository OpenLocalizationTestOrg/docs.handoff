<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4894565a020dfe00218ad5535698d0ec89be3aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\data-types\object-data-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">316b20c90a5b1e539aff3957cd64f4c56b084c3c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65fc2839cace5edd80eae9c53b0494377fc13a7e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Object Data Type | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Object Data Type</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Holds addresses that refer to objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can assign any reference type (string, array, class, or interface) to an <ph id="ph1">`Object`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Object`</ph> variable can also refer to data of any value type (numeric, <ph id="ph2">`Boolean`</ph>, <ph id="ph3">`Char`</ph>, <ph id="ph4">`Date`</ph>, structure, or enumeration).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Object`</ph> data type can point to data of any data type, including any object instance your application recognizes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`Object`</ph> when you do not know at compile time what data type the variable might point to.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The default value of <ph id="ph1">`Object`</ph> is <ph id="ph2">`Nothing`</ph> (a null reference).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Data Types</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can assign a variable, constant, or expression of any data type to an <ph id="ph1">`Object`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To determine the data type an <ph id="ph1">`Object`</ph> variable currently refers to, you can use the <ph id="ph2">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Object`</ph> data type is a reference type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, Visual Basic treats an <ph id="ph1">`Object`</ph> variable as a value type when it refers to data of a value type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Storage</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Whatever data type it refers to, an <ph id="ph1">`Object`</ph> variable does not contain the data value itself, but rather a pointer to the value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It always uses four bytes in computer memory, but this does not include the storage for the data representing the value of the variable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because of the code that uses the pointer to locate the data, <ph id="ph1">`Object`</ph> variables holding value types are slightly slower to access than explicitly typed variables.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Programming Tips</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Interop Considerations.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that pointer types in other environments are not compatible with the Visual Basic <ph id="ph1">`Object`</ph> type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Performance.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A variable you declare with the <ph id="ph1">`Object`</ph> type is flexible enough to contain a reference to any object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, when you invoke a method or property on such a variable, you always incur <bpt id="p1">*</bpt>late binding<ept id="p1">*</ept> (at run time).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To force <bpt id="p1">*</bpt>early binding<ept id="p1">*</ept> (at compile time) and better performance, declare the variable with a specific class name, or cast it to the specific data type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you declare an object variable, try to use a specific class type, for example <ph id="ph1">&lt;xref:System.OperatingSystem&gt;</ph>, instead of the generalized <ph id="ph2">`Object`</ph> type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You should also use the most specific class available, such as <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> instead of <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph>, so that you can access its properties and methods.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can usually use the <bpt id="p1">**</bpt>Classes<ept id="p1">**</ept> list in the <bpt id="p2">**</bpt>Object Browser<ept id="p2">**</ept> to find available class names.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Widening.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All data types and all reference types widen to the <ph id="ph1">`Object`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This means you can convert any type to <ph id="ph1">`Object`</ph> without encountering a <ph id="ph2">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, if you convert between value types and <ph id="ph1">`Object`</ph>, Visual Basic performs operations called <bpt id="p1">*</bpt>boxing<ept id="p1">*</ept> and <bpt id="p2">*</bpt>unboxing<ept id="p2">*</ept>, which make execution slower.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type Characters.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph> has no literal type character or identifier type character.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Framework Type.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The corresponding type in the .NET Framework is the <ph id="ph1">&lt;xref:System.Object?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example illustrates an <ph id="ph1">`Object`</ph> variable pointing to an object instance.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Object&gt;</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Conversion Summary<ept id="p1">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Efficient Use of Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Determine Whether Two Objects Are Related<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-related.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Determine Whether Two Objects Are Identical<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-identical.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>