{"content":"---\ntitle: \"ParamArray (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.ParamArray\"\n  - \"ParamArray\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"ParamArray keyword\"\n  - \"ParamArray keyword, syntax\"\nms.assetid: a5f18789-92bd-488f-9c7e-cf3719963635\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ParamArray (Visual Basic)\nSpecifies that a procedure parameter takes an optional array of elements of the specified type. `ParamArray` can be used only on the last parameter of a parameter list.  \n  \n## Remarks  \n `ParamArray` allows you to pass an arbitrary number of arguments to the procedure. A `ParamArray` parameter is always declared using [ByVal](../../../visual-basic/language-reference/modifiers/byval.md).  \n  \n You can supply one or more arguments to a `ParamArray` parameter by passing an array of the appropriate data type, a comma-separated list of values, or nothing at all. For details, see \"Calling a ParamArray\" in [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md).  \n  \n> [!IMPORTANT]\n>  Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application. If you accept a parameter array from the calling code, you should test its length and take appropriate steps if it is too large for your application.  \n  \n The `ParamArray` modifier can be used in these contexts:  \n  \n [Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See Also  \n [Keywords](../../../visual-basic/language-reference/keywords/index.md)   \n [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)","nodes":[{"pos":[12,54],"content":"ParamArray (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ParamArray (Visual Basic) | Microsoft Docs","pos":[0,42]}]},{"pos":[630,655],"content":"ParamArray (Visual Basic)","linkify":"ParamArray (Visual Basic)","nodes":[{"content":"ParamArray (Visual Basic)","pos":[0,25]}]},{"content":"Specifies that a procedure parameter takes an optional array of elements of the specified type.","pos":[656,751]},{"content":"<ph id=\"ph1\">`ParamArray`</ph> can be used only on the last parameter of a parameter list.","pos":[752,824],"source":"`ParamArray` can be used only on the last parameter of a parameter list."},{"pos":[833,840],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`ParamArray`</ph> allows you to pass an arbitrary number of arguments to the procedure.","pos":[844,926],"source":"`ParamArray` allows you to pass an arbitrary number of arguments to the procedure."},{"content":"A <ph id=\"ph1\">`ParamArray`</ph> parameter is always declared using <bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/byval.md)</ept>.","pos":[927,1046],"source":" A `ParamArray` parameter is always declared using [ByVal](../../../visual-basic/language-reference/modifiers/byval.md)."},{"content":"You can supply one or more arguments to a <ph id=\"ph1\">`ParamArray`</ph> parameter by passing an array of the appropriate data type, a comma-separated list of values, or nothing at all.","pos":[1053,1220],"source":"You can supply one or more arguments to a `ParamArray` parameter by passing an array of the appropriate data type, a comma-separated list of values, or nothing at all."},{"content":"For details, see \"Calling a ParamArray\" in <bpt id=\"p1\">[</bpt>Parameter Arrays<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept>.","pos":[1221,1373],"source":" For details, see \"Calling a ParamArray\" in [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)."},{"pos":[1381,1686],"content":"[!IMPORTANT]\n Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application. If you accept a parameter array from the calling code, you should test its length and take appropriate steps if it is too large for your application.","leadings":["","> "],"nodes":[{"content":" Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application. If you accept a parameter array from the calling code, you should test its length and take appropriate steps if it is too large for your application.","pos":[13,303],"nodes":[{"content":"Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application.","pos":[1,140]},{"content":"If you accept a parameter array from the calling code, you should test its length and take appropriate steps if it is too large for your application.","pos":[141,290]}]}]},{"pos":[1693,1749],"content":"The <ph id=\"ph1\">`ParamArray`</ph> modifier can be used in these contexts:","source":"The `ParamArray` modifier can be used in these contexts:"},{"pos":[1756,1849],"content":"<bpt id=\"p1\">[</bpt>Declare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept>","source":"[Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)"},{"pos":[1856,1951],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[1958,2053],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[2060,2145],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[2154,2162],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Keywords<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2166,2237],"source":"[Keywords](../../../visual-basic/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Parameter Arrays<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept>","pos":[2240,2349],"source":" [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)"}]}