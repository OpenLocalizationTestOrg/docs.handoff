{"content":"---\ntitle: \"C# Coding Conventions (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"coding conventions, C#\"\n  - \"Visual C#, coding conventions\"\n  - \"C# language, coding conventions\"\nms.assetid: f4f60de9-d49b-4fb6-bab1-20e19ea24710\ncaps.latest.revision: 32\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C# Coding Conventions (C# Programming Guide)\nThe [C# Language Specification](http://go.microsoft.com/fwlink/?LinkId=199552) does not define a coding standard. However, the guidelines in this topic are used by Microsoft to develop samples and documentation.  \n  \n Coding conventions serve the following purposes:  \n  \n-   They create a consistent look to the code, so that readers can focus on content, not layout.  \n  \n-   They enable readers to understand the code more quickly by making assumptions based on previous experience.  \n  \n-   They facilitate copying, changing, and maintaining the code.  \n  \n-   They demonstrate C# best practices.  \n  \n## Naming Conventions  \n  \n-   In short examples that do not include [using directives](../../../csharp/language-reference/keywords/using-directive.md), use namespace qualifications. If you know that a namespace is imported by default in a project, you do not have to fully qualify the names from that namespace. Qualified names can be broken after a dot (.) if they are too long for a single line, as shown in the following example.  \n  \n     [!code-cs[csProgGuideCodingConventions#1](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_1.cs)]  \n  \n-   You do not have to change the names of objects that were created by using the Visual Studio designer tools to make them fit other guidelines.  \n  \n## Layout Conventions  \n Good layout uses formatting to emphasize the structure of your code and to make the code easier to read. Microsoft examples and samples conform to the following conventions:  \n  \n-   Use the default Code Editor settings (smart indenting, four-character indents, tabs saved as spaces). For more information, see [Options, Text Editor, C#, Formatting](https://docs.microsoft.com/visualstudio/ide/reference/options-text-editor-csharp-formatting).  \n  \n-   Write only one statement per line.  \n  \n-   Write only one declaration per line.  \n  \n-   If continuation lines are not indented automatically, indent them one tab stop (four spaces).  \n  \n-   Add at least one blank line between method definitions and property definitions.  \n  \n-   Use parentheses to make clauses in an expression apparent, as shown in the following code.  \n  \n     [!code-cs[csProgGuideCodingConventions#2](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_2.cs)]  \n  \n## Commenting Conventions  \n  \n-   Place the comment on a separate line, not at the end of a line of code.  \n  \n-   Begin comment text with an uppercase letter.  \n  \n-   End comment text with a period.  \n  \n-   Insert one space between the comment delimiter (//) and the comment text, as shown in the following example.  \n  \n     [!code-cs[csProgGuideCodingConventions#3](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_3.cs)]  \n  \n-   Do not create formatted blocks of asterisks around comments.  \n  \n## Language Guidelines  \n The following sections describe practices that the C# team follows to prepare code examples and samples.  \n  \n### String Data Type  \n  \n-   Use the `+` operator to concatenate short strings, as shown in the following code.  \n  \n     [!code-cs[csProgGuideCodingConventions#6](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_4.cs)]  \n  \n-   To append strings in loops, especially when you are working with large amounts of text, use a <xref:System.Text.StringBuilder> object.  \n  \n     [!code-cs[csProgGuideCodingConventions#7](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_5.cs)]  \n  \n### Implicitly Typed Local Variables  \n  \n-   Use [implicit typing](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md) for local variables when the type of the variable is obvious from the right side of the assignment, or when the precise type is not important.  \n  \n     [!code-cs[csProgGuideCodingConventions#8](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_6.cs)]  \n  \n-   Do not use [var](../../../csharp/language-reference/keywords/var.md) when the type is not apparent from the right side of the assignment.  \n  \n     [!code-cs[csProgGuideCodingConventions#9](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_7.cs)]  \n  \n-   Do not rely on the variable name to specify the type of the variable. It might not be correct.  \n  \n     [!code-cs[csProgGuideCodingConventions#10](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_8.cs)]  \n  \n-   Avoid the use of `var` in place of [dynamic](../../../csharp/language-reference/keywords/dynamic.md).  \n  \n-   Use implicit typing to determine the type of the loop variable in [for](../../../csharp/language-reference/keywords/for.md) and [foreach](../../../csharp/language-reference/keywords/foreach-in.md) loops.  \n  \n     The following example uses implicit typing in a `for` statement.  \n  \n     [!code-cs[csProgGuideCodingConventions#11](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_9.cs)]  \n  \n     The following example uses implicit typing in a `foreach` statement.  \n  \n     [!code-cs[csProgGuideCodingConventions#12](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_10.cs)]  \n  \n### Unsigned Data Type  \n  \n-   In general, use `int` rather than unsigned types. The use of `int` is common throughout C#, and it is easier to interact with other libraries when you use `int`.  \n  \n### Arrays  \n  \n-   Use the concise syntax when you initialize arrays on the declaration line.  \n  \n     [!code-cs[csProgGuideCodingConventions#13](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_11.cs)]  \n  \n### Delegates  \n  \n-   Use the concise syntax to create instances of a delegate type.  \n  \n     [!code-cs[csProgGuideCodingConventions#14](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_12.cs)]  \n  \n     [!code-cs[csProgGuideCodingConventions#15](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_13.cs)]  \n  \n### try-catch and using Statements in Exception Handling  \n  \n-   Use a [try-catch](../../../csharp/language-reference/keywords/try-catch.md) statement for most exception handling.  \n  \n     [!code-cs[csProgGuideCodingConventions#16](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_14.cs)]  \n  \n-   Simplify your code by using the C# [using statement](../../../csharp/language-reference/keywords/using-statement.md). If you have a [try-finally](../../../csharp/language-reference/keywords/try-finally.md) statement in which the only code in the `finally` block is a call to the <xref:System.IDisposable.Dispose%2A> method, use a `using` statement instead.  \n  \n     [!code-cs[csProgGuideCodingConventions#17](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_15.cs)]  \n  \n### && and &#124;&#124; Operators  \n  \n-   To avoid exceptions and increase performance by skipping unnecessary comparisons, use [&&](../../../csharp/language-reference/operators/conditional-and-operator.md) instead of [&](../../../csharp/language-reference/operators/and-operator.md) and [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md) instead of [&#124;](../../../csharp/language-reference/operators/or-operator.md) when you perform comparisons, as shown in the following example.  \n  \n     [!code-cs[csProgGuideCodingConventions#18](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_16.cs)]  \n  \n### New Operator  \n  \n-   Use the concise form of object instantiation, with implicit typing, as shown in the following declaration.  \n  \n     [!code-cs[csProgGuideCodingConventions#19](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_17.cs)]  \n  \n     The previous line is equivalent to the following declaration.  \n  \n     [!code-cs[csProgGuideCodingConventions#20](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_18.cs)]  \n  \n-   Use object initializers to simplify object creation.  \n  \n     [!code-cs[csProgGuideCodingConventions#21](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_19.cs)]  \n  \n### Event Handling  \n  \n-   If you are defining an event handler that you do not need to remove later, use a lambda expression.  \n  \n     [!code-cs[csProgGuideCodingConventions#22](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_20.cs)]  \n  \n     [!code-cs[csProgGuideCodingConventions#23](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_21.cs)]  \n  \n### Static Members  \n  \n-   Call [static](../../../csharp/language-reference/keywords/static.md) members by using the class name: *ClassName.StaticMember*. This practice makes code more readable by making static access clear.  Do not qualify a static member defined in a base class with the name of a derived class.  While that code compiles, the code readability is misleading, and the code may break in the future if you add a static member with the same name to the derived class.  \n  \n### LINQ Queries  \n  \n-   Use meaningful names for query variables. The following example uses `seattleCustomers` for customers who are located in Seattle.  \n  \n     [!code-cs[csProgGuideCodingConventions#25](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_22.cs)]  \n  \n-   Use aliases to make sure that property names of anonymous types are correctly capitalized, using Pascal casing.  \n  \n     [!code-cs[csProgGuideCodingConventions#26](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_23.cs)]  \n  \n-   Rename properties when the property names in the result would be ambiguous. For example, if your query returns a customer name and a distributor ID, instead of leaving them as `Name` and `ID` in the result, rename them to clarify that `Name` is the name of a customer, and `ID` is the ID of a distributor.  \n  \n     [!code-cs[csProgGuideCodingConventions#27](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_24.cs)]  \n  \n-   Use implicit typing in the declaration of query variables and range variables.  \n  \n     [!code-cs[csProgGuideCodingConventions#25](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_22.cs)]  \n  \n-   Align query clauses under the [from](../../../csharp/language-reference/keywords/from-clause.md) clause, as shown in the previous examples.  \n  \n-   Use [where](../../../csharp/language-reference/keywords/where-clause.md) clauses before other query clauses to ensure that later query clauses operate on the reduced, filtered set of data.  \n  \n     [!code-cs[csProgGuideCodingConventions#29](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_25.cs)]  \n  \n-   Use multiple `from` clauses instead of a [join](../../../csharp/language-reference/keywords/join-clause.md) clause to access inner collections. For example, a collection of `Student` objects might each contain a collection of test scores. When the following query is executed, it returns each score that is over 90, along with the last name of the student who received the score.  \n  \n     [!code-cs[csProgGuideCodingConventions#30](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/coding-conventions_26.cs)]  \n  \n## Security  \n Follow the guidelines in [Secure Coding Guidelines](../../../standard/security/secure-coding-guidelines.md).  \n  \n## See Also  \n [Visual Basic Coding Conventions](../../../visual-basic/programming-guide/program-structure/coding-conventions.md)   \n [Secure Coding Guidelines](../../../standard/security/secure-coding-guidelines.md)","nodes":[{"pos":[4,619],"embed":true,"restype":"x-metadata","content":"title: \"C# Coding Conventions (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"coding conventions, C#\"\n  - \"Visual C#, coding conventions\"\n  - \"C# language, coding conventions\"\nms.assetid: f4f60de9-d49b-4fb6-bab1-20e19ea24710\ncaps.latest.revision: 32\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"C# Coding Conventions (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,61],"content":"C# Coding Conventions (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"C# Coding Conventions (C# Programming Guide) | Microsoft Docs","pos":[0,61]}]}],"path":["title"]}],"yml":true},{"pos":[626,670],"content":"C# Coding Conventions (C# Programming Guide)","linkify":"C# Coding Conventions (C# Programming Guide)","nodes":[{"content":"C# Coding Conventions (C# Programming Guide)","pos":[0,44]}]},{"content":"The <bpt id=\"p1\">[</bpt>C# Language Specification<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=199552)</ept> does not define a coding standard.","pos":[671,784],"source":"The [C# Language Specification](http://go.microsoft.com/fwlink/?LinkId=199552) does not define a coding standard."},{"content":"However, the guidelines in this topic are used by Microsoft to develop samples and documentation.","pos":[785,882]},{"content":"Coding conventions serve the following purposes:","pos":[889,937]},{"content":"They create a consistent look to the code, so that readers can focus on content, not layout.","pos":[947,1039]},{"content":"They enable readers to understand the code more quickly by making assumptions based on previous experience.","pos":[1049,1156]},{"content":"They facilitate copying, changing, and maintaining the code.","pos":[1166,1226]},{"content":"They demonstrate C# best practices.","pos":[1236,1271]},{"pos":[1280,1298],"content":"Naming Conventions","linkify":"Naming Conventions","nodes":[{"content":"Naming Conventions","pos":[0,18]}]},{"content":"In short examples that do not include <bpt id=\"p1\">[</bpt>using directives<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-directive.md)</ept>, use namespace qualifications.","pos":[1308,1459],"source":"In short examples that do not include [using directives](../../../csharp/language-reference/keywords/using-directive.md), use namespace qualifications."},{"content":"If you know that a namespace is imported by default in a project, you do not have to fully qualify the names from that namespace.","pos":[1460,1589]},{"content":"Qualified names can be broken after a dot (.) if they are too long for a single line, as shown in the following example.","pos":[1590,1710]},{"content":"You do not have to change the names of objects that were created by using the Visual Studio designer tools to make them fit other guidelines.","pos":[1868,2009]},{"pos":[2018,2036],"content":"Layout Conventions","linkify":"Layout Conventions","nodes":[{"content":"Layout Conventions","pos":[0,18]}]},{"content":"Good layout uses formatting to emphasize the structure of your code and to make the code easier to read.","pos":[2040,2144]},{"content":"Microsoft examples and samples conform to the following conventions:","pos":[2145,2213]},{"content":"Use the default Code Editor settings (smart indenting, four-character indents, tabs saved as spaces).","pos":[2223,2324]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Options, Text Editor, C#, Formatting<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/reference/options-text-editor-csharp-formatting)</ept>.","pos":[2325,2483],"source":" For more information, see [Options, Text Editor, C#, Formatting](https://docs.microsoft.com/visualstudio/ide/reference/options-text-editor-csharp-formatting)."},{"content":"Write only one statement per line.","pos":[2493,2527]},{"content":"Write only one declaration per line.","pos":[2537,2573]},{"content":"If continuation lines are not indented automatically, indent them one tab stop (four spaces).","pos":[2583,2676]},{"content":"Add at least one blank line between method definitions and property definitions.","pos":[2686,2766]},{"content":"Use parentheses to make clauses in an expression apparent, as shown in the following code.","pos":[2776,2866]},{"pos":[3023,3045],"content":"Commenting Conventions","linkify":"Commenting Conventions","nodes":[{"content":"Commenting Conventions","pos":[0,22]}]},{"content":"Place the comment on a separate line, not at the end of a line of code.","pos":[3055,3126]},{"content":"Begin comment text with an uppercase letter.","pos":[3136,3180]},{"content":"End comment text with a period.","pos":[3190,3221]},{"content":"Insert one space between the comment delimiter (//) and the comment text, as shown in the following example.","pos":[3231,3339]},{"content":"Do not create formatted blocks of asterisks around comments.","pos":[3497,3557]},{"pos":[3566,3585],"content":"Language Guidelines","linkify":"Language Guidelines","nodes":[{"content":"Language Guidelines","pos":[0,19]}]},{"content":"The following sections describe practices that the C# team follows to prepare code examples and samples.","pos":[3589,3693]},{"pos":[3703,3719],"content":"String Data Type","linkify":"String Data Type","nodes":[{"content":"String Data Type","pos":[0,16]}]},{"pos":[3729,3811],"content":"Use the <ph id=\"ph1\">`+`</ph> operator to concatenate short strings, as shown in the following code.","source":"Use the `+` operator to concatenate short strings, as shown in the following code."},{"content":"To append strings in loops, especially when you are working with large amounts of text, use a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[3969,4103],"source":"To append strings in loops, especially when you are working with large amounts of text, use a <xref:System.Text.StringBuilder> object."},{"pos":[4261,4293],"content":"Implicitly Typed Local Variables","linkify":"Implicitly Typed Local Variables","nodes":[{"content":"Implicitly Typed Local Variables","pos":[0,32]}]},{"pos":[4303,4558],"content":"Use <bpt id=\"p1\">[</bpt>implicit typing<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept> for local variables when the type of the variable is obvious from the right side of the assignment, or when the precise type is not important.","source":"Use [implicit typing](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md) for local variables when the type of the variable is obvious from the right side of the assignment, or when the precise type is not important."},{"pos":[4716,4853],"content":"Do not use <bpt id=\"p1\">[</bpt>var<ept id=\"p1\">](../../../csharp/language-reference/keywords/var.md)</ept> when the type is not apparent from the right side of the assignment.","source":"Do not use [var](../../../csharp/language-reference/keywords/var.md) when the type is not apparent from the right side of the assignment."},{"content":"Do not rely on the variable name to specify the type of the variable.","pos":[5011,5080]},{"content":"It might not be correct.","pos":[5081,5105]},{"pos":[5264,5365],"content":"Avoid the use of <ph id=\"ph1\">`var`</ph> in place of <bpt id=\"p1\">[</bpt>dynamic<ept id=\"p1\">](../../../csharp/language-reference/keywords/dynamic.md)</ept>.","source":"Avoid the use of `var` in place of [dynamic](../../../csharp/language-reference/keywords/dynamic.md)."},{"pos":[5375,5578],"content":"Use implicit typing to determine the type of the loop variable in <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../csharp/language-reference/keywords/for.md)</ept> and <bpt id=\"p2\">[</bpt>foreach<ept id=\"p2\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> loops.","source":"Use implicit typing to determine the type of the loop variable in [for](../../../csharp/language-reference/keywords/for.md) and [foreach](../../../csharp/language-reference/keywords/foreach-in.md) loops."},{"pos":[5589,5653],"content":"The following example uses implicit typing in a <ph id=\"ph1\">`for`</ph> statement.","source":"The following example uses implicit typing in a `for` statement."},{"pos":[5813,5881],"content":"The following example uses implicit typing in a <ph id=\"ph1\">`foreach`</ph> statement.","source":"The following example uses implicit typing in a `foreach` statement."},{"pos":[6041,6059],"content":"Unsigned Data Type","linkify":"Unsigned Data Type","nodes":[{"content":"Unsigned Data Type","pos":[0,18]}]},{"content":"In general, use <ph id=\"ph1\">`int`</ph> rather than unsigned types.","pos":[6069,6118],"source":"In general, use `int` rather than unsigned types."},{"content":"The use of <ph id=\"ph1\">`int`</ph> is common throughout C#, and it is easier to interact with other libraries when you use <ph id=\"ph2\">`int`</ph>.","pos":[6119,6230],"source":" The use of `int` is common throughout C#, and it is easier to interact with other libraries when you use `int`."},{"pos":[6240,6246],"content":"Arrays","linkify":"Arrays","nodes":[{"content":"Arrays","pos":[0,6]}]},{"content":"Use the concise syntax when you initialize arrays on the declaration line.","pos":[6256,6330]},{"pos":[6490,6499],"content":"Delegates","linkify":"Delegates","nodes":[{"content":"Delegates","pos":[0,9]}]},{"content":"Use the concise syntax to create instances of a delegate type.","pos":[6509,6571]},{"pos":[6881,6933],"content":"try-catch and using Statements in Exception Handling","linkify":"try-catch and using Statements in Exception Handling","nodes":[{"content":"try-catch and using Statements in Exception Handling","pos":[0,52]}]},{"pos":[6943,7057],"content":"Use a <bpt id=\"p1\">[</bpt>try-catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept> statement for most exception handling.","source":"Use a [try-catch](../../../csharp/language-reference/keywords/try-catch.md) statement for most exception handling."},{"content":"Simplify your code by using the C# <bpt id=\"p1\">[</bpt>using statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-statement.md)</ept>.","pos":[7217,7334],"source":"Simplify your code by using the C# [using statement](../../../csharp/language-reference/keywords/using-statement.md)."},{"content":"If you have a <bpt id=\"p1\">[</bpt>try-finally<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-finally.md)</ept> statement in which the only code in the <ph id=\"ph1\">`finally`</ph> block is a call to the <ph id=\"ph2\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method, use a <ph id=\"ph3\">`using`</ph> statement instead.","pos":[7335,7573],"source":" If you have a [try-finally](../../../csharp/language-reference/keywords/try-finally.md) statement in which the only code in the `finally` block is a call to the <xref:System.IDisposable.Dispose%2A> method, use a `using` statement instead."},{"pos":[7733,7762],"content":"&& and &#124;&#124; Operators","linkify":"&& and &#124;&#124; Operators","nodes":[{"content":"&amp;&amp; and &amp;#124;&amp;#124; Operators","pos":[0,29],"source":"&& and &#124;&#124; Operators"}]},{"pos":[7772,8251],"content":"To avoid exceptions and increase performance by skipping unnecessary comparisons, use <bpt id=\"p1\">[</bpt><ph id=\"ph1\">&amp;&amp;</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept> instead of <bpt id=\"p2\">[</bpt><ph id=\"ph2\">&amp;</ph><ept id=\"p2\">](../../../csharp/language-reference/operators/and-operator.md)</ept> and <bpt id=\"p3\">[</bpt>&amp;#124;&amp;#124;<ept id=\"p3\">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept> instead of <bpt id=\"p4\">[</bpt>&amp;#124;<ept id=\"p4\">](../../../csharp/language-reference/operators/or-operator.md)</ept> when you perform comparisons, as shown in the following example.","source":"To avoid exceptions and increase performance by skipping unnecessary comparisons, use [&&](../../../csharp/language-reference/operators/conditional-and-operator.md) instead of [&](../../../csharp/language-reference/operators/and-operator.md) and [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md) instead of [&#124;](../../../csharp/language-reference/operators/or-operator.md) when you perform comparisons, as shown in the following example."},{"pos":[8411,8423],"content":"New Operator","linkify":"New Operator","nodes":[{"content":"New Operator","pos":[0,12]}]},{"content":"Use the concise form of object instantiation, with implicit typing, as shown in the following declaration.","pos":[8433,8539]},{"content":"The previous line is equivalent to the following declaration.","pos":[8700,8761]},{"content":"Use object initializers to simplify object creation.","pos":[8921,8973]},{"pos":[9133,9147],"content":"Event Handling","linkify":"Event Handling","nodes":[{"content":"Event Handling","pos":[0,14]}]},{"content":"If you are defining an event handler that you do not need to remove later, use a lambda expression.","pos":[9157,9256]},{"pos":[9566,9580],"content":"Static Members","linkify":"Static Members","nodes":[{"content":"Static Members","pos":[0,14]}]},{"content":"Call <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> members by using the class name: <bpt id=\"p2\">*</bpt>ClassName.StaticMember<ept id=\"p2\">*</ept>.","pos":[9590,9717],"source":"Call [static](../../../csharp/language-reference/keywords/static.md) members by using the class name: *ClassName.StaticMember*."},{"content":"This practice makes code more readable by making static access clear.","pos":[9718,9787]},{"content":"Do not qualify a static member defined in a base class with the name of a derived class.","pos":[9789,9877]},{"content":"While that code compiles, the code readability is misleading, and the code may break in the future if you add a static member with the same name to the derived class.","pos":[9879,10045]},{"pos":[10055,10067],"content":"LINQ Queries","linkify":"LINQ Queries","nodes":[{"content":"LINQ Queries","pos":[0,12]}]},{"content":"Use meaningful names for query variables.","pos":[10077,10118]},{"content":"The following example uses <ph id=\"ph1\">`seattleCustomers`</ph> for customers who are located in Seattle.","pos":[10119,10206],"source":" The following example uses `seattleCustomers` for customers who are located in Seattle."},{"content":"Use aliases to make sure that property names of anonymous types are correctly capitalized, using Pascal casing.","pos":[10366,10477]},{"content":"Rename properties when the property names in the result would be ambiguous.","pos":[10637,10712]},{"content":"For example, if your query returns a customer name and a distributor ID, instead of leaving them as <ph id=\"ph1\">`Name`</ph> and <ph id=\"ph2\">`ID`</ph> in the result, rename them to clarify that <ph id=\"ph3\">`Name`</ph> is the name of a customer, and <ph id=\"ph4\">`ID`</ph> is the ID of a distributor.","pos":[10713,10942],"source":" For example, if your query returns a customer name and a distributor ID, instead of leaving them as `Name` and `ID` in the result, rename them to clarify that `Name` is the name of a customer, and `ID` is the ID of a distributor."},{"content":"Use implicit typing in the declaration of query variables and range variables.","pos":[11102,11180]},{"pos":[11340,11479],"content":"Align query clauses under the <bpt id=\"p1\">[</bpt>from<ept id=\"p1\">](../../../csharp/language-reference/keywords/from-clause.md)</ept> clause, as shown in the previous examples.","source":"Align query clauses under the [from](../../../csharp/language-reference/keywords/from-clause.md) clause, as shown in the previous examples."},{"pos":[11489,11677],"content":"Use <bpt id=\"p1\">[</bpt>where<ept id=\"p1\">](../../../csharp/language-reference/keywords/where-clause.md)</ept> clauses before other query clauses to ensure that later query clauses operate on the reduced, filtered set of data.","source":"Use [where](../../../csharp/language-reference/keywords/where-clause.md) clauses before other query clauses to ensure that later query clauses operate on the reduced, filtered set of data."},{"content":"Use multiple <ph id=\"ph1\">`from`</ph> clauses instead of a <bpt id=\"p1\">[</bpt>join<ept id=\"p1\">](../../../csharp/language-reference/keywords/join-clause.md)</ept> clause to access inner collections.","pos":[11837,11980],"source":"Use multiple `from` clauses instead of a [join](../../../csharp/language-reference/keywords/join-clause.md) clause to access inner collections."},{"content":"For example, a collection of <ph id=\"ph1\">`Student`</ph> objects might each contain a collection of test scores.","pos":[11981,12075],"source":" For example, a collection of `Student` objects might each contain a collection of test scores."},{"content":"When the following query is executed, it returns each score that is over 90, along with the last name of the student who received the score.","pos":[12076,12216]},{"pos":[12375,12383],"content":"Security","linkify":"Security","nodes":[{"content":"Security","pos":[0,8]}]},{"pos":[12387,12495],"content":"Follow the guidelines in <bpt id=\"p1\">[</bpt>Secure Coding Guidelines<ept id=\"p1\">](../../../standard/security/secure-coding-guidelines.md)</ept>.","source":"Follow the guidelines in [Secure Coding Guidelines](../../../standard/security/secure-coding-guidelines.md)."},{"pos":[12504,12512],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Visual Basic Coding Conventions<ept id=\"p1\">](../../../visual-basic/programming-guide/program-structure/coding-conventions.md)</ept><ph id=\"ph1\"> </ph>","pos":[12516,12631],"source":"[Visual Basic Coding Conventions](../../../visual-basic/programming-guide/program-structure/coding-conventions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Secure Coding Guidelines<ept id=\"p1\">](../../../standard/security/secure-coding-guidelines.md)</ept>","pos":[12635,12717],"source":"[Secure Coding Guidelines](../../../standard/security/secure-coding-guidelines.md)"}]}