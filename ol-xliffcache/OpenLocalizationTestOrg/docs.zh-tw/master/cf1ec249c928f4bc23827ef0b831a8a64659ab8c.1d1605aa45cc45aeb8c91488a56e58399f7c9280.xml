{"content":"---\ntitle: \"object (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"object_CSharpKeyword\"\n  - \"object\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"object keyword [C#]\"\nms.assetid: 93f60c0b-e17a-40a9-9362-cca5fb77b0e7\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# object (C# Reference)\nThe `object` type is an alias for <xref:System.Object> in the .NET Framework. In the unified type system of C#, all types, predefined and user-defined, reference types and value types, inherit directly or indirectly from <xref:System.Object>. You can assign values of any type to variables of type `object`. When a variable of a value type is converted to object, it is said to be *boxed*. When a variable of type object is converted to a value type, it is said to be *unboxed*. For more information, see [Boxing and Unboxing](../../../csharp/programming-guide/types/boxing-and-unboxing.md).  \n  \n## Example  \n The following sample shows how variables of type `object` can accept values of any data type and how variables of type `object` can use methods on <xref:System.Object> from the .NET Framework.  \n  \n [!code-cs[csrefKeywordsTypes#16](../../../csharp/language-reference/keywords/codesnippet/CSharp/object_1.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)   \n [Value Types](../../../csharp/language-reference/keywords/value-types.md)","nodes":[{"pos":[4,568],"nodes":[{"content":"object (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,38],"content":"object (C# Reference) | Microsoft Docs","nodes":[{"content":"object (C# Reference) | Microsoft Docs","pos":[0,38]}]}],"pos":[6,47],"yaml":true}],"content":"title: \"object (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"object_CSharpKeyword\"\n  - \"object\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"object keyword [C#]\"\nms.assetid: 93f60c0b-e17a-40a9-9362-cca5fb77b0e7\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[575,596],"content":"object (C# Reference)","linkify":"object (C# Reference)","nodes":[{"content":"object (C# Reference)","pos":[0,21]}]},{"content":"The <ph id=\"ph1\">`object`</ph> type is an alias for <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> in the .NET Framework.","pos":[597,674],"source":"The `object` type is an alias for <xref:System.Object> in the .NET Framework."},{"content":"In the unified type system of C#, all types, predefined and user-defined, reference types and value types, inherit directly or indirectly from <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph>.","pos":[675,839],"source":" In the unified type system of C#, all types, predefined and user-defined, reference types and value types, inherit directly or indirectly from <xref:System.Object>."},{"content":"You can assign values of any type to variables of type <ph id=\"ph1\">`object`</ph>.","pos":[840,904],"source":" You can assign values of any type to variables of type `object`."},{"content":"When a variable of a value type is converted to object, it is said to be <bpt id=\"p1\">*</bpt>boxed<ept id=\"p1\">*</ept>.","pos":[905,986],"source":" When a variable of a value type is converted to object, it is said to be *boxed*."},{"content":"When a variable of type object is converted to a value type, it is said to be <bpt id=\"p1\">*</bpt>unboxed<ept id=\"p1\">*</ept>.","pos":[987,1075],"source":" When a variable of type object is converted to a value type, it is said to be *unboxed*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Boxing and Unboxing<ept id=\"p1\">](../../../csharp/programming-guide/types/boxing-and-unboxing.md)</ept>.","pos":[1076,1188],"source":" For more information, see [Boxing and Unboxing](../../../csharp/programming-guide/types/boxing-and-unboxing.md)."},{"pos":[1197,1204],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1208,1400],"content":"The following sample shows how variables of type <ph id=\"ph1\">`object`</ph> can accept values of any data type and how variables of type <ph id=\"ph2\">`object`</ph> can use methods on <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph> from the .NET Framework.","source":"The following sample shows how variables of type `object` can accept values of any data type and how variables of type `object` can use methods on <xref:System.Object> from the .NET Framework."},{"pos":[1407,1516],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsTypes#16<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/object_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsTypes#16](../../../csharp/language-reference/keywords/codesnippet/CSharp/object_1.cs)]"},{"pos":[1525,1550],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[1664,1672],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1676,1736],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1740,1807],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1811,1879],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[1883,1965],"source":"[Reference Types](../../../csharp/language-reference/keywords/reference-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Value Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept>","pos":[1969,2042],"source":"[Value Types](../../../csharp/language-reference/keywords/value-types.md)"}]}