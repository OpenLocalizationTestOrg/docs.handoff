<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27b0d5890c6c49190000e36480633af799d65d27</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\net-native\example-handling-exceptions-when-binding-data.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41be38b2dc189b5b39d9866b72b360f0b7ab70fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95106ce8acd83711a5b3dc864022f1cc9d76be8d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Example: Handling Exceptions When Binding Data | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Example: Handling Exceptions When Binding Data</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic refers to the .NET Native Developer Preview, which is pre-release software.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can download the preview from the <bpt id="p1">[</bpt>Microsoft Connect website<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=394611)</ept> (requires registration).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example shows how to resolve a <bpt id="p1">[</bpt>MissingMetadataException<ept id="p1">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept> exception that is thrown when an app compiled with the <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tool chain tries to bind data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here’s the exception information:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Here's the associated call stack:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>What was the app doing?</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>At the base of the stack, frames from the <bpt id="p1">[</bpt>Windows.UI.Xaml<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.aspx)</ept> namespace indicate that the XAML rendering engine was running.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The use of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A?displayProperty=fullName&gt;</ph> method indicates a reflection-based lookup of a property’s value on the type whose metadata was removed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first step in providing a metadata directive would be to add <ph id="ph1">`serialize`</ph> metadata for the type so that its properties are all accessible:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Is this an isolated case?</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this scenario, if data binding has incomplete metadata for one <ph id="ph1">`ViewModel`</ph>, it may for others, too.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the code is structured in a way that the app’s view models are all in the <ph id="ph1">`App.ViewModels`</ph> namespace, you could use a more general runtime directive:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Could the code be rewritten to not use reflection?</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because data binding is reflection-intensive, changing the code to avoid reflection isn’t feasible.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, there are ways to specify the <ph id="ph1">`ViewModel`</ph> to the XAML page so that the tool chain can associate property bindings with the correct type at compile time and keep the metadata without using a runtime directive.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, you could apply the <bpt id="p1">[</bpt>Windows.UI.Xaml.Data.BindableAttribute<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.data.bindableattribute.aspx)</ept> attribute on properties.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This causes the XAML compiler to generate the required lookup information and avoids requiring a runtime directive in the Default.rd.xml file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../docs/framework/net-native/getting-started-with-net-native.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Example: Troubleshooting Dynamic Programming<ept id="p1">](../../../docs/framework/net-native/example-troubleshooting-dynamic-programming.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>