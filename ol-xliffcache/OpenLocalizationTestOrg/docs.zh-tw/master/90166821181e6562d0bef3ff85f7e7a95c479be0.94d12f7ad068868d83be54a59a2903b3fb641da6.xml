{"content":"---\ntitle: \"How to: Add Controls Without a User Interface to Windows Forms\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nf1_keywords: \n  - \"NonVisualSelection\"\nhelpviewer_keywords: \n  - \"invisible controls [Windows Forms]\"\n  - \"Windows Forms controls, adding to form\"\n  - \"controls [Windows Forms], nonvisual\"\n  - \"Windows Forms controls, nonvisual\"\n  - \"nonvisual controls [Windows Forms]\"\nms.assetid: 52134d9c-cff6-4eed-8e2b-3d5eb3bd494e\n---\n# How to: Add Controls Without a User Interface to Windows Forms\nA nonvisual control (or component) provides functionality to your application. Unlike other controls, components do not provide a user interface to the user and thus do not need to be displayed on the Windows Forms Designer surface. When a component is added to a form, the Windows Forms Designer displays a resizable tray at the bottom of the form where all components are displayed. Once a control has been added to the component tray, you can select the component and set its properties as you would any other control on the form.  \n  \n> [!NOTE]\n>  The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Personalize the Visual Studio IDE](/visualstudio/ide/personalizing-the-visual-studio-ide).  \n  \n### To add a component to a Windows Form  \n  \n1.  Open the form. For details, see [How to: Display Windows Forms in the Designer](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/w5yd62ts(v=vs.100)).  \n  \n2.  In the **Toolbox**, click a component and drag it to your form.  \n  \n     Your component appears in the component tray.  \n  \n Furthermore, components can be added to a form at run time. This is a common scenario, especially because components do not have a visual expression, unlike controls that have a user interface. In the example below, a <xref:System.Windows.Forms.Timer> component is added at run time. (Note that Visual Studio contains a number of different timers; in this case, use a Windows Forms <xref:System.Windows.Forms.Timer> component. For more information about the different timers in Visual Studio, see [Introduction to Server-Based Timers](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/tb9yt5e6(v=vs.90)).)  \n  \n> [!CAUTION]\n>  Components often have control-specific properties that must be set for the component to function effectively. In the case of the <xref:System.Windows.Forms.Timer> component below, you set the `Interval` property. Be sure, when adding components to your project, that you set the properties necessary for that component.  \n  \n#### To add a component to a Windows Form programmatically  \n  \n1.  Create an instance of the <xref:System.Windows.Forms.Timer> class in code.  \n  \n2.  Set the `Interval` property to determine the time between ticks of the timer.  \n  \n3.  Configure any other necessary properties for your component.  \n  \n     The following code shows the creation of a <xref:System.Windows.Forms.Timer> with its `Interval` property set.  \n  \n    ```vb  \n    Public Sub CreateTimer()  \n       Dim timerKeepTrack As New System.Windows.Forms.Timer  \n       timerKeepTrack.Interval = 1000  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    public void createTimer()  \n    {  \n       System.Windows.Forms.Timer timerKeepTrack = new  \n           System.Windows.Forms.Timer();  \n       timerKeepTrack.Interval = 1000;  \n    }  \n    ```  \n  \n    ```cpp  \n    public:  \n       void createTimer()  \n       {  \n          System::Windows::Forms::Timer^ timerKeepTrack = gcnew  \n             System::Windows::Forms::Timer();  \n          timerKeepTrack->Interval = 1000;  \n       }  \n    ```  \n  \n    > [!IMPORTANT]\n    >  You might expose your local computer to a security risk through the network by referencing a malicious UserControl. This would only be a concern in the case of a malicious person creating a damaging custom control, followed by you mistakenly adding it to your project.  \n  \n## See also\n\n- [Windows Forms Controls](index.md)\n- [How to: Add Controls to Windows Forms](how-to-add-controls-to-windows-forms.md)\n- [How to: Add ActiveX Controls to Windows Forms](how-to-add-activex-controls-to-windows-forms.md)\n- [How to: Copy Controls Between Windows Forms](how-to-copy-controls-between-windows-forms.md)\n- [Putting Controls on Windows Forms](putting-controls-on-windows-forms.md)\n- [Labeling Individual Windows Forms Controls and Providing Shortcuts to Them](labeling-individual-windows-forms-controls-and-providing-shortcuts-to-them.md)\n- [Controls to Use on Windows Forms](controls-to-use-on-windows-forms.md)\n- [Windows Forms Controls by Function](windows-forms-controls-by-function.md)\n","nodes":[{"pos":[4,460],"embed":true,"restype":"x-metadata","content":"title: \"How to: Add Controls Without a User Interface to Windows Forms\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nf1_keywords: \n  - \"NonVisualSelection\"\nhelpviewer_keywords: \n  - \"invisible controls [Windows Forms]\"\n  - \"Windows Forms controls, adding to form\"\n  - \"controls [Windows Forms], nonvisual\"\n  - \"Windows Forms controls, nonvisual\"\n  - \"nonvisual controls [Windows Forms]\"\nms.assetid: 52134d9c-cff6-4eed-8e2b-3d5eb3bd494e","nodes":[{"content":"How to: Add Controls Without a User Interface to Windows Forms","nodes":[{"pos":[0,62],"content":"How to: Add Controls Without a User Interface to Windows Forms","nodes":[{"content":"How to: Add Controls Without a User Interface to Windows Forms","pos":[0,62]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[467,529],"content":"How to: Add Controls Without a User Interface to Windows Forms","linkify":"How to: Add Controls Without a User Interface to Windows Forms","nodes":[{"content":"How to: Add Controls Without a User Interface to Windows Forms","pos":[0,62]}]},{"content":"A nonvisual control (or component) provides functionality to your application.","pos":[530,608]},{"content":"Unlike other controls, components do not provide a user interface to the user and thus do not need to be displayed on the Windows Forms Designer surface.","pos":[609,762]},{"content":"When a component is added to a form, the Windows Forms Designer displays a resizable tray at the bottom of the form where all components are displayed.","pos":[763,914]},{"content":"Once a control has been added to the component tray, you can select the component and set its properties as you would any other control on the form.","pos":[915,1063]},{"pos":[1071,1416],"content":"[!NOTE]\n The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Personalize the Visual Studio IDE](/visualstudio/ide/personalizing-the-visual-studio-ide).","leadings":["","> "],"nodes":[{"content":"The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Personalize the Visual Studio IDE](/visualstudio/ide/personalizing-the-visual-studio-ide).","pos":[9,343],"nodes":[{"content":"The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition.","pos":[0,130]},{"content":"To change your settings, choose <bpt id=\"p1\">**</bpt>Import and Export Settings<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept> menu.","pos":[131,216],"source":" To change your settings, choose **Import and Export Settings** on the **Tools** menu."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Personalize the Visual Studio IDE<ept id=\"p1\">](/visualstudio/ide/personalizing-the-visual-studio-ide)</ept>.","pos":[217,334],"source":" For more information, see [Personalize the Visual Studio IDE](/visualstudio/ide/personalizing-the-visual-studio-ide)."}]}]},{"pos":[1426,1462],"content":"To add a component to a Windows Form","linkify":"To add a component to a Windows Form","nodes":[{"content":"To add a component to a Windows Form","pos":[0,36]}]},{"content":"Open the form.","pos":[1472,1486]},{"content":"For details, see <bpt id=\"p1\">[</bpt>How to: Display Windows Forms in the Designer<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/w5yd62ts(v=vs.100))</ept>.","pos":[1487,1649],"source":" For details, see [How to: Display Windows Forms in the Designer](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/w5yd62ts(v=vs.100))."},{"pos":[1659,1722],"content":"In the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, click a component and drag it to your form.","source":"In the **Toolbox**, click a component and drag it to your form."},{"content":"Your component appears in the component tray.","pos":[1733,1778]},{"content":"Furthermore, components can be added to a form at run time.","pos":[1785,1844]},{"content":"This is a common scenario, especially because components do not have a visual expression, unlike controls that have a user interface.","pos":[1845,1978]},{"content":"In the example below, a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component is added at run time.","pos":[1979,2068],"source":" In the example below, a <xref:System.Windows.Forms.Timer> component is added at run time."},{"content":"(Note that Visual Studio contains a number of different timers; in this case, use a Windows Forms <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component.","pos":[2069,2211],"source":" (Note that Visual Studio contains a number of different timers; in this case, use a Windows Forms <xref:System.Windows.Forms.Timer> component."},{"content":"For more information about the different timers in Visual Studio, see <bpt id=\"p1\">[</bpt>Introduction to Server-Based Timers<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/tb9yt5e6(v=vs.90))</ept>.)","pos":[2212,2417],"source":" For more information about the different timers in Visual Studio, see [Introduction to Server-Based Timers](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/tb9yt5e6(v=vs.90)).)"},{"pos":[2425,2758],"content":"[!CAUTION]\n Components often have control-specific properties that must be set for the component to function effectively. In the case of the <xref:System.Windows.Forms.Timer> component below, you set the `Interval` property. Be sure, when adding components to your project, that you set the properties necessary for that component.","leadings":["","> "],"nodes":[{"content":"Components often have control-specific properties that must be set for the component to function effectively. In the case of the <xref:System.Windows.Forms.Timer> component below, you set the `Interval` property. Be sure, when adding components to your project, that you set the properties necessary for that component.","pos":[12,331],"nodes":[{"content":"Components often have control-specific properties that must be set for the component to function effectively.","pos":[0,109]},{"content":"In the case of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component below, you set the <ph id=\"ph2\">`Interval`</ph> property.","pos":[110,212],"source":" In the case of the <xref:System.Windows.Forms.Timer> component below, you set the `Interval` property."},{"content":"Be sure, when adding components to your project, that you set the properties necessary for that component.","pos":[213,319]}]}]},{"pos":[2769,2822],"content":"To add a component to a Windows Form programmatically","linkify":"To add a component to a Windows Form programmatically","nodes":[{"content":"To add a component to a Windows Form programmatically","pos":[0,53]}]},{"pos":[2832,2906],"content":"Create an instance of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> class in code.","source":"Create an instance of the <xref:System.Windows.Forms.Timer> class in code."},{"pos":[2916,2993],"content":"Set the <ph id=\"ph1\">`Interval`</ph> property to determine the time between ticks of the timer.","source":"Set the `Interval` property to determine the time between ticks of the timer."},{"content":"Configure any other necessary properties for your component.","pos":[3003,3063]},{"pos":[3074,3184],"content":"The following code shows the creation of a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> with its <ph id=\"ph2\">`Interval`</ph> property set.","source":"The following code shows the creation of a <xref:System.Windows.Forms.Timer> with its `Interval` property set."},{"pos":[3835,4123],"content":"[!IMPORTANT]\nYou might expose your local computer to a security risk through the network by referencing a malicious UserControl. This would only be a concern in the case of a malicious person creating a damaging custom control, followed by you mistakenly adding it to your project.","leadings":["","    >  "],"nodes":[{"content":"You might expose your local computer to a security risk through the network by referencing a malicious UserControl. This would only be a concern in the case of a malicious person creating a damaging custom control, followed by you mistakenly adding it to your project.","pos":[13,281],"nodes":[{"content":"You might expose your local computer to a security risk through the network by referencing a malicious UserControl.","pos":[0,115]},{"content":"This would only be a concern in the case of a malicious person creating a damaging custom control, followed by you mistakenly adding it to your project.","pos":[116,268]}]}]},{"pos":[4132,4140],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4144,4178],"content":"<bpt id=\"p1\">[</bpt>Windows Forms Controls<ept id=\"p1\">](index.md)</ept>","source":"[Windows Forms Controls](index.md)"},{"pos":[4181,4261],"content":"<bpt id=\"p1\">[</bpt>How to: Add Controls to Windows Forms<ept id=\"p1\">](how-to-add-controls-to-windows-forms.md)</ept>","source":"[How to: Add Controls to Windows Forms](how-to-add-controls-to-windows-forms.md)"},{"pos":[4264,4360],"content":"<bpt id=\"p1\">[</bpt>How to: Add ActiveX Controls to Windows Forms<ept id=\"p1\">](how-to-add-activex-controls-to-windows-forms.md)</ept>","source":"[How to: Add ActiveX Controls to Windows Forms](how-to-add-activex-controls-to-windows-forms.md)"},{"pos":[4363,4455],"content":"<bpt id=\"p1\">[</bpt>How to: Copy Controls Between Windows Forms<ept id=\"p1\">](how-to-copy-controls-between-windows-forms.md)</ept>","source":"[How to: Copy Controls Between Windows Forms](how-to-copy-controls-between-windows-forms.md)"},{"pos":[4458,4531],"content":"<bpt id=\"p1\">[</bpt>Putting Controls on Windows Forms<ept id=\"p1\">](putting-controls-on-windows-forms.md)</ept>","source":"[Putting Controls on Windows Forms](putting-controls-on-windows-forms.md)"},{"pos":[4534,4689],"content":"<bpt id=\"p1\">[</bpt>Labeling Individual Windows Forms Controls and Providing Shortcuts to Them<ept id=\"p1\">](labeling-individual-windows-forms-controls-and-providing-shortcuts-to-them.md)</ept>","source":"[Labeling Individual Windows Forms Controls and Providing Shortcuts to Them](labeling-individual-windows-forms-controls-and-providing-shortcuts-to-them.md)"},{"pos":[4692,4763],"content":"<bpt id=\"p1\">[</bpt>Controls to Use on Windows Forms<ept id=\"p1\">](controls-to-use-on-windows-forms.md)</ept>","source":"[Controls to Use on Windows Forms](controls-to-use-on-windows-forms.md)"},{"pos":[4766,4841],"content":"<bpt id=\"p1\">[</bpt>Windows Forms Controls by Function<ept id=\"p1\">](windows-forms-controls-by-function.md)</ept>","source":"[Windows Forms Controls by Function](windows-forms-controls-by-function.md)"}]}