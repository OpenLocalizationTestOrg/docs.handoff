{"content":"---\ntitle: \"How to: Compute Column Values in a CSV Text File (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 4747f37a-a198-4df2-8efe-5b0731e0ea27\n---\n# How to: Compute Column Values in a CSV Text File (LINQ) (C#)\nThis example shows how to perform aggregate computations such as Sum, Average, Min, and Max on the columns of a .csv file. The example principles that are shown here can be applied to other types of structured text.  \n  \n### To create the source file  \n  \n1.  Copy the following lines into a file that is named scores.csv and save it in your project folder. Assume that the first column represents a student ID, and subsequent columns represent scores from four exams.  \n  \n    ```  \n    111, 97, 92, 81, 60  \n    112, 75, 84, 91, 39  \n    113, 88, 94, 65, 91  \n    114, 97, 89, 85, 82  \n    115, 35, 72, 91, 70  \n    116, 99, 86, 90, 94  \n    117, 93, 92, 80, 87  \n    118, 92, 90, 83, 78  \n    119, 68, 79, 88, 92  \n    120, 99, 82, 81, 79  \n    121, 96, 85, 91, 60  \n    122, 94, 92, 91, 91  \n    ```  \n  \n## Example  \n  \n```csharp  \nclass SumColumns  \n{  \n    static void Main(string[] args)  \n    {  \n        string[] lines = System.IO.File.ReadAllLines(@\"../../../scores.csv\");  \n  \n        // Specifies the column to compute.  \n        int exam = 3;  \n  \n        // Spreadsheet format:  \n        // Student ID    Exam#1  Exam#2  Exam#3  Exam#4  \n        // 111,          97,     92,     81,     60  \n  \n        // Add one to exam to skip over the first column,  \n        // which holds the student ID.  \n        SingleColumn(lines, exam + 1);  \n        Console.WriteLine();  \n        MultiColumns(lines);  \n  \n        Console.WriteLine(\"Press any key to exit\");  \n        Console.ReadKey();  \n    }  \n  \n    static void SingleColumn(IEnumerable<string> strs, int examNum)  \n    {  \n        Console.WriteLine(\"Single Column Query:\");  \n  \n        // Parameter examNum specifies the column to   \n        // run the calculations on. This value could be  \n        // passed in dynamically at runtime.               \n  \n        // Variable columnQuery is an IEnumerable<int>.  \n        // The following query performs two steps:  \n        // 1) use Split to break each row (a string) into an array   \n        //    of strings,   \n        // 2) convert the element at position examNum to an int  \n        //    and select it.  \n        var columnQuery =  \n            from line in strs  \n            let elements = line.Split(',')  \n            select Convert.ToInt32(elements[examNum]);  \n  \n        // Execute the query and cache the results to improve  \n        // performance. This is helpful only with very large files.  \n        var results = columnQuery.ToList();  \n  \n        // Perform aggregate calculations Average, Max, and  \n        // Min on the column specified by examNum.  \n        double average = results.Average();  \n        int max = results.Max();  \n        int min = results.Min();  \n  \n        Console.WriteLine(\"Exam #{0}: Average:{1:##.##} High Score:{2} Low Score:{3}\",  \n                 examNum, average, max, min);  \n    }  \n  \n    static void MultiColumns(IEnumerable<string> strs)  \n    {  \n        Console.WriteLine(\"Multi Column Query:\");  \n  \n        // Create a query, multiColQuery. Explicit typing is used  \n        // to make clear that, when executed, multiColQuery produces   \n        // nested sequences. However, you get the same results by  \n        // using 'var'.  \n  \n        // The multiColQuery query performs the following steps:  \n        // 1) use Split to break each row (a string) into an array   \n        //    of strings,   \n        // 2) use Skip to skip the \"Student ID\" column, and store the   \n        //    rest of the row in scores.  \n        // 3) convert each score in the current row from a string to  \n        //    an int, and select that entire sequence as one row   \n        //    in the results.  \n        IEnumerable<IEnumerable<int>> multiColQuery =  \n            from line in strs  \n            let elements = line.Split(',')  \n            let scores = elements.Skip(1)  \n            select (from str in scores  \n                    select Convert.ToInt32(str));  \n  \n        // Execute the query and cache the results to improve  \n        // performance.   \n        // ToArray could be used instead of ToList.  \n        var results = multiColQuery.ToList();  \n  \n        // Find out how many columns you have in results.  \n        int columnCount = results[0].Count();  \n  \n        // Perform aggregate calculations Average, Max, and  \n        // Min on each column.              \n        // Perform one iteration of the loop for each column   \n        // of scores.  \n        // You can use a for loop instead of a foreach loop   \n        // because you already executed the multiColQuery   \n        // query by calling ToList.  \n        for (int column = 0; column < columnCount; column++)  \n        {  \n            var results2 = from row in results  \n                           select row.ElementAt(column);  \n            double average = results2.Average();  \n            int max = results2.Max();  \n            int min = results2.Min();  \n  \n            // Add one to column because the first exam is Exam #1,  \n            // not Exam #0.  \n            Console.WriteLine(\"Exam #{0} Average: {1:##.##} High Score: {2} Low Score: {3}\",  \n                          column + 1, average, max, min);  \n        }  \n    }  \n}  \n/* Output:  \n    Single Column Query:  \n    Exam #4: Average:76.92 High Score:94 Low Score:39  \n  \n    Multi Column Query:  \n    Exam #1 Average: 86.08 High Score: 99 Low Score: 35  \n    Exam #2 Average: 86.42 High Score: 94 Low Score: 72  \n    Exam #3 Average: 84.75 High Score: 91 Low Score: 65  \n    Exam #4 Average: 76.92 High Score: 94 Low Score: 39  \n */  \n```  \n  \n The query works by using the <xref:System.String.Split%2A> method to convert each line of text into an array. Each array element represents a column. Finally, the text in each column is converted to its numeric representation. If your file is a tab-separated file, just update the argument in the `Split` method to `\\t`.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See also\n\n- [LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)\n- [LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)\n","nodes":[{"pos":[4,142],"embed":true,"restype":"x-metadata","content":"title: \"How to: Compute Column Values in a CSV Text File (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 4747f37a-a198-4df2-8efe-5b0731e0ea27","nodes":[{"content":"How to: Compute Column Values in a CSV Text File (LINQ) (C#)","nodes":[{"pos":[0,60],"content":"How to: Compute Column Values in a CSV Text File (LINQ) (C#)","nodes":[{"content":"How to: Compute Column Values in a CSV Text File (LINQ) (C#)","pos":[0,60]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[149,209],"content":"How to: Compute Column Values in a CSV Text File (LINQ) (C#)","linkify":"How to: Compute Column Values in a CSV Text File (LINQ) (C#)","nodes":[{"content":"How to: Compute Column Values in a CSV Text File (LINQ) (C#)","pos":[0,60]}]},{"content":"This example shows how to perform aggregate computations such as Sum, Average, Min, and Max on the columns of a .csv file.","pos":[210,332]},{"content":"The example principles that are shown here can be applied to other types of structured text.","pos":[333,425]},{"pos":[435,460],"content":"To create the source file","linkify":"To create the source file","nodes":[{"content":"To create the source file","pos":[0,25]}]},{"content":"Copy the following lines into a file that is named scores.csv and save it in your project folder.","pos":[470,567]},{"content":"Assume that the first column represents a student ID, and subsequent columns represent scores from four exams.","pos":[568,678]},{"pos":[1022,1029],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The query works by using the <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method to convert each line of text into an array.","pos":[5785,5894],"source":"The query works by using the <xref:System.String.Split%2A> method to convert each line of text into an array."},{"content":"Each array element represents a column.","pos":[5895,5934]},{"content":"Finally, the text in each column is converted to its numeric representation.","pos":[5935,6011]},{"content":"If your file is a tab-separated file, just update the argument in the <ph id=\"ph1\">`Split`</ph> method to <ph id=\"ph2\">`\\t`</ph>.","pos":[6012,6105],"source":" If your file is a tab-separated file, just update the argument in the `Split` method to `\\t`."},{"pos":[6114,6132],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[6136,6313],"content":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[6322,6330],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6334,6429],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)"},{"pos":[6432,6545],"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","source":"[LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)"}]}