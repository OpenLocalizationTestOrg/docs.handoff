{"content":"---\ntitle: \"Type argument '<typeargumentname>' does not inherit from or implement the constraint type '<typeparametername>'\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc32044\"\n  - \"vbc32044\"\nhelpviewer_keywords: \n  - \"BC32044\"\nms.assetid: be91f648-c07d-4991-8ed1-28b1327619c4\n---\n# Type argument '\\<typeargumentname>' does not inherit from or implement the constraint type '\\<typeparametername>'\nA type argument supplied to a generic type does not satisfy the inheritance or implementation constraint on its corresponding type parameter.  \n  \n A constraint list imposes requirements on the type argument passed to the type parameter. The possible requirements include the following:  \n  \n-   The type argument must implement one or more interfaces  \n  \n-   The type argument must inherit from at most one class  \n  \n You can combine the preceding requirements for a single type parameter. Visual Basic cannot construct the type unless the code supplies type arguments that satisfy every constraint on every type parameter defined on the generic type.  \n  \n **Error ID:** BC32044  \n  \n## To correct this error  \n  \n-   Select a type argument of a type that implements every interface specified for the type parameter, and that inherits from the specified class if there is one.  \n  \n## See also\n\n- [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [How to: Use a Generic Class](../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)\n","nodes":[{"pos":[4,272],"embed":true,"restype":"x-metadata","content":"title: \"Type argument '<typeargumentname>' does not inherit from or implement the constraint type '<typeparametername>'\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc32044\"\n  - \"vbc32044\"\nhelpviewer_keywords: \n  - \"BC32044\"\nms.assetid: be91f648-c07d-4991-8ed1-28b1327619c4","nodes":[{"content":"Type argument '<typeargumentname>' does not inherit from or implement the constraint type '<typeparametername>'","nodes":[{"pos":[0,111],"content":"Type argument '<ph id=\"ph1\">&lt;typeargumentname&gt;</ph>' does not inherit from or implement the constraint type '<ph id=\"ph2\">&lt;typeparametername&gt;</ph>'","source":"Type argument '<typeargumentname>' does not inherit from or implement the constraint type '<typeparametername>'"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[279,392],"content":"Type argument '\\<typeargumentname>' does not inherit from or implement the constraint type '\\<typeparametername>'","linkify":"Type argument '\\<typeargumentname>' does not inherit from or implement the constraint type '\\<typeparametername>'","nodes":[{"content":"Type argument '<ph id=\"ph1\">\\&lt;</ph>typeargumentname&gt;' does not inherit from or implement the constraint type '<ph id=\"ph2\">\\&lt;</ph>typeparametername&gt;'","pos":[0,113],"source":"Type argument '\\<typeargumentname>' does not inherit from or implement the constraint type '\\<typeparametername>'"}]},{"content":"A type argument supplied to a generic type does not satisfy the inheritance or implementation constraint on its corresponding type parameter.","pos":[393,534]},{"content":"A constraint list imposes requirements on the type argument passed to the type parameter.","pos":[541,630]},{"content":"The possible requirements include the following:","pos":[631,679]},{"content":"The type argument must implement one or more interfaces","pos":[689,744]},{"content":"The type argument must inherit from at most one class","pos":[754,807]},{"content":"You can combine the preceding requirements for a single type parameter.","pos":[814,885]},{"content":"Visual Basic cannot construct the type unless the code supplies type arguments that satisfy every constraint on every type parameter defined on the generic type.","pos":[886,1047]},{"pos":[1054,1075],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32044","source":"**Error ID:** BC32044"},{"pos":[1084,1105],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Select a type argument of a type that implements every interface specified for the type parameter, and that inherits from the specified class if there is one.","pos":[1115,1273]},{"pos":[1282,1290],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1294,1409],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[1412,1538],"content":"<bpt id=\"p1\">[</bpt>How to: Use a Generic Class<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept>","source":"[How to: Use a Generic Class](../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)"}]}