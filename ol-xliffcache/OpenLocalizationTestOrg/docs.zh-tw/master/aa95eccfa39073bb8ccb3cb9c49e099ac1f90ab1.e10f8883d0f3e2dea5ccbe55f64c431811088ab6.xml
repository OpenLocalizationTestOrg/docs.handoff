{"content":"---\ntitle: \"How to: Create Pre-Computed Tasks\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tasks, creating pre-computed\"\nms.assetid: a73eafa2-1f49-4106-a19e-997186029b58\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Create Pre-Computed Tasks\nThis document describes how to use the <xref:System.Threading.Tasks.Task.FromResult%2A?displayProperty=nameWithType> method to retrieve the results of asynchronous download operations that are held in a cache. The <xref:System.Threading.Tasks.Task.FromResult%2A> method returns a finished <xref:System.Threading.Tasks.Task%601> object that holds the provided value as its <xref:System.Threading.Tasks.Task%601.Result%2A> property. This method is useful when you perform an asynchronous operation that returns a <xref:System.Threading.Tasks.Task%601> object, and the result of that <xref:System.Threading.Tasks.Task%601> object is already computed.  \n  \n## Example  \n The following example downloads strings from the web. It defines the `DownloadStringAsync` method. This method downloads strings from the web asynchronously. This example also uses a <xref:System.Collections.Concurrent.ConcurrentDictionary%602> object to cache the results of previous operations. If the input address is held in this cache, `DownloadStringAsync` uses the <xref:System.Threading.Tasks.Task.FromResult%2A> method to produce a <xref:System.Threading.Tasks.Task%601> object that holds the content at that address. Otherwise, `DownloadStringAsync` downloads the file from the web and adds the result to the cache.  \n  \n [!code-csharp[TPL_CachedDownloads#1](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_cacheddownloads/cs/cacheddownloads.cs#1)]\n [!code-vb[TPL_CachedDownloads#1](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_cacheddownloads/vb/cacheddownloads.vb#1)]  \n  \n This example computes the time that is required to download multiple strings two times. The second set of download operations should take less time than the first set because the results are held in the cache. The <xref:System.Threading.Tasks.Task.FromResult%2A> method enables the `DownloadStringAsync` method to create <xref:System.Threading.Tasks.Task%601> objects that hold these pre-computed results.  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `CachedDownloads.cs` (`CachedDownloads.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.  \n  \n Visual C#  \n  \n **csc.exe CachedDownloads.cs**  \n  \n Visual Basic  \n  \n **vbc.exe CachedDownloads.vb**  \n  \n## Robust Programming  \n  \n## See also\n\n- [Task-based Asynchronous Programming](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)\n","nodes":[{"pos":[4,279],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create Pre-Computed Tasks\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tasks, creating pre-computed\"\nms.assetid: a73eafa2-1f49-4106-a19e-997186029b58\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Create Pre-Computed Tasks","nodes":[{"pos":[0,33],"content":"How to: Create Pre-Computed Tasks","nodes":[{"content":"How to: Create Pre-Computed Tasks","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[286,319],"content":"How to: Create Pre-Computed Tasks","linkify":"How to: Create Pre-Computed Tasks","nodes":[{"content":"How to: Create Pre-Computed Tasks","pos":[0,33]}]},{"content":"This document describes how to use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.FromResult%2A?displayProperty=nameWithType&gt;</ph> method to retrieve the results of asynchronous download operations that are held in a cache.","pos":[320,529],"source":"This document describes how to use the <xref:System.Threading.Tasks.Task.FromResult%2A?displayProperty=nameWithType> method to retrieve the results of asynchronous download operations that are held in a cache."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> method returns a finished <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object that holds the provided value as its <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property.","pos":[530,750],"source":" The <xref:System.Threading.Tasks.Task.FromResult%2A> method returns a finished <xref:System.Threading.Tasks.Task%601> object that holds the provided value as its <xref:System.Threading.Tasks.Task%601.Result%2A> property."},{"content":"This method is useful when you perform an asynchronous operation that returns a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object, and the result of that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object is already computed.","pos":[751,967],"source":" This method is useful when you perform an asynchronous operation that returns a <xref:System.Threading.Tasks.Task%601> object, and the result of that <xref:System.Threading.Tasks.Task%601> object is already computed."},{"pos":[976,983],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example downloads strings from the web.","pos":[987,1040]},{"content":"It defines the <ph id=\"ph1\">`DownloadStringAsync`</ph> method.","pos":[1041,1085],"source":" It defines the `DownloadStringAsync` method."},{"content":"This method downloads strings from the web asynchronously.","pos":[1086,1144]},{"content":"This example also uses a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> object to cache the results of previous operations.","pos":[1145,1283],"source":" This example also uses a <xref:System.Collections.Concurrent.ConcurrentDictionary%602> object to cache the results of previous operations."},{"content":"If the input address is held in this cache, <ph id=\"ph1\">`DownloadStringAsync`</ph> uses the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> method to produce a <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object that holds the content at that address.","pos":[1284,1513],"source":" If the input address is held in this cache, `DownloadStringAsync` uses the <xref:System.Threading.Tasks.Task.FromResult%2A> method to produce a <xref:System.Threading.Tasks.Task%601> object that holds the content at that address."},{"content":"Otherwise, <ph id=\"ph1\">`DownloadStringAsync`</ph> downloads the file from the web and adds the result to the cache.","pos":[1514,1612],"source":" Otherwise, `DownloadStringAsync` downloads the file from the web and adds the result to the cache."},{"content":"This example computes the time that is required to download multiple strings two times.","pos":[1893,1980]},{"content":"The second set of download operations should take less time than the first set because the results are held in the cache.","pos":[1981,2102]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> method enables the <ph id=\"ph2\">`DownloadStringAsync`</ph> method to create <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects that hold these pre-computed results.","pos":[2103,2298],"source":" The <xref:System.Threading.Tasks.Task.FromResult%2A> method enables the `DownloadStringAsync` method to create <xref:System.Threading.Tasks.Task%601> objects that hold these pre-computed results."},{"pos":[2307,2325],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[2329,2580],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`CachedDownloads.cs`</ph> (<ph id=\"ph2\">`CachedDownloads.vb`</ph> for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `CachedDownloads.cs` (`CachedDownloads.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window."},{"content":"Visual C#","pos":[2587,2596]},{"pos":[2603,2633],"content":"<bpt id=\"p1\">**</bpt>csc.exe CachedDownloads.cs<ept id=\"p1\">**</ept>","source":"**csc.exe CachedDownloads.cs**"},{"content":"Visual Basic","pos":[2640,2652]},{"pos":[2659,2689],"content":"<bpt id=\"p1\">**</bpt>vbc.exe CachedDownloads.vb<ept id=\"p1\">**</ept>","source":"**vbc.exe CachedDownloads.vb**"},{"pos":[2698,2716],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"pos":[2725,2733],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2737,2858],"content":"<bpt id=\"p1\">[</bpt>Task-based Asynchronous Programming<ept id=\"p1\">](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>","source":"[Task-based Asynchronous Programming](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)"}]}