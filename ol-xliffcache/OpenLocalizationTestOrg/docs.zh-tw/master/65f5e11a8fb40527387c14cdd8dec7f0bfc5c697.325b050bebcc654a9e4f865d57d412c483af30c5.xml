{"content":"---\ntitle: \"Callback Functions\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"callback function\"\n  - \"platform invoke, calling unmanaged functions\"\nms.assetid: c0aa8533-3b3b-42e8-9f60-84919793098c\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Callback Functions\nA callback function is code within a managed application that helps an unmanaged DLL function complete a task. Calls to a callback function pass indirectly from a managed application, through a DLL function, and back to the managed implementation. Some of the many DLL functions called with platform invoke require a callback function in managed code to run properly.  \n  \n To call most DLL functions from managed code, you create a managed definition of the function and then call it. The process is straightforward.  \n  \n Using a DLL function that requires a callback function has some additional steps. First, you must determine whether the function requires a callback by looking at the documentation for the function. Next, you have to create the callback function in your managed application. Finally, you call the DLL function, passing a pointer to the callback function as an argument. \n \n The following illustration summarizes the callback function and implementation steps:  \n  \n ![Diagram showing the platform invoke callback process.](./media/callback-functions/platform-invoke-callback-process.gif)  \n  \n Callback functions are ideal for use in situations in which a task is performed repeatedly. Another common usage is with enumeration functions, such as **EnumFontFamilies**, **EnumPrinters**, and **EnumWindows** in the Windows API. The **EnumWindows** function enumerates through all existing windows on your computer, calling the callback function to perform a task on each window. For instructions and an example, see [How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md).  \n  \n## See also\n\n- [How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md)\n- [Calling a DLL Function](../../../docs/framework/interop/calling-a-dll-function.md)\n","nodes":[{"pos":[4,239],"embed":true,"restype":"x-metadata","content":"title: \"Callback Functions\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"callback function\"\n  - \"platform invoke, calling unmanaged functions\"\nms.assetid: c0aa8533-3b3b-42e8-9f60-84919793098c\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Callback Functions","nodes":[{"pos":[0,18],"content":"Callback Functions","nodes":[{"content":"Callback Functions","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[246,264],"content":"Callback Functions","linkify":"Callback Functions","nodes":[{"content":"Callback Functions","pos":[0,18]}]},{"content":"A callback function is code within a managed application that helps an unmanaged DLL function complete a task.","pos":[265,375]},{"content":"Calls to a callback function pass indirectly from a managed application, through a DLL function, and back to the managed implementation.","pos":[376,512]},{"content":"Some of the many DLL functions called with platform invoke require a callback function in managed code to run properly.","pos":[513,632]},{"content":"To call most DLL functions from managed code, you create a managed definition of the function and then call it.","pos":[639,750]},{"content":"The process is straightforward.","pos":[751,782]},{"content":"Using a DLL function that requires a callback function has some additional steps.","pos":[789,870]},{"content":"First, you must determine whether the function requires a callback by looking at the documentation for the function.","pos":[871,987]},{"content":"Next, you have to create the callback function in your managed application.","pos":[988,1063]},{"content":"Finally, you call the DLL function, passing a pointer to the callback function as an argument.","pos":[1064,1158]},{"content":"The following illustration summarizes the callback function and implementation steps:","pos":[1163,1248]},{"content":"Diagram showing the platform invoke callback process.","pos":[1257,1310]},{"content":"Callback functions are ideal for use in situations in which a task is performed repeatedly.","pos":[1383,1474]},{"content":"Another common usage is with enumeration functions, such as <bpt id=\"p1\">**</bpt>EnumFontFamilies<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>EnumPrinters<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>EnumWindows<ept id=\"p3\">**</ept> in the Windows API.","pos":[1475,1614],"source":" Another common usage is with enumeration functions, such as **EnumFontFamilies**, **EnumPrinters**, and **EnumWindows** in the Windows API."},{"content":"The <bpt id=\"p1\">**</bpt>EnumWindows<ept id=\"p1\">**</ept> function enumerates through all existing windows on your computer, calling the callback function to perform a task on each window.","pos":[1615,1765],"source":" The **EnumWindows** function enumerates through all existing windows on your computer, calling the callback function to perform a task on each window."},{"content":"For instructions and an example, see <bpt id=\"p1\">[</bpt>How to: Implement Callback Functions<ept id=\"p1\">](../../../docs/framework/interop/how-to-implement-callback-functions.md)</ept>.","pos":[1766,1914],"source":" For instructions and an example, see [How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md)."},{"pos":[1923,1931],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1935,2045],"content":"<bpt id=\"p1\">[</bpt>How to: Implement Callback Functions<ept id=\"p1\">](../../../docs/framework/interop/how-to-implement-callback-functions.md)</ept>","source":"[How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md)"},{"pos":[2048,2131],"content":"<bpt id=\"p1\">[</bpt>Calling a DLL Function<ept id=\"p1\">](../../../docs/framework/interop/calling-a-dll-function.md)</ept>","source":"[Calling a DLL Function](../../../docs/framework/interop/calling-a-dll-function.md)"}]}