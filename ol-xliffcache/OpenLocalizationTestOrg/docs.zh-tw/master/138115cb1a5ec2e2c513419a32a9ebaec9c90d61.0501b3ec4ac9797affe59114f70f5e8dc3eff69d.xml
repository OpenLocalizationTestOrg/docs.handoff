{"content":"---\ntitle: \"Scope of Default Namespaces in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: d4cce80c-342f-4097-be8b-40ab0bfa90ba\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# Scope of Default Namespaces in Visual Basic\nDefault namespaces as represented in the XML tree are not in scope for queries. If you have XML that is in a default namespace, you still must declare an <xref:System.Xml.Linq.XNamespace> variable, and combine it with the local name to make a qualified name to be used in the query.  \n  \n One of the most common problems when querying XML trees is that if the XML tree has a default namespace, the developer sometimes writes the query as though the XML were not in a namespace.  \n  \n The first set of examples in this topic shows a typical way that XML in a default namespace is loaded, but is queried improperly.  \n  \n The second set of examples show the necessary corrections so that you can query XML in a namespace.  \n  \n## Example  \n This example shows the creation of XML in a namespace, and a query that returns an empty result set.  \n  \n### Code  \n  \n```vb  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            <Root xmlns='http://www.adventure-works.com'>  \n                <Child>1</Child>  \n                <Child>2</Child>  \n                <Child>3</Child>  \n                <AnotherChild>4</AnotherChild>  \n                <AnotherChild>5</AnotherChild>  \n                <AnotherChild>6</AnotherChild>  \n            </Root>  \n        Dim c1 As IEnumerable(Of XElement) = _  \n                From el In root.<Child> _  \n                Select el  \n        Console.WriteLine(\"Result set follows:\")  \n        For Each el As XElement In c1  \n            Console.WriteLine(CInt(el))  \n        Next  \n        Console.WriteLine(\"End of result set\")  \n    End Sub  \nEnd Module  \n```  \n  \n### Comments  \n This example produces the following result:  \n  \n```  \nResult set follows:  \nEnd of result set  \n```  \n  \n## Example  \n This example shows the creation of XML in a namespace, and a query that is coded properly.  \n  \n In contrast to the incorrectly coded example above, the correct approach when using Visual Basic is to declare and initialize a global default namespace. This places all XML properties in the default namespace. No other modifications are required to the example to make it work properly.  \n  \n### Code  \n  \n```vb  \nImports <xmlns=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            <Root xmlns='http://www.adventure-works.com'>  \n                <Child>1</Child>  \n                <Child>2</Child>  \n                <Child>3</Child>  \n                <AnotherChild>4</AnotherChild>  \n                <AnotherChild>5</AnotherChild>  \n                <AnotherChild>6</AnotherChild>  \n            </Root>  \n        Dim c1 As IEnumerable(Of XElement) = _  \n                From el In root.<Child> _  \n                Select el  \n        Console.WriteLine(\"Result set follows:\")  \n        For Each el As XElement In c1  \n            Console.WriteLine(el.Value)  \n        Next  \n        Console.WriteLine(\"End of result set\")  \n    End Sub  \nEnd Module  \n```  \n  \n### Comments  \n This example produces the following result:  \n  \n```  \nResult set follows:  \n1  \n2  \n3  \nEnd of result set  \n```  \n  \n## See Also  \n [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)","nodes":[{"pos":[12,72],"content":"Scope of Default Namespaces in Visual Basic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Scope of Default Namespaces in Visual Basic | Microsoft Docs","pos":[0,60]}]},{"pos":[379,422],"content":"Scope of Default Namespaces in Visual Basic","linkify":"Scope of Default Namespaces in Visual Basic","nodes":[{"content":"Scope of Default Namespaces in Visual Basic","pos":[0,43]}]},{"content":"Default namespaces as represented in the XML tree are not in scope for queries.","pos":[423,502]},{"content":"If you have XML that is in a default namespace, you still must declare an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> variable, and combine it with the local name to make a qualified name to be used in the query.","pos":[503,705],"source":" If you have XML that is in a default namespace, you still must declare an <xref:System.Xml.Linq.XNamespace> variable, and combine it with the local name to make a qualified name to be used in the query."},{"content":"One of the most common problems when querying XML trees is that if the XML tree has a default namespace, the developer sometimes writes the query as though the XML were not in a namespace.","pos":[712,900]},{"content":"The first set of examples in this topic shows a typical way that XML in a default namespace is loaded, but is queried improperly.","pos":[907,1036]},{"content":"The second set of examples show the necessary corrections so that you can query XML in a namespace.","pos":[1043,1142]},{"pos":[1151,1158],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows the creation of XML in a namespace, and a query that returns an empty result set.","pos":[1162,1262]},{"pos":[1272,1276],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[2051,2059],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"This example produces the following result:","pos":[2063,2106]},{"pos":[2172,2179],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows the creation of XML in a namespace, and a query that is coded properly.","pos":[2183,2273]},{"content":"In contrast to the incorrectly coded example above, the correct approach when using Visual Basic is to declare and initialize a global default namespace.","pos":[2280,2433]},{"content":"This places all XML properties in the default namespace.","pos":[2434,2490]},{"content":"No other modifications are required to the example to make it work properly.","pos":[2491,2567]},{"pos":[2577,2581],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[3410,3418],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"This example produces the following result:","pos":[3422,3465]},{"pos":[3543,3551],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3555,3688],"content":"<bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>","source":"[Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)"}]}