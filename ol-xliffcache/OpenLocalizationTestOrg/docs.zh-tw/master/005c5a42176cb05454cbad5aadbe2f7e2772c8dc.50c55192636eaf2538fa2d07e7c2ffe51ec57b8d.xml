{"content":"---\ntitle: \"Parsing Other Strings in .NET | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Char data type, parsing strings\"\n  - \"enumerations [.NET Framework], parsing strings\"\n  - \"base types, parsing strings\"\n  - \"parsing strings, other strings\"\n  - \"Boolean data type, parsing strings\"\nms.assetid: d139bc00-3c4e-4d78-ac9a-5c951b258d28\ncaps.latest.revision: 15\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Parsing Other Strings in .NET\nIn addition to numeric and <xref:System.DateTime> strings, you can also parse strings that represent the types <xref:System.Char>, <xref:System.Boolean>, and <xref:System.Enum> into data types.  \n  \n## Char  \n The static parse method associated with the **Char** data type is useful for converting a string that contains a single character into its Unicode value. The following code example parses a string into a Unicode character.  \n  \n [!code-cpp[Conceptual.String.Parse#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.parse/cpp/parse.cpp#2)]\n [!code-csharp[Conceptual.String.Parse#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.parse/cs/parse.cs#2)]\n [!code-vb[Conceptual.String.Parse#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.parse/vb/parse.vb#2)]  \n  \n## Boolean  \n The **Boolean** data type contains a **Parse** method that you can use to convert a string that represents a Boolean value into an actual **Boolean** type. This method is not case-sensitive and can successfully parse a string containing \"True\" or \"False.\" The **Parse** method associated with the **Boolean** type can also parse strings that are surrounded by white spaces. If any other string is passed, a <xref:System.FormatException> is thrown.  \n  \n The following code example uses the **Parse** method to convert a string into a Boolean value.  \n  \n [!code-cpp[Conceptual.String.Parse#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.parse/cpp/parse.cpp#3)]\n [!code-csharp[Conceptual.String.Parse#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.parse/cs/parse.cs#3)]\n [!code-vb[Conceptual.String.Parse#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.parse/vb/parse.vb#3)]  \n  \n## Enumeration  \n You can use the static **Parse** method to initialize an enumeration type to the value of a string. This method accepts the enumeration type you are parsing, the string to parse, and an optional Boolean flag indicating whether or not the parse is case-sensitive. The string you are parsing can contain several values separated by commas, which can be preceded or followed by one or more empty spaces (also called white spaces). When the string contains multiple values, the value of the returned object is the value of all specified values combined with a bitwise OR operation.  \n  \n The following example uses the **Parse** method to convert a string representation into an enumeration value. The <xref:System.DayOfWeek> enumeration is initialized to **Thursday** from a string.  \n  \n [!code-cpp[Conceptual.String.Parse#4](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.parse/cpp/parse.cpp#4)]\n [!code-csharp[Conceptual.String.Parse#4](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.parse/cs/parse.cs#4)]\n [!code-vb[Conceptual.String.Parse#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.parse/vb/parse.vb#4)]  \n  \n## See Also  \n [Parsing Strings](../../../docs/standard/base-types/parsing-strings.md)   \n [Formatting Types](../../../docs/standard/base-types/formatting-types.md)   \n [Type Conversion in the .NET](../../../docs/standard/base-types/type-conversion.md)","nodes":[{"pos":[4,568],"embed":true,"restype":"x-metadata","content":"title: \"Parsing Other Strings in .NET | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Char data type, parsing strings\"\n  - \"enumerations [.NET Framework], parsing strings\"\n  - \"base types, parsing strings\"\n  - \"parsing strings, other strings\"\n  - \"Boolean data type, parsing strings\"\nms.assetid: d139bc00-3c4e-4d78-ac9a-5c951b258d28\ncaps.latest.revision: 15\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"Parsing Other Strings in .NET | Microsoft Docs","nodes":[{"pos":[0,46],"content":"Parsing Other Strings in .NET | Microsoft Docs","nodes":[{"content":"Parsing Other Strings in .NET | Microsoft Docs","pos":[0,46]}]}],"path":["title"]}],"yml":true},{"pos":[575,604],"content":"Parsing Other Strings in .NET","linkify":"Parsing Other Strings in .NET","nodes":[{"content":"Parsing Other Strings in .NET","pos":[0,29]}]},{"content":"In addition to numeric and <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> strings, you can also parse strings that represent the types <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Boolean&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Enum&gt;</ph> into data types.","pos":[605,798],"source":"In addition to numeric and <xref:System.DateTime> strings, you can also parse strings that represent the types <xref:System.Char>, <xref:System.Boolean>, and <xref:System.Enum> into data types."},{"pos":[807,811],"content":"Char","linkify":"Char","nodes":[{"content":"Char","pos":[0,4]}]},{"content":"The static parse method associated with the <bpt id=\"p1\">**</bpt>Char<ept id=\"p1\">**</ept> data type is useful for converting a string that contains a single character into its Unicode value.","pos":[815,968],"source":"The static parse method associated with the **Char** data type is useful for converting a string that contains a single character into its Unicode value."},{"content":"The following code example parses a string into a Unicode character.","pos":[969,1037]},{"pos":[1441,1448],"content":"Boolean","linkify":"Boolean","nodes":[{"content":"Boolean","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">**</bpt>Boolean<ept id=\"p1\">**</ept> data type contains a <bpt id=\"p2\">**</bpt>Parse<ept id=\"p2\">**</ept> method that you can use to convert a string that represents a Boolean value into an actual <bpt id=\"p3\">**</bpt>Boolean<ept id=\"p3\">**</ept> type.","pos":[1452,1607],"source":"The **Boolean** data type contains a **Parse** method that you can use to convert a string that represents a Boolean value into an actual **Boolean** type."},{"content":"This method is not case-sensitive and can successfully parse a string containing \"True\" or \"False.\"","pos":[1608,1707]},{"content":"The <bpt id=\"p1\">**</bpt>Parse<ept id=\"p1\">**</ept> method associated with the <bpt id=\"p2\">**</bpt>Boolean<ept id=\"p2\">**</ept> type can also parse strings that are surrounded by white spaces.","pos":[1708,1825],"source":" The **Parse** method associated with the **Boolean** type can also parse strings that are surrounded by white spaces."},{"content":"If any other string is passed, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[1826,1899],"source":" If any other string is passed, a <xref:System.FormatException> is thrown."},{"pos":[1906,2000],"content":"The following code example uses the <bpt id=\"p1\">**</bpt>Parse<ept id=\"p1\">**</ept> method to convert a string into a Boolean value.","source":"The following code example uses the **Parse** method to convert a string into a Boolean value."},{"pos":[2404,2415],"content":"Enumeration","linkify":"Enumeration","nodes":[{"content":"Enumeration","pos":[0,11]}]},{"content":"You can use the static <bpt id=\"p1\">**</bpt>Parse<ept id=\"p1\">**</ept> method to initialize an enumeration type to the value of a string.","pos":[2419,2518],"source":"You can use the static **Parse** method to initialize an enumeration type to the value of a string."},{"content":"This method accepts the enumeration type you are parsing, the string to parse, and an optional Boolean flag indicating whether or not the parse is case-sensitive.","pos":[2519,2681]},{"content":"The string you are parsing can contain several values separated by commas, which can be preceded or followed by one or more empty spaces (also called white spaces).","pos":[2682,2846]},{"content":"When the string contains multiple values, the value of the returned object is the value of all specified values combined with a bitwise OR operation.","pos":[2847,2996]},{"content":"The following example uses the <bpt id=\"p1\">**</bpt>Parse<ept id=\"p1\">**</ept> method to convert a string representation into an enumeration value.","pos":[3003,3112],"source":"The following example uses the **Parse** method to convert a string representation into an enumeration value."},{"content":"The <ph id=\"ph1\">&lt;xref:System.DayOfWeek&gt;</ph> enumeration is initialized to <bpt id=\"p1\">**</bpt>Thursday<ept id=\"p1\">**</ept> from a string.","pos":[3113,3198],"source":" The <xref:System.DayOfWeek> enumeration is initialized to **Thursday** from a string."},{"pos":[3602,3610],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Parsing Strings<ept id=\"p1\">](../../../docs/standard/base-types/parsing-strings.md)</ept><ph id=\"ph1\"> </ph>","pos":[3614,3686],"source":"[Parsing Strings](../../../docs/standard/base-types/parsing-strings.md) "},{"content":"<bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](../../../docs/standard/base-types/formatting-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3690,3764],"source":"[Formatting Types](../../../docs/standard/base-types/formatting-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Conversion in the .NET<ept id=\"p1\">](../../../docs/standard/base-types/type-conversion.md)</ept>","pos":[3768,3851],"source":"[Type Conversion in the .NET](../../../docs/standard/base-types/type-conversion.md)"}]}