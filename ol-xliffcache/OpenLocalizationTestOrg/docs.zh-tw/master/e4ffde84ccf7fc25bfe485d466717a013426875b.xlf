<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-add-custom-methods-for-linq-queries.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4ffde84ccf7fc25bfe485d466717a013426875b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-add-custom-methods-for-linq-queries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc1deeacad23629fc50fc3110c51d083fc5d7bde</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3b836133924470411b2dd43a8b8f6a18bd356ec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can extend the set of methods that you can use for LINQ queries by adding extension methods to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, in addition to the standard average or maximum operations, you can create a custom aggregate method to compute a single value from a sequence of values.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also create a method that works as a custom filter or a specific data transform for a sequence of values and returns a new sequence.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Examples of such methods are <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you extend the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, you can apply your custom methods to any enumerable collection.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Adding an Aggregate Method</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An aggregate method computes a single value from a set of values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>LINQ provides several aggregate methods, including <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can create your own aggregate method by adding an extension method to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create an extension method called <ph id="ph1">`Median`</ph> to compute a median for a sequence of numbers of type <ph id="ph2">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You call this extension method for any enumerable collection in the same way you call other aggregate methods from the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can either use a method call or standard query syntax for the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Aggregate Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">`Median`</ph> method for an array of type <ph id="ph2">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Overloading an Aggregate Method to Accept Various Types</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can overload your aggregate method so that it accepts sequences of various types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The standard approach is to create an overload for each type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Another approach is to create an overload that will take a generic type and convert it to a specific type by using a delegate.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also combine both approaches.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To create an overload for each type</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can create a specific overload for each type that you want to support.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following code example shows an overload of the <ph id="ph1">`Median`</ph> method for the <ph id="ph2">`integer`</ph> type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> overloads for both <ph id="ph2">`integer`</ph> and <ph id="ph3">`double`</ph> types, as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To create a generic overload</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also create an overload that accepts a sequence of generic objects.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This overload takes a delegate as a parameter and uses it to convert a sequence of objects of a generic type to a specific type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code shows an overload of the <ph id="ph1">`Median`</ph> method that takes the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> delegate as a parameter.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This delegate takes an object of generic type T and returns an object of type <ph id="ph1">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> method for a sequence of objects of any type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the type does not have its own method overload, you have to pass a delegate parameter.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can use a lambda expression for this purpose.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Also, if you use the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause instead of the method call, you can pass any value or expression that is in the scope this clause.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example code shows how to call the <ph id="ph1">`Median`</ph> method for an array of integers and an array of strings.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For strings, the median for the lengths of strings in the array is calculated.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The example shows how to pass the <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate parameter to the <ph id="ph2">`Median`</ph> method for each case.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Adding a Method That Returns a Collection</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can extend the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface with a custom query method that returns a sequence of values.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In this case, the method must return a collection of type <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Such methods can be used to apply filters or data transforms to a sequence of values.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example shows how to create an extension method named <ph id="ph1">`AlternateElements`</ph> that returns every other element in a collection, starting from the first element.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can call this extension method for any enumerable collection just as you would call other methods from the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>