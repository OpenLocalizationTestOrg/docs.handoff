{"content":"---\ntitle: Version and update considerations for C# developers\ndescription: Introducing new languages features in your library can impact the code that uses it.\nms.date: 09/19/2018\n---\n\n# Version and update considerations for C# developers\n\nCompatibility is a very important goal as new features are added to the C# language. In almost all cases, existing code can be recompiled with a new compiler version without any issue.\n\nMore care may be required when you adopt new language features in a library. You may be creating a new library with features found in the latest version and need to ensure apps built using previous versions of the compiler can use it. Or you may be upgrading an existing library and many of your users may not have upgraded versions yet. As you make decisions on adopting new features, you'll need to consider two variations of compatibility: source compatible and binary compatible.\n\n## Binary compatible changes\n\nChanges to your library are **binary compatible** when your updated library can be used without rebuilding applications and libraries that use it. Dependent assemblies are not required to be rebuilt, nor are any source code changes required. Binary compatible changes are also source compatible changes.\n\n## Source compatible changes\n\nChanges to your library are **source compatible** when applications and libraries that use your library do not require source code changes, but the source must be recompiled against the new version to work correctly.\n\n## Incompatible changes\n\nIf a change is neither **source compatible** nor **binary compatible**, source code changes along with recompilation are required in dependent libraries and applications.\n\n## Evaluate your library\n\nThese compatibility concepts affect the public and protected declarations for your library, not its internal implementation. Adopting any new features internally are always **binary compatible**.  \n\n**Binary compatible** changes provide new syntax that generates the same compiled code for public declarations as the older syntax. For example, changing a method to an expression-bodied member is a **binary compatible** change:\n\nOriginal code:\n\n```csharp\npublic double CalculateSquare(double value)\n{\n    return value * value;\n}\n```\n\nNew code:\n\n```csharp\npublic double CalculateSquare(double value) => value * value;\n```\n\n**Source compatible** changes introduce syntax that changes the compiled code for a public member, but in a way that is compatible with existing call sites. For example, changing a method signature from a by value parameter to an `in` by reference parameter is source compatible, but not binary compatible:\n\nOriginal code:\n\n```csharp\npublic double CalculateSquare(double value) => value * value;\n```\n\nNew code:\n\n```csharp\npublic double CalculateSquare(in double value) => value * value;\n```\n\nThe [What's new](index.md) articles note if introducing a feature that affects public declarations is source compatible or binary compatible.","nodes":[{"pos":[4,180],"embed":true,"restype":"x-metadata","content":"title: Version and update considerations for C# developers\ndescription: Introducing new languages features in your library can impact the code that uses it.\nms.date: 09/19/2018","nodes":[{"content":"Version and update considerations for C# developers","nodes":[{"pos":[0,51],"content":"Version and update considerations for C# developers","nodes":[{"content":"Version and update considerations for C# developers","pos":[0,51]}]}],"path":["title"],"nosxs":false},{"content":"Introducing new languages features in your library can impact the code that uses it.","nodes":[{"pos":[0,84],"content":"Introducing new languages features in your library can impact the code that uses it.","nodes":[{"content":"Introducing new languages features in your library can impact the code that uses it.","pos":[0,84]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[188,239],"content":"Version and update considerations for C# developers","linkify":"Version and update considerations for C# developers","nodes":[{"content":"Version and update considerations for C# developers","pos":[0,51]}]},{"content":"Compatibility is a very important goal as new features are added to the C# language.","pos":[241,325]},{"content":"In almost all cases, existing code can be recompiled with a new compiler version without any issue.","pos":[326,425]},{"content":"More care may be required when you adopt new language features in a library.","pos":[427,503]},{"content":"You may be creating a new library with features found in the latest version and need to ensure apps built using previous versions of the compiler can use it.","pos":[504,661]},{"content":"Or you may be upgrading an existing library and many of your users may not have upgraded versions yet.","pos":[662,764]},{"content":"As you make decisions on adopting new features, you'll need to consider two variations of compatibility: source compatible and binary compatible.","pos":[765,910]},{"pos":[915,940],"content":"Binary compatible changes","linkify":"Binary compatible changes","nodes":[{"content":"Binary compatible changes","pos":[0,25]}]},{"content":"Changes to your library are <bpt id=\"p1\">**</bpt>binary compatible<ept id=\"p1\">**</ept> when your updated library can be used without rebuilding applications and libraries that use it.","pos":[942,1088],"source":"Changes to your library are **binary compatible** when your updated library can be used without rebuilding applications and libraries that use it."},{"content":"Dependent assemblies are not required to be rebuilt, nor are any source code changes required.","pos":[1089,1183]},{"content":"Binary compatible changes are also source compatible changes.","pos":[1184,1245]},{"pos":[1250,1275],"content":"Source compatible changes","linkify":"Source compatible changes","nodes":[{"content":"Source compatible changes","pos":[0,25]}]},{"pos":[1277,1493],"content":"Changes to your library are <bpt id=\"p1\">**</bpt>source compatible<ept id=\"p1\">**</ept> when applications and libraries that use your library do not require source code changes, but the source must be recompiled against the new version to work correctly.","source":"Changes to your library are **source compatible** when applications and libraries that use your library do not require source code changes, but the source must be recompiled against the new version to work correctly."},{"pos":[1498,1518],"content":"Incompatible changes","linkify":"Incompatible changes","nodes":[{"content":"Incompatible changes","pos":[0,20]}]},{"pos":[1520,1690],"content":"If a change is neither <bpt id=\"p1\">**</bpt>source compatible<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>binary compatible<ept id=\"p2\">**</ept>, source code changes along with recompilation are required in dependent libraries and applications.","source":"If a change is neither **source compatible** nor **binary compatible**, source code changes along with recompilation are required in dependent libraries and applications."},{"pos":[1695,1716],"content":"Evaluate your library","linkify":"Evaluate your library","nodes":[{"content":"Evaluate your library","pos":[0,21]}]},{"content":"These compatibility concepts affect the public and protected declarations for your library, not its internal implementation.","pos":[1718,1842]},{"content":"Adopting any new features internally are always <bpt id=\"p1\">**</bpt>binary compatible<ept id=\"p1\">**</ept>.","pos":[1843,1913],"source":" Adopting any new features internally are always **binary compatible**."},{"content":"<bpt id=\"p1\">**</bpt>Binary compatible<ept id=\"p1\">**</ept> changes provide new syntax that generates the same compiled code for public declarations as the older syntax.","pos":[1917,2048],"source":"**Binary compatible** changes provide new syntax that generates the same compiled code for public declarations as the older syntax."},{"content":"For example, changing a method to an expression-bodied member is a <bpt id=\"p1\">**</bpt>binary compatible<ept id=\"p1\">**</ept> change:","pos":[2049,2145],"source":" For example, changing a method to an expression-bodied member is a **binary compatible** change:"},{"content":"Original code:","pos":[2147,2161]},{"content":"New code:","pos":[2252,2261]},{"content":"<bpt id=\"p1\">**</bpt>Source compatible<ept id=\"p1\">**</ept> changes introduce syntax that changes the compiled code for a public member, but in a way that is compatible with existing call sites.","pos":[2340,2496],"source":"**Source compatible** changes introduce syntax that changes the compiled code for a public member, but in a way that is compatible with existing call sites."},{"content":"For example, changing a method signature from a by value parameter to an <ph id=\"ph1\">`in`</ph> by reference parameter is source compatible, but not binary compatible:","pos":[2497,2646],"source":" For example, changing a method signature from a by value parameter to an `in` by reference parameter is source compatible, but not binary compatible:"},{"content":"Original code:","pos":[2648,2662]},{"content":"New code:","pos":[2741,2750]},{"pos":[2832,2973],"content":"The <bpt id=\"p1\">[</bpt>What's new<ept id=\"p1\">](index.md)</ept> articles note if introducing a feature that affects public declarations is source compatible or binary compatible.","source":"The [What's new](index.md) articles note if introducing a feature that affects public declarations is source compatible or binary compatible."}]}