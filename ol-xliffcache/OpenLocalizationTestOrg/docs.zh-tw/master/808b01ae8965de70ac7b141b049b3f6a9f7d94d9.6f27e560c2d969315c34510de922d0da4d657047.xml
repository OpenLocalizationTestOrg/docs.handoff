{"content":"---\ntitle: \"How to: Create a Public-Private Key Pair | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-bcl\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"key pairs for strong-named assemblies\"\n  - \"signing assemblies\"\n  - \"assemblies [.NET Framework], signing\"\n  - \"cryptographic key pairs\"\n  - \"snk files (key pair files)\"\n  - \"public-private key pairs\"\n  - \".snk files\"\n  - \"strong-named assemblies, key pairs\"\nms.assetid: 05026813-f3bd-4d7c-9e0b-fc588eb3d114\ncaps.latest.revision: 16\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Create a Public-Private Key Pair\nTo sign an assembly with a strong name, you must have a public/private key pair. This public and private cryptographic key pair is used during compilation to create a strong-named assembly. You can create a key pair using the [Strong Name tool (Sn.exe)](../../../docs/framework/tools/sn-exe-strong-name-tool.md). Key pair files usually have an .snk extension.  \n  \n> [!NOTE]\n>  In [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)], the C# and Visual Basic project property pages include a **Signing** tab that enables you to select existing key files or to generate new key files without using Sn.exe. In Visual C++, you can specify the location of an existing key file in the **Advanced** property page in the **Linker** section of the **Configuration Properties** section of the **Property Pages** window. The use of the <xref:System.Reflection.AssemblyKeyFileAttribute> attribute to identify key file pairs has been made obsolete beginning with [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)].  \n  \n### To create a key pair  \n  \n1.  At the command prompt, type the following command:  \n  \n     **sn –k** \\<*file name*>  \n  \n     In this command, *file name* is the name of the output file containing the key pair.  \n  \n The following example creates a key pair called `sgKey.snk`.  \n  \n```  \nsn -k sgKey.snk  \n```  \n  \n If you intend to delay sign an assembly and you control the whole key pair (which is unlikely outside test scenarios), you can use the following commands to generate a key pair and then extract the public key from it into a separate file. First, create the key pair:  \n  \n```  \nsn -k keypair.snk  \n```  \n  \n Next, extract the public key from the key pair and copy it to a separate file:  \n  \n```  \nsn -p keypair.snk public.snk  \n```  \n  \n Once you create the key pair, you must put the file where the strong name signing tools can find it.  \n  \n When signing an assembly with a strong name, the [Assembly Linker (Al.exe)](../../../docs/framework/tools/al-exe-assembly-linker.md) looks for the key file relative to the current directory and to the output directory. When using command-line compilers, you can simply copy the key to the current directory containing your code modules.  \n  \n If you are using an earlier version of [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)] that does not have a **Signing** tab in the project properties, the recommended key file location is the project directory with the file attribute specified as follows:  \n  \n [!code-cpp[AssemblyName_KeyPair#21](../../../samples/snippets/cpp/VS_Snippets_CLR/AssemblyName_KeyPair/CPP/keyfileattrib.cpp#21)]\n [!code-csharp[AssemblyName_KeyPair#21](../../../samples/snippets/csharp/VS_Snippets_CLR/AssemblyName_KeyPair/CS/keyfileattrib.cs#21)]\n [!code-vb[AssemblyName_KeyPair#21](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyName_KeyPair/VB/keyfileattrib.vb#21)]  \n  \n## See Also  \n [Creating and Using Strong-Named Assemblies](../../../docs/framework/app-domains/create-and-use-strong-named-assemblies.md)","nodes":[{"pos":[4,652],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a Public-Private Key Pair | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-bcl\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"key pairs for strong-named assemblies\"\n  - \"signing assemblies\"\n  - \"assemblies [.NET Framework], signing\"\n  - \"cryptographic key pairs\"\n  - \"snk files (key pair files)\"\n  - \"public-private key pairs\"\n  - \".snk files\"\n  - \"strong-named assemblies, key pairs\"\nms.assetid: 05026813-f3bd-4d7c-9e0b-fc588eb3d114\ncaps.latest.revision: 16\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Create a Public-Private Key Pair | Microsoft Docs","nodes":[{"pos":[0,57],"content":"How to: Create a Public-Private Key Pair | Microsoft Docs","nodes":[{"content":"How to: Create a Public-Private Key Pair | Microsoft Docs","pos":[0,57]}]}],"path":["title"]}],"yml":true},{"pos":[659,699],"content":"How to: Create a Public-Private Key Pair","linkify":"How to: Create a Public-Private Key Pair","nodes":[{"content":"How to: Create a Public-Private Key Pair","pos":[0,40]}]},{"content":"To sign an assembly with a strong name, you must have a public/private key pair.","pos":[700,780]},{"content":"This public and private cryptographic key pair is used during compilation to create a strong-named assembly.","pos":[781,889]},{"content":"You can create a key pair using the <bpt id=\"p1\">[</bpt>Strong Name tool (Sn.exe)<ept id=\"p1\">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept>.","pos":[890,1012],"source":" You can create a key pair using the [Strong Name tool (Sn.exe)](../../../docs/framework/tools/sn-exe-strong-name-tool.md)."},{"content":"Key pair files usually have an .snk extension.","pos":[1013,1059]},{"pos":[1067,1708],"content":"[!NOTE]\n In [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)], the C# and Visual Basic project property pages include a **Signing** tab that enables you to select existing key files or to generate new key files without using Sn.exe. In Visual C++, you can specify the location of an existing key file in the **Advanced** property page in the **Linker** section of the **Configuration Properties** section of the **Property Pages** window. The use of the <xref:System.Reflection.AssemblyKeyFileAttribute> attribute to identify key file pairs has been made obsolete beginning with [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)].","leadings":["","> "],"nodes":[{"content":"In [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)], the C# and Visual Basic project property pages include a **Signing** tab that enables you to select existing key files or to generate new key files without using Sn.exe. In Visual C++, you can specify the location of an existing key file in the **Advanced** property page in the **Linker** section of the **Configuration Properties** section of the **Property Pages** window. The use of the <xref:System.Reflection.AssemblyKeyFileAttribute> attribute to identify key file pairs has been made obsolete beginning with [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)].","pos":[9,639],"nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>, the C# and Visual Basic project property pages include a <bpt id=\"p1\">**</bpt>Signing<ept id=\"p1\">**</ept> tab that enables you to select existing key files or to generate new key files without using Sn.exe.","pos":[0,224],"source":"In [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)], the C# and Visual Basic project property pages include a **Signing** tab that enables you to select existing key files or to generate new key files without using Sn.exe."},{"content":"In Visual C++, you can specify the location of an existing key file in the <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept> property page in the <bpt id=\"p2\">**</bpt>Linker<ept id=\"p2\">**</ept> section of the <bpt id=\"p3\">**</bpt>Configuration Properties<ept id=\"p3\">**</ept> section of the <bpt id=\"p4\">**</bpt>Property Pages<ept id=\"p4\">**</ept> window.","pos":[225,430],"source":" In Visual C++, you can specify the location of an existing key file in the **Advanced** property page in the **Linker** section of the **Configuration Properties** section of the **Property Pages** window."},{"content":"The use of the <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyKeyFileAttribute&gt;</ph> attribute to identify key file pairs has been made obsolete beginning with <ph id=\"ph2\">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph>.","pos":[431,630],"source":" The use of the <xref:System.Reflection.AssemblyKeyFileAttribute> attribute to identify key file pairs has been made obsolete beginning with [!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]."}]}]},{"pos":[1718,1738],"content":"To create a key pair","linkify":"To create a key pair","nodes":[{"content":"To create a key pair","pos":[0,20]}]},{"content":"At the command prompt, type the following command:","pos":[1748,1798]},{"pos":[1809,1833],"content":"<bpt id=\"p1\">**</bpt>sn –k<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph><bpt id=\"p2\">*</bpt>file name<ept id=\"p2\">*</ept><ph id=\"ph2\">&gt;</ph>","source":"**sn –k** \\<*file name*>"},{"pos":[1844,1928],"content":"In this command, <bpt id=\"p1\">*</bpt>file name<ept id=\"p1\">*</ept> is the name of the output file containing the key pair.","source":"In this command, *file name* is the name of the output file containing the key pair."},{"pos":[1935,1995],"content":"The following example creates a key pair called <ph id=\"ph1\">`sgKey.snk`</ph>.","source":"The following example creates a key pair called `sgKey.snk`."},{"content":"If you intend to delay sign an assembly and you control the whole key pair (which is unlikely outside test scenarios), you can use the following commands to generate a key pair and then extract the public key from it into a separate file.","pos":[2035,2273]},{"content":"First, create the key pair:","pos":[2274,2301]},{"content":"Next, extract the public key from the key pair and copy it to a separate file:","pos":[2343,2421]},{"content":"Once you create the key pair, you must put the file where the strong name signing tools can find it.","pos":[2474,2574]},{"content":"When signing an assembly with a strong name, the <bpt id=\"p1\">[</bpt>Assembly Linker (Al.exe)<ept id=\"p1\">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> looks for the key file relative to the current directory and to the output directory.","pos":[2581,2799],"source":"When signing an assembly with a strong name, the [Assembly Linker (Al.exe)](../../../docs/framework/tools/al-exe-assembly-linker.md) looks for the key file relative to the current directory and to the output directory."},{"content":"When using command-line compilers, you can simply copy the key to the current directory containing your code modules.","pos":[2800,2917]},{"pos":[2924,3182],"content":"If you are using an earlier version of <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> that does not have a <bpt id=\"p1\">**</bpt>Signing<ept id=\"p1\">**</ept> tab in the project properties, the recommended key file location is the project directory with the file attribute specified as follows:","source":"If you are using an earlier version of [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)] that does not have a **Signing** tab in the project properties, the recommended key file location is the project directory with the file attribute specified as follows:"},{"pos":[3598,3606],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3610,3733],"content":"<bpt id=\"p1\">[</bpt>Creating and Using Strong-Named Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>","source":"[Creating and Using Strong-Named Assemblies](../../../docs/framework/app-domains/create-and-use-strong-named-assemblies.md)"}]}