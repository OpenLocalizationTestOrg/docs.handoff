{"content":"---\ntitle: \"Defining a Property in Windows Forms Controls | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"properties [Windows Forms], defining in code\"\n  - \"custom controls [Windows Forms], defining properties in code\"\nms.assetid: c2eb8277-a842-4d99-89a9-647b901a0434\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Defining a Property in Windows Forms Controls\nFor an overview of properties, see [Properties Overview](http://msdn.microsoft.com/library/8f1a1ff1-0f05-40e0-bfdf-80de8fff7d52). There are a few important considerations when defining a property:  \n  \n-   You must apply attributes to the properties you define. Attributes specify how the designer should display a property. For details, see [Design-Time Attributes for Components](http://msdn.microsoft.com/library/12050fe3-9327-4509-9e21-4ee2494b95c3).  \n  \n-   If changing the property affects the visual display of the control, call the <xref:System.Windows.Forms.Control.Invalidate%2A> method (that your control inherits from <xref:System.Windows.Forms.Control>) from the `set` accessor. <xref:System.Windows.Forms.Control.Invalidate%2A> in turn calls the <xref:System.Windows.Forms.Control.OnPaint%2A> method, which redraws the control. Multiple calls to <xref:System.Windows.Forms.Control.Invalidate%2A> result in a single call to <xref:System.Windows.Forms.Control.OnPaint%2A> for efficiency.  \n  \n-   The .NET Framework class library provides type converters for common data types such as integers, decimal numbers, Boolean values, and others. The purpose of a type converter is generally to provide string-to-value conversion (from string data to other data types). Common data types are associated with default type converters that convert values into strings and strings into the appropriate data types. If you define a property that is a custom (that is, nonstandard) data type, you will have to apply an attribute that specifies the type converter to associate with that property. You can also use an attribute to associate a custom UI type editor with a property. A UI type editor provides a user interface for editing a property or data type. A color picker is an example of a UI type editor. Examples of attributes are given at the end of this topic.  \n  \n    > [!NOTE]\n    >  If a type converter or a UI type editor is not available for your custom property, you can implement one as described in [Extending Design-Time Support](http://msdn.microsoft.com/library/d6ac8a6a-42fd-4bc8-bf33-b212811297e2).  \n  \n The following code fragment defines a custom property named `EndColor` for the custom control `FlashTrackBar`.  \n  \n```vb  \nPublic Class FlashTrackBar  \n   Inherits Control  \n   ...  \n   ' Private data member that backs the EndColor property.  \n   Private _endColor As Color = Color.LimeGreen  \n  \n   ' The Category attribute tells the designer to display  \n   ' it in the Flash grouping.   \n   ' The Description attribute provides a description of  \n   ' the property.   \n   <Category(\"Flash\"), _  \n   Description(\"The ending color of the bar.\")>  _  \n   Public Property EndColor() As Color  \n      ' The public property EndColor accesses _endColor.  \n      Get  \n         Return _endColor  \n      End Get  \n      Set  \n         _endColor = value  \n         If Not (baseBackground Is Nothing) And showGradient Then  \n            baseBackground.Dispose()  \n            baseBackground = Nothing  \n         End If  \n         ' The Invalidate method calls the OnPaint method, which redraws    \n         ' the control.  \n         Invalidate()  \n      End Set  \n   End Property  \n   ...  \nEnd Class  \n  \n```  \n  \n```csharp  \npublic class FlashTrackBar : Control {  \n   ...  \n   // Private data member that backs the EndColor property.  \n   private Color endColor = Color.LimeGreen;  \n   // The Category attribute tells the designer to display  \n   // it in the Flash grouping.   \n   // The Description attribute provides a description of  \n   // the property.   \n   [  \n   Category(\"Flash\"),  \n   Description(\"The ending color of the bar.\")  \n   ]  \n   // The public property EndColor accesses endColor.  \n   public Color EndColor {  \n      get {  \n         return endColor;  \n      }  \n      set {  \n         endColor = value;  \n         if (baseBackground != null && showGradient) {  \n            baseBackground.Dispose();  \n            baseBackground = null;  \n         }  \n         // The Invalidate method calls the OnPaint method, which redraws   \n         // the control.  \n         Invalidate();  \n      }  \n   }  \n   ...  \n}  \n```  \n  \n The following code fragment associates a type converter and a UI type editor with the property `Value`. In this case `Value` is an integer and has a default type converter, but the <xref:System.ComponentModel.TypeConverterAttribute> attribute applies a custom type converter (`FlashTrackBarValueConverter`) that enables the designer to display it as a percentage. The UI type editor, `FlashTrackBarValueEditor`, allows the percentage to be displayed visually. This example also shows that the type converter or editor specified by the <xref:System.ComponentModel.TypeConverterAttribute> or <xref:System.ComponentModel.EditorAttribute> attribute overrides the default converter.  \n  \n```vb  \n<Category(\"Flash\"), _  \nTypeConverter(GetType(FlashTrackBarValueConverter)), _  \nEditor(GetType(FlashTrackBarValueEditor), _  \nGetType(UITypeEditor)), _  \nDescription(\"The current value of the track bar.  You can enter an actual value or a percentage.\")>  _  \nPublic ReadOnly Property Value() As Integer  \n...  \nEnd Property  \n  \n```  \n  \n```csharp  \n[  \nCategory(\"Flash\"),   \nTypeConverter(typeof(FlashTrackBarValueConverter)),  \nEditor(typeof(FlashTrackBarValueEditor), typeof(UITypeEditor)),  \nDescription(\"The current value of the track bar.  You can enter an actual value or a percentage.\")  \n]  \npublic int Value {  \n...  \n}  \n```  \n  \n## See Also  \n [Properties in Windows Forms Controls](../../../../docs/framework/winforms/controls/properties-in-windows-forms-controls.md)   \n [Defining Default Values with the ShouldSerialize and Reset Methods](../../../../docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)   \n [Property-Changed Events](../../../../docs/framework/winforms/controls/property-changed-events.md)   \n [Attributes in Windows Forms Controls](../../../../docs/framework/winforms/controls/attributes-in-windows-forms-controls.md)","nodes":[{"pos":[12,74],"content":"Defining a Property in Windows Forms Controls | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Defining a Property in Windows Forms Controls | Microsoft Docs","pos":[0,62]}]},{"pos":[552,597],"content":"Defining a Property in Windows Forms Controls","linkify":"Defining a Property in Windows Forms Controls","nodes":[{"content":"Defining a Property in Windows Forms Controls","pos":[0,45]}]},{"content":"For an overview of properties, see <bpt id=\"p1\">[</bpt>Properties Overview<ept id=\"p1\">](http://msdn.microsoft.com/library/8f1a1ff1-0f05-40e0-bfdf-80de8fff7d52)</ept>.","pos":[598,727],"source":"For an overview of properties, see [Properties Overview](http://msdn.microsoft.com/library/8f1a1ff1-0f05-40e0-bfdf-80de8fff7d52)."},{"content":"There are a few important considerations when defining a property:","pos":[728,794]},{"content":"You must apply attributes to the properties you define.","pos":[804,859]},{"content":"Attributes specify how the designer should display a property.","pos":[860,922]},{"content":"For details, see <bpt id=\"p1\">[</bpt>Design-Time Attributes for Components<ept id=\"p1\">](http://msdn.microsoft.com/library/12050fe3-9327-4509-9e21-4ee2494b95c3)</ept>.","pos":[923,1052],"source":" For details, see [Design-Time Attributes for Components](http://msdn.microsoft.com/library/12050fe3-9327-4509-9e21-4ee2494b95c3)."},{"content":"If changing the property affects the visual display of the control, call the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method (that your control inherits from <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control&gt;</ph>) from the <ph id=\"ph3\">`set`</ph> accessor.","pos":[1062,1290],"source":"If changing the property affects the visual display of the control, call the <xref:System.Windows.Forms.Control.Invalidate%2A> method (that your control inherits from <xref:System.Windows.Forms.Control>) from the `set` accessor."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> in turn calls the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method, which redraws the control.","pos":[1291,1440],"source":"<xref:System.Windows.Forms.Control.Invalidate%2A> in turn calls the <xref:System.Windows.Forms.Control.OnPaint%2A> method, which redraws the control."},{"content":"Multiple calls to <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> result in a single call to <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> for efficiency.","pos":[1441,1598],"source":" Multiple calls to <xref:System.Windows.Forms.Control.Invalidate%2A> result in a single call to <xref:System.Windows.Forms.Control.OnPaint%2A> for efficiency."},{"content":"The .NET Framework class library provides type converters for common data types such as integers, decimal numbers, Boolean values, and others.","pos":[1608,1750]},{"content":"The purpose of a type converter is generally to provide string-to-value conversion (from string data to other data types).","pos":[1751,1873]},{"content":"Common data types are associated with default type converters that convert values into strings and strings into the appropriate data types.","pos":[1874,2013]},{"content":"If you define a property that is a custom (that is, nonstandard) data type, you will have to apply an attribute that specifies the type converter to associate with that property.","pos":[2014,2192]},{"content":"You can also use an attribute to associate a custom UI type editor with a property.","pos":[2193,2276]},{"content":"A UI type editor provides a user interface for editing a property or data type.","pos":[2277,2356]},{"content":"A color picker is an example of a UI type editor.","pos":[2357,2406]},{"content":"Examples of attributes are given at the end of this topic.","pos":[2407,2465]},{"pos":[2477,2717],"content":"[!NOTE]\nIf a type converter or a UI type editor is not available for your custom property, you can implement one as described in [Extending Design-Time Support](http://msdn.microsoft.com/library/d6ac8a6a-42fd-4bc8-bf33-b212811297e2).","leadings":["","    >  "],"nodes":[{"content":"If a type converter or a UI type editor is not available for your custom property, you can implement one as described in <bpt id=\"p1\">[</bpt>Extending Design-Time Support<ept id=\"p1\">](http://msdn.microsoft.com/library/d6ac8a6a-42fd-4bc8-bf33-b212811297e2)</ept>.","pos":[8,233],"source":"If a type converter or a UI type editor is not available for your custom property, you can implement one as described in [Extending Design-Time Support](http://msdn.microsoft.com/library/d6ac8a6a-42fd-4bc8-bf33-b212811297e2)."}]},{"pos":[2724,2834],"content":"The following code fragment defines a custom property named <ph id=\"ph1\">`EndColor`</ph> for the custom control <ph id=\"ph2\">`FlashTrackBar`</ph>.","source":"The following code fragment defines a custom property named `EndColor` for the custom control `FlashTrackBar`."},{"content":"The following code fragment associates a type converter and a UI type editor with the property <ph id=\"ph1\">`Value`</ph>.","pos":[4765,4868],"source":"The following code fragment associates a type converter and a UI type editor with the property `Value`."},{"content":"In this case <ph id=\"ph1\">`Value`</ph> is an integer and has a default type converter, but the <ph id=\"ph2\">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> attribute applies a custom type converter (<ph id=\"ph3\">`FlashTrackBarValueConverter`</ph>) that enables the designer to display it as a percentage.","pos":[4869,5128],"source":" In this case `Value` is an integer and has a default type converter, but the <xref:System.ComponentModel.TypeConverterAttribute> attribute applies a custom type converter (`FlashTrackBarValueConverter`) that enables the designer to display it as a percentage."},{"content":"The UI type editor, <ph id=\"ph1\">`FlashTrackBarValueEditor`</ph>, allows the percentage to be displayed visually.","pos":[5129,5224],"source":" The UI type editor, `FlashTrackBarValueEditor`, allows the percentage to be displayed visually."},{"content":"This example also shows that the type converter or editor specified by the <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ComponentModel.EditorAttribute&gt;</ph> attribute overrides the default converter.","pos":[5225,5442],"source":" This example also shows that the type converter or editor specified by the <xref:System.ComponentModel.TypeConverterAttribute> or <xref:System.ComponentModel.EditorAttribute> attribute overrides the default converter."},{"pos":[6101,6109],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Properties in Windows Forms Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/properties-in-windows-forms-controls.md)</ept><ph id=\"ph1\"> </ph>","pos":[6113,6238],"source":"[Properties in Windows Forms Controls](../../../../docs/framework/winforms/controls/properties-in-windows-forms-controls.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id=\"p1\">](../../../../docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept><ph id=\"ph1\"> </ph>","pos":[6241,6427],"source":" [Defining Default Values with the ShouldSerialize and Reset Methods](../../../../docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Property-Changed Events<ept id=\"p1\">](../../../../docs/framework/winforms/controls/property-changed-events.md)</ept><ph id=\"ph1\"> </ph>","pos":[6430,6530],"source":" [Property-Changed Events](../../../../docs/framework/winforms/controls/property-changed-events.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Attributes in Windows Forms Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/attributes-in-windows-forms-controls.md)</ept>","pos":[6533,6658],"source":" [Attributes in Windows Forms Controls](../../../../docs/framework/winforms/controls/attributes-in-windows-forms-controls.md)"}]}