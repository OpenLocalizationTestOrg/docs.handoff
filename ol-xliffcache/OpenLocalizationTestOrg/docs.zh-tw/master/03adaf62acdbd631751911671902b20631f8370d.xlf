<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-401ea83" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03adaf62acdbd631751911671902b20631f8370d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\aspnet-apps-using-wait-handles.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa5a80bde8c8ae3f1d9ce4574e2396f318178105</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">81f27579b6588a3fca9a9ef4f46089fb0c1cfb76</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ASP.NET Applications Using Wait Handles | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ASP.NET Applications Using Wait Handles</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The callback and polling models for handling asynchronous operations are useful when your application is processing only one asynchronous operation at a time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Wait models provide a more flexible way of processing multiple asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are two Wait models, named for the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> methods used to implement them: the Wait (Any) model and the Wait (All) model.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To use either Wait model, you need to use the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> methods both require you to send the <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph> objects as an argument, grouped together in an array.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Both Wait methods monitor the asynchronous operations, waiting for completion.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method waits for any of the operations to complete or time out. Once you know a particular operation is complete, you can process its results and then continue waiting for the next operation to complete or time out. The <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method waits for all of the processes in the array of <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph> instances to complete or time out before continuing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Wait models' benefit is most striking when you need to run multiple operations of some length on different servers, or when your server is powerful enough to process all the queries at the same time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the examples presented here, three queries emulate long processes by adding WAITFOR commands of varying lengths to inconsequential SELECT queries.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example: Wait (Any) Model</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example illustrates the Wait (Any) model.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Once three asynchronous processes are started, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method is called to wait for the completion of any one of them.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As each process completes, the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A&gt;</ph> method is called and the resulting <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object is read.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>At this point, a real-world application would likely use the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> to populate a portion of the page.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this simple example, the time the process completed is added to a text box corresponding to the process.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Taken together, the times in the text boxes illustrate the point: Code is executed each time a process completes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To set up this example, create a new ASP.NET Web Site project.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Place a <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control and four <ph id="ph2">&lt;xref:System.Web.UI.WebControls.TextBox&gt;</ph> controls on the page (accepting the default name for each control).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add the following code to the form's class, modifying the connection string as necessary for your environment.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example: Wait (All) Model</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example illustrates the Wait (All) model.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once three asynchronous processes are started, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method is called to wait for the processes to complete or time out.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Like the example of the Wait (Any) model, the time the process completed is added to a text box corresponding to the process.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Again, the times in the text boxes illustrate the point: Code following the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method is executed only after all processes are complete.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To set up this example, create a new ASP.NET Web Site project.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Place a <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control and four <ph id="ph2">&lt;xref:System.Web.UI.WebControls.TextBox&gt;</ph> controls on the page (accepting the default name for each control).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Add the following code to the form's class, modifying the connection string as necessary for your environment.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Operations<ept id="p1">](../../../../../docs/framework/data/adonet/sql/asynchronous-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>