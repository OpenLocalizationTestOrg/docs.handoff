{"content":"---\ntitle: \"nameof  - C# Reference\"\nms.custom: seodec18\n\nms.date: 06/16/2017\nf1_keywords: \n  - \"nameof_CSharpKeyword\"\n  - \"nameof\"\nms.assetid: 33601bf3-cc2c-4496-846d-f9679bccf2a7\n---\n# nameof (C# Reference)\n\nUsed to obtain the simple (unqualified) string name of a variable, type, or member.  \n\nWhen reporting errors in code, hooking up model-view-controller (MVC) links, firing property changed events, etc., you often want to capture the string name of a method.  Using `nameof` helps keep your code valid when renaming definitions.  Before, you had to use string literals to refer to definitions, which is brittle when renaming code elements because tools do not know to check these string literals.  \n  \n A `nameof` expression has this form:  \n  \n```csharp  \nif (x == null) throw new ArgumentNullException(nameof(x));  \nWriteLine(nameof(person.Address.ZipCode)); // prints \"ZipCode\"  \n```  \n  \n## Key Use Cases  \n These examples show the key use cases for `nameof`.  \n  \n Validate parameters:  \n ```csharp  \nvoid f(string s) {  \n    if (s == null) throw new ArgumentNullException(nameof(s));  \n}  \n```  \n  \n MVC Action links:  \n ```html  \n<%= Html.ActionLink(\"Sign up\",  \n             @typeof(UserController),  \n             @nameof(UserController.SignUp))  \n%>  \n```  \n  \n INotifyPropertyChanged:  \n ```csharp  \nint p {  \n    get { return this.p; }  \n    set { this.p = value; PropertyChanged(this, new PropertyChangedEventArgs(nameof(this.p)); } // nameof(p) works too  \n}  \n```  \n  \n XAML dependency property:  \n ```csharp  \npublic static DependencyProperty AgeProperty = DependencyProperty.Register(nameof(Age), typeof(int), typeof(C));  \n```  \n  \n Logging:  \n ```csharp  \nvoid f(int i) {  \n    Log(nameof(f), \"method entry\");  \n}  \n```  \n  \n Attributes:  \n ```csharp  \n[DebuggerDisplay(\"={\" + nameof(GetString) + \"()}\")]  \nclass C {  \n    string GetString() { }  \n}  \n```  \n  \n## Examples  \n Some C# examples:  \n  \n```csharp  \nusing Stuff = Some.Cool.Functionality  \nclass C {  \n    static int Method1 (string x, int y) {}  \n    static int Method1 (string x, string y) {}  \n    int Method2 (int z) {}  \n    string f<T>() => nameof(T);  \n}  \n  \nvar c = new C()  \n  \nclass Test {  \n    static void Main (string[] args) {  \n        Console.WriteLine(nameof(C)); // -> \"C\"  \n        Console.WriteLine(nameof(C.Method1)); // -> \"Method1\"   \n        Console.WriteLine(nameof(C.Method2)); // -> \"Method2\"  \n        Console.WriteLine(nameof(c.Method1)); // -> \"Method1\"   \n        Console.WriteLine(nameof(c.Method2)); // -> \"Method2\"  \n        // Console.WriteLine(nameof(z)); -> \"z\" [inside of Method2 ok, inside Method1 is a compiler error]  \n        Console.WriteLine(nameof(Stuff)); // -> \"Stuff\"  \n        // Console.WriteLine(nameof(T)); -> \"T\" [works inside of method but not in attributes on the method]  \n        Console.WriteLine(nameof(f)); // -> \"f\"  \n        // Console.WriteLine(nameof(f<T>)); -> [syntax error]  \n        // Console.WriteLine(nameof(f<>)); -> [syntax error]  \n        // Console.WriteLine(nameof(Method2())); -> [error \"This expression does not have a name\"]  \n    }\n}\n```  \n  \n## Remarks  \n The argument to `nameof` must be a simple name, qualified name, member access, base access with a specified member, or this access with a specified member.  The argument expression identifies a code definition, but it is never evaluated.  \n  \n Because the argument needs to be an expression syntactically, there are many things disallowed that are not useful to list.  The following are worth mentioning that produce errors: predefined types (for example, `int` or `void`), nullable types (`Point?`), array types (`Customer[,]`), pointer types (`Buffer*`), qualified alias (`A::B`), and unbound generic types (`Dictionary<,>`), preprocessing symbols (`DEBUG`), and labels (`loop:`).  \n  \n If you need to get the fully-qualified name, you can use the `typeof` expression along with `nameof`.  For example:\n```csharp  \nclass C {\n    void f(int i) {  \n        Log($\"{typeof(C)}.{nameof(f)}\", \"method entry\");  \n    }\n}\n``` \n\n Unfortunately `typeof` is not a constant expression like `nameof`, so `typeof` cannot be used in conjunction with `nameof` in all the same places as `nameof`.  For example, the following would cause a CS0182 compile error:\n ```csharp  \n[DebuggerDisplay(\"={\" + typeof(C) + nameof(GetString) + \"()}\")]  \nclass C {  \n    string GetString() { }  \n}  \n```    \n In the examples you see that you can use a type name and access an instance method name.  You do not need to have an instance of the type, as required in evaluated expressions.  Using the type name can be very convenient in some situations, and since you are just referring to the name and not using instance data, you do not need to contrive an instance variable or expression.  \n  \n You can reference the members of a class in attribute expressions on the class.  \n  \n There is no way to get a signatures information such as \"`Method1 (str, str)`\".  One way to do that is to use an Expression, `Expression e = () => A.B.Method1(\"s1\", \"s2\")`, and pull the MemberInfo from the resulting expression tree.  \n  \n## Language Specifications  \n\nFor more information, see [Nameof expressions](~/_csharplang/spec/expressions.md#nameof-expressions) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [typeof](../../../csharp/language-reference/keywords/typeof.md)\n","nodes":[{"pos":[4,179],"embed":true,"restype":"x-metadata","content":"title: \"nameof  - C# Reference\"\nms.custom: seodec18\n\nms.date: 06/16/2017\nf1_keywords: \n  - \"nameof_CSharpKeyword\"\n  - \"nameof\"\nms.assetid: 33601bf3-cc2c-4496-846d-f9679bccf2a7","nodes":[{"content":"nameof  - C# Reference","nodes":[{"pos":[0,22],"content":"nameof  - C# Reference","nodes":[{"content":"nameof  - C# Reference","pos":[0,22]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[186,207],"content":"nameof (C# Reference)","linkify":"nameof (C# Reference)","nodes":[{"content":"nameof (C# Reference)","pos":[0,21]}]},{"content":"Used to obtain the simple (unqualified) string name of a variable, type, or member.","pos":[209,292]},{"content":"When reporting errors in code, hooking up model-view-controller (MVC) links, firing property changed events, etc., you often want to capture the string name of a method.","pos":[296,465]},{"content":"Using <ph id=\"ph1\">`nameof`</ph> helps keep your code valid when renaming definitions.","pos":[467,535],"source":"  Using `nameof` helps keep your code valid when renaming definitions."},{"content":"Before, you had to use string literals to refer to definitions, which is brittle when renaming code elements because tools do not know to check these string literals.","pos":[537,703]},{"pos":[710,746],"content":"A <ph id=\"ph1\">`nameof`</ph> expression has this form:","source":"A `nameof` expression has this form:"},{"pos":[902,915],"content":"Key Use Cases","linkify":"Key Use Cases","nodes":[{"content":"Key Use Cases","pos":[0,13]}]},{"pos":[919,970],"content":"These examples show the key use cases for <ph id=\"ph1\">`nameof`</ph>.","source":"These examples show the key use cases for `nameof`."},{"content":"Validate parameters:","pos":[977,997]},{"content":"MVC Action links:","pos":[1113,1130]},{"content":"INotifyPropertyChanged:","pos":[1279,1302]},{"content":"XAML dependency property:","pos":[1492,1517]},{"content":"Logging:","pos":[1658,1666]},{"content":"Attributes:","pos":[1752,1763]},{"pos":[1890,1898],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Some C# examples:","pos":[1902,1919]},{"pos":[3115,3122],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The argument to <ph id=\"ph1\">`nameof`</ph> must be a simple name, qualified name, member access, base access with a specified member, or this access with a specified member.","pos":[3126,3281],"source":"The argument to `nameof` must be a simple name, qualified name, member access, base access with a specified member, or this access with a specified member."},{"content":"The argument expression identifies a code definition, but it is never evaluated.","pos":[3283,3363]},{"content":"Because the argument needs to be an expression syntactically, there are many things disallowed that are not useful to list.","pos":[3370,3493]},{"content":"The following are worth mentioning that produce errors: predefined types (for example, <ph id=\"ph1\">`int`</ph> or <ph id=\"ph2\">`void`</ph>), nullable types (<ph id=\"ph3\">`Point?`</ph>), array types (<ph id=\"ph4\">`Customer[,]`</ph>), pointer types (<ph id=\"ph5\">`Buffer*`</ph>), qualified alias (<ph id=\"ph6\">`A::B`</ph>), and unbound generic types (<ph id=\"ph7\">`Dictionary&lt;,&gt;`</ph>), preprocessing symbols (<ph id=\"ph8\">`DEBUG`</ph>), and labels (<ph id=\"ph9\">`loop:`</ph>).","pos":[3495,3808],"source":"  The following are worth mentioning that produce errors: predefined types (for example, `int` or `void`), nullable types (`Point?`), array types (`Customer[,]`), pointer types (`Buffer*`), qualified alias (`A::B`), and unbound generic types (`Dictionary<,>`), preprocessing symbols (`DEBUG`), and labels (`loop:`)."},{"content":"If you need to get the fully-qualified name, you can use the <ph id=\"ph1\">`typeof`</ph> expression along with <ph id=\"ph2\">`nameof`</ph>.","pos":[3815,3916],"source":"If you need to get the fully-qualified name, you can use the `typeof` expression along with `nameof`."},{"content":"For example:","pos":[3918,3930]},{"content":"Unfortunately <ph id=\"ph1\">`typeof`</ph> is not a constant expression like <ph id=\"ph2\">`nameof`</ph>, so <ph id=\"ph3\">`typeof`</ph> cannot be used in conjunction with <ph id=\"ph4\">`nameof`</ph> in all the same places as <ph id=\"ph5\">`nameof`</ph>.","pos":[4049,4207],"source":"Unfortunately `typeof` is not a constant expression like `nameof`, so `typeof` cannot be used in conjunction with `nameof` in all the same places as `nameof`."},{"content":"For example, the following would cause a CS0182 compile error:","pos":[4209,4271]},{"content":"In the examples you see that you can use a type name and access an instance method name.","pos":[4405,4493]},{"content":"You do not need to have an instance of the type, as required in evaluated expressions.","pos":[4495,4581]},{"content":"Using the type name can be very convenient in some situations, and since you are just referring to the name and not using instance data, you do not need to contrive an instance variable or expression.","pos":[4583,4783]},{"content":"You can reference the members of a class in attribute expressions on the class.","pos":[4790,4869]},{"content":"There is no way to get a signatures information such as \"<ph id=\"ph1\">`Method1 (str, str)`</ph>\".","pos":[4876,4955],"source":"There is no way to get a signatures information such as \"`Method1 (str, str)`\"."},{"content":"One way to do that is to use an Expression, <ph id=\"ph1\">`Expression e = () =&gt; A.B.Method1(\"s1\", \"s2\")`</ph>, and pull the MemberInfo from the resulting expression tree.","pos":[4957,5108],"source":"  One way to do that is to use an Expression, `Expression e = () => A.B.Method1(\"s1\", \"s2\")`, and pull the MemberInfo from the resulting expression tree."},{"pos":[5117,5140],"content":"Language Specifications","linkify":"Language Specifications","nodes":[{"content":"Language Specifications","pos":[0,23]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Nameof expressions<ept id=\"p1\">](~/_csharplang/spec/expressions.md#nameof-expressions)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[5144,5316],"source":"For more information, see [Nameof expressions](~/_csharplang/spec/expressions.md#nameof-expressions) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[5317,5393]},{"pos":[5399,5407],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5411,5470],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[5473,5539],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[5542,5605],"content":"<bpt id=\"p1\">[</bpt>typeof<ept id=\"p1\">](../../../csharp/language-reference/keywords/typeof.md)</ept>","source":"[typeof](../../../csharp/language-reference/keywords/typeof.md)"}]}