{"content":"---\ntitle: \"Viewing Type Information | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"types, viewing type information\"\n  - \"Type object\"\n  - \"viewing type information\"\n  - \"reflection, viewing type information\"\nms.assetid: 7e7303a9-4064-4738-b4e7-b75974ed70d2\ncaps.latest.revision: 13\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Viewing Type Information\nThe <xref:System.Type?displayProperty=fullName> class is central to reflection. The common language runtime creates the **Type** for a loaded type when reflection requests it. You can use a **Type** object's methods, fields, properties, and nested classes to find out everything about that type.  \n  \n Use <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> to obtain **Type** objects from assemblies that have not been loaded, passing in the name of the type or types you want. Use <xref:System.Type.GetType%2A?displayProperty=fullName> to get the **Type** objects from an assembly that is already loaded. Use <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> and <xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName> to obtain module **Type** objects.  \n  \n> [!NOTE]\n>  If you want to examine and manipulate generic types and methods, please see the additional information provided in [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md) and [How to: Examine and Instantiate Generic Types with Reflection](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md).  \n  \n The following example shows the syntax necessary to get the <xref:System.Reflection.Assembly> object and module for an assembly.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#6](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#6)]\n [!code-csharp[Conceptual.Types.ViewInfo#6](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#6)]\n [!code-vb[Conceptual.Types.ViewInfo#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#6)]  \n  \n The following example demonstrates getting **Type** objects from a loaded assembly.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#7](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#7)]\n [!code-csharp[Conceptual.Types.ViewInfo#7](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#7)]\n [!code-vb[Conceptual.Types.ViewInfo#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#7)]  \n  \n Once you obtain a **Type**, there are many ways you can discover information about the members of that type. For example, you can find out about all the type's members by calling the <xref:System.Type.GetMembers%2A?displayProperty=fullName> method, which obtains an array of <xref:System.Reflection.MemberInfo> objects describing each of the members of the current type.  \n  \n You can also use methods on the **Type** class to retrieve information about one or more constructors, methods, events, fields, or properties that you specify by name. For example, <xref:System.Type.GetConstructor%2A?displayProperty=fullName> encapsulates a specific constructor of the current class.  \n  \n If you have a **Type**, you can use the <xref:System.Type.Module%2A?displayProperty=fullName> property to obtain an object that encapsulates the module containing that type. Use the <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName> property to locate an object that encapsulates the assembly containing the module. You can obtain the assembly that encapsulates the type directly by using the <xref:System.Type.Assembly%2A?displayProperty=fullName> property.  \n  \n## System.Type and ConstructorInfo  \n The following example shows how to list the constructors for a class, in this case, the <xref:System.String> class.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#1](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source1.cpp#1)]\n [!code-csharp[Conceptual.Types.ViewInfo#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source1.cs#1)]\n [!code-vb[Conceptual.Types.ViewInfo#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source1.vb#1)]  \n  \n## MemberInfo, MethodInfo, FieldInfo, and PropertyInfo  \n Obtain information about the type's methods, properties, events, and fields using <xref:System.Reflection.MemberInfo>, <xref:System.Reflection.MethodInfo>, <xref:System.Reflection.FieldInfo>, or <xref:System.Reflection.PropertyInfo> objects.  \n  \n The following example uses **MemberInfo** to list the number of members in the **System.IO.File** class and uses the <xref:System.Type.IsPublic%2A> property to determine the visibility of the class.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source2.cpp#2)]\n [!code-csharp[Conceptual.Types.ViewInfo#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source2.cs#2)]\n [!code-vb[Conceptual.Types.ViewInfo#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source2.vb#2)]  \n  \n The following example investigates the type of the specified member. It performs reflection on a member of the **MemberInfo** class, and lists its type.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source3.cpp#3)]\n [!code-csharp[Conceptual.Types.ViewInfo#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source3.cs#3)]\n [!code-vb[Conceptual.Types.ViewInfo#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source3.vb#3)]  \n  \n The following example uses all the Reflection **\\*Info** classes along with <xref:System.Reflection.BindingFlags> to list all the members (constructors, fields, properties, events, and methods) of the specified class, dividing the members into static and instance categories.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#4](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source4.cpp#4)]\n [!code-csharp[Conceptual.Types.ViewInfo#4](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source4.cs#4)]\n [!code-vb[Conceptual.Types.ViewInfo#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source4.vb#4)]  \n  \n## See Also  \n <xref:System.Reflection.BindingFlags>   \n <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>   \n <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName>   \n <xref:System.Type.GetType%2A?displayProperty=fullName>   \n <xref:System.Type.GetMembers%2A?displayProperty=fullName>   \n <xref:System.Type.GetFields%2A?displayProperty=fullName>   \n <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>   \n <xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName>   \n <xref:System.Reflection.MemberInfo>   \n <xref:System.Reflection.ConstructorInfo>   \n <xref:System.Reflection.MethodInfo>   \n <xref:System.Reflection.FieldInfo>   \n <xref:System.Reflection.EventInfo>   \n <xref:System.Reflection.ParameterInfo>   \n [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)","nodes":[{"pos":[4,536],"nodes":[{"content":"Viewing Type Information | Microsoft Docs","nodes":[{"pos":[0,41],"content":"Viewing Type Information | Microsoft Docs","nodes":[{"content":"Viewing Type Information | Microsoft Docs","pos":[0,41]}]}],"pos":[6,50],"yaml":true}],"content":"title: \"Viewing Type Information | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"types, viewing type information\"\n  - \"Type object\"\n  - \"viewing type information\"\n  - \"reflection, viewing type information\"\nms.assetid: 7e7303a9-4064-4738-b4e7-b75974ed70d2\ncaps.latest.revision: 13\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[543,567],"content":"Viewing Type Information","linkify":"Viewing Type Information","nodes":[{"content":"Viewing Type Information","pos":[0,24]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> class is central to reflection.","pos":[568,647],"source":"The <xref:System.Type?displayProperty=fullName> class is central to reflection."},{"content":"The common language runtime creates the <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> for a loaded type when reflection requests it.","pos":[648,743],"source":" The common language runtime creates the **Type** for a loaded type when reflection requests it."},{"content":"You can use a <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> object's methods, fields, properties, and nested classes to find out everything about that type.","pos":[744,863],"source":" You can use a **Type** object's methods, fields, properties, and nested classes to find out everything about that type."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName&gt;</ph> to obtain <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> objects from assemblies that have not been loaded, passing in the name of the type or types you want.","pos":[870,1138],"source":"Use <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> to obtain **Type** objects from assemblies that have not been loaded, passing in the name of the type or types you want."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> to get the <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> objects from an assembly that is already loaded.","pos":[1139,1266],"source":" Use <xref:System.Type.GetType%2A?displayProperty=fullName> to get the **Type** objects from an assembly that is already loaded."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName&gt;</ph> to obtain module <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> objects.","pos":[1267,1446],"source":" Use <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> and <xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName> to obtain module **Type** objects."},{"pos":[1454,1871],"content":"[!NOTE]\n If you want to examine and manipulate generic types and methods, please see the additional information provided in [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md) and [How to: Examine and Instantiate Generic Types with Reflection](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md).","leadings":["","> "],"nodes":[{"content":"If you want to examine and manipulate generic types and methods, please see the additional information provided in <bpt id=\"p1\">[</bpt>Reflection and Generic Types<ept id=\"p1\">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Examine and Instantiate Generic Types with Reflection<ept id=\"p2\">](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md)</ept>.","pos":[9,415],"source":"If you want to examine and manipulate generic types and methods, please see the additional information provided in [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md) and [How to: Examine and Instantiate Generic Types with Reflection](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md)."}]},{"content":"The following example shows the syntax necessary to get the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> object and module for an assembly.","pos":[1878,2006],"source":"The following example shows the syntax necessary to get the <xref:System.Reflection.Assembly> object and module for an assembly."},{"pos":[2013,2419],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Types.ViewInfo#6<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Conceptual.Types.ViewInfo#6<ept id=\"p4\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#6)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Conceptual.Types.ViewInfo#6<ept id=\"p6\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#6)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Conceptual.Types.ViewInfo#6](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#6)]\n [!code-csharp[Conceptual.Types.ViewInfo#6](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#6)]\n [!code-vb[Conceptual.Types.ViewInfo#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#6)]"},{"pos":[2426,2509],"content":"The following example demonstrates getting <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> objects from a loaded assembly.","source":"The following example demonstrates getting **Type** objects from a loaded assembly."},{"pos":[2516,2922],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Types.ViewInfo#7<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Conceptual.Types.ViewInfo#7<ept id=\"p4\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#7)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Conceptual.Types.ViewInfo#7<ept id=\"p6\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#7)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Conceptual.Types.ViewInfo#7](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#7)]\n [!code-csharp[Conceptual.Types.ViewInfo#7](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#7)]\n [!code-vb[Conceptual.Types.ViewInfo#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#7)]"},{"content":"Once you obtain a <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, there are many ways you can discover information about the members of that type.","pos":[2929,3037],"source":"Once you obtain a **Type**, there are many ways you can discover information about the members of that type."},{"content":"For example, you can find out about all the type's members by calling the <ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A?displayProperty=fullName&gt;</ph> method, which obtains an array of <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects describing each of the members of the current type.","pos":[3038,3299],"source":" For example, you can find out about all the type's members by calling the <xref:System.Type.GetMembers%2A?displayProperty=fullName> method, which obtains an array of <xref:System.Reflection.MemberInfo> objects describing each of the members of the current type."},{"content":"You can also use methods on the <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> class to retrieve information about one or more constructors, methods, events, fields, or properties that you specify by name.","pos":[3306,3473],"source":"You can also use methods on the **Type** class to retrieve information about one or more constructors, methods, events, fields, or properties that you specify by name."},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Type.GetConstructor%2A?displayProperty=fullName&gt;</ph> encapsulates a specific constructor of the current class.","pos":[3474,3606],"source":" For example, <xref:System.Type.GetConstructor%2A?displayProperty=fullName> encapsulates a specific constructor of the current class."},{"content":"If you have a <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, you can use the <ph id=\"ph1\">&lt;xref:System.Type.Module%2A?displayProperty=fullName&gt;</ph> property to obtain an object that encapsulates the module containing that type.","pos":[3613,3786],"source":"If you have a **Type**, you can use the <xref:System.Type.Module%2A?displayProperty=fullName> property to obtain an object that encapsulates the module containing that type."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName&gt;</ph> property to locate an object that encapsulates the assembly containing the module.","pos":[3787,3946],"source":" Use the <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName> property to locate an object that encapsulates the assembly containing the module."},{"content":"You can obtain the assembly that encapsulates the type directly by using the <ph id=\"ph1\">&lt;xref:System.Type.Assembly%2A?displayProperty=fullName&gt;</ph> property.","pos":[3947,4089],"source":" You can obtain the assembly that encapsulates the type directly by using the <xref:System.Type.Assembly%2A?displayProperty=fullName> property."},{"pos":[4098,4129],"content":"System.Type and ConstructorInfo","linkify":"System.Type and ConstructorInfo","nodes":[{"content":"System.Type and ConstructorInfo","pos":[0,31]}]},{"content":"The following example shows how to list the constructors for a class, in this case, the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class.","pos":[4133,4248],"source":"The following example shows how to list the constructors for a class, in this case, the <xref:System.String> class."},{"pos":[4255,4661],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Types.ViewInfo#1<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source1.cpp#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Conceptual.Types.ViewInfo#1<ept id=\"p4\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source1.cs#1)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Conceptual.Types.ViewInfo#1<ept id=\"p6\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source1.vb#1)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Conceptual.Types.ViewInfo#1](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source1.cpp#1)]\n [!code-csharp[Conceptual.Types.ViewInfo#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source1.cs#1)]\n [!code-vb[Conceptual.Types.ViewInfo#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source1.vb#1)]"},{"pos":[4670,4721],"content":"MemberInfo, MethodInfo, FieldInfo, and PropertyInfo","linkify":"MemberInfo, MethodInfo, FieldInfo, and PropertyInfo","nodes":[{"content":"MemberInfo, MethodInfo, FieldInfo, and PropertyInfo","pos":[0,51]}]},{"content":"Obtain information about the type's methods, properties, events, and fields using <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects.","pos":[4725,4966],"source":"Obtain information about the type's methods, properties, events, and fields using <xref:System.Reflection.MemberInfo>, <xref:System.Reflection.MethodInfo>, <xref:System.Reflection.FieldInfo>, or <xref:System.Reflection.PropertyInfo> objects."},{"pos":[4973,5171],"content":"The following example uses <bpt id=\"p1\">**</bpt>MemberInfo<ept id=\"p1\">**</ept> to list the number of members in the <bpt id=\"p2\">**</bpt>System.IO.File<ept id=\"p2\">**</ept> class and uses the <ph id=\"ph1\">&lt;xref:System.Type.IsPublic%2A&gt;</ph> property to determine the visibility of the class.","source":"The following example uses **MemberInfo** to list the number of members in the **System.IO.File** class and uses the <xref:System.Type.IsPublic%2A> property to determine the visibility of the class."},{"pos":[5178,5584],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Types.ViewInfo#2<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source2.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Conceptual.Types.ViewInfo#2<ept id=\"p4\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source2.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Conceptual.Types.ViewInfo#2<ept id=\"p6\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source2.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Conceptual.Types.ViewInfo#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source2.cpp#2)]\n [!code-csharp[Conceptual.Types.ViewInfo#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source2.cs#2)]\n [!code-vb[Conceptual.Types.ViewInfo#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source2.vb#2)]"},{"content":"The following example investigates the type of the specified member.","pos":[5591,5659]},{"content":"It performs reflection on a member of the <bpt id=\"p1\">**</bpt>MemberInfo<ept id=\"p1\">**</ept> class, and lists its type.","pos":[5660,5743],"source":" It performs reflection on a member of the **MemberInfo** class, and lists its type."},{"pos":[5750,6156],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Types.ViewInfo#3<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source3.cpp#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Conceptual.Types.ViewInfo#3<ept id=\"p4\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source3.cs#3)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Conceptual.Types.ViewInfo#3<ept id=\"p6\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source3.vb#3)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Conceptual.Types.ViewInfo#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source3.cpp#3)]\n [!code-csharp[Conceptual.Types.ViewInfo#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source3.cs#3)]\n [!code-vb[Conceptual.Types.ViewInfo#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source3.vb#3)]"},{"pos":[6163,6438],"content":"The following example uses all the Reflection <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>Info<ept id=\"p1\">**</ept> classes along with <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags&gt;</ph> to list all the members (constructors, fields, properties, events, and methods) of the specified class, dividing the members into static and instance categories.","source":"The following example uses all the Reflection **\\*Info** classes along with <xref:System.Reflection.BindingFlags> to list all the members (constructors, fields, properties, events, and methods) of the specified class, dividing the members into static and instance categories."},{"pos":[6445,6851],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Types.ViewInfo#4<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source4.cpp#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Conceptual.Types.ViewInfo#4<ept id=\"p4\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source4.cs#4)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Conceptual.Types.ViewInfo#4<ept id=\"p6\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source4.vb#4)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Conceptual.Types.ViewInfo#4](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source4.cpp#4)]\n [!code-csharp[Conceptual.Types.ViewInfo#4](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source4.cs#4)]\n [!code-vb[Conceptual.Types.ViewInfo#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source4.vb#4)]"},{"pos":[6860,6868],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.BindingFlags&gt;</ph>","pos":[6872,6909],"source":"<xref:System.Reflection.BindingFlags> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph>","pos":[6914,6983],"source":"<xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName&gt;</ph>","pos":[6988,7058],"source":"<xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph>","pos":[7063,7117],"source":"<xref:System.Type.GetType%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A?displayProperty=fullName&gt;</ph>","pos":[7122,7179],"source":"<xref:System.Type.GetMembers%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Type.GetFields%2A?displayProperty=fullName&gt;</ph>","pos":[7184,7240],"source":"<xref:System.Type.GetFields%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph>","pos":[7245,7312],"source":"<xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName&gt;</ph>","pos":[7317,7385],"source":"<xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph>","pos":[7390,7425],"source":"<xref:System.Reflection.MemberInfo> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>","pos":[7430,7470],"source":"<xref:System.Reflection.ConstructorInfo> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>","pos":[7475,7510],"source":"<xref:System.Reflection.MethodInfo> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo&gt;</ph>","pos":[7515,7549],"source":"<xref:System.Reflection.FieldInfo> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo&gt;</ph>","pos":[7554,7588],"source":"<xref:System.Reflection.EventInfo> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>","pos":[7593,7631],"source":"<xref:System.Reflection.ParameterInfo> "},{"content":"<bpt id=\"p1\">[</bpt>Reflection and Generic Types<ept id=\"p1\">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept>","pos":[7636,7746],"source":"[Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)"}]}