<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="third-party-deps.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c0f55150a4a1c4d0fb8b3125565c9ab8ade3117</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\porting\third-party-deps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be5d374162c9074759737d21256b008f3718a8d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">735c3976517c42cfc32ca50bdfbfbef6f755afed</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Analyze dependencies to port code to .NET Core</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to analyze external dependencies in order to port your project from .NET Framework to .NET Core.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Analyze your dependencies to port code to .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To port your code to .NET Core or .NET Standard, you must understand your dependencies.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>External dependencies are the <bpt id="p1">[</bpt>NuGet packages<ept id="p1">](#analyze-referenced-nuget-packages-in-your-projects)</ept> or <bpt id="p2">[</bpt>DLLs<ept id="p2">](#analyze-dependencies-that-arent-nuget-packages)</ept> you reference in your project, but that you don't build.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Evaluate each dependency and develop a contingency plan for the ones that aren't compatible with .NET Core.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Here's how to determine if a dependency is compatible with .NET Core.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Analyze referenced NuGet packages in your projects</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you reference NuGet packages in your project, you need to verify if they're compatible with .NET Core.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are two ways to accomplish that:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using the NuGet Package Explorer app<ept id="p1">](#analyze-nuget-packages-using-nuget-package-explorer)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using the nuget.org site<ept id="p1">](#analyze-nuget-packages-using-nugetorg)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>After analyzing the packages, if they're not compatible with .NET Core and only target .NET Framework, you can check if the <bpt id="p1">[</bpt>.NET Framework compatibility mode<ept id="p1">](#net-framework-compatibility-mode)</ept> can help with your porting process.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Analyze NuGet packages using NuGet Package Explorer</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A NuGet package is itself a set of folders that contain platform-specific assemblies.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>So you need to check if there's a folder that contains a compatible assembly inside the package.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The easiest way to inspect NuGet Package folders is to use the <bpt id="p1">[</bpt>NuGet Package Explorer<ept id="p1">](https://github.com/NuGetPackageExplorer/NuGetPackageExplorer)</ept> tool.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After installing it, use the following steps to see the folder names:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Open the NuGet Package Explorer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Open package from online feed<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Search for the name of the package.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Select the package name from the search results and click <bpt id="p1">**</bpt>open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Expand the <bpt id="p1">*</bpt>lib<ept id="p1">*</ept> folder on the right-hand side and look at folder names.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Look for a folder with any of the following names:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These values are the <bpt id="p1">[</bpt>Target Framework Monikers (TFMs)<ept id="p1">](../../standard/frameworks.md)</ept> that map to versions of the <bpt id="p2">[</bpt>.NET Standard<ept id="p2">](../../standard/net-standard.md)</ept>, .NET Core, and traditional Portable Class Library (PCL) profiles that are compatible with .NET Core.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When looking at the TFMs that a package supports, note that <ph id="ph1">`netcoreapp*`</ph>, while compatible, is for .NET Core projects only and not for .NET Standard projects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A library that only targets <ph id="ph1">`netcoreapp*`</ph> and not <ph id="ph2">`netstandard*`</ph> can only be consumed by other .NET Core apps.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Analyze NuGet packages using nuget.org</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Alternatively, you can see the TFMs that each package supports on <bpt id="p1">[</bpt>nuget.org<ept id="p1">](https://www.nuget.org/)</ept> under the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> section of the package page.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Although using the site is an easier method to verify the compatibility, <bpt id="p1">**</bpt>Dependencies<ept id="p1">**</ept> information is not available on the site for all packages.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>.NET Framework compatibility mode</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>After analyzing the NuGet packages, you might find that they only target the .NET Framework, as most NuGet packages do.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Starting with .NET Standard 2.0, the .NET Framework compatibility mode was introduced.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This compatibility mode allows .NET Standard and .NET Core projects to reference .NET Framework libraries.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Referencing .NET Framework libraries doesn't work for all projects, such as if the library uses Windows Presentation Foundation (WPF) APIs, but it does unblock many porting scenarios.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you reference NuGet packages that target the .NET Framework in your project, such as <bpt id="p1">[</bpt>Huitian.PowerCollections<ept id="p1">](https://www.nuget.org/packages/Huitian.PowerCollections)</ept>, you get a package fallback warning (<bpt id="p2">[</bpt>NU1701<ept id="p2">](/nuget/reference/errors-and-warnings/nu1701)</ept>) similar to the following example:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>That warning is displayed when you add the package and every time you build to make sure you test that package with your project.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If your project is working as expected, you can suppress that warning by editing the package properties in Visual Studio or by manually editing the project file in your favorite code editor.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To suppress the warning by editing the project file, find the <ph id="ph1">`PackageReference`</ph> entry for the package you want to suppress the warning for and add the <ph id="ph2">`NoWarn`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NoWarn`</ph> attribute accepts a comma-separated list of all the warning IDs.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example shows how to suppress the <ph id="ph1">`NU1701`</ph> warning for the <ph id="ph2">`Huitian.PowerCollections`</ph> package by editing your project file manually:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information on how to suppress compiler warnings in Visual Studio, see <bpt id="p1">[</bpt>Suppressing warnings for NuGet packages<ept id="p1">](/visualstudio/ide/how-to-suppress-compiler-warnings#suppress-warnings-for-nuget-packages)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Port your packages to <ph id="ph1">`PackageReference`</ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>.NET Core uses <bpt id="p1">[</bpt>PackageReference<ept id="p1">](/nuget/consume-packages/package-references-in-project-files)</ept> to specify package dependencies.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you are using <bpt id="p1">[</bpt>packages.config<ept id="p1">](/nuget/reference/packages-config)</ept> to specify your packages, you will need to convert over to <ph id="ph1">`PackageReference`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can learn more at <bpt id="p1">[</bpt>Migrate from packages.config to PackageReference<ept id="p1">](/nuget/reference/migrate-packages-config-to-package-reference)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>What to do when your NuGet package dependency doesn't run on .NET Core</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There are a few things you can do if a NuGet package you depend on doesn't run on .NET Core:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the project is open source and hosted somewhere like GitHub, you can engage the developers directly.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can contact the author directly on <bpt id="p1">[</bpt>nuget.org<ept id="p1">](https://www.nuget.org/)</ept>. Search for the package and click <bpt id="p2">**</bpt>Contact Owners<ept id="p2">**</ept> on the left-hand side of the package's page.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can search for another package that runs on .NET Core that accomplishes the same task as the package you were using.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can attempt to write the code the package was doing yourself.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You could eliminate the dependency on the package by changing the functionality of your app, at least until a compatible version of the package becomes available.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remember that open-source project maintainers and NuGet package publishers are often volunteers.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>They contribute because they care about a given domain, do it for free, and often have a different daytime job.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>So be mindful of that when contacting them to ask for .NET Core support.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you can't resolve your issue with any of the above, you may have to port to .NET Core at a later date.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The .NET Team would like to know which libraries are the most important to support with .NET Core.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can send an email to <ph id="ph1">dotnet@microsoft.com</ph> about the libraries you'd like to use.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Analyze dependencies that aren't NuGet packages</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You may have a dependency that isn't a NuGet package, such as a DLL in the file system.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The only way to determine the portability of that dependency is to run the <bpt id="p1">[</bpt>.NET Portability Analyzer<ept id="p1">](https://github.com/Microsoft/dotnet-apiport)</ept> tool.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The tool can analyze assemblies that target the .NET Framework and identify APIs that aren't portable to other .NET platforms such as .NET Core.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can run the tool as a console application or as a <bpt id="p1">[</bpt>Visual Studio extension<ept id="p1">](../../standard/analyzers/portability-analyzer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next<ept id="p1">](libraries.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>