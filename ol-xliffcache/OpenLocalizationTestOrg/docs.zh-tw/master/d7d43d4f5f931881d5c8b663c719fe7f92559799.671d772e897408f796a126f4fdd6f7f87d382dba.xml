{"content":"---\ntitle: \"Widening (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.widening\"\nhelpviewer_keywords: \n  - \"conversions [Visual Basic], type\"\n  - \"type conversion [Visual Basic]\"\n  - \"conversions [Visual Basic], data type\"\n  - \"Widening keyword [Visual Basic]\"\n  - \"data type conversion [Visual Basic]\"\nms.assetid: 646ae263-94d3-40a2-b0cc-64f619292f56\n---\n# Widening (Visual Basic)\nIndicates that a conversion operator (`CType`) converts a class or structure to a type that can hold all possible values of the original class or structure.  \n  \n## Converting with the Widening Keyword  \n The conversion procedure must specify `Public Shared` in addition to `Widening`.  \n  \n Widening conversions always succeed at run time and never incur data loss. Examples are `Single` to `Double`, `Char` to `String`, and a derived type to its base type. This last conversion is widening because the derived type contains all the members of the base type and thus is an instance of the base type.  \n  \n The consuming code does not have to use `CType` for widening conversions, even if `Option Strict` is `On`.  \n  \n The `Widening` keyword can be used in this context:  \n  \n [Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)  \n  \n For example definitions of widening and narrowing conversion operators, see [How to: Define a Conversion Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md).  \n  \n## See also\n\n- [Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)\n- [Narrowing](../../../visual-basic/language-reference/modifiers/narrowing.md)\n- [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)\n- [How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)\n- [CType Function](../../../visual-basic/language-reference/functions/ctype-function.md)\n- [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)\n- [How to: Define a Conversion Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)\n","nodes":[{"pos":[4,359],"embed":true,"restype":"x-metadata","content":"title: \"Widening (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.widening\"\nhelpviewer_keywords: \n  - \"conversions [Visual Basic], type\"\n  - \"type conversion [Visual Basic]\"\n  - \"conversions [Visual Basic], data type\"\n  - \"Widening keyword [Visual Basic]\"\n  - \"data type conversion [Visual Basic]\"\nms.assetid: 646ae263-94d3-40a2-b0cc-64f619292f56","nodes":[{"content":"Widening (Visual Basic)","nodes":[{"pos":[0,23],"content":"Widening (Visual Basic)","nodes":[{"content":"Widening (Visual Basic)","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[366,389],"content":"Widening (Visual Basic)","linkify":"Widening (Visual Basic)","nodes":[{"content":"Widening (Visual Basic)","pos":[0,23]}]},{"pos":[390,546],"content":"Indicates that a conversion operator (<ph id=\"ph1\">`CType`</ph>) converts a class or structure to a type that can hold all possible values of the original class or structure.","source":"Indicates that a conversion operator (`CType`) converts a class or structure to a type that can hold all possible values of the original class or structure."},{"pos":[555,591],"content":"Converting with the Widening Keyword","linkify":"Converting with the Widening Keyword","nodes":[{"content":"Converting with the Widening Keyword","pos":[0,36]}]},{"pos":[595,675],"content":"The conversion procedure must specify <ph id=\"ph1\">`Public Shared`</ph> in addition to <ph id=\"ph2\">`Widening`</ph>.","source":"The conversion procedure must specify `Public Shared` in addition to `Widening`."},{"content":"Widening conversions always succeed at run time and never incur data loss.","pos":[682,756]},{"content":"Examples are <ph id=\"ph1\">`Single`</ph> to <ph id=\"ph2\">`Double`</ph>, <ph id=\"ph3\">`Char`</ph> to <ph id=\"ph4\">`String`</ph>, and a derived type to its base type.","pos":[757,848],"source":" Examples are `Single` to `Double`, `Char` to `String`, and a derived type to its base type."},{"content":"This last conversion is widening because the derived type contains all the members of the base type and thus is an instance of the base type.","pos":[849,990]},{"pos":[997,1103],"content":"The consuming code does not have to use <ph id=\"ph1\">`CType`</ph> for widening conversions, even if <ph id=\"ph2\">`Option Strict`</ph> is <ph id=\"ph3\">`On`</ph>.","source":"The consuming code does not have to use `CType` for widening conversions, even if `Option Strict` is `On`."},{"pos":[1110,1161],"content":"The <ph id=\"ph1\">`Widening`</ph> keyword can be used in this context:","source":"The `Widening` keyword can be used in this context:"},{"pos":[1168,1263],"content":"<bpt id=\"p1\">[</bpt>Operator Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/operator-statement.md)</ept>","source":"[Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)"},{"pos":[1270,1494],"content":"For example definitions of widening and narrowing conversion operators, see <bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.","source":"For example definitions of widening and narrowing conversion operators, see [How to: Define a Conversion Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)."},{"pos":[1503,1511],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1515,1610],"content":"<bpt id=\"p1\">[</bpt>Operator Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/operator-statement.md)</ept>","source":"[Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)"},{"pos":[1613,1689],"content":"<bpt id=\"p1\">[</bpt>Narrowing<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/narrowing.md)</ept>","source":"[Narrowing](../../../visual-basic/language-reference/modifiers/narrowing.md)"},{"pos":[1692,1836],"content":"<bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>","source":"[Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)"},{"pos":[1839,1966],"content":"<bpt id=\"p1\">[</bpt>How to: Define an Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept>","source":"[How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)"},{"pos":[1969,2055],"content":"<bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../../visual-basic/language-reference/functions/ctype-function.md)</ept>","source":"[CType Function](../../../visual-basic/language-reference/functions/ctype-function.md)"},{"pos":[2058,2163],"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","source":"[Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)"},{"pos":[2166,2313],"content":"<bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>","source":"[How to: Define a Conversion Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)"}]}