<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d3f942dca761c4425ed8c2129b752dec349a40f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\overloadable-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26dd783d9be0ed2217d8c14282463dbcfbb0adc2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a87b34fb1bd335558d289283f5a346ba1f17111</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Overloadable Operators (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Overloadable Operators (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C# allows user-defined types to overload operators by defining static member functions using the <bpt id="p1">[</bpt>operator<ept id="p1">](../../../csharp/language-reference/keywords/operator.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Not all operators can be overloaded, however, and others have restrictions, as listed in this table:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overloadability</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">+</ph><ept id="p1">](../../../csharp/language-reference/operators/addition-operator.md)</ept>, <bpt id="p2">[</bpt><ph id="ph2">-</ph><ept id="p2">](../../../csharp/language-reference/operators/subtraction-operator.md)</ept>, <bpt id="p3">[</bpt>!<ept id="p3">](../../../csharp/language-reference/operators/logical-negation-operator.md)</ept>, <bpt id="p4">[</bpt><ph id="ph3">~</ph><ept id="p4">](../../../csharp/language-reference/operators/bitwise-complement-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph4">++</ph><ept id="p5">](../../../csharp/language-reference/operators/increment-operator.md)</ept>, <bpt id="p6">[</bpt><ph id="ph5">--</ph><ept id="p6">](../../../csharp/language-reference/operators/decrement-operator.md)</ept>, <bpt id="p7">[</bpt>true<ept id="p7">](../../../csharp/language-reference/keywords/true.md)</ept>, <bpt id="p8">[</bpt>false<ept id="p8">](../../../csharp/language-reference/keywords/false.md)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These unary operators can be overloaded.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">+</ph><ept id="p1">](../../../csharp/language-reference/operators/addition-operator.md)</ept>, <bpt id="p2">[</bpt><ph id="ph2">-</ph><ept id="p2">](../../../csharp/language-reference/operators/subtraction-operator.md)</ept>, <bpt id="p3">[</bpt><ph id="ph3">*</ph><ept id="p3">](../../../csharp/language-reference/operators/multiplication-operator.md)</ept>, <bpt id="p4">[</bpt><ph id="ph4">/</ph><ept id="p4">](../../../csharp/language-reference/operators/division-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph5">%</ph><ept id="p5">](../../../csharp/language-reference/operators/modulus-operator.md)</ept>, <bpt id="p6">[</bpt><ph id="ph6">&amp;</ph><ept id="p6">](../../../csharp/language-reference/operators/and-operator.md)</ept>, <bpt id="p7">[</bpt>&amp;#124;<ept id="p7">](../../../csharp/language-reference/operators/or-operator.md)</ept>, <bpt id="p8">[</bpt><ph id="ph7">^</ph><ept id="p8">](../../../csharp/language-reference/operators/xor-operator.md)</ept>, <bpt id="p9">[</bpt><ph id="ph8">&lt;</ph><ph id="ph9">\&lt;</ph><ept id="p9">](../../../csharp/language-reference/operators/left-shift-operator.md)</ept>, <bpt id="p10">[</bpt><ph id="ph10">&gt;&gt;</ph><ept id="p10">](../../../csharp/language-reference/operators/right-shift-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These binary operators can be overloaded.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">==</ph><ept id="p1">](../../../csharp/language-reference/operators/equality-comparison-operator.md)</ept>, <bpt id="p2">[</bpt>!=<ept id="p2">](../../../csharp/language-reference/operators/not-equal-operator.md)</ept>, <bpt id="p3">[</bpt><ph id="ph2">\&lt;</ph><ept id="p3">](../../../csharp/language-reference/operators/less-than-operator.md)</ept>, <bpt id="p4">[</bpt><ph id="ph3">&gt;</ph><ept id="p4">](../../../csharp/language-reference/operators/greater-than-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph4">\&lt;</ph><ph id="ph5">=</ph><ept id="p5">](../../../csharp/language-reference/operators/less-than-equal-operator.md)</ept>, <bpt id="p6">[</bpt><ph id="ph6">&gt;=</ph><ept id="p6">](../../../csharp/language-reference/operators/greater-than-equal-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The comparison operators can be overloaded (but see the note that follows this table).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p1">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept>, <bpt id="p2">[</bpt>&amp;#124;&amp;#124;<ept id="p2">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The conditional logical operators cannot be overloaded, but they are evaluated using <ph id="ph1">`&amp;`</ph> and <ph id="ph2">`&amp;#124;`</ph>, which can be overloaded.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;&amp;#93;<ept id="p1">](../../../csharp/language-reference/operators/index-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The array indexing operator cannot be overloaded, but you can define indexers.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>(T)x<ept id="p1">](../../../csharp/language-reference/operators/invocation-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The cast operator cannot be overloaded, but you can define new conversion operators (see <bpt id="p1">[</bpt>explicit<ept id="p1">](../../../csharp/language-reference/keywords/explicit.md)</ept> and <bpt id="p2">[</bpt>implicit<ept id="p2">](../../../csharp/language-reference/keywords/implicit.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">+=</ph><ept id="p1">](../../../csharp/language-reference/operators/addition-assignment-operator.md)</ept>, <bpt id="p2">[</bpt><ph id="ph2">-=</ph><ept id="p2">](../../../csharp/language-reference/operators/subtraction-assignment-operator.md)</ept>, <bpt id="p3">[</bpt><ph id="ph3">*=</ph><ept id="p3">](../../../csharp/language-reference/operators/multiplication-assignment-operator.md)</ept>, <bpt id="p4">[</bpt><ph id="ph4">/=</ph><ept id="p4">](../../../csharp/language-reference/operators/division-assignment-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph5">%=</ph><ept id="p5">](../../../csharp/language-reference/operators/modulus-assignment-operator.md)</ept>, <bpt id="p6">[</bpt><ph id="ph6">&amp;=</ph><ept id="p6">](../../../csharp/language-reference/operators/and-assignment-operator.md)</ept>, <bpt id="p7">[</bpt>&amp;#124;=<ept id="p7">](../../../csharp/language-reference/operators/or-assignment-operator.md)</ept>, <bpt id="p8">[</bpt><ph id="ph7">^=</ph><ept id="p8">](../../../csharp/language-reference/operators/xor-assignment-operator.md)</ept>, <bpt id="p9">[</bpt><ph id="ph8">&lt;</ph><ph id="ph9">\&lt;</ph><ph id="ph10">=</ph><ept id="p9">](../../../csharp/language-reference/operators/left-shift-assignment-operator.md)</ept>, <bpt id="p10">[</bpt><ph id="ph11">&gt;&gt;=</ph><ept id="p10">](../../../csharp/language-reference/operators/right-shift-assignment-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Assignment operators cannot be overloaded, but <ph id="ph1">`+=`</ph>, for example, is evaluated using <ph id="ph2">`+`</ph>, which can be overloaded.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">=</ph><ept id="p1">](../../../csharp/language-reference/operators/assignment-operator.md)</ept>, <bpt id="p2">[</bpt>.<ept id="p2">](../../../csharp/language-reference/operators/member-access-operator.md)</ept>, <bpt id="p3">[</bpt>?:<ept id="p3">](../../../csharp/language-reference/operators/conditional-operator.md)</ept>, <bpt id="p4">[</bpt>??<ept id="p4">](../../../csharp/language-reference/operators/null-conditional-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph2">-&gt;</ph><ept id="p5">](../../../csharp/language-reference/operators/dereference-operator.md)</ept>, <bpt id="p6">[</bpt><ph id="ph3">=&gt;</ph><ept id="p6">](../../../csharp/language-reference/operators/lambda-operator.md)</ept>, <bpt id="p7">[</bpt>f(x)<ept id="p7">](../../../csharp/language-reference/operators/invocation-operator.md)</ept>, <bpt id="p8">[</bpt>as<ept id="p8">](../../../csharp/language-reference/keywords/as.md)</ept>, <bpt id="p9">[</bpt>checked<ept id="p9">](../../../csharp/language-reference/keywords/checked.md)</ept>, <bpt id="p10">[</bpt>unchecked<ept id="p10">](../../../csharp/language-reference/keywords/unchecked.md)</ept>, <bpt id="p11">[</bpt>default<ept id="p11">](../../../csharp/programming-guide/generics/default-keyword-in-generic-code.md)</ept>, <bpt id="p12">[</bpt>delegate<ept id="p12">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>, <bpt id="p13">[</bpt>is<ept id="p13">](../../../csharp/language-reference/keywords/is.md)</ept>, <bpt id="p14">[</bpt>new<ept id="p14">](../../../csharp/language-reference/keywords/new.md)</ept>, <bpt id="p15">[</bpt>sizeof<ept id="p15">](../../../csharp/language-reference/keywords/sizeof.md)</ept>, <bpt id="p16">[</bpt>typeof<ept id="p16">](../../../csharp/language-reference/keywords/typeof.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These operators cannot be overloaded.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The comparison operators, if overloaded, must be overloaded in pairs; that is, if <ph id="ph1">`==`</ph> is overloaded, <ph id="ph2">`!=`</ph> must also be overloaded.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The reverse is also true, and similar for <ph id="ph1">`&lt;`</ph> and <ph id="ph2">`&gt;`</ph>, and for <ph id="ph3">`&lt;=`</ph> and <ph id="ph4">`&gt;=`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To overload an operator on a custom class requires creating a method on the class with the correct signature.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The method must be named "operator X" where X is the name or symbol of the operator being overloaded.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unary operators have one parameter, and binary operators have two parameters.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In each case, one parameter must be the same type as the class or struct that declares the operator.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It is common to have definitions that simply return immediately with the result of an expression.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>There is a syntax shortcut using <ph id="ph1">`=&gt;`</ph> for these situations.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Use Operator Overloading to Create a Complex Number Class<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Statements, Expressions, and Operators<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Operators<ept id="p1">](../../../csharp/language-reference/operators/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Why are overloaded operators always static in C#?<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=112383)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>