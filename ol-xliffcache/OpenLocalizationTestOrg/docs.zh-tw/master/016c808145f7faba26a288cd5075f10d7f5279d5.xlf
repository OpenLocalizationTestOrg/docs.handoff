<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="relaxed-delegate-conversion.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">016c808145f7faba26a288cd5075f10d7f5279d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\delegates\relaxed-delegate-conversion.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5baff6fc180ef009ab4e32b631385d04e73b9981</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd7ae36ddbf8aa7b90e6a9b4b2a65380617c6182</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Relaxed Delegate Conversion (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Relaxed Delegate Conversion (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Relaxed delegate conversion enables you to assign subs and functions to delegates or handlers even when their signatures are not identical.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Therefore, binding to delegates becomes consistent with the binding already allowed for method invocations.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters and Return Type</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In place of exact signature match, relaxed conversion requires that the following conditions be met when <ph id="ph1">`Option Strict`</ph> is set to <ph id="ph2">`On`</ph>:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A widening conversion must exist from the data type of each delegate parameter to the data type of the corresponding parameter of the assigned function or <ph id="ph1">`Sub`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the following example, the delegate <ph id="ph1">`Del1`</ph> has one parameter, an <ph id="ph2">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Parameter <ph id="ph1">`m`</ph> in the assigned lambda expressions must have a data type for which there is a widening conversion from <ph id="ph2">`Integer`</ph>, such as <ph id="ph3">`Long`</ph> or <ph id="ph4">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Narrowing conversions are permitted only when <ph id="ph1">`Option Strict`</ph> is set to <ph id="ph2">`Off`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A widening conversion must exist in the opposite direction from the return type of the assigned function or <ph id="ph1">`Sub`</ph> to the return type of the delegate.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the following examples, the body of each assigned lambda expression must evaluate to a data type that widens to <ph id="ph1">`Integer`</ph> because the return type of <ph id="ph2">`del1`</ph> is <ph id="ph3">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is set to <ph id="ph2">`Off`</ph>, the widening restriction is removed in both directions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Omitting Parameter Specifications</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Relaxed delegates also allow you to completely omit parameter specifications in the assigned method:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that you cannot specify some parameters and omit others.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The ability to omit parameters is helpful in a situation such as defining an event handler, where several complex parameters are involved.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The arguments to some event handlers are not used.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Instead, the handler directly accesses the state of the control on which the event is registered, and ignores the arguments.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Relaxed delegates allow you to omit the arguments in such declarations when no ambiguities result.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the following example, the fully specified method <ph id="ph1">`OnClick`</ph> can be rewritten as <ph id="ph2">`RelaxedOnClick`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>AddressOf Examples</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Lambda expressions are used in the previous examples to make the type relationships easy to see.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, the same relaxations are permitted for delegate assignments that use <ph id="ph1">`AddressOf`</ph>, <ph id="ph2">`Handles`</ph>, or <ph id="ph3">`AddHandler`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the following example, functions <ph id="ph1">`f1`</ph>, <ph id="ph2">`f2`</ph>, <ph id="ph3">`f3`</ph>, and <ph id="ph4">`f4`</ph> can all be assigned to <ph id="ph5">`Del1`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example is valid only when <ph id="ph1">`Option Strict`</ph> is set to <ph id="ph2">`Off`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Dropping Function Returns</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Relaxed delegate conversion enables you to assign a function to a <ph id="ph1">`Sub`</ph> delegate, effectively ignoring the return value of the function.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, you cannot assign a <ph id="ph1">`Sub`</ph> to a function delegate.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the following example, the address of function <ph id="ph1">`doubler`</ph> is assigned to <ph id="ph2">`Sub`</ph> delegate <ph id="ph3">`Del3`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Pass Procedures to Another Procedure in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/delegates/how-to-pass-procedures-to-another-procedure.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>