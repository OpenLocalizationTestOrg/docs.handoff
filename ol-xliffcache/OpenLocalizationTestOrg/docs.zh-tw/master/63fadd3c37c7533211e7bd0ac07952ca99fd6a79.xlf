<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="lock-statement.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63fadd3c37c7533211e7bd0ac07952ca99fd6a79</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\lock-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3374616b357e2713104ed7d568e0aa63b27d71ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b2d7ca951baed50d24d4a320a2554b8c11c8868</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>lock statement - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Use the C# lock statement to synchronize thread access to a shared resource</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>lock statement (C# Reference)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> statement acquires the mutual-exclusion lock for a given object, executes a statement block, and then releases the lock.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>While a lock is held, the thread that holds the lock can again acquire and release the lock.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Any other thread is blocked from acquiring the lock and waits until the lock is released.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> statement is of the form</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`x`</ph> is an expression of a <bpt id="p1">[</bpt>reference type<ept id="p1">](reference-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It's precisely equivalent to</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Since the code uses a <bpt id="p1">[</bpt>try...finally<ept id="p1">](try-finally.md)</ept> block, the lock is released even if an exception is thrown within the body of a <ph id="ph1">`lock`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can't use the <bpt id="p1">[</bpt>await<ept id="p1">](await.md)</ept> keyword in the body of a <ph id="ph1">`lock`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you synchronize thread access to a shared resource, lock on a dedicated object instance (for example, <ph id="ph1">`private readonly object balanceLock = new object();`</ph>) or another instance that is unlikely to be used as a lock object by unrelated parts of the code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Avoid using the same lock object instance for different shared resources, as it might result in deadlock or lock contention.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In particular, avoid using the following as lock objects:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`this`</ph>, as it might be used by the callers as a lock.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type&gt;</ph> instances, as those might be obtained by the <bpt id="p1">[</bpt>typeof<ept id="p1">](typeof.md)</ept> operator or reflection.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>string instances, including string literals, as those might be <bpt id="p1">[</bpt>interned<ept id="p1">](/dotnet/api/system.string.intern#remarks)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example defines an <ph id="ph1">`Account`</ph> class that synchronizes access to its private <ph id="ph2">`balance`</ph> field by locking on a dedicated <ph id="ph3">`balanceLock`</ph> instance.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using the same instance for locking ensures that the <ph id="ph1">`balance`</ph> field cannot be updated simultaneously by two threads attempting to call the <ph id="ph2">`Debit`</ph> or <ph id="ph3">`Credit`</ph> methods simultaneously.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Statement Keywords<ept id="p1">](statement-keywords.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overview of synchronization primitives<ept id="p1">](../../../standard/threading/overview-of-synchronization-primitives.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>