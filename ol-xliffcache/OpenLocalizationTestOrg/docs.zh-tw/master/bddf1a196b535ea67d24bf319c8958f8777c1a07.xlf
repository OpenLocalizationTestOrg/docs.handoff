<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bddf1a196b535ea67d24bf319c8958f8777c1a07</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\events\how-to-implement-a-provider.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54d11f7ab1be49a79fcc8a5e184c6ba934c15aba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80063807240d04ddc0366ef0da569acc88bfa84a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Implement a Provider | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Implement a Provider</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The observer design pattern requires a division between a provider, which monitors data and sends notifications, and one or more observers, which receive notifications (callbacks) from the provider.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic discusses how to create a provider.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A related topic, <bpt id="p1">[</bpt>How to: Implement an Observer<ept id="p1">](../../../docs/standard/events/how-to-implement-an-observer.md)</ept>, discusses how to create an observer.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To create a provider</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Define the data that the provider is responsible for sending to observers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Although the provider and the data that it sends to observers can be a single type, they are generally represented by different types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, in a temperature monitoring application, the <ph id="ph1">`Temperature`</ph> structure defines the data that the provider (which is represented by the <ph id="ph2">`TemperatureMonitor`</ph> class defined in the next step) monitors and to which observers subscribe.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesign.HowTo#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/data.cs#1)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesign.HowTo#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/data.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Define the data provider, which is a type that implements the <ph id="ph1">&lt;xref:System.IObservable%601?displayProperty=fullName&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The provider's generic type argument is the type that the provider sends to observers.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`TemperatureMonitor`</ph> class, which is a constructed <ph id="ph2">&lt;xref:System.IObservable%601?displayProperty=fullName&gt;</ph> implementation with a generic type argument of <ph id="ph3">`Temperature`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesign.HowTo#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/provider.cs#2)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesign.HowTo#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/provider.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Determine how the provider will store references to observers so that each observer can be notified when appropriate.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Most commonly, a collection object such as a generic <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object is used for this purpose.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example defines a private <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object that is instantiated in the <ph id="ph2">`TemperatureMonitor`</ph> class constructor.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesign.HowTo#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/provider.cs#3)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesign.HowTo#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/provider.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Define an <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> implementation that the provider can return to subscribers so that they can stop receiving notifications at any time.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example defines a nested <ph id="ph1">`Unsubscriber`</ph> class that is passed a reference to the subscribers collection and to the subscriber when the class is instantiated.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This code enables the subscriber to call the object's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;</ph> implementation to remove itself from the subscribers collection.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesign.HowTo#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/provider.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesign.HowTo#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/provider.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The method is passed a reference to the <ph id="ph1">&lt;xref:System.IObserver%601?displayProperty=fullName&gt;</ph> interface and should be stored in the object designed for that purpose in step 3.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The method should then return the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> implementation developed in step 4.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows the implementation of the <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method in the <ph id="ph2">`TemperatureMonitor`</ph> class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesign.HowTo#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/provider.cs#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesign.HowTo#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/provider.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Notify observers as appropriate by calling their <ph id="ph1">&lt;xref:System.IObserver%601.OnNext%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.IObserver%601.OnError%2A?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=fullName&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In some cases, a provider may not call the <ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph> method when an error occurs.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`GetTemperature`</ph> method simulates a monitor that reads temperature data every five seconds and notifies observers if the temperature has changed by at least .1 degree since the previous reading.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the device does not report a temperature (that is, if its value is null), the provider notifies observers that the transmission is complete.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note that, in addition to calling each observer's <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> method, the <ph id="ph2">`GetTemperature`</ph> method clears the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this case, the provider makes no calls to the <ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph> method of its observers.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesign.HowTo#6<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/provider.cs#6)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesign.HowTo#6<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/provider.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example contains the complete source code for defining an <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> implementation for a temperature monitoring application.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It includes the <ph id="ph1">`Temperature`</ph> structure, which is the data sent to observers, and the <ph id="ph2">`TemperatureMonitor`</ph> class, which is the <ph id="ph3">&lt;xref:System.IObservable%601&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesign.HowTo#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/provider.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesign.HowTo#7<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/provider.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Observer Design Pattern<ept id="p1">](../../../docs/standard/events/observer-design-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement an Observer<ept id="p1">](../../../docs/standard/events/how-to-implement-an-observer.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Observer Design Pattern Best Practices<ept id="p1">](../../../docs/standard/events/observer-design-pattern-best-practices.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>