<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="remove.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc6f310e17841349d476f35214ac17100e81d76f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\remove.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb7f6364d621c835bdd17da3485a20da0c8f83a5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28a89d6d1ac1d40db7432762317833237e6d9ccd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>remove contextual keyword - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>remove (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`remove`</ph> contextual keyword is used to define a custom event accessor that is invoked when client code unsubscribes from your <bpt id="p1">[</bpt>event<ept id="p1">](event.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you supply a custom <ph id="ph1">`remove`</ph> accessor, you must also supply an <bpt id="p1">[</bpt>add<ept id="p1">](add.md)</ept> accessor.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example shows an event with custom <bpt id="p1">[</bpt>add<ept id="p1">](add.md)</ept> and <ph id="ph1">`remove`</ph> accessors.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For the full example, see <bpt id="p1">[</bpt>How to:  Implement Interface Events<ept id="p1">](../../programming-guide/events/how-to-implement-interface-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You do not typically need to provide your own custom event accessors.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The accessors that are automatically generated by the compiler when you declare an event are sufficient for most scenarios.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](../../programming-guide/events/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>