{"content":"---\ntitle: \"Join Operations (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 39ab4854-ac84-4738-9d0b-3cb79be84db4\n---\n# Join Operations (Visual Basic)\nA *join* of two data sources is the association of objects in one data source with objects that share a common attribute in another data source.  \n  \n Joining is an important operation in queries that target data sources whose relationships to each other cannot be followed directly. In object-oriented programming, this could mean a correlation between objects that is not modeled, such as the backwards direction of a one-way relationship. An example of a one-way relationship is a Customer class that has a property of type City, but the City class does not have a property that is a collection of Customer objects. If you have a list of City objects and you want to find all the customers in each city, you could use a join operation to find them.  \n  \n The join methods provided in the LINQ framework are <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>. These methods perform equijoins, or joins that match two data sources based on equality of their keys. (For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned. The <xref:System.Linq.Enumerable.GroupJoin%2A> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins. A left outer join is a join that returns each element of the first (left) data source, even if it has no correlated elements in the other data source.  \n  \n The following illustration shows a conceptual view of two sets and the elements within those sets that are included in either an inner join or a left outer join.  \n  \n ![Two overlapping circles showing inner&#47;outer.](./media/join-operations/join-method-overlapping-circles.png)  \n  \n## Methods  \n  \n|Method Name|Description|Visual Basic Query Expression Syntax|More Information|  \n|-----------------|-----------------|------------------------------------------|----------------------|  \n|Join|Joins two sequences based on key selector functions and extracts pairs of values.|`From x In …, y In … Where x.a = y.a`<br /><br /> -or-<br /><br /> `Join … [As …]In … On …`|<xref:System.Linq.Enumerable.Join%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.Join%2A?displayProperty=nameWithType>|  \n|GroupJoin|Joins two sequences based on key selector functions and groups the resulting matches for each element.|`Group Join … In … On …`|<xref:System.Linq.Enumerable.GroupJoin%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.GroupJoin%2A?displayProperty=nameWithType>|  \n  \n## See also\n\n- <xref:System.Linq>\n- [Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)\n- [Anonymous Types](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)\n- [Formulate Joins and Cross-Product Queries](../../../../framework/data/adonet/sql/linq/formulate-joins-and-cross-product-queries.md)\n- [Join Clause](../../../../visual-basic/language-reference/queries/join-clause.md)\n- [How to: Join Content from Dissimilar Files (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)\n- [How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)\n","nodes":[{"pos":[4,112],"embed":true,"restype":"x-metadata","content":"title: \"Join Operations (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 39ab4854-ac84-4738-9d0b-3cb79be84db4","nodes":[{"content":"Join Operations (Visual Basic)","nodes":[{"pos":[0,30],"content":"Join Operations (Visual Basic)","nodes":[{"content":"Join Operations (Visual Basic)","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[119,149],"content":"Join Operations (Visual Basic)","linkify":"Join Operations (Visual Basic)","nodes":[{"content":"Join Operations (Visual Basic)","pos":[0,30]}]},{"pos":[150,294],"content":"A <bpt id=\"p1\">*</bpt>join<ept id=\"p1\">*</ept> of two data sources is the association of objects in one data source with objects that share a common attribute in another data source.","source":"A *join* of two data sources is the association of objects in one data source with objects that share a common attribute in another data source."},{"content":"Joining is an important operation in queries that target data sources whose relationships to each other cannot be followed directly.","pos":[301,433]},{"content":"In object-oriented programming, this could mean a correlation between objects that is not modeled, such as the backwards direction of a one-way relationship.","pos":[434,591]},{"content":"An example of a one-way relationship is a Customer class that has a property of type City, but the City class does not have a property that is a collection of Customer objects.","pos":[592,768]},{"content":"If you have a list of City objects and you want to find all the customers in each city, you could use a join operation to find them.","pos":[769,901]},{"content":"The join methods provided in the LINQ framework are <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.","pos":[908,1045],"source":"The join methods provided in the LINQ framework are <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>."},{"content":"These methods perform equijoins, or joins that match two data sources based on equality of their keys.","pos":[1046,1148]},{"content":"(For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned.","pos":[1149,1453],"source":" (For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins.","pos":[1454,1628],"source":" The <xref:System.Linq.Enumerable.GroupJoin%2A> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins."},{"content":"A left outer join is a join that returns each element of the first (left) data source, even if it has no correlated elements in the other data source.","pos":[1629,1779]},{"content":"The following illustration shows a conceptual view of two sets and the elements within those sets that are included in either an inner join or a left outer join.","pos":[1786,1947]},{"content":"Two overlapping circles showing inner&amp;#47;outer.","pos":[1956,2004],"source":"Two overlapping circles showing inner&#47;outer."},{"pos":[2075,2082],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[2089,2100]},{"content":"Description","pos":[2101,2112]},{"content":"Visual Basic Query Expression Syntax","pos":[2113,2149]},{"content":"More Information","pos":[2150,2166]},{"content":"Join","pos":[2277,2281]},{"content":"Joins two sequences based on key selector functions and extracts pairs of values.","pos":[2282,2363]},{"content":"-or-","pos":[2414,2418]},{"content":"GroupJoin","pos":[2605,2614]},{"content":"Joins two sequences based on key selector functions and groups the resulting matches for each element.","pos":[2615,2717]},{"pos":[2907,2915],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2940,3085],"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>","source":"[Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)"},{"pos":[3088,3206],"content":"<bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>","source":"[Anonymous Types](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)"},{"pos":[3209,3341],"content":"<bpt id=\"p1\">[</bpt>Formulate Joins and Cross-Product Queries<ept id=\"p1\">](../../../../framework/data/adonet/sql/linq/formulate-joins-and-cross-product-queries.md)</ept>","source":"[Formulate Joins and Cross-Product Queries](../../../../framework/data/adonet/sql/linq/formulate-joins-and-cross-product-queries.md)"},{"pos":[3344,3425],"content":"<bpt id=\"p1\">[</bpt>Join Clause<ept id=\"p1\">](../../../../visual-basic/language-reference/queries/join-clause.md)</ept>","source":"[Join Clause](../../../../visual-basic/language-reference/queries/join-clause.md)"},{"pos":[3428,3602],"content":"<bpt id=\"p1\">[</bpt>How to: Join Content from Dissimilar Files (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)</ept>","source":"[How to: Join Content from Dissimilar Files (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)"},{"pos":[3605,3809],"content":"<bpt id=\"p1\">[</bpt>How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)</ept>","source":"[How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)"}]}