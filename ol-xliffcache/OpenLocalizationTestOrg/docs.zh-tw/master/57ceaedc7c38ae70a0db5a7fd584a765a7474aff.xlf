<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="security-and-race-conditions.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57ceaedc7c38ae70a0db5a7fd584a765a7474aff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\security-and-race-conditions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1396fe26bfbe7cd2d81be9810807646155e291e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf13c1da2ce5bc5828144bab94e427530e2ba1db</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Security and Race Conditions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Security and Race Conditions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Another area of concern is the potential for security holes exploited by race conditions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are several ways in which this might happen.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The subtopics that follow outline some of the major pitfalls that the developer must avoid.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Race Conditions in the Dispose Method</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a class's <bpt id="p1">**</bpt>Dispose<ept id="p1">**</ept> method (for more information, see <bpt id="p2">[</bpt>Garbage Collection<ept id="p2">](../../../docs/standard/garbage-collection/index.md)</ept>) is not synchronized, it is possible that cleanup code inside <bpt id="p3">**</bpt>Dispose<ept id="p3">**</ept> can be run more than once, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because this <bpt id="p1">**</bpt>Dispose<ept id="p1">**</ept> implementation is not synchronized, it is possible for <ph id="ph1">`Cleanup`</ph> to be called by first one thread and then a second thread before <ph id="ph2">`_myObj`</ph> is set to <bpt id="p2">**</bpt>null<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Whether this is a security concern depends on what happens when the <ph id="ph1">`Cleanup`</ph> code runs.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A major issue with unsynchronized <bpt id="p1">**</bpt>Dispose<ept id="p1">**</ept> implementations involves the use of resource handles such as files.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Improper disposal can cause the wrong handle to be used, which often leads to security vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Race Conditions in Constructors</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In some applications, it might be possible for other threads to access class members before their class constructors have completely run.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You should review all class constructors to make sure that there are no security issues if this should happen, or synchronize threads if necessary.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Race Conditions with Cached Objects</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Code that caches security information or uses the code access security <bpt id="p1">[</bpt>Assert<ept id="p1">](../../../docs/framework/misc/using-the-assert-method.md)</ept> operation might also be vulnerable to race conditions if other parts of the class are not appropriately synchronized, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If there are other paths to <ph id="ph1">`DoOtherWork`</ph> that can be called from another thread with the same object, an untrusted caller can slip past a demand.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If your code caches security information, make sure that you review it for this vulnerability.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Race Conditions in Finalizers</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Race conditions can also occur in an object that references a static or unmanaged resource that it then frees in its finalizer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If multiple objects share a resource that is manipulated in a class's finalizer, the objects must synchronize all access to that resource.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Secure Coding Guidelines<ept id="p1">](../../../docs/standard/security/secure-coding-guidelines.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>