{"content":"---\ntitle: Join by using composite keys (LINQ in C#)\ndescription: Learn how to join by using composite keys in LINQ.\nms.date: 12/01/2016\nms.assetid: da70b54d-3213-45eb-8437-fbe75cbcf935\n---\n# Join by using composite keys\n\nThis example shows how to perform join operations in which you want to use more than one key to define a match. This is accomplished by using a composite key. You create a composite key as an anonymous type or named typed with the values that you want to compare. If the query variable will be passed across method boundaries, use a named type that overrides <xref:System.Object.Equals%2A> and <xref:System.Object.GetHashCode%2A> for the key. The names of the properties, and the order in which they occur, must be identical in each key.\n\n## Example\n\nThe following example demonstrates how to use a composite key to join data from three tables:\n\n```csharp\nvar query = from o in db.Orders\n    from p in db.Products\n    join d in db.OrderDetails\n        on new {o.OrderID, p.ProductID} equals new {d.OrderID, d.ProductID} into details\n        from d in details\n        select new {o.OrderID, p.ProductID, d.UnitPrice};\n```\n\nType inference on composite keys depends on the names of the properties in the keys, and the order in which they occur. If the properties in the source sequences don't have the same names, you must assign new names in the keys. For example, if the `Orders` table and `OrderDetails` table each used different names for their columns, you could create composite keys by assigning identical names in the anonymous types:\n\n```csharp\njoin...on new {Name = o.CustomerName, ID = o.CustID} equals\n    new {Name = d.CustName, ID = d.CustID }\n```\n\nComposite keys can be also used in a `group` clause.\n\n## See also\n\n- [Language Integrated Query (LINQ)](index.md)\n- [join clause](../language-reference/keywords/join-clause.md)\n- [group clause](../language-reference/keywords/group-clause.md)\n","nodes":[{"pos":[4,185],"embed":true,"restype":"x-metadata","content":"title: Join by using composite keys (LINQ in C#)\ndescription: Learn how to join by using composite keys in LINQ.\nms.date: 12/01/2016\nms.assetid: da70b54d-3213-45eb-8437-fbe75cbcf935","nodes":[{"content":"Join by using composite keys (LINQ in C#)","nodes":[{"pos":[0,41],"content":"Join by using composite keys (LINQ in C#)","nodes":[{"content":"Join by using composite keys (LINQ in C#)","pos":[0,41]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to join by using composite keys in LINQ.","nodes":[{"pos":[0,50],"content":"Learn how to join by using composite keys in LINQ.","nodes":[{"content":"Learn how to join by using composite keys in LINQ.","pos":[0,50]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[192,220],"content":"Join by using composite keys","linkify":"Join by using composite keys","nodes":[{"content":"Join by using composite keys","pos":[0,28]}]},{"content":"This example shows how to perform join operations in which you want to use more than one key to define a match.","pos":[222,333]},{"content":"This is accomplished by using a composite key.","pos":[334,380]},{"content":"You create a composite key as an anonymous type or named typed with the values that you want to compare.","pos":[381,485]},{"content":"If the query variable will be passed across method boundaries, use a named type that overrides <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> for the key.","pos":[486,664],"source":" If the query variable will be passed across method boundaries, use a named type that overrides <xref:System.Object.Equals%2A> and <xref:System.Object.GetHashCode%2A> for the key."},{"content":"The names of the properties, and the order in which they occur, must be identical in each key.","pos":[665,759]},{"pos":[764,771],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use a composite key to join data from three tables:","pos":[773,866]},{"content":"Type inference on composite keys depends on the names of the properties in the keys, and the order in which they occur.","pos":[1144,1263]},{"content":"If the properties in the source sequences don't have the same names, you must assign new names in the keys.","pos":[1264,1371]},{"content":"For example, if the <ph id=\"ph1\">`Orders`</ph> table and <ph id=\"ph2\">`OrderDetails`</ph> table each used different names for their columns, you could create composite keys by assigning identical names in the anonymous types:","pos":[1372,1561],"source":" For example, if the `Orders` table and `OrderDetails` table each used different names for their columns, you could create composite keys by assigning identical names in the anonymous types:"},{"pos":[1682,1734],"content":"Composite keys can be also used in a <ph id=\"ph1\">`group`</ph> clause.","source":"Composite keys can be also used in a `group` clause."},{"pos":[1739,1747],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1751,1795],"content":"<bpt id=\"p1\">[</bpt>Language Integrated Query (LINQ)<ept id=\"p1\">](index.md)</ept>","source":"[Language Integrated Query (LINQ)](index.md)"},{"pos":[1798,1858],"content":"<bpt id=\"p1\">[</bpt>join clause<ept id=\"p1\">](../language-reference/keywords/join-clause.md)</ept>","source":"[join clause](../language-reference/keywords/join-clause.md)"},{"pos":[1861,1923],"content":"<bpt id=\"p1\">[</bpt>group clause<ept id=\"p1\">](../language-reference/keywords/group-clause.md)</ept>","source":"[group clause](../language-reference/keywords/group-clause.md)"}]}