{"content":"---\ntitle: \"Functional Construction (LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: 57a82bcf-de03-4f1c-a0c8-9a76e989d542\n---\n# Functional Construction (LINQ to XML) (C#)\n[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides a powerful way to create XML elements called *functional construction*. Functional construction is the ability to create an XML tree in a single statement.  \n  \n There are several key features of the [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming interface that enable functional construction:  \n  \n-   The <xref:System.Xml.Linq.XElement> constructor takes various types of arguments for content. For example, you can pass another <xref:System.Xml.Linq.XElement> object, which becomes a child element. You can pass an <xref:System.Xml.Linq.XAttribute> object, which becomes an attribute of the element. Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.  \n  \n-   The <xref:System.Xml.Linq.XElement> constructor takes a `params` array of type <xref:System.Object>, so that you can pass any number of objects to the constructor. This enables you to create an element that has complex content.  \n  \n-   If an object implements <xref:System.Collections.Generic.IEnumerable%601>, the collection in the object is enumerated, and all items in the collection are added. If the collection contains <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> objects, each item in the collection is added separately. This is important because it lets you pass the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the constructor.  \n  \n These features enable you to write code to create an XML tree. The following is an example:  \n  \n```csharp  \nXElement contacts =  \n    new XElement(\"Contacts\",  \n        new XElement(\"Contact\",  \n            new XElement(\"Name\", \"Patrick Hines\"),  \n            new XElement(\"Phone\", \"206-555-0144\"),  \n            new XElement(\"Address\",  \n                new XElement(\"Street1\", \"123 Main St\"),  \n                new XElement(\"City\", \"Mercer Island\"),  \n                new XElement(\"State\", \"WA\"),  \n                new XElement(\"Postal\", \"68042\")  \n            )  \n        )  \n    );  \n```  \n  \n These features also enable you to write code that uses the results of [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries when you create an XML tree, as follows:  \n  \n```csharp  \nXElement srcTree = new XElement(\"Root\",  \n    new XElement(\"Element\", 1),  \n    new XElement(\"Element\", 2),  \n    new XElement(\"Element\", 3),  \n    new XElement(\"Element\", 4),  \n    new XElement(\"Element\", 5)  \n);  \nXElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child\", 1),  \n    new XElement(\"Child\", 2),  \n    from el in srcTree.Elements()  \n    where (int)el > 2  \n    select el  \n);  \nConsole.WriteLine(xmlTree);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <Child>1</Child>  \n  <Child>2</Child>  \n  <Element>3</Element>  \n  <Element>4</Element>  \n  <Element>5</Element>  \n</Root>  \n```  \n  \n## See also\n\n- [Creating XML Trees (C#)](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)\n","nodes":[{"pos":[4,124],"embed":true,"restype":"x-metadata","content":"title: \"Functional Construction (LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: 57a82bcf-de03-4f1c-a0c8-9a76e989d542","nodes":[{"content":"Functional Construction (LINQ to XML) (C#)","nodes":[{"pos":[0,42],"content":"Functional Construction (LINQ to XML) (C#)","nodes":[{"content":"Functional Construction (LINQ to XML) (C#)","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[131,173],"content":"Functional Construction (LINQ to XML) (C#)","linkify":"Functional Construction (LINQ to XML) (C#)","nodes":[{"content":"Functional Construction (LINQ to XML) (C#)","pos":[0,42]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides a powerful way to create XML elements called <bpt id=\"p1\">*</bpt>functional construction<ept id=\"p1\">*</ept>.","pos":[174,308],"source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides a powerful way to create XML elements called *functional construction*."},{"content":"Functional construction is the ability to create an XML tree in a single statement.","pos":[309,392]},{"pos":[399,549],"content":"There are several key features of the <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> programming interface that enable functional construction:","source":"There are several key features of the [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming interface that enable functional construction:"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor takes various types of arguments for content.","pos":[559,652],"source":"The <xref:System.Xml.Linq.XElement> constructor takes various types of arguments for content."},{"content":"For example, you can pass another <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object, which becomes a child element.","pos":[653,757],"source":" For example, you can pass another <xref:System.Xml.Linq.XElement> object, which becomes a child element."},{"content":"You can pass an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> object, which becomes an attribute of the element.","pos":[758,858],"source":" You can pass an <xref:System.Xml.Linq.XAttribute> object, which becomes an attribute of the element."},{"content":"Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.","pos":[859,976]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor takes a <ph id=\"ph2\">`params`</ph> array of type <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph>, so that you can pass any number of objects to the constructor.","pos":[986,1149],"source":"The <xref:System.Xml.Linq.XElement> constructor takes a `params` array of type <xref:System.Object>, so that you can pass any number of objects to the constructor."},{"content":"This enables you to create an element that has complex content.","pos":[1150,1213]},{"content":"If an object implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, the collection in the object is enumerated, and all items in the collection are added.","pos":[1223,1384],"source":"If an object implements <xref:System.Collections.Generic.IEnumerable%601>, the collection in the object is enumerated, and all items in the collection are added."},{"content":"If the collection contains <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects, each item in the collection is added separately.","pos":[1385,1538],"source":" If the collection contains <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> objects, each item in the collection is added separately."},{"content":"This is important because it lets you pass the results of a <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query to the constructor.","pos":[1539,1674],"source":" This is important because it lets you pass the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the constructor."},{"content":"These features enable you to write code to create an XML tree.","pos":[1681,1743]},{"content":"The following is an example:","pos":[1744,1772]},{"pos":[2280,2448],"content":"These features also enable you to write code that uses the results of <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> queries when you create an XML tree, as follows:","source":"These features also enable you to write code that uses the results of [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries when you create an XML tree, as follows:"},{"content":"This example produces the following output:","pos":[2909,2952]},{"pos":[3115,3123],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3127,3226],"content":"<bpt id=\"p1\">[</bpt>Creating XML Trees (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)</ept>","source":"[Creating XML Trees (C#)](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)"}]}