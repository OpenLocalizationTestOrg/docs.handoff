{"content":"---\ntitle: \"ICorProfilerCallback5::ConditionalWeakTableElementReferences Method\"\nms.date: \"03/30/2017\"\napi_name:\n  - \"ICorProfilerCallback5.ConditionalWeakTableReferences\"\napi_location:\n  - \"Mscorwks.dll\"\napi_type:\n  - \"COM\"\nf1_keywords:\n  - \"ConditionalWeakTableElementReferences\"\nhelpviewer_keywords:\n  - \"ConditionalWeakTableElementReferences method, ICorProfilerCallback5 interface [.NET Framework profiling]\"\n  - \"ICorProfilerCallback5::ConditionalWeakTableElementReferences method [.NET Framework profiling]\"\nms.assetid: 532c7a02-a9de-4cea-bb2b-7f470da594de\ntopic_type:\n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n\n# ICorProfilerCallback5::ConditionalWeakTableElementReferences Method\n\nIdentifies the transitive closure of objects referenced by those roots through both direct member field references and through `ConditionalWeakTable` dependencies.\n\n## Syntax\n\n```cpp\nHRESULT ConditionalWeakTableElementReferences(\n     [in]                     ULONG    cRootRefs,\n     [in, size_is(cRootRefs)] ObjectID keyRefIds[],\n     [in, size_is(cRootRefs)] ObjectID valueRefIds[],\n     [in, size_is(cRootRefs)] GCHandleID rootIds[]\n);\n```\n\n## Parameters\n\n`cRootRefs`\\\n[in] The number of elements in the `keyRefIds`, `valueRefIds`, and `rootIds` arrays.\n\n`keyRefIds`\\\n[in] An array of object IDs, each of which contains the `ObjectID` for the primary element in the dependent handle pair.\n\n`valueRefIds`\\\n[in] An array of object IDs, each of which contains the `ObjectID` for the secondary element in the dependent handle pair. (`keyRefIds[i]` keeps `valueRefIds[i]` alive.)\n\n`rootIds`\\\n[in] An array of `GCHandleID` values that point to an integer that contains additional information about the garbage collection root.\n\nNone of the `ObjectID` values returned by the `ConditionalWeakTableElementReferences` method are valid during the callback itself, because the garbage collector may be in the process of moving objects from old to new locations. Therefore, profilers should not attempt to inspect objects during a `ConditionalWeakTableElementReferences` call. At `GarbageCollectionFinished`, all objects have been moved to their new locations, and inspection may be done.\n\n## Example\n\nThe following code example demonstrates how to implement [ICorProfilerCallback5](icorprofilercallback5-interface.md) and use this method.\n\n```cpp\nHRESULT Callback5Impl::ConditionalWeakTableElementReferences(\n    ULONG      cRootRefs,\n    ObjectID   keyRefIds[],\n    ObjectID   valueRefIds[],\n    GCHandleID rootIds[])\n{\n    printf(\"Callback5Impl::ConditionalWeakTableElementReferences called\\n\");\n    for (unsigned int i = 0; i < cRootRefs; ++i)\n    {\n        // Save dependency to XML for later retrieval\n        PersistDependencyToXml(rootIds[i], keyRefIds[i], valueRefIds[i]);\n        // or store dependency to an internal map\n        m_cwt_deps->add_dep(rootIds[i], keyRefIds[i], valueRefIds[i]);\n        // or add arc to object graph\n        m_obj_graph->add_arc(keyRefIds[i], valueRefIds[i], rootIds[i]);\n    }\n    return S_OK;\n}\n```\n\n## Remarks\n\nA profiler for the [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)] or later versions implements the [ICorProfilerCallback5](icorprofilercallback5-interface.md) interface and records the dependencies specified by the `ConditionalWeakTableElementReferences` method. `ICorProfilerCallback5` provides the complete set of dependencies among live objects represented by `ConditionalWeakTable` entries. These dependencies and the member field references specified by the [ICorProfilerCallback::ObjectReferences](icorprofilercallback-objectreferences-method.md) method enable a managed profiler to generate the full object graph of live objects.\n\n## Requirements\n\n**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).\n\n**Header:** CorProf.idl, CorProf.h\n\n**.NET Framework Versions:** [!INCLUDE[net_current_v45plus](../../../../includes/net-current-v45plus-md.md)]\n\n## See also\n\n- [ICorProfilerCallback5 Interface](icorprofilercallback5-interface.md)","nodes":[{"pos":[4,625],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerCallback5::ConditionalWeakTableElementReferences Method\"\nms.date: \"03/30/2017\"\napi_name:\n  - \"ICorProfilerCallback5.ConditionalWeakTableReferences\"\napi_location:\n  - \"Mscorwks.dll\"\napi_type:\n  - \"COM\"\nf1_keywords:\n  - \"ConditionalWeakTableElementReferences\"\nhelpviewer_keywords:\n  - \"ConditionalWeakTableElementReferences method, ICorProfilerCallback5 interface [.NET Framework profiling]\"\n  - \"ICorProfilerCallback5::ConditionalWeakTableElementReferences method [.NET Framework profiling]\"\nms.assetid: 532c7a02-a9de-4cea-bb2b-7f470da594de\ntopic_type:\n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"ICorProfilerCallback5::ConditionalWeakTableElementReferences Method","nodes":[{"pos":[0,67],"content":"ICorProfilerCallback5::ConditionalWeakTableElementReferences Method","nodes":[{"content":"ICorProfilerCallback5::ConditionalWeakTableElementReferences Method","pos":[0,67]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[633,700],"content":"ICorProfilerCallback5::ConditionalWeakTableElementReferences Method","linkify":"ICorProfilerCallback5::ConditionalWeakTableElementReferences Method","nodes":[{"content":"ICorProfilerCallback5::ConditionalWeakTableElementReferences Method","pos":[0,67]}]},{"pos":[702,865],"content":"Identifies the transitive closure of objects referenced by those roots through both direct member field references and through <ph id=\"ph1\">`ConditionalWeakTable`</ph> dependencies.","source":"Identifies the transitive closure of objects referenced by those roots through both direct member field references and through `ConditionalWeakTable` dependencies."},{"pos":[870,876],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1150,1160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The number of elements in the <ph id=\"ph1\">`keyRefIds`</ph>, <ph id=\"ph2\">`valueRefIds`</ph>, and <ph id=\"ph3\">`rootIds`</ph> arrays.","pos":[1175,1259],"source":"[in] The number of elements in the `keyRefIds`, `valueRefIds`, and `rootIds` arrays."},{"content":"[in] An array of object IDs, each of which contains the <ph id=\"ph1\">`ObjectID`</ph> for the primary element in the dependent handle pair.","pos":[1274,1394],"source":"[in] An array of object IDs, each of which contains the `ObjectID` for the primary element in the dependent handle pair."},{"content":"[in] An array of object IDs, each of which contains the <ph id=\"ph1\">`ObjectID`</ph> for the secondary element in the dependent handle pair.","pos":[1411,1533],"source":"[in] An array of object IDs, each of which contains the `ObjectID` for the secondary element in the dependent handle pair."},{"content":"(<ph id=\"ph1\">`keyRefIds[i]`</ph> keeps <ph id=\"ph2\">`valueRefIds[i]`</ph> alive.)","pos":[1534,1580],"source":" (`keyRefIds[i]` keeps `valueRefIds[i]` alive.)"},{"content":"[in] An array of <ph id=\"ph1\">`GCHandleID`</ph> values that point to an integer that contains additional information about the garbage collection root.","pos":[1593,1726],"source":"[in] An array of `GCHandleID` values that point to an integer that contains additional information about the garbage collection root."},{"content":"None of the <ph id=\"ph1\">`ObjectID`</ph> values returned by the <ph id=\"ph2\">`ConditionalWeakTableElementReferences`</ph> method are valid during the callback itself, because the garbage collector may be in the process of moving objects from old to new locations.","pos":[1728,1955],"source":"None of the `ObjectID` values returned by the `ConditionalWeakTableElementReferences` method are valid during the callback itself, because the garbage collector may be in the process of moving objects from old to new locations."},{"content":"Therefore, profilers should not attempt to inspect objects during a <ph id=\"ph1\">`ConditionalWeakTableElementReferences`</ph> call.","pos":[1956,2069],"source":" Therefore, profilers should not attempt to inspect objects during a `ConditionalWeakTableElementReferences` call."},{"content":"At <ph id=\"ph1\">`GarbageCollectionFinished`</ph>, all objects have been moved to their new locations, and inspection may be done.","pos":[2070,2181],"source":" At `GarbageCollectionFinished`, all objects have been moved to their new locations, and inspection may be done."},{"pos":[2186,2193],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2195,2332],"content":"The following code example demonstrates how to implement <bpt id=\"p1\">[</bpt>ICorProfilerCallback5<ept id=\"p1\">](icorprofilercallback5-interface.md)</ept> and use this method.","source":"The following code example demonstrates how to implement [ICorProfilerCallback5](icorprofilercallback5-interface.md) and use this method."},{"pos":[3039,3046],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A profiler for the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph> or later versions implements the <bpt id=\"p1\">[</bpt>ICorProfilerCallback5<ept id=\"p1\">](icorprofilercallback5-interface.md)</ept> interface and records the dependencies specified by the <ph id=\"ph2\">`ConditionalWeakTableElementReferences`</ph> method.","pos":[3048,3319],"source":"A profiler for the [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)] or later versions implements the [ICorProfilerCallback5](icorprofilercallback5-interface.md) interface and records the dependencies specified by the `ConditionalWeakTableElementReferences` method."},{"content":"<ph id=\"ph1\">`ICorProfilerCallback5`</ph> provides the complete set of dependencies among live objects represented by <ph id=\"ph2\">`ConditionalWeakTable`</ph> entries.","pos":[3320,3451],"source":"`ICorProfilerCallback5` provides the complete set of dependencies among live objects represented by `ConditionalWeakTable` entries."},{"content":"These dependencies and the member field references specified by the <bpt id=\"p1\">[</bpt>ICorProfilerCallback::ObjectReferences<ept id=\"p1\">](icorprofilercallback-objectreferences-method.md)</ept> method enable a managed profiler to generate the full object graph of live objects.","pos":[3452,3693],"source":" These dependencies and the member field references specified by the [ICorProfilerCallback::ObjectReferences](icorprofilercallback-objectreferences-method.md) method enable a managed profiler to generate the full object graph of live objects."},{"pos":[3698,3710],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3712,3816],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3818,3852],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[3854,3962],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v45plus](../../../../includes/net-current-v45plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v45plus](../../../../includes/net-current-v45plus-md.md)]"},{"pos":[3967,3975],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3979,4048],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback5 Interface<ept id=\"p1\">](icorprofilercallback5-interface.md)</ept>","source":"[ICorProfilerCallback5 Interface](icorprofilercallback5-interface.md)"}]}