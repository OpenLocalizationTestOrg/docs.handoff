{"content":"---\ntitle: \"Compiler Error CS1704\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1704\"\nhelpviewer_keywords: \n  - \"CS1704\"\nms.assetid: da5e89d5-bbb7-47e9-92f6-b03b1602dee4\n---\n# Compiler Error CS1704\nAn assembly with the same simple name 'Assembly Name' has already been imported. Try removing one of the references or sign them to enable side-by-side.  \n  \n This error points out that two references have the same assembly identity because the assemblies in question lack strong names, they were not signed, and thus the compiler has no way of distinguishing between them in metadata. Thus, the run time ignores the version and culture assembly name properties. The user should remove the redundant reference, rename one of the references, or provide a strong name for them.  \n  \n## Example  \n This sample creates an assembly and saves it to the root directory.  \n  \n```csharp  \n// CS1704_a.cs  \n// compile with: /target:library /out:c:\\\\cs1704.dll  \npublic class A {}  \n```  \n  \n## Example  \n This sample creates an assembly with the same name as the previous sample, but saves it to a different location.  \n  \n```csharp  \n// CS1704_b.cs  \n// compile with: /target:library /out:cs1704.dll  \npublic class A {}  \n```  \n  \n## Example  \n This sample attempts to reference both assemblies. The following sample generates CS1704.  \n  \n```csharp  \n// CS1704_c.cs  \n// compile with: /target:library /r:A2=cs1704.dll /r:A1=c:\\\\cs1704.dll  \n// CS1704 expected  \nextern alias A1;  \nextern alias A2;  \n```\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS1704\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1704\"\nhelpviewer_keywords: \n  - \"CS1704\"\nms.assetid: da5e89d5-bbb7-47e9-92f6-b03b1602dee4","nodes":[{"content":"Compiler Error CS1704","nodes":[{"pos":[0,21],"content":"Compiler Error CS1704","nodes":[{"content":"Compiler Error CS1704","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,193],"content":"Compiler Error CS1704","linkify":"Compiler Error CS1704","nodes":[{"content":"Compiler Error CS1704","pos":[0,21]}]},{"content":"An assembly with the same simple name 'Assembly Name' has already been imported.","pos":[194,274]},{"content":"Try removing one of the references or sign them to enable side-by-side.","pos":[275,346]},{"content":"This error points out that two references have the same assembly identity because the assemblies in question lack strong names, they were not signed, and thus the compiler has no way of distinguishing between them in metadata.","pos":[353,579]},{"content":"Thus, the run time ignores the version and culture assembly name properties.","pos":[580,656]},{"content":"The user should remove the redundant reference, rename one of the references, or provide a strong name for them.","pos":[657,769]},{"pos":[778,785],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample creates an assembly and saves it to the root directory.","pos":[789,856]},{"pos":[978,985],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample creates an assembly with the same name as the previous sample, but saves it to a different location.","pos":[989,1101]},{"pos":[1219,1226],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample attempts to reference both assemblies.","pos":[1230,1280]},{"content":"The following sample generates CS1704.","pos":[1281,1319]}]}