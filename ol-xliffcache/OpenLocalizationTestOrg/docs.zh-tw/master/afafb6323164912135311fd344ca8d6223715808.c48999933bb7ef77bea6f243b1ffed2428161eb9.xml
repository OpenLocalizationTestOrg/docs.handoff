{"content":"---\ntitle: \"ICorProfilerInfo4::GetCodeInfo3 Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerInfo4.GetCodeInfo3\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo4::GetCodeInfo3\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"GetCodeInfo3 method, ICorProfilerInfo4 interface [.NET Framework profiling]\"\n  - \"ICorProfilerInfo4::GetCodeInfo3 method [.NET Framework profiling]\"\nms.assetid: bb8c105e-4d9a-4684-8c05-ed6909cc1b8c\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 9\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ICorProfilerInfo4::GetCodeInfo3 Method\nGets the extents of native code associated with the JIT-recompiled version of the specified function.  \n  \n## Syntax  \n  \n```  \nHRESULT GetCodeInfo3(  \n    [in]  FunctionID functionID,  \n    [in]  ReJITID reJitId,  \n    [in]  ULONG32 cCodeInfos,  \n    [out] ULONG32 *pcCodeInfos,  \n    [out, size_is(cCodeInfos), length_is(*pcCodeInfos)]  \n    COR_PRF_CODE_INFO codeInfos[]);  \n```  \n  \n#### Parameters  \n `functionID`  \n [in] The ID of the function with which the native code is associated.  \n  \n `reJitId`  \n [in] The identity of the JIT-recompiled function.  \n  \n `cCodeInfos`  \n [in] The size of the `codeInfos` array.  \n  \n `pcCodeInfos`  \n [out] A pointer to the total number of [COR_PRF_CODE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md) structures available.  \n  \n `codeInfos`  \n [out] A caller-provided buffer. After the method returns, it contains an array of `COR_PRF_CODE_INFO` structures, each of which describes a block of native code.  \n  \n## Remarks  \n The `GetCodeInfo3` method is similar to [GetCodeInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md), except that it will get the JIT-recompiled ID of the function that contains the specified IP address.  \n  \n> [!NOTE]\n>  `GetCodeInfo3` can trigger a garbage collection, whereas [GetCodeInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md) will not. For more information, see the [CORPROF_E_UNSUPPORTED_CALL_SEQUENCE](../../../../docs/framework/unmanaged-api/profiling/corprof-e-unsupported-call-sequence-hresult.md) HRESULT.  \n  \n The extents are sorted in order of increasing Common Intermediate Language (CIL) offset.  \n  \n After `GetCodeInfo3` returns, you must verify that the `codeInfos` buffer was large enough to contain all the [COR_PRF_CODE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md) structures. To do this, compare the value of `cCodeInfos` with the value of the `cchName` parameter. If `cCodeInfos` divided by the size of a [COR_PRF_CODE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md) structure is smaller than `pcCodeInfos`, allocate a larger `codeInfos` buffer, update `cCodeInfos` with the new, larger size, and call `GetCodeInfo3` again.  \n  \n Alternatively, you can first call `GetCodeInfo3` with a zero-length `codeInfos` buffer to obtain the correct buffer size. You can then set the `codeInfos` buffer size to the value returned in `pcCodeInfos`, multiplied by the size of a [COR_PRF_CODE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md) structure, and call `GetCodeInfo3` again.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v45plus](../../../../includes/net-current-v45plus-md.md)]  \n  \n## See Also  \n [GetCodeInfo2 Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md)   \n [ICorProfilerInfo4 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo4-interface.md)   \n [Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)   \n [Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)","nodes":[{"pos":[12,67],"content":"ICorProfilerInfo4::GetCodeInfo3 Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ICorProfilerInfo4::GetCodeInfo3 Method | Microsoft Docs","pos":[0,55]}]},{"pos":[748,786],"content":"ICorProfilerInfo4::GetCodeInfo3 Method","linkify":"ICorProfilerInfo4::GetCodeInfo3 Method","nodes":[{"content":"ICorProfilerInfo4::GetCodeInfo3 Method","pos":[0,38]}]},{"content":"Gets the extents of native code associated with the JIT-recompiled version of the specified function.","pos":[787,888]},{"pos":[897,903],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1179,1189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The ID of the function with which the native code is associated.","pos":[1209,1278]},{"content":"[in] The identity of the JIT-recompiled function.","pos":[1298,1347]},{"content":"[in] The size of the <ph id=\"ph1\">`codeInfos`</ph> array.","pos":[1370,1409],"source":" [in] The size of the `codeInfos` array."},{"content":"[out] A pointer to the total number of <bpt id=\"p1\">[</bpt>COR_PRF_CODE_INFO<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md)</ept> structures available.","pos":[1433,1596],"source":" [out] A pointer to the total number of [COR_PRF_CODE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md) structures available."},{"content":"[out] A caller-provided buffer.","pos":[1618,1649]},{"content":"After the method returns, it contains an array of <ph id=\"ph1\">`COR_PRF_CODE_INFO`</ph> structures, each of which describes a block of native code.","pos":[1650,1779],"source":" After the method returns, it contains an array of `COR_PRF_CODE_INFO` structures, each of which describes a block of native code."},{"pos":[1788,1795],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1799,2049],"content":"The <ph id=\"ph1\">`GetCodeInfo3`</ph> method is similar to <bpt id=\"p1\">[</bpt>GetCodeInfo2<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md)</ept>, except that it will get the JIT-recompiled ID of the function that contains the specified IP address.","source":"The `GetCodeInfo3` method is similar to [GetCodeInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md), except that it will get the JIT-recompiled ID of the function that contains the specified IP address."},{"pos":[2057,2418],"content":"[!NOTE]\n `GetCodeInfo3` can trigger a garbage collection, whereas [GetCodeInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md) will not. For more information, see the [CORPROF_E_UNSUPPORTED_CALL_SEQUENCE](../../../../docs/framework/unmanaged-api/profiling/corprof-e-unsupported-call-sequence-hresult.md) HRESULT.","leadings":["","> "],"nodes":[{"content":" `GetCodeInfo3` can trigger a garbage collection, whereas [GetCodeInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md) will not. For more information, see the [CORPROF_E_UNSUPPORTED_CALL_SEQUENCE](../../../../docs/framework/unmanaged-api/profiling/corprof-e-unsupported-call-sequence-hresult.md) HRESULT.","pos":[8,359],"nodes":[{"content":"<ph id=\"ph1\"> `GetCodeInfo3`</ph> can trigger a garbage collection, whereas <bpt id=\"p1\">[</bpt>GetCodeInfo2<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md)</ept> will not.","pos":[0,175],"source":" `GetCodeInfo3` can trigger a garbage collection, whereas [GetCodeInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md) will not."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>CORPROF_E_UNSUPPORTED_CALL_SEQUENCE<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/corprof-e-unsupported-call-sequence-hresult.md)</ept> HRESULT.","pos":[176,351],"source":" For more information, see the [CORPROF_E_UNSUPPORTED_CALL_SEQUENCE](../../../../docs/framework/unmanaged-api/profiling/corprof-e-unsupported-call-sequence-hresult.md) HRESULT."}]}]},{"content":"The extents are sorted in order of increasing Common Intermediate Language (CIL) offset.","pos":[2425,2513]},{"content":"After <ph id=\"ph1\">`GetCodeInfo3`</ph> returns, you must verify that the <ph id=\"ph2\">`codeInfos`</ph> buffer was large enough to contain all the <bpt id=\"p1\">[</bpt>COR_PRF_CODE_INFO<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md)</ept> structures.","pos":[2520,2744],"source":"After `GetCodeInfo3` returns, you must verify that the `codeInfos` buffer was large enough to contain all the [COR_PRF_CODE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md) structures."},{"content":"To do this, compare the value of <ph id=\"ph1\">`cCodeInfos`</ph> with the value of the <ph id=\"ph2\">`cchName`</ph> parameter.","pos":[2745,2833],"source":" To do this, compare the value of `cCodeInfos` with the value of the `cchName` parameter."},{"content":"If <ph id=\"ph1\">`cCodeInfos`</ph> divided by the size of a <bpt id=\"p1\">[</bpt>COR_PRF_CODE_INFO<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md)</ept> structure is smaller than <ph id=\"ph2\">`pcCodeInfos`</ph>, allocate a larger <ph id=\"ph3\">`codeInfos`</ph> buffer, update <ph id=\"ph4\">`cCodeInfos`</ph> with the new, larger size, and call <ph id=\"ph5\">`GetCodeInfo3`</ph> again.","pos":[2834,3134],"source":" If `cCodeInfos` divided by the size of a [COR_PRF_CODE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md) structure is smaller than `pcCodeInfos`, allocate a larger `codeInfos` buffer, update `cCodeInfos` with the new, larger size, and call `GetCodeInfo3` again."},{"content":"Alternatively, you can first call <ph id=\"ph1\">`GetCodeInfo3`</ph> with a zero-length <ph id=\"ph2\">`codeInfos`</ph> buffer to obtain the correct buffer size.","pos":[3141,3262],"source":"Alternatively, you can first call `GetCodeInfo3` with a zero-length `codeInfos` buffer to obtain the correct buffer size."},{"content":"You can then set the <ph id=\"ph1\">`codeInfos`</ph> buffer size to the value returned in <ph id=\"ph2\">`pcCodeInfos`</ph>, multiplied by the size of a <bpt id=\"p1\">[</bpt>COR_PRF_CODE_INFO<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md)</ept> structure, and call <ph id=\"ph3\">`GetCodeInfo3`</ph> again.","pos":[3263,3520],"source":" You can then set the `codeInfos` buffer size to the value returned in `pcCodeInfos`, multiplied by the size of a [COR_PRF_CODE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-code-info-structure.md) structure, and call `GetCodeInfo3` again."},{"pos":[3529,3541],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3545,3649],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3656,3690],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[3697,3722],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[3729,3837],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v45plus](../../../../includes/net-current-v45plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v45plus](../../../../includes/net-current-v45plus-md.md)]"},{"pos":[3846,3854],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>GetCodeInfo2 Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md)</ept><ph id=\"ph1\"> </ph>","pos":[3858,3973],"source":"[GetCodeInfo2 Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getcodeinfo2-method.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ICorProfilerInfo4 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo4-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[3976,4090],"source":" [ICorProfilerInfo4 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo4-interface.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Profiling Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[4093,4193],"source":" [Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Profiling<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept>","pos":[4196,4269],"source":" [Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)"}]}