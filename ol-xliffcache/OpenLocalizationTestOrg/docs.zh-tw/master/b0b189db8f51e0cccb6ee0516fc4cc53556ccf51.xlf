<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="batching-messages-in-a-transaction.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0b189db8f51e0cccb6ee0516fc4cc53556ccf51</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\batching-messages-in-a-transaction.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d550462462208014a46b5b3239592effa4c84adb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">777e3b740115eb9e3220ce835831d4e876da28ac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Batching Messages in a Transaction</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Batching Messages in a Transaction</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Queued applications use transactions to ensure correctness and reliable delivery of messages.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Transactions, however, are expensive operations and can dramatically reduce message throughput.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>One way to improve message throughput is to have an application read and process multiple messages within a single transaction.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The trade-off is between performance and recovery: as the number of messages in a batch increases, so does the amount of recovery work that required if transactions are rolled back.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is important to note the difference between batching messages in a transaction and sessions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>session<ept id="p1">*</ept> is a grouping of related messages that are processed by a single application and committed as a single unit.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sessions are generally used when a group of related messages must be processed together.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An example of this is an online shopping Web site.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Batches<ept id="p1">*</ept> are used to process multiple, unrelated messages in a way that increases message throughput.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about sessions, see <bpt id="p1">[</bpt>Grouping Queued Messages in a Session<ept id="p1">](../../../../docs/framework/wcf/feature-details/grouping-queued-messages-in-a-session.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Messages in a batch are also processed by a single application and committed as a single unit, but there may be no relationship between the messages in the batch.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Batching messages in a transaction is an optimization that does not change how the application runs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Entering Batching Mode</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.TransactedBatchingBehavior&gt;</ph> endpoint behavior controls batching.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adding this endpoint behavior to a service endpoint tells Windows Communication Foundation (WCF) to batch messages in a transaction.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Not all messages require a transaction, so only messages that require a transaction are placed in a batch, and only messages sent from operations marked with <ph id="ph1">`TransactionScopeRequired`</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph> and <ph id="ph4">`TransactionAutoComplete`</ph><ph id="ph5"> = </ph><ph id="ph6">`true`</ph> are considered for a batch.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If all operations on the service contract are marked with <ph id="ph1">`TransactionScopeRequired`</ph><ph id="ph2"> = </ph><ph id="ph3">`false`</ph> and <ph id="ph4">`TransactionAutoComplete`</ph><ph id="ph5"> = </ph><ph id="ph6">`false`</ph>, then batching mode is never entered.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Committing a Transaction</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A batched transaction is committed based on the following:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxBatchSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A property of the <ph id="ph1">&lt;xref:System.ServiceModel.Description.TransactedBatchingBehavior&gt;</ph> behavior.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This property determines the maximum number of messages that are placed into a batch.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When this number is reached, the batch is committed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is value is not a strict limit, it is possible to commit a batch before receiving this number of messages.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Transaction Timeout`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>After 80 percent of the transaction's time-out has elapsed, the batch is committed and a new batch is created.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This means that if 20 percent or less of the time given for a transaction to complete remains, the batch is committed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TransactionScopeRequired`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When processing a batch of messages, if WCF finds one that has <ph id="ph1">`TransactionScopeRequired`</ph><ph id="ph2"> = </ph><ph id="ph3">`false`</ph>, it commits the batch and reopens a new batch on receipt of the first message with <ph id="ph4">`TransactionScopeRequired`</ph><ph id="ph5"> = </ph><ph id="ph6">`true`</ph> and <ph id="ph7">`TransactionAutoComplete`</ph><ph id="ph8"> = </ph><ph id="ph9">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If no more messages exist in the queue, then the current batch is committed, even if the <ph id="ph1">`MaxBatchSize`</ph> has not been reached or 80 percent of the transaction's time-out has not elapsed.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Leaving Batching Mode</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If a message in a batch causes the transaction to abort, the following steps occur:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The entire batch of messages is rolled back.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Messages are read one at a time until the number of messages read exceeds twice the maximum batch size.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Batch mode is re-entered.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Choosing the Batch Size</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The size of a batch is application-dependent.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The empirical method is the best way to arrive at an optimal batch size for the application.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It is important to remember when choosing a batch size to choose the size according to your application's actual deployment model.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, when deploying the application, if you need an SQL server on a remote machine and a transaction that spans the queue and the SQL server, then the batch size is best determined by running this exact configuration.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Concurrency and Batching</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To increase throughput, you can also have many batches run concurrently.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By setting <ph id="ph1">`ConcurrencyMode.Multiple`</ph> in <ph id="ph2">`ServiceBehaviorAttribute`</ph>, you enable concurrent batching.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Service throttling<ept id="p1">*</ept> is a service behavior that is used to indicate how many maximum concurrent calls can be made on the service.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When used with batching, this is interpreted as how many concurrent batches can be run.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the service throttling is not set, WCF defaults the maximum concurrent calls to 16.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Thus, if batching behavior were added by default, a maximum of 16 batches can be active at the same time.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It is best to tune the service throttling and batching based on your capacity.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, if the queue has 100 messages and a batch of 20 is desired, having the maximum concurrent calls set to 16 is not useful because, depending on throughput, 16 transactions could be active, similar to not having batching turned on.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Therefore, when fine-tuning for performance, either do not have concurrent batching or have concurrent batching with the correct service throttle size.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Batching and Multiple Endpoints</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An endpoint is composed of an address and a contract.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>There may be multiple endpoints that share the same binding.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It is possible for two endpoints to share the same binding and listen Uniform Resource Identifier (URI), or queue address.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If two endpoints are reading from the same queue, and transacted batching behavior is added to both endpoints, a conflict in the batch sizes specified could arise.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is resolved by implementing batching using the minimal batch size specified between the two transacted batching behaviors.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this scenario, if one of the endpoints does not specify transacted batching, then both endpoints would not use batching.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following example shows how to specify the <ph id="ph1">`TransactedBatchingBehavior`</ph> in a configuration file.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example shows how to specify the <ph id="ph1">&lt;xref:System.ServiceModel.Description.TransactedBatchingBehavior&gt;</ph> in code.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queues Overview<ept id="p1">](../../../../docs/framework/wcf/feature-details/queues-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queuing in WCF<ept id="p1">](../../../../docs/framework/wcf/feature-details/queuing-in-wcf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>