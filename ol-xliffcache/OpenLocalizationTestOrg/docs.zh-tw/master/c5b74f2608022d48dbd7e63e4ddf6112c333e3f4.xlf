<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="principal-and-identity-objects.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5b74f2608022d48dbd7e63e4ddf6112c333e3f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\principal-and-identity-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3b41b6f3786ac846ce3d7334a2090715ea5be84</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7e9bac9c91d1f03b8aed7b1ffdce0ac216f5782</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Principal and Identity Objects</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Principal and Identity Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Managed code can discover the identity or the role of a principal through a <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> object, which contains a reference to an <ph id="ph2">&lt;xref:System.Security.Principal.IIdentity&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It might be helpful to compare identity and principal objects to familiar concepts like user and group accounts.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In most network environments, user accounts represent people or programs, while group accounts represent certain categories of users and the rights they possess.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Similarly, .NET Framework identity objects represent users, while roles represent memberships and security contexts.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, the principal object encapsulates both an identity object and a role.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET Framework applications grant rights to the principal based on its identity or, more commonly, its role membership.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Identity Objects</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The identity object encapsulates information about the user or entity being validated.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>At their most basic level, identity objects contain a name and an authentication type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The name can either be a user's name or the name of a Windows account, while the authentication type can be either a supported logon protocol, such as Kerberos V5, or a custom value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The .NET Framework defines a <ph id="ph1">&lt;xref:System.Security.Principal.GenericIdentity&gt;</ph> object that can be used for most custom logon scenarios and a more specialized <ph id="ph2">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> object that can be used when you want your application to rely on Windows authentication.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Additionally, you can define your own identity class that encapsulates custom user information.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Principal.IIdentity&gt;</ph> interface defines properties for accessing a name and an authentication type, such as Kerberos V5 or NTLM.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">**</bpt>Identity<ept id="p1">**</ept> classes implement the <bpt id="p2">**</bpt>IIdentity<ept id="p2">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is no required relationship between an <bpt id="p1">**</bpt>Identity<ept id="p1">**</ept> object and the Windows NT process token under which a thread is currently executing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, if the <bpt id="p1">**</bpt>Identity<ept id="p1">**</ept> object is a <bpt id="p2">**</bpt>WindowsIdentity<ept id="p2">**</ept> object, the identity is assumed to represent a Windows NT security token.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Principal Objects</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The principal object represents the security context under which code is running.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Applications that implement role-based security grant rights based on the role associated with a principal object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Similar to identity objects, the .NET Framework provides a <ph id="ph1">&lt;xref:System.Security.Principal.GenericPrincipal&gt;</ph> object and a <ph id="ph2">&lt;xref:System.Security.Principal.WindowsPrincipal&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can also define your own custom principal classes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> interface defines a property for accessing an associated <bpt id="p1">**</bpt>Identity<ept id="p1">**</ept> object as well as a method for determining whether the user identified by the <bpt id="p2">**</bpt>Principal<ept id="p2">**</ept> object is a member of a given role.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> classes implement the <bpt id="p2">**</bpt>IPrincipal<ept id="p2">**</ept> interface as well as any additional properties and methods that are necessary.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, the common language runtime provides the <bpt id="p1">**</bpt>WindowsPrincipal<ept id="p1">**</ept> class, which implements additional functionality for mapping Windows NT or Windows 2000 group membership to roles.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> object is bound to a call context (<ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.CallContext&gt;</ph>) object within an application domain (<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A default call context is always created with each new <bpt id="p1">**</bpt>AppDomain<ept id="p1">**</ept>, so there is always a call context available to accept the <bpt id="p2">**</bpt>Principal<ept id="p2">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When a new thread is created, a <bpt id="p1">**</bpt>CallContext<ept id="p1">**</ept> object is also created for the thread.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> object reference is automatically copied from the creating thread to the new thread's <bpt id="p2">**</bpt>CallContext<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the runtime cannot determine which <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> object belongs to the creator of the thread, it follows the default policy for <bpt id="p2">**</bpt>Principal<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Identity<ept id="p3">**</ept> object creation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A configurable application domain-specific policy defines the rules for deciding what type of <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> object to associate with a new application domain.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Where security policy permits, the runtime can create <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Identity<ept id="p2">**</ept> objects that reflect the operating system token associated with the current thread of execution.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>By default, the runtime uses <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Identity<ept id="p2">**</ept> objects that represent unauthenticated users.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The runtime does not create these default <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Identity<ept id="p2">**</ept> objects until the code attempts to access them.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Trusted code that creates an application domain can set the application domain policy that controls construction of the default <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Identity<ept id="p2">**</ept> objects.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This application domain-specific policy applies to all execution threads in that application domain.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An unmanaged, trusted host inherently has the ability to set this policy, but managed code that sets this policy must have the <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType&gt;</ph> for controlling domain policy.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When transmitting a <bpt id="p1">**</bpt>Principal<ept id="p1">**</ept> object across application domains but within the same process (and therefore on the same computer), the remoting infrastructure copies a reference to the <bpt id="p2">**</bpt>Principal<ept id="p2">**</ept> object associated with the caller's context to the callee's context.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a WindowsPrincipal Object<ept id="p1">](../../../docs/standard/security/how-to-create-a-windowsprincipal-object.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create GenericPrincipal and GenericIdentity Objects<ept id="p1">](../../../docs/standard/security/how-to-create-genericprincipal-and-genericidentity-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Replacing a Principal Object<ept id="p1">](../../../docs/standard/security/replacing-a-principal-object.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Impersonating and Reverting<ept id="p1">](../../../docs/standard/security/impersonating-and-reverting.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Role-Based Security<ept id="p1">](../../../docs/standard/security/role-based-security.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Key Security Concepts<ept id="p1">](../../../docs/standard/security/key-security-concepts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>