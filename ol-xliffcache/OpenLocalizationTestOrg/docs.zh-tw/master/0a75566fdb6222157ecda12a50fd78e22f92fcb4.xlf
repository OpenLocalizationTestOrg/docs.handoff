<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="true-false-operators.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a75566fdb6222157ecda12a50fd78e22f92fcb4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\true-false-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">315090de1e9a32df2da2e3e283f767c115c1f149</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d121441208f636bd9418e48a4fe6dd0a13e2b687</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>true and false operators - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>true and false operators (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`true`</ph> operator returns the <bpt id="p1">[</bpt>bool<ept id="p1">](bool.md)</ept> value <ph id="ph2">`true`</ph> to indicate that an operand is definitely true.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`false`</ph> operator returns the <ph id="ph2">`bool`</ph> value <ph id="ph3">`true`</ph> to indicate that an operand is definitely false.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operators are not guaranteed to complement each other.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>That is, both the <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operator might return the <ph id="ph3">`bool`</ph> value <ph id="ph4">`false`</ph> for the same operand.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a type defines one of the two operators, it must also define another operator.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a type with the defined <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operators <bpt id="p1">[</bpt>overloads<ept id="p1">](operator.md)</ept> the <bpt id="p2">[</bpt>logical OR operator<ept id="p2">](../operators/or-operator.md)</ept> <ph id="ph3">`|`</ph> or the <bpt id="p3">[</bpt>logical AND operator<ept id="p3">](../operators/and-operator.md)</ept> <ph id="ph4">`&amp;`</ph> in a certain way, the <bpt id="p4">[</bpt>conditional logical OR operator<ept id="p4">](../operators/conditional-or-operator.md)</ept> <ph id="ph5">`||`</ph> or <bpt id="p5">[</bpt>conditional logical AND operator<ept id="p5">](../operators/conditional-and-operator.md)</ept> <ph id="ph6">`&amp;&amp;`</ph>, respectively, can be evaluated for the operands of that type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>User-defined conditional logical operators<ept id="p1">](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators)</ept> section of the <bpt id="p2">[</bpt>C# language specification<ept id="p2">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A type with the defined <ph id="ph1">`true`</ph> operator can be the type of a result of a controlling conditional expression in the <bpt id="p1">[</bpt>if<ept id="p1">](if-else.md)</ept>, <bpt id="p2">[</bpt>do<ept id="p2">](do.md)</ept>, <bpt id="p3">[</bpt>while<ept id="p3">](while.md)</ept>, and <bpt id="p4">[</bpt>for<ept id="p4">](for.md)</ept> statements and in the <bpt id="p5">[</bpt>conditional operator <ph id="ph2">`?:`</ph><ept id="p5">](../operators/conditional-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Boolean expressions<ept id="p1">](~/_csharplang/spec/expressions.md#boolean-expressions)</ept> section of the <bpt id="p2">[</bpt>C# language specification<ept id="p2">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`bool?`</ph> type, if you need to support the three-valued logic, for example, when you work with databases that support a three-valued logical type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>The bool? type<ept id="p1">](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type)</ept> section of the <bpt id="p2">[</bpt>Using nullable types<ept id="p2">](../../programming-guide/nullable-types/using-nullable-types.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example presents the type that defines both <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Moreover, it overloads the logical AND operator <ph id="ph1">`&amp;`</ph> in such a way that the operator <ph id="ph2">`&amp;&amp;`</ph> also can be evaluated for the operands of that type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Notice the short-circuiting behavior of the <ph id="ph1">`&amp;&amp;`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`GetFuelLaunchStatus`</ph> method returns <ph id="ph2">`LaunchStatus.Red`</ph>, the second operand of the <ph id="ph3">`&amp;&amp;`</ph> operator is not evaluated.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>That is because <ph id="ph1">`LaunchStatus.Red`</ph> is definitely false.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Then the result of the logical AND doesn't depend on the value of the second operand.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The output of the example is as follows:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](../operators/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`true`</ph> literal<ept id="p1">](true-literal.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`false`</ph> literal<ept id="p1">](false-literal.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>