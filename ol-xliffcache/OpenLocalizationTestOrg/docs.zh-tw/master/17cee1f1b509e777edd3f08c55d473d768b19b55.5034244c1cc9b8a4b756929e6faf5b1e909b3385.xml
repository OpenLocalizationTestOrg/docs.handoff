{"content":"---\ntitle: \"Debugging Workflows\"\nms.date: \"03/30/2017\"\nms.assetid: b23b4814-ebb1-4c51-b7a9-469f4da7a96d\n---\n# Debugging Workflows\n[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)] offers several options for debugging running workflows from the development environment. Workflows can be debugged in the designer, in XAML, and in code.  \n  \n## Debugging in the Workflow Designer  \n Breakpoints can be set on activities in the workflow designer by either highlighting the activity and pressing **F9** or by using the activity’s context menu. Execution of the workflow then breaks when the workflow host is run in debug mode. In the following screenshot, workflow execution is paused at a breakpoint. For more information, see [Debugging Workflows with the Workflow Designer](/visualstudio/workflow-designer/debugging-workflows-with-the-workflow-designer).  \n  \n## Debugging in XAML  \n If a workflow has paused at a breakpoint in the designer, the workflow can also be debugged in XAML. To view the point of execution in XAML, select **XAML View** in the workflow designer when workflow execution is paused. Debugging can be switched back to the designer by re-opening the workflow in the designer from the solution explorer. For more information, see [How to: Debug XAML with the Workflow Designer](/visualstudio/workflow-designer/how-to-debug-xaml-with-the-workflow-designer).  \n  \n## Debugging in Code  \n Code breakpoints can be used in [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] in the same way that they can be used in other imperative applications. Click the left margin of the code pane to create a code breakpoint, or press **F9** to place a breakpoint at the cursor location.  \n  \n## Attaching to a Workflow Process  \n Workflow debugging also supports using Visual Studio’s infrastructure to attach to a process. This enables the workflow author to debug a workflow running in a different host environment such as Internet Information Services (IIS) 7.0.  \n  \n## Remote Debugging  \n Windows Workflow Foundation (WF) remote debugging functions the same as remote debugging for other Visual Studio components. For information on using remote debugging, see [How to: Enable Remote Debugging](https://go.microsoft.com/fwlink/?LinkId=196257).  \n  \n> [!NOTE]\n>  If the workflow application targets the x86 architecture and is hosted on a computer running a 64 bit operating system, then remote debugging will not work unless Visual Studio is installed on the remote computer or the target for the workflow application is changed to **Any CPU**.  \n  \n## Extending the Workflow Debugging Service  \n The workflow debugger service is now public and can be used to create custom applications such as monitoring, simulation, and debugging in a re-hosted designer. For more information, see the <xref:System.Activities.Presentation.Debug.DebuggerService> topic.\n","nodes":[{"pos":[4,103],"embed":true,"restype":"x-metadata","content":"title: \"Debugging Workflows\"\nms.date: \"03/30/2017\"\nms.assetid: b23b4814-ebb1-4c51-b7a9-469f4da7a96d","nodes":[{"content":"Debugging Workflows","nodes":[{"pos":[0,19],"content":"Debugging Workflows","nodes":[{"content":"Debugging Workflows","pos":[0,19]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[110,129],"content":"Debugging Workflows","linkify":"Debugging Workflows","nodes":[{"content":"Debugging Workflows","pos":[0,19]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> offers several options for debugging running workflows from the development environment.","pos":[130,293],"source":"[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)] offers several options for debugging running workflows from the development environment."},{"content":"Workflows can be debugged in the designer, in XAML, and in code.","pos":[294,358]},{"pos":[367,401],"content":"Debugging in the Workflow Designer","linkify":"Debugging in the Workflow Designer","nodes":[{"content":"Debugging in the Workflow Designer","pos":[0,34]}]},{"content":"Breakpoints can be set on activities in the workflow designer by either highlighting the activity and pressing <bpt id=\"p1\">**</bpt>F9<ept id=\"p1\">**</ept> or by using the activity’s context menu.","pos":[405,563],"source":"Breakpoints can be set on activities in the workflow designer by either highlighting the activity and pressing **F9** or by using the activity’s context menu."},{"content":"Execution of the workflow then breaks when the workflow host is run in debug mode.","pos":[564,646]},{"content":"In the following screenshot, workflow execution is paused at a breakpoint.","pos":[647,721]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Debugging Workflows with the Workflow Designer<ept id=\"p1\">](/visualstudio/workflow-designer/debugging-workflows-with-the-workflow-designer)</ept>.","pos":[722,877],"source":" For more information, see [Debugging Workflows with the Workflow Designer](/visualstudio/workflow-designer/debugging-workflows-with-the-workflow-designer)."},{"pos":[886,903],"content":"Debugging in XAML","linkify":"Debugging in XAML","nodes":[{"content":"Debugging in XAML","pos":[0,17]}]},{"content":"If a workflow has paused at a breakpoint in the designer, the workflow can also be debugged in XAML.","pos":[907,1007]},{"content":"To view the point of execution in XAML, select <bpt id=\"p1\">**</bpt>XAML View<ept id=\"p1\">**</ept> in the workflow designer when workflow execution is paused.","pos":[1008,1128],"source":" To view the point of execution in XAML, select **XAML View** in the workflow designer when workflow execution is paused."},{"content":"Debugging can be switched back to the designer by re-opening the workflow in the designer from the solution explorer.","pos":[1129,1246]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Debug XAML with the Workflow Designer<ept id=\"p1\">](/visualstudio/workflow-designer/how-to-debug-xaml-with-the-workflow-designer)</ept>.","pos":[1247,1399],"source":" For more information, see [How to: Debug XAML with the Workflow Designer](/visualstudio/workflow-designer/how-to-debug-xaml-with-the-workflow-designer)."},{"pos":[1408,1425],"content":"Debugging in Code","linkify":"Debugging in Code","nodes":[{"content":"Debugging in Code","pos":[0,17]}]},{"content":"Code breakpoints can be used in <ph id=\"ph1\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> in the same way that they can be used in other imperative applications.","pos":[1429,1609],"source":"Code breakpoints can be used in [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] in the same way that they can be used in other imperative applications."},{"content":"Click the left margin of the code pane to create a code breakpoint, or press <bpt id=\"p1\">**</bpt>F9<ept id=\"p1\">**</ept> to place a breakpoint at the cursor location.","pos":[1610,1739],"source":" Click the left margin of the code pane to create a code breakpoint, or press **F9** to place a breakpoint at the cursor location."},{"pos":[1748,1779],"content":"Attaching to a Workflow Process","linkify":"Attaching to a Workflow Process","nodes":[{"content":"Attaching to a Workflow Process","pos":[0,31]}]},{"content":"Workflow debugging also supports using Visual Studio’s infrastructure to attach to a process.","pos":[1783,1876]},{"content":"This enables the workflow author to debug a workflow running in a different host environment such as Internet Information Services (IIS) 7.0.","pos":[1877,2018]},{"pos":[2027,2043],"content":"Remote Debugging","linkify":"Remote Debugging","nodes":[{"content":"Remote Debugging","pos":[0,16]}]},{"content":"Windows Workflow Foundation (WF) remote debugging functions the same as remote debugging for other Visual Studio components.","pos":[2047,2171]},{"content":"For information on using remote debugging, see <bpt id=\"p1\">[</bpt>How to: Enable Remote Debugging<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=196257)</ept>.","pos":[2172,2301],"source":" For information on using remote debugging, see [How to: Enable Remote Debugging](https://go.microsoft.com/fwlink/?LinkId=196257)."},{"pos":[2309,2602],"content":"[!NOTE]\n If the workflow application targets the x86 architecture and is hosted on a computer running a 64 bit operating system, then remote debugging will not work unless Visual Studio is installed on the remote computer or the target for the workflow application is changed to **Any CPU**.","leadings":["","> "],"nodes":[{"content":"If the workflow application targets the x86 architecture and is hosted on a computer running a 64 bit operating system, then remote debugging will not work unless Visual Studio is installed on the remote computer or the target for the workflow application is changed to <bpt id=\"p1\">**</bpt>Any CPU<ept id=\"p1\">**</ept>.","pos":[9,291],"source":"If the workflow application targets the x86 architecture and is hosted on a computer running a 64 bit operating system, then remote debugging will not work unless Visual Studio is installed on the remote computer or the target for the workflow application is changed to **Any CPU**."}]},{"pos":[2611,2651],"content":"Extending the Workflow Debugging Service","linkify":"Extending the Workflow Debugging Service","nodes":[{"content":"Extending the Workflow Debugging Service","pos":[0,40]}]},{"content":"The workflow debugger service is now public and can be used to create custom applications such as monitoring, simulation, and debugging in a re-hosted designer.","pos":[2655,2815]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.Debug.DebuggerService&gt;</ph> topic.","pos":[2816,2912],"source":" For more information, see the <xref:System.Activities.Presentation.Debug.DebuggerService> topic."}]}