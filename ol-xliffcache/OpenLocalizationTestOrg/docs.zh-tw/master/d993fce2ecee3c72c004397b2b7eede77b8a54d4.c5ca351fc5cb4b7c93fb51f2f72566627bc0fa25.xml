{"content":"---\ntitle: \"Type arguments unexpected | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc32088\"\n  - \"bc32088\"\nhelpviewer_keywords: \n  - \"BC32088\"\nms.assetid: a0918e90-e7ad-4edc-81e1-584e6174bb6c\ncaps.latest.revision: 10\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Type arguments unexpected\nAn `Implements` clause supplies type arguments for the interface member it is implementing.  \n  \n The `Implements` clause should only identify the interface and member it is implementing. This means that if you are declaring a generic procedure, the `Of` clause and the type arguments should appear in the main part of the declaration, just as they would if you were not implementing an interface procedure.  \n  \n The following code can generate this error.  \n  \n```  \nPublic Interface testInterface  \n    Sub testSub(Of t)()  \nEnd Interface  \nPublic Class testClass  \n    Implements testInterface  \n    Public Sub testSub() Implements testInterface.testSub(Of t)()  \n    End Sub  \nEnd Class  \n```  \n  \n The declaration preceding the `Implements` clause should look like the interface definition, except for the possible addition of access or procedure modifiers. The following code avoids the error.  \n  \n```  \nPublic Sub testSub(Of t)() Implements testInterface.testSub  \n```  \n  \n **Error ID:** BC32088  \n  \n## To correct this error  \n  \n-   Remove the type argument list from the `Implements` clause.  \n  \n-   If you are implementing a generic member of the interface, then put the type argument list in the main part of the declaration, preceding the `Implements` keyword.  \n  \n## See Also  \n [Implements](../../visual-basic/language-reference/statements/implements-clause.md)   \n [NOT IN BUILD: Implements Keyword and Implements Statement](http://msdn.microsoft.com/en-us/b96560f7-6413-480f-a1e2-f80253bab5be)   \n [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Generic Procedures in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)   \n [Type List](../../visual-basic/language-reference/statements/type-list.md)","nodes":[{"pos":[12,54],"content":"Type arguments unexpected | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Type arguments unexpected | Microsoft Docs","pos":[0,42]}]},{"pos":[571,596],"content":"Type arguments unexpected","linkify":"Type arguments unexpected","nodes":[{"content":"Type arguments unexpected","pos":[0,25]}]},{"pos":[597,688],"content":"An <ph id=\"ph1\">`Implements`</ph> clause supplies type arguments for the interface member it is implementing.","source":"An `Implements` clause supplies type arguments for the interface member it is implementing."},{"content":"The <ph id=\"ph1\">`Implements`</ph> clause should only identify the interface and member it is implementing.","pos":[695,784],"source":"The `Implements` clause should only identify the interface and member it is implementing."},{"content":"This means that if you are declaring a generic procedure, the <ph id=\"ph1\">`Of`</ph> clause and the type arguments should appear in the main part of the declaration, just as they would if you were not implementing an interface procedure.","pos":[785,1004],"source":" This means that if you are declaring a generic procedure, the `Of` clause and the type arguments should appear in the main part of the declaration, just as they would if you were not implementing an interface procedure."},{"content":"The following code can generate this error.","pos":[1011,1054]},{"content":"The declaration preceding the <ph id=\"ph1\">`Implements`</ph> clause should look like the interface definition, except for the possible addition of access or procedure modifiers.","pos":[1301,1460],"source":"The declaration preceding the `Implements` clause should look like the interface definition, except for the possible addition of access or procedure modifiers."},{"content":"The following code avoids the error.","pos":[1461,1497]},{"pos":[1581,1602],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32088","source":"**Error ID:** BC32088"},{"pos":[1611,1632],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[1642,1701],"content":"Remove the type argument list from the <ph id=\"ph1\">`Implements`</ph> clause.","source":"Remove the type argument list from the `Implements` clause."},{"pos":[1711,1874],"content":"If you are implementing a generic member of the interface, then put the type argument list in the main part of the declaration, preceding the <ph id=\"ph1\">`Implements`</ph> keyword.","source":"If you are implementing a generic member of the interface, then put the type argument list in the main part of the declaration, preceding the `Implements` keyword."},{"pos":[1883,1891],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Implements<ept id=\"p1\">](../../visual-basic/language-reference/statements/implements-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[1895,1979],"source":"[Implements](../../visual-basic/language-reference/statements/implements-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>NOT IN BUILD: Implements Keyword and Implements Statement<ept id=\"p1\">](http://msdn.microsoft.com/en-us/b96560f7-6413-480f-a1e2-f80253bab5be)</ept><ph id=\"ph1\"> </ph>","pos":[1982,2113],"source":" [NOT IN BUILD: Implements Keyword and Implements Statement](http://msdn.microsoft.com/en-us/b96560f7-6413-480f-a1e2-f80253bab5be) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2116,2233],"source":" [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Procedures in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[2236,2363],"source":" [Generic Procedures in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type List<ept id=\"p1\">](../../visual-basic/language-reference/statements/type-list.md)</ept>","pos":[2366,2441],"source":" [Type List](../../visual-basic/language-reference/statements/type-list.md)"}]}