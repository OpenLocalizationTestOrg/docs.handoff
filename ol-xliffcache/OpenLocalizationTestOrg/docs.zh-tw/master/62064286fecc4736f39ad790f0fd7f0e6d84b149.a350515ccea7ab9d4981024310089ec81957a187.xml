{"content":"---\ntitle: \"jitCompilationStart MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"JIT compilation\"\n  - \"MDAs (managed debugging assistants), JIT compilation\"\n  - \"JitCompilationStart MDA\"\n  - \"managed debugging assistants (MDAs), JIT compilation\"\nms.assetid: 5ffd2857-d0ba-4342-9824-9ffe04ec135d\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# jitCompilationStart MDA\nThe `jitCompilationStart` managed debugging assistant (MDA) is activated to report when the just-in-time (JIT) compiler starts to compile a function.  \n  \n## Symptoms  \n The working set size increases for a program that is already in native image format because mscorjit.dll is loaded into the process.  \n  \n## Cause  \n Not all the assemblies the program depends on have been generated into native format, or those that have are not registered correctly.  \n  \n## Resolution  \n Enabling this MDA allows you to determine which function is being JIT-compiled. Determine whether the assembly that contains the function is generated to native format and properly registered.  \n  \n## Effect on the Runtime  \n This MDA logs a message just before a method is JIT-compiled, so enabling this MDA has significant impact on performance. Note that if a method is inline, this MDA will not generate a separate message.  \n  \n## Output  \n The following code sample shows sample output. In this case the output shows that in assembly Test the method \"m\" on class \"ns2.CO\" was JIT-compiled.  \n  \n```  \nmethod name=\"Test!ns2.C0::m\"  \n```  \n  \n## Configuration  \n The following configuration file shows a variety of filters that can be employed to filter out which methods are reported when they are first JIT-compiled. You can specify that all methods be reported by setting the value of the name attribute to \\*.  \n  \n```xml  \n<mdaConfig>  \n  <assistants>  \n    <jitCompilationStart>  \n      <methods>  \n        <match name=\"C0::m\" />  \n        <match name=\"MyMethod\" />  \n        <match name=\"C2::*\" />  \n        <match name=\"ns0::*\" />  \n        <match name=\"ns1.C0::*\" />  \n        <match name=\"ns2.C0::m\" />  \n        <match name=\"ns2.C0+N0::m\" />  \n      </methods>  \n    </jitCompilationStart >  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## Example  \n The following code sample is intended to be used with the preceding configuration file.  \n  \n```csharp\nusing System;  \nusing System.Reflection;  \nusing System.Runtime.CompilerServices;  \nusing System.Runtime.InteropServices;  \n  \npublic class Entry  \n{  \n    public static void Main(string[] args)  \n    {  \n        C0.m();  \n        C1.MyMethod();  \n        C2.m();  \n  \n        ns0.C0.m();  \n        ns0.C0.N0.m();  \n        ns0.C1.m();  \n  \n        ns1.C0.m();  \n        ns1.C0.N0.m();  \n  \n        ns2.C0.m();  \n        ns2.C0.N0.m();  \n    }  \n}  \n  \npublic class C0  \n{  \n    [MethodImpl(MethodImplOptions.NoInlining)]  \n    public static void m() { }  \n}  \n  \npublic class C1  \n{  \n    [MethodImpl(MethodImplOptions.NoInlining)]  \n    public static void MyMethod() { }  \n}  \n  \npublic class C2  \n{  \n    [MethodImpl(MethodImplOptions.NoInlining)]  \n    public static void m() { }  \n}  \n  \nnamespace ns0  \n{  \n    public class C0  \n    {  \n        [MethodImpl(MethodImplOptions.NoInlining)]  \n        public static void m() { }  \n  \n        public class N0  \n        {  \n            [MethodImpl(MethodImplOptions.NoInlining)]  \n            public static void m() { }  \n        }  \n    }  \n  \n    public class C1  \n    {  \n        [MethodImpl(MethodImplOptions.NoInlining)]  \n        public static void m() { }  \n    }  \n}  \n  \nnamespace ns1  \n{  \n    public class C0  \n    {  \n        [MethodImpl(MethodImplOptions.NoInlining)]  \n        public static void m() { }  \n        public class N0  \n        {  \n            [MethodImpl(MethodImplOptions.NoInlining)]  \n            public static void m() { }  \n        }  \n    }  \n}  \n  \nnamespace ns2  \n{  \n    public class C0  \n    {  \n        [MethodImpl(MethodImplOptions.NoInlining)]  \n        public static void m() { }  \n  \n        public class N0  \n        {  \n            [MethodImpl(MethodImplOptions.NoInlining)]  \n            public static void m() { }  \n        }  \n    }  \n}  \n```  \n  \n## See also\n\n- <xref:System.Runtime.InteropServices.MarshalAsAttribute>\n- [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)\n- [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)\n","nodes":[{"pos":[4,336],"embed":true,"restype":"x-metadata","content":"title: \"jitCompilationStart MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"JIT compilation\"\n  - \"MDAs (managed debugging assistants), JIT compilation\"\n  - \"JitCompilationStart MDA\"\n  - \"managed debugging assistants (MDAs), JIT compilation\"\nms.assetid: 5ffd2857-d0ba-4342-9824-9ffe04ec135d\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"jitCompilationStart MDA","nodes":[{"pos":[0,23],"content":"jitCompilationStart MDA","nodes":[{"content":"jitCompilationStart MDA","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[343,366],"content":"jitCompilationStart MDA","linkify":"jitCompilationStart MDA","nodes":[{"content":"jitCompilationStart MDA","pos":[0,23]}]},{"pos":[367,516],"content":"The <ph id=\"ph1\">`jitCompilationStart`</ph> managed debugging assistant (MDA) is activated to report when the just-in-time (JIT) compiler starts to compile a function.","source":"The `jitCompilationStart` managed debugging assistant (MDA) is activated to report when the just-in-time (JIT) compiler starts to compile a function."},{"pos":[525,533],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"content":"The working set size increases for a program that is already in native image format because mscorjit.dll is loaded into the process.","pos":[537,669]},{"pos":[678,683],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"Not all the assemblies the program depends on have been generated into native format, or those that have are not registered correctly.","pos":[687,821]},{"pos":[830,840],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"content":"Enabling this MDA allows you to determine which function is being JIT-compiled.","pos":[844,923]},{"content":"Determine whether the assembly that contains the function is generated to native format and properly registered.","pos":[924,1036]},{"pos":[1045,1066],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"This MDA logs a message just before a method is JIT-compiled, so enabling this MDA has significant impact on performance.","pos":[1070,1191]},{"content":"Note that if a method is inline, this MDA will not generate a separate message.","pos":[1192,1271]},{"pos":[1280,1286],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"The following code sample shows sample output.","pos":[1290,1336]},{"content":"In this case the output shows that in assembly Test the method \"m\" on class \"ns2.CO\" was JIT-compiled.","pos":[1337,1439]},{"pos":[1494,1507],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"content":"The following configuration file shows a variety of filters that can be employed to filter out which methods are reported when they are first JIT-compiled.","pos":[1511,1666]},{"content":"You can specify that all methods be reported by setting the value of the name attribute to <ph id=\"ph1\">\\*</ph>.","pos":[1667,1761],"source":" You can specify that all methods be reported by setting the value of the name attribute to \\*."},{"pos":[2197,2204],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code sample is intended to be used with the preceding configuration file.","pos":[2208,2295]},{"pos":[4159,4167],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4230,4383],"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept>","source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)"},{"pos":[4386,4461],"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept>","source":"[Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)"}]}