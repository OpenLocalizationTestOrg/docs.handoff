{"content":"---\ntitle: \"String Canonical Functions\"\nms.date: \"03/30/2017\"\nms.assetid: 5e2cbebd-5df3-47c7-b0e2-49a17ab22bfb\n---\n# String Canonical Functions\n[!INCLUDE[esql](../../../../../../includes/esql-md.md)] includes string canonical functions.  \n  \n## Remarks  \n The following table shows the string [!INCLUDE[esql](../../../../../../includes/esql-md.md)] canonical functions.  \n  \n|Function|Description|  \n|--------------|-----------------|  \n|`Concat(string1, string2)`|Returns a string that contains `string2` appended to `string1`.<br /><br /> **Arguments**<br /><br /> `string1`: The string to which `string2` is appended.<br /><br /> `string2`: The string that is appended to `string1`.<br /><br /> **Return Value**<br /><br /> A `String`. An error will occur if the length of the return value string is greater than the maximum length allowed.<br /><br /> **Example**<br /><br /> `-- The following example returns abcxyz.`<br /><br /> `Concat('abc', 'xyz')`|  \n|`Contains(string, target)`|Returns `true` if `target` is contained in `string`.<br /><br /> **Arguments**<br /><br /> `string`: The string that is searched.<br /><br /> `target`: The target string that is searched for.<br /><br /> **Return Value**<br /><br /> `true` if `target` is contained in `string`; otherwise `false`.<br /><br /> **Example**<br /><br /> `-- The following example returns true.`<br /><br /> `Contains('abc', 'bc')`|  \n|`EndsWith(string, target)`|Returns `true` if `target` ends with `string`.<br /><br /> **Arguments**<br /><br /> `string`: The string that is searched.<br /><br /> `target`: The target string searched for at the end of `string`.<br /><br /> **Return Value**<br /><br /> `True` if `string` ends with `target`; otherwise `false`.<br /><br /> **Example**<br /><br /> `-- The following example returns true.`<br /><br /> `EndsWith('abc', 'bc')` **Note:**  If you are using the SQL Server data provider, this function returns `false` if the string is stored in a fixed length string column and `target` is a constant. In this case, the entire string is searched, including any padding trailing spaces. A possible workaround is to trim the data in the fixed length string, as in the following example: `EndsWith(TRIM(string), target)`|  \n|`IndexOf(target, string)`|Returns the position of `target` inside `string`, or 0 if not found. Returns 1 to indicate the beginning of `string`. Index numbering starts from 1.<br /><br /> **Arguments**<br /><br /> `target`: The string that is searched for.<br /><br /> `string`: The string that is searched.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `-- The following example returns 4.`<br /><br /> `IndexOf('xyz', 'abcxyz')`|  \n|`Left(string, length)`|Returns the first `length` characters from the left side of `string`. If the length of `string` is less than `length`, the entire string is returned.<br /><br /> **Arguments**<br /><br /> `string`: A `String`.<br /><br /> `length`: An `Int16`, `Int32`, `Int64`, or `Byte`. `length` cannot be less than zero.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abc.`<br /><br /> `Left('abcxyz', 3)`|  \n|`Length(string)`|Returns the (`Int32`) length, in characters, of the string.<br /><br /> **Arguments**<br /><br /> `string`: A `String`.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `-- The following example returns 6.`<br /><br /> `Legth('abcxyz')`|  \n|`LTrim(string)`|Returns `string` without leading white space.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abc.`<br /><br /> `LTrim('   abc')`|  \n|`Replace(string1, string2, string3)`|Returns `string1`, with all occurrences of `string2` replaced by `string3`.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abcxyz.`<br /><br /> `Concat('abc', 'xyz')`|  \n|`Reverse(string)`|Returns `string` with the order of the characters reversed.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns dcba.`<br /><br /> `Reverse('abcd')`|  \n|`Right(string, length)`|Returns the last `length` characters from the `string`. If the length of `string` is less than `length`, the entire string is returned.<br /><br /> **Arguments**<br /><br /> `string`: A `String`.<br /><br /> `length`: An `Int16`, `Int32`, `Int64`, or `Byte`. `length` cannot be less than zero.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns xyz.`<br /><br /> `Right('abcxyz', 3)`|  \n|`RTrim(string)`|Returns `string` without trailing white space.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.|  \n|`Substring(string, start, length)`|Returns the substring of the string starting at position `start`, with a length of `length` characters. A start of 1 indicates the first character of the string. Index numbering starts from 1.<br /><br /> **Arguments**<br /><br /> `string`: A `String`.<br /><br /> `start`: An `Int16`, `Int32`, `Int64` and `Byte`. `start` cannot be less than one.<br /><br /> `length`: An `Int16`, `Int32`, `Int64` and `Byte`. `length` cannot be less than zero.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns xyz.`<br /><br /> `Substring('abcxyz', 4, 3)`|  \n|`StartsWith(string, target)`|Returns `true` if `string` starts with `target`.<br /><br /> **Arguments**<br /><br /> `string`: The string that is searched.<br /><br /> `target`: The target string searched for at the start of `string`.<br /><br /> **Return Value**<br /><br /> `True` if `string` starts with `target`; otherwise `false`.<br /><br /> **Example**<br /><br /> `-- The following example returns true.`<br /><br /> `StartsWith('abc', 'ab')`|  \n|`ToLower(string)`|Returns `string` with uppercase characters converted to lowercase.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abc.`<br /><br /> `ToLower('ABC')`|  \n|`ToUpper(string)`|Returns `string` with lowercase characters converted to uppercase.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns ABC.`<br /><br /> `ToUpper('abc')`|  \n|`Trim(string)`|Returns `string` without leading and trailing white space.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abc.`<br /><br /> `Trim('      abc   ')`|  \n  \n These functions will return `null` if given `null` input.  \n  \n Equivalent functionality is available in the Microsoft SQL Client Managed Provider. For more information, see [SqlClient for Entity Framework Functions](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md).  \n  \n## See also\n\n- [Canonical Functions](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)\n","nodes":[{"pos":[4,110],"embed":true,"restype":"x-metadata","content":"title: \"String Canonical Functions\"\nms.date: \"03/30/2017\"\nms.assetid: 5e2cbebd-5df3-47c7-b0e2-49a17ab22bfb","nodes":[{"content":"String Canonical Functions","nodes":[{"pos":[0,26],"content":"String Canonical Functions","nodes":[{"content":"String Canonical Functions","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[117,143],"content":"String Canonical Functions","linkify":"String Canonical Functions","nodes":[{"content":"String Canonical Functions","pos":[0,26]}]},{"pos":[144,236],"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> includes string canonical functions.","source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] includes string canonical functions."},{"pos":[245,252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[256,369],"content":"The following table shows the string <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> canonical functions.","source":"The following table shows the string [!INCLUDE[esql](../../../../../../includes/esql-md.md)] canonical functions."},{"content":"Function","pos":[376,384]},{"content":"Description","pos":[385,396]},{"content":"Returns a string that contains <ph id=\"ph1\">`string2`</ph> appended to <ph id=\"ph2\">`string1`</ph>.","pos":[465,528],"source":"Returns a string that contains `string2` appended to `string1`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[541,554],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string1`</ph>: The string to which <ph id=\"ph2\">`string2`</ph> is appended.","pos":[567,620],"source":"`string1`: The string to which `string2` is appended."},{"content":"<ph id=\"ph1\">`string2`</ph>: The string that is appended to <ph id=\"ph2\">`string1`</ph>.","pos":[633,685],"source":"`string2`: The string that is appended to `string1`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[698,714],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[727,738],"source":"A `String`."},{"content":"An error will occur if the length of the return value string is greater than the maximum length allowed.","pos":[739,843]},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[856,867],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`target`</ph> is contained in <ph id=\"ph3\">`string`</ph>.","pos":[989,1041],"source":"Returns `true` if `target` is contained in `string`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1054,1067],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: The string that is searched.","pos":[1080,1118],"source":"`string`: The string that is searched."},{"content":"<ph id=\"ph1\">`target`</ph>: The target string that is searched for.","pos":[1131,1180],"source":"`target`: The target string that is searched for."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1193,1209],"source":"**Return Value**"},{"content":"<ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`target`</ph> is contained in <ph id=\"ph3\">`string`</ph>; otherwise <ph id=\"ph4\">`false`</ph>.","pos":[1222,1285],"source":"`true` if `target` is contained in `string`; otherwise `false`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1298,1309],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`target`</ph> ends with <ph id=\"ph3\">`string`</ph>.","pos":[1430,1476],"source":"Returns `true` if `target` ends with `string`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1489,1502],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: The string that is searched.","pos":[1515,1553],"source":"`string`: The string that is searched."},{"content":"<ph id=\"ph1\">`target`</ph>: The target string searched for at the end of <ph id=\"ph2\">`string`</ph>.","pos":[1566,1630],"source":"`target`: The target string searched for at the end of `string`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1643,1659],"source":"**Return Value**"},{"content":"<ph id=\"ph1\">`True`</ph> if <ph id=\"ph2\">`string`</ph> ends with <ph id=\"ph3\">`target`</ph>; otherwise <ph id=\"ph4\">`false`</ph>.","pos":[1672,1729],"source":"`True` if `string` ends with `target`; otherwise `false`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1742,1753],"source":"**Example**"},{"content":"<ph id=\"ph1\">`EndsWith('abc', 'bc')`</ph> <bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept>  If you are using the SQL Server data provider, this function returns <ph id=\"ph2\">`false`</ph> if the string is stored in a fixed length string column and <ph id=\"ph3\">`target`</ph> is a constant.","pos":[1819,2014],"source":"`EndsWith('abc', 'bc')` **Note:**  If you are using the SQL Server data provider, this function returns `false` if the string is stored in a fixed length string column and `target` is a constant."},{"content":"In this case, the entire string is searched, including any padding trailing spaces.","pos":[2015,2098]},{"content":"A possible workaround is to trim the data in the fixed length string, as in the following example: <ph id=\"ph1\">`EndsWith(TRIM(string), target)`</ph>","pos":[2099,2230],"source":" A possible workaround is to trim the data in the fixed length string, as in the following example: `EndsWith(TRIM(string), target)`"},{"content":"Returns the position of <ph id=\"ph1\">`target`</ph> inside <ph id=\"ph2\">`string`</ph>, or 0 if not found.","pos":[2261,2329],"source":"Returns the position of `target` inside `string`, or 0 if not found."},{"content":"Returns 1 to indicate the beginning of <ph id=\"ph1\">`string`</ph>.","pos":[2330,2378],"source":" Returns 1 to indicate the beginning of `string`."},{"content":"Index numbering starts from 1.","pos":[2379,2409]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[2422,2435],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`target`</ph>: The string that is searched for.","pos":[2448,2490],"source":"`target`: The string that is searched for."},{"content":"<ph id=\"ph1\">`string`</ph>: The string that is searched.","pos":[2503,2541],"source":"`string`: The string that is searched."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[2554,2570],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[2583,2594],"source":"An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[2607,2618],"source":"**Example**"},{"content":"Returns the first <ph id=\"ph1\">`length`</ph> characters from the left side of <ph id=\"ph2\">`string`</ph>.","pos":[2735,2804],"source":"Returns the first `length` characters from the left side of `string`."},{"content":"If the length of <ph id=\"ph1\">`string`</ph> is less than <ph id=\"ph2\">`length`</ph>, the entire string is returned.","pos":[2805,2884],"source":" If the length of `string` is less than `length`, the entire string is returned."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[2897,2910],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: A <ph id=\"ph2\">`String`</ph>.","pos":[2923,2944],"source":"`string`: A `String`."},{"content":"<ph id=\"ph1\">`length`</ph>: An <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph>, or <ph id=\"ph5\">`Byte`</ph>.","pos":[2957,3007],"source":"`length`: An `Int16`, `Int32`, `Int64`, or `Byte`."},{"content":"<ph id=\"ph1\">`length`</ph> cannot be less than zero.","pos":[3008,3042],"source":"`length` cannot be less than zero."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[3055,3071],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[3084,3095],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3108,3119],"source":"**Example**"},{"content":"Returns the (<ph id=\"ph1\">`Int32`</ph>) length, in characters, of the string.","pos":[3225,3284],"source":"Returns the (`Int32`) length, in characters, of the string."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3297,3310],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: A <ph id=\"ph2\">`String`</ph>.","pos":[3323,3344],"source":"`string`: A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[3357,3373],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[3386,3397],"source":"An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3410,3421],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`string`</ph> without leading white space.","pos":[3522,3567],"source":"Returns `string` without leading white space."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3580,3593],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[3606,3617],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[3630,3646],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[3659,3670],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3683,3694],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`string1`</ph>, with all occurrences of <ph id=\"ph2\">`string2`</ph> replaced by <ph id=\"ph3\">`string3`</ph>.","pos":[3818,3893],"source":"Returns `string1`, with all occurrences of `string2` replaced by `string3`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3906,3919],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[3932,3943],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[3956,3972],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[3985,3996],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4009,4020],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`string`</ph> with the order of the characters reversed.","pos":[4133,4192],"source":"Returns `string` with the order of the characters reversed."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4205,4218],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4231,4242],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4255,4271],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4284,4295],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4308,4319],"source":"**Example**"},{"content":"Returns the last <ph id=\"ph1\">`length`</ph> characters from the <ph id=\"ph2\">`string`</ph>.","pos":[4431,4486],"source":"Returns the last `length` characters from the `string`."},{"content":"If the length of <ph id=\"ph1\">`string`</ph> is less than <ph id=\"ph2\">`length`</ph>, the entire string is returned.","pos":[4487,4566],"source":" If the length of `string` is less than `length`, the entire string is returned."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4579,4592],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: A <ph id=\"ph2\">`String`</ph>.","pos":[4605,4626],"source":"`string`: A `String`."},{"content":"<ph id=\"ph1\">`length`</ph>: An <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph>, or <ph id=\"ph5\">`Byte`</ph>.","pos":[4639,4689],"source":"`length`: An `Int16`, `Int32`, `Int64`, or `Byte`."},{"content":"<ph id=\"ph1\">`length`</ph> cannot be less than zero.","pos":[4690,4724],"source":"`length` cannot be less than zero."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4737,4753],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4766,4777],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4790,4801],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`string`</ph> without trailing white space.","pos":[4907,4953],"source":"Returns `string` without trailing white space."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4966,4979],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4992,5003],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[5016,5032],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[5045,5056],"source":"A `String`."},{"content":"Returns the substring of the string starting at position <ph id=\"ph1\">`start`</ph>, with a length of <ph id=\"ph2\">`length`</ph> characters.","pos":[5096,5199],"source":"Returns the substring of the string starting at position `start`, with a length of `length` characters."},{"content":"A start of 1 indicates the first character of the string.","pos":[5200,5257]},{"content":"Index numbering starts from 1.","pos":[5258,5288]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[5301,5314],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: A <ph id=\"ph2\">`String`</ph>.","pos":[5327,5348],"source":"`string`: A `String`."},{"content":"<ph id=\"ph1\">`start`</ph>: An <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph> and <ph id=\"ph5\">`Byte`</ph>.","pos":[5361,5410],"source":"`start`: An `Int16`, `Int32`, `Int64` and `Byte`."},{"content":"<ph id=\"ph1\">`start`</ph> cannot be less than one.","pos":[5411,5443],"source":"`start` cannot be less than one."},{"content":"<ph id=\"ph1\">`length`</ph>: An <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph> and <ph id=\"ph5\">`Byte`</ph>.","pos":[5456,5506],"source":"`length`: An `Int16`, `Int32`, `Int64` and `Byte`."},{"content":"<ph id=\"ph1\">`length`</ph> cannot be less than zero.","pos":[5507,5541],"source":"`length` cannot be less than zero."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[5554,5570],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[5583,5594],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[5607,5618],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`string`</ph> starts with <ph id=\"ph3\">`target`</ph>.","pos":[5744,5792],"source":"Returns `true` if `string` starts with `target`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[5805,5818],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: The string that is searched.","pos":[5831,5869],"source":"`string`: The string that is searched."},{"content":"<ph id=\"ph1\">`target`</ph>: The target string searched for at the start of <ph id=\"ph2\">`string`</ph>.","pos":[5882,5948],"source":"`target`: The target string searched for at the start of `string`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[5961,5977],"source":"**Return Value**"},{"content":"<ph id=\"ph1\">`True`</ph> if <ph id=\"ph2\">`string`</ph> starts with <ph id=\"ph3\">`target`</ph>; otherwise <ph id=\"ph4\">`false`</ph>.","pos":[5990,6049],"source":"`True` if `string` starts with `target`; otherwise `false`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6062,6073],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`string`</ph> with uppercase characters converted to lowercase.","pos":[6187,6253],"source":"Returns `string` with uppercase characters converted to lowercase."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[6266,6279],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6292,6303],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6316,6332],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6345,6356],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6369,6380],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`string`</ph> with lowercase characters converted to uppercase.","pos":[6484,6550],"source":"Returns `string` with lowercase characters converted to uppercase."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[6563,6576],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6589,6600],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6613,6629],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6642,6653],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6666,6677],"source":"**Example**"},{"content":"Returns <ph id=\"ph1\">`string`</ph> without leading and trailing white space.","pos":[6778,6836],"source":"Returns `string` without leading and trailing white space."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[6849,6862],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6875,6886],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6899,6915],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6928,6939],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6952,6963],"source":"**Example**"},{"pos":[7058,7115],"content":"These functions will return <ph id=\"ph1\">`null`</ph> if given <ph id=\"ph2\">`null`</ph> input.","source":"These functions will return `null` if given `null` input."},{"content":"Equivalent functionality is available in the Microsoft SQL Client Managed Provider.","pos":[7122,7205]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>SqlClient for Entity Framework Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)</ept>.","pos":[7206,7354],"source":" For more information, see [SqlClient for Entity Framework Functions](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)."},{"pos":[7363,7371],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7375,7487],"content":"<bpt id=\"p1\">[</bpt>Canonical Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)</ept>","source":"[Canonical Functions](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)"}]}