<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="standard-query-operator-translation.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48c95411d08aefc3ecb7d8a7041ac47d44e6b9ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\standard-query-operator-translation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9727896a6c08b8996fa6d36adfe294fd8995c9f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7f5ac4321e376082da0beb0dc2830a9fc6758b2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Standard Query Operator Translation</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Standard Query Operator Translation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> translates Standard Query Operators to SQL commands.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The query processor of the database determines the execution semantics of SQL translation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Standard Query Operators are defined against <bpt id="p1">*</bpt>sequences<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A sequence is <bpt id="p1">*</bpt>ordered<ept id="p1">*</ept> and relies on reference identity for each element of the sequence.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Standard Query Operators Overview (C#)<ept id="p1">](../../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept> or <bpt id="p2">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p2">](../../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SQL deals primarily with <bpt id="p1">*</bpt>unordered sets of values<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Ordering is typically an explicitly stated, post-processing operation that is applied to the final result of a query rather than to intermediate results.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Identity is defined by values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For this reason, SQL queries are understood to deal with multisets (<bpt id="p1">*</bpt>bags<ept id="p1">*</ept>) instead of <bpt id="p2">*</bpt>sets<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following paragraphs describe the differences between the Standard Query Operators and their SQL translation for the SQL Server provider for <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Operator Support</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Concat</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method is defined for ordered multisets where the order of the receiver and the order of the argument are the same.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> works as <ph id="ph2">`UNION ALL`</ph> over the multisets followed by the common order.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The final step is ordering in SQL before results are produced.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> does not preserve the order of its arguments.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To ensure appropriate ordering, you must explicitly order the results of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Intersect, Except, Union</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> methods are well defined only on sets.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The semantics for multisets is undefined.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method is defined for multisets as the unordered concatenation of the multisets (effectively the result of the UNION ALL clause in SQL).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Take, Skip</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are well defined only against <bpt id="p1">*</bpt>ordered sets<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The semantics for unordered sets or multisets are undefined.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> have certain limitations when they are used in queries against SQL Server 2000.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the "Skip and Take Exceptions in SQL Server 2000" entry in <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because of limitations on ordering in SQL, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> tries to move the ordering of the argument of these methods to the result of the method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, consider the following <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> query:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The generated SQL for this code moves the ordering to the end, as follows:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It becomes obvious that all the specified ordering must be consistent when <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> are chained together.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Otherwise, the results are undefined.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> are well-defined for non-negative, constant integral arguments based on the Standard Query Operator specification.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Operators with No Translation</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following methods are not translated by <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The most common reason is the difference between unordered multisets and sequences.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Rationale</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>SQL queries operate on multisets, not on sequences.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ORDER BY`</ph> must be the last clause applied to the results.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For this reason, there is no general-purpose translation for these two methods.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Translation of this method is possible for an ordered set but is not currently translated by <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Translation of these methods is possible for an ordered set but is not currently translated by <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>SQL queries operate on multisets, not on indexable sequences.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%2A&gt;</ph> (overload with default arg)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In general, a default value cannot be specified for an arbitrary tuple.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Null values for tuples are possible in some cases through outer joins.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Expression Translation</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Null semantics</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not impose null comparison semantics on SQL.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Comparison operators are syntactically translated to their SQL equivalents.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For this reason, the semantics reflect SQL semantics that are defined by server or connection settings.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, two null values are considered unequal under default SQL Server settings, but you can change the settings to change the semantics.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not consider server settings when it translates queries.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A comparison with the literal null is translated to the appropriate SQL version (<ph id="ph1">`is null`</ph> or <ph id="ph2">`is not null`</ph>).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`null`</ph> in collation is defined by SQL Server.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not change the collation.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Aggregates</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The Standard Query Operator aggregate method <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph> evaluates to zero for an empty sequence or for a sequence that contains only nulls.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>, the semantics of SQL are left unchanged, and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph> evaluates to <ph id="ph3">`null`</ph> instead of zero for an empty sequence or for a sequence that contains only nulls.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>SQL limitations on intermediate results apply to aggregates in <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph> of 32-bit integer quantities is not computed by using 64-bit results.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Overflow might occur for a <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> translation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, even if the Standard Query Operator implementation does not cause an overflow for the corresponding in-memory sequence.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Likewise, the <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> translation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph> of integer values is computed as an <ph id="ph3">`integer`</ph>, not as a <ph id="ph4">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Entity Arguments</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> enables entity types to be used in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the translation of these operators, the use of an argument of a type is considered to be the equivalent to specifying all members of that type.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, the following code is equivalent:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Equatable / Comparable Arguments</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Equality of arguments is required in the implementation of the following methods:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> supports equality and comparison for <bpt id="p1">*</bpt>flat<ept id="p1">*</ept> arguments, but not for arguments that are or contain sequences.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A flat argument is a type that can be mapped to a SQL row.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A projection of one or more entity types that can be statically determined not to contain a sequence is considered a flat argument.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Following are examples of flat arguments:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following are examples of non-flat (hierarchical) arguments.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Visual Basic Function Translation</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The following helper functions that are used by the Visual Basic compiler are translated to corresponding SQL operators and functions:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Conversion methods:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>ToBoolean</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>ToSByte</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>ToByte</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>ToChar</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>ToCharArrayRankOne</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>ToDate</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ToDecimal</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>ToDouble</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>ToInteger</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>ToUInteger</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>ToLong</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ToULong</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>ToShort</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>ToUShort</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>ToSingle</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>ToString</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Inheritance Support</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Inheritance Mapping Restrictions</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Map Inheritance Hierarchies<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-map-inheritance-hierarchies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Inheritance in Queries</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>C# casts are supported only in projection.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Casts that are used elsewhere are not translated and are ignored.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Aside from SQL function names, SQL really only performs the equivalent of the common language runtime (CLR) <ph id="ph1">&lt;xref:System.Convert&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>That is, SQL can change the value of one type to another.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>There is no equivalent of CLR cast because there is no concept of reinterpreting the same bits as those of another type.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>That is why a C# cast works only locally.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>It is not remoted.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The operators, <ph id="ph1">`is`</ph> and <ph id="ph2">`as`</ph>, and the <ph id="ph3">`GetType`</ph> method are not restricted to the <ph id="ph4">`Select`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>They can be used in other query operators also.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>SQL Server 2008 Support</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 3.5 SP1, LINQ to SQL supports mapping to new date and time types introduced with SQL Server 2008.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>But, there are some limitations to the LINQ to SQL query operators that you can use when operating against values mapped to these new types.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Unsupported Query Operators</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following query operators are not supported on values mapped to the new SQL Server date and time types: <ph id="ph1">`DATETIME2`</ph>, <ph id="ph2">`DATE`</ph>, <ph id="ph3">`TIME`</ph>, and <ph id="ph4">`DATETIMEOFFSET`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information about mapping to these SQL Server date and time types, see <bpt id="p1">[</bpt>SQL-CLR Type Mapping<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>SQL Server 2005 Support</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not support the following SQL Server 2005 features:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Stored procedures written for SQL CLR.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>User-defined type.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>XML query features.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>SQL Server 2000 Support</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph> limitations (compared to <ph id="ph2">[!INCLUDE[sqprsqext](../../../../../../includes/sqprsqext-md.md)]</ph>) affect <ph id="ph3">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> support.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Cross Apply and Outer Apply Operators</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>These operators are not available in <ph id="ph1">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> tries a series of rewrites to replace them with appropriate joins.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Cross Apply`</ph> and <ph id="ph2">`Outer Apply`</ph> are generated for relationship navigations.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The set of queries for which such rewrites are possible is not well defined.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For this reason, the minimal set of queries that is supported for <ph id="ph1">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph> is the set that does not involve relationship navigation.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>text / ntext</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Data types <ph id="ph1">`text`</ph><ph id="ph2"> / </ph><ph id="ph3">`ntext`</ph> cannot be used in certain query operations against <ph id="ph4">`varchar(max)`</ph><ph id="ph5"> / </ph><ph id="ph6">`nvarchar(max)`</ph>, which are supported by <ph id="ph7">[!INCLUDE[sqprsqext](../../../../../../includes/sqprsqext-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>No resolution is available for this limitation.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Specifically, you cannot use <ph id="ph1">`Distinct()`</ph> on any result that contains members that are mapped to <ph id="ph2">`text`</ph> or <ph id="ph3">`ntext`</ph> columns.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Behavior Triggered by Nested Queries</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph> (through SP4) binder has some idiosyncrasies that are triggered by nested queries.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The set of SQL queries that triggers these idiosyncrasies is not well defined.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For this reason, you cannot define the set of <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> queries that might cause SQL Server exceptions.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Skip and Take Operators</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> have certain limitations when they are used in queries against <ph id="ph3">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information, see the "Skip and Take Exceptions in SQL Server 2000" entry in <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Object Materialization</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Materialization creates CLR objects from rows that are returned by one or more SQL queries.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following calls are <bpt id="p1">*</bpt>executed locally<ept id="p1">*</ept> as a part of materialization:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ToString`</ph> methods in projections</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Type casts in projections</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Methods that follow the <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> method are <bpt id="p1">*</bpt>executed locally<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method does not cause immediate execution.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">`struct`</ph> as the return type of a query result or as a member of the result type.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Entities are required to be classes.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Anonymous types are materialized as class instances, but named structs (non-entities) can be used in projection.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A member of the return type of a query result can be of type <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>It is materialized as a local collection.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following methods cause the <bpt id="p1">*</bpt>immediate materialization<ept id="p1">*</ept> of the sequence that the methods are applied to:</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/reference.md)</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Return Or Skip Elements in a Sequence<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/return-or-skip-elements-in-a-sequence.md)</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concatenate Two Sequences<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/concatenate-two-sequences.md)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Return the Set Difference Between Two Sequences<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/return-the-set-difference-between-two-sequences.md)</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Return the Set Intersection of Two Sequences<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/return-the-set-intersection-of-two-sequences.md)</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Return the Set Union of Two Sequences<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/return-the-set-union-of-two-sequences.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>