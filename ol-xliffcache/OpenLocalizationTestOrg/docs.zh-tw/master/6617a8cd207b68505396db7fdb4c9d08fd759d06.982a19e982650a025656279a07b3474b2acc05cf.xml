{"content":"---\ntitle: \"Accessing WCF Services with a Windows Store Client App\"\nms.date: \"03/30/2017\"\nms.assetid: e2002ef4-5dee-4a54-9d87-03b33d35fc52\n---\n# Accessing WCF Services with a Windows Store Client App\nWindows 8 introduces a new type of application called Windows Store applications. These applications are designed around a touch screen interface. .NET Framework 4.5 enables Windows Store applications to call WCF services.  \n  \n## WCF Support in Windows Store Applications  \n A subset of WCF functionality is available from within a Windows Store application, see the following sections for more details.  \n  \n> [!IMPORTANT]\n>  Use the WinRT syndication APIs instead of those exposed by WCF. For more information see, [WinRT Syndication API](https://go.microsoft.com/fwlink/?LinkId=236265)  \n  \n> [!WARNING]\n>  Using Add Service Reference to add a web service reference to a Windows Runtime Component isn’t supported.  \n  \n### Supported Bindings  \n The following WCF bindings are supported in Windows Store Applications:  \n  \n1.  <xref:System.ServiceModel.BasicHttpBinding>  \n  \n2.  <xref:System.ServiceModel.NetTcpBinding>  \n  \n3.  <xref:System.ServiceModel.NetHttpBinding>  \n  \n4.  <xref:System.ServiceModel.Channels.CustomBinding>\n  \n The following binding elements are supported in Windows Store Applications  \n  \n1.  <xref:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement>  \n  \n2.  <xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement>  \n  \n3.  <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement>  \n  \n4.  <xref:System.ServiceModel.Channels.SslStreamSecurityBindingElement>  \n  \n5.  <xref:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement>  \n  \n6.  <xref:System.ServiceModel.Channels.TcpTransportBindingElement>  \n  \n7.  <xref:System.ServiceModel.Channels.HttpTransportBindingElement>  \n  \n8.  <xref:System.ServiceModel.Channels.HttpsTransportBindingElement>  \n  \n9. <xref:System.ServiceModel.Channels.TransportSecurityBindingElement>  \n  \n Both Text and Binary encodings are supported. All WCF transfer modes are supported. For more information see, [Streaming Message Transfer](../../../../docs/framework/wcf/feature-details/streaming-message-transfer.md).  \n  \n### Add Service Reference  \n To call a WCF service from a Windows Store application, use the Add Service Reference feature of Visual Studio 2012. You will notice a few changes in the functionality of Add Service Reference when done within a Windows Store application. First no configuration file is generated. Windows Store applications do not use configuration files, so they must be configured in code. This configuration code can be found in the References.cs file generated by Add Service Reference. To see this file, make sure to select \"Show All Files\" in the solution explorer. The file will be located under the Service References and then Reference.svcmap nodes within the project. All operations generated for WCF services within a Windows Store application will be asynchronous using the Task-based asynchronous pattern. For more information, see [Async Tasks - Simplify Asynchronous Programming with Tasks](https://msdn.microsoft.com/magazine/ff959203.aspx).  \n  \n Because configuration is now generated in code, any changes made in the Reference.cs file would be overwritten every time the service reference is updated. To remedy this situation the configuration code is generated within a partial method, which you can implement in your client proxy class. The partial method is declared as follows:  \n  \n```csharp  \nstatic partial void Configure(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint,  \n            System.ServiceModel.Description.ClientCredentials clientCredentials);  \n```  \n  \n You can then implement this partial method and change the binding or endpoint in your client proxy class as follows:  \n  \n```csharp  \npublic partial class Service1Client : System.ServiceModel.ClientBase<MetroWcfClient.ServiceRefMultiEndpt.IService1>, MetroWcfClient.ServiceRefMultiEndpt.IService1  \n    {   \n        static partial void Configure(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint,   \n            System.ServiceModel.Description.ClientCredentials clientCredentials)  \n        {  \n            if (serviceEndpoint.Name ==   \n                    ServiceRefMultiEndpt.Service1Client.EndpointConfiguration.BasicHttpBinding_IService1.ToString())  \n            {  \n                serviceEndpoint.Binding.SendTimeout = new System.TimeSpan(0, 1, 0);  \n            }  \n            else if (serviceEndpoint.Name ==   \n                    ServiceRefMultiEndpt.Service1Client.EndpointConfiguration.BasicHttpBinding_IService11.ToString())  \n            {  \n                serviceEndpoint.Binding.SendTimeout = new System.TimeSpan(0, 1, 0);  \n                clientCredentials.UserName.UserName = \"username1\";  \n                clientCredentials.UserName.Password = \"password\";  \n            }  \n            else if (serviceEndpoint.Name ==   \n                    ServiceRefMultiEndpt.Service1Client.EndpointConfiguration.NetTcpBinding_IService1.ToString())  \n            {  \n                serviceEndpoint.Binding.Name = \"MyTcpBinding\";  \n                serviceEndpoint.Address = new System.ServiceModel.EndpointAddress(\"net.tcp://localhost/tcp\");  \n            }  \n        }  \n    }  \n```  \n  \n### Serialization  \n The following serializers are supported in Windows Store applications:  \n  \n1.  DataContractSerializer  \n  \n2.  DataContractJsonSerializer  \n  \n3.  XmlSerializer  \n  \n> [!WARNING]\n>  XmlDictionaryWriter.Write(DateTime) now writes the DateTime object as a string.  \n  \n### Security  \n\nThe following security modes are supported in Windows Store applications:\n  \n1. <xref:System.ServiceModel.SecurityMode.None>  \n  \n2. <xref:System.ServiceModel.SecurityMode.Transport>  \n  \n3. <xref:System.ServiceModel.SecurityMode.TransportWithMessageCredential>\n  \n4. <xref:System.ServiceModel.SecurityMode.Message>\n  \nThe following client credential types are supported in Windows Store applications:\n  \n1.  None  \n  \n2.  Basic  \n  \n3.  Digest  \n  \n4.  Negotiate  \n  \n5.  NTLM  \n  \n6.  Windows  \n  \n7.  Username (Message Security)  \n  \n8.  Windows (Transport Security)  \n  \n In order for Windows Store applications to access and send default Windows credentials, you must enable this functionality within the Package.appmanifest file. Open this file and select the Capabilities tab and select \"Default Windows Credentials\". This allows the application to connect to intranet resources that require domain credentials.  \n  \n> [!IMPORTANT]\n>  In order for Windows Store applications to make cross machine calls you must enable another capability called \"Home/Work Networking\". This setting is also in the Package.appmanifest file under the Capabilities tab. Select the Home/Work Networking checkbox. This gives your application inbound and outbound access to the networks of the user’s trusted places like home and work. Inbound critical ports are always blocked. For accessing services on the internet you must also enable Internet (Client) capability.  \n  \n### Misc  \n The use of the following classes is supported for Windows Store Applications:  \n  \n1.  <xref:System.ServiceModel.ChannelFactory>  \n  \n2.  <xref:System.ServiceModel.DuplexChannelFactory%601>\n  \n3.  <xref:System.ServiceModel.CallbackBehaviorAttribute>  \n  \n### Defining Service Contracts  \n We recommend only defining asynchronous service operations using the task-based async pattern. This ensures Windows Store applications remain responsive while calling a service operation.  \n  \n> [!WARNING]\n>  While no exception will be thrown if you define a synchronous operation, it is strongly recommended to only define asynchronous operations.  \n  \n### Calling WCF Services from Windows Store Applications  \n As mentioned before all configuration must be done in code in the GetBindingForEndpoint method in the generated proxy class. Calling a service operation is done the same as calling any task-based asynchronous method as shown in the following code snippet.  \n  \n```csharp  \nvoid async SomeMethod()  \n{  \n    ServiceClient proxy = new ServiceClient();  \n    Task<T> results = await proxy.CallAsync(param1, param2);  \n    T result = results.Result;  \n    if (result.Success)  \n    {  \n       // Do something with result  \n    }  \n}  \n```  \n  \n Notice the use of the async keyword on the method making the asynchronous call and the await keyword when calling the asynchronous method.  \n  \n## See also\n\n- [WCF in Windows Store Apps Blog](https://blogs.msdn.com/b/piyushjo/archive/2011/09/22/wcf-in-win8-metro-styled-apps-absolutely-supported.aspx)\n- [WCF Windows Store Clients and Security](https://blogs.msdn.com/b/piyushjo/archive/2011/10/11/calling-a-wcf-service-from-a-metro-application-adding-security.aspx)\n- [Windows Store Apps and Cross Machine Calls](https://blogs.msdn.com/b/piyushjo/archive/2011/10/22/calling-a-wcf-service-from-a-metro-application-cross-machine-scenario.aspx)\n- [Calling a WCF Service Deployed in Azure from a Windows Store App](https://blogs.msdn.com/b/piyushjo/archive/2011/10/22/calling-a-wcf-service-from-a-metro-application-cross-machine-scenario.aspx)\n- [Programming WCF Security](../../../../docs/framework/wcf/feature-details/programming-wcf-security.md)\n- [Bindings](../../../../docs/framework/wcf/bindings.md)\n","nodes":[{"pos":[4,138],"embed":true,"restype":"x-metadata","content":"title: \"Accessing WCF Services with a Windows Store Client App\"\nms.date: \"03/30/2017\"\nms.assetid: e2002ef4-5dee-4a54-9d87-03b33d35fc52","nodes":[{"content":"Accessing WCF Services with a Windows Store Client App","nodes":[{"pos":[0,54],"content":"Accessing WCF Services with a Windows Store Client App","nodes":[{"content":"Accessing WCF Services with a Windows Store Client App","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[145,199],"content":"Accessing WCF Services with a Windows Store Client App","linkify":"Accessing WCF Services with a Windows Store Client App","nodes":[{"content":"Accessing WCF Services with a Windows Store Client App","pos":[0,54]}]},{"content":"Windows 8 introduces a new type of application called Windows Store applications.","pos":[200,281]},{"content":"These applications are designed around a touch screen interface.","pos":[282,346]},{"content":".NET Framework 4.5 enables Windows Store applications to call WCF services.","pos":[347,422]},{"pos":[431,472],"content":"WCF Support in Windows Store Applications","linkify":"WCF Support in Windows Store Applications","nodes":[{"content":"WCF Support in Windows Store Applications","pos":[0,41]}]},{"content":"A subset of WCF functionality is available from within a Windows Store application, see the following sections for more details.","pos":[476,604]},{"pos":[612,789],"content":"[!IMPORTANT]\n Use the WinRT syndication APIs instead of those exposed by WCF. For more information see, [WinRT Syndication API](https://go.microsoft.com/fwlink/?LinkId=236265)","leadings":["","> "],"nodes":[{"content":"Use the WinRT syndication APIs instead of those exposed by WCF. For more information see, [WinRT Syndication API](https://go.microsoft.com/fwlink/?LinkId=236265)","pos":[14,175],"nodes":[{"content":"Use the WinRT syndication APIs instead of those exposed by WCF.","pos":[0,63]},{"content":"For more information see, <bpt id=\"p1\">[</bpt>WinRT Syndication API<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=236265)</ept>","pos":[64,161],"source":" For more information see, [WinRT Syndication API](https://go.microsoft.com/fwlink/?LinkId=236265)"}]}]},{"pos":[797,917],"content":"[!WARNING]\n Using Add Service Reference to add a web service reference to a Windows Runtime Component isn’t supported.","leadings":["","> "],"nodes":[{"content":"Using Add Service Reference to add a web service reference to a Windows Runtime Component isn’t supported.","pos":[12,118]}]},{"pos":[927,945],"content":"Supported Bindings","linkify":"Supported Bindings","nodes":[{"content":"Supported Bindings","pos":[0,18]}]},{"content":"The following WCF bindings are supported in Windows Store Applications:","pos":[949,1020]},{"content":"The following binding elements are supported in Windows Store Applications","pos":[1238,1312]},{"content":"Both Text and Binary encodings are supported.","pos":[2019,2064]},{"content":"All WCF transfer modes are supported.","pos":[2065,2102]},{"content":"For more information see, <bpt id=\"p1\">[</bpt>Streaming Message Transfer<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/streaming-message-transfer.md)</ept>.","pos":[2103,2236],"source":" For more information see, [Streaming Message Transfer](../../../../docs/framework/wcf/feature-details/streaming-message-transfer.md)."},{"pos":[2246,2267],"content":"Add Service Reference","linkify":"Add Service Reference","nodes":[{"content":"Add Service Reference","pos":[0,21]}]},{"content":"To call a WCF service from a Windows Store application, use the Add Service Reference feature of Visual Studio 2012.","pos":[2271,2387]},{"content":"You will notice a few changes in the functionality of Add Service Reference when done within a Windows Store application.","pos":[2388,2509]},{"content":"First no configuration file is generated.","pos":[2510,2551]},{"content":"Windows Store applications do not use configuration files, so they must be configured in code.","pos":[2552,2646]},{"content":"This configuration code can be found in the References.cs file generated by Add Service Reference.","pos":[2647,2745]},{"content":"To see this file, make sure to select \"Show All Files\" in the solution explorer.","pos":[2746,2826]},{"content":"The file will be located under the Service References and then Reference.svcmap nodes within the project.","pos":[2827,2932]},{"content":"All operations generated for WCF services within a Windows Store application will be asynchronous using the Task-based asynchronous pattern.","pos":[2933,3073]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Async Tasks - Simplify Asynchronous Programming with Tasks<ept id=\"p1\">](https://msdn.microsoft.com/magazine/ff959203.aspx)</ept>.","pos":[3074,3212],"source":" For more information, see [Async Tasks - Simplify Asynchronous Programming with Tasks](https://msdn.microsoft.com/magazine/ff959203.aspx)."},{"content":"Because configuration is now generated in code, any changes made in the Reference.cs file would be overwritten every time the service reference is updated.","pos":[3219,3374]},{"content":"To remedy this situation the configuration code is generated within a partial method, which you can implement in your client proxy class.","pos":[3375,3512]},{"content":"The partial method is declared as follows:","pos":[3513,3555]},{"content":"You can then implement this partial method and change the binding or endpoint in your client proxy class as follows:","pos":[3764,3880]},{"pos":[5382,5395],"content":"Serialization","linkify":"Serialization","nodes":[{"content":"Serialization","pos":[0,13]}]},{"content":"The following serializers are supported in Windows Store applications:","pos":[5399,5469]},{"content":"DataContractSerializer","pos":[5479,5501]},{"content":"DataContractJsonSerializer","pos":[5511,5537]},{"content":"XmlSerializer","pos":[5547,5560]},{"pos":[5568,5661],"content":"[!WARNING]\n XmlDictionaryWriter.Write(DateTime) now writes the DateTime object as a string.","leadings":["","> "],"nodes":[{"content":"XmlDictionaryWriter.Write(DateTime) now writes the DateTime object as a string.","pos":[12,91]}]},{"pos":[5671,5679],"content":"Security","linkify":"Security","nodes":[{"content":"Security","pos":[0,8]}]},{"content":"The following security modes are supported in Windows Store applications:","pos":[5683,5756]},{"content":"The following client credential types are supported in Windows Store applications:","pos":[6002,6084]},{"content":"None","pos":[6092,6096]},{"content":"Basic","pos":[6106,6111]},{"content":"Digest","pos":[6121,6127]},{"content":"Negotiate","pos":[6137,6146]},{"content":"NTLM","pos":[6156,6160]},{"content":"Windows","pos":[6170,6177]},{"content":"Username (Message Security)","pos":[6187,6214]},{"content":"Windows (Transport Security)","pos":[6224,6252]},{"content":"In order for Windows Store applications to access and send default Windows credentials, you must enable this functionality within the Package.appmanifest file.","pos":[6259,6418]},{"content":"Open this file and select the Capabilities tab and select \"Default Windows Credentials\".","pos":[6419,6507]},{"content":"This allows the application to connect to intranet resources that require domain credentials.","pos":[6508,6601]},{"pos":[6609,7135],"content":"[!IMPORTANT]\n In order for Windows Store applications to make cross machine calls you must enable another capability called \"Home/Work Networking\". This setting is also in the Package.appmanifest file under the Capabilities tab. Select the Home/Work Networking checkbox. This gives your application inbound and outbound access to the networks of the user’s trusted places like home and work. Inbound critical ports are always blocked. For accessing services on the internet you must also enable Internet (Client) capability.","leadings":["","> "],"nodes":[{"content":"In order for Windows Store applications to make cross machine calls you must enable another capability called \"Home/Work Networking\". This setting is also in the Package.appmanifest file under the Capabilities tab. Select the Home/Work Networking checkbox. This gives your application inbound and outbound access to the networks of the user’s trusted places like home and work. Inbound critical ports are always blocked. For accessing services on the internet you must also enable Internet (Client) capability.","pos":[14,524],"nodes":[{"content":"In order for Windows Store applications to make cross machine calls you must enable another capability called \"Home/Work Networking\".","pos":[0,133]},{"content":"This setting is also in the Package.appmanifest file under the Capabilities tab. Select the Home/Work Networking checkbox.","pos":[134,256]},{"content":"This gives your application inbound and outbound access to the networks of the user’s trusted places like home and work.","pos":[257,377]},{"content":"Inbound critical ports are always blocked.","pos":[378,420]},{"content":"For accessing services on the internet you must also enable Internet (Client) capability.","pos":[421,510]}]}]},{"pos":[7145,7149],"content":"Misc","linkify":"Misc","nodes":[{"content":"Misc","pos":[0,4]}]},{"content":"The use of the following classes is supported for Windows Store Applications:","pos":[7153,7230]},{"pos":[7412,7438],"content":"Defining Service Contracts","linkify":"Defining Service Contracts","nodes":[{"content":"Defining Service Contracts","pos":[0,26]}]},{"content":"We recommend only defining asynchronous service operations using the task-based async pattern.","pos":[7442,7536]},{"content":"This ensures Windows Store applications remain responsive while calling a service operation.","pos":[7537,7629]},{"pos":[7637,7790],"content":"[!WARNING]\n While no exception will be thrown if you define a synchronous operation, it is strongly recommended to only define asynchronous operations.","leadings":["","> "],"nodes":[{"content":"While no exception will be thrown if you define a synchronous operation, it is strongly recommended to only define asynchronous operations.","pos":[12,151]}]},{"pos":[7800,7852],"content":"Calling WCF Services from Windows Store Applications","linkify":"Calling WCF Services from Windows Store Applications","nodes":[{"content":"Calling WCF Services from Windows Store Applications","pos":[0,52]}]},{"content":"As mentioned before all configuration must be done in code in the GetBindingForEndpoint method in the generated proxy class.","pos":[7856,7980]},{"content":"Calling a service operation is done the same as calling any task-based asynchronous method as shown in the following code snippet.","pos":[7981,8111]},{"content":"Notice the use of the async keyword on the method making the asynchronous call and the await keyword when calling the asynchronous method.","pos":[8397,8535]},{"pos":[8544,8552],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8556,8698],"content":"<bpt id=\"p1\">[</bpt>WCF in Windows Store Apps Blog<ept id=\"p1\">](https://blogs.msdn.com/b/piyushjo/archive/2011/09/22/wcf-in-win8-metro-styled-apps-absolutely-supported.aspx)</ept>","source":"[WCF in Windows Store Apps Blog](https://blogs.msdn.com/b/piyushjo/archive/2011/09/22/wcf-in-win8-metro-styled-apps-absolutely-supported.aspx)"},{"pos":[8701,8863],"content":"<bpt id=\"p1\">[</bpt>WCF Windows Store Clients and Security<ept id=\"p1\">](https://blogs.msdn.com/b/piyushjo/archive/2011/10/11/calling-a-wcf-service-from-a-metro-application-adding-security.aspx)</ept>","source":"[WCF Windows Store Clients and Security](https://blogs.msdn.com/b/piyushjo/archive/2011/10/11/calling-a-wcf-service-from-a-metro-application-adding-security.aspx)"},{"pos":[8866,9039],"content":"<bpt id=\"p1\">[</bpt>Windows Store Apps and Cross Machine Calls<ept id=\"p1\">](https://blogs.msdn.com/b/piyushjo/archive/2011/10/22/calling-a-wcf-service-from-a-metro-application-cross-machine-scenario.aspx)</ept>","source":"[Windows Store Apps and Cross Machine Calls](https://blogs.msdn.com/b/piyushjo/archive/2011/10/22/calling-a-wcf-service-from-a-metro-application-cross-machine-scenario.aspx)"},{"pos":[9042,9237],"content":"<bpt id=\"p1\">[</bpt>Calling a WCF Service Deployed in Azure from a Windows Store App<ept id=\"p1\">](https://blogs.msdn.com/b/piyushjo/archive/2011/10/22/calling-a-wcf-service-from-a-metro-application-cross-machine-scenario.aspx)</ept>","source":"[Calling a WCF Service Deployed in Azure from a Windows Store App](https://blogs.msdn.com/b/piyushjo/archive/2011/10/22/calling-a-wcf-service-from-a-metro-application-cross-machine-scenario.aspx)"},{"pos":[9240,9342],"content":"<bpt id=\"p1\">[</bpt>Programming WCF Security<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/programming-wcf-security.md)</ept>","source":"[Programming WCF Security](../../../../docs/framework/wcf/feature-details/programming-wcf-security.md)"},{"pos":[9345,9399],"content":"<bpt id=\"p1\">[</bpt>Bindings<ept id=\"p1\">](../../../../docs/framework/wcf/bindings.md)</ept>","source":"[Bindings](../../../../docs/framework/wcf/bindings.md)"}]}