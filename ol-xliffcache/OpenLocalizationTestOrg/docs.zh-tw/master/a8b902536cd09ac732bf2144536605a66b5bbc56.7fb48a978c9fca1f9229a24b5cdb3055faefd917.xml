{"content":"---\ntitle: \"How to: Create a C-C++ Union by Using Attributes (C#)\"\nms.date: 07/20/2015\nms.assetid: 85f35e56-26e0-4d31-9f3a-89bd4005e71a\n---\n# How to: Create a C/C++ Union by Using Attributes (C#)\nBy using attributes you can customize how structs are laid out in memory. For example, you can create what is known as a union in C/C++ by using the `StructLayout(LayoutKind.Explicit)` and `FieldOffset` attributes.  \n  \n## Example  \n In this code segment, all of the fields of `TestUnion` start at the same location in memory.  \n  \n```csharp  \n// Add a using directive for System.Runtime.InteropServices.  \n  \n       [System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]  \n       struct TestUnion  \n       {  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public int i;  \n  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public double d;  \n  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public char c;  \n  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public byte b;  \n       }  \n```  \n  \n## Example  \n The following is another example where fields start at different explicitly set locations.  \n  \n```csharp  \n// Add a using directive for System.Runtime.InteropServices.  \n  \n       [System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]  \n       struct TestExplicit  \n       {  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public long lg;  \n  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public int i1;  \n  \n           [System.Runtime.InteropServices.FieldOffset(4)]  \n           public int i2;  \n  \n           [System.Runtime.InteropServices.FieldOffset(8)]  \n           public double d;  \n  \n           [System.Runtime.InteropServices.FieldOffset(12)]  \n           public char c;  \n  \n           [System.Runtime.InteropServices.FieldOffset(14)]  \n           public byte b;  \n       }  \n```  \n  \n The two integer fields, `i1` and `i2`, share the same memory locations as `lg`. This sort of control over struct layout is useful when using platform invocation.  \n  \n## See also\n\n- <xref:System.Reflection>\n- <xref:System.Attribute>\n- [C# Programming Guide](../../../../csharp/programming-guide/index.md)\n- [Attributes](../../../../../docs/standard/attributes/index.md)\n- [Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md)\n- [Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/index.md)\n- [Creating Custom Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)\n- [Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)\n","nodes":[{"pos":[4,135],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a C-C++ Union by Using Attributes (C#)\"\nms.date: 07/20/2015\nms.assetid: 85f35e56-26e0-4d31-9f3a-89bd4005e71a","nodes":[{"content":"How to: Create a C-C++ Union by Using Attributes (C#)","nodes":[{"pos":[0,53],"content":"How to: Create a C-C++ Union by Using Attributes (C#)","nodes":[{"content":"How to: Create a C-C++ Union by Using Attributes (C#)","pos":[0,53]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[142,195],"content":"How to: Create a C/C++ Union by Using Attributes (C#)","linkify":"How to: Create a C/C++ Union by Using Attributes (C#)","nodes":[{"content":"How to: Create a C/C++ Union by Using Attributes (C#)","pos":[0,53]}]},{"content":"By using attributes you can customize how structs are laid out in memory.","pos":[196,269]},{"content":"For example, you can create what is known as a union in C/C++ by using the <ph id=\"ph1\">`StructLayout(LayoutKind.Explicit)`</ph> and <ph id=\"ph2\">`FieldOffset`</ph> attributes.","pos":[270,410],"source":" For example, you can create what is known as a union in C/C++ by using the `StructLayout(LayoutKind.Explicit)` and `FieldOffset` attributes."},{"pos":[419,426],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[430,522],"content":"In this code segment, all of the fields of <ph id=\"ph1\">`TestUnion`</ph> start at the same location in memory.","source":"In this code segment, all of the fields of `TestUnion` start at the same location in memory."},{"pos":[1108,1115],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is another example where fields start at different explicitly set locations.","pos":[1119,1209]},{"content":"The two integer fields, <ph id=\"ph1\">`i1`</ph> and <ph id=\"ph2\">`i2`</ph>, share the same memory locations as <ph id=\"ph3\">`lg`</ph>.","pos":[1984,2063],"source":"The two integer fields, `i1` and `i2`, share the same memory locations as `lg`."},{"content":"This sort of control over struct layout is useful when using platform invocation.","pos":[2064,2145]},{"pos":[2154,2162],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2219,2288],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../../csharp/programming-guide/index.md)"},{"pos":[2291,2353],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](../../../../../docs/standard/attributes/index.md)</ept>","source":"[Attributes](../../../../../docs/standard/attributes/index.md)"},{"pos":[2356,2434],"content":"<bpt id=\"p1\">[</bpt>Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/reflection.md)</ept>","source":"[Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md)"},{"pos":[2437,2521],"content":"<bpt id=\"p1\">[</bpt>Attributes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/index.md)</ept>","source":"[Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/index.md)"},{"pos":[2524,2645],"content":"<bpt id=\"p1\">[</bpt>Creating Custom Attributes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept>","source":"[Creating Custom Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)"},{"pos":[2648,2797],"content":"<bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>","source":"[Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)"}]}