<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="securing-wcf-data-services.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e134d877c45af00e2a2fb7e7ef0882ffd7ddc48</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\wcf\securing-wcf-data-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64c66c609ff4e8ed7768d3c1d95326e3e1deec49</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d6cba7368e13cddd8ad24094935fc751c27005b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Securing WCF Data Services</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Securing WCF Data Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes security considerations that are specific to developing, deploying, and running WCF Data Services and applications that access services that support the Open Data Protocol (OData).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You should also follow recommendations for creating secure .NET Framework applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When planning how to secure a WCF Data Services-based OData service, you must address both authentication, the process of discovering and verifying the identity of a principal, and authorization, the process of determining whether an authenticated principal is allowed to access the requested resources.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You should also consider whether to encrypt the message by using SSL.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Authenticating Client Requests</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>WCF Data Services does not implement any kind of authentication of its own, but rather relies on the authentication provisions of the data service host.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This means that the service assumes that any request that it receives has already been authenticated by the network host and that the host has correctly identified the principle for the request appropriately via the interfaces provided by WCF Data Services.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These authentication options and approaches are detailed in the multipart <bpt id="p1">[</bpt>OData and Authentication series<ept id="p1">](https://devblogs.microsoft.com/odata/?s=%22OData+and+authentication%22)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Authentication Options for a WCF Data Service</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table lists some of the authentication mechanisms that are available to help you authenticate requests to a WCF Data Service.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Authentication Options</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Anonymous authentication</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When HTTP anonymous authentication is enabled, any principle is able to connect to the data service.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Credentials are not required for anonymous access.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use this option only when you want to allow anyone to access the data service.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Basic and digest authentication</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Credentials consisting of a user name and password are required for authentication.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Supports authentication of non-Windows clients.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Note:<ept id="p1">**</ept>  Basic authentication credentials (user name and password) are sent in the clear and can be intercepted.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Digest authentication sends a hash based-on the supplied credentials, which makes it more secure than basic authentication.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Both are susceptible to man-in-the-middle attacks.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When using these authentication methods, you should consider encrypting communication between client and the data service by using the Secure Sockets Layer (SSL).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Microsoft Internet Information Services (IIS) provides an implementation of both basic and digest authentication for HTTP requests in an ASP.NET application.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This Windows Authentication Provider implementation enables a .NET Framework client application to supply credentials in the HTTP header of the request to the data service to seamlessly negotiate authentication of a Windows user.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Digest Authentication Technical Reference<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=200408)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you want to have your data service use basic authentication based on some custom authentication service and not Windows credentials, you must implement a custom ADP.NET HTTP Module for authentication.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For an example of how to use a custom basic authentication scheme with WCF Data Services, see the blog post <bpt id="p1">[</bpt>OData and Authentication – Part 6 – Custom Basic Authentication<ept id="p1">](https://devblogs.microsoft.com/odata/odata-and-authentication-part-6-custom-basic-authentication/)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Windows authentication</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Windows-based credentials are exchanged by using NTLM or Kerberos.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This mechanism is more secure than basic or digest authentication, but it requires that the client be a Windows-based application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>IIS also provides an implementation of Windows authentication for HTTP requests in an ASP.NET application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ASP.NET Forms Authentication Overview<ept id="p1">](https://docs.microsoft.com/previous-versions/aspnet/7t6b43z4(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For an example of how to use Windows authentication with WCF Data Services, see the blog post <bpt id="p1">[</bpt>OData and Authentication – Part 2 – Windows Authentication<ept id="p1">](https://devblogs.microsoft.com/odata/odata-and-authentication-part-2-windows-authentication/)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>ASP.NET forms authentication</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Forms authentication lets you authenticate users by using your own code and then maintain an authentication token in a cookie or in the page URL.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You authenticate the user name and password of your users using a login form that you create.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Unauthenticated requests are redirected to a login page, where the user provides credentials and submits the form.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the application authenticates the request, the system issues a ticket that contains a key for reestablishing the identity for subsequent requests.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Forms Authentication Provider<ept id="p1">](https://docs.microsoft.com/previous-versions/aspnet/9wff0kyh(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Note:<ept id="p1">**</ept>  By default, the cookie that contains the forms authentication ticket is not secured when you use forms authentication in a ASP.NET Web application.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You should consider requiring SSL to protect both the authentication ticket and the initial login credentials.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For an example of how to use forms authentication with WCF Data Services, see the blog post <bpt id="p1">[</bpt>OData and Authentication – Part 7 – Forms Authentication<ept id="p1">](https://devblogs.microsoft.com/odata/odata-and-authentication-part-7-forms-authentication/)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Claims-based authentication</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In claims-based authentication, the data service relies on a trusted "third-party" identity provider service to authenticate the user.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The identity provider positively authenticates the user that is requesting access to data service resources and issues a token that grants access to the requested resources.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This token is then presented to the data service, which then grants access to the user based on the trust relationship with the identity service that issued the access token.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The benefit of using a claims-based authentication provider is that they can be used to authenticate various types of clients across trust domains.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>By employing such a third-party provider, a data service can offload the requirements of maintaining and authenticating users.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>OAuth 2.0 is a claims-based authentication protocol that is supported by Windows Azure AppFabric Access Control for federated authorization as a service.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This protocol supports REST-based services.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For an example of how to use OAuth 2.0 with WCF Data Services, see the blog post <bpt id="p1">[</bpt>OData and Authentication – Part 8 – OAuth WRAP<ept id="p1">](https://devblogs.microsoft.com/odata/odata-and-authentication-part-8-oauth-wrap/)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Authentication in the Client Library</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>By default, the WCF Data Services client library does not supply credentials when making a request to an OData service.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When login credentials are required by the data service to authenticate a user, these credentials can be supplied in a <ph id="ph1">&lt;xref:System.Net.NetworkCredential&gt;</ph> accessed from the <ph id="ph2">&lt;xref:System.Data.Services.Client.DataServiceContext.Credentials%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Data.Services.Client.DataServiceContext&gt;</ph>, as in the following example:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Specify Client Credentials for a Data Service Request<ept id="p1">](../../../../docs/framework/data/wcf/specify-client-creds-for-a-data-service-request-wcf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When the data service requires login credentials that cannot be specified by using a <ph id="ph1">&lt;xref:System.Net.NetworkCredential&gt;</ph> object, such as a claims-based token or cookie, you must manually set headers in the HTTP request, usually the <ph id="ph2">`Authorization`</ph> and <ph id="ph3">`Cookie`</ph> headers.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information about this kind of authentication scenario, see the blog post <bpt id="p1">[</bpt> OData and Authentication – Part 3 – ClientSide Hooks<ept id="p1">](https://devblogs.microsoft.com/odata/odata-and-authentication-part-3-clientside-hooks/)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For an example of how to set HTTP headers in a request message, see <bpt id="p1">[</bpt>How to: Set Headers in the Client Request<ept id="p1">](../../../../docs/framework/data/wcf/how-to-set-headers-in-the-client-request-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Impersonation</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Generally, the data service accesses required resources, such as files on the server or a database, by using the credentials of the worker process that is hosting the data service.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When using impersonation, <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> applications can execute with the Windows identity (user account) of the user making the request.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Impersonation is commonly used in applications that rely on IIS to authenticate the user, and the credentials of this principle are used to access the required resources.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ASP.NET Impersonation<ept id="p1">](https://docs.microsoft.com/previous-versions/aspnet/xh507fc5(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Configuring Data Service Authorization</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Authorization is the granting of access to application resources to a principle or process that is identified based on a previously successful authentication.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As a general practice, you should only grant sufficient rights to users of the data service to perform the operations required by client applications.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Restrict Access to Data Service Resources</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>By default, WCF Data Services enables you to grant common read and write access against data service resources (entity set and service operations) to any user that is able to access the data service.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Rules that define read and write access can be defined separately for each entity set exposed by the data service, as well as to any service operations.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>We recommend limiting both read and write access to only the resources required by the client application.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Minimum Resource Access Requirements<ept id="p1">](../../../../docs/framework/data/wcf/configuring-the-data-service-wcf-data-services.md#accessRequirements)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Implement Role-Based Interceptors</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Interceptors enable you to intercept requests against data service resources before they are acted on by the data service.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Interceptors<ept id="p1">](../../../../docs/framework/data/wcf/interceptors-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Interceptors enable you to make authorization decisions based the authenticated user that is making the request.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For an example of how to restrict access to data service resources based on an authenticated user identity, see <bpt id="p1">[</bpt>How to: Intercept Data Service Messages<ept id="p1">](../../../../docs/framework/data/wcf/how-to-intercept-data-service-messages-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Restrict Access to the Persisted Data Store and Local Resources</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The accounts that are used to access the persisted store should be granted only enough rights in a database or the file system to support the requirements of the data service.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When anonymous authentication is used, this is the account used to run the hosting application.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Develop a WCF Data Service Running on IIS<ept id="p1">](../../../../docs/framework/data/wcf/how-to-develop-a-wcf-data-service-running-on-iis.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When impersonation is used, authenticated users must be granted access to these resources, usually as part of a Windows group.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Other Security Considerations</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Secure the Data in the Payload</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>OData is based on the HTTP protocol.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In an HTTP message, the header may contain valuable user credentials, depending on the authentication implemented by the data service.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The message body may also contain valuable customer data that must be protected.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In both of these cases, we recommend that you use SSL to protect this information over the wire.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Ignored Message Headers and Cookies</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>HTTP request headers, other than those that declare content types and resource locations, are ignored and are never set by the data service.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Cookies can be used as part of an authentication scheme, such as with ASP.NET Forms Authentication.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>However, any HTTP cookies set on an incoming request are ignored by WCF DataServices.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The host of a data service may process the cookie, but the WCF Data Services runtime never analyzes or returns cookies.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The WCF Data Services client library also does not process cookies sent in the response.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Custom Hosting Requirements</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>By default, WCF Data Services is created as an ASP.NET application hosted in IIS.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This enables the data service to leverage the secure behaviors of this platform.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can define WCF Data Services that are hosted by a custom host.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting the Data Service<ept id="p1">](../../../../docs/framework/data/wcf/hosting-the-data-service-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The components and platform hosting a data service must ensure the following security behaviors to prevent attacks on the data service:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Limit the length of the URI accepted in a data service request for all possible operations.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Limit the size of both incoming and outgoing HTTP messages.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Limit the total number of outstanding requests at any given time.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Limit the size of HTTP headers and their values, and provide WCF Data Services access to header data.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Detect and counter known attacks, such as TCP SYN and message replay attacks.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Values Are Not Further Encoded</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Property values sent to the data service are not further encoded by the WCF Data Services runtime.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, when a string property of an entity contains formatted HTML content, the tags are not HTML encoded by the data service.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The data service also does not further encode property values in the response.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The client library also does not perform any additional encoding.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Considerations for Client Applications</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The following security considerations apply to applications that use the WCF Data Services client to access OData services:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The client library assumes that the protocols used to access the data service provide an appropriate level of security.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The client library uses all the default values for timeouts and parsing options of the underlying platform-provided transport stacks.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The client library does not read any settings from application configuration files.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The client library does not implement any cross domain access mechanisms.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Instead, it relies on the mechanisms provided by the underlying HTTP stack.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The client library has no user interface elements, and it never tries to display or render the data that it receives or sends.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>We recommend that client applications always validate user input as well as data accepted from untrusted services.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Defining WCF Data Services<ept id="p1">](../../../../docs/framework/data/wcf/defining-wcf-data-services.md)</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WCF Data Services Client Library<ept id="p1">](../../../../docs/framework/data/wcf/wcf-data-services-client-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>