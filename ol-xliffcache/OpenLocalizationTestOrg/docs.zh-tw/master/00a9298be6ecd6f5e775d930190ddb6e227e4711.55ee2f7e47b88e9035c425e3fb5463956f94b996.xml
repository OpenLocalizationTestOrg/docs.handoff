{"content":"---\ntitle: \"#elif - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"#elif\"\nhelpviewer_keywords: \n  - \"#elif directive [C#]\"\nms.assetid: 731d78df-08e0-4d51-b8c8-f193c27de13f\n---\n# #elif (C# Reference)\n`#elif` lets you create a compound conditional directive. The `#elif` expression will be evaluated if neither the preceding [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md) nor any preceding, optional, `#elif` directive expressions evaluate to `true`. If a `#elif` expression evaluates to `true`, the compiler evaluates all the code between the `#elif` and the next conditional directive. For example:  \n  \n```csharp\n#define VC7  \n//...  \n#if debug  \n    Console.WriteLine(\"Debug build\");  \n#elif VC7  \n    Console.WriteLine(\"Visual Studio 7\");  \n#endif  \n```  \n  \n You can use the operators `==` (equality), `!=` (inequality), `&&` (and), and `||` (or), to evaluate multiple symbols. You can also group symbols and operators with parentheses.  \n  \n## Remarks  \n `#elif` is equivalent to using:  \n  \n```csharp\n#else  \n#if  \n```  \n  \n Using `#elif` is simpler, because each `#if` requires a [#endif](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md), whereas a `#elif` can be used without a matching `#endif`.  \n  \n See [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md) for an example of how to use `#elif`.  \n  \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Preprocessor Directives](../../../csharp/language-reference/preprocessor-directives/index.md)\n","nodes":[{"pos":[4,198],"embed":true,"restype":"x-metadata","content":"title: \"#elif - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"#elif\"\nhelpviewer_keywords: \n  - \"#elif directive [C#]\"\nms.assetid: 731d78df-08e0-4d51-b8c8-f193c27de13f","nodes":[{"content":"#elif - C# Reference","nodes":[{"pos":[1,20],"content":"elif - C# Reference","linkify":"elif - C# Reference","nodes":[{"content":"elif - C# Reference","pos":[0,19]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[205,225],"content":"#elif (C# Reference)","linkify":"#elif (C# Reference)","nodes":[{"content":"#elif (C# Reference)","pos":[0,20]}]},{"content":"<ph id=\"ph1\">`#elif`</ph> lets you create a compound conditional directive.","pos":[226,283],"source":"`#elif` lets you create a compound conditional directive."},{"content":"The <ph id=\"ph1\">`#elif`</ph> expression will be evaluated if neither the preceding <bpt id=\"p1\">[</bpt>#if<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept> nor any preceding, optional, <ph id=\"ph2\">`#elif`</ph> directive expressions evaluate to <ph id=\"ph3\">`true`</ph>.","pos":[284,513],"source":" The `#elif` expression will be evaluated if neither the preceding [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md) nor any preceding, optional, `#elif` directive expressions evaluate to `true`."},{"content":"If a <ph id=\"ph1\">`#elif`</ph> expression evaluates to <ph id=\"ph2\">`true`</ph>, the compiler evaluates all the code between the <ph id=\"ph3\">`#elif`</ph> and the next conditional directive.","pos":[514,650],"source":" If a `#elif` expression evaluates to `true`, the compiler evaluates all the code between the `#elif` and the next conditional directive."},{"content":"For example:","pos":[651,663]},{"content":"You can use the operators <ph id=\"ph1\">`==`</ph> (equality), <ph id=\"ph2\">`!=`</ph> (inequality), <ph id=\"ph3\">`&amp;&amp;`</ph> (and), and <ph id=\"ph4\">`||`</ph> (or), to evaluate multiple symbols.","pos":[828,946],"source":"You can use the operators `==` (equality), `!=` (inequality), `&&` (and), and `||` (or), to evaluate multiple symbols."},{"content":"You can also group symbols and operators with parentheses.","pos":[947,1005]},{"pos":[1014,1021],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1025,1056],"content":"<ph id=\"ph1\">`#elif`</ph> is equivalent to using:","source":"`#elif` is equivalent to using:"},{"pos":[1096,1302],"content":"Using <ph id=\"ph1\">`#elif`</ph> is simpler, because each <ph id=\"ph2\">`#if`</ph> requires a <bpt id=\"p1\">[</bpt>#endif<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md)</ept>, whereas a <ph id=\"ph3\">`#elif`</ph> can be used without a matching <ph id=\"ph4\">`#endif`</ph>.","source":"Using `#elif` is simpler, because each `#if` requires a [#endif](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md), whereas a `#elif` can be used without a matching `#endif`."},{"pos":[1309,1435],"content":"See <bpt id=\"p1\">[</bpt>#if<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept> for an example of how to use <ph id=\"ph1\">`#elif`</ph>.","source":"See [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md) for an example of how to use `#elif`."},{"pos":[1444,1452],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1456,1515],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[1518,1584],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1587,1684],"content":"<bpt id=\"p1\">[</bpt>C# Preprocessor Directives<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/index.md)</ept>","source":"[C# Preprocessor Directives](../../../csharp/language-reference/preprocessor-directives/index.md)"}]}