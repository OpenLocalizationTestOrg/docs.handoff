<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-download-a-file-in-the-background.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af5a607b4800635d096e83b55a5bd5a912c8538d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\how-to-download-a-file-in-the-background.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f79b079a492df3c8002a05dbef48c37f633f1d1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9fe12a8fc1758cd1bc37614370302b224de3930</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Download a File in the Background</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Download a File in the Background</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Downloading a file is a common task, and it is often useful to run this potentially time-consuming operation on a separate thread.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to accomplish this task with very little code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to use a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to load an XML file from a URL.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When the user clicks the <bpt id="p1">**</bpt>Download<ept id="p1">**</ept> button, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler calls the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to start the download operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The button is disabled for the duration of the download, and then enabled when the download is complete.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> displays the contents of the file.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Downloading the file<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The file is downloaded on the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component's worker thread, which runs the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This thread starts when your code calls the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Waiting for a BackgroundWorker to finish<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`downloadButton_Click`</ph> event handler demonstrates how to wait for a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to finish its asynchronous task.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you only want the application to respond to events and do not want to do any work in the main thread while you wait for the background thread to complete, just exit the handler.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you want to continue doing work in the main thread, use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph> property to determine whether the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> thread is still running.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the example, a progress bar is updated while the download is processing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType&gt;</ph> method to keep the UI responsive.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Displaying the result<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`backgroundWorker1_RunWorkerCompleted`</ph> method handles the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event and is called when the background operation is completed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This method first checks the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">`null`</ph>, then this method displays the contents of the file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It then enables the download button, which was disabled when the download began, and it resets the progress bar.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This example requires:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>References to the System.Drawing, System.Windows.Forms, and System.Xml assemblies.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For information about building this example from the command line for Visual Basic or Visual C#, see <bpt id="p1">[</bpt>Building from the Command Line<ept id="p1">](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept> or <bpt id="p2">[</bpt>Command-line Building With csc.exe<ept id="p2">](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also build this example in Visual Studio by pasting the code into a new project.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Always check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> property in your <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler before attempting to access the <ph id="ph3">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property or any other object that may have been affected by the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](how-to-run-an-operation-in-the-background.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id="p1">](how-to-implement-a-form-that-uses-a-background-operation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>