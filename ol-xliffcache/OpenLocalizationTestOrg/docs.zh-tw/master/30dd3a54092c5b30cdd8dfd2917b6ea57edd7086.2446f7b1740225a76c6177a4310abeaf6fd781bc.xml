{"content":"---\ntitle: \"Local Transactions\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 8ae3712f-ef5e-41a1-9ea9-b3d0399439f1\n---\n# Local Transactions\nTransactions in [!INCLUDE[vstecado](../../../../includes/vstecado-md.md)] are used when you want to bind multiple tasks together so that they execute as a single unit of work. For example, imagine that an application performs two tasks. First, it updates a table with order information. Second, it updates a table that contains inventory information, debiting the items ordered. If either task fails, then both updates are rolled back.  \n  \n## Determining the Transaction Type  \n A transaction is considered to be a local transaction when it is a single-phase transaction and is handled by the database directly. A transaction is considered to be a distributed transaction when it is coordinated by a transaction monitor and uses fail-safe mechanisms (such as two-phase commit) for transaction resolution.  \n  \n Each of the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] data providers has its own `Transaction` object for performing local transactions. If you require a transaction to be performed in a SQL Server database, select a <xref:System.Data.SqlClient> transaction. For an Oracle transaction, use the <xref:System.Data.OracleClient> provider. In addition, there is a <xref:System.Data.Common.DbTransaction> class that is available for writing provider-independent code that requires transactions.  \n  \n> [!NOTE]\n> Transactions are most efficient when they are performed on the server. If you are working with a SQL Server database that makes extensive use of explicit transactions, consider writing them as stored procedures using the Transact-SQL BEGIN TRANSACTION statement.\n  \n## Performing a Transaction Using a Single Connection  \n In [!INCLUDE[vstecado](../../../../includes/vstecado-md.md)], you control transactions with the `Connection` object. You can initiate a local transaction with the `BeginTransaction` method. Once you have begun a transaction, you can enlist a command in that transaction with the `Transaction` property of a `Command` object. You can then commit or roll back modifications made at the data source based on the success or failure of the components of the transaction.  \n  \n> [!NOTE]\n>  The `EnlistDistributedTransaction` method should not be used for a local transaction.  \n  \n The scope of the transaction is limited to the connection. The following example performs an explicit transaction that consists of two separate commands in the `try` block. The commands execute INSERT statements against the Production.ScrapReason table in the AdventureWorks SQL Server sample database, which are committed if no exceptions are thrown. The code in the `catch` block rolls back the transaction if an exception is thrown. If the transaction is aborted or the connection is closed before the transaction has completed, it is automatically rolled back.  \n  \n## Example  \n Follow these steps to perform a transaction.  \n  \n1.  Call the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method of the <xref:System.Data.SqlClient.SqlConnection> object to mark the start of the transaction. The <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method returns a reference to the transaction. This reference is assigned to the <xref:System.Data.SqlClient.SqlCommand> objects that are enlisted in the transaction.  \n  \n2.  Assign the `Transaction` object to the <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> property of the <xref:System.Data.SqlClient.SqlCommand> to be executed. If a command is executed on a connection with an active transaction, and the `Transaction` object has not been assigned to the `Transaction` property of the `Command` object, an exception is thrown.  \n  \n3.  Execute the required commands.  \n  \n4.  Call the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method of the <xref:System.Data.SqlClient.SqlTransaction> object to complete the transaction, or call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to end the transaction. If the connection is closed or disposed before either the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods have been executed, the transaction is rolled back.  \n  \n The following code example demonstrates transactional logic using [!INCLUDE[vstecado](../../../../includes/vstecado-md.md)] with Microsoft SQL Server.  \n  \n [!code-csharp[DataWorks SqlTransaction.Local#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlTransaction.Local/CS/source.cs#1)]\n [!code-vb[DataWorks SqlTransaction.Local#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlTransaction.Local/VB/source.vb#1)]  \n  \n## See also\n\n- [Transactions and Concurrency](../../../../docs/framework/data/adonet/transactions-and-concurrency.md)\n- [Distributed Transactions](../../../../docs/framework/data/adonet/distributed-transactions.md)\n- [System.Transactions Integration with SQL Server](../../../../docs/framework/data/adonet/system-transactions-integration-with-sql-server.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,136],"embed":true,"restype":"x-metadata","content":"title: \"Local Transactions\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 8ae3712f-ef5e-41a1-9ea9-b3d0399439f1","nodes":[{"content":"Local Transactions","nodes":[{"pos":[0,18],"content":"Local Transactions","nodes":[{"content":"Local Transactions","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[143,161],"content":"Local Transactions","linkify":"Local Transactions","nodes":[{"content":"Local Transactions","pos":[0,18]}]},{"content":"Transactions in <ph id=\"ph1\">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph> are used when you want to bind multiple tasks together so that they execute as a single unit of work.","pos":[162,337],"source":"Transactions in [!INCLUDE[vstecado](../../../../includes/vstecado-md.md)] are used when you want to bind multiple tasks together so that they execute as a single unit of work."},{"content":"For example, imagine that an application performs two tasks.","pos":[338,398]},{"content":"First, it updates a table with order information.","pos":[399,448]},{"content":"Second, it updates a table that contains inventory information, debiting the items ordered.","pos":[449,540]},{"content":"If either task fails, then both updates are rolled back.","pos":[541,597]},{"pos":[606,638],"content":"Determining the Transaction Type","linkify":"Determining the Transaction Type","nodes":[{"content":"Determining the Transaction Type","pos":[0,32]}]},{"content":"A transaction is considered to be a local transaction when it is a single-phase transaction and is handled by the database directly.","pos":[642,774]},{"content":"A transaction is considered to be a distributed transaction when it is coordinated by a transaction monitor and uses fail-safe mechanisms (such as two-phase commit) for transaction resolution.","pos":[775,967]},{"content":"Each of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> data providers has its own <ph id=\"ph2\">`Transaction`</ph> object for performing local transactions.","pos":[974,1132],"source":"Each of the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] data providers has its own `Transaction` object for performing local transactions."},{"content":"If you require a transaction to be performed in a SQL Server database, select a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient&gt;</ph> transaction.","pos":[1133,1254],"source":" If you require a transaction to be performed in a SQL Server database, select a <xref:System.Data.SqlClient> transaction."},{"content":"For an Oracle transaction, use the <ph id=\"ph1\">&lt;xref:System.Data.OracleClient&gt;</ph> provider.","pos":[1255,1331],"source":" For an Oracle transaction, use the <xref:System.Data.OracleClient> provider."},{"content":"In addition, there is a <ph id=\"ph1\">&lt;xref:System.Data.Common.DbTransaction&gt;</ph> class that is available for writing provider-independent code that requires transactions.","pos":[1332,1485],"source":" In addition, there is a <xref:System.Data.Common.DbTransaction> class that is available for writing provider-independent code that requires transactions."},{"pos":[1493,1765],"content":"[!NOTE]\nTransactions are most efficient when they are performed on the server. If you are working with a SQL Server database that makes extensive use of explicit transactions, consider writing them as stored procedures using the Transact-SQL BEGIN TRANSACTION statement.","leadings":["","> "],"nodes":[{"content":"Transactions are most efficient when they are performed on the server. If you are working with a SQL Server database that makes extensive use of explicit transactions, consider writing them as stored procedures using the Transact-SQL BEGIN TRANSACTION statement.","pos":[8,270],"nodes":[{"content":"Transactions are most efficient when they are performed on the server.","pos":[0,70]},{"content":"If you are working with a SQL Server database that makes extensive use of explicit transactions, consider writing them as stored procedures using the Transact-SQL BEGIN TRANSACTION statement.","pos":[71,262]}]}]},{"pos":[1772,1822],"content":"Performing a Transaction Using a Single Connection","linkify":"Performing a Transaction Using a Single Connection","nodes":[{"content":"Performing a Transaction Using a Single Connection","pos":[0,50]}]},{"content":"In <ph id=\"ph1\">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph>, you control transactions with the <ph id=\"ph2\">`Connection`</ph> object.","pos":[1826,1942],"source":"In [!INCLUDE[vstecado](../../../../includes/vstecado-md.md)], you control transactions with the `Connection` object."},{"content":"You can initiate a local transaction with the <ph id=\"ph1\">`BeginTransaction`</ph> method.","pos":[1943,2015],"source":" You can initiate a local transaction with the `BeginTransaction` method."},{"content":"Once you have begun a transaction, you can enlist a command in that transaction with the <ph id=\"ph1\">`Transaction`</ph> property of a <ph id=\"ph2\">`Command`</ph> object.","pos":[2016,2150],"source":" Once you have begun a transaction, you can enlist a command in that transaction with the `Transaction` property of a `Command` object."},{"content":"You can then commit or roll back modifications made at the data source based on the success or failure of the components of the transaction.","pos":[2151,2291]},{"pos":[2299,2395],"content":"[!NOTE]\n The `EnlistDistributedTransaction` method should not be used for a local transaction.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`EnlistDistributedTransaction`</ph> method should not be used for a local transaction.","pos":[9,94],"source":"The `EnlistDistributedTransaction` method should not be used for a local transaction."}]},{"content":"The scope of the transaction is limited to the connection.","pos":[2402,2460]},{"content":"The following example performs an explicit transaction that consists of two separate commands in the <ph id=\"ph1\">`try`</ph> block.","pos":[2461,2574],"source":" The following example performs an explicit transaction that consists of two separate commands in the `try` block."},{"content":"The commands execute INSERT statements against the Production.ScrapReason table in the AdventureWorks SQL Server sample database, which are committed if no exceptions are thrown.","pos":[2575,2753]},{"content":"The code in the <ph id=\"ph1\">`catch`</ph> block rolls back the transaction if an exception is thrown.","pos":[2754,2837],"source":" The code in the `catch` block rolls back the transaction if an exception is thrown."},{"content":"If the transaction is aborted or the connection is closed before the transaction has completed, it is automatically rolled back.","pos":[2838,2966]},{"pos":[2975,2982],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Follow these steps to perform a transaction.","pos":[2986,3030]},{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object to mark the start of the transaction.","pos":[3040,3213],"source":"Call the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method of the <xref:System.Data.SqlClient.SqlConnection> object to mark the start of the transaction."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph> method returns a reference to the transaction.","pos":[3214,3327],"source":" The <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method returns a reference to the transaction."},{"content":"This reference is assigned to the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> objects that are enlisted in the transaction.","pos":[3328,3447],"source":" This reference is assigned to the <xref:System.Data.SqlClient.SqlCommand> objects that are enlisted in the transaction."},{"content":"Assign the <ph id=\"ph1\">`Transaction`</ph> object to the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlCommand.Transaction%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> to be executed.","pos":[3457,3622],"source":"Assign the `Transaction` object to the <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> property of the <xref:System.Data.SqlClient.SqlCommand> to be executed."},{"content":"If a command is executed on a connection with an active transaction, and the <ph id=\"ph1\">`Transaction`</ph> object has not been assigned to the <ph id=\"ph2\">`Transaction`</ph> property of the <ph id=\"ph3\">`Command`</ph> object, an exception is thrown.","pos":[3623,3821],"source":" If a command is executed on a connection with an active transaction, and the `Transaction` object has not been assigned to the `Transaction` property of the `Command` object, an exception is thrown."},{"content":"Execute the required commands.","pos":[3831,3861]},{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph> object to complete the transaction, or call the <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> method to end the transaction.","pos":[3871,4126],"source":"Call the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method of the <xref:System.Data.SqlClient.SqlTransaction> object to complete the transaction, or call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to end the transaction."},{"content":"If the connection is closed or disposed before either the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> methods have been executed, the transaction is rolled back.","pos":[4127,4357],"source":" If the connection is closed or disposed before either the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods have been executed, the transaction is rolled back."},{"pos":[4364,4514],"content":"The following code example demonstrates transactional logic using <ph id=\"ph1\">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph> with Microsoft SQL Server.","source":"The following code example demonstrates transactional logic using [!INCLUDE[vstecado](../../../../includes/vstecado-md.md)] with Microsoft SQL Server."},{"pos":[4521,4826],"content":"[!code-csharp[DataWorks SqlTransaction.Local#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlTransaction.Local/CS/source.cs#1)]\n[!code-vb[DataWorks SqlTransaction.Local#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlTransaction.Local/VB/source.vb#1)]","leadings":[""," "],"nodes":[]},{"pos":[4835,4843],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4847,4949],"content":"<bpt id=\"p1\">[</bpt>Transactions and Concurrency<ept id=\"p1\">](../../../../docs/framework/data/adonet/transactions-and-concurrency.md)</ept>","source":"[Transactions and Concurrency](../../../../docs/framework/data/adonet/transactions-and-concurrency.md)"},{"pos":[4952,5046],"content":"<bpt id=\"p1\">[</bpt>Distributed Transactions<ept id=\"p1\">](../../../../docs/framework/data/adonet/distributed-transactions.md)</ept>","source":"[Distributed Transactions](../../../../docs/framework/data/adonet/distributed-transactions.md)"},{"pos":[5049,5189],"content":"<bpt id=\"p1\">[</bpt>System.Transactions Integration with SQL Server<ept id=\"p1\">](../../../../docs/framework/data/adonet/system-transactions-integration-with-sql-server.md)</ept>","source":"[System.Transactions Integration with SQL Server](../../../../docs/framework/data/adonet/system-transactions-integration-with-sql-server.md)"},{"pos":[5192,5296],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}