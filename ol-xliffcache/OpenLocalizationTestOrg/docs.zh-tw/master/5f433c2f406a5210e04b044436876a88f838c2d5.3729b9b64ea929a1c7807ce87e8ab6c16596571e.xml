{"content":"---\ntitle: \"Sequence Operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 4d332d32-3806-4451-b7af-25af269194ae\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Sequence Operators\nGenerally speaking, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] does not support sequence operators that have one or more of the following qualities:  \n  \n-   Take a lambda with an index parameter.  \n  \n-   Rely on the properties of sequential rows, such as <xref:System.Linq.Queryable.TakeWhile%2A>.  \n  \n-   Rely on an arbitrary CLR implementation, such as <xref:System.Collections.Generic.IComparer%601>.  \n  \n|Examples of Unsupported|  \n|-----------------------------|  \n|<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Reverse%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.ElementAt%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Int32%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.ElementAtOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Int32%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Range%28System.Int32%2CSystem.Int32%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Repeat%60%601%28%60%600%2CSystem.Int32%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Empty%60%601?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29?displayProperty=fullName>|  \n|<xref:System.Linq.Enumerable.SequenceEqual%2A?displayProperty=fullName>|  \n  \n## Differences from .NET  \n All supported sequence operators work as expected in the common language runtime (CLR) except for `Average`. `Average` returns a value of the same type as the type being averaged, whereas in the CLR `Average` always returns either a <xref:System.Double> or a <xref:System.Decimal>. If the source argument is explicitly cast to double / decimal or the selector casts to double / decimal, the resulting SQL will also have such a conversion and the result will be as expected.  \n  \n## See Also  \n [Data Types and Functions](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)","nodes":[{"pos":[12,47],"content":"Sequence Operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Sequence Operators | Microsoft Docs","pos":[0,35]}]},{"pos":[356,374],"content":"Sequence Operators","linkify":"Sequence Operators","nodes":[{"content":"Sequence Operators","pos":[0,18]}]},{"pos":[375,548],"content":"Generally speaking, <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not support sequence operators that have one or more of the following qualities:","source":"Generally speaking, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] does not support sequence operators that have one or more of the following qualities:"},{"content":"Take a lambda with an index parameter.","pos":[558,596]},{"content":"Rely on the properties of sequential rows, such as <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.TakeWhile%2A&gt;</ph>.","pos":[606,699],"source":"Rely on the properties of sequential rows, such as <xref:System.Linq.Queryable.TakeWhile%2A>."},{"content":"Rely on an arbitrary CLR implementation, such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>.","pos":[709,806],"source":"Rely on an arbitrary CLR implementation, such as <xref:System.Collections.Generic.IComparer%601>."},{"content":"Examples of Unsupported","pos":[813,836]},{"pos":[4431,4452],"content":"Differences from .NET","linkify":"Differences from .NET","nodes":[{"content":"Differences from .NET","pos":[0,21]}]},{"content":"All supported sequence operators work as expected in the common language runtime (CLR) except for <ph id=\"ph1\">`Average`</ph>.","pos":[4456,4564],"source":"All supported sequence operators work as expected in the common language runtime (CLR) except for `Average`."},{"content":"<ph id=\"ph1\">`Average`</ph> returns a value of the same type as the type being averaged, whereas in the CLR <ph id=\"ph2\">`Average`</ph> always returns either a <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph> or a <ph id=\"ph4\">&lt;xref:System.Decimal&gt;</ph>.","pos":[4565,4737],"source":"`Average` returns a value of the same type as the type being averaged, whereas in the CLR `Average` always returns either a <xref:System.Double> or a <xref:System.Decimal>."},{"content":"If the source argument is explicitly cast to double / decimal or the selector casts to double / decimal, the resulting SQL will also have such a conversion and the result will be as expected.","pos":[4738,4929]},{"pos":[4938,4946],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4950,5059],"content":"<bpt id=\"p1\">[</bpt>Data Types and Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)</ept>","source":"[Data Types and Functions](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)"}]}