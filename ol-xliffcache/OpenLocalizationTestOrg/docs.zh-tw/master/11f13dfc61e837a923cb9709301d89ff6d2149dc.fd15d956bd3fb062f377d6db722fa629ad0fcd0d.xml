{"content":"---\ntitle: \"How to: Find Descendants with a Specific Element Name (C#)\"\nms.date: 07/20/2015\nms.assetid: f684da20-bee9-47f5-9607-7e3fd7e67470\n---\n# How to: Find Descendants with a Specific Element Name (C#)\nSometimes you want to find all descendants with a particular name. You could write code to iterate through all of the descendants, but it is easier to use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis.  \n  \n## Example  \n The following example shows how to find descendants based on the element name.  \n  \n```csharp  \nXElement root = XElement.Parse(@\"<root>  \n  <para>  \n    <r>  \n      <t>Some text </t>  \n    </r>  \n    <n>  \n      <r>  \n        <t>that is broken up into </t>  \n      </r>  \n    </n>  \n    <n>  \n      <r>  \n        <t>multiple segments.</t>  \n      </r>  \n    </n>  \n  </para>  \n</root>\");  \nIEnumerable<string> textSegs =  \n    from seg in root.Descendants(\"t\")  \n    select (string)seg;  \n  \nstring str = textSegs.Aggregate(new StringBuilder(),  \n    (sb, i) => sb.Append(i),  \n    sp => sp.ToString()  \n);  \n  \nConsole.WriteLine(str);  \n```  \n  \n This code produces the following output:  \n  \n```  \nSome text that is broken up into multiple segments.  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```csharp  \nXElement root = XElement.Parse(@\"<root xmlns='http://www.adatum.com'>  \n  <para>  \n    <r>  \n      <t>Some text </t>  \n    </r>  \n    <n>  \n      <r>  \n        <t>that is broken up into </t>  \n      </r>  \n    </n>  \n    <n>  \n      <r>  \n        <t>multiple segments.</t>  \n      </r>  \n    </n>  \n  </para>  \n</root>\");  \nXNamespace ad = \"http://www.adatum.com\";  \nIEnumerable<string> textSegs =  \n    from seg in root.Descendants(ad + \"t\")  \n    select (string)seg;  \n  \nstring str = textSegs.Aggregate(new StringBuilder(),  \n    (sb, i) => sb.Append(i),  \n    sp => sp.ToString()  \n);  \n  \nConsole.WriteLine(str);  \n```  \n  \n This code produces the following output:  \n  \n```  \nSome text that is broken up into multiple segments.  \n```  \n  \n## See also\n\n- <xref:System.Xml.Linq.XContainer.Descendants%2A>\n- [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)\n","nodes":[{"pos":[4,140],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find Descendants with a Specific Element Name (C#)\"\nms.date: 07/20/2015\nms.assetid: f684da20-bee9-47f5-9607-7e3fd7e67470","nodes":[{"content":"How to: Find Descendants with a Specific Element Name (C#)","nodes":[{"pos":[0,58],"content":"How to: Find Descendants with a Specific Element Name (C#)","nodes":[{"content":"How to: Find Descendants with a Specific Element Name (C#)","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[147,205],"content":"How to: Find Descendants with a Specific Element Name (C#)","linkify":"How to: Find Descendants with a Specific Element Name (C#)","nodes":[{"content":"How to: Find Descendants with a Specific Element Name (C#)","pos":[0,58]}]},{"content":"Sometimes you want to find all descendants with a particular name.","pos":[206,272]},{"content":"You could write code to iterate through all of the descendants, but it is easier to use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis.","pos":[273,419],"source":" You could write code to iterate through all of the descendants, but it is easier to use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis."},{"pos":[428,435],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to find descendants based on the element name.","pos":[439,517]},{"content":"This code produces the following output:","pos":[1087,1127]},{"pos":[1205,1212],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1216,1290]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1291,1435],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[2083,2123]},{"pos":[2201,2209],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2264,2379],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}