{"content":"---\ntitle: \"&amp;= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.&=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"operator &=\"\n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"&= operator [Visual Basic]\"\n  - \"compound assignment statements\"\nms.assetid: 0cf262fc-1a05-419a-a503-60013f111c8a\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &amp;= Operator (Visual Basic)\nConcatenates a `String` expression to a `String` variable or property and assigns the result to the variable or property.  \n  \n## Syntax  \n  \n```  \n  \nvariableorproperty &= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any `String` variable or property.  \n  \n `expression`  \n Required. Any `String` expression.  \n  \n## Remarks  \n The element on the left side of the `&=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md). The `&=` operator concatenates the `String` expression on its right to the `String` variable or property on its left, and assigns the result to the variable or property on its left.  \n  \n## Overloading  \n The [& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `&` operator affects the behavior of the `&=` operator. If your code uses `&=` on a class or structure that overloads `&`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `&=` operator to concatenate two `String` variables and assign the result to the first variable.  \n  \n [!code-vb[VbVbalrOperators#3](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/and-assignment-operator_1.vb)]  \n  \n## See Also  \n [& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md)   \n [+= Operator](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)   \n [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)   \n [Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)","nodes":[{"pos":[4,739],"embed":true,"restype":"x-metadata","content":"title: \"&amp;= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.&=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"operator &=\"\n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"&= operator [Visual Basic]\"\n  - \"compound assignment statements\"\nms.assetid: 0cf262fc-1a05-419a-a503-60013f111c8a\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"&amp;= Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"&amp;= Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph>= Operator (Visual Basic) | Microsoft Docs","pos":[0,47],"source":"&amp;= Operator (Visual Basic) | Microsoft Docs"}]}],"path":["title"]}],"yml":true},{"pos":[746,776],"content":"&amp;= Operator (Visual Basic)","linkify":"&amp;= Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph>= Operator (Visual Basic)","pos":[0,30],"source":"&amp;= Operator (Visual Basic)"}]},{"pos":[777,898],"content":"Concatenates a <ph id=\"ph1\">`String`</ph> expression to a <ph id=\"ph2\">`String`</ph> variable or property and assigns the result to the variable or property.","source":"Concatenates a `String` expression to a `String` variable or property and assigns the result to the variable or property."},{"pos":[907,913],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[975,980],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1008,1017]},{"content":"Any <ph id=\"ph1\">`String`</ph> variable or property.","pos":[1018,1052],"source":" Any `String` variable or property."},{"content":"Required.","pos":[1075,1084]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression.","pos":[1085,1109],"source":" Any `String` expression."},{"pos":[1118,1125],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`&amp;=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[1129,1250],"source":"The element on the left side of the `&=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[1251,1361],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`&amp;=`</ph> operator concatenates the <ph id=\"ph2\">`String`</ph> expression on its right to the <ph id=\"ph3\">`String`</ph> variable or property on its left, and assigns the result to the variable or property on its left.","pos":[1362,1543],"source":" The `&=` operator concatenates the `String` expression on its right to the `String` variable or property on its left, and assigns the result to the variable or property on its left."},{"pos":[1552,1563],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1567,1803],"source":"The [& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`&amp;`</ph> operator affects the behavior of the <ph id=\"ph2\">`&amp;=`</ph> operator.","pos":[1804,1875],"source":" Overloading the `&` operator affects the behavior of the `&=` operator."},{"content":"If your code uses <ph id=\"ph1\">`&amp;=`</ph> on a class or structure that overloads <ph id=\"ph2\">`&amp;`</ph>, be sure you understand its redefined behavior.","pos":[1876,1989],"source":" If your code uses `&=` on a class or structure that overloads `&`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[1990,2131],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2140,2147],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2151,2278],"content":"The following example uses the <ph id=\"ph1\">`&amp;=`</ph> operator to concatenate two <ph id=\"ph2\">`String`</ph> variables and assign the result to the first variable.","source":"The following example uses the `&=` operator to concatenate two `String` variables and assign the result to the first variable."},{"pos":[2429,2437],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2441,2532],"source":"[& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>+= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2536,2634],"source":"[+= Operator](../../../visual-basic/language-reference/operators/addition-assignment-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2638,2737],"source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2741,2846],"source":"[Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[2850,2963],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[2967,3092],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","pos":[3096,3181],"source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}