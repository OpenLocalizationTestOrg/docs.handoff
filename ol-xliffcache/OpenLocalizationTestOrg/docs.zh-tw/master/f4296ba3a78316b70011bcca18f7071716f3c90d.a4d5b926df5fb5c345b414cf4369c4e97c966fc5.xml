{"content":"---\ntitle: \"How to: Define Multiple Versions of a Procedure (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"procedures, defining\"\n  - \"Visual Basic code, procedures\"\n  - \"procedures, overloading\"\n  - \"procedures, multiple versions\"\n  - \"procedure overloading, multiple versions\"\nms.assetid: 71ccdd66-1b00-4b66-bee4-6926c0d696f4\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Define Multiple Versions of a Procedure (Visual Basic)\nYou can define a procedure in multiple versions by *overloading* it, using the same name but a different parameter list for each version. The purpose of overloading is to define several closely related versions of a procedure without having to differentiate them by name.  \n  \n For more information, see [Procedure Overloading](./procedure-overloading.md).  \n  \n### To define multiple versions of a procedure  \n  \n1.  Write a `Sub` or `Function` declaration statement for each version of the procedure you want to define. Use the same procedure name in every declaration.  \n  \n2.  Precede the `Sub` or `Function` keyword in each declaration with the [Overloads](../../../../visual-basic/language-reference/modifiers/overloads.md) keyword. You can optionally omit `Overloads` in the declarations, but if you include it in any of the declarations, you must include it in every declaration.  \n  \n3.  Following each declaration statement, write procedure code to handle the specific case where the calling code supplies arguments matching that version's parameter list. You do not have to test for which parameters the calling code has supplied. [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] passes control to the matching version of your procedure.  \n  \n4.  Terminate each version of the procedure with the `End Sub` or `End Function` statement as appropriate.  \n  \n## Example  \n The following example defines a `Sub` procedure to post a transaction against a customer's balance. It uses the `Overloads` keyword to define two versions of the procedure, one that accepts the customer by name and the other by account number.  \n  \n [!code-vb[VbVbcnProcedures#72](./codesnippet/VisualBasic/how-to-define-multiple-versions-of-a-procedure_1.vb)]  \n  \n The calling code can obtain the customer identification as either a `String` or an `Integer`, and then use the same calling statement in either case.  \n  \n For information on how to call these versions of the `post` procedure, see [How to: Call an Overloaded Procedure](./how-to-call-an-overloaded-procedure.md).  \n  \n## Compiling the Code  \n Make sure each of your overloaded versions has the same procedure name but a different parameter list.  \n  \n## See Also  \n [Procedures](./index.md)   \n [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)   \n [Troubleshooting Procedures](./troubleshooting-procedures.md)   \n [How to: Overload a Procedure that Takes Optional Parameters](./how-to-overload-a-procedure-that-takes-optional-parameters.md)   \n [How to: Overload a Procedure that Takes an Indefinite Number of Parameters](./how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters.md)   \n [Considerations in Overloading Procedures](./considerations-in-overloading-procedures.md)   \n [Overload Resolution](./overload-resolution.md)","nodes":[{"pos":[4,755],"embed":true,"restype":"x-metadata","content":"title: \"How to: Define Multiple Versions of a Procedure (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"procedures, defining\"\n  - \"Visual Basic code, procedures\"\n  - \"procedures, overloading\"\n  - \"procedures, multiple versions\"\n  - \"procedure overloading, multiple versions\"\nms.assetid: 71ccdd66-1b00-4b66-bee4-6926c0d696f4\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Define Multiple Versions of a Procedure (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,79],"content":"How to: Define Multiple Versions of a Procedure (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Define Multiple Versions of a Procedure (Visual Basic) | Microsoft Docs","pos":[0,79]}]}],"path":["title"]}],"yml":true},{"pos":[762,824],"content":"How to: Define Multiple Versions of a Procedure (Visual Basic)","linkify":"How to: Define Multiple Versions of a Procedure (Visual Basic)","nodes":[{"content":"How to: Define Multiple Versions of a Procedure (Visual Basic)","pos":[0,62]}]},{"content":"You can define a procedure in multiple versions by <bpt id=\"p1\">*</bpt>overloading<ept id=\"p1\">*</ept> it, using the same name but a different parameter list for each version.","pos":[825,962],"source":"You can define a procedure in multiple versions by *overloading* it, using the same name but a different parameter list for each version."},{"content":"The purpose of overloading is to define several closely related versions of a procedure without having to differentiate them by name.","pos":[963,1096]},{"pos":[1103,1181],"content":"For more information, see <bpt id=\"p1\">[</bpt>Procedure Overloading<ept id=\"p1\">](./procedure-overloading.md)</ept>.","source":"For more information, see [Procedure Overloading](./procedure-overloading.md)."},{"pos":[1191,1233],"content":"To define multiple versions of a procedure","linkify":"To define multiple versions of a procedure","nodes":[{"content":"To define multiple versions of a procedure","pos":[0,42]}]},{"content":"Write a <ph id=\"ph1\">`Sub`</ph> or <ph id=\"ph2\">`Function`</ph> declaration statement for each version of the procedure you want to define.","pos":[1243,1346],"source":"Write a `Sub` or `Function` declaration statement for each version of the procedure you want to define."},{"content":"Use the same procedure name in every declaration.","pos":[1347,1396]},{"content":"Precede the <ph id=\"ph1\">`Sub`</ph> or <ph id=\"ph2\">`Function`</ph> keyword in each declaration with the <bpt id=\"p1\">[</bpt>Overloads<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/overloads.md)</ept> keyword.","pos":[1406,1563],"source":"Precede the `Sub` or `Function` keyword in each declaration with the [Overloads](../../../../visual-basic/language-reference/modifiers/overloads.md) keyword."},{"content":"You can optionally omit <ph id=\"ph1\">`Overloads`</ph> in the declarations, but if you include it in any of the declarations, you must include it in every declaration.","pos":[1564,1712],"source":" You can optionally omit `Overloads` in the declarations, but if you include it in any of the declarations, you must include it in every declaration."},{"content":"Following each declaration statement, write procedure code to handle the specific case where the calling code supplies arguments matching that version's parameter list.","pos":[1722,1890]},{"content":"You do not have to test for which parameters the calling code has supplied.","pos":[1891,1966]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> passes control to the matching version of your procedure.","pos":[1967,2117],"source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] passes control to the matching version of your procedure."},{"pos":[2127,2229],"content":"Terminate each version of the procedure with the <ph id=\"ph1\">`End Sub`</ph> or <ph id=\"ph2\">`End Function`</ph> statement as appropriate.","source":"Terminate each version of the procedure with the `End Sub` or `End Function` statement as appropriate."},{"pos":[2238,2245],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example defines a <ph id=\"ph1\">`Sub`</ph> procedure to post a transaction against a customer's balance.","pos":[2249,2348],"source":"The following example defines a `Sub` procedure to post a transaction against a customer's balance."},{"content":"It uses the <ph id=\"ph1\">`Overloads`</ph> keyword to define two versions of the procedure, one that accepts the customer by name and the other by account number.","pos":[2349,2492],"source":" It uses the `Overloads` keyword to define two versions of the procedure, one that accepts the customer by name and the other by account number."},{"pos":[2616,2765],"content":"The calling code can obtain the customer identification as either a <ph id=\"ph1\">`String`</ph> or an <ph id=\"ph2\">`Integer`</ph>, and then use the same calling statement in either case.","source":"The calling code can obtain the customer identification as either a `String` or an `Integer`, and then use the same calling statement in either case."},{"pos":[2772,2928],"content":"For information on how to call these versions of the <ph id=\"ph1\">`post`</ph> procedure, see <bpt id=\"p1\">[</bpt>How to: Call an Overloaded Procedure<ept id=\"p1\">](./how-to-call-an-overloaded-procedure.md)</ept>.","source":"For information on how to call these versions of the `post` procedure, see [How to: Call an Overloaded Procedure](./how-to-call-an-overloaded-procedure.md)."},{"pos":[2937,2955],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"Make sure each of your overloaded versions has the same procedure name but a different parameter list.","pos":[2959,3061]},{"pos":[3070,3078],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](./index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3082,3107],"source":"[Procedures](./index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](./procedure-parameters-and-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[3111,3189],"source":"[Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md) "},{"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Procedures<ept id=\"p1\">](./troubleshooting-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3193,3255],"source":"[Troubleshooting Procedures](./troubleshooting-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Overload a Procedure that Takes Optional Parameters<ept id=\"p1\">](./how-to-overload-a-procedure-that-takes-optional-parameters.md)</ept><ph id=\"ph1\"> </ph>","pos":[3259,3386],"source":"[How to: Overload a Procedure that Takes Optional Parameters](./how-to-overload-a-procedure-that-takes-optional-parameters.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Overload a Procedure that Takes an Indefinite Number of Parameters<ept id=\"p1\">](./how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters.md)</ept><ph id=\"ph1\"> </ph>","pos":[3390,3547],"source":"[How to: Overload a Procedure that Takes an Indefinite Number of Parameters](./how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters.md) "},{"content":"<bpt id=\"p1\">[</bpt>Considerations in Overloading Procedures<ept id=\"p1\">](./considerations-in-overloading-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3551,3641],"source":"[Considerations in Overloading Procedures](./considerations-in-overloading-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Overload Resolution<ept id=\"p1\">](./overload-resolution.md)</ept>","pos":[3645,3692],"source":"[Overload Resolution](./overload-resolution.md)"}]}