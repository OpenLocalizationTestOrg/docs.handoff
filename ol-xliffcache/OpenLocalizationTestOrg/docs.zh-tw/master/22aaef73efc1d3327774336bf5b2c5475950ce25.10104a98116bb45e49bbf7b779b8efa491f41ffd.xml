{"content":"---\ntitle: \"false Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"false operator keyword [C#]\"\nms.assetid: 81a888fd-011e-4589-b242-6c261fea505e\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# false Operator (C# Reference)\nReturns the [bool](../../../csharp/language-reference/keywords/bool.md) value `true` to indicate that an operand is `false` and returns `false` otherwise.  \n  \n Prior to C# 2.0, the `true` and `false` operators were used to create user-defined nullable value types that were compatible with types such as `SqlBool`. However, the language now provides built-in support for nullable value types, and whenever possible you should use those instead of overloading the `true` and `false` operators. For more information, see [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md).  \n  \n With nullable Booleans, the expression `a != b` is not necessarily equal to `!(a == b)` because one or both of the values might be null. You have to overload both the `true` and `false` operators separately to correctly handle the null values in the expression. The following example shows how to overload and use the `true` and `false` operators.  \n  \n [!code-cs[csrefKeywordsOperator#16](../../../csharp/language-reference/keywords/codesnippet/CSharp/false-operator_1.cs)]  \n  \n A type that overloads the `true` and `false` operators can be used for the controlling expression in [if](../../../csharp/language-reference/keywords/if-else.md), [do](../../../csharp/language-reference/keywords/do.md), [while](../../../csharp/language-reference/keywords/while.md), and [for](../../../csharp/language-reference/keywords/for.md) statements and in [conditional expressions](../../../csharp/language-reference/operators/conditional-operator.md).  \n  \n If a type defines operator `false`, it must also define operator [true](../../../csharp/language-reference/keywords/true.md).  \n  \n A type cannot directly overload the conditional logical operators [&&](../../../csharp/language-reference/operators/conditional-and-operator.md) and [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md), but an equivalent effect can be achieved by overloading the regular logical operators and operators `true` and `false`.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)   \n [true](../../../csharp/language-reference/keywords/true.md)","nodes":[{"pos":[4,530],"embed":true,"restype":"x-metadata","content":"title: \"false Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"false operator keyword [C#]\"\nms.assetid: 81a888fd-011e-4589-b242-6c261fea505e\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"false Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"false Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"false Operator (C# Reference) | Microsoft Docs","pos":[0,46]}]}],"path":["title"]}],"yml":true},{"pos":[537,566],"content":"false Operator (C# Reference)","linkify":"false Operator (C# Reference)","nodes":[{"content":"false Operator (C# Reference)","pos":[0,29]}]},{"pos":[567,721],"content":"Returns the <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../../../csharp/language-reference/keywords/bool.md)</ept> value <ph id=\"ph1\">`true`</ph> to indicate that an operand is <ph id=\"ph2\">`false`</ph> and returns <ph id=\"ph3\">`false`</ph> otherwise.","source":"Returns the [bool](../../../csharp/language-reference/keywords/bool.md) value `true` to indicate that an operand is `false` and returns `false` otherwise."},{"content":"Prior to C# 2.0, the <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operators were used to create user-defined nullable value types that were compatible with types such as <ph id=\"ph3\">`SqlBool`</ph>.","pos":[728,882],"source":"Prior to C# 2.0, the `true` and `false` operators were used to create user-defined nullable value types that were compatible with types such as `SqlBool`."},{"content":"However, the language now provides built-in support for nullable value types, and whenever possible you should use those instead of overloading the <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operators.","pos":[883,1060],"source":" However, the language now provides built-in support for nullable value types, and whenever possible you should use those instead of overloading the `true` and `false` operators."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept>.","pos":[1061,1163],"source":" For more information, see [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)."},{"content":"With nullable Booleans, the expression <ph id=\"ph1\">`a != b`</ph> is not necessarily equal to <ph id=\"ph2\">`!(a == b)`</ph> because one or both of the values might be null.","pos":[1170,1306],"source":"With nullable Booleans, the expression `a != b` is not necessarily equal to `!(a == b)` because one or both of the values might be null."},{"content":"You have to overload both the <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operators separately to correctly handle the null values in the expression.","pos":[1307,1431],"source":" You have to overload both the `true` and `false` operators separately to correctly handle the null values in the expression."},{"content":"The following example shows how to overload and use the <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operators.","pos":[1432,1517],"source":" The following example shows how to overload and use the `true` and `false` operators."},{"pos":[1651,2110],"content":"A type that overloads the <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operators can be used for the controlling expression in <bpt id=\"p1\">[</bpt>if<ept id=\"p1\">](../../../csharp/language-reference/keywords/if-else.md)</ept>, <bpt id=\"p2\">[</bpt>do<ept id=\"p2\">](../../../csharp/language-reference/keywords/do.md)</ept>, <bpt id=\"p3\">[</bpt>while<ept id=\"p3\">](../../../csharp/language-reference/keywords/while.md)</ept>, and <bpt id=\"p4\">[</bpt>for<ept id=\"p4\">](../../../csharp/language-reference/keywords/for.md)</ept> statements and in <bpt id=\"p5\">[</bpt>conditional expressions<ept id=\"p5\">](../../../csharp/language-reference/operators/conditional-operator.md)</ept>.","source":"A type that overloads the `true` and `false` operators can be used for the controlling expression in [if](../../../csharp/language-reference/keywords/if-else.md), [do](../../../csharp/language-reference/keywords/do.md), [while](../../../csharp/language-reference/keywords/while.md), and [for](../../../csharp/language-reference/keywords/for.md) statements and in [conditional expressions](../../../csharp/language-reference/operators/conditional-operator.md)."},{"pos":[2117,2242],"content":"If a type defines operator <ph id=\"ph1\">`false`</ph>, it must also define operator <bpt id=\"p1\">[</bpt>true<ept id=\"p1\">](../../../csharp/language-reference/keywords/true.md)</ept>.","source":"If a type defines operator `false`, it must also define operator [true](../../../csharp/language-reference/keywords/true.md)."},{"pos":[2249,2606],"content":"A type cannot directly overload the conditional logical operators <bpt id=\"p1\">[</bpt><ph id=\"ph1\">&amp;&amp;</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept> and <bpt id=\"p2\">[</bpt>&amp;#124;&amp;#124;<ept id=\"p2\">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept>, but an equivalent effect can be achieved by overloading the regular logical operators and operators <ph id=\"ph2\">`true`</ph> and <ph id=\"ph3\">`false`</ph>.","source":"A type cannot directly overload the conditional logical operators [&&](../../../csharp/language-reference/operators/conditional-and-operator.md) and [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md), but an equivalent effect can be achieved by overloading the regular logical operators and operators `true` and `false`."},{"pos":[2615,2640],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2754,2762],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2766,2826],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2830,2897],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2901,2969],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2973,3043],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>true<ept id=\"p1\">](../../../csharp/language-reference/keywords/true.md)</ept>","pos":[3047,3106],"source":"[true](../../../csharp/language-reference/keywords/true.md)"}]}