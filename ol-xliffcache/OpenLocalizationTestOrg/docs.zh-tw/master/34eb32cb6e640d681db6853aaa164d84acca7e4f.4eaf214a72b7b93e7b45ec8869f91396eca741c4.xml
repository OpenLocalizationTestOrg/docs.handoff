{"content":"---\ntitle: \"Conversions Between Strings and Other Types (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"data type conversion, string\"\n  - \"conversions, type\"\n  - \"string conversion\"\n  - \"conversions, data type\"\n  - \"type conversion, string\"\n  - \"regional options\"\nms.assetid: c3a99596-f09a-44a5-81dd-1b89a094f1df\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Conversions Between Strings and Other Types (Visual Basic)\nYou can convert a numeric, `Boolean`, or date/time value to a `String`. You can also convert in the reverse direction — from a string value to numeric, `Boolean`, or `Date` — provided the contents of the string can be interpreted as a valid value of the destination data type. If they cannot, a run-time error occurs.  \n  \n The conversions for all these assignments, in either direction, are narrowing conversions. You should use the type conversion keywords (`CBool`, `CByte`, `CDate`, `CDbl`, `CDec`, `CInt`, `CLng`, `CSByte`, `CShort`, `CSng`, `CStr`, `CUInt`, `CULng`, `CUShort`, and `CType`). The <xref:Microsoft.VisualBasic.Strings.Format%2A> and <xref:Microsoft.VisualBasic.Conversion.Val%2A> functions give you additional control over conversions between strings and numbers.  \n  \n If you have defined a class or structure, you can define type conversion operators between `String` and the type of your class or structure. For more information, see [How to: Define a Conversion Operator](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md).  \n  \n## Conversion of Numbers to Strings  \n You can use the `Format` function to convert a number to a formatted string, which can include not only the appropriate digits but also formatting symbols such as a currency sign (such as `$`), thousands separators or *digit grouping symbols* (such as `,`), and a decimal separator (such as `.`). `Format` automatically uses the appropriate symbols according to the **Regional Options** settings specified in the Windows **Control Panel**.  \n  \n Note that the concatenation (`&`) operator can convert a number to a string implicitly, as the following example shows.  \n  \n```  \n' The following statement converts count to a String value.  \nStr = \"The total count is \" & count  \n```  \n  \n## Conversion of Strings to Numbers  \n You can use the `Val` function to explicitly convert the digits in a string to a number. `Val` reads the string until it encounters a character other than a digit, space, tab, line feed, or period. The sequences \"&O\" and \"&H\" alter the base of the number system and terminate the scanning. Until it stops reading, `Val` converts all appropriate characters to a numeric value. For example, the following statement returns the value `141.825`.  \n  \n `Val(\"   14   1.825 miles\")`  \n  \n When [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] converts a string to a numeric value, it uses the **Regional Options** settings specified in the Windows **Control Panel** to interpret the thousands separator, decimal separator, and currency symbol. This means that a conversion might succeed under one setting but not another. For example, `\"$14.20\"` is acceptable in the English (United States) locale but not in any French locale.  \n  \n## See Also  \n [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)   \n [Widening and Narrowing Conversions](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)   \n [Implicit and Explicit Conversions](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)   \n [How to: Convert an Object to Another Type in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md)   \n [Array Conversions](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md)   \n [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Type Conversion Functions](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Introduction to International Applications Based on the .NET Framework](https://docs.microsoft.com/visualstudio/ide/introduction-to-international-applications-based-on-the-dotnet-framework)","nodes":[{"pos":[4,740],"nodes":[{"content":"Conversions Between Strings and Other Types (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,75],"content":"Conversions Between Strings and Other Types (Visual Basic) | Microsoft Docs","nodes":[{"content":"Conversions Between Strings and Other Types (Visual Basic) | Microsoft Docs","pos":[0,75]}]}],"pos":[6,84],"yaml":true}],"content":"title: \"Conversions Between Strings and Other Types (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"data type conversion, string\"\n  - \"conversions, type\"\n  - \"string conversion\"\n  - \"conversions, data type\"\n  - \"type conversion, string\"\n  - \"regional options\"\nms.assetid: c3a99596-f09a-44a5-81dd-1b89a094f1df\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[747,805],"content":"Conversions Between Strings and Other Types (Visual Basic)","linkify":"Conversions Between Strings and Other Types (Visual Basic)","nodes":[{"content":"Conversions Between Strings and Other Types (Visual Basic)","pos":[0,58]}]},{"content":"You can convert a numeric, <ph id=\"ph1\">`Boolean`</ph>, or date/time value to a <ph id=\"ph2\">`String`</ph>.","pos":[806,877],"source":"You can convert a numeric, `Boolean`, or date/time value to a `String`."},{"content":"You can also convert in the reverse direction — from a string value to numeric, <ph id=\"ph1\">`Boolean`</ph>, or <ph id=\"ph2\">`Date`</ph> — provided the contents of the string can be interpreted as a valid value of the destination data type.","pos":[878,1082],"source":" You can also convert in the reverse direction — from a string value to numeric, `Boolean`, or `Date` — provided the contents of the string can be interpreted as a valid value of the destination data type."},{"content":"If they cannot, a run-time error occurs.","pos":[1083,1123]},{"content":"The conversions for all these assignments, in either direction, are narrowing conversions.","pos":[1130,1220]},{"content":"You should use the type conversion keywords (<ph id=\"ph1\">`CBool`</ph>, <ph id=\"ph2\">`CByte`</ph>, <ph id=\"ph3\">`CDate`</ph>, <ph id=\"ph4\">`CDbl`</ph>, <ph id=\"ph5\">`CDec`</ph>, <ph id=\"ph6\">`CInt`</ph>, <ph id=\"ph7\">`CLng`</ph>, <ph id=\"ph8\">`CSByte`</ph>, <ph id=\"ph9\">`CShort`</ph>, <ph id=\"ph10\">`CSng`</ph>, <ph id=\"ph11\">`CStr`</ph>, <ph id=\"ph12\">`CUInt`</ph>, <ph id=\"ph13\">`CULng`</ph>, <ph id=\"ph14\">`CUShort`</ph>, and <ph id=\"ph15\">`CType`</ph>).","pos":[1221,1403],"source":" You should use the type conversion keywords (`CBool`, `CByte`, `CDate`, `CDbl`, `CDec`, `CInt`, `CLng`, `CSByte`, `CShort`, `CSng`, `CStr`, `CUInt`, `CULng`, `CUShort`, and `CType`)."},{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Format%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Conversion.Val%2A&gt;</ph> functions give you additional control over conversions between strings and numbers.","pos":[1404,1589],"source":" The <xref:Microsoft.VisualBasic.Strings.Format%2A> and <xref:Microsoft.VisualBasic.Conversion.Val%2A> functions give you additional control over conversions between strings and numbers."},{"content":"If you have defined a class or structure, you can define type conversion operators between <ph id=\"ph1\">`String`</ph> and the type of your class or structure.","pos":[1596,1736],"source":"If you have defined a class or structure, you can define type conversion operators between `String` and the type of your class or structure."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.","pos":[1737,1914],"source":" For more information, see [How to: Define a Conversion Operator](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)."},{"pos":[1923,1955],"content":"Conversion of Numbers to Strings","linkify":"Conversion of Numbers to Strings","nodes":[{"content":"Conversion of Numbers to Strings","pos":[0,32]}]},{"content":"You can use the <ph id=\"ph1\">`Format`</ph> function to convert a number to a formatted string, which can include not only the appropriate digits but also formatting symbols such as a currency sign (such as <ph id=\"ph2\">`$`</ph>), thousands separators or <bpt id=\"p1\">*</bpt>digit grouping symbols<ept id=\"p1\">*</ept> (such as <ph id=\"ph3\">`,`</ph>), and a decimal separator (such as <ph id=\"ph4\">`.`</ph>).","pos":[1959,2255],"source":"You can use the `Format` function to convert a number to a formatted string, which can include not only the appropriate digits but also formatting symbols such as a currency sign (such as `$`), thousands separators or *digit grouping symbols* (such as `,`), and a decimal separator (such as `.`)."},{"content":"<ph id=\"ph1\">`Format`</ph> automatically uses the appropriate symbols according to the <bpt id=\"p1\">**</bpt>Regional Options<ept id=\"p1\">**</ept> settings specified in the Windows <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept>.","pos":[2256,2398],"source":"`Format` automatically uses the appropriate symbols according to the **Regional Options** settings specified in the Windows **Control Panel**."},{"pos":[2405,2524],"content":"Note that the concatenation (<ph id=\"ph1\">`&amp;`</ph>) operator can convert a number to a string implicitly, as the following example shows.","source":"Note that the concatenation (`&`) operator can convert a number to a string implicitly, as the following example shows."},{"pos":[2648,2680],"content":"Conversion of Strings to Numbers","linkify":"Conversion of Strings to Numbers","nodes":[{"content":"Conversion of Strings to Numbers","pos":[0,32]}]},{"content":"You can use the <ph id=\"ph1\">`Val`</ph> function to explicitly convert the digits in a string to a number.","pos":[2684,2772],"source":"You can use the `Val` function to explicitly convert the digits in a string to a number."},{"content":"<ph id=\"ph1\">`Val`</ph> reads the string until it encounters a character other than a digit, space, tab, line feed, or period.","pos":[2773,2881],"source":"`Val` reads the string until it encounters a character other than a digit, space, tab, line feed, or period."},{"content":"The sequences \"&amp;O\" and \"&amp;H\" alter the base of the number system and terminate the scanning.","pos":[2882,2973],"source":" The sequences \"&O\" and \"&H\" alter the base of the number system and terminate the scanning."},{"content":"Until it stops reading, <ph id=\"ph1\">`Val`</ph> converts all appropriate characters to a numeric value.","pos":[2974,3059],"source":" Until it stops reading, `Val` converts all appropriate characters to a numeric value."},{"content":"For example, the following statement returns the value <ph id=\"ph1\">`141.825`</ph>.","pos":[3060,3125],"source":" For example, the following statement returns the value `141.825`."},{"content":"When <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts a string to a numeric value, it uses the <bpt id=\"p1\">**</bpt>Regional Options<ept id=\"p1\">**</ept> settings specified in the Windows <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept> to interpret the thousands separator, decimal separator, and currency symbol.","pos":[3167,3465],"source":"When [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] converts a string to a numeric value, it uses the **Regional Options** settings specified in the Windows **Control Panel** to interpret the thousands separator, decimal separator, and currency symbol."},{"content":"This means that a conversion might succeed under one setting but not another.","pos":[3466,3543]},{"content":"For example, <ph id=\"ph1\">`\"$14.20\"`</ph> is acceptable in the English (United States) locale but not in any French locale.","pos":[3544,3649],"source":" For example, `\"$14.20\"` is acceptable in the English (United States) locale but not in any French locale."},{"pos":[3658,3666],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3670,3798],"source":"[Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3802,3950],"source":"[Widening and Narrowing Conversions](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implicit and Explicit Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3954,4100],"source":"[Implicit and Explicit Conversions](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Convert an Object to Another Type in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4104,4281],"source":"[How to: Convert an Object to Another Type in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Array Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[4285,4399],"source":"[Array Conversions](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[4403,4493],"source":"[Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[4497,4609],"source":"[Type Conversion Functions](../../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Introduction to International Applications Based on the .NET Framework<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/introduction-to-international-applications-based-on-the-dotnet-framework)</ept>","pos":[4613,4803],"source":"[Introduction to International Applications Based on the .NET Framework](https://docs.microsoft.com/visualstudio/ide/introduction-to-international-applications-based-on-the-dotnet-framework)"}]}