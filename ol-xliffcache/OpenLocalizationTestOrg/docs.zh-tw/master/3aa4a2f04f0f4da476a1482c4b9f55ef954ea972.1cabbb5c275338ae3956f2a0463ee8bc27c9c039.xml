{"content":"---\ntitle: \"Constructing Types (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"ESQL\"\nms.assetid: 41fa7bde-8d20-4a3f-a3d2-fb791e128010\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Constructing Types (Entity SQL)\n[!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides three kinds of constructors: row constructors, named type constructors, and collection constructors.  \n  \n## Row Constructors  \n You use row constructors in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] to construct anonymous, structurally typed records from one or more values. The result type of a row constructor is a row type whose field types correspond to the types of the values used to construct the row. For example, the following expression constructs a value of type `Record(a int, b string, c int)`:  \n  \n `ROW(1 AS a, \"abc\" AS b, a + 34 AS c)`  \n  \n If you do not provide an alias for an expression in a row constructor, the Entity Framework will try to generate one. For more information, see the \"Aliasing Rules\" section in [Identifiers](../../../../../../docs/framework/data/adonet/ef/language-reference/identifiers-entity-sql.md).  \n  \n The following rules apply to expression aliasing in a row constructor:  \n  \n-   Expressions in a row constructor cannot refer to other aliases in the same constructor.  \n  \n-   Two expressions in the same row constructor cannot have the same alias.  \n  \n For more information about row constructors, see [ROW](../../../../../../docs/framework/data/adonet/ef/language-reference/row-entity-sql.md).  \n  \n## Collection Constructors  \n You use collection constructors in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] to create an instance of a multiset from a list of values. All the values in the constructor must be of mutually compatible type `T`, and the constructor produces a collection of type `Multiset<T>`. For example, the following expression creates a collection of integers:  \n  \n `Multiset(1, 2, 3)`  \n  \n `{1, 2, 3}`  \n  \n Empty multiset constructors are not allowed because the type of the elements cannot be determined. The following is not valid:  \n  \n `multiset() {}`  \n  \n For more information, see [MULTISET](../../../../../../docs/framework/data/adonet/ef/language-reference/multiset-entity-sql.md).  \n  \n## Named Type Constructors (NamedType Initializers)  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] allows type constructors (initializers) to create instances of named complex types and entity types. For example, the following expression creates an instance of a `Person` type.  \n  \n `Person(\"abc\", 12)`  \n  \n The following expression creates an instance of a complex type.  \n  \n `MyModel.ZipCode(‘98118’, ‘4567’)`  \n  \n The following expression creates an instance of a nested complex type.  \n  \n `MyModel.AddressInfo('My street address', 'Seattle', 'WA', MyModel.ZipCode('98118', '4567'))`  \n  \n The following expression creates an instance of an entity with a nested complex type.  \n  \n `MyModel.Person(\"Bill\", MyModel.AddressInfo('My street address', 'Seattle', 'WA', MyModel.ZipCode('98118', '4567')))`  \n  \n The following example shows how to initialize a property of a complex type to null. `MyModel.ZipCode(‘98118’, null)`  \n  \n The arguments to the constructor are assumed to be in the same order as the declaration of the attributes of the type.  \n  \n For more information, see [Named Type Constructor](../../../../../../docs/framework/data/adonet/ef/language-reference/named-type-constructor-entity-sql.md).  \n  \n## See Also  \n [Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)   \n [Entity SQL Overview](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)   \n [Type System](../../../../../../docs/framework/data/adonet/ef/language-reference/type-system-entity-sql.md)","nodes":[{"pos":[4,417],"embed":true,"restype":"x-metadata","content":"title: \"Constructing Types (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"ESQL\"\nms.assetid: 41fa7bde-8d20-4a3f-a3d2-fb791e128010\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Constructing Types (Entity SQL) | Microsoft Docs","nodes":[{"pos":[0,48],"content":"Constructing Types (Entity SQL) | Microsoft Docs","nodes":[{"content":"Constructing Types (Entity SQL) | Microsoft Docs","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[424,455],"content":"Constructing Types (Entity SQL)","linkify":"Constructing Types (Entity SQL)","nodes":[{"content":"Constructing Types (Entity SQL)","pos":[0,31]}]},{"pos":[456,621],"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides three kinds of constructors: row constructors, named type constructors, and collection constructors.","source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides three kinds of constructors: row constructors, named type constructors, and collection constructors."},{"pos":[630,646],"content":"Row Constructors","linkify":"Row Constructors","nodes":[{"content":"Row Constructors","pos":[0,16]}]},{"content":"You use row constructors in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> to construct anonymous, structurally typed records from one or more values.","pos":[650,809],"source":"You use row constructors in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] to construct anonymous, structurally typed records from one or more values."},{"content":"The result type of a row constructor is a row type whose field types correspond to the types of the values used to construct the row.","pos":[810,943]},{"content":"For example, the following expression constructs a value of type <ph id=\"ph1\">`Record(a int, b string, c int)`</ph>:","pos":[944,1042],"source":" For example, the following expression constructs a value of type `Record(a int, b string, c int)`:"},{"content":"If you do not provide an alias for an expression in a row constructor, the Entity Framework will try to generate one.","pos":[1094,1211]},{"content":"For more information, see the \"Aliasing Rules\" section in <bpt id=\"p1\">[</bpt>Identifiers<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/identifiers-entity-sql.md)</ept>.","pos":[1212,1378],"source":" For more information, see the \"Aliasing Rules\" section in [Identifiers](../../../../../../docs/framework/data/adonet/ef/language-reference/identifiers-entity-sql.md)."},{"content":"The following rules apply to expression aliasing in a row constructor:","pos":[1385,1455]},{"content":"Expressions in a row constructor cannot refer to other aliases in the same constructor.","pos":[1465,1552]},{"content":"Two expressions in the same row constructor cannot have the same alias.","pos":[1562,1633]},{"pos":[1640,1781],"content":"For more information about row constructors, see <bpt id=\"p1\">[</bpt>ROW<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/row-entity-sql.md)</ept>.","source":"For more information about row constructors, see [ROW](../../../../../../docs/framework/data/adonet/ef/language-reference/row-entity-sql.md)."},{"pos":[1790,1813],"content":"Collection Constructors","linkify":"Collection Constructors","nodes":[{"content":"Collection Constructors","pos":[0,23]}]},{"content":"You use collection constructors in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> to create an instance of a multiset from a list of values.","pos":[1817,1966],"source":"You use collection constructors in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] to create an instance of a multiset from a list of values."},{"content":"All the values in the constructor must be of mutually compatible type <ph id=\"ph1\">`T`</ph>, and the constructor produces a collection of type <ph id=\"ph2\">`Multiset&lt;T&gt;`</ph>.","pos":[1967,2106],"source":" All the values in the constructor must be of mutually compatible type `T`, and the constructor produces a collection of type `Multiset<T>`."},{"content":"For example, the following expression creates a collection of integers:","pos":[2107,2178]},{"content":"Empty multiset constructors are not allowed because the type of the elements cannot be determined.","pos":[2229,2327]},{"content":"The following is not valid:","pos":[2328,2355]},{"pos":[2384,2512],"content":"For more information, see <bpt id=\"p1\">[</bpt>MULTISET<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/multiset-entity-sql.md)</ept>.","source":"For more information, see [MULTISET](../../../../../../docs/framework/data/adonet/ef/language-reference/multiset-entity-sql.md)."},{"pos":[2521,2569],"content":"Named Type Constructors (NamedType Initializers)","linkify":"Named Type Constructors (NamedType Initializers)","nodes":[{"content":"Named Type Constructors (NamedType Initializers)","pos":[0,48]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> allows type constructors (initializers) to create instances of named complex types and entity types.","pos":[2573,2729],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] allows type constructors (initializers) to create instances of named complex types and entity types."},{"content":"For example, the following expression creates an instance of a <ph id=\"ph1\">`Person`</ph> type.","pos":[2730,2807],"source":" For example, the following expression creates an instance of a `Person` type."},{"content":"The following expression creates an instance of a complex type.","pos":[2840,2903]},{"content":"The following expression creates an instance of a nested complex type.","pos":[2951,3021]},{"content":"The following expression creates an instance of an entity with a nested complex type.","pos":[3128,3213]},{"content":"The following example shows how to initialize a property of a complex type to null.","pos":[3344,3427]},{"content":"The arguments to the constructor are assumed to be in the same order as the declaration of the attributes of the type.","pos":[3467,3585]},{"pos":[3592,3748],"content":"For more information, see <bpt id=\"p1\">[</bpt>Named Type Constructor<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/named-type-constructor-entity-sql.md)</ept>.","source":"For more information, see [Named Type Constructor](../../../../../../docs/framework/data/adonet/ef/language-reference/named-type-constructor-entity-sql.md)."},{"pos":[3757,3765],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Entity SQL Reference<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept><ph id=\"ph1\"> </ph>","pos":[3769,3884],"source":"[Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md) "},{"content":"<bpt id=\"p1\">[</bpt>Entity SQL Overview<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[3888,4001],"source":"[Entity SQL Overview](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type System<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/type-system-entity-sql.md)</ept>","pos":[4005,4112],"source":"[Type System](../../../../../../docs/framework/data/adonet/ef/language-reference/type-system-entity-sql.md)"}]}