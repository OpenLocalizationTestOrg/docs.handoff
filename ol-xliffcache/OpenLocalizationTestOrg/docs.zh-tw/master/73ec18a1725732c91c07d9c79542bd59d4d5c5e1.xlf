<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73ec18a1725732c91c07d9c79542bd59d4d5c5e1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\ui-automation\ui-automation-textpattern-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1de9817e7a8a138a28c954a2ea8a3ed3b5664662</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41f3d054469d4840363c3892bd6425076baa5d94</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>UI Automation TextPattern Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>UI Automation TextPattern Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This documentation is intended for .NET Framework developers who want to use the managed <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> classes defined in the <ph id="ph2">&lt;xref:System.Windows.Automation&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For the latest information about <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, see <bpt id="p1">[</bpt>Windows Automation API: UI Automation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=156746)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This overview describes how to use <ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> to expose the textual content, including format and style attributes, of text controls in <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>-supported platforms.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These controls include, but are not limited to, the <ph id="ph1">[!INCLUDE[TLA#tla_winfx](../../../includes/tlasharptla-winfx-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> as well as their <ph id="ph4">[!INCLUDE[TLA2#tla_win32](../../../includes/tla2sharptla-win32-md.md)]</ph> equivalents.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Exposing the textual content of a control is accomplished through the use of the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> control pattern, which represents the contents of a text container as a text stream.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In turn, <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> requires the support of the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> class to expose format and style attributes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> supports <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> by representing contiguous or multiple, disjoint text spans in a text container with a collection of <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</ph> endpoints.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> supports functionality such as selection, comparison, retrieval and traversal.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> classes do not provide a means to insert or modify text.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, depending on the control, this may be accomplished by the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Automation.ValuePattern&gt;</ph> or through direct keyboard input.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>TextPattern Insert Text Sample<ept id="p1">](http://msdn.microsoft.com/en-us/67353f93-7ee2-42f2-ab76-5c078cf6ca16)</ept> for an example.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The functionality described in this overview is vital to assistive technology vendors and their end users.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Assistive technologies can use <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> to gather complete text formatting information for the user and provide programmatic navigation and selection of text by <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> (character, word, line, or paragraph).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>UI Automation TextPattern vs. Text Services Framework</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_tsf](../../../includes/tlasharptla-tsf-md.md)]</ph> is a simple and scalable system framework that enables natural language services and advanced text input on the desktop and within applications.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In addition to providing interfaces for applications to expose their text store it also supports metadata for that text store.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[TLA2#tla_tsf](../../../includes/tla2sharptla-tsf-md.md)]</ph> was designed for applications that need to inject input into context-aware scenarios whereas <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> is a read-only solution (with the limited workaround noted above) meant to provide optimized access to a text store for screen-readers and Braille devices.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In short, accessible technologies that require read-only access to a text store can use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph>, but will need the more complex functionality of <ph id="ph2">[!INCLUDE[TLA2#tla_tsf](../../../includes/tla2sharptla-tsf-md.md)]</ph> for context-aware input.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Control Types</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Text</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The Text control is the basic element representing a piece of text on the screen.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A standalone text control can be used as a label or static text on a form.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Text controls can also be contained within the structure of a <ph id="ph1">&lt;xref:System.Windows.Automation.ControlType.ListItem&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Automation.ControlType.TreeItem&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Automation.ControlType.DataItem&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Text controls might not appear in the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree (see <bpt id="p1">[</bpt>UI Automation Tree Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-tree-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is because text controls are often displayed through the Name property of another control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For instance, the text that is used to label an Edit control is exposed through the Name property of the Edit control.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because the Edit control is in the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree, it is not necessary for the text element itself to be in that view of the <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The only text that shows up in the content view is text that is not redundant information.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This enables any assistive technology to quickly filter only on the pieces of information that their users need.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Edit</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Edit controls enable a user to view and edit a single line of text.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The single line of text may wrap in certain layout scenarios.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Document</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Document controls let a user navigate and obtain information from multiple pages of text.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>TextPattern Client API's</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The entry point for the <ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> text model.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This class also contains the two <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> event listeners, <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern.TextSelectionChangedEvent&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.TextChangedEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The representation of a span of text within a text container that supports <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>UI Automation clients should be careful about the current validity of a text range created using <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the original text in the text control is completely replaced by new text, the current text range becomes invalid.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, the text range may still have some viability if only part of the original text is changed and the underlying text control is managing its text "pointer" with anchors (or endpoints) rather than with absolute character positioning.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Clients can listen for a <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.TextChangedEvent&gt;</ph> for notification of any changes to the textual content they are working with.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Used to identify the formatting attributes of a text range.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>TextPattern Provider API's</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>UI elements or controls that support <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> by implementing the <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.ITextProvider&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider&gt;</ph> interfaces, either natively or through <ph id="ph4">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> proxies, are capable of exposing detailed attribute information for any text they contain in addition to providing robust navigational capabilities.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> provider does not have to support all text attributes if the control lacks support for any particular attributes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> provider must support the <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern.GetSelection%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Select%2A&gt;</ph> functions if the control supports text selection or placement of the text cursor (or system caret) within the text area.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the control does not support this functionality then it does not need to support either of these methods.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, the control must expose the type of text selection it supports by implementing the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> provider must always support the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> constants <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> as well as any other <ph id="ph5">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> constants it is capable of supporting.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The provider may skip support for a specific <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> by deferring to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported in the following order: <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph>, and <ph id="ph9">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Exposes methods, properties and attributes that support <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> in client applications (see <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.ITextProvider&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Represents a span of text in a text provider (see <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Contains values that are used as identifiers for text providers (see <ph id="ph1">&lt;xref:System.Windows.Automation.TextPatternIdentifiers&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Security</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> architecture was designed with security in mind (see <bpt id="p1">[</bpt>UI Automation Security Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-security-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>However, the TextPattern classes described in this overview require some specific security considerations.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> text providers supply read-only interfaces and do not provide the ability to change the existing text in a control.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>UI Automation clients can only use <ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> if they are fully "trusted".</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An example of this would be the protected Logon Desktop, where only known and trusted applications can run.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Developers of UI Automation providers should be aware that all information they choose to expose in their controls through <ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> is essentially public and fully accessible by other code.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> makes no effort to determine the trustworthiness of any UI Automation client and therefore the UI Automation provider should not expose protected content or sensitive textual information (such as password fields).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>One of the most significant changes in security for <ph id="ph1">[!INCLUDE[TLA#tla_winvista](../../../includes/tlasharptla-winvista-md.md)]</ph> is broadly referred to as "Secure Input" which encompasses technologies such as Least-privileged (or Limited) User Accounts (LUA) and UI Privilege Level Isolation (UIPI).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>UIPI prevents one program from controlling and/or monitoring another more "privileged" program, preventing cross-process window message attacks that spoof user input.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>LUA sets limits on the privileges of applications being run by users in the Administrators group.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Applications won't necessarily have administrator privileges, but will instead run with the least privileges necessary.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As a consequence, there may be some restrictions enforced in LUA scenarios.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Most notably string truncation (including TextPattern strings), where it may be necessary to limit the size of strings being retrieved from administrator-level applications so they aren't forced to allocate memory to the point of disabling the application.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Performance</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Because TextPattern relies on cross-process calls for most of its functionality, it does not provide a caching mechanism to improve performance when processing content.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This is unlike other control patterns in <ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../includes/tlasharptla-uiautomation-md.md)]</ph> that can be accessed using the <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement.GetCachedPattern%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Automation.AutomationElement.TryGetCachedPattern%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>One tactic for improving performance is by making sure UI Automation clients attempt to retrieve moderately-sized blocks of text using <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, GetText(1) calls will incur cross-process hits for each character whereas one GetText(-1) call will incur one cross-process hit, but can have high latency depending on the size of the text provider.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>TextPattern Terminology</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Attribute<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A formatting characteristic of a text range (for example, <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsItalicAttribute&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern.FontNameAttribute&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Degenerate Range<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A degenerate range is an empty or zero-character text range.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For the purposes of the TextPattern control pattern, the text insertion point (or system caret) is considered a degenerate range.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If no text is selected, <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.GetSelection%2A&gt;</ph> would return a degenerate range at the text insertion point and <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern.RangeFromPoint%2A&gt;</ph> would return a degenerate range as its starting endpoint.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern.GetVisibleRanges%2A&gt;</ph> may return degenerate ranges when the text provider cannot find any text ranges that match the given condition.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This degenerate range can be used as a starting endpoint within the text provider.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.FindText%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRange.FindAttribute%2A&gt;</ph> return a null reference (<ph id="ph3">`Nothing`</ph> in <ph id="ph4">[!INCLUDE[TLA2#tla_visualbnet](../../../includes/tla2sharptla-visualbnet-md.md)]</ph>) to avoid confusion with a discovered range versus a degenerate range.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Embedded Object<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>There are two types of embedded objects in the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> text model.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>They consist of text-based content elements such as hyperlinks or tables, and control elements such as images and buttons.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more detailed information, see <bpt id="p1">[</bpt>Access Embedded Objects Using UI Automation<ept id="p1">](../../../docs/framework/ui-automation/access-embedded-objects-using-ui-automation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Endpoint<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The absolute <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</ph> point of a text range within a text container.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>TextPatternRangeEndpoints &amp;#40;start and end&amp;#41;.<ept id="p1">](../../../docs/framework/ui-automation/media/uia-textpattern-endpoints.PNG "UIA_TextPattern_Endpoints")</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following illustrates a set of start and end points.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TextRange<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A representation of a span of text, with start and end points, in a text container including all associated attributes and functionality.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A pre-defined unit of text (character, word, line, or paragraph) used for navigating through logical segments of a text range.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UI Automation Control Patterns for Clients<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-patterns-for-clients.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>UI Automation Control Patterns Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-patterns-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>UI Automation Tree Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-tree-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Use Caching in UI Automation<ept id="p1">](../../../docs/framework/ui-automation/use-caching-in-ui-automation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Support Control Patterns in a UI Automation Provider<ept id="p1">](../../../docs/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Control Pattern Mapping for UI Automation Clients<ept id="p1">](../../../docs/framework/ui-automation/control-pattern-mapping-for-ui-automation-clients.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Text Services Framework<ept id="p1">](http://msdn.microsoft.com/library/default.asp?url=/library/tsf/tsf/text_services_framework.asp)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>