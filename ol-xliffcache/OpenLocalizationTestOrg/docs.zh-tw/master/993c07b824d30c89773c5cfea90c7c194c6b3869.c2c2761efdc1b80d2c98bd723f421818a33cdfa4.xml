{"content":"---\ntitle: \"NAVIGATE (Entity SQL)\"\nms.date: \"03/30/2017\"\nms.assetid: f107f29d-005f-4e39-a898-17f163abb1d0\n---\n\n# NAVIGATE (Entity SQL)\n\nNavigates over the relationship established between entities.\n\n## Syntax\n\n```\nnavigate(instance-expression, [relationship-type], [to-end [, from-end] ])\n```\n\n## Arguments\n\n`instance-expression`\nAn instance of an entity.\n\n`relationship-type`\nThe type name of the relationship, from the conceptual schema definition language (CSDL) file. The `relationship-type` is qualified as \\<namespace>.\\<relationship type name>.\n\n`to`\nThe end of the relationship.\n\n`from`\nThe beginning of the relationship.\n\n## Return Value\n\nIf the cardinality of the to end is 1, the return value will be `Ref<T>`. If the cardinality of the to end is n, the return value will be `Collection<Ref<T>>`.\n\n## Remarks\n\nRelationships are first-class constructs in the [!INCLUDE[adonet_edm](../../../../../../includes/adonet-edm-md.md)] (EDM). Relationships can be established between two or more entity types, and users can navigate over the relationship from one end (entity) to another. `from` and `to` are conditionally optional when there is no ambiguity in name resolution within the relationship.\n\nNAVIGATE is valid in O and C space.\n\nThe general form of a navigation construct is the following:\n\nnavigate(`instance-expression`, `relationship-type`, [ `to-end` [, `from-end` ] ] )\n\nFor example:\n\n```sql\nSelect o.Id, navigate(o, OrderCustomer, Customer, Order)\nFrom LOB.Orders as o\n```\n\nWhere OrderCustomer is the `relationship`, and Customer and Order are the `to-end` (customer) and `from-end` (order) of the relationship. If OrderCustomer was a n:1 relationship, then the result type of the navigate expression is Ref\\<Customer>.\n\nThe simpler form of this expression is the following:\n\n```sql\nSelect o.Id, navigate(o, OrderCustomer)\nFrom LOB.Orders as o\n```\n\nSimilarly, in a query of the following form, The navigate expression would produce a Collection<Ref\\<Order>>.\n\n```sql\nSelect c.Id, navigate(c, OrderCustomer, Order, Customer)\nFrom LOB.Customers as c\n```\n\nThe instance-expression must be an entity/ref type.\n\n## Example\n\nThe following Entity SQL query uses the NAVIGATE operator to navigate over the relationship established between Address and SalesOrderHeader entity types. The query is based on the AdventureWorks Sales Model. To compile and run this query, follow these steps:\n\n1. Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md).\n\n2. Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:\n\n [!code-csharp[DP EntityServices Concepts 2#NAVIGATE](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts 2/cs/entitysql.cs#navigate)]\n\n## See also\n\n- [Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)\n- [How to: Navigate Relationships with Navigate Operator](../../../../../../docs/framework/data/adonet/ef/language-reference/navigate-entity-sql.md)\n","nodes":[{"pos":[4,105],"embed":true,"restype":"x-metadata","content":"title: \"NAVIGATE (Entity SQL)\"\nms.date: \"03/30/2017\"\nms.assetid: f107f29d-005f-4e39-a898-17f163abb1d0","nodes":[{"content":"NAVIGATE (Entity SQL)","nodes":[{"pos":[0,21],"content":"NAVIGATE (Entity SQL)","nodes":[{"content":"NAVIGATE (Entity SQL)","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[113,134],"content":"NAVIGATE (Entity SQL)","linkify":"NAVIGATE (Entity SQL)","nodes":[{"content":"NAVIGATE (Entity SQL)","pos":[0,21]}]},{"content":"Navigates over the relationship established between entities.","pos":[136,197]},{"pos":[202,208],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[297,306],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[308,355],"content":"<ph id=\"ph1\">`instance-expression`</ph> An instance of an entity.","source":"`instance-expression`\nAn instance of an entity."},{"content":"<ph id=\"ph1\">`relationship-type`</ph> The type name of the relationship, from the conceptual schema definition language (CSDL) file.","pos":[357,471],"source":"`relationship-type`\nThe type name of the relationship, from the conceptual schema definition language (CSDL) file."},{"content":"The <ph id=\"ph1\">`relationship-type`</ph> is qualified as <ph id=\"ph2\">\\&lt;</ph>namespace&gt;.<ph id=\"ph3\">\\&lt;</ph>relationship type name&gt;.","pos":[472,551],"source":" The `relationship-type` is qualified as \\<namespace>.\\<relationship type name>."},{"pos":[553,586],"content":"<ph id=\"ph1\">`to`</ph> The end of the relationship.","source":"`to`\nThe end of the relationship."},{"pos":[588,629],"content":"<ph id=\"ph1\">`from`</ph> The beginning of the relationship.","source":"`from`\nThe beginning of the relationship."},{"pos":[634,646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the cardinality of the to end is 1, the return value will be <ph id=\"ph1\">`Ref&lt;T&gt;`</ph>.","pos":[648,721],"source":"If the cardinality of the to end is 1, the return value will be `Ref<T>`."},{"content":"If the cardinality of the to end is n, the return value will be <ph id=\"ph1\">`Collection&lt;Ref&lt;T&gt;&gt;`</ph>.","pos":[722,807],"source":" If the cardinality of the to end is n, the return value will be `Collection<Ref<T>>`."},{"pos":[812,819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Relationships are first-class constructs in the <ph id=\"ph1\">[!INCLUDE[adonet_edm](../../../../../../includes/adonet-edm-md.md)]</ph> (EDM).","pos":[821,943],"source":"Relationships are first-class constructs in the [!INCLUDE[adonet_edm](../../../../../../includes/adonet-edm-md.md)] (EDM)."},{"content":"Relationships can be established between two or more entity types, and users can navigate over the relationship from one end (entity) to another.","pos":[944,1089]},{"content":"<ph id=\"ph1\">`from`</ph> and <ph id=\"ph2\">`to`</ph> are conditionally optional when there is no ambiguity in name resolution within the relationship.","pos":[1090,1203],"source":"`from` and `to` are conditionally optional when there is no ambiguity in name resolution within the relationship."},{"content":"NAVIGATE is valid in O and C space.","pos":[1205,1240]},{"content":"The general form of a navigation construct is the following:","pos":[1242,1302]},{"pos":[1304,1387],"content":"navigate(<ph id=\"ph1\">`instance-expression`</ph>, <ph id=\"ph2\">`relationship-type`</ph>, [ <ph id=\"ph3\">`to-end`</ph> [, <ph id=\"ph4\">`from-end`</ph> ] ] )","source":"navigate(`instance-expression`, `relationship-type`, [ `to-end` [, `from-end` ] ] )"},{"content":"For example:","pos":[1389,1401]},{"content":"Where OrderCustomer is the <ph id=\"ph1\">`relationship`</ph>, and Customer and Order are the <ph id=\"ph2\">`to-end`</ph> (customer) and <ph id=\"ph3\">`from-end`</ph> (order) of the relationship.","pos":[1493,1630],"source":"Where OrderCustomer is the `relationship`, and Customer and Order are the `to-end` (customer) and `from-end` (order) of the relationship."},{"content":"If OrderCustomer was a n:1 relationship, then the result type of the navigate expression is Ref<ph id=\"ph1\">\\&lt;</ph>Customer&gt;.","pos":[1631,1738],"source":" If OrderCustomer was a n:1 relationship, then the result type of the navigate expression is Ref\\<Customer>."},{"content":"The simpler form of this expression is the following:","pos":[1740,1793]},{"content":"Similarly, in a query of the following form, The navigate expression would produce a Collection&lt;Ref<ph id=\"ph1\">\\&lt;</ph>Order&gt;&gt;.","pos":[1868,1977],"source":"Similarly, in a query of the following form, The navigate expression would produce a Collection<Ref\\<Order>>."},{"content":"The instance-expression must be an entity/ref type.","pos":[2072,2123]},{"pos":[2128,2135],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following Entity SQL query uses the NAVIGATE operator to navigate over the relationship established between Address and SalesOrderHeader entity types.","pos":[2137,2291]},{"content":"The query is based on the AdventureWorks Sales Model.","pos":[2292,2345]},{"content":"To compile and run this query, follow these steps:","pos":[2346,2396]},{"pos":[2401,2598],"content":"Follow the procedure in <bpt id=\"p1\">[</bpt>How to: Execute a Query that Returns StructuralType Results<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)</ept>.","source":"Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)."},{"pos":[2603,2686],"content":"Pass the following query as an argument to the <ph id=\"ph1\">`ExecuteStructuralTypeQuery`</ph> method:","source":"Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:"},{"pos":[2861,2869],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2873,2987],"content":"<bpt id=\"p1\">[</bpt>Entity SQL Reference<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept>","source":"[Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)"},{"pos":[2990,3136],"content":"<bpt id=\"p1\">[</bpt>How to: Navigate Relationships with Navigate Operator<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/navigate-entity-sql.md)</ept>","source":"[How to: Navigate Relationships with Navigate Operator](../../../../../../docs/framework/data/adonet/ef/language-reference/navigate-entity-sql.md)"}]}