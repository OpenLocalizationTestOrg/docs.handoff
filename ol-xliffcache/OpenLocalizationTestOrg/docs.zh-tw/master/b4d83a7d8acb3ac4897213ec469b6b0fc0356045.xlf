<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4d83a7d8acb3ac4897213ec469b6b0fc0356045</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\modifiers\key.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e6f15e483d508b792bac753827b03bceaa13f37</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2040118869b6b60ee01ca6263dec888e51fa495e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Key (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Key (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Key`</ph> keyword enables you to specify behavior for properties of anonymous types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Only properties you designate as key properties participate in tests of equality between anonymous type instances, or calculation of hash code values.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The values of key properties cannot be changed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You designate a property of an anonymous type as a key property by placing the keyword <ph id="ph1">`Key`</ph> in front of its declaration in the initialization list.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`Airline`</ph> and <ph id="ph2">`FlightNo`</ph> are key properties, but <ph id="ph3">`Gate`</ph> is not.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAnonymousTypes#26<ept id="p2">](../../../visual-basic/language-reference/modifiers/codesnippet/VisualBasic/key_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When a new anonymous type is created, it inherits directly from <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The compiler overrides three inherited members: <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Object.ToString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The override code that is produced for <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> is based on key properties.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If there are no key properties in the type, <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> are not overridden.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Equality</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Two anonymous type instances are equal if they are instances of the same type and if the values of their key properties are equal.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the following examples, <ph id="ph1">`flight2`</ph> is equal to <ph id="ph2">`flight1`</ph> from the previous example because they are instances of the same anonymous type and they have matching values for their key properties.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`flight3`</ph> is not equal to <ph id="ph2">`flight1`</ph> because it has a different value for a key property, <ph id="ph3">`FlightNo`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Instance <ph id="ph1">`flight4`</ph> is not the same type as <ph id="ph2">`flight1`</ph> because they designate different properties as key properties.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAnonymousTypes#27<ept id="p2">](../../../visual-basic/language-reference/modifiers/codesnippet/VisualBasic/key_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If two instances are declared with only non-key properties, identical in name, type, order, and value, the two instances are not equal.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An instance without key properties is equal only to itself.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about the conditions under which two anonymous type instances are instances of the same anonymous type, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Hash Code Calculation</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph>, the hash function that is defined in <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> for an anonymous type is based on the key properties of the type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following examples show the interaction between key properties and hash code values.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instances of an anonymous type that have the same values for all key properties have the same hash code value, even if non-key properties do not have matching values.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following statement returns <ph id="ph1">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAnonymousTypes#37<ept id="p2">](../../../visual-basic/language-reference/modifiers/codesnippet/VisualBasic/key_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Instances of an anonymous type that have different values for one or more key properties have different hash code values.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following statement returns <ph id="ph1">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAnonymousTypes#38<ept id="p2">](../../../visual-basic/language-reference/modifiers/codesnippet/VisualBasic/key_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Instances of anonymous types that designate different properties as key properties are not instances of the same type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>They have different hash code values even when the names and values of all properties are the same.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following statement returns <ph id="ph1">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAnonymousTypes#39<ept id="p2">](../../../visual-basic/language-reference/modifiers/codesnippet/VisualBasic/key_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Read-Only Values</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The values of key properties cannot be changed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, in <ph id="ph1">`flight1`</ph> in the earlier examples, the <ph id="ph2">`Airline`</ph> and <ph id="ph3">`FlightNo`</ph> fields are read-only, but <ph id="ph4">`Gate`</ph> can be changed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAnonymousTypes#28<ept id="p2">](../../../visual-basic/language-reference/modifiers/codesnippet/VisualBasic/key_6.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Type Definition<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Infer Property Names and Types in Anonymous Type Declarations<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>