{"content":"---\ntitle: \"Unordered Node Retrieval by Name or Index | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nms.assetid: 2038a90b-92af-4a0a-baaa-08e688d95194\ncaps.latest.revision: 4\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# Unordered Node Retrieval by Name or Index\nThe **XmlNamedNodeMap** is described in the World Wide Web Consortium (W3C) specification as the NamedNodeMap and is required to handle an unordered set of nodes with the ability to reference nodes by their name or index. The only way you have access to an **XmlNamedNodeMap** is when an **XmlNamedNodeMap** is returned through a method or property. There are three methods or properties that return an **XmlNamedNodeMap**:  \n  \n-   XmlElement.Attributes  \n  \n-   XmlDocumentType.Entities  \n  \n-   XmlDocumentType.Notations  \n  \n For example, the **XmlDocumentType.Entities** property gets the collection of **XmlEntity** nodes declared in the document type declaration. This collection is returned as an **XmlNamedNodeMap**, and you can iterate through the collection with the use of the **Count** property and display entity information. For an example of iterating through an **XmlNamedNodeMap**, see <xref:System.Xml.XmlDocumentType.Entities%2A>.  \n  \n The **XmlAttributeCollection** is derived from **XmlNamedNodeMap** and only attributes are modifiable, while notations and entities are read-only. Using the **XmlNamedNodeMap** for the attributes, you can get nodes for those attributes based on their XML names. This provides an easy method for manipulating the collection of attributes on an element node. This can be contrasted directly with **XmlNodeList**, which also implements the **IEnumerable** interface, but with an index accessor rather than a string. The **RemoveNamedItem** and **SetNamedItem** methods are only used against an **XmlAttributeCollection**. Adding or removing from an attribute collection, whether using the **AttributeCollection** or the **XmlNamedNodeMap** implementation, modifies the attribute collection on the element. The following code example shows how to move an attribute and create a new attribute.  \n  \n```vb  \nImports System  \nImports System.Xml  \n  \nClass test  \n  \n    Public Shared Sub Main()  \n        Dim doc As New XmlDocument()  \n        doc.LoadXml(\"<root> <child1 attr1='val1' attr2='val2'> text1 </child1> <child2 attr3='val3'> text2 </child2> </root> \")  \n  \n        ' Get the attributes of node \"child2 \"  \n        Dim ac As XmlAttributeCollection = doc.DocumentElement.ChildNodes(1).Attributes  \n  \n        ' Print out the number of attributes and their names.  \n        Console.WriteLine((\"Number of Attributes: \" + ac.Count))  \n        Dim i As Integer  \n        For i = 0 To ac.Count - 1  \n            Console.WriteLine((i + 1 + \".  Attribute Name: '\" + ac(i).Name + \"'  Attribute Value:  '\" + ac(i).Value + \"'\"))  \n        Next i  \n        ' Get the 'attr1' from child1.  \n        Dim attr As XmlAttribute = doc.DocumentElement.ChildNodes(0).Attributes(0)  \n  \n        ' Add this attribute to the attributecollection \"ac\".  \n        ac.SetNamedItem(attr)  \n  \n        ''attr1' will be removed from 'child1' and added to 'child2'.  \n        ' Print out the number of attributes and their names.  \n        Console.WriteLine((\"Number of Attributes: \" + ac.Count))  \n  \n        For i = 0 To ac.Count - 1  \n            Console.WriteLine((i + 1 + \".  Attribute Name: '\" + ac(i).Name + \"'  Attribute Value:  '\" + ac(i).Value + \"'\"))  \n        Next i  \n        ' Create a new attribute and add to the collection.  \n        Dim attr2 As XmlAttribute = doc.CreateAttribute(\"attr4\")  \n        attr2.Value = \"val4\"  \n        ac.SetNamedItem(attr2)  \n  \n        ' Print out the number of attributes and their names.  \n        Console.WriteLine((\"Number of Attributes: \" + ac.Count))  \n  \n        For i = 0 To ac.Count - 1  \n            Console.WriteLine((i + 1 + \".  Attribute Name: '\" + ac(i).Name + \"'  Attribute Value:  '\" + ac(i).Value + \"'\"))  \n        Next i  \n    End Sub 'Main  \nEnd Class 'test  \n```  \n  \n```csharp  \nusing System;  \nusing System.Xml;  \nclass test {  \n    public static void Main() {  \n        XmlDocument doc = new XmlDocument();  \n        doc.LoadXml( \"<root> <child1 attr1='val1' attr2='val2'> text1 </child1> <child2 attr3='val3'> text2 </child2> </root> \" );  \n  \n        // Get the attributes of node \"child2\"  \n        XmlAttributeCollection ac = doc.DocumentElement.ChildNodes[1].Attributes;  \n  \n        // Print out the number of attributes and their names.  \n        Console.WriteLine( \"Number of Attributes: \"+ac.Count );  \n        for( int i = 0; i < ac.Count; i++ )  \n            Console.WriteLine( (i+1) + \".  Attribute Name: '\" +ac[i].Name+ \"'  Attribute Value:  '\"+ ac[i].Value +\"'\" );   \n  \n        // Get the 'attr1' from child1.  \n        XmlAttribute attr = doc.DocumentElement.ChildNodes[0].Attributes[0];  \n  \n        // Add this attribute to the attributecollection \"ac\".  \n        ac.SetNamedItem( attr );  \n  \n        // 'attr1' will be removed from 'child1' and added to 'child2'.  \n        // Print out the number of attributes and their names.  \n        Console.WriteLine( \"Number of Attributes: \"+ac.Count );          \n        for( int i = 0; i < ac.Count; i++ )  \n            Console.WriteLine( (i+1) + \".  Attribute Name: '\" +ac[i].Name+ \"'  Attribute Value:  '\"+ ac[i].Value +\"'\" );   \n  \n        // Create a new attribute and add to the collection.  \n        XmlAttribute attr2 = doc.CreateAttribute( \"attr4\" );  \n        attr2.Value = \"val4\";  \n        ac.SetNamedItem( attr2 );  \n  \n        // Print out the number of attributes and their names.  \n        Console.WriteLine( \"Number of Attributes: \"+ac.Count );          \n        for( int i = 0; i < ac.Count; i++ )  \n            Console.WriteLine( (i+1) + \".  Attribute Name: '\" +ac[i].Name+ \"'  Attribute Value:  '\"+ ac[i].Value +\"'\" );           \n  \n    }  \n}  \n```  \n  \n To see an additional code example which shows an attribute being removed from an **AttributeCollection**, see [XmlNamedNodeMap.RemoveNamedItem Method](Overload:System.Xml.XmlNamedNodeMap.RemoveNamedItem). For more information on the methods and properties, see [XmlNamedNodeMap Members](AllMembers.T:System.Xml.XmlNamedNodeMap).  \n  \n## See Also  \n [XML Document Object Model (DOM)](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)\n","nodes":[{"pos":[12,70],"content":"Unordered Node Retrieval by Name or Index | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Unordered Node Retrieval by Name or Index | Microsoft Docs","pos":[0,58]}]},{"pos":[415,456],"content":"Unordered Node Retrieval by Name or Index","linkify":"Unordered Node Retrieval by Name or Index","nodes":[{"content":"Unordered Node Retrieval by Name or Index","pos":[0,41]}]},{"content":"The <bpt id=\"p1\">**</bpt>XmlNamedNodeMap<ept id=\"p1\">**</ept> is described in the World Wide Web Consortium (W3C) specification as the NamedNodeMap and is required to handle an unordered set of nodes with the ability to reference nodes by their name or index.","pos":[457,678],"source":"The **XmlNamedNodeMap** is described in the World Wide Web Consortium (W3C) specification as the NamedNodeMap and is required to handle an unordered set of nodes with the ability to reference nodes by their name or index."},{"content":"The only way you have access to an <bpt id=\"p1\">**</bpt>XmlNamedNodeMap<ept id=\"p1\">**</ept> is when an <bpt id=\"p2\">**</bpt>XmlNamedNodeMap<ept id=\"p2\">**</ept> is returned through a method or property.","pos":[679,806],"source":" The only way you have access to an **XmlNamedNodeMap** is when an **XmlNamedNodeMap** is returned through a method or property."},{"content":"There are three methods or properties that return an <bpt id=\"p1\">**</bpt>XmlNamedNodeMap<ept id=\"p1\">**</ept>:","pos":[807,880],"source":" There are three methods or properties that return an **XmlNamedNodeMap**:"},{"content":"XmlElement.Attributes","pos":[890,911]},{"content":"XmlDocumentType.Entities","pos":[921,945]},{"content":"XmlDocumentType.Notations","pos":[955,980]},{"content":"For example, the <bpt id=\"p1\">**</bpt>XmlDocumentType.Entities<ept id=\"p1\">**</ept> property gets the collection of <bpt id=\"p2\">**</bpt>XmlEntity<ept id=\"p2\">**</ept> nodes declared in the document type declaration.","pos":[987,1127],"source":"For example, the **XmlDocumentType.Entities** property gets the collection of **XmlEntity** nodes declared in the document type declaration."},{"content":"This collection is returned as an <bpt id=\"p1\">**</bpt>XmlNamedNodeMap<ept id=\"p1\">**</ept>, and you can iterate through the collection with the use of the <bpt id=\"p2\">**</bpt>Count<ept id=\"p2\">**</ept> property and display entity information.","pos":[1128,1296],"source":" This collection is returned as an **XmlNamedNodeMap**, and you can iterate through the collection with the use of the **Count** property and display entity information."},{"content":"For an example of iterating through an <bpt id=\"p1\">**</bpt>XmlNamedNodeMap<ept id=\"p1\">**</ept>, see <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocumentType.Entities%2A&gt;</ph>.","pos":[1297,1407],"source":" For an example of iterating through an **XmlNamedNodeMap**, see <xref:System.Xml.XmlDocumentType.Entities%2A>."},{"content":"The <bpt id=\"p1\">**</bpt>XmlAttributeCollection<ept id=\"p1\">**</ept> is derived from <bpt id=\"p2\">**</bpt>XmlNamedNodeMap<ept id=\"p2\">**</ept> and only attributes are modifiable, while notations and entities are read-only.","pos":[1414,1560],"source":"The **XmlAttributeCollection** is derived from **XmlNamedNodeMap** and only attributes are modifiable, while notations and entities are read-only."},{"content":"Using the <bpt id=\"p1\">**</bpt>XmlNamedNodeMap<ept id=\"p1\">**</ept> for the attributes, you can get nodes for those attributes based on their XML names.","pos":[1561,1675],"source":" Using the **XmlNamedNodeMap** for the attributes, you can get nodes for those attributes based on their XML names."},{"content":"This provides an easy method for manipulating the collection of attributes on an element node.","pos":[1676,1770]},{"content":"This can be contrasted directly with <bpt id=\"p1\">**</bpt>XmlNodeList<ept id=\"p1\">**</ept>, which also implements the <bpt id=\"p2\">**</bpt>IEnumerable<ept id=\"p2\">**</ept> interface, but with an index accessor rather than a string.","pos":[1771,1926],"source":" This can be contrasted directly with **XmlNodeList**, which also implements the **IEnumerable** interface, but with an index accessor rather than a string."},{"content":"The <bpt id=\"p1\">**</bpt>RemoveNamedItem<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>SetNamedItem<ept id=\"p2\">**</ept> methods are only used against an <bpt id=\"p3\">**</bpt>XmlAttributeCollection<ept id=\"p3\">**</ept>.","pos":[1927,2032],"source":" The **RemoveNamedItem** and **SetNamedItem** methods are only used against an **XmlAttributeCollection**."},{"content":"Adding or removing from an attribute collection, whether using the <bpt id=\"p1\">**</bpt>AttributeCollection<ept id=\"p1\">**</ept> or the <bpt id=\"p2\">**</bpt>XmlNamedNodeMap<ept id=\"p2\">**</ept> implementation, modifies the attribute collection on the element.","pos":[2033,2216],"source":" Adding or removing from an attribute collection, whether using the **AttributeCollection** or the **XmlNamedNodeMap** implementation, modifies the attribute collection on the element."},{"content":"The following code example shows how to move an attribute and create a new attribute.","pos":[2217,2302]},{"content":"To see an additional code example which shows an attribute being removed from an <bpt id=\"p1\">**</bpt>AttributeCollection<ept id=\"p1\">**</ept>, see <bpt id=\"p2\">[</bpt>XmlNamedNodeMap.RemoveNamedItem Method<ept id=\"p2\">](Overload:System.Xml.XmlNamedNodeMap.RemoveNamedItem)</ept>.","pos":[6096,6300],"source":"To see an additional code example which shows an attribute being removed from an **AttributeCollection**, see [XmlNamedNodeMap.RemoveNamedItem Method](Overload:System.Xml.XmlNamedNodeMap.RemoveNamedItem)."},{"content":"For more information on the methods and properties, see <bpt id=\"p1\">[</bpt>XmlNamedNodeMap Members<ept id=\"p1\">](AllMembers.T:System.Xml.XmlNamedNodeMap)</ept>.","pos":[6301,6424],"source":" For more information on the methods and properties, see [XmlNamedNodeMap Members](AllMembers.T:System.Xml.XmlNamedNodeMap)."},{"pos":[6433,6441],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6445,6547],"content":"<bpt id=\"p1\">[</bpt>XML Document Object Model (DOM)<ept id=\"p1\">](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)</ept>","source":"[XML Document Object Model (DOM)](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)"}]}