<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5a0974d3684a0440e519139b9d4bf11a1953a09</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\asynchronous-programming-model-apm.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">608daa3b6038b604120a8cf460de08d76c0fd699</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec1022bb8925ca721c2e04aef87d5fd92b33448e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Model (APM) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Model (APM)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An asynchronous operation that uses the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> design pattern is implemented as two methods named <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> and <bpt id="p3">**</bpt>End<ept id="p3">**</ept> <bpt id="p4">*</bpt>OperationName<ept id="p4">*</ept> that begin and end the asynchronous operation <bpt id="p5">*</bpt>OperationName<ept id="p5">*</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class provides the <ph id="ph2">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> methods to asynchronously read bytes from a file.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These methods implement the asynchronous version of the <ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4, the Task Parallel Library provides a new model for asynchronous and parallel programming.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)</ept> and <bpt id="p2">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p2">](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept>, an application can continue executing instructions on the calling thread while the asynchronous operation takes place on a different thread.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For each call to <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept>, the application should also call <bpt id="p3">**</bpt>End<ept id="p3">**</ept> <bpt id="p4">*</bpt>OperationName<ept id="p4">*</ept> to get the results of the operation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Beginning an Asynchronous Operation</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method begins asynchronous operation <bpt id="p3">*</bpt>OperationName<ept id="p3">*</ept> and returns an object that implements the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> objects store information about an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table shows information about an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> that can be used to block application execution until the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A value that indicates whether the asynchronous operation completed on the thread used to call <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> instead of completing on a separate <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A value that indicates whether the asynchronous operation has completed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method takes any parameters declared in the signature of the synchronous version of the method that are passed by value or by reference.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Any out parameters are not part of the <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method signature.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method signature also includes two additional parameters.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The first of these defines an <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate that references a method that is called when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The caller can specify <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic) if it does not want a method invoked when the operation completes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second additional parameter is a user-defined object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This object can be used to pass application-specific state information to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method takes additional operation-specific parameters, such as a byte array to store bytes read from a file, the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> and application state object are the last parameters in the <bpt id="p3">**</bpt>Begin<ept id="p3">**</ept> <bpt id="p4">*</bpt>OperationName<ept id="p4">*</ept> method signature.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> returns control to the calling thread immediately.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method throws exceptions, the exceptions are thrown before the asynchronous operation is started.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method throws exceptions, the callback method is not invoked.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Ending an Asynchronous Operation</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method ends asynchronous operation <bpt id="p3">*</bpt>OperationName<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The return value of the <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method is the same type returned by its synchronous counterpart and is specific to the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> method returns the number of bytes read from a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> and the <ph id="ph3">&lt;xref:System.Net.Dns.EndGetHostByName%2A&gt;</ph> method returns an <ph id="ph4">&lt;xref:System.Net.IPHostEntry&gt;</ph> object that contains information about a host computer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method takes any out or ref parameters declared in the signature of the synchronous version of the method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In addition to the parameters from the synchronous method, the <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method also includes an <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Callers must pass the instance returned by the corresponding call to <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the asynchronous operation represented by the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> object has not completed when <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> is called, <bpt id="p3">**</bpt>End<ept id="p3">**</ept> <bpt id="p4">*</bpt>OperationName<ept id="p4">*</ept> blocks the calling thread until the asynchronous operation is complete.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Exceptions thrown by the asynchronous operation are thrown from the <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The effect of calling the <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method multiple times with the same <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> is not defined.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Likewise, calling the <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method with an <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> that was not returned by the related Begin method is also not defined.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For either of the undefined scenarios, implementers should consider throwing <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Implementers of this design pattern should notify the caller that the asynchronous operation completed by setting <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> to true, calling the asynchronous callback method (if one was specified) and signaling the <ph id="ph2">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Application developers have several design choices for accessing the results of the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The correct choice depends on whether the application has instructions that can execute while the operation completes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If an application cannot perform any additional work until it receives the results of the asynchronous operation, the application must block until the results are available.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To block until an asynchronous operation completes, you can use one of the following approaches:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> from the application’s main thread, blocking application execution until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For an example that illustrates this technique, see <bpt id="p1">[</bpt>Blocking Application Execution by Ending an Async Operation<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/blocking-application-execution-by-ending-an-async-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> to block application execution until one or more operations are complete.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For an example that illustrates this technique, see <bpt id="p1">[</bpt>Blocking Application Execution Using an AsyncWaitHandle<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/blocking-application-execution-using-an-asyncwaithandle.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Applications that do not need to block while the asynchronous operation completes can use one of the following approaches:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Poll for operation completion status by checking the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property periodically and calling <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For an example that illustrates this technique, see <bpt id="p1">[</bpt>Polling for the Status of an Asynchronous Operation<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/polling-for-the-status-of-an-asynchronous-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use an <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate to specify a method to be invoked when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For an example that illustrates this technique, see <bpt id="p1">[</bpt>Using an AsyncCallback Delegate to End an Asynchronous Operation<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/using-an-asynccallback-delegate-to-end-an-asynchronous-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using an AsyncCallback Delegate and State Object<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/using-an-asynccallback-delegate-and-state-object.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>