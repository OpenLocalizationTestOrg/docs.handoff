{"content":"---\ntitle: \"Thread Timers (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 809cba93-cc93-4e21-afda-f299f9a39818\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Thread Timers (Visual Basic)\nThe <xref:System.Threading.Timer?displayProperty=fullName> class is useful for periodically running a task on a separate thread. For example, you could use a thread timer to check the status and integrity of a database or to back up critical files.  \n  \n## Thread Timer Example  \n The following example starts a task every two seconds and uses a flag to initiate the <xref:System.IDisposable.Dispose%2A> method that stops the timer. This example posts status to the output window.  \n  \n```vb  \nPrivate Class StateObjClass  \n    ' Used to hold parameters for calls to TimerTask.  \n    Public SomeValue As Integer  \n    Public TimerReference As System.Threading.Timer  \n    Public TimerCanceled As Boolean  \nEnd Class  \n  \nPublic Sub RunTimer()  \n    Dim StateObj As New StateObjClass  \n    StateObj.TimerCanceled = False  \n    StateObj.SomeValue = 1  \n    Dim TimerDelegate As New System.Threading.TimerCallback(AddressOf TimerTask)  \n    ' Create a timer that calls a procedure every 2 seconds.  \n    ' Note: There is no Start method; the timer starts running as soon as   \n    ' the instance is created.  \n    Dim TimerItem As New System.Threading.Timer(TimerDelegate, StateObj,  \n                                                2000, 2000)  \n    ' Save a reference for Dispose.  \n    StateObj.TimerReference = TimerItem  \n  \n    ' Run for ten loops.  \n    While StateObj.SomeValue < 10  \n        ' Wait one second.  \n        System.Threading.Thread.Sleep(1000)  \n    End While  \n  \n    ' Request Dispose of the timer object.  \n    StateObj.TimerCanceled = True  \nEnd Sub  \n  \nPrivate Sub TimerTask(ByVal StateObj As Object)  \n    Dim State As StateObjClass = CType(StateObj, StateObjClass)  \n    ' Use the interlocked class to increment the counter variable.  \n    System.Threading.Interlocked.Increment(State.SomeValue)  \n    System.Diagnostics.Debug.WriteLine(\"Launched new thread  \" & Now.ToString)  \n    If State.TimerCanceled Then  \n        ' Dispose Requested.  \n        State.TimerReference.Dispose()  \n        System.Diagnostics.Debug.WriteLine(\"Done  \" & Now)  \n    End If  \nEnd Sub  \n```  \n  \n Thread timers are particularly useful when the <xref:System.Windows.Forms.Timer?displayProperty=fullName> object is unavailable, such as when you are developing console applications.  \n  \n## See Also  \n <xref:System.Threading>   \n [Multithreaded Applications (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/multithreaded-applications.md)","nodes":[{"pos":[12,57],"content":"Thread Timers (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Thread Timers (Visual Basic) | Microsoft Docs","pos":[0,45]}]},{"pos":[438,466],"content":"Thread Timers (Visual Basic)","linkify":"Thread Timers (Visual Basic)","nodes":[{"content":"Thread Timers (Visual Basic)","pos":[0,28]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> class is useful for periodically running a task on a separate thread.","pos":[467,595],"source":"The <xref:System.Threading.Timer?displayProperty=fullName> class is useful for periodically running a task on a separate thread."},{"content":"For example, you could use a thread timer to check the status and integrity of a database or to back up critical files.","pos":[596,715]},{"pos":[724,744],"content":"Thread Timer Example","linkify":"Thread Timer Example","nodes":[{"content":"Thread Timer Example","pos":[0,20]}]},{"content":"The following example starts a task every two seconds and uses a flag to initiate the <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method that stops the timer.","pos":[748,899],"source":"The following example starts a task every two seconds and uses a flag to initiate the <xref:System.IDisposable.Dispose%2A> method that stops the timer."},{"content":"This example posts status to the output window.","pos":[900,947]},{"content":"Thread timers are particularly useful when the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</ph> object is unavailable, such as when you are developing console applications.","pos":[2573,2755],"source":"Thread timers are particularly useful when the <xref:System.Windows.Forms.Timer?displayProperty=fullName> object is unavailable, such as when you are developing console applications."},{"pos":[2764,2772],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading&gt;</ph>","pos":[2776,2799],"source":"<xref:System.Threading> "},{"content":"<bpt id=\"p1\"> [</bpt>Multithreaded Applications (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/multithreaded-applications.md)</ept>","pos":[2803,2940],"source":" [Multithreaded Applications (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/multithreaded-applications.md)"}]}