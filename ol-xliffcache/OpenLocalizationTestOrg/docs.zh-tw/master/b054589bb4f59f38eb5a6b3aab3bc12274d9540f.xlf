<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b054589bb4f59f38eb5a6b3aab3bc12274d9540f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\default-marshaling-for-strings.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0ffe6a0429aa176d76453364f9f35befb8d5495</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">681aadf10626096daf6aa9bf6dff1b274bd345a0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Default Marshaling for Strings | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Default Marshaling for Strings</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.StringBuilder?displayProperty=fullName&gt;</ph> classes have similar marshaling behavior.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Strings are marshaled as a COM-style <ph id="ph1">`BSTR`</ph> type or as a null-terminated string (a character array that ends with a null character).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The characters within the string can be marshaled as Unicode (the default on Windows systems) or ANSI.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic provides the following information on marshaling string types:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strings Used in Interfaces<ept id="p1">](#cpcondefaultmarshalingforstringsanchor1)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strings Used in Platform Invoke<ept id="p1">](#cpcondefaultmarshalingforstringsanchor5)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strings Used in Structures<ept id="p1">](#cpcondefaultmarshalingforstringsanchor2)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fixed-Length String Buffers<ept id="p1">](#cpcondefaultmarshalingforstringsanchor3)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Strings Used in Interfaces</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table shows the marshaling options for the string data type when marshaled as a method argument to unmanaged code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute provides several <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration values to marshal strings to COM interfaces.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Enumeration type</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description of unmanaged format</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UnmanagedType.BStr`</ph> (default)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A COM-style <ph id="ph1">`BSTR`</ph> with a prefixed length and Unicode characters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated array of ANSI characters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated array of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This table applies to strings.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, for <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>, the only options allowed are <ph id="ph2">`UnmanagedType.LPStr`</ph> and <ph id="ph3">`UnmanagedType.LPWStr`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example shows strings declared in the <ph id="ph1">`IStringWorker`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example shows the corresponding interface described in a type library.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Strings Used in Platform Invoke</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Platform invoke copies string arguments, converting from the .NET Framework format (Unicode) to the platform unmanaged format.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Strings are immutable and are not copied back from unmanaged memory to managed memory when the call returns.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following table lists the marshaling options for strings when marshaled as a method argument of a platform invoke call.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute provides several <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration values to marshal strings.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Enumeration type</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description of unmanaged format</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A COM-style <ph id="ph1">`BSTR`</ph> with a prefixed length and ANSI characters.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A COM-style <ph id="ph1">`BSTR`</ph> with a prefixed length and Unicode characters.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated array of ANSI characters.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated array of platform-dependent characters.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated array of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A COM-style <ph id="ph1">`BSTR`</ph> with a prefixed length and platform-dependent characters.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A value that enables Visual Basic .NET to change a string in unmanaged code, and have the results reflected in managed code.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This value is supported only for platform invoke.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is default value in Visual Basic for <ph id="ph1">`ByVal`</ph> strings.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This table applies to strings.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, for <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>, the only options allowed are <ph id="ph2">`LPStr`</ph>, <ph id="ph3">`LPTStr`</ph>, and <ph id="ph4">`LPWStr`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following type definition shows the correct use of <ph id="ph1">`MarshalAsAttribute`</ph> for platform invoke calls.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Strings Used in Structures</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Strings are valid members of structures; however, <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> buffers are invalid in structures.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following table shows the marshaling options for the string data type when the type is marshaled as a field.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute provides several <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration values to marshal strings to a field.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Enumeration type</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Description of unmanaged format</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A COM-style <ph id="ph1">`BSTR`</ph> with a prefixed length and Unicode characters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated array of ANSI characters.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated array of platform-dependent characters.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated array of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A fixed-length array of characters; the array's type is determined by the character set of the containing structure.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ByValTStr`</ph> type is used for inline, fixed-length character arrays that appear within a structure.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Other types apply to string references contained within structures that contain pointers to strings.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CharSet`</ph> argument of the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute that is applied to the containing structure determines the character format of strings in structures.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example structures contain string references and inline strings, as well as ANSI, Unicode, and platform-dependent characters.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Type Library Representation</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute to define the same structure in different formats.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Fixed-Length String Buffers</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In some circumstances, a fixed-length character buffer must be passed into unmanaged code to be manipulated.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Simply passing a string does not work in this case because the callee cannot modify the contents of the passed buffer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Even if the string is passed by reference, there is no way to initialize the buffer to a given size.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The solution is to pass a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> buffer as the argument instead of a string.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`StringBuilder`</ph> can be dereferenced and modified by the callee, provided it does not exceed the capacity of the <ph id="ph2">`StringBuilder`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It can also be initialized to a fixed length.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, if you initialize a <ph id="ph1">`StringBuilder`</ph> buffer to a capacity of <ph id="ph2">`N`</ph>, the marshaler provides a buffer of size (<ph id="ph3">`N`</ph>+1) characters.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The +1 accounts for the fact that the unmanaged string has a null terminator while <ph id="ph1">`StringBuilder`</ph> does not.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, the Microsoft Win32 API <ph id="ph1">`GetWindowText`</ph> function (defined in Windows.h) is a fixed-length character buffer that must be passed into unmanaged code to be manipulated.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LpString`</ph> points to a caller-allocated buffer of size <ph id="ph2">`nMaxCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The caller is expected to allocate the buffer and set the <ph id="ph1">`nMaxCount`</ph> argument to the size of the allocated buffer.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following code shows the <ph id="ph1">`GetWindowText`</ph> function declaration as defined in Windows.h.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`StringBuilder`</ph> can be dereferenced and modified by the callee, provided it does not exceed the capacity of the <ph id="ph2">`StringBuilder`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how <ph id="ph1">`StringBuilder`</ph> can be initialized to a fixed length.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Default Marshaling Behavior<ept id="p1">](../../../docs/framework/interop/default-marshaling-behavior.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Blittable and Non-Blittable Types<ept id="p1">](../../../docs/framework/interop/blittable-and-non-blittable-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Directional Attributes<ept id="p1">](http://msdn.microsoft.com/en-us/241ac5b5-928e-4969-8f58-1dbc048f9ea2)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Copying and Pinning<ept id="p1">](../../../docs/framework/interop/copying-and-pinning.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>