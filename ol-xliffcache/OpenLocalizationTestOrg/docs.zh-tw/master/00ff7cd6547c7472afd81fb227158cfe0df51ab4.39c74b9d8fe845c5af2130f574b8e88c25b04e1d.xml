{"content":"---\ntitle: \"Join Operations (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 5105e0da-1267-4c00-837a-f0e9602279b8\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Join Operations (C#)\nA *join* of two data sources is the association of objects in one data source with objects that share a common attribute in another data source.  \n  \n Joining is an important operation in queries that target data sources whose relationships to each other cannot be followed directly. In object-oriented programming, this could mean a correlation between objects that is not modeled, such as the backwards direction of a one-way relationship. An example of a one-way relationship is a Customer class that has a property of type City, but the City class does not have a property that is a collection of Customer objects. If you have a list of City objects and you want to find all the customers in each city, you could use a join operation to find them.  \n  \n The join methods provided in the LINQ framework are <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>. These methods perform equijoins, or joins that match two data sources based on equality of their keys. (For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned. The <xref:System.Linq.Enumerable.GroupJoin%2A> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins. A left outer join is a join that returns each element of the first (left) data source, even if it has no correlated elements in the other data source.  \n  \n The following illustration shows a conceptual view of two sets and the elements within those sets that are included in either an inner join or a left outer join.  \n  \n ![Two overlapping circles showing inner&#47;outer.](../../../../csharp/programming-guide/concepts/linq/media/joincircles.png \"JoinCircles\")  \n  \n## Methods  \n  \n|Method Name|Description|C# Query Expression Syntax|More Information|  \n|-----------------|-----------------|---------------------------------|----------------------|  \n|Join|Joins two sequences based on key selector functions and extracts pairs of values.|`join … in … on … equals …`|<xref:System.Linq.Enumerable.Join%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.Join%2A?displayProperty=fullName>|  \n|GroupJoin|Joins two sequences based on key selector functions and groups the resulting matches for each element.|`join … in … on … equals … into …`|<xref:System.Linq.Enumerable.GroupJoin%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.GroupJoin%2A?displayProperty=fullName>|  \n  \n## See Also  \n <xref:System.Linq>   \n [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)   \n [Anonymous Types](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)   \n [Formulate Joins and Cross-Product Queries](http://msdn.microsoft.com/library/d8072ede-0521-4670-9bec-1778ceeb875b)   \n [join clause](../../../../csharp/language-reference/keywords/join-clause.md)   \n [How to: Join by Using Composite Keys](../../../../csharp/programming-guide/linq-query-expressions/how-to-join-by-using-composite-keys.md)   \n [How to: Join Content from Dissimilar Files (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)   \n [How to: Order the Results of a Join Clause](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)   \n [How to: Perform Custom Join Operations](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-custom-join-operations.md)   \n [How to: Perform Grouped Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-grouped-joins.md)   \n [How to: Perform Inner Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-inner-joins.md)   \n [How to: Perform Left Outer Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-left-outer-joins.md)   \n [How to: Populate Object Collections from Multiple Sources (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)","nodes":[{"pos":[4,401],"embed":true,"restype":"x-metadata","content":"title: \"Join Operations (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 5105e0da-1267-4c00-837a-f0e9602279b8\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"Join Operations (C#) | Microsoft Docs","nodes":[{"pos":[0,37],"content":"Join Operations (C#) | Microsoft Docs","nodes":[{"content":"Join Operations (C#) | Microsoft Docs","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[408,428],"content":"Join Operations (C#)","linkify":"Join Operations (C#)","nodes":[{"content":"Join Operations (C#)","pos":[0,20]}]},{"pos":[429,573],"content":"A <bpt id=\"p1\">*</bpt>join<ept id=\"p1\">*</ept> of two data sources is the association of objects in one data source with objects that share a common attribute in another data source.","source":"A *join* of two data sources is the association of objects in one data source with objects that share a common attribute in another data source."},{"content":"Joining is an important operation in queries that target data sources whose relationships to each other cannot be followed directly.","pos":[580,712]},{"content":"In object-oriented programming, this could mean a correlation between objects that is not modeled, such as the backwards direction of a one-way relationship.","pos":[713,870]},{"content":"An example of a one-way relationship is a Customer class that has a property of type City, but the City class does not have a property that is a collection of Customer objects.","pos":[871,1047]},{"content":"If you have a list of City objects and you want to find all the customers in each city, you could use a join operation to find them.","pos":[1048,1180]},{"content":"The join methods provided in the LINQ framework are <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.","pos":[1187,1324],"source":"The join methods provided in the LINQ framework are <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>."},{"content":"These methods perform equijoins, or joins that match two data sources based on equality of their keys.","pos":[1325,1427]},{"content":"(For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned.","pos":[1428,1732],"source":" (For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins.","pos":[1733,1907],"source":" The <xref:System.Linq.Enumerable.GroupJoin%2A> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins."},{"content":"A left outer join is a join that returns each element of the first (left) data source, even if it has no correlated elements in the other data source.","pos":[1908,2058]},{"content":"The following illustration shows a conceptual view of two sets and the elements within those sets that are included in either an inner join or a left outer join.","pos":[2065,2226]},{"pos":[2233,2372],"content":"<bpt id=\"p1\">![</bpt>Two overlapping circles showing inner&amp;#47;outer.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../csharp/programming-guide/concepts/linq/media/joincircles.png \"</bpt>JoinCircles<ept id=\"p2\">\")</ept>","source":"![Two overlapping circles showing inner&#47;outer.](../../../../csharp/programming-guide/concepts/linq/media/joincircles.png \"JoinCircles\")"},{"pos":[2381,2388],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[2395,2406]},{"content":"Description","pos":[2407,2418]},{"content":"C# Query Expression Syntax","pos":[2419,2445]},{"content":"More Information","pos":[2446,2462]},{"content":"Join","pos":[2564,2568]},{"content":"Joins two sequences based on key selector functions and extracts pairs of values.","pos":[2569,2650]},{"content":"GroupJoin","pos":[2820,2829]},{"content":"Joins two sequences based on key selector functions and groups the resulting matches for each element.","pos":[2830,2932]},{"pos":[3124,3132],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[3159,3289],"source":"[Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3293,3388],"source":"[Anonymous Types](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Formulate Joins and Cross-Product Queries<ept id=\"p1\">](http://msdn.microsoft.com/library/d8072ede-0521-4670-9bec-1778ceeb875b)</ept><ph id=\"ph1\"> </ph>","pos":[3392,3508],"source":"[Formulate Joins and Cross-Product Queries](http://msdn.microsoft.com/library/d8072ede-0521-4670-9bec-1778ceeb875b) "},{"content":"<bpt id=\"p1\">[</bpt>join clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/join-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[3512,3589],"source":"[join clause](../../../../csharp/language-reference/keywords/join-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Join by Using Composite Keys<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-join-by-using-composite-keys.md)</ept><ph id=\"ph1\"> </ph>","pos":[3593,3732],"source":"[How to: Join by Using Composite Keys](../../../../csharp/programming-guide/linq-query-expressions/how-to-join-by-using-composite-keys.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Join Content from Dissimilar Files (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[3736,3895],"source":"[How to: Join Content from Dissimilar Files (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Order the Results of a Join Clause<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[3899,4050],"source":"[How to: Order the Results of a Join Clause](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Perform Custom Join Operations<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-custom-join-operations.md)</ept><ph id=\"ph1\"> </ph>","pos":[4054,4197],"source":"[How to: Perform Custom Join Operations](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-custom-join-operations.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Perform Grouped Joins<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-grouped-joins.md)</ept><ph id=\"ph1\"> </ph>","pos":[4201,4326],"source":"[How to: Perform Grouped Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-grouped-joins.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Perform Inner Joins<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-inner-joins.md)</ept><ph id=\"ph1\"> </ph>","pos":[4330,4451],"source":"[How to: Perform Inner Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-inner-joins.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Perform Left Outer Joins<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-left-outer-joins.md)</ept><ph id=\"ph1\"> </ph>","pos":[4455,4586],"source":"[How to: Perform Left Outer Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-left-outer-joins.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Populate Object Collections from Multiple Sources (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)</ept>","pos":[4590,4778],"source":"[How to: Populate Object Collections from Multiple Sources (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)"}]}