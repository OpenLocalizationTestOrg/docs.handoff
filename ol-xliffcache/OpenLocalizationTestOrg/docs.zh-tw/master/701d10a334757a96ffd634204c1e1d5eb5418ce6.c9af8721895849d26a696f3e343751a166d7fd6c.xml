{"content":"---\ntitle: \"Double Data Type (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Double\"\nhelpviewer_keywords: \n  - \"identifier type characters [Visual Basic], #\"\n  - \"trailing zeros\"\n  - \"real numbers\"\n  - \"trailing 0 characters [Visual Basic]\"\n  - \"0 characters [Visual Basic], trailing\"\n  - \"literal type characters [Visual Basic], R\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Double data type [Visual Basic]\"\n  - \"# identifier type character\"\n  - \"double-precision numbers\"\n  - \"floating-point numbers [Visual Basic], Double data type\"\n  - \"R literal type character [Visual Basic]\"\n  - \"zeros, trailing\"\n  - \"Double data type\"\nms.assetid: 0c5670f7-fcb1-453a-bef1-374730cd38fd\n---\n# Double Data Type (Visual Basic)\nHolds signed IEEE 64-bit (8-byte) double-precision floating-point numbers that range in value from -1.79769313486231570E+308 through -4.94065645841246544E-324 for negative values and from 4.94065645841246544E-324 through 1.79769313486231570E+308 for positive values. Double-precision numbers store an approximation of a real number.  \n  \n## Remarks  \n The `Double` data type provides the largest and smallest possible magnitudes for a number.  \n  \n The default value of `Double` is 0.  \n  \n## Programming Tips  \n  \n-   **Precision.** When you work with floating-point numbers, remember that they do not always have a precise representation in memory. This could lead to unexpected results from certain operations, such as value comparison and the `Mod` operator. For more information, see [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md).  \n  \n-   **Trailing Zeros.** The floating-point data types do not have any internal representation of trailing zero characters. For example, they do not distinguish between 4.2000 and 4.2. Consequently, trailing zero characters do not appear when you display or print floating-point values.  \n  \n-   **Type Characters.** Appending the literal type character `R` to a literal forces it to the `Double` data type. For example, if an integer value is followed by `R`, the value is changed to a `Double`.  \n  \n    ```  \n    ' Visual Basic expands the 4 in the statement Dim dub As Double = 4R to 4.0:  \n    Dim dub As Double = 4.0R  \n    ```  \n  \n     Appending the identifier type character `#` to any identifier forces it to `Double`. In the following example, the variable `num` is typed as a `Double`:  \n  \n    ```  \n    Dim num# = 3  \n    ```  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Double?displayProperty=nameWithType> structure.  \n  \n## See also\n\n- <xref:System.Double?displayProperty=nameWithType>\n- [Data Types](../../../visual-basic/language-reference/data-types/index.md)\n- [Decimal Data Type](../../../visual-basic/language-reference/data-types/decimal-data-type.md)\n- [Single Data Type](../../../visual-basic/language-reference/data-types/single-data-type.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)\n- [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n- [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)\n- [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)\n","nodes":[{"pos":[4,690],"embed":true,"restype":"x-metadata","content":"title: \"Double Data Type (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Double\"\nhelpviewer_keywords: \n  - \"identifier type characters [Visual Basic], #\"\n  - \"trailing zeros\"\n  - \"real numbers\"\n  - \"trailing 0 characters [Visual Basic]\"\n  - \"0 characters [Visual Basic], trailing\"\n  - \"literal type characters [Visual Basic], R\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Double data type [Visual Basic]\"\n  - \"# identifier type character\"\n  - \"double-precision numbers\"\n  - \"floating-point numbers [Visual Basic], Double data type\"\n  - \"R literal type character [Visual Basic]\"\n  - \"zeros, trailing\"\n  - \"Double data type\"\nms.assetid: 0c5670f7-fcb1-453a-bef1-374730cd38fd","nodes":[{"content":"Double Data Type (Visual Basic)","nodes":[{"pos":[0,31],"content":"Double Data Type (Visual Basic)","nodes":[{"content":"Double Data Type (Visual Basic)","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[697,728],"content":"Double Data Type (Visual Basic)","linkify":"Double Data Type (Visual Basic)","nodes":[{"content":"Double Data Type (Visual Basic)","pos":[0,31]}]},{"content":"Holds signed IEEE 64-bit (8-byte) double-precision floating-point numbers that range in value from -1.79769313486231570E+308 through -4.94065645841246544E-324 for negative values and from 4.94065645841246544E-324 through 1.79769313486231570E+308 for positive values.","pos":[729,995]},{"content":"Double-precision numbers store an approximation of a real number.","pos":[996,1061]},{"pos":[1070,1077],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1081,1171],"content":"The <ph id=\"ph1\">`Double`</ph> data type provides the largest and smallest possible magnitudes for a number.","source":"The `Double` data type provides the largest and smallest possible magnitudes for a number."},{"pos":[1178,1213],"content":"The default value of <ph id=\"ph1\">`Double`</ph> is 0.","source":"The default value of `Double` is 0."},{"pos":[1222,1238],"content":"Programming Tips","linkify":"Programming Tips","nodes":[{"content":"Programming Tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Precision.<ept id=\"p1\">**</ept>","pos":[1248,1262],"source":"**Precision.**"},{"content":"When you work with floating-point numbers, remember that they do not always have a precise representation in memory.","pos":[1263,1379]},{"content":"This could lead to unexpected results from certain operations, such as value comparison and the <ph id=\"ph1\">`Mod`</ph> operator.","pos":[1380,1491],"source":" This could lead to unexpected results from certain operations, such as value comparison and the `Mod` operator."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>.","pos":[1492,1647],"source":" For more information, see [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)."},{"content":"<bpt id=\"p1\">**</bpt>Trailing Zeros.<ept id=\"p1\">**</ept>","pos":[1657,1676],"source":"**Trailing Zeros.**"},{"content":"The floating-point data types do not have any internal representation of trailing zero characters.","pos":[1677,1775]},{"content":"For example, they do not distinguish between 4.2000 and 4.2.","pos":[1776,1836]},{"content":"Consequently, trailing zero characters do not appear when you display or print floating-point values.","pos":[1837,1938]},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[1948,1968],"source":"**Type Characters.**"},{"content":"Appending the literal type character <ph id=\"ph1\">`R`</ph> to a literal forces it to the <ph id=\"ph2\">`Double`</ph> data type.","pos":[1969,2059],"source":" Appending the literal type character `R` to a literal forces it to the `Double` data type."},{"content":"For example, if an integer value is followed by <ph id=\"ph1\">`R`</ph>, the value is changed to a <ph id=\"ph2\">`Double`</ph>.","pos":[2060,2148],"source":" For example, if an integer value is followed by `R`, the value is changed to a `Double`."},{"content":"Appending the identifier type character <ph id=\"ph1\">`#`</ph> to any identifier forces it to <ph id=\"ph2\">`Double`</ph>.","pos":[2296,2380],"source":"Appending the identifier type character `#` to any identifier forces it to `Double`."},{"content":"In the following example, the variable <ph id=\"ph1\">`num`</ph> is typed as a <ph id=\"ph2\">`Double`</ph>:","pos":[2381,2449],"source":" In the following example, the variable `num` is typed as a `Double`:"},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[2501,2520],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Double?displayProperty=nameWithType&gt;</ph> structure.","pos":[2521,2633],"source":" The corresponding type in the .NET Framework is the <xref:System.Double?displayProperty=nameWithType> structure."},{"pos":[2642,2650],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2706,2780],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[2783,2876],"content":"<bpt id=\"p1\">[</bpt>Decimal Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>","source":"[Decimal Data Type](../../../visual-basic/language-reference/data-types/decimal-data-type.md)"},{"pos":[2879,2970],"content":"<bpt id=\"p1\">[</bpt>Single Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>","source":"[Single Data Type](../../../visual-basic/language-reference/data-types/single-data-type.md)"},{"pos":[2973,3081],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[3084,3177],"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept>","source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)"},{"pos":[3180,3310],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"},{"pos":[3313,3441],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","source":"[Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"},{"pos":[3444,3550],"content":"<bpt id=\"p1\">[</bpt>Type Characters<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept>","source":"[Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)"}]}