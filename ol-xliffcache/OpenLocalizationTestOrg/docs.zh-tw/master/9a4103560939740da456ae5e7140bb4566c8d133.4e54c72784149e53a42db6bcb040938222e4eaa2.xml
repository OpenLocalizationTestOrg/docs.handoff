{"content":"---\ntitle: \"Take Clause (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.QueryTake\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Take statement\"\n  - \"queries [Visual Basic], Take\"\n  - \"Take clause\"\nms.assetid: 77bf87b2-1476-4456-957f-fee922fbad8c\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Take Clause (Visual Basic)\nReturns a specified number of contiguous elements from the start of a collection.  \n  \n## Syntax  \n  \n```  \nTake count  \n```  \n  \n## Parts  \n `count`  \n Required. A value or an expression that evaluates to the number of elements of the sequence to return.  \n  \n## Remarks  \n The `Take` clause causes a query to include a specified number of contiguous elements from the start of a results list. The number of elements to include is specified by the `count` parameter.  \n  \n You can use the `Take` clause with the `Skip` clause to return a range of data from any segment of a query. To do this, pass the index of the first element of the range to the `Skip` clause and the size of the range to the `Take` clause. In this case, the `Take` clause must be specified after the `Skip` clause.  \n  \n When you use the `Take` clause in a query, you may also need to ensure that the results are returned in an order that will enable the `Take` clause to include the intended results. For more information about ordering query results, see [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md).  \n  \n You can use the `TakeWhile` clause to specify that only certain elements be returned, depending on a supplied condition.  \n  \n## Example  \n The following code example uses the `Take` clause together with the `Skip` clause to return data from a query in pages. The GetCustomers function uses the `Skip` clause to bypass the customers in the list until the supplied starting index value, and uses the `Take` clause to return a page of customers starting from that index value.  \n  \n [!code-vb[VbSimpleQuerySamples#1](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/take-clause_1.vb)]  \n  \n## See Also  \n [Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)   \n [Queries](../../../visual-basic/language-reference/queries/queries.md)   \n [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)   \n [From Clause](../../../visual-basic/language-reference/queries/from-clause.md)   \n [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md)   \n [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md)   \n [Skip Clause](../../../visual-basic/language-reference/queries/skip-clause.md)","nodes":[{"pos":[12,55],"content":"Take Clause (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Take Clause (Visual Basic) | Microsoft Docs","pos":[0,43]}]},{"pos":[644,670],"content":"Take Clause (Visual Basic)","linkify":"Take Clause (Visual Basic)","nodes":[{"content":"Take Clause (Visual Basic)","pos":[0,26]}]},{"content":"Returns a specified number of contiguous elements from the start of a collection.","pos":[671,752]},{"pos":[761,767],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[804,809],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[824,833]},{"content":"A value or an expression that evaluates to the number of elements of the sequence to return.","pos":[834,926]},{"pos":[935,942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Take`</ph> clause causes a query to include a specified number of contiguous elements from the start of a results list.","pos":[946,1065],"source":"The `Take` clause causes a query to include a specified number of contiguous elements from the start of a results list."},{"content":"The number of elements to include is specified by the <ph id=\"ph1\">`count`</ph> parameter.","pos":[1066,1138],"source":" The number of elements to include is specified by the `count` parameter."},{"content":"You can use the <ph id=\"ph1\">`Take`</ph> clause with the <ph id=\"ph2\">`Skip`</ph> clause to return a range of data from any segment of a query.","pos":[1145,1252],"source":"You can use the `Take` clause with the `Skip` clause to return a range of data from any segment of a query."},{"content":"To do this, pass the index of the first element of the range to the <ph id=\"ph1\">`Skip`</ph> clause and the size of the range to the <ph id=\"ph2\">`Take`</ph> clause.","pos":[1253,1382],"source":" To do this, pass the index of the first element of the range to the `Skip` clause and the size of the range to the `Take` clause."},{"content":"In this case, the <ph id=\"ph1\">`Take`</ph> clause must be specified after the <ph id=\"ph2\">`Skip`</ph> clause.","pos":[1383,1457],"source":" In this case, the `Take` clause must be specified after the `Skip` clause."},{"content":"When you use the <ph id=\"ph1\">`Take`</ph> clause in a query, you may also need to ensure that the results are returned in an order that will enable the <ph id=\"ph2\">`Take`</ph> clause to include the intended results.","pos":[1464,1644],"source":"When you use the `Take` clause in a query, you may also need to ensure that the results are returned in an order that will enable the `Take` clause to include the intended results."},{"content":"For more information about ordering query results, see <bpt id=\"p1\">[</bpt>Order By Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/order-by-clause.md)</ept>.","pos":[1645,1787],"source":" For more information about ordering query results, see [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md)."},{"pos":[1794,1914],"content":"You can use the <ph id=\"ph1\">`TakeWhile`</ph> clause to specify that only certain elements be returned, depending on a supplied condition.","source":"You can use the `TakeWhile` clause to specify that only certain elements be returned, depending on a supplied condition."},{"pos":[1923,1930],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example uses the <ph id=\"ph1\">`Take`</ph> clause together with the <ph id=\"ph2\">`Skip`</ph> clause to return data from a query in pages.","pos":[1934,2053],"source":"The following code example uses the `Take` clause together with the `Skip` clause to return data from a query in pages."},{"content":"The GetCustomers function uses the <ph id=\"ph1\">`Skip`</ph> clause to bypass the customers in the list until the supplied starting index value, and uses the <ph id=\"ph2\">`Take`</ph> clause to return a page of customers starting from that index value.","pos":[2054,2268],"source":" The GetCustomers function uses the `Skip` clause to bypass the customers in the list until the supplied starting index value, and uses the `Take` clause to return a page of customers starting from that index value."},{"pos":[2275,2400],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbSimpleQuerySamples#1<ept id=\"p2\">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/take-clause_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbSimpleQuerySamples#1](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/take-clause_1.vb)]"},{"pos":[2409,2417],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[2421,2548],"source":"[Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/queries.md)</ept><ph id=\"ph1\"> </ph>","pos":[2551,2623],"source":" [Queries](../../../visual-basic/language-reference/queries/queries.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Select Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2626,2710],"source":" [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>From Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/from-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2713,2793],"source":" [From Clause](../../../visual-basic/language-reference/queries/from-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Order By Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/order-by-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2796,2884],"source":" [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Take While Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/take-while-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2887,2979],"source":" [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Skip Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/skip-clause.md)</ept>","pos":[2982,3061],"source":" [Skip Clause](../../../visual-basic/language-reference/queries/skip-clause.md)"}]}