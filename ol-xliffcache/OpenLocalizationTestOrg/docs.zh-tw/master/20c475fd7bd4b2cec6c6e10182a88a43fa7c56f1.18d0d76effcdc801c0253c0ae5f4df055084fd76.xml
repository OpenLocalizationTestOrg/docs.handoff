{"content":"---\ntitle: \"How to: Create Property Grids for User Settings in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"My.Settings object [Visual Basic], creating property grids for user settings\"\n  - \"user settings [Visual Basic], creating property grids\"\n  - \"property grids [Visual Basic], creating for user settings\"\n  - \"property grids\"\nms.assetid: b0bc737e-50d1-43d1-a6df-268db6e6f91c\n---\n# How to: Create Property Grids for User Settings in Visual Basic\nYou can create a property grid for user settings by populating a <xref:System.Windows.Forms.PropertyGrid> control with the user setting properties of the `My.Settings` object.  \n  \n> [!NOTE]\n>  In order for this example to work, your application must have its user settings configured. For more information, see [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet).  \n  \n The `My.Settings` object exposes each setting as a property. The property name is the same as the setting name, and the property type is the same as the setting type. The setting's **Scope** determines if the property is read-only; the property for an **Application**-scope setting is read-only, while the property for a **User**-scope setting is read-write. For more information, see [My.Settings Object](../../../../visual-basic/language-reference/objects/my-settings-object.md).  \n  \n> [!NOTE]\n>  You cannot change or save the values of application-scope settings at run time. Application-scope settings can be changed only when creating the application (through the **Project Designer**) or by editing the application's configuration file. For more information, see [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet).  \n  \n This example uses a <xref:System.Windows.Forms.PropertyGrid> control to access the user-setting properties of the `My.Settings` object. By default, the <xref:System.Windows.Forms.PropertyGrid> shows all the properties of the `My.Settings` object. However, the user-setting properties have the <xref:System.Configuration.UserScopedSettingAttribute> attribute. This example sets the <xref:System.Windows.Forms.PropertyGrid.BrowsableAttributes%2A> property of the <xref:System.Windows.Forms.PropertyGrid> to <xref:System.Configuration.UserScopedSettingAttribute> to display only the user-setting properties.  \n  \n### To add a user setting property grid  \n  \n1.  Add the **PropertyGrid** control from the **Toolbox** to the design surface for your application, assumed here to be `Form1`.  \n  \n     The default name of the property-grid control is `PropertyGrid1`.  \n  \n2.  Double-click the design surface for `Form1` to open the code for the form-load event handler.  \n  \n3.  Set the `My.Settings` object as the selected object for the property grid.  \n  \n     [!code-vb[VbVbalrMyResources#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#11)]  \n  \n4.  Configure the property grid to show only the user settings.  \n  \n     [!code-vb[VbVbalrMyResources#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#12)]  \n  \n    > [!NOTE]\n    >  To show only the application-scope settings, use the <xref:System.Configuration.ApplicationScopedSettingAttribute> attribute instead of  <xref:System.Configuration.UserScopedSettingAttribute>.  \n  \n## Robust Programming  \n The application saves the user settings when the application shuts down. To save the settings immediately, call the `My.Settings.Save` method. For more information, see [How to: Persist User Settings in Visual Basic](../../../../visual-basic/developing-apps/programming/app-settings/how-to-persist-user-settings.md).  \n  \n## See also\n\n- [My.Settings Object](../../../../visual-basic/language-reference/objects/my-settings-object.md)\n- [How to: Read Application Settings in Visual Basic](../../../../visual-basic/developing-apps/programming/app-settings/how-to-read-application-settings.md)\n- [How to: Change User Settings in Visual Basic](../../../../visual-basic/developing-apps/programming/app-settings/how-to-change-user-settings.md)\n- [How to: Persist User Settings in Visual Basic](../../../../visual-basic/developing-apps/programming/app-settings/how-to-persist-user-settings.md)\n- [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet)\n","nodes":[{"pos":[4,395],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create Property Grids for User Settings in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"My.Settings object [Visual Basic], creating property grids for user settings\"\n  - \"user settings [Visual Basic], creating property grids\"\n  - \"property grids [Visual Basic], creating for user settings\"\n  - \"property grids\"\nms.assetid: b0bc737e-50d1-43d1-a6df-268db6e6f91c","nodes":[{"content":"How to: Create Property Grids for User Settings in Visual Basic","nodes":[{"pos":[0,63],"content":"How to: Create Property Grids for User Settings in Visual Basic","nodes":[{"content":"How to: Create Property Grids for User Settings in Visual Basic","pos":[0,63]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[402,465],"content":"How to: Create Property Grids for User Settings in Visual Basic","linkify":"How to: Create Property Grids for User Settings in Visual Basic","nodes":[{"content":"How to: Create Property Grids for User Settings in Visual Basic","pos":[0,63]}]},{"pos":[466,641],"content":"You can create a property grid for user settings by populating a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PropertyGrid&gt;</ph> control with the user setting properties of the <ph id=\"ph2\">`My.Settings`</ph> object.","source":"You can create a property grid for user settings by populating a <xref:System.Windows.Forms.PropertyGrid> control with the user setting properties of the `My.Settings` object."},{"pos":[649,873],"content":"[!NOTE]\n In order for this example to work, your application must have its user settings configured. For more information, see [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet).","leadings":["","> "],"nodes":[{"content":"In order for this example to work, your application must have its user settings configured. For more information, see [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet).","pos":[9,222],"nodes":[{"content":"In order for this example to work, your application must have its user settings configured.","pos":[0,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Managing Application Settings (.NET)<ept id=\"p1\">](/visualstudio/ide/managing-application-settings-dotnet)</ept>.","pos":[92,213],"source":" For more information, see [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet)."}]}]},{"content":"The <ph id=\"ph1\">`My.Settings`</ph> object exposes each setting as a property.","pos":[880,940],"source":"The `My.Settings` object exposes each setting as a property."},{"content":"The property name is the same as the setting name, and the property type is the same as the setting type.","pos":[941,1046]},{"content":"The setting's <bpt id=\"p1\">**</bpt>Scope<ept id=\"p1\">**</ept> determines if the property is read-only; the property for an <bpt id=\"p2\">**</bpt>Application<ept id=\"p2\">**</ept>-scope setting is read-only, while the property for a <bpt id=\"p3\">**</bpt>User<ept id=\"p3\">**</ept>-scope setting is read-write.","pos":[1047,1238],"source":" The setting's **Scope** determines if the property is read-only; the property for an **Application**-scope setting is read-only, while the property for a **User**-scope setting is read-write."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>My.Settings Object<ept id=\"p1\">](../../../../visual-basic/language-reference/objects/my-settings-object.md)</ept>.","pos":[1239,1361],"source":" For more information, see [My.Settings Object](../../../../visual-basic/language-reference/objects/my-settings-object.md)."},{"pos":[1369,1745],"content":"[!NOTE]\n You cannot change or save the values of application-scope settings at run time. Application-scope settings can be changed only when creating the application (through the **Project Designer**) or by editing the application's configuration file. For more information, see [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet).","leadings":["","> "],"nodes":[{"content":"You cannot change or save the values of application-scope settings at run time. Application-scope settings can be changed only when creating the application (through the **Project Designer**) or by editing the application's configuration file. For more information, see [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet).","pos":[9,374],"nodes":[{"content":"You cannot change or save the values of application-scope settings at run time.","pos":[0,79]},{"content":"Application-scope settings can be changed only when creating the application (through the <bpt id=\"p1\">**</bpt>Project Designer<ept id=\"p1\">**</ept>) or by editing the application's configuration file.","pos":[80,243],"source":" Application-scope settings can be changed only when creating the application (through the **Project Designer**) or by editing the application's configuration file."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Managing Application Settings (.NET)<ept id=\"p1\">](/visualstudio/ide/managing-application-settings-dotnet)</ept>.","pos":[244,365],"source":" For more information, see [Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet)."}]}]},{"content":"This example uses a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PropertyGrid&gt;</ph> control to access the user-setting properties of the <ph id=\"ph2\">`My.Settings`</ph> object.","pos":[1752,1887],"source":"This example uses a <xref:System.Windows.Forms.PropertyGrid> control to access the user-setting properties of the `My.Settings` object."},{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PropertyGrid&gt;</ph> shows all the properties of the <ph id=\"ph2\">`My.Settings`</ph> object.","pos":[1888,1998],"source":" By default, the <xref:System.Windows.Forms.PropertyGrid> shows all the properties of the `My.Settings` object."},{"content":"However, the user-setting properties have the <ph id=\"ph1\">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph> attribute.","pos":[1999,2110],"source":" However, the user-setting properties have the <xref:System.Configuration.UserScopedSettingAttribute> attribute."},{"content":"This example sets the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PropertyGrid.BrowsableAttributes%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.PropertyGrid&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph> to display only the user-setting properties.","pos":[2111,2356],"source":" This example sets the <xref:System.Windows.Forms.PropertyGrid.BrowsableAttributes%2A> property of the <xref:System.Windows.Forms.PropertyGrid> to <xref:System.Configuration.UserScopedSettingAttribute> to display only the user-setting properties."},{"pos":[2366,2401],"content":"To add a user setting property grid","linkify":"To add a user setting property grid","nodes":[{"content":"To add a user setting property grid","pos":[0,35]}]},{"pos":[2411,2536],"content":"Add the <bpt id=\"p1\">**</bpt>PropertyGrid<ept id=\"p1\">**</ept> control from the <bpt id=\"p2\">**</bpt>Toolbox<ept id=\"p2\">**</ept> to the design surface for your application, assumed here to be <ph id=\"ph1\">`Form1`</ph>.","source":"Add the **PropertyGrid** control from the **Toolbox** to the design surface for your application, assumed here to be `Form1`."},{"pos":[2547,2612],"content":"The default name of the property-grid control is <ph id=\"ph1\">`PropertyGrid1`</ph>.","source":"The default name of the property-grid control is `PropertyGrid1`."},{"pos":[2622,2715],"content":"Double-click the design surface for <ph id=\"ph1\">`Form1`</ph> to open the code for the form-load event handler.","source":"Double-click the design surface for `Form1` to open the code for the form-load event handler."},{"pos":[2725,2799],"content":"Set the <ph id=\"ph1\">`My.Settings`</ph> object as the selected object for the property grid.","source":"Set the `My.Settings` object as the selected object for the property grid."},{"content":"Configure the property grid to show only the user settings.","pos":[2940,2999]},{"pos":[3142,3349],"content":"[!NOTE]\nTo show only the application-scope settings, use the <xref:System.Configuration.ApplicationScopedSettingAttribute> attribute instead of  <xref:System.Configuration.UserScopedSettingAttribute>.","leadings":["","    >  "],"nodes":[{"content":"To show only the application-scope settings, use the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</ph> attribute instead of  <ph id=\"ph2\">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph>.","pos":[8,200],"source":"To show only the application-scope settings, use the <xref:System.Configuration.ApplicationScopedSettingAttribute> attribute instead of  <xref:System.Configuration.UserScopedSettingAttribute>."}]},{"pos":[3358,3376],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"The application saves the user settings when the application shuts down.","pos":[3380,3452]},{"content":"To save the settings immediately, call the <ph id=\"ph1\">`My.Settings.Save`</ph> method.","pos":[3453,3522],"source":" To save the settings immediately, call the `My.Settings.Save` method."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Persist User Settings in Visual Basic<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/app-settings/how-to-persist-user-settings.md)</ept>.","pos":[3523,3696],"source":" For more information, see [How to: Persist User Settings in Visual Basic](../../../../visual-basic/developing-apps/programming/app-settings/how-to-persist-user-settings.md)."},{"pos":[3705,3713],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3717,3812],"content":"<bpt id=\"p1\">[</bpt>My.Settings Object<ept id=\"p1\">](../../../../visual-basic/language-reference/objects/my-settings-object.md)</ept>","source":"[My.Settings Object](../../../../visual-basic/language-reference/objects/my-settings-object.md)"},{"pos":[3815,3969],"content":"<bpt id=\"p1\">[</bpt>How to: Read Application Settings in Visual Basic<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/app-settings/how-to-read-application-settings.md)</ept>","source":"[How to: Read Application Settings in Visual Basic](../../../../visual-basic/developing-apps/programming/app-settings/how-to-read-application-settings.md)"},{"pos":[3972,4116],"content":"<bpt id=\"p1\">[</bpt>How to: Change User Settings in Visual Basic<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/app-settings/how-to-change-user-settings.md)</ept>","source":"[How to: Change User Settings in Visual Basic](../../../../visual-basic/developing-apps/programming/app-settings/how-to-change-user-settings.md)"},{"pos":[4119,4265],"content":"<bpt id=\"p1\">[</bpt>How to: Persist User Settings in Visual Basic<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/app-settings/how-to-persist-user-settings.md)</ept>","source":"[How to: Persist User Settings in Visual Basic](../../../../visual-basic/developing-apps/programming/app-settings/how-to-persist-user-settings.md)"},{"pos":[4268,4362],"content":"<bpt id=\"p1\">[</bpt>Managing Application Settings (.NET)<ept id=\"p1\">](/visualstudio/ide/managing-application-settings-dotnet)</ept>","source":"[Managing Application Settings (.NET)](/visualstudio/ide/managing-application-settings-dotnet)"}]}