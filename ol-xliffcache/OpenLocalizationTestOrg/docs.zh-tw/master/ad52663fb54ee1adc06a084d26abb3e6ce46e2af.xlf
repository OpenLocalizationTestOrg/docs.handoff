<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="type-relationships-in-linq-query-operations.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad52663fb54ee1adc06a084d26abb3e6ce46e2af</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\type-relationships-in-linq-query-operations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c77e89b1b876ebdcf6b7a2ea0710d8324aee7dc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a86e377f9cd5a9ae491baca54c91e70ed452f25b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Type Relationships in LINQ Query Operations (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type Relationships in LINQ Query Operations (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To write queries effectively, you should understand how types of the variables in a complete query operation all relate to each other.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you understand these relationships you will more easily comprehend the <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> samples and code examples in the documentation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Furthermore, you will understand what occurs behind the scenes when variables are implicitly typed by using <ph id="ph1">`var`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>query operations are strongly typed in the data source, in the query itself, and in the query execution.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of the variables in the query must be compatible with the type of the elements in the data source and with the type of the iteration variable in the <ph id="ph1">`foreach`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This strong typing guarantees that type errors are caught at compile time when they can be corrected before users encounter them.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In order to demonstrate these type relationships, most of the examples that follow use explicit typing for all variables.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The last example shows how the same principles apply even when you use implicit typing by using <bpt id="p1">[</bpt>var<ept id="p1">](../../../../csharp/language-reference/keywords/var.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Queries that do not Transform the Source Data</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following illustration shows a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> to Objects query operation that performs no transformations on the data.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The source contains a sequence of strings and the query output is also a sequence of strings.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Relation of data types in a LINQ query<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/linq_flow1.png "</bpt>LINQ_flow1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type argument of the data source determines the type of the range variable.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The type of the object that is selected determines the type of the query variable.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Here <ph id="ph1">`name`</ph> is a string.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, the query variable is an <ph id="ph1">`IEnumerable`</ph><ph id="ph2">\&lt;</ph>string&gt;.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The query variable is iterated over in the <ph id="ph1">`foreach`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because the query variable is a sequence of strings, the iteration variable is also a string.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Queries that Transform the Source Data</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following illustration shows a <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> query operation that performs a simple transformation on the data.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The query takes a sequence of <ph id="ph1">`Customer`</ph> objects as input, and selects only the <ph id="ph2">`Name`</ph> property in the result.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Name`</ph> is a string, the query produces a sequence of strings as output.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A query that transforms the data type<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/linq_flow2.png "</bpt>LINQ_flow2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type argument of the data source determines the type of the range variable.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`select`</ph> statement returns the <ph id="ph2">`Name`</ph> property instead of the complete <ph id="ph3">`Customer`</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Name`</ph> is a string, the type argument of <ph id="ph2">`custNameQuery`</ph> is <ph id="ph3">`string`</ph>, not <ph id="ph4">`Customer`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`custNameQuery`</ph> is a sequence of strings, the <ph id="ph2">`foreach`</ph> loop's iteration variable must also be a <ph id="ph3">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following illustration shows a slightly more complex transformation.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`select`</ph> statement returns an anonymous type that captures just two members of the original <ph id="ph2">`Customer`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A query that transforms the data type<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/linq_flow3.png "</bpt>LINQ_flow3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type argument of the data source is always the type of the range variable in the query.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`select`</ph> statement produces an anonymous type, the query variable must be implicitly typed by using <ph id="ph2">`var`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because the type of the query variable is implicit, the iteration variable in the <ph id="ph1">`foreach`</ph> loop must also be implicit.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Letting the compiler infer type information</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Although you should understand the type relationships in a query operation, you have the option to let the compiler do all the work for you.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The keyword <bpt id="p1">[</bpt>var<ept id="p1">](../../../../csharp/language-reference/keywords/var.md)</ept> can be used for any local variable in a query operation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following illustration is similar to example number 2 that was discussed earlier.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, the compiler supplies the strong type for each variable in the query operation.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Type flow with implicit typing<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/linq_flow4.png "</bpt>LINQ_flow4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`var`</ph>, see <bpt id="p1">[</bpt>Implicitly Typed Local Variables<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in C#<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>