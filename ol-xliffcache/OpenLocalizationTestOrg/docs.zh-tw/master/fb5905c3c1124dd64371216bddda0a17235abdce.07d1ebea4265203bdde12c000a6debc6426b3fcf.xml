{"content":"---\ntitle: \"Debugging Expression Trees in Visual Studio (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 492cc28f-b7a2-4c47-b582-b3c437b8a5d5\n---\n\n# Debugging Expression Trees in Visual Studio (Visual Basic)\n\nYou can analyze the structure and content of expression trees when you debug your applications. To get a quick overview of the expression tree structure, you can use the `DebugView` property, which is available only in debug mode. For more information about debugging, see [Debugging in Visual Studio](/visualstudio/debugger/debugging-in-visual-studio).\n\nTo better represent the content of expression trees, the `DebugView` property uses Visual Studio visualizers. For more information, see [Create Custom Visualizers](/visualstudio/debugger/create-custom-visualizers-of-data).\n\n### To open a visualizer for an expression tree\n\n1. Click the magnifying glass icon that appears next to the `DebugView` property of an expression tree in **DataTips**, a **Watch** window, the **Autos** window, or the **Locals** window.\n\n    A list of visualizers is displayed.\n\n2. Click the visualizer you want to use.\n\nEach expression type is displayed in the visualizer as described in the following sections.\n\n## ParameterExpressions\n\n<xref:System.Linq.Expressions.ParameterExpression> variable names are displayed with a \"$\" symbol at the beginning.\n\nIf a parameter does not have a name, it is assigned an automatically generated name, such as `$var1` or `$var2`.\n\n### Examples\n\n- `Expression`\n\n    ```vb\n    Dim numParam As ParameterExpression =\n    Expression.Parameter(GetType(Integer), \"num\")\n    ```\n\n    `DebugView` property\n\n    `$num`\n\n- `Expression`\n\n    ```vb\n    Dim numParam As ParameterExpression =\n    Expression.Parameter(GetType(Integer))\n    ```\n\n    `DebugView` property\n\n    `$var1`\n\n## ConstantExpressions\n For <xref:System.Linq.Expressions.ConstantExpression> objects that represent integer values, strings, and `null`, the value of the constant is displayed.\n\n### Examples\n\n- `Expression`\n\n    ```vb\n    Dim num as Integer= 10\n    Dim expr As ConstantExpression = Expression.Constant(num)\n    ```\n\n    `DebugView` property\n\n    10\n\n- `Expression`\n\n    ```vb\n    Dim num As Double = 10\n    Dim expr As ConstantExpression = Expression.Constant(num)\n    ```\n\n    `DebugView` property\n\n    10D\n\n## BlockExpression\n\nIf the type of a <xref:System.Linq.Expressions.BlockExpression> object differs from the type of the last expression in the block, the type is displayed in the `DebugInfo` property in angle brackets (\\< and >). Otherwise, the type of the <xref:System.Linq.Expressions.BlockExpression> object is not displayed.\n\n### Examples\n\n- `Expression`\n\n    ```vb\n    Dim block As BlockExpression = Expression.Block(Expression.Constant(\"test\"))\n    ```\n\n    `DebugView` property\n\n    `.Block() {`\n\n    `\"test\"`\n\n    `}`\n\n- `Expression`\n\n    ```vb\n    Dim block As BlockExpression =\n    Expression.Block(GetType(Object), Expression.Constant(\"test\"))\n    ```\n\n    `DebugView` property\n\n    `.Block<System.Object>() {`\n\n    `\"test\"`\n\n    `}`\n\n## LambdaExpression\n\n<xref:System.Linq.Expressions.LambdaExpression> objects are displayed together with their delegate types.\n\nIf a lambda expression does not have a name, it is assigned an automatically generated name, such as `#Lambda1` or `#Lambda2`.\n\n### Examples\n\n- `Expression`\n\n    ```vb\n    Dim lambda As LambdaExpression =\n    Expression.Lambda(Of Func(Of Integer))(Expression.Constant(1))\n    ```\n\n    `DebugView` property\n\n    `.Lambda #Lambda1<System.Func'1[System.Int32]>() {`\n\n    `1`\n\n    `}`\n\n- `Expression`\n\n    ```vb\n    Dim lambda As LambdaExpression =\n    Expression.Lambda(Of Func(Of Integer))(Expression.Constant(1), \"SampleLambda\", Nothing)\n    ```\n\n    `DebugView` property\n\n    `.Lambda SampleLambda<System.Func'1[System.Int32]>() {`\n\n    `1`\n\n    `}`\n\n## LabelExpression\n\nIf you specify a default value for the <xref:System.Linq.Expressions.LabelExpression> object, this value is displayed before the <xref:System.Linq.Expressions.LabelTarget> object.\n\nThe `.Label` token indicates the start of the label. The `.LabelTarget` token indicates the destination of the target to jump to.\n\nIf a label does not have a name, it is assigned an automatically generated name, such as `#Label1` or `#Label2`.\n\n### Examples\n\n- `Expression`\n\n    ```vb\n    Dim target As LabelTarget = Expression.Label(GetType(Integer), \"SampleLabel\")\n    Dim label1 As BlockExpression = Expression.Block(\n    Expression.Goto(target, Expression.Constant(0)),\n    Expression.Label(target, Expression.Constant(-1)))\n    ```\n\n    `DebugView` property\n\n    `.Block() {`\n\n    `.Goto SampleLabel { 0 };`\n\n    `.Label`\n\n    `-1`\n\n    `.LabelTarget SampleLabel:`\n\n    `}`\n\n- `Expression`\n\n    ```vb\n    Dim target As LabelTarget = Expression.Label()\n    Dim block As BlockExpression = Expression.Block(\n    Expression.Goto(target), Expression.Label(target))\n    ```\n\n    `DebugView` property\n\n    `.Block() {`\n\n    `.Goto #Label1 { };`\n\n    `.Label`\n\n    `.LabelTarget #Label1:`\n\n    `}`\n\n## Checked Operators\n\nChecked operators are displayed with the \"#\" symbol in front of the operator. For example, the checked addition operator is displayed as `#+`.\n\n### Examples\n\n- `Expression`\n\n    ```vb\n    Dim expr As Expression = Expression.AddChecked(\n    Expression.Constant(1), Expression.Constant(2))\n    ```\n\n    `DebugView` property\n\n    `1 #+ 2`\n\n- `Expression`\n\n    ```vb\n    Dim expr As Expression = Expression.ConvertChecked(\n    Expression.Constant(10.0), GetType(Integer))\n    ```\n\n    `DebugView` property\n\n    `#(System.Int32)10D`\n\n## See also\n\n- [Expression Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/expression-trees/index.md)\n- [Debugging in Visual Studio](/visualstudio/debugger/debugging-in-visual-studio)\n- [Create Custom Visualizers](/visualstudio/debugger/create-custom-visualizers-of-data)\n","nodes":[{"pos":[4,140],"embed":true,"restype":"x-metadata","content":"title: \"Debugging Expression Trees in Visual Studio (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 492cc28f-b7a2-4c47-b582-b3c437b8a5d5","nodes":[{"content":"Debugging Expression Trees in Visual Studio (Visual Basic)","nodes":[{"pos":[0,58],"content":"Debugging Expression Trees in Visual Studio (Visual Basic)","nodes":[{"content":"Debugging Expression Trees in Visual Studio (Visual Basic)","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[148,206],"content":"Debugging Expression Trees in Visual Studio (Visual Basic)","linkify":"Debugging Expression Trees in Visual Studio (Visual Basic)","nodes":[{"content":"Debugging Expression Trees in Visual Studio (Visual Basic)","pos":[0,58]}]},{"content":"You can analyze the structure and content of expression trees when you debug your applications.","pos":[208,303]},{"content":"To get a quick overview of the expression tree structure, you can use the <ph id=\"ph1\">`DebugView`</ph> property, which is available only in debug mode.","pos":[304,438],"source":" To get a quick overview of the expression tree structure, you can use the `DebugView` property, which is available only in debug mode."},{"content":"For more information about debugging, see <bpt id=\"p1\">[</bpt>Debugging in Visual Studio<ept id=\"p1\">](/visualstudio/debugger/debugging-in-visual-studio)</ept>.","pos":[439,561],"source":" For more information about debugging, see [Debugging in Visual Studio](/visualstudio/debugger/debugging-in-visual-studio)."},{"content":"To better represent the content of expression trees, the <ph id=\"ph1\">`DebugView`</ph> property uses Visual Studio visualizers.","pos":[563,672],"source":"To better represent the content of expression trees, the `DebugView` property uses Visual Studio visualizers."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Create Custom Visualizers<ept id=\"p1\">](/visualstudio/debugger/create-custom-visualizers-of-data)</ept>.","pos":[673,785],"source":" For more information, see [Create Custom Visualizers](/visualstudio/debugger/create-custom-visualizers-of-data)."},{"pos":[791,834],"content":"To open a visualizer for an expression tree","linkify":"To open a visualizer for an expression tree","nodes":[{"content":"To open a visualizer for an expression tree","pos":[0,43]}]},{"pos":[839,1023],"content":"Click the magnifying glass icon that appears next to the <ph id=\"ph1\">`DebugView`</ph> property of an expression tree in <bpt id=\"p1\">**</bpt>DataTips<ept id=\"p1\">**</ept>, a <bpt id=\"p2\">**</bpt>Watch<ept id=\"p2\">**</ept> window, the <bpt id=\"p3\">**</bpt>Autos<ept id=\"p3\">**</ept> window, or the <bpt id=\"p4\">**</bpt>Locals<ept id=\"p4\">**</ept> window.","source":"Click the magnifying glass icon that appears next to the `DebugView` property of an expression tree in **DataTips**, a **Watch** window, the **Autos** window, or the **Locals** window."},{"content":"A list of visualizers is displayed.","pos":[1029,1064]},{"content":"Click the visualizer you want to use.","pos":[1069,1106]},{"content":"Each expression type is displayed in the visualizer as described in the following sections.","pos":[1108,1199]},{"pos":[1204,1224],"content":"ParameterExpressions","linkify":"ParameterExpressions","nodes":[{"content":"ParameterExpressions","pos":[0,20]}]},{"pos":[1226,1341],"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph> variable names are displayed with a \"$\" symbol at the beginning.","source":"<xref:System.Linq.Expressions.ParameterExpression> variable names are displayed with a \"$\" symbol at the beginning."},{"pos":[1343,1455],"content":"If a parameter does not have a name, it is assigned an automatically generated name, such as <ph id=\"ph1\">`$var1`</ph> or <ph id=\"ph2\">`$var2`</ph>.","source":"If a parameter does not have a name, it is assigned an automatically generated name, such as `$var1` or `$var2`."},{"pos":[1461,1469],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1602,1622],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[1760,1780],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[1798,1817],"content":"ConstantExpressions","linkify":"ConstantExpressions","nodes":[{"content":"ConstantExpressions","pos":[0,19]}]},{"pos":[1819,1972],"content":"For <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> objects that represent integer values, strings, and <ph id=\"ph2\">`null`</ph>, the value of the constant is displayed.","source":"For <xref:System.Linq.Expressions.ConstantExpression> objects that represent integer values, strings, and `null`, the value of the constant is displayed."},{"pos":[1978,1986],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[2116,2136],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"content":"10","pos":[2142,2144]},{"pos":[2274,2294],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"content":"10D","pos":[2300,2303]},{"pos":[2308,2323],"content":"BlockExpression","linkify":"BlockExpression","nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"content":"If the type of a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BlockExpression&gt;</ph> object differs from the type of the last expression in the block, the type is displayed in the <ph id=\"ph2\">`DebugInfo`</ph> property in angle brackets (<ph id=\"ph3\">\\&lt;</ph> and &gt;).","pos":[2325,2534],"source":"If the type of a <xref:System.Linq.Expressions.BlockExpression> object differs from the type of the last expression in the block, the type is displayed in the `DebugInfo` property in angle brackets (\\< and >)."},{"content":"Otherwise, the type of the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BlockExpression&gt;</ph> object is not displayed.","pos":[2535,2633],"source":" Otherwise, the type of the <xref:System.Linq.Expressions.BlockExpression> object is not displayed."},{"pos":[2639,2647],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[2769,2789],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[2973,2993],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[3054,3070],"content":"LambdaExpression","linkify":"LambdaExpression","nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[3072,3177],"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> objects are displayed together with their delegate types.","source":"<xref:System.Linq.Expressions.LambdaExpression> objects are displayed together with their delegate types."},{"pos":[3179,3305],"content":"If a lambda expression does not have a name, it is assigned an automatically generated name, such as <ph id=\"ph1\">`#Lambda1`</ph> or <ph id=\"ph2\">`#Lambda2`</ph>.","source":"If a lambda expression does not have a name, it is assigned an automatically generated name, such as `#Lambda1` or `#Lambda2`."},{"pos":[3311,3319],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[3464,3484],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[3729,3749],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[3833,3848],"content":"LabelExpression","linkify":"LabelExpression","nodes":[{"content":"LabelExpression","pos":[0,15]}]},{"pos":[3850,4029],"content":"If you specify a default value for the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LabelExpression&gt;</ph> object, this value is displayed before the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.LabelTarget&gt;</ph> object.","source":"If you specify a default value for the <xref:System.Linq.Expressions.LabelExpression> object, this value is displayed before the <xref:System.Linq.Expressions.LabelTarget> object."},{"content":"The <ph id=\"ph1\">`.Label`</ph> token indicates the start of the label.","pos":[4031,4083],"source":"The `.Label` token indicates the start of the label."},{"content":"The <ph id=\"ph1\">`.LabelTarget`</ph> token indicates the destination of the target to jump to.","pos":[4084,4160],"source":" The `.LabelTarget` token indicates the destination of the target to jump to."},{"pos":[4162,4274],"content":"If a label does not have a name, it is assigned an automatically generated name, such as <ph id=\"ph1\">`#Label1`</ph> or <ph id=\"ph2\">`#Label2`</ph>.","source":"If a label does not have a name, it is assigned an automatically generated name, such as `#Label1` or `#Label2`."},{"pos":[4280,4288],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[4573,4593],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[4909,4929],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[5030,5047],"content":"Checked Operators","linkify":"Checked Operators","nodes":[{"content":"Checked Operators","pos":[0,17]}]},{"content":"Checked operators are displayed with the \"#\" symbol in front of the operator.","pos":[5049,5126]},{"content":"For example, the checked addition operator is displayed as <ph id=\"ph1\">`#+`</ph>.","pos":[5127,5191],"source":" For example, the checked addition operator is displayed as `#+`."},{"pos":[5197,5205],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[5350,5370],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[5530,5550],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[5581,5589],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5593,5705],"content":"<bpt id=\"p1\">[</bpt>Expression Trees (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/expression-trees/index.md)</ept>","source":"[Expression Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/expression-trees/index.md)"},{"pos":[5708,5787],"content":"<bpt id=\"p1\">[</bpt>Debugging in Visual Studio<ept id=\"p1\">](/visualstudio/debugger/debugging-in-visual-studio)</ept>","source":"[Debugging in Visual Studio](/visualstudio/debugger/debugging-in-visual-studio)"},{"pos":[5790,5875],"content":"<bpt id=\"p1\">[</bpt>Create Custom Visualizers<ept id=\"p1\">](/visualstudio/debugger/create-custom-visualizers-of-data)</ept>","source":"[Create Custom Visualizers](/visualstudio/debugger/create-custom-visualizers-of-data)"}]}