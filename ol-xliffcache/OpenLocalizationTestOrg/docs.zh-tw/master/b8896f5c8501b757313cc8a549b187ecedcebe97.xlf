<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-verify-the-digital-signatures-of-xml-documents.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8896f5c8501b757313cc8a549b187ecedcebe97</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\how-to-verify-the-digital-signatures-of-xml-documents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8bce863b7a27e74f05c9746e43ae183d164e9d25</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55edb751fbf020bcc982f956851ff79583bc22e9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Verify the Digital Signatures of XML Documents</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Verify the Digital Signatures of XML Documents</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use the classes in the <ph id="ph1">&lt;xref:System.Security.Cryptography.Xml&gt;</ph> namespace to verify XML data signed with a digital signature.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XML digital signatures (XMLDSIG) allow you to verify that data was not altered after it was signed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about the XMLDSIG standard, see the World Wide Web Consortium (W3C) specification at <ph id="ph1">&lt;https://www.w3.org/TR/xmldsig-core/&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The code example in this procedure demonstrates how to verify an XML digital signature contained in a &lt;<ph id="ph1">`Signature`</ph>&gt; element.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The example retrieves an RSA public key from a key container and then uses the key to verify the signature.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For information about how create a digital signature that can be verified using this technique, see <bpt id="p1">[</bpt>How to: Sign XML Documents with Digital Signatures<ept id="p1">](../../../docs/standard/security/how-to-sign-xml-documents-with-digital-signatures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To verify the digital signature of an XML document</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To verify the document, you must use the same asymmetric key that was used for signing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object and specify the name of the key container that was used for signing.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Retrieve the public key using the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The key is automatically loaded from the key container by name when you pass the <ph id="ph1">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object to the constructor of the <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Create an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object by loading an XML file from disk.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object contains the signed XML document to verify.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Create a new <ph id="ph1">&lt;xref:System.Security.Cryptography.Xml.SignedXml&gt;</ph> object and pass the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object to it.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Find the &lt;<ph id="ph1">`signature`</ph>&gt; element and create a new <ph id="ph2">&lt;xref:System.Xml.XmlNodeList&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Load the XML of the first &lt;<ph id="ph1">`signature`</ph>&gt; element into the <ph id="ph2">&lt;xref:System.Security.Cryptography.Xml.SignedXml&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Check the signature using the <ph id="ph1">&lt;xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A&gt;</ph> method and the RSA public key.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This method returns a Boolean value that indicates success or failure.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example assumes that a file named <ph id="ph1">`"test.xml"`</ph> exists in the same directory as the compiled program.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`"test.xml"`</ph> file must be signed using the techniques described in <bpt id="p1">[</bpt>How to: Sign XML Documents with Digital Signatures<ept id="p1">](../../../docs/standard/security/how-to-sign-xml-documents-with-digital-signatures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To compile this example, you need to include a reference to <ph id="ph1">`System.Security.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Include the following namespaces: <ph id="ph1">&lt;xref:System.Xml&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Cryptography&gt;</ph>, and <ph id="ph3">&lt;xref:System.Security.Cryptography.Xml&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>.NET Framework Security</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Never store or transfer the private key of an asymmetric key pair in plaintext.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about symmetric and asymmetric cryptographic keys, see <bpt id="p1">[</bpt>Generating Keys for Encryption and Decryption<ept id="p1">](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Never embed a private key directly into your source code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Embedded keys can be easily read from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> or by opening the assembly in a text editor such as Notepad.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Sign XML Documents with Digital Signatures<ept id="p1">](../../../docs/standard/security/how-to-sign-xml-documents-with-digital-signatures.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>