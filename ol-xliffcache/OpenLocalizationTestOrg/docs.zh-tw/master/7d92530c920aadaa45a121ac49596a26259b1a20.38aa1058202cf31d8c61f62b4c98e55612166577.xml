{"content":"---\ntitle: \"Asynchronous File I-O | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"streams, synchronous streams\"\n  - \"asynchronous I/O\"\n  - \"synchronous I/O\"\n  - \"streams, asynchronous streams\"\n  - \"I/O [.NET Framework], asynchronous I/O\"\n  - \"Stream class, synchronous I/O\"\n  - \"data streams, asynchronous streams\"\n  - \"Stream class, asynchronous I/O\"\n  - \"multiple I/O requests\"\n  - \"data streams, synchronous streams\"\nms.assetid: dbdd55e7-d6b9-4f9e-8abb-ab0edd4457f7\ncaps.latest.revision: 23\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# Asynchronous File I/O\nAsynchronous operations enable you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../../../includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.  \n  \n Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], the I/O types include async methods to simplify asynchronous operations. An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, <xref:System.IO.Stream.FlushAsync%2A>, <xref:System.IO.TextReader.ReadLineAsync%2A>, and <xref:System.IO.TextReader.ReadToEndAsync%2A>. These async methods are implemented on stream classes, such as <xref:System.IO.Stream>, <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>, and on classes that are used for reading from or writing to streams, such <xref:System.IO.TextReader> and <xref:System.IO.TextWriter>.  \n  \n In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] to support legacy code; however, the async methods help you implement asynchronous I/O operations more easily.  \n  \n Starting with [!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)], Visual Studio provides two keywords for asynchronous programming:  \n  \n `Async` (Visual Basic) or `async` (C#) modifier, which is used to mark a method that contains an asynchronous operation.  \n  \n `Await` (Visual Basic) or `await` (C#) operator, which is applied to the result of an async method.  \n  \n To implement asynchronous I/O operations, use these keywords in conjunction with the async methods, as shown in the following examples. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).  \n  \n The following example demonstrates how to use two <xref:System.IO.FileStream> objects to copy files asynchronously from one directory to another. Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method.  \n  \n [!code-csharp[Asynchronous_File_IO_async#1](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]\n [!code-vb[Asynchronous_File_IO_async#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  \n  \n The next example is similar to the previous one but uses <xref:System.IO.StreamReader> and <xref:System.IO.StreamWriter> objects to read and write the contents of a text file asynchronously.  \n  \n [!code-csharp[Asynchronous_File_IO_async#2](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example2.cs#2)]\n [!code-vb[Asynchronous_File_IO_async#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example2.vb#2)]  \n  \n The next example shows the code-behind file and the XAML file that are used to open a file as a <xref:System.IO.Stream> in a [!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)] app, and read its contents by using an instance of the <xref:System.IO.StreamReader> class. It uses asynchronous methods to open the file as a stream and to read its contents.  \n  \n [!code-csharp[System.IO.WindowsRuntimeStorageExtensions#2](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml.cs#2)]\n [!code-vb[System.IO.WindowsRuntimeStorageExtensions#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage.xaml.vb#2)]  \n  \n [!code-xml[System.IO.WindowsRuntimeStorageExtensions#1](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml#1)]  \n  \n## See Also  \n <xref:System.IO.Stream>   \n [File and Stream I-O](../../../docs/standard/io/index.md)   \n [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)\n","nodes":[{"pos":[12,50],"content":"Asynchronous File I-O | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Asynchronous File I-O | Microsoft Docs","pos":[0,38]}]},{"pos":[704,725],"content":"Asynchronous File I/O","linkify":"Asynchronous File I/O","nodes":[{"content":"Asynchronous File I/O","pos":[0,21]}]},{"content":"Asynchronous operations enable you to perform resource-intensive I/O operations without blocking the main thread.","pos":[726,839]},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](../../../includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[840,1168],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../../../includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, the I/O types include async methods to simplify asynchronous operations.","pos":[1175,1319],"source":"Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], the I/O types include async methods to simplify asynchronous operations."},{"content":"An async method contains <ph id=\"ph1\">`Async`</ph> in its name, such as <ph id=\"ph2\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph>, and <ph id=\"ph7\">&lt;xref:System.IO.TextReader.ReadToEndAsync%2A&gt;</ph>.","pos":[1320,1626],"source":" An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, <xref:System.IO.Stream.FlushAsync%2A>, <xref:System.IO.TextReader.ReadLineAsync%2A>, and <xref:System.IO.TextReader.ReadToEndAsync%2A>."},{"content":"These async methods are implemented on stream classes, such as <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream&gt;</ph>, and on classes that are used for reading from or writing to streams, such <ph id=\"ph4\">&lt;xref:System.IO.TextReader&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.IO.TextWriter&gt;</ph>.","pos":[1627,1913],"source":" These async methods are implemented on stream classes, such as <xref:System.IO.Stream>, <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>, and on classes that are used for reading from or writing to streams, such <xref:System.IO.TextReader> and <xref:System.IO.TextWriter>."},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.","pos":[1920,2115],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> to support legacy code; however, the async methods help you implement asynchronous I/O operations more easily.","pos":[2116,2320],"source":" These methods are still available in the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] to support legacy code; however, the async methods help you implement asynchronous I/O operations more easily."},{"pos":[2327,2472],"content":"Starting with <ph id=\"ph1\">[!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)]</ph>, Visual Studio provides two keywords for asynchronous programming:","source":"Starting with [!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)], Visual Studio provides two keywords for asynchronous programming:"},{"pos":[2479,2599],"content":"<ph id=\"ph1\">`Async`</ph> (Visual Basic) or <ph id=\"ph2\">`async`</ph> (C#) modifier, which is used to mark a method that contains an asynchronous operation.","source":"`Async` (Visual Basic) or `async` (C#) modifier, which is used to mark a method that contains an asynchronous operation."},{"pos":[2606,2705],"content":"<ph id=\"ph1\">`Await`</ph> (Visual Basic) or <ph id=\"ph2\">`await`</ph> (C#) operator, which is applied to the result of an async method.","source":"`Await` (Visual Basic) or `await` (C#) operator, which is applied to the result of an async method."},{"content":"To implement asynchronous I/O operations, use these keywords in conjunction with the async methods, as shown in the following examples.","pos":[2712,2847]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)</ept>.","pos":[2848,2994],"source":" For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)."},{"content":"The following example demonstrates how to use two <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> objects to copy files asynchronously from one directory to another.","pos":[3001,3146],"source":"The following example demonstrates how to use two <xref:System.IO.FileStream> objects to copy files asynchronously from one directory to another."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id=\"ph3\">`async`</ph> modifier because it calls an asynchronous method.","pos":[3147,3353],"source":" Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method."},{"pos":[3360,3637],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Asynchronous_File_IO_async#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Asynchronous_File_IO_async#1<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[Asynchronous_File_IO_async#1](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]\n [!code-vb[Asynchronous_File_IO_async#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]"},{"content":"The next example is similar to the previous one but uses <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter&gt;</ph> objects to read and write the contents of a text file asynchronously.","pos":[3644,3834],"source":"The next example is similar to the previous one but uses <xref:System.IO.StreamReader> and <xref:System.IO.StreamWriter> objects to read and write the contents of a text file asynchronously."},{"pos":[3841,4120],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Asynchronous_File_IO_async#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example2.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Asynchronous_File_IO_async#2<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example2.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[Asynchronous_File_IO_async#2](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example2.cs#2)]\n [!code-vb[Asynchronous_File_IO_async#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example2.vb#2)]"},{"content":"The next example shows the code-behind file and the XAML file that are used to open a file as a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> in a <ph id=\"ph2\">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app, and read its contents by using an instance of the <ph id=\"ph3\">&lt;xref:System.IO.StreamReader&gt;</ph> class.","pos":[4127,4416],"source":"The next example shows the code-behind file and the XAML file that are used to open a file as a <xref:System.IO.Stream> in a [!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)] app, and read its contents by using an instance of the <xref:System.IO.StreamReader> class."},{"content":"It uses asynchronous methods to open the file as a stream and to read its contents.","pos":[4417,4500]},{"pos":[4507,4872],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IO.WindowsRuntimeStorageExtensions#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IO.WindowsRuntimeStorageExtensions#2<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage.xaml.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.IO.WindowsRuntimeStorageExtensions#2](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml.cs#2)]\n [!code-vb[System.IO.WindowsRuntimeStorageExtensions#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage.xaml.vb#2)]"},{"pos":[4879,5054],"content":"<bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>System.IO.WindowsRuntimeStorageExtensions#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-xml[System.IO.WindowsRuntimeStorageExtensions#1](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml#1)]"},{"pos":[5063,5071],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>File and Stream I-O<ept id=\"p1\">](../../../docs/standard/io/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5102,5161],"source":" [File and Stream I-O](../../../docs/standard/io/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)</ept>","pos":[5164,5284],"source":" [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)"}]}