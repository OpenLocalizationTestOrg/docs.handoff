<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e793e0b7f21948d16da4dcb618d73c4c3114adcb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\interop\how-to-access-office-onterop-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84635d53236cda9232dcd3b57b5ec4fce4e01db5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9fcbfed40b650f3ec714d36f58e8e4d95fc636f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Access Office Interop Objects by Using Visual C# Features (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Access Office Interop Objects by Using Visual C# Features (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual C# has features that simplify access to Office API objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The new features include named and optional arguments, a new type called <ph id="ph1">`dynamic`</ph>, and the ability to pass arguments to reference parameters in COM methods as if they were value parameters.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this topic you will use the new features to write code that creates and displays a Microsoft Office Excel worksheet.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You will then write code to add an Office Word document that contains an icon that is linked to the Excel worksheet.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To complete this walkthrough, you must have Microsoft Office Excel 2007 and Microsoft Office Word 2007, or later versions, installed on your computer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are using an operating system that is older than <ph id="ph1">[!INCLUDE[windowsver](../../../csharp/programming-guide/interop/includes/windowsver_md.md)]</ph>, make sure that <ph id="ph2">[!INCLUDE[dnprdnlong](../../../csharp/programming-guide/events/includes/dnprdnlong_md.md)]</ph> is installed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To create a new console application</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, point to <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, expand <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Windows<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Look at the top of the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box to make sure that <bpt id="p2">**</bpt>.NET Framework 4<ept id="p2">**</ept> (or later version) is selected as a target framework.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Templates<ept id="p1">**</ept> pane, click <bpt id="p2">**</bpt>Console Application<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Type a name for your project in the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> field.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To add references</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click your project's name and then click <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Assemblies<ept id="p1">**</ept>  page, select <bpt id="p2">**</bpt>Microsoft.Office.Interop.Word<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>Component Name<ept id="p3">**</ept> list, and then hold down the CTRL key and select <bpt id="p4">**</bpt>Microsoft.Office.Interop.Excel<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you do not see the assemblies, you may need to ensure they are installed and displayed (see <bpt id="p1">[</bpt>How to: Install Office Primary Interop Assemblies<ept id="p1">](/visualstudio/vsto/how-to-install-office-primary-interop-assemblies)</ept>)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To add necessary using directives</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>Program.cs<ept id="p2">**</ept> file and then click <bpt id="p3">**</bpt>View Code<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`using`</ph> directives to the top of the code file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#1<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To create a list of bank accounts</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Paste the following class definition into <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>, under the <ph id="ph1">`Program`</ph> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#2<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`Main`</ph> method to create a <ph id="ph2">`bankAccounts`</ph> list that contains two accounts.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#3<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To declare a method that exports account information to Excel</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add the following method to the <ph id="ph1">`Program`</ph> class to set up an Excel worksheet.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Method <bpt id="p1">[</bpt>Add<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=210910)</ept> has an optional parameter for specifying a particular template.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Optional parameters, new in <ph id="ph1">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph>, enable you to omit the argument for that parameter if you want to use the parameter's default value.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Because no argument is sent in the following code, <ph id="ph1">`Add`</ph> uses the default template and creates a new workbook.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The equivalent statement in earlier versions of C# requires a placeholder argument: <ph id="ph1">`ExcelApp.Workbooks.Add(Type.Missing)`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#4<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Add the following code at the end of <ph id="ph1">`DisplayInExcel`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The code inserts values into the first two columns of the first row of the worksheet.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#5<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add the following code at the end of <ph id="ph1">`DisplayInExcel`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`foreach`</ph> loop puts the information from the list of accounts into the first two columns of successive rows of the worksheet.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#7<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add the following code at the end of <ph id="ph1">`DisplayInExcel`</ph> to adjust the column widths to fit the content.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#13<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_7.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Earlier versions of C# require explicit casting for these operations because <ph id="ph1">`ExcelApp.Columns[1]`</ph> returns an <ph id="ph2">`Object`</ph>, and <ph id="ph3">`AutoFit`</ph> is an Excel <bpt id="p1">[</bpt>Range<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=210911)</ept> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following lines show the casting.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#14<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_8.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph>, and later versions, converts the returned <ph id="ph2">`Object`</ph> to <ph id="ph3">`dynamic`</ph> automatically if the assembly is referenced by the <bpt id="p1">[</bpt>/link<ept id="p1">](../../../csharp/language-reference/compiler-options/link-compiler-option.md)</ept> compiler option or, equivalently, if the Excel <bpt id="p2">**</bpt>Embed Interop Types<ept id="p2">**</ept> property is set to true.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>True is the default value for this property.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To run the project</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Add the following line at the end of <ph id="ph1">`Main`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#8<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_9.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Press CTRL+F5.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An Excel worksheet appears that contains the data from the two accounts.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To add a Word document</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To illustrate additional ways in which <ph id="ph1">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph>, and later versions, enhances Office programming, the following code opens a Word application and creates an icon that links to the Excel worksheet.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Paste method <ph id="ph1">`CreateIconInWordDoc`</ph>, provided later in this step, into the <ph id="ph2">`Program`</ph> class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CreateIconInWordDoc`</ph> uses named and optional arguments to reduce the complexity of the method calls to <bpt id="p1">[</bpt>Add<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=210937)</ept> and <bpt id="p2">[</bpt>PasteSpecial<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=147099)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These calls incorporate two other new features introduced in <ph id="ph1">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph> that simplify calls to COM methods that have reference parameters.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>First, you can send arguments to the reference parameters as if they were value parameters.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>That is, you can send values directly, without creating a variable for each reference parameter.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The compiler generates temporary variables to hold the argument values, and discards the variables when you return from the call.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Second, you can omit the <ph id="ph1">`ref`</ph> keyword in the argument list.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Add`</ph> method has four reference parameters, all of which are optional.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph>, or later versions, you can omit arguments for any or all of the parameters if you want to use their default values.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[csharp_orcas_long](../../../csharp/programming-guide/interop/includes/csharp_orcas_long_md.md)]</ph> and earlier versions, an argument must be provided for each parameter, and the argument must be a variable because the parameters are reference parameters.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PasteSpecial`</ph> method inserts the contents of the Clipboard.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The method has seven reference parameters, all of which are optional.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following code specifies arguments for two of them: <ph id="ph1">`Link`</ph>, to create a link to the source of the Clipboard contents, and <ph id="ph2">`DisplayAsIcon`</ph>, to display the link as an icon.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph>, you can use named arguments for those two and omit the others.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Although these are reference parameters, you do not have to use the <ph id="ph1">`ref`</ph> keyword, or to create variables to send in as arguments.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can send the values directly.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[csharp_orcas_long](../../../csharp/programming-guide/interop/includes/csharp_orcas_long_md.md)]</ph> and earlier versions, you must send a variable argument for each reference parameter.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#9<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_10.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[csharp_orcas_long](../../../csharp/programming-guide/interop/includes/csharp_orcas_long_md.md)]</ph> or earlier versions of the language, the following more complex code is required.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#10<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_11.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Add the following statement at the end of <ph id="ph1">`Main`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#11<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_12.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Add the following statement at the end of <ph id="ph1">`DisplayInExcel`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Copy`</ph> method adds the worksheet to the Clipboard.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#12<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_13.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Press CTRL+F5.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A Word document appears that contains an icon.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Double-click the icon to bring the worksheet to the foreground.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To set the Embed Interop Types property</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Additional enhancements are possible when you call a COM type that does not require a primary interop assembly (PIA) at run time.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Removing the dependency on PIAs results in version independence and easier deployment.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information about the advantages of programming without PIAs, see <bpt id="p1">[</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id="p1">](http://msdn.microsoft.com/library/b28ec92c-1867-4847-95c0-61adfe095e21)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In addition, programming is easier because the types that are required and returned by COM methods can be represented by using the type <ph id="ph1">`dynamic`</ph> instead of <ph id="ph2">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Variables that have type <ph id="ph1">`dynamic`</ph> are not evaluated until run time, which eliminates the need for explicit casting.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph>, embedding type information instead of using PIAs is default behavior.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Because of that default, several of the previous examples are simplified because explicit casting is not required.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, the declaration of <ph id="ph1">`worksheet`</ph> in <ph id="ph2">`DisplayInExcel`</ph> is written as <ph id="ph3">`Excel._Worksheet workSheet = excelApp.ActiveSheet`</ph> rather than <ph id="ph4">`Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The calls to <ph id="ph1">`AutoFit`</ph> in the same method also would require explicit casting without the default, because <ph id="ph2">`ExcelApp.Columns[1]`</ph> returns an <ph id="ph3">`Object`</ph>, and <ph id="ph4">`AutoFit`</ph> is an Excel  method.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following code shows the casting.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#14<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_8.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To change the default and use PIAs instead of embedding type information, expand the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept> and then select <bpt id="p3">**</bpt>Microsoft.Office.Interop.Excel<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Microsoft.Office.Interop.Word<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you cannot see the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, press <bpt id="p2">**</bpt>F4<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Find <bpt id="p1">**</bpt>Embed Interop Types<ept id="p1">**</ept> in the list of properties, and change its value to <bpt id="p2">**</bpt>False<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Equivalently, you can compile by using the <bpt id="p1">[</bpt>/reference<ept id="p1">](../../../csharp/language-reference/compiler-options/reference-compiler-option.md)</ept> compiler option instead of <bpt id="p2">[</bpt>/link<ept id="p2">](../../../csharp/language-reference/compiler-options/link-compiler-option.md)</ept> at a command prompt.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To add additional formatting to the table</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Replace the two calls to <ph id="ph1">`AutoFit`</ph> in <ph id="ph2">`DisplayInExcel`</ph> with the following statement.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#15<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_14.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>AutoFormat<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=210948)</ept> method has seven value parameters, all of which are optional.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Named and optional arguments enable you to provide arguments for none, some, or all of them.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In the previous statement, an argument is supplied for only one of the parameters, <ph id="ph1">`Format`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Format`</ph> is the first parameter in the parameter list, you do not have to provide the parameter name.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>However, the statement might be easier to understand if the parameter name is included, as is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#16<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_15.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Press CTRL+F5 to see the result.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Other formats are listed in the <bpt id="p1">[</bpt>XlRangeAutoFormat<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=210967)</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Compare the statement in step 1 with the following code, which shows the arguments that are required in <ph id="ph1">[!INCLUDE[csharp_orcas_long](../../../csharp/programming-guide/interop/includes/csharp_orcas_long_md.md)]</ph> or earlier versions.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#17<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_16.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following code shows the complete example.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideOfficeHowTo#18<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-access-office-onterop-objects_17.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type.Missing?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>dynamic<ept id="p1">](../../../csharp/language-reference/keywords/dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Type dynamic<ept id="p1">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Named and Optional Arguments<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Use Named and Optional Arguments in Office Programming<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>