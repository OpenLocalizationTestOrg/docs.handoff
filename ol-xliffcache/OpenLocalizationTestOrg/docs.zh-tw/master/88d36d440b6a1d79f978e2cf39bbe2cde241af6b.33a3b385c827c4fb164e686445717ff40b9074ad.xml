{"content":"---\ntitle: \"How to: Use ForEach to Remove Items in a BlockingCollection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"thread-safe collections, how to enumerate blocking collectoin\"\nms.assetid: 2096103c-22f7-420d-b631-f102bc33a6dd\ncaps.latest.revision: 13\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# How to: Use ForEach to Remove Items in a BlockingCollection\nIn addition to taking items from a <xref:System.Collections.Concurrent.BlockingCollection%601> by using the <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method, you can also use a [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) ([For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic) to remove items until adding is completed and the collection is empty. This is called a *mutating enumeration* or *consuming enumeration* because, unlike a typical `foreach` (`For Each`) loop, this enumerator modifies the source collection by removing items.  \n  \n## Example  \n The following example shows how to remove all the items in a <xref:System.Collections.Concurrent.BlockingCollection%601> by using a `foreach` (`For Each`) loop.  \n  \n [!code-csharp[CDS_BlockingCollection#03](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example03.cs#03)]\n [!code-vb[CDS_BlockingCollection#03](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/enumeratebc.vb#03)]  \n  \n This example uses a `foreach` loop with the <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A?displayProperty=fullName> method in the consuming thread, which causes each item to be removed from the collection as it is enumerated. <xref:System.Collections.Concurrent.BlockingCollection%601?displayProperty=fullName> limits the maximum number of items that are in the collection at any time. Enumerating the collection in this way blocks the consumer thread if no items are available or if the collection is empty. In this example blocking is not a concern because the producer thread adds items faster than they can be consumed.  \n  \n There is no guarantee that the items are enumerated in the same order in which they are added by the producer threads.  \n  \n To enumerate the collection without modifying it, just use `foreach` (`For Each`) without the <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A> method. However, it is important to understand that this kind of enumeration represents a snapshot of the collection at a precise point in time. If other threads are adding or removing items concurrently while you are executing the loop, then the loop might not represent the actual state of the collection.  \n  \n## See Also  \n <xref:System.Collections.Concurrent?displayProperty=fullName>   \n [Parallel Programming](../../../../docs/standard/parallel-programming/index.md)","nodes":[{"pos":[4,460],"embed":true,"restype":"x-metadata","content":"title: \"How to: Use ForEach to Remove Items in a BlockingCollection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"thread-safe collections, how to enumerate blocking collectoin\"\nms.assetid: 2096103c-22f7-420d-b631-f102bc33a6dd\ncaps.latest.revision: 13\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Use ForEach to Remove Items in a BlockingCollection | Microsoft Docs","nodes":[{"pos":[0,76],"content":"How to: Use ForEach to Remove Items in a BlockingCollection | Microsoft Docs","nodes":[{"content":"How to: Use ForEach to Remove Items in a BlockingCollection | Microsoft Docs","pos":[0,76]}]}],"path":["title"]}],"yml":true},{"pos":[467,526],"content":"How to: Use ForEach to Remove Items in a BlockingCollection","linkify":"How to: Use ForEach to Remove Items in a BlockingCollection","nodes":[{"content":"How to: Use ForEach to Remove Items in a BlockingCollection","pos":[0,59]}]},{"content":"In addition to taking items from a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> by using the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A&gt;</ph> method, you can also use a <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/foreach-in.md)</ept> (<bpt id=\"p2\">[</bpt>For Each<ept id=\"p2\">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> in Visual Basic) to remove items until adding is completed and the collection is empty.","pos":[527,1049],"source":"In addition to taking items from a <xref:System.Collections.Concurrent.BlockingCollection%601> by using the <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method, you can also use a [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) ([For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic) to remove items until adding is completed and the collection is empty."},{"content":"This is called a <bpt id=\"p1\">*</bpt>mutating enumeration<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>consuming enumeration<ept id=\"p2\">*</ept> because, unlike a typical <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph>) loop, this enumerator modifies the source collection by removing items.","pos":[1050,1237],"source":" This is called a *mutating enumeration* or *consuming enumeration* because, unlike a typical `foreach` (`For Each`) loop, this enumerator modifies the source collection by removing items."},{"pos":[1246,1253],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1257,1417],"content":"The following example shows how to remove all the items in a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> by using a <ph id=\"ph2\">`foreach`</ph> (<ph id=\"ph3\">`For Each`</ph>) loop.","source":"The following example shows how to remove all the items in a <xref:System.Collections.Concurrent.BlockingCollection%601> by using a `foreach` (`For Each`) loop."},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CDS_BlockingCollection#03<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example03.cs#03)</ept><ept id=\"p1\">]</ept>","pos":[1424,1561],"source":"[!code-csharp[CDS_BlockingCollection#03](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example03.cs#03)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>CDS_BlockingCollection#03<ept id=\"p2\">](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/enumeratebc.vb#03)</ept><ept id=\"p1\">]</ept>","pos":[1563,1703],"source":"[!code-vb[CDS_BlockingCollection#03](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/enumeratebc.vb#03)]"},{"content":"This example uses a <ph id=\"ph1\">`foreach`</ph> loop with the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A?displayProperty=fullName&gt;</ph> method in the consuming thread, which causes each item to be removed from the collection as it is enumerated.","pos":[1710,1974],"source":"This example uses a `foreach` loop with the <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A?displayProperty=fullName> method in the consuming thread, which causes each item to be removed from the collection as it is enumerated."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601?displayProperty=fullName&gt;</ph> limits the maximum number of items that are in the collection at any time.","pos":[1975,2134],"source":" <xref:System.Collections.Concurrent.BlockingCollection%601?displayProperty=fullName> limits the maximum number of items that are in the collection at any time."},{"content":"Enumerating the collection in this way blocks the consumer thread if no items are available or if the collection is empty.","pos":[2135,2257]},{"content":"In this example blocking is not a concern because the producer thread adds items faster than they can be consumed.","pos":[2258,2372]},{"content":"There is no guarantee that the items are enumerated in the same order in which they are added by the producer threads.","pos":[2379,2497]},{"content":"To enumerate the collection without modifying it, just use <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph>) without the <ph id=\"ph3\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A&gt;</ph> method.","pos":[2504,2691],"source":"To enumerate the collection without modifying it, just use `foreach` (`For Each`) without the <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A> method."},{"content":"However, it is important to understand that this kind of enumeration represents a snapshot of the collection at a precise point in time.","pos":[2692,2828]},{"content":"If other threads are adding or removing items concurrently while you are executing the loop, then the loop might not represent the actual state of the collection.","pos":[2829,2991]},{"pos":[3000,3008],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent?displayProperty=fullName&gt;</ph>","pos":[3012,3073],"source":"<xref:System.Collections.Concurrent?displayProperty=fullName> "},{"content":"<bpt id=\"p1\">[</bpt>Parallel Programming<ept id=\"p1\">](../../../../docs/standard/parallel-programming/index.md)</ept>","pos":[3078,3157],"source":"[Parallel Programming](../../../../docs/standard/parallel-programming/index.md)"}]}