{"content":"---\ntitle: \"Invoking Activity Validation | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 22bef766-c505-4fd4-ac0f-7b363b238969\ncaps.latest.revision: 15\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Invoking Activity Validation\nActivity validation provides a method to identify and report errors in any activity’s configuration prior to its execution. Validation occurs when a workflow is modified in the workflow designer and any validation errors or warnings are displayed in the workflow designer. Validation also occurs at run time when a workflow is invoked and if any validation errors occur, an <xref:System.Activities.InvalidWorkflowException> is thrown by the default validation logic. [!INCLUDE[wf](../../../includes/wf-md.md)] provides the <xref:System.Activities.Validation.ActivityValidationServices> class that can be used by workflow application and tooling developers to explicitly validate an activity. This topic describes how to use <xref:System.Activities.Validation.ActivityValidationServices> to perform activity validation.  \n  \n## Using ActivityValidationServices  \n <xref:System.Activities.Validation.ActivityValidationServices> has two <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> overloads that are used to invoke an activity’s validation logic. The first overload takes the root activity to be validated and returns a collection of validation errors and warnings. In the following example, a custom `Add` activity is used that has two required arguments.  \n  \n```csharp  \npublic sealed class Add : CodeActivity<int>  \n{  \n    [RequiredArgument]  \n    public InArgument<int> Operand1 { get; set; }  \n  \n    [RequiredArgument]  \n    public InArgument<int> Operand2 { get; set; }  \n  \n    protected override int Execute(CodeActivityContext context)  \n    {  \n        return Operand1.Get(context) + Operand2.Get(context);  \n    }  \n}  \n```  \n  \n The `Add` activity is used inside a <xref:System.Activities.Statements.Sequence>, but its two required arguments are not bound, as shown in the following example.  \n  \n```csharp  \nVariable<int> Operand1 = new Variable<int>{ Default = 10 };  \nVariable<int> Operand2 = new Variable<int>{ Default = 15 };  \nVariable<int> Result = new Variable<int>();  \n  \nActivity wf = new Sequence  \n{  \n    Variables = { Operand1, Operand2, Result },  \n    Activities =   \n    {  \n        new Add(),  \n        new WriteLine  \n        {  \n            Text = new InArgument<string>(env => \"The result is \" + Result.Get(env))  \n        }  \n    }  \n};  \n```  \n  \n This workflow can be validated by calling <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>. <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> returns a collection of any validation errors or warnings contained by the activity and any children, as shown in the following example.  \n  \n```csharp  \nValidationResults results = ActivityValidationServices.Validate(wf);  \n  \nif (results.Errors.Count == 0 && results.Warnings.Count == 0)  \n{  \n    Console.WriteLine(\"No warnings or errors\");  \n}  \nelse  \n{  \n    foreach (ValidationError error in results.Errors)  \n    {  \n        Console.WriteLine(\"Error: {0}\", error.Message);  \n    }  \n    foreach (ValidationError warning in results.Warnings)  \n    {  \n        Console.WriteLine(\"Warning: {0}\", warning.Message);  \n    }  \n}  \n```  \n  \n When <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> is called on this sample workflow, two validation errors are returned.  \n  \n **Error: Value for a required activity argument 'Operand2' was not supplied.**   \n**Error: Value for a required activity argument 'Operand1' was not supplied.**  If this workflow was invoked, an <xref:System.Activities.InvalidWorkflowException> would be thrown, as shown in the following example.  \n  \n```csharp  \ntry  \n{  \n    WorkflowInvoker.Invoke(wf);  \n}  \ncatch (Exception ex)  \n{  \n    Console.WriteLine(ex);  \n}  \n```  \n  \n **System.Activities.InvalidWorkflowException:**   \n**The following errors were encountered while processing the workflow tree:**   \n**'Add': Value for a required activity argument 'Operand2' was not supplied.**   \n**'Add': Value for a required activity argument 'Operand1' was not supplied.**  For this example workflow to be valid, the two required arguments of the `Add` activity must be bound. In the following example, the two required arguments are bound to workflow variables along with the result value. In this example the <xref:System.Activities.Activity%601.Result%2A> argument is bound along with the two required arguments. The <xref:System.Activities.Activity%601.Result%2A> argument is not required to be bound and does not cause a validation error if it is not. It is the responsibility of the workflow author to bind <xref:System.Activities.Activity%601.Result%2A> if its value is used elsewhere in the workflow.  \n  \n```csharp  \nnew Add  \n{  \n    Operand1 = Operand1,  \n    Operand2 = Operand2,  \n    Result = Result  \n}  \n```  \n  \n### Validating Required Arguments on the Root Activity  \n If the root activity of a workflow has arguments, these are not bound until the workflow is invoked and parameters are passed to the workflow. The following workflow passes validation, but an exception is thrown if the workflow is invoked without passing in the required arguments, as shown in the following example.  \n  \n```csharp  \nActivity wf = new Add();  \n  \nValidationResults results = ActivityValidationServices.Validate(wf);  \n// results has no errors or warnings, but when the workflow  \n// is invoked, an InvalidWorkflowException is thrown.  \ntry  \n{  \n    WorkflowInvoker.Invoke(wf);  \n}  \ncatch (Exception ex)  \n{  \n    Console.WriteLine(ex);  \n}  \n```  \n  \n **System.ArgumentException: The root activity's argument settings are incorrect.**   \n**Either fix the workflow definition or supply input values to fix these errors:**   \n**'Add': Value for a required activity argument 'Operand2' was not supplied.**   \n**'Add': Value for a required activity argument 'Operand1' was not supplied.**  After the correct arguments are passed, the workflow completes successfully, as shown in the following example.  \n  \n```csharp  \nAdd wf = new Add();  \n  \nValidationResults results = ActivityValidationServices.Validate(wf);  \n// results has no errors or warnings, and the workflow completes  \n// successfully because the required arguments were passed.  \ntry  \n{  \n    Dictionary<string, object> wfparams = new Dictionary<string, object>  \n    {  \n        { \"Operand1\", 10 },  \n        { \"Operand2\", 15 }  \n    };  \n  \n    int result = WorkflowInvoker.Invoke(wf, wfparams);  \n    Console.WriteLine(\"Result: {0}\", result);  \n}  \ncatch (Exception ex)  \n{  \n    Console.WriteLine(ex);  \n}  \n```  \n  \n> [!NOTE]\n>  In this example, the root activity was declared as `Add` instead of `Activity` as in the previous example. This allows the `WorkflowInvoker.Invoke` method to return a single integer that represents the results of the `Add` activity instead of a dictionary of `out` arguments. The variable `wf` could also have been declared as `Activity<int>`.  \n  \n When validating root arguments, it is the responsibility of the host application to ensure that all required arguments are passed when the workflow is invoked.  \n  \n### Invoking Imperative Code-Based Validation  \n Imperative code-based validation provides a simple way for an activity to provide validation about itself, and is available for activities that derive from <xref:System.Activities.CodeActivity>, <xref:System.Activities.AsyncCodeActivity>, and <xref:System.Activities.NativeActivity>. Validation code that determines any validation errors or warnings is added to the activity. When validation is invoked on the activity, these warnings or errors are contained in the collection returned by the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>. In the following example, taken from the [Basic Validation](../../../docs/framework/windows-workflow-foundation/samples/basic-validation.md) sample, a `CreateProduct` activity is defined. If the `Cost` is greater than the `Price`, a validation error is added to the metadata in the <xref:System.Activities.CodeActivity.CacheMetadata%2A> override.  \n  \n```csharp  \npublic sealed class CreateProduct : CodeActivity  \n{  \n    public double Price { get; set; }  \n    public double Cost { get; set; }  \n  \n    // [RequiredArgument] attribute will generate a validation error   \n    // if the Description argument is not set.  \n    [RequiredArgument]  \n    public InArgument<string> Description { get; set; }  \n  \n    protected override void CacheMetadata(CodeActivityMetadata metadata)  \n    {  \n        base.CacheMetadata(metadata);  \n        // Determine when the activity has been configured in an invalid way.  \n        if (this.Cost > this.Price)  \n        {  \n            // Add a validation error with a custom message.  \n            metadata.AddValidationError(\"The Cost must be less than or equal to the Price.\");  \n        }  \n    }  \n  \n    protected override void Execute(CodeActivityContext context)  \n    {  \n        // Not needed for the sample.  \n    }  \n}  \n  \n```  \n  \n In this example, a workflow is configured using the `CreateProduct` activity. In this workflow, the `Cost` is greater than the `Price`, and the required `Description` argument is not set. When validation is invoked, the following errors are returned.  \n  \n```csharp  \nActivity wf = new Sequence  \n{  \n    Activities =   \n    {  \n        new CreateProduct  \n        {  \n            Cost = 75.00,  \n            Price = 55.00  \n            // Cost > Price and required Description argument not set.  \n        },  \n        new WriteLine  \n        {  \n            Text = \"Product added.\"  \n        }  \n    }  \n};  \n  \nValidationResults results = ActivityValidationServices.Validate(wf);  \n  \nif (results.Errors.Count == 0 && results.Warnings.Count == 0)  \n{  \n    Console.WriteLine(\"No warnings or errors\");  \n}  \nelse  \n{  \n    foreach (ValidationError error in results.Errors)  \n    {  \n        Console.WriteLine(\"Error: {0}\", error.Message);  \n    }  \n    foreach (ValidationError warning in results.Warnings)  \n    {  \n        Console.WriteLine(\"Warning: {0}\", warning.Message);  \n    }  \n}  \n  \n```  \n  \n **Error: The Cost must be less than or equal to the Price.**   \n**Error: Value for a required activity argument 'Description' was not supplied.**    \n> [!NOTE]\n>  Custom activity authors can provide validation logic in an activity's <xref:System.Activities.CodeActivity.CacheMetadata%2A> override. Any exceptions that are thrown from <xref:System.Activities.CodeActivity.CacheMetadata%2A> are not treated as validation errors. These exceptions will escape from the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> and must be handled by the caller.  \n  \n## Using ValidationSettings  \n By default, all activities in the activity tree are evaluated when validation is invoked by <xref:System.Activities.Validation.ActivityValidationServices>. <xref:System.Activities.Validation.ValidationSettings> allows the validation to be customized in several different ways by configuring its three properties. <xref:System.Activities.Validation.ValidationSettings.SingleLevel%2A> specifies whether the validator should walk the entire activity tree or only apply validation logic to the supplied activity. The default for this value is `false`. <xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A> specifies additional constraint mapping from a type to a list of constraints. For the base type of each activity in the activity tree being validated there is a lookup into <xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A>. If a matching constraint list is found, all constraints in the list are evaluated for the activity. <xref:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints%2A> specifies whether the validator should evaluate all constraints or only those specified in <xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A>. The default value is `false`. <xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A> and <xref:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints%2A> are useful for workflow host authors to add additional validation for workflows, such as policy constraints for tools such as FxCop. [!INCLUDE[crabout](../../../includes/crabout-md.md)] constraints, see [Declarative Constraints](../../../docs/framework/windows-workflow-foundation/declarative-constraints.md).  \n  \n To use <xref:System.Activities.Validation.ValidationSettings>, configure the desired properties, and then pass it in the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>. In this example, a workflow that consists of a <xref:System.Activities.Statements.Sequence> with a custom `Add` activity is validated. The `Add` activity has two required arguments.  \n  \n```csharp  \npublic sealed class Add : CodeActivity<int>  \n{  \n    [RequiredArgument]  \n    public InArgument<int> Operand1 { get; set; }  \n  \n    [RequiredArgument]  \n    public InArgument<int> Operand2 { get; set; }  \n  \n    protected override int Execute(CodeActivityContext context)  \n    {  \n        return Operand1.Get(context) + Operand2.Get(context);  \n    }  \n}  \n```  \n  \n The following `Add` activity is used in a <xref:System.Activities.Statements.Sequence>, but its two required arguments are not bound.  \n  \n```csharp  \nVariable<int> Operand1 = new Variable<int> { Default = 10 };  \nVariable<int> Operand2 = new Variable<int> { Default = 15 };  \nVariable<int> Result = new Variable<int>();  \n  \nActivity wf = new Sequence  \n{  \n    Variables = { Operand1, Operand2, Result },  \n    Activities =   \n    {  \n        new Add(),  \n        new WriteLine  \n        {  \n            Text = new InArgument<string>(env => \"The result is \" + Result.Get(env))  \n        }  \n    }  \n};  \n```  \n  \n For the following example, validation is performed with <xref:System.Activities.Validation.ValidationSettings.SingleLevel%2A> set to `true`, so only the root <xref:System.Activities.Statements.Sequence> activity is validated.  \n  \n```csharp  \nValidationSettings settings = new ValidationSettings  \n{  \n    SingleLevel = true  \n};  \n  \nValidationResults results = ActivityValidationServices.Validate(wf, settings);  \n  \nif (results.Errors.Count == 0 && results.Warnings.Count == 0)  \n{  \n    Console.WriteLine(\"No warnings or errors\");  \n}  \nelse  \n{  \n    foreach (ValidationError error in results.Errors)  \n    {  \n        Console.WriteLine(\"Error: {0}\", error.Message);  \n    }  \n    foreach (ValidationError warning in results.Warnings)  \n    {  \n        Console.WriteLine(\"Warning: {0}\", warning.Message);  \n    }  \n}  \n```  \n  \n This code displays the following output:  \n  \n **No warnings or errors** Even though the `Add` activity has required arguments that are not bound, validation is successful because only the root activity is evaluated. This type of validation is useful for validating only specific elements in an activity tree, such as validation of a property change of a single activity in a designer. Note that if this workflow is invoked, the full validation configured in the workflow is evaluated and an <xref:System.Activities.InvalidWorkflowException> would be thrown. <xref:System.Activities.Validation.ActivityValidationServices> and <xref:System.Activities.Validation.ValidationSettings> configure only validation explicitly invoked by the host, and not the validation that occurs when a workflow is invoked.","nodes":[{"pos":[12,57],"content":"Invoking Activity Validation | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Invoking Activity Validation | Microsoft Docs","pos":[0,45]}]},{"pos":[323,351],"content":"Invoking Activity Validation","linkify":"Invoking Activity Validation","nodes":[{"content":"Invoking Activity Validation","pos":[0,28]}]},{"content":"Activity validation provides a method to identify and report errors in any activity’s configuration prior to its execution.","pos":[352,475]},{"content":"Validation occurs when a workflow is modified in the workflow designer and any validation errors or warnings are displayed in the workflow designer.","pos":[476,624]},{"content":"Validation also occurs at run time when a workflow is invoked and if any validation errors occur, an <ph id=\"ph1\">&lt;xref:System.Activities.InvalidWorkflowException&gt;</ph> is thrown by the default validation logic.","pos":[625,818],"source":" Validation also occurs at run time when a workflow is invoked and if any validation errors occur, an <xref:System.Activities.InvalidWorkflowException> is thrown by the default validation logic."},{"content":"<ph id=\"ph1\">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph> provides the <ph id=\"ph2\">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> class that can be used by workflow application and tooling developers to explicitly validate an activity.","pos":[819,1043],"source":"[!INCLUDE[wf](../../../includes/wf-md.md)] provides the <xref:System.Activities.Validation.ActivityValidationServices> class that can be used by workflow application and tooling developers to explicitly validate an activity."},{"content":"This topic describes how to use <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> to perform activity validation.","pos":[1044,1170],"source":" This topic describes how to use <xref:System.Activities.Validation.ActivityValidationServices> to perform activity validation."},{"pos":[1179,1211],"content":"Using ActivityValidationServices","linkify":"Using ActivityValidationServices","nodes":[{"content":"Using ActivityValidationServices","pos":[0,32]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> has two <ph id=\"ph2\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> overloads that are used to invoke an activity’s validation logic.","pos":[1215,1426],"source":"<xref:System.Activities.Validation.ActivityValidationServices> has two <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> overloads that are used to invoke an activity’s validation logic."},{"content":"The first overload takes the root activity to be validated and returns a collection of validation errors and warnings.","pos":[1427,1545]},{"content":"In the following example, a custom <ph id=\"ph1\">`Add`</ph> activity is used that has two required arguments.","pos":[1546,1636],"source":" In the following example, a custom `Add` activity is used that has two required arguments."},{"pos":[2024,2186],"content":"The <ph id=\"ph1\">`Add`</ph> activity is used inside a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph>, but its two required arguments are not bound, as shown in the following example.","source":"The `Add` activity is used inside a <xref:System.Activities.Statements.Sequence>, but its two required arguments are not bound, as shown in the following example."},{"content":"This workflow can be validated by calling <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph>.","pos":[2667,2784],"source":"This workflow can be validated by calling <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> returns a collection of any validation errors or warnings contained by the activity and any children, as shown in the following example.","pos":[2785,2996],"source":"<xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> returns a collection of any validation errors or warnings contained by the activity and any children, as shown in the following example."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> is called on this sample workflow, two validation errors are returned.","pos":[3503,3653],"source":"When <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> is called on this sample workflow, two validation errors are returned."},{"content":"<bpt id=\"p1\">**</bpt>Error: Value for a required activity argument 'Operand2' was not supplied.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[3660,3739],"source":"**Error: Value for a required activity argument 'Operand2' was not supplied.** "},{"content":"<bpt id=\"p1\">**</bpt>Error: Value for a required activity argument 'Operand1' was not supplied.<ept id=\"p1\">**</ept>","pos":[3742,3820],"source":"**Error: Value for a required activity argument 'Operand1' was not supplied.**"},{"content":"If this workflow was invoked, an <ph id=\"ph1\">&lt;xref:System.Activities.InvalidWorkflowException&gt;</ph> would be thrown, as shown in the following example.","pos":[3822,3956],"source":"  If this workflow was invoked, an <xref:System.Activities.InvalidWorkflowException> would be thrown, as shown in the following example."},{"content":"<bpt id=\"p1\">**</bpt>System.Activities.InvalidWorkflowException:<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[4092,4140],"source":"**System.Activities.InvalidWorkflowException:** "},{"content":"<bpt id=\"p1\">**</bpt>The following errors were encountered while processing the workflow tree:<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[4143,4221],"source":"**The following errors were encountered while processing the workflow tree:** "},{"content":"<bpt id=\"p1\">**</bpt>'Add': Value for a required activity argument 'Operand2' was not supplied.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[4224,4303],"source":"**'Add': Value for a required activity argument 'Operand2' was not supplied.** "},{"content":"<bpt id=\"p1\">**</bpt>'Add': Value for a required activity argument 'Operand1' was not supplied.<ept id=\"p1\">**</ept>","pos":[4306,4384],"source":"**'Add': Value for a required activity argument 'Operand1' was not supplied.**"},{"content":"For this example workflow to be valid, the two required arguments of the <ph id=\"ph1\">`Add`</ph> activity must be bound.","pos":[4386,4488],"source":"  For this example workflow to be valid, the two required arguments of the `Add` activity must be bound."},{"content":"In the following example, the two required arguments are bound to workflow variables along with the result value.","pos":[4489,4602]},{"content":"In this example the <ph id=\"ph1\">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argument is bound along with the two required arguments.","pos":[4603,4727],"source":" In this example the <xref:System.Activities.Activity%601.Result%2A> argument is bound along with the two required arguments."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argument is not required to be bound and does not cause a validation error if it is not.","pos":[4728,4868],"source":" The <xref:System.Activities.Activity%601.Result%2A> argument is not required to be bound and does not cause a validation error if it is not."},{"content":"It is the responsibility of the workflow author to bind <ph id=\"ph1\">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> if its value is used elsewhere in the workflow.","pos":[4869,5020],"source":" It is the responsibility of the workflow author to bind <xref:System.Activities.Activity%601.Result%2A> if its value is used elsewhere in the workflow."},{"pos":[5145,5195],"content":"Validating Required Arguments on the Root Activity","linkify":"Validating Required Arguments on the Root Activity","nodes":[{"content":"Validating Required Arguments on the Root Activity","pos":[0,50]}]},{"content":"If the root activity of a workflow has arguments, these are not bound until the workflow is invoked and parameters are passed to the workflow.","pos":[5199,5341]},{"content":"The following workflow passes validation, but an exception is thrown if the workflow is invoked without passing in the required arguments, as shown in the following example.","pos":[5342,5515]},{"content":"<bpt id=\"p1\">**</bpt>System.ArgumentException: The root activity's argument settings are incorrect.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[5870,5953],"source":"**System.ArgumentException: The root activity's argument settings are incorrect.** "},{"content":"<bpt id=\"p1\">**</bpt>Either fix the workflow definition or supply input values to fix these errors:<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[5956,6039],"source":"**Either fix the workflow definition or supply input values to fix these errors:** "},{"content":"<bpt id=\"p1\">**</bpt>'Add': Value for a required activity argument 'Operand2' was not supplied.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[6042,6121],"source":"**'Add': Value for a required activity argument 'Operand2' was not supplied.** "},{"content":"<bpt id=\"p1\">**</bpt>'Add': Value for a required activity argument 'Operand1' was not supplied.<ept id=\"p1\">**</ept>","pos":[6124,6202],"source":"**'Add': Value for a required activity argument 'Operand1' was not supplied.**"},{"content":"After the correct arguments are passed, the workflow completes successfully, as shown in the following example.","pos":[6204,6315]},{"pos":[6902,7256],"content":"[!NOTE]\n In this example, the root activity was declared as `Add` instead of `Activity` as in the previous example. This allows the `WorkflowInvoker.Invoke` method to return a single integer that represents the results of the `Add` activity instead of a dictionary of `out` arguments. The variable `wf` could also have been declared as `Activity<int>`.","leadings":["","> "],"nodes":[{"content":" In this example, the root activity was declared as `Add` instead of `Activity` as in the previous example. This allows the `WorkflowInvoker.Invoke` method to return a single integer that represents the results of the `Add` activity instead of a dictionary of `out` arguments. The variable `wf` could also have been declared as `Activity<int>`.","pos":[8,352],"nodes":[{"content":"In this example, the root activity was declared as <ph id=\"ph1\">`Add`</ph> instead of <ph id=\"ph2\">`Activity`</ph> as in the previous example.","pos":[1,107],"source":" In this example, the root activity was declared as `Add` instead of `Activity` as in the previous example."},{"content":"This allows the <ph id=\"ph1\">`WorkflowInvoker.Invoke`</ph> method to return a single integer that represents the results of the <ph id=\"ph2\">`Add`</ph> activity instead of a dictionary of <ph id=\"ph3\">`out`</ph> arguments.","pos":[108,276],"source":" This allows the `WorkflowInvoker.Invoke` method to return a single integer that represents the results of the `Add` activity instead of a dictionary of `out` arguments."},{"content":"The variable <ph id=\"ph1\">`wf`</ph> could also have been declared as <ph id=\"ph2\">`Activity&lt;int&gt;`</ph>.","pos":[277,344],"source":" The variable `wf` could also have been declared as `Activity<int>`."}]}]},{"content":"When validating root arguments, it is the responsibility of the host application to ensure that all required arguments are passed when the workflow is invoked.","pos":[7263,7422]},{"pos":[7432,7473],"content":"Invoking Imperative Code-Based Validation","linkify":"Invoking Imperative Code-Based Validation","nodes":[{"content":"Invoking Imperative Code-Based Validation","pos":[0,41]}]},{"content":"Imperative code-based validation provides a simple way for an activity to provide validation about itself, and is available for activities that derive from <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivity&gt;</ph>.","pos":[7477,7760],"source":"Imperative code-based validation provides a simple way for an activity to provide validation about itself, and is available for activities that derive from <xref:System.Activities.CodeActivity>, <xref:System.Activities.AsyncCodeActivity>, and <xref:System.Activities.NativeActivity>."},{"content":"Validation code that determines any validation errors or warnings is added to the activity.","pos":[7761,7852]},{"content":"When validation is invoked on the activity, these warnings or errors are contained in the collection returned by the call to <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph>.","pos":[7853,8053],"source":" When validation is invoked on the activity, these warnings or errors are contained in the collection returned by the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>."},{"content":"In the following example, taken from the <bpt id=\"p1\">[</bpt>Basic Validation<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/basic-validation.md)</ept> sample, a <ph id=\"ph1\">`CreateProduct`</ph> activity is defined.","pos":[8054,8241],"source":" In the following example, taken from the [Basic Validation](../../../docs/framework/windows-workflow-foundation/samples/basic-validation.md) sample, a `CreateProduct` activity is defined."},{"content":"If the <ph id=\"ph1\">`Cost`</ph> is greater than the <ph id=\"ph2\">`Price`</ph>, a validation error is added to the metadata in the <ph id=\"ph3\">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> override.","pos":[8242,8400],"source":" If the `Cost` is greater than the `Price`, a validation error is added to the metadata in the <xref:System.Activities.CodeActivity.CacheMetadata%2A> override."},{"content":"In this example, a workflow is configured using the <ph id=\"ph1\">`CreateProduct`</ph> activity.","pos":[9337,9414],"source":"In this example, a workflow is configured using the `CreateProduct` activity."},{"content":"In this workflow, the <ph id=\"ph1\">`Cost`</ph> is greater than the <ph id=\"ph2\">`Price`</ph>, and the required <ph id=\"ph3\">`Description`</ph> argument is not set.","pos":[9415,9524],"source":" In this workflow, the `Cost` is greater than the `Price`, and the required `Description` argument is not set."},{"content":"When validation is invoked, the following errors are returned.","pos":[9525,9587]},{"content":"<bpt id=\"p1\">**</bpt>Error: The Cost must be less than or equal to the Price.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[10442,10503],"source":"**Error: The Cost must be less than or equal to the Price.** "},{"content":"<bpt id=\"p1\">**</bpt>Error: Value for a required activity argument 'Description' was not supplied.<ept id=\"p1\">**</ept>","pos":[10506,10587],"source":"**Error: Value for a required activity argument 'Description' was not supplied.**"},{"pos":[10594,11024],"content":"[!NOTE]\n Custom activity authors can provide validation logic in an activity's <xref:System.Activities.CodeActivity.CacheMetadata%2A> override. Any exceptions that are thrown from <xref:System.Activities.CodeActivity.CacheMetadata%2A> are not treated as validation errors. These exceptions will escape from the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> and must be handled by the caller.","leadings":["","> "],"nodes":[{"content":" Custom activity authors can provide validation logic in an activity's <xref:System.Activities.CodeActivity.CacheMetadata%2A> override. Any exceptions that are thrown from <xref:System.Activities.CodeActivity.CacheMetadata%2A> are not treated as validation errors. These exceptions will escape from the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> and must be handled by the caller.","pos":[8,428],"nodes":[{"content":"Custom activity authors can provide validation logic in an activity's <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> override.","pos":[1,135],"source":" Custom activity authors can provide validation logic in an activity's <xref:System.Activities.CodeActivity.CacheMetadata%2A> override."},{"content":"Any exceptions that are thrown from <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> are not treated as validation errors.","pos":[136,264],"source":" Any exceptions that are thrown from <xref:System.Activities.CodeActivity.CacheMetadata%2A> are not treated as validation errors."},{"content":"These exceptions will escape from the call to <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> and must be handled by the caller.","pos":[265,420],"source":" These exceptions will escape from the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> and must be handled by the caller."}]}]},{"pos":[11033,11057],"content":"Using ValidationSettings","linkify":"Using ValidationSettings","nodes":[{"content":"Using ValidationSettings","pos":[0,24]}]},{"content":"By default, all activities in the activity tree are evaluated when validation is invoked by <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph>.","pos":[11061,11216],"source":"By default, all activities in the activity tree are evaluated when validation is invoked by <xref:System.Activities.Validation.ActivityValidationServices>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Validation.ValidationSettings&gt;</ph> allows the validation to be customized in several different ways by configuring its three properties.","pos":[11217,11373],"source":"<xref:System.Activities.Validation.ValidationSettings> allows the validation to be customized in several different ways by configuring its three properties."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Validation.ValidationSettings.SingleLevel%2A&gt;</ph> specifies whether the validator should walk the entire activity tree or only apply validation logic to the supplied activity.","pos":[11374,11569],"source":"<xref:System.Activities.Validation.ValidationSettings.SingleLevel%2A> specifies whether the validator should walk the entire activity tree or only apply validation logic to the supplied activity."},{"content":"The default for this value is <ph id=\"ph1\">`false`</ph>.","pos":[11570,11608],"source":" The default for this value is `false`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A&gt;</ph> specifies additional constraint mapping from a type to a list of constraints.","pos":[11609,11766],"source":"<xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A> specifies additional constraint mapping from a type to a list of constraints."},{"content":"For the base type of each activity in the activity tree being validated there is a lookup into <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A&gt;</ph>.","pos":[11767,11942],"source":" For the base type of each activity in the activity tree being validated there is a lookup into <xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A>."},{"content":"If a matching constraint list is found, all constraints in the list are evaluated for the activity.","pos":[11943,12042]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints%2A&gt;</ph> specifies whether the validator should evaluate all constraints or only those specified in <ph id=\"ph2\">&lt;xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A&gt;</ph>.","pos":[12043,12301],"source":"<xref:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints%2A> specifies whether the validator should evaluate all constraints or only those specified in <xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A>."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[12302,12331],"source":" The default value is `false`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints%2A&gt;</ph> are useful for workflow host authors to add additional validation for workflows, such as policy constraints for tools such as FxCop.","pos":[12332,12635],"source":"<xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A> and <xref:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints%2A> are useful for workflow host authors to add additional validation for workflows, such as policy constraints for tools such as FxCop."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> constraints, see <bpt id=\"p1\">[</bpt>Declarative Constraints<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/declarative-constraints.md)</ept>.","pos":[12636,12812],"source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)] constraints, see [Declarative Constraints](../../../docs/framework/windows-workflow-foundation/declarative-constraints.md)."},{"content":"To use <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ValidationSettings&gt;</ph>, configure the desired properties, and then pass it in the call to <ph id=\"ph2\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph>.","pos":[12819,13023],"source":"To use <xref:System.Activities.Validation.ValidationSettings>, configure the desired properties, and then pass it in the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>."},{"content":"In this example, a workflow that consists of a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> with a custom <ph id=\"ph2\">`Add`</ph> activity is validated.","pos":[13024,13158],"source":" In this example, a workflow that consists of a <xref:System.Activities.Statements.Sequence> with a custom `Add` activity is validated."},{"content":"The <ph id=\"ph1\">`Add`</ph> activity has two required arguments.","pos":[13159,13205],"source":" The `Add` activity has two required arguments."},{"pos":[13593,13726],"content":"The following <ph id=\"ph1\">`Add`</ph> activity is used in a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph>, but its two required arguments are not bound.","source":"The following `Add` activity is used in a <xref:System.Activities.Statements.Sequence>, but its two required arguments are not bound."},{"pos":[14209,14434],"content":"For the following example, validation is performed with <ph id=\"ph1\">&lt;xref:System.Activities.Validation.ValidationSettings.SingleLevel%2A&gt;</ph> set to <ph id=\"ph2\">`true`</ph>, so only the root <ph id=\"ph3\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity is validated.","source":"For the following example, validation is performed with <xref:System.Activities.Validation.ValidationSettings.SingleLevel%2A> set to `true`, so only the root <xref:System.Activities.Statements.Sequence> activity is validated."},{"content":"This code displays the following output:","pos":[15043,15083]},{"content":"<bpt id=\"p1\">**</bpt>No warnings or errors<ept id=\"p1\">**</ept> Even though the <ph id=\"ph1\">`Add`</ph> activity has required arguments that are not bound, validation is successful because only the root activity is evaluated.","pos":[15090,15259],"source":"**No warnings or errors** Even though the `Add` activity has required arguments that are not bound, validation is successful because only the root activity is evaluated."},{"content":"This type of validation is useful for validating only specific elements in an activity tree, such as validation of a property change of a single activity in a designer.","pos":[15260,15428]},{"content":"Note that if this workflow is invoked, the full validation configured in the workflow is evaluated and an <ph id=\"ph1\">&lt;xref:System.Activities.InvalidWorkflowException&gt;</ph> would be thrown.","pos":[15429,15601],"source":" Note that if this workflow is invoked, the full validation configured in the workflow is evaluated and an <xref:System.Activities.InvalidWorkflowException> would be thrown."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.Validation.ValidationSettings&gt;</ph> configure only validation explicitly invoked by the host, and not the validation that occurs when a workflow is invoked.","pos":[15602,15844],"source":"<xref:System.Activities.Validation.ActivityValidationServices> and <xref:System.Activities.Validation.ValidationSettings> configure only validation explicitly invoked by the host, and not the validation that occurs when a workflow is invoked."}]}