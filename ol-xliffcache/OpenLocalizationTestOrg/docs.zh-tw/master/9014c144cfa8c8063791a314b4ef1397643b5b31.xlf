<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="blocking-application-execution-using-an-asyncwaithandle.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9014c144cfa8c8063791a314b4ef1397643b5b31</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\blocking-application-execution-using-an-asyncwaithandle.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cee6fa0e74e7e0b705114d1eaa8a056071d94b84</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d772e4d55bb05edf6bc37826064eab646466573</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Blocking Application Execution Using an AsyncWaitHandle | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Blocking Application Execution Using an AsyncWaitHandle</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applications that cannot continue to do other work while waiting for the results of an asynchronous operation must block until the operation completes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use one of the following options to block your application's main thread while waiting for an asynchronous operation to complete:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by the asynchronous operation's <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This approach is demonstrated in this topic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Call the asynchronous operation's <bpt id="p1">**</bpt>End<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an example that demonstrates this approach, see <bpt id="p1">[</bpt>Blocking Application Execution by Ending an Async Operation<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/blocking-application-execution-by-ending-an-async-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Applications that use one or more <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> objects to block until an asynchronous operation is complete will typically call the <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> <bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept> method, perform any work that can be done without the results of the operation, and then block until the asynchronous operation(s) completes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An application can block on a single operation by calling one of the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> methods using the <ph id="ph2">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To block while waiting for a set of asynchronous operations to complete, store the associated <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> objects in an array and call one of the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To block while waiting for any one of a set of asynchronous operations to complete, store the associated <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> objects in an array and call one of the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates using asynchronous methods in the DNS class to retrieve Domain Name System information for a user-specified computer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The example demonstrates blocking using the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> associated with the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic) is passed for the <ph id="ph3">&lt;xref:System.Net.Dns.BeginGetHostByName%2A&gt;</ph><ph id="ph4">`requestCallback`</ph> and <ph id="ph5">`stateObject`</ph> parameters because these are not required when using this approach.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>