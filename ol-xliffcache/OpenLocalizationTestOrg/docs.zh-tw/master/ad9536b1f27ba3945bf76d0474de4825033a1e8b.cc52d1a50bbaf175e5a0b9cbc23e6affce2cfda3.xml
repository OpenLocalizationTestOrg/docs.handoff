{"content":"---\ntitle: \"Tutorial: Host and run a basic Windows Communication Foundation service\"\nms.date: 03/19/2019\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"WCF services [WCF]\"\n  - \"WCF services [WCF], running\"\nms.assetid: 31774d36-923b-4e2d-812e-aa190127266f\n---\n# Tutorial: Host and run a basic Windows Communication Foundation service\n\nThis tutorial describes the third of five tasks required to create a basic Windows Communication Foundation (WCF) application. For an overview of the tutorials, see [Tutorial: Get started with Windows Communication Foundation applications](getting-started-tutorial.md).\n\nThe next task for creating a WCF application is to host a WCF service in a console application. A WCF service exposes one or more *endpoints*, each of which exposes one or more service operations. A service endpoint specifies the following information: \n- An address where you can find the service.\n- A binding that contains the information that describes how a client must communicate with the service. \n- A contract that defines the functionality that the service provides to its clients.\n\nIn this tutorial, you learn how to:\n> [!div class=\"checklist\"]\n> - Create and configure a console app project for hosting a WCF service.\n> - Add code to host the WCF service.\n> - Update the configuration file.\n> - Start the WCF service and verify it's running.\n\n## Create and configure a console app project for hosting the service\n\n1. Create a console app project in Visual Studio: \n \n    1. From the **File** menu, select **Open** > **Project/Solution** and browse to the **GettingStarted** solution you previously created (*GettingStarted.sln*). Select **Open**.\n\n    2. From the **View** menu, select **Solution Explorer**.\n    \n    3. In the **Solution Explorer** window, select the **GettingStarted** solution (top node), and then select **Add** > **New Project** from the shortcut menu. \n\n    4. In the **Add New Project** window, on the left side, select the **Windows Desktop** category under **Visual C#** or **Visual Basic**. \n\n    5. Select the **Console App (.NET Framework)** template, and enter *GettingStartedHost* for the **Name**. Select **OK**.\n\n2. Add a reference in the **GettingStartedHost** project to the **GettingStartedLib** project: \n\n    1. In the **Solution Explorer** window, select the **References** folder under the **GettingStartedHost** project, and then select **Add Reference** from the shortcut menu. \n\n    2. In the **Add Reference** dialog, under **Projects** on the left side of the window, select **Solution**. \n \n    3. Select **GettingStartedLib** in the center section of the window, and then select **OK**. \n\n       This action makes the types defined in the **GettingStartedLib** project available to the **GettingStartedHost** project.\n\n3. Add a reference in the **GettingStartedHost** project to the <xref:System.ServiceModel> assembly: \n\n    1. In the **Solution Explorer** window, select the **References** folder under the **GettingStartedHost** project, and then select **Add Reference** from the shortcut menu.\n    \n    2. In the **Add Reference** window, under **Assemblies** on the left side of the window, select **Framework**. \n\n    3. Select **System.ServiceModel**, and then select **OK**. \n    \n    4. Save the solution by selecting **File** > **Save All**.\n\n## Add code to host the service\n\nTo host the service, you add code to do the following steps: \n   1. Create a URI for the base address.\n   2. Create a class instance for hosting the service.\n   3. Create a service endpoint.\n   4. Enable metadata exchange.\n   5. Open the service host to listen for incoming messages.\n  \nMake the following changes to the code:\n\n1. Open the **Program.cs** or **Module1.vb** file in the **GettingStartedHost** project and replace its code with the following code:\n\n    ```csharp\n    using System;\n    using System.ServiceModel;\n    using System.ServiceModel.Description;\n    using GettingStartedLib;\n\n    namespace GettingStartedHost\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                // Step 1: Create a URI to serve as the base address.\n                Uri baseAddress = new Uri(\"http://localhost:8000/GettingStarted/\");\n\n                // Step 2: Create a ServiceHost instance.\n                ServiceHost selfHost = new ServiceHost(typeof(CalculatorService), baseAddress);\n\n                try\n                {\n                    // Step 3: Add a service endpoint.\n                    selfHost.AddServiceEndpoint(typeof(ICalculator), new WSHttpBinding(), \"CalculatorService\");\n\n                    // Step 4: Enable metadata exchange.\n                    ServiceMetadataBehavior smb = new ServiceMetadataBehavior();\n                    smb.HttpGetEnabled = true;\n                    selfHost.Description.Behaviors.Add(smb)    ;\n\n                    // Step 5: Start the service.\n                    selfHost.Open();\n                    Console.WriteLine(\"The service is ready.\");\n\n                    // Close the ServiceHost to stop the service.\n                    Console.WriteLine(\"Press <Enter> to terminate the service.\");\n                    Console.WriteLine();\n                    Console.ReadLine();\n                    selfHost.Close();\n                }\n                catch (CommunicationException ce)\n                {\n                    Console.WriteLine(\"An exception occurred: {0}\", ce.Message);\n                    selfHost.Abort();\n                }\n            }\n        }\n    }\n    ```\n\n    ```vb\n    Imports System.ServiceModel\n    Imports System.ServiceModel.Description\n    Imports GettingStartedLib.GettingStartedLib\n\n    Module Service\n\n        Class Program\n            Shared Sub Main()\n                ' Step 1: Create a URI to serve as the base address.\n                Dim baseAddress As New Uri(\"http://localhost:8000/GettingStarted/\")\n\n                ' Step 2: Create a ServiceHost instance.\n                Dim selfHost As New ServiceHost(GetType(CalculatorService), baseAddress)\n               Try\n\n                    ' Step 3: Add a service endpoint.\n                    selfHost.AddServiceEndpoint( _\n                        GetType(ICalculator), _\n                        New WSHttpBinding(), _\n                        \"CalculatorService\")\n\n                    ' Step 4: Enable metadata exchange.\n                    Dim smb As New ServiceMetadataBehavior()\n                    smb.HttpGetEnabled = True\n                    selfHost.Description.Behaviors.Add(smb)\n\n                    ' Step 5: Start the service.\n                    selfHost.Open()\n                    Console.WriteLine(\"The service is ready.\")\n\n                    ' Close the ServiceHost to stop the service.\n                    Console.WriteLine(\"Press <Enter> to terminate the service.\")\n                    Console.WriteLine()\n                    Console.ReadLine()\n                    selfHost.Close()\n\n                Catch ce As CommunicationException\n                    Console.WriteLine(\"An exception occurred: {0}\", ce.Message)\n                    selfHost.Abort()\n                End Try\n            End Sub\n        End Class\n\n    End Module\n    ```\n    \n    For information about how this code works, see [Service hosting program steps](#service-hosting-program-steps).\n\n2. Update the project properties:\n\n   1. In the **Solution Explorer** window, select the **GettingStartedHost** folder, and then select **Properties** from the shortcut menu.\n\n   2. On the **GettingStartedHost** properties page, select the **Application** tab:\n\n      - For C# projects, select **GettingStartedHost.Program** from the **Startup object** list.\n\n      - For Visual Basic projects, select **Service.Program** from the **Startup object** list.\n\n   3. From the **File** menu, select **Save All**.\n\n## Verify the service is working\n\n1. Build the solution, and then run the **GettingStartedHost** console application from inside Visual Studio. \n\n    The service must be run with administrator privileges. Because you opened Visual Studio with administrator privileges, when you run **GettingStartedHost** in Visual Studio, the application is run with administrator privileges as well. As an alternative, you can open a new command prompt as an administrator (select **More** > **Run as administrator** from the shortcut menu) and run **GettingStartedHost.exe** within it.\n\n2. Open a web browser and browse to the service's page at `http://localhost:8000/GettingStarted/CalculatorService`.\n   \n   > [!NOTE]\n   > Services such as this one require the proper permission to register HTTP addresses on the machine for listening. Administrator accounts have this permission, but non-administrator accounts must be granted permission for HTTP namespaces. For more information about how to configure namespace reservations, see [Configuring HTTP and HTTPS](feature-details/configuring-http-and-https.md). \n\n## Service hosting program steps\n\nThe steps in the code you added to host the service are described as follows:\n\n- **Step 1**: Create an instance of the `Uri` class to hold the base address of the service. A URL that contains a base address has an optional URI that identifies a service. The base address is formatted as follows: `<transport>://<machine-name or domain><:optional port #>/<optional URI segment>`. The base address for the calculator service uses the HTTP transport, localhost, port 8000, and the URI segment, GettingStarted.\n\n- **Step 2**: Create an instance of the <xref:System.ServiceModel.ServiceHost> class, which you use to host the service. The constructor takes two parameters: the type of the class that implements the service contract and the base address of the service.\n\n- **Step 3**: Create a <xref:System.ServiceModel.Description.ServiceEndpoint> instance. A service endpoint is composed of an address, a binding, and a service contract. The <xref:System.ServiceModel.Description.ServiceEndpoint> constructor is composed of the service contract interface type, a binding, and an address. The service contract is `ICalculator`, which you defined and implement in the service type. The binding for this sample is <xref:System.ServiceModel.WSHttpBinding>, which is a built-in binding and connects to endpoints that conform to the WS-* specifications. For more information about WCF bindings, see [WCF bindings overview](bindings-overview.md). You append the address to the base address to identify the endpoint. The code specifies the address as CalculatorService and the fully qualified address for the endpoint as `http://localhost:8000/GettingStarted/CalculatorService`.\n\n    > [!IMPORTANT]\n    > For .NET Framework Version 4 and later, adding a service endpoint is optional. For these versions, if you don't add your code or configuration, WCF adds one default endpoint for each combination of base address and contract implemented by the service. For more information about default endpoints, see [Specifying an endpoint address](specifying-an-endpoint-address.md). For more information about default endpoints, bindings, and behaviors, see [Simplified configuration](simplified-configuration.md) and [Simplified configuration for WCF services](samples/simplified-configuration-for-wcf-services.md).\n\n- **Step 4**: Enable metadata exchange. Clients use metadata exchange to generate proxies for calling the service operations. To enable metadata exchange, create a <xref:System.ServiceModel.Description.ServiceMetadataBehavior> instance, set its <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled> property to `true`, and add the `ServiceMetadataBehavior` object to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> collection of the <xref:System.ServiceModel.ServiceHost> instance.\n\n- **Step 5**: Open <xref:System.ServiceModel.ServiceHost> to listen for incoming messages. The application waits for you to press **Enter**. After the application instantiates <xref:System.ServiceModel.ServiceHost>, it executes a try/catch block. For more information about safely catching exceptions thrown by <xref:System.ServiceModel.ServiceHost>, see [Use Close and Abort to release WCF client resources](samples/use-close-abort-release-wcf-client-resources.md).\n\n> [!IMPORTANT]\n> When you add a WCF service library, Visual Studio hosts it for you if you debug it by starting a service host. To avoid conflicts, you can prevent Visual Studio from hosting the WCF service library. \n> 1. Select the **GettingStartedLib** project in **Solution Explorer** and choose **Properties** from the shortcut menu.\n> 2. Select **WCF Options** and uncheck **Start WCF Service Host when debugging another project in the same solution**.\n\n## Next steps\n\nIn this tutorial, you learned how to:\n> [!div class=\"checklist\"]\n> - Create and configure a console app project for hosting a WCF service.\n> - Add code to host the WCF service.\n> - Update the configuration file.\n> - Start the WCF service and verify it's running.\n\nAdvance to the next tutorial to learn how to create a WCF client.\n\n> [!div class=\"nextstepaction\"]\n> [Tutorial: Create a WCF client](how-to-create-a-wcf-client.md)\n","nodes":[{"pos":[4,266],"embed":true,"restype":"x-metadata","content":"title: \"Tutorial: Host and run a basic Windows Communication Foundation service\"\nms.date: 03/19/2019\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"WCF services [WCF]\"\n  - \"WCF services [WCF], running\"\nms.assetid: 31774d36-923b-4e2d-812e-aa190127266f","nodes":[{"content":"Tutorial: Host and run a basic Windows Communication Foundation service","nodes":[{"pos":[0,71],"content":"Tutorial: Host and run a basic Windows Communication Foundation service","nodes":[{"content":"Tutorial: Host and run a basic Windows Communication Foundation service","pos":[0,71]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[273,344],"content":"Tutorial: Host and run a basic Windows Communication Foundation service","linkify":"Tutorial: Host and run a basic Windows Communication Foundation service","nodes":[{"content":"Tutorial: Host and run a basic Windows Communication Foundation service","pos":[0,71]}]},{"content":"This tutorial describes the third of five tasks required to create a basic Windows Communication Foundation (WCF) application.","pos":[346,472]},{"content":"For an overview of the tutorials, see <bpt id=\"p1\">[</bpt>Tutorial: Get started with Windows Communication Foundation applications<ept id=\"p1\">](getting-started-tutorial.md)</ept>.","pos":[473,615],"source":" For an overview of the tutorials, see [Tutorial: Get started with Windows Communication Foundation applications](getting-started-tutorial.md)."},{"content":"The next task for creating a WCF application is to host a WCF service in a console application.","pos":[617,712]},{"content":"A WCF service exposes one or more <bpt id=\"p1\">*</bpt>endpoints<ept id=\"p1\">*</ept>, each of which exposes one or more service operations.","pos":[713,813],"source":" A WCF service exposes one or more *endpoints*, each of which exposes one or more service operations."},{"content":"A service endpoint specifies the following information:","pos":[814,869]},{"content":"An address where you can find the service.","pos":[873,915]},{"content":"A binding that contains the information that describes how a client must communicate with the service.","pos":[918,1020]},{"content":"A contract that defines the functionality that the service provides to its clients.","pos":[1024,1107]},{"content":"In this tutorial, you learn how to:","pos":[1109,1144]},{"content":"Create and configure a console app project for hosting a WCF service.","pos":[1176,1245]},{"content":"Add code to host the WCF service.","pos":[1250,1283]},{"content":"Update the configuration file.","pos":[1288,1318]},{"content":"Start the WCF service and verify it's running.","pos":[1323,1369]},{"pos":[1374,1440],"content":"Create and configure a console app project for hosting the service","linkify":"Create and configure a console app project for hosting the service","nodes":[{"content":"Create and configure a console app project for hosting the service","pos":[0,66]}]},{"content":"Create a console app project in Visual Studio:","pos":[1445,1491]},{"content":"From the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Open<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Project/Solution<ept id=\"p3\">**</ept> and browse to the <bpt id=\"p4\">**</bpt>GettingStarted<ept id=\"p4\">**</ept> solution you previously created (<bpt id=\"p5\">*</bpt>GettingStarted.sln<ept id=\"p5\">*</ept>).","pos":[1502,1657],"source":"From the **File** menu, select **Open** > **Project/Solution** and browse to the **GettingStarted** solution you previously created (*GettingStarted.sln*)."},{"content":"Select <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>.","pos":[1658,1674],"source":" Select **Open**."},{"pos":[1683,1736],"content":"From the <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept>.","source":"From the **View** menu, select **Solution Explorer**."},{"pos":[1749,1902],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> window, select the <bpt id=\"p2\">**</bpt>GettingStarted<ept id=\"p2\">**</ept> solution (top node), and then select <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p4\">**</bpt>New Project<ept id=\"p4\">**</ept> from the shortcut menu.","source":"In the **Solution Explorer** window, select the **GettingStarted** solution (top node), and then select **Add** > **New Project** from the shortcut menu."},{"pos":[1912,2045],"content":"In the <bpt id=\"p1\">**</bpt>Add New Project<ept id=\"p1\">**</ept> window, on the left side, select the <bpt id=\"p2\">**</bpt>Windows Desktop<ept id=\"p2\">**</ept> category under <bpt id=\"p3\">**</bpt>Visual C#<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>Visual Basic<ept id=\"p4\">**</ept>.","source":"In the **Add New Project** window, on the left side, select the **Windows Desktop** category under **Visual C#** or **Visual Basic**."},{"content":"Select the <bpt id=\"p1\">**</bpt>Console App (.NET Framework)<ept id=\"p1\">**</ept> template, and enter <bpt id=\"p2\">*</bpt>GettingStartedHost<ept id=\"p2\">*</ept> for the <bpt id=\"p3\">**</bpt>Name<ept id=\"p3\">**</ept>.","pos":[2055,2157],"source":"Select the **Console App (.NET Framework)** template, and enter *GettingStartedHost* for the **Name**."},{"content":"Select <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[2158,2172],"source":" Select **OK**."},{"pos":[2177,2268],"content":"Add a reference in the <bpt id=\"p1\">**</bpt>GettingStartedHost<ept id=\"p1\">**</ept> project to the <bpt id=\"p2\">**</bpt>GettingStartedLib<ept id=\"p2\">**</ept> project:","source":"Add a reference in the **GettingStartedHost** project to the **GettingStartedLib** project:"},{"pos":[2278,2447],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> window, select the <bpt id=\"p2\">**</bpt>References<ept id=\"p2\">**</ept> folder under the <bpt id=\"p3\">**</bpt>GettingStartedHost<ept id=\"p3\">**</ept> project, and then select <bpt id=\"p4\">**</bpt>Add Reference<ept id=\"p4\">**</ept> from the shortcut menu.","source":"In the **Solution Explorer** window, select the **References** folder under the **GettingStartedHost** project, and then select **Add Reference** from the shortcut menu."},{"pos":[2457,2561],"content":"In the <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> dialog, under <bpt id=\"p2\">**</bpt>Projects<ept id=\"p2\">**</ept> on the left side of the window, select <bpt id=\"p3\">**</bpt>Solution<ept id=\"p3\">**</ept>.","source":"In the **Add Reference** dialog, under **Projects** on the left side of the window, select **Solution**."},{"pos":[2572,2661],"content":"Select <bpt id=\"p1\">**</bpt>GettingStartedLib<ept id=\"p1\">**</ept> in the center section of the window, and then select <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","source":"Select **GettingStartedLib** in the center section of the window, and then select **OK**."},{"pos":[2671,2792],"content":"This action makes the types defined in the <bpt id=\"p1\">**</bpt>GettingStartedLib<ept id=\"p1\">**</ept> project available to the <bpt id=\"p2\">**</bpt>GettingStartedHost<ept id=\"p2\">**</ept> project.","source":"This action makes the types defined in the **GettingStartedLib** project available to the **GettingStartedHost** project."},{"pos":[2797,2894],"content":"Add a reference in the <bpt id=\"p1\">**</bpt>GettingStartedHost<ept id=\"p1\">**</ept> project to the <ph id=\"ph1\">&lt;xref:System.ServiceModel&gt;</ph> assembly:","source":"Add a reference in the **GettingStartedHost** project to the <xref:System.ServiceModel> assembly:"},{"pos":[2904,3073],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> window, select the <bpt id=\"p2\">**</bpt>References<ept id=\"p2\">**</ept> folder under the <bpt id=\"p3\">**</bpt>GettingStartedHost<ept id=\"p3\">**</ept> project, and then select <bpt id=\"p4\">**</bpt>Add Reference<ept id=\"p4\">**</ept> from the shortcut menu.","source":"In the **Solution Explorer** window, select the **References** folder under the **GettingStartedHost** project, and then select **Add Reference** from the shortcut menu."},{"pos":[3086,3193],"content":"In the <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> window, under <bpt id=\"p2\">**</bpt>Assemblies<ept id=\"p2\">**</ept> on the left side of the window, select <bpt id=\"p3\">**</bpt>Framework<ept id=\"p3\">**</ept>.","source":"In the **Add Reference** window, under **Assemblies** on the left side of the window, select **Framework**."},{"pos":[3203,3258],"content":"Select <bpt id=\"p1\">**</bpt>System.ServiceModel<ept id=\"p1\">**</ept>, and then select <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","source":"Select **System.ServiceModel**, and then select **OK**."},{"pos":[3272,3327],"content":"Save the solution by selecting <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Save All<ept id=\"p2\">**</ept>.","source":"Save the solution by selecting **File** > **Save All**."},{"pos":[3332,3360],"content":"Add code to host the service","linkify":"Add code to host the service","nodes":[{"content":"Add code to host the service","pos":[0,28]}]},{"content":"To host the service, you add code to do the following steps:","pos":[3362,3422]},{"content":"Create a URI for the base address.","pos":[3430,3464]},{"content":"Create a class instance for hosting the service.","pos":[3471,3519]},{"content":"Create a service endpoint.","pos":[3526,3552]},{"content":"Enable metadata exchange.","pos":[3559,3584]},{"content":"Open the service host to listen for incoming messages.","pos":[3591,3645]},{"content":"Make the following changes to the code:","pos":[3649,3688]},{"pos":[3693,3823],"content":"Open the <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Module1.vb<ept id=\"p2\">**</ept> file in the <bpt id=\"p3\">**</bpt>GettingStartedHost<ept id=\"p3\">**</ept> project and replace its code with the following code:","source":"Open the **Program.cs** or **Module1.vb** file in the **GettingStartedHost** project and replace its code with the following code:"},{"pos":[7210,7321],"content":"For information about how this code works, see <bpt id=\"p1\">[</bpt>Service hosting program steps<ept id=\"p1\">](#service-hosting-program-steps)</ept>.","source":"For information about how this code works, see [Service hosting program steps](#service-hosting-program-steps)."},{"content":"Update the project properties:","pos":[7326,7356]},{"pos":[7364,7497],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> window, select the <bpt id=\"p2\">**</bpt>GettingStartedHost<ept id=\"p2\">**</ept> folder, and then select <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept> from the shortcut menu.","source":"In the **Solution Explorer** window, select the **GettingStartedHost** folder, and then select **Properties** from the shortcut menu."},{"pos":[7505,7583],"content":"On the <bpt id=\"p1\">**</bpt>GettingStartedHost<ept id=\"p1\">**</ept> properties page, select the <bpt id=\"p2\">**</bpt>Application<ept id=\"p2\">**</ept> tab:","source":"On the **GettingStartedHost** properties page, select the **Application** tab:"},{"pos":[7593,7681],"content":"For C# projects, select <bpt id=\"p1\">**</bpt>GettingStartedHost.Program<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Startup object<ept id=\"p2\">**</ept> list.","source":"For C# projects, select **GettingStartedHost.Program** from the **Startup object** list."},{"pos":[7691,7778],"content":"For Visual Basic projects, select <bpt id=\"p1\">**</bpt>Service.Program<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Startup object<ept id=\"p2\">**</ept> list.","source":"For Visual Basic projects, select **Service.Program** from the **Startup object** list."},{"pos":[7786,7830],"content":"From the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Save All<ept id=\"p2\">**</ept>.","source":"From the **File** menu, select **Save All**."},{"pos":[7835,7864],"content":"Verify the service is working","linkify":"Verify the service is working","nodes":[{"content":"Verify the service is working","pos":[0,29]}]},{"pos":[7869,7975],"content":"Build the solution, and then run the <bpt id=\"p1\">**</bpt>GettingStartedHost<ept id=\"p1\">**</ept> console application from inside Visual Studio.","source":"Build the solution, and then run the **GettingStartedHost** console application from inside Visual Studio."},{"content":"The service must be run with administrator privileges.","pos":[7982,8036]},{"content":"Because you opened Visual Studio with administrator privileges, when you run <bpt id=\"p1\">**</bpt>GettingStartedHost<ept id=\"p1\">**</ept> in Visual Studio, the application is run with administrator privileges as well.","pos":[8037,8216],"source":" Because you opened Visual Studio with administrator privileges, when you run **GettingStartedHost** in Visual Studio, the application is run with administrator privileges as well."},{"content":"As an alternative, you can open a new command prompt as an administrator (select <bpt id=\"p1\">**</bpt>More<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Run as administrator<ept id=\"p2\">**</ept> from the shortcut menu) and run <bpt id=\"p3\">**</bpt>GettingStartedHost.exe<ept id=\"p3\">**</ept> within it.","pos":[8217,8403],"source":" As an alternative, you can open a new command prompt as an administrator (select **More** > **Run as administrator** from the shortcut menu) and run **GettingStartedHost.exe** within it."},{"pos":[8408,8520],"content":"Open a web browser and browse to the service's page at <ph id=\"ph1\">`http://localhost:8000/GettingStarted/CalculatorService`</ph>.","source":"Open a web browser and browse to the service's page at `http://localhost:8000/GettingStarted/CalculatorService`."},{"pos":[8530,8928],"content":"[!NOTE]\nServices such as this one require the proper permission to register HTTP addresses on the machine for listening. Administrator accounts have this permission, but non-administrator accounts must be granted permission for HTTP namespaces. For more information about how to configure namespace reservations, see [Configuring HTTP and HTTPS](feature-details/configuring-http-and-https.md).","leadings":["","   > "],"nodes":[{"content":"Services such as this one require the proper permission to register HTTP addresses on the machine for listening. Administrator accounts have this permission, but non-administrator accounts must be granted permission for HTTP namespaces. For more information about how to configure namespace reservations, see [Configuring HTTP and HTTPS](feature-details/configuring-http-and-https.md).","pos":[8,393],"nodes":[{"content":"Services such as this one require the proper permission to register HTTP addresses on the machine for listening.","pos":[0,112]},{"content":"Administrator accounts have this permission, but non-administrator accounts must be granted permission for HTTP namespaces.","pos":[113,236]},{"content":"For more information about how to configure namespace reservations, see <bpt id=\"p1\">[</bpt>Configuring HTTP and HTTPS<ept id=\"p1\">](feature-details/configuring-http-and-https.md)</ept>.","pos":[237,385],"source":" For more information about how to configure namespace reservations, see [Configuring HTTP and HTTPS](feature-details/configuring-http-and-https.md)."}]}]},{"pos":[8934,8963],"content":"Service hosting program steps","linkify":"Service hosting program steps","nodes":[{"content":"Service hosting program steps","pos":[0,29]}]},{"content":"The steps in the code you added to host the service are described as follows:","pos":[8965,9042]},{"content":"<bpt id=\"p1\">**</bpt>Step 1<ept id=\"p1\">**</ept>: Create an instance of the <ph id=\"ph1\">`Uri`</ph> class to hold the base address of the service.","pos":[9046,9136],"source":"**Step 1**: Create an instance of the `Uri` class to hold the base address of the service."},{"content":"A URL that contains a base address has an optional URI that identifies a service.","pos":[9137,9218]},{"content":"The base address is formatted as follows: <ph id=\"ph1\">`&lt;transport&gt;://&lt;machine-name or domain&gt;&lt;:optional port #&gt;/&lt;optional URI segment&gt;`</ph>.","pos":[9219,9343],"source":" The base address is formatted as follows: `<transport>://<machine-name or domain><:optional port #>/<optional URI segment>`."},{"content":"The base address for the calculator service uses the HTTP transport, localhost, port 8000, and the URI segment, GettingStarted.","pos":[9344,9471]},{"content":"<bpt id=\"p1\">**</bpt>Step 2<ept id=\"p1\">**</ept>: Create an instance of the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class, which you use to host the service.","pos":[9475,9593],"source":"**Step 2**: Create an instance of the <xref:System.ServiceModel.ServiceHost> class, which you use to host the service."},{"content":"The constructor takes two parameters: the type of the class that implements the service contract and the base address of the service.","pos":[9594,9727]},{"content":"<bpt id=\"p1\">**</bpt>Step 3<ept id=\"p1\">**</ept>: Create a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> instance.","pos":[9731,9816],"source":"**Step 3**: Create a <xref:System.ServiceModel.Description.ServiceEndpoint> instance."},{"content":"A service endpoint is composed of an address, a binding, and a service contract.","pos":[9817,9897]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> constructor is composed of the service contract interface type, a binding, and an address.","pos":[9898,10047],"source":" The <xref:System.ServiceModel.Description.ServiceEndpoint> constructor is composed of the service contract interface type, a binding, and an address."},{"content":"The service contract is <ph id=\"ph1\">`ICalculator`</ph>, which you defined and implement in the service type.","pos":[10048,10139],"source":" The service contract is `ICalculator`, which you defined and implement in the service type."},{"content":"The binding for this sample is <ph id=\"ph1\">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph>, which is a built-in binding and connects to endpoints that conform to the WS-* specifications.","pos":[10140,10307],"source":" The binding for this sample is <xref:System.ServiceModel.WSHttpBinding>, which is a built-in binding and connects to endpoints that conform to the WS-* specifications."},{"content":"For more information about WCF bindings, see <bpt id=\"p1\">[</bpt>WCF bindings overview<ept id=\"p1\">](bindings-overview.md)</ept>.","pos":[10308,10399],"source":" For more information about WCF bindings, see [WCF bindings overview](bindings-overview.md)."},{"content":"You append the address to the base address to identify the endpoint.","pos":[10400,10468]},{"content":"The code specifies the address as CalculatorService and the fully qualified address for the endpoint as <ph id=\"ph1\">`http://localhost:8000/GettingStarted/CalculatorService`</ph>.","pos":[10469,10630],"source":" The code specifies the address as CalculatorService and the fully qualified address for the endpoint as `http://localhost:8000/GettingStarted/CalculatorService`."},{"pos":[10638,11261],"content":"[!IMPORTANT]\nFor .NET Framework Version 4 and later, adding a service endpoint is optional. For these versions, if you don't add your code or configuration, WCF adds one default endpoint for each combination of base address and contract implemented by the service. For more information about default endpoints, see [Specifying an endpoint address](specifying-an-endpoint-address.md). For more information about default endpoints, bindings, and behaviors, see [Simplified configuration](simplified-configuration.md) and [Simplified configuration for WCF services](samples/simplified-configuration-for-wcf-services.md).","leadings":["","    > "],"nodes":[{"content":"For .NET Framework Version 4 and later, adding a service endpoint is optional. For these versions, if you don't add your code or configuration, WCF adds one default endpoint for each combination of base address and contract implemented by the service. For more information about default endpoints, see [Specifying an endpoint address](specifying-an-endpoint-address.md). For more information about default endpoints, bindings, and behaviors, see [Simplified configuration](simplified-configuration.md) and [Simplified configuration for WCF services](samples/simplified-configuration-for-wcf-services.md).","pos":[13,617],"nodes":[{"content":"For .NET Framework Version 4 and later, adding a service endpoint is optional.","pos":[0,78]},{"content":"For these versions, if you don't add your code or configuration, WCF adds one default endpoint for each combination of base address and contract implemented by the service.","pos":[79,251]},{"content":"For more information about default endpoints, see <bpt id=\"p1\">[</bpt>Specifying an endpoint address<ept id=\"p1\">](specifying-an-endpoint-address.md)</ept>.","pos":[252,370],"source":" For more information about default endpoints, see [Specifying an endpoint address](specifying-an-endpoint-address.md)."},{"content":"For more information about default endpoints, bindings, and behaviors, see <bpt id=\"p1\">[</bpt>Simplified configuration<ept id=\"p1\">](simplified-configuration.md)</ept> and <bpt id=\"p2\">[</bpt>Simplified configuration for WCF services<ept id=\"p2\">](samples/simplified-configuration-for-wcf-services.md)</ept>.","pos":[371,604],"source":" For more information about default endpoints, bindings, and behaviors, see [Simplified configuration](simplified-configuration.md) and [Simplified configuration for WCF services](samples/simplified-configuration-for-wcf-services.md)."}]}]},{"content":"<bpt id=\"p1\">**</bpt>Step 4<ept id=\"p1\">**</ept>: Enable metadata exchange.","pos":[11265,11302],"source":"**Step 4**: Enable metadata exchange."},{"content":"Clients use metadata exchange to generate proxies for calling the service operations.","pos":[11303,11388]},{"content":"To enable metadata exchange, create a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> instance, set its <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled&gt;</ph> property to <ph id=\"ph3\">`true`</ph>, and add the <ph id=\"ph4\">`ServiceMetadataBehavior`</ph> object to the <ph id=\"ph5\">&lt;xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A&gt;</ph> collection of the <ph id=\"ph6\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> instance.","pos":[11389,11795],"source":" To enable metadata exchange, create a <xref:System.ServiceModel.Description.ServiceMetadataBehavior> instance, set its <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled> property to `true`, and add the `ServiceMetadataBehavior` object to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> collection of the <xref:System.ServiceModel.ServiceHost> instance."},{"content":"<bpt id=\"p1\">**</bpt>Step 5<ept id=\"p1\">**</ept>: Open <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> to listen for incoming messages.","pos":[11799,11887],"source":"**Step 5**: Open <xref:System.ServiceModel.ServiceHost> to listen for incoming messages."},{"content":"The application waits for you to press <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept>.","pos":[11888,11937],"source":" The application waits for you to press **Enter**."},{"content":"After the application instantiates <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>, it executes a try/catch block.","pos":[11938,12043],"source":" After the application instantiates <xref:System.ServiceModel.ServiceHost>, it executes a try/catch block."},{"content":"For more information about safely catching exceptions thrown by <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>, see <bpt id=\"p1\">[</bpt>Use Close and Abort to release WCF client resources<ept id=\"p1\">](samples/use-close-abort-release-wcf-client-resources.md)</ept>.","pos":[12044,12263],"source":" For more information about safely catching exceptions thrown by <xref:System.ServiceModel.ServiceHost>, see [Use Close and Abort to release WCF client resources](samples/use-close-abort-release-wcf-client-resources.md)."},{"pos":[12267,12480],"content":"[!IMPORTANT]\nWhen you add a WCF service library, Visual Studio hosts it for you if you debug it by starting a service host. To avoid conflicts, you can prevent Visual Studio from hosting the WCF service library.","leadings":["","> "],"nodes":[{"content":"When you add a WCF service library, Visual Studio hosts it for you if you debug it by starting a service host. To avoid conflicts, you can prevent Visual Studio from hosting the WCF service library.","pos":[13,211],"nodes":[{"content":"When you add a WCF service library, Visual Studio hosts it for you if you debug it by starting a service host.","pos":[0,110]},{"content":"To avoid conflicts, you can prevent Visual Studio from hosting the WCF service library.","pos":[111,198]}]}]},{"pos":[12487,12602],"content":"Select the <bpt id=\"p1\">**</bpt>GettingStartedLib<ept id=\"p1\">**</ept> project in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept> from the shortcut menu.","source":"Select the **GettingStartedLib** project in **Solution Explorer** and choose **Properties** from the shortcut menu."},{"pos":[12608,12722],"content":"Select <bpt id=\"p1\">**</bpt>WCF Options<ept id=\"p1\">**</ept> and uncheck <bpt id=\"p2\">**</bpt>Start WCF Service Host when debugging another project in the same solution<ept id=\"p2\">**</ept>.","source":"Select **WCF Options** and uncheck **Start WCF Service Host when debugging another project in the same solution**."},{"pos":[12727,12737],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"content":"In this tutorial, you learned how to:","pos":[12739,12776]},{"content":"Create and configure a console app project for hosting a WCF service.","pos":[12808,12877]},{"content":"Add code to host the WCF service.","pos":[12882,12915]},{"content":"Update the configuration file.","pos":[12920,12950]},{"content":"Start the WCF service and verify it's running.","pos":[12955,13001]},{"content":"Advance to the next tutorial to learn how to create a WCF client.","pos":[13003,13068]},{"pos":[13072,13166],"content":"[!div class=\"nextstepaction\"]\n[Tutorial: Create a WCF client](how-to-create-a-wcf-client.md)","leadings":["","> "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Tutorial: Create a WCF client<ept id=\"p1\">](how-to-create-a-wcf-client.md)</ept>","pos":[30,92],"source":"[Tutorial: Create a WCF client](how-to-create-a-wcf-client.md)"}]}]}