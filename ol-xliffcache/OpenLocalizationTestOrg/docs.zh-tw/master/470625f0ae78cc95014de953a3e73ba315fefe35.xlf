<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">470625f0ae78cc95014de953a3e73ba315fefe35</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\ui-automation\obtaining-ui-automation-elements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d02c447fb63922df3dcca1fd6f113d2a51bde8a0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6d87aff91514b1e6a0f84f45669407d316cc130</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Obtaining UI Automation Elements | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Obtaining UI Automation Elements</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This documentation is intended for .NET Framework developers who want to use the managed <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> classes defined in the <ph id="ph2">&lt;xref:System.Windows.Automation&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For the latest information about <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, see <bpt id="p1">[</bpt>Windows Automation API: UI Automation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=156746)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes the various ways of obtaining <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> objects for <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../includes/tlasharptla-ui-md.md)]</ph> elements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If your client application might attempt to find elements in its own user interface, you must make all <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> calls on a separate thread.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>UI Automation Threading Issues<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-threading-issues.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Root Element</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>All searches for <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> objects must have a starting-place.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This can be any element, including the desktop, an application window, or a control.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The root element for the desktop, from which all elements are descended, is obtained from the static <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.RootElement%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In general, you should try to obtain only direct children of the <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.RootElement%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A search for descendants may iterate through hundreds or even thousands of elements, possibly resulting in a stack overflow.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you are attempting to obtain a specific element at a lower level, you should start your search from the application window or from a container at a lower level.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Conditions</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For most techniques you can use to retrieve <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> elements, you must specify a <ph id="ph2">&lt;xref:System.Windows.Automation.Condition&gt;</ph>, which is a set of criteria defining what elements you want to retrieve.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The simplest condition is <ph id="ph1">&lt;xref:System.Windows.Automation.Condition.TrueCondition&gt;</ph>, a predefined object specifying that all elements within the search scope are to be returned.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Condition.FalseCondition&gt;</ph>, the converse of <ph id="ph2">&lt;xref:System.Windows.Automation.Condition.TrueCondition&gt;</ph>, is less useful, as it would prevent any elements from being found.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Three other predefined conditions can be used alone or in combination with other conditions: <ph id="ph1">&lt;xref:System.Windows.Automation.Automation.ContentViewCondition&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Automation.Automation.ControlViewCondition&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Automation.Automation.RawViewCondition&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Automation.RawViewCondition&gt;</ph>, used by itself, is equivalent to <ph id="ph2">&lt;xref:System.Windows.Automation.Condition.TrueCondition&gt;</ph>, because it does not filter elements by their <ph id="ph3">&lt;xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsContentElement%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Other conditions are built up from one or more <ph id="ph1">&lt;xref:System.Windows.Automation.PropertyCondition&gt;</ph> objects, each of which specifies a property value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Automation.PropertyCondition&gt;</ph> might specify that the element is enabled, or that it supports a certain control pattern.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Conditions can be combined using Boolean logic by constructing objects of types <ph id="ph1">&lt;xref:System.Windows.Automation.AndCondition&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Automation.OrCondition&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Automation.NotCondition&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Search Scope</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Searches done by using <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.FindFirst%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement.FindAll%2A&gt;</ph> must have a scope as well as a starting-place.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The scope defines the space around the starting-place that is to be searched.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This might include the element itself, its siblings, its parent, its ancestors, its immediate children, and its descendants.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The scope of a search is defined by a bitwise combination of values from the <ph id="ph1">&lt;xref:System.Windows.Automation.TreeScope&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Finding a Known Element</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To find a known element, identified by its <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId%2A&gt;</ph>, or some other property or combination of properties, it is easiest to use the <ph id="ph3">&lt;xref:System.Windows.Automation.AutomationElement.FindFirst%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the element sought is an application window, the starting-point of the search can be the <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.RootElement%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This way of finding <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> elements is most useful in automated testing scenarios.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Finding Elements in a Subtree</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To find all elements meeting specific criteria that are related to a known element, you can use <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.FindAll%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, you could use this method to retrieve list items or menu items from a list or menu, or to identify all controls in a dialog box.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Walking a Subtree</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you have no prior knowledge of the applications that your client may be used with, you can construct a subtree of all elements of interest by using the <ph id="ph1">&lt;xref:System.Windows.Automation.TreeWalker&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Your application might do this in response to a focus-changed event; that is, when an application or control receives input focus, the UI Automation client examines children and perhaps all descendants of the focused element.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Another way in which <ph id="ph1">&lt;xref:System.Windows.Automation.TreeWalker&gt;</ph> can be used is to identify the ancestors of an element.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, by walking up the tree you can identify the parent window of a control.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Automation.TreeWalker&gt;</ph> either by creating an object of the class (defining the elements of interest by passing a <ph id="ph2">&lt;xref:System.Windows.Automation.Condition&gt;</ph>), or by using one of the following predefined objects that are defined as fields of <ph id="ph3">&lt;xref:System.Windows.Automation.TreeWalker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Finds only elements whose <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsContentElement%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Finds only elements whose <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Finds all elements.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>After you have obtained a <ph id="ph1">&lt;xref:System.Windows.Automation.TreeWalker&gt;</ph>, using it is straightforward.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Simply call the <ph id="ph1">`Get`</ph> methods to navigate among elements of the subtree.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Automation.TreeWalker.Normalize%2A&gt;</ph> method can be used for navigating to an element in the subtree from another element that is not part of the view.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, suppose you have created a view of a subtree by using <ph id="ph1">&lt;xref:System.Windows.Automation.TreeWalker.ContentViewWalker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Your application then receives notification that a scroll bar has received the input focus.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Because a scroll bar is not a content element, it is not present in your view of the subtree.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, you can pass the <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> representing the scroll bar to <ph id="ph2">&lt;xref:System.Windows.Automation.TreeWalker.Normalize%2A&gt;</ph> and retrieve the nearest ancestor that is in the content view.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Other Ways to Retrieve an Element</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In addition to searches and navigation, you can retrieve an <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> in the following ways.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>From an Event</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When your application receives a <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> event, the source object passed to your event handler is an <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, if you have subscribed to focus-changed events, the source passed to your <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationFocusChangedEventHandler&gt;</ph> is the element that received the focus.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Subscribe to UI Automation Events<ept id="p1">](../../../docs/framework/ui-automation/subscribe-to-ui-automation-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>From a Point</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you have screen coordinates (for example, a cursor position), you can retrieve an <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> by using the static <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement.FromPoint%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>From a Window Handle</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To retrieve an <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> from an HWND, use the static <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement.FromHandle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>From the Focused Control</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can retrieve an <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> that represents the focused control from the static <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement.FocusedElement%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Find a UI Automation Element Based on a Property Condition<ept id="p1">](../../../docs/framework/ui-automation/find-a-ui-automation-element-based-on-a-property-condition.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Navigate Among UI Automation Elements with TreeWalker<ept id="p1">](../../../docs/framework/ui-automation/navigate-among-ui-automation-elements-with-treewalker.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UI Automation Tree Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-tree-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>