{"content":"---\ntitle: \"decimal (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"decimal_CSharpKeyword\"\n  - \"decimal\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"decimal keyword [C#]\"\nms.assetid: b6522132-b5ee-4be3-ad13-3adfdb7de7a1\ncaps.latest.revision: 32\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# decimal (C# Reference)\nThe `decimal` keyword indicates a 128-bit data type. Compared to floating-point types, the `decimal` type has more precision and a smaller range, which makes it appropriate for financial and monetary calculations. The approximate range and precision for the `decimal` type are shown in the following table.  \n  \n|Type|Approximate Range|Precision|.NET Framework type|  \n|----------|-----------------------|---------------|-------------------------|  \n|`decimal`|(-7.9 x 10<sup>28</sup> to 7.9 x 10<sup>28</sup>) / (10<sup>0 to 28</sup>)|28-29 significant digits|<xref:System.Decimal?displayProperty=fullName>|  \n  \n## Literals  \n If you want a numeric real literal to be treated as `decimal`, use the suffix m or M, for example:  \n  \n```  \n  \ndecimal myMoney = 300.5m;  \n```  \n  \n Without the suffix m, the number is treated as a [double](../../../csharp/language-reference/keywords/double.md) and generates a compiler error.  \n  \n## Conversions  \n The integral types are implicitly converted to `decimal` and the result evaluates to `decimal`. Therefore you can initialize a decimal variable using an integer literal, without the suffix, as follows:  \n  \n```  \n  \ndecimal myMoney = 300;  \n```  \n  \n There is no implicit conversion between floating-point types and the `decimal` type; therefore, a cast must be used to convert between these two types. For example:  \n  \n```  \n  \n      decimal myMoney = 99.9m;  \ndouble x = (double)myMoney;  \nmyMoney = (decimal)x;  \n```  \n  \n You can also mix `decimal` and numeric integral types in the same expression. However, mixing `decimal` and floating-point types without a cast causes a compilation error.  \n  \n For more information about implicit numeric conversions, see [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).  \n  \n For more information about explicit numeric conversions, see [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md).  \n  \n## Formatting Decimal Output  \n You can format the results by using the `String.Format` method, or through the <xref:System.Console.Write%2A?displayProperty=fullName> method, which calls `String.Format()`. The currency format is specified by using the standard currency format string \"C\" or \"c,\" as shown in the second example later in this article. For more information about the `String.Format` method, see <xref:System.String.Format%2A?displayProperty=fullName>.  \n  \n## Example  \n The following example causes a compiler error by trying to add [double](../../../csharp/language-reference/keywords/double.md) and `decimal` variables.  \n  \n```csharp  \ndouble dub = 9;  \n// The following line causes an error that reads \"Operator '+' cannot be applied to   \n// operands of type 'double' and 'decimal'\"  \nConsole.WriteLine(dec + dub);   \n  \n// You can fix the error by using explicit casting of either operand.  \nConsole.WriteLine(dec + (decimal)dub);  \nConsole.WriteLine((double)dec + dub);  \n  \n```  \n  \n The result is the following error:  \n  \n `Operator '+' cannot be applied to operands of type 'double' and 'decimal'`  \n  \n In this example, a `decimal` and an [int](../../../csharp/language-reference/keywords/int.md) are mixed in the same expression. The result evaluates to the `decimal` type.  \n  \n [!code-cs[csrefKeywordsTypes#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/decimal_1.cs)]  \n  \n## Example  \n In this example, the output is formatted by using the currency format string. Notice that `x` is rounded because the decimal places exceed $0.99. The variable `y`, which represents the maximum exact digits, is displayed exactly in the correct format.  \n  \n [!code-cs[csrefKeywordsTypes#7](../../../csharp/language-reference/keywords/codesnippet/CSharp/decimal_2.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.Decimal>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)   \n [Standard Numeric Format Strings](../../../standard/base-types/standard-numeric-format-strings.md)","nodes":[{"pos":[4,572],"embed":true,"restype":"x-metadata","content":"title: \"decimal (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"decimal_CSharpKeyword\"\n  - \"decimal\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"decimal keyword [C#]\"\nms.assetid: b6522132-b5ee-4be3-ad13-3adfdb7de7a1\ncaps.latest.revision: 32\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"decimal (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,39],"content":"decimal (C# Reference) | Microsoft Docs","nodes":[{"content":"decimal (C# Reference) | Microsoft Docs","pos":[0,39]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[579,601],"content":"decimal (C# Reference)","linkify":"decimal (C# Reference)","nodes":[{"content":"decimal (C# Reference)","pos":[0,22]}]},{"content":"The <ph id=\"ph1\">`decimal`</ph> keyword indicates a 128-bit data type.","pos":[602,654],"source":"The `decimal` keyword indicates a 128-bit data type."},{"content":"Compared to floating-point types, the <ph id=\"ph1\">`decimal`</ph> type has more precision and a smaller range, which makes it appropriate for financial and monetary calculations.","pos":[655,815],"source":" Compared to floating-point types, the `decimal` type has more precision and a smaller range, which makes it appropriate for financial and monetary calculations."},{"content":"The approximate range and precision for the <ph id=\"ph1\">`decimal`</ph> type are shown in the following table.","pos":[816,908],"source":" The approximate range and precision for the `decimal` type are shown in the following table."},{"content":"Type","pos":[915,919]},{"content":"Approximate Range","pos":[920,937]},{"content":"Precision","pos":[938,947]},{"content":".NET Framework type","pos":[948,967]},{"pos":[1063,1137],"content":"(-7.9 x 10<bpt id=\"p1\">&lt;sup&gt;</bpt>28<ept id=\"p1\">&lt;/sup&gt;</ept> to 7.9 x 10<bpt id=\"p2\">&lt;sup&gt;</bpt>28<ept id=\"p2\">&lt;/sup&gt;</ept>) / (10<bpt id=\"p3\">&lt;sup&gt;</bpt>0 to 28<ept id=\"p3\">&lt;/sup&gt;</ept>)","source":"(-7.9 x 10<sup>28</sup> to 7.9 x 10<sup>28</sup>) / (10<sup>0 to 28</sup>)"},{"content":"28-29 significant digits","pos":[1138,1162]},{"pos":[1219,1227],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"pos":[1231,1329],"content":"If you want a numeric real literal to be treated as <ph id=\"ph1\">`decimal`</ph>, use the suffix m or M, for example:","source":"If you want a numeric real literal to be treated as `decimal`, use the suffix m or M, for example:"},{"pos":[1382,1526],"content":"Without the suffix m, the number is treated as a <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](../../../csharp/language-reference/keywords/double.md)</ept> and generates a compiler error.","source":"Without the suffix m, the number is treated as a [double](../../../csharp/language-reference/keywords/double.md) and generates a compiler error."},{"pos":[1535,1546],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"The integral types are implicitly converted to <ph id=\"ph1\">`decimal`</ph> and the result evaluates to <ph id=\"ph2\">`decimal`</ph>.","pos":[1550,1645],"source":"The integral types are implicitly converted to `decimal` and the result evaluates to `decimal`."},{"content":"Therefore you can initialize a decimal variable using an integer literal, without the suffix, as follows:","pos":[1646,1751]},{"content":"There is no implicit conversion between floating-point types and the <ph id=\"ph1\">`decimal`</ph> type; therefore, a cast must be used to convert between these two types.","pos":[1801,1952],"source":"There is no implicit conversion between floating-point types and the `decimal` type; therefore, a cast must be used to convert between these two types."},{"content":"For example:","pos":[1953,1965]},{"content":"You can also mix <ph id=\"ph1\">`decimal`</ph> and numeric integral types in the same expression.","pos":[2077,2154],"source":"You can also mix `decimal` and numeric integral types in the same expression."},{"content":"However, mixing <ph id=\"ph1\">`decimal`</ph> and floating-point types without a cast causes a compilation error.","pos":[2155,2248],"source":" However, mixing `decimal` and floating-point types without a cast causes a compilation error."},{"pos":[2255,2436],"content":"For more information about implicit numeric conversions, see <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information about implicit numeric conversions, see [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[2443,2624],"content":"For more information about explicit numeric conversions, see <bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>.","source":"For more information about explicit numeric conversions, see [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)."},{"pos":[2633,2658],"content":"Formatting Decimal Output","linkify":"Formatting Decimal Output","nodes":[{"content":"Formatting Decimal Output","pos":[0,25]}]},{"content":"You can format the results by using the <ph id=\"ph1\">`String.Format`</ph> method, or through the <ph id=\"ph2\">&lt;xref:System.Console.Write%2A?displayProperty=fullName&gt;</ph> method, which calls <ph id=\"ph3\">`String.Format()`</ph>.","pos":[2662,2835],"source":"You can format the results by using the `String.Format` method, or through the <xref:System.Console.Write%2A?displayProperty=fullName> method, which calls `String.Format()`."},{"content":"The currency format is specified by using the standard currency format string \"C\" or \"c,\" as shown in the second example later in this article.","pos":[2836,2979]},{"content":"For more information about the <ph id=\"ph1\">`String.Format`</ph> method, see <ph id=\"ph2\">&lt;xref:System.String.Format%2A?displayProperty=fullName&gt;</ph>.","pos":[2980,3095],"source":" For more information about the `String.Format` method, see <xref:System.String.Format%2A?displayProperty=fullName>."},{"pos":[3104,3111],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3115,3266],"content":"The following example causes a compiler error by trying to add <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](../../../csharp/language-reference/keywords/double.md)</ept> and <ph id=\"ph1\">`decimal`</ph> variables.","source":"The following example causes a compiler error by trying to add [double](../../../csharp/language-reference/keywords/double.md) and `decimal` variables."},{"content":"The result is the following error:","pos":[3637,3671]},{"content":"In this example, a <ph id=\"ph1\">`decimal`</ph> and an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> are mixed in the same expression.","pos":[3760,3887],"source":"In this example, a `decimal` and an [int](../../../csharp/language-reference/keywords/int.md) are mixed in the same expression."},{"content":"The result evaluates to the <ph id=\"ph1\">`decimal`</ph> type.","pos":[3888,3931],"source":" The result evaluates to the `decimal` type."},{"pos":[4056,4063],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the output is formatted by using the currency format string.","pos":[4067,4144]},{"content":"Notice that <ph id=\"ph1\">`x`</ph> is rounded because the decimal places exceed $0.99.","pos":[4145,4212],"source":" Notice that `x` is rounded because the decimal places exceed $0.99."},{"content":"The variable <ph id=\"ph1\">`y`</ph>, which represents the maximum exact digits, is displayed exactly in the correct format.","pos":[4213,4317],"source":" The variable `y`, which represents the maximum exact digits, is displayed exactly in the correct format."},{"pos":[4442,4467],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4581,4589],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4619,4679],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4683,4750],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4754,4822],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[4826,4918],"source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[4922,5014],"source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5018,5138],"source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5142,5262],"source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](../../../standard/base-types/standard-numeric-format-strings.md)</ept>","pos":[5266,5364],"source":"[Standard Numeric Format Strings](../../../standard/base-types/standard-numeric-format-strings.md)"}]}