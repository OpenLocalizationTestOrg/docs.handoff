{"content":"---\ntitle: \"ICLRSyncManager::CreateRWLockOwnerIterator Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICLRSyncManager.CreateRWLockOwnerIterator\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRSyncManager::CreateRWLockOwnerIterator\"\nhelpviewer_keywords: \n  - \"ICLRSyncManager::CreateRWLockOwnerIterator method [.NET Framework hosting]\"\n  - \"CreateRWLockOwnerIterator method [.NET Framework hosting]\"\nms.assetid: b5535b87-9439-424e-b9b3-7d6fafb9819e\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# ICLRSyncManager::CreateRWLockOwnerIterator Method\nRequests that the common language runtime (CLR) create an iterator for the host to use to determine the set of tasks waiting on a reader-writer lock.  \n  \n## Syntax  \n  \n```  \nHRESULT CreateRWLockOwnerIterator (  \n    [in]  SIZE_T    cookie,  \n    [out] SIZE_T   *pIterator  \n);  \n```  \n  \n## Parameters  \n `cookie`  \n [in] The cookie associated with the desired reader-writer lock.  \n  \n `pIterator`  \n [out] A pointer to an iterator that can be passed to the [GetRWLockOwnerNext](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-getrwlockownernext-method.md) and [DeleteRWLockOwnerIterator](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-deleterwlockowneriterator-method.md) methods.  \n  \n## Return Value  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|S_OK|`CreateRWLockOwnerIterator` returned successfully.|  \n|HOST_E_CLRNOTAVAILABLE|The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.|  \n|HOST_E_TIMEOUT|The call timed out.|  \n|HOST_E_NOT_OWNER|The caller does not own the lock.|  \n|HOST_E_ABANDONED|An event was canceled while a blocked thread or fiber was waiting on it.|  \n|E_FAIL|An unknown catastrophic failure occurred. When a method returns E_FAIL, the CLR is no longer usable within the process. Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.|  \n|HOST_E_INVALIDOPERATION|`CreateRWLockOwnerIterator` was called on a thread that is currently running managed code.|  \n  \n## Remarks  \n Hosts typically call the `CreateRWLockOwnerIterator`, `DeleteRWLockOwnerIterator`, and `GetRWLockOwnerNext` methods during deadlock detection. The host is responsible for ensuring that the reader-writer lock is still valid, because the CLR makes no attempt to keep the reader-writer lock alive. Several strategies are available for the host to ensure the validity of the lock:  \n  \n-   The host can block release calls on the reader-writer lock (for example, [IHostSemaphore::ReleaseSemaphore](../../../../docs/framework/unmanaged-api/hosting/ihostsemaphore-releasesemaphore-method.md)) while ensuring that this block does not cause deadlock.  \n  \n-   The host can block the exit from waiting on the event object associated with the reader-writer lock, again ensuring that this block does not cause deadlock.  \n  \n> [!NOTE]\n>  `CreateRWLockOwnerIterator` must be called only on threads that are currently executing unmanaged code.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** MSCorEE.h  \n  \n **Library:** Included as a resource in MSCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See also\n\n- [ICLRSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md)\n- [IHostSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)\n","nodes":[{"pos":[4,542],"embed":true,"restype":"x-metadata","content":"title: \"ICLRSyncManager::CreateRWLockOwnerIterator Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICLRSyncManager.CreateRWLockOwnerIterator\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRSyncManager::CreateRWLockOwnerIterator\"\nhelpviewer_keywords: \n  - \"ICLRSyncManager::CreateRWLockOwnerIterator method [.NET Framework hosting]\"\n  - \"CreateRWLockOwnerIterator method [.NET Framework hosting]\"\nms.assetid: b5535b87-9439-424e-b9b3-7d6fafb9819e\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method","nodes":[{"pos":[0,49],"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method","nodes":[{"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[549,598],"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method","linkify":"ICLRSyncManager::CreateRWLockOwnerIterator Method","nodes":[{"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method","pos":[0,49]}]},{"content":"Requests that the common language runtime (CLR) create an iterator for the host to use to determine the set of tasks waiting on a reader-writer lock.","pos":[599,748]},{"pos":[757,763],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[892,902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The cookie associated with the desired reader-writer lock.","pos":[918,981]},{"content":"[out] A pointer to an iterator that can be passed to the <bpt id=\"p1\">[</bpt>GetRWLockOwnerNext<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-getrwlockownernext-method.md)</ept> and <bpt id=\"p2\">[</bpt>DeleteRWLockOwnerIterator<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-deleterwlockowneriterator-method.md)</ept> methods.","pos":[1003,1318],"source":"[out] A pointer to an iterator that can be passed to the [GetRWLockOwnerNext](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-getrwlockownernext-method.md) and [DeleteRWLockOwnerIterator](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-deleterwlockowneriterator-method.md) methods."},{"pos":[1327,1339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"HRESULT","pos":[1346,1353]},{"content":"Description","pos":[1354,1365]},{"content":"S_OK","pos":[1406,1410]},{"pos":[1411,1461],"content":"<ph id=\"ph1\">`CreateRWLockOwnerIterator`</ph> returned successfully.","source":"`CreateRWLockOwnerIterator` returned successfully."},{"content":"HOST_E_CLRNOTAVAILABLE","pos":[1466,1488]},{"content":"The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.","pos":[1489,1627]},{"content":"HOST_E_TIMEOUT","pos":[1632,1646]},{"content":"The call timed out.","pos":[1647,1666]},{"content":"HOST_E_NOT_OWNER","pos":[1671,1687]},{"content":"The caller does not own the lock.","pos":[1688,1721]},{"content":"HOST_E_ABANDONED","pos":[1726,1742]},{"content":"An event was canceled while a blocked thread or fiber was waiting on it.","pos":[1743,1815]},{"content":"E_FAIL","pos":[1820,1826]},{"content":"An unknown catastrophic failure occurred.","pos":[1827,1868]},{"content":"When a method returns E_FAIL, the CLR is no longer usable within the process.","pos":[1869,1946]},{"content":"Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.","pos":[1947,2013]},{"content":"HOST_E_INVALIDOPERATION","pos":[2018,2041]},{"pos":[2042,2132],"content":"<ph id=\"ph1\">`CreateRWLockOwnerIterator`</ph> was called on a thread that is currently running managed code.","source":"`CreateRWLockOwnerIterator` was called on a thread that is currently running managed code."},{"pos":[2142,2149],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Hosts typically call the <ph id=\"ph1\">`CreateRWLockOwnerIterator`</ph>, <ph id=\"ph2\">`DeleteRWLockOwnerIterator`</ph>, and <ph id=\"ph3\">`GetRWLockOwnerNext`</ph> methods during deadlock detection.","pos":[2153,2295],"source":"Hosts typically call the `CreateRWLockOwnerIterator`, `DeleteRWLockOwnerIterator`, and `GetRWLockOwnerNext` methods during deadlock detection."},{"content":"The host is responsible for ensuring that the reader-writer lock is still valid, because the CLR makes no attempt to keep the reader-writer lock alive.","pos":[2296,2447]},{"content":"Several strategies are available for the host to ensure the validity of the lock:","pos":[2448,2529]},{"pos":[2539,2795],"content":"The host can block release calls on the reader-writer lock (for example, <bpt id=\"p1\">[</bpt>IHostSemaphore::ReleaseSemaphore<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihostsemaphore-releasesemaphore-method.md)</ept>) while ensuring that this block does not cause deadlock.","source":"The host can block release calls on the reader-writer lock (for example, [IHostSemaphore::ReleaseSemaphore](../../../../docs/framework/unmanaged-api/hosting/ihostsemaphore-releasesemaphore-method.md)) while ensuring that this block does not cause deadlock."},{"content":"The host can block the exit from waiting on the event object associated with the reader-writer lock, again ensuring that this block does not cause deadlock.","pos":[2805,2961]},{"pos":[2969,3083],"content":"[!NOTE]\n `CreateRWLockOwnerIterator` must be called only on threads that are currently executing unmanaged code.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">`CreateRWLockOwnerIterator`</ph> must be called only on threads that are currently executing unmanaged code.","pos":[9,112],"source":"`CreateRWLockOwnerIterator` must be called only on threads that are currently executing unmanaged code."}]},{"pos":[3092,3104],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3108,3212],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3219,3240],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> MSCorEE.h","source":"**Header:** MSCorEE.h"},{"pos":[3247,3297],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Included as a resource in MSCorEE.dll","source":"**Library:** Included as a resource in MSCorEE.dll"},{"pos":[3304,3412],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3421,3429],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3433,3539],"content":"<bpt id=\"p1\">[</bpt>ICLRSyncManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md)</ept>","source":"[ICLRSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md)"},{"pos":[3542,3650],"content":"<bpt id=\"p1\">[</bpt>IHostSyncManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)</ept>","source":"[IHostSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)"}]}