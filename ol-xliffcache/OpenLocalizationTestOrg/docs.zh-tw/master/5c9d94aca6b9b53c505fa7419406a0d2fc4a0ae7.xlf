<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="implementing-the-ui-automation-invoke-control-pattern.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c9d94aca6b9b53c505fa7419406a0d2fc4a0ae7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\ui-automation\implementing-the-ui-automation-invoke-control-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c768896fed1c5edd15034ee3255cde19f3565d5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d126a13ec35736aadf2bfc0da3bb8b114ce8cf79</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Implementing the UI Automation Invoke Control Pattern</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing the UI Automation Invoke Control Pattern</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This documentation is intended for .NET Framework developers who want to use the managed <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> classes defined in the <ph id="ph2">&lt;xref:System.Windows.Automation&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For the latest information about <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, see <bpt id="p1">[</bpt>Windows Automation API: UI Automation<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=156746)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic introduces guidelines and conventions for implementing <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider&gt;</ph>, including information about events and properties.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Links to additional references are listed at the end of the topic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Automation.InvokePattern&gt;</ph> control pattern is used to support controls that do not maintain state when activated but rather initiate or perform a single, unambiguous action.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Controls that do maintain state, such as check boxes and radio buttons, must instead implement <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IToggleProvider&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.ISelectionItemProvider&gt;</ph> respectively.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For examples of controls that implement the Invoke control pattern, see <bpt id="p1">[</bpt>Control Pattern Mapping for UI Automation Clients<ept id="p1">](../../../docs/framework/ui-automation/control-pattern-mapping-for-ui-automation-clients.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Implementation Guidelines and Conventions</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When implementing the Invoke control pattern, note the following guidelines and conventions:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Controls implement <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider&gt;</ph> if the same behavior is not exposed through another control pattern provider.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Windows.Automation.InvokePattern.Invoke%2A&gt;</ph> method on a control performs the same action as the <ph id="ph2">&lt;xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A&gt;</ph> method, the control should not implement <ph id="ph4">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Invoking a control is generally performed by clicking or double-clicking or pressing ENTER, a predefined keyboard shortcut, or some alternate combination of keystrokes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent&gt;</ph> is raised on a control that has been activated (as a response to a control carrying out its associated action).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If possible, the event should be raised after the control has completed the action and returned without blocking.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Invoked event should be raised before servicing the Invoke request in the following scenarios:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is not possible or practical to wait until the action is complete.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The action requires user interaction.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The action is time-consuming and will cause the calling client to block for a significant amount of time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If invoking the control has significant side-effects, those side-effects should be exposed through the <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, even though <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A&gt;</ph> is not associated with selection, <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A&gt;</ph> may cause another control to become selected.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Hover (or mouse-over) effects generally do not constitute an Invoked event.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, controls that perform an action (as opposed to cause a visual effect) based on the hover state should support the <ph id="ph1">&lt;xref:System.Windows.Automation.InvokePattern&gt;</ph> control pattern.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This implementation is considered an accessibility issue if the control can be invoked only as a result of a mouse-related side effect.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Invoking a control is different from selecting an item.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, depending on the control, invoking it may cause the item to become selected as a side-effect.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, invoking a <ph id="ph1">[!INCLUDE[TLA#tla_word](../../../includes/tlasharptla-word-md.md)]</ph> document list item in the My Documents folder both selects the item and opens the document.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An element can disappear from the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree immediately upon being invoked.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Requesting information from the element provided by the event callback may fail as a result.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Pre-fetching cached information is the recommended workaround.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Controls can implement multiple control patterns.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, the Fill Color control on the <ph id="ph1">[!INCLUDE[TLA#tla_xl](../../../includes/tlasharptla-xl-md.md)]</ph> toolbar implements both the <ph id="ph2">&lt;xref:System.Windows.Automation.InvokePattern&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Automation.ExpandCollapsePattern&gt;</ph> control patterns.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.ExpandCollapsePattern&gt;</ph> exposes the menu and the <ph id="ph2">&lt;xref:System.Windows.Automation.InvokePattern&gt;</ph> fills the active selection with the chosen color.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Required Members for IInvokeProvider</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following properties and methods are required for implementing <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Required members</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Member type</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>method</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A&gt;</ph> is an asynchronous call and must return immediately without blocking.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Providers must throw the following exceptions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Exception Type</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the control is not enabled.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UI Automation Control Patterns Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-patterns-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Support Control Patterns in a UI Automation Provider<ept id="p1">](../../../docs/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UI Automation Control Patterns for Clients<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-control-patterns-for-clients.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Invoke a Control Using UI Automation<ept id="p1">](../../../docs/framework/ui-automation/invoke-a-control-using-ui-automation.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UI Automation Tree Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-tree-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use Caching in UI Automation<ept id="p1">](../../../docs/framework/ui-automation/use-caching-in-ui-automation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>