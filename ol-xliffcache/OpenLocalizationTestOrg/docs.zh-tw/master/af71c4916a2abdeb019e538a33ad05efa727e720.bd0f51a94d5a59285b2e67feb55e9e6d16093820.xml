{"content":"---\ntitle: \"Example: Troubleshooting Dynamic Programming\"\nms.date: \"03/30/2017\"\nms.assetid: 42ed860a-a022-4682-8b7f-7c9870784671\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Example: Troubleshooting Dynamic Programming\n> [!NOTE]\n>  This topic refers to the .NET Native Developer Preview, which is pre-release software. You can download the preview from the [Microsoft Connect website](https://go.microsoft.com/fwlink/?LinkId=394611) (requires registration).  \n  \n Not all metadata lookup failures in apps developed using the [!INCLUDE[net_native](../../../includes/net-native-md.md)] tool chain result in an exception.  Some can manifest in unpredictable ways in an app.  The following example shows an access violation caused by referencing a null object:  \n  \n```  \nAccess violation - code c0000005 (first chance)  \nApp!$3_App::Core::Util::NavigationArgs.Setup  \nApp!$3_App::Core::Util::NavigationArgs..ctor  \nApp!$0_App::Gibbon::Util::DesktopNavigationArgs..ctor  \nApp!$0_App::ViewModels::DesktopAppVM.NavigateToPage  \nApp!$3_App::Core::ViewModels::AppViewModel.NavigateToFirstPage  \nApp!$3_App::Core::ViewModels::AppViewModel::<HandleLaunch>d__a.MoveNext  \nApp!$43_System::Runtime::CompilerServices::AsyncMethodBuilderCore.CallMoveNext  \nApp!System::Action.InvokeClosedStaticThunk  \nApp!System::Action.Invoke  \nApp!$43_System::Threading::Tasks::AwaitTaskContinuation.InvokeAction  \nApp!$43_System::Threading::SendOrPostCallback.InvokeOpenStaticThunk  \n[snip]  \n```  \n  \n Let's try to troubleshoot this exception by using the three-step approach outlined in the \"Manually resolve missing metadata\" section of [Getting Started](../../../docs/framework/net-native/getting-started-with-net-native.md).  \n  \n## What was the app doing?  \n The first thing to note is the `async` keyword machinery at the base of the stack.  Determining what the app was really doing in an `async` method can be problematic, because the stack has lost the context of the originating call and has run the `async` code on a different thread. However, we can deduce that the app is trying to load its first page.  In the implementation for `NavigationArgs.Setup`, the following code caused the access violation:  \n  \n```  \nAppViewModel.Current.LayoutVM.PageMap  \n```  \n  \n In this instance, the `LayoutVM` property on `AppViewModel.Current` was **null**.  Some absence of metadata caused a subtle behavior difference and resulted in a property being uninitialized instead of set, as the app expected.  Setting a breakpoint in the code where `LayoutVM` should have been initialized might throw light on the situation.  However, note that `LayoutVM`’s type is `App.Core.ViewModels.Layout.LayoutApplicationVM`.  The only metadata directive present so far in the rd.xml file is:  \n  \n```xml  \n<Namespace Name=\"App.ViewModels\" Browse=\"Required Public\" Dynamic=\"Required Public\" />  \n```  \n  \n A likely candidate for the failure is that `App.Core.ViewModels.Layout.LayoutApplicationVM` is missing metadata because it's in a different namespace.  \n  \n In this case, adding a runtime directive for `App.Core.ViewModels` resolved the issue. The root cause was an API call to the <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> method that returned **null**, and the app silently ignored the problem until a crash occurred.  \n  \n In dynamic programming, a good practice when using reflection APIs under [!INCLUDE[net_native](../../../includes/net-native-md.md)] is to use the <xref:System.Type.GetType%2A?displayProperty=nameWithType> overloads that throw an exception on failure.  \n  \n## Is this an isolated case?  \n Other issues might also arise when using `App.Core.ViewModels`.  You must decide whether it’s worth identifying and fixing each missing metadata exception, or saving time and adding directives for a larger class of types.  Here, adding `dynamic` metadata for `App.Core.ViewModels` might be the best approach if the resulting size increase of the output binary isn’t an issue.  \n  \n## Could the code be rewritten?  \n If the app had used `typeof(LayoutApplicationVM)` instead of `Type.GetType(\"LayoutApplicationVM\")`, the tool chain could have preserved `browse` metadata.  However, it still wouldn't have created `invoke` metadata, which would have led to a [MissingMetadataException](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md) exception when instantiating the type. To prevent the exception, you'd still have to add a runtime directive for the namespace or the type that specifies the `dynamic` policy. For information on runtime directives, see the [Runtime Directives (rd.xml) Configuration File Reference](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md).  \n  \n## See also\n\n- [Getting Started](../../../docs/framework/net-native/getting-started-with-net-native.md)\n- [Example: Handling Exceptions When Binding Data](../../../docs/framework/net-native/example-handling-exceptions-when-binding-data.md)\n","nodes":[{"pos":[4,168],"embed":true,"restype":"x-metadata","content":"title: \"Example: Troubleshooting Dynamic Programming\"\nms.date: \"03/30/2017\"\nms.assetid: 42ed860a-a022-4682-8b7f-7c9870784671\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Example: Troubleshooting Dynamic Programming","nodes":[{"pos":[0,44],"content":"Example: Troubleshooting Dynamic Programming","nodes":[{"content":"Example: Troubleshooting Dynamic Programming","pos":[0,44]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[175,219],"content":"Example: Troubleshooting Dynamic Programming","linkify":"Example: Troubleshooting Dynamic Programming","nodes":[{"content":"Example: Troubleshooting Dynamic Programming","pos":[0,44]}]},{"pos":[222,458],"content":"[!NOTE]\n This topic refers to the .NET Native Developer Preview, which is pre-release software. You can download the preview from the [Microsoft Connect website](https://go.microsoft.com/fwlink/?LinkId=394611) (requires registration).","leadings":["","> "],"nodes":[{"content":"This topic refers to the .NET Native Developer Preview, which is pre-release software. You can download the preview from the [Microsoft Connect website](https://go.microsoft.com/fwlink/?LinkId=394611) (requires registration).","pos":[9,234],"nodes":[{"content":"This topic refers to the .NET Native Developer Preview, which is pre-release software.","pos":[0,86]},{"content":"You can download the preview from the <bpt id=\"p1\">[</bpt>Microsoft Connect website<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=394611)</ept> (requires registration).","pos":[87,225],"source":" You can download the preview from the [Microsoft Connect website](https://go.microsoft.com/fwlink/?LinkId=394611) (requires registration)."}]}]},{"content":"Not all metadata lookup failures in apps developed using the <ph id=\"ph1\">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tool chain result in an exception.","pos":[465,619],"source":"Not all metadata lookup failures in apps developed using the [!INCLUDE[net_native](../../../includes/net-native-md.md)] tool chain result in an exception."},{"content":"Some can manifest in unpredictable ways in an app.","pos":[621,671]},{"content":"The following example shows an access violation caused by referencing a null object:","pos":[673,757]},{"pos":[1476,1702],"content":"Let's try to troubleshoot this exception by using the three-step approach outlined in the \"Manually resolve missing metadata\" section of <bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](../../../docs/framework/net-native/getting-started-with-net-native.md)</ept>.","source":"Let's try to troubleshoot this exception by using the three-step approach outlined in the \"Manually resolve missing metadata\" section of [Getting Started](../../../docs/framework/net-native/getting-started-with-net-native.md)."},{"pos":[1711,1734],"content":"What was the app doing?","linkify":"What was the app doing?","nodes":[{"content":"What was the app doing?","pos":[0,23]}]},{"content":"The first thing to note is the <ph id=\"ph1\">`async`</ph> keyword machinery at the base of the stack.","pos":[1738,1820],"source":"The first thing to note is the `async` keyword machinery at the base of the stack."},{"content":"Determining what the app was really doing in an <ph id=\"ph1\">`async`</ph> method can be problematic, because the stack has lost the context of the originating call and has run the <ph id=\"ph2\">`async`</ph> code on a different thread.","pos":[1822,2019],"source":"  Determining what the app was really doing in an `async` method can be problematic, because the stack has lost the context of the originating call and has run the `async` code on a different thread."},{"content":"However, we can deduce that the app is trying to load its first page.","pos":[2020,2089]},{"content":"In the implementation for <ph id=\"ph1\">`NavigationArgs.Setup`</ph>, the following code caused the access violation:","pos":[2091,2188],"source":"  In the implementation for `NavigationArgs.Setup`, the following code caused the access violation:"},{"content":"In this instance, the <ph id=\"ph1\">`LayoutVM`</ph> property on <ph id=\"ph2\">`AppViewModel.Current`</ph> was <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","pos":[2250,2331],"source":"In this instance, the `LayoutVM` property on `AppViewModel.Current` was **null**."},{"content":"Some absence of metadata caused a subtle behavior difference and resulted in a property being uninitialized instead of set, as the app expected.","pos":[2333,2477]},{"content":"Setting a breakpoint in the code where <ph id=\"ph1\">`LayoutVM`</ph> should have been initialized might throw light on the situation.","pos":[2479,2593],"source":"  Setting a breakpoint in the code where `LayoutVM` should have been initialized might throw light on the situation."},{"content":"However, note that <ph id=\"ph1\">`LayoutVM`</ph>’s type is <ph id=\"ph2\">`App.Core.ViewModels.Layout.LayoutApplicationVM`</ph>.","pos":[2595,2684],"source":"  However, note that `LayoutVM`’s type is `App.Core.ViewModels.Layout.LayoutApplicationVM`."},{"content":"The only metadata directive present so far in the rd.xml file is:","pos":[2686,2751]},{"pos":[2865,3015],"content":"A likely candidate for the failure is that <ph id=\"ph1\">`App.Core.ViewModels.Layout.LayoutApplicationVM`</ph> is missing metadata because it's in a different namespace.","source":"A likely candidate for the failure is that `App.Core.ViewModels.Layout.LayoutApplicationVM` is missing metadata because it's in a different namespace."},{"content":"In this case, adding a runtime directive for <ph id=\"ph1\">`App.Core.ViewModels`</ph> resolved the issue.","pos":[3022,3108],"source":"In this case, adding a runtime directive for `App.Core.ViewModels` resolved the issue."},{"content":"The root cause was an API call to the <ph id=\"ph1\">&lt;xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType&gt;</ph> method that returned <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>, and the app silently ignored the problem until a crash occurred.","pos":[3109,3317],"source":" The root cause was an API call to the <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> method that returned **null**, and the app silently ignored the problem until a crash occurred."},{"pos":[3324,3574],"content":"In dynamic programming, a good practice when using reflection APIs under <ph id=\"ph1\">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> is to use the <ph id=\"ph2\">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> overloads that throw an exception on failure.","source":"In dynamic programming, a good practice when using reflection APIs under [!INCLUDE[net_native](../../../includes/net-native-md.md)] is to use the <xref:System.Type.GetType%2A?displayProperty=nameWithType> overloads that throw an exception on failure."},{"pos":[3583,3608],"content":"Is this an isolated case?","linkify":"Is this an isolated case?","nodes":[{"content":"Is this an isolated case?","pos":[0,25]}]},{"content":"Other issues might also arise when using <ph id=\"ph1\">`App.Core.ViewModels`</ph>.","pos":[3612,3675],"source":"Other issues might also arise when using `App.Core.ViewModels`."},{"content":"You must decide whether it’s worth identifying and fixing each missing metadata exception, or saving time and adding directives for a larger class of types.","pos":[3677,3833]},{"content":"Here, adding <ph id=\"ph1\">`dynamic`</ph> metadata for <ph id=\"ph2\">`App.Core.ViewModels`</ph> might be the best approach if the resulting size increase of the output binary isn’t an issue.","pos":[3835,3987],"source":"  Here, adding `dynamic` metadata for `App.Core.ViewModels` might be the best approach if the resulting size increase of the output binary isn’t an issue."},{"pos":[3996,4024],"content":"Could the code be rewritten?","linkify":"Could the code be rewritten?","nodes":[{"content":"Could the code be rewritten?","pos":[0,28]}]},{"content":"If the app had used <ph id=\"ph1\">`typeof(LayoutApplicationVM)`</ph> instead of <ph id=\"ph2\">`Type.GetType(\"LayoutApplicationVM\")`</ph>, the tool chain could have preserved <ph id=\"ph3\">`browse`</ph> metadata.","pos":[4028,4182],"source":"If the app had used `typeof(LayoutApplicationVM)` instead of `Type.GetType(\"LayoutApplicationVM\")`, the tool chain could have preserved `browse` metadata."},{"content":"However, it still wouldn't have created <ph id=\"ph1\">`invoke`</ph> metadata, which would have led to a <bpt id=\"p1\">[</bpt>MissingMetadataException<ept id=\"p1\">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept> exception when instantiating the type.","pos":[4184,4415],"source":"  However, it still wouldn't have created `invoke` metadata, which would have led to a [MissingMetadataException](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md) exception when instantiating the type."},{"content":"To prevent the exception, you'd still have to add a runtime directive for the namespace or the type that specifies the <ph id=\"ph1\">`dynamic`</ph> policy.","pos":[4416,4552],"source":" To prevent the exception, you'd still have to add a runtime directive for the namespace or the type that specifies the `dynamic` policy."},{"content":"For information on runtime directives, see the <bpt id=\"p1\">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept>.","pos":[4553,4753],"source":" For information on runtime directives, see the [Runtime Directives (rd.xml) Configuration File Reference](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)."},{"pos":[4762,4770],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4774,4862],"content":"<bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](../../../docs/framework/net-native/getting-started-with-net-native.md)</ept>","source":"[Getting Started](../../../docs/framework/net-native/getting-started-with-net-native.md)"},{"pos":[4865,4998],"content":"<bpt id=\"p1\">[</bpt>Example: Handling Exceptions When Binding Data<ept id=\"p1\">](../../../docs/framework/net-native/example-handling-exceptions-when-binding-data.md)</ept>","source":"[Example: Handling Exceptions When Binding Data](../../../docs/framework/net-native/example-handling-exceptions-when-binding-data.md)"}]}