<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="interpolated-strings.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee9d0f9803c6de056644587578792568ab25b4da</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\interpolated-strings.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">977f3f9acd4d97eb03897ba2d14d24fbcb6dc285</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95471ca5385b2d5a10148d479eaf8265e0de60f5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Interpolated Strings (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interpolated Strings (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Used to construct strings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An interpolated string looks like a template string that contains <bpt id="p1">*</bpt>interpolated expressions<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An interpolated string returns a string that replaces the interpolated expressions that it contains with their string representations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The arguments of an interpolated string are easier to understand than a <bpt id="p1">[</bpt>composite format string<ept id="p1">](../../../standard/base-types/composite-formatting.md#composite-format-string)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, the interpolated string</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>contains two interpolated expressions, '{name}' and '{hours:hh}'.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The equivalent composite format string is:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The structure of an interpolated string is:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>where:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>field-width<ept id="p1">*</ept> is a signed integer that indicates the number of characters in the field.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If it is positive, the field is right-aligned; if negative, left-aligned.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>format-string<ept id="p1">*</ept> is a format string appropriate for the type of object being formatted.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, for a <ph id="ph1">@System.DateTime</ph> value, it could be a standard date and time format string such as "D" or "d".</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use an interpolated string anywhere you can use a string literal.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The interpolated string is evaluated each time the code with the interpolated string executes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This allows you to separate the definition and evaluation of an interpolated string.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To include a curly brace ("{" or "}") in an interpolated string, use two curly braces, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See the Implicit Conversions section for more details.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the interpolated string contains other characters with special meaning in an interpolated string, such as the quotation mark ("), colon (:), or comma (,), they should be escaped if they occur in literal text, or they should be included in an expression delimited by parentheses if they are language elements included in an interpolated expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example escapes quotation marks to include them in the result string, and it uses parentheses to delimit the expression <ph id="ph1">`(age == 1 ? "" : "s")`</ph> so that the colon is not interpreted as beginning a format string.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implicit Conversions</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>There are three implicit type conversions from an interpolated string:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Conversion of an interpolated string to a <ph id="ph1">@System.String</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example returns a string whose interpolated string expressions have been replaced with their string representations.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is the final result of a string interpretation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All occurrences of double curly braces ("{{" and "}}") are converted to a single curly brace.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Conversion of an interpolated string to an <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> variable that allows you create multiple result strings with culture-specific content from a single <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is useful for including such things as the correct numeric and date formats for individual cultures.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>All occurrences of double curly braces ("{{" and "}}") remain as double curly braces until you format the string by explicitly or implicitly calling the <ph id="ph1">@System.Object.ToString</ph> method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>All contained interpolation expressions are converted to {0}, {1}, and so on.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example uses reflection to display the members as well as the field and property values of an <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> variable that is created from an interpolated string.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It also passes the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> variable to the <ph id="ph2">@System.Console</ph>(System.String) method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Note that the interpolated string can be inspected only by using reflection.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If it is passed to a string formatting method, such as <ph id="ph1">@System.Console.WriteLine</ph>(System.String), its format items are resolved and the result string returned.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Conversion of an interpolated string to an <ph id="ph1">&lt;xref:System.FormattableString&gt;</ph> variable that represents a composite format string.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Inspecting the composite format string and how it renders as a result string might, for example, help you protect against an injection attack if you were building a query.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.FormattableString&gt;</ph> also includes <ph id="ph2">&lt;xref:System.FormattableString.ToString&gt;</ph> overloads that let you produce result strings for the <ph id="ph3">@System.Globalization.InvariantCulture</ph> and <ph id="ph4">@System.Globalization.CurrentCulture</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>All occurrences of double curly braces ("{{" and "}}") remain as double curly braces, until you format.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>All contained interpolation expressions are converted to {0}, {1}, and so on.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Language Specification</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>