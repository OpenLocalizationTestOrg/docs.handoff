{"content":"---\ntitle: Unit testing C# with NUnit and .NET Core\ndescription: Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and NUnit.\nauthor: rprouse\nms.date: 08/31/2018\nms.custom: \"seodec18\"\n---\n# Unit testing C# with NUnit and .NET Core\n\nThis tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts. If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/) before you begin. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\n## Prerequisites\n\n- [.NET Core 2.1 SDK](https://www.microsoft.com/net/download) or later versions.\n- A text editor or code editor of your choice.\n\n## Creating the source project\n\nOpen a shell window. Create a directory called *unit-testing-using-nunit* to hold the solution. Inside this new directory, run the following command to create a new solution file for the class library and the test project:\n\n```console\ndotnet new sln\n```\n \nNext, create a *PrimeService* directory. The following outline shows the directory and file structure so far:\n\n```\n/unit-testing-using-nunit\n    unit-testing-using-nunit.sln\n    /PrimeService\n```\n\nMake *PrimeService* the current directory and run the following command to create the source project:\n\n```console\ndotnet new classlib\n```\n\nRename *Class1.cs* to *PrimeService.cs*. You create a failing implementation of the `PrimeService` class:\n\n```csharp\nusing System;\n\nnamespace Prime.Services\n{\n    public class PrimeService\n    {\n        public bool IsPrime(int candidate)\n        {\n            throw new NotImplementedException(\"Please create a test first\");\n        }\n    }\n}\n```\n\nChange the directory back to the *unit-testing-using-nunit* directory. Run the following command to add the class library project to the solution:\n\n```console\ndotnet sln add PrimeService/PrimeService.csproj\n```\n\n## Creating the test project\n\nNext, create the *PrimeService.Tests* directory. The following outline shows the directory structure:\n\n```\n/unit-testing-using-nunit\n    unit-testing-using-nunit.sln\n    /PrimeService\n        Source Files\n        PrimeService.csproj\n    /PrimeService.Tests\n```\n\nMake the *PrimeService.Tests* directory the current directory and create a new project using the following command:\n\n```console\ndotnet new nunit\n```\n\nThe [dotnet new](../tools/dotnet-new.md) command creates a test project that uses NUnit as the test library. The generated template configures the test runner in the *PrimeService.Tests.csproj* file:\n\n[!code-xml[Packages](~/samples/core/getting-started/unit-testing-using-nunit/PrimeService.Tests/PrimeService.Tests.csproj#Packages)]\n\nThe test project requires other packages to create and run unit tests. `dotnet new` in the previous step added the Microsoft test SDK, the NUnit test framework, and the NUnit test adapter. Now, add the `PrimeService` class library as another dependency to the project. Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:\n\n```console\ndotnet add reference ../PrimeService/PrimeService.csproj\n```\n\nYou can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService.Tests/PrimeService.Tests.csproj) on GitHub.\n\nThe following outline shows the final solution layout:\n\n```\n/unit-testing-using-nunit\n    unit-testing-using-nunit.sln\n    /PrimeService\n        Source Files\n        PrimeService.csproj\n    /PrimeService.Tests\n        Test Source Files\n        PrimeService.Tests.csproj\n```\n\nExecute the following command in the *unit-testing-using-nunit* directory:\n\n```console\ndotnet sln add ./PrimeService.Tests/PrimeService.Tests.csproj\n```\n\n## Creating the first test\n\nYou write one failing test, make it pass, then repeat the process. In the *PrimeService.Tests* directory, rename the *UnitTest1.cs* file to *PrimeService_IsPrimeShould.cs* and replace its entire contents with the following code:\n\n```csharp\nusing NUnit.Framework;\nusing Prime.Services;\n\nnamespace Prime.UnitTests.Services\n{\n    [TestFixture]\n    public class PrimeService_IsPrimeShould\n    {\n        private readonly PrimeService _primeService;\n\n        public PrimeService_IsPrimeShould()\n        {\n            _primeService = new PrimeService();\n        }\n\n        [Test]\n        public void ReturnFalseGivenValueOf1()\n        {\n            var result = _primeService.IsPrime(1);\n\n            Assert.IsFalse(result, \"1 should not be prime\");\n        }\n    }\n}\n```\n\nThe `[TestFixture]` attribute denotes a class that contains unit tests. The `[Test]` attribute indicates a method is a test method.\n\nSave this file and execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests. The NUnit test runner contains the program entry point to run your tests. `dotnet test` starts the test runner using the unit test project you've created.\n\nYour test fails. You haven't created the implementation yet. Make this test pass by writing the simplest code in the `PrimeService` class that works:\n\n```csharp\npublic bool IsPrime(int candidate)\n{\n    if (candidate == 1)\n    {\n        return false;\n    }\n    throw new NotImplementedException(\"Please create a test first\");\n}\n```\n\nIn the *unit-testing-using-nunit* directory, run `dotnet test` again. The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project. After building both projects, it runs this single test. It passes.\n\n## Adding more features\n\nNow that you've made one test pass, it's time to write more. There are a few other simple cases for prime numbers: 0, -1. You could add new tests with the `[Test]` attribute, but that quickly becomes tedious. There are other NUnit attributes that enable you to write a suite of similar tests.  A `[TestCase]` attribute is used to create a suite of tests that execute the same code but have different input arguments. You can use the `[TestCase]` attribute to specify values for those inputs.\n\nInstead of creating new tests, apply this attribute to create a single data driven test. The data driven test is a method that tests several values less than two, which is the lowest prime number:\n\n[!code-csharp[Sample_TestCode](../../../samples/core/getting-started/unit-testing-using-nunit/PrimeService.Tests/PrimeService_IsPrimeShould.cs?name=Sample_TestCode)]\n\nRun `dotnet test`, and two of these tests fail. To make all of the tests pass, change the `if` clause at the beginning of the `Main` method in the *PrimeService.cs* file:\n\n```csharp\nif (candidate < 2)\n```\n\nContinue to iterate by adding more tests, more theories, and more code in the main library. You have the [finished version of the tests](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService.Tests/PrimeService_IsPrimeShould.cs) and the [complete implementation of the library](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService/PrimeService.cs).\n\nYou've built a small library and a set of unit tests for that library. You've structured the solution so that adding new packages and tests is part of the normal workflow. You've concentrated most of your time and effort on solving the goals of the application.\n","nodes":[{"pos":[4,270],"embed":true,"restype":"x-metadata","content":"title: Unit testing C# with NUnit and .NET Core\ndescription: Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and NUnit.\nauthor: rprouse\nms.date: 08/31/2018\nms.custom: \"seodec18\"","nodes":[{"content":"Unit testing C# with NUnit and .NET Core","nodes":[{"pos":[0,40],"content":"Unit testing C# with NUnit and .NET Core","nodes":[{"content":"Unit testing C# with NUnit and .NET Core","pos":[0,40]}]}],"path":["title"],"nosxs":false},{"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and NUnit.","nodes":[{"pos":[0,147],"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and NUnit.","nodes":[{"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and NUnit.","pos":[0,147]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[277,317],"content":"Unit testing C# with NUnit and .NET Core","linkify":"Unit testing C# with NUnit and .NET Core","nodes":[{"content":"Unit testing C# with NUnit and .NET Core","pos":[0,40]}]},{"content":"This tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts.","pos":[319,448]},{"content":"If you prefer to follow the tutorial using a pre-built solution, <bpt id=\"p1\">[</bpt>view or download the sample code<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/)</ept> before you begin.","pos":[449,660],"source":" If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/) before you begin."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[661,786],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[791,804],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[808,886],"content":"<bpt id=\"p1\">[</bpt>.NET Core 2.1 SDK<ept id=\"p1\">](https://www.microsoft.com/net/download)</ept> or later versions.","source":"[.NET Core 2.1 SDK](https://www.microsoft.com/net/download) or later versions."},{"content":"A text editor or code editor of your choice.","pos":[889,933]},{"pos":[938,965],"content":"Creating the source project","linkify":"Creating the source project","nodes":[{"content":"Creating the source project","pos":[0,27]}]},{"content":"Open a shell window.","pos":[967,987]},{"content":"Create a directory called <bpt id=\"p1\">*</bpt>unit-testing-using-nunit<ept id=\"p1\">*</ept> to hold the solution.","pos":[988,1062],"source":" Create a directory called *unit-testing-using-nunit* to hold the solution."},{"content":"Inside this new directory, run the following command to create a new solution file for the class library and the test project:","pos":[1063,1189]},{"content":"Next, create a <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> directory.","pos":[1223,1263],"source":"Next, create a *PrimeService* directory."},{"content":"The following outline shows the directory and file structure so far:","pos":[1264,1332]},{"pos":[1420,1521],"content":"Make <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> the current directory and run the following command to create the source project:","source":"Make *PrimeService* the current directory and run the following command to create the source project:"},{"content":"Rename <bpt id=\"p1\">*</bpt>Class1.cs<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>PrimeService.cs<ept id=\"p2\">*</ept>.","pos":[1559,1599],"source":"Rename *Class1.cs* to *PrimeService.cs*."},{"content":"You create a failing implementation of the <ph id=\"ph1\">`PrimeService`</ph> class:","pos":[1600,1664],"source":" You create a failing implementation of the `PrimeService` class:"},{"content":"Change the directory back to the <bpt id=\"p1\">*</bpt>unit-testing-using-nunit<ept id=\"p1\">*</ept> directory.","pos":[1907,1977],"source":"Change the directory back to the *unit-testing-using-nunit* directory."},{"content":"Run the following command to add the class library project to the solution:","pos":[1978,2053]},{"pos":[2122,2147],"content":"Creating the test project","linkify":"Creating the test project","nodes":[{"content":"Creating the test project","pos":[0,25]}]},{"content":"Next, create the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory.","pos":[2149,2197],"source":"Next, create the *PrimeService.Tests* directory."},{"content":"The following outline shows the directory structure:","pos":[2198,2250]},{"pos":[2411,2526],"content":"Make the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory the current directory and create a new project using the following command:","source":"Make the *PrimeService.Tests* directory the current directory and create a new project using the following command:"},{"content":"The <bpt id=\"p1\">[</bpt>dotnet new<ept id=\"p1\">](../tools/dotnet-new.md)</ept> command creates a test project that uses NUnit as the test library.","pos":[2561,2669],"source":"The [dotnet new](../tools/dotnet-new.md) command creates a test project that uses NUnit as the test library."},{"content":"The generated template configures the test runner in the <bpt id=\"p1\">*</bpt>PrimeService.Tests.csproj<ept id=\"p1\">*</ept> file:","pos":[2670,2760],"source":" The generated template configures the test runner in the *PrimeService.Tests.csproj* file:"},{"content":"The test project requires other packages to create and run unit tests.","pos":[2896,2966]},{"content":"<ph id=\"ph1\">`dotnet new`</ph> in the previous step added the Microsoft test SDK, the NUnit test framework, and the NUnit test adapter.","pos":[2967,3084],"source":"`dotnet new` in the previous step added the Microsoft test SDK, the NUnit test framework, and the NUnit test adapter."},{"content":"Now, add the <ph id=\"ph1\">`PrimeService`</ph> class library as another dependency to the project.","pos":[3085,3164],"source":" Now, add the `PrimeService` class library as another dependency to the project."},{"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add reference`</ph><ept id=\"p1\">](../tools/dotnet-add-reference.md)</ept> command:","pos":[3165,3240],"source":" Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:"},{"pos":[3315,3519],"content":"You can see the entire file in the <bpt id=\"p1\">[</bpt>samples repository<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService.Tests/PrimeService.Tests.csproj)</ept> on GitHub.","source":"You can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService.Tests/PrimeService.Tests.csproj) on GitHub."},{"content":"The following outline shows the final solution layout:","pos":[3521,3575]},{"pos":[3796,3870],"content":"Execute the following command in the <bpt id=\"p1\">*</bpt>unit-testing-using-nunit<ept id=\"p1\">*</ept> directory:","source":"Execute the following command in the *unit-testing-using-nunit* directory:"},{"pos":[3953,3976],"content":"Creating the first test","linkify":"Creating the first test","nodes":[{"content":"Creating the first test","pos":[0,23]}]},{"content":"You write one failing test, make it pass, then repeat the process.","pos":[3978,4044]},{"content":"In the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory, rename the <bpt id=\"p2\">*</bpt>UnitTest1.cs<ept id=\"p2\">*</ept> file to <bpt id=\"p3\">*</bpt>PrimeService_IsPrimeShould.cs<ept id=\"p3\">*</ept> and replace its entire contents with the following code:","pos":[4045,4206],"source":" In the *PrimeService.Tests* directory, rename the *UnitTest1.cs* file to *PrimeService_IsPrimeShould.cs* and replace its entire contents with the following code:"},{"content":"The <ph id=\"ph1\">`[TestFixture]`</ph> attribute denotes a class that contains unit tests.","pos":[4744,4815],"source":"The `[TestFixture]` attribute denotes a class that contains unit tests."},{"content":"The <ph id=\"ph1\">`[Test]`</ph> attribute indicates a method is a test method.","pos":[4816,4875],"source":" The `[Test]` attribute indicates a method is a test method."},{"content":"Save this file and execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet test`</ph><ept id=\"p1\">](../tools/dotnet-test.md)</ept> to build the tests and the class library and then run the tests.","pos":[4877,5009],"source":"Save this file and execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests."},{"content":"The NUnit test runner contains the program entry point to run your tests.","pos":[5010,5083]},{"content":"<ph id=\"ph1\">`dotnet test`</ph> starts the test runner using the unit test project you've created.","pos":[5084,5164],"source":"`dotnet test` starts the test runner using the unit test project you've created."},{"content":"Your test fails.","pos":[5166,5182]},{"content":"You haven't created the implementation yet.","pos":[5183,5226]},{"content":"Make this test pass by writing the simplest code in the <ph id=\"ph1\">`PrimeService`</ph> class that works:","pos":[5227,5315],"source":" Make this test pass by writing the simplest code in the `PrimeService` class that works:"},{"content":"In the <bpt id=\"p1\">*</bpt>unit-testing-using-nunit<ept id=\"p1\">*</ept> directory, run <ph id=\"ph1\">`dotnet test`</ph> again.","pos":[5498,5567],"source":"In the *unit-testing-using-nunit* directory, run `dotnet test` again."},{"content":"The <ph id=\"ph1\">`dotnet test`</ph> command runs a build for the <ph id=\"ph2\">`PrimeService`</ph> project and then for the <ph id=\"ph3\">`PrimeService.Tests`</ph> project.","pos":[5568,5684],"source":" The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project."},{"content":"After building both projects, it runs this single test.","pos":[5685,5740]},{"content":"It passes.","pos":[5741,5751]},{"pos":[5756,5776],"content":"Adding more features","linkify":"Adding more features","nodes":[{"content":"Adding more features","pos":[0,20]}]},{"content":"Now that you've made one test pass, it's time to write more.","pos":[5778,5838]},{"content":"There are a few other simple cases for prime numbers: 0, -1.","pos":[5839,5899]},{"content":"You could add new tests with the <ph id=\"ph1\">`[Test]`</ph> attribute, but that quickly becomes tedious.","pos":[5900,5986],"source":" You could add new tests with the `[Test]` attribute, but that quickly becomes tedious."},{"content":"There are other NUnit attributes that enable you to write a suite of similar tests.","pos":[5987,6070]},{"content":"A <ph id=\"ph1\">`[TestCase]`</ph> attribute is used to create a suite of tests that execute the same code but have different input arguments.","pos":[6072,6194],"source":"  A `[TestCase]` attribute is used to create a suite of tests that execute the same code but have different input arguments."},{"content":"You can use the <ph id=\"ph1\">`[TestCase]`</ph> attribute to specify values for those inputs.","pos":[6195,6269],"source":" You can use the `[TestCase]` attribute to specify values for those inputs."},{"content":"Instead of creating new tests, apply this attribute to create a single data driven test.","pos":[6271,6359]},{"content":"The data driven test is a method that tests several values less than two, which is the lowest prime number:","pos":[6360,6467]},{"content":"Run <ph id=\"ph1\">`dotnet test`</ph>, and two of these tests fail.","pos":[6636,6683],"source":"Run `dotnet test`, and two of these tests fail."},{"content":"To make all of the tests pass, change the <ph id=\"ph1\">`if`</ph> clause at the beginning of the <ph id=\"ph2\">`Main`</ph> method in the <bpt id=\"p1\">*</bpt>PrimeService.cs<ept id=\"p1\">*</ept> file:","pos":[6684,6806],"source":" To make all of the tests pass, change the `if` clause at the beginning of the `Main` method in the *PrimeService.cs* file:"},{"content":"Continue to iterate by adding more tests, more theories, and more code in the main library.","pos":[6842,6933]},{"content":"You have the <bpt id=\"p1\">[</bpt>finished version of the tests<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService.Tests/PrimeService_IsPrimeShould.cs)</ept> and the <bpt id=\"p2\">[</bpt>complete implementation of the library<ept id=\"p2\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService/PrimeService.cs)</ept>.","pos":[6934,7292],"source":" You have the [finished version of the tests](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService.Tests/PrimeService_IsPrimeShould.cs) and the [complete implementation of the library](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-nunit/PrimeService/PrimeService.cs)."},{"content":"You've built a small library and a set of unit tests for that library.","pos":[7294,7364]},{"content":"You've structured the solution so that adding new packages and tests is part of the normal workflow.","pos":[7365,7465]},{"content":"You've concentrated most of your time and effort on solving the goals of the application.","pos":[7466,7555]}]}