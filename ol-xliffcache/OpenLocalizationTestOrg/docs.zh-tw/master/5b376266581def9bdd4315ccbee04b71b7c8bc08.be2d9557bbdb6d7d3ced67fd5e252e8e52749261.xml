{"content":"---\ntitle: \"How to: Create Unsigned Friend Assemblies (C#)\"\nms.date: 07/20/2015\nms.assetid: 78cbc4f0-b021-4141-a4ff-eb4edbd814ca\n---\n# How to: Create Unsigned Friend Assemblies (C#)\nThis example shows how to use friend assemblies with assemblies that are unsigned.  \n  \n### To create an assembly and a friend assembly  \n  \n1.  Open a command prompt.  \n  \n2.  Create a C# file named `friend_unsigned_A.` that contains the following code. The code uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to declare friend_unsigned_B as a friend assembly.  \n  \n    ```csharp  \n    // friend_unsigned_A.cs  \n    // Compile with:   \n    // csc /target:library friend_unsigned_A.cs  \n    using System.Runtime.CompilerServices;  \n    using System;  \n  \n    [assembly: InternalsVisibleTo(\"friend_unsigned_B\")]  \n  \n    // Type is internal by default.  \n    class Class1  \n    {  \n        public void Test()  \n        {  \n            Console.WriteLine(\"Class1.Test\");  \n        }  \n    }  \n  \n    // Public type with internal member.  \n    public class Class2  \n    {  \n        internal void Test()  \n        {  \n            Console.WriteLine(\"Class2.Test\");  \n        }  \n    }  \n    ```  \n  \n3.  Compile and sign friend_unsigned_A by using the following command.  \n  \n    ```csharp  \n    csc /target:library friend_unsigned_A.cs  \n    ```  \n  \n4.  Create a C# file named `friend_unsigned_B` that contains the following code. Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access `internal` types and members from friend_unsigned_A.  \n  \n    ```csharp  \n    // friend_unsigned_B.cs  \n    // Compile with:   \n    // csc /r:friend_unsigned_A.dll /out:friend_unsigned_B.exe friend_unsigned_B.cs  \n    public class Program  \n    {  \n        static void Main()  \n        {  \n            // Access an internal type.  \n            Class1 inst1 = new Class1();  \n            inst1.Test();  \n  \n            Class2 inst2 = new Class2();  \n            // Access an internal member of a public type.  \n            inst2.Test();  \n  \n            System.Console.ReadLine();  \n        }  \n    }  \n    ```  \n  \n5.  Compile friend_unsigned_B by using the following command.  \n  \n    ```csharp  \n    csc /r:friend_unsigned_A.dll /out:friend_unsigned_B.exe friend_unsigned_B.cs  \n    ```  \n  \n     The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute. You must explicitly specify the name of the output assembly (.exe or .dll) by using the `/out` compiler option. For more information, see [/out (C# Compiler Options)](../../../../csharp/language-reference/compiler-options/out-compiler-option.md).  \n  \n6.  Run the friend_unsigned_B.exe file.  \n  \n     The program prints two strings: \"Class1.Test\" and \"Class2.Test\".  \n  \n## .NET Framework Security  \n There are similarities between the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute and the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The main difference is that <xref:System.Security.Permissions.StrongNameIdentityPermission> can demand security permissions to run a particular section of code, whereas the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute controls the visibility of `internal` types and members.  \n  \n## See also\n\n- <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>\n- [Assemblies in .NET](../../../../standard/assembly/index.md)\n- [Friend Assemblies](../../../../standard/assembly/friend-assemblies.md)\n- [How to: Create Signed Friend Assemblies (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md)\n- [C# Programming Guide](../../../../csharp/programming-guide/index.md)\n","nodes":[{"pos":[4,128],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create Unsigned Friend Assemblies (C#)\"\nms.date: 07/20/2015\nms.assetid: 78cbc4f0-b021-4141-a4ff-eb4edbd814ca","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (C#)","nodes":[{"pos":[0,46],"content":"How to: Create Unsigned Friend Assemblies (C#)","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (C#)","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[135,181],"content":"How to: Create Unsigned Friend Assemblies (C#)","linkify":"How to: Create Unsigned Friend Assemblies (C#)","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (C#)","pos":[0,46]}]},{"content":"This example shows how to use friend assemblies with assemblies that are unsigned.","pos":[182,264]},{"pos":[274,317],"content":"To create an assembly and a friend assembly","linkify":"To create an assembly and a friend assembly","nodes":[{"content":"To create an assembly and a friend assembly","pos":[0,43]}]},{"content":"Open a command prompt.","pos":[327,349]},{"content":"Create a C# file named <ph id=\"ph1\">`friend_unsigned_A.`</ph> that contains the following code.","pos":[359,436],"source":"Create a C# file named `friend_unsigned_A.` that contains the following code."},{"content":"The code uses the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to declare friend_unsigned_B as a friend assembly.","pos":[437,582],"source":" The code uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to declare friend_unsigned_B as a friend assembly."},{"content":"Compile and sign friend_unsigned_A by using the following command.","pos":[1219,1285]},{"content":"Create a C# file named <ph id=\"ph1\">`friend_unsigned_B`</ph> that contains the following code.","pos":[1371,1447],"source":"Create a C# file named `friend_unsigned_B` that contains the following code."},{"content":"Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access <ph id=\"ph1\">`internal`</ph> types and members from friend_unsigned_A.","pos":[1448,1617],"source":" Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access `internal` types and members from friend_unsigned_A."},{"content":"Compile friend_unsigned_B by using the following command.","pos":[2184,2241]},{"content":"The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute.","pos":[2364,2558],"source":"The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute."},{"content":"You must explicitly specify the name of the output assembly (.exe or .dll) by using the <ph id=\"ph1\">`/out`</ph> compiler option.","pos":[2559,2670],"source":" You must explicitly specify the name of the output assembly (.exe or .dll) by using the `/out` compiler option."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/out (C# Compiler Options)<ept id=\"p1\">](../../../../csharp/language-reference/compiler-options/out-compiler-option.md)</ept>.","pos":[2671,2805],"source":" For more information, see [/out (C# Compiler Options)](../../../../csharp/language-reference/compiler-options/out-compiler-option.md)."},{"content":"Run the friend_unsigned_B.exe file.","pos":[2815,2850]},{"content":"The program prints two strings: \"Class1.Test\" and \"Class2.Test\".","pos":[2861,2925]},{"pos":[2934,2957],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"There are similarities between the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute and the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt;</ph> class.","pos":[2961,3151],"source":"There are similarities between the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute and the <xref:System.Security.Permissions.StrongNameIdentityPermission> class."},{"content":"The main difference is that <ph id=\"ph1\">&lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt;</ph> can demand security permissions to run a particular section of code, whereas the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute controls the visibility of <ph id=\"ph3\">`internal`</ph> types and members.","pos":[3152,3458],"source":" The main difference is that <xref:System.Security.Permissions.StrongNameIdentityPermission> can demand security permissions to run a particular section of code, whereas the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute controls the visibility of `internal` types and members."},{"pos":[3467,3475],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3548,3608],"content":"<bpt id=\"p1\">[</bpt>Assemblies in .NET<ept id=\"p1\">](../../../../standard/assembly/index.md)</ept>","source":"[Assemblies in .NET](../../../../standard/assembly/index.md)"},{"pos":[3611,3682],"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies<ept id=\"p1\">](../../../../standard/assembly/friend-assemblies.md)</ept>","source":"[Friend Assemblies](../../../../standard/assembly/friend-assemblies.md)"},{"pos":[3685,3835],"content":"<bpt id=\"p1\">[</bpt>How to: Create Signed Friend Assemblies (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md)</ept>","source":"[How to: Create Signed Friend Assemblies (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md)"},{"pos":[3838,3907],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../../csharp/programming-guide/index.md)"}]}