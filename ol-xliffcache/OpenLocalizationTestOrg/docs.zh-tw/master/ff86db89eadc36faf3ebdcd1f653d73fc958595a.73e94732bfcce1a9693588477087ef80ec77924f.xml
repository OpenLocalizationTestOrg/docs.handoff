{"content":"---\ntitle: \"How to: Store Asymmetric Keys in a Key Container\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"cryptography [.NET Framework], asymmetric keys\"\n  - \"storing asymmetric keys\"\n  - \"keys, asymmetric\"\n  - \"encryption keys\"\n  - \"keys, storing in key containers\"\n  - \"asymmetric keys [.NET Framework]\"\n  - \"encryption [.NET Framework], asymmetric keys\"\n  - \"decryption keys\"\nms.assetid: 0dbcbd8d-0dcf-40e9-9f0c-e3f162d35ccc\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# How to: Store Asymmetric Keys in a Key Container\nAsymmetric private keys should never be stored verbatim or in plain text on the local computer. If you need to store a private key, you should use a key container. For more information on key containers, see [Understanding Machine-Level and User-Level RSA Key Containers](https://docs.microsoft.com/previous-versions/aspnet/f5cs0acs(v=vs.100)).  \n  \n### To create an asymmetric key and save it in a key container  \n  \n1.  Create a new instance of a <xref:System.Security.Cryptography.CspParameters> class and pass the name that you want to call the key container to the <xref:System.Security.Cryptography.CspParameters.KeyContainerName?displayProperty=nameWithType> field.  \n  \n2.  Create a new instance of a class that derives from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class (usually **RSACryptoServiceProvider** or **DSACryptoServiceProvider**) and pass the previously created **CspParameters** object to its constructor.  \n  \n### To delete the key from a key container  \n  \n1.  Create a new instance of a **CspParameters** class and pass the name that you want to call the key container to the **CspParameters.KeyContainerName** field.  \n  \n2.  Create a new instance of a class that derives from the **AsymmetricAlgorithm** class (usually **RSACryptoServiceProvider** or **DSACryptoServiceProvider**) and pass the previously created **CspParameters** object to its constructor.  \n  \n3.  Set the **PersistKeyInCSP** property of the class that derives from **AsymmetricAlgorithm** to **false** (**False** in Visual Basic).  \n  \n4.  Call the **Clear** method of the class that derives from **AsymmetricAlgorithm**. This method releases all resources of the class and clears the key container.  \n  \n## Example  \n The following example demonstrates how to create an asymmetric key, save it in a key container, retrieve the key at a later time, and delete the key from the container.  \n  \n Notice that code in the `GenKey_SaveInContainer` method and the `GetKeyFromContainer` method is similar.  When you specify a key container name for a <xref:System.Security.Cryptography.CspParameters> object and pass it to an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object with the <xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A> property or <xref:System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp%2A> property set to true, the following occurs.  If a key container with the specified name does not exist, then one is created and the key is persisted.  If a key container with the specified name does exist, then the key in the container is automatically loaded into the current <xref:System.Security.Cryptography.AsymmetricAlgorithm> object.  Therefore, the code in the `GenKey_SaveInContainer` method persists the key because it is run first, while the code in the `GetKeyFromContainer` method loads the key because it is run second.  \n  \n```vb  \nImports System  \nImports System.IO  \nImports System.Security.Cryptography  \n _  \n  \nPublic Class StoreKey  \n  \n    Public Shared Sub Main()  \n        Try  \n            ' Create a key and save it in a container.  \n            GenKey_SaveInContainer(\"MyKeyContainer\")  \n  \n            ' Retrieve the key from the container.  \n            GetKeyFromContainer(\"MyKeyContainer\")  \n  \n            ' Delete the key from the container.  \n            DeleteKeyFromContainer(\"MyKeyContainer\")  \n  \n            ' Create a key and save it in a container.  \n            GenKey_SaveInContainer(\"MyKeyContainer\")  \n  \n            ' Delete the key from the container.  \n            DeleteKeyFromContainer(\"MyKeyContainer\")  \n        Catch e As CryptographicException  \n            Console.WriteLine(e.Message)  \n        End Try  \n    End Sub  \n  \n    Public Shared Sub GenKey_SaveInContainer(ByVal ContainerName As String)  \n        ' Create the CspParameters object and set the key container   \n        ' name used to store the RSA key pair.  \n        Dim cp As New CspParameters()  \n        cp.KeyContainerName = ContainerName  \n  \n        ' Create a new instance of RSACryptoServiceProvider that accesses  \n        ' the key container MyKeyContainerName.  \n        Dim rsa As New RSACryptoServiceProvider(cp)  \n  \n        ' Display the key information to the console.  \n        Console.WriteLine(\"Key added to container:  {0}\", rsa.ToXmlString(True))  \n    End Sub  \n  \n    Public Shared Sub GetKeyFromContainer(ByVal ContainerName As String)  \n        ' Create the CspParameters object and set the key container   \n        '  name used to store the RSA key pair.  \n        Dim cp As New CspParameters()  \n        cp.KeyContainerName = ContainerName  \n  \n        ' Create a new instance of RSACryptoServiceProvider that accesses  \n        ' the key container MyKeyContainerName.  \n        Dim rsa As New RSACryptoServiceProvider(cp)  \n  \n        ' Display the key information to the console.  \n        Console.WriteLine(\"Key retrieved from container : {0}\", rsa.ToXmlString(True))  \n    End Sub  \n  \n    Public Shared Sub DeleteKeyFromContainer(ByVal ContainerName As String)  \n        ' Create the CspParameters object and set the key container   \n        '  name used to store the RSA key pair.  \n        Dim cp As New CspParameters()  \n        cp.KeyContainerName = ContainerName  \n  \n        ' Create a new instance of RSACryptoServiceProvider that accesses  \n        ' the key container.  \n        Dim rsa As New RSACryptoServiceProvider(cp)  \n  \n        ' Delete the key entry in the container.  \n        rsa.PersistKeyInCsp = False  \n  \n        ' Call Clear to release resources and delete the key from the container.  \n        rsa.Clear()  \n  \n        Console.WriteLine(\"Key deleted.\")  \n    End Sub  \nEnd Class  \n```  \n  \n```csharp  \nusing System;  \nusing System.IO;  \nusing System.Security.Cryptography;  \n  \npublic class StoreKey  \n  \n{  \n    public static void Main()  \n    {  \n        try  \n        {  \n            // Create a key and save it in a container.  \n            GenKey_SaveInContainer(\"MyKeyContainer\");  \n  \n            // Retrieve the key from the container.  \n            GetKeyFromContainer(\"MyKeyContainer\");  \n  \n            // Delete the key from the container.  \n            DeleteKeyFromContainer(\"MyKeyContainer\");  \n  \n            // Create a key and save it in a container.  \n            GenKey_SaveInContainer(\"MyKeyContainer\");  \n  \n            // Delete the key from the container.  \n            DeleteKeyFromContainer(\"MyKeyContainer\");  \n        }  \n        catch(CryptographicException e)  \n        {  \n            Console.WriteLine(e.Message);  \n        }  \n  \n    }  \n  \n    public static void GenKey_SaveInContainer(string ContainerName)  \n    {  \n        // Create the CspParameters object and set the key container   \n        // name used to store the RSA key pair.  \n        CspParameters cp = new CspParameters();  \n        cp.KeyContainerName = ContainerName;  \n  \n        // Create a new instance of RSACryptoServiceProvider that accesses  \n        // the key container MyKeyContainerName.  \n        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cp);  \n  \n        // Display the key information to the console.  \n        Console.WriteLine(\"Key added to container: \\n  {0}\", rsa.ToXmlString(true));  \n    }  \n  \n    public static void GetKeyFromContainer(string ContainerName)  \n    {  \n        // Create the CspParameters object and set the key container   \n        // name used to store the RSA key pair.  \n        CspParameters cp = new CspParameters();  \n        cp.KeyContainerName = ContainerName;  \n  \n        // Create a new instance of RSACryptoServiceProvider that accesses  \n        // the key container MyKeyContainerName.  \n        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cp);  \n  \n        // Display the key information to the console.  \n        Console.WriteLine(\"Key retrieved from container : \\n {0}\", rsa.ToXmlString(true));  \n    }  \n  \n    public static void DeleteKeyFromContainer(string ContainerName)  \n    {  \n        // Create the CspParameters object and set the key container   \n        // name used to store the RSA key pair.  \n        CspParameters cp = new CspParameters();  \n        cp.KeyContainerName = ContainerName;  \n  \n        // Create a new instance of RSACryptoServiceProvider that accesses  \n        // the key container.  \n        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cp);  \n  \n        // Delete the key entry in the container.  \n        rsa.PersistKeyInCsp = false;  \n  \n        // Call Clear to release resources and delete the key from the container.  \n        rsa.Clear();  \n  \n        Console.WriteLine(\"Key deleted.\");  \n    }  \n}  \n```  \n  \n```Output  \nKey added to container:  \n<RSAKeyValue> Key Information A</RSAKeyValue>  \nKey retrieved from container :  \n<RSAKeyValue> Key Information A</RSAKeyValue>  \nKey deleted.  \nKey added to container:  \n<RSAKeyValue> Key Information B</RSAKeyValue>  \nKey deleted.  \n```  \n  \n## See also\n\n- [Generating Keys for Encryption and Decryption](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)\n- [Encrypting Data](../../../docs/standard/security/encrypting-data.md)\n- [Decrypting Data](../../../docs/standard/security/decrypting-data.md)\n- [Cryptographic Services](../../../docs/standard/security/cryptographic-services.md)\n","nodes":[{"pos":[4,534],"embed":true,"restype":"x-metadata","content":"title: \"How to: Store Asymmetric Keys in a Key Container\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"cryptography [.NET Framework], asymmetric keys\"\n  - \"storing asymmetric keys\"\n  - \"keys, asymmetric\"\n  - \"encryption keys\"\n  - \"keys, storing in key containers\"\n  - \"asymmetric keys [.NET Framework]\"\n  - \"encryption [.NET Framework], asymmetric keys\"\n  - \"decryption keys\"\nms.assetid: 0dbcbd8d-0dcf-40e9-9f0c-e3f162d35ccc\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"How to: Store Asymmetric Keys in a Key Container","nodes":[{"pos":[0,48],"content":"How to: Store Asymmetric Keys in a Key Container","nodes":[{"content":"How to: Store Asymmetric Keys in a Key Container","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[541,589],"content":"How to: Store Asymmetric Keys in a Key Container","linkify":"How to: Store Asymmetric Keys in a Key Container","nodes":[{"content":"How to: Store Asymmetric Keys in a Key Container","pos":[0,48]}]},{"content":"Asymmetric private keys should never be stored verbatim or in plain text on the local computer.","pos":[590,685]},{"content":"If you need to store a private key, you should use a key container.","pos":[686,753]},{"content":"For more information on key containers, see <bpt id=\"p1\">[</bpt>Understanding Machine-Level and User-Level RSA Key Containers<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/aspnet/f5cs0acs(v=vs.100))</ept>.","pos":[754,934],"source":" For more information on key containers, see [Understanding Machine-Level and User-Level RSA Key Containers](https://docs.microsoft.com/previous-versions/aspnet/f5cs0acs(v=vs.100))."},{"pos":[944,1002],"content":"To create an asymmetric key and save it in a key container","linkify":"To create an asymmetric key and save it in a key container","nodes":[{"content":"To create an asymmetric key and save it in a key container","pos":[0,58]}]},{"pos":[1012,1262],"content":"Create a new instance of a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> class and pass the name that you want to call the key container to the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CspParameters.KeyContainerName?displayProperty=nameWithType&gt;</ph> field.","source":"Create a new instance of a <xref:System.Security.Cryptography.CspParameters> class and pass the name that you want to call the key container to the <xref:System.Security.Cryptography.CspParameters.KeyContainerName?displayProperty=nameWithType> field."},{"pos":[1272,1536],"content":"Create a new instance of a class that derives from the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> class (usually <bpt id=\"p1\">**</bpt>RSACryptoServiceProvider<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>DSACryptoServiceProvider<ept id=\"p2\">**</ept>) and pass the previously created <bpt id=\"p3\">**</bpt>CspParameters<ept id=\"p3\">**</ept> object to its constructor.","source":"Create a new instance of a class that derives from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class (usually **RSACryptoServiceProvider** or **DSACryptoServiceProvider**) and pass the previously created **CspParameters** object to its constructor."},{"pos":[1546,1584],"content":"To delete the key from a key container","linkify":"To delete the key from a key container","nodes":[{"content":"To delete the key from a key container","pos":[0,38]}]},{"pos":[1594,1751],"content":"Create a new instance of a <bpt id=\"p1\">**</bpt>CspParameters<ept id=\"p1\">**</ept> class and pass the name that you want to call the key container to the <bpt id=\"p2\">**</bpt>CspParameters.KeyContainerName<ept id=\"p2\">**</ept> field.","source":"Create a new instance of a **CspParameters** class and pass the name that you want to call the key container to the **CspParameters.KeyContainerName** field."},{"pos":[1761,1993],"content":"Create a new instance of a class that derives from the <bpt id=\"p1\">**</bpt>AsymmetricAlgorithm<ept id=\"p1\">**</ept> class (usually <bpt id=\"p2\">**</bpt>RSACryptoServiceProvider<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>DSACryptoServiceProvider<ept id=\"p3\">**</ept>) and pass the previously created <bpt id=\"p4\">**</bpt>CspParameters<ept id=\"p4\">**</ept> object to its constructor.","source":"Create a new instance of a class that derives from the **AsymmetricAlgorithm** class (usually **RSACryptoServiceProvider** or **DSACryptoServiceProvider**) and pass the previously created **CspParameters** object to its constructor."},{"pos":[2003,2136],"content":"Set the <bpt id=\"p1\">**</bpt>PersistKeyInCSP<ept id=\"p1\">**</ept> property of the class that derives from <bpt id=\"p2\">**</bpt>AsymmetricAlgorithm<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> (<bpt id=\"p4\">**</bpt>False<ept id=\"p4\">**</ept> in Visual Basic).","source":"Set the **PersistKeyInCSP** property of the class that derives from **AsymmetricAlgorithm** to **false** (**False** in Visual Basic)."},{"content":"Call the <bpt id=\"p1\">**</bpt>Clear<ept id=\"p1\">**</ept> method of the class that derives from <bpt id=\"p2\">**</bpt>AsymmetricAlgorithm<ept id=\"p2\">**</ept>.","pos":[2146,2227],"source":"Call the **Clear** method of the class that derives from **AsymmetricAlgorithm**."},{"content":"This method releases all resources of the class and clears the key container.","pos":[2228,2305]},{"pos":[2314,2321],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to create an asymmetric key, save it in a key container, retrieve the key at a later time, and delete the key from the container.","pos":[2325,2493]},{"content":"Notice that code in the <ph id=\"ph1\">`GenKey_SaveInContainer`</ph> method and the <ph id=\"ph2\">`GetKeyFromContainer`</ph> method is similar.","pos":[2500,2604],"source":"Notice that code in the `GenKey_SaveInContainer` method and the `GetKeyFromContainer` method is similar."},{"content":"When you specify a key container name for a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object and pass it to an <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> object with the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A&gt;</ph> property or <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp%2A&gt;</ph> property set to true, the following occurs.","pos":[2606,3012],"source":"  When you specify a key container name for a <xref:System.Security.Cryptography.CspParameters> object and pass it to an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object with the <xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A> property or <xref:System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp%2A> property set to true, the following occurs."},{"content":"If a key container with the specified name does not exist, then one is created and the key is persisted.","pos":[3014,3118]},{"content":"If a key container with the specified name does exist, then the key in the container is automatically loaded into the current <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> object.","pos":[3120,3309],"source":"  If a key container with the specified name does exist, then the key in the container is automatically loaded into the current <xref:System.Security.Cryptography.AsymmetricAlgorithm> object."},{"content":"Therefore, the code in the <ph id=\"ph1\">`GenKey_SaveInContainer`</ph> method persists the key because it is run first, while the code in the <ph id=\"ph2\">`GetKeyFromContainer`</ph> method loads the key because it is run second.","pos":[3311,3502],"source":"  Therefore, the code in the `GenKey_SaveInContainer` method persists the key because it is run first, while the code in the `GetKeyFromContainer` method loads the key because it is run second."},{"pos":[9583,9591],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[9595,9724],"content":"<bpt id=\"p1\">[</bpt>Generating Keys for Encryption and Decryption<ept id=\"p1\">](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)</ept>","source":"[Generating Keys for Encryption and Decryption](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)"},{"pos":[9727,9796],"content":"<bpt id=\"p1\">[</bpt>Encrypting Data<ept id=\"p1\">](../../../docs/standard/security/encrypting-data.md)</ept>","source":"[Encrypting Data](../../../docs/standard/security/encrypting-data.md)"},{"pos":[9799,9868],"content":"<bpt id=\"p1\">[</bpt>Decrypting Data<ept id=\"p1\">](../../../docs/standard/security/decrypting-data.md)</ept>","source":"[Decrypting Data](../../../docs/standard/security/decrypting-data.md)"},{"pos":[9871,9954],"content":"<bpt id=\"p1\">[</bpt>Cryptographic Services<ept id=\"p1\">](../../../docs/standard/security/cryptographic-services.md)</ept>","source":"[Cryptographic Services](../../../docs/standard/security/cryptographic-services.md)"}]}