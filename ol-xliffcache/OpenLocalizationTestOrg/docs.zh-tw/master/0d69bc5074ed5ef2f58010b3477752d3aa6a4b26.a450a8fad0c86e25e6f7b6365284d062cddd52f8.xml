{"content":"---\ntitle: \"Implicit conversion from &#39;&lt;typename1&gt;&#39; to &#39;&lt;typename2&gt;&#39; in copying the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument. | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc41999\"\n  - \"bc41999\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"BC41999\"\nms.assetid: ae48c738-dff8-4c0f-8931-bbb70b2c8b03\ncaps.latest.revision: 7\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Implicit conversion from &#39;&lt;typename1&gt;&#39; to &#39;&lt;typename2&gt;&#39; in copying the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument.\nA procedure is called with a [ByRef](../../../visual-basic/language-reference/modifiers/byref.md) argument of a different type than that of its corresponding parameter.  \n  \n If you pass an argument `ByRef`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] sometimes copies the argument value into a local variable in the procedure instead of passing a reference. In such a case, when the procedure returns, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must then copy the local variable value back into the argument in the calling code.  \n  \n If a `ByRef` argument value is copied into the procedure and the argument and parameter are of the same type, no conversion is necessary. But if the types are different, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must convert in both directions. Because you cannot use `CType` or any of the other conversion keywords on a procedure argument or parameter, such a conversion is always implicit.  \n  \n By default, this message is a warning. For information on hiding warnings or treating warnings as errors, see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic).  \n  \n **Error ID:** BC41999  \n  \n## To correct this error  \n  \n-   If possible, use a calling argument of the same type as the procedure parameter, so [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] does not need to do any conversion.  \n  \n-   If you need to call the procedure with an argument type different from the parameter type but do not need to return a value into the calling argument, define the parameter to be [ByVal](../../../visual-basic/language-reference/modifiers/byval.md) instead of `ByRef`.  \n  \n## See Also  \n [Procedures](../../../visual-basic/programming-guide/language-features/procedures/index.md)   \n [Procedure Parameters and Arguments](../../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)   \n [Passing Arguments by Value and by Reference](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)   \n [Implicit and Explicit Conversions](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)","nodes":[{"pos":[12,225],"content":"Implicit conversion from &#39;&lt;typename1&gt;&#39; to &#39;&lt;typename2&gt;&#39; in copying the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument. | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Implicit conversion from &#39;&lt;typename1&gt;&#39; to &#39;&lt;typename2&gt;&#39; in copying the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument. | Microsoft Docs","pos":[0,213],"nodes":[{"content":"Implicit conversion from &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>typename1<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; to &amp;#39;<ph id=\"ph3\">&amp;lt;</ph>typename2<ph id=\"ph4\">&amp;gt;</ph>&amp;#39; in copying the value of &amp;#39;ByRef&amp;#39; parameter &amp;#39;<ph id=\"ph5\">&amp;lt;</ph>parametername<ph id=\"ph6\">&amp;gt;</ph>&amp;#39; back to the matching argument.","pos":[0,196],"source":"Implicit conversion from &#39;&lt;typename1&gt;&#39; to &#39;&lt;typename2&gt;&#39; in copying the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument."},{"content":"| Microsoft Docs","pos":[197,213]}]}]},{"pos":[763,959],"content":"Implicit conversion from &#39;&lt;typename1&gt;&#39; to &#39;&lt;typename2&gt;&#39; in copying the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument.","linkify":"Implicit conversion from &#39;&lt;typename1&gt;&#39; to &#39;&lt;typename2&gt;&#39; in copying the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument.","nodes":[{"content":"Implicit conversion from &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>typename1<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; to &amp;#39;<ph id=\"ph3\">&amp;lt;</ph>typename2<ph id=\"ph4\">&amp;gt;</ph>&amp;#39; in copying the value of &amp;#39;ByRef&amp;#39; parameter &amp;#39;<ph id=\"ph5\">&amp;lt;</ph>parametername<ph id=\"ph6\">&amp;gt;</ph>&amp;#39; back to the matching argument.","pos":[0,196],"source":"Implicit conversion from &#39;&lt;typename1&gt;&#39; to &#39;&lt;typename2&gt;&#39; in copying the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument."}]},{"pos":[960,1128],"content":"A procedure is called with a <bpt id=\"p1\">[</bpt>ByRef<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/byref.md)</ept> argument of a different type than that of its corresponding parameter.","source":"A procedure is called with a [ByRef](../../../visual-basic/language-reference/modifiers/byref.md) argument of a different type than that of its corresponding parameter."},{"content":"If you pass an argument <ph id=\"ph1\">`ByRef`</ph>, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> sometimes copies the argument value into a local variable in the procedure instead of passing a reference.","pos":[1135,1364],"source":"If you pass an argument `ByRef`, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] sometimes copies the argument value into a local variable in the procedure instead of passing a reference."},{"content":"In such a case, when the procedure returns, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must then copy the local variable value back into the argument in the calling code.","pos":[1365,1582],"source":" In such a case, when the procedure returns, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must then copy the local variable value back into the argument in the calling code."},{"content":"If a <ph id=\"ph1\">`ByRef`</ph> argument value is copied into the procedure and the argument and parameter are of the same type, no conversion is necessary.","pos":[1589,1726],"source":"If a `ByRef` argument value is copied into the procedure and the argument and parameter are of the same type, no conversion is necessary."},{"content":"But if the types are different, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must convert in both directions.","pos":[1727,1881],"source":" But if the types are different, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must convert in both directions."},{"content":"Because you cannot use <ph id=\"ph1\">`CType`</ph> or any of the other conversion keywords on a procedure argument or parameter, such a conversion is always implicit.","pos":[1882,2028],"source":" Because you cannot use `CType` or any of the other conversion keywords on a procedure argument or parameter, such a conversion is always implicit."},{"content":"By default, this message is a warning.","pos":[2035,2073]},{"content":"For information on hiding warnings or treating warnings as errors, see <bpt id=\"p1\">[</bpt>Configuring Warnings in Visual Basic<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.","pos":[2074,2266],"source":" For information on hiding warnings or treating warnings as errors, see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)."},{"pos":[2273,2294],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC41999","source":"**Error ID:** BC41999"},{"pos":[2303,2324],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[2334,2543],"content":"If possible, use a calling argument of the same type as the procedure parameter, so <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> does not need to do any conversion.","source":"If possible, use a calling argument of the same type as the procedure parameter, so [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] does not need to do any conversion."},{"pos":[2553,2819],"content":"If you need to call the procedure with an argument type different from the parameter type but do not need to return a value into the calling argument, define the parameter to be <bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/byval.md)</ept> instead of <ph id=\"ph1\">`ByRef`</ph>.","source":"If you need to call the procedure with an argument type different from the parameter type but do not need to return a value into the calling argument, define the parameter to be [ByVal](../../../visual-basic/language-reference/modifiers/byval.md) instead of `ByRef`."},{"pos":[2828,2836],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2840,2932],"source":"[Procedures](../../../visual-basic/programming-guide/language-features/procedures/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[2935,3081],"source":" [Procedure Parameters and Arguments](../../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Passing Arguments by Value and by Reference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)</ept><ph id=\"ph1\"> </ph>","pos":[3084,3248],"source":" [Passing Arguments by Value and by Reference](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Implicit and Explicit Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>","pos":[3251,3394],"source":" [Implicit and Explicit Conversions](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)"}]}