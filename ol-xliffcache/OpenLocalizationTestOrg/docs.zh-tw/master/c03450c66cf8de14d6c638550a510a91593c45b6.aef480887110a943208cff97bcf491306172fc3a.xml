{"content":"---\ntitle: \"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model\"\nms.date: \"03/30/2017\"\nms.assetid: e566c15a-b600-4e4a-be3a-4af43e767dae\n---\n# How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model\nSometimes developers must have full control of how data is returned from a service operation. This is the case when a service operation must return data in a format not supported byWCF. This topic discusses using the WCF REST Programming Model to create a service that receives arbitrary data.  \n  \n### To implement the service contract  \n  \n1.  Define the service contract. The operation that receives the arbitrary data must have a parameter of type <xref:System.IO.Stream>. In addition, this parameter must be the only parameter passed in the body of the request. The operation described in this example also takes a filename parameter. This parameter is passed within the URL of the request. You can specify that a parameter is passed within the URL by specifying a <xref:System.UriTemplate> in the <xref:System.ServiceModel.Web.WebInvokeAttribute>. In this case the URI used to call this method ends in \"UploadFile/Some-Filename\". The \"{filename}\" portion of the URI template specifies that the filename parameter for the operation is passed within the URI used to call the operation.  \n  \n    ```csharp  \n     [ServiceContract]  \n    public interface IReceiveData  \n    {  \n        [WebInvoke(UriTemplate = \"UploadFile/{fileName}\")]  \n        void UploadFile(string fileName, Stream fileContents);  \n    }  \n    ```  \n  \n2.  Implement the service contract. The contract has only one method, `UploadFile` that receives a file of arbitrary data in a stream. The operation reads the stream counting the number of bytes read and then displays the filename and the number of bytes read.  \n  \n    ```csharp  \n    public class RawDataService : IReceiveData  \n    {  \n        public void UploadFile(string fileName, Stream fileContents)  \n        {  \n            byte[] buffer = new byte[10000];  \n            int bytesRead, totalBytesRead = 0;  \n            do  \n            {  \n                bytesRead = fileContents.Read(buffer, 0, buffer.Length);  \n                totalBytesRead += bytesRead;  \n            } while (bytesRead > 0);  \n            Console.WriteLine(\"Service: Received file {0} with {1} bytes\", fileName, totalBytesRead);  \n        }  \n    }  \n    ```  \n  \n### To host the service  \n  \n1.  Create a console application to host the service.  \n  \n    ```csharp  \n    class Program  \n    {  \n       static void Main(string[] args)  \n       {  \n       }  \n    }  \n    ```  \n  \n2.  Create a variable to hold the base address for the service within the `Main` method.  \n  \n    ```csharp  \n    string baseAddress = \"http://\" + Environment.MachineName + \":8000/Service\";  \n    ```  \n  \n3.  Create a <xref:System.ServiceModel.ServiceHost> instance for the service that specifies the service class and the base address.  \n  \n    ```csharp  \n    ServiceHost host = new ServiceHost(typeof(RawDataService), new Uri(baseAddress));  \n    ```  \n  \n4.  Add an endpoint that specifies the contract, <xref:System.ServiceModel.WebHttpBinding>, and <xref:System.ServiceModel.Description.WebHttpBehavior>.  \n  \n    ```csharp  \n    host.AddServiceEndpoint(typeof(IReceiveData), new WebHttpBinding(), \"\").Behaviors.Add(new WebHttpBehavior());  \n    ```  \n  \n5.  Open the service host. The service is now ready to receive requests.  \n  \n    ```csharp  \n    host.Open();  \n    Console.WriteLine(\"Host opened\");  \n    ```  \n  \n### To call the service programmatically  \n  \n1.  Create a <xref:System.Net.HttpWebRequest> with the URI used to call the service. In this code, the base address is combined with `\"/UploadFile/Text\"`. The `\"UploadFile\"` portion of the URI specifies the operation to call. The `\"Test.txt\"` portion of the URI specifies the filename parameter to pass to the `UploadFile` operation. Both of these items map to the <xref:System.UriTemplate> applied to the operation contract.  \n  \n    ```csharp  \n    HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(baseAddress + \"/UploadFile/Test.txt\");  \n    ```  \n  \n2.  Set the <xref:System.Net.HttpWebRequest.Method%2A> property of the <xref:System.Net.HttpWebRequest> to `POST` and the <xref:System.Net.HttpWebRequest.ContentType%2A> property to `\"text/plain\"`. This tells the service that the code is sending data and that data is in plain text.  \n  \n    ```csharp  \n    req.Method = \"POST\";  \n    req.ContentType = \"text/plain\";  \n    ```  \n  \n3.  Call <xref:System.Net.HttpWebRequest.GetRequestStream%2A> to get the request stream, create the data to send, write that data to the request stream, and close the stream.  \n  \n    ```csharp  \n    Stream reqStream = req.GetRequestStream();  \n    byte[] fileToSend = new byte[12345];  \n    for (int i = 0; i < fileToSend.Length; i++)  \n       {  \n           fileToSend[i] = (byte)('a' + (i % 26));  \n       }  \n    reqStream.Write(fileToSend, 0, fileToSend.Length);  \n    reqStream.Close();  \n    ```  \n  \n4.  Get the response from the service by calling <xref:System.Net.HttpWebRequest.GetResponse%2A> and display the response data to the console.  \n  \n    ```csharp  \n    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();  \n    Console.WriteLine(\"Client: Receive Response HTTP/{0} {1} {2}\", resp.ProtocolVersion, (int)resp.StatusCode, resp.StatusDescription);  \n    ```  \n  \n5.  Close the service host.  \n  \n    ```csharp  \n    host.Close();  \n    ```  \n  \n## Example  \n The following is a complete listing of the code for this example.  \n  \n```csharp  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Text;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Web;  \nusing System.ServiceModel.Description;  \nusing System.IO;  \nusing System.Net;  \n  \nnamespace ReceiveRawData  \n{  \n    [ServiceContract]  \n    public interface IReceiveData  \n    {  \n        [WebInvoke(UriTemplate = \"UploadFile/{fileName}\")]  \n        void UploadFile(string fileName, Stream fileContents);  \n    }  \n    public class RawDataService : IReceiveData  \n    {  \n        public void UploadFile(string fileName, Stream fileContents)  \n        {  \n            byte[] buffer = new byte[10000];  \n            int bytesRead, totalBytesRead = 0;  \n            do  \n            {  \n                bytesRead = fileContents.Read(buffer, 0, buffer.Length);  \n                totalBytesRead += bytesRead;  \n            } while (bytesRead > 0);  \n            Console.WriteLine(\"Service: Received file {0} with {1} bytes\", fileName, totalBytesRead);  \n        }  \n    }  \n  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            string baseAddress = \"http://\" + Environment.MachineName + \":8000/Service\";  \n            ServiceHost host = new ServiceHost(typeof(RawDataService), new Uri(baseAddress));  \n            host.AddServiceEndpoint(typeof(IReceiveData), new WebHttpBinding(), \"\").Behaviors.Add(new WebHttpBehavior());  \n            host.Open();  \n            Console.WriteLine(\"Host opened\");  \n  \n            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(baseAddress + \"/UploadFile/Test.txt\");  \n            req.Method = \"POST\";  \n            req.ContentType = \"text/plain\";  \n            Stream reqStream = req.GetRequestStream();  \n            byte[] fileToSend = new byte[12345];  \n            for (int i = 0; i < fileToSend.Length; i++)  \n            {  \n                fileToSend[i] = (byte)('a' + (i % 26));  \n            }  \n            reqStream.Write(fileToSend, 0, fileToSend.Length);  \n            reqStream.Close();  \n            HttpWebResponse resp = (HttpWebResponse)req.GetResponse();  \n            Console.WriteLine(\"Client: Receive Response HTTP/{0} {1} {2}\", resp.ProtocolVersion, (int)resp.StatusCode, resp.StatusDescription);  \n            host.Close();  \n  \n        }  \n    }  \n}  \n```  \n  \n## Compiling the Code  \n  \n-   When compiling the code reference System.ServiceModel.dll and System.ServiceModel.Web.dll  \n  \n## See also\n\n- [UriTemplate and UriTemplateTable](../../../../docs/framework/wcf/feature-details/uritemplate-and-uritemplatetable.md)\n- [WCF Web HTTP Programming Model](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)\n- [WCF Web HTTP Programming Model Overview](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)\n","nodes":[{"pos":[4,173],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model\"\nms.date: \"03/30/2017\"\nms.assetid: e566c15a-b600-4e4a-be3a-4af43e767dae","nodes":[{"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","nodes":[{"pos":[0,89],"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","nodes":[{"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","pos":[0,89]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[180,269],"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","linkify":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","nodes":[{"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","pos":[0,89]}]},{"content":"Sometimes developers must have full control of how data is returned from a service operation.","pos":[270,363]},{"content":"This is the case when a service operation must return data in a format not supported byWCF.","pos":[364,455]},{"content":"This topic discusses using the WCF REST Programming Model to create a service that receives arbitrary data.","pos":[456,563]},{"pos":[573,606],"content":"To implement the service contract","linkify":"To implement the service contract","nodes":[{"content":"To implement the service contract","pos":[0,33]}]},{"content":"Define the service contract.","pos":[616,644]},{"content":"The operation that receives the arbitrary data must have a parameter of type <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>.","pos":[645,746],"source":" The operation that receives the arbitrary data must have a parameter of type <xref:System.IO.Stream>."},{"content":"In addition, this parameter must be the only parameter passed in the body of the request.","pos":[747,836]},{"content":"The operation described in this example also takes a filename parameter.","pos":[837,909]},{"content":"This parameter is passed within the URL of the request.","pos":[910,965]},{"content":"You can specify that a parameter is passed within the URL by specifying a <ph id=\"ph1\">&lt;xref:System.UriTemplate&gt;</ph> in the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph>.","pos":[966,1123],"source":" You can specify that a parameter is passed within the URL by specifying a <xref:System.UriTemplate> in the <xref:System.ServiceModel.Web.WebInvokeAttribute>."},{"content":"In this case the URI used to call this method ends in \"UploadFile/Some-Filename\".","pos":[1124,1205]},{"content":"The \"{filename}\" portion of the URI template specifies that the filename parameter for the operation is passed within the URI used to call the operation.","pos":[1206,1359]},{"content":"Implement the service contract.","pos":[1601,1632]},{"content":"The contract has only one method, <ph id=\"ph1\">`UploadFile`</ph> that receives a file of arbitrary data in a stream.","pos":[1633,1731],"source":" The contract has only one method, `UploadFile` that receives a file of arbitrary data in a stream."},{"content":"The operation reads the stream counting the number of bytes read and then displays the filename and the number of bytes read.","pos":[1732,1857]},{"pos":[2450,2469],"content":"To host the service","linkify":"To host the service","nodes":[{"content":"To host the service","pos":[0,19]}]},{"content":"Create a console application to host the service.","pos":[2479,2528]},{"pos":[2666,2750],"content":"Create a variable to hold the base address for the service within the <ph id=\"ph1\">`Main`</ph> method.","source":"Create a variable to hold the base address for the service within the `Main` method."},{"pos":[2871,2998],"content":"Create a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> instance for the service that specifies the service class and the base address.","source":"Create a <xref:System.ServiceModel.ServiceHost> instance for the service that specifies the service class and the base address."},{"pos":[3125,3272],"content":"Add an endpoint that specifies the contract, <ph id=\"ph1\">&lt;xref:System.ServiceModel.WebHttpBinding&gt;</ph>, and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph>.","source":"Add an endpoint that specifies the contract, <xref:System.ServiceModel.WebHttpBinding>, and <xref:System.ServiceModel.Description.WebHttpBehavior>."},{"content":"Open the service host.","pos":[3427,3449]},{"content":"The service is now ready to receive requests.","pos":[3450,3495]},{"pos":[3593,3629],"content":"To call the service programmatically","linkify":"To call the service programmatically","nodes":[{"content":"To call the service programmatically","pos":[0,36]}]},{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> with the URI used to call the service.","pos":[3639,3719],"source":"Create a <xref:System.Net.HttpWebRequest> with the URI used to call the service."},{"content":"In this code, the base address is combined with <ph id=\"ph1\">`\"/UploadFile/Text\"`</ph>.","pos":[3720,3789],"source":" In this code, the base address is combined with `\"/UploadFile/Text\"`."},{"content":"The <ph id=\"ph1\">`\"UploadFile\"`</ph> portion of the URI specifies the operation to call.","pos":[3790,3860],"source":" The `\"UploadFile\"` portion of the URI specifies the operation to call."},{"content":"The <ph id=\"ph1\">`\"Test.txt\"`</ph> portion of the URI specifies the filename parameter to pass to the <ph id=\"ph2\">`UploadFile`</ph> operation.","pos":[3861,3968],"source":" The `\"Test.txt\"` portion of the URI specifies the filename parameter to pass to the `UploadFile` operation."},{"content":"Both of these items map to the <ph id=\"ph1\">&lt;xref:System.UriTemplate&gt;</ph> applied to the operation contract.","pos":[3969,4060],"source":" Both of these items map to the <xref:System.UriTemplate> applied to the operation contract."},{"content":"Set the <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.Method%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> to <ph id=\"ph3\">`POST`</ph> and the <ph id=\"ph4\">&lt;xref:System.Net.HttpWebRequest.ContentType%2A&gt;</ph> property to <ph id=\"ph5\">`\"text/plain\"`</ph>.","pos":[4203,4396],"source":"Set the <xref:System.Net.HttpWebRequest.Method%2A> property of the <xref:System.Net.HttpWebRequest> to `POST` and the <xref:System.Net.HttpWebRequest.ContentType%2A> property to `\"text/plain\"`."},{"content":"This tells the service that the code is sending data and that data is in plain text.","pos":[4397,4481]},{"pos":[4585,4755],"content":"Call <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.GetRequestStream%2A&gt;</ph> to get the request stream, create the data to send, write that data to the request stream, and close the stream.","source":"Call <xref:System.Net.HttpWebRequest.GetRequestStream%2A> to get the request stream, create the data to send, write that data to the request stream, and close the stream."},{"pos":[5093,5231],"content":"Get the response from the service by calling <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.GetResponse%2A&gt;</ph> and display the response data to the console.","source":"Get the response from the service by calling <xref:System.Net.HttpWebRequest.GetResponse%2A> and display the response data to the console."},{"content":"Close the service host.","pos":[5473,5496]},{"pos":[5554,5561],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is a complete listing of the code for this example.","pos":[5565,5630]},{"pos":[7959,7977],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"When compiling the code reference System.ServiceModel.dll and System.ServiceModel.Web.dll","pos":[7987,8076]},{"pos":[8085,8093],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8097,8215],"content":"<bpt id=\"p1\">[</bpt>UriTemplate and UriTemplateTable<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/uritemplate-and-uritemplatetable.md)</ept>","source":"[UriTemplate and UriTemplateTable](../../../../docs/framework/wcf/feature-details/uritemplate-and-uritemplatetable.md)"},{"pos":[8218,8332],"content":"<bpt id=\"p1\">[</bpt>WCF Web HTTP Programming Model<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)</ept>","source":"[WCF Web HTTP Programming Model](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)"},{"pos":[8335,8467],"content":"<bpt id=\"p1\">[</bpt>WCF Web HTTP Programming Model Overview<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)</ept>","source":"[WCF Web HTTP Programming Model Overview](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)"}]}