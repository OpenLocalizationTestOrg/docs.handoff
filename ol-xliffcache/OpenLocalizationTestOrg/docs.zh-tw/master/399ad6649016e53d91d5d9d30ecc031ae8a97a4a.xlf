<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="creating-a-class-to-hold-dll-functions.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">399ad6649016e53d91d5d9d30ecc031ae8a97a4a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\creating-a-class-to-hold-dll-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">686384a525481c189f856712b50e6f7ded3d9221</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62af94425fb44891844b3c83aea77793ee61c7ec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Creating a Class to Hold DLL Functions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating a Class to Hold DLL Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wrapping a frequently used DLL function in a managed class is an effective approach to encapsulate platform functionality.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although it is not mandatory to do so in every case, providing a class wrapper is convenient because defining DLL functions can be cumbersome and error-prone.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you are programming in Visual Basic or C#, you must declare DLL functions within a class or Visual Basic module.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Within a class, you define a static method for each DLL function you want to call.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The definition can include additional information, such as the character set or the calling convention used in passing method arguments; by omitting this information, you select the default settings.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For a complete list of declaration options and their default settings, see <bpt id="p1">[</bpt>Creating Prototypes in Managed Code<ept id="p1">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Once wrapped, you can call the methods on the class as you call static methods on any other class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Platform invoke handles the underlying exported function automatically.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When designing a managed class for platform invoke, consider the relationships between classes and DLL functions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, you can:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Declare DLL functions within an existing class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Create an individual class for each DLL function, keeping functions isolated and easy to find.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create one class for a set of related DLL functions to form logical groupings and reduce overhead.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can name the class and its methods as you please.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For examples that demonstrate how to construct .NET-based declarations to be used with platform invoke, see <bpt id="p1">[</bpt>Marshaling Data with Platform Invoke<ept id="p1">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](../../../docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Identifying Functions in DLLs<ept id="p1">](../../../docs/framework/interop/identifying-functions-in-dlls.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Prototypes in Managed Code<ept id="p1">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Calling a DLL Function<ept id="p1">](../../../docs/framework/interop/calling-a-dll-function.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>