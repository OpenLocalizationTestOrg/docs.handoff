<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-match-a-string-against-a-pattern.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4ec3ec42fff5bf2b855a55a192b1a5bb98d7463</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\operators-and-expressions\how-to-match-a-string-against-a-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10fa67a2c4b7ac0503e21708a1205640f4c0d52f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">571372630ffe1161b5133fe3a9b041e4e38dea61</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Match a String against a Pattern (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Match a String against a Pattern (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you want to find out if an expression of the <bpt id="p1">[</bpt>String Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept> satisfies a pattern, then you can use the <bpt id="p2">[</bpt>Like Operator<ept id="p2">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Like`</ph> takes two operands.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The left operand is a string expression, and the right operand is a string containing the pattern to be used for matching.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Like`</ph> returns a <ph id="ph2">`Boolean`</ph> value indicating whether the string expression satisfies the pattern.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can match each character in the string expression against a specific character, a wildcard character, a character list, or a character range.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The positions of the specifications in the pattern string correspond to the positions of the characters to be matched in the string expression.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To match a character in the string expression against a specific character</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Put the specific character directly in the pattern string.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Certain special characters must be enclosed in brackets (<ph id="ph1">`[ ]`</ph>).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Like Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example tests whether <ph id="ph1">`myString`</ph> consists exactly of the single character <ph id="ph2">`H`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To match a character in the string expression against a wildcard character</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Put a question mark (<ph id="ph1">`?`</ph>) in the pattern string.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Any valid character in this position makes a successful match.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example tests whether <ph id="ph1">`myString`</ph> consists of the single character <ph id="ph2">`W`</ph> followed by exactly two characters of any values.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To match a character in the string expression against a list of characters</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Put brackets (<ph id="ph1">`[ ]`</ph>) in the pattern string, and inside the brackets put the list of characters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Do not separate the characters with commas or any other separator.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Any single character in the list makes a successful match.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example tests whether <ph id="ph1">`myString`</ph> consists of any valid character followed by exactly one of the characters <ph id="ph2">`A`</ph>, <ph id="ph3">`C`</ph>, or <ph id="ph4">`E`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that this match is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To match a character in the string expression against a range of characters</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Put brackets (<ph id="ph1">`[ ]`</ph>) in the pattern string, and inside the brackets put the lowest and highest characters in the range, separated by a hyphen (<ph id="ph2">`â€“`</ph>).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Any single character within the range makes a successful match.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example tests whether <ph id="ph1">`myString`</ph> consists of the characters <ph id="ph2">`num`</ph> followed by exactly one of the characters <ph id="ph3">`i`</ph>, <ph id="ph4">`j`</ph>, <ph id="ph5">`k`</ph>, <ph id="ph6">`l`</ph>, <ph id="ph7">`m`</ph>, or <ph id="ph8">`n`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that this match is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Matching Empty Strings</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Like`</ph> treats the sequence <ph id="ph2">`[]`</ph> as a zero-length string (<ph id="ph3">`""`</ph>).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`[]`</ph> to test whether the entire string expression is empty, but you cannot use it to test if a particular position in the string expression is empty.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If an empty position is one of the options you need to test for, you can use <ph id="ph1">`Like`</ph> more than once.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To match a character in the string expression against a list of characters or no character</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`Like`</ph> operator twice on the same string expression, and connect the two calls with either the <bpt id="p1">[</bpt>Or Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/or-operator.md)</ept> or the <bpt id="p2">[</bpt>OrElse Operator<ept id="p2">](../../../../visual-basic/language-reference/operators/orelse-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the pattern string for the first <ph id="ph1">`Like`</ph> clause, include the character list, enclosed in brackets (<ph id="ph2">`[ ]`</ph>).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the pattern string for the second <ph id="ph1">`Like`</ph> clause, do not put any character at the position in question.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example tests the seven-digit telephone number <ph id="ph1">`phoneNum`</ph> for exactly three numeric digits, followed by a space, a hyphen (<ph id="ph2">`â€“`</ph>), a period (<ph id="ph3">`.`</ph>), or no character at all, followed by exactly four numeric digits.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparison Operators<ept id="p1">](../../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators and Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Like Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>