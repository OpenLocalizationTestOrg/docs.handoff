<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-determine-what-type-an-object-variable-refers-to.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc6f54719d4f30be00b7b85f0ab18c4cb02b0d7c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\variables\how-to-determine-what-type-an-object-variable-refers-to.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21adbebd332c8fcafa01c571897f7005252ede85</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d29b010376fc39ce376eefba3d8a74cb53903c53</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Determine What Type an Object Variable Refers To (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Determine What Type an Object Variable Refers To (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An object variable contains a pointer to data that is stored elsewhere.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The type of that data can change during run time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>At any moment, you can use the <ph id="ph1">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph> method to determine the current run-time type, or the <bpt id="p1">[</bpt>TypeOf Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept> to find out if the current run-time type is compatible with a specified type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To determine the exact type an object variable currently refers to</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>On the object variable, call the <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method to retrieve a <ph id="ph2">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>On the <ph id="ph1">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> class, call the shared method <ph id="ph2">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph> to retrieve the <ph id="ph3">&lt;xref:System.TypeCode&gt;</ph> enumeration value for the object's type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can test the <ph id="ph1">&lt;xref:System.TypeCode&gt;</ph> enumeration value against whichever enumeration members are of interest, such as <ph id="ph2">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To determine whether an object variable's type is compatible with a specified type</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`TypeOf`</ph> operator in combination with the <bpt id="p1">[</bpt>Is Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept> to test the object with a <ph id="ph2">`TypeOf`</ph>...<ph id="ph3">`Is`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TypeOf`</ph>...<ph id="ph2">`Is`</ph> expression returns <ph id="ph3">`True`</ph> if the object's run-time type is compatible with the specified type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The criterion for compatibility depends on whether the specified type is a class, structure, or interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In general, the types are compatible if the object is of the same type as, inherits from, or implements the specified type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>TypeOf Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that the specified type cannot be a variable or expression.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It must be the name of a defined type, such as a class, structure, or interface.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This includes intrinsic types such as <ph id="ph1">`Integer`</ph> and <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Variables<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Variable Values<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>