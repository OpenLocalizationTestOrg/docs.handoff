{"content":"---\ntitle: \"new modifier - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"new modifier keyword [C#]\"\nms.assetid: a2e20856-33b9-4620-b535-a60dbce8349b\n---\n# new modifier (C# Reference)\n\nWhen used as a declaration modifier, the `new` keyword explicitly hides a member that is inherited from a base class. When you hide an inherited member, the derived version of the member replaces the base class version. Although you can hide members without using the `new` modifier, you get a compiler warning. If you use `new` to explicitly hide a member, it suppresses this warning.\n\nTo hide an inherited member, declare it in the derived class by using the same member name, and modify it with the `new` keyword. For example:\n\n[!code-csharp[csrefKeywordsOperator#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsOperator/CS/csrefKeywordsOperators.cs#8)]\n\nIn this example, `BaseC.Invoke` is hidden by `DerivedC.Invoke`. The field `x` is not affected because it is not hidden by a similar name.\n\nName hiding through inheritance takes one of the following forms:\n\n- Generally, a constant, field, property, or type that is introduced in a class or struct hides all base class members that share its name.  There are special cases.  For example, if you declare a new field with name `N` to have a type that is not invocable, and a base type declares `N` to be a method, the new field does not hide the base declaration in invocation syntax.  See the [C# 5.0 language specification](https://www.microsoft.com/download/details.aspx?id=7029) for details (see section \"Member Lookup\" in section \"Expressions\").\n\n- A method introduced in a class or struct hides properties, fields, and types that share that name in the base class. It also hides all base class methods that have the same signature.\n\n- An indexer introduced in a class or struct hides all base class indexers that have the same signature.\n\nIt is an error to use both `new` and [override](override.md) on the same member, because the two modifiers have mutually exclusive meanings. The `new` modifier creates a new member with the same name and causes the original member to become hidden. The `override` modifier extends the implementation for an inherited member.\n\nUsing the `new` modifier in a declaration that does not hide an inherited member generates a warning.\n\n## Example\n\nIn this example, a base class, `BaseC`, and a derived class, `DerivedC`, use the same field name `x`, which hides the value of the inherited field. The example demonstrates the use of the `new` modifier. It also demonstrates how to access the hidden members of the base class by using their fully qualified names.\n\n[!code-csharp[csrefKeywordsOperator#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsOperator/CS/csrefKeywordsOperators.cs#9)]\n\n## Example\n\nIn this example, a nested class hides a class that has the same name in the base class. The example demonstrates how to use the `new` modifier to eliminate the warning message and how to access the hidden class members by using their fully qualified names.\n\n[!code-csharp[csrefKeywordsOperator#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsOperator/CS/csrefKeywordsOperators.cs#10)]\n\nIf you remove the `new` modifier, the program will still compile and run, but you will get the following warning:\n\n```\nThe keyword new is required on 'MyDerivedC.x' because it hides inherited member 'MyBaseC.x'.\n```\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../language-reference/index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Operator Keywords](operator-keywords.md)\n- [Modifiers](modifiers.md)\n- [Versioning with the Override and New Keywords](../../programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md)\n- [Knowing When to Use Override and New Keywords](../../programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords.md)\n","nodes":[{"pos":[4,184],"embed":true,"restype":"x-metadata","content":"title: \"new modifier - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"new modifier keyword [C#]\"\nms.assetid: a2e20856-33b9-4620-b535-a60dbce8349b","nodes":[{"content":"new modifier - C# Reference","nodes":[{"pos":[0,27],"content":"new modifier - C# Reference","nodes":[{"content":"new modifier - C# Reference","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[191,218],"content":"new modifier (C# Reference)","linkify":"new modifier (C# Reference)","nodes":[{"content":"new modifier (C# Reference)","pos":[0,27]}]},{"content":"When used as a declaration modifier, the <ph id=\"ph1\">`new`</ph> keyword explicitly hides a member that is inherited from a base class.","pos":[220,337],"source":"When used as a declaration modifier, the `new` keyword explicitly hides a member that is inherited from a base class."},{"content":"When you hide an inherited member, the derived version of the member replaces the base class version.","pos":[338,439]},{"content":"Although you can hide members without using the <ph id=\"ph1\">`new`</ph> modifier, you get a compiler warning.","pos":[440,531],"source":" Although you can hide members without using the `new` modifier, you get a compiler warning."},{"content":"If you use <ph id=\"ph1\">`new`</ph> to explicitly hide a member, it suppresses this warning.","pos":[532,605],"source":" If you use `new` to explicitly hide a member, it suppresses this warning."},{"content":"To hide an inherited member, declare it in the derived class by using the same member name, and modify it with the <ph id=\"ph1\">`new`</ph> keyword.","pos":[607,736],"source":"To hide an inherited member, declare it in the derived class by using the same member name, and modify it with the `new` keyword."},{"content":"For example:","pos":[737,749]},{"content":"In this example, <ph id=\"ph1\">`BaseC.Invoke`</ph> is hidden by <ph id=\"ph2\">`DerivedC.Invoke`</ph>.","pos":[893,956],"source":"In this example, `BaseC.Invoke` is hidden by `DerivedC.Invoke`."},{"content":"The field <ph id=\"ph1\">`x`</ph> is not affected because it is not hidden by a similar name.","pos":[957,1030],"source":" The field `x` is not affected because it is not hidden by a similar name."},{"content":"Name hiding through inheritance takes one of the following forms:","pos":[1032,1097]},{"content":"Generally, a constant, field, property, or type that is introduced in a class or struct hides all base class members that share its name.","pos":[1101,1238]},{"content":"There are special cases.","pos":[1240,1264]},{"content":"For example, if you declare a new field with name <ph id=\"ph1\">`N`</ph> to have a type that is not invocable, and a base type declares <ph id=\"ph2\">`N`</ph> to be a method, the new field does not hide the base declaration in invocation syntax.","pos":[1266,1473],"source":"  For example, if you declare a new field with name `N` to have a type that is not invocable, and a base type declares `N` to be a method, the new field does not hide the base declaration in invocation syntax."},{"content":"See the <bpt id=\"p1\">[</bpt>C# 5.0 language specification<ept id=\"p1\">](https://www.microsoft.com/download/details.aspx?id=7029)</ept> for details (see section \"Member Lookup\" in section \"Expressions\").","pos":[1475,1639],"source":"  See the [C# 5.0 language specification](https://www.microsoft.com/download/details.aspx?id=7029) for details (see section \"Member Lookup\" in section \"Expressions\")."},{"content":"A method introduced in a class or struct hides properties, fields, and types that share that name in the base class.","pos":[1643,1759]},{"content":"It also hides all base class methods that have the same signature.","pos":[1760,1826]},{"content":"An indexer introduced in a class or struct hides all base class indexers that have the same signature.","pos":[1830,1932]},{"content":"It is an error to use both <ph id=\"ph1\">`new`</ph> and <bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](override.md)</ept> on the same member, because the two modifiers have mutually exclusive meanings.","pos":[1934,2074],"source":"It is an error to use both `new` and [override](override.md) on the same member, because the two modifiers have mutually exclusive meanings."},{"content":"The <ph id=\"ph1\">`new`</ph> modifier creates a new member with the same name and causes the original member to become hidden.","pos":[2075,2182],"source":" The `new` modifier creates a new member with the same name and causes the original member to become hidden."},{"content":"The <ph id=\"ph1\">`override`</ph> modifier extends the implementation for an inherited member.","pos":[2183,2258],"source":" The `override` modifier extends the implementation for an inherited member."},{"pos":[2260,2361],"content":"Using the <ph id=\"ph1\">`new`</ph> modifier in a declaration that does not hide an inherited member generates a warning.","source":"Using the `new` modifier in a declaration that does not hide an inherited member generates a warning."},{"pos":[2366,2373],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a base class, <ph id=\"ph1\">`BaseC`</ph>, and a derived class, <ph id=\"ph2\">`DerivedC`</ph>, use the same field name <ph id=\"ph3\">`x`</ph>, which hides the value of the inherited field.","pos":[2375,2522],"source":"In this example, a base class, `BaseC`, and a derived class, `DerivedC`, use the same field name `x`, which hides the value of the inherited field."},{"content":"The example demonstrates the use of the <ph id=\"ph1\">`new`</ph> modifier.","pos":[2523,2578],"source":" The example demonstrates the use of the `new` modifier."},{"content":"It also demonstrates how to access the hidden members of the base class by using their fully qualified names.","pos":[2579,2688]},{"pos":[2835,2842],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a nested class hides a class that has the same name in the base class.","pos":[2844,2931]},{"content":"The example demonstrates how to use the <ph id=\"ph1\">`new`</ph> modifier to eliminate the warning message and how to access the hidden class members by using their fully qualified names.","pos":[2932,3100],"source":" The example demonstrates how to use the `new` modifier to eliminate the warning message and how to access the hidden class members by using their fully qualified names."},{"pos":[3246,3359],"content":"If you remove the <ph id=\"ph1\">`new`</ph> modifier, the program will still compile and run, but you will get the following warning:","source":"If you remove the `new` modifier, the program will still compile and run, but you will get the following warning:"},{"pos":[3466,3491],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[3557,3565],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3569,3618],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../language-reference/index.md)</ept>","source":"[C# Reference](../../language-reference/index.md)"},{"pos":[3621,3677],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[3680,3703],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[3706,3747],"content":"<bpt id=\"p1\">[</bpt>Operator Keywords<ept id=\"p1\">](operator-keywords.md)</ept>","source":"[Operator Keywords](operator-keywords.md)"},{"pos":[3750,3775],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](modifiers.md)</ept>","source":"[Modifiers](modifiers.md)"},{"pos":[3778,3919],"content":"<bpt id=\"p1\">[</bpt>Versioning with the Override and New Keywords<ept id=\"p1\">](../../programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md)</ept>","source":"[Versioning with the Override and New Keywords](../../programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md)"},{"pos":[3922,4063],"content":"<bpt id=\"p1\">[</bpt>Knowing When to Use Override and New Keywords<ept id=\"p1\">](../../programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords.md)</ept>","source":"[Knowing When to Use Override and New Keywords](../../programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords.md)"}]}