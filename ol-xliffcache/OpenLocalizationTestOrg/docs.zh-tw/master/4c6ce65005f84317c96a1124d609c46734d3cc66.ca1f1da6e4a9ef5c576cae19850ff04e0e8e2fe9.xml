{"content":"---\ntitle: \"References and the Imports Statement (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"assemblies [Visual Basic], namespaces\"\n  - \"references, assembly\"\n  - \"namespaces, assemblies\"\n  - \"referencing assemblies\"\n  - \"Imports statement, referencing assemblies\"\n  - \"assemblies [Visual Basic], references\"\nms.assetid: 38149bd4-0a6f-4b31-b5f8-94a8c33f1600\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# References and the Imports Statement (Visual Basic)\nYou can make external objects available to your project by choosing the **Add Reference** command on the **Project** menu. References in [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] can point to assemblies, which are like type libraries but contain more information.  \n  \n## The Imports Statement  \n Assemblies include one or more namespaces. When you add a reference to an assembly, you can also add an `Imports` statement to a module that controls the visibility of that assembly's namespaces within the module. The `Imports` statement provides a scoping context that lets you use only the portion of the namespace necessary to supply a unique reference.  \n  \n The `Imports` statement has the following syntax:  \n  \n `Imports` [`|``Aliasname` =] `Namespace`  \n  \n `Aliasname` refers to a short name you can use within code to refer to an imported namespace. `Namespace` is a namespace available through either a project reference, through a definition within the project, or through a previous `Imports` statement.  \n  \n A module may contain any number of `Imports` statements. They must appear after any `Option` statements, if present, but before any other code.  \n  \n> [!NOTE]\n>  Do not confuse project references with the `Imports` statement or the `Declare` statement. Project references make external objects, such as objects in assemblies, available to [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] projects. The `Imports` statement is used to simplify access to project references, but does not provide access to these objects. The `Declare` statement is used to declare a reference to an external procedure in a dynamic-link library (DLL).  \n  \n## Using Aliases with the Imports Statement  \n The `Imports` statement makes it easier to access methods of classes by eliminating the need to explicitly type the fully qualified names of references. Aliases let you assign a friendlier name to just one part of a namespace. For example, the carriage return/line feed sequence that causes a single piece of text to be displayed on multiple lines is part of the <xref:Microsoft.VisualBasic.ControlChars> module in the <xref:Microsoft.VisualBasic?displayProperty=fullName> namespace. To use this constant in a program without an alias, you would need to type the following code:  \n  \n [!code-vb[VbVbalrApplication#3](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_1.vb)]  \n  \n `Imports` statements must always be the first lines immediately following any `Option` statements in a module. The following code fragment shows how to import and assign an alias to the <xref:Microsoft.VisualBasic.ControlChars?displayProperty=fullName> module:  \n  \n [!code-vb[VbVbalrApplication#4](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_2.vb)]  \n  \n Future references to this namespace can be considerably shorter:  \n  \n [!code-vb[VbVbalrApplication#5](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_3.vb)]  \n  \n If an `Imports` statement does not include an alias name, elements defined within the imported namespace can be used in the module without qualification. If the alias name is specified, it must be used as a qualifier for names contained within that namespace.  \n  \n## See Also  \n <xref:Microsoft.VisualBasic.ControlChars>   \n <xref:Microsoft.VisualBasic>   \n [NIB How to: Add or Remove References By Using the Add Reference Dialog Box](http://msdn.microsoft.com/en-us/3bd75d61-f00c-47c0-86a2-dd1f20e231c9)   \n [Namespaces in Visual Basic](../../../visual-basic/programming-guide/program-structure/namespaces.md)   \n [Assemblies and the Global Assembly Cache](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)   \n [How to: Create and Use Assemblies Using the Command Line](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)   \n [Imports Statement (.NET Namespace and Type)](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)","nodes":[{"pos":[12,80],"content":"References and the Imports Statement (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"References and the Imports Statement (Visual Basic) | Microsoft Docs","pos":[0,68]}]},{"pos":[796,847],"content":"References and the Imports Statement (Visual Basic)","linkify":"References and the Imports Statement (Visual Basic)","nodes":[{"content":"References and the Imports Statement (Visual Basic)","pos":[0,51]}]},{"content":"You can make external objects available to your project by choosing the <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> command on the <bpt id=\"p2\">**</bpt>Project<ept id=\"p2\">**</ept> menu.","pos":[848,970],"source":"You can make external objects available to your project by choosing the **Add Reference** command on the **Project** menu."},{"content":"References in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> can point to assemblies, which are like type libraries but contain more information.","pos":[971,1159],"source":" References in [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] can point to assemblies, which are like type libraries but contain more information."},{"pos":[1168,1189],"content":"The Imports Statement","linkify":"The Imports Statement","nodes":[{"content":"The Imports Statement","pos":[0,21]}]},{"content":"Assemblies include one or more namespaces.","pos":[1193,1235]},{"content":"When you add a reference to an assembly, you can also add an <ph id=\"ph1\">`Imports`</ph> statement to a module that controls the visibility of that assembly's namespaces within the module.","pos":[1236,1406],"source":" When you add a reference to an assembly, you can also add an `Imports` statement to a module that controls the visibility of that assembly's namespaces within the module."},{"content":"The <ph id=\"ph1\">`Imports`</ph> statement provides a scoping context that lets you use only the portion of the namespace necessary to supply a unique reference.","pos":[1407,1549],"source":" The `Imports` statement provides a scoping context that lets you use only the portion of the namespace necessary to supply a unique reference."},{"pos":[1556,1605],"content":"The <ph id=\"ph1\">`Imports`</ph> statement has the following syntax:","source":"The `Imports` statement has the following syntax:"},{"pos":[1612,1652],"content":"<ph id=\"ph1\">`Imports`</ph> [<ph id=\"ph2\">`|``Aliasname`</ph> =] <ph id=\"ph3\">`Namespace`</ph>","source":"`Imports` [`|``Aliasname` =] `Namespace`"},{"content":"<ph id=\"ph1\">`Aliasname`</ph> refers to a short name you can use within code to refer to an imported namespace.","pos":[1659,1752],"source":"`Aliasname` refers to a short name you can use within code to refer to an imported namespace."},{"content":"<ph id=\"ph1\">`Namespace`</ph> is a namespace available through either a project reference, through a definition within the project, or through a previous <ph id=\"ph2\">`Imports`</ph> statement.","pos":[1753,1909],"source":"`Namespace` is a namespace available through either a project reference, through a definition within the project, or through a previous `Imports` statement."},{"content":"A module may contain any number of <ph id=\"ph1\">`Imports`</ph> statements.","pos":[1916,1972],"source":"A module may contain any number of `Imports` statements."},{"content":"They must appear after any <ph id=\"ph1\">`Option`</ph> statements, if present, but before any other code.","pos":[1973,2059],"source":" They must appear after any `Option` statements, if present, but before any other code."},{"pos":[2067,2587],"content":"[!NOTE]\n Do not confuse project references with the `Imports` statement or the `Declare` statement. Project references make external objects, such as objects in assemblies, available to [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] projects. The `Imports` statement is used to simplify access to project references, but does not provide access to these objects. The `Declare` statement is used to declare a reference to an external procedure in a dynamic-link library (DLL).","leadings":["","> "],"nodes":[{"content":" Do not confuse project references with the `Imports` statement or the `Declare` statement. Project references make external objects, such as objects in assemblies, available to [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] projects. The `Imports` statement is used to simplify access to project references, but does not provide access to these objects. The `Declare` statement is used to declare a reference to an external procedure in a dynamic-link library (DLL).","pos":[8,518],"nodes":[{"content":"Do not confuse project references with the <ph id=\"ph1\">`Imports`</ph> statement or the <ph id=\"ph2\">`Declare`</ph> statement.","pos":[1,91],"source":" Do not confuse project references with the `Imports` statement or the `Declare` statement."},{"content":"Project references make external objects, such as objects in assemblies, available to <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> projects.","pos":[92,277],"source":" Project references make external objects, such as objects in assemblies, available to [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] projects."},{"content":"The <ph id=\"ph1\">`Imports`</ph> statement is used to simplify access to project references, but does not provide access to these objects.","pos":[278,397],"source":" The `Imports` statement is used to simplify access to project references, but does not provide access to these objects."},{"content":"The <ph id=\"ph1\">`Declare`</ph> statement is used to declare a reference to an external procedure in a dynamic-link library (DLL).","pos":[398,510],"source":" The `Declare` statement is used to declare a reference to an external procedure in a dynamic-link library (DLL)."}]}]},{"pos":[2596,2636],"content":"Using Aliases with the Imports Statement","linkify":"Using Aliases with the Imports Statement","nodes":[{"content":"Using Aliases with the Imports Statement","pos":[0,40]}]},{"content":"The <ph id=\"ph1\">`Imports`</ph> statement makes it easier to access methods of classes by eliminating the need to explicitly type the fully qualified names of references.","pos":[2640,2792],"source":"The `Imports` statement makes it easier to access methods of classes by eliminating the need to explicitly type the fully qualified names of references."},{"content":"Aliases let you assign a friendlier name to just one part of a namespace.","pos":[2793,2866]},{"content":"For example, the carriage return/line feed sequence that causes a single piece of text to be displayed on multiple lines is part of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.ControlChars&gt;</ph> module in the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic?displayProperty=fullName&gt;</ph> namespace.","pos":[2867,3123],"source":" For example, the carriage return/line feed sequence that causes a single piece of text to be displayed on multiple lines is part of the <xref:Microsoft.VisualBasic.ControlChars> module in the <xref:Microsoft.VisualBasic?displayProperty=fullName> namespace."},{"content":"To use this constant in a program without an alias, you would need to type the following code:","pos":[3124,3218]},{"pos":[3225,3382],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#3<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#3](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_1.vb)]"},{"content":"<ph id=\"ph1\">`Imports`</ph> statements must always be the first lines immediately following any <ph id=\"ph2\">`Option`</ph> statements in a module.","pos":[3389,3499],"source":"`Imports` statements must always be the first lines immediately following any `Option` statements in a module."},{"content":"The following code fragment shows how to import and assign an alias to the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.ControlChars?displayProperty=fullName&gt;</ph> module:","pos":[3500,3649],"source":" The following code fragment shows how to import and assign an alias to the <xref:Microsoft.VisualBasic.ControlChars?displayProperty=fullName> module:"},{"pos":[3656,3813],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#4<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#4](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_2.vb)]"},{"content":"Future references to this namespace can be considerably shorter:","pos":[3820,3884]},{"pos":[3891,4048],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrApplication#5<ept id=\"p2\">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrApplication#5](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/references-and-the-imports-statement_3.vb)]"},{"content":"If an <ph id=\"ph1\">`Imports`</ph> statement does not include an alias name, elements defined within the imported namespace can be used in the module without qualification.","pos":[4055,4208],"source":"If an `Imports` statement does not include an alias name, elements defined within the imported namespace can be used in the module without qualification."},{"content":"If the alias name is specified, it must be used as a qualifier for names contained within that namespace.","pos":[4209,4314]},{"pos":[4323,4331],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>NIB How to: Add or Remove References By Using the Add Reference Dialog Box<ept id=\"p1\">](http://msdn.microsoft.com/en-us/3bd75d61-f00c-47c0-86a2-dd1f20e231c9)</ept><ph id=\"ph1\"> </ph>","pos":[4413,4561],"source":" [NIB How to: Add or Remove References By Using the Add Reference Dialog Box](http://msdn.microsoft.com/en-us/3bd75d61-f00c-47c0-86a2-dd1f20e231c9) "},{"content":"<bpt id=\"p1\"> [</bpt>Namespaces in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/program-structure/namespaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[4564,4667],"source":" [Namespaces in Visual Basic](../../../visual-basic/programming-guide/program-structure/namespaces.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Assemblies and the Global Assembly Cache<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4670,4788],"source":" [Assemblies and the Global Assembly Cache](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Create and Use Assemblies Using the Command Line<ept id=\"p1\">](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)</ept><ph id=\"ph1\"> </ph>","pos":[4791,4923],"source":" [How to: Create and Use Assemblies Using the Command Line](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4) "},{"content":"<bpt id=\"p1\"> [</bpt>Imports Statement (.NET Namespace and Type)<ept id=\"p1\">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept>","pos":[4926,5069],"source":" [Imports Statement (.NET Namespace and Type)](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)"}]}