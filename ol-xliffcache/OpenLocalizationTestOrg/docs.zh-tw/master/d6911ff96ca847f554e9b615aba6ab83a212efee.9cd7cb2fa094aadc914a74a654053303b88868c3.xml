{"content":"---\ntitle: \"throw - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/02/2015\nf1_keywords: \n  - \"throw\"\n  - \"throw_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"throw statement [C#]\"\n  - \"throw expression [C#]\"\n  - \"throw keyword [C#]\"\nms.assetid: 5ac4feef-4b1a-4c61-aeb4-61d549e5dd42\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# throw (C# Reference)\n\nSignals the occurrence of an exception during program execution.  \n  \n## Remarks\n\nThe syntax of `throw` is:\n\n```csharp\nthrow [e]\n```\n\nwhere `e` is an instance of a class derived from <xref:System.Exception?displayProperty=nameWithType>. The following example uses the `throw` statement to throw an <xref:System.IndexOutOfRangeException> if the argument passed to a method named `GetNumber` does not correspond to a valid index of an internal array.\n\n[!code-csharp[csrefKeyword#1](~/samples/snippets/csharp/language-reference/keywords/throw/throw-1.cs#1)]  \n\nMethod callers then use a `try-catch` or `try-catch-finally` block to handle the thrown exception. The following example handles the exception thrown by the `GetNumber` method.\n\n[!code-csharp[csrefKeyword#2](~/samples/snippets/csharp/language-reference/keywords/throw/throw-1.cs#2)]  \n\n## Re-throwing an exception\n\n`throw` can also be used in a `catch` block to re-throw an exception handled in a `catch` block.  In this case, `throw` does not take an exception operand. It is most useful when a method passes on an argument from a caller to some other library method, and the library method throws an exception that must be passed on to the caller. For example, the following example re-throws an <xref:System.NullReferenceException> that is thrown when attempting to retrieve the first character of an uninitialized string.\n\n[!code-csharp[csrefKeyword#3](~/samples/snippets/csharp/language-reference/keywords/throw/throw-3.cs#3)]  \n\n> [!IMPORTANT]\n> You can also use the `throw e` syntax in a `catch` block to instantiate a new exception that you pass on to the caller. In this case, the stack trace of the original exception, which is available from the <xref:System.Exception.StackTrace> property, is not preserved.\n\n## The `throw` expression\n\nStarting with C# 7.0, `throw` can be used as an expression as well as a statement. This allows an exception to be thrown in contexts that were previously unsupported. These include:\n\n- [the conditional operator](../operators/conditional-operator.md). The following example uses a `throw` expression to throw an <xref:System.ArgumentException> if a method is passed an empty string array. Before C# 7.0, this logic would need to appear in an `if`/`else` statement.\n\n   [!code-csharp[csrefKeyword#4](~/samples/snippets/csharp/language-reference/keywords/throw/conditional.cs#1)]  \n  \n- [the null-coalescing operator](../operators/null-coalescing-operator.md). In the following example, a `throw` expression is used with a null-coalescing operator to throw an exception if the string assigned to a `Name` property is `null`.\n\n   [!code-csharp[csrefKeyword#5](~/samples/snippets/csharp/language-reference/keywords/throw/coalescing.cs#1)]  \n\n- an expression-bodied [lambda](../../programming-guide/statements-expressions-operators/lambda-expressions.md) or method. The following example illustrates an expression-bodied method that throws an <xref:System.InvalidCastException> because a conversion to a <xref:System.DateTime> value is not supported.\n\n   [!code-csharp[csrefKeyword#6](~/samples/snippets/csharp/language-reference/keywords/throw/exp-bodied.cs#1)]  \n\n## C# language specification  \n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [try-catch](try-catch.md)\n- [The try, catch, and throw Statements in C++](try-catch.md)\n- [C# Keywords](index.md)\n- [Exception Handling Statements](exception-handling-statements.md)\n- [How to: Explicitly Throw Exceptions](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)\n","nodes":[{"pos":[4,317],"embed":true,"restype":"x-metadata","content":"title: \"throw - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/02/2015\nf1_keywords: \n  - \"throw\"\n  - \"throw_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"throw statement [C#]\"\n  - \"throw expression [C#]\"\n  - \"throw keyword [C#]\"\nms.assetid: 5ac4feef-4b1a-4c61-aeb4-61d549e5dd42\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"throw - C# Reference","nodes":[{"pos":[0,20],"content":"throw - C# Reference","nodes":[{"content":"throw - C# Reference","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[324,344],"content":"throw (C# Reference)","linkify":"throw (C# Reference)","nodes":[{"content":"throw (C# Reference)","pos":[0,20]}]},{"content":"Signals the occurrence of an exception during program execution.","pos":[346,410]},{"pos":[419,426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[428,453],"content":"The syntax of <ph id=\"ph1\">`throw`</ph> is:","source":"The syntax of `throw` is:"},{"content":"where <ph id=\"ph1\">`e`</ph> is an instance of a class derived from <ph id=\"ph2\">&lt;xref:System.Exception?displayProperty=nameWithType&gt;</ph>.","pos":[480,582],"source":"where `e` is an instance of a class derived from <xref:System.Exception?displayProperty=nameWithType>."},{"content":"The following example uses the <ph id=\"ph1\">`throw`</ph> statement to throw an <ph id=\"ph2\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> if the argument passed to a method named <ph id=\"ph3\">`GetNumber`</ph> does not correspond to a valid index of an internal array.","pos":[583,794],"source":" The following example uses the `throw` statement to throw an <xref:System.IndexOutOfRangeException> if the argument passed to a method named `GetNumber` does not correspond to a valid index of an internal array."},{"content":"Method callers then use a <ph id=\"ph1\">`try-catch`</ph> or <ph id=\"ph2\">`try-catch-finally`</ph> block to handle the thrown exception.","pos":[904,1002],"source":"Method callers then use a `try-catch` or `try-catch-finally` block to handle the thrown exception."},{"content":"The following example handles the exception thrown by the <ph id=\"ph1\">`GetNumber`</ph> method.","pos":[1003,1080],"source":" The following example handles the exception thrown by the `GetNumber` method."},{"pos":[1193,1217],"content":"Re-throwing an exception","linkify":"Re-throwing an exception","nodes":[{"content":"Re-throwing an exception","pos":[0,24]}]},{"content":"<ph id=\"ph1\">`throw`</ph> can also be used in a <ph id=\"ph2\">`catch`</ph> block to re-throw an exception handled in a <ph id=\"ph3\">`catch`</ph> block.","pos":[1219,1315],"source":"`throw` can also be used in a `catch` block to re-throw an exception handled in a `catch` block."},{"content":"In this case, <ph id=\"ph1\">`throw`</ph> does not take an exception operand.","pos":[1317,1374],"source":"  In this case, `throw` does not take an exception operand."},{"content":"It is most useful when a method passes on an argument from a caller to some other library method, and the library method throws an exception that must be passed on to the caller.","pos":[1375,1553]},{"content":"For example, the following example re-throws an <ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph> that is thrown when attempting to retrieve the first character of an uninitialized string.","pos":[1554,1729],"source":" For example, the following example re-throws an <xref:System.NullReferenceException> that is thrown when attempting to retrieve the first character of an uninitialized string."},{"pos":[1841,2123],"content":"[!IMPORTANT]\nYou can also use the `throw e` syntax in a `catch` block to instantiate a new exception that you pass on to the caller. In this case, the stack trace of the original exception, which is available from the <xref:System.Exception.StackTrace> property, is not preserved.","leadings":["","> "],"nodes":[{"content":"You can also use the `throw e` syntax in a `catch` block to instantiate a new exception that you pass on to the caller. In this case, the stack trace of the original exception, which is available from the <xref:System.Exception.StackTrace> property, is not preserved.","pos":[13,280],"nodes":[{"content":"You can also use the <ph id=\"ph1\">`throw e`</ph> syntax in a <ph id=\"ph2\">`catch`</ph> block to instantiate a new exception that you pass on to the caller.","pos":[0,119],"source":"You can also use the `throw e` syntax in a `catch` block to instantiate a new exception that you pass on to the caller."},{"content":"In this case, the stack trace of the original exception, which is available from the <ph id=\"ph1\">&lt;xref:System.Exception.StackTrace&gt;</ph> property, is not preserved.","pos":[120,267],"source":" In this case, the stack trace of the original exception, which is available from the <xref:System.Exception.StackTrace> property, is not preserved."}]}]},{"pos":[2128,2150],"content":"The <ph id=\"ph1\">`throw`</ph> expression","linkify":"The `throw` expression","source":"The `throw` expression"},{"content":"Starting with C# 7.0, <ph id=\"ph1\">`throw`</ph> can be used as an expression as well as a statement.","pos":[2152,2234],"source":"Starting with C# 7.0, `throw` can be used as an expression as well as a statement."},{"content":"This allows an exception to be thrown in contexts that were previously unsupported.","pos":[2235,2318]},{"content":"These include:","pos":[2319,2333]},{"content":"<bpt id=\"p1\">[</bpt>the conditional operator<ept id=\"p1\">](../operators/conditional-operator.md)</ept>.","pos":[2337,2402],"source":"[the conditional operator](../operators/conditional-operator.md)."},{"content":"The following example uses a <ph id=\"ph1\">`throw`</ph> expression to throw an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> if a method is passed an empty string array.","pos":[2403,2539],"source":" The following example uses a `throw` expression to throw an <xref:System.ArgumentException> if a method is passed an empty string array."},{"content":"Before C# 7.0, this logic would need to appear in an <ph id=\"ph1\">`if`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`else`</ph> statement.","pos":[2540,2615],"source":" Before C# 7.0, this logic would need to appear in an `if`/`else` statement."},{"content":"<bpt id=\"p1\">[</bpt>the null-coalescing operator<ept id=\"p1\">](../operators/null-coalescing-operator.md)</ept>.","pos":[2736,2809],"source":"[the null-coalescing operator](../operators/null-coalescing-operator.md)."},{"content":"In the following example, a <ph id=\"ph1\">`throw`</ph> expression is used with a null-coalescing operator to throw an exception if the string assigned to a <ph id=\"ph2\">`Name`</ph> property is <ph id=\"ph3\">`null`</ph>.","pos":[2810,2973],"source":" In the following example, a `throw` expression is used with a null-coalescing operator to throw an exception if the string assigned to a `Name` property is `null`."},{"content":"an expression-bodied <bpt id=\"p1\">[</bpt>lambda<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/lambda-expressions.md)</ept> or method.","pos":[3091,3211],"source":"an expression-bodied [lambda](../../programming-guide/statements-expressions-operators/lambda-expressions.md) or method."},{"content":"The following example illustrates an expression-bodied method that throws an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph> because a conversion to a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> value is not supported.","pos":[3212,3396],"source":" The following example illustrates an expression-bodied method that throws an <xref:System.InvalidCastException> because a conversion to a <xref:System.DateTime> value is not supported."},{"pos":[3515,3540],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[3612,3620],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3624,3651],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[3654,3710],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[3713,3738],"content":"<bpt id=\"p1\">[</bpt>try-catch<ept id=\"p1\">](try-catch.md)</ept>","source":"[try-catch](try-catch.md)"},{"pos":[3741,3800],"content":"<bpt id=\"p1\">[</bpt>The try, catch, and throw Statements in C++<ept id=\"p1\">](try-catch.md)</ept>","source":"[The try, catch, and throw Statements in C++](try-catch.md)"},{"pos":[3803,3826],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[3829,3894],"content":"<bpt id=\"p1\">[</bpt>Exception Handling Statements<ept id=\"p1\">](exception-handling-statements.md)</ept>","source":"[Exception Handling Statements](exception-handling-statements.md)"},{"pos":[3897,4002],"content":"<bpt id=\"p1\">[</bpt>How to: Explicitly Throw Exceptions<ept id=\"p1\">](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)</ept>","source":"[How to: Explicitly Throw Exceptions](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)"}]}