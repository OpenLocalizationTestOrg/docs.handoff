{"content":"---\ntitle: \"How to: Unwrap a Nested Task | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"tasks, how to unwrap nested tasks\"\nms.assetid: a0769dd2-0f6d-48ca-8418-a9d39de7f450\ncaps.latest.revision: 11\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Unwrap a Nested Task\nYou can return a task from a method, and then wait on or continue from that task, as shown in the following example:  \n  \n [!code-csharp[TPL_Unwrap#01](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#01)]\n [!code-vb[TPL_Unwrap#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#01)]  \n  \n In the previous example, the <xref:System.Threading.Tasks.Task%601.Result%2A> property is of type `string` (`String` in Visual Basic).  \n  \n However, in some scenarios, you might want to create a task within another task, and then return the nested task. In this case, the `TResult` of the enclosing task is itself a task. In the following example, the Result property is a `Task<Task<string>>` in C# or `Task(Of Task(Of String))` in Visual Basic.  \n  \n [!code-csharp[TPL_Unwrap#02](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#02)]\n [!code-vb[TPL_Unwrap#02](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#02)]  \n  \n Although it is possible to write code to unwrap the outer task and retrieve the original task and its <xref:System.Threading.Tasks.Task%601.Result%2A> property, such code is not easy to write because you must handle exceptions and also cancellation requests. In this situation, we recommend that you use one of the <xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A> extension methods, as shown in the following example.  \n  \n [!code-csharp[TPL_UnWrap#03](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#03)]\n [!code-vb[TPL_UnWrap#03](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#03)]  \n  \n The <xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A> methods can be used to transform any `Task<Task>` or `Task<Task<TResult>>` (`Task(Of Task)` or `Task(Of Task(Of TResult))` in Visual Basic) to a `Task` or `Task<TResult>` (`Task(Of TResult)` in Visual Basic). The new task fully represents the inner nested task, and includes cancellation state and all exceptions.  \n  \n## Example  \n The following example demonstrates how to use the <xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A> extension methods.  \n  \n [!code-csharp[TPL_UnWrap#04](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#04)]\n [!code-vb[TPL_UnWrap#04](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippet04.vb#04)]  \n  \n## See Also  \n <xref:System.Threading.Tasks.TaskExtensions?displayProperty=fullName>   \n [Task-based Asynchronous Programming](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)","nodes":[{"pos":[4,404],"nodes":[{"content":"How to: Unwrap a Nested Task | Microsoft Docs","nodes":[{"pos":[0,45],"content":"How to: Unwrap a Nested Task | Microsoft Docs","nodes":[{"content":"How to: Unwrap a Nested Task | Microsoft Docs","pos":[0,45]}]}],"pos":[6,54],"yaml":true}],"content":"title: \"How to: Unwrap a Nested Task | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"tasks, how to unwrap nested tasks\"\nms.assetid: a0769dd2-0f6d-48ca-8418-a9d39de7f450\ncaps.latest.revision: 11\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[411,439],"content":"How to: Unwrap a Nested Task","linkify":"How to: Unwrap a Nested Task","nodes":[{"content":"How to: Unwrap a Nested Task","pos":[0,28]}]},{"content":"You can return a task from a method, and then wait on or continue from that task, as shown in the following example:","pos":[440,556]},{"pos":[563,792],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL_Unwrap#01<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#01)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPL_Unwrap#01<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#01)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPL_Unwrap#01](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#01)]\n [!code-vb[TPL_Unwrap#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#01)]"},{"pos":[799,933],"content":"In the previous example, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property is of type <ph id=\"ph2\">`string`</ph> (<ph id=\"ph3\">`String`</ph> in Visual Basic).","source":"In the previous example, the <xref:System.Threading.Tasks.Task%601.Result%2A> property is of type `string` (`String` in Visual Basic)."},{"content":"However, in some scenarios, you might want to create a task within another task, and then return the nested task.","pos":[940,1053]},{"content":"In this case, the <ph id=\"ph1\">`TResult`</ph> of the enclosing task is itself a task.","pos":[1054,1121],"source":" In this case, the `TResult` of the enclosing task is itself a task."},{"content":"In the following example, the Result property is a <ph id=\"ph1\">`Task&lt;Task&lt;string&gt;&gt;`</ph> in C# or <ph id=\"ph2\">`Task(Of Task(Of String))`</ph> in Visual Basic.","pos":[1122,1246],"source":" In the following example, the Result property is a `Task<Task<string>>` in C# or `Task(Of Task(Of String))` in Visual Basic."},{"pos":[1253,1482],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL_Unwrap#02<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#02)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPL_Unwrap#02<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#02)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPL_Unwrap#02](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#02)]\n [!code-vb[TPL_Unwrap#02](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#02)]"},{"content":"Although it is possible to write code to unwrap the outer task and retrieve the original task and its <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property, such code is not easy to write because you must handle exceptions and also cancellation requests.","pos":[1489,1747],"source":"Although it is possible to write code to unwrap the outer task and retrieve the original task and its <xref:System.Threading.Tasks.Task%601.Result%2A> property, such code is not easy to write because you must handle exceptions and also cancellation requests."},{"content":"In this situation, we recommend that you use one of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A&gt;</ph> extension methods, as shown in the following example.","pos":[1748,1912],"source":" In this situation, we recommend that you use one of the <xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A> extension methods, as shown in the following example."},{"pos":[1919,2148],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL_UnWrap#03<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#03)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPL_UnWrap#03<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#03)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPL_UnWrap#03](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#03)]\n [!code-vb[TPL_UnWrap#03](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippets1-3.vb#03)]"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A&gt;</ph> methods can be used to transform any <ph id=\"ph2\">`Task&lt;Task&gt;`</ph> or <ph id=\"ph3\">`Task&lt;Task&lt;TResult&gt;&gt;`</ph> (<ph id=\"ph4\">`Task(Of Task)`</ph> or <ph id=\"ph5\">`Task(Of Task(Of TResult))`</ph> in Visual Basic) to a <ph id=\"ph6\">`Task`</ph> or <ph id=\"ph7\">`Task&lt;TResult&gt;`</ph> (<ph id=\"ph8\">`Task(Of TResult)`</ph> in Visual Basic).","pos":[2155,2422],"source":"The <xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A> methods can be used to transform any `Task<Task>` or `Task<Task<TResult>>` (`Task(Of Task)` or `Task(Of Task(Of TResult))` in Visual Basic) to a `Task` or `Task<TResult>` (`Task(Of TResult)` in Visual Basic)."},{"content":"The new task fully represents the inner nested task, and includes cancellation state and all exceptions.","pos":[2423,2527]},{"pos":[2536,2543],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A&gt;</ph> extension methods.","pos":[2547,2670],"source":"The following example demonstrates how to use the <xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A> extension methods."},{"pos":[2677,2904],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL_UnWrap#04<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#04)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPL_UnWrap#04<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippet04.vb#04)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPL_UnWrap#04](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_unwrap/cs/unwrapprogram.cs#04)]\n [!code-vb[TPL_UnWrap#04](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_unwrap/vb/snippet04.vb#04)]"},{"pos":[2913,2921],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskExtensions?displayProperty=fullName&gt;</ph>","pos":[2925,2994],"source":"<xref:System.Threading.Tasks.TaskExtensions?displayProperty=fullName> "},{"content":"<bpt id=\"p1\">[</bpt>Task-based Asynchronous Programming<ept id=\"p1\">](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>","pos":[2999,3120],"source":"[Task-based Asynchronous Programming](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)"}]}