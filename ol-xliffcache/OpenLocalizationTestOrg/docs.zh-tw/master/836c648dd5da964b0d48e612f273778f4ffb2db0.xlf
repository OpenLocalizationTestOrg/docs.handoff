<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-office-programming.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">836c648dd5da964b0d48e612f273778f4ffb2db0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\interop\walkthrough-office-programming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44131dd9f22a19feaa02f0d5391d9cc68cbaca8f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44495eb2ee9d3152d25f1d04189bb39bb532fc98</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Office Programming (C# and Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Office Programming (C# and Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual Studio offers features in C# and Visual Basic that improve Microsoft Office programming.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Helpful C# features include named and optional arguments and return values of type <ph id="ph1">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In COM programming, you can omit the <ph id="ph1">`ref`</ph> keyword and gain access to indexed properties.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Features in Visual Basic include auto-implemented properties, statements in lambda expressions, and collection initializers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Both languages enable embedding of type information, which allows deployment of assemblies that interact with COM components without deploying primary interop assemblies (PIAs) to the user's computer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id="p1">](http://msdn.microsoft.com/library/b28ec92c-1867-4847-95c0-61adfe095e21)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This walkthrough demonstrates these features in the context of Office programming, but many of these features are also useful in general programming.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the walkthrough, you use an Excel Add-in application to create an Excel workbook.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Next, you create a Word document that contains a link to the workbook.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Finally, you see how to enable and disable the PIA dependency.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You must have Microsoft Office Excel and Microsoft Office Word installed on your computer to complete this walkthrough.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you are using an operating system that is older than <ph id="ph1">[!INCLUDE[windowsver](../../../csharp/programming-guide/interop/includes/windowsver_md.md)]</ph>, make sure that <ph id="ph2">[!INCLUDE[dnprdnlong](../../../csharp/programming-guide/events/includes/dnprdnlong_md.md)]</ph> is installed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To set up an Excel Add-in application</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, point to <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, expand <bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Visual C#<ept id="p3">**</ept>, expand <bpt id="p4">**</bpt>Office<ept id="p4">**</ept>, and then click the version year of the Office product.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Templates<ept id="p1">**</ept> pane, click <bpt id="p2">**</bpt>Excel <ph id="ph1">\&lt;</ph>version&gt; Add-in<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Look at the top of the <bpt id="p1">**</bpt>Templates<ept id="p1">**</ept> pane to make sure that <bpt id="p2">**</bpt>.NET Framework 4<ept id="p2">**</ept>, or a later version, appears in the <bpt id="p3">**</bpt>Target Framework<ept id="p3">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Type a name for your project in the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, if you want to.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To add references</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click your project's name and then click <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Assemblies<ept id="p1">**</ept> tab, select <bpt id="p2">**</bpt>Microsoft.Office.Interop.Excel<ept id="p2">**</ept>, version <ph id="ph1">`&lt;version&gt;.0.0.0`</ph> (for a key to the Office product version numbers, see <bpt id="p3">[</bpt>Microsoft Versions<ept id="p3">](https://en.wikipedia.org/wiki/Microsoft_Office#Versions)</ept>), in the <bpt id="p4">**</bpt>Component Name<ept id="p4">**</ept> list, and then hold down the CTRL key and select <bpt id="p5">**</bpt>Microsoft.Office.Interop.Word<ept id="p5">**</ept>, <ph id="ph2">`version &lt;version&gt;.0.0.0`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you do not see the assemblies, you may need to ensure they are installed and displayed (see <bpt id="p1">[</bpt>How to: Install Office Primary Interop Assemblies<ept id="p1">](https://docs.microsoft.com/visualstudio/vsto/how-to-install-office-primary-interop-assemblies)</ept>).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To add necessary Imports statements or using directives</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>ThisAddIn.vb<ept id="p2">**</ept> or <bpt id="p3">**</bpt>ThisAddIn.cs<ept id="p3">**</ept> file and then click <bpt id="p4">**</bpt>View Code<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`Imports`</ph> statements (Visual Basic) or <ph id="ph2">`using`</ph> directives (C#) to the top of the code file if they are not already present.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To create a list of bank accounts</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click your project's name, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Name the class Account.vb if you are using Visual Basic or Account.cs if you are using C#.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Replace the definition of the <ph id="ph1">`Account`</ph> class with the following code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The class definitions use <bpt id="p1">*</bpt>auto-implemented properties<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Auto-Implemented Properties<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To create a <ph id="ph1">`bankAccounts`</ph> list that contains two accounts, add the following code to the <ph id="ph2">`ThisAddIn_Startup`</ph> method in <bpt id="p1">*</bpt>ThisAddIn.vb<ept id="p1">*</ept> or <bpt id="p2">*</bpt>ThisAddIn.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The list declarations use <bpt id="p1">*</bpt>collection initializers<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To export data to Excel</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the same file, add the following method to the <ph id="ph1">`ThisAddIn`</ph> class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The method sets up an Excel workbook and exports data to it.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Two new C# features are used in this method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Both of these features already exist in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Method <bpt id="p1">[</bpt>Add<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=210910)</ept> has an <bpt id="p2">*</bpt>optional parameter<ept id="p2">*</ept> for specifying a particular template.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Optional parameters, new in <ph id="ph1">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph>, enable you to omit the argument for that parameter if you want to use the parameter's default value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Because no argument is sent in the previous example, <ph id="ph1">`Add`</ph> uses the default template and creates a new workbook.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The equivalent statement in earlier versions of C# requires a placeholder argument: <ph id="ph1">`excelApp.Workbooks.Add(Type.Missing)`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Named and Optional Arguments<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Range`</ph> and <ph id="ph2">`Offset`</ph> properties of the <bpt id="p1">[</bpt>Range<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=210911)</ept> object use the <bpt id="p2">*</bpt>indexed properties<ept id="p2">*</ept> feature.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This feature enables you to consume these properties from COM types by using the following typical C# syntax.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Indexed properties also enable you to use the <ph id="ph1">`Value`</ph> property of the <ph id="ph2">`Range`</ph> object, eliminating the need to use the <ph id="ph3">`Value2`</ph> property.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Value`</ph> property is indexed, but the index is optional.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Optional arguments and indexed properties work together in the following example.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In earlier versions of the language, the following special syntax is required.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You cannot create indexed properties of your own.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The feature only supports consumption of existing indexed properties.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Use Indexed Properties in COM Interop Programming<ept id="p1">](../../../csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Add the following code at the end of <ph id="ph1">`DisplayInExcel`</ph> to adjust the column widths to fit the content.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These additions demonstrate another feature in C#: treating <ph id="ph1">`Object`</ph> values returned from COM hosts such as Office as if they have type <bpt id="p1">[</bpt>dynamic<ept id="p1">](../../../csharp/language-reference/keywords/dynamic.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This happens automatically when <bpt id="p1">**</bpt>Embed Interop Types<ept id="p1">**</ept> is set to its default value, <ph id="ph1">`True`</ph>, or, equivalently, when the assembly is referenced by the <bpt id="p2">[</bpt>/link<ept id="p2">](../../../csharp/language-reference/compiler-options/link-compiler-option.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`dynamic`</ph> allows late binding, already available in Visual Basic, and avoids the explicit casting required in Visual C# 2008 and earlier versions of the language.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`excelApp.Columns[1]`</ph> returns an <ph id="ph2">`Object`</ph>, and <ph id="ph3">`AutoFit`</ph> is an Excel  <bpt id="p1">[</bpt>Range<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=210911)</ept> method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Without <ph id="ph1">`dynamic`</ph>, you must cast the object returned by <ph id="ph2">`excelApp.Columns[1]`</ph> as an instance of <ph id="ph3">`Range`</ph> before calling method <ph id="ph4">`AutoFit`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information about embedding interop types, see procedures "To find the PIA reference" and "To restore the PIA dependency" later in this topic.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`dynamic`</ph>, see <bpt id="p1">[</bpt>dynamic<ept id="p1">](../../../csharp/language-reference/keywords/dynamic.md)</ept> or <bpt id="p2">[</bpt>Using Type dynamic<ept id="p2">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To invoke DisplayInExcel</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Add the following code at the end of the <ph id="ph1">`ThisAddIn_StartUp`</ph> method.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`DisplayInExcel`</ph> contains two arguments.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The first argument is the name of the list of accounts to be processed.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The second argument is a multiline lambda expression that defines how the data is to be processed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ID`</ph> and <ph id="ph2">`balance`</ph> values for each account are displayed in adjacent cells, and the row is displayed in red if the balance is less than zero.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To run the program, press F5.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An Excel worksheet appears that contains the data from the accounts.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To add a Word document</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Add the following code at the end of the <ph id="ph1">`ThisAddIn_StartUp`</ph> method to create a Word document that contains a link to the Excel workbook.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This code demonstrates several of the new features in C#: the ability to omit the <ph id="ph1">`ref`</ph> keyword in COM programming, named arguments, and optional arguments.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>These features already exist in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>PasteSpecial<ept id="p1">](https://msdn.microsoft.com/library/microsoft.office.interop.word.selection.pastespecial.aspx)</ept> method has seven parameters, all of which are defined as optional reference parameters.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Named and optional arguments enable you to designate the parameters you want to access by name and to send arguments to only those parameters.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In this example, arguments are sent to indicate that a link to the workbook on the Clipboard should be created (parameter <ph id="ph1">`Link`</ph>) and that the link is to be displayed in the Word document as an icon (parameter <ph id="ph2">`DisplayAsIcon`</ph>).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Visual C# also enables you to omit the <ph id="ph1">`ref`</ph> keyword for these arguments.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To run the application</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Excel starts and displays a table that contains the information from the two accounts in <ph id="ph1">`bankAccounts`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Then a Word document appears that contains a link to the Excel table.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To clean up the completed project</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In Visual Studio, click <bpt id="p1">**</bpt>Clean Solution<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Otherwise, the add-in will run every time that you open Excel on your computer.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To find the PIA reference</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Run the application again, but do not click <bpt id="p1">**</bpt>Clean Solution<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Locate <bpt id="p1">**</bpt>Microsoft Visual Studio <ph id="ph1">\&lt;</ph>version&gt;<ept id="p1">**</ept> and open a developer command prompt.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`ildasm`</ph> in the Visual Studio Command Prompt window, and then press ENTER.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The IL DASM window appears.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu in the IL DASM window, select <bpt id="p2">**</bpt>File<ept id="p2">**</ept><ph id="ph1"> &gt; </ph><bpt id="p3">**</bpt>Open<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Double-click <bpt id="p1">**</bpt>Visual Studio <ph id="ph1">\&lt;</ph>version&gt;<ept id="p1">**</ept>, and then double-click <bpt id="p2">**</bpt>Projects<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Open the folder for your project, and look in the bin/Debug folder for <bpt id="p1">*</bpt>your project name<ept id="p1">*</ept>.dll.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Double-click <bpt id="p1">*</bpt>your project name<ept id="p1">*</ept>.dll.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A new window displays your project's attributes, in addition to references to other modules and assemblies.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Note that namespaces <ph id="ph1">`Microsoft.Office.Interop.Excel`</ph> and <ph id="ph2">`Microsoft.Office.Interop.Word`</ph> are included in the assembly.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>By default in Visual Studio, the compiler imports the types you need from a referenced PIA into your assembly.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: View Assembly Contents<ept id="p1">](../../../framework/app-domains/how-to-view-assembly-contents.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Double-click the <bpt id="p1">**</bpt>MANIFEST<ept id="p1">**</ept> icon.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A window appears that contains a list of assemblies that contain items referenced by the project.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Microsoft.Office.Interop.Excel`</ph> and <ph id="ph2">`Microsoft.Office.Interop.Word`</ph> are not included in the list.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Because the types your project needs have been imported into your assembly, references to a PIA are not required.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This makes deployment easier.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The PIAs do not have to be present on the user's computer, and because an application does not require deployment of a specific version of a PIA, applications can be designed to work with multiple versions of Office, provided that the necessary APIs exist in all versions.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Because deployment of PIAs is no longer necessary, you can create an application in advanced scenarios that works with multiple versions of Office, including earlier versions.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>However, this works only if your code does not use any APIs that are not available in the version of Office you are working with.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>It is not always clear whether a particular API was available in an earlier version, and for that reason working with earlier versions of Office is not recommended.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Office did not publish PIAs before Office 2003.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Therefore, the only way to generate an interop assembly for Office 2002 or earlier versions is by importing the COM reference.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Close the manifest window and the assembly window.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>To restore the PIA dependency</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, click the <bpt id="p2">**</bpt>Show All Files<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Expand the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> folder and select <bpt id="p2">**</bpt>Microsoft.Office.Interop.Excel<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Press F4 to display the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Propertie<ept id="p1">**</ept>s window, change the <bpt id="p2">**</bpt>Embed Interop Types<ept id="p2">**</ept> property from <bpt id="p3">**</bpt>True<ept id="p3">**</ept> to <bpt id="p4">**</bpt>False<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Repeat steps 1 and 2 in this procedure for <ph id="ph1">`Microsoft.Office.Interop.Word`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In C#, comment out the two calls to <ph id="ph1">`Autofit`</ph> at the end of the <ph id="ph2">`DisplayInExcel`</ph> method.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Press F5 to verify that the project still runs correctly.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Repeat steps 1-3 from the previous procedure to open the assembly window.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Notice that <ph id="ph1">`Microsoft.Office.Interop.Word`</ph> and <ph id="ph2">`Microsoft.Office.Interop.Excel`</ph> are no longer in the list of embedded assemblies.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Double-click the <bpt id="p1">**</bpt>MANIFEST<ept id="p1">**</ept> icon and scroll through the list of referenced assemblies.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`Microsoft.Office.Interop.Word`</ph> and <ph id="ph2">`Microsoft.Office.Interop.Excel`</ph> are in the list.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Because the application references the Excel and Word PIAs, and the <bpt id="p1">**</bpt>Embed Interop Types<ept id="p1">**</ept> property is set to <bpt id="p2">**</bpt>False<ept id="p2">**</ept>, both assemblies must exist on the end user's computer.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In Visual Studio, click <bpt id="p1">**</bpt>Clean Solution<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> menu to clean up the completed project.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Auto-Implemented Properties<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Auto-Implemented Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object and Collection Initializers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Optional Parameters<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/optional-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing Arguments by Position and by Name<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-position-and-by-name.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Named and Optional Arguments<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dynamic<ept id="p1">](../../../csharp/language-reference/keywords/dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Indexed Properties in COM Interop Programming<ept id="p1">](../../../csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Embedding Type Information from Microsoft Office Assemblies<ept id="p1">](http://msdn.microsoft.com/library/85b55e05-bc5e-4665-b6ae-e1ada9299fd3)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id="p1">](http://msdn.microsoft.com/library/b28ec92c-1867-4847-95c0-61adfe095e21)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Creating Your First VSTO Add-in for Excel<ept id="p1">](http://msdn.microsoft.com/library/a855e2be-3ecf-4112-a7f5-ec0f7fad3b5f)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COM Interop<ept id="p1">](../../../visual-basic/programming-guide/com-interop/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interoperability<ept id="p1">](../../../csharp/programming-guide/interop/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>