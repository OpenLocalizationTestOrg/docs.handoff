{"content":"---\ntitle: \"Differences Between Properties and Variables in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"property values\"\n  - \"variables [Visual Basic]\"\n  - \"Visual Basic code, procedures\"\n  - \"values, properties\"\n  - \"variables [Visual Basic], definition\"\n  - \"Visual Basic code, variables\"\n  - \"Visual Basic code, properties\"\n  - \"properties [Visual Basic], values\"\n  - \"properties [Visual Basic], defined\"\n  - \"variables [Visual Basic], and properties\"\n  - \"properties [Visual Basic], and variables\"\nms.assetid: 7a03a8be-5381-431f-bd7c-16e887e4e07b\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Differences Between Properties and Variables in Visual Basic\nVariables and properties both represent values that you can access. However, there are differences in storage and implementation.  \n  \n## Variables  \n A *variable* corresponds directly to a memory location. You define a variable with a single declaration statement. A variable can be a *local variable*, defined inside a procedure and available only within that procedure, or it can be a *member variable*, defined in a module, class, or structure but not inside any procedure. A member variable is also called a *field*.  \n  \n## Properties  \n A *property* is a data element defined on a module, class, or structure. You define a property with a code block between the `Property` and `End Property` statements. The code block contains a `Get` procedure, a `Set` procedure, or both. These procedures are called *property procedures* or *property accessors*. In addition to retrieving or storing the property's value, they can also perform custom actions, such as updating an access counter.  \n  \n## Differences  \n The following table shows some important differences between variables and properties.  \n  \n|Point of difference|Variable|Property|  \n|-------------------------|--------------|--------------|  \n|Declaration|Single declaration statement|Series of statements in a code block|  \n|Implementation|Single storage location|Executable code (property procedures)|  \n|Storage|Directly associated with variable's value|Typically has internal storage not available outside the property's containing class or module<br /><br /> Property's value might or might not exist as a stored element <sup>1</sup>|  \n|Executable code|None|Must have at least one procedure|  \n|Read and write access|Read/write or read-only|Read/write, read-only, or write-only|  \n|Custom actions (in addition to accepting or returning value)|Not possible|Can be performed as part of setting or retrieving property value|  \n  \n <sup>1</sup> Unlike a variable, the value of a property might not correspond directly to a single item of storage. The storage might be split into pieces for convenience or security, or the value might be stored in an encrypted form. In these cases the `Get` procedure would assemble the pieces or decrypt the stored value, and the `Set` procedure would encrypt the new value or split it into the constituent storage. A property value might be ephemeral, like time of day, in which case the `Get` procedure would calculate it on the fly each time you access the property.  \n  \n## See Also  \n [Property Procedures](./property-procedures.md)   \n [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)   \n [Property Statement](../../../../visual-basic/language-reference/statements/property-statement.md)   \n [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)   \n [How to: Create a Property](./how-to-create-a-property.md)   \n [How to: Declare a Property with Mixed Access Levels](./how-to-declare-a-property-with-mixed-access-levels.md)   \n [How to: Call a Property Procedure](./how-to-call-a-property-procedure.md)   \n [How to: Declare and Call a Default Property in Visual Basic](./how-to-declare-and-call-a-default-property.md)   \n [How to: Put a Value in a Property](./how-to-put-a-value-in-a-property.md)   \n [How to: Get a Value from a Property](./how-to-get-a-value-from-a-property.md)","nodes":[{"pos":[12,89],"content":"Differences Between Properties and Variables in Visual Basic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Differences Between Properties and Variables in Visual Basic | Microsoft Docs","pos":[0,77]}]},{"pos":[987,1047],"content":"Differences Between Properties and Variables in Visual Basic","linkify":"Differences Between Properties and Variables in Visual Basic","nodes":[{"content":"Differences Between Properties and Variables in Visual Basic","pos":[0,60]}]},{"content":"Variables and properties both represent values that you can access.","pos":[1048,1115]},{"content":"However, there are differences in storage and implementation.","pos":[1116,1177]},{"pos":[1186,1195],"content":"Variables","linkify":"Variables","nodes":[{"content":"Variables","pos":[0,9]}]},{"content":"A <bpt id=\"p1\">*</bpt>variable<ept id=\"p1\">*</ept> corresponds directly to a memory location.","pos":[1199,1254],"source":"A *variable* corresponds directly to a memory location."},{"content":"You define a variable with a single declaration statement.","pos":[1255,1313]},{"content":"A variable can be a <bpt id=\"p1\">*</bpt>local variable<ept id=\"p1\">*</ept>, defined inside a procedure and available only within that procedure, or it can be a <bpt id=\"p2\">*</bpt>member variable<ept id=\"p2\">*</ept>, defined in a module, class, or structure but not inside any procedure.","pos":[1314,1525],"source":" A variable can be a *local variable*, defined inside a procedure and available only within that procedure, or it can be a *member variable*, defined in a module, class, or structure but not inside any procedure."},{"content":"A member variable is also called a <bpt id=\"p1\">*</bpt>field<ept id=\"p1\">*</ept>.","pos":[1526,1569],"source":" A member variable is also called a *field*."},{"pos":[1578,1588],"content":"Properties","linkify":"Properties","nodes":[{"content":"Properties","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">*</bpt>property<ept id=\"p1\">*</ept> is a data element defined on a module, class, or structure.","pos":[1592,1664],"source":"A *property* is a data element defined on a module, class, or structure."},{"content":"You define a property with a code block between the <ph id=\"ph1\">`Property`</ph> and <ph id=\"ph2\">`End Property`</ph> statements.","pos":[1665,1758],"source":" You define a property with a code block between the `Property` and `End Property` statements."},{"content":"The code block contains a <ph id=\"ph1\">`Get`</ph> procedure, a <ph id=\"ph2\">`Set`</ph> procedure, or both.","pos":[1759,1829],"source":" The code block contains a `Get` procedure, a `Set` procedure, or both."},{"content":"These procedures are called <bpt id=\"p1\">*</bpt>property procedures<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>property accessors<ept id=\"p2\">*</ept>.","pos":[1830,1904],"source":" These procedures are called *property procedures* or *property accessors*."},{"content":"In addition to retrieving or storing the property's value, they can also perform custom actions, such as updating an access counter.","pos":[1905,2037]},{"pos":[2046,2057],"content":"Differences","linkify":"Differences","nodes":[{"content":"Differences","pos":[0,11]}]},{"content":"The following table shows some important differences between variables and properties.","pos":[2061,2147]},{"content":"Point of difference","pos":[2154,2173]},{"content":"Variable","pos":[2174,2182]},{"content":"Property","pos":[2183,2191]},{"content":"Declaration","pos":[2256,2267]},{"content":"Single declaration statement","pos":[2268,2296]},{"content":"Series of statements in a code block","pos":[2297,2333]},{"content":"Implementation","pos":[2338,2352]},{"content":"Single storage location","pos":[2353,2376]},{"content":"Executable code (property procedures)","pos":[2377,2414]},{"content":"Storage","pos":[2419,2426]},{"content":"Directly associated with variable's value","pos":[2427,2468]},{"content":"Typically has internal storage not available outside the property's containing class or module","pos":[2469,2563]},{"content":"Property's value might or might not exist as a stored element <bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept>","pos":[2576,2650],"source":" Property's value might or might not exist as a stored element <sup>1</sup>"},{"content":"Executable code","pos":[2655,2670]},{"content":"None","pos":[2671,2675]},{"content":"Must have at least one procedure","pos":[2676,2708]},{"content":"Read and write access","pos":[2713,2734]},{"content":"Read/write or read-only","pos":[2735,2758]},{"content":"Read/write, read-only, or write-only","pos":[2759,2795]},{"content":"Custom actions (in addition to accepting or returning value)","pos":[2800,2860]},{"content":"Not possible","pos":[2861,2873]},{"content":"Can be performed as part of setting or retrieving property value","pos":[2874,2938]},{"content":"<bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept> Unlike a variable, the value of a property might not correspond directly to a single item of storage.","pos":[2946,3060],"source":"<sup>1</sup> Unlike a variable, the value of a property might not correspond directly to a single item of storage."},{"content":"The storage might be split into pieces for convenience or security, or the value might be stored in an encrypted form.","pos":[3061,3179]},{"content":"In these cases the <ph id=\"ph1\">`Get`</ph> procedure would assemble the pieces or decrypt the stored value, and the <ph id=\"ph2\">`Set`</ph> procedure would encrypt the new value or split it into the constituent storage.","pos":[3180,3363],"source":" In these cases the `Get` procedure would assemble the pieces or decrypt the stored value, and the `Set` procedure would encrypt the new value or split it into the constituent storage."},{"content":"A property value might be ephemeral, like time of day, in which case the <ph id=\"ph1\">`Get`</ph> procedure would calculate it on the fly each time you access the property.","pos":[3364,3517],"source":" A property value might be ephemeral, like time of day, in which case the `Get` procedure would calculate it on the fly each time you access the property."},{"pos":[3526,3534],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Property Procedures<ept id=\"p1\">](./property-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3538,3586],"source":"[Property Procedures](./property-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](./procedure-parameters-and-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[3589,3668],"source":" [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Property Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/property-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3671,3771],"source":" [Property Statement](../../../../visual-basic/language-reference/statements/property-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3774,3864],"source":" [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Create a Property<ept id=\"p1\">](./how-to-create-a-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[3867,3927],"source":" [How to: Create a Property](./how-to-create-a-property.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Declare a Property with Mixed Access Levels<ept id=\"p1\">](./how-to-declare-a-property-with-mixed-access-levels.md)</ept><ph id=\"ph1\"> </ph>","pos":[3930,4042],"source":" [How to: Declare a Property with Mixed Access Levels](./how-to-declare-a-property-with-mixed-access-levels.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Call a Property Procedure<ept id=\"p1\">](./how-to-call-a-property-procedure.md)</ept><ph id=\"ph1\"> </ph>","pos":[4045,4121],"source":" [How to: Call a Property Procedure](./how-to-call-a-property-procedure.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Declare and Call a Default Property in Visual Basic<ept id=\"p1\">](./how-to-declare-and-call-a-default-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[4124,4236],"source":" [How to: Declare and Call a Default Property in Visual Basic](./how-to-declare-and-call-a-default-property.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Put a Value in a Property<ept id=\"p1\">](./how-to-put-a-value-in-a-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[4239,4315],"source":" [How to: Put a Value in a Property](./how-to-put-a-value-in-a-property.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Get a Value from a Property<ept id=\"p1\">](./how-to-get-a-value-from-a-property.md)</ept>","pos":[4318,4397],"source":" [How to: Get a Value from a Property](./how-to-get-a-value-from-a-property.md)"}]}