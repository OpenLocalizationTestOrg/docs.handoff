{"content":"---\ntitle: \"int - C# Reference\"\nms.custom: seodec18\nms.date: 03/14/2017\nf1_keywords:\n  - \"int_CSharpKeyword\"\n  - \"int\"\nhelpviewer_keywords:\n  - \"int keyword [C#]\"\nms.assetid: 212447b4-5d2a-41aa-88ab-84fe710bdb52\n---\n# int (C# Reference)\n\n`int` denotes an integral type that stores values according to the size and range shown in the following table.\n\n|Type|Range|Size|.NET type|\n|----------|-----------|----------|-------------------------|\n|`int`|-2,147,483,648 to 2,147,483,647|Signed 32-bit integer|<xref:System.Int32?displayProperty=nameWithType>|\n\n## Literals\n\nYou can declare and initialize an `int` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.  If the integer literal is outside the range of `int` (that is, if it is less than <xref:System.Int32.MinValue?displayProperty=nameWithType> or greater than <xref:System.Int32.MaxValue?displayProperty=nameWithType>), a compilation error occurs.\n\nIn the following example, integers equal to 90,946 that are represented as decimal, hexadecimal, and binary literals are assigned to `int` values.\n\n[!code-csharp[int](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Int)]\n\n> [!NOTE]\n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7.0, a couple of features have been added to enhance readability.\n- C# 7.0 allows the usage of the underscore character, `_`, as a digit separator.\n- C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix. A decimal literal isn't permitted to have a leading underscore.\n\nSome examples are shown below.\n\n[!code-csharp[int](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#IntS)]\n\nInteger literals can also include a suffix that denotes the type, although there is no suffix that denotes the `int` type. If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:\n\n1. `int`\n2. [uint](../../../csharp/language-reference/keywords/uint.md)\n3. [long](../../../csharp/language-reference/keywords/long.md)\n4. [ulong](../../../csharp/language-reference/keywords/ulong.md)\n\nIn these examples, the literal 90946 is of type `int`.\n\n## Conversions\n\nThere is a predefined implicit conversion from `int` to [long](../../../csharp/language-reference/keywords/long.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md). For example:\n\n```csharp\n// '123' is an int, so an implicit conversion takes place here:\nfloat f = 123;\n```\n\nThere is a predefined implicit conversion from [sbyte](../../../csharp/language-reference/keywords/sbyte.md), [byte](../../../csharp/language-reference/keywords/byte.md), [short](../../../csharp/language-reference/keywords/short.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), or [char](../../../csharp/language-reference/keywords/char.md) to `int`. For example, the following assignment statement will produce a compilation error without a cast:\n\n```csharp\nlong aLong = 22;\nint i1 = aLong;       // Error: no implicit conversion from long.\nint i2 = (int)aLong;  // OK: explicit conversion.\n```\n\nNotice also that there is no implicit conversion from floating-point types to `int`. For example, the following statement generates a compiler error unless an explicit cast is used:\n\n```csharp\nint x = 3.0;         // Error: no implicit conversion from double.\nint y = (int)3.0;    // OK: explicit conversion.\n```\n\nFor more information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).\n\n## C# Language Specification\n\nFor more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.Int32>\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)\n- [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)\n- [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,211],"embed":true,"restype":"x-metadata","content":"title: \"int - C# Reference\"\nms.custom: seodec18\nms.date: 03/14/2017\nf1_keywords:\n  - \"int_CSharpKeyword\"\n  - \"int\"\nhelpviewer_keywords:\n  - \"int keyword [C#]\"\nms.assetid: 212447b4-5d2a-41aa-88ab-84fe710bdb52","nodes":[{"content":"int - C# Reference","nodes":[{"pos":[0,18],"content":"int - C# Reference","nodes":[{"content":"int - C# Reference","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[218,236],"content":"int (C# Reference)","linkify":"int (C# Reference)","nodes":[{"content":"int (C# Reference)","pos":[0,18]}]},{"pos":[238,349],"content":"<ph id=\"ph1\">`int`</ph> denotes an integral type that stores values according to the size and range shown in the following table.","source":"`int` denotes an integral type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[352,356]},{"content":"Range","pos":[357,362]},{"content":"Size","pos":[363,367]},{"content":".NET type","pos":[368,377]},{"content":"-2,147,483,648 to 2,147,483,647","pos":[448,479]},{"content":"Signed 32-bit integer","pos":[480,501]},{"pos":[556,564],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize an <ph id=\"ph1\">`int`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.","pos":[566,719],"source":"You can declare and initialize an `int` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`int`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.","pos":[721,964],"source":"  If the integer literal is outside the range of `int` (that is, if it is less than <xref:System.Int32.MinValue?displayProperty=nameWithType> or greater than <xref:System.Int32.MaxValue?displayProperty=nameWithType>), a compilation error occurs."},{"pos":[966,1112],"content":"In the following example, integers equal to 90,946 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`int`</ph> values.","source":"In the following example, integers equal to 90,946 that are represented as decimal, hexadecimal, and binary literals are assigned to `int` values."},{"pos":[1226,1388],"content":"[!NOTE]\nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[8,160],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"content":"Starting with C# 7.0, a couple of features have been added to enhance readability.","pos":[1390,1472]},{"pos":[1475,1554],"content":"C# 7.0 allows the usage of the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator.","source":"C# 7.0 allows the usage of the underscore character, `_`, as a digit separator."},{"content":"C# 7.2 allows <ph id=\"ph1\">`_`</ph> to be used as a digit separator for a binary or hexadecimal literal, after the prefix.","pos":[1557,1661],"source":"C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix."},{"content":"A decimal literal isn't permitted to have a leading underscore.","pos":[1662,1725]},{"content":"Some examples are shown below.","pos":[1727,1757]},{"content":"Integer literals can also include a suffix that denotes the type, although there is no suffix that denotes the <ph id=\"ph1\">`int`</ph> type.","pos":[1870,1992],"source":"Integer literals can also include a suffix that denotes the type, although there is no suffix that denotes the `int` type."},{"content":"If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:","pos":[1993,2113]},{"pos":[2127,2186],"content":"<bpt id=\"p1\">[</bpt>uint<ept id=\"p1\">](../../../csharp/language-reference/keywords/uint.md)</ept>","source":"[uint](../../../csharp/language-reference/keywords/uint.md)"},{"pos":[2190,2249],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept>","source":"[long](../../../csharp/language-reference/keywords/long.md)"},{"pos":[2253,2314],"content":"<bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](../../../csharp/language-reference/keywords/ulong.md)</ept>","source":"[ulong](../../../csharp/language-reference/keywords/ulong.md)"},{"pos":[2316,2370],"content":"In these examples, the literal 90946 is of type <ph id=\"ph1\">`int`</ph>.","source":"In these examples, the literal 90946 is of type `int`."},{"pos":[2375,2386],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`int`</ph> to <bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p2\">[</bpt>float<ept id=\"p2\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p3\">[</bpt>double<ept id=\"p3\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p4\">[</bpt>decimal<ept id=\"p4\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","pos":[2388,2702],"source":"There is a predefined implicit conversion from `int` to [long](../../../csharp/language-reference/keywords/long.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"For example:","pos":[2703,2715]},{"content":"There is a predefined implicit conversion from <bpt id=\"p1\">[</bpt>sbyte<ept id=\"p1\">](../../../csharp/language-reference/keywords/sbyte.md)</ept>, <bpt id=\"p2\">[</bpt>byte<ept id=\"p2\">](../../../csharp/language-reference/keywords/byte.md)</ept>, <bpt id=\"p3\">[</bpt>short<ept id=\"p3\">](../../../csharp/language-reference/keywords/short.md)</ept>, <bpt id=\"p4\">[</bpt>ushort<ept id=\"p4\">](../../../csharp/language-reference/keywords/ushort.md)</ept>, or <bpt id=\"p5\">[</bpt>char<ept id=\"p5\">](../../../csharp/language-reference/keywords/char.md)</ept> to <ph id=\"ph1\">`int`</ph>.","pos":[2811,3182],"source":"There is a predefined implicit conversion from [sbyte](../../../csharp/language-reference/keywords/sbyte.md), [byte](../../../csharp/language-reference/keywords/byte.md), [short](../../../csharp/language-reference/keywords/short.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), or [char](../../../csharp/language-reference/keywords/char.md) to `int`."},{"content":"For example, the following assignment statement will produce a compilation error without a cast:","pos":[3183,3279]},{"content":"Notice also that there is no implicit conversion from floating-point types to <ph id=\"ph1\">`int`</ph>.","pos":[3429,3513],"source":"Notice also that there is no implicit conversion from floating-point types to `int`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[3514,3610]},{"pos":[3743,3976],"content":"For more information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For more information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[3981,4006],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[4008,4166],"source":"For more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[4167,4243]},{"pos":[4248,4256],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4282,4341],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[4344,4410],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[4413,4480],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[4483,4574],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>","source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)"},{"pos":[4577,4668],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>","source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)"},{"pos":[4671,4790],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)"},{"pos":[4793,4912],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}