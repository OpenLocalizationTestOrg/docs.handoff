<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dynamic-update.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e28a34e500034eec6cf250d94cf7631ca85a7d40</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\dynamic-update.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ffe2da87e75083f8f1d90eb14f1a39b2c9e9cda</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc479de27b206e301df97ef5373c35a73709cb50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Dynamic Update</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dynamic Update</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dynamic update provides a mechanism for workflow application developers to update the workflow definition of a persisted workflow instance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This can be to implement a bug fix, new requirements, or to accommodate unexpected changes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of the dynamic update functionality introduced in <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Dynamic Update</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To apply dynamic updates to a persisted workflow instance, a <ph id="ph1">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateMap&gt;</ph> is created that contains instructions for the runtime that describe how to modify the persisted workflow instance to reflect the desired changes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Once the update map is created, it is applied to the desired persisted workflow instances.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Once the dynamic update is applied, the workflow instance may be resumed using the new updated workflow definition.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are four steps required to create and apply an update map.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Prepare the workflow definition for dynamic update<ept id="p1">](dynamic-update.md#Prepare)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Update the workflow definition to reflect the desired changes<ept id="p1">](dynamic-update.md#Update)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create the update map<ept id="p1">](dynamic-update.md#Create)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Apply the update map to the desired persisted workflow instances<ept id="p1">](dynamic-update.md#Apply)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that steps 1 through 3, which cover the creation of the update map, may be performed independently of applying the update.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A common scenario that the workflow developer will create the update map offline, and then an administrator will apply the update at a later time.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of the dynamic update process of adding a new activity to a persisted instance of a compiled Xaml workflow.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Prepare"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Prepare the workflow definition for dynamic update</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The first step in the dynamic update process is to prepare the desired workflow definition for update.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is done by calling the <ph id="ph1">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate%2A?displayProperty=nameWithType&gt;</ph> method and passing in the workflow definition to modify.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This method validates and then walks the workflow tree to identify all of the objects such as public activities and variables that need to be tagged so they can be compared later with the modified workflow definition.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When this is complete, the workflow tree is cloned and attached to the original workflow definition.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the update map is created, the updated version of the workflow definition is compared with the original workflow definition and the update map is generated based on the differences.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To prepare a Xaml workflow for dynamic update it may be loaded into an <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph>, and then the <ph id="ph2">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> is passed into <ph id="ph3">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about working with serialized workflows and <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph>, see <bpt id="p1">[</bpt>Serializing Workflows and Activities to and from XAML<ept id="p1">](serializing-workflows-and-activities-to-and-from-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">`MortgageWorkflow`</ph> definition (that consists of a <ph id="ph2">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> with several child activities) is loaded into an <ph id="ph3">&lt;xref:System.Activities.ActivityBuilder&gt;</ph>, and then prepared for dynamic update.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After the method returns, the <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> contains the original workflow definition as well as a copy.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To download the sample code that accompanies this topic, see <bpt id="p1">[</bpt>Dynamic Update sample code<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=227905)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Update"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Update the workflow definition to reflect the desired changes</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Once the workflow definition has been prepared for updating, the desired changes can be made.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can add or remove activities, add, move or delete public variables, add or remove arguments, and make changes to the signature of activity delegates.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You cannot remove a running activity or change the signature of a running delegate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These changes may be made using code, or in a re-hosted workflow designer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the following example, a custom <ph id="ph1">`VerifyAppraisal`</ph> activity is added to the Sequence that makes up the body of the <ph id="ph2">`MortgageWorkflow`</ph> from the previous example.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Create the update map</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Once the workflow definition that was prepared for update has been modified, the update map can be created.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To create a dynamic update map, the <ph id="ph1">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap%2A?displayProperty=nameWithType&gt;</ph> method is invoked.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This returns a <ph id="ph1">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateMap&gt;</ph> that contains the information the runtime needs to modify a persisted workflow instance so that it may be loaded and resumed with the new workflow definition.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the following example, a dynamic map is created for the modified <ph id="ph1">`MortgageWorkflow`</ph> definition from the previous example.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This update map can immediately be used to modify persisted workflow instances, or more typically it can be saved and the updates applied later.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One way to save the update map is to serialize it to a file, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap%2A?displayProperty=nameWithType&gt;</ph> returns, the cloned workflow definition and other dynamic update information that was added in the call to <ph id="ph2">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate%2A?displayProperty=nameWithType&gt;</ph> is removed, and the modified workflow definition is ready to be saved so that it can be used later when resuming updated workflow instances.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the following example, the modified workflow definition is saved to <ph id="ph1">`MortgageWorkflow_v1.1.xaml`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Apply"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Apply the update map to the desired persisted workflow instances</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Applying the update map can be done at any time after creating it.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It can be done right away using the <ph id="ph1">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateMap&gt;</ph> instance that was returned by <ph id="ph2">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap%2A?displayProperty=nameWithType&gt;</ph>, or it can be done later using a saved copy of the update map.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To update a workflow instance, load it into a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationInstance&gt;</ph> using <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.GetInstance%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Next, create a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> using the updated workflow definition, and the desired <ph id="ph2">&lt;xref:System.Activities.WorkflowIdentity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Activities.WorkflowIdentity&gt;</ph> may be different than the one that was used to persist the original workflow, and typically is in order to reflect that the persisted instance has been modified.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Once the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> is created, it is loaded using the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Load%2A?displayProperty=nameWithType&gt;</ph> that takes a <ph id="ph3">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateMap&gt;</ph>, and then unloaded with a call to <ph id="ph4">&lt;xref:System.Activities.WorkflowApplication.Unload%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This applies the dynamic update and persists the updated workflow instance.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Resuming an Updated Workflow Instance</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Once dynamic update has been applied, the workflow instance may be resumed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Note that the new updated definition and <ph id="ph1">&lt;xref:System.Activities.WorkflowIdentity&gt;</ph> must be used.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information about working with <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowIdentity&gt;</ph>, see <bpt id="p1">[</bpt>Using WorkflowIdentity and Versioning<ept id="p1">](using-workflowidentity-and-versioning.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`MortgageWorkflow_v1.1.xaml`</ph> workflow from the previous example has been compiled, and is loaded and resumed using the updated workflow definition.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To download the sample code that accompanies this topic, see <bpt id="p1">[</bpt>Dynamic Update sample code<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=227905)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>