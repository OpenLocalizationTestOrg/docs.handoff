{"content":"---\ntitle: \"Inserting an Image from a File\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 35900aa2-5615-4174-8212-ba184c6b82fb\n---\n# Inserting an Image from a File\nYou can write a binary large object (BLOB) to a database as either binary or character data, depending on the type of field at your data source. BLOB is a generic term that refers to the `text`, `ntext`, and `image` data types, which typically contain documents and pictures.  \n  \n To write a BLOB value to your database, issue the appropriate INSERT or UPDATE statement and pass the BLOB value as an input parameter (see [Configuring Parameters and Parameter Data Types](../../../../../docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)). If your BLOB is stored as text, such as a SQL Server `text` field, you can pass the BLOB as a string parameter. If the BLOB is stored in binary format, such as a SQL Server `image` field, you can pass an array of type `byte` as a binary parameter.  \n  \n## Example  \n The following code example adds employee information to the Employees table in the Northwind database. A photo of the employee is read from a file and added to the Photo field in the table, which is an image field.  \n  \n```vb  \nPublic Shared Sub AddEmployee( _  \n  lastName As String, _  \n  firstName As String, _  \n  title As String, _  \n  hireDate As DateTime, _  \n  reportsTo As Integer, _  \n  photoFilePath As String, _  \n  connectionString As String)  \n  \n  Dim photo() as Byte = GetPhoto(photoFilePath)  \n  \n  Using connection As SqlConnection = New SqlConnection( _  \n    connectionString)  \n  \n  Dim command As SqlCommand = New SqlCommand( _  \n    \"INSERT INTO Employees (LastName, FirstName, Title, \" & _  \n    \"HireDate, ReportsTo, Photo) \" & _  \n    \"Values(@LastName, @FirstName, @Title, \" & _  \n    \"@HireDate, @ReportsTo, @Photo)\", connection)   \n  \n  command.Parameters.Add(\"@LastName\",  _  \n    SqlDbType.NVarChar, 20).Value = lastName  \n  command.Parameters.Add(\"@FirstName\", _  \n    SqlDbType.NVarChar, 10).Value = firstName  \n  command.Parameters.Add(\"@Title\", _  \n    SqlDbType.NVarChar, 30).Value = title  \n  command.Parameters.Add(\"@HireDate\", _  \n    SqlDbType.DateTime).Value = hireDate  \n  command.Parameters.Add(\"@ReportsTo\", _  \n    SqlDbType.Int).Value = reportsTo  \n  \n  command.Parameters.Add(\"@Photo\", _  \n    SqlDbType.Image, photo.Length).Value = photo  \n  \n  connection.Open()  \n  command.ExecuteNonQuery()  \n  \n  End Using  \nEnd Sub  \n  \nPublic Shared Function GetPhoto(filePath As String) As Byte()  \n  Dim stream As FileStream = new FileStream( _  \n     filePath, FileMode.Open, FileAccess.Read)  \n  Dim reader As BinaryReader = new BinaryReader(stream)  \n  \n  Dim photo() As Byte = reader.ReadBytes(stream.Length)  \n  \n  reader.Close()  \n  stream.Close()  \n  \n  Return photo  \nEnd Function  \n```  \n  \n```csharp  \npublic static void AddEmployee(  \n  string lastName,   \n  string firstName,   \n  string title,   \n  DateTime hireDate,   \n  int reportsTo,   \n  string photoFilePath,   \n  string connectionString)  \n{  \n  byte[] photo = GetPhoto(photoFilePath);  \n  \n  using (SqlConnection connection = new SqlConnection(  \n    connectionString))  \n  \n  SqlCommand command = new SqlCommand(  \n    \"INSERT INTO Employees (LastName, FirstName, \" +  \n    \"Title, HireDate, ReportsTo, Photo) \" +  \n    \"Values(@LastName, @FirstName, @Title, \" +  \n    \"@HireDate, @ReportsTo, @Photo)\", connection);   \n  \n  command.Parameters.Add(\"@LastName\",    \n     SqlDbType.NVarChar, 20).Value = lastName;  \n  command.Parameters.Add(\"@FirstName\",   \n      SqlDbType.NVarChar, 10).Value = firstName;  \n  command.Parameters.Add(\"@Title\",       \n      SqlDbType.NVarChar, 30).Value = title;  \n  command.Parameters.Add(\"@HireDate\",   \n       SqlDbType.DateTime).Value = hireDate;  \n  command.Parameters.Add(\"@ReportsTo\",   \n      SqlDbType.Int).Value = reportsTo;  \n  \n  command.Parameters.Add(\"@Photo\",  \n      SqlDbType.Image, photo.Length).Value = photo;  \n  \n  connection.Open();  \n  command.ExecuteNonQuery();  \n  }  \n}  \n  \npublic static byte[] GetPhoto(string filePath)  \n{  \n  FileStream stream = new FileStream(  \n      filePath, FileMode.Open, FileAccess.Read);  \n  BinaryReader reader = new BinaryReader(stream);  \n  \n  byte[] photo = reader.ReadBytes((int)stream.Length);  \n  \n  reader.Close();  \n  stream.Close();  \n  \n  return photo;  \n}  \n```  \n  \n## See also\n\n- [Using Commands to Modify Data](../../../../../docs/framework/data/adonet/using-commands-to-modify-data.md)\n- [Retrieving Binary Data](../../../../../docs/framework/data/adonet/retrieving-binary-data.md)\n- [SQL Server Binary and Large-Value Data](../../../../../docs/framework/data/adonet/sql/sql-server-binary-and-large-value-data.md)\n- [SQL Server Data Type Mappings](../../../../../docs/framework/data/adonet/sql-server-data-type-mappings.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,148],"embed":true,"restype":"x-metadata","content":"title: \"Inserting an Image from a File\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 35900aa2-5615-4174-8212-ba184c6b82fb","nodes":[{"content":"Inserting an Image from a File","nodes":[{"pos":[0,30],"content":"Inserting an Image from a File","nodes":[{"content":"Inserting an Image from a File","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[155,185],"content":"Inserting an Image from a File","linkify":"Inserting an Image from a File","nodes":[{"content":"Inserting an Image from a File","pos":[0,30]}]},{"content":"You can write a binary large object (BLOB) to a database as either binary or character data, depending on the type of field at your data source.","pos":[186,330]},{"content":"BLOB is a generic term that refers to the <ph id=\"ph1\">`text`</ph>, <ph id=\"ph2\">`ntext`</ph>, and <ph id=\"ph3\">`image`</ph> data types, which typically contain documents and pictures.","pos":[331,461],"source":" BLOB is a generic term that refers to the `text`, `ntext`, and `image` data types, which typically contain documents and pictures."},{"content":"To write a BLOB value to your database, issue the appropriate INSERT or UPDATE statement and pass the BLOB value as an input parameter (see <bpt id=\"p1\">[</bpt>Configuring Parameters and Parameter Data Types<ept id=\"p1\">](../../../../../docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)</ept>).","pos":[468,753],"source":"To write a BLOB value to your database, issue the appropriate INSERT or UPDATE statement and pass the BLOB value as an input parameter (see [Configuring Parameters and Parameter Data Types](../../../../../docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md))."},{"content":"If your BLOB is stored as text, such as a SQL Server <ph id=\"ph1\">`text`</ph> field, you can pass the BLOB as a string parameter.","pos":[754,865],"source":" If your BLOB is stored as text, such as a SQL Server `text` field, you can pass the BLOB as a string parameter."},{"content":"If the BLOB is stored in binary format, such as a SQL Server <ph id=\"ph1\">`image`</ph> field, you can pass an array of type <ph id=\"ph2\">`byte`</ph> as a binary parameter.","pos":[866,1001],"source":" If the BLOB is stored in binary format, such as a SQL Server `image` field, you can pass an array of type `byte` as a binary parameter."},{"pos":[1010,1017],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example adds employee information to the Employees table in the Northwind database.","pos":[1021,1123]},{"content":"A photo of the employee is read from a file and added to the Photo field in the table, which is an image field.","pos":[1124,1235]},{"pos":[4399,4407],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4411,4518],"content":"<bpt id=\"p1\">[</bpt>Using Commands to Modify Data<ept id=\"p1\">](../../../../../docs/framework/data/adonet/using-commands-to-modify-data.md)</ept>","source":"[Using Commands to Modify Data](../../../../../docs/framework/data/adonet/using-commands-to-modify-data.md)"},{"pos":[4521,4614],"content":"<bpt id=\"p1\">[</bpt>Retrieving Binary Data<ept id=\"p1\">](../../../../../docs/framework/data/adonet/retrieving-binary-data.md)</ept>","source":"[Retrieving Binary Data](../../../../../docs/framework/data/adonet/retrieving-binary-data.md)"},{"pos":[4617,4746],"content":"<bpt id=\"p1\">[</bpt>SQL Server Binary and Large-Value Data<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/sql-server-binary-and-large-value-data.md)</ept>","source":"[SQL Server Binary and Large-Value Data](../../../../../docs/framework/data/adonet/sql/sql-server-binary-and-large-value-data.md)"},{"pos":[4749,4856],"content":"<bpt id=\"p1\">[</bpt>SQL Server Data Type Mappings<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql-server-data-type-mappings.md)</ept>","source":"[SQL Server Data Type Mappings](../../../../../docs/framework/data/adonet/sql-server-data-type-mappings.md)"},{"pos":[4859,4963],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}