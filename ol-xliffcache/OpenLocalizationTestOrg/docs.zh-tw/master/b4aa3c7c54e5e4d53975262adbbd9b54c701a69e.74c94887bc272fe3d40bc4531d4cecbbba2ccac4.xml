{"content":"---\ntitle: \"void (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"void_CSharpKeyword\"\n  - \"void\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"void keyword [C#]\"\nms.assetid: 0d2d8a95-fe20-4fbd-bf5d-c1e54bce71d4\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# void (C# Reference)\nWhen used as the return type for a method, `void` specifies that the method doesn't return a value.  \n  \n `void` isn't allowed in the parameter list of a method. A method that takes no parameters and returns no value is declared as follows:  \n  \n```  \npublic void SampleMethod()  \n{  \n    // Body of the method.  \n}  \n  \n```  \n  \n `void` is also used in an unsafe context to declare a pointer to an unknown type. For more information, see [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md).  \n  \n `void` is an alias for the .NET Framework <xref:System.Void?displayProperty=fullName> type.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)   \n [Value Types](../../../csharp/language-reference/keywords/value-types.md)   \n [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)   \n [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)","nodes":[{"pos":[12,48],"content":"void (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"void (C# Reference) | Microsoft Docs","pos":[0,36]}]},{"pos":[567,586],"content":"void (C# Reference)","linkify":"void (C# Reference)","nodes":[{"content":"void (C# Reference)","pos":[0,19]}]},{"pos":[587,686],"content":"When used as the return type for a method, <ph id=\"ph1\">`void`</ph> specifies that the method doesn't return a value.","source":"When used as the return type for a method, `void` specifies that the method doesn't return a value."},{"content":"<ph id=\"ph1\">`void`</ph> isn't allowed in the parameter list of a method.","pos":[693,748],"source":"`void` isn't allowed in the parameter list of a method."},{"content":"A method that takes no parameters and returns no value is declared as follows:","pos":[749,827]},{"content":"<ph id=\"ph1\">`void`</ph> is also used in an unsafe context to declare a pointer to an unknown type.","pos":[918,999],"source":"`void` is also used in an unsafe context to declare a pointer to an unknown type."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept>.","pos":[1000,1115],"source":" For more information, see [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)."},{"pos":[1122,1213],"content":"<ph id=\"ph1\">`void`</ph> is an alias for the .NET Framework <ph id=\"ph2\">&lt;xref:System.Void?displayProperty=fullName&gt;</ph> type.","source":"`void` is an alias for the .NET Framework <xref:System.Void?displayProperty=fullName> type."},{"pos":[1222,1247],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[1361,1369],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1373,1433],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1436,1504],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1507,1576],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[1579,1662],"source":" [Reference Types](../../../csharp/language-reference/keywords/reference-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Value Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[1665,1740],"source":" [Value Types](../../../csharp/language-reference/keywords/value-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept><ph id=\"ph1\"> </ph>","pos":[1743,1820],"source":" [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept>","pos":[1823,1915],"source":" [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)"}]}