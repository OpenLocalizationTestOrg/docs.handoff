{"content":"---\ntitle: \"x:Class Directive\"\nms.date: \"03/30/2017\"\nf1_keywords: \n  - \"x:Class\"\n  - \"xClass\"\n  - \"Class\"\nhelpviewer_keywords: \n  - \"Class attribute in XAML [XAML Services]\"\n  - \"XAML [XAML Services], x:Class attribute\"\n  - \"x:Class attribute [XAML Services]\"\nms.assetid: bc4a3d8e-76e2-423e-a5d1-159a023e82ec\n---\n# x:Class Directive\nConfigures XAML markup compilation to join partial classes between markup and code-behind. The code partial class is defined in a separate code file in a [!INCLUDE[TLA#tla_cls](../../../includes/tlasharptla-cls-md.md)] language, whereas the markup partial class is typically created by code generation during XAML compilation.  \n  \n## XAML Attribute Usage  \n  \n```  \n<object x:Class=\"namespace.classname\"...>  \n  ...  \n</object>  \n```  \n  \n## XAML Values  \n  \n|||  \n|-|-|  \n|`namespace`|Optional. Specifies a [!INCLUDE[TLA2#tla_clr](../../../includes/tla2sharptla-clr-md.md)] namespace that contains the partial class identified by `classname`. If `namespace` is specified, a dot (.) separates `namespace` and `classname`. See Remarks.|  \n|`classname`|Required. Specifies the [!INCLUDE[TLA2#tla_clr](../../../includes/tla2sharptla-clr-md.md)] name of the partial class that connects the loaded XAML and your code-behind for that XAML.|  \n  \n## Dependencies  \n `x:Class` can only be specified on the root element of a XAML production. `x:Class` is invalid on any object that has a parent in the XAML production. For more information, see [\\[MS-XAML\\] Section 4.3.1.6](https://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n## Remarks  \n The `namespace` value may contain additional dots to organize related namespaces into name hierarchies, which is a common technique in .NET Framework programming. Only the last dot in a string of `x:Class` values is interpreted to separate `namespace` and `classname.` The class that is used as `x:Class` cannot be a nested class. Nested classes are not allowed because determining the meaning of dots for `x:Class` strings is ambiguous if nested classes are permitted.  \n  \n In existing programming models that use `x:Class`, `x:Class` is optional in the sense that it is entirely valid to have a XAML page that has no code-behind. However, that capability interacts with the build actions as implemented by frameworks that use XAML. `x:Class` capability is also influenced by the roles that various classifications of XAML-specified content have in an application model and in the corresponding build actions. If your XAML declares event-handling attribute values or instantiates custom elements where the defining classes are in the code-behind class, you have to provide the `x:Class` directive reference (or [x:Subclass](x-subclass-directive.md)) to the appropriate class for code-behind.  \n  \n The value of the `x:Class` directive must be a string that specifies the fully qualified name of a class but without any assembly information (equivalent to the <xref:System.Type.FullName%2A?displayProperty=nameWithType>). For simple applications, you can omit CLR namespace information if the code-behind is also structured in that manner (code definition starts at the class level).  \n  \n The code-behind file for a page or application definition must be within a code file that is included as part of the project that produces a compiled application and involves markup compilation. You must follow name rules for CLR classes. For more information, see [Framework Design Guidelines](../../standard/design-guidelines/index.md). By default, the code-behind class must be `public`; however, you can define it at a different access level by using the [x:ClassModifier Directive](x-classmodifier-directive.md).  \n  \n This interpretation of the `x:Class` attribute applies only to a CLR-based XAML implementation, in particular to .NET Framework XAML Services. Other XAML implementations that are not based on CLR and that do not use .NET Framework XAML Services might use a different resolution formula for connecting XAML markup and backing run-time code. For more information about more general interpretations of `x:Class`, see [\\[MS-XAML\\]](https://go.microsoft.com/fwlink/?LinkId=114525).  \n  \n At a certain level of architecture, the meaning of `x:Class` is undefined in .NET Framework XAML Services. This is because .NET Framework XAML Services does not specify the programming model by which XAML markup and backing code are connected. Additional uses of the `x:Class` directive might be implemented by specific frameworks that use programming models or application models to define how to connect XAML markup and CLR-based code-behind. Each framework can have its own build actions that enable some of the behavior or specific components that must be included in the build environment. Within a framework, build actions can also vary depending on the specific CLR language that is used for the code-behind.  \n  \n## x:Class in the WPF Programming Model  \n In WPF applications and the WPF application model, `x:Class` can be declared as an attribute for any element that is the root of a XAML file and is being compiled (where the XAML is included in a WPF application project with `Page` build action), or for the <xref:System.Windows.Application> root in the application definition of a compiled WPF application. Declaring `x:Class` on an element other than a page root or application root, or on a WPF XAML file that is not compiled, causes a compile-time error under the [!INCLUDE[net_v30_short](../../../includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](../../../includes/net-v35-short-md.md)] WPF XAML compiler. For information about other aspects of `x:Class` handling in WPF, see [Code-Behind and XAML in WPF](../wpf/advanced/code-behind-and-xaml-in-wpf.md).  \n  \n## x:Class for Windows Workflow Foundation  \n For Windows Workflow Foundation, `x:Class` names the class of a custom activity composed entirely in XAML, or names the partial class of the XAML page for  an activity designer with code-behind.  \n  \n## Silverlight Usage Notes  \n `x:Class` for Silverlight is documented separately. For more information, see [XAML Namespace (x:) Language Features (Silverlight)](https://go.microsoft.com/fwlink/?LinkId=199081).  \n  \n## See also\n\n- [x:Subclass Directive](x-subclass-directive.md)\n- [XAML and Custom Classes for WPF](../wpf/advanced/xaml-and-custom-classes-for-wpf.md)\n- [x:ClassModifier Directive](x-classmodifier-directive.md)\n- [Types Migrated from WPF to System.Xaml](types-migrated-from-wpf-to-system-xaml.md)\n","nodes":[{"pos":[4,308],"embed":true,"restype":"x-metadata","content":"title: \"x:Class Directive\"\nms.date: \"03/30/2017\"\nf1_keywords: \n  - \"x:Class\"\n  - \"xClass\"\n  - \"Class\"\nhelpviewer_keywords: \n  - \"Class attribute in XAML [XAML Services]\"\n  - \"XAML [XAML Services], x:Class attribute\"\n  - \"x:Class attribute [XAML Services]\"\nms.assetid: bc4a3d8e-76e2-423e-a5d1-159a023e82ec","nodes":[{"content":"x:Class Directive","nodes":[{"pos":[0,17],"content":"x:Class Directive","nodes":[{"content":"x:Class Directive","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[315,332],"content":"x:Class Directive","linkify":"x:Class Directive","nodes":[{"content":"x:Class Directive","pos":[0,17]}]},{"content":"Configures XAML markup compilation to join partial classes between markup and code-behind.","pos":[333,423]},{"content":"The code partial class is defined in a separate code file in a <ph id=\"ph1\">[!INCLUDE[TLA#tla_cls](../../../includes/tlasharptla-cls-md.md)]</ph> language, whereas the markup partial class is typically created by code generation during XAML compilation.","pos":[424,659],"source":" The code partial class is defined in a separate code file in a [!INCLUDE[TLA#tla_cls](../../../includes/tlasharptla-cls-md.md)] language, whereas the markup partial class is typically created by code generation during XAML compilation."},{"pos":[668,688],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[776,787],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"content":"Optional.","pos":[820,829]},{"content":"Specifies a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](../../../includes/tla2sharptla-clr-md.md)]</ph> namespace that contains the partial class identified by <ph id=\"ph2\">`classname`</ph>.","pos":[830,977],"source":" Specifies a [!INCLUDE[TLA2#tla_clr](../../../includes/tla2sharptla-clr-md.md)] namespace that contains the partial class identified by `classname`."},{"content":"If <ph id=\"ph1\">`namespace`</ph> is specified, a dot (.) separates <ph id=\"ph2\">`namespace`</ph> and <ph id=\"ph3\">`classname`</ph>.","pos":[978,1055],"source":" If `namespace` is specified, a dot (.) separates `namespace` and `classname`."},{"content":"See Remarks.","pos":[1056,1068]},{"content":"Required.","pos":[1085,1094]},{"content":"Specifies the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](../../../includes/tla2sharptla-clr-md.md)]</ph> name of the partial class that connects the loaded XAML and your code-behind for that XAML.","pos":[1095,1267],"source":" Specifies the [!INCLUDE[TLA2#tla_clr](../../../includes/tla2sharptla-clr-md.md)] name of the partial class that connects the loaded XAML and your code-behind for that XAML."},{"pos":[1277,1289],"content":"Dependencies","linkify":"Dependencies","nodes":[{"content":"Dependencies","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`x:Class`</ph> can only be specified on the root element of a XAML production.","pos":[1293,1366],"source":"`x:Class` can only be specified on the root element of a XAML production."},{"content":"<ph id=\"ph1\">`x:Class`</ph> is invalid on any object that has a parent in the XAML production.","pos":[1367,1443],"source":"`x:Class` is invalid on any object that has a parent in the XAML production."},{"content":"For more information, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\[</ph>MS-XAML<ph id=\"ph2\">\\]</ph> Section 4.3.1.6<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","pos":[1444,1548],"source":" For more information, see [\\[MS-XAML\\] Section 4.3.1.6](https://go.microsoft.com/fwlink/?LinkId=114525)."},{"pos":[1557,1564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`namespace`</ph> value may contain additional dots to organize related namespaces into name hierarchies, which is a common technique in .NET Framework programming.","pos":[1568,1730],"source":"The `namespace` value may contain additional dots to organize related namespaces into name hierarchies, which is a common technique in .NET Framework programming."},{"content":"Only the last dot in a string of <ph id=\"ph1\">`x:Class`</ph> values is interpreted to separate <ph id=\"ph2\">`namespace`</ph> and <ph id=\"ph3\">`classname.`</ph> The class that is used as <ph id=\"ph4\">`x:Class`</ph> cannot be a nested class.","pos":[1731,1898],"source":" Only the last dot in a string of `x:Class` values is interpreted to separate `namespace` and `classname.` The class that is used as `x:Class` cannot be a nested class."},{"content":"Nested classes are not allowed because determining the meaning of dots for <ph id=\"ph1\">`x:Class`</ph> strings is ambiguous if nested classes are permitted.","pos":[1899,2037],"source":" Nested classes are not allowed because determining the meaning of dots for `x:Class` strings is ambiguous if nested classes are permitted."},{"content":"In existing programming models that use <ph id=\"ph1\">`x:Class`</ph>, <ph id=\"ph2\">`x:Class`</ph> is optional in the sense that it is entirely valid to have a XAML page that has no code-behind.","pos":[2044,2200],"source":"In existing programming models that use `x:Class`, `x:Class` is optional in the sense that it is entirely valid to have a XAML page that has no code-behind."},{"content":"However, that capability interacts with the build actions as implemented by frameworks that use XAML.","pos":[2201,2302]},{"content":"<ph id=\"ph1\">`x:Class`</ph> capability is also influenced by the roles that various classifications of XAML-specified content have in an application model and in the corresponding build actions.","pos":[2303,2479],"source":"`x:Class` capability is also influenced by the roles that various classifications of XAML-specified content have in an application model and in the corresponding build actions."},{"content":"If your XAML declares event-handling attribute values or instantiates custom elements where the defining classes are in the code-behind class, you have to provide the <ph id=\"ph1\">`x:Class`</ph> directive reference (or <bpt id=\"p1\">[</bpt>x:Subclass<ept id=\"p1\">](x-subclass-directive.md)</ept>) to the appropriate class for code-behind.","pos":[2480,2761],"source":" If your XAML declares event-handling attribute values or instantiates custom elements where the defining classes are in the code-behind class, you have to provide the `x:Class` directive reference (or [x:Subclass](x-subclass-directive.md)) to the appropriate class for code-behind."},{"content":"The value of the <ph id=\"ph1\">`x:Class`</ph> directive must be a string that specifies the fully qualified name of a class but without any assembly information (equivalent to the <ph id=\"ph2\">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph>).","pos":[2768,2990],"source":"The value of the `x:Class` directive must be a string that specifies the fully qualified name of a class but without any assembly information (equivalent to the <xref:System.Type.FullName%2A?displayProperty=nameWithType>)."},{"content":"For simple applications, you can omit CLR namespace information if the code-behind is also structured in that manner (code definition starts at the class level).","pos":[2991,3152]},{"content":"The code-behind file for a page or application definition must be within a code file that is included as part of the project that produces a compiled application and involves markup compilation.","pos":[3159,3353]},{"content":"You must follow name rules for CLR classes.","pos":[3354,3397]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../standard/design-guidelines/index.md)</ept>.","pos":[3398,3497],"source":" For more information, see [Framework Design Guidelines](../../standard/design-guidelines/index.md)."},{"content":"By default, the code-behind class must be <ph id=\"ph1\">`public`</ph>; however, you can define it at a different access level by using the <bpt id=\"p1\">[</bpt>x:ClassModifier Directive<ept id=\"p1\">](x-classmodifier-directive.md)</ept>.","pos":[3498,3676],"source":" By default, the code-behind class must be `public`; however, you can define it at a different access level by using the [x:ClassModifier Directive](x-classmodifier-directive.md)."},{"content":"This interpretation of the <ph id=\"ph1\">`x:Class`</ph> attribute applies only to a CLR-based XAML implementation, in particular to .NET Framework XAML Services.","pos":[3683,3825],"source":"This interpretation of the `x:Class` attribute applies only to a CLR-based XAML implementation, in particular to .NET Framework XAML Services."},{"content":"Other XAML implementations that are not based on CLR and that do not use .NET Framework XAML Services might use a different resolution formula for connecting XAML markup and backing run-time code.","pos":[3826,4022]},{"content":"For more information about more general interpretations of <ph id=\"ph1\">`x:Class`</ph>, see <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\[</ph>MS-XAML<ph id=\"ph3\">\\]</ph><ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=114525)</ept>.","pos":[4023,4159],"source":" For more information about more general interpretations of `x:Class`, see [\\[MS-XAML\\]](https://go.microsoft.com/fwlink/?LinkId=114525)."},{"content":"At a certain level of architecture, the meaning of <ph id=\"ph1\">`x:Class`</ph> is undefined in .NET Framework XAML Services.","pos":[4166,4272],"source":"At a certain level of architecture, the meaning of `x:Class` is undefined in .NET Framework XAML Services."},{"content":"This is because .NET Framework XAML Services does not specify the programming model by which XAML markup and backing code are connected.","pos":[4273,4409]},{"content":"Additional uses of the <ph id=\"ph1\">`x:Class`</ph> directive might be implemented by specific frameworks that use programming models or application models to define how to connect XAML markup and CLR-based code-behind.","pos":[4410,4610],"source":" Additional uses of the `x:Class` directive might be implemented by specific frameworks that use programming models or application models to define how to connect XAML markup and CLR-based code-behind."},{"content":"Each framework can have its own build actions that enable some of the behavior or specific components that must be included in the build environment.","pos":[4611,4760]},{"content":"Within a framework, build actions can also vary depending on the specific CLR language that is used for the code-behind.","pos":[4761,4881]},{"pos":[4890,4926],"content":"x:Class in the WPF Programming Model","linkify":"x:Class in the WPF Programming Model","nodes":[{"content":"x:Class in the WPF Programming Model","pos":[0,36]}]},{"content":"In WPF applications and the WPF application model, <ph id=\"ph1\">`x:Class`</ph> can be declared as an attribute for any element that is the root of a XAML file and is being compiled (where the XAML is included in a WPF application project with <ph id=\"ph2\">`Page`</ph> build action), or for the <ph id=\"ph3\">&lt;xref:System.Windows.Application&gt;</ph> root in the application definition of a compiled WPF application.","pos":[4930,5287],"source":"In WPF applications and the WPF application model, `x:Class` can be declared as an attribute for any element that is the root of a XAML file and is being compiled (where the XAML is included in a WPF application project with `Page` build action), or for the <xref:System.Windows.Application> root in the application definition of a compiled WPF application."},{"content":"Declaring <ph id=\"ph1\">`x:Class`</ph> on an element other than a page root or application root, or on a WPF XAML file that is not compiled, causes a compile-time error under the <ph id=\"ph2\">[!INCLUDE[net_v30_short](../../../includes/net-v30-short-md.md)]</ph> and <ph id=\"ph3\">[!INCLUDE[net_v35_short](../../../includes/net-v35-short-md.md)]</ph> WPF XAML compiler.","pos":[5288,5600],"source":" Declaring `x:Class` on an element other than a page root or application root, or on a WPF XAML file that is not compiled, causes a compile-time error under the [!INCLUDE[net_v30_short](../../../includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](../../../includes/net-v35-short-md.md)] WPF XAML compiler."},{"content":"For information about other aspects of <ph id=\"ph1\">`x:Class`</ph> handling in WPF, see <bpt id=\"p1\">[</bpt>Code-Behind and XAML in WPF<ept id=\"p1\">](../wpf/advanced/code-behind-and-xaml-in-wpf.md)</ept>.","pos":[5601,5749],"source":" For information about other aspects of `x:Class` handling in WPF, see [Code-Behind and XAML in WPF](../wpf/advanced/code-behind-and-xaml-in-wpf.md)."},{"pos":[5758,5797],"content":"x:Class for Windows Workflow Foundation","linkify":"x:Class for Windows Workflow Foundation","nodes":[{"content":"x:Class for Windows Workflow Foundation","pos":[0,39]}]},{"pos":[5801,5995],"content":"For Windows Workflow Foundation, <ph id=\"ph1\">`x:Class`</ph> names the class of a custom activity composed entirely in XAML, or names the partial class of the XAML page for  an activity designer with code-behind.","source":"For Windows Workflow Foundation, `x:Class` names the class of a custom activity composed entirely in XAML, or names the partial class of the XAML page for  an activity designer with code-behind."},{"pos":[6004,6027],"content":"Silverlight Usage Notes","linkify":"Silverlight Usage Notes","nodes":[{"content":"Silverlight Usage Notes","pos":[0,23]}]},{"content":"<ph id=\"ph1\">`x:Class`</ph> for Silverlight is documented separately.","pos":[6031,6082],"source":"`x:Class` for Silverlight is documented separately."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XAML Namespace (x:) Language Features (Silverlight)<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=199081)</ept>.","pos":[6083,6211],"source":" For more information, see [XAML Namespace (x:) Language Features (Silverlight)](https://go.microsoft.com/fwlink/?LinkId=199081)."},{"pos":[6220,6228],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6232,6279],"content":"<bpt id=\"p1\">[</bpt>x:Subclass Directive<ept id=\"p1\">](x-subclass-directive.md)</ept>","source":"[x:Subclass Directive](x-subclass-directive.md)"},{"pos":[6282,6367],"content":"<bpt id=\"p1\">[</bpt>XAML and Custom Classes for WPF<ept id=\"p1\">](../wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept>","source":"[XAML and Custom Classes for WPF](../wpf/advanced/xaml-and-custom-classes-for-wpf.md)"},{"pos":[6370,6427],"content":"<bpt id=\"p1\">[</bpt>x:ClassModifier Directive<ept id=\"p1\">](x-classmodifier-directive.md)</ept>","source":"[x:ClassModifier Directive](x-classmodifier-directive.md)"},{"pos":[6430,6513],"content":"<bpt id=\"p1\">[</bpt>Types Migrated from WPF to System.Xaml<ept id=\"p1\">](types-migrated-from-wpf-to-system-xaml.md)</ept>","source":"[Types Migrated from WPF to System.Xaml](types-migrated-from-wpf-to-system-xaml.md)"}]}