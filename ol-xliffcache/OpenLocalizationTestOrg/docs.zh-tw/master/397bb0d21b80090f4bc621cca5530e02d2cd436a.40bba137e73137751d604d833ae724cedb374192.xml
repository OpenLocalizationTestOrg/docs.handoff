{"content":"---\ntitle: \"ICorDebugProcess::WriteMemory Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorDebugProcess.WriteMemory\"\napi_location: \n  - \"mscordbi.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorDebugProcess::WriteMemory\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorDebugProcess::WriteMemory method [.NET Framework debugging]\"\n  - \"WriteMemory method [.NET Framework debugging]\"\nms.assetid: d5c07d86-045d-4391-893b-0bcd2959f90e\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 11\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# ICorDebugProcess::WriteMemory Method\nWrites data to an area of memory in this process.  \n  \n## Syntax  \n  \n```  \nHRESULT WriteMemory(  \n    [in]  CORDB_ADDRESS address,  \n    [in]  DWORD size,  \n    [in, size_is(size)] BYTE buffer[],  \n    [out] SIZE_T *written);  \n```  \n  \n#### Parameters  \n `address`  \n [in] A `CORDB_ADDRESS` value that is the base address of the memory area to which data is written. Before data transfer occurs, the system verifies that the memory area of the specified size, beginning at the base address, is accessible for writing. If it is not accessible, the method fails.  \n  \n `size`  \n [in] The number of bytes to be written to the memory area.  \n  \n `buffer`  \n [in] A buffer that contains data to be written.  \n  \n `written`  \n [out] A pointer to a variable that receives the number of bytes written to the memory area in this process. If `written` is NULL, this parameter is ignored.  \n  \n## Remarks  \n Data is automatically written behind any breakpoints. In the .NET Framework version 2.0, native debuggers should not use this method to inject breakpoints into the instruction stream. Use [ICorDebugProcess2::SetUnmanagedBreakpoint](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess2-setunmanagedbreakpoint-method.md) instead.  \n  \n The `WriteMemory` method should be used only outside of managed code. This method can corrupt the runtime if used improperly.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorDebug.idl, CorDebug.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]","nodes":[{"pos":[12,65],"content":"ICorDebugProcess::WriteMemory Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ICorDebugProcess::WriteMemory Method | Microsoft Docs","pos":[0,53]}]},{"pos":[714,750],"content":"ICorDebugProcess::WriteMemory Method","linkify":"ICorDebugProcess::WriteMemory Method","nodes":[{"content":"ICorDebugProcess::WriteMemory Method","pos":[0,36]}]},{"content":"Writes data to an area of memory in this process.","pos":[751,800]},{"pos":[809,815],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[994,1004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A <ph id=\"ph1\">`CORDB_ADDRESS`</ph> value that is the base address of the memory area to which data is written.","pos":[1021,1119],"source":" [in] A `CORDB_ADDRESS` value that is the base address of the memory area to which data is written."},{"content":"Before data transfer occurs, the system verifies that the memory area of the specified size, beginning at the base address, is accessible for writing.","pos":[1120,1270]},{"content":"If it is not accessible, the method fails.","pos":[1271,1313]},{"content":"[in] The number of bytes to be written to the memory area.","pos":[1330,1388]},{"content":"[in] A buffer that contains data to be written.","pos":[1407,1454]},{"content":"[out] A pointer to a variable that receives the number of bytes written to the memory area in this process.","pos":[1474,1581]},{"content":"If <ph id=\"ph1\">`written`</ph> is NULL, this parameter is ignored.","pos":[1582,1630],"source":" If `written` is NULL, this parameter is ignored."},{"pos":[1639,1646],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Data is automatically written behind any breakpoints.","pos":[1650,1703]},{"content":"In the .NET Framework version 2.0, native debuggers should not use this method to inject breakpoints into the instruction stream.","pos":[1704,1833]},{"content":"Use <bpt id=\"p1\">[</bpt>ICorDebugProcess2::SetUnmanagedBreakpoint<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess2-setunmanagedbreakpoint-method.md)</ept> instead.","pos":[1834,1993],"source":" Use [ICorDebugProcess2::SetUnmanagedBreakpoint](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess2-setunmanagedbreakpoint-method.md) instead."},{"content":"The <ph id=\"ph1\">`WriteMemory`</ph> method should be used only outside of managed code.","pos":[2000,2069],"source":"The `WriteMemory` method should be used only outside of managed code."},{"content":"This method can corrupt the runtime if used improperly.","pos":[2070,2125]},{"pos":[2134,2146],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2150,2254],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2261,2297],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorDebug.idl, CorDebug.h","source":"**Header:** CorDebug.idl, CorDebug.h"},{"pos":[2304,2329],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2336,2444],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"}]}