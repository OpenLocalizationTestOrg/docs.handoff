{"content":"---\ntitle: \"How to: Pass Procedures to Another Procedure in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"AddressOf operator [Visual Basic]\"\n  - \"delegates [Visual Basic], passing procedures\"\nms.assetid: 5adbba15-5a1d-413f-ab3e-3ff6cc0a4669\n---\n# How to: Pass Procedures to Another Procedure in Visual Basic\nThis example shows how to use delegates to pass a procedure to another procedure.  \n  \n A delegate is a type that you can use like any other type in Visual Basic. The `AddressOf` operator returns a delegate object when applied to a procedure name.  \n  \n This example has a procedure with a delegate parameter that can take a reference to another procedure, obtained with the `AddressOf` operator.  \n  \n### Create the delegate and matching procedures  \n  \n1.  Create a delegate named `MathOperator`.  \n  \n     [!code-vb[VbVbalrDelegates#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDelegates/VB/Class1.vb#1)]  \n  \n2.  Create a procedure named `AddNumbers` with parameters and return value that match those of `MathOperator`, so that the signatures match.  \n  \n     [!code-vb[VbVbalrDelegates#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDelegates/VB/Class1.vb#2)]  \n  \n3.  Create a procedure named `SubtractNumbers` with a signature that matches `MathOperator`.  \n  \n     [!code-vb[VbVbalrDelegates#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDelegates/VB/Class1.vb#3)]  \n  \n4.  Create a procedure named `DelegateTest` that takes a delegate as a parameter.  \n  \n     This procedure can accept a reference to `AddNumbers` or `SubtractNumbers`, because their signatures match the `MathOperator` signature.  \n  \n     [!code-vb[VbVbalrDelegates#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDelegates/VB/Class1.vb#4)]  \n  \n5.  Create a procedure named `Test` that calls `DelegateTest` once with the delegate for `AddNumbers` as a parameter, and again with the delegate for `SubtractNumbers` as a parameter.  \n  \n     [!code-vb[VbVbalrDelegates#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDelegates/VB/Class1.vb#5)]  \n  \n     When `Test` is called, it first displays the result of `AddNumbers` acting on `5` and `3`, which is 8. Then the result of `SubtractNumbers` acting on `9` and `3` is displayed, which is 6.  \n  \n## See also\n\n- [Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md)\n- [AddressOf Operator](../../../../visual-basic/language-reference/operators/addressof-operator.md)\n- [Delegate Statement](../../../../visual-basic/language-reference/statements/delegate-statement.md)\n- [How to: Invoke a Delegate Method](../../../../visual-basic/programming-guide/language-features/delegates/how-to-invoke-a-delegate-method.md)\n","nodes":[{"pos":[4,255],"embed":true,"restype":"x-metadata","content":"title: \"How to: Pass Procedures to Another Procedure in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"AddressOf operator [Visual Basic]\"\n  - \"delegates [Visual Basic], passing procedures\"\nms.assetid: 5adbba15-5a1d-413f-ab3e-3ff6cc0a4669","nodes":[{"content":"How to: Pass Procedures to Another Procedure in Visual Basic","nodes":[{"pos":[0,60],"content":"How to: Pass Procedures to Another Procedure in Visual Basic","nodes":[{"content":"How to: Pass Procedures to Another Procedure in Visual Basic","pos":[0,60]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[262,322],"content":"How to: Pass Procedures to Another Procedure in Visual Basic","linkify":"How to: Pass Procedures to Another Procedure in Visual Basic","nodes":[{"content":"How to: Pass Procedures to Another Procedure in Visual Basic","pos":[0,60]}]},{"content":"This example shows how to use delegates to pass a procedure to another procedure.","pos":[323,404]},{"content":"A delegate is a type that you can use like any other type in Visual Basic.","pos":[411,485]},{"content":"The <ph id=\"ph1\">`AddressOf`</ph> operator returns a delegate object when applied to a procedure name.","pos":[486,570],"source":" The `AddressOf` operator returns a delegate object when applied to a procedure name."},{"pos":[577,719],"content":"This example has a procedure with a delegate parameter that can take a reference to another procedure, obtained with the <ph id=\"ph1\">`AddressOf`</ph> operator.","source":"This example has a procedure with a delegate parameter that can take a reference to another procedure, obtained with the `AddressOf` operator."},{"pos":[729,772],"content":"Create the delegate and matching procedures","linkify":"Create the delegate and matching procedures","nodes":[{"content":"Create the delegate and matching procedures","pos":[0,43]}]},{"pos":[782,821],"content":"Create a delegate named <ph id=\"ph1\">`MathOperator`</ph>.","source":"Create a delegate named `MathOperator`."},{"pos":[957,1093],"content":"Create a procedure named <ph id=\"ph1\">`AddNumbers`</ph> with parameters and return value that match those of <ph id=\"ph2\">`MathOperator`</ph>, so that the signatures match.","source":"Create a procedure named `AddNumbers` with parameters and return value that match those of `MathOperator`, so that the signatures match."},{"pos":[1229,1317],"content":"Create a procedure named <ph id=\"ph1\">`SubtractNumbers`</ph> with a signature that matches <ph id=\"ph2\">`MathOperator`</ph>.","source":"Create a procedure named `SubtractNumbers` with a signature that matches `MathOperator`."},{"pos":[1453,1530],"content":"Create a procedure named <ph id=\"ph1\">`DelegateTest`</ph> that takes a delegate as a parameter.","source":"Create a procedure named `DelegateTest` that takes a delegate as a parameter."},{"pos":[1541,1677],"content":"This procedure can accept a reference to <ph id=\"ph1\">`AddNumbers`</ph> or <ph id=\"ph2\">`SubtractNumbers`</ph>, because their signatures match the <ph id=\"ph3\">`MathOperator`</ph> signature.","source":"This procedure can accept a reference to `AddNumbers` or `SubtractNumbers`, because their signatures match the `MathOperator` signature."},{"pos":[1813,1992],"content":"Create a procedure named <ph id=\"ph1\">`Test`</ph> that calls <ph id=\"ph2\">`DelegateTest`</ph> once with the delegate for <ph id=\"ph3\">`AddNumbers`</ph> as a parameter, and again with the delegate for <ph id=\"ph4\">`SubtractNumbers`</ph> as a parameter.","source":"Create a procedure named `Test` that calls `DelegateTest` once with the delegate for `AddNumbers` as a parameter, and again with the delegate for `SubtractNumbers` as a parameter."},{"content":"When <ph id=\"ph1\">`Test`</ph> is called, it first displays the result of <ph id=\"ph2\">`AddNumbers`</ph> acting on <ph id=\"ph3\">`5`</ph> and <ph id=\"ph4\">`3`</ph>, which is 8.","pos":[2129,2231],"source":"When `Test` is called, it first displays the result of `AddNumbers` acting on `5` and `3`, which is 8."},{"content":"Then the result of <ph id=\"ph1\">`SubtractNumbers`</ph> acting on <ph id=\"ph2\">`9`</ph> and <ph id=\"ph3\">`3`</ph> is displayed, which is 6.","pos":[2232,2316],"source":" Then the result of `SubtractNumbers` acting on `9` and `3` is displayed, which is 6."},{"pos":[2325,2333],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2337,2429],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept>","source":"[Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md)"},{"pos":[2432,2529],"content":"<bpt id=\"p1\">[</bpt>AddressOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/addressof-operator.md)</ept>","source":"[AddressOf Operator](../../../../visual-basic/language-reference/operators/addressof-operator.md)"},{"pos":[2532,2630],"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>","source":"[Delegate Statement](../../../../visual-basic/language-reference/statements/delegate-statement.md)"},{"pos":[2633,2774],"content":"<bpt id=\"p1\">[</bpt>How to: Invoke a Delegate Method<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/how-to-invoke-a-delegate-method.md)</ept>","source":"[How to: Invoke a Delegate Method](../../../../visual-basic/programming-guide/language-features/delegates/how-to-invoke-a-delegate-method.md)"}]}