{"content":"---\ntitle: \"While...End While Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.While\"\n  - \"vb.While...EndWhile\"\nhelpviewer_keywords: \n  - \"While statement [Visual Basic], While...End While\"\n  - \"While statement [Visual Basic]\"\n  - \"While...End While statements [Visual Basic]\"\nms.assetid: b931d1ce-e8ed-44d8-a13d-92a4f5458a1e\n---\n# While...End While Statement (Visual Basic)\nRuns a series of statements as long as a given condition is `True`.  \n  \n## Syntax  \n  \n```  \nWhile condition  \n    [ statements ]  \n    [ Continue While ]  \n    [ statements ]  \n    [ Exit While ]  \n    [ statements ]  \nEnd While  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`condition`|Required. `Boolean` expression. If `condition` is `Nothing`, Visual Basic treats it as `False`.|  \n|`statements`|Optional. One or more statements following `While`, which run every time `condition` is `True`.|  \n|`Continue While`|Optional. Transfers control to the next iteration of the `While` block.|  \n|`Exit While`|Optional. Transfers control out of the `While` block.|  \n|`End While`|Required. Terminates the definition of the `While` block.|  \n  \n## Remarks  \n Use a `While...End While` structure when you want to repeat a set of statements an indefinite number of times, as long as a condition remains `True`. If you want more flexibility with where you test the condition or what result you test it for, you might prefer the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md). If you want to repeat the statements a set number of times, the [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) is usually a better choice.  \n  \n> [!NOTE]\n>  The `While` keyword is also used in the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md), the [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md) and the [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md).  \n  \n If `condition` is `True`, all of the `statements` run until the `End While` statement is encountered. Control then returns to the `While` statement, and `condition` is again checked. If `condition` is still `True`, the process is repeated. If it’s `False`, control passes to the statement that follows the `End While` statement.  \n  \n The `While` statement always checks the condition before it starts the loop. Looping continues while the condition remains `True`. If `condition` is `False` when you first enter the loop, it doesn’t run even once.  \n  \n The `condition` usually results from a comparison of two values, but it can be any expression that evaluates to a [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md) value (`True` or `False`). This expression can include a value of another data type, such as a numeric type, that has been converted to `Boolean`.  \n  \n You can nest `While` loops by placing one loop within another. You can also nest different kinds of control structures within one another. For more information, see [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md).  \n  \n## Exit While  \n The [Exit While](../../../visual-basic/language-reference/statements/exit-statement.md) statement can provide another way to exit a `While` loop. `Exit While` immediately transfers control to the statement that follows the `End While` statement.  \n  \n You typically use `Exit While` after some condition is evaluated (for example, in an `If...Then...Else` structure). You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request. You can use `Exit While` when you test for a condition that could cause an *endless loop*, which is a loop that could run an extremely large or even infinite number of times. You can then use `Exit While` to escape the loop.  \n  \n You can place any number of `Exit While` statements anywhere in the `While` loop.  \n  \n When used within nested `While` loops, `Exit While` transfers control out of the innermost loop and into the next higher level of nesting.  \n  \n The `Continue While` statement immediately transfers control to the next iteration of the loop. For more information, see [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md).  \n  \n## Example  \n In the following example, the statements in the loop continue to run until the `index` variable is greater than 10.  \n  \n [!code-vb[VbVbalrStatements#171](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class14.vb#171)]  \n  \n## Example  \n The following example illustrates the use of the `Continue While` and `Exit While` statements.  \n  \n [!code-vb[VbVbalrStatements#172](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class14.vb#172)]  \n  \n## Example  \n The following example reads all lines in a text file. The <xref:System.IO.File.OpenText%2A> method opens the file and returns a <xref:System.IO.StreamReader> that reads the characters. In the `While` condition, the <xref:System.IO.StreamReader.Peek%2A> method of the `StreamReader` determines whether the file contains additional characters.  \n  \n [!code-vb[VbVbalrStatements#173](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class14.vb#173)]  \n  \n## See also\n\n- [Loop Structures](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)\n- [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)\n- [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)\n- [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)\n- [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)\n- [Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)\n- [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)\n","nodes":[{"pos":[4,344],"embed":true,"restype":"x-metadata","content":"title: \"While...End While Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.While\"\n  - \"vb.While...EndWhile\"\nhelpviewer_keywords: \n  - \"While statement [Visual Basic], While...End While\"\n  - \"While statement [Visual Basic]\"\n  - \"While...End While statements [Visual Basic]\"\nms.assetid: b931d1ce-e8ed-44d8-a13d-92a4f5458a1e","nodes":[{"content":"While...End While Statement (Visual Basic)","nodes":[{"pos":[0,42],"content":"While...End While Statement (Visual Basic)","nodes":[{"content":"While...End While Statement (Visual Basic)","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[351,393],"content":"While...End While Statement (Visual Basic)","linkify":"While...End While Statement (Visual Basic)","nodes":[{"content":"While...End While Statement (Visual Basic)","pos":[0,42]}]},{"pos":[394,461],"content":"Runs a series of statements as long as a given condition is <ph id=\"ph1\">`True`</ph>.","source":"Runs a series of statements as long as a given condition is `True`."},{"pos":[470,476],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[639,644],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[651,655]},{"content":"Definition","pos":[656,666]},{"content":"Required.","pos":[695,704]},{"content":"<ph id=\"ph1\">`Boolean`</ph> expression.","pos":[705,726],"source":"`Boolean` expression."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`Nothing`</ph>, Visual Basic treats it as <ph id=\"ph3\">`False`</ph>.","pos":[727,790],"source":" If `condition` is `Nothing`, Visual Basic treats it as `False`."},{"content":"Optional.","pos":[808,817]},{"content":"One or more statements following <ph id=\"ph1\">`While`</ph>, which run every time <ph id=\"ph2\">`condition`</ph> is <ph id=\"ph3\">`True`</ph>.","pos":[818,903],"source":" One or more statements following `While`, which run every time `condition` is `True`."},{"content":"Optional.","pos":[925,934]},{"content":"Transfers control to the next iteration of the <ph id=\"ph1\">`While`</ph> block.","pos":[935,996],"source":" Transfers control to the next iteration of the `While` block."},{"content":"Optional.","pos":[1014,1023]},{"content":"Transfers control out of the <ph id=\"ph1\">`While`</ph> block.","pos":[1024,1067],"source":" Transfers control out of the `While` block."},{"content":"Required.","pos":[1084,1093]},{"content":"Terminates the definition of the <ph id=\"ph1\">`While`</ph> block.","pos":[1094,1141],"source":" Terminates the definition of the `While` block."},{"pos":[1151,1158],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use a <ph id=\"ph1\">`While...End While`</ph> structure when you want to repeat a set of statements an indefinite number of times, as long as a condition remains <ph id=\"ph2\">`True`</ph>.","pos":[1162,1311],"source":"Use a `While...End While` structure when you want to repeat a set of statements an indefinite number of times, as long as a condition remains `True`."},{"content":"If you want more flexibility with where you test the condition or what result you test it for, you might prefer the <bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>.","pos":[1312,1524],"source":" If you want more flexibility with where you test the condition or what result you test it for, you might prefer the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)."},{"content":"If you want to repeat the statements a set number of times, the <bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> is usually a better choice.","pos":[1525,1714],"source":" If you want to repeat the statements a set number of times, the [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) is usually a better choice."},{"pos":[1722,2064],"content":"[!NOTE]\n The `While` keyword is also used in the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md), the [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md) and the [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md).","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`While`</ph> keyword is also used in the <bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>, the <bpt id=\"p2\">[</bpt>Skip While Clause<ept id=\"p2\">](../../../visual-basic/language-reference/queries/skip-while-clause.md)</ept> and the <bpt id=\"p3\">[</bpt>Take While Clause<ept id=\"p3\">](../../../visual-basic/language-reference/queries/take-while-clause.md)</ept>.","pos":[9,340],"source":"The `While` keyword is also used in the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md), the [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md) and the [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md)."}]},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`True`</ph>, all of the <ph id=\"ph3\">`statements`</ph> run until the <ph id=\"ph4\">`End While`</ph> statement is encountered.","pos":[2071,2172],"source":"If `condition` is `True`, all of the `statements` run until the `End While` statement is encountered."},{"content":"Control then returns to the <ph id=\"ph1\">`While`</ph> statement, and <ph id=\"ph2\">`condition`</ph> is again checked.","pos":[2173,2253],"source":" Control then returns to the `While` statement, and `condition` is again checked."},{"content":"If <ph id=\"ph1\">`condition`</ph> is still <ph id=\"ph2\">`True`</ph>, the process is repeated.","pos":[2254,2310],"source":" If `condition` is still `True`, the process is repeated."},{"content":"If it’s <ph id=\"ph1\">`False`</ph>, control passes to the statement that follows the <ph id=\"ph2\">`End While`</ph> statement.","pos":[2311,2399],"source":" If it’s `False`, control passes to the statement that follows the `End While` statement."},{"content":"The <ph id=\"ph1\">`While`</ph> statement always checks the condition before it starts the loop.","pos":[2406,2482],"source":"The `While` statement always checks the condition before it starts the loop."},{"content":"Looping continues while the condition remains <ph id=\"ph1\">`True`</ph>.","pos":[2483,2536],"source":" Looping continues while the condition remains `True`."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`False`</ph> when you first enter the loop, it doesn’t run even once.","pos":[2537,2619],"source":" If `condition` is `False` when you first enter the loop, it doesn’t run even once."},{"content":"The <ph id=\"ph1\">`condition`</ph> usually results from a comparison of two values, but it can be any expression that evaluates to a <bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> value (<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>).","pos":[2626,2860],"source":"The `condition` usually results from a comparison of two values, but it can be any expression that evaluates to a [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md) value (`True` or `False`)."},{"content":"This expression can include a value of another data type, such as a numeric type, that has been converted to <ph id=\"ph1\">`Boolean`</ph>.","pos":[2861,2980],"source":" This expression can include a value of another data type, such as a numeric type, that has been converted to `Boolean`."},{"content":"You can nest <ph id=\"ph1\">`While`</ph> loops by placing one loop within another.","pos":[2987,3049],"source":"You can nest `While` loops by placing one loop within another."},{"content":"You can also nest different kinds of control structures within one another.","pos":[3050,3125]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.","pos":[3126,3281],"source":" For more information, see [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)."},{"pos":[3290,3300],"content":"Exit While","linkify":"Exit While","nodes":[{"content":"Exit While","pos":[0,10]}]},{"content":"The <bpt id=\"p1\">[</bpt>Exit While<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement can provide another way to exit a <ph id=\"ph1\">`While`</ph> loop.","pos":[3304,3449],"source":"The [Exit While](../../../visual-basic/language-reference/statements/exit-statement.md) statement can provide another way to exit a `While` loop."},{"content":"<ph id=\"ph1\">`Exit While`</ph> immediately transfers control to the statement that follows the <ph id=\"ph2\">`End While`</ph> statement.","pos":[3450,3549],"source":"`Exit While` immediately transfers control to the statement that follows the `End While` statement."},{"content":"You typically use <ph id=\"ph1\">`Exit While`</ph> after some condition is evaluated (for example, in an <ph id=\"ph2\">`If...Then...Else`</ph> structure).","pos":[3556,3671],"source":"You typically use `Exit While` after some condition is evaluated (for example, in an `If...Then...Else` structure)."},{"content":"You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request.","pos":[3672,3843]},{"content":"You can use <ph id=\"ph1\">`Exit While`</ph> when you test for a condition that could cause an <bpt id=\"p1\">*</bpt>endless loop<ept id=\"p1\">*</ept>, which is a loop that could run an extremely large or even infinite number of times.","pos":[3844,4018],"source":" You can use `Exit While` when you test for a condition that could cause an *endless loop*, which is a loop that could run an extremely large or even infinite number of times."},{"content":"You can then use <ph id=\"ph1\">`Exit While`</ph> to escape the loop.","pos":[4019,4068],"source":" You can then use `Exit While` to escape the loop."},{"pos":[4075,4156],"content":"You can place any number of <ph id=\"ph1\">`Exit While`</ph> statements anywhere in the <ph id=\"ph2\">`While`</ph> loop.","source":"You can place any number of `Exit While` statements anywhere in the `While` loop."},{"pos":[4163,4301],"content":"When used within nested <ph id=\"ph1\">`While`</ph> loops, <ph id=\"ph2\">`Exit While`</ph> transfers control out of the innermost loop and into the next higher level of nesting.","source":"When used within nested `While` loops, `Exit While` transfers control out of the innermost loop and into the next higher level of nesting."},{"content":"The <ph id=\"ph1\">`Continue While`</ph> statement immediately transfers control to the next iteration of the loop.","pos":[4308,4403],"source":"The `Continue While` statement immediately transfers control to the next iteration of the loop."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Continue Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>.","pos":[4404,4526],"source":" For more information, see [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)."},{"pos":[4535,4542],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4546,4661],"content":"In the following example, the statements in the loop continue to run until the <ph id=\"ph1\">`index`</ph> variable is greater than 10.","source":"In the following example, the statements in the loop continue to run until the `index` variable is greater than 10."},{"pos":[4799,4806],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4810,4904],"content":"The following example illustrates the use of the <ph id=\"ph1\">`Continue While`</ph> and <ph id=\"ph2\">`Exit While`</ph> statements.","source":"The following example illustrates the use of the `Continue While` and `Exit While` statements."},{"pos":[5042,5049],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example reads all lines in a text file.","pos":[5053,5106]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.File.OpenText%2A&gt;</ph> method opens the file and returns a <ph id=\"ph2\">&lt;xref:System.IO.StreamReader&gt;</ph> that reads the characters.","pos":[5107,5237],"source":" The <xref:System.IO.File.OpenText%2A> method opens the file and returns a <xref:System.IO.StreamReader> that reads the characters."},{"content":"In the <ph id=\"ph1\">`While`</ph> condition, the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.Peek%2A&gt;</ph> method of the <ph id=\"ph3\">`StreamReader`</ph> determines whether the file contains additional characters.","pos":[5238,5394],"source":" In the `While` condition, the <xref:System.IO.StreamReader.Peek%2A> method of the `StreamReader` determines whether the file contains additional characters."},{"pos":[5532,5540],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5544,5652],"content":"<bpt id=\"p1\">[</bpt>Loop Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept>","source":"[Loop Structures](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)"},{"pos":[5655,5750],"content":"<bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>","source":"[Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)"},{"pos":[5753,5850],"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>","source":"[For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)"},{"pos":[5853,5946],"content":"<bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept>","source":"[Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)"},{"pos":[5949,6077],"content":"<bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>","source":"[Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)"},{"pos":[6080,6167],"content":"<bpt id=\"p1\">[</bpt>Exit Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept>","source":"[Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)"},{"pos":[6170,6265],"content":"<bpt id=\"p1\">[</bpt>Continue Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>","source":"[Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)"}]}