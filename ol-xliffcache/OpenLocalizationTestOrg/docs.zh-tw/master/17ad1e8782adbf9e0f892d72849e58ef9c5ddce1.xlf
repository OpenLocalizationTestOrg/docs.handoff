<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="local-functions-vs-lambdas.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17ad1e8782adbf9e0f892d72849e58ef9c5ddce1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\local-functions-vs-lambdas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">379a177186e557c0f2bb86cddda11285def47cd3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75151e9090d5fac2b395e12c1525520efcd106ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Local functions vs. lambda expressions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn why local functions might be a better choice than lambda expressions.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Local functions compared to lambda expressions</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>At first glance, <bpt id="p1">[</bpt>local functions<ept id="p1">](programming-guide/classes-and-structs/local-functions.md)</ept> and <bpt id="p2">[</bpt>lambda expressions<ept id="p2">](./programming-guide/statements-expressions-operators/lambda-expressions.md)</ept> are very similar.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In many cases, the choice between using lambda expressions and local functions is a matter of style and personal preference.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, there are real differences in where you can use one or the other that you should be aware of.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Let's examine the differences between the local function and lambda expression implementations of the factorial algorithm.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>First the version using a local function:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Contrast that implementation with a version that uses lambda expressions:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The local functions have names.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The lambda expressions are anonymous methods that are assigned to variables that are <ph id="ph1">`Func`</ph> or <ph id="ph2">`Action`</ph> types.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you declare a local function, the argument types and return type are part of the function declaration.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Instead of being part of the body of the lambda expression, the argument types and return type are part of the lambda expression's variable type declaration.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Those two differences may result in clearer code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Local functions have different rules for definite assignment than lambda expressions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A local function declaration can be referenced from any code location where it is in scope.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A lambda expression must be assigned to a delegate variable before it can be accessed (or called through the delegate referencing the lambda expression.) Notice that the version using the lambda expression must declare and initialize the lambda expression, <ph id="ph1">`nthFactorial`</ph> before defining it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Not doing so results in a compile time error for referencing <ph id="ph1">`nthFactorial`</ph> before assigning it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These differences mean that recursive algorithms are easier to create using local functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can declare and define a local function that calls itself.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Lambda expressions must be declared, and assigned a default value before they can be re-assigned to a body that references the same lambda expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Definite assignment rules also affect any variables that are captured by the local function or lambda expression.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Both local functions and lambda expression rules demand that any captured variables are definitely assigned at the point when the local function or lambda expression is converted to a delegate.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The difference is that lambda expressions are converted to delegates when they are declared.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Local functions are converted to delegates only when used as a delegate.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you declare a local function and only reference it by calling it like a method, it will not be converted to a delegate.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>That rule enables you to declare a local function at any convenient location in its enclosing scope.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It's common to declare local functions at the end of the parent method, after any return statements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Third, the compiler can perform static analysis that enables local functions to definitely assign captured variables in the enclosing scope.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The compiler can determine that <ph id="ph1">`LocalFunction`</ph> definitely assigns <ph id="ph2">`y`</ph> when called.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`LocalFunction`</ph> is called before the <ph id="ph2">`return`</ph> statement, <ph id="ph3">`y`</ph> is definitely assigned at the <ph id="ph4">`return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The analysis that enables the example analysis enables the fourth difference.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Depending on their use, local functions can avoid heap allocations that are always necessary for lambda expressions.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If a local function is never converted to a delegate, and none of the variables captured by the local function is captured by other lambdas or local functions that are converted to delegates, the compiler can avoid heap allocations.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Consider this async example:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The closure for this lambda expression contains the <ph id="ph1">`address`</ph>, <ph id="ph2">`index`</ph> and <ph id="ph3">`name`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the case of local functions, the object that implements the closure may be a <ph id="ph1">`struct`</ph> type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>That struct type would be passed by reference to the local function.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This difference in implementation would save on an allocation.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The instantiation necessary for lambda expressions means extra memory allocations, which may be a performance factor in time-critical code paths.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Local functions do not incur this overhead.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the example above, the local functions version has 2 fewer allocations than the lambda expression version.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The local function equivalent of this method also uses a class for the closure.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Whether the closure for a local function is implemented as a <ph id="ph1">`class`</ph> or a <ph id="ph2">`struct`</ph> is an implementation detail.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A local function may use a <ph id="ph1">`struct`</ph> whereas a lambda will always use a <ph id="ph2">`class`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>One final advantage not demonstrated in this sample is that local functions can be implemented as iterators, using the <ph id="ph1">`yield return`</ph> syntax to produce a sequence of values.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`yield return`</ph> statement is not allowed in lambda expressions.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>While local functions may seem redundant to lambda expressions, they actually serve different purposes and have different uses.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Local functions are more efficient for the case when you want to write a function that is called only from the context of another method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>