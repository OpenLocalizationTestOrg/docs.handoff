<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd562a2b1dd3e35e84199f52cbf67f50218ff2e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\events\observer-design-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f13eccd7570c4bfc52b94ac53203c0ae000fb9a6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6b3b880ea4b68083604dd2a03f64bab79d9fed1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Observer Design Pattern | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Observer Design Pattern</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The observer design pattern enables a subscriber to register with and receive notifications from a provider.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is suitable for any scenario that requires push-based notification.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The pattern defines a <bpt id="p1">*</bpt>provider<ept id="p1">*</ept> (also known as a <bpt id="p2">*</bpt>subject<ept id="p2">*</ept> or an <bpt id="p3">*</bpt>observable<ept id="p3">*</ept>) and zero, one, or more <bpt id="p4">*</bpt>observers<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Observers register with the provider, and whenever a predefined condition, event, or state change occurs, the provider automatically notifies all observers by calling one of their methods.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In this method call, the provider can also provide current state information to observers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, the observer design pattern is applied by implementing the generic <ph id="ph1">&lt;xref:System.IObservable%601?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.IObserver%601?displayProperty=fullName&gt;</ph> interfaces.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The generic type parameter represents the type that provides notification information.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Applying the Pattern</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The observer design pattern is suitable for distributed push-based notifications, because it supports a clean separation between two different components or application layers, such as a data source (business logic) layer and a user interface (display) layer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The pattern can be implemented whenever a provider uses callbacks to supply its clients with current information.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Implementing the pattern requires that you provide the following:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A provider or subject, which is the object that sends notifications to observers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A provider is a class or structure that implements the <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The provider must implement a single method, <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=fullName&gt;</ph>, which is called by observers that wish to receive notifications from the provider.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An observer, which is an object that receives notifications from a provider.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An observer is a class or structure that implements the <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The observer must implement three methods, all of which are called by the provider:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IObserver%601.OnNext%2A?displayProperty=fullName&gt;</ph>, which supplies the observer with new or current information.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A?displayProperty=fullName&gt;</ph>, which informs the observer that an error has occurred.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=fullName&gt;</ph>, which indicates that the provider has finished sending notifications.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A mechanism that allows the provider to keep track of observers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Typically, the provider uses a container object, such as a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph> object, to hold references to the <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> implementations that have subscribed to notifications.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using a storage container for this purpose enables the provider to handle zero to an unlimited number of observers.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The order in which observers receive notifications is not defined; the provider is free to use any method to determine the order.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> implementation that enables the provider to remove observers when notification is complete.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Observers receive a reference to the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> implementation from the <ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method, so they can also call the <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;</ph> method to unsubscribe before the provider has finished sending notifications.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An object that contains the data that the provider sends to its observers.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type of this object corresponds to the generic type parameter of the <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> and <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> interfaces.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although this object can be the same as the <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> implementation, most commonly it is a separate type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In addition to implementing the observer design pattern, you may be interested in exploring libraries that are built using the <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> and <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> interfaces.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>Reactive Extensions for .NET (Rx)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=186345)</ept> consist of a set of extension methods and LINQ standard sequence operators to support asynchronous programming.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Implementing the Pattern</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example uses the observer design pattern to implement an airport baggage claim information system.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`BaggageInfo`</ph> class provides information about arriving flights and the carousels where baggage from each flight is available for pickup.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesignPattern#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesignpattern/cs/provider.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesignPattern#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesignpattern/vb/provider.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`BaggageHandler`</ph> class is responsible for receiving information about arriving flights and baggage claim carousels.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Internally, it maintains two collections:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`observers`</ph> - A collection of clients that will receive updated information.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`flights`</ph> - A collection of flights and their assigned carousels.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Both collections are represented by generic <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objects that are instantiated in the <ph id="ph2">`BaggageHandler`</ph> class constructor.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The source code for the <ph id="ph1">`BaggageHandler`</ph> class is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesignPattern#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesignpattern/cs/provider.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesignPattern#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesignpattern/vb/provider.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Clients that wish to receive updated information call the <ph id="ph1">`BaggageHandler.Subscribe`</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the client has not previously subscribed to notifications, a reference to the client's <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> implementation is added to the <ph id="ph2">`observers`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The overloaded <ph id="ph1">`BaggageHandler.BaggageStatus`</ph> method can be called to indicate that baggage from a flight either is being unloaded or is no longer being unloaded.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the first case, the method is passed a flight number, the airport from which the flight originated, and the carousel where baggage is being unloaded.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the second case, the method is passed only a flight number.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For baggage that is being unloaded, the method checks whether the <ph id="ph1">`BaggageInfo`</ph> information passed to the method exists in the <ph id="ph2">`flights`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If it does not, the method adds the information and calls each observer's <ph id="ph1">`OnNext`</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For flights whose baggage is no longer being unloaded, the method checks whether information on that flight is stored in the <ph id="ph1">`flights`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If it is, the method calls each observer's <ph id="ph1">`OnNext`</ph> method and removes the <ph id="ph2">`BaggageInfo`</ph> object from the <ph id="ph3">`flights`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the last flight of the day has landed and its baggage has been processed, the <ph id="ph1">`BaggageHandler.LastBaggageClaimed`</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This method calls each observer's <ph id="ph1">`OnCompleted`</ph> method to indicate that all notifications have completed, and then clears the <ph id="ph2">`observers`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The provider's <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> implementation that enables observers to stop receiving notifications before the <ph id="ph3">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The source code for this <ph id="ph1">`Unsubscriber(Of BaggageInfo)`</ph> class is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When the class is instantiated in the <ph id="ph1">`BaggageHandler.Subscribe`</ph> method, it is passed a reference to the <ph id="ph2">`observers`</ph> collection and a reference to the observer that is added to the collection.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>These references are assigned to local variables.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When the object's <ph id="ph1">`Dispose`</ph> method is called, it checks whether the observer still exists in the <ph id="ph2">`observers`</ph> collection, and, if it does, removes the observer.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesignPattern#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesignpattern/cs/provider.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesignPattern#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesignpattern/vb/provider.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example provides an <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> implementation named <ph id="ph2">`ArrivalsMonitor`</ph>, which is a base class that displays baggage claim information.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The information is displayed alphabetically, by the name of the originating city.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The methods of <ph id="ph1">`ArrivalsMonitor`</ph> are marked as <ph id="ph2">`overridable`</ph> (in Visual Basic) or <ph id="ph3">`virtual`</ph> (in C#), so they can all be overridden by a derived class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesignPattern#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesignpattern/cs/observer.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesignPattern#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesignpattern/vb/observer.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ArrivalsMonitor`</ph> class includes the <ph id="ph2">`Subscribe`</ph> and <ph id="ph3">`Unsubscribe`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Subscribe`</ph> method enables the class to save the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> implementation returned by the call to <ph id="ph3">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> to a private variable.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Unsubscribe`</ph> method enables the class to unsubscribe from notifications by calling the provider's <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ArrivalsMonitor`</ph> also provides implementations of the <ph id="ph2">&lt;xref:System.IObserver%601.OnNext%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Only the <ph id="ph1">&lt;xref:System.IObserver%601.OnNext%2A&gt;</ph> implementation contains a significant amount of code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The method works with a private, sorted, generic <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object that maintains information about the airports of origin for arriving flights and the carousels on which their baggage is available.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`BaggageHandler`</ph> class reports a new flight arrival, the <ph id="ph2">&lt;xref:System.IObserver%601.OnNext%2A&gt;</ph> method implementation adds information about that flight to the list.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`BaggageHandler`</ph> class reports that the flight's baggage has been unloaded, the <ph id="ph2">&lt;xref:System.IObserver%601.OnNext%2A&gt;</ph> method removes that flight from the list.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Whenever a change is made, the list is sorted and displayed to the console.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following example contains the application entry point that instantiates the <ph id="ph1">`BaggageHandler`</ph> class as well as two instances of the <ph id="ph2">`ArrivalsMonitor`</ph> class, and uses the <ph id="ph3">`BaggageHandler.BaggageStatus`</ph> method to add and remove information about arriving flights.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In each case, the observers receive updates and correctly display baggage claim information.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.ObserverDesignPattern#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesignpattern/cs/program.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.ObserverDesignPattern#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesignpattern/vb/module1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Observer Design Pattern Best Practices<ept id="p1">](../../../docs/standard/events/observer-design-pattern-best-practices.md)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Describes best practices to adopt when developing applications that implement the observer design pattern.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement a Provider<ept id="p1">](../../../docs/standard/events/how-to-implement-a-provider.md)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Provides a step-by-step implementation of a provider for a temperature monitoring application.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement an Observer<ept id="p1">](../../../docs/standard/events/how-to-implement-an-observer.md)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Provides a step-by-step implementation of an observer for a temperature monitoring application.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>