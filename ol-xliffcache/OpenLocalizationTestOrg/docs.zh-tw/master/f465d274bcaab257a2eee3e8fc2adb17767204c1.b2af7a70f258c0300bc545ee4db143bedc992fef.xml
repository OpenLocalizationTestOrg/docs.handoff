{"content":"---\ntitle: \"Functional Transformation of XML (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 0ccb9251-38d7-44e3-9b84-1b5fe25e4b59\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# Functional Transformation of XML (C#)\nThis topic discusses the pure functional transformation approach to modifying XML documents, and contrasts it with a procedural approach.  \n  \n## Modifying an XML Document  \n One of the most common tasks for an XML programmer is transforming XML from one shape to another. The shape of an XML document is the structure of the document, which includes the following:  \n  \n-   The hierarchy expressed by the document.  \n  \n-   The element and attribute names.  \n  \n-   The data types of the elements and attributes.  \n  \n In general, the most effective approach to transforming XML from one shape to another is that of pure functional transformation. In this approach, the primary programmer task is to create a transformation which is applied to the entire XML document (or to one or more strictly defined nodes). Functional transformation is arguably the easiest to code (after a programmer is familiar with the approach), yields the most maintainable code, and is often more compact than alternative approaches.  \n  \n### XML Functional Transformational Technologies  \n Microsoft offers two functional transformation technologies for use on XML documents: XSLT and LINQ to XML. XSLT is supported in the <xref:System.Xml.Xsl> managed namespace and in the native COM implementation of MSXML. Although XSLT is a robust technology for manipulating XML documents, it requires expertise in a specialized domain, namely the XSLT language and its supporting APIs.  \n  \n LINQ to XML provides the tools necessary to code pure functional transformations in an expressive and powerful way, within C# or Visual Basic code. For example, many of the examples in the LINQ to XML documentation use a pure functional approach. Also, in the [Tutorial: Manipulating Content in a WordprocessingML Document (C#)](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md) tutorial, we use LINQ to XML in a functional approach to manipulate information in a Microsoft Word document.  \n  \n For a more complete comparison of LINQ to XML with other Microsoft XML technologies, see [LINQ to XML vs. Other XML Technologies](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-vs-other-xml-technologies.md).  \n  \n XSLT is the recommended tool for  document-centric transformations when the source document has an irregular structure. However, LINQ to XML can also perform document-centric transforms. For more information, see [How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-use-annotations-to-transform-linq-to-xml-trees-in-an-xslt-style.md).  \n  \n## See Also  \n [Introduction to Pure Functional Transformations (C#)](../../../../csharp/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)   \n [Tutorial: Manipulating Content in a WordprocessingML Document (C#)](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)   \n [LINQ to XML vs. Other XML Technologies](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-vs-other-xml-technologies.md)","nodes":[{"pos":[4,344],"nodes":[{"content":"Functional Transformation of XML (C#) | Microsoft Docs","nodes":[{"pos":[0,54],"content":"Functional Transformation of XML (C#) | Microsoft Docs","nodes":[{"content":"Functional Transformation of XML (C#) | Microsoft Docs","pos":[0,54]}]}],"pos":[6,63],"yaml":true}],"content":"title: \"Functional Transformation of XML (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 0ccb9251-38d7-44e3-9b84-1b5fe25e4b59\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n","yamlblock":true},{"pos":[351,388],"content":"Functional Transformation of XML (C#)","linkify":"Functional Transformation of XML (C#)","nodes":[{"content":"Functional Transformation of XML (C#)","pos":[0,37]}]},{"content":"This topic discusses the pure functional transformation approach to modifying XML documents, and contrasts it with a procedural approach.","pos":[389,526]},{"pos":[535,560],"content":"Modifying an XML Document","linkify":"Modifying an XML Document","nodes":[{"content":"Modifying an XML Document","pos":[0,25]}]},{"content":"One of the most common tasks for an XML programmer is transforming XML from one shape to another.","pos":[564,661]},{"content":"The shape of an XML document is the structure of the document, which includes the following:","pos":[662,754]},{"content":"The hierarchy expressed by the document.","pos":[764,804]},{"content":"The element and attribute names.","pos":[814,846]},{"content":"The data types of the elements and attributes.","pos":[856,902]},{"content":"In general, the most effective approach to transforming XML from one shape to another is that of pure functional transformation.","pos":[909,1037]},{"content":"In this approach, the primary programmer task is to create a transformation which is applied to the entire XML document (or to one or more strictly defined nodes).","pos":[1038,1201]},{"content":"Functional transformation is arguably the easiest to code (after a programmer is familiar with the approach), yields the most maintainable code, and is often more compact than alternative approaches.","pos":[1202,1401]},{"pos":[1411,1455],"content":"XML Functional Transformational Technologies","linkify":"XML Functional Transformational Technologies","nodes":[{"content":"XML Functional Transformational Technologies","pos":[0,44]}]},{"content":"Microsoft offers two functional transformation technologies for use on XML documents: XSLT and LINQ to XML.","pos":[1459,1566]},{"content":"XSLT is supported in the <ph id=\"ph1\">&lt;xref:System.Xml.Xsl&gt;</ph> managed namespace and in the native COM implementation of MSXML.","pos":[1567,1678],"source":" XSLT is supported in the <xref:System.Xml.Xsl> managed namespace and in the native COM implementation of MSXML."},{"content":"Although XSLT is a robust technology for manipulating XML documents, it requires expertise in a specialized domain, namely the XSLT language and its supporting APIs.","pos":[1679,1844]},{"content":"LINQ to XML provides the tools necessary to code pure functional transformations in an expressive and powerful way, within C# or Visual Basic code.","pos":[1851,1998]},{"content":"For example, many of the examples in the LINQ to XML documentation use a pure functional approach.","pos":[1999,2097]},{"content":"Also, in the <bpt id=\"p1\">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept> tutorial, we use LINQ to XML in a functional approach to manipulate information in a Microsoft Word document.","pos":[2098,2405],"source":" Also, in the [Tutorial: Manipulating Content in a WordprocessingML Document (C#)](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md) tutorial, we use LINQ to XML in a functional approach to manipulate information in a Microsoft Word document."},{"pos":[2412,2635],"content":"For a more complete comparison of LINQ to XML with other Microsoft XML technologies, see <bpt id=\"p1\">[</bpt>LINQ to XML vs. Other XML Technologies<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-vs-other-xml-technologies.md)</ept>.","source":"For a more complete comparison of LINQ to XML with other Microsoft XML technologies, see [LINQ to XML vs. Other XML Technologies](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-vs-other-xml-technologies.md)."},{"content":"XSLT is the recommended tool for  document-centric transformations when the source document has an irregular structure.","pos":[2642,2761]},{"content":"However, LINQ to XML can also perform document-centric transforms.","pos":[2762,2828]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-use-annotations-to-transform-linq-to-xml-trees-in-an-xslt-style.md)</ept>.","pos":[2829,3060],"source":" For more information, see [How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-use-annotations-to-transform-linq-to-xml-trees-in-an-xslt-style.md)."},{"pos":[3069,3077],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Introduction to Pure Functional Transformations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id=\"ph1\"> </ph>","pos":[3081,3239],"source":"[Introduction to Pure Functional Transformations (C#)](../../../../csharp/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md) "},{"content":"<bpt id=\"p1\">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept><ph id=\"ph1\"> </ph>","pos":[3243,3428],"source":"[Tutorial: Manipulating Content in a WordprocessingML Document (C#)](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ to XML vs. Other XML Technologies<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-vs-other-xml-technologies.md)</ept>","pos":[3432,3565],"source":"[LINQ to XML vs. Other XML Technologies](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-vs-other-xml-technologies.md)"}]}