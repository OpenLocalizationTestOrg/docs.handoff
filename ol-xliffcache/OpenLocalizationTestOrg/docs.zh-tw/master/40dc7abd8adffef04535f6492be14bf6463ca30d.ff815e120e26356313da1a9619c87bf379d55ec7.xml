{"content":"---\ntitle: \"When to Use Generic Collections\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"collections [.NET Framework], generic\"\n  - \"generic collections [.NET Framework]\"\nms.assetid: e7b868b1-11fe-4ac5-bed3-de68aca47739\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# When to Use Generic Collections\nUsing generic collections is generally recommended, because you gain the immediate benefit of type safety without having to derive from a base collection type and implement type-specific members. Generic collection types also generally perform better than the corresponding nongeneric collection types (and better than types that are derived from nongeneric base collection types) when the collection elements are value types, because with generics there is no need to box the elements.  \n  \n For programs that target the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)] or later, you should use the generic collection classes in the <xref:System.Collections.Concurrent> namespace when multiple threads might be adding or removing items from the collection concurrently.  \n  \n The following generic types correspond to existing collection types:  \n  \n-   <xref:System.Collections.Generic.List%601> is the generic class that corresponds to <xref:System.Collections.ArrayList>.  \n  \n-   <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.Concurrent.ConcurrentDictionary%602> are the generic classes that correspond to <xref:System.Collections.Hashtable>.  \n  \n-   <xref:System.Collections.ObjectModel.Collection%601> is the generic class that corresponds to <xref:System.Collections.CollectionBase>. <xref:System.Collections.ObjectModel.Collection%601> can be used as a base class, but unlike <xref:System.Collections.CollectionBase>, it is not abstract. This makes it much easier to use.  \n  \n-   <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is the generic class that corresponds to <xref:System.Collections.ReadOnlyCollectionBase>. <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is not abstract, and has a constructor that makes it easy to expose an existing <xref:System.Collections.Generic.List%601> as a read-only collection.  \n  \n-   The <xref:System.Collections.Generic.Queue%601>, <xref:System.Collections.Concurrent.ConcurrentQueue%601>, <xref:System.Collections.Generic.Stack%601>, <xref:System.Collections.Concurrent.ConcurrentStack%601>, and <xref:System.Collections.Generic.SortedList%602> generic classes correspond to the respective nongeneric classes with the same names.  \n  \n## Additional Types  \n Several generic collection types do not have nongeneric counterparts. They include the following:  \n  \n-   <xref:System.Collections.Generic.LinkedList%601> is a general-purpose linked list that provides O(1) insertion and removal operations.  \n  \n-   <xref:System.Collections.Generic.SortedDictionary%602> is a sorted dictionary with O(log `n`) insertion and retrieval operations, which makes it a useful alternative to <xref:System.Collections.Generic.SortedList%602>.  \n  \n-   <xref:System.Collections.ObjectModel.KeyedCollection%602> is a hybrid between a list and a dictionary, which provides a way to store objects that contain their own keys.  \n  \n-   <xref:System.Collections.Concurrent.BlockingCollection%601> implements a collection class with bounding and blocking functionality.  \n  \n-   <xref:System.Collections.Concurrent.ConcurrentBag%601> provides fast insertion and removal of unordered elements.  \n  \n## LINQ to Objects  \n The LINQ to Objects feature enables you to use LINQ queries to access in-memory objects as long as the object type implements the <xref:System.Collections.IEnumerable?displayProperty=nameWithType> or <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface. LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard `foreach` loops; and provide filtering, ordering and grouping capabilities. LINQ queries can also improve performance. For more information, see [LINQ to Objects (C#)](../../csharp/programming-guide/concepts/linq/linq-to-objects.md), [LINQ to Objects (Visual Basic)](../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md), and [Parallel LINQ (PLINQ)](../../../docs/standard/parallel-programming/parallel-linq-plinq.md).  \n  \n## Additional Functionality  \n Some of the generic types have functionality that is not found in the nongeneric collection types. For example, the <xref:System.Collections.Generic.List%601> class, which corresponds to the nongeneric <xref:System.Collections.ArrayList> class, has a number of methods that accept generic delegates, such as the <xref:System.Predicate%601> delegate that allows you to specify methods for searching the list, the <xref:System.Action%601> delegate that represents methods that act on each element of the list, and the <xref:System.Converter%602> delegate that lets you define conversions between types.  \n  \n The <xref:System.Collections.Generic.List%601> class allows you to specify your own <xref:System.Collections.Generic.IComparer%601> generic interface implementations for sorting and searching the list. The <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes also have this capability. In addition, these classes let you specify comparers when the collection is created. In similar fashion, the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.ObjectModel.KeyedCollection%602> classes let you specify your own equality comparers.  \n  \n## See also\n\n- [Collections and Data Structures](../../../docs/standard/collections/index.md)\n- [Commonly Used Collection Types](../../../docs/standard/collections/commonly-used-collection-types.md)\n- [Generics](../../../docs/standard/generics/index.md)\n","nodes":[{"pos":[4,292],"embed":true,"restype":"x-metadata","content":"title: \"When to Use Generic Collections\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"collections [.NET Framework], generic\"\n  - \"generic collections [.NET Framework]\"\nms.assetid: e7b868b1-11fe-4ac5-bed3-de68aca47739\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"When to Use Generic Collections","nodes":[{"pos":[0,31],"content":"When to Use Generic Collections","nodes":[{"content":"When to Use Generic Collections","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[299,330],"content":"When to Use Generic Collections","linkify":"When to Use Generic Collections","nodes":[{"content":"When to Use Generic Collections","pos":[0,31]}]},{"content":"Using generic collections is generally recommended, because you gain the immediate benefit of type safety without having to derive from a base collection type and implement type-specific members.","pos":[331,526]},{"content":"Generic collection types also generally perform better than the corresponding nongeneric collection types (and better than types that are derived from nongeneric base collection types) when the collection elements are value types, because with generics there is no need to box the elements.","pos":[527,817]},{"pos":[824,1115],"content":"For programs that target the <ph id=\"ph1\">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph> or later, you should use the generic collection classes in the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace when multiple threads might be adding or removing items from the collection concurrently.","source":"For programs that target the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)] or later, you should use the generic collection classes in the <xref:System.Collections.Concurrent> namespace when multiple threads might be adding or removing items from the collection concurrently."},{"content":"The following generic types correspond to existing collection types:","pos":[1122,1190]},{"pos":[1200,1320],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the generic class that corresponds to <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","source":"<xref:System.Collections.Generic.List%601> is the generic class that corresponds to <xref:System.Collections.ArrayList>."},{"pos":[1330,1524],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> are the generic classes that correspond to <ph id=\"ph3\">&lt;xref:System.Collections.Hashtable&gt;</ph>.","source":"<xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.Concurrent.ConcurrentDictionary%602> are the generic classes that correspond to <xref:System.Collections.Hashtable>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> is the generic class that corresponds to <ph id=\"ph2\">&lt;xref:System.Collections.CollectionBase&gt;</ph>.","pos":[1534,1669],"source":"<xref:System.Collections.ObjectModel.Collection%601> is the generic class that corresponds to <xref:System.Collections.CollectionBase>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> can be used as a base class, but unlike <ph id=\"ph2\">&lt;xref:System.Collections.CollectionBase&gt;</ph>, it is not abstract.","pos":[1670,1824],"source":"<xref:System.Collections.ObjectModel.Collection%601> can be used as a base class, but unlike <xref:System.Collections.CollectionBase>, it is not abstract."},{"content":"This makes it much easier to use.","pos":[1825,1858]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> is the generic class that corresponds to <ph id=\"ph2\">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>.","pos":[1868,2019],"source":"<xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is the generic class that corresponds to <xref:System.Collections.ReadOnlyCollectionBase>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> is not abstract, and has a constructor that makes it easy to expose an existing <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> as a read-only collection.","pos":[2020,2230],"source":"<xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is not abstract, and has a constructor that makes it easy to expose an existing <xref:System.Collections.Generic.List%601> as a read-only collection."},{"pos":[2240,2587],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> generic classes correspond to the respective nongeneric classes with the same names.","source":"The <xref:System.Collections.Generic.Queue%601>, <xref:System.Collections.Concurrent.ConcurrentQueue%601>, <xref:System.Collections.Generic.Stack%601>, <xref:System.Collections.Concurrent.ConcurrentStack%601>, and <xref:System.Collections.Generic.SortedList%602> generic classes correspond to the respective nongeneric classes with the same names."},{"pos":[2596,2612],"content":"Additional Types","linkify":"Additional Types","nodes":[{"content":"Additional Types","pos":[0,16]}]},{"content":"Several generic collection types do not have nongeneric counterparts.","pos":[2616,2685]},{"content":"They include the following:","pos":[2686,2713]},{"pos":[2723,2857],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is a general-purpose linked list that provides O(1) insertion and removal operations.","source":"<xref:System.Collections.Generic.LinkedList%601> is a general-purpose linked list that provides O(1) insertion and removal operations."},{"pos":[2867,3085],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> is a sorted dictionary with O(log <ph id=\"ph2\">`n`</ph>) insertion and retrieval operations, which makes it a useful alternative to <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","source":"<xref:System.Collections.Generic.SortedDictionary%602> is a sorted dictionary with O(log `n`) insertion and retrieval operations, which makes it a useful alternative to <xref:System.Collections.Generic.SortedList%602>."},{"pos":[3095,3264],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is a hybrid between a list and a dictionary, which provides a way to store objects that contain their own keys.","source":"<xref:System.Collections.ObjectModel.KeyedCollection%602> is a hybrid between a list and a dictionary, which provides a way to store objects that contain their own keys."},{"pos":[3274,3405],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> implements a collection class with bounding and blocking functionality.","source":"<xref:System.Collections.Concurrent.BlockingCollection%601> implements a collection class with bounding and blocking functionality."},{"pos":[3415,3528],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> provides fast insertion and removal of unordered elements.","source":"<xref:System.Collections.Concurrent.ConcurrentBag%601> provides fast insertion and removal of unordered elements."},{"pos":[3537,3552],"content":"LINQ to Objects","linkify":"LINQ to Objects","nodes":[{"content":"LINQ to Objects","pos":[0,15]}]},{"content":"The LINQ to Objects feature enables you to use LINQ queries to access in-memory objects as long as the object type implements the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType&gt;</ph> interface.","pos":[3556,3845],"source":"The LINQ to Objects feature enables you to use LINQ queries to access in-memory objects as long as the object type implements the <xref:System.Collections.IEnumerable?displayProperty=nameWithType> or <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface."},{"content":"LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard <ph id=\"ph1\">`foreach`</ph> loops; and provide filtering, ordering and grouping capabilities.","pos":[3846,4033],"source":" LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard `foreach` loops; and provide filtering, ordering and grouping capabilities."},{"content":"LINQ queries can also improve performance.","pos":[4034,4076]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>LINQ to Objects (C#)<ept id=\"p1\">](../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept>, <bpt id=\"p2\">[</bpt>LINQ to Objects (Visual Basic)<ept id=\"p2\">](../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept>, and <bpt id=\"p3\">[</bpt>Parallel LINQ (PLINQ)<ept id=\"p3\">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept>.","pos":[4077,4393],"source":" For more information, see [LINQ to Objects (C#)](../../csharp/programming-guide/concepts/linq/linq-to-objects.md), [LINQ to Objects (Visual Basic)](../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md), and [Parallel LINQ (PLINQ)](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)."},{"pos":[4402,4426],"content":"Additional Functionality","linkify":"Additional Functionality","nodes":[{"content":"Additional Functionality","pos":[0,24]}]},{"content":"Some of the generic types have functionality that is not found in the nongeneric collection types.","pos":[4430,4528]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, which corresponds to the nongeneric <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> class, has a number of methods that accept generic delegates, such as the <ph id=\"ph3\">&lt;xref:System.Predicate%601&gt;</ph> delegate that allows you to specify methods for searching the list, the <ph id=\"ph4\">&lt;xref:System.Action%601&gt;</ph> delegate that represents methods that act on each element of the list, and the <ph id=\"ph5\">&lt;xref:System.Converter%602&gt;</ph> delegate that lets you define conversions between types.","pos":[4529,5030],"source":" For example, the <xref:System.Collections.Generic.List%601> class, which corresponds to the nongeneric <xref:System.Collections.ArrayList> class, has a number of methods that accept generic delegates, such as the <xref:System.Predicate%601> delegate that allows you to specify methods for searching the list, the <xref:System.Action%601> delegate that represents methods that act on each element of the list, and the <xref:System.Converter%602> delegate that lets you define conversions between types."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class allows you to specify your own <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> generic interface implementations for sorting and searching the list.","pos":[5037,5238],"source":"The <xref:System.Collections.Generic.List%601> class allows you to specify your own <xref:System.Collections.Generic.IComparer%601> generic interface implementations for sorting and searching the list."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classes also have this capability.","pos":[5239,5385],"source":" The <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes also have this capability."},{"content":"In addition, these classes let you specify comparers when the collection is created.","pos":[5386,5470]},{"content":"In similar fashion, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> classes let you specify your own equality comparers.","pos":[5471,5658],"source":" In similar fashion, the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.ObjectModel.KeyedCollection%602> classes let you specify your own equality comparers."},{"pos":[5667,5675],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5679,5757],"content":"<bpt id=\"p1\">[</bpt>Collections and Data Structures<ept id=\"p1\">](../../../docs/standard/collections/index.md)</ept>","source":"[Collections and Data Structures](../../../docs/standard/collections/index.md)"},{"pos":[5760,5862],"content":"<bpt id=\"p1\">[</bpt>Commonly Used Collection Types<ept id=\"p1\">](../../../docs/standard/collections/commonly-used-collection-types.md)</ept>","source":"[Commonly Used Collection Types](../../../docs/standard/collections/commonly-used-collection-types.md)"},{"pos":[5865,5917],"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../../../docs/standard/generics/index.md)</ept>","source":"[Generics](../../../docs/standard/generics/index.md)"}]}