<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="delegates-lambdas.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d4aa5e60ab9bb134716bddcf90b6fc6b07c2ea0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\delegates-lambdas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1a1f06534f2e977125e7c82a743c33e86e4994a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4544c3dec442c98c119e05376a5b4fb88784dfb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Delegates and lambdas</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how delegates define a type, which specify a particular method signature, that can be called directly or passed to another method and called.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Delegates define a type, which specify a particular method signature.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A method (static or instance) that satisfies this signature can be assigned to a variable of that type, then called directly (with the appropriate arguments) or passed as an argument itself to another method and then called.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example demonstrates delegate use.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`public delegate string Reverse(string s);`</ph> line creates a delegate type of a certain signature, in this case a method that takes a string parameter and then returns a string parameter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`static string ReverseString(string s)`</ph> method, which has the exact same signature as the defined delegate type, implements the delegate.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Reverse rev = ReverseString;`</ph> line shows that you can assign a method to a variable of the corresponding delegate type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Console.WriteLine(rev("a string"));`</ph> line demonstrates how to use a variable of a delegate type to invoke the delegate.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to streamline the development process, .NET includes a set of delegate types that programmers can reuse and not have to create new types.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These are <ph id="ph1">`Func&lt;&gt;`</ph>, <ph id="ph2">`Action&lt;&gt;`</ph> and <ph id="ph3">`Predicate&lt;&gt;`</ph>, and they can be used in various places throughout the .NET APIs without the need to define new delegate types.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Of course, there are some differences between the three as you will see in their signatures which mostly have to do with the way they were meant to be used:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Action&lt;&gt;`</ph> is used when there is a need to perform an action using the arguments of the delegate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Func&lt;&gt;`</ph> is used usually when you have a transformation on hand, that is, you need to transform the arguments of the delegate into a different result.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Projections are a prime example of this.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Predicate&lt;&gt;`</ph> is used when you need to determine if the argument satisfies the condition of the delegate.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It can also be written as a <ph id="ph1">`Func&lt;T, bool&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We can now take our example above and rewrite it using the <ph id="ph1">`Func&lt;&gt;`</ph> delegate instead of a custom type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The program will continue running exactly the same.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For this simple example, having a method defined outside of the <ph id="ph1">`Main`</ph> method seems a bit superfluous.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It is because of this that .NET Framework 2.0 introduced the concept of <bpt id="p1">**</bpt>anonymous delegates<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With their support you are able to create "inline" delegates without having to specify any additional type or method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You simply inline the definition of the delegate where you need it.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For an example, we are going to switch it up and use our anonymous delegate to filter out a list of only even numbers and then print them to the console.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As you can see, the body of the delegate is just a set of expressions, as any other delegate.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>But instead of it being a separate definition, we’ve introduced it <bpt id="p1">_</bpt>ad hoc<ept id="p1">_</ept> in our call to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, even with this approach, there is still much code that we can throw away.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is where <bpt id="p1">**</bpt>lambda expressions<ept id="p1">**</ept> come into play.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Lambda expressions, or just "lambdas" for short, were introduced first in C# 3.0, as one of the core building blocks of Language Integrated Query (LINQ).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>They are just a more convenient syntax for using delegates.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>They declare a signature and a method body, but don’t have an formal identity of their own, unless they are assigned to a delegate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Unlike delegates, they can be directly assigned as the left-hand side of event registration or in various LINQ clauses and methods.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Since a lambda expression is just another way of specifying a delegate, we should be able to rewrite the above sample to use a lambda expression instead of an anonymous delegate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the preceding example, the lambda expression used is <ph id="ph1">`i =&gt; i % 2 == 0`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Again, it is just a <bpt id="p1">**</bpt>very<ept id="p1">**</ept> convenient syntax for using delegates, so what happens under the covers is similar to what happens with the anonymous delegate.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Again, lambdas are just delegates, which means that they can be used as an event handler without any problems, as the following code snippet illustrates.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`+=`</ph> operator in this context is used to subscribe to an <bpt id="p1">[</bpt>event<ept id="p1">](../../docs/csharp/language-reference/keywords/event.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Subscribe to and Unsubscribe from Events<ept id="p1">](../../docs/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Further reading and resources</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](../../docs/csharp/programming-guide/delegates/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Functions<ept id="p1">](../../docs/csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda expressions<ept id="p1">](../../docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>