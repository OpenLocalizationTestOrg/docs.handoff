{"content":"---\ntitle: \"Compiler Error CS1674 | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"CS1674\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS1674\"\nms.assetid: 7a018629-35f4-406a-8a5f-1cee7343da6d\ncaps.latest.revision: 11\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error CS1674\n'T': type used in a using statement must be implicitly convertible to 'System.IDisposable'  \n  \n The [using Statement](../../../csharp/language-reference/keywords/using-statement.md) is intended to be used to ensure the disposal of an object at the end of the `using` block, thus, only types which are disposable may be used in such a statement. For example, value types are not disposable, and type parameters which are not constrained to be classes may not be assumed to be disposable.  \n  \n## Example  \n The following sample generates CS1674.  \n  \n```  \n// CS1674.cs  \nclass C  \n{  \n   public static void Main()  \n   {  \n      int a = 0;  \n      a++;  \n  \n      using (a) {}   // CS1674  \n   }  \n}  \n```  \n  \n## Example  \n The following sample generates CS1674.  \n  \n```  \n// CS1674_b.cs  \nusing System;  \nclass C {  \n   public void Test() {  \n      using (C c = new C()) {}   // CS1674  \n   }  \n}  \n  \n// OK  \nclass D : IDisposable {  \n   void IDisposable.Dispose() {}  \n   public void Dispose() {}  \n  \n   public static void Main() {  \n      using (D d = new D()) {}  \n   }  \n}  \n```  \n  \n## Example  \n The following case illustrates the need for a class type constraint to guarantee that an unknown type parameter is disposable. The following sample generates CS1674.  \n  \n```  \n// CS1674_c.cs  \n// compile with: /target:library  \nusing System;  \npublic class C<T>  \n// Add a class type constraint that specifies a disposable class.  \n// Uncomment the following line to resolve.  \n// public class C<T> where T : IDisposable  \n{  \n   public void F(T t)  \n   {  \n      using (t) {}   // CS1674  \n   }  \n}  \n```","nodes":[{"pos":[12,50],"content":"Compiler Error CS1674 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error CS1674 | Microsoft Docs","pos":[0,38]}]},{"pos":[543,564],"content":"Compiler Error CS1674","linkify":"Compiler Error CS1674","nodes":[{"content":"Compiler Error CS1674","pos":[0,21]}]},{"content":"'T': type used in a using statement must be implicitly convertible to 'System.IDisposable'","pos":[565,655]},{"content":"The <bpt id=\"p1\">[</bpt>using Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-statement.md)</ept> is intended to be used to ensure the disposal of an object at the end of the <ph id=\"ph1\">`using`</ph> block, thus, only types which are disposable may be used in such a statement.","pos":[662,910],"source":"The [using Statement](../../../csharp/language-reference/keywords/using-statement.md) is intended to be used to ensure the disposal of an object at the end of the `using` block, thus, only types which are disposable may be used in such a statement."},{"content":"For example, value types are not disposable, and type parameters which are not constrained to be classes may not be assumed to be disposable.","pos":[911,1052]},{"pos":[1061,1068],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates CS1674.","pos":[1072,1110]},{"pos":[1280,1287],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates CS1674.","pos":[1291,1329]},{"pos":[1662,1669],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following case illustrates the need for a class type constraint to guarantee that an unknown type parameter is disposable.","pos":[1673,1799]},{"content":"The following sample generates CS1674.","pos":[1800,1838]}]}