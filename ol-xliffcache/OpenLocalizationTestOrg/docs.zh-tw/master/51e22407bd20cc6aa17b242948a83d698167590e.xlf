<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="substitutions-in-regular-expressions.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51e22407bd20cc6aa17b242948a83d698167590e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\substitutions-in-regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3e77548f1d2de9832e8656ffd4b32be2dcc93a2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f6d89cee071c845d9be21132d39248484da242a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Substitutions in Regular Expressions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Substitutions in Regular Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Top"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Substitutions are language elements that are recognized only within replacement patterns.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They use a regular expression pattern to define all or part of the text that is to replace matched text in the input string.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The replacement pattern can consist of one or more substitutions along with literal characters.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Replacement patterns are provided to overloads of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType&gt;</ph> method that have a <ph id="ph2">`replacement`</ph> parameter and to the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The methods replace the matched pattern with the pattern that is defined by the <ph id="ph1">`replacement`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The .NET Framework defines the substitution elements listed in the following table.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Substitution</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$`</ph> <bpt id="p1">*</bpt>number<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Includes the last substring matched by the capturing group that is identified by <bpt id="p1">*</bpt>number<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>number<ept id="p2">*</ept> is a decimal value, in the replacement string.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting a Numbered Group<ept id="p1">](#Numbered)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`${`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`}`</ph></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Includes the last substring matched by the named group that is designated by <ph id="ph1">`(?&lt;`</ph><bpt id="p1">*</bpt>name<ept id="p1">*</ept><ph id="ph2">`&gt; )`</ph> in the replacement string.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting a Named Group<ept id="p1">](#Named)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Includes a single "$" literal in the replacement string.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting a "$" Symbol<ept id="p1">](#DollarSign)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Includes a copy of the entire match in the replacement string.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the Entire Match<ept id="p1">](#EntireMatch)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``$` ``</ph>|Includes all the text of the input string before the match in the replacement string.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the Text before the Match<ept id="p1">](#BeforeMatch)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Includes all the text of the input string after the match in the replacement string.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the Text after the Match<ept id="p1">](#AfterMatch)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Includes the last group captured in the replacement string.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the Last Captured Group<ept id="p1">](#LastGroup)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Includes the entire input string in the replacement string.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the Entire Input String<ept id="p1">](#EntireString)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Substitution Elements and Replacement Patterns</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Substitutions are the only special constructs recognized in a replacement pattern.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>None of the other regular expression language elements, including character escapes and the period (<ph id="ph1">`.`</ph>), which matches any character, are supported.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Similarly, substitution language elements are recognized only in replacement patterns and are never valid in regular expression patterns.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The only character that can appear either in a regular expression pattern or in a substitution is the <ph id="ph1">`$`</ph> character, although it has a different meaning in each context.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In a regular expression pattern, <ph id="ph1">`$`</ph> is an anchor that matches the end of the string.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In a replacement pattern, <ph id="ph1">`$`</ph> indicates the beginning of a substitution.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For functionality similar to a replacement pattern within a regular expression, use a backreference.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information about backreferences, see <bpt id="p1">[</bpt>Backreference Constructs<ept id="p1">](../../../docs/standard/base-types/backreference-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Substituting a Numbered Group</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$`</ph><bpt id="p1">*</bpt>number<ept id="p1">*</ept> language element includes the last substring matched by the <bpt id="p2">*</bpt>number<ept id="p2">*</ept> capturing group in the replacement string, where <bpt id="p3">*</bpt>number<ept id="p3">*</ept> is the index of the capturing group.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the replacement pattern <ph id="ph1">`$1`</ph> indicates that the matched substring is to be replaced by the first captured group.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about numbered capturing groups, see <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](../../../docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>All digits that follow <ph id="ph1">`$`</ph> are interpreted as belonging to the <bpt id="p1">*</bpt>number<ept id="p1">*</ept> group.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If this is not your intent, you can substitute a named group instead.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, you can use the replacement string <ph id="ph1">`${1}1`</ph> instead of <ph id="ph2">`$11`</ph> to define the replacement string as the value of the first captured group along with the number "1".</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting a Named Group<ept id="p1">](#Named)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Capturing groups that are not explicitly assigned names using the <ph id="ph1">`(?&lt;`</ph><bpt id="p1">*</bpt>name<ept id="p1">*</ept><ph id="ph2">`&gt;)`</ph> syntax are numbered from left to right starting at one.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Named groups are also numbered from left to right, starting at one greater than the index of the last unnamed group.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, in the regular expression <ph id="ph1">`(\w)(?&lt;digit&gt;\d)`</ph>, the index of the <ph id="ph2">`digit`</ph> named group is 2.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>number<ept id="p1">*</ept> does not specify a valid capturing group defined in the regular expression pattern, <ph id="ph1">`$`</ph><bpt id="p2">*</bpt>number<ept id="p2">*</ept> is interpreted as a literal character sequence that is used to replace each match.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`$`</ph><bpt id="p1">*</bpt>number<ept id="p1">*</ept> substitution to strip the currency symbol from a decimal value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It removes currency symbols found at the beginning or end of a monetary value, and recognizes the two most common decimal separators ("." and ",").</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\p{Sc}*(\s?\d+[.,]?\d*)\p{Sc}*`</ph> is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Match zero or more currency symbol characters.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Match zero or one white-space characters.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Match zero or one period or comma.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Match zero or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Match a white space followed by one or more decimal digits, followed by zero or one period or comma, followed by zero or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Because the replacement pattern is <ph id="ph1">`$1`</ph>, the call to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType&gt;</ph> method replaces the entire matched substring with this captured group.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Top)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Substituting a Named Group</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`${`</ph><bpt id="p1">*</bpt>name<ept id="p1">*</ept><ph id="ph2">`}`</ph> language element substitutes the last substring matched by the <bpt id="p2">*</bpt>name<ept id="p2">*</ept> capturing group, where <bpt id="p3">*</bpt>name<ept id="p3">*</ept> is the name of a capturing group defined by the <ph id="ph3">`(?&lt;`</ph><bpt id="p4">*</bpt>name<ept id="p4">*</ept><ph id="ph4">`&gt;)`</ph> language element.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information about named capturing groups, see <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](../../../docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> doesn't specify a valid named capturing group defined in the regular expression pattern but consists of digits, <ph id="ph1">`${`</ph><bpt id="p2">*</bpt>name<ept id="p2">*</ept><ph id="ph2">`}`</ph> is interpreted as a numbered group.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> specifies neither a valid named capturing group nor a valid numbered capturing group defined in the regular expression pattern, <ph id="ph1">`${`</ph><bpt id="p2">*</bpt>name<ept id="p2">*</ept><ph id="ph2">`}`</ph> is interpreted as a literal character sequence that is used to replace each match.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`${`</ph><bpt id="p1">*</bpt>name<ept id="p1">*</ept><ph id="ph2">`}`</ph> substitution to strip the currency symbol from a decimal value.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It removes currency symbols found at the beginning or end of a monetary value, and recognizes the two most common decimal separators ("." and ",").</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\p{Sc}*(?&lt;amount&gt;\s?\d[.,]?\d*)\p{Sc}*`</ph> is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Match zero or more currency symbol characters.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Match zero or one white-space characters.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Match zero or one period or comma.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Match zero or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Match a white space, followed by one or more decimal digits, followed by zero or one period or comma, followed by zero or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This is the capturing group named <ph id="ph1">`amount`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Because the replacement pattern is <ph id="ph1">`${amount}`</ph>, the call to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType&gt;</ph> method replaces the entire matched substring with this captured group.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Top)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Substituting a "$" Character</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$$`</ph> substitution inserts a literal "$" character in the replaced string.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object to determine the current culture's currency symbol and its placement in a currency string.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It then builds both a regular expression pattern and a replacement pattern dynamically.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If the example is run on a computer whose current culture is en-US, it generates the regular expression pattern <ph id="ph1">`\b(\d+)(\.(\d+))?`</ph> and the replacement pattern <ph id="ph2">`$$ $1$2`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The replacement pattern replaces the matched text with a currency symbol and a space followed by the first and second captured groups.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\d+)(\.(\d+))?`</ph> is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Start the match at the beginning of a word boundary.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Match a period (the decimal separator).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This is the third capturing group.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a period followed by one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Substituting the Entire Match</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$&amp;`</ph> substitution includes the entire match in the replacement string.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Often, it is used to add a substring to the beginning or end of the matched string.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`($&amp;)`</ph> replacement pattern adds parentheses to the beginning and end of each match.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If there is no match, the <ph id="ph1">`$&amp;`</ph> substitution has no effect.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`$&amp;`</ph> substitution to add quotation marks at the beginning and end of book titles stored in a string array.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`^(\w+\s?)+$`</ph> is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Start the match at the beginning of the input string.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Match the pattern of one or more word characters followed by zero or one white-space characters one or more times.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Match the end of the input string.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`"$&amp;"`</ph> replacement pattern adds a literal quotation mark to the beginning and end of each match.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Top)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Substituting the Text Before the Match</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">``$` ``</ph> substitution replaces the matched string with the entire input string before the match.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>That is, it duplicates the input string up to the match while removing the matched text.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Any text that follows the matched text is unchanged in the result string.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If there are multiple matches in an input string, the replacement text is derived from the original input string, rather than from the string in which text has been replaced by earlier matches.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\(</ph>The example provides an illustration.<ph id="ph2">\)</ph> If there is no match, the <ph id="ph3">``$` ``</ph> substitution has no effect.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following example uses the regular expression pattern <ph id="ph1">`\d+`</ph> to match a sequence of one or more decimal digits in the input string.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The replacement string <ph id="ph1">``$` ``</ph> replaces these digits with the text that precedes the match.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In this example, the input string <ph id="ph1">`"aa1bb2cc3dd4ee5"`</ph> contains five matches.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following table illustrates how the <ph id="ph1">``$` ``</ph> substitution causes the regular expression engine to replace each match in the input string.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Inserted text is shown in bold in the results column.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Match</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Position</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>String before match</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Result string</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>aa</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>aa<bpt id="p1">**</bpt>aa<ept id="p1">**</ept>bb2cc3dd4ee5</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>aa1bb</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>aaaabb<bpt id="p1">**</bpt>aa1bb<ept id="p1">**</ept>cc3dd4ee5</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>aa1bb2cc</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>aaaabbaa1bbcc<bpt id="p1">**</bpt>aa1bb2cc<ept id="p1">**</ept>dd4ee5</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>11</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>aa1bb2cc3dd</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>aaaabbaa1bbccaa1bb2ccdd<bpt id="p1">**</bpt>aa1bb2cc3dd<ept id="p1">**</ept>ee5</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>14</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>aa1bb2cc3dd4ee</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>aaaabbaa1bbccaa1bb2ccddaa1bb2cc3ddee<bpt id="p1">**</bpt>aa1bb2cc3dd4ee<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Top)</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Substituting the Text After the Match</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$'`</ph> substitution replaces the matched string with the entire input string after the match.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>That is, it duplicates the input string after the match while removing the matched text.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Any text that precedes the matched text is unchanged in the result string.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If there is no match, the  <ph id="ph1">`$'`</ph> substitution has no effect.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following example uses the regular expression pattern <ph id="ph1">`\d+`</ph> to match a sequence of one or more decimal digits in the input string.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The replacement string <ph id="ph1">`$'`</ph> replaces these digits with the text that follows the match.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In this example, the input string <ph id="ph1">`"aa1bb2cc3dd4ee5"`</ph> contains five matches.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The following table illustrates how the <ph id="ph1">`$'`</ph> substitution causes the regular expression engine to replace each match in the input string.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Inserted text is shown in bold in the results column.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Match</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Position</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>String after match</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Result string</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>bb2cc3dd4ee5</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>aa<bpt id="p1">**</bpt>bb2cc3dd4ee5<ept id="p1">**</ept>bb2cc3dd4ee5</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>cc3dd4ee5</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>aabb2cc3dd4ee5bb<bpt id="p1">**</bpt>cc3dd4ee5<ept id="p1">**</ept>cc3dd4ee5</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>dd4ee5</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>aabb2cc3dd4ee5bbcc3dd4ee5cc<bpt id="p1">**</bpt>dd4ee5<ept id="p1">**</ept>dd4ee5</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>11</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>ee5</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>aabb2cc3dd4ee5bbcc3dd4ee5ccdd4ee5dd<bpt id="p1">**</bpt>ee5<ept id="p1">**</ept>ee5</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>14</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>aabb2cc3dd4ee5bbcc3dd4ee5ccdd4ee5ddee5ee</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Top)</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Substituting the Last Captured Group</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$+`</ph> substitution replaces the matched string with the last captured group.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If there are no captured groups or if the value of the last captured group is <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, the <ph id="ph2">`$+`</ph> substitution has no effect.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The following example identifies duplicate words in a string and uses the <ph id="ph1">`$+`</ph> substitution to replace them with a single occurrence of the word.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType&gt;</ph> option is used to ensure that words that differ in case but that are otherwise identical are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\w+)\s\1\b`</ph> is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Begin the match at a word boundary.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Match the first captured group.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>End the match at a word boundary.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Top)</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Substituting the Entire Input String</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$_`</ph> substitution replaces the matched string with the entire input string.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>That is, it removes the matched text and replaces it with the entire string, including the matched text.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The following example matches one or more decimal digits in the input string.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>It uses the <ph id="ph1">`$_`</ph> substitution to replace them with the entire input string.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In this example, the input string <ph id="ph1">`"ABC123DEF456"`</ph> contains two matches.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The following table illustrates how the <ph id="ph1">`$_`</ph> substitution causes the regular expression engine to replace each match in the input string.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Inserted text is shown in bold in the results column.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Match</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Position</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Match</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Result string</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>123</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>ABC<bpt id="p1">**</bpt>ABC123DEF456<ept id="p1">**</ept>DEF456</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>456</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>ABCABC123DEF456DEF<bpt id="p1">**</bpt>ABC123DEF456<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>