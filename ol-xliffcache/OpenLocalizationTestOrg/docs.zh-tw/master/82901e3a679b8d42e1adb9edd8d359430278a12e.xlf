<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="functiontailcall2-function.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82901e3a679b8d42e1adb9edd8d359430278a12e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\profiling\functiontailcall2-function.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bff7f2e68f8ffac2da7cdd0ace4030be84848964</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f6fbbc147c5990a1872620fb63b64754bf03e7b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>FunctionTailcall2 Function | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>FunctionTailcall2 Function</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Notifies the profiler that the currently executing function is about to perform a tail call to another function and provides information about the stack frame.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the currently executing function that is about to make a tail call.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in] The remapped function identifier, which the profiler previously specified via <bpt id="p1">[</bpt>FunctionIDMapper<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functionidmapper-function.md)</ept>, of the currently executing function that is about to make a tail call.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[in] A <ph id="ph1">`COR_PRF_FRAME_INFO`</ph> value that points to information about the stack frame.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The profiler should treat this as an opaque handle that can be passed back to the execution engine in the <bpt id="p1">[</bpt>ICorProfilerInfo2::GetFunctionInfo2<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getfunctioninfo2-method.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The target function of the tail call will use the current stack frame, and will return directly to the caller of the function that made the tail call.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This means that a <bpt id="p1">[</bpt>FunctionLeave2<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)</ept> callback will not be issued for a function that is the target of a tail call.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`func`</ph> parameter is not valid after the <ph id="ph2">`FunctionTailcall2`</ph> function returns because the value may change or be destroyed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FunctionTailcall2`</ph> function is a callback; you must implement it.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The implementation must use the <ph id="ph1">`__declspec`</ph>(<ph id="ph2">`naked`</ph>) storage-class attribute.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The execution engine does not save any registers before calling this function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>On entry, you must save all registers that you use, including those in the floating-point unit (FPU).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On exit, you must restore the stack by popping off all the parameters that were pushed by its caller.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The implementation of <ph id="ph1">`FunctionTailcall2`</ph> should not block because it will delay garbage collection.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The implementation should not attempt a garbage collection because the stack may not be in a garbage collection-friendly state.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If a garbage collection is attempted, the runtime will block until <ph id="ph1">`FunctionTailcall2`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Also, the <ph id="ph1">`FunctionTailcall2`</ph> function must not call into managed code or in any way cause a managed memory allocation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorProf.idl</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>FunctionEnter2 Function<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>FunctionLeave2 Function<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SetEnterLeaveFunctionHooks2 Method<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Profiling Global Static Functions<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/profiling-global-static-functions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>