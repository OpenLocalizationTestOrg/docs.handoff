{"content":"---\ntitle: \"Row States and Row Versions\"\nms.date: \"07/19/2018\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 2e6642c9-bfc6-425c-b3a7-e4912ffa6c1f\n---\n# Row States and Row Versions\nADO.NET manages rows in tables using row states and versions. A row state indicates the status of a row; row versions maintain the values stored in a row as it is modified, including current, original, and default values. For example, after you have made a modification to a column in a row, the row will have a row state of `Modified`, and two row versions: `Current`, which contains the current row values, and `Original`, which contains the row values before the column was modified.  \n  \n Each <xref:System.Data.DataRow> object has a <xref:System.Data.DataRow.RowState%2A> property that you can examine to determine the current state of the row. The following table gives a brief description of each `RowState` enumeration value.  \n  \n|RowState value|Description|  \n|--------------------|-----------------|  \n|<xref:System.Data.DataRowState.Unchanged>|No changes have been made since the last call to `AcceptChanges` or since the row was created by `DataAdapter.Fill`.|  \n|<xref:System.Data.DataRowState.Added>|The row has been added to the table, but `AcceptChanges` has not been called.|  \n|<xref:System.Data.DataRowState.Modified>|Some element of the row has been changed.|  \n|<xref:System.Data.DataRowState.Deleted>|The row has been deleted from a table, and `AcceptChanges` has not been called.|  \n|<xref:System.Data.DataRowState.Detached>|The row is not part of any `DataRowCollection`. The `RowState` of a newly created row is set to `Detached`. After the new `DataRow` is added to the `DataRowCollection` by calling the `Add` method, the value of the `RowState` property is set to `Added`.<br /><br /> `Detached` is also set for a row that has been removed from a `DataRowCollection` using the `Remove` method, or by the `Delete` method followed by the `AcceptChanges` method.|  \n  \n When `AcceptChanges` is called on a <xref:System.Data.DataSet>, <xref:System.Data.DataTable> , or <xref:System.Data.DataRow>, all rows with a row state of `Deleted` are removed. The remaining rows are given a row state of `Unchanged`, and the values in the `Original` row version are overwritten with the `Current` row version values. When `RejectChanges` is called, all rows with a row state of `Added` are removed. The remaining rows are given a row state of `Unchanged`, and the values in the `Current` row version are overwritten with the `Original` row version values.  \n  \n You can view the different row versions of a row by passing a <xref:System.Data.DataRowVersion> parameter with the column reference, as shown in the following example.  \n  \n```vb  \nDim custRow As DataRow = custTable.Rows(0)  \nDim custID As String = custRow(\"CustomerID\", DataRowVersion.Original).ToString()  \n```  \n  \n```csharp  \nDataRow custRow = custTable.Rows[0];  \nstring custID = custRow[\"CustomerID\", DataRowVersion.Original].ToString();  \n```  \n  \n The following table gives a brief description of each `DataRowVersion` enumeration value.  \n  \n|DataRowVersion value|Description|  \n|--------------------------|-----------------|  \n|<xref:System.Data.DataRowVersion.Current>|The current values for the row. This row version does not exist for rows with a `RowState` of `Deleted`.|  \n|<xref:System.Data.DataRowVersion.Default>|The default row version for a particular row. The default row version for an `Added`, `Modified`, or `Deleted` row is `Current`. The default row version for a `Detached` row is `Proposed`.|  \n|<xref:System.Data.DataRowVersion.Original>|The original values for the row. This row version does not exist for rows with a `RowState` of `Added`.|  \n|<xref:System.Data.DataRowVersion.Proposed>|The proposed values for the row. This row version exists during an edit operation on a row, or for a row that is not part of a `DataRowCollection`.|  \n  \n You can test whether a `DataRow` has a particular row version by calling the <xref:System.Data.DataRow.HasVersion%2A> method and passing a `DataRowVersion` as an argument. For example, `DataRow.HasVersion(DataRowVersion.Original)` will return `false` for newly added rows before `AcceptChanges` has been called.  \n  \n The following code example displays the values in all the deleted rows of a table. `Deleted` rows do not have a `Current` row version, so you must pass `DataRowVersion.Original` when accessing the column values.  \n  \n```vb  \nDim catTable As DataTable = catDS.Tables(\"Categories\")  \n  \nDim delRows() As DataRow = catTable.Select(Nothing, Nothing, DataViewRowState.Deleted)  \n  \nConsole.WriteLine(\"Deleted rows:\" & vbCrLf)  \n  \nDim catCol As DataColumn  \nDim delRow As DataRow  \n  \nFor Each catCol In catTable.Columns  \n  Console.Write(catCol.ColumnName & vbTab)  \nNext  \nConsole.WriteLine()  \n  \nFor Each delRow In delRows  \n  For Each catCol In catTable.Columns  \n    Console.Write(delRow(catCol, DataRowVersion.Original) & vbTab)  \n  Next  \n  Console.WriteLine()  \nNext  \n```  \n  \n```csharp  \nDataTable catTable = catDS.Tables[\"Categories\"];  \n  \nDataRow[] delRows = catTable.Select(null, null, DataViewRowState.Deleted);  \n  \nConsole.WriteLine(\"Deleted rows:\\n\");  \n  \nforeach (DataColumn catCol in catTable.Columns)  \n  Console.Write(catCol.ColumnName + \"\\t\");  \nConsole.WriteLine();  \n  \nforeach (DataRow delRow in delRows)  \n{  \n  foreach (DataColumn catCol in catTable.Columns)  \n    Console.Write(delRow[catCol, DataRowVersion.Original] + \"\\t\");  \n  Console.WriteLine();  \n}  \n```  \n  \n## See also\n\n- [Manipulating Data in a DataTable](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/manipulating-data-in-a-datatable.md)\n- [DataSets, DataTables, and DataViews](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)\n- [DataAdapters and DataReaders](../../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,145],"embed":true,"restype":"x-metadata","content":"title: \"Row States and Row Versions\"\nms.date: \"07/19/2018\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 2e6642c9-bfc6-425c-b3a7-e4912ffa6c1f","nodes":[{"content":"Row States and Row Versions","nodes":[{"pos":[0,27],"content":"Row States and Row Versions","nodes":[{"content":"Row States and Row Versions","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[152,179],"content":"Row States and Row Versions","linkify":"Row States and Row Versions","nodes":[{"content":"Row States and Row Versions","pos":[0,27]}]},{"content":"ADO.NET manages rows in tables using row states and versions.","pos":[180,241]},{"content":"A row state indicates the status of a row; row versions maintain the values stored in a row as it is modified, including current, original, and default values.","pos":[242,401]},{"content":"For example, after you have made a modification to a column in a row, the row will have a row state of <ph id=\"ph1\">`Modified`</ph>, and two row versions: <ph id=\"ph2\">`Current`</ph>, which contains the current row values, and <ph id=\"ph3\">`Original`</ph>, which contains the row values before the column was modified.","pos":[402,666],"source":" For example, after you have made a modification to a column in a row, the row will have a row state of `Modified`, and two row versions: `Current`, which contains the current row values, and `Original`, which contains the row values before the column was modified."},{"content":"Each <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> object has a <ph id=\"ph2\">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> property that you can examine to determine the current state of the row.","pos":[673,829],"source":"Each <xref:System.Data.DataRow> object has a <xref:System.Data.DataRow.RowState%2A> property that you can examine to determine the current state of the row."},{"content":"The following table gives a brief description of each <ph id=\"ph1\">`RowState`</ph> enumeration value.","pos":[830,913],"source":" The following table gives a brief description of each `RowState` enumeration value."},{"content":"RowState value","pos":[920,934]},{"content":"Description","pos":[935,946]},{"pos":[1036,1152],"content":"No changes have been made since the last call to <ph id=\"ph1\">`AcceptChanges`</ph> or since the row was created by <ph id=\"ph2\">`DataAdapter.Fill`</ph>.","source":"No changes have been made since the last call to `AcceptChanges` or since the row was created by `DataAdapter.Fill`."},{"pos":[1195,1272],"content":"The row has been added to the table, but <ph id=\"ph1\">`AcceptChanges`</ph> has not been called.","source":"The row has been added to the table, but `AcceptChanges` has not been called."},{"content":"Some element of the row has been changed.","pos":[1318,1359]},{"pos":[1404,1483],"content":"The row has been deleted from a table, and <ph id=\"ph1\">`AcceptChanges`</ph> has not been called.","source":"The row has been deleted from a table, and `AcceptChanges` has not been called."},{"content":"The row is not part of any <ph id=\"ph1\">`DataRowCollection`</ph>.","pos":[1529,1576],"source":"The row is not part of any `DataRowCollection`."},{"content":"The <ph id=\"ph1\">`RowState`</ph> of a newly created row is set to <ph id=\"ph2\">`Detached`</ph>.","pos":[1577,1636],"source":" The `RowState` of a newly created row is set to `Detached`."},{"content":"After the new <ph id=\"ph1\">`DataRow`</ph> is added to the <ph id=\"ph2\">`DataRowCollection`</ph> by calling the <ph id=\"ph3\">`Add`</ph> method, the value of the <ph id=\"ph4\">`RowState`</ph> property is set to <ph id=\"ph5\">`Added`</ph>.","pos":[1637,1781],"source":" After the new `DataRow` is added to the `DataRowCollection` by calling the `Add` method, the value of the `RowState` property is set to `Added`."},{"content":"<ph id=\"ph1\">`Detached`</ph> is also set for a row that has been removed from a <ph id=\"ph2\">`DataRowCollection`</ph> using the <ph id=\"ph3\">`Remove`</ph> method, or by the <ph id=\"ph4\">`Delete`</ph> method followed by the <ph id=\"ph5\">`AcceptChanges`</ph> method.","pos":[1794,1968],"source":"`Detached` is also set for a row that has been removed from a `DataRowCollection` using the `Remove` method, or by the `Delete` method followed by the `AcceptChanges` method."},{"content":"When <ph id=\"ph1\">`AcceptChanges`</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Data.DataTable&gt;</ph> , or <ph id=\"ph4\">&lt;xref:System.Data.DataRow&gt;</ph>, all rows with a row state of <ph id=\"ph5\">`Deleted`</ph> are removed.","pos":[1976,2153],"source":"When `AcceptChanges` is called on a <xref:System.Data.DataSet>, <xref:System.Data.DataTable> , or <xref:System.Data.DataRow>, all rows with a row state of `Deleted` are removed."},{"content":"The remaining rows are given a row state of <ph id=\"ph1\">`Unchanged`</ph>, and the values in the <ph id=\"ph2\">`Original`</ph> row version are overwritten with the <ph id=\"ph3\">`Current`</ph> row version values.","pos":[2154,2310],"source":" The remaining rows are given a row state of `Unchanged`, and the values in the `Original` row version are overwritten with the `Current` row version values."},{"content":"When <ph id=\"ph1\">`RejectChanges`</ph> is called, all rows with a row state of <ph id=\"ph2\">`Added`</ph> are removed.","pos":[2311,2392],"source":" When `RejectChanges` is called, all rows with a row state of `Added` are removed."},{"content":"The remaining rows are given a row state of <ph id=\"ph1\">`Unchanged`</ph>, and the values in the <ph id=\"ph2\">`Current`</ph> row version are overwritten with the <ph id=\"ph3\">`Original`</ph> row version values.","pos":[2393,2549],"source":" The remaining rows are given a row state of `Unchanged`, and the values in the `Current` row version are overwritten with the `Original` row version values."},{"pos":[2556,2723],"content":"You can view the different row versions of a row by passing a <ph id=\"ph1\">&lt;xref:System.Data.DataRowVersion&gt;</ph> parameter with the column reference, as shown in the following example.","source":"You can view the different row versions of a row by passing a <xref:System.Data.DataRowVersion> parameter with the column reference, as shown in the following example."},{"pos":[3012,3101],"content":"The following table gives a brief description of each <ph id=\"ph1\">`DataRowVersion`</ph> enumeration value.","source":"The following table gives a brief description of each `DataRowVersion` enumeration value."},{"content":"DataRowVersion value","pos":[3108,3128]},{"content":"Description","pos":[3129,3140]},{"content":"The current values for the row.","pos":[3236,3267]},{"content":"This row version does not exist for rows with a <ph id=\"ph1\">`RowState`</ph> of <ph id=\"ph2\">`Deleted`</ph>.","pos":[3268,3340],"source":" This row version does not exist for rows with a `RowState` of `Deleted`."},{"content":"The default row version for a particular row.","pos":[3387,3432]},{"content":"The default row version for an <ph id=\"ph1\">`Added`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> row is <ph id=\"ph4\">`Current`</ph>.","pos":[3433,3515],"source":" The default row version for an `Added`, `Modified`, or `Deleted` row is `Current`."},{"content":"The default row version for a <ph id=\"ph1\">`Detached`</ph> row is <ph id=\"ph2\">`Proposed`</ph>.","pos":[3516,3575],"source":" The default row version for a `Detached` row is `Proposed`."},{"content":"The original values for the row.","pos":[3623,3655]},{"content":"This row version does not exist for rows with a <ph id=\"ph1\">`RowState`</ph> of <ph id=\"ph2\">`Added`</ph>.","pos":[3656,3726],"source":" This row version does not exist for rows with a `RowState` of `Added`."},{"content":"The proposed values for the row.","pos":[3774,3806]},{"content":"This row version exists during an edit operation on a row, or for a row that is not part of a <ph id=\"ph1\">`DataRowCollection`</ph>.","pos":[3807,3921],"source":" This row version exists during an edit operation on a row, or for a row that is not part of a `DataRowCollection`."},{"content":"You can test whether a <ph id=\"ph1\">`DataRow`</ph> has a particular row version by calling the <ph id=\"ph2\">&lt;xref:System.Data.DataRow.HasVersion%2A&gt;</ph> method and passing a <ph id=\"ph3\">`DataRowVersion`</ph> as an argument.","pos":[3929,4100],"source":"You can test whether a `DataRow` has a particular row version by calling the <xref:System.Data.DataRow.HasVersion%2A> method and passing a `DataRowVersion` as an argument."},{"content":"For example, <ph id=\"ph1\">`DataRow.HasVersion(DataRowVersion.Original)`</ph> will return <ph id=\"ph2\">`false`</ph> for newly added rows before <ph id=\"ph3\">`AcceptChanges`</ph> has been called.","pos":[4101,4240],"source":" For example, `DataRow.HasVersion(DataRowVersion.Original)` will return `false` for newly added rows before `AcceptChanges` has been called."},{"content":"The following code example displays the values in all the deleted rows of a table.","pos":[4247,4329]},{"content":"<ph id=\"ph1\">`Deleted`</ph> rows do not have a <ph id=\"ph2\">`Current`</ph> row version, so you must pass <ph id=\"ph3\">`DataRowVersion.Original`</ph> when accessing the column values.","pos":[4330,4458],"source":"`Deleted` rows do not have a `Current` row version, so you must pass `DataRowVersion.Original` when accessing the column values."},{"pos":[5543,5551],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5555,5695],"content":"<bpt id=\"p1\">[</bpt>Manipulating Data in a DataTable<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/manipulating-data-in-a-datatable.md)</ept>","source":"[Manipulating Data in a DataTable](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/manipulating-data-in-a-datatable.md)"},{"pos":[5698,5814],"content":"<bpt id=\"p1\">[</bpt>DataSets, DataTables, and DataViews<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept>","source":"[DataSets, DataTables, and DataViews](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)"},{"pos":[5817,5922],"content":"<bpt id=\"p1\">[</bpt>DataAdapters and DataReaders<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept>","source":"[DataAdapters and DataReaders](../../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)"},{"pos":[5925,6029],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}