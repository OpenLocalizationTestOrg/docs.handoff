{"content":"---\ntitle: \"-deterministic (C# Compiler Options)\"\nms.date: 04/12/2018\nf1_keywords: \n  - \"/deterministic\"\nhelpviewer_keywords: \n  - \"-deterministic compiler option [C#]\"\n  - \"deterministic compiler option [C#]\"\n  - \"/deterministic compiler option [C#]\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# -deterministic\n\nCauses the compiler to produce an assembly whose byte-for-byte output is identical across compilations for identical inputs. \n\n## Syntax\n\n```\n-deterministic\n```\n\n## Remarks\n\nBy default, compiler output from a given set of inputs is unique, since the compiler adds a timestamp and a GUID that is generated from random numbers. You use the `-deterministic` option to produce a *deterministic assembly*, one whose binary content is identical across compilations as long as the input remains the same.\n\nThe compiler considers the following inputs for the purpose of determinism:\n\n- The sequence of command-line parameters.\n- The contents of the compiler's .rsp response file.\n- The precise version of the compiler used, and its referenced assemblies.\n- The current directory path.\n- The binary contents of all files explicitly passed to the compiler either directly or indirectly, including:\n    - Source files\n    - Referenced assemblies\n    - Referenced modules\n    - Resources\n    - The strong name key file\n    - @ response files\n    - Analyzers\n    - Rulesets\n    - Additional files that may be used by analyzers\n- The current culture (for the language in which diagnostics and exception messages are produced).\n- The default encoding (or the current code page) if the encoding is not specified.\n- The existence, non-existence, and contents of files on the compiler's search paths (specified, for example, by `/lib` or `/recurse`).\n- The CLR platform on which the compiler is run.\n- The value of `%LIBPATH%`, which can affect analyzer dependency loading.\n\nWhen sources are publicly available, deterministic compilation can be used for establishing whether a binary is compiled from a trusted source. It can also be useful in a continuous build system for determining whether build steps that are dependent on changes to a binary need to be executed. \n\n## See also\n\n- [C# Compiler Options](../../../csharp/language-reference/compiler-options/index.md)\n- [Managing Project and Solution Properties](/visualstudio/ide/managing-project-and-solution-properties)\n","nodes":[{"pos":[4,291],"embed":true,"restype":"x-metadata","content":"title: \"-deterministic (C# Compiler Options)\"\nms.date: 04/12/2018\nf1_keywords: \n  - \"/deterministic\"\nhelpviewer_keywords: \n  - \"-deterministic compiler option [C#]\"\n  - \"deterministic compiler option [C#]\"\n  - \"/deterministic compiler option [C#]\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"-deterministic (C# Compiler Options)","nodes":[{"pos":[0,36],"content":"-deterministic (C# Compiler Options)","nodes":[{"content":"-deterministic (C# Compiler Options)","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[298,312],"content":"-deterministic","linkify":"-deterministic","nodes":[{"content":"-deterministic","pos":[0,14]}]},{"content":"Causes the compiler to produce an assembly whose byte-for-byte output is identical across compilations for identical inputs.","pos":[314,438]},{"pos":[444,450],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[479,486],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, compiler output from a given set of inputs is unique, since the compiler adds a timestamp and a GUID that is generated from random numbers.","pos":[488,639]},{"content":"You use the <ph id=\"ph1\">`-deterministic`</ph> option to produce a <bpt id=\"p1\">*</bpt>deterministic assembly<ept id=\"p1\">*</ept>, one whose binary content is identical across compilations as long as the input remains the same.","pos":[640,811],"source":" You use the `-deterministic` option to produce a *deterministic assembly*, one whose binary content is identical across compilations as long as the input remains the same."},{"content":"The compiler considers the following inputs for the purpose of determinism:","pos":[813,888]},{"content":"The sequence of command-line parameters.","pos":[892,932]},{"content":"The contents of the compiler's .rsp response file.","pos":[935,985]},{"content":"The precise version of the compiler used, and its referenced assemblies.","pos":[988,1060]},{"content":"The current directory path.","pos":[1063,1090]},{"content":"The binary contents of all files explicitly passed to the compiler either directly or indirectly, including:","pos":[1093,1201]},{"content":"Source files","pos":[1208,1220]},{"content":"Referenced assemblies","pos":[1227,1248]},{"content":"Referenced modules","pos":[1255,1273]},{"content":"Resources","pos":[1280,1289]},{"content":"The strong name key file","pos":[1296,1320]},{"content":"@ response files","pos":[1327,1343]},{"content":"Analyzers","pos":[1350,1359]},{"content":"Rulesets","pos":[1366,1374]},{"content":"Additional files that may be used by analyzers","pos":[1381,1427]},{"content":"The current culture (for the language in which diagnostics and exception messages are produced).","pos":[1430,1526]},{"content":"The default encoding (or the current code page) if the encoding is not specified.","pos":[1529,1610]},{"pos":[1613,1746],"content":"The existence, non-existence, and contents of files on the compiler's search paths (specified, for example, by <ph id=\"ph1\">`/lib`</ph> or <ph id=\"ph2\">`/recurse`</ph>).","source":"The existence, non-existence, and contents of files on the compiler's search paths (specified, for example, by `/lib` or `/recurse`)."},{"content":"The CLR platform on which the compiler is run.","pos":[1749,1795]},{"pos":[1798,1869],"content":"The value of <ph id=\"ph1\">`%LIBPATH%`</ph>, which can affect analyzer dependency loading.","source":"The value of `%LIBPATH%`, which can affect analyzer dependency loading."},{"content":"When sources are publicly available, deterministic compilation can be used for establishing whether a binary is compiled from a trusted source.","pos":[1871,2014]},{"content":"It can also be useful in a continuous build system for determining whether build steps that are dependent on changes to a binary need to be executed.","pos":[2015,2164]},{"pos":[2170,2178],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2182,2265],"content":"<bpt id=\"p1\">[</bpt>C# Compiler Options<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/index.md)</ept>","source":"[C# Compiler Options](../../../csharp/language-reference/compiler-options/index.md)"},{"pos":[2268,2370],"content":"<bpt id=\"p1\">[</bpt>Managing Project and Solution Properties<ept id=\"p1\">](/visualstudio/ide/managing-project-and-solution-properties)</ept>","source":"[Managing Project and Solution Properties](/visualstudio/ide/managing-project-and-solution-properties)"}]}