{"content":"---\ntitle: \"How to: Access WCF Services with One-Way and Request-Reply Contracts | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 7e10d3a5-fcf4-4a4b-a8d6-92ee2c988b3b\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Access WCF Services with One-Way and Request-Reply Contracts\nThe following procedures describe how to access a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service that defines a one-way contract and a request-reply contract and that does not use the duplex communication pattern.  \n  \n### To define the service  \n  \n1.  Declare the service contract. The operations that are to be one-way must have `IsOneWay` set to `true` within the <xref:System.ServiceModel.OperationContractAttribute>. The following code declares the `IOneWayCalculator` contract that has one-way operations for `Add`, `Subtract`, `Multiply`, and `Divide`. It also defines a request response operation called `SayHello`.  \n  \n    ```csharp  \n    [ServiceContract(Namespace = \"http://Microsoft.ServiceModel.Samples\")]  \n    public interface IOneWayCalculator  \n    {  \n        [OperationContract(IsOneWay = true)]  \n        void Add(double n1, double n2);  \n        [OperationContract(IsOneWay = true)]  \n        void Subtract(double n1, double n2);  \n        [OperationContract(IsOneWay = true)]  \n        void Multiply(double n1, double n2);  \n        [OperationContract(IsOneWay = true)]  \n        void Divide(double n1, double n2);  \n        [OperationContract]  \n        string SayHello(string name);  \n    }  \n    ```  \n  \n2.  Implement the service contract. The following code implements the `IOnewayCalculator` interface.  \n  \n    ```csharp  \n    [ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Multiple, InstanceContextMode = InstanceContextMode.PerCall)]  \n    public class CalculatorService : IOneWayCalculator  \n    {  \n        public void Add(double n1, double n2)  \n        {  \n           double result = n1 + n2;  \n           Console.WriteLine(\"Add({0},{1}) = {2} \", n1, n2, result);  \n        }  \n  \n        public void Subtract(double n1, double n2)  \n        {  \n           double result = n1 - n2;  \n           Console.WriteLine(\"Subtract({0},{1}) = {2}\", n1, n2, result);  \n        }  \n  \n        public void Multiply(double n1, double n2)  \n        {  \n            double result = n1 * n2;  \n            Console.WriteLine(\"Multiply({0},{1}) = {2}\", n1, n2, result);  \n        }  \n  \n        public void Divide(double n1, double n2)  \n        {  \n            double result = n1 / n2;  \n            Console.WriteLine(\"Divide({0},{1}) = {2}\", n1, n2, result);  \n        }  \n  \n        public string SayHello(string name)  \n        {  \n            Console.WriteLine(\"SayHello({0})\", name);  \n            return \"Hello \" + name;  \n        }  \n    }  \n    ```  \n  \n3.  Host the service in a console application. The following code shows how to host the service.  \n  \n    ```csharp  \n    // Host the service within this EXE console application.  \n    public static void Main()  \n    {  \n       // Define the base address for the service.  \n       Uri baseAddress = new Uri(\"http://localhost:8000/servicemodelsamples/service\");  \n  \n       // Create a ServiceHost for the CalculatorService type and provide the base address.  \n       using (ServiceHost serviceHost = new ServiceHost(typeof(CalculatorService), baseAddress))  \n       {  \n            // Add an endpoint using the IOneWayCalculator contract and the WSHttpBinding  \n            serviceHost.AddServiceEndpoint(typeof(IOneWayCalculator), new WSHttpBinding(), \"\");  \n  \n          // Turn on the metadata behavior, this allows svcutil to get metadata for the service.  \n          ServiceMetadataBehavior smb = (ServiceMetadataBehavior) serviceHost.Description.Behaviors.Find<ServiceMetadataBehavior>();  \n          if (smb == null)  \n          {  \n                smb = new ServiceMetadataBehavior();  \n                smb.HttpGetEnabled = true;  \n                serviceHost.Description.Behaviors.Add(smb);  \n          }  \n  \n          // Open the ServiceHostBase to create listeners and start listening for messages.  \n          serviceHost.Open();  \n  \n          // The service can now be accessed.  \n          Console.WriteLine(\"The service is ready.\");  \n          Console.WriteLine(\"Press <ENTER> to terminate service.\");  \n          Console.WriteLine();  \n          Console.ReadLine();  \n        }  \n    }  \n    ```  \n  \n### To access the service  \n  \n1.  Run the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) using the metadata exchange endpoint address to create the client class for the service using the following command line: `Svcutil http://localhost:8000/Service` The [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) generates a set of interfaces and classes, as shown in the following sample code.  \n  \n    ```csharp  \n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"3.0.0.0\")]  \n    [System.ServiceModel.ServiceContractAttribute(Namespace=\"http://Microsoft.ServiceModel.Samples\", ConfigurationName=\"IOneWayCalculator\")]  \n    public interface IOneWayCalculator  \n    {  \n  \n        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action=\"http://Microsoft.ServiceModel.Samples/IOneWayCalculator/Add\")]  \n        void Add(double n1, double n2);  \n  \n        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action=\"http://Microsoft.ServiceModel.Samples/IOneWayCalculator/Subtract\")]  \n        void Subtract(double n1, double n2);  \n  \n        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action=\"http://Microsoft.ServiceModel.Samples/IOneWayCalculator/Multiply\")]  \n        void Multiply(double n1, double n2);  \n  \n        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action=\"http://Microsoft.ServiceModel.Samples/IOneWayCalculator/Divide\")]  \n        void Divide(double n1, double n2);  \n  \n        [System.ServiceModel.OperationContractAttribute(Action=\"http://Microsoft.ServiceModel.Samples/IOneWayCalculator/SayHello\", ReplyAction=\"http://Microsoft.ServiceModel.Samples/IOneWayCalculator/SayHelloResponse\")]  \n        string SayHello(string name);  \n    }  \n  \n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"3.0.0.0\")]  \n    public interface IOneWayCalculatorChannel : IOneWayCalculator, System.ServiceModel.IClientChannel  \n    {  \n    }  \n  \n    [System.Diagnostics.DebuggerStepThroughAttribute()]  \n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"3.0.0.0\")]  \n    public partial class OneWayCalculatorClient : System.ServiceModel.ClientBase<IOneWayCalculator>, IOneWayCalculator  \n    {  \n  \n        public OneWayCalculatorClient()  \n        {  \n        }  \n  \n        public OneWayCalculatorClient(string endpointConfigurationName) :   \n                base(endpointConfigurationName)  \n        {  \n        }  \n  \n        public OneWayCalculatorClient(string endpointConfigurationName, string remoteAddress) :   \n                base(endpointConfigurationName, remoteAddress)  \n        {  \n        }  \n  \n        public OneWayCalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :   \n                base(endpointConfigurationName, remoteAddress)  \n        {  \n        }  \n  \n        public OneWayCalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :   \n                base(binding, remoteAddress)  \n        {  \n        }  \n  \n        public void Add(double n1, double n2)  \n        {  \n            base.Channel.Add(n1, n2);  \n        }  \n  \n        public void Subtract(double n1, double n2)  \n        {  \n            base.Channel.Subtract(n1, n2);  \n        }  \n  \n        public void Multiply(double n1, double n2)  \n        {  \n            base.Channel.Multiply(n1, n2);  \n        }  \n  \n        public void Divide(double n1, double n2)  \n        {  \n            base.Channel.Divide(n1, n2);  \n        }  \n  \n        public string SayHello(string name)  \n        {  \n            return base.Channel.SayHello(name);  \n        }  \n    }  \n    ```  \n  \n     Notice in the `IOneWayCalculator` interface that the one-way service operations have the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> attribute set to `true` and the request-reply service operation has the attribute set to the default value, `false`. Also notice the `OneWayCalculatorClient` class. This is the class that you will use to call the service.  \n  \n2.  Create the client object.  \n  \n    ```csharp  \n    // Create a client  \n    WSHttpBinding binding = new WSHttpBinding();  \n    EndpointAddress epAddress = new EndpointAddress(\"http://localhost:8000/servicemodelsamples/service\");  \n    OneWayCalculatorClient client = new OneWayCalculatorClient(binding, epAddress);  \n    ```  \n  \n3.  Call service operations.  \n  \n    ```csharp  \n    // Call the Add service operation.  \n    double value1 = 100.00D;  \n    double value2 = 15.99D;  \n    client.Add(value1, value2);  \n    Console.WriteLine(\"Add({0},{1})\", value1, value2);  \n  \n    // Call the Subtract service operation.  \n    value1 = 145.00D;  \n    value2 = 76.54D;  \n    client.Subtract(value1, value2);  \n    Console.WriteLine(\"Subtract({0},{1})\", value1, value2);  \n  \n    // Call the Multiply service operation.  \n    value1 = 9.00D;  \n    value2 = 81.25D;  \n    client.Multiply(value1, value2);  \n    Console.WriteLine(\"Multiply({0},{1})\", value1, value2);  \n  \n    // Call the Divide service operation.  \n    value1 = 22.00D;  \n    value2 = 7.00D;  \n    client.Divide(value1, value2);  \n    Console.WriteLine(\"Divide({0},{1})\", value1, value2);  \n  \n    // Call the SayHello service operation  \n    string name = \"World\";  \n    string response = client.SayHello(name);  \n    Console.WriteLine(\"SayHello([0])\", name);  \n    Console.WriteLine(\"SayHello() returned: \" + response);  \n    ```  \n  \n4.  Close the client to close connections and clean up resources.  \n  \n    ```csharp  \n    //Closing the client gracefully closes the connection and cleans up resources  \n    client.Close();  \n    ```  \n  \n## Example  \n The following is a complete listing of the code used  in this topic.  \n  \n```csharp  \n// Service.cs  \nusing System;  \nusing System.Configuration;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Description;  \n  \nnamespace Microsoft.ServiceModel.Samples  \n{  \n    // Define a service contract.   \n    [ServiceContract(Namespace = \"http://Microsoft.ServiceModel.Samples\")]  \n    public interface IOneWayCalculator  \n    {  \n        [OperationContract(IsOneWay = true)]  \n        void Add(double n1, double n2);  \n        [OperationContract(IsOneWay = true)]  \n        void Subtract(double n1, double n2);  \n        [OperationContract(IsOneWay = true)]  \n        void Multiply(double n1, double n2);  \n        [OperationContract(IsOneWay = true)]  \n        void Divide(double n1, double n2);  \n        [OperationContract]  \n        string SayHello(string name);  \n    }  \n  \n    // Service class which implements the service contract.  \n    // Added code to write output to the console window  \n    [ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Multiple, InstanceContextMode = InstanceContextMode.PerCall)]  \n    public class CalculatorService : IOneWayCalculator  \n    {  \n        public void Add(double n1, double n2)  \n        {  \n            double result = n1 + n2;  \n            Console.WriteLine(\"Add({0},{1}) = {2} \", n1, n2, result);  \n        }  \n  \n        public void Subtract(double n1, double n2)  \n        {  \n            double result = n1 - n2;  \n            Console.WriteLine(\"Subtract({0},{1}) = {2}\", n1, n2, result);  \n        }  \n  \n        public void Multiply(double n1, double n2)  \n        {  \n            double result = n1 * n2;  \n            Console.WriteLine(\"Multiply({0},{1}) = {2}\", n1, n2, result);  \n        }  \n  \n        public void Divide(double n1, double n2)  \n        {  \n            double result = n1 / n2;  \n            Console.WriteLine(\"Divide({0},{1}) = {2}\", n1, n2, result);  \n        }  \n  \n        public string SayHello(string name)  \n        {  \n            Console.WriteLine(\"SayHello({0})\", name);  \n            return \"Hello \" + name;  \n        }  \n  \n        // Host the service within this EXE console application.  \n        public static void Main()  \n        {  \n            // Define the base address for the service.  \n            Uri baseAddress = new Uri(\"http://localhost:8000/servicemodelsamples/service\");  \n  \n            // Create a ServiceHost for the CalculatorService type and provide the base address.  \n            using (ServiceHost serviceHost = new ServiceHost(typeof(CalculatorService), baseAddress))  \n            {  \n                // Add an endpoint using the IOneWayCalculator contract and the WSHttpBinding  \n                serviceHost.AddServiceEndpoint(typeof(IOneWayCalculator), new WSHttpBinding(), \"\");  \n  \n                // Turn on the metadata behavior, this allows svcutil to get metadata for the service.  \n                ServiceMetadataBehavior smb = (ServiceMetadataBehavior) serviceHost.Description.Behaviors.Find<ServiceMetadataBehavior>();  \n                if (smb == null)  \n                {  \n                    smb = new ServiceMetadataBehavior();  \n                    smb.HttpGetEnabled = true;  \n                    serviceHost.Description.Behaviors.Add(smb);  \n                }  \n  \n                // Open the ServiceHostBase to create listeners and start listening for messages.  \n                serviceHost.Open();  \n  \n                // The service can now be accessed.  \n                Console.WriteLine(\"The service is ready.\");  \n                Console.WriteLine(\"Press <ENTER> to terminate service.\");  \n                Console.WriteLine();  \n                Console.ReadLine();  \n            }  \n        }  \n    }  \n} \n```\n\n```csharp\n// client.cs  \nusing System;  \nusing System.ServiceModel;  \n  \nnamespace Microsoft.ServiceModel.Samples  \n{  \n    //The service contract is defined in generatedClient.cs, generated from the service by the svcutil tool.  \n  \n    //Client implementation code.  \n    class Client  \n    {  \n        static void Main()  \n        {  \n            // Create a client  \n            WSHttpBinding binding = new WSHttpBinding();  \n            EndpointAddress epAddress = new EndpointAddress(\"http://localhost:8000/servicemodelsamples/service\");  \n            OneWayCalculatorClient client = new OneWayCalculatorClient(binding, epAddress);  \n  \n            // Call the Add service operation.  \n            double value1 = 100.00D;  \n            double value2 = 15.99D;  \n            client.Add(value1, value2);  \n            Console.WriteLine(\"Add({0},{1})\", value1, value2);  \n  \n            // Call the Subtract service operation.  \n            value1 = 145.00D;  \n            value2 = 76.54D;  \n            client.Subtract(value1, value2);  \n            Console.WriteLine(\"Subtract({0},{1})\", value1, value2);  \n  \n            // Call the Multiply service operation.  \n            value1 = 9.00D;  \n            value2 = 81.25D;  \n            client.Multiply(value1, value2);  \n            Console.WriteLine(\"Multiply({0},{1})\", value1, value2);  \n  \n            // Call the Divide service operation.  \n            value1 = 22.00D;  \n            value2 = 7.00D;  \n            client.Divide(value1, value2);  \n            Console.WriteLine(\"Divide({0},{1})\", value1, value2);  \n  \n            // Call the SayHello service operation  \n            string name = \"World\";  \n            string response = client.SayHello(name);  \n            Console.WriteLine(\"SayHello([0])\", name);  \n            Console.WriteLine(\"SayHello() returned: \" + response);  \n            //Closing the client gracefully closes the connection and cleans up resources  \n            client.Close();  \n  \n        }  \n    }  \n}  \n```  \n  \n## See Also  \n [One-Way Services](../../../../docs/framework/wcf/feature-details/one-way-services.md)","nodes":[{"pos":[12,97],"content":"How to: Access WCF Services with One-Way and Request-Reply Contracts | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Access WCF Services with One-Way and Request-Reply Contracts | Microsoft Docs","pos":[0,85]}]},{"pos":[395,463],"content":"How to: Access WCF Services with One-Way and Request-Reply Contracts","linkify":"How to: Access WCF Services with One-Way and Request-Reply Contracts","nodes":[{"content":"How to: Access WCF Services with One-Way and Request-Reply Contracts","pos":[0,68]}]},{"pos":[464,694],"content":"The following procedures describe how to access a <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service that defines a one-way contract and a request-reply contract and that does not use the duplex communication pattern.","source":"The following procedures describe how to access a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service that defines a one-way contract and a request-reply contract and that does not use the duplex communication pattern."},{"pos":[704,725],"content":"To define the service","linkify":"To define the service","nodes":[{"content":"To define the service","pos":[0,21]}]},{"content":"Declare the service contract.","pos":[735,764]},{"content":"The operations that are to be one-way must have <ph id=\"ph1\">`IsOneWay`</ph> set to <ph id=\"ph2\">`true`</ph> within the <ph id=\"ph3\">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>.","pos":[765,903],"source":" The operations that are to be one-way must have `IsOneWay` set to `true` within the <xref:System.ServiceModel.OperationContractAttribute>."},{"content":"The following code declares the <ph id=\"ph1\">`IOneWayCalculator`</ph> contract that has one-way operations for <ph id=\"ph2\">`Add`</ph>, <ph id=\"ph3\">`Subtract`</ph>, <ph id=\"ph4\">`Multiply`</ph>, and <ph id=\"ph5\">`Divide`</ph>.","pos":[904,1041],"source":" The following code declares the `IOneWayCalculator` contract that has one-way operations for `Add`, `Subtract`, `Multiply`, and `Divide`."},{"content":"It also defines a request response operation called <ph id=\"ph1\">`SayHello`</ph>.","pos":[1042,1105],"source":" It also defines a request response operation called `SayHello`."},{"content":"Implement the service contract.","pos":[1717,1748]},{"content":"The following code implements the <ph id=\"ph1\">`IOnewayCalculator`</ph> interface.","pos":[1749,1813],"source":" The following code implements the `IOnewayCalculator` interface."},{"content":"Host the service in a console application.","pos":[2971,3013]},{"content":"The following code shows how to host the service.","pos":[3014,3063]},{"pos":[4591,4612],"content":"To access the service","linkify":"To access the service","nodes":[{"content":"To access the service","pos":[0,21]}]},{"pos":[4622,5143],"content":"Run the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> using the metadata exchange endpoint address to create the client class for the service using the following command line: <ph id=\"ph1\">`Svcutil http://localhost:8000/Service`</ph> The <bpt id=\"p2\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p2\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> generates a set of interfaces and classes, as shown in the following sample code.","source":"Run the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) using the metadata exchange endpoint address to create the client class for the service using the following command line: `Svcutil http://localhost:8000/Service` The [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) generates a set of interfaces and classes, as shown in the following sample code."},{"content":"Notice in the <ph id=\"ph1\">`IOneWayCalculator`</ph> interface that the one-way service operations have the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> attribute set to <ph id=\"ph3\">`true`</ph> and the request-reply service operation has the attribute set to the default value, <ph id=\"ph4\">`false`</ph>.","pos":[8475,8746],"source":"Notice in the `IOneWayCalculator` interface that the one-way service operations have the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> attribute set to `true` and the request-reply service operation has the attribute set to the default value, `false`."},{"content":"Also notice the <ph id=\"ph1\">`OneWayCalculatorClient`</ph> class.","pos":[8747,8794],"source":" Also notice the `OneWayCalculatorClient` class."},{"content":"This is the class that you will use to call the service.","pos":[8795,8851]},{"content":"Create the client object.","pos":[8861,8886]},{"content":"Call service operations.","pos":[9195,9219]},{"content":"Close the client to close connections and clean up resources.","pos":[10265,10326]},{"pos":[10470,10477],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is a complete listing of the code used  in this topic.","pos":[10481,10549]},{"pos":[16253,16261],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[16265,16351],"content":"<bpt id=\"p1\">[</bpt>One-Way Services<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/one-way-services.md)</ept>","source":"[One-Way Services](../../../../docs/framework/wcf/feature-details/one-way-services.md)"}]}