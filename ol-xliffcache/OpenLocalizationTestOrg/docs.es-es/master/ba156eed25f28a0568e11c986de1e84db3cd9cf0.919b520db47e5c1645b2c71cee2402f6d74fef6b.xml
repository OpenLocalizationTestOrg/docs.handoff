{"content":"---\ntitle: C# for statement\nms.date: 06/13/2018\nf1_keywords:\n  - \"for\"\n  - \"for_CSharpKeyword\"\nhelpviewer_keywords:\n  - \"for keyword [C#]\"\nms.assetid: 34041a40-2c87-467a-9ffb-a0417d8f67a8\n---\n# for (C# reference)\n\nThe `for` statement executes a statement or a block of statements while a specified Boolean expression evaluates to `true`.\n\nAt any point within the `for` statement block, you can break out of the loop by using the [break](break.md) statement, or step to the next iteration in the loop by using the [continue](continue.md) statement. You also can exit a `for` loop by the [goto](goto.md), [return](return.md), or [throw](throw.md) statements.\n\n## Structure of the `for` statement\n\nThe `for` statement defines *initializer*, *condition*, and *iterator* sections:\n\n```csharp\nfor (initializer; condition; iterator)\n    body\n```\n\nAll three sections are optional. The body of the loop is either a statement or a block of statements.\n\nThe following example shows the `for` statement with all of the sections defined:\n\n[!code-csharp-interactive[for loop example](~/samples/snippets/csharp/keywords/IterationKeywordsExamples.cs#5)]\n\n### The *initializer* section\n\nThe statements in the *initializer* section are executed only once, before entering the loop. The *initializer* section is either of the following:\n\n- The declaration and initialization of a local loop variable, which can't be accessed from outside the loop.\n\n- Zero or more statement expressions from the following list, separated by commas:\n\n  - [assignment](../operators/assignment-operator.md) statement\n\n  - invocation of a method\n\n  - prefix or postfix [increment](../operators/arithmetic-operators.md#increment-operator-) expression, such as `++i` or `i++`\n\n  - prefix or postfix [decrement](../operators/arithmetic-operators.md#decrement-operator---) expression, such as `--i` or `i--`\n\n  - creation of an object by using [new](new-operator.md) keyword\n\n  - [await](await.md) expression\n\nThe *initializer* section in the example above declares and initializes the local loop variable `i`:\n\n```csharp\nint i = 0\n```\n\n### The *condition* section\n\nThe *condition* section, if present, must be a boolean expression. That expression is evaluated before every loop iteration. If the *condition* section is not present or the boolean expression evaluates to `true`, the next loop iteration is executed; otherwise, the loop is exited.\n\nThe *condition* section in the example above determines if the loop terminates based on the value of the local loop variable:\n\n```csharp\ni < 5\n```\n\n### The *iterator* section\n\nThe *iterator* section defines what happens after each iteration of the body of the loop. The *iterator* section contains zero or more of the following statement expressions, separated by commas:\n\n- [assignment](../operators/assignment-operator.md) statement\n\n- invocation of a method\n\n- prefix or postfix [increment](../operators/arithmetic-operators.md#increment-operator-) expression, such as `++i` or `i++`\n\n- prefix or postfix [decrement](../operators/arithmetic-operators.md#decrement-operator---) expression, such as `--i` or `i--`\n\n- creation of an object by using [new](new-operator.md) keyword\n\n- [await](await.md) expression\n\nThe *iterator* section in the example above increments the local loop variable:\n\n```csharp\ni++\n```\n\n## Examples\n\nThe following example illustrates several less common usages of the `for` statement sections: assigning a value to an external loop variable in the *initializer* section, invoking a method in both the *initializer* and the *iterator* sections, and changing the values of two variables in the *iterator* section. Select **Run** to run the example code. After that you can modify the code and run it again.\n\n[!code-csharp-interactive[not typical for loop example](~/samples/snippets/csharp/keywords/IterationKeywordsExamples.cs#6)]\n\nThe following example defines the infinite `for` loop:\n\n[!code-csharp[infinite for loop example](~/samples/snippets/csharp/keywords/IterationKeywordsExamples.cs#7)]\n\n## C# language specification\n\nFor more information, see [The for statement](~/_csharplang/spec/statements.md#the-for-statement) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Iteration Statements](iteration-statements.md)\n- [foreach, in](foreach-in.md)\n","nodes":[{"pos":[4,187],"embed":true,"restype":"x-metadata","content":"title: C# for statement\nms.date: 06/13/2018\nf1_keywords:\n  - \"for\"\n  - \"for_CSharpKeyword\"\nhelpviewer_keywords:\n  - \"for keyword [C#]\"\nms.assetid: 34041a40-2c87-467a-9ffb-a0417d8f67a8","nodes":[{"content":"C# for statement","nodes":[{"pos":[0,16],"content":"C# for statement","nodes":[{"content":"C# for statement","pos":[0,16]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[194,212],"content":"for (C# reference)","linkify":"for (C# reference)","nodes":[{"content":"for (C# reference)","pos":[0,18]}]},{"pos":[214,337],"content":"The <ph id=\"ph1\">`for`</ph> statement executes a statement or a block of statements while a specified Boolean expression evaluates to <ph id=\"ph2\">`true`</ph>.","source":"The `for` statement executes a statement or a block of statements while a specified Boolean expression evaluates to `true`."},{"content":"At any point within the <ph id=\"ph1\">`for`</ph> statement block, you can break out of the loop by using the <bpt id=\"p1\">[</bpt>break<ept id=\"p1\">](break.md)</ept> statement, or step to the next iteration in the loop by using the <bpt id=\"p2\">[</bpt>continue<ept id=\"p2\">](continue.md)</ept> statement.","pos":[339,547],"source":"At any point within the `for` statement block, you can break out of the loop by using the [break](break.md) statement, or step to the next iteration in the loop by using the [continue](continue.md) statement."},{"content":"You also can exit a <ph id=\"ph1\">`for`</ph> loop by the <bpt id=\"p1\">[</bpt>goto<ept id=\"p1\">](goto.md)</ept>, <bpt id=\"p2\">[</bpt>return<ept id=\"p2\">](return.md)</ept>, or <bpt id=\"p3\">[</bpt>throw<ept id=\"p3\">](throw.md)</ept> statements.","pos":[548,656],"source":" You also can exit a `for` loop by the [goto](goto.md), [return](return.md), or [throw](throw.md) statements."},{"pos":[661,693],"content":"Structure of the <ph id=\"ph1\">`for`</ph> statement","linkify":"Structure of the `for` statement","source":"Structure of the `for` statement"},{"pos":[695,775],"content":"The <ph id=\"ph1\">`for`</ph> statement defines <bpt id=\"p1\">*</bpt>initializer<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>condition<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>iterator<ept id=\"p3\">*</ept> sections:","source":"The `for` statement defines *initializer*, *condition*, and *iterator* sections:"},{"content":"All three sections are optional.","pos":[840,872]},{"content":"The body of the loop is either a statement or a block of statements.","pos":[873,941]},{"pos":[943,1024],"content":"The following example shows the <ph id=\"ph1\">`for`</ph> statement with all of the sections defined:","source":"The following example shows the `for` statement with all of the sections defined:"},{"pos":[1143,1168],"content":"The <bpt id=\"p1\">*</bpt>initializer<ept id=\"p1\">*</ept> section","linkify":"The *initializer* section","source":"The *initializer* section"},{"content":"The statements in the <bpt id=\"p1\">*</bpt>initializer<ept id=\"p1\">*</ept> section are executed only once, before entering the loop.","pos":[1170,1263],"source":"The statements in the *initializer* section are executed only once, before entering the loop."},{"content":"The <bpt id=\"p1\">*</bpt>initializer<ept id=\"p1\">*</ept> section is either of the following:","pos":[1264,1317],"source":" The *initializer* section is either of the following:"},{"content":"The declaration and initialization of a local loop variable, which can't be accessed from outside the loop.","pos":[1321,1428]},{"content":"Zero or more statement expressions from the following list, separated by commas:","pos":[1432,1512]},{"pos":[1518,1577],"content":"<bpt id=\"p1\">[</bpt>assignment<ept id=\"p1\">](../operators/assignment-operator.md)</ept> statement","source":"[assignment](../operators/assignment-operator.md) statement"},{"content":"invocation of a method","pos":[1583,1605]},{"pos":[1611,1733],"content":"prefix or postfix <bpt id=\"p1\">[</bpt>increment<ept id=\"p1\">](../operators/arithmetic-operators.md#increment-operator-)</ept> expression, such as <ph id=\"ph1\">`++i`</ph> or <ph id=\"ph2\">`i++`</ph>","source":"prefix or postfix [increment](../operators/arithmetic-operators.md#increment-operator-) expression, such as `++i` or `i++`"},{"pos":[1739,1863],"content":"prefix or postfix <bpt id=\"p1\">[</bpt>decrement<ept id=\"p1\">](../operators/arithmetic-operators.md#decrement-operator---)</ept> expression, such as <ph id=\"ph1\">`--i`</ph> or <ph id=\"ph2\">`i--`</ph>","source":"prefix or postfix [decrement](../operators/arithmetic-operators.md#decrement-operator---) expression, such as `--i` or `i--`"},{"pos":[1869,1930],"content":"creation of an object by using <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](new-operator.md)</ept> keyword","source":"creation of an object by using [new](new-operator.md) keyword"},{"pos":[1936,1964],"content":"<bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](await.md)</ept> expression","source":"[await](await.md) expression"},{"pos":[1966,2066],"content":"The <bpt id=\"p1\">*</bpt>initializer<ept id=\"p1\">*</ept> section in the example above declares and initializes the local loop variable <ph id=\"ph1\">`i`</ph>:","source":"The *initializer* section in the example above declares and initializes the local loop variable `i`:"},{"pos":[2097,2120],"content":"The <bpt id=\"p1\">*</bpt>condition<ept id=\"p1\">*</ept> section","linkify":"The *condition* section","source":"The *condition* section"},{"content":"The <bpt id=\"p1\">*</bpt>condition<ept id=\"p1\">*</ept> section, if present, must be a boolean expression.","pos":[2122,2188],"source":"The *condition* section, if present, must be a boolean expression."},{"content":"That expression is evaluated before every loop iteration.","pos":[2189,2246]},{"content":"If the <bpt id=\"p1\">*</bpt>condition<ept id=\"p1\">*</ept> section is not present or the boolean expression evaluates to <ph id=\"ph1\">`true`</ph>, the next loop iteration is executed; otherwise, the loop is exited.","pos":[2247,2403],"source":" If the *condition* section is not present or the boolean expression evaluates to `true`, the next loop iteration is executed; otherwise, the loop is exited."},{"pos":[2405,2530],"content":"The <bpt id=\"p1\">*</bpt>condition<ept id=\"p1\">*</ept> section in the example above determines if the loop terminates based on the value of the local loop variable:","source":"The *condition* section in the example above determines if the loop terminates based on the value of the local loop variable:"},{"pos":[2557,2579],"content":"The <bpt id=\"p1\">*</bpt>iterator<ept id=\"p1\">*</ept> section","linkify":"The *iterator* section","source":"The *iterator* section"},{"content":"The <bpt id=\"p1\">*</bpt>iterator<ept id=\"p1\">*</ept> section defines what happens after each iteration of the body of the loop.","pos":[2581,2670],"source":"The *iterator* section defines what happens after each iteration of the body of the loop."},{"content":"The <bpt id=\"p1\">*</bpt>iterator<ept id=\"p1\">*</ept> section contains zero or more of the following statement expressions, separated by commas:","pos":[2671,2776],"source":" The *iterator* section contains zero or more of the following statement expressions, separated by commas:"},{"pos":[2780,2839],"content":"<bpt id=\"p1\">[</bpt>assignment<ept id=\"p1\">](../operators/assignment-operator.md)</ept> statement","source":"[assignment](../operators/assignment-operator.md) statement"},{"content":"invocation of a method","pos":[2843,2865]},{"pos":[2869,2991],"content":"prefix or postfix <bpt id=\"p1\">[</bpt>increment<ept id=\"p1\">](../operators/arithmetic-operators.md#increment-operator-)</ept> expression, such as <ph id=\"ph1\">`++i`</ph> or <ph id=\"ph2\">`i++`</ph>","source":"prefix or postfix [increment](../operators/arithmetic-operators.md#increment-operator-) expression, such as `++i` or `i++`"},{"pos":[2995,3119],"content":"prefix or postfix <bpt id=\"p1\">[</bpt>decrement<ept id=\"p1\">](../operators/arithmetic-operators.md#decrement-operator---)</ept> expression, such as <ph id=\"ph1\">`--i`</ph> or <ph id=\"ph2\">`i--`</ph>","source":"prefix or postfix [decrement](../operators/arithmetic-operators.md#decrement-operator---) expression, such as `--i` or `i--`"},{"pos":[3123,3184],"content":"creation of an object by using <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](new-operator.md)</ept> keyword","source":"creation of an object by using [new](new-operator.md) keyword"},{"pos":[3188,3216],"content":"<bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](await.md)</ept> expression","source":"[await](await.md) expression"},{"pos":[3218,3297],"content":"The <bpt id=\"p1\">*</bpt>iterator<ept id=\"p1\">*</ept> section in the example above increments the local loop variable:","source":"The *iterator* section in the example above increments the local loop variable:"},{"pos":[3321,3329],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example illustrates several less common usages of the <ph id=\"ph1\">`for`</ph> statement sections: assigning a value to an external loop variable in the <bpt id=\"p1\">*</bpt>initializer<ept id=\"p1\">*</ept> section, invoking a method in both the <bpt id=\"p2\">*</bpt>initializer<ept id=\"p2\">*</ept> and the <bpt id=\"p3\">*</bpt>iterator<ept id=\"p3\">*</ept> sections, and changing the values of two variables in the <bpt id=\"p4\">*</bpt>iterator<ept id=\"p4\">*</ept> section.","pos":[3331,3642],"source":"The following example illustrates several less common usages of the `for` statement sections: assigning a value to an external loop variable in the *initializer* section, invoking a method in both the *initializer* and the *iterator* sections, and changing the values of two variables in the *iterator* section."},{"content":"Select <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> to run the example code.","pos":[3643,3682],"source":" Select **Run** to run the example code."},{"content":"After that you can modify the code and run it again.","pos":[3683,3735]},{"pos":[3862,3916],"content":"The following example defines the infinite <ph id=\"ph1\">`for`</ph> loop:","source":"The following example defines the infinite `for` loop:"},{"pos":[4031,4056],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[4058,4235],"content":"For more information, see <bpt id=\"p1\">[</bpt>The for statement<ept id=\"p1\">](~/_csharplang/spec/statements.md#the-for-statement)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see [The for statement](~/_csharplang/spec/statements.md#the-for-statement) section of the [C# language specification](../language-specification/index.md)."},{"pos":[4240,4248],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4252,4279],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4282,4338],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4341,4364],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[4367,4414],"content":"<bpt id=\"p1\">[</bpt>Iteration Statements<ept id=\"p1\">](iteration-statements.md)</ept>","source":"[Iteration Statements](iteration-statements.md)"},{"pos":[4417,4445],"content":"<bpt id=\"p1\">[</bpt>foreach, in<ept id=\"p1\">](foreach-in.md)</ept>","source":"[foreach, in](foreach-in.md)"}]}