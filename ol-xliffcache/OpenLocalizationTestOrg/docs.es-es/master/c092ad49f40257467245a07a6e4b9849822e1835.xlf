<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-create-a-button-by-using-xaml.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c092ad49f40257467245a07a6e4b9849822e1835</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\walkthrough-create-a-button-by-using-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01977b2e763b9698cb058822500f8c9861adee7f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7c5515ed38358bb1190adbc48b2ea401cb5cd29</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Create a Button by Using XAML</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Create a Button by Using XAML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The objective of this walkthrough is to learn how to create an animated button for use in a Windows Presentation Foundation (WPF) application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This walkthrough uses styles and a template to create a customized button resource that allows reuse of code and separation of button logic from the button declaration.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This walkthrough is written entirely in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This walkthrough guides you through the steps for creating the application by typing or copying and pasting <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> into Microsoft Visual Studio.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you would prefer to learn how to use a design tool (Microsoft Expression Blend) to create the same application, see <bpt id="p1">[</bpt>Create a Button by Using Microsoft Expression Blend<ept id="p1">](walkthrough-create-a-button-by-using-microsoft-expression-blend.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following figure shows the finished buttons.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Custom buttons that were created by using XAML<ept id="p1">]</ept><bpt id="p2">(./media/custom-button-animatedbutton-5.gif "</bpt>custom_button_AnimatedButton_5<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create Basic Buttons</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Let's start by creating a new project and adding a few buttons to the window.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To create a new WPF project and add buttons to the window</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create a new WPF project:<ept id="p1">**</ept> On the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu, point to <bpt id="p3">**</bpt>New<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>Project<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Find the <bpt id="p1">**</bpt>Windows Application (WPF)<ept id="p1">**</ept> template and name the project "AnimatedButton".</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This will create the skeleton for the application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add basic default buttons:<ept id="p1">**</ept> All the files you need for this walkthrough are provided by the template.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Open the Window1.xaml file by double clicking it in Solution Explorer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By default, there is a <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element in Window1.xaml.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element and add a few buttons to the <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> page by typing or copy and pasting the following highlighted code to Window1.xaml:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application; you should see a set of buttons that looks like the following figure.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Three basic buttons<ept id="p1">]</ept><bpt id="p2">(./media/custom-button-animatedbutton-1.gif "</bpt>custom_button_AnimatedButton_1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Now that you have created the basic buttons, you are finished working in the Window1.xaml file.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The rest of the walkthrough focuses on the app.xaml file, defining styles and a template for the buttons.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Set Basic Properties</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Next, let's set some properties on these buttons to control the button appearance and layout.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Rather than setting properties on the buttons individually, you will use resources to define button properties for the entire application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Application resources are conceptually similar to external <ph id="ph1">[!INCLUDE[TLA#tla_css](../../../../includes/tlasharptla-css-md.md)]</ph> for Web pages; however, resources are much more powerful than <ph id="ph2">[!INCLUDE[TLA#tla_css](../../../../includes/tlasharptla-css-md.md)]</ph>, as you will see by the end of this walkthrough.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To learn more about resources, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To use styles to set basic properties on the buttons</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Define an Application.Resources block:<ept id="p1">**</ept> Open app.xaml and add the following highlighted markup if it is not already there:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Resource scope is determined by where you define the resource.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Defining resources in <ph id="ph1">`Application.Resources`</ph> in the app.xaml file enables the resource to be used from anywhere in the application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To learn more about defining the scope of your resources, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create a style and define basic property values with it:<ept id="p1">**</ept> Add the following markup to the <ph id="ph1">`Application.Resources`</ph> block.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This markup creates a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> that applies to all buttons in the application, setting the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> of the buttons to 90 and the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> to 10:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property specifies that the style applies to all objects of type <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> sets a different property value for the <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Therefore, at this point every button in the application has a width of 90 and a margin of 10.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you press F5 to run the application, you see the following window.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Buttons with a width of 90 and a margin of 10<ept id="p1">]</ept><bpt id="p2">(./media/custom-button-animatedbutton-2.gif "</bpt>custom_button_AnimatedButton_2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There is much more you can do with styles, including a variety of ways to fine-tune what objects are targeted, specifying complex property values, and even using styles as input for other styles.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](styling-and-templating.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Set a style property value to a resource:<ept id="p1">**</ept> Resources enable a simple way to reuse commonly defined objects and values.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It is especially useful to define complex values using resources to make your code more modular.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the following highlighted markup to app.xaml.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Directly under the <ph id="ph1">`Application.Resources`</ph> block, you created a resource called "GrayBlueGradientBrush".</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This resource defines a horizontal gradient.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This resource can be used as a property value from anywhere in the application, including inside the button style setter for the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Now, all the buttons have a <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property value of this gradient.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It should look like the following.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Buttons with a gradient background<ept id="p1">]</ept><bpt id="p2">(./media/custom-button-animatedbutton-3.gif "</bpt>custom_button_AnimatedButton_3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create a Template That Defines the Look of the Button</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In this section, you create a template that customizes the appearance (presentation) of the button.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The button presentation is made up of several objects including rectangles and other components to give the button a unique look.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>So far, the control of how buttons look in the application has been confined to changing properties of the button.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>What if you want to make more radical changes to the button's appearance?</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Templates enable powerful control over the presentation of an object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Because templates can be used within styles, you can apply a template to all objects that the style applies to (in this walkthrough, the button).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To use the template to define the look of the button</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Set up the template:<ept id="p1">**</ept> Because controls like <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> have a <ph id="ph2">&lt;xref:System.Windows.Controls.Control.Template%2A&gt;</ph> property, you can define the template property value just like the other property values we have set in a <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph> using a <ph id="ph4">&lt;xref:System.Windows.Setter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Add the following highlighted markup to your button style.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Alter button presentation:<ept id="p1">**</ept> At this point, you need to define the template.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Add the following highlighted markup.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This markup specifies two <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> elements with rounded edges, followed by a <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> is used to host the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> of the button.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> displays the content of the button.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In this walkthrough, the content is text ("Button 1", "Button 2", "Button 3").</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>All of the template components (the rectangles and the <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>) are laid out inside of a <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It should look like the following.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt><ept id="p1">]</ept><bpt id="p2">(./media/custom-button-animatedbutton-4.gif "</bpt>custom_button_AnimatedButton_4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add a glasseffect to the template:<ept id="p1">**</ept> Next you will add the glass.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>First you create some resources that create a glass gradient effect.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Add these gradient resources anywhere within the <ph id="ph1">`Application.Resources`</ph> block:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>These resources are used as the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> for a rectangle that we insert into the <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> of the button template.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Add the following highlighted markup to the template.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> of the rectangle with the <ph id="ph2">`x:Name`</ph> property of "glassCube" is 0, so when you run the sample, you do not see the glass rectangle overlaid on top.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This is because we will later add triggers to the template for when the user interacts with the button.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, you can see what the button looks like now by changing the <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> value to 1 and running the application.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See the following figure.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Before proceeding to the next step, change the <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> back to 0.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Custom buttons that were created by using XAML<ept id="p1">]</ept><bpt id="p2">(./media/custom-button-animatedbutton-5.gif "</bpt>custom_button_AnimatedButton_5<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Create Button Interactivity</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In this section, you will create property triggers and event triggers to change property values and run animations in response to user actions such as moving the mouse pointer over the button and clicking.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An easy way to add interactivity (mouse-over, mouse-leave, click, and so on) is to define triggers within your template or style.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To create a <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph>, you define a property "condition" such as: The button <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property value is equal to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You then define setters (actions) that take place when the trigger condition is true.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To create button interactivity</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add template triggers:<ept id="p1">**</ept> Add the highlighted markup to your template.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add property triggers:<ept id="p1">**</ept> Add the highlighted markup to the <ph id="ph1">`ControlTemplate.Triggers`</ph> block:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application and see the effect as you run the mouse pointer over the buttons.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add a focus trigger:<ept id="p1">**</ept> Next, we'll add some similar setters to handle the case when the button has focus (for example, after the user clicks it).</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application and click on one of the buttons.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Notice that the button stays highlighted after you click it because it still has focus.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If you click another button, the new button gains focus while the last one loses it.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add animations for<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> <bpt id="p2">**</bpt>and<ept id="p2">**</ept> <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> <bpt id="p3">**</bpt>:<ept id="p3">**</ept> Next we add some animations to the triggers.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Add the following markup anywhere inside of the <ph id="ph1">`ControlTemplate.Triggers`</ph> block.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The glass rectangle shrinks when the mouse pointer moves over the button and returns back to normal size when the pointer leaves.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>There are two animations that are triggered when the pointer goes over the button (<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event is raised).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>These animations shrink the glass rectangle along the X and Y axis.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Notice the properties on the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> elements — <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Media.Animation.DoubleAnimation.By%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Duration%2A&gt;</ph> specifies that the animation occurs over half a second, and <ph id="ph2">&lt;xref:System.Windows.Media.Animation.DoubleAnimation.By%2A&gt;</ph> specifies that the glass shrinks by 10%.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The second event trigger (<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph>) simply stops the first one.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When you stop a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, all the animated properties return to their default values.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Therefore, when the user moves the pointer off the button, the button goes back to the way it was before the mouse pointer moved over the button.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more information about animations, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../graphics-multimedia/animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add an animation for when the button is clicked:<ept id="p1">**</ept> The final step is to add a trigger for when the user clicks the button.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Add the following markup anywhere inside of the <ph id="ph1">`ControlTemplate.Triggers`</ph> block:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application, and click one of the buttons.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When you click a button, the glass rectangle spins around.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In this walkthrough, you performed the following exercises:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Targeted a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> to an object type (<ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Controlled basic properties of the buttons in the entire application using the <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Created resources like gradients to use for property values of the <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> setters.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Customized the look of buttons in the entire application by applying a template to the buttons.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Customized behavior for the buttons in response to user actions (such as <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>) that included animation effects.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a Button by Using Microsoft Expression Blend<ept id="p1">](walkthrough-create-a-button-by-using-microsoft-expression-blend.md)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](styling-and-templating.md)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../graphics-multimedia/animation-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Painting with Solid Colors and Gradients Overview<ept id="p1">](../graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Bitmap Effects Overview<ept id="p1">](../graphics-multimedia/bitmap-effects-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>