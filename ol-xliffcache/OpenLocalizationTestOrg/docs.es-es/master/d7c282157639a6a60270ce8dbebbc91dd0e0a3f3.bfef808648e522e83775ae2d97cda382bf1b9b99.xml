{"content":"---\ntitle: \"Expression-bodied members - C# Programming Guide\"\nms.custom: seodec18\nms.date: 02/06/2019\nhelpviewer_keywords: \n  - \"expression-bodied members[C#]\"\n  - \"C# language, expresion-bodied members\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Expression-bodied members (C# programming guide)\n\nExpression body definitions let you provide a member's implementation in a very concise, readable form. You can use an expression body definition whenever the logic for any supported member, such as a method or property, consists of a single expression. An expression body definition has the following general syntax:\n\n```csharp\nmember => expression;\n```\n\nwhere *expression* is a valid expression.\n\nSupport for expression body definitions was introduced for methods and read-only properties in C# 6 and was expanded in C# 7.0. Expression body definitions can be used with the type members listed in the following table:\n\n|Member  |Supported as of... |\n|---------|---------|\n|[Method](#methods)  |C# 6 |\n|[Read-only property](#read-only-properties)   |C# 6  |\n|[Property](#properties)  |C# 7.0 |\n|[Constructor](#constructors)   |C# 7.0 |\n|[Finalizer](#finalizers)     |C# 7.0 |\n|[Indexer](#indexers)       |C# 7.0 |\n\n## Methods\n\nAn expression-bodied method consists of a single expression that returns a value whose type matches the method's return type, or, for methods that return `void`, that performs some operation. For example, types that override the <xref:System.Object.ToString%2A> method typically include a single expression that returns the string representation of the current object.\n\nThe following example defines a `Person` class that overrides the <xref:System.Object.ToString%2A> method with an expression body definition. It also defines a `DisplayName` method that displays a name to the console. Note that the `return` keyword is not used in the `ToString` expression body definition.\n\n[!code-csharp[expression-bodied-methods](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-methods.cs)]  \n\nFor more information, see [Methods (C# Programming Guide)](../classes-and-structs/methods.md).\n\n## Read-only properties\n\nStarting with C# 6, you can use expression body definition to implement a read-only property. To do that, use the following syntax:\n\n```csharp\nPropertyType PropertyName => expression;\n```\n\nThe following example defines a `Location` class whose read-only `Name` property is implemented as an expression body definition that returns the value of the private `locationName` field:\n\n[!code-csharp[expression-bodied-read-only-property](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-readonly.cs#1)]  \n\nFor more information about properties, see [Properties (C# Programming Guide)](../classes-and-structs/properties.md).\n\n## Properties\n\nStarting with C# 7.0, you can use expression body definitions to implement property `get` and `set` accessors. The following example demonstrates how to do that:\n\n[!code-csharp[expression-bodied-property-get-set](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-ctor.cs#1)]\n\nFor more information about properties, see [Properties (C# Programming Guide)](../classes-and-structs/properties.md).\n\n## Constructors\n\nAn expression body definition for a constructor typically consists of a single assignment expression or a method call that handles the constructor's arguments or initializes instance state.\n\nThe following example defines a `Location` class whose constructor has a single string parameter named *name*. The expression body definition assigns the argument to the `Name` property.\n\n[!code-csharp[expression-bodied-constructor](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-ctor.cs#1)]  \n\nFor more information, see [Constructors (C# Programming Guide)](../classes-and-structs/constructors.md).\n\n## Finalizers\n\nAn expression body definition for a finalizer typically contains cleanup statements, such as statements that release unmanaged resources.\n\nThe following example defines a finalizer that uses an expression body definition to indicate that the finalizer has been called.\n\n[!code-csharp[expression-bodied-finalizer](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-destructor.cs#1)]  \n\nFor more information, see [Finalizers (C# Programming Guide)](../classes-and-structs/destructors.md).\n\n## Indexers\n\nLike properties, an indexer's get and set accessors consist of expression body definitions if the get accessor consists of a single statement that returns a value or the set accessor performs a simple assignment.\n\nThe following example defines a class named `Sports` that includes an internal <xref:System.String> array that contains the names of a number of sports. Both the indexer's get and set accessors are implemented as expression body definitions.\n\n[!code-csharp[expression-bodied-indexer](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-indexers.cs#1)]\n\nFor more information, see [Indexers (C# Programming Guide)](../indexers/index.md).\n","nodes":[{"pos":[4,243],"embed":true,"restype":"x-metadata","content":"title: \"Expression-bodied members - C# Programming Guide\"\nms.custom: seodec18\nms.date: 02/06/2019\nhelpviewer_keywords: \n  - \"expression-bodied members[C#]\"\n  - \"C# language, expresion-bodied members\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Expression-bodied members - C# Programming Guide","nodes":[{"pos":[0,48],"content":"Expression-bodied members - C# Programming Guide","nodes":[{"content":"Expression-bodied members - C# Programming Guide","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[250,298],"content":"Expression-bodied members (C# programming guide)","linkify":"Expression-bodied members (C# programming guide)","nodes":[{"content":"Expression-bodied members (C# programming guide)","pos":[0,48]}]},{"content":"Expression body definitions let you provide a member's implementation in a very concise, readable form.","pos":[300,403]},{"content":"You can use an expression body definition whenever the logic for any supported member, such as a method or property, consists of a single expression.","pos":[404,553]},{"content":"An expression body definition has the following general syntax:","pos":[554,617]},{"pos":[656,697],"content":"where <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is a valid expression.","source":"where *expression* is a valid expression."},{"content":"Support for expression body definitions was introduced for methods and read-only properties in C# 6 and was expanded in C# 7.0.","pos":[699,826]},{"content":"Expression body definitions can be used with the type members listed in the following table:","pos":[827,919]},{"content":"Member","pos":[922,928]},{"content":"Supported as of...","pos":[931,949]},{"pos":[975,993],"content":"<bpt id=\"p1\">[</bpt>Method<ept id=\"p1\">](#methods)</ept>","source":"[Method](#methods)"},{"content":"C# 6","pos":[996,1000]},{"pos":[1004,1047],"content":"<bpt id=\"p1\">[</bpt>Read-only property<ept id=\"p1\">](#read-only-properties)</ept>","source":"[Read-only property](#read-only-properties)"},{"content":"C# 6","pos":[1051,1055]},{"pos":[1060,1083],"content":"<bpt id=\"p1\">[</bpt>Property<ept id=\"p1\">](#properties)</ept>","source":"[Property](#properties)"},{"content":"C# 7.0","pos":[1086,1092]},{"pos":[1096,1124],"content":"<bpt id=\"p1\">[</bpt>Constructor<ept id=\"p1\">](#constructors)</ept>","source":"[Constructor](#constructors)"},{"content":"C# 7.0","pos":[1128,1134]},{"pos":[1138,1162],"content":"<bpt id=\"p1\">[</bpt>Finalizer<ept id=\"p1\">](#finalizers)</ept>","source":"[Finalizer](#finalizers)"},{"content":"C# 7.0","pos":[1168,1174]},{"pos":[1178,1198],"content":"<bpt id=\"p1\">[</bpt>Indexer<ept id=\"p1\">](#indexers)</ept>","source":"[Indexer](#indexers)"},{"content":"C# 7.0","pos":[1206,1212]},{"pos":[1219,1226],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"An expression-bodied method consists of a single expression that returns a value whose type matches the method's return type, or, for methods that return <ph id=\"ph1\">`void`</ph>, that performs some operation.","pos":[1228,1419],"source":"An expression-bodied method consists of a single expression that returns a value whose type matches the method's return type, or, for methods that return `void`, that performs some operation."},{"content":"For example, types that override the <ph id=\"ph1\">&lt;xref:System.Object.ToString%2A&gt;</ph> method typically include a single expression that returns the string representation of the current object.","pos":[1420,1596],"source":" For example, types that override the <xref:System.Object.ToString%2A> method typically include a single expression that returns the string representation of the current object."},{"content":"The following example defines a <ph id=\"ph1\">`Person`</ph> class that overrides the <ph id=\"ph2\">&lt;xref:System.Object.ToString%2A&gt;</ph> method with an expression body definition.","pos":[1598,1739],"source":"The following example defines a `Person` class that overrides the <xref:System.Object.ToString%2A> method with an expression body definition."},{"content":"It also defines a <ph id=\"ph1\">`DisplayName`</ph> method that displays a name to the console.","pos":[1740,1815],"source":" It also defines a `DisplayName` method that displays a name to the console."},{"content":"Note that the <ph id=\"ph1\">`return`</ph> keyword is not used in the <ph id=\"ph2\">`ToString`</ph> expression body definition.","pos":[1816,1904],"source":" Note that the `return` keyword is not used in the `ToString` expression body definition."},{"pos":[2049,2143],"content":"For more information, see <bpt id=\"p1\">[</bpt>Methods (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/methods.md)</ept>.","source":"For more information, see [Methods (C# Programming Guide)](../classes-and-structs/methods.md)."},{"pos":[2148,2168],"content":"Read-only properties","linkify":"Read-only properties","nodes":[{"content":"Read-only properties","pos":[0,20]}]},{"content":"Starting with C# 6, you can use expression body definition to implement a read-only property.","pos":[2170,2263]},{"content":"To do that, use the following syntax:","pos":[2264,2301]},{"pos":[2359,2547],"content":"The following example defines a <ph id=\"ph1\">`Location`</ph> class whose read-only <ph id=\"ph2\">`Name`</ph> property is implemented as an expression body definition that returns the value of the private <ph id=\"ph3\">`locationName`</ph> field:","source":"The following example defines a `Location` class whose read-only `Name` property is implemented as an expression body definition that returns the value of the private `locationName` field:"},{"pos":[2706,2823],"content":"For more information about properties, see <bpt id=\"p1\">[</bpt>Properties (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/properties.md)</ept>.","source":"For more information about properties, see [Properties (C# Programming Guide)](../classes-and-structs/properties.md)."},{"pos":[2828,2838],"content":"Properties","linkify":"Properties","nodes":[{"content":"Properties","pos":[0,10]}]},{"content":"Starting with C# 7.0, you can use expression body definitions to implement property <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors.","pos":[2840,2950],"source":"Starting with C# 7.0, you can use expression body definitions to implement property `get` and `set` accessors."},{"content":"The following example demonstrates how to do that:","pos":[2951,3001]},{"pos":[3152,3269],"content":"For more information about properties, see <bpt id=\"p1\">[</bpt>Properties (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/properties.md)</ept>.","source":"For more information about properties, see [Properties (C# Programming Guide)](../classes-and-structs/properties.md)."},{"pos":[3274,3286],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"content":"An expression body definition for a constructor typically consists of a single assignment expression or a method call that handles the constructor's arguments or initializes instance state.","pos":[3288,3477]},{"content":"The following example defines a <ph id=\"ph1\">`Location`</ph> class whose constructor has a single string parameter named <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>.","pos":[3479,3589],"source":"The following example defines a `Location` class whose constructor has a single string parameter named *name*."},{"content":"The expression body definition assigns the argument to the <ph id=\"ph1\">`Name`</ph> property.","pos":[3590,3665],"source":" The expression body definition assigns the argument to the `Name` property."},{"pos":[3813,3917],"content":"For more information, see <bpt id=\"p1\">[</bpt>Constructors (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/constructors.md)</ept>.","source":"For more information, see [Constructors (C# Programming Guide)](../classes-and-structs/constructors.md)."},{"pos":[3922,3932],"content":"Finalizers","linkify":"Finalizers","nodes":[{"content":"Finalizers","pos":[0,10]}]},{"content":"An expression body definition for a finalizer typically contains cleanup statements, such as statements that release unmanaged resources.","pos":[3934,4071]},{"content":"The following example defines a finalizer that uses an expression body definition to indicate that the finalizer has been called.","pos":[4073,4202]},{"pos":[4354,4455],"content":"For more information, see <bpt id=\"p1\">[</bpt>Finalizers (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/destructors.md)</ept>.","source":"For more information, see [Finalizers (C# Programming Guide)](../classes-and-structs/destructors.md)."},{"pos":[4460,4468],"content":"Indexers","linkify":"Indexers","nodes":[{"content":"Indexers","pos":[0,8]}]},{"content":"Like properties, an indexer's get and set accessors consist of expression body definitions if the get accessor consists of a single statement that returns a value or the set accessor performs a simple assignment.","pos":[4470,4682]},{"content":"The following example defines a class named <ph id=\"ph1\">`Sports`</ph> that includes an internal <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> array that contains the names of a number of sports.","pos":[4684,4836],"source":"The following example defines a class named `Sports` that includes an internal <xref:System.String> array that contains the names of a number of sports."},{"content":"Both the indexer's get and set accessors are implemented as expression body definitions.","pos":[4837,4925]},{"pos":[5071,5153],"content":"For more information, see <bpt id=\"p1\">[</bpt>Indexers (C# Programming Guide)<ept id=\"p1\">](../indexers/index.md)</ept>.","source":"For more information, see [Indexers (C# Programming Guide)](../indexers/index.md)."}]}