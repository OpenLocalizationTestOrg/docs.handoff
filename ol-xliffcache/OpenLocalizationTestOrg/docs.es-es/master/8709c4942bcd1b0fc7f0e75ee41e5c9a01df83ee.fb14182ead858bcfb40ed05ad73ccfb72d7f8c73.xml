{"content":"---\ntitle: Port libraries to .NET Core\ndescription: Learn how to port library projects from the .NET Framework to .NET Core.\nauthor: cartermp\nms.date: 12/07/2018\nms.custom: seodec18\n---\n# Port .NET Framework libraries to .NET Core\n\nLearn how to port .NET Framework library code to .NET Core, to run cross-platform and expand the reach of the apps that use it.\n\n## Prerequisites\n\nThis article assumes that you:\n\n- Are using Visual Studio 2017 or later.\n  - .NET Core isn't supported on earlier versions of Visual Studio\n- Understand the [recommended porting process](index.md).\n- Have resolved any issues with [third-party dependencies](third-party-deps.md).\n\nYou should also become familiar with the content of the following topics:\n\n[.NET Standard](../../standard/net-standard.md)\\\nThis topic describes the formal specification of .NET APIs that are intended to be available on all .NET implementations.\n\n[Packages, Metapackages and Frameworks](~/docs/core/packages.md)   \nThis article discusses how .NET Core defines and uses packages and how packages support code running on multiple .NET implementations.\n\n[Developing Libraries with Cross Platform Tools](~/docs/core/tutorials/libraries.md)   \nThis topic explains how to write libraries for .NET using cross-platform CLI tools.\n\n[Additions to the *csproj* format for .NET Core](~/docs/core/tools/csproj.md)   \nThis article outlines the changes that were added to the project file as part of the move to *csproj* and MSBuild.\n\n[Porting to .NET Core - Analyzing your Third-Party Party Dependencies](~/docs/core/porting/third-party-deps.md)   \nThis topic discusses the portability of third-party dependencies and what to do when a NuGet package dependency doesn't run on .NET Core.\n\n## Retargeting your .NET Framework code to .NET Framework 4.7.2\n\nIf your code isn't targeting .NET Framework 4.7.2, we recommended that you retarget to .NET Framework 4.7.2. This ensures the availability of the latest API alternatives for cases where the .NET Standard doesn't support existing APIs.\n\nFor each of your projects in Visual Studio you wish to port, do the following:\n\n1. Right-click on the project and select **Properties**.\n1. In the **Target Framework** dropdown, select **.NET Framework 4.7.2**.\n1. Recompile your projects.\n\nBecause your projects now target .NET Framework 4.7.2, use that version of the .NET Framework as your base for porting code.\n\n## Determining the portability of your code\n\nThe next step is to run the API Portability Analyzer (ApiPort) to generate a portability report for analysis.\n\nMake sure you understand the [API Portability Analyzer (ApiPort)](../../standard/analyzers/portability-analyzer.md) and how to generate portability reports for targeting .NET Core. How you do this likely varies based on your needs and personal tastes. What follows are a few different approaches. You may find yourself mixing steps of these approaches depending on how your code is structured.\n\n### Dealing primarily with the compiler\n\nThis approach may be the best for small projects or projects which don't use many .NET Framework APIs. The approach is simple:\n\n1. Optionally, run ApiPort on your project. If you run ApiPort, gain knowledge from the report on issues you'll need to address.\n1. Copy all of your code over into a new .NET Core project.\n1. While referring to the portability report (if generated), solve compiler errors until the project fully compiles.\n\nAlthough this approach is unstructured, the code-focused approach often leads to resolving issues quickly and might be the best approach for smaller projects or libraries. A project that contains only data models might be an ideal candidate for this approach.\n\n### Staying on the .NET Framework until portability issues are resolved\n\nThis approach might be the best if you prefer to have code that compiles during the entire process. The approach is as follows:\n\n1. Run ApiPort on a project.\n1. Address issues by using different APIs that are portable.\n1. Take note of any areas where you're prevented from using a direct alternative.\n1. Repeat the prior steps for all projects you're porting until you're confident each is ready to be copied over into a new .NET Core project.\n1. Copy the code into a new .NET Core project.\n1. Work out any issues where you noted that a direct alternative doesn't exist.\n\nThis careful approach is more structured than simply working out compiler errors, but it's still relatively code-focused and has the benefit of always having code that compiles. The way you resolve certain issues that couldn't be addressed by just using another API varies greatly. You may find that you need to develop a more comprehensive plan for certain projects, which is covered as the next approach.\n\n### Developing a comprehensive plan of attack\n\nThis approach might be best for larger and more complex projects, where restructuring code or completely rewriting certain areas of code might be necessary to support .NET Core. The approach is as follows:\n\n1. Run ApiPort on a project.\n1. Understand where each non-portable type is used and how that affects overall portability.\n   - Understand the nature of those types. Are they small in number but used frequently? Are they large in number but used infrequently? Is their use concentrated, or is it spread throughout your code?\n   - Is it easy to isolate code that isn't portable so that you can deal with it more effectively?\n   - Do you need to refactor your code?\n   - For those types which aren't portable, are there alternative APIs that accomplish the same task? For example if you're using the <xref:System.Net.WebClient> class, you might be able to use the <xref:System.Net.Http.HttpClient> class instead.\n   - Are there different portable APIs available to accomplish a task, even if it's not a drop-in replacement? For example if you're using <xref:System.Xml.Schema.XmlSchema> to parse XML but don't require XML schema discovery, you could use <xref:System.Xml.Linq> APIs and implement parsing yourself as opposed to relying on an API.\n1. If you have assemblies that are difficult to port, is it worth leaving them on .NET Framework for now? Here are some things to consider:\n   - You may have some functionality in your library that's incompatible with .NET Core because it relies too heavily on .NET Framework or Windows-specific functionality. Is it worth leaving that functionality behind for now and releasing a .NET Core version of your library with less features on a temporary basis until resources are available to port the features?\n   - Would a refactor help?\n1. Is it reasonable to write your own implementation of an unavailable .NET Framework API?\n   You could consider copying, modifying, and using code from the [.NET Framework Reference Source](https://github.com/Microsoft/referencesource). The reference source code is licensed under the [MIT License](https://github.com/Microsoft/referencesource/blob/master/LICENSE.txt), so you have significant freedom to use the source as a basis for your own code. Just be sure to properly attribute Microsoft in your code.\n1. Repeat this process as needed for different projects.\n \nThe analysis phase could take some time depending on the size of your codebase. Spending time in this phase to thoroughly understand the scope of changes needed and to develop a plan usually saves you time in the long run, particularly if you have a complex codebase.\n\nYour plan could involve making significant changes to your codebase while still targeting .NET Framework 4.7.2, making this a more structured version of the previous approach. How you go about executing your plan is dependent on your codebase.\n\n### Mixing approaches\n\nIt's likely that you'll mix the above approaches on a per-project basis. You should do what makes the most sense to you and for your codebase.\n\n## Porting your tests\n\nThe best way to make sure everything works when you've ported your code is to test your code as you port it to .NET Core. To do this, you'll need to use a testing framework that builds and runs tests for .NET Core. Currently, you have three options:\n\n- [xUnit](https://xunit.github.io/)\n  * [Getting Started](https://xunit.github.io/docs/getting-started-dotnet-core.html)\n  * [Tool to convert an MSTest project to xUnit](https://github.com/dotnet/codeformatter/tree/master/src/XUnitConverter)\n- [NUnit](https://nunit.org/)\n  * [Getting Started](https://github.com/nunit/docs/wiki/Installation)\n  * [Blog post about migrating from MSTest to NUnit](https://www.florian-rappl.de/News/Page/275/convert-mstest-to-nunit)\n- [MSTest](https://docs.microsoft.com/visualstudio/test/unit-test-basics)\n\n## Recommended approach to porting\n\nUltimately, the porting effort depends heavily on how your .NET Framework code is structured. A good way to port your code is to begin with the *base* of your library, which are the foundational components of your code. This might be data models or some other foundational classes and methods that everything else uses directly or indirectly.\n\n1. Port the test project that tests the layer of your library that you're currently porting.\n1. Copy over the base of your library into a new .NET Core project and select the version of the .NET Standard you wish to support.\n1. Make any changes needed to get the code to compile. Much of this may require adding NuGet package dependencies to your *csproj* file.\n1. Run the tests and make any needed adjustments.\n1. Pick the next layer of code to port over and repeat the prior steps.\n\nIf you start with the base of your library and move outward from the base and test each layer as needed, porting is a systematic process where problems are isolated to one layer of code at a time.\n\n>[!div class=\"step-by-step\"]\n>[Next](project-structure.md)\n","nodes":[{"pos":[4,181],"embed":true,"restype":"x-metadata","content":"title: Port libraries to .NET Core\ndescription: Learn how to port library projects from the .NET Framework to .NET Core.\nauthor: cartermp\nms.date: 12/07/2018\nms.custom: seodec18","nodes":[{"content":"Port libraries to .NET Core","nodes":[{"pos":[0,27],"content":"Port libraries to .NET Core","nodes":[{"content":"Port libraries to .NET Core","pos":[0,27]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to port library projects from the .NET Framework to .NET Core.","nodes":[{"pos":[0,72],"content":"Learn how to port library projects from the .NET Framework to .NET Core.","nodes":[{"content":"Learn how to port library projects from the .NET Framework to .NET Core.","pos":[0,72]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[188,230],"content":"Port .NET Framework libraries to .NET Core","linkify":"Port .NET Framework libraries to .NET Core","nodes":[{"content":"Port .NET Framework libraries to .NET Core","pos":[0,42]}]},{"content":"Learn how to port .NET Framework library code to .NET Core, to run cross-platform and expand the reach of the apps that use it.","pos":[232,359]},{"pos":[364,377],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"This article assumes that you:","pos":[379,409]},{"content":"Are using Visual Studio 2017 or later.","pos":[413,451]},{"content":".NET Core isn't supported on earlier versions of Visual Studio","pos":[456,518]},{"pos":[521,576],"content":"Understand the <bpt id=\"p1\">[</bpt>recommended porting process<ept id=\"p1\">](index.md)</ept>.","source":"Understand the [recommended porting process](index.md)."},{"pos":[579,657],"content":"Have resolved any issues with <bpt id=\"p1\">[</bpt>third-party dependencies<ept id=\"p1\">](third-party-deps.md)</ept>.","source":"Have resolved any issues with [third-party dependencies](third-party-deps.md)."},{"content":"You should also become familiar with the content of the following topics:","pos":[659,732]},{"content":"<bpt id=\"p1\">[</bpt>.NET Standard<ept id=\"p1\">](../../standard/net-standard.md)</ept><ph id=\"ph1\">\\</ph>","pos":[734,782],"source":"[.NET Standard](../../standard/net-standard.md)\\"},{"content":"This topic describes the formal specification of .NET APIs that are intended to be available on all .NET implementations.","pos":[783,904]},{"content":"<bpt id=\"p1\">[</bpt>Packages, Metapackages and Frameworks<ept id=\"p1\">](~/docs/core/packages.md)</ept><ph id=\"ph1\"> </ph>","pos":[906,971],"source":"[Packages, Metapackages and Frameworks](~/docs/core/packages.md) "},{"content":"This article discusses how .NET Core defines and uses packages and how packages support code running on multiple .NET implementations.","pos":[974,1108]},{"content":"<bpt id=\"p1\">[</bpt>Developing Libraries with Cross Platform Tools<ept id=\"p1\">](~/docs/core/tutorials/libraries.md)</ept><ph id=\"ph1\"> </ph>","pos":[1110,1195],"source":"[Developing Libraries with Cross Platform Tools](~/docs/core/tutorials/libraries.md) "},{"content":"This topic explains how to write libraries for .NET using cross-platform CLI tools.","pos":[1198,1281]},{"content":"<bpt id=\"p1\">[</bpt>Additions to the <bpt id=\"p2\">*</bpt>csproj<ept id=\"p2\">*</ept> format for .NET Core<ept id=\"p1\">](~/docs/core/tools/csproj.md)</ept><ph id=\"ph1\"> </ph>","pos":[1283,1361],"source":"[Additions to the *csproj* format for .NET Core](~/docs/core/tools/csproj.md) "},{"content":"This article outlines the changes that were added to the project file as part of the move to <bpt id=\"p1\">*</bpt>csproj<ept id=\"p1\">*</ept> and MSBuild.","pos":[1364,1478],"source":"This article outlines the changes that were added to the project file as part of the move to *csproj* and MSBuild."},{"content":"<bpt id=\"p1\">[</bpt>Porting to .NET Core - Analyzing your Third-Party Party Dependencies<ept id=\"p1\">](~/docs/core/porting/third-party-deps.md)</ept><ph id=\"ph1\"> </ph>","pos":[1480,1592],"source":"[Porting to .NET Core - Analyzing your Third-Party Party Dependencies](~/docs/core/porting/third-party-deps.md) "},{"content":"This topic discusses the portability of third-party dependencies and what to do when a NuGet package dependency doesn't run on .NET Core.","pos":[1595,1732]},{"pos":[1737,1797],"content":"Retargeting your .NET Framework code to .NET Framework 4.7.2","linkify":"Retargeting your .NET Framework code to .NET Framework 4.7.2","nodes":[{"content":"Retargeting your .NET Framework code to .NET Framework 4.7.2","pos":[0,60]}]},{"content":"If your code isn't targeting .NET Framework 4.7.2, we recommended that you retarget to .NET Framework 4.7.2.","pos":[1799,1907]},{"content":"This ensures the availability of the latest API alternatives for cases where the .NET Standard doesn't support existing APIs.","pos":[1908,2033]},{"content":"For each of your projects in Visual Studio you wish to port, do the following:","pos":[2035,2113]},{"pos":[2118,2171],"content":"Right-click on the project and select <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.","source":"Right-click on the project and select **Properties**."},{"pos":[2175,2245],"content":"In the <bpt id=\"p1\">**</bpt>Target Framework<ept id=\"p1\">**</ept> dropdown, select <bpt id=\"p2\">**</bpt>.NET Framework 4.7.2<ept id=\"p2\">**</ept>.","source":"In the **Target Framework** dropdown, select **.NET Framework 4.7.2**."},{"content":"Recompile your projects.","pos":[2249,2273]},{"content":"Because your projects now target .NET Framework 4.7.2, use that version of the .NET Framework as your base for porting code.","pos":[2275,2399]},{"pos":[2404,2444],"content":"Determining the portability of your code","linkify":"Determining the portability of your code","nodes":[{"content":"Determining the portability of your code","pos":[0,40]}]},{"content":"The next step is to run the API Portability Analyzer (ApiPort) to generate a portability report for analysis.","pos":[2446,2555]},{"content":"Make sure you understand the <bpt id=\"p1\">[</bpt>API Portability Analyzer (ApiPort)<ept id=\"p1\">](../../standard/analyzers/portability-analyzer.md)</ept> and how to generate portability reports for targeting .NET Core.","pos":[2557,2737],"source":"Make sure you understand the [API Portability Analyzer (ApiPort)](../../standard/analyzers/portability-analyzer.md) and how to generate portability reports for targeting .NET Core."},{"content":"How you do this likely varies based on your needs and personal tastes.","pos":[2738,2808]},{"content":"What follows are a few different approaches.","pos":[2809,2853]},{"content":"You may find yourself mixing steps of these approaches depending on how your code is structured.","pos":[2854,2950]},{"pos":[2956,2991],"content":"Dealing primarily with the compiler","linkify":"Dealing primarily with the compiler","nodes":[{"content":"Dealing primarily with the compiler","pos":[0,35]}]},{"content":"This approach may be the best for small projects or projects which don't use many .NET Framework APIs.","pos":[2993,3095]},{"content":"The approach is simple:","pos":[3096,3119]},{"content":"Optionally, run ApiPort on your project.","pos":[3124,3164]},{"content":"If you run ApiPort, gain knowledge from the report on issues you'll need to address.","pos":[3165,3249]},{"content":"Copy all of your code over into a new .NET Core project.","pos":[3253,3309]},{"content":"While referring to the portability report (if generated), solve compiler errors until the project fully compiles.","pos":[3313,3426]},{"content":"Although this approach is unstructured, the code-focused approach often leads to resolving issues quickly and might be the best approach for smaller projects or libraries.","pos":[3428,3599]},{"content":"A project that contains only data models might be an ideal candidate for this approach.","pos":[3600,3687]},{"pos":[3693,3760],"content":"Staying on the .NET Framework until portability issues are resolved","linkify":"Staying on the .NET Framework until portability issues are resolved","nodes":[{"content":"Staying on the .NET Framework until portability issues are resolved","pos":[0,67]}]},{"content":"This approach might be the best if you prefer to have code that compiles during the entire process.","pos":[3762,3861]},{"content":"The approach is as follows:","pos":[3862,3889]},{"content":"Run ApiPort on a project.","pos":[3894,3919]},{"content":"Address issues by using different APIs that are portable.","pos":[3923,3980]},{"content":"Take note of any areas where you're prevented from using a direct alternative.","pos":[3984,4062]},{"content":"Repeat the prior steps for all projects you're porting until you're confident each is ready to be copied over into a new .NET Core project.","pos":[4066,4205]},{"content":"Copy the code into a new .NET Core project.","pos":[4209,4252]},{"content":"Work out any issues where you noted that a direct alternative doesn't exist.","pos":[4256,4332]},{"content":"This careful approach is more structured than simply working out compiler errors, but it's still relatively code-focused and has the benefit of always having code that compiles.","pos":[4334,4511]},{"content":"The way you resolve certain issues that couldn't be addressed by just using another API varies greatly.","pos":[4512,4615]},{"content":"You may find that you need to develop a more comprehensive plan for certain projects, which is covered as the next approach.","pos":[4616,4740]},{"pos":[4746,4787],"content":"Developing a comprehensive plan of attack","linkify":"Developing a comprehensive plan of attack","nodes":[{"content":"Developing a comprehensive plan of attack","pos":[0,41]}]},{"content":"This approach might be best for larger and more complex projects, where restructuring code or completely rewriting certain areas of code might be necessary to support .NET Core.","pos":[4789,4966]},{"content":"The approach is as follows:","pos":[4967,4994]},{"content":"Run ApiPort on a project.","pos":[4999,5024]},{"content":"Understand where each non-portable type is used and how that affects overall portability.","pos":[5028,5117]},{"content":"Understand the nature of those types.","pos":[5123,5160]},{"content":"Are they small in number but used frequently?","pos":[5161,5206]},{"content":"Are they large in number but used infrequently?","pos":[5207,5254]},{"content":"Is their use concentrated, or is it spread throughout your code?","pos":[5255,5319]},{"content":"Is it easy to isolate code that isn't portable so that you can deal with it more effectively?","pos":[5325,5418]},{"content":"Do you need to refactor your code?","pos":[5424,5458]},{"content":"For those types which aren't portable, are there alternative APIs that accomplish the same task?","pos":[5464,5560]},{"content":"For example if you're using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> class, you might be able to use the <ph id=\"ph2\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> class instead.","pos":[5561,5705],"source":" For example if you're using the <xref:System.Net.WebClient> class, you might be able to use the <xref:System.Net.Http.HttpClient> class instead."},{"content":"Are there different portable APIs available to accomplish a task, even if it's not a drop-in replacement?","pos":[5711,5816]},{"content":"For example if you're using <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> to parse XML but don't require XML schema discovery, you could use <ph id=\"ph2\">&lt;xref:System.Xml.Linq&gt;</ph> APIs and implement parsing yourself as opposed to relying on an API.","pos":[5817,6038],"source":" For example if you're using <xref:System.Xml.Schema.XmlSchema> to parse XML but don't require XML schema discovery, you could use <xref:System.Xml.Linq> APIs and implement parsing yourself as opposed to relying on an API."},{"content":"If you have assemblies that are difficult to port, is it worth leaving them on .NET Framework for now?","pos":[6042,6144]},{"content":"Here are some things to consider:","pos":[6145,6178]},{"content":"You may have some functionality in your library that's incompatible with .NET Core because it relies too heavily on .NET Framework or Windows-specific functionality.","pos":[6184,6349]},{"content":"Is it worth leaving that functionality behind for now and releasing a .NET Core version of your library with less features on a temporary basis until resources are available to port the features?","pos":[6350,6545]},{"content":"Would a refactor help?","pos":[6551,6573]},{"pos":[6577,7083],"content":"Is it reasonable to write your own implementation of an unavailable .NET Framework API?\nYou could consider copying, modifying, and using code from the [.NET Framework Reference Source](https://github.com/Microsoft/referencesource). The reference source code is licensed under the [MIT License](https://github.com/Microsoft/referencesource/blob/master/LICENSE.txt), so you have significant freedom to use the source as a basis for your own code. Just be sure to properly attribute Microsoft in your code.","leadings":["","   "],"nodes":[{"content":"Is it reasonable to write your own implementation of an unavailable .NET Framework API?","pos":[0,87]},{"content":"You could consider copying, modifying, and using code from the <bpt id=\"p1\">[</bpt>.NET Framework Reference Source<ept id=\"p1\">](https://github.com/Microsoft/referencesource)</ept>.","pos":[88,231],"source":"You could consider copying, modifying, and using code from the [.NET Framework Reference Source](https://github.com/Microsoft/referencesource)."},{"content":"The reference source code is licensed under the <bpt id=\"p1\">[</bpt>MIT License<ept id=\"p1\">](https://github.com/Microsoft/referencesource/blob/master/LICENSE.txt)</ept>, so you have significant freedom to use the source as a basis for your own code.","pos":[232,444],"source":" The reference source code is licensed under the [MIT License](https://github.com/Microsoft/referencesource/blob/master/LICENSE.txt), so you have significant freedom to use the source as a basis for your own code."},{"content":"Just be sure to properly attribute Microsoft in your code.","pos":[445,503]}]},{"content":"Repeat this process as needed for different projects.","pos":[7087,7140]},{"content":"The analysis phase could take some time depending on the size of your codebase.","pos":[7143,7222]},{"content":"Spending time in this phase to thoroughly understand the scope of changes needed and to develop a plan usually saves you time in the long run, particularly if you have a complex codebase.","pos":[7223,7410]},{"content":"Your plan could involve making significant changes to your codebase while still targeting .NET Framework 4.7.2, making this a more structured version of the previous approach.","pos":[7412,7587]},{"content":"How you go about executing your plan is dependent on your codebase.","pos":[7588,7655]},{"pos":[7661,7678],"content":"Mixing approaches","linkify":"Mixing approaches","nodes":[{"content":"Mixing approaches","pos":[0,17]}]},{"content":"It's likely that you'll mix the above approaches on a per-project basis.","pos":[7680,7752]},{"content":"You should do what makes the most sense to you and for your codebase.","pos":[7753,7822]},{"pos":[7827,7845],"content":"Porting your tests","linkify":"Porting your tests","nodes":[{"content":"Porting your tests","pos":[0,18]}]},{"content":"The best way to make sure everything works when you've ported your code is to test your code as you port it to .NET Core.","pos":[7847,7968]},{"content":"To do this, you'll need to use a testing framework that builds and runs tests for .NET Core.","pos":[7969,8061]},{"content":"Currently, you have three options:","pos":[8062,8096]},{"pos":[8100,8133],"content":"<bpt id=\"p1\">[</bpt>xUnit<ept id=\"p1\">](https://xunit.github.io/)</ept>","source":"[xUnit](https://xunit.github.io/)"},{"pos":[8138,8218],"content":"<bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](https://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>","source":"[Getting Started](https://xunit.github.io/docs/getting-started-dotnet-core.html)"},{"pos":[8223,8339],"content":"<bpt id=\"p1\">[</bpt>Tool to convert an MSTest project to xUnit<ept id=\"p1\">](https://github.com/dotnet/codeformatter/tree/master/src/XUnitConverter)</ept>","source":"[Tool to convert an MSTest project to xUnit](https://github.com/dotnet/codeformatter/tree/master/src/XUnitConverter)"},{"pos":[8342,8369],"content":"<bpt id=\"p1\">[</bpt>NUnit<ept id=\"p1\">](https://nunit.org/)</ept>","source":"[NUnit](https://nunit.org/)"},{"pos":[8374,8440],"content":"<bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](https://github.com/nunit/docs/wiki/Installation)</ept>","source":"[Getting Started](https://github.com/nunit/docs/wiki/Installation)"},{"pos":[8445,8561],"content":"<bpt id=\"p1\">[</bpt>Blog post about migrating from MSTest to NUnit<ept id=\"p1\">](https://www.florian-rappl.de/News/Page/275/convert-mstest-to-nunit)</ept>","source":"[Blog post about migrating from MSTest to NUnit](https://www.florian-rappl.de/News/Page/275/convert-mstest-to-nunit)"},{"pos":[8564,8635],"content":"<bpt id=\"p1\">[</bpt>MSTest<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/test/unit-test-basics)</ept>","source":"[MSTest](https://docs.microsoft.com/visualstudio/test/unit-test-basics)"},{"pos":[8640,8671],"content":"Recommended approach to porting","linkify":"Recommended approach to porting","nodes":[{"content":"Recommended approach to porting","pos":[0,31]}]},{"content":"Ultimately, the porting effort depends heavily on how your .NET Framework code is structured.","pos":[8673,8766]},{"content":"A good way to port your code is to begin with the <bpt id=\"p1\">*</bpt>base<ept id=\"p1\">*</ept> of your library, which are the foundational components of your code.","pos":[8767,8892],"source":" A good way to port your code is to begin with the *base* of your library, which are the foundational components of your code."},{"content":"This might be data models or some other foundational classes and methods that everything else uses directly or indirectly.","pos":[8893,9015]},{"content":"Port the test project that tests the layer of your library that you're currently porting.","pos":[9020,9109]},{"content":"Copy over the base of your library into a new .NET Core project and select the version of the .NET Standard you wish to support.","pos":[9113,9241]},{"content":"Make any changes needed to get the code to compile.","pos":[9245,9296]},{"content":"Much of this may require adding NuGet package dependencies to your <bpt id=\"p1\">*</bpt>csproj<ept id=\"p1\">*</ept> file.","pos":[9297,9378],"source":" Much of this may require adding NuGet package dependencies to your *csproj* file."},{"content":"Run the tests and make any needed adjustments.","pos":[9382,9428]},{"content":"Pick the next layer of code to port over and repeat the prior steps.","pos":[9432,9500]},{"content":"If you start with the base of your library and move outward from the base and test each layer as needed, porting is a systematic process where problems are isolated to one layer of code at a time.","pos":[9502,9698]},{"pos":[9701,9758],"content":"[!div class=\"step-by-step\"]\n[Next](project-structure.md)","leadings":["",">"],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Next<ept id=\"p1\">](project-structure.md)</ept>","pos":[28,56],"source":"[Next](project-structure.md)"}]}]}