{"content":"---\ntitle: \"Type List (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"StructureConstraint\"\n  - \"vb.StructureConstraint\"\n  - \"ClassConstraint\"\n  - \"vb.ClassConstraint\"\nhelpviewer_keywords: \n  - \"class constraint\"\n  - \"constraints, Visual Basic generic types\"\n  - \"generic parameters\"\n  - \"generics [Visual Basic], constraints\"\n  - \"generics [Visual Basic], type list\"\n  - \"structure constraint\"\n  - \"constraints, in type parameters\"\n  - \"generics [Visual Basic], generic types\"\n  - \"parameters [Visual Basic], type\"\n  - \"constraints, Structure keyword\"\n  - \"type parameters [Visual Basic], constraints\"\n  - \"types [Visual Basic], generic\"\n  - \"parameters [Visual Basic], generic\"\n  - \"generics [Visual Basic], type parameters\"\n  - \"type parameters\"\n  - \"constraints, Class keyword\"\nms.assetid: 56db947a-2ae8-40f2-a70a-960764e9d0db\n---\n# Type List (Visual Basic)\nSpecifies the *type parameters* for a *generic* programming element. Multiple parameters are separated by commas. Following is the syntax for one type parameter.  \n  \n## Syntax  \n  \n```  \n[genericmodifier] typename [ As constraintlist ]  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`genericmodifier`|Optional. Can be used only in generic interfaces and delegates. You can declare a type covariant by using the [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md) keyword or contravariant by using the [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md) keyword. See [Covariance and Contravariance](../../programming-guide/concepts/covariance-contravariance/index.md).|  \n|`typename`|Required. Name of the type parameter. This is a placeholder, to be replaced by a defined type supplied by the corresponding type argument.|  \n|`constraintlist`|Optional. List of requirements that constrain the data type that can be supplied for `typename`. If you have multiple constraints, enclose them in curly braces (`{ }`) and separate them with commas. You must introduce the constraint list with the [As](../../../visual-basic/language-reference/statements/as-clause.md) keyword. You use `As` only once, at the beginning of the list.|  \n  \n## Remarks  \n Every generic programming element must take at least one type parameter. A type parameter is a placeholder for a specific type (a *constructed element*) that client code specifies when it creates an instance of the generic type. You can define a generic class, structure, interface, procedure, or delegate.  \n  \n For more information on when to define a generic type, see [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md). For more information on type parameter names, see [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md).  \n  \n## Rules  \n  \n-   **Parentheses.** If you supply a type parameter list, you must enclose it in parentheses, and you must introduce the list with the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword. You use `Of` only once, at the beginning of the list.  \n  \n-   **Constraints.** A list of *constraints* on a type parameter can include the following items in any combination:  \n  \n    -   Any number of interfaces. The supplied type must implement every interface in this list.  \n  \n    -   At most one class. The supplied type must inherit from that class.  \n  \n    -   The `New` keyword. The supplied type must expose a parameterless constructor that your generic type can access. This is useful if you constrain a type parameter by one or more interfaces. A type that implements interfaces does not necessarily expose a constructor, and depending on the access level of a constructor, the code within the generic type might not be able to access it.  \n  \n    -   Either the `Class` keyword or the `Structure` keyword. The `Class` keyword constrains a generic type parameter to require that any type argument passed to it be a reference type, for example a string, array, or delegate, or an object created from a class. The `Structure` keyword constrains a generic type parameter to require that any type argument passed to it be a value type, for example a structure, enumeration, or elementary data type. You cannot include both `Class` and `Structure` in the same `constraintlist`.  \n  \n     The supplied type must satisfy every requirement you include in `constraintlist`.  \n  \n     Constraints on each type parameter are independent of constraints on other type parameters.  \n  \n## Behavior  \n  \n-   **Compile-Time Substitution.** When you create a constructed type from a generic programming element, you supply a defined type for each type parameter. The Visual Basic compiler substitutes that supplied type for every occurrence of `typename` within the generic element.  \n  \n-   **Absence of Constraints.** If you do not specify any constraints on a type parameter, your code is limited to the operations and members supported by the [Object Data Type](../../../visual-basic/language-reference/data-types/object-data-type.md) for that type parameter.  \n  \n## Example  \n The following example shows a skeleton definition of a generic dictionary class, including a skeleton function to add a new entry to the dictionary.  \n  \n [!code-vb[VbVbalrStatements#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#3)]  \n  \n## Example  \n Because `dictionary` is generic, the code that uses it can create a variety of objects from it, each having the same functionality but acting on a different data type. The following example shows a line of code that creates a `dictionary` object with `String` entries and `Integer` keys.  \n  \n [!code-vb[VbVbalrStatements#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#4)]  \n  \n## Example  \n The following example shows the equivalent skeleton definition generated by the preceding example.  \n  \n [!code-vb[VbVbalrStatements#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#5)]  \n  \n## See also\n\n- [Of](../../../visual-basic/language-reference/statements/of-clause.md)\n- [New Operator](../../../visual-basic/language-reference/operators/new-operator.md)\n- [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)\n- [Object Data Type](../../../visual-basic/language-reference/data-types/object-data-type.md)\n- [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)\n- [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)\n- [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)\n- [How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)\n- [Covariance and Contravariance](../../programming-guide/concepts/covariance-contravariance/index.md)\n- [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)\n- [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)\n","nodes":[{"pos":[4,836],"embed":true,"restype":"x-metadata","content":"title: \"Type List (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"StructureConstraint\"\n  - \"vb.StructureConstraint\"\n  - \"ClassConstraint\"\n  - \"vb.ClassConstraint\"\nhelpviewer_keywords: \n  - \"class constraint\"\n  - \"constraints, Visual Basic generic types\"\n  - \"generic parameters\"\n  - \"generics [Visual Basic], constraints\"\n  - \"generics [Visual Basic], type list\"\n  - \"structure constraint\"\n  - \"constraints, in type parameters\"\n  - \"generics [Visual Basic], generic types\"\n  - \"parameters [Visual Basic], type\"\n  - \"constraints, Structure keyword\"\n  - \"type parameters [Visual Basic], constraints\"\n  - \"types [Visual Basic], generic\"\n  - \"parameters [Visual Basic], generic\"\n  - \"generics [Visual Basic], type parameters\"\n  - \"type parameters\"\n  - \"constraints, Class keyword\"\nms.assetid: 56db947a-2ae8-40f2-a70a-960764e9d0db","nodes":[{"content":"Type List (Visual Basic)","nodes":[{"pos":[0,24],"content":"Type List (Visual Basic)","nodes":[{"content":"Type List (Visual Basic)","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[843,867],"content":"Type List (Visual Basic)","linkify":"Type List (Visual Basic)","nodes":[{"content":"Type List (Visual Basic)","pos":[0,24]}]},{"content":"Specifies the <bpt id=\"p1\">*</bpt>type parameters<ept id=\"p1\">*</ept> for a <bpt id=\"p2\">*</bpt>generic<ept id=\"p2\">*</ept> programming element.","pos":[868,936],"source":"Specifies the *type parameters* for a *generic* programming element."},{"content":"Multiple parameters are separated by commas.","pos":[937,981]},{"content":"Following is the syntax for one type parameter.","pos":[982,1029]},{"pos":[1038,1044],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1119,1124],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1131,1135]},{"content":"Definition","pos":[1136,1146]},{"content":"Optional.","pos":[1181,1190]},{"content":"Can be used only in generic interfaces and delegates.","pos":[1191,1244]},{"content":"You can declare a type covariant by using the <bpt id=\"p1\">[</bpt>Out<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept> keyword or contravariant by using the <bpt id=\"p2\">[</bpt>In<ept id=\"p2\">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept> keyword.","pos":[1245,1499],"source":" You can declare a type covariant by using the [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md) keyword or contravariant by using the [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md) keyword."},{"content":"See <bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](../../programming-guide/concepts/covariance-contravariance/index.md)</ept>.","pos":[1500,1605],"source":" See [Covariance and Contravariance](../../programming-guide/concepts/covariance-contravariance/index.md)."},{"content":"Required.","pos":[1621,1630]},{"content":"Name of the type parameter.","pos":[1631,1658]},{"content":"This is a placeholder, to be replaced by a defined type supplied by the corresponding type argument.","pos":[1659,1759]},{"content":"Optional.","pos":[1781,1790]},{"content":"List of requirements that constrain the data type that can be supplied for <ph id=\"ph1\">`typename`</ph>.","pos":[1791,1877],"source":" List of requirements that constrain the data type that can be supplied for `typename`."},{"content":"If you have multiple constraints, enclose them in curly braces (<ph id=\"ph1\">`{ }`</ph>) and separate them with commas.","pos":[1878,1979],"source":" If you have multiple constraints, enclose them in curly braces (`{ }`) and separate them with commas."},{"content":"You must introduce the constraint list with the <bpt id=\"p1\">[</bpt>As<ept id=\"p1\">](../../../visual-basic/language-reference/statements/as-clause.md)</ept> keyword.","pos":[1980,2107],"source":" You must introduce the constraint list with the [As](../../../visual-basic/language-reference/statements/as-clause.md) keyword."},{"content":"You use <ph id=\"ph1\">`As`</ph> only once, at the beginning of the list.","pos":[2108,2161],"source":" You use `As` only once, at the beginning of the list."},{"pos":[2171,2178],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Every generic programming element must take at least one type parameter.","pos":[2182,2254]},{"content":"A type parameter is a placeholder for a specific type (a <bpt id=\"p1\">*</bpt>constructed element<ept id=\"p1\">*</ept>) that client code specifies when it creates an instance of the generic type.","pos":[2255,2410],"source":" A type parameter is a placeholder for a specific type (a *constructed element*) that client code specifies when it creates an instance of the generic type."},{"content":"You can define a generic class, structure, interface, procedure, or delegate.","pos":[2411,2488]},{"content":"For more information on when to define a generic type, see <bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>.","pos":[2495,2673],"source":"For more information on when to define a generic type, see [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)."},{"content":"For more information on type parameter names, see <bpt id=\"p1\">[</bpt>Declared Element Names<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.","pos":[2674,2852],"source":" For more information on type parameter names, see [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)."},{"pos":[2861,2866],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Parentheses.<ept id=\"p1\">**</ept>","pos":[2876,2892],"source":"**Parentheses.**"},{"content":"If you supply a type parameter list, you must enclose it in parentheses, and you must introduce the list with the <bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../../visual-basic/language-reference/statements/of-clause.md)</ept> keyword.","pos":[2893,3086],"source":" If you supply a type parameter list, you must enclose it in parentheses, and you must introduce the list with the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword."},{"content":"You use <ph id=\"ph1\">`Of`</ph> only once, at the beginning of the list.","pos":[3087,3140],"source":" You use `Of` only once, at the beginning of the list."},{"content":"<bpt id=\"p1\">**</bpt>Constraints.<ept id=\"p1\">**</ept>","pos":[3150,3166],"source":"**Constraints.**"},{"content":"A list of <bpt id=\"p1\">*</bpt>constraints<ept id=\"p1\">*</ept> on a type parameter can include the following items in any combination:","pos":[3167,3262],"source":" A list of *constraints* on a type parameter can include the following items in any combination:"},{"content":"Any number of interfaces.","pos":[3276,3301]},{"content":"The supplied type must implement every interface in this list.","pos":[3302,3364]},{"content":"At most one class.","pos":[3378,3396]},{"content":"The supplied type must inherit from that class.","pos":[3397,3444]},{"content":"The <ph id=\"ph1\">`New`</ph> keyword.","pos":[3458,3476],"source":"The `New` keyword."},{"content":"The supplied type must expose a parameterless constructor that your generic type can access.","pos":[3477,3569]},{"content":"This is useful if you constrain a type parameter by one or more interfaces.","pos":[3570,3645]},{"content":"A type that implements interfaces does not necessarily expose a constructor, and depending on the access level of a constructor, the code within the generic type might not be able to access it.","pos":[3646,3839]},{"content":"Either the <ph id=\"ph1\">`Class`</ph> keyword or the <ph id=\"ph2\">`Structure`</ph> keyword.","pos":[3853,3907],"source":"Either the `Class` keyword or the `Structure` keyword."},{"content":"The <ph id=\"ph1\">`Class`</ph> keyword constrains a generic type parameter to require that any type argument passed to it be a reference type, for example a string, array, or delegate, or an object created from a class.","pos":[3908,4108],"source":" The `Class` keyword constrains a generic type parameter to require that any type argument passed to it be a reference type, for example a string, array, or delegate, or an object created from a class."},{"content":"The <ph id=\"ph1\">`Structure`</ph> keyword constrains a generic type parameter to require that any type argument passed to it be a value type, for example a structure, enumeration, or elementary data type.","pos":[4109,4295],"source":" The `Structure` keyword constrains a generic type parameter to require that any type argument passed to it be a value type, for example a structure, enumeration, or elementary data type."},{"content":"You cannot include both <ph id=\"ph1\">`Class`</ph> and <ph id=\"ph2\">`Structure`</ph> in the same <ph id=\"ph3\">`constraintlist`</ph>.","pos":[4296,4373],"source":" You cannot include both `Class` and `Structure` in the same `constraintlist`."},{"pos":[4384,4465],"content":"The supplied type must satisfy every requirement you include in <ph id=\"ph1\">`constraintlist`</ph>.","source":"The supplied type must satisfy every requirement you include in `constraintlist`."},{"content":"Constraints on each type parameter are independent of constraints on other type parameters.","pos":[4476,4567]},{"pos":[4576,4584],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Compile-Time Substitution.<ept id=\"p1\">**</ept>","pos":[4594,4624],"source":"**Compile-Time Substitution.**"},{"content":"When you create a constructed type from a generic programming element, you supply a defined type for each type parameter.","pos":[4625,4746]},{"content":"The Visual Basic compiler substitutes that supplied type for every occurrence of <ph id=\"ph1\">`typename`</ph> within the generic element.","pos":[4747,4866],"source":" The Visual Basic compiler substitutes that supplied type for every occurrence of `typename` within the generic element."},{"content":"<bpt id=\"p1\">**</bpt>Absence of Constraints.<ept id=\"p1\">**</ept>","pos":[4876,4903],"source":"**Absence of Constraints.**"},{"content":"If you do not specify any constraints on a type parameter, your code is limited to the operations and members supported by the <bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/object-data-type.md)</ept> for that type parameter.","pos":[4904,5147],"source":" If you do not specify any constraints on a type parameter, your code is limited to the operations and members supported by the [Object Data Type](../../../visual-basic/language-reference/data-types/object-data-type.md) for that type parameter."},{"pos":[5156,5163],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows a skeleton definition of a generic dictionary class, including a skeleton function to add a new entry to the dictionary.","pos":[5167,5315]},{"pos":[5448,5455],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Because <ph id=\"ph1\">`dictionary`</ph> is generic, the code that uses it can create a variety of objects from it, each having the same functionality but acting on a different data type.","pos":[5459,5626],"source":"Because `dictionary` is generic, the code that uses it can create a variety of objects from it, each having the same functionality but acting on a different data type."},{"content":"The following example shows a line of code that creates a <ph id=\"ph1\">`dictionary`</ph> object with <ph id=\"ph2\">`String`</ph> entries and <ph id=\"ph3\">`Integer`</ph> keys.","pos":[5627,5746],"source":" The following example shows a line of code that creates a `dictionary` object with `String` entries and `Integer` keys."},{"pos":[5879,5886],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the equivalent skeleton definition generated by the preceding example.","pos":[5890,5988]},{"pos":[6121,6129],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6133,6203],"content":"<bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../../visual-basic/language-reference/statements/of-clause.md)</ept>","source":"[Of](../../../visual-basic/language-reference/statements/of-clause.md)"},{"pos":[6206,6288],"content":"<bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/new-operator.md)</ept>","source":"[New Operator](../../../visual-basic/language-reference/operators/new-operator.md)"},{"pos":[6291,6416],"content":"<bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>","source":"[Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)"},{"pos":[6419,6510],"content":"<bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>","source":"[Object Data Type](../../../visual-basic/language-reference/data-types/object-data-type.md)"},{"pos":[6513,6608],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[6611,6708],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[6711,6796],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[6799,6928],"content":"<bpt id=\"p1\">[</bpt>How to: Use a Generic Class<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept>","source":"[How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)"},{"pos":[6931,7031],"content":"<bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](../../programming-guide/concepts/covariance-contravariance/index.md)</ept>","source":"[Covariance and Contravariance](../../programming-guide/concepts/covariance-contravariance/index.md)"},{"pos":[7034,7113],"content":"<bpt id=\"p1\">[</bpt>In<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept>","source":"[In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)"},{"pos":[7116,7197],"content":"<bpt id=\"p1\">[</bpt>Out<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept>","source":"[Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)"}]}