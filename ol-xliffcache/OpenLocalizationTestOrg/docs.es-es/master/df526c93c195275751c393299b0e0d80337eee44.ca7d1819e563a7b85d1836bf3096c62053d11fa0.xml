{"content":"---\ntitle: \"Comparing Strings in .NET\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"value comparisons of strings\"\n  - \"LastIndexOf method\"\n  - \"CompareTo method\"\n  - \"IndexOf method\"\n  - \"Compare method\"\n  - \"strings [.NET Framework], comparing\"\n  - \"CompareOrdinal method\"\n  - \"EndsWith method\"\n  - \"Equals method\"\n  - \"StartsWith method\"\nms.assetid: 977dc094-fe19-4955-98ec-d2294d04a4ba\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Comparing Strings in .NET\n.NET provides several methods to compare the values of strings. The following table lists and describes the value-comparison methods.  \n  \n|Method name|Use|  \n|-----------------|---------|  \n|<xref:System.String.Compare%2A?displayProperty=nameWithType>|Compares the values of two strings. Returns an integer value.|  \n|<xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType>|Compares two strings without regard to local culture. Returns an integer value.|  \n|<xref:System.String.CompareTo%2A?displayProperty=nameWithType>|Compares the current string object to another string. Returns an integer value.|  \n|<xref:System.String.StartsWith%2A?displayProperty=nameWithType>|Determines whether a string begins with the string passed. Returns a Boolean value.|  \n|<xref:System.String.EndsWith%2A?displayProperty=nameWithType>|Determines whether a string ends with the string passed. Returns a Boolean value.|  \n|<xref:System.String.Equals%2A?displayProperty=nameWithType>|Determines whether two strings are the same. Returns a Boolean value.|  \n|<xref:System.String.IndexOf%2A?displayProperty=nameWithType>|Returns the index position of a character or string, starting from the beginning of the string you are examining. Returns an integer value.|  \n|<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>|Returns the index position of a character or string, starting from the end of the string you are examining. Returns an integer value.|  \n  \n## Compare  \n The static <xref:System.String.Compare%2A?displayProperty=nameWithType> method provides a thorough way of comparing two strings. This method is culturally aware. You can use this function to compare two strings or substrings of two strings. Additionally, overloads are provided that regard or disregard case and cultural variance. The following table shows the three integer values that this method might return.  \n  \n|Return value|Condition|  \n|------------------|---------------|  \n|A negative integer|The first string precedes the second string in the sort order.<br /><br /> -or-<br /><br /> The first string is `null`.|  \n|0|The first string and the second string are equal.<br /><br /> -or-<br /><br /> Both strings are `null`.|  \n|A positive integer<br /><br /> -or-<br /><br /> 1|The first string follows the second string in the sort order.<br /><br /> -or-<br /><br /> The second string is `null`.|  \n  \n> [!IMPORTANT]\n>  The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.  \n  \n The following example uses the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to determine the relative values of two strings.  \n  \n [!code-cpp[Conceptual.String.BasicOps#6](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#6)]\n [!code-csharp[Conceptual.String.BasicOps#6](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#6)]\n [!code-vb[Conceptual.String.BasicOps#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#6)]  \n  \n This example displays `-1` to the console.  \n  \n The preceding example is culture-sensitive by default. To perform a culture-insensitive string comparison, use an overload of the <xref:System.String.Compare%2A?displayProperty=nameWithType> method that allows you to specify the culture to use by supplying a *culture* parameter. For an example that demonstrates how to use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to perform a culture-insensitive comparison, see [Performing Culture-Insensitive String Comparisons](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-comparisons.md).  \n  \n## CompareOrdinal  \n The <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method compares two string objects without considering the local culture. The return values of this method are identical to the values returned by the **Compare** method in the previous table.  \n  \n> [!IMPORTANT]\n>  The <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.  \n  \n The following example uses the **CompareOrdinal** method to compare the values of two strings.  \n  \n [!code-cpp[Conceptual.String.BasicOps#7](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#7)]\n [!code-csharp[Conceptual.String.BasicOps#7](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#7)]\n [!code-vb[Conceptual.String.BasicOps#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#7)]  \n  \n This example displays `-32` to the console.  \n  \n## CompareTo  \n The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method compares the string that the current string object encapsulates to another string or object. The return values of this method are identical to the values returned by the <xref:System.String.Compare%2A?displayProperty=nameWithType> method in the previous table.  \n  \n> [!IMPORTANT]\n>  The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.  \n  \n The following example uses the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method to compare the `string1` object to the `string2` object.  \n  \n [!code-cpp[Conceptual.String.BasicOps#8](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#8)]\n [!code-csharp[Conceptual.String.BasicOps#8](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#8)]\n [!code-vb[Conceptual.String.BasicOps#8](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#8)]  \n  \n This example displays `-1` to the console.  \n  \n All overloads of the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method perform culture-sensitive and case-sensitive comparisons by default. No overloads of this method are provided that allow you to perform a culture-insensitive comparison. For code clarity, we recommend that you use the **String.Compare** method instead, specifying <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> for culture-sensitive operations or <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> for culture-insensitive operations. For examples that demonstrate how to use the **String.Compare** method to perform both culture-sensitive and culture-insensitive comparisons, see [Performing Culture-Insensitive String Comparisons](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-comparisons.md).  \n  \n## Equals  \n The **String.Equals** method can easily determine if two strings are the same. This case-sensitive method returns a **true** or **false** Boolean value. It can be used from an existing class, as illustrated in the next example. The following example uses the **Equals** method to determine whether a string object contains the phrase \"Hello World\".  \n  \n [!code-cpp[Conceptual.String.BasicOps#9](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#9)]\n [!code-csharp[Conceptual.String.BasicOps#9](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#9)]\n [!code-vb[Conceptual.String.BasicOps#9](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#9)]  \n  \n This example displays `True` to the console.  \n  \n This method can also be used as a static method. The following example compares two string objects using a static method.  \n  \n [!code-cpp[Conceptual.String.BasicOps#10](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#10)]\n [!code-csharp[Conceptual.String.BasicOps#10](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#10)]\n [!code-vb[Conceptual.String.BasicOps#10](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#10)]  \n  \n This example displays `True` to the console.  \n  \n## StartsWith and EndsWith  \n You can use the **String.StartsWith** method to determine whether a string object begins with the same characters that encompass another string. This case-sensitive method returns **true** if the current string object begins with the passed string and **false** if it does not. The following example uses this method to determine if a string object begins with \"Hello\".  \n  \n [!code-cpp[Conceptual.String.BasicOps#11](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#11)]\n [!code-csharp[Conceptual.String.BasicOps#11](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#11)]\n [!code-vb[Conceptual.String.BasicOps#11](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#11)]  \n  \n This example displays `True` to the console.  \n  \n The **String.EndsWith** method compares a passed string to the characters that exist at the end of the current string object. It also returns a Boolean value. The following example checks the end of a string using the **EndsWith** method.  \n  \n [!code-cpp[Conceptual.String.BasicOps#12](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#12)]\n [!code-csharp[Conceptual.String.BasicOps#12](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#12)]\n [!code-vb[Conceptual.String.BasicOps#12](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#12)]  \n  \n This example displays `False` to the console.  \n  \n## IndexOf and LastIndexOf  \n You can use the **String.IndexOf** method to determine the position of the first occurrence of a particular character within a string. This case-sensitive method starts counting from the beginning of a string and returns the position of a passed character using a zero-based index. If the character cannot be found, a value of –1 is returned.  \n  \n The following example uses the **IndexOf** method to search for the first occurrence of the '`l`' character in a string.  \n  \n [!code-cpp[Conceptual.String.BasicOps#13](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#13)]\n [!code-csharp[Conceptual.String.BasicOps#13](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#13)]\n [!code-vb[Conceptual.String.BasicOps#13](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#13)]  \n  \n This example displays `2` to the console.  \n  \n The **String.LastIndexOf** method is similar to the **String.IndexOf** method except that it returns the position of the last occurrence of a particular character within a string. It is case-sensitive and uses a zero-based index.  \n  \n The following example uses the **LastIndexOf** method to search for the last occurrence of the '`l`' character in a string.  \n  \n [!code-cpp[Conceptual.String.BasicOps#14](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.string.basicops/cpp/compare.cpp#14)]\n [!code-csharp[Conceptual.String.BasicOps#14](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.string.basicops/cs/compare.cs#14)]\n [!code-vb[Conceptual.String.BasicOps#14](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.string.basicops/vb/compare.vb#14)]  \n  \n This example displays `9` to the console.  \n  \n Both methods are useful when used in conjunction with the **String.Remove** method. You can use either the **IndexOf** or **LastIndexOf** methods to retrieve the position of a character, and then supply that position to the **Remove** method in order to remove a character or a word that begins with that character.  \n  \n## See also\n\n- [Basic String Operations](../../../docs/standard/base-types/basic-string-operations.md)\n- [Performing Culture-Insensitive String Operations](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md)\n- [Sorting Weight Tables (for .NET on Windows)](https://www.microsoft.com/en-us/download/details.aspx?id=10921)\n- [Default Unicode Collation Element Table (for .NET Core on Linux and macOS)](https://www.unicode.org/Public/UCA/latest/allkeys.txt)\n","nodes":[{"pos":[4,507],"embed":true,"restype":"x-metadata","content":"title: \"Comparing Strings in .NET\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"value comparisons of strings\"\n  - \"LastIndexOf method\"\n  - \"CompareTo method\"\n  - \"IndexOf method\"\n  - \"Compare method\"\n  - \"strings [.NET Framework], comparing\"\n  - \"CompareOrdinal method\"\n  - \"EndsWith method\"\n  - \"Equals method\"\n  - \"StartsWith method\"\nms.assetid: 977dc094-fe19-4955-98ec-d2294d04a4ba\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Comparing Strings in .NET","nodes":[{"pos":[0,25],"content":"Comparing Strings in .NET","nodes":[{"content":"Comparing Strings in .NET","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[514,539],"content":"Comparing Strings in .NET","linkify":"Comparing Strings in .NET","nodes":[{"content":"Comparing Strings in .NET","pos":[0,25]}]},{"content":".NET provides several methods to compare the values of strings.","pos":[540,603]},{"content":"The following table lists and describes the value-comparison methods.","pos":[604,673]},{"content":"Method name","pos":[680,691]},{"content":"Use","pos":[692,695]},{"content":"Compares the values of two strings.","pos":[793,828]},{"content":"Returns an integer value.","pos":[829,854]},{"content":"Compares two strings without regard to local culture.","pos":[927,980]},{"content":"Returns an integer value.","pos":[981,1006]},{"content":"Compares the current string object to another string.","pos":[1074,1127]},{"content":"Returns an integer value.","pos":[1128,1153]},{"content":"Determines whether a string begins with the string passed.","pos":[1222,1280]},{"content":"Returns a Boolean value.","pos":[1281,1305]},{"content":"Determines whether a string ends with the string passed.","pos":[1372,1428]},{"content":"Returns a Boolean value.","pos":[1429,1453]},{"content":"Determines whether two strings are the same.","pos":[1518,1562]},{"content":"Returns a Boolean value.","pos":[1563,1587]},{"content":"Returns the index position of a character or string, starting from the beginning of the string you are examining.","pos":[1653,1766]},{"content":"Returns an integer value.","pos":[1767,1792]},{"content":"Returns the index position of a character or string, starting from the end of the string you are examining.","pos":[1862,1969]},{"content":"Returns an integer value.","pos":[1970,1995]},{"pos":[2005,2012],"content":"Compare","linkify":"Compare","nodes":[{"content":"Compare","pos":[0,7]}]},{"content":"The static <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method provides a thorough way of comparing two strings.","pos":[2016,2144],"source":"The static <xref:System.String.Compare%2A?displayProperty=nameWithType> method provides a thorough way of comparing two strings."},{"content":"This method is culturally aware.","pos":[2145,2177]},{"content":"You can use this function to compare two strings or substrings of two strings.","pos":[2178,2256]},{"content":"Additionally, overloads are provided that regard or disregard case and cultural variance.","pos":[2257,2346]},{"content":"The following table shows the three integer values that this method might return.","pos":[2347,2428]},{"content":"Return value","pos":[2435,2447]},{"content":"Condition","pos":[2448,2457]},{"content":"A negative integer","pos":[2501,2519]},{"content":"The first string precedes the second string in the sort order.","pos":[2520,2582]},{"content":"-or-","pos":[2595,2599]},{"content":"The first string is <ph id=\"ph1\">`null`</ph>.","pos":[2612,2639],"source":"The first string is `null`."},{"content":"0","pos":[2644,2645]},{"content":"The first string and the second string are equal.","pos":[2646,2695]},{"content":"-or-","pos":[2708,2712]},{"content":"Both strings are <ph id=\"ph1\">`null`</ph>.","pos":[2725,2749],"source":"Both strings are `null`."},{"content":"A positive integer","pos":[2754,2772]},{"content":"-or-","pos":[2785,2789]},{"content":"1","pos":[2802,2803]},{"content":"The first string follows the second string in the sort order.","pos":[2804,2865]},{"content":"-or-","pos":[2878,2882]},{"content":"The second string is <ph id=\"ph1\">`null`</ph>.","pos":[2895,2923],"source":"The second string is `null`."},{"pos":[2932,3514],"content":"[!IMPORTANT]\n The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.","leadings":["","> "],"nodes":[{"content":"The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.","pos":[14,580],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method is primarily intended for use when ordering or sorting strings.","pos":[0,135],"source":"The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings."},{"content":"You should not use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other).","pos":[136,379],"source":" You should not use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other)."},{"content":"Instead, to determine whether two strings are equal, use the <ph id=\"ph1\">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType&gt;</ph> method.","pos":[380,566],"source":" Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method."}]}]},{"pos":[3521,3668],"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method to determine the relative values of two strings.","source":"The following example uses the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to determine the relative values of two strings."},{"pos":[4094,4136],"content":"This example displays <ph id=\"ph1\">`-1`</ph> to the console.","source":"This example displays `-1` to the console."},{"content":"The preceding example is culture-sensitive by default.","pos":[4143,4197]},{"content":"To perform a culture-insensitive string comparison, use an overload of the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method that allows you to specify the culture to use by supplying a <bpt id=\"p1\">*</bpt>culture<ept id=\"p1\">*</ept> parameter.","pos":[4198,4422],"source":" To perform a culture-insensitive string comparison, use an overload of the <xref:System.String.Compare%2A?displayProperty=nameWithType> method that allows you to specify the culture to use by supplying a *culture* parameter."},{"content":"For an example that demonstrates how to use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method to perform a culture-insensitive comparison, see <bpt id=\"p1\">[</bpt>Performing Culture-Insensitive String Comparisons<ept id=\"p1\">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-comparisons.md)</ept>.","pos":[4423,4744],"source":" For an example that demonstrates how to use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to perform a culture-insensitive comparison, see [Performing Culture-Insensitive String Comparisons](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-comparisons.md)."},{"pos":[4753,4767],"content":"CompareOrdinal","linkify":"CompareOrdinal","nodes":[{"content":"CompareOrdinal","pos":[0,14]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType&gt;</ph> method compares two string objects without considering the local culture.","pos":[4771,4916],"source":"The <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method compares two string objects without considering the local culture."},{"content":"The return values of this method are identical to the values returned by the <bpt id=\"p1\">**</bpt>Compare<ept id=\"p1\">**</ept> method in the previous table.","pos":[4917,5035],"source":" The return values of this method are identical to the values returned by the **Compare** method in the previous table."},{"pos":[5043,5639],"content":"[!IMPORTANT]\n The <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.","leadings":["","> "],"nodes":[{"content":"The <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.","pos":[14,594],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType&gt;</ph> method is primarily intended for use when ordering or sorting strings.","pos":[0,142],"source":"The <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings."},{"content":"You should not use the <ph id=\"ph1\">&lt;xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType&gt;</ph> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other).","pos":[143,393],"source":" You should not use the <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other)."},{"content":"Instead, to determine whether two strings are equal, use the <ph id=\"ph1\">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType&gt;</ph> method.","pos":[394,580],"source":" Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method."}]}]},{"pos":[5646,5740],"content":"The following example uses the <bpt id=\"p1\">**</bpt>CompareOrdinal<ept id=\"p1\">**</ept> method to compare the values of two strings.","source":"The following example uses the **CompareOrdinal** method to compare the values of two strings."},{"pos":[6166,6209],"content":"This example displays <ph id=\"ph1\">`-32`</ph> to the console.","source":"This example displays `-32` to the console."},{"pos":[6218,6227],"content":"CompareTo","linkify":"CompareTo","nodes":[{"content":"CompareTo","pos":[0,9]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method compares the string that the current string object encapsulates to another string or object.","pos":[6231,6397],"source":"The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method compares the string that the current string object encapsulates to another string or object."},{"content":"The return values of this method are identical to the values returned by the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> method in the previous table.","pos":[6398,6565],"source":" The return values of this method are identical to the values returned by the <xref:System.String.Compare%2A?displayProperty=nameWithType> method in the previous table."},{"pos":[6573,7159],"content":"[!IMPORTANT]\n The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.","leadings":["","> "],"nodes":[{"content":"The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings. You should not use the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other). Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method.","pos":[14,584],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method is primarily intended for use when ordering or sorting strings.","pos":[0,137],"source":"The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method is primarily intended for use when ordering or sorting strings."},{"content":"You should not use the <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other).","pos":[138,383],"source":" You should not use the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other)."},{"content":"Instead, to determine whether two strings are equal, use the <ph id=\"ph1\">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType&gt;</ph> method.","pos":[384,570],"source":" Instead, to determine whether two strings are equal, use the <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method."}]}]},{"pos":[7166,7323],"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method to compare the <ph id=\"ph2\">`string1`</ph> object to the <ph id=\"ph3\">`string2`</ph> object.","source":"The following example uses the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method to compare the `string1` object to the `string2` object."},{"pos":[7749,7791],"content":"This example displays <ph id=\"ph1\">`-1`</ph> to the console.","source":"This example displays `-1` to the console."},{"content":"All overloads of the <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method perform culture-sensitive and case-sensitive comparisons by default.","pos":[7798,7957],"source":"All overloads of the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method perform culture-sensitive and case-sensitive comparisons by default."},{"content":"No overloads of this method are provided that allow you to perform a culture-insensitive comparison.","pos":[7958,8058]},{"content":"For code clarity, we recommend that you use the <bpt id=\"p1\">**</bpt>String.Compare<ept id=\"p1\">**</ept> method instead, specifying <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> for culture-sensitive operations or <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> for culture-insensitive operations.","pos":[8059,8400],"source":" For code clarity, we recommend that you use the **String.Compare** method instead, specifying <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> for culture-sensitive operations or <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> for culture-insensitive operations."},{"content":"For examples that demonstrate how to use the <bpt id=\"p1\">**</bpt>String.Compare<ept id=\"p1\">**</ept> method to perform both culture-sensitive and culture-insensitive comparisons, see <bpt id=\"p2\">[</bpt>Performing Culture-Insensitive String Comparisons<ept id=\"p2\">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-comparisons.md)</ept>.","pos":[8401,8703],"source":" For examples that demonstrate how to use the **String.Compare** method to perform both culture-sensitive and culture-insensitive comparisons, see [Performing Culture-Insensitive String Comparisons](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-comparisons.md)."},{"pos":[8712,8718],"content":"Equals","linkify":"Equals","nodes":[{"content":"Equals","pos":[0,6]}]},{"content":"The <bpt id=\"p1\">**</bpt>String.Equals<ept id=\"p1\">**</ept> method can easily determine if two strings are the same.","pos":[8722,8800],"source":"The **String.Equals** method can easily determine if two strings are the same."},{"content":"This case-sensitive method returns a <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> Boolean value.","pos":[8801,8874],"source":" This case-sensitive method returns a **true** or **false** Boolean value."},{"content":"It can be used from an existing class, as illustrated in the next example.","pos":[8875,8949]},{"content":"The following example uses the <bpt id=\"p1\">**</bpt>Equals<ept id=\"p1\">**</ept> method to determine whether a string object contains the phrase \"Hello World\".","pos":[8950,9070],"source":" The following example uses the **Equals** method to determine whether a string object contains the phrase \"Hello World\"."},{"pos":[9496,9540],"content":"This example displays <ph id=\"ph1\">`True`</ph> to the console.","source":"This example displays `True` to the console."},{"content":"This method can also be used as a static method.","pos":[9547,9595]},{"content":"The following example compares two string objects using a static method.","pos":[9596,9668]},{"pos":[10100,10144],"content":"This example displays <ph id=\"ph1\">`True`</ph> to the console.","source":"This example displays `True` to the console."},{"pos":[10153,10176],"content":"StartsWith and EndsWith","linkify":"StartsWith and EndsWith","nodes":[{"content":"StartsWith and EndsWith","pos":[0,23]}]},{"content":"You can use the <bpt id=\"p1\">**</bpt>String.StartsWith<ept id=\"p1\">**</ept> method to determine whether a string object begins with the same characters that encompass another string.","pos":[10180,10324],"source":"You can use the **String.StartsWith** method to determine whether a string object begins with the same characters that encompass another string."},{"content":"This case-sensitive method returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the current string object begins with the passed string and <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it does not.","pos":[10325,10457],"source":" This case-sensitive method returns **true** if the current string object begins with the passed string and **false** if it does not."},{"content":"The following example uses this method to determine if a string object begins with \"Hello\".","pos":[10458,10549]},{"pos":[10981,11025],"content":"This example displays <ph id=\"ph1\">`True`</ph> to the console.","source":"This example displays `True` to the console."},{"content":"The <bpt id=\"p1\">**</bpt>String.EndsWith<ept id=\"p1\">**</ept> method compares a passed string to the characters that exist at the end of the current string object.","pos":[11032,11157],"source":"The **String.EndsWith** method compares a passed string to the characters that exist at the end of the current string object."},{"content":"It also returns a Boolean value.","pos":[11158,11190]},{"content":"The following example checks the end of a string using the <bpt id=\"p1\">**</bpt>EndsWith<ept id=\"p1\">**</ept> method.","pos":[11191,11270],"source":" The following example checks the end of a string using the **EndsWith** method."},{"pos":[11702,11747],"content":"This example displays <ph id=\"ph1\">`False`</ph> to the console.","source":"This example displays `False` to the console."},{"pos":[11756,11779],"content":"IndexOf and LastIndexOf","linkify":"IndexOf and LastIndexOf","nodes":[{"content":"IndexOf and LastIndexOf","pos":[0,23]}]},{"content":"You can use the <bpt id=\"p1\">**</bpt>String.IndexOf<ept id=\"p1\">**</ept> method to determine the position of the first occurrence of a particular character within a string.","pos":[11783,11917],"source":"You can use the **String.IndexOf** method to determine the position of the first occurrence of a particular character within a string."},{"content":"This case-sensitive method starts counting from the beginning of a string and returns the position of a passed character using a zero-based index.","pos":[11918,12064]},{"content":"If the character cannot be found, a value of –1 is returned.","pos":[12065,12125]},{"pos":[12132,12252],"content":"The following example uses the <bpt id=\"p1\">**</bpt>IndexOf<ept id=\"p1\">**</ept> method to search for the first occurrence of the '<ph id=\"ph1\">`l`</ph>' character in a string.","source":"The following example uses the **IndexOf** method to search for the first occurrence of the '`l`' character in a string."},{"pos":[12684,12725],"content":"This example displays <ph id=\"ph1\">`2`</ph> to the console.","source":"This example displays `2` to the console."},{"content":"The <bpt id=\"p1\">**</bpt>String.LastIndexOf<ept id=\"p1\">**</ept> method is similar to the <bpt id=\"p2\">**</bpt>String.IndexOf<ept id=\"p2\">**</ept> method except that it returns the position of the last occurrence of a particular character within a string.","pos":[12732,12911],"source":"The **String.LastIndexOf** method is similar to the **String.IndexOf** method except that it returns the position of the last occurrence of a particular character within a string."},{"content":"It is case-sensitive and uses a zero-based index.","pos":[12912,12961]},{"pos":[12968,13091],"content":"The following example uses the <bpt id=\"p1\">**</bpt>LastIndexOf<ept id=\"p1\">**</ept> method to search for the last occurrence of the '<ph id=\"ph1\">`l`</ph>' character in a string.","source":"The following example uses the **LastIndexOf** method to search for the last occurrence of the '`l`' character in a string."},{"pos":[13523,13564],"content":"This example displays <ph id=\"ph1\">`9`</ph> to the console.","source":"This example displays `9` to the console."},{"content":"Both methods are useful when used in conjunction with the <bpt id=\"p1\">**</bpt>String.Remove<ept id=\"p1\">**</ept> method.","pos":[13571,13654],"source":"Both methods are useful when used in conjunction with the **String.Remove** method."},{"content":"You can use either the <bpt id=\"p1\">**</bpt>IndexOf<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>LastIndexOf<ept id=\"p2\">**</ept> methods to retrieve the position of a character, and then supply that position to the <bpt id=\"p3\">**</bpt>Remove<ept id=\"p3\">**</ept> method in order to remove a character or a word that begins with that character.","pos":[13655,13886],"source":" You can use either the **IndexOf** or **LastIndexOf** methods to retrieve the position of a character, and then supply that position to the **Remove** method in order to remove a character or a word that begins with that character."},{"pos":[13895,13903],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[13907,13994],"content":"<bpt id=\"p1\">[</bpt>Basic String Operations<ept id=\"p1\">](../../../docs/standard/base-types/basic-string-operations.md)</ept>","source":"[Basic String Operations](../../../docs/standard/base-types/basic-string-operations.md)"},{"pos":[13997,14150],"content":"<bpt id=\"p1\">[</bpt>Performing Culture-Insensitive String Operations<ept id=\"p1\">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md)</ept>","source":"[Performing Culture-Insensitive String Operations](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md)"},{"pos":[14153,14262],"content":"<bpt id=\"p1\">[</bpt>Sorting Weight Tables (for .NET on Windows)<ept id=\"p1\">](https://www.microsoft.com/en-us/download/details.aspx?id=10921)</ept>","source":"[Sorting Weight Tables (for .NET on Windows)](https://www.microsoft.com/en-us/download/details.aspx?id=10921)"},{"pos":[14265,14396],"content":"<bpt id=\"p1\">[</bpt>Default Unicode Collation Element Table (for .NET Core on Linux and macOS)<ept id=\"p1\">](https://www.unicode.org/Public/UCA/latest/allkeys.txt)</ept>","source":"[Default Unicode Collation Element Table (for .NET Core on Linux and macOS)](https://www.unicode.org/Public/UCA/latest/allkeys.txt)"}]}