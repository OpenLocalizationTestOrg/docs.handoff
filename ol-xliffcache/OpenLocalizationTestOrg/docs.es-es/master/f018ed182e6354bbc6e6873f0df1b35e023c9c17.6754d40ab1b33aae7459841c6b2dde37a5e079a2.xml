{"content":"---\ntitle: \"Type Conversion Tables in .NET\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"widening conversions\"\n  - \"narrowing conversions\"\n  - \"type conversion, table\"\n  - \"converting types, narrowing conversions\"\n  - \"converting types, widening conversions\"\n  - \"base types, converting\"\n  - \"tables [.NET Framework], type conversions\"\n  - \"data types [.NET Framework], converting\"\nms.assetid: 0ea65c59-85eb-4a52-94ca-c36d3bd13058\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Type Conversion Tables in .NET\nWidening conversion occurs when a value of one type is converted to another type that is of equal or greater size. A narrowing conversion occurs when a value of one type is converted to a value of another type that is of a smaller size. The tables in this topic illustrate the behaviors exhibited by both types of conversions.  \n  \n## Widening Conversions  \n The following table describes the widening conversions that can be performed without the loss of information.  \n  \n|Type|Can be converted without data loss to|  \n|----------|-------------------------------------------|  \n|<xref:System.Byte>|<xref:System.UInt16>, <xref:System.Int16>, <xref:System.UInt32>, <xref:System.Int32>, <xref:System.UInt64>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>|  \n|<xref:System.SByte>|<xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>|  \n|<xref:System.Int16>|<xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>|  \n|<xref:System.UInt16>|<xref:System.UInt32>, <xref:System.Int32>, <xref:System.UInt64>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>|  \n|<xref:System.Char>|<xref:System.UInt16>, <xref:System.UInt32>, <xref:System.Int32>, <xref:System.UInt64>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>|  \n|<xref:System.Int32>|<xref:System.Int64>, <xref:System.Double>, <xref:System.Decimal>|  \n|<xref:System.UInt32>|<xref:System.Int64>, <xref:System.UInt64>, <xref:System.Double>, <xref:System.Decimal>|  \n|<xref:System.Int64>|<xref:System.Decimal>|  \n|<xref:System.UInt64>|<xref:System.Decimal>|  \n|<xref:System.Single>|<xref:System.Double>|  \n  \n Some widening conversions to <xref:System.Single> or <xref:System.Double> can cause a loss of precision. The following table describes the widening conversions that sometimes result in a loss of information.  \n  \n|Type|Can be converted to|  \n|----------|-------------------------|  \n|<xref:System.Int32>|<xref:System.Single>|  \n|<xref:System.UInt32>|<xref:System.Single>|  \n|<xref:System.Int64>|<xref:System.Single>, <xref:System.Double>|  \n|<xref:System.UInt64>|<xref:System.Single>, <xref:System.Double>|  \n|<xref:System.Decimal>|<xref:System.Single>, <xref:System.Double>|  \n  \n## Narrowing Conversions  \n A narrowing conversion to <xref:System.Single> or <xref:System.Double> can cause a loss of information. If the target type cannot properly express the magnitude of the source, the resulting type is set to the constant `PositiveInfinity` or `NegativeInfinity`. `PositiveInfinity` results from dividing a positive number by zero and is also returned when the value of a <xref:System.Single> or <xref:System.Double> exceeds the value of the `MaxValue` field. `NegativeInfinity` results from dividing a negative number by zero and is also returned when the value of a <xref:System.Single> or <xref:System.Double> falls below the value of the `MinValue` field. A conversion from a <xref:System.Double> to a <xref:System.Single> might result in `PositiveInfinity` or `NegativeInfinity`.  \n  \n A narrowing conversion can also result in a loss of information for other data types. However, an <xref:System.OverflowException> is thrown if the value of a type that is being converted falls outside of the range specified by the target type's `MaxValue` and `MinValue` fields, and the conversion is checked by the runtime to ensure that the value of the target type does not exceed its `MaxValue` or `MinValue`. Conversions that are performed with the <xref:System.Convert?displayProperty=nameWithType> class are always checked in this manner.  \n  \n The following table lists conversions that throw an <xref:System.OverflowException> using <xref:System.Convert?displayProperty=nameWithType> or any checked conversion if the value of the type being converted is outside the defined range of the resulting type.  \n  \n|Type|Can be converted to|  \n|----------|-------------------------|  \n|<xref:System.Byte>|<xref:System.SByte>|  \n|<xref:System.SByte>|<xref:System.Byte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>|  \n|<xref:System.Int16>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.UInt16>|  \n|<xref:System.UInt16>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>|  \n|<xref:System.Int32>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>,<xref:System.UInt32>|  \n|<xref:System.UInt32>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>|  \n|<xref:System.Int64>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>,<xref:System.UInt32>,<xref:System.UInt64>|  \n|<xref:System.UInt64>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>|  \n|<xref:System.Decimal>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>|  \n|<xref:System.Single>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>|  \n|<xref:System.Double>|<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>|  \n  \n## See also\n\n- <xref:System.Convert?displayProperty=nameWithType>\n- [Type Conversion in .NET](../../../docs/standard/base-types/type-conversion.md)\n","nodes":[{"pos":[4,505],"embed":true,"restype":"x-metadata","content":"title: \"Type Conversion Tables in .NET\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"widening conversions\"\n  - \"narrowing conversions\"\n  - \"type conversion, table\"\n  - \"converting types, narrowing conversions\"\n  - \"converting types, widening conversions\"\n  - \"base types, converting\"\n  - \"tables [.NET Framework], type conversions\"\n  - \"data types [.NET Framework], converting\"\nms.assetid: 0ea65c59-85eb-4a52-94ca-c36d3bd13058\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Type Conversion Tables in .NET","nodes":[{"pos":[0,30],"content":"Type Conversion Tables in .NET","nodes":[{"content":"Type Conversion Tables in .NET","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[512,542],"content":"Type Conversion Tables in .NET","linkify":"Type Conversion Tables in .NET","nodes":[{"content":"Type Conversion Tables in .NET","pos":[0,30]}]},{"content":"Widening conversion occurs when a value of one type is converted to another type that is of equal or greater size.","pos":[543,657]},{"content":"A narrowing conversion occurs when a value of one type is converted to a value of another type that is of a smaller size.","pos":[658,779]},{"content":"The tables in this topic illustrate the behaviors exhibited by both types of conversions.","pos":[780,869]},{"pos":[878,898],"content":"Widening Conversions","linkify":"Widening Conversions","nodes":[{"content":"Widening Conversions","pos":[0,20]}]},{"content":"The following table describes the widening conversions that can be performed without the loss of information.","pos":[902,1011]},{"content":"Type","pos":[1018,1022]},{"content":"Can be converted without data loss to","pos":[1023,1060]},{"pos":[1143,1337],"content":"<ph id=\"ph1\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.UInt64&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.Decimal&gt;</ph>","source":"<xref:System.UInt16>, <xref:System.Int16>, <xref:System.UInt32>, <xref:System.Int32>, <xref:System.UInt64>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>"},{"pos":[1362,1490],"content":"<ph id=\"ph1\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Decimal&gt;</ph>","source":"<xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>"},{"pos":[1515,1622],"content":"<ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Decimal&gt;</ph>","source":"<xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>"},{"pos":[1648,1799],"content":"<ph id=\"ph1\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.UInt64&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Decimal&gt;</ph>","source":"<xref:System.UInt32>, <xref:System.Int32>, <xref:System.UInt64>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>"},{"pos":[1823,1996],"content":"<ph id=\"ph1\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt64&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Decimal&gt;</ph>","source":"<xref:System.UInt16>, <xref:System.UInt32>, <xref:System.Int32>, <xref:System.UInt64>, <xref:System.Int64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>"},{"pos":[2021,2085],"content":"<ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Decimal&gt;</ph>","source":"<xref:System.Int64>, <xref:System.Double>, <xref:System.Decimal>"},{"pos":[2111,2197],"content":"<ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.UInt64&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Decimal&gt;</ph>","source":"<xref:System.Int64>, <xref:System.UInt64>, <xref:System.Double>, <xref:System.Decimal>"},{"content":"Some widening conversions to <ph id=\"ph1\">&lt;xref:System.Single&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> can cause a loss of precision.","pos":[2344,2448],"source":"Some widening conversions to <xref:System.Single> or <xref:System.Double> can cause a loss of precision."},{"content":"The following table describes the widening conversions that sometimes result in a loss of information.","pos":[2449,2551]},{"content":"Type","pos":[2558,2562]},{"content":"Can be converted to","pos":[2563,2582]},{"pos":[2739,2781],"content":"<ph id=\"ph1\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph>","source":"<xref:System.Single>, <xref:System.Double>"},{"pos":[2807,2849],"content":"<ph id=\"ph1\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph>","source":"<xref:System.Single>, <xref:System.Double>"},{"pos":[2876,2918],"content":"<ph id=\"ph1\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph>","source":"<xref:System.Single>, <xref:System.Double>"},{"pos":[2928,2949],"content":"Narrowing Conversions","linkify":"Narrowing Conversions","nodes":[{"content":"Narrowing Conversions","pos":[0,21]}]},{"content":"A narrowing conversion to <ph id=\"ph1\">&lt;xref:System.Single&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> can cause a loss of information.","pos":[2953,3056],"source":"A narrowing conversion to <xref:System.Single> or <xref:System.Double> can cause a loss of information."},{"content":"If the target type cannot properly express the magnitude of the source, the resulting type is set to the constant <ph id=\"ph1\">`PositiveInfinity`</ph> or <ph id=\"ph2\">`NegativeInfinity`</ph>.","pos":[3057,3212],"source":" If the target type cannot properly express the magnitude of the source, the resulting type is set to the constant `PositiveInfinity` or `NegativeInfinity`."},{"content":"<ph id=\"ph1\">`PositiveInfinity`</ph> results from dividing a positive number by zero and is also returned when the value of a <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph> exceeds the value of the <ph id=\"ph4\">`MaxValue`</ph> field.","pos":[3213,3408],"source":"`PositiveInfinity` results from dividing a positive number by zero and is also returned when the value of a <xref:System.Single> or <xref:System.Double> exceeds the value of the `MaxValue` field."},{"content":"<ph id=\"ph1\">`NegativeInfinity`</ph> results from dividing a negative number by zero and is also returned when the value of a <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph> falls below the value of the <ph id=\"ph4\">`MinValue`</ph> field.","pos":[3409,3608],"source":"`NegativeInfinity` results from dividing a negative number by zero and is also returned when the value of a <xref:System.Single> or <xref:System.Double> falls below the value of the `MinValue` field."},{"content":"A conversion from a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> might result in <ph id=\"ph3\">`PositiveInfinity`</ph> or <ph id=\"ph4\">`NegativeInfinity`</ph>.","pos":[3609,3733],"source":" A conversion from a <xref:System.Double> to a <xref:System.Single> might result in `PositiveInfinity` or `NegativeInfinity`."},{"content":"A narrowing conversion can also result in a loss of information for other data types.","pos":[3740,3825]},{"content":"However, an <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph> is thrown if the value of a type that is being converted falls outside of the range specified by the target type's <ph id=\"ph2\">`MaxValue`</ph> and <ph id=\"ph3\">`MinValue`</ph> fields, and the conversion is checked by the runtime to ensure that the value of the target type does not exceed its <ph id=\"ph4\">`MaxValue`</ph> or <ph id=\"ph5\">`MinValue`</ph>.","pos":[3826,4153],"source":" However, an <xref:System.OverflowException> is thrown if the value of a type that is being converted falls outside of the range specified by the target type's `MaxValue` and `MinValue` fields, and the conversion is checked by the runtime to ensure that the value of the target type does not exceed its `MaxValue` or `MinValue`."},{"content":"Conversions that are performed with the <ph id=\"ph1\">&lt;xref:System.Convert?displayProperty=nameWithType&gt;</ph> class are always checked in this manner.","pos":[4154,4285],"source":" Conversions that are performed with the <xref:System.Convert?displayProperty=nameWithType> class are always checked in this manner."},{"pos":[4292,4551],"content":"The following table lists conversions that throw an <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph> using <ph id=\"ph2\">&lt;xref:System.Convert?displayProperty=nameWithType&gt;</ph> or any checked conversion if the value of the type being converted is outside the defined range of the resulting type.","source":"The following table lists conversions that throw an <xref:System.OverflowException> using <xref:System.Convert?displayProperty=nameWithType> or any checked conversion if the value of the type being converted is outside the defined range of the resulting type."},{"content":"Type","pos":[4558,4562]},{"content":"Can be converted to","pos":[4563,4582]},{"pos":[4691,4775],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt64&gt;</ph>","source":"<xref:System.Byte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>"},{"pos":[4800,4861],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.UInt16&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.UInt16>"},{"pos":[4887,4947],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>"},{"pos":[4972,5075],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt16&gt;</ph>,<ph id=\"ph5\">&lt;xref:System.UInt32&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>,<xref:System.UInt32>"},{"pos":[5101,5204],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int32&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>"},{"pos":[5229,5374],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int32&gt;</ph>,<ph id=\"ph6\">&lt;xref:System.UInt32&gt;</ph>,<ph id=\"ph7\">&lt;xref:System.UInt64&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>,<xref:System.UInt32>,<xref:System.UInt64>"},{"pos":[5400,5546],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Int64&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>"},{"pos":[5573,5741],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.UInt64&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>"},{"pos":[5767,5935],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.UInt64&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>"},{"pos":[5961,6129],"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.UInt64&gt;</ph>","source":"<xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>"},{"pos":[6139,6147],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6204,6283],"content":"<bpt id=\"p1\">[</bpt>Type Conversion in .NET<ept id=\"p1\">](../../../docs/standard/base-types/type-conversion.md)</ept>","source":"[Type Conversion in .NET](../../../docs/standard/base-types/type-conversion.md)"}]}