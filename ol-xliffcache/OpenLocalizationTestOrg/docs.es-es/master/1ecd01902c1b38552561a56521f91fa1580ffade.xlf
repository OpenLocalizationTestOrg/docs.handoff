<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="boolean-data-types.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ecd01902c1b38552561a56521f91fa1580ffade</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\boolean-data-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99b00591564af4020116760a2101181be6db9ceb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">069e2a7516475e3cf86c6f7f7228a21d2dfc4272</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Boolean Data Types</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Boolean Data Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Boolean operators work as expected in the common language runtime (CLR), except that short-circuiting behavior is not translated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, the Visual Basic <ph id="ph1">`AndAlso`</ph> operator behaves like the <ph id="ph2">`And`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The C# <ph id="ph1">`&amp;&amp;`</ph> operator behaves like the <ph id="ph2">`&amp;`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> supports the following operators.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Visual Basic</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>C#</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>And Operator<ept id="p1">](~/docs/visual-basic/language-reference/operators/and-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp; Operator<ept id="p1">](~/docs/csharp/language-reference/operators/and-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AndAlso Operator<ept id="p1">](~/docs/visual-basic/language-reference/operators/andalso-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;&amp; Operator<ept id="p1">](~/docs/csharp/language-reference/operators/conditional-and-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Or Operator<ept id="p1">](~/docs/visual-basic/language-reference/operators/or-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#124; Operator<ept id="p1">](~/docs/csharp/language-reference/operators/or-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OrElse Operator<ept id="p1">](~/docs/visual-basic/language-reference/operators/orelse-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#124;&amp;#124; Operator<ept id="p1">](~/docs/csharp/language-reference/operators/conditional-or-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Xor Operator<ept id="p1">](~/docs/visual-basic/language-reference/operators/xor-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>^ Operator<ept id="p1">](~/docs/csharp/language-reference/operators/xor-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Not Operator<ept id="p1">](~/docs/visual-basic/language-reference/operators/not-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\!</ph> Operator<ept id="p1">](~/docs/csharp/language-reference/operators/logical-negation-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types and Functions<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>