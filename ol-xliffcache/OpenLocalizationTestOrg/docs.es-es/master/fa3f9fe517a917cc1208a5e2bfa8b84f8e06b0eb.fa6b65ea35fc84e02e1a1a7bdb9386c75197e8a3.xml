{"content":"---\ntitle: \"BETWEEN (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 4dcdd754-ae01-4e78-bf28-8a117fb2b73e\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# BETWEEN (Entity SQL)\nDetermines whether an expression results in a value in a specified range. The [!INCLUDE[esql](../../../../../../includes/esql-md.md)] BETWEEN expression has the same functionality as the Transact-SQL BETWEEN expression.  \n  \n## Syntax  \n  \n```  \n  \nexpression [ NOT ] BETWEEN begin_expression AND end_expression    \n```  \n  \n## Arguments  \n `expression`  \n Any valid expression to test for in the range defined by `begin_expression` and `end_expression`. `expression` must be the same type as both `begin_expression` and `end_expression`.  \n  \n `begin_expression`  \n Any valid expression. `begin_expression` must be the same type as both `expression` and `end_expression`. `begin_expression` should be less than `end_expression`, else the return value will be negated.  \n  \n `end_expression`  \n Any valid expression. `end_expression` must be the same type as both `expression` and `begin_expression`.  \n  \n NOT  \n Specifies that the result of BETWEEN be negated.  \n  \n AND  \n Acts as a placeholder that indicates `expression` should be within the range indicated by `begin_expression` and `end_expression`.  \n  \n## Return Value  \n `true` if `expression` is between the range indicated by `begin_expression` and `end_expression`; otherwise, `false`. `null` will be returned if `expression` is `null` or if `begin_expression` or `end_expression` is `null`.  \n  \n## Remarks  \n To specify an exclusive range, use the greater than (>) and less than (<) operators instead of BETWEEN.  \n  \n## Example  \n The following Entity SQL query uses BETWEEN operator to determine whether an expression results in a value in a specified range. The query is based on the AdventureWorks Sales Model. To compile and run this query, follow these steps:  \n  \n1.  Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md).  \n  \n2.  Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:  \n  \n [!code-csharp[DP EntityServices Concepts 2#BETWEEN](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts 2/cs/entitysql.cs#between)]  \n  \n## See Also  \n [Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)","nodes":[{"pos":[4,395],"embed":true,"restype":"x-metadata","content":"title: \"BETWEEN (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 4dcdd754-ae01-4e78-bf28-8a117fb2b73e\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"BETWEEN (Entity SQL) | Microsoft Docs","nodes":[{"pos":[0,37],"content":"BETWEEN (Entity SQL) | Microsoft Docs","nodes":[{"content":"BETWEEN (Entity SQL) | Microsoft Docs","pos":[0,37]}]}],"path":["title"]}],"yml":true},{"pos":[402,422],"content":"BETWEEN (Entity SQL)","linkify":"BETWEEN (Entity SQL)","nodes":[{"content":"BETWEEN (Entity SQL)","pos":[0,20]}]},{"content":"Determines whether an expression results in a value in a specified range.","pos":[423,496]},{"content":"The <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> BETWEEN expression has the same functionality as the Transact-SQL BETWEEN expression.","pos":[497,642],"source":" The [!INCLUDE[esql](../../../../../../includes/esql-md.md)] BETWEEN expression has the same functionality as the Transact-SQL BETWEEN expression."},{"pos":[651,657],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[751,760],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"Any valid expression to test for in the range defined by <ph id=\"ph1\">`begin_expression`</ph> and <ph id=\"ph2\">`end_expression`</ph>.","pos":[780,877],"source":"Any valid expression to test for in the range defined by `begin_expression` and `end_expression`."},{"content":"<ph id=\"ph1\">`expression`</ph> must be the same type as both <ph id=\"ph2\">`begin_expression`</ph> and <ph id=\"ph3\">`end_expression`</ph>.","pos":[878,961],"source":"`expression` must be the same type as both `begin_expression` and `end_expression`."},{"content":"Any valid expression.","pos":[990,1011]},{"content":"<ph id=\"ph1\">`begin_expression`</ph> must be the same type as both <ph id=\"ph2\">`expression`</ph> and <ph id=\"ph3\">`end_expression`</ph>.","pos":[1012,1095],"source":"`begin_expression` must be the same type as both `expression` and `end_expression`."},{"content":"<ph id=\"ph1\">`begin_expression`</ph> should be less than <ph id=\"ph2\">`end_expression`</ph>, else the return value will be negated.","pos":[1096,1191],"source":"`begin_expression` should be less than `end_expression`, else the return value will be negated."},{"content":"Any valid expression.","pos":[1218,1239]},{"content":"<ph id=\"ph1\">`end_expression`</ph> must be the same type as both <ph id=\"ph2\">`expression`</ph> and <ph id=\"ph3\">`begin_expression`</ph>.","pos":[1240,1323],"source":"`end_expression` must be the same type as both `expression` and `begin_expression`."},{"content":"NOT","pos":[1330,1333]},{"content":"Specifies that the result of BETWEEN be negated.","pos":[1337,1385]},{"content":"AND","pos":[1392,1395]},{"content":"Acts as a placeholder that indicates <ph id=\"ph1\">`expression`</ph> should be within the range indicated by <ph id=\"ph2\">`begin_expression`</ph> and <ph id=\"ph3\">`end_expression`</ph>.","pos":[1399,1529],"source":"Acts as a placeholder that indicates `expression` should be within the range indicated by `begin_expression` and `end_expression`."},{"pos":[1538,1550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`expression`</ph> is between the range indicated by <ph id=\"ph3\">`begin_expression`</ph> and <ph id=\"ph4\">`end_expression`</ph>; otherwise, <ph id=\"ph5\">`false`</ph>.","pos":[1554,1671],"source":"`true` if `expression` is between the range indicated by `begin_expression` and `end_expression`; otherwise, `false`."},{"content":"<ph id=\"ph1\">`null`</ph> will be returned if <ph id=\"ph2\">`expression`</ph> is <ph id=\"ph3\">`null`</ph> or if <ph id=\"ph4\">`begin_expression`</ph> or <ph id=\"ph5\">`end_expression`</ph> is <ph id=\"ph6\">`null`</ph>.","pos":[1672,1777],"source":"`null` will be returned if `expression` is `null` or if `begin_expression` or `end_expression` is `null`."},{"pos":[1786,1793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To specify an exclusive range, use the greater than (&gt;) and less than (&lt;) operators instead of BETWEEN.","pos":[1797,1900],"source":"To specify an exclusive range, use the greater than (>) and less than (<) operators instead of BETWEEN."},{"pos":[1909,1916],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following Entity SQL query uses BETWEEN operator to determine whether an expression results in a value in a specified range.","pos":[1920,2048]},{"content":"The query is based on the AdventureWorks Sales Model.","pos":[2049,2102]},{"content":"To compile and run this query, follow these steps:","pos":[2103,2153]},{"pos":[2163,2360],"content":"Follow the procedure in <bpt id=\"p1\">[</bpt>How to: Execute a Query that Returns StructuralType Results<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)</ept>.","source":"Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)."},{"pos":[2370,2453],"content":"Pass the following query as an argument to the <ph id=\"ph1\">`ExecuteStructuralTypeQuery`</ph> method:","source":"Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:"},{"pos":[2634,2642],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2646,2760],"content":"<bpt id=\"p1\">[</bpt>Entity SQL Reference<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept>","source":"[Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)"}]}