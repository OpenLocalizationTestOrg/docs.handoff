{"content":"---\ntitle: \"Weakly-typed JSON Serialization Sample | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0b30e501-4ef5-474d-9fad-a9d559cf9c52\ncaps.latest.revision: 13\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Weakly-typed JSON Serialization Sample\nWhen serializing a user-defined type to a given wire format, or deserializing a wire format back into a user-defined type, the given user-defined type must be available on both the service and the client. Usually to accomplish this, the <xref:System.Runtime.Serialization.DataContractAttribute> attribute is applied to these user-defined types and the <xref:System.Runtime.Serialization.DataMemberAttribute> attribute is applied to their members. This mechanism also applies when working with JavaScript Object Notation (JSON) objects, as described in the topic [How to: Serialize and Deserialize JSON Data](../../../../docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md).  \n  \n In some scenarios, a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service or client must access JSON objects generated by a service or client that is outside of the control of the developer. As more Web services publicly expose JSON APIs, it can become impractical for the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] developer to construct local user-defined types into which to deserialize arbitrary JSON objects. This sample provides a mechanism that enables [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] developers to work with deserialized, arbitrary JSON objects, without creating user-defined types. This is known as *weakly-typed serialization* of JSON objects, because the type into which a JSON object deserializes is not known at compile time.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n For example, a public Web service API returns the following JSON object, which describes some information about a user of the service.  \n  \n```  \n{\"personal\": {\"name\": \"Paul\", \"age\": 23, \"height\": 1.7, \"isSingle\": true, \"luckyNumbers\": [5,17,21]}, \"favoriteBands\": [\"Band ABC\", \"Band XYZ\"]}  \n```  \n  \n To deserialize this object, a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client must implement the following user-defined types.  \n  \n```  \n[DataContract]  \n public class MemberProfile  \n {  \n     [DataMember]  \n     public PersonalInfo personal;  \n  \n     [DataMember]  \n     public string[] favoriteBands;  \n }  \n  \n [DataContract]  \n public class PersonalInfo  \n {  \n     [DataMember]  \n     public string name;  \n  \n     [DataMember]  \n     public int age;  \n  \n     [DataMember]  \n     public double height;  \n  \n     [DataMember]  \n     public bool isSingle;  \n  \n     [DataMember]  \n     public int[] luckyNumbers;  \n }  \n  \n```  \n  \n This can be cumbersome, especially if the client has to handle more than one type of JSON object.  \n  \n The `JsonObject` type provided by this sample introduces a weakly-typed representation of the deserialized JSON object. `JsonObject` relies on the natural mapping between JSON objects and [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] dictionaries, and the mapping between JSON arrays and [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] arrays. The following code shows the `JsonObject` type.  \n  \n```  \n// Instantiation of JsonObject json omitted  \n  \nstring name = json[\"root\"][\"personal\"][\"name\"];  \nint age = json[\"root\"][\"personal\"][\"age\"];  \ndouble height = json[\"root\"][\"personal\"][\"height\"];  \nbool isSingle = json[\"root\"][\"personal\"][\"isSingle\"];  \nint[] luckyNumbers = {  \n                                     json[\"root\"][\"personal\"][\"luckyNumbers\"][0],  \n                                     json[\"root\"][\"personal\"][\"luckyNumbers\"][1],  \n                                     json[\"root\"][\"personal\"][\"luckyNumbers\"][2]   \n                                 };  \nstring[] favoriteBands = {  \n                                        json[\"root\"][\"favoriteBands\"][0],  \n                                        json[\"root\"][\"favoriteBands\"][1]  \n                                    };  \n```  \n  \n Note that you can \"browse\" JSON objects and arrays without the need to declare their type at compile time. For an explanation of the requirement for the top-level `[\"root\"]` object, see the topic [Mapping Between JSON and XML](../../../../docs/framework/wcf/feature-details/mapping-between-json-and-xml.md).  \n  \n> [!NOTE]\n>  The `JsonObject` class is provided as an example only. It has not been thoroughly tested, and should not be used in production environments. An obvious implication of weakly-typed JSON serialization is the lack of type-safety when working with `JsonObject`.  \n  \n To use the `JsonObject` type, the client operation contract must use <xref:System.ServiceModel.Channels.Message> as its return type.  \n  \n```  \n[ServiceContract]  \n    interface IClientSideProfileService  \n    {  \n        // There is no need to write a DataContract for the complex type returned by the service.  \n        // The client will use a JsonObject to browse the JSON in the received message.  \n  \n        [OperationContract]  \n        [WebGet(ResponseFormat = WebMessageFormat.Json)]  \n        Message GetMemberProfile();  \n    }  \n  \n```  \n  \n The `JsonObject` is then instantiated as shown in the following code.  \n  \n```  \n// Code to instantiate IClientSideProfileService channel omittedâ€¦  \n  \n// Make a request to the service and obtain the Json response  \nXmlDictionaryReader reader = channel.GetMemberProfile().GetReaderAtBodyContents();  \n  \n// Go through the Json as though it is a dictionary. There is no need to map it to a .NET CLR type.  \nJsonObject json = new JsonObject(reader);  \n  \n```  \n  \n The `JsonObject` constructor takes a <xref:System.Xml.XmlDictionaryReader>, which is obtained through the <xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents%2A> method. The reader contains an XML representation of the JSON message received by the client. [!INCLUDE[crdefault](../../../../includes/crdefault-md.md)] the topic [Mapping Between JSON and XML](../../../../docs/framework/wcf/feature-details/mapping-between-json-and-xml.md).  \n  \n The program produces the following output:  \n  \n```  \nService listening at http://localhost:8000/.  \nTo view the JSON output from the sample, navigate to http://localhost:8000/GetMemberProfile  \nThis is Paul's page. I am 23 years old and I am 1.7 meters tall.  \nI am single.  \nMy lucky numbers are 5, 17, and 21.  \nMy favorite bands are Band ABC and Band XYZ.  \n```  \n  \n### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  Build the solution WeaklyTypedJson.sln as described in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  Run the solution.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Scenario\\Ajax\\WeaklyTypedJson`  \n  \n## See Also","nodes":[{"pos":[12,67],"content":"Weakly-typed JSON Serialization Sample | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Weakly-typed JSON Serialization Sample | Microsoft Docs","pos":[0,55]}]},{"pos":[366,404],"content":"Weakly-typed JSON Serialization Sample","linkify":"Weakly-typed JSON Serialization Sample","nodes":[{"content":"Weakly-typed JSON Serialization Sample","pos":[0,38]}]},{"content":"When serializing a user-defined type to a given wire format, or deserializing a wire format back into a user-defined type, the given user-defined type must be available on both the service and the client.","pos":[405,609]},{"content":"Usually to accomplish this, the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute is applied to these user-defined types and the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attribute is applied to their members.","pos":[610,851],"source":" Usually to accomplish this, the <xref:System.Runtime.Serialization.DataContractAttribute> attribute is applied to these user-defined types and the <xref:System.Runtime.Serialization.DataMemberAttribute> attribute is applied to their members."},{"content":"This mechanism also applies when working with JavaScript Object Notation (JSON) objects, as described in the topic <bpt id=\"p1\">[</bpt>How to: Serialize and Deserialize JSON Data<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)</ept>.","pos":[852,1107],"source":" This mechanism also applies when working with JavaScript Object Notation (JSON) objects, as described in the topic [How to: Serialize and Deserialize JSON Data](../../../../docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)."},{"content":"In some scenarios, a <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service or client must access JSON objects generated by a service or client that is outside of the control of the developer.","pos":[1114,1315],"source":"In some scenarios, a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service or client must access JSON objects generated by a service or client that is outside of the control of the developer."},{"content":"As more Web services publicly expose JSON APIs, it can become impractical for the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> developer to construct local user-defined types into which to deserialize arbitrary JSON objects.","pos":[1316,1551],"source":" As more Web services publicly expose JSON APIs, it can become impractical for the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] developer to construct local user-defined types into which to deserialize arbitrary JSON objects."},{"content":"This sample provides a mechanism that enables <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> developers to work with deserialized, arbitrary JSON objects, without creating user-defined types.","pos":[1552,1752],"source":" This sample provides a mechanism that enables [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] developers to work with deserialized, arbitrary JSON objects, without creating user-defined types."},{"content":"This is known as <bpt id=\"p1\">*</bpt>weakly-typed serialization<ept id=\"p1\">*</ept> of JSON objects, because the type into which a JSON object deserializes is not known at compile time.","pos":[1753,1900],"source":" This is known as *weakly-typed serialization* of JSON objects, because the type into which a JSON object deserializes is not known at compile time."},{"pos":[1908,2015],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"content":"For example, a public Web service API returns the following JSON object, which describes some information about a user of the service.","pos":[2022,2156]},{"pos":[2325,2466],"content":"To deserialize this object, a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client must implement the following user-defined types.","source":"To deserialize this object, a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client must implement the following user-defined types."},{"content":"This can be cumbersome, especially if the client has to handle more than one type of JSON object.","pos":[2980,3077]},{"content":"The <ph id=\"ph1\">`JsonObject`</ph> type provided by this sample introduces a weakly-typed representation of the deserialized JSON object.","pos":[3084,3203],"source":"The `JsonObject` type provided by this sample introduces a weakly-typed representation of the deserialized JSON object."},{"content":"<ph id=\"ph1\">`JsonObject`</ph> relies on the natural mapping between JSON objects and <ph id=\"ph2\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> dictionaries, and the mapping between JSON arrays and <ph id=\"ph3\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> arrays.","pos":[3204,3461],"source":"`JsonObject` relies on the natural mapping between JSON objects and [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] dictionaries, and the mapping between JSON arrays and [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] arrays."},{"content":"The following code shows the <ph id=\"ph1\">`JsonObject`</ph> type.","pos":[3462,3509],"source":" The following code shows the `JsonObject` type."},{"content":"Note that you can \"browse\" JSON objects and arrays without the need to declare their type at compile time.","pos":[4321,4427]},{"content":"For an explanation of the requirement for the top-level <ph id=\"ph1\">`[\"root\"]`</ph> object, see the topic <bpt id=\"p1\">[</bpt>Mapping Between JSON and XML<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/mapping-between-json-and-xml.md)</ept>.","pos":[4428,4628],"source":" For an explanation of the requirement for the top-level `[\"root\"]` object, see the topic [Mapping Between JSON and XML](../../../../docs/framework/wcf/feature-details/mapping-between-json-and-xml.md)."},{"pos":[4636,4904],"content":"[!NOTE]\n The `JsonObject` class is provided as an example only. It has not been thoroughly tested, and should not be used in production environments. An obvious implication of weakly-typed JSON serialization is the lack of type-safety when working with `JsonObject`.","leadings":["","> "],"nodes":[{"content":" The `JsonObject` class is provided as an example only. It has not been thoroughly tested, and should not be used in production environments. An obvious implication of weakly-typed JSON serialization is the lack of type-safety when working with `JsonObject`.","pos":[8,266],"nodes":[{"content":"The <ph id=\"ph1\">`JsonObject`</ph> class is provided as an example only.","pos":[1,55],"source":" The `JsonObject` class is provided as an example only."},{"content":"It has not been thoroughly tested, and should not be used in production environments.","pos":[56,141]},{"content":"An obvious implication of weakly-typed JSON serialization is the lack of type-safety when working with <ph id=\"ph1\">`JsonObject`</ph>.","pos":[142,258],"source":" An obvious implication of weakly-typed JSON serialization is the lack of type-safety when working with `JsonObject`."}]}]},{"pos":[4911,5043],"content":"To use the <ph id=\"ph1\">`JsonObject`</ph> type, the client operation contract must use <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> as its return type.","source":"To use the `JsonObject` type, the client operation contract must use <xref:System.ServiceModel.Channels.Message> as its return type."},{"pos":[5466,5535],"content":"The <ph id=\"ph1\">`JsonObject`</ph> is then instantiated as shown in the following code.","source":"The `JsonObject` is then instantiated as shown in the following code."},{"content":"The <ph id=\"ph1\">`JsonObject`</ph> constructor takes a <ph id=\"ph2\">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph>, which is obtained through the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents%2A&gt;</ph> method.","pos":[5929,6113],"source":"The `JsonObject` constructor takes a <xref:System.Xml.XmlDictionaryReader>, which is obtained through the <xref:System.ServiceModel.Channels.Message.GetReaderAtBodyContents%2A> method."},{"content":"The reader contains an XML representation of the JSON message received by the client.","pos":[6114,6199]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> the topic <bpt id=\"p1\">[</bpt>Mapping Between JSON and XML<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/mapping-between-json-and-xml.md)</ept>.","pos":[6200,6381],"source":"[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)] the topic [Mapping Between JSON and XML](../../../../docs/framework/wcf/feature-details/mapping-between-json-and-xml.md)."},{"content":"The program produces the following output:","pos":[6388,6430]},{"pos":[6763,6799],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[6809,7008],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[7018,7193],"content":"Build the solution WeaklyTypedJson.sln as described in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"Build the solution WeaklyTypedJson.sln as described in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"content":"Run the solution.","pos":[7203,7220]},{"pos":[7228,7360],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[7414,7740],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[7741,7791]},{"pos":[7877,7885],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}