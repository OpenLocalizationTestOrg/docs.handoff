{"content":"---\ntitle: \"Duplex Services | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 396b875a-d203-4ebe-a3a1-6a330d962e95\ncaps.latest.revision: 17\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Duplex Services\nA duplex service contract is a message exchange pattern in which both endpoints can send messages to the other independently. A duplex service, therefore, can send messages back to the client endpoint, providing event-like behavior. Duplex communication occurs when a client connects to a service and provides the service with a channel on which the service can send messages back to the client. Note that the event-like behavior of duplex services only works within a session.  \n  \n To create a duplex contract you create a pair of interfaces. The first is the service contract interface that describes the operations that a client can invoke. That service contract must specify a *callback contract* in the <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A?displayProperty=fullName> property. The callback contract is the interface that defines the operations that the service can call on the client endpoint. A duplex contract does not require a session, although the system-provided duplex bindings make use of them.  \n  \n The following is an example of a duplex contract.  \n  \n [!code-csharp[c_DuplexServices#0](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/service.cs#0)]\n [!code-vb[c_DuplexServices#0](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/service.vb#0)]  \n  \n The `CalculatorService` class implements the primary `ICalculatorDuplex` interface. The service uses the <xref:System.ServiceModel.InstanceContextMode> instance mode to maintain the result for each session. A private property named `Callback` accesses the callback channel to the client. The service uses the callback for sending messages back to the client through the callback interface, as shown in the following sample code.  \n  \n [!code-csharp[c_DuplexServices#1](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/service.cs#1)]\n [!code-vb[c_DuplexServices#1](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/service.vb#1)]  \n  \n The client must provide a class that implements the callback interface of the duplex contract, for receiving messages from the service. The following sample code shows a `CallbackHandler` class that implements the `ICalculatorDuplexCallback` interface.  \n  \n [!code-csharp[c_DuplexServices#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/client.cs#2)]\n [!code-vb[c_DuplexServices#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/client.vb#2)]  \n  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client that is generated for a duplex contract requires a <xref:System.ServiceModel.InstanceContext> class to be provided upon construction. This <xref:System.ServiceModel.InstanceContext> class is used as the site for an object that implements the callback interface and handles messages that are sent back from the service. An <xref:System.ServiceModel.InstanceContext> class is constructed with an instance of the `CallbackHandler` class. This object handles messages sent from the service to the client on the callback interface.  \n  \n [!code-csharp[c_DuplexServices#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/client.cs#3)]\n [!code-vb[c_DuplexServices#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/client.vb#3)]  \n  \n The configuration for the service must be set up to provide a binding that supports both session communication and duplex communication. The `wsDualHttpBinding` element supports session communication and allows duplex communication by providing dual HTTP connections, one for each direction.  \n  \n On the client, you must configure an address that the server can use to connect to the client, as shown in the following sample configuration.  \n  \n  \n  \n> [!NOTE]\n>  Non-duplex clients that fail to authenticate using a secure conversation typically throw a <xref:System.ServiceModel.Security.MessageSecurityException>. However, if a duplex client that uses a secure conversation fails to authenticate, the client receives a <xref:System.TimeoutException> instead.  \n  \n If you create a client/service using the `WSHttpBinding` element and you do not include the client callback endpoint, you will receive the following error.  \n  \n```  \nHTTP could not register URL  \nhtp://+:80/Temporary_Listen_Addresses/<guid> because TCP port 80 is being used by another application.  \n```  \n  \n The following sample code shows how to specify the client endpoint address in code.  \n  \n```  \nWSDualHttpBinding binding = new WSDualHttpBinding();  \nEndpointAddress endptadr = new EndpointAddress(\"http://localhost:12000/DuplexTestUsingCode/Server\");  \nbinding.ClientBaseAddress = new Uri(\"http://localhost:8000/DuplexTestUsingCode/Client/\");  \n```  \n  \n The following sample code shows how to specify the client endpoint address in configuration.  \n  \n```  \n<client>  \n    <endpoint name =\"ServerEndpoint\"   \n          address=\"http://localhost:12000/DuplexTestUsingConfig/Server\"  \n          bindingConfiguration=\"WSDualHttpBinding_IDuplexTest\"   \n            binding=\"wsDualHttpBinding\"  \n           contract=\"IDuplexTest\" />  \n</client>  \n<bindings>  \n    <wsDualHttpBinding>  \n        <binding name=\"WSDualHttpBinding_IDuplexTest\"    \n          clientBaseAddress=\"http://localhost:8000/myClient/\" >  \n            <security mode=\"None\"/>  \n         </binding>  \n    </wsDualHttpBinding>  \n</bindings>  \n  \n```  \n  \n> [!WARNING]\n>  The duplex model does not automatically detect when a service or client closes its channel. So if a client unexpectedly terminates, by default the service will not be notified, or if a client unexpectedly terminates, the service will not be notified. Clients and services can implement their own protocol to notify each other if they so choose.  \n  \n## See Also  \n [Duplex](../../../../docs/framework/wcf/samples/duplex.md)   \n [Specifying Client Run-Time Behavior](../../../../docs/framework/wcf/specifying-client-run-time-behavior.md)   \n [How to: Create a Channel Factory and Use it to Create and Manage Channels](../../../../docs/framework/wcf/feature-details/how-to-create-a-channel-factory-and-use-it-to-create-and-manage-channels.md)","nodes":[{"pos":[4,336],"nodes":[{"content":"Duplex Services | Microsoft Docs","nodes":[{"pos":[0,32],"content":"Duplex Services | Microsoft Docs","nodes":[{"content":"Duplex Services | Microsoft Docs","pos":[0,32]}]}],"pos":[6,41],"yaml":true}],"content":"title: \"Duplex Services | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 396b875a-d203-4ebe-a3a1-6a330d962e95\ncaps.latest.revision: 17\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[343,358],"content":"Duplex Services","linkify":"Duplex Services","nodes":[{"content":"Duplex Services","pos":[0,15]}]},{"content":"A duplex service contract is a message exchange pattern in which both endpoints can send messages to the other independently.","pos":[359,484]},{"content":"A duplex service, therefore, can send messages back to the client endpoint, providing event-like behavior.","pos":[485,591]},{"content":"Duplex communication occurs when a client connects to a service and provides the service with a channel on which the service can send messages back to the client.","pos":[592,754]},{"content":"Note that the event-like behavior of duplex services only works within a session.","pos":[755,836]},{"content":"To create a duplex contract you create a pair of interfaces.","pos":[843,903]},{"content":"The first is the service contract interface that describes the operations that a client can invoke.","pos":[904,1003]},{"content":"That service contract must specify a <bpt id=\"p1\">*</bpt>callback contract<ept id=\"p1\">*</ept> in the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A?displayProperty=fullName&gt;</ph> property.","pos":[1004,1174],"source":" That service contract must specify a *callback contract* in the <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A?displayProperty=fullName> property."},{"content":"The callback contract is the interface that defines the operations that the service can call on the client endpoint.","pos":[1175,1291]},{"content":"A duplex contract does not require a session, although the system-provided duplex bindings make use of them.","pos":[1292,1400]},{"content":"The following is an example of a duplex contract.","pos":[1407,1456]},{"pos":[1463,1706],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>c_DuplexServices#0<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/service.cs#0)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>c_DuplexServices#0<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/service.vb#0)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[c_DuplexServices#0](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/service.cs#0)]\n [!code-vb[c_DuplexServices#0](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/service.vb#0)]"},{"content":"The <ph id=\"ph1\">`CalculatorService`</ph> class implements the primary <ph id=\"ph2\">`ICalculatorDuplex`</ph> interface.","pos":[1713,1796],"source":"The `CalculatorService` class implements the primary `ICalculatorDuplex` interface."},{"content":"The service uses the <ph id=\"ph1\">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> instance mode to maintain the result for each session.","pos":[1797,1919],"source":" The service uses the <xref:System.ServiceModel.InstanceContextMode> instance mode to maintain the result for each session."},{"content":"A private property named <ph id=\"ph1\">`Callback`</ph> accesses the callback channel to the client.","pos":[1920,2000],"source":" A private property named `Callback` accesses the callback channel to the client."},{"content":"The service uses the callback for sending messages back to the client through the callback interface, as shown in the following sample code.","pos":[2001,2141]},{"pos":[2148,2391],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>c_DuplexServices#1<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/service.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>c_DuplexServices#1<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/service.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[c_DuplexServices#1](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/service.cs#1)]\n [!code-vb[c_DuplexServices#1](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/service.vb#1)]"},{"content":"The client must provide a class that implements the callback interface of the duplex contract, for receiving messages from the service.","pos":[2398,2533]},{"content":"The following sample code shows a <ph id=\"ph1\">`CallbackHandler`</ph> class that implements the <ph id=\"ph2\">`ICalculatorDuplexCallback`</ph> interface.","pos":[2534,2650],"source":" The following sample code shows a `CallbackHandler` class that implements the `ICalculatorDuplexCallback` interface."},{"pos":[2657,2898],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>c_DuplexServices#2<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/client.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>c_DuplexServices#2<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/client.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[c_DuplexServices#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/client.cs#2)]\n [!code-vb[c_DuplexServices#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/client.vb#2)]"},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client that is generated for a duplex contract requires a <ph id=\"ph2\">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> class to be provided upon construction.","pos":[2905,3105],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client that is generated for a duplex contract requires a <xref:System.ServiceModel.InstanceContext> class to be provided upon construction."},{"content":"This <ph id=\"ph1\">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> class is used as the site for an object that implements the callback interface and handles messages that are sent back from the service.","pos":[3106,3290],"source":" This <xref:System.ServiceModel.InstanceContext> class is used as the site for an object that implements the callback interface and handles messages that are sent back from the service."},{"content":"An <ph id=\"ph1\">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> class is constructed with an instance of the <ph id=\"ph2\">`CallbackHandler`</ph> class.","pos":[3291,3406],"source":" An <xref:System.ServiceModel.InstanceContext> class is constructed with an instance of the `CallbackHandler` class."},{"content":"This object handles messages sent from the service to the client on the callback interface.","pos":[3407,3498]},{"pos":[3505,3746],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>c_DuplexServices#3<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/client.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>c_DuplexServices#3<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/client.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[c_DuplexServices#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_duplexservices/cs/client.cs#3)]\n [!code-vb[c_DuplexServices#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_duplexservices/vb/client.vb#3)]"},{"content":"The configuration for the service must be set up to provide a binding that supports both session communication and duplex communication.","pos":[3753,3889]},{"content":"The <ph id=\"ph1\">`wsDualHttpBinding`</ph> element supports session communication and allows duplex communication by providing dual HTTP connections, one for each direction.","pos":[3890,4044],"source":" The `wsDualHttpBinding` element supports session communication and allows duplex communication by providing dual HTTP connections, one for each direction."},{"content":"On the client, you must configure an address that the server can use to connect to the client, as shown in the following sample configuration.","pos":[4051,4193]},{"pos":[4207,4515],"content":"[!NOTE]\n Non-duplex clients that fail to authenticate using a secure conversation typically throw a <xref:System.ServiceModel.Security.MessageSecurityException>. However, if a duplex client that uses a secure conversation fails to authenticate, the client receives a <xref:System.TimeoutException> instead.","leadings":["","> "],"nodes":[{"content":"Non-duplex clients that fail to authenticate using a secure conversation typically throw a <xref:System.ServiceModel.Security.MessageSecurityException>. However, if a duplex client that uses a secure conversation fails to authenticate, the client receives a <xref:System.TimeoutException> instead.","pos":[9,306],"nodes":[{"content":"Non-duplex clients that fail to authenticate using a secure conversation typically throw a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.MessageSecurityException&gt;</ph>.","pos":[0,152],"source":"Non-duplex clients that fail to authenticate using a secure conversation typically throw a <xref:System.ServiceModel.Security.MessageSecurityException>."},{"content":"However, if a duplex client that uses a secure conversation fails to authenticate, the client receives a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> instead.","pos":[153,297],"source":" However, if a duplex client that uses a secure conversation fails to authenticate, the client receives a <xref:System.TimeoutException> instead."}]}]},{"pos":[4522,4677],"content":"If you create a client/service using the <ph id=\"ph1\">`WSHttpBinding`</ph> element and you do not include the client callback endpoint, you will receive the following error.","source":"If you create a client/service using the `WSHttpBinding` element and you do not include the client callback endpoint, you will receive the following error."},{"content":"The following sample code shows how to specify the client endpoint address in code.","pos":[4834,4917]},{"content":"The following sample code shows how to specify the client endpoint address in configuration.","pos":[5189,5281]},{"pos":[5855,6213],"content":"[!WARNING]\n The duplex model does not automatically detect when a service or client closes its channel. So if a client unexpectedly terminates, by default the service will not be notified, or if a client unexpectedly terminates, the service will not be notified. Clients and services can implement their own protocol to notify each other if they so choose.","leadings":["","> "],"nodes":[{"content":"The duplex model does not automatically detect when a service or client closes its channel. So if a client unexpectedly terminates, by default the service will not be notified, or if a client unexpectedly terminates, the service will not be notified. Clients and services can implement their own protocol to notify each other if they so choose.","pos":[12,356],"nodes":[{"content":"The duplex model does not automatically detect when a service or client closes its channel.","pos":[0,91]},{"content":"So if a client unexpectedly terminates, by default the service will not be notified, or if a client unexpectedly terminates, the service will not be notified.","pos":[92,250]},{"content":"Clients and services can implement their own protocol to notify each other if they so choose.","pos":[251,344]}]}]},{"pos":[6222,6230],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Duplex<ept id=\"p1\">](../../../../docs/framework/wcf/samples/duplex.md)</ept><ph id=\"ph1\"> </ph>","pos":[6234,6293],"source":"[Duplex](../../../../docs/framework/wcf/samples/duplex.md) "},{"content":"<bpt id=\"p1\">[</bpt>Specifying Client Run-Time Behavior<ept id=\"p1\">](../../../../docs/framework/wcf/specifying-client-run-time-behavior.md)</ept><ph id=\"ph1\"> </ph>","pos":[6297,6406],"source":"[Specifying Client Run-Time Behavior](../../../../docs/framework/wcf/specifying-client-run-time-behavior.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Create a Channel Factory and Use it to Create and Manage Channels<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-create-a-channel-factory-and-use-it-to-create-and-manage-channels.md)</ept>","pos":[6410,6609],"source":"[How to: Create a Channel Factory and Use it to Create and Manage Channels](../../../../docs/framework/wcf/feature-details/how-to-create-a-channel-factory-and-use-it-to-create-and-manage-channels.md)"}]}