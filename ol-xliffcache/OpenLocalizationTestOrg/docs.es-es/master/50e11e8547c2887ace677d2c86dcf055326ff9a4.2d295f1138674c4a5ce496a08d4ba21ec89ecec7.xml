{"content":"---\ntitle: \"double keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"double\"\n  - \"double_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"double data type [C#]\"\nms.assetid: 0980e11b-6004-4102-abcf-cfc280fc6991\n---\n# double (C# Reference)\n\nThe `double` keyword signifies a simple type that stores 64-bit floating-point values. The following table shows the precision and approximate range for the `double` type.\n\n|Type|Approximate range|Precision|.NET type|\n|----------|-----------------------|---------------|-------------------------|\n|`double`|±5.0 × 10<sup>−324</sup> to ±1.7 × 10<sup>308</sup>|~15-17 digits|<xref:System.Double?displayProperty=nameWithType>|\n\n## Literals\n\nBy default, a real numeric literal on the right side of the assignment operator is treated as `double`. However, if you want an integer number to be treated as `double`, use the suffix d or D, for example:\n\n```csharp\ndouble x = 3D;\n```\n\n## Conversions\n\nYou can mix numeric integral types and floating-point types in an expression. In this case, the integral types are converted to floating-point types. The evaluation of the expression is performed according to the following rules:\n\n- If one of the floating-point types is `double`, the expression evaluates to `double`, or to [bool](../../../csharp/language-reference/keywords/bool.md) in relational comparisons and comparisons for equality.\n\n- If there is no `double` type in the expression, it evaluates to [float](../../../csharp/language-reference/keywords/float.md), or to [bool](../../../csharp/language-reference/keywords/bool.md) in relational comparisons and comparisons for equality.\n\n A floating-point expression can contain the following sets of values:\n\n- Positive and negative zero.\n\n- Positive and negative infinity.\n\n- Not-a-Number value (NaN).\n\n- The finite set of nonzero values.\n\nFor more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the [IEEE](https://www.ieee.org) Web site.\n\n## Example\n\nIn the following example, an [int](../../../csharp/language-reference/keywords/int.md), a [short](../../../csharp/language-reference/keywords/short.md), a [float](../../../csharp/language-reference/keywords/float.md), and a `double` are added together giving a `double` result.\n\n[!code-csharp[csrefKeywordsTypes#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#9)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)\n- [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)\n- [Floating-Point Types Table](../../../csharp/language-reference/keywords/floating-point-types-table.md)\n- [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,236],"embed":true,"restype":"x-metadata","content":"title: \"double keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"double\"\n  - \"double_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"double data type [C#]\"\nms.assetid: 0980e11b-6004-4102-abcf-cfc280fc6991","nodes":[{"content":"double keyword - C# Reference","nodes":[{"pos":[0,29],"content":"double keyword - C# Reference","nodes":[{"content":"double keyword - C# Reference","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[243,264],"content":"double (C# Reference)","linkify":"double (C# Reference)","nodes":[{"content":"double (C# Reference)","pos":[0,21]}]},{"content":"The <ph id=\"ph1\">`double`</ph> keyword signifies a simple type that stores 64-bit floating-point values.","pos":[266,352],"source":"The `double` keyword signifies a simple type that stores 64-bit floating-point values."},{"content":"The following table shows the precision and approximate range for the <ph id=\"ph1\">`double`</ph> type.","pos":[353,437],"source":" The following table shows the precision and approximate range for the `double` type."},{"content":"Type","pos":[440,444]},{"content":"Approximate range","pos":[445,462]},{"content":"Precision","pos":[463,472]},{"content":".NET type","pos":[473,482]},{"pos":[573,624],"content":"±5.0 × 10<bpt id=\"p1\">&lt;sup&gt;</bpt>−324<ept id=\"p1\">&lt;/sup&gt;</ept> to ±1.7 × 10<bpt id=\"p2\">&lt;sup&gt;</bpt>308<ept id=\"p2\">&lt;/sup&gt;</ept>","source":"±5.0 × 10<sup>−324</sup> to ±1.7 × 10<sup>308</sup>"},{"content":"~15-17 digits","pos":[625,638]},{"pos":[694,702],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"By default, a real numeric literal on the right side of the assignment operator is treated as <ph id=\"ph1\">`double`</ph>.","pos":[704,807],"source":"By default, a real numeric literal on the right side of the assignment operator is treated as `double`."},{"content":"However, if you want an integer number to be treated as <ph id=\"ph1\">`double`</ph>, use the suffix d or D, for example:","pos":[808,909],"source":" However, if you want an integer number to be treated as `double`, use the suffix d or D, for example:"},{"pos":[944,955],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"You can mix numeric integral types and floating-point types in an expression.","pos":[957,1034]},{"content":"In this case, the integral types are converted to floating-point types.","pos":[1035,1106]},{"content":"The evaluation of the expression is performed according to the following rules:","pos":[1107,1186]},{"pos":[1190,1397],"content":"If one of the floating-point types is <ph id=\"ph1\">`double`</ph>, the expression evaluates to <ph id=\"ph2\">`double`</ph>, or to <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../../../csharp/language-reference/keywords/bool.md)</ept> in relational comparisons and comparisons for equality.","source":"If one of the floating-point types is `double`, the expression evaluates to `double`, or to [bool](../../../csharp/language-reference/keywords/bool.md) in relational comparisons and comparisons for equality."},{"pos":[1401,1649],"content":"If there is no <ph id=\"ph1\">`double`</ph> type in the expression, it evaluates to <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept>, or to <bpt id=\"p2\">[</bpt>bool<ept id=\"p2\">](../../../csharp/language-reference/keywords/bool.md)</ept> in relational comparisons and comparisons for equality.","source":"If there is no `double` type in the expression, it evaluates to [float](../../../csharp/language-reference/keywords/float.md), or to [bool](../../../csharp/language-reference/keywords/bool.md) in relational comparisons and comparisons for equality."},{"content":"A floating-point expression can contain the following sets of values:","pos":[1652,1721]},{"content":"Positive and negative zero.","pos":[1725,1752]},{"content":"Positive and negative infinity.","pos":[1756,1787]},{"content":"Not-a-Number value (NaN).","pos":[1791,1816]},{"content":"The finite set of nonzero values.","pos":[1820,1853]},{"pos":[1855,2007],"content":"For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the <bpt id=\"p1\">[</bpt>IEEE<ept id=\"p1\">](https://www.ieee.org)</ept> Web site.","source":"For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the [IEEE](https://www.ieee.org) Web site."},{"pos":[2012,2019],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2021,2298],"content":"In the following example, an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>, a <bpt id=\"p2\">[</bpt>short<ept id=\"p2\">](../../../csharp/language-reference/keywords/short.md)</ept>, a <bpt id=\"p3\">[</bpt>float<ept id=\"p3\">](../../../csharp/language-reference/keywords/float.md)</ept>, and a <ph id=\"ph1\">`double`</ph> are added together giving a <ph id=\"ph2\">`double`</ph> result.","source":"In the following example, an [int](../../../csharp/language-reference/keywords/int.md), a [short](../../../csharp/language-reference/keywords/short.md), a [float](../../../csharp/language-reference/keywords/float.md), and a `double` are added together giving a `double` result."},{"pos":[2430,2455],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2521,2529],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2533,2592],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2595,2661],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2664,2731],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[2734,2825],"content":"<bpt id=\"p1\">[</bpt>Default Values Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>","source":"[Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)"},{"pos":[2828,2919],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>","source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)"},{"pos":[2922,3025],"content":"<bpt id=\"p1\">[</bpt>Floating-Point Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/floating-point-types-table.md)</ept>","source":"[Floating-Point Types Table](../../../csharp/language-reference/keywords/floating-point-types-table.md)"},{"pos":[3028,3147],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)"},{"pos":[3150,3269],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}