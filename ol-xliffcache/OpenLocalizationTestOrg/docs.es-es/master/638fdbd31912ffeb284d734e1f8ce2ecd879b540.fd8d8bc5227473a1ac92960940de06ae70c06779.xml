{"content":"---\ntitle: \"Serialization (C#)\"\nms.date: 04/26/2018\n---\n# Serialization (C#)\n\nSerialization is the process of converting an object into a stream of bytes to store the object or transmit it to memory, a database, or a file. Its main purpose is to save the state of an object in order to be able to recreate it when needed. The reverse process is called deserialization.\n\n## How serialization works\n\nThis illustration shows the overall process of serialization:\n\n![Serialization graphic](./media/index/serialization-process.gif)\n\nThe object is serialized to a stream, which carries not just the data, but information about the object's type, such as its version, culture, and assembly name. From that stream, it can be stored in a database, a file, or memory.\n\n### Uses for serialization\n\nSerialization allows the developer to save the state of an object and recreate it as needed, providing storage of objects as well as data exchange. Through serialization, a developer can perform actions like sending the object to a remote application by means of a Web Service, passing an object from one domain to another, passing an object through a firewall as an XML string, or maintaining security or user-specific information across applications.\n\n### Making an object serializable\n\nTo serialize an object, you need the object to be serialized, a stream to contain the serialized object, and a <xref:System.Runtime.Serialization.Formatter>. <xref:System.Runtime.Serialization> contains the classes necessary for serializing and deserializing objects.\n\nApply the <xref:System.SerializableAttribute> attribute to a type to indicate that instances of this type can be serialized. An  exception is thrown if you attempt to serialize but the type doesn't have the <xref:System.SerializableAttribute> attribute.\n\nIf you don't want a field within your class to be serializable, apply the <xref:System.NonSerializedAttribute> attribute. If a field of a serializable type contains a pointer, a handle, or some other data structure that is specific to a particular environment, and the field cannot be meaningfully reconstituted in a different environment, then you may want to make it nonserializable.\n\nIf a serialized class contains references to objects of other classes that are marked <xref:System.SerializableAttribute>, those objects will also be serialized.\n\n## Binary and XML serialization\n\nYou can use binary or XML serialization. In binary serialization, all members, even members that are read-only, are serialized, and performance is enhanced. XML serialization provides more readable code, and greater flexibility of object sharing and usage for interoperability purposes.\n\n### Binary serialization\n\nBinary serialization uses binary encoding to produce compact serialization for uses such as storage or socket-based network streams.\n\n### XML serialization\n\nXML serialization serializes the public fields and properties of an object, or the parameters and return values of methods, into an XML stream that conforms to a specific XML Schema definition language (XSD) document. XML serialization results in strongly typed classes with public properties and fields that are converted to XML. <xref:System.Xml.Serialization> contains the classes necessary for serializing and deserializing XML.\n\nYou apply attributes to classes and class members to control the way the <xref:System.Xml.Serialization.XmlSerializer> serializes or deserializes an instance of the class.\n\n## Basic and custom serialization\n\nSerialization can be performed in two ways, basic and custom. Basic serialization uses the .NET Framework to automatically serialize the object.\n\n### Basic serialization\n\nThe only requirement in basic serialization is that the object has the <xref:System.SerializableAttribute> attribute applied. The <xref:System.NonSerializedAttribute> can be used to keep specific fields from being serialized.\n\nWhen you use basic serialization, the versioning of objects may create problems. You would use custom serialization when versioning issues are important. Basic serialization is the easiest way to perform serialization, but it does not provide much control over the process.\n\n### Custom serialization\n\nIn custom serialization, you can specify exactly which objects will be serialized and how it will be done. The class must be marked <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface.\n\nIf you want your object to be deserialized in a custom manner as well, you must use a custom constructor.\n\n## Designer serialization\n\nDesigner serialization is a special form of serialization that involves the kind of object persistence associated with development tools. Designer serialization is the process of converting an object graph into a source file that can later be used to recover the object graph. A source file can contain code, markup, or even SQL table information.\n\n## <a name=\"BKMK_RelatedTopics\"></a> Related Topics and Examples  \n[Walkthrough: Persisting an Object in Visual Studio (C#)](walkthrough-persisting-an-object-in-visual-studio.md)  \nDemonstrates how serialization can be used to persist an object's data between instances, allowing you to store values and retrieve them the next time the object is instantiated.\n\n[How to: Read Object Data from an XML File (C#)](how-to-read-object-data-from-an-xml-file.md)  \n Shows how to read object data that was previously written to an XML file using the <xref:System.Xml.Serialization.XmlSerializer> class.\n\n[How to: Write Object Data to an XML File (C#)](how-to-write-object-data-to-an-xml-file.md)  \nShows how to write the object from a class to an XML file using the <xref:System.Xml.Serialization.XmlSerializer> class.\n","nodes":[{"pos":[4,51],"embed":true,"restype":"x-metadata","content":"title: \"Serialization (C#)\"\nms.date: 04/26/2018","nodes":[{"content":"Serialization (C#)","nodes":[{"pos":[0,18],"content":"Serialization (C#)","nodes":[{"content":"Serialization (C#)","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[58,76],"content":"Serialization (C#)","linkify":"Serialization (C#)","nodes":[{"content":"Serialization (C#)","pos":[0,18]}]},{"content":"Serialization is the process of converting an object into a stream of bytes to store the object or transmit it to memory, a database, or a file.","pos":[78,222]},{"content":"Its main purpose is to save the state of an object in order to be able to recreate it when needed.","pos":[223,321]},{"content":"The reverse process is called deserialization.","pos":[322,368]},{"pos":[373,396],"content":"How serialization works","linkify":"How serialization works","nodes":[{"content":"How serialization works","pos":[0,23]}]},{"content":"This illustration shows the overall process of serialization:","pos":[398,459]},{"content":"Serialization graphic","pos":[463,484]},{"content":"The object is serialized to a stream, which carries not just the data, but information about the object's type, such as its version, culture, and assembly name.","pos":[528,688]},{"content":"From that stream, it can be stored in a database, a file, or memory.","pos":[689,757]},{"pos":[763,785],"content":"Uses for serialization","linkify":"Uses for serialization","nodes":[{"content":"Uses for serialization","pos":[0,22]}]},{"content":"Serialization allows the developer to save the state of an object and recreate it as needed, providing storage of objects as well as data exchange.","pos":[787,934]},{"content":"Through serialization, a developer can perform actions like sending the object to a remote application by means of a Web Service, passing an object from one domain to another, passing an object through a firewall as an XML string, or maintaining security or user-specific information across applications.","pos":[935,1239]},{"pos":[1245,1274],"content":"Making an object serializable","linkify":"Making an object serializable","nodes":[{"content":"Making an object serializable","pos":[0,29]}]},{"content":"To serialize an object, you need the object to be serialized, a stream to contain the serialized object, and a <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph>.","pos":[1276,1433],"source":"To serialize an object, you need the object to be serialized, a stream to contain the serialized object, and a <xref:System.Runtime.Serialization.Formatter>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization&gt;</ph> contains the classes necessary for serializing and deserializing objects.","pos":[1434,1543],"source":"<xref:System.Runtime.Serialization> contains the classes necessary for serializing and deserializing objects."},{"content":"Apply the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute to a type to indicate that instances of this type can be serialized.","pos":[1545,1669],"source":"Apply the <xref:System.SerializableAttribute> attribute to a type to indicate that instances of this type can be serialized."},{"content":"An  exception is thrown if you attempt to serialize but the type doesn't have the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.","pos":[1670,1798],"source":" An  exception is thrown if you attempt to serialize but the type doesn't have the <xref:System.SerializableAttribute> attribute."},{"content":"If you don't want a field within your class to be serializable, apply the <ph id=\"ph1\">&lt;xref:System.NonSerializedAttribute&gt;</ph> attribute.","pos":[1800,1921],"source":"If you don't want a field within your class to be serializable, apply the <xref:System.NonSerializedAttribute> attribute."},{"content":"If a field of a serializable type contains a pointer, a handle, or some other data structure that is specific to a particular environment, and the field cannot be meaningfully reconstituted in a different environment, then you may want to make it nonserializable.","pos":[1922,2185]},{"pos":[2187,2348],"content":"If a serialized class contains references to objects of other classes that are marked <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph>, those objects will also be serialized.","source":"If a serialized class contains references to objects of other classes that are marked <xref:System.SerializableAttribute>, those objects will also be serialized."},{"pos":[2353,2381],"content":"Binary and XML serialization","linkify":"Binary and XML serialization","nodes":[{"content":"Binary and XML serialization","pos":[0,28]}]},{"content":"You can use binary or XML serialization.","pos":[2383,2423]},{"content":"In binary serialization, all members, even members that are read-only, are serialized, and performance is enhanced.","pos":[2424,2539]},{"content":"XML serialization provides more readable code, and greater flexibility of object sharing and usage for interoperability purposes.","pos":[2540,2669]},{"pos":[2675,2695],"content":"Binary serialization","linkify":"Binary serialization","nodes":[{"content":"Binary serialization","pos":[0,20]}]},{"content":"Binary serialization uses binary encoding to produce compact serialization for uses such as storage or socket-based network streams.","pos":[2697,2829]},{"pos":[2835,2852],"content":"XML serialization","linkify":"XML serialization","nodes":[{"content":"XML serialization","pos":[0,17]}]},{"content":"XML serialization serializes the public fields and properties of an object, or the parameters and return values of methods, into an XML stream that conforms to a specific XML Schema definition language (XSD) document.","pos":[2854,3071]},{"content":"XML serialization results in strongly typed classes with public properties and fields that are converted to XML.","pos":[3072,3184]},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Serialization&gt;</ph> contains the classes necessary for serializing and deserializing XML.","pos":[3185,3286],"source":"<xref:System.Xml.Serialization> contains the classes necessary for serializing and deserializing XML."},{"pos":[3288,3459],"content":"You apply attributes to classes and class members to control the way the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> serializes or deserializes an instance of the class.","source":"You apply attributes to classes and class members to control the way the <xref:System.Xml.Serialization.XmlSerializer> serializes or deserializes an instance of the class."},{"pos":[3464,3494],"content":"Basic and custom serialization","linkify":"Basic and custom serialization","nodes":[{"content":"Basic and custom serialization","pos":[0,30]}]},{"content":"Serialization can be performed in two ways, basic and custom.","pos":[3496,3557]},{"content":"Basic serialization uses the .NET Framework to automatically serialize the object.","pos":[3558,3640]},{"pos":[3646,3665],"content":"Basic serialization","linkify":"Basic serialization","nodes":[{"content":"Basic serialization","pos":[0,19]}]},{"content":"The only requirement in basic serialization is that the object has the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute applied.","pos":[3667,3792],"source":"The only requirement in basic serialization is that the object has the <xref:System.SerializableAttribute> attribute applied."},{"content":"The <ph id=\"ph1\">&lt;xref:System.NonSerializedAttribute&gt;</ph> can be used to keep specific fields from being serialized.","pos":[3793,3892],"source":" The <xref:System.NonSerializedAttribute> can be used to keep specific fields from being serialized."},{"content":"When you use basic serialization, the versioning of objects may create problems.","pos":[3894,3974]},{"content":"You would use custom serialization when versioning issues are important.","pos":[3975,4047]},{"content":"Basic serialization is the easiest way to perform serialization, but it does not provide much control over the process.","pos":[4048,4167]},{"pos":[4173,4193],"content":"Custom serialization","linkify":"Custom serialization","nodes":[{"content":"Custom serialization","pos":[0,20]}]},{"content":"In custom serialization, you can specify exactly which objects will be serialized and how it will be done.","pos":[4195,4301]},{"content":"The class must be marked <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> and implement the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.","pos":[4302,4441],"source":" The class must be marked <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface."},{"content":"If you want your object to be deserialized in a custom manner as well, you must use a custom constructor.","pos":[4443,4548]},{"pos":[4553,4575],"content":"Designer serialization","linkify":"Designer serialization","nodes":[{"content":"Designer serialization","pos":[0,22]}]},{"content":"Designer serialization is a special form of serialization that involves the kind of object persistence associated with development tools.","pos":[4577,4714]},{"content":"Designer serialization is the process of converting an object graph into a source file that can later be used to recover the object graph.","pos":[4715,4853]},{"content":"A source file can contain code, markup, or even SQL table information.","pos":[4854,4924]},{"pos":[4929,4990],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_RelatedTopics\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Related Topics and Examples","linkify":"<a name=\"BKMK_RelatedTopics\"></a> Related Topics and Examples","source":"<a name=\"BKMK_RelatedTopics\"></a> Related Topics and Examples"},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Persisting an Object in Visual Studio (C#)<ept id=\"p1\">](walkthrough-persisting-an-object-in-visual-studio.md)</ept>","pos":[4993,5104],"source":"[Walkthrough: Persisting an Object in Visual Studio (C#)](walkthrough-persisting-an-object-in-visual-studio.md)"},{"content":"Demonstrates how serialization can be used to persist an object's data between instances, allowing you to store values and retrieve them the next time the object is instantiated.","pos":[5107,5285]},{"content":"<bpt id=\"p1\">[</bpt>How to: Read Object Data from an XML File (C#)<ept id=\"p1\">](how-to-read-object-data-from-an-xml-file.md)</ept>","pos":[5287,5380],"source":"[How to: Read Object Data from an XML File (C#)](how-to-read-object-data-from-an-xml-file.md)"},{"content":"Shows how to read object data that was previously written to an XML file using the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class.","pos":[5384,5519],"source":"Shows how to read object data that was previously written to an XML file using the <xref:System.Xml.Serialization.XmlSerializer> class."},{"content":"<bpt id=\"p1\">[</bpt>How to: Write Object Data to an XML File (C#)<ept id=\"p1\">](how-to-write-object-data-to-an-xml-file.md)</ept>","pos":[5521,5612],"source":"[How to: Write Object Data to an XML File (C#)](how-to-write-object-data-to-an-xml-file.md)"},{"content":"Shows how to write the object from a class to an XML file using the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class.","pos":[5615,5735],"source":"Shows how to write the object from a class to an XML file using the <xref:System.Xml.Serialization.XmlSerializer> class."}]}