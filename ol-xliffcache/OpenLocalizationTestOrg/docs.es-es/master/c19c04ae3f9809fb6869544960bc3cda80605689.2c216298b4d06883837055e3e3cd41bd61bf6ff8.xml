{"content":"---\ntitle: \"Delegates with Named vs. Anonymous Methods (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"delegates [C#], with named vs. anonymous methods\"\n  - \"methods [C#], in delegates\"\nms.assetid: 98fa8c61-66b6-4146-986c-3236c4045733\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Delegates with Named vs. Anonymous Methods (C# Programming Guide)\nA [delegate](../../../csharp/language-reference/keywords/delegate.md) can be associated with a named method. When you instantiate a delegate by using a named method, the method is passed as a parameter, for example:  \n  \n [!code-cs[csProgGuideDelegates#1](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_1.cs)]  \n  \n This is called using a named method. Delegates constructed with a named method can encapsulate either a [static](../../../csharp/language-reference/keywords/static.md) method or an instance method. Named methods are the only way to instantiate a delegate in earlier versions of C#. However, in a situation where creating a new method is unwanted overhead, C# enables you to instantiate a delegate and immediately specify a code block that the delegate will process when it is called. The block can contain either a lambda expression or an anonymous method. For more information, see [Anonymous Functions](../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md).  \n  \n## Remarks  \n The method that you pass as a delegate parameter must have the same signature as the delegate declaration.  \n  \n A delegate instance may encapsulate either static or instance method.  \n  \n Although the delegate can use an [out](../../../csharp/language-reference/keywords/out.md) parameter, we do not recommend its use with multicast event delegates because you cannot know which delegate will be called.  \n  \n## Example 1  \n The following is a simple example of declaring and using a delegate. Notice that both the delegate, `Del`, and the associated method, `MultiplyNumbers`, have the same signature  \n  \n [!code-cs[csProgGuideDelegates#2](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_2.cs)]  \n  \n## Example 2  \n In the following example, one delegate is mapped to both static and instance methods and returns specific information from each.  \n  \n [!code-cs[csProgGuideDelegates#3](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_3.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Delegates](../../../csharp/programming-guide/delegates/index.md)   \n [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)   \n [How to: Combine Delegates (Multicast Delegates)](../../../csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)   \n [Events](../../../csharp/programming-guide/events/index.md)","nodes":[{"pos":[12,94],"content":"Delegates with Named vs. Anonymous Methods (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Delegates with Named vs. Anonymous Methods (C# Programming Guide) | Microsoft Docs","pos":[0,82]}]},{"pos":[632,697],"content":"Delegates with Named vs. Anonymous Methods (C# Programming Guide)","linkify":"Delegates with Named vs. Anonymous Methods (C# Programming Guide)","nodes":[{"content":"Delegates with Named vs. Anonymous Methods (C# Programming Guide)","pos":[0,65]}]},{"content":"A <bpt id=\"p1\">[</bpt>delegate<ept id=\"p1\">](../../../csharp/language-reference/keywords/delegate.md)</ept> can be associated with a named method.","pos":[698,806],"source":"A [delegate](../../../csharp/language-reference/keywords/delegate.md) can be associated with a named method."},{"content":"When you instantiate a delegate by using a named method, the method is passed as a parameter, for example:","pos":[807,913]},{"pos":[920,1065],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#1<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#1](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_1.cs)]"},{"content":"This is called using a named method.","pos":[1072,1108]},{"content":"Delegates constructed with a named method can encapsulate either a <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> method or an instance method.","pos":[1109,1269],"source":" Delegates constructed with a named method can encapsulate either a [static](../../../csharp/language-reference/keywords/static.md) method or an instance method."},{"content":"Named methods are the only way to instantiate a delegate in earlier versions of C#.","pos":[1270,1353]},{"content":"However, in a situation where creating a new method is unwanted overhead, C# enables you to instantiate a delegate and immediately specify a code block that the delegate will process when it is called.","pos":[1354,1555]},{"content":"The block can contain either a lambda expression or an anonymous method.","pos":[1556,1628]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Anonymous Functions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)</ept>.","pos":[1629,1768],"source":" For more information, see [Anonymous Functions](../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)."},{"pos":[1777,1784],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method that you pass as a delegate parameter must have the same signature as the delegate declaration.","pos":[1788,1894]},{"content":"A delegate instance may encapsulate either static or instance method.","pos":[1901,1970]},{"pos":[1977,2192],"content":"Although the delegate can use an <bpt id=\"p1\">[</bpt>out<ept id=\"p1\">](../../../csharp/language-reference/keywords/out.md)</ept> parameter, we do not recommend its use with multicast event delegates because you cannot know which delegate will be called.","source":"Although the delegate can use an [out](../../../csharp/language-reference/keywords/out.md) parameter, we do not recommend its use with multicast event delegates because you cannot know which delegate will be called."},{"pos":[2201,2210],"content":"Example 1","linkify":"Example 1","nodes":[{"content":"Example 1","pos":[0,9]}]},{"content":"The following is a simple example of declaring and using a delegate.","pos":[2214,2282]},{"content":"Notice that both the delegate, <ph id=\"ph1\">`Del`</ph>, and the associated method, <ph id=\"ph2\">`MultiplyNumbers`</ph>, have the same signature","pos":[2283,2390],"source":" Notice that both the delegate, `Del`, and the associated method, `MultiplyNumbers`, have the same signature"},{"pos":[2397,2542],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#2<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#2](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_2.cs)]"},{"pos":[2551,2560],"content":"Example 2","linkify":"Example 2","nodes":[{"content":"Example 2","pos":[0,9]}]},{"content":"In the following example, one delegate is mapped to both static and instance methods and returns specific information from each.","pos":[2564,2692]},{"pos":[2699,2844],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#3<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#3](../../../csharp/programming-guide/delegates/codesnippet/CSharp/delegates-with-named-vs-anonymous-methods_3.cs)]"},{"pos":[2853,2861],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2865,2932],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2935,3002],"source":" [Delegates](../../../csharp/programming-guide/delegates/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept><ph id=\"ph1\"> </ph>","pos":[3005,3115],"source":" [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Combine Delegates (Multicast Delegates)<ept id=\"p1\">](../../../csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)</ept><ph id=\"ph1\"> </ph>","pos":[3118,3262],"source":" [How to: Combine Delegates (Multicast Delegates)](../../../csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>","pos":[3265,3325],"source":" [Events](../../../csharp/programming-guide/events/index.md)"}]}