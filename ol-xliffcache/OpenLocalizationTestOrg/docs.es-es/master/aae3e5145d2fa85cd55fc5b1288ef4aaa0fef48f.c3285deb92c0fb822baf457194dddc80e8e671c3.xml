{"content":"---\ntitle: \"How to: Resolve ambiguous times\"\nms.date: \"04/10/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"time zones [.NET Framework], ambiguous time\"\n  - \"ambiguous time [.NET Framework]\"\nms.assetid: 2cf5fb25-492c-4875-9245-98cac8348e97\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Resolve ambiguous times\n\nAn ambiguous time is a time that maps to more than one Coordinated Universal Time (UTC). It occurs when the clock time is adjusted back in time, such as during the transition from a time zone's daylight saving time to its standard time. When handling an ambiguous time, you can do one of the following:\n\n* Make an assumption about how the time maps to UTC. For example, you can assume that an ambiguous time is always expressed in the time zone's standard time.\n\n* If the ambiguous time is an item of data entered by the user, you can leave it to the user to resolve the ambiguity.\n\nThis topic shows how to resolve an ambiguous time by assuming that it represents the time zone's standard time.\n\n### To map an ambiguous time to a time zone's standard time\n\n1. Call the <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> method to determine whether the time is ambiguous.\n\n2. If the time is ambiguous, subtract the time from the <xref:System.TimeSpan> object returned by the time zone's <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property.\n\n3. Call the `static` (`Shared` in Visual Basic .NET) <xref:System.DateTime.SpecifyKind%2A> method to set the UTC date and time value's <xref:System.DateTime.Kind%2A> property to <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.\n\n## Example\n\nThe following example illustrates how to convert an ambiguous time to UTC by assuming that it represents the local time zone's standard time.\n\n[!code-csharp[System.TimeZone2.Concepts#10](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#10)]\n[!code-vb[System.TimeZone2.Concepts#10](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#10)]\n\nThe example consists of a method named `ResolveAmbiguousTime` that determines whether the <xref:System.DateTime> value passed to it is ambiguous. If the value is ambiguous, the method returns a <xref:System.DateTime> value that represents the corresponding UTC time. The method handles this conversion by subtracting the value of the local time zone's <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property from the local time.\n\nOrdinarily, an ambiguous time is handled by calling the <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%2A> method to retrieve an array of <xref:System.TimeSpan> objects that contain the ambiguous time's possible UTC offsets. However, this example makes the arbitrary assumption that an ambiguous time should always be mapped to the time zone's standard time. The <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property returns the offset between UTC and a time zone's standard time.\n\nIn this example, all references to the local time zone are made through the <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> property; the local time zone is never assigned to an object variable. This is a recommended practice because a call to the <xref:System.TimeZoneInfo.ClearCachedData%2A?displayProperty=nameWithType> method invalidates any objects that the local time zone is assigned to.\n\n## Compiling the code\n\nThis example requires:\n\n* That a reference to System.Core.dll be added to the project.\n\n* That the <xref:System> namespace be imported with the `using` statement (required in C# code).\n\n## See also\n\n- [Dates, times, and time zones](../../../docs/standard/datetime/index.md)\n- [How to: Let users resolve ambiguous times](../../../docs/standard/datetime/let-users-resolve-ambiguous-times.md)\n","nodes":[{"pos":[4,330],"embed":true,"restype":"x-metadata","content":"title: \"How to: Resolve ambiguous times\"\nms.date: \"04/10/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"time zones [.NET Framework], ambiguous time\"\n  - \"ambiguous time [.NET Framework]\"\nms.assetid: 2cf5fb25-492c-4875-9245-98cac8348e97\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Resolve ambiguous times","nodes":[{"pos":[0,31],"content":"How to: Resolve ambiguous times","nodes":[{"content":"How to: Resolve ambiguous times","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[337,368],"content":"How to: Resolve ambiguous times","linkify":"How to: Resolve ambiguous times","nodes":[{"content":"How to: Resolve ambiguous times","pos":[0,31]}]},{"content":"An ambiguous time is a time that maps to more than one Coordinated Universal Time (UTC).","pos":[370,458]},{"content":"It occurs when the clock time is adjusted back in time, such as during the transition from a time zone's daylight saving time to its standard time.","pos":[459,606]},{"content":"When handling an ambiguous time, you can do one of the following:","pos":[607,672]},{"content":"Make an assumption about how the time maps to UTC.","pos":[676,726]},{"content":"For example, you can assume that an ambiguous time is always expressed in the time zone's standard time.","pos":[727,831]},{"content":"If the ambiguous time is an item of data entered by the user, you can leave it to the user to resolve the ambiguity.","pos":[835,951]},{"content":"This topic shows how to resolve an ambiguous time by assuming that it represents the time zone's standard time.","pos":[953,1064]},{"pos":[1070,1125],"content":"To map an ambiguous time to a time zone's standard time","linkify":"To map an ambiguous time to a time zone's standard time","nodes":[{"content":"To map an ambiguous time to a time zone's standard time","pos":[0,55]}]},{"pos":[1130,1235],"content":"Call the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.IsAmbiguousTime%2A&gt;</ph> method to determine whether the time is ambiguous.","source":"Call the <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> method to determine whether the time is ambiguous."},{"pos":[1240,1404],"content":"If the time is ambiguous, subtract the time from the <ph id=\"ph1\">&lt;xref:System.TimeSpan&gt;</ph> object returned by the time zone's <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.BaseUtcOffset%2A&gt;</ph> property.","source":"If the time is ambiguous, subtract the time from the <xref:System.TimeSpan> object returned by the time zone's <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property."},{"pos":[1409,1644],"content":"Call the <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic .NET) <ph id=\"ph3\">&lt;xref:System.DateTime.SpecifyKind%2A&gt;</ph> method to set the UTC date and time value's <ph id=\"ph4\">&lt;xref:System.DateTime.Kind%2A&gt;</ph> property to <ph id=\"ph5\">&lt;xref:System.DateTimeKind.Utc?displayProperty=nameWithType&gt;</ph>.","source":"Call the `static` (`Shared` in Visual Basic .NET) <xref:System.DateTime.SpecifyKind%2A> method to set the UTC date and time value's <xref:System.DateTime.Kind%2A> property to <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>."},{"pos":[1649,1656],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example illustrates how to convert an ambiguous time to UTC by assuming that it represents the local time zone's standard time.","pos":[1658,1799]},{"content":"The example consists of a method named <ph id=\"ph1\">`ResolveAmbiguousTime`</ph> that determines whether the <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> value passed to it is ambiguous.","pos":[2113,2258],"source":"The example consists of a method named `ResolveAmbiguousTime` that determines whether the <xref:System.DateTime> value passed to it is ambiguous."},{"content":"If the value is ambiguous, the method returns a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value that represents the corresponding UTC time.","pos":[2259,2379],"source":" If the value is ambiguous, the method returns a <xref:System.DateTime> value that represents the corresponding UTC time."},{"content":"The method handles this conversion by subtracting the value of the local time zone's <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.BaseUtcOffset%2A&gt;</ph> property from the local time.","pos":[2380,2538],"source":" The method handles this conversion by subtracting the value of the local time zone's <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property from the local time."},{"content":"Ordinarily, an ambiguous time is handled by calling the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%2A&gt;</ph> method to retrieve an array of <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph> objects that contain the ambiguous time's possible UTC offsets.","pos":[2540,2767],"source":"Ordinarily, an ambiguous time is handled by calling the <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%2A> method to retrieve an array of <xref:System.TimeSpan> objects that contain the ambiguous time's possible UTC offsets."},{"content":"However, this example makes the arbitrary assumption that an ambiguous time should always be mapped to the time zone's standard time.","pos":[2768,2901]},{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.BaseUtcOffset%2A&gt;</ph> property returns the offset between UTC and a time zone's standard time.","pos":[2902,3022],"source":" The <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property returns the offset between UTC and a time zone's standard time."},{"content":"In this example, all references to the local time zone are made through the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType&gt;</ph> property; the local time zone is never assigned to an object variable.","pos":[3024,3235],"source":"In this example, all references to the local time zone are made through the <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> property; the local time zone is never assigned to an object variable."},{"content":"This is a recommended practice because a call to the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.ClearCachedData%2A?displayProperty=nameWithType&gt;</ph> method invalidates any objects that the local time zone is assigned to.","pos":[3236,3435],"source":" This is a recommended practice because a call to the <xref:System.TimeZoneInfo.ClearCachedData%2A?displayProperty=nameWithType> method invalidates any objects that the local time zone is assigned to."},{"pos":[3440,3458],"content":"Compiling the code","linkify":"Compiling the code","nodes":[{"content":"Compiling the code","pos":[0,18]}]},{"content":"This example requires:","pos":[3460,3482]},{"content":"That a reference to System.Core.dll be added to the project.","pos":[3486,3546]},{"pos":[3550,3644],"content":"That the <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace be imported with the <ph id=\"ph2\">`using`</ph> statement (required in C# code).","source":"That the <xref:System> namespace be imported with the `using` statement (required in C# code)."},{"pos":[3649,3657],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3661,3733],"content":"<bpt id=\"p1\">[</bpt>Dates, times, and time zones<ept id=\"p1\">](../../../docs/standard/datetime/index.md)</ept>","source":"[Dates, times, and time zones](../../../docs/standard/datetime/index.md)"},{"pos":[3736,3849],"content":"<bpt id=\"p1\">[</bpt>How to: Let users resolve ambiguous times<ept id=\"p1\">](../../../docs/standard/datetime/let-users-resolve-ambiguous-times.md)</ept>","source":"[How to: Let users resolve ambiguous times](../../../docs/standard/datetime/let-users-resolve-ambiguous-times.md)"}]}