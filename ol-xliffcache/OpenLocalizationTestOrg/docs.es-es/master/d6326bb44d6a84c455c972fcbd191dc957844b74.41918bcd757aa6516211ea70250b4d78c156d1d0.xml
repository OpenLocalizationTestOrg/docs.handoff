{"content":"---\ntitle: \"How to: Read From Text Files with Multiple Formats in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"TextFieldParser object, reading from a file\"\n  - \"TextFieldType enumeration\"\n  - \"My.Computer.FileSystem.WriteAllText method, parsing structured text files\"\n  - \"WriteAllText method [Visual Basic], parsing structured text files\"\n  - \"PeekChars method [Visual Basic], determining format of text\"\n  - \"reading text files [Visual Basic], multiple formats\"\n  - \"I/O [Visual Basic], reading text files\"\n  - \"text files [Visual Basic], reading\"\nms.assetid: 8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8\n---\n# How to: Read From Text Files with Multiple Formats in Visual Basic\nThe <xref:Microsoft.VisualBasic.FileIO.TextFieldParser> object provides a way to easily and efficiently parse structured text files, such as logs. You can process a file with multiple formats by using the `PeekChars` method to determine the format of each line as you parse through the file.  \n  \n### To parse a text file with multiple formats  \n  \n1.  Add a text file named testfile.txt to your project. Add the following content to the text file.  \n  \n    ```  \n    Err  1001 Cannot access resource.  \n    Err  2014 Resource not found.  \n    Acc  10/03/2009User1      Administrator.  \n    Err  0323 Warning: Invalid access attempt.  \n    Acc  10/03/2009User2      Standard user.  \n    Acc  10/04/2009User2      Standard user.  \n    ```  \n  \n2.  Define the expected format and the format used when an error is reported. The last entry in each array is -1, therefore the last field is assumed to be of variable width. This occurs when the last entry in the array is less than or equal to 0.  \n  \n     [!code-vb[VbFileIORead#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#4)]  \n  \n3.  Create a new <xref:Microsoft.VisualBasic.FileIO.TextFieldParser> object, defining the width and format.  \n  \n     [!code-vb[VbFileIORead#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#5)]  \n  \n4.  Loop through the rows, testing for format before reading.  \n  \n     [!code-vb[VbFileIORead#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#6)]  \n  \n5.  Write errors to the console.  \n  \n     [!code-vb[VbFileIORead#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#7)]  \n  \n## Example  \n Following is the complete example that reads from the file `testfile.txt`.  \n  \n [!code-vb[VbFileIORead#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#8)]  \n  \n## Robust Programming  \n The following conditions may cause an exception:  \n  \n-   A row cannot be parsed using the specified format (<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>). The exception message specifies the line causing the exception, while the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property is assigned to the text contained in the line.  \n  \n-   The specified file does not exist (<xref:System.IO.FileNotFoundException>).  \n  \n-   A partial-trust situation in which the user does not have sufficient permissions to access the file. (<xref:System.Security.SecurityException>).  \n  \n-   The path is too long (<xref:System.IO.PathTooLongException>).  \n  \n-   The user does not have sufficient permissions to access the file (<xref:System.UnauthorizedAccessException>).  \n  \n## See also\n\n- <xref:Microsoft.VisualBasic.FileIO.TextFieldParser?displayProperty=nameWithType>\n- <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars%2A>\n- <xref:Microsoft.VisualBasic.FileIO.MalformedLineException>\n- <xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>\n- <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData%2A>\n- <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>\n- [How to: Read From Comma-Delimited Text Files](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)\n- [How to: Read From Fixed-width Text Files](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)\n- [Parsing Text Files with the TextFieldParser Object](../../../../visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)\n","nodes":[{"pos":[4,614],"embed":true,"restype":"x-metadata","content":"title: \"How to: Read From Text Files with Multiple Formats in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"TextFieldParser object, reading from a file\"\n  - \"TextFieldType enumeration\"\n  - \"My.Computer.FileSystem.WriteAllText method, parsing structured text files\"\n  - \"WriteAllText method [Visual Basic], parsing structured text files\"\n  - \"PeekChars method [Visual Basic], determining format of text\"\n  - \"reading text files [Visual Basic], multiple formats\"\n  - \"I/O [Visual Basic], reading text files\"\n  - \"text files [Visual Basic], reading\"\nms.assetid: 8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8","nodes":[{"content":"How to: Read From Text Files with Multiple Formats in Visual Basic","nodes":[{"pos":[0,66],"content":"How to: Read From Text Files with Multiple Formats in Visual Basic","nodes":[{"content":"How to: Read From Text Files with Multiple Formats in Visual Basic","pos":[0,66]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[621,687],"content":"How to: Read From Text Files with Multiple Formats in Visual Basic","linkify":"How to: Read From Text Files with Multiple Formats in Visual Basic","nodes":[{"content":"How to: Read From Text Files with Multiple Formats in Visual Basic","pos":[0,66]}]},{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser&gt;</ph> object provides a way to easily and efficiently parse structured text files, such as logs.","pos":[688,834],"source":"The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser> object provides a way to easily and efficiently parse structured text files, such as logs."},{"content":"You can process a file with multiple formats by using the <ph id=\"ph1\">`PeekChars`</ph> method to determine the format of each line as you parse through the file.","pos":[835,979],"source":" You can process a file with multiple formats by using the `PeekChars` method to determine the format of each line as you parse through the file."},{"pos":[989,1031],"content":"To parse a text file with multiple formats","linkify":"To parse a text file with multiple formats","nodes":[{"content":"To parse a text file with multiple formats","pos":[0,42]}]},{"content":"Add a text file named testfile.txt to your project.","pos":[1041,1092]},{"content":"Add the following content to the text file.","pos":[1093,1136]},{"content":"Define the expected format and the format used when an error is reported.","pos":[1435,1508]},{"content":"The last entry in each array is -1, therefore the last field is assumed to be of variable width.","pos":[1509,1605]},{"content":"This occurs when the last entry in the array is less than or equal to 0.","pos":[1606,1678]},{"pos":[1806,1909],"content":"Create a new <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser&gt;</ph> object, defining the width and format.","source":"Create a new <xref:Microsoft.VisualBasic.FileIO.TextFieldParser> object, defining the width and format."},{"content":"Loop through the rows, testing for format before reading.","pos":[2037,2094]},{"content":"Write errors to the console.","pos":[2222,2250]},{"pos":[2377,2384],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2388,2462],"content":"Following is the complete example that reads from the file <ph id=\"ph1\">`testfile.txt`</ph>.","source":"Following is the complete example that reads from the file `testfile.txt`."},{"pos":[2585,2603],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"The following conditions may cause an exception:","pos":[2607,2655]},{"content":"A row cannot be parsed using the specified format (<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph>).","pos":[2665,2776],"source":"A row cannot be parsed using the specified format (<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>)."},{"content":"The exception message specifies the line causing the exception, while the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A&gt;</ph> property is assigned to the text contained in the line.","pos":[2777,2971],"source":" The exception message specifies the line causing the exception, while the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property is assigned to the text contained in the line."},{"pos":[2981,3056],"content":"The specified file does not exist (<ph id=\"ph1\">&lt;xref:System.IO.FileNotFoundException&gt;</ph>).","source":"The specified file does not exist (<xref:System.IO.FileNotFoundException>)."},{"content":"A partial-trust situation in which the user does not have sufficient permissions to access the file.","pos":[3066,3166]},{"content":"(<ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph>).","pos":[3167,3210],"source":" (<xref:System.Security.SecurityException>)."},{"pos":[3220,3281],"content":"The path is too long (<ph id=\"ph1\">&lt;xref:System.IO.PathTooLongException&gt;</ph>).","source":"The path is too long (<xref:System.IO.PathTooLongException>)."},{"pos":[3291,3400],"content":"The user does not have sufficient permissions to access the file (<ph id=\"ph1\">&lt;xref:System.UnauthorizedAccessException&gt;</ph>).","source":"The user does not have sufficient permissions to access the file (<xref:System.UnauthorizedAccessException>)."},{"pos":[3409,3417],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3835,4007],"content":"<bpt id=\"p1\">[</bpt>How to: Read From Comma-Delimited Text Files<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept>","source":"[How to: Read From Comma-Delimited Text Files](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)"},{"pos":[4010,4174],"content":"<bpt id=\"p1\">[</bpt>How to: Read From Fixed-width Text Files<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept>","source":"[How to: Read From Fixed-width Text Files](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)"},{"pos":[4177,4362],"content":"<bpt id=\"p1\">[</bpt>Parsing Text Files with the TextFieldParser Object<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)</ept>","source":"[Parsing Text Files with the TextFieldParser Object](../../../../visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)"}]}