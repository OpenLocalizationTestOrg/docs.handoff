{"content":"---\ntitle: \"Contract-First Tool | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0a880690-f460-4475-a5f4-9f91ce08fcc6\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Contract-First Tool\nService contracts often need to be created from existing services. In [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], data contract classes can be created automatically from existing services using the contract-first tool. To use the contract-first tool, the XML schema definition file (XSD) must be downloaded locally; the tool cannot import remote data contracts via HTTP.  \n  \n The contract-first tool is integrated into [!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)] as a build task. The code files generated by the build task are created every time the project is built, so that the project can easily adopt changes in the underlying service contract.  \n  \n Schema types that the contract-first tool can import include the following:  \n  \n```  \n<xsd:complexType>  \n<xsd:simpleType>  \n```  \n  \n Simple types will not be generated if they are primitives such as `Int16` or `String`; complex types will not be generated if they are of type `Collection`. Types will also not be generated if they are part of another `xsd:complexType`. In all these cases, the types will be referenced to existing types in the project instead.  \n  \n## Adding a data contract to a project  \n Before the contract-first tool can be used, the service contract (XSD) must be added to the project. For the purposes of this overview, the following contract will be used to illustrate contract-first functions. This service definition is a small subset of the service contract used by Bing’s search API.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<xs:schema id=\"ServiceSchema\"  \n    targetNamespace=\"http://tempuri.org/ServiceSchema.xsd\"  \n    elementFormDefault=\"qualified\"  \n    xmlns=\"http://tempuri.org/ServiceSchema.xsd\"  \n    xmlns:mstns=\"http://tempuri.org/ServiceSchema.xsd\"  \n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \n>  \n  <xs:complexType name=\"SearchRequest\">  \n    <xs:sequence>  \n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Version\" type=\"xs:string\" default=\"2.2\" />  \n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Market\" type=\"xs:string\" />  \n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"UILanguage\" type=\"xs:string\" />  \n      <xs:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Query\" type=\"xs:string\" />  \n      <xs:element minOccurs=\"1\" maxOccurs=\"1\" name=\"AppId\" type=\"xs:string\" />  \n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Latitude\" type=\"xs:double\" />  \n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Longitude\" type=\"xs:double\" />  \n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Radius\" type=\"xs:double\" />  \n    </xs:sequence>  \n  </xs:complexType>  \n  <xs:simpleType name=\"WebSearchOption\">  \n    <xs:restriction base=\"xs:string\">  \n      <xs:enumeration value=\"DisableHostCollapsing\" />  \n      <xs:enumeration value=\"DisableQueryAlterations\" />  \n    </xs:restriction>  \n  </xs:simpleType>  \n</xs:schema>  \n  \n```  \n  \n To add the above service contract to the project, right-click the project and select **Add New…**. Select Schema Definition from the WCF pane of the Templates dialog, and name the new file SampleContract.xsd. Copy and paste the above code into the code view of the new file.  \n  \n## Configuring contract-first options  \n Contract-first options can be configured in the Properties menu of a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] project. To enable contract-first development, select the **Enable XSD as Type Definition Language** check box in the WCF page of the project properties window.  \n  \n ![WCF Project Options showing contract&#45;first](../../../docs/framework/wcf/media/contractfirstoptions.png \"ContractFirstOptions\")  \n  \n To configure advanced properties, click the Advanced button.  \n  \n ![Advanced Contract&#45;First Properties](../../../docs/framework/wcf/media/contractfirstadvanced.png \"ContractFirstAdvanced\")  \n  \n The following advanced settings can be configured for code generation from contracts. Settings can only be configured for all of the files in the project; settings cannot be configured for individual files at this time.  \n  \n-   **Serializer Mode**: This setting determines which serializer is used for reading service contract files. When **XML Serializer** is selected, the **Collection Types** and **Reuse Types** options are disabled. These options only apply to the **Data Contract Serializer**.  \n  \n-   **Reuse Types**: This setting specifies which libraries are used for type reuse. This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**.  \n  \n-   **Collection Type**: This setting specifies the fully-qualified or assembly-qualified type to be used for the collection data type. This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**.  \n  \n-   **Dictionary Type**: This setting specifies the fully-qualified or assembly-qualified type to be used for the dictionary data type.  \n  \n-   **EnableDataBinding**: This setting specifies whether to implement the <xref:System.ComponentModel.INotifyPropertyChanged> interface on all data types to implement data binding.  \n  \n-   **ExcludedTypes**:This setting specifies the list of fully-qualified or assembly-qualified types to be excluded from the referenced assemblies. This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**.  \n  \n-   **GenerateInternalTypes**: This setting specifies whether to generate classes that are marked as internal. This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**.  \n  \n-   **GenerateSerializableTypes**: This setting specifies whether to generate classes with the <xref:System.SerializableAttribute> attribute. This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**.  \n  \n-   **ImportXMLTypes**: This setting specifies whether to configure the data contract serializer to apply the <xref:System.SerializableAttribute> attribute to classes without the <xref:System.Runtime.Serialization.DataContractAttribute> attribute.  This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**.  \n  \n-   **SupportFx35TypedDataSets**: This setting specifies whether to provide additional functionality for typed data sets created for .Net Framework 3.5. When  **Serializer Mode** is set to **XML Serializer**, the <xref:System.Data.Design.TypedDataSetSchemaImporterExtensionFx35> extension will be added to the XML schema importer when this value is set to True. When  **Serializer Mode** is set to **Data Contract Serializer**, the type <xref:System.DateTimeOffset> will be excluded from the References when this value is set to False, so that a <xref:System.DateTimeOffset> is always generated for older framework versions.  \n  \n-   **InputXsdFiles**: This setting specifies the list of input files. Each file must contain a valid XML schema.  \n  \n-   **Language**: This setting specifies the language of the generated contract code. The setting must be recognizable by <xref:System.CodeDom.Compiler.CodeDomProvider>.  \n  \n-   **NamespaceMappings**: This setting specifies the mappings from the XSD Target Namespaces to CLR namespaces. Each mapping should use the following format:  \n  \n    ```xml  \n    \"<Schema Namespace>, <CLR Namespace>\"  \n    ```  \n  \n     The XML Serializer only accepts one mapping in the following format:  \n  \n    ```xml  \n    \"*, <CLR Namespace>\"  \n    ```  \n  \n-   **OutputDirectory**: This setting specifies the directory where the code files will be generated.  \n  \n The settings will be used to generate service contract types from the service contract files when the project is built.  \n  \n## Using contract-first development  \n After adding the service contract to the project and confirming the build settings, build the project by pressing **F6**. The types defined in the service contract will then be available for use in the project.  \n  \n To use the types defined in the service contract, add a reference to `ContractTypes` under the current namespace:  \n  \n```csharp  \nusing MyProjectNamespace.ContractTypes;  \n```  \n  \n The types defined in the service contract will then be resolvable in the project, as shown below.  \n  \n ![Using types derived from a service contract](../../../docs/framework/wcf/media/contractfirsttypes.png \"ContractFirstTypes\")  \n  \n The types generated by the tool are created in the GeneratedXSDTypes.cs file. The file is created in the \\<project directory>/obj/\\<build configuration>/XSDGeneratedCode/ directory by default. The sample schema at the beginning of this topic is converted as follows:  \n  \n```scr  \n//------------------------------------------------------------------------------  \n// <auto-generated>  \n//     This code was generated by a tool.  \n//     Runtime Version:4.0.30319.17330  \n//  \n//     Changes to this file may cause incorrect behavior and will be lost if  \n//     the code is regenerated.  \n// </auto-generated>  \n//------------------------------------------------------------------------------  \n  \nnamespace TestXSD3.ContractTypes  \n{  \n    using System.Xml.Serialization;  \n  \n    /// <remarks/>  \n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Xml\", \"4.0.30319.17330\")]  \n    [System.SerializableAttribute()]  \n    [System.Diagnostics.DebuggerStepThroughAttribute()]  \n    [System.ComponentModel.DesignerCategoryAttribute(\"code\")]  \n    [System.Xml.Serialization.XmlTypeAttribute(Namespace=\"http://tempuri.org/ServiceSchema.xsd\")]  \n    [System.Xml.Serialization.XmlRootAttribute(Namespace=\"http://tempuri.org/ServiceSchema.xsd\", IsNullable=true)]  \n    public partial class SearchRequest  \n    {  \n  \n        private string versionField;  \n  \n        private string marketField;  \n  \n        private string uILanguageField;  \n  \n        private string queryField;  \n  \n        private string appIdField;  \n  \n        private double latitudeField;  \n  \n        private bool latitudeFieldSpecified;  \n  \n        private double longitudeField;  \n  \n        private bool longitudeFieldSpecified;  \n  \n        private double radiusField;  \n  \n        private bool radiusFieldSpecified;  \n  \n        public SearchRequest()  \n        {  \n            this.versionField = \"2.2\";  \n        }  \n  \n        /// <remarks/>  \n        [System.ComponentModel.DefaultValueAttribute(\"2.2\")]  \n        public string Version  \n        {  \n            get  \n            {  \n                return this.versionField;  \n            }  \n            set  \n            {  \n                this.versionField = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        public string Market  \n        {  \n            get  \n            {  \n                return this.marketField;  \n            }  \n            set  \n            {  \n                this.marketField = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        public string UILanguage  \n        {  \n            get  \n            {  \n                return this.uILanguageField;  \n            }  \n            set  \n            {  \n                this.uILanguageField = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        public string Query  \n        {  \n            get  \n            {  \n                return this.queryField;  \n            }  \n            set  \n            {  \n                this.queryField = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        public string AppId  \n        {  \n            get  \n            {  \n                return this.appIdField;  \n            }  \n            set  \n            {  \n                this.appIdField = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        public double Latitude  \n        {  \n            get  \n            {  \n                return this.latitudeField;  \n            }  \n            set  \n            {  \n                this.latitudeField = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        [System.Xml.Serialization.XmlIgnoreAttribute()]  \n        public bool LatitudeSpecified  \n        {  \n            get  \n            {  \n                return this.latitudeFieldSpecified;  \n            }  \n            set  \n            {  \n                this.latitudeFieldSpecified = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        public double Longitude  \n        {  \n            get  \n            {  \n                return this.longitudeField;  \n            }  \n            set  \n            {  \n                this.longitudeField = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        [System.Xml.Serialization.XmlIgnoreAttribute()]  \n        public bool LongitudeSpecified  \n        {  \n            get  \n            {  \n                return this.longitudeFieldSpecified;  \n            }  \n            set  \n            {  \n                this.longitudeFieldSpecified = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        public double Radius  \n        {  \n            get  \n            {  \n                return this.radiusField;  \n            }  \n            set  \n            {  \n                this.radiusField = value;  \n            }  \n        }  \n  \n        /// <remarks/>  \n        [System.Xml.Serialization.XmlIgnoreAttribute()]  \n        public bool RadiusSpecified  \n        {  \n            get  \n            {  \n                return this.radiusFieldSpecified;  \n            }  \n            set  \n            {  \n                this.radiusFieldSpecified = value;  \n            }  \n        }  \n    }  \n  \n    /// <remarks/>  \n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Xml\", \"4.0.30319.17330\")]  \n    [System.SerializableAttribute()]  \n    [System.Xml.Serialization.XmlTypeAttribute(Namespace=\"http://tempuri.org/ServiceSchema.xsd\")]  \n    [System.Xml.Serialization.XmlRootAttribute(Namespace=\"http://tempuri.org/ServiceSchema.xsd\", IsNullable=false)]  \n    public enum WebSearchOption  \n    {  \n  \n        /// <remarks/>  \n        DisableHostCollapsing,  \n  \n        /// <remarks/>  \n        DisableQueryAlterations,  \n    }  \n}  \n  \n```  \n  \n## Errors and warnings  \n Errors and warnings encountered in parsing the XSD schema will appear as build errors and warnings.  \n  \n## Interface Inheritance  \n It is not possible to use interface inheritance with contract-first development; this is consistent with the way interfaces behave in other operations. In order to use an interface that inherits a base interface, use two separate endpoints. The first endpoint uses the inherited contract, and the second endpoint implements the base interface.","nodes":[{"pos":[12,48],"content":"Contract-First Tool | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Contract-First Tool | Microsoft Docs","pos":[0,36]}]},{"pos":[346,365],"content":"Contract-First Tool","linkify":"Contract-First Tool","nodes":[{"content":"Contract-First Tool","pos":[0,19]}]},{"content":"Service contracts often need to be created from existing services.","pos":[366,432]},{"content":"In <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, data contract classes can be created automatically from existing services using the contract-first tool.","pos":[433,594],"source":" In [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], data contract classes can be created automatically from existing services using the contract-first tool."},{"content":"To use the contract-first tool, the XML schema definition file (XSD) must be downloaded locally; the tool cannot import remote data contracts via HTTP.","pos":[595,746]},{"content":"The contract-first tool is integrated into <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph> as a build task.","pos":[753,881],"source":"The contract-first tool is integrated into [!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)] as a build task."},{"content":"The code files generated by the build task are created every time the project is built, so that the project can easily adopt changes in the underlying service contract.","pos":[882,1050]},{"content":"Schema types that the contract-first tool can import include the following:","pos":[1057,1132]},{"content":"Simple types will not be generated if they are primitives such as <ph id=\"ph1\">`Int16`</ph> or <ph id=\"ph2\">`String`</ph>; complex types will not be generated if they are of type <ph id=\"ph3\">`Collection`</ph>.","pos":[1193,1349],"source":"Simple types will not be generated if they are primitives such as `Int16` or `String`; complex types will not be generated if they are of type `Collection`."},{"content":"Types will also not be generated if they are part of another <ph id=\"ph1\">`xsd:complexType`</ph>.","pos":[1350,1429],"source":" Types will also not be generated if they are part of another `xsd:complexType`."},{"content":"In all these cases, the types will be referenced to existing types in the project instead.","pos":[1430,1520]},{"pos":[1529,1564],"content":"Adding a data contract to a project","linkify":"Adding a data contract to a project","nodes":[{"content":"Adding a data contract to a project","pos":[0,35]}]},{"content":"Before the contract-first tool can be used, the service contract (XSD) must be added to the project.","pos":[1568,1668]},{"content":"For the purposes of this overview, the following contract will be used to illustrate contract-first functions.","pos":[1669,1779]},{"content":"This service definition is a small subset of the service contract used by Bing’s search API.","pos":[1780,1872]},{"content":"To add the above service contract to the project, right-click the project and select <bpt id=\"p1\">**</bpt>Add New…<ept id=\"p1\">**</ept>.","pos":[3275,3373],"source":"To add the above service contract to the project, right-click the project and select **Add New…**."},{"content":"Select Schema Definition from the WCF pane of the Templates dialog, and name the new file SampleContract.xsd.","pos":[3374,3483]},{"content":"Copy and paste the above code into the code view of the new file.","pos":[3484,3549]},{"pos":[3558,3592],"content":"Configuring contract-first options","linkify":"Configuring contract-first options","nodes":[{"content":"Configuring contract-first options","pos":[0,34]}]},{"content":"Contract-first options can be configured in the Properties menu of a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> project.","pos":[3596,3726],"source":"Contract-first options can be configured in the Properties menu of a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] project."},{"content":"To enable contract-first development, select the <bpt id=\"p1\">**</bpt>Enable XSD as Type Definition Language<ept id=\"p1\">**</ept> check box in the WCF page of the project properties window.","pos":[3727,3878],"source":" To enable contract-first development, select the **Enable XSD as Type Definition Language** check box in the WCF page of the project properties window."},{"pos":[3885,4017],"content":"<bpt id=\"p1\">![</bpt>WCF Project Options showing contract&amp;#45;first<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../docs/framework/wcf/media/contractfirstoptions.png \"</bpt>ContractFirstOptions<ept id=\"p2\">\")</ept>","source":"![WCF Project Options showing contract&#45;first](../../../docs/framework/wcf/media/contractfirstoptions.png \"ContractFirstOptions\")"},{"content":"To configure advanced properties, click the Advanced button.","pos":[4024,4084]},{"pos":[4091,4217],"content":"<bpt id=\"p1\">![</bpt>Advanced Contract&amp;#45;First Properties<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../docs/framework/wcf/media/contractfirstadvanced.png \"</bpt>ContractFirstAdvanced<ept id=\"p2\">\")</ept>","source":"![Advanced Contract&#45;First Properties](../../../docs/framework/wcf/media/contractfirstadvanced.png \"ContractFirstAdvanced\")"},{"content":"The following advanced settings can be configured for code generation from contracts.","pos":[4224,4309]},{"content":"Settings can only be configured for all of the files in the project; settings cannot be configured for individual files at this time.","pos":[4310,4443]},{"content":"<bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept>: This setting determines which serializer is used for reading service contract files.","pos":[4453,4558],"source":"**Serializer Mode**: This setting determines which serializer is used for reading service contract files."},{"content":"When <bpt id=\"p1\">**</bpt>XML Serializer<ept id=\"p1\">**</ept> is selected, the <bpt id=\"p2\">**</bpt>Collection Types<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Reuse Types<ept id=\"p3\">**</ept> options are disabled.","pos":[4559,4662],"source":" When **XML Serializer** is selected, the **Collection Types** and **Reuse Types** options are disabled."},{"content":"These options only apply to the <bpt id=\"p1\">**</bpt>Data Contract Serializer<ept id=\"p1\">**</ept>.","pos":[4663,4724],"source":" These options only apply to the **Data Contract Serializer**."},{"content":"<bpt id=\"p1\">**</bpt>Reuse Types<ept id=\"p1\">**</ept>: This setting specifies which libraries are used for type reuse.","pos":[4734,4814],"source":"**Reuse Types**: This setting specifies which libraries are used for type reuse."},{"content":"This setting only applies if <bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>Data Contract Serializer<ept id=\"p2\">**</ept>.","pos":[4815,4903],"source":" This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**."},{"content":"<bpt id=\"p1\">**</bpt>Collection Type<ept id=\"p1\">**</ept>: This setting specifies the fully-qualified or assembly-qualified type to be used for the collection data type.","pos":[4913,5044],"source":"**Collection Type**: This setting specifies the fully-qualified or assembly-qualified type to be used for the collection data type."},{"content":"This setting only applies if <bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>Data Contract Serializer<ept id=\"p2\">**</ept>.","pos":[5045,5133],"source":" This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**."},{"pos":[5143,5274],"content":"<bpt id=\"p1\">**</bpt>Dictionary Type<ept id=\"p1\">**</ept>: This setting specifies the fully-qualified or assembly-qualified type to be used for the dictionary data type.","source":"**Dictionary Type**: This setting specifies the fully-qualified or assembly-qualified type to be used for the dictionary data type."},{"pos":[5284,5461],"content":"<bpt id=\"p1\">**</bpt>EnableDataBinding<ept id=\"p1\">**</ept>: This setting specifies whether to implement the <ph id=\"ph1\">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface on all data types to implement data binding.","source":"**EnableDataBinding**: This setting specifies whether to implement the <xref:System.ComponentModel.INotifyPropertyChanged> interface on all data types to implement data binding."},{"content":"<bpt id=\"p1\">**</bpt>ExcludedTypes<ept id=\"p1\">**</ept>:This setting specifies the list of fully-qualified or assembly-qualified types to be excluded from the referenced assemblies.","pos":[5471,5614],"source":"**ExcludedTypes**:This setting specifies the list of fully-qualified or assembly-qualified types to be excluded from the referenced assemblies."},{"content":"This setting only applies if <bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>Data Contract Serializer<ept id=\"p2\">**</ept>.","pos":[5615,5703],"source":" This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**."},{"content":"<bpt id=\"p1\">**</bpt>GenerateInternalTypes<ept id=\"p1\">**</ept>: This setting specifies whether to generate classes that are marked as internal.","pos":[5713,5819],"source":"**GenerateInternalTypes**: This setting specifies whether to generate classes that are marked as internal."},{"content":"This setting only applies if <bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>Data Contract Serializer<ept id=\"p2\">**</ept>.","pos":[5820,5908],"source":" This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**."},{"content":"<bpt id=\"p1\">**</bpt>GenerateSerializableTypes<ept id=\"p1\">**</ept>: This setting specifies whether to generate classes with the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.","pos":[5918,6055],"source":"**GenerateSerializableTypes**: This setting specifies whether to generate classes with the <xref:System.SerializableAttribute> attribute."},{"content":"This setting only applies if <bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>Data Contract Serializer<ept id=\"p2\">**</ept>.","pos":[6056,6144],"source":" This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**."},{"content":"<bpt id=\"p1\">**</bpt>ImportXMLTypes<ept id=\"p1\">**</ept>: This setting specifies whether to configure the data contract serializer to apply the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute to classes without the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute.","pos":[6154,6397],"source":"**ImportXMLTypes**: This setting specifies whether to configure the data contract serializer to apply the <xref:System.SerializableAttribute> attribute to classes without the <xref:System.Runtime.Serialization.DataContractAttribute> attribute."},{"content":"This setting only applies if <bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>Data Contract Serializer<ept id=\"p2\">**</ept>.","pos":[6399,6487],"source":"  This setting only applies if **Serializer Mode** is set to **Data Contract Serializer**."},{"content":"<bpt id=\"p1\">**</bpt>SupportFx35TypedDataSets<ept id=\"p1\">**</ept>: This setting specifies whether to provide additional functionality for typed data sets created for .Net Framework 3.5.","pos":[6497,6645],"source":"**SupportFx35TypedDataSets**: This setting specifies whether to provide additional functionality for typed data sets created for .Net Framework 3.5."},{"content":"When  <bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>XML Serializer<ept id=\"p2\">**</ept>, the <ph id=\"ph1\">&lt;xref:System.Data.Design.TypedDataSetSchemaImporterExtensionFx35&gt;</ph> extension will be added to the XML schema importer when this value is set to True.","pos":[6646,6854],"source":" When  **Serializer Mode** is set to **XML Serializer**, the <xref:System.Data.Design.TypedDataSetSchemaImporterExtensionFx35> extension will be added to the XML schema importer when this value is set to True."},{"content":"When  <bpt id=\"p1\">**</bpt>Serializer Mode<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>Data Contract Serializer<ept id=\"p2\">**</ept>, the type <ph id=\"ph1\">&lt;xref:System.DateTimeOffset&gt;</ph> will be excluded from the References when this value is set to False, so that a <ph id=\"ph2\">&lt;xref:System.DateTimeOffset&gt;</ph> is always generated for older framework versions.","pos":[6855,7117],"source":" When  **Serializer Mode** is set to **Data Contract Serializer**, the type <xref:System.DateTimeOffset> will be excluded from the References when this value is set to False, so that a <xref:System.DateTimeOffset> is always generated for older framework versions."},{"content":"<bpt id=\"p1\">**</bpt>InputXsdFiles<ept id=\"p1\">**</ept>: This setting specifies the list of input files.","pos":[7127,7193],"source":"**InputXsdFiles**: This setting specifies the list of input files."},{"content":"Each file must contain a valid XML schema.","pos":[7194,7236]},{"content":"<bpt id=\"p1\">**</bpt>Language<ept id=\"p1\">**</ept>: This setting specifies the language of the generated contract code.","pos":[7246,7327],"source":"**Language**: This setting specifies the language of the generated contract code."},{"content":"The setting must be recognizable by <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>.","pos":[7328,7411],"source":" The setting must be recognizable by <xref:System.CodeDom.Compiler.CodeDomProvider>."},{"content":"<bpt id=\"p1\">**</bpt>NamespaceMappings<ept id=\"p1\">**</ept>: This setting specifies the mappings from the XSD Target Namespaces to CLR namespaces.","pos":[7421,7529],"source":"**NamespaceMappings**: This setting specifies the mappings from the XSD Target Namespaces to CLR namespaces."},{"content":"Each mapping should use the following format:","pos":[7530,7575]},{"content":"The XML Serializer only accepts one mapping in the following format:","pos":[7656,7724]},{"pos":[7787,7884],"content":"<bpt id=\"p1\">**</bpt>OutputDirectory<ept id=\"p1\">**</ept>: This setting specifies the directory where the code files will be generated.","source":"**OutputDirectory**: This setting specifies the directory where the code files will be generated."},{"content":"The settings will be used to generate service contract types from the service contract files when the project is built.","pos":[7891,8010]},{"pos":[8019,8051],"content":"Using contract-first development","linkify":"Using contract-first development","nodes":[{"content":"Using contract-first development","pos":[0,32]}]},{"content":"After adding the service contract to the project and confirming the build settings, build the project by pressing <bpt id=\"p1\">**</bpt>F6<ept id=\"p1\">**</ept>.","pos":[8055,8176],"source":"After adding the service contract to the project and confirming the build settings, build the project by pressing **F6**."},{"content":"The types defined in the service contract will then be available for use in the project.","pos":[8177,8265]},{"pos":[8272,8385],"content":"To use the types defined in the service contract, add a reference to <ph id=\"ph1\">`ContractTypes`</ph> under the current namespace:","source":"To use the types defined in the service contract, add a reference to `ContractTypes` under the current namespace:"},{"content":"The types defined in the service contract will then be resolvable in the project, as shown below.","pos":[8455,8552]},{"pos":[8559,8684],"content":"<bpt id=\"p1\">![</bpt>Using types derived from a service contract<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../docs/framework/wcf/media/contractfirsttypes.png \"</bpt>ContractFirstTypes<ept id=\"p2\">\")</ept>","source":"![Using types derived from a service contract](../../../docs/framework/wcf/media/contractfirsttypes.png \"ContractFirstTypes\")"},{"content":"The types generated by the tool are created in the GeneratedXSDTypes.cs file.","pos":[8691,8768]},{"content":"The file is created in the <ph id=\"ph1\">\\&lt;</ph>project directory&gt;/obj/<ph id=\"ph2\">\\&lt;</ph>build configuration&gt;/XSDGeneratedCode/ directory by default.","pos":[8769,8883],"source":" The file is created in the \\<project directory>/obj/\\<build configuration>/XSDGeneratedCode/ directory by default."},{"content":"The sample schema at the beginning of this topic is converted as follows:","pos":[8884,8957]},{"pos":[14482,14501],"content":"Errors and warnings","linkify":"Errors and warnings","nodes":[{"content":"Errors and warnings","pos":[0,19]}]},{"content":"Errors and warnings encountered in parsing the XSD schema will appear as build errors and warnings.","pos":[14505,14604]},{"pos":[14613,14634],"content":"Interface Inheritance","linkify":"Interface Inheritance","nodes":[{"content":"Interface Inheritance","pos":[0,21]}]},{"content":"It is not possible to use interface inheritance with contract-first development; this is consistent with the way interfaces behave in other operations.","pos":[14638,14789]},{"content":"In order to use an interface that inherits a base interface, use two separate endpoints.","pos":[14790,14878]},{"content":"The first endpoint uses the inherited contract, and the second endpoint implements the base interface.","pos":[14879,14981]}]}