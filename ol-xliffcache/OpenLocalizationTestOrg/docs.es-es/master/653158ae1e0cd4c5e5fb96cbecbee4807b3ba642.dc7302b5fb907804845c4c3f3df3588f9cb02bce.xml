{"content":"---\ntitle: \"Durable Duplex Correlation | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 8eb0e49a-6d3b-4f7e-a054-0d4febee2ffb\ncaps.latest.revision: 9\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Durable Duplex Correlation\nDurable duplex correlation, also known as callback correlation, is useful when a workflow service has a requirement to send a callback to the initial caller. Unlike WCF duplex, the callback can happen at any time in the future and is not tied to the same channel or the channel lifetime; the only requirement is that the caller have an active endpoint listening for the callback message. This allows two workflow services to communicate in a long-running conversation. This topic provides an overview of durable duplex correlation.  \n  \n## Using Durable Duplex Correlation  \n To use durable duplex correlation, the two services must use a context-enabled binding that supports two-way operations, such as <xref:System.ServiceModel.NetTcpContextBinding> or <xref:System.ServiceModel.WSHttpContextBinding>. The calling service registers a <xref:System.ServiceModel.WSHttpContextBinding.ClientCallbackAddress%2A> with the desired binding on their client <xref:System.ServiceModel.Endpoint>. The receiving service receives this data in the initial call and then uses it on its own <xref:System.ServiceModel.Endpoint> in the <xref:System.ServiceModel.Activities.Send> activity that makes the call back to the calling service. In this example, two services communicate with each other. The first service invokes a method on the second service and then waits for a reply. The second service knows the name of the callback method, but the endpoint of the service that implements this method is not known at design time.  \n  \n> [!NOTE]\n>  Durable duplex can only be used when the <xref:System.ServiceModel.Channels.AddressingVersion> of the endpoint is configured with <xref:System.ServiceModel.Channels.AddressingVersion.WSAddressing10%2A>. If it is not, then an <xref:System.InvalidOperationException> exception is thrown with the following message: \"The message contains a callback context header with an endpoint reference for AddressingVersion 'Addressing200408 ( HYPERLINK \"http://schemas.xmlsoap.org/ws/2004/08/addressing\" http://schemas.xmlsoap.org/ws/2004/08/addressing)'. Callback context can only be transmitted when the AddressingVersion is configured with 'WSAddressing10'.\"  \n  \n In the following example, a workflow service is hosted that creates a callback <xref:System.ServiceModel.Endpoint> using <xref:System.ServiceModel.WSHttpContextBinding>.  \n  \n```csharp  \n// Host WF Service 1.  \nstring baseAddress1 = \"http://localhost:8080/Service1\";  \nWorkflowServiceHost host1 = new WorkflowServiceHost(GetWF1(), new Uri(baseAddress1));  \n  \n// Add the callback endpoint.  \nWSHttpContextBinding Binding1 = new WSHttpContextBinding();  \nhost1.AddServiceEndpoint(\"ICallbackItemsReady\", Binding1, \"ItemsReady\");  \n  \n// Add the service endpoint.  \nhost1.AddServiceEndpoint(\"IService1\", Binding1, baseAddress1);  \n  \n// Open the first workflow service.  \nhost1.Open();  \nConsole.WriteLine(\"Service1 waiting at: {0}\", baseAddress1);  \n```  \n  \n The workflow that implements this workflow service initializes the callback correlation with its <xref:System.ServiceModel.Activities.Send> activity, and references this callback endpoint from the <xref:System.ServiceModel.Activities.Receive> activity that correlates with the <xref:System.ServiceModel.Activities.Send>. The following example represents the workflow that is returned from the `GetWF1` method.  \n  \n```csharp  \nVariable<CorrelationHandle> CallbackHandle = new Variable<CorrelationHandle>();  \n  \nReceive StartOrder = new Receive  \n{  \n    CanCreateInstance = true,  \n    ServiceContractName = \"IService1\",  \n    OperationName = \"StartOrder\"  \n};  \n  \nSend GetItems = new Send  \n{  \n    CorrelationInitializers =   \n    {  \n        new CallbackCorrelationInitializer  \n        {  \n            CorrelationHandle = CallbackHandle  \n        }  \n    },  \n    ServiceContractName = \"IService2\",  \n    OperationName = \"StartItems\",  \n    Endpoint = new Endpoint  \n    {  \n        AddressUri = new Uri(\"http://localhost:8081/Service2\"),  \n        Binding = new WSHttpContextBinding  \n        {  \n            ClientCallbackAddress = new Uri(\"http://localhost:8080/Service1/ItemsReady\")                          \n        }  \n    }  \n};  \n  \nReceive ItemsReady = new Receive  \n{  \n    ServiceContractName = \"ICallbackItemsReady\",  \n    OperationName = \"ItemsReady\",  \n    CorrelatesWith = CallbackHandle,  \n};  \n  \nActivity wf = new Sequence  \n{  \n    Variables =  \n    {  \n        CallbackHandle  \n    },  \n    Activities =  \n    {  \n        StartOrder,  \n        new WriteLine  \n        {  \n            Text = \"WF1 - Started\"  \n        },  \n        GetItems,  \n        new WriteLine  \n        {  \n            Text = \"WF1 - Request Submitted\"  \n        },  \n        ItemsReady,  \n        new WriteLine  \n        {  \n            Text = \"WF1 - Items Received\"  \n        }  \n     }  \n};  \n```  \n  \n The second workflow service is hosted using a system-provided, context-based binding.  \n  \n```csharp  \n// Host WF Service 2.  \nstring baseAddress2 = \"http://localhost:8081/Service2\";  \nWorkflowServiceHost host2 = new WorkflowServiceHost(GetWF2(), new Uri(baseAddress2));  \n  \n// Add the service endpoint.  \nWSHttpContextBinding Binding2 = new WSHttpContextBinding();  \nhost2.AddServiceEndpoint(\"IService2\", Binding2, baseAddress2);  \n  \n// Open the second workflow service.  \nhost2.Open();  \nConsole.WriteLine(\"Service2 waiting at: {0}\", baseAddress2);  \n```  \n  \n The workflow that implements this workflow service begins with a <xref:System.ServiceModel.Activities.Receive> activity. This receive activity initializes the callback correlation for this service, delays for a period of time to simulate long-running work, and then calls back into the first service using the callback context that was passed in the first call into the service. The following example represents the workflow that is returned from a call to `GetWF2`. Note that the <xref:System.ServiceModel.Activities.Send> activity has a placeholder address of `http://www.contoso.com`; the actual address used at runtime is the supplied callback address.  \n  \n```csharp  \nVariable<CorrelationHandle> ItemsCallbackHandle = new Variable<CorrelationHandle>();  \n  \nReceive StartItems = new Receive  \n{  \n    CorrelationInitializers =   \n    {  \n        new CallbackCorrelationInitializer  \n        {  \n            CorrelationHandle = ItemsCallbackHandle  \n        }  \n    },  \n    CanCreateInstance = true,  \n    ServiceContractName = \"IService2\",  \n    OperationName = \"StartItems\"  \n};  \n  \nSend ItemsReady = new Send  \n{  \n    CorrelatesWith = ItemsCallbackHandle,  \n    Endpoint = new Endpoint  \n    {  \n        // The callback address on the binding is used  \n        // instead of this placeholder address.  \n        AddressUri = new Uri(\"http://www.contoso.com\"),  \n  \n        Binding = new WSHttpContextBinding()  \n    },  \n    OperationName = \"ItemsReady\",  \n    ServiceContractName = \"ICallbackItemsReady\"  \n};  \n  \nActivity wf = new Sequence  \n{  \n    Variables =  \n    {  \n        ItemsCallbackHandle  \n    },  \n    Activities =  \n    {  \n        StartItems,  \n        new WriteLine  \n        {  \n            Text = \"WF2 - Request Received\"  \n        },  \n        new Delay  \n        {  \n            Duration = TimeSpan.FromMinutes(90)  \n        },  \n        new WriteLine  \n        {  \n            Text = \"WF2 - Sending items\"  \n        },  \n        ItemsReady,  \n        new WriteLine  \n        {  \n            Text = \"WF2 - Items sent\"  \n        }  \n     }  \n};  \n```  \n  \n When the `StartOrder` method is invoked on the first workflow, the following output is displayed, which shows the flow of execution through the two workflows.  \n  \n```Output  \nService1 waiting at: http://localhost:8080/Service1  \nService2 waiting at: http://localhost:8081/Service2  \nPress enter to exit.   \nWF1 - Started  \nWF2 - Request Received  \nWF1 - Request Submitted  \nWF2 - Sending items  \nWF2 - Items sent  \nWF1 - Items Received  \n  \n```  \n  \n In this example, both workflows explicitly manage correlation using a <xref:System.ServiceModel.Activities.CallbackCorrelationInitializer>. Because there was only a single correlation in these sample workflows, the default <xref:System.ServiceModel.Activities.CorrelationHandle> management would have been sufficient.  \n  \n## See Also  \n [Durable Duplex &#91;WF Samples&#93;](../../../../docs/framework/windows-workflow-foundation/samples/durable-duplex.md)","nodes":[{"pos":[12,55],"content":"Durable Duplex Correlation | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Durable Duplex Correlation | Microsoft Docs","pos":[0,43]}]},{"pos":[353,379],"content":"Durable Duplex Correlation","linkify":"Durable Duplex Correlation","nodes":[{"content":"Durable Duplex Correlation","pos":[0,26]}]},{"content":"Durable duplex correlation, also known as callback correlation, is useful when a workflow service has a requirement to send a callback to the initial caller.","pos":[380,537]},{"content":"Unlike WCF duplex, the callback can happen at any time in the future and is not tied to the same channel or the channel lifetime; the only requirement is that the caller have an active endpoint listening for the callback message.","pos":[538,767]},{"content":"This allows two workflow services to communicate in a long-running conversation.","pos":[768,848]},{"content":"This topic provides an overview of durable duplex correlation.","pos":[849,911]},{"pos":[920,952],"content":"Using Durable Duplex Correlation","linkify":"Using Durable Duplex Correlation","nodes":[{"content":"Using Durable Duplex Correlation","pos":[0,32]}]},{"content":"To use durable duplex correlation, the two services must use a context-enabled binding that supports two-way operations, such as <ph id=\"ph1\">&lt;xref:System.ServiceModel.NetTcpContextBinding&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ServiceModel.WSHttpContextBinding&gt;</ph>.","pos":[956,1184],"source":"To use durable duplex correlation, the two services must use a context-enabled binding that supports two-way operations, such as <xref:System.ServiceModel.NetTcpContextBinding> or <xref:System.ServiceModel.WSHttpContextBinding>."},{"content":"The calling service registers a <ph id=\"ph1\">&lt;xref:System.ServiceModel.WSHttpContextBinding.ClientCallbackAddress%2A&gt;</ph> with the desired binding on their client <ph id=\"ph2\">&lt;xref:System.ServiceModel.Endpoint&gt;</ph>.","pos":[1185,1367],"source":" The calling service registers a <xref:System.ServiceModel.WSHttpContextBinding.ClientCallbackAddress%2A> with the desired binding on their client <xref:System.ServiceModel.Endpoint>."},{"content":"The receiving service receives this data in the initial call and then uses it on its own <ph id=\"ph1\">&lt;xref:System.ServiceModel.Endpoint&gt;</ph> in the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity that makes the call back to the calling service.","pos":[1368,1600],"source":" The receiving service receives this data in the initial call and then uses it on its own <xref:System.ServiceModel.Endpoint> in the <xref:System.ServiceModel.Activities.Send> activity that makes the call back to the calling service."},{"content":"In this example, two services communicate with each other.","pos":[1601,1659]},{"content":"The first service invokes a method on the second service and then waits for a reply.","pos":[1660,1744]},{"content":"The second service knows the name of the callback method, but the endpoint of the service that implements this method is not known at design time.","pos":[1745,1891]},{"pos":[1899,2558],"content":"[!NOTE]\n Durable duplex can only be used when the <xref:System.ServiceModel.Channels.AddressingVersion> of the endpoint is configured with <xref:System.ServiceModel.Channels.AddressingVersion.WSAddressing10%2A>. If it is not, then an <xref:System.InvalidOperationException> exception is thrown with the following message: \"The message contains a callback context header with an endpoint reference for AddressingVersion 'Addressing200408 ( HYPERLINK \"http://schemas.xmlsoap.org/ws/2004/08/addressing\" http://schemas.xmlsoap.org/ws/2004/08/addressing)'. Callback context can only be transmitted when the AddressingVersion is configured with 'WSAddressing10'.\"","leadings":["","> "],"nodes":[{"content":" Durable duplex can only be used when the <xref:System.ServiceModel.Channels.AddressingVersion> of the endpoint is configured with <xref:System.ServiceModel.Channels.AddressingVersion.WSAddressing10%2A>. If it is not, then an <xref:System.InvalidOperationException> exception is thrown with the following message: \"The message contains a callback context header with an endpoint reference for AddressingVersion 'Addressing200408 ( HYPERLINK \"http://schemas.xmlsoap.org/ws/2004/08/addressing\" http://schemas.xmlsoap.org/ws/2004/08/addressing)'. Callback context can only be transmitted when the AddressingVersion is configured with 'WSAddressing10'.\"","pos":[8,657],"nodes":[{"content":"Durable duplex can only be used when the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.AddressingVersion&gt;</ph> of the endpoint is configured with <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.AddressingVersion.WSAddressing10%2A&gt;</ph>.","pos":[1,203],"source":" Durable duplex can only be used when the <xref:System.ServiceModel.Channels.AddressingVersion> of the endpoint is configured with <xref:System.ServiceModel.Channels.AddressingVersion.WSAddressing10%2A>."},{"content":"If it is not, then an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown with the following message: \"The message contains a callback context header with an endpoint reference for AddressingVersion 'Addressing200408 ( HYPERLINK \"http://schemas.xmlsoap.org/ws/2004/08/addressing\" http://schemas.xmlsoap.org/ws/2004/08/addressing)'.","pos":[204,543],"source":" If it is not, then an <xref:System.InvalidOperationException> exception is thrown with the following message: \"The message contains a callback context header with an endpoint reference for AddressingVersion 'Addressing200408 ( HYPERLINK \"http://schemas.xmlsoap.org/ws/2004/08/addressing\" http://schemas.xmlsoap.org/ws/2004/08/addressing)'."},{"content":"Callback context can only be transmitted when the AddressingVersion is configured with 'WSAddressing10'.\"","pos":[544,649]}]}]},{"content":"In the following example, a workflow service is hosted that creates a callback <ph id=\"ph1\">&lt;xref:System.ServiceModel.Endpoint&gt;</ph> using <ph id=\"ph2\">&lt;xref:System.ServiceModel.WSHttpContextBinding&gt;</ph>.","pos":[2565,2734],"source":"In the following example, a workflow service is hosted that creates a callback <xref:System.ServiceModel.Endpoint> using <xref:System.ServiceModel.WSHttpContextBinding>."},{"content":"The workflow that implements this workflow service initializes the callback correlation with its <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity, and references this callback endpoint from the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity that correlates with the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph>.","pos":[3323,3643],"source":"The workflow that implements this workflow service initializes the callback correlation with its <xref:System.ServiceModel.Activities.Send> activity, and references this callback endpoint from the <xref:System.ServiceModel.Activities.Receive> activity that correlates with the <xref:System.ServiceModel.Activities.Send>."},{"content":"The following example represents the workflow that is returned from the <ph id=\"ph1\">`GetWF1`</ph> method.","pos":[3644,3732],"source":" The following example represents the workflow that is returned from the `GetWF1` method."},{"content":"The second workflow service is hosted using a system-provided, context-based binding.","pos":[5225,5310]},{"content":"The workflow that implements this workflow service begins with a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity.","pos":[5790,5910],"source":"The workflow that implements this workflow service begins with a <xref:System.ServiceModel.Activities.Receive> activity."},{"content":"This receive activity initializes the callback correlation for this service, delays for a period of time to simulate long-running work, and then calls back into the first service using the callback context that was passed in the first call into the service.","pos":[5911,6168]},{"content":"The following example represents the workflow that is returned from a call to <ph id=\"ph1\">`GetWF2`</ph>.","pos":[6169,6256],"source":" The following example represents the workflow that is returned from a call to `GetWF2`."},{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity has a placeholder address of <ph id=\"ph2\">`http://www.contoso.com`</ph>; the actual address used at runtime is the supplied callback address.","pos":[6257,6446],"source":" Note that the <xref:System.ServiceModel.Activities.Send> activity has a placeholder address of `http://www.contoso.com`; the actual address used at runtime is the supplied callback address."},{"pos":[7878,8036],"content":"When the <ph id=\"ph1\">`StartOrder`</ph> method is invoked on the first workflow, the following output is displayed, which shows the flow of execution through the two workflows.","source":"When the `StartOrder` method is invoked on the first workflow, the following output is displayed, which shows the flow of execution through the two workflows."},{"content":"In this example, both workflows explicitly manage correlation using a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.CallbackCorrelationInitializer&gt;</ph>.","pos":[8330,8469],"source":"In this example, both workflows explicitly manage correlation using a <xref:System.ServiceModel.Activities.CallbackCorrelationInitializer>."},{"content":"Because there was only a single correlation in these sample workflows, the default <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.CorrelationHandle&gt;</ph> management would have been sufficient.","pos":[8470,8647],"source":" Because there was only a single correlation in these sample workflows, the default <xref:System.ServiceModel.Activities.CorrelationHandle> management would have been sufficient."},{"pos":[8656,8664],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[8668,8787],"content":"<bpt id=\"p1\">[</bpt>Durable Duplex &amp;#91;WF Samples&amp;#93;<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/durable-duplex.md)</ept>","source":"[Durable Duplex &#91;WF Samples&#93;](../../../../docs/framework/windows-workflow-foundation/samples/durable-duplex.md)"}]}