<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d5a9061d026f9ed367e3aa313224c8b531fa11c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\data-types\data-type-summary.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0053f74d452aea384dd84a647569b66f788d21d3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7bd541bcdd14f977c74375fbad64e448a86e8578</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Data Type Summary (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Type Summary (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following table shows the Visual Basic data types, their supporting common language runtime types, their nominal storage allocation, and their value ranges.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Visual Basic type</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Common language runtime type structure</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Nominal storage allocation</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Value range</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Depends on implementing platform</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`True`</ph> or <ph id="ph2">`False`</ph></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Byte<ept id="p1">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>1 byte</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>0 through 255 (unsigned)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char<ept id="p1">](../../../visual-basic/language-reference/data-types/char-data-type.md)</ept> (single character)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>2 bytes</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>0 through 65535 (unsigned)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Date<ept id="p1">](../../../visual-basic/language-reference/data-types/date-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>8 bytes</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>0:00:00 (midnight) on January 1, 0001 through 11:59:59 PM on December 31, 9999</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Decimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>16 bytes</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>0 through +/-79,228,162,514,264,337,593,543,950,335 (+/-7.9...E+28) <bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept> with no decimal point; 0 through +/-7.9228162514264337593543950335 with 28 places to the right of the decimal;</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>smallest nonzero number is +/-0.0000000000000000000000000001 (+/-1E-28) <bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Double<ept id="p1">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> (double-precision floating-point)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>8 bytes</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-1.79769313486231570E+308 through -4.94065645841246544E-324 <bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept> for negative values;</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>4.94065645841246544E-324 through 1.79769313486231570E+308 <bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept> for positive values</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integer<ept id="p1">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>4 bytes</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-2,147,483,648 through 2,147,483,647 (signed)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Long<ept id="p1">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept> (long integer)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>8 bytes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-9,223,372,036,854,775,808 through 9,223,372,036,854,775,807 (9.2...E+18 <bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept>) (signed)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object<ept id="p1">](../../../visual-basic/language-reference/data-types/object-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Object&gt;</ph> (class)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>4 bytes on 32-bit platform</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>8 bytes on 64-bit platform</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Any type can be stored in a variable of type <ph id="ph1">`Object`</ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SByte<ept id="p1">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>1 byte</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-128 through 127 (signed)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Short<ept id="p1">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept> (short integer)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>2 bytes</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-32,768 through 32,767 (signed)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single<ept id="p1">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> (single-precision floating-point)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>4 bytes</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>-3.4028235E+38 through -1.401298E-45 <bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept> for negative values;</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>1.401298E-45 through 3.4028235E+38 <bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept> for positive values</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String<ept id="p1">](../../../visual-basic/language-reference/data-types/string-data-type.md)</ept> (variable-length)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph> (class)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Depends on implementing platform</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>0 to approximately 2 billion Unicode characters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInteger<ept id="p1">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>4 bytes</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>0 through 4,294,967,295 (unsigned)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ULong<ept id="p1">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>8 bytes</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>0 through 18,446,744,073,709,551,615 (1.8...E+19 <bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept>) (unsigned)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>User-Defined<ept id="p1">](../../../visual-basic/language-reference/data-types/user-defined-data-type.md)</ept> (structure)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>(inherits from <ph id="ph1">&lt;xref:System.ValueType&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Depends on implementing platform</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Each member of the structure has a range determined by its data type and independent of the ranges of the other members</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UShort<ept id="p1">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>2 bytes</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>0 through 65,535 (unsigned)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;sup&gt;</bpt>†<ept id="p1">&lt;/sup&gt;</ept> In <bpt id="p2">*</bpt>scientific notation<ept id="p2">*</ept>, "E" refers to a power of 10.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>So 3.56E+2 signifies 3.56 x 10<bpt id="p1">&lt;sup&gt;</bpt>2<ept id="p1">&lt;/sup&gt;</ept> or 356, and 3.56E-2 signifies 3.56 / 10<bpt id="p2">&lt;sup&gt;</bpt>2<ept id="p2">&lt;/sup&gt;</ept> or 0.0356.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For strings containing text, use the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.StrConv%2A&gt;</ph> function to convert from one text format to another.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In addition to specifying a data type in a declaration statement, you can force the data type of some programming elements by using a type character.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Type Characters<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Memory Consumption</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When you declare an elementary data type, it is not safe to assume that its memory consumption is the same as its nominal storage allocation.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This is due to the following considerations:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Storage Assignment.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The common language runtime can assign storage based on the current characteristics of the platform on which your application is executing.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If memory is nearly full, it might pack your declared elements as closely together as possible.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In other cases it might align their memory addresses to natural hardware boundaries to optimize performance.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platform Width.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Storage assignment on a 64-bit platform is different from assignment on a 32-bit platform.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Composite Data Types</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The same considerations apply to each member of a composite data type, such as a structure or an array.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You cannot rely on simply adding together the nominal storage allocations of the type's members.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Furthermore, there are other considerations, such as the following:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Overhead.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Some composite types have additional memory requirements.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For example, an array uses extra memory for the array itself and also for each dimension.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>On a 32-bit platform, this overhead is currently 12 bytes plus 8 bytes for each dimension.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>On a 64-bit platform this requirement is doubled.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Storage Layout.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You cannot safely assume that the order of storage in memory is the same as your order of declaration.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You cannot even make assumptions about byte alignment, such as a 2-byte or 4-byte boundary.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you are defining a class or structure and you need to control the storage layout of its members, you can apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute to the class or structure.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Object Overhead</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Object`</ph> referring to any elementary or composite data type uses 4 bytes in addition to the data contained in the data type.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.StrConv%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Conversion Summary<ept id="p1">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Characters<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Efficient Use of Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>