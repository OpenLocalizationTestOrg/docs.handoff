<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63d263e1c9308e44715185df03d90ad3bb824782</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\wpf-add-ins-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ecb0c895799e1f72efe7cd6fb958fefedbd82df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffea87c6a2389de86e4b69890d6912e8097ab7a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>WPF Add-Ins Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WPF Add-Ins Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> includes an add-in model that developers can use to create applications that support add-in extensibility.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This add-in model allows the creation of add-ins that integrate with and extend application functionality.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In some scenarios, applications also need to display <ph id="ph1">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> that are provided by add-ins.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic shows how <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> augments the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model to enable these scenarios, the architecture behind it, its benefits, and its limitations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Familiarity with the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model is required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add-Ins Overview</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to avoid the complexities of application recompilation and redeployment to incorporate new functionality, applications implement extensibility mechanisms that allow developers (both first-party and third-party) to create other applications that integrate with them.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The most common way to support this type of extensibility is through the use of add-ins (also known as "add-ons" and "plug-ins").</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Examples of real-world applications that expose extensibility with add-ins include:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Internet Explorer add-ons.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Windows Media Player plug-ins.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Visual Studio add-ins.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the Windows Media Player add-in model allows third-party developers to implement "plug-ins" that extend Windows Media Player in a variety of ways, including creating decoders and encoders for media formats that are not supported natively by Windows Media Player (for example, DVD, MP3), audio effects, and skins.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each add-in model is built to expose the functionality that is unique to an application, although there are several entities and behaviors that are common to all add-in models.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The three main entities of typical add-in extensibility solutions are <bpt id="p1">*</bpt>contracts<ept id="p1">*</ept>, <bpt id="p2">*</bpt>add-ins<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>host applications<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Contracts define how add-ins integrate with host applications in two ways:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add-ins integrate with functionality that is implemented by host applications.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Host applications expose functionality for add-ins to integrate with.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In order for add-ins to be used, host applications need to find them and load them at run time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Consequently, applications that support add-ins have the following additional responsibilities:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Discovery<ept id="p1">**</ept>: Finding add-ins that adhere to contracts supported by host applications.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Activation<ept id="p1">**</ept>: Loading, running, and establishing communication with add-ins.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Isolation<ept id="p1">**</ept>: Using either application domains or processes to establish isolation boundaries that protect applications from potential security and execution problems with add-ins.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Communication<ept id="p1">**</ept>: Allowing add-ins and host applications to communicate with each other across isolation boundaries by calling methods and passing data.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Lifetime Management<ept id="p1">**</ept>: Loading and unloading application domains and processes in a clean, predictable manner (see <bpt id="p2">[</bpt>Application Domains<ept id="p2">](../../../../docs/framework/app-domains/application-domains.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Versioning<ept id="p1">**</ept>: Ensuring that host applications and add-ins can still communicate when new versions of either are created.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Ultimately, developing a robust add-in model is a non-trivial undertaking.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For this reason, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> provides an infrastructure for building add-in models.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more detailed information on add-ins, see <bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>.NET Framework Add-In Model Overview</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model, found in the <ph id="ph2">&lt;xref:System.AddIn&gt;</ph> namespace, contains a set of types that are designed to simplify the development of add-in extensibility.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The fundamental unit of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model is the <bpt id="p1">*</bpt>contract<ept id="p1">*</ept>, which defines how a host application and an add-in communicate with each other.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A contract is exposed to a host application using a host-application-specific <bpt id="p1">*</bpt>view<ept id="p1">*</ept> of the contract.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Likewise, an add-in-specific <bpt id="p1">*</bpt>view<ept id="p1">*</ept> of the contract is exposed to the add-in.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>adapter<ept id="p1">*</ept> is used to allow a host application and an add-in to communicate between their respective views of the contract.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Contracts, views, and adapters are referred to as segments, and a set of related segments constitutes a <bpt id="p1">*</bpt>pipeline<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Pipelines are the foundation upon which the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model supports discovery, activation, security isolation, execution isolation (using both application domains and processes), communication, lifetime management, and versioning.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The sum of this support allows developers to build add-ins that integrate with the functionality of a host application.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, some scenarios require host applications to display <ph id="ph1">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> provided by add-ins.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Because each presentation technology in the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> has its own model for implementing <ph id="ph2">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph>, the <ph id="ph3">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model does not support any particular presentation technology.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Instead, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> extends the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model with <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> support for add-ins.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>WPF Add-Ins</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, in conjunction with the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model, allows you to address a wide variety of scenarios that require host applications to display <ph id="ph3">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> from add-ins.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In particular, these scenarios are addressed by <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> with the following two programming models:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The add-in returns a UI<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An add-in returns a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> to the host application via a method call, as defined by the contract.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This scenario is used in the following cases:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The appearance of a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that is returned by an add-in is dependent on either data or conditions that exist only at run time, such as dynamically generated reports.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> for services provided by an add-in differs from the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> of the host applications that can use the add-in.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The add-in primarily performs a service for the host application, and reports status to the host application with a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The add-in is a UI<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An add-in is a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, as defined by the contract.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This scenario is used in the following cases:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An add-in doesn't provide services other than being displayed, such as an advertisement.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> for services provided by an add-in is common to all host applications that can use that add-in, such as a calculator or color picker.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>These scenarios require that <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> objects can be passed between host application and add-in application domains.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Since the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model relies on remoting to communicate between application domains, the objects that are passed between them must be remotable.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A remotable object is an instance of a class that does one or more of the following:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Derives from the <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Has the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute applied.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information regarding the creation of remotable <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> objects, see <bpt id="p1">[</bpt>Making Objects Remotable<ept id="p1">](http://msdn.microsoft.com/en-us/01197253-3f13-43b7-894d-9683e431192a)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> types are not remotable.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To solve the problem, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> extends the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model to enable <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> <ph id="ph4">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> created by add-ins to be displayed from host applications.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This support is provided by <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> by two types: the <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> interface and two static methods implemented by the <ph id="ph3">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters&gt;</ph> class: <ph id="ph4">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>At a high level, these types and methods are used in the following manner:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> requires that <ph id="ph2">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> provided by add-ins are classes that derive directly or indirectly from <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, such as shapes, controls, user controls, layout panels, and pages.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Wherever the contract declares that a UI will be passed between the add-in and the host application, it must be declared as an <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> (not a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>); <ph id="ph3">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> is a remotable representation of the add-in <ph id="ph4">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that can be passed across isolation boundaries.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Before being passed from the add-in's application domain, a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is packaged as an <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> by calling <ph id="ph3">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>After being passed to the host application's application domain, the <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> must be repackaged as a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> by calling <ph id="ph3">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>How <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, <ph id="ph2">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> are used depends on the specific scenario.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following sections provide details for each programming model.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Add-In Returns a User Interface</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For an add-in to return a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> to a host application, the following are required:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The host application, add-in, and pipeline must be created, as described by the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> <bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept> documentation.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The contract must implement <ph id="ph1">&lt;xref:System.AddIn.Contract.IContract&gt;</ph> and, to return a <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, the contract must declare a method with a return value of type <ph id="ph3">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that is passed between the add-in and the host application must directly or indirectly derive from <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that is returned by the add-in must be converted from a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> to an <ph id="ph3">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> before crossing the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that is returned must be converted from an <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> after crossing the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The host application displays the returned <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For an example that demonstrates how to implement an add-in that returns a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, see <bpt id="p1">[</bpt>Create an Add-In That Returns a UI<ept id="p1">](../../../../docs/framework/wpf/app-development/how-to-create-an-add-in-that-returns-a-ui.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Add-In Is a User Interface</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When an add-in is a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, the following are required:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The host application, add-in, and pipeline must be created, as described by the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> <bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept> documentation.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The contract interface for the add-in must implement <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The add-in that is passed to the host application must directly or indirectly derive from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The add-in must be converted from a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> to an <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> before crossing the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The add-in must be converted from an <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> to a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> after crossing the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The host application displays the returned <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For an example that demonstrates how to implement an add-in that is a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, see <bpt id="p1">[</bpt>Create an Add-In That Is a UI<ept id="p1">](../../../../docs/framework/wpf/app-development/how-to-create-an-add-in-that-is-a-ui.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returning Multiple UIs from an Add-In</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Add-ins often provide multiple <ph id="ph1">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> for host applications to display.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For example, consider an add-in that is a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that also provides status information to the host application, also as a <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An add-in like this can be implemented by using a combination of techniques from both the <bpt id="p1">[</bpt>Add-In Returns a User Interface<ept id="p1">](#ReturnUIFromAddInContract)</ept> and <bpt id="p2">[</bpt>Add-In Is a User Interface<ept id="p2">](#AddInIsAUI)</ept> models.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Add-Ins and XAML Browser Applications</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In the examples so far, the host application has been an installed standalone application.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>But <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](../../../../includes/tlasharptla-xbapsharpplural-md.md)]</ph> can also host add-ins, albeit with the following additional build and implementation requirements:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> application manifest must be configured specially to download the pipeline (folders and assemblies) and add-in assembly to the <ph id="ph2">[!INCLUDE[TLA#tla_clickonce](../../../../includes/tlasharptla-clickonce-md.md)]</ph> application cache on the client machine, in the same folder as the <ph id="ph3">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> code to discover and load add-ins must use the <ph id="ph2">[!INCLUDE[TLA2#tla_clickonce](../../../../includes/tla2sharptla-clickonce-md.md)]</ph> application cache for the <ph id="ph3">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> as the pipeline and add-in location.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> must load the add-in into a special security context if the add-in references loose files that are located at the site of origin; when hosted by <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, add-ins can only reference loose files that are located at the host application's site of origin.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>These tasks are described in detail in the following subsections.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Configuring the Pipeline and Add-In for ClickOnce Deployment</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> are downloaded to and run from a safe folder in the <ph id="ph2">[!INCLUDE[TLA2#tla_clickonce](../../../../includes/tla2sharptla-clickonce-md.md)]</ph> deployment cache.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In order for an <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> to host an add-in, the pipeline and add-in assembly must also be downloaded to the safe folder.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To achieve this, you need to configure the application manifest to include both the pipeline and add-in assembly for download.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This is most easily done in <ph id="ph1">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph>, although the pipeline and add-in assembly needs to be in the host <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> project's root folder in order for <ph id="ph3">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph> to detect the pipeline assemblies.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Consequently, the first step is to build the pipeline and add-in assembly to the <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> project's root by setting the build output of each pipeline assembly and add-in assembly projects.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following table shows the build output paths for pipeline assembly projects and add-in assembly project that are in the same solution and root folder as the host <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Table 1: Build Output Paths for the Pipeline Assemblies That Are Hosted by an XBAP</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Pipeline assembly project</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Build output path</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Contract</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Add-In View</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Add-In-Side Adapter</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Host-Side Adapter</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Add-In</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The next step is to specify the pipeline assemblies and add-in assembly as the <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> content files in <ph id="ph2">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph> by doing the following:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Including the pipeline and add-in assembly in the project by right-clicking each pipeline folder in Solution Explorer and choosing <bpt id="p1">**</bpt>Include In Project<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Setting the <bpt id="p1">**</bpt>Build Action<ept id="p1">**</ept> of each pipeline assembly and add-in assembly to <bpt id="p2">**</bpt>Content<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The final step is to configure the application manifest to include the pipeline assembly files and add-in assembly file for download.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The files should be located in folders at the root of the folder in the <ph id="ph1">[!INCLUDE[TLA2#tla_clickonce](../../../../includes/tla2sharptla-clickonce-md.md)]</ph> cache that the <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> application occupies.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The configuration can be achieved in <ph id="ph1">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph> by doing the following:</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Right-click the <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> project, click <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>, and then click the <bpt id="p3">**</bpt>Application Files<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Application Files<ept id="p1">**</ept> dialog, set the <bpt id="p2">**</bpt>Publish Status<ept id="p2">**</ept> of each pipeline and add-in DLL to <bpt id="p3">**</bpt>Include (Auto)<ept id="p3">**</ept>, and set the <bpt id="p4">**</bpt>Download Group<ept id="p4">**</ept> for each pipeline and add-in DLL to <bpt id="p5">**</bpt>(Required)<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Using the Pipeline and Add-In from the Application Base</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When the pipeline and add-in are configured for <ph id="ph1">[!INCLUDE[TLA2#tla_clickonce](../../../../includes/tla2sharptla-clickonce-md.md)]</ph> deployment, they are downloaded to the same <ph id="ph2">[!INCLUDE[TLA2#tla_clickonce](../../../../includes/tla2sharptla-clickonce-md.md)]</ph> cache folder as the <ph id="ph3">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To use the pipeline and add-in from the <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> code must get them from the application base.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The various types and members of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model for using pipelines and add-ins provide special support for this scenario.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Firstly, the path is identified by the <ph id="ph1">&lt;xref:System.AddIn.Hosting.PipelineStoreLocation&gt;</ph> enumeration value.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You use this value with overloads of the pertinent add-in members for using pipelines that include the following:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Accessing the Host's Site of Origin</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>To ensure that an add-in can reference files from the site of origin, the add-in must be loaded with security isolation that is equivalent to the host application.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This security level is identified by the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInSecurityLevel?displayProperty=fullName&gt;</ph> enumeration value, and passed to the <ph id="ph2">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%2A&gt;</ph> method when an add-in is activated.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>WPF Add-In Architecture</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>At the highest level, as we've seen, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> enables <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-ins to implement <ph id="ph3">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> (that derive directly or indirectly from <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph>) using <ph id="ph5">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, <ph id="ph6">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> and <ph id="ph7">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The result is that the host application is returned a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that is displayed from <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> in the host application.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For simple <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> add-in scenarios, this is as much detail as a developer needs.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For more complex scenarios, particularly those that try to utilize additional <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> services such as layout, resources, and data binding, more detailed knowledge of how <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> extends the <ph id="ph3">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model with <ph id="ph4">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> support is required to understand its benefits and limitations.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Fundamentally, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> doesn't pass a <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> from an add-in to a host application; instead, <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> passes the Win32 window handle for the <ph id="ph4">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> by using <ph id="ph5">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> interoperability.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>As such, when a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> from an add-in is passed to a host application, the following occurs:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>On the add-in side, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> acquires a window handle for the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that will be displayed by the host application.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The window handle is encapsulated by an internal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> class that derives from <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> and implements <ph id="ph3">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An instance of this class is returned by <ph id="ph1">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> and is marshaled from the add-in's application domain to the host application's application domain.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>On the host application side, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> repackages the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> as an internal <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> class that derives from <ph id="ph4">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> and consumes <ph id="ph5">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>An instance of this class is returned by <ph id="ph1">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph> to the host application.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> exists to display <ph id="ph2">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph>, identified by window handles, from <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> <ph id="ph4">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In summary, <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, <ph id="ph2">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph> exist to allow the window handle for a <ph id="ph4">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> <ph id="ph5">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> to be passed from an add-in to a host application, where it is encapsulated by a <ph id="ph6">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> and displayed the host application's <ph id="ph7">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Because the host application gets an <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>, the host application cannot convert the object that is returned by <ph id="ph2">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph> to the type it is implemented as by the add-in (for example, a <ph id="ph3">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>By its nature, <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> has certain limitations that affect how host applications can use them.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> extends <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> with several capabilities for add-in scenarios.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>These benefits and limitations are described below.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>WPF Add-In Benefits</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> add-in <ph id="ph2">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> are displayed from host applications using an internal class that derives from <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>, those <ph id="ph4">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> are constrained by the capabilities of <ph id="ph5">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> with respect to <ph id="ph6">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> <ph id="ph7">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> services such as layout, rendering, data binding, styles, templates, and resources.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> augments its internal <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> subclass with additional capabilities that include the following:</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Tabbing between a host application's <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> and an add-in's <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Note that the "add-in is a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>" programming model requires the add-in-side adapter to override <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> to enable tabbing, whether the add-in is fully trusted or partially trusted.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Honoring accessibility requirements for add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> that are displayed from host application <ph id="ph2">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Enabling <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications to run safely in multiple application domain scenarios.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Preventing illegal access to add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> window handles when add-ins run with security isolation (that is, a partial-trust security sandbox).</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> ensures this security:</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For the "add-in returns a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>" programming model, the only way to pass the window handle for an add-in <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> across the isolation boundary is to call <ph id="ph3">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For the "add-in is a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>" programming model, overriding <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> on the add-in-side adapter and calling <ph id="ph3">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> (as shown in the preceding examples) is required, as is calling the add-in-side adapter's <ph id="ph4">`QueryContract`</ph> implementation from the host-side adapter.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Providing multiple application domain execution protection.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Due to limitations with application domains, unhandled exceptions that are thrown in add-in application domains cause the entire application to crash, even though the isolation boundary exists.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> and the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model provide a simple way to work around this problem and improve application stability.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> add-in that displays a <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> creates a <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> for the thread that the application domain runs on, if the host application is a <ph id="ph4">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>You can detect all unhandled exceptions that occur in the application domain by handling the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event of the <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> add-in's <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>You can get the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> from the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>WPF Add-In Limitations</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Beyond the benefits that <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> adds to the default behaviors supplied by <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>, and window handles, there are also limitations for add-in <ph id="ph4">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> that are displayed from host applications:</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> displayed from a host application do not respect the host application's clipping behavior.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The concept of <bpt id="p1">*</bpt>airspace<ept id="p1">*</ept> in interoperability scenarios also applies to add-ins (see <bpt id="p2">[</bpt>Technology Regions Overview<ept id="p2">](../../../../docs/framework/wpf/advanced/technology-regions-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A host application's <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> services, such as resource inheritance, data binding, and commanding, are not automatically available to add-in <ph id="ph2">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>To provide these services to the add-in, you need to update the pipeline.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>An add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> cannot be rotated, scaled, skewed, or otherwise affected by a transformation (see <bpt id="p1">[</bpt>Transforms Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/transforms-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Content inside add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> that is rendered by drawing operations from the <ph id="ph2">&lt;xref:System.Drawing&gt;</ph> namespace can include alpha blending.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>However, both an add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> and the host application <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that contains it must be 100% opaque; in other words, the <ph id="ph3">`Opacity`</ph> property on both must be set to 1.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> property of a window in the host application that contains an add-in <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> is set to <ph id="ph3">`true`</ph>, the add-in is invisible.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This is true even if the add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> is 100% opaque (that is, the <ph id="ph2">`Opacity`</ph> property has a value of 1).</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>An add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> must appear on top of other <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> elements in the same top-level window.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>No portion of an add-in's <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> can be rendered using a <ph id="ph2">&lt;xref:System.Windows.Media.VisualBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Instead, the add-in may take a snapshot of the generated <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> to create a bitmap that can be passed to the host application using methods defined by the contract.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Media files cannot be played from a <ph id="ph1">&lt;xref:System.Windows.Controls.MediaElement&gt;</ph> in an add-in <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Mouse events generated for the add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> are neither received nor raised by the host application, and the <ph id="ph2">`IsMouseOver`</ph> property for host application <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> has a value of <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>When focus shifts between controls in an add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, the <ph id="ph2">`GotFocus`</ph> and <ph id="ph3">`LostFocus`</ph> events are neither received nor raised by the host application.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The portion of a host application that contains an add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> appears white when printed.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>All dispatchers (see <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>) created by the add-in <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> must be shut down manually before the owner add-in is unloaded if the host application continues execution.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The contract can implement methods that allow the host application to signal the add-in before the add-in is unloaded, thereby allowing the add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> to shut down its dispatchers.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>If an add-in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> is an <ph id="ph2">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> or contains an <ph id="ph3">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>, you cannot unload the add-in.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Performance Optimization</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>By default, when multiple application domains are used, the various <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> assemblies required by each application are all loaded into that application's domain.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>As a result, the time required for creating new application domains and starting applications in them might affect performance.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> provides a way for you to reduce start times by instructing applications to share assemblies across application domains if they are already loaded.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>You do this by using the <ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph> attribute, which must be applied to the entry point method (<ph id="ph2">`Main`</ph>).</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In this case, you must use only code to implement your application definition (see <bpt id="p1">[</bpt>Application Management Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/application-management-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Domains<ept id="p1">](../../../../docs/framework/app-domains/application-domains.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Remoting Overview<ept id="p1">](http://msdn.microsoft.com/en-us/eccb1d31-0a22-417a-97fd-f4f1f3aa4462)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Making Objects Remotable<ept id="p1">](http://msdn.microsoft.com/en-us/01197253-3f13-43b7-894d-9683e431192a)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How-to Topics<ept id="p1">](../../../../docs/framework/wpf/app-development/how-to-topics.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>