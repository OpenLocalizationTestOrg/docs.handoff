{"content":"---\ntitle: \"Type Forwarding in the Common Language Runtime\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"assemblies [.NET Framework], type forwarding\"\n  - \"type forwarding\"\nms.assetid: 51f8ffa3-c253-4201-a3d3-c4fad85ae097\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Type Forwarding in the Common Language Runtime\nType forwarding allows you to move a type to another assembly without having to recompile applications that use the original assembly.  \n  \n For example, suppose an application uses the `Example` class in an assembly named `Utility.dll`. The developers of `Utility.dll` might decide to refactor the assembly, and in the process they might move the `Example` class to another assembly. If the old version of `Utility.dll` is replaced by the new version of `Utility.dll` and its companion assembly, the application that uses the `Example` class fails because it cannot locate the `Example` class in the new version of `Utility.dll`.  \n  \n The developers of `Utility.dll` can avoid this by forwarding requests for the `Example` class, using the <xref:System.Runtime.CompilerServices.TypeForwardedToAttribute> attribute. If the attribute has been applied to the new version of `Utility.dll`, requests for the `Example` class are forwarded to the assembly that now contains the class. The existing application continues to function normally, without recompilation.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, you cannot forward types from assemblies written in Visual Basic. However, an application written in Visual Basic can consume forwarded types. That is, if the application uses an assembly coded in C# or C++, and a type from that assembly is forwarded to another assembly, the Visual Basic application can use the forwarded type.  \n  \n## Forwarding Types  \n There are four steps to forwarding a type:  \n  \n1.  Move the source code for the type from the original assembly to the destination assembly.  \n  \n2.  In the assembly where the type used to be located, add a <xref:System.Runtime.CompilerServices.TypeForwardedToAttribute> for the type that was moved. The following code shows the attribute for a type named `Example` that was moved.  \n  \n    ```csharp  \n    [assembly:TypeForwardedToAttribute(typeof(Example))]  \n    ```  \n  \n    ```cpp  \n    [assembly:TypeForwardedToAttribute(Example::typeid)]  \n    ```  \n  \n3.  Compile the assembly that now contains the type.  \n  \n4.  Recompile the assembly where the type used to be located, with a reference to the assembly that now contains the type. For example, if you are compiling a C# file from the command line, use the [/reference (C# Compiler Options)](~/docs/csharp/language-reference/compiler-options/reference-compiler-option.md) option to specify the assembly that contains the type. In C++, use the [#using](/cpp/preprocessor/hash-using-directive-cpp) directive in the source file to specify the assembly that contains the type.  \n  \n## See also\n\n- <xref:System.Runtime.CompilerServices.TypeForwardedToAttribute>\n- [Type Forwarding (C++/CLI)](/cpp/windows/type-forwarding-cpp-cli)\n- [#using Directive](/cpp/preprocessor/hash-using-directive-cpp)\n","nodes":[{"pos":[4,300],"embed":true,"restype":"x-metadata","content":"title: \"Type Forwarding in the Common Language Runtime\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"assemblies [.NET Framework], type forwarding\"\n  - \"type forwarding\"\nms.assetid: 51f8ffa3-c253-4201-a3d3-c4fad85ae097\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Type Forwarding in the Common Language Runtime","nodes":[{"pos":[0,46],"content":"Type Forwarding in the Common Language Runtime","nodes":[{"content":"Type Forwarding in the Common Language Runtime","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[307,353],"content":"Type Forwarding in the Common Language Runtime","linkify":"Type Forwarding in the Common Language Runtime","nodes":[{"content":"Type Forwarding in the Common Language Runtime","pos":[0,46]}]},{"content":"Type forwarding allows you to move a type to another assembly without having to recompile applications that use the original assembly.","pos":[354,488]},{"content":"For example, suppose an application uses the <ph id=\"ph1\">`Example`</ph> class in an assembly named <ph id=\"ph2\">`Utility.dll`</ph>.","pos":[495,591],"source":"For example, suppose an application uses the `Example` class in an assembly named `Utility.dll`."},{"content":"The developers of <ph id=\"ph1\">`Utility.dll`</ph> might decide to refactor the assembly, and in the process they might move the <ph id=\"ph2\">`Example`</ph> class to another assembly.","pos":[592,738],"source":" The developers of `Utility.dll` might decide to refactor the assembly, and in the process they might move the `Example` class to another assembly."},{"content":"If the old version of <ph id=\"ph1\">`Utility.dll`</ph> is replaced by the new version of <ph id=\"ph2\">`Utility.dll`</ph> and its companion assembly, the application that uses the <ph id=\"ph3\">`Example`</ph> class fails because it cannot locate the <ph id=\"ph4\">`Example`</ph> class in the new version of <ph id=\"ph5\">`Utility.dll`</ph>.","pos":[739,984],"source":" If the old version of `Utility.dll` is replaced by the new version of `Utility.dll` and its companion assembly, the application that uses the `Example` class fails because it cannot locate the `Example` class in the new version of `Utility.dll`."},{"content":"The developers of <ph id=\"ph1\">`Utility.dll`</ph> can avoid this by forwarding requests for the <ph id=\"ph2\">`Example`</ph> class, using the <ph id=\"ph3\">&lt;xref:System.Runtime.CompilerServices.TypeForwardedToAttribute&gt;</ph> attribute.","pos":[991,1170],"source":"The developers of `Utility.dll` can avoid this by forwarding requests for the `Example` class, using the <xref:System.Runtime.CompilerServices.TypeForwardedToAttribute> attribute."},{"content":"If the attribute has been applied to the new version of <ph id=\"ph1\">`Utility.dll`</ph>, requests for the <ph id=\"ph2\">`Example`</ph> class are forwarded to the assembly that now contains the class.","pos":[1171,1333],"source":" If the attribute has been applied to the new version of `Utility.dll`, requests for the `Example` class are forwarded to the assembly that now contains the class."},{"content":"The existing application continues to function normally, without recompilation.","pos":[1334,1413]},{"pos":[1421,1795],"content":"[!NOTE]\n In the .NET Framework version 2.0, you cannot forward types from assemblies written in Visual Basic. However, an application written in Visual Basic can consume forwarded types. That is, if the application uses an assembly coded in C# or C++, and a type from that assembly is forwarded to another assembly, the Visual Basic application can use the forwarded type.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 2.0, you cannot forward types from assemblies written in Visual Basic. However, an application written in Visual Basic can consume forwarded types. That is, if the application uses an assembly coded in C# or C++, and a type from that assembly is forwarded to another assembly, the Visual Basic application can use the forwarded type.","pos":[9,372],"nodes":[{"content":"In the .NET Framework version 2.0, you cannot forward types from assemblies written in Visual Basic.","pos":[0,100]},{"content":"However, an application written in Visual Basic can consume forwarded types.","pos":[101,177]},{"content":"That is, if the application uses an assembly coded in C# or C++, and a type from that assembly is forwarded to another assembly, the Visual Basic application can use the forwarded type.","pos":[178,363]}]}]},{"pos":[1804,1820],"content":"Forwarding Types","linkify":"Forwarding Types","nodes":[{"content":"Forwarding Types","pos":[0,16]}]},{"content":"There are four steps to forwarding a type:","pos":[1824,1866]},{"content":"Move the source code for the type from the original assembly to the destination assembly.","pos":[1876,1965]},{"content":"In the assembly where the type used to be located, add a <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.TypeForwardedToAttribute&gt;</ph> for the type that was moved.","pos":[1975,2124],"source":"In the assembly where the type used to be located, add a <xref:System.Runtime.CompilerServices.TypeForwardedToAttribute> for the type that was moved."},{"content":"The following code shows the attribute for a type named <ph id=\"ph1\">`Example`</ph> that was moved.","pos":[2125,2206],"source":" The following code shows the attribute for a type named `Example` that was moved."},{"content":"Compile the assembly that now contains the type.","pos":[2389,2437]},{"content":"Recompile the assembly where the type used to be located, with a reference to the assembly that now contains the type.","pos":[2447,2565]},{"content":"For example, if you are compiling a C# file from the command line, use the <bpt id=\"p1\">[</bpt>/reference (C# Compiler Options)<ept id=\"p1\">](~/docs/csharp/language-reference/compiler-options/reference-compiler-option.md)</ept> option to specify the assembly that contains the type.","pos":[2566,2810],"source":" For example, if you are compiling a C# file from the command line, use the [/reference (C# Compiler Options)](~/docs/csharp/language-reference/compiler-options/reference-compiler-option.md) option to specify the assembly that contains the type."},{"content":"In C++, use the <bpt id=\"p1\">[</bpt>#using<ept id=\"p1\">](/cpp/preprocessor/hash-using-directive-cpp)</ept> directive in the source file to specify the assembly that contains the type.","pos":[2811,2956],"source":" In C++, use the [#using](/cpp/preprocessor/hash-using-directive-cpp) directive in the source file to specify the assembly that contains the type."},{"pos":[2965,2973],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3043,3108],"content":"<bpt id=\"p1\">[</bpt>Type Forwarding (C++/CLI)<ept id=\"p1\">](/cpp/windows/type-forwarding-cpp-cli)</ept>","source":"[Type Forwarding (C++/CLI)](/cpp/windows/type-forwarding-cpp-cli)"},{"pos":[3111,3173],"content":"<bpt id=\"p1\">[</bpt>#using Directive<ept id=\"p1\">](/cpp/preprocessor/hash-using-directive-cpp)</ept>","source":"[#using Directive](/cpp/preprocessor/hash-using-directive-cpp)"}]}