{"content":"---\ntitle: \"ParamArray (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.ParamArray\"\n  - \"ParamArray\"\nhelpviewer_keywords: \n  - \"ParamArray keyword [Visual Basic]\"\n  - \"ParamArray keyword [Visual Basic], syntax\"\nms.assetid: a5f18789-92bd-488f-9c7e-cf3719963635\n---\n# ParamArray (Visual Basic)\nSpecifies that a procedure parameter takes an optional array of elements of the specified type. `ParamArray` can be used only on the last parameter of a parameter list.  \n  \n## Remarks  \n `ParamArray` allows you to pass an arbitrary number of arguments to the procedure. A `ParamArray` parameter is always declared using [ByVal](../../../visual-basic/language-reference/modifiers/byval.md).  \n  \n You can supply one or more arguments to a `ParamArray` parameter by passing an array of the appropriate data type, a comma-separated list of values, or nothing at all. For details, see \"Calling a ParamArray\" in [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md).  \n  \n> [!IMPORTANT]\n>  Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application. If you accept a parameter array from the calling code, you should test its length and take appropriate steps if it is too large for your application.  \n  \n The `ParamArray` modifier can be used in these contexts:  \n  \n [Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See also\n\n- [Keywords](../../../visual-basic/language-reference/keywords/index.md)\n- [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)\n","nodes":[{"pos":[4,268],"embed":true,"restype":"x-metadata","content":"title: \"ParamArray (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.ParamArray\"\n  - \"ParamArray\"\nhelpviewer_keywords: \n  - \"ParamArray keyword [Visual Basic]\"\n  - \"ParamArray keyword [Visual Basic], syntax\"\nms.assetid: a5f18789-92bd-488f-9c7e-cf3719963635","nodes":[{"content":"ParamArray (Visual Basic)","nodes":[{"pos":[0,25],"content":"ParamArray (Visual Basic)","nodes":[{"content":"ParamArray (Visual Basic)","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[275,300],"content":"ParamArray (Visual Basic)","linkify":"ParamArray (Visual Basic)","nodes":[{"content":"ParamArray (Visual Basic)","pos":[0,25]}]},{"content":"Specifies that a procedure parameter takes an optional array of elements of the specified type.","pos":[301,396]},{"content":"<ph id=\"ph1\">`ParamArray`</ph> can be used only on the last parameter of a parameter list.","pos":[397,469],"source":"`ParamArray` can be used only on the last parameter of a parameter list."},{"pos":[478,485],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`ParamArray`</ph> allows you to pass an arbitrary number of arguments to the procedure.","pos":[489,571],"source":"`ParamArray` allows you to pass an arbitrary number of arguments to the procedure."},{"content":"A <ph id=\"ph1\">`ParamArray`</ph> parameter is always declared using <bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/byval.md)</ept>.","pos":[572,691],"source":" A `ParamArray` parameter is always declared using [ByVal](../../../visual-basic/language-reference/modifiers/byval.md)."},{"content":"You can supply one or more arguments to a <ph id=\"ph1\">`ParamArray`</ph> parameter by passing an array of the appropriate data type, a comma-separated list of values, or nothing at all.","pos":[698,865],"source":"You can supply one or more arguments to a `ParamArray` parameter by passing an array of the appropriate data type, a comma-separated list of values, or nothing at all."},{"content":"For details, see \"Calling a ParamArray\" in <bpt id=\"p1\">[</bpt>Parameter Arrays<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept>.","pos":[866,1018],"source":" For details, see \"Calling a ParamArray\" in [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)."},{"pos":[1026,1331],"content":"[!IMPORTANT]\n Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application. If you accept a parameter array from the calling code, you should test its length and take appropriate steps if it is too large for your application.","leadings":["","> "],"nodes":[{"content":"Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application. If you accept a parameter array from the calling code, you should test its length and take appropriate steps if it is too large for your application.","pos":[14,303],"nodes":[{"content":"Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application.","pos":[0,139]},{"content":"If you accept a parameter array from the calling code, you should test its length and take appropriate steps if it is too large for your application.","pos":[140,289]}]}]},{"pos":[1338,1394],"content":"The <ph id=\"ph1\">`ParamArray`</ph> modifier can be used in these contexts:","source":"The `ParamArray` modifier can be used in these contexts:"},{"pos":[1401,1494],"content":"<bpt id=\"p1\">[</bpt>Declare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept>","source":"[Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)"},{"pos":[1501,1596],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[1603,1698],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[1705,1790],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[1799,1807],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1811,1881],"content":"<bpt id=\"p1\">[</bpt>Keywords<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/index.md)</ept>","source":"[Keywords](../../../visual-basic/language-reference/keywords/index.md)"},{"pos":[1884,1992],"content":"<bpt id=\"p1\">[</bpt>Parameter Arrays<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept>","source":"[Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)"}]}