<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-catch-a-non-cls-exception.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f64a5de3c09b2f270d49a46ed4170c27483e17d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\exceptions\how-to-catch-a-non-cls-exception.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa4114155105a317277a35d632fb299374d147e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e3f73a0dcd013a8e81d01aabb0143f207c0f3e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Catch a non-CLS Exception</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Catch a non-CLS Exception</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Some .NET languages, including C++/CLI, allow objects to throw exceptions that do not derive from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Such exceptions are called <bpt id="p1">*</bpt>non-CLS exceptions<ept id="p1">*</ept> or <bpt id="p2">*</bpt>non-Exceptions<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In C# you cannot throw non-CLS exceptions, but you can catch them in two ways:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Within a <ph id="ph1">`catch (RuntimeWrappedException e)`</ph> block.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By default, a Visual C# assembly catches non-CLS exceptions as wrapped exceptions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use this method if you need access to the original exception, which can be accessed through the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The procedure later in this topic explains how to catch exceptions in this manner.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Within a general catch block (a catch block without an exception type specified) that is put after all other <ph id="ph1">`catch`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use this method when you want to perform some action (such as writing to a log file) in response to non-CLS exceptions, and you do not need access to the exception information.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By default the common language runtime wraps all exceptions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To disable this behavior, add this assembly-level attribute to your code, typically in the AssemblyInfo.cs file: <ph id="ph1">`[assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To catch a non-CLS exception</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Within a <ph id="ph1">`catch(RuntimeWrappedException e)`</ph> block, access the original exception through the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows how to catch a non-CLS exception that was thrown from a class library written in C++/CLI.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that in this example, the C# client code knows in advance that the exception type being thrown is a <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can cast the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property back its original type as long as that type is accessible from your code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions and Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>