{"content":"---\ntitle: \"ICLRTask::Reset Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICLRTask.Reset\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRTask::Reset\"\nhelpviewer_keywords: \n  - \"ICLRTask::Reset method [.NET Framework hosting]\"\n  - \"Reset method, ICLRTask interface [.NET Framework hosting]\"\nms.assetid: 1bfb5d3a-0ffd-4bb4-9bf6-aec00cb675b7\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# ICLRTask::Reset Method\nInforms the common language runtime (CLR) that the host has completed a task, and enables the CLR to reuse the current [ICLRTask](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md) instance to represent another task.  \n  \n## Syntax  \n  \n```  \nHRESULT Reset (  \n    [in] BOOL fFull  \n);  \n```  \n  \n## Parameters  \n `fFull`  \n [in] `true`, if the runtime should reset all thread-related static values in addition to the security and locale information related to the current `ICLRTask` instance; otherwise, `false`.  \n  \n If the value is `true`, the runtime resets data that was stored using <xref:System.Threading.Thread.AllocateDataSlot%2A> or <xref:System.Threading.Thread.AllocateNamedDataSlot%2A>.  \n  \n## Return Value  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|S_OK|`Reset` returned successfully.|  \n|HOST_E_CLRNOTAVAILABLE|The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call. successfully|  \n|HOST_E_TIMEOUT|The call timed out.|  \n|HOST_E_NOT_OWNER|The caller does not own the lock.|  \n|HOST_E_ABANDONED|An event was canceled while a blocked thread or fiber was waiting on it.|  \n|E_FAIL|An unknown catastrophic failure occurred. When a method returns E_FAIL, the CLR is no longer usable within the process. Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.|  \n  \n## Remarks  \n The CLR can recycle previously created `ICLRTask` instances to avoid the overhead of repeatedly creating new instances every time it needs a fresh task. The host enables this feature by calling `ICLRTask::Reset` instead of [ICLRTask::ExitTask](../../../../docs/framework/unmanaged-api/hosting/iclrtask-exittask-method.md) when it has completed a task. The following list summarizes the normal life cycle of an `ICLRTask` instance:  \n  \n1.  The runtime creates a new `ICLRTask` instance.  \n  \n2.  The runtime calls [IHostTaskManager::GetCurrentTask](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-getcurrenttask-method.md) to get a reference to the current host task.  \n  \n3.  The runtime calls [IHostTask::SetCLRTask](../../../../docs/framework/unmanaged-api/hosting/ihosttask-setclrtask-method.md) to associate the new instance with the host task.  \n  \n4.  The task executes and completes.  \n  \n5.  The host destroys the task by calling `ICLRTask::ExitTask`.  \n  \n `Reset` alters this scenario in two ways. In step 5 above, the host calls `Reset` to reset the task to a clean state, and then decouples the `ICLRTask` instance from its associated [IHostTask](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md) instance. If desired, the host can also cache the `IHostTask` instance for reuse. In step 1 above, the runtime pulls a recycled `ICLRTask` from the cache instead of creating a new instance.  \n  \n This approach works well when the host also has a pool of reusable worker tasks. When the host destroys one of its `IHostTask` instances, it destroys the corresponding `ICLRTask` by calling `ExitTask`.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** MSCorEE.h  \n  \n **Library:** Included as a resource in MSCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See also\n\n- [ICLRTask Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md)\n- [ICLRTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md)\n- [IHostTask Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)\n- [IHostTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)\n","nodes":[{"pos":[4,434],"embed":true,"restype":"x-metadata","content":"title: \"ICLRTask::Reset Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICLRTask.Reset\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRTask::Reset\"\nhelpviewer_keywords: \n  - \"ICLRTask::Reset method [.NET Framework hosting]\"\n  - \"Reset method, ICLRTask interface [.NET Framework hosting]\"\nms.assetid: 1bfb5d3a-0ffd-4bb4-9bf6-aec00cb675b7\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"ICLRTask::Reset Method","nodes":[{"pos":[0,22],"content":"ICLRTask::Reset Method","nodes":[{"content":"ICLRTask::Reset Method","pos":[0,22]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[441,463],"content":"ICLRTask::Reset Method","linkify":"ICLRTask::Reset Method","nodes":[{"content":"ICLRTask::Reset Method","pos":[0,22]}]},{"pos":[464,701],"content":"Informs the common language runtime (CLR) that the host has completed a task, and enables the CLR to reuse the current <bpt id=\"p1\">[</bpt>ICLRTask<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md)</ept> instance to represent another task.","source":"Informs the common language runtime (CLR) that the host has completed a task, and enables the CLR to reuse the current [ICLRTask](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md) instance to represent another task."},{"pos":[710,716],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[785,795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`true`</ph>, if the runtime should reset all thread-related static values in addition to the security and locale information related to the current <ph id=\"ph2\">`ICLRTask`</ph> instance; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[810,998],"source":"[in] `true`, if the runtime should reset all thread-related static values in addition to the security and locale information related to the current `ICLRTask` instance; otherwise, `false`."},{"pos":[1005,1185],"content":"If the value is <ph id=\"ph1\">`true`</ph>, the runtime resets data that was stored using <ph id=\"ph2\">&lt;xref:System.Threading.Thread.AllocateDataSlot%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph>.","source":"If the value is `true`, the runtime resets data that was stored using <xref:System.Threading.Thread.AllocateDataSlot%2A> or <xref:System.Threading.Thread.AllocateNamedDataSlot%2A>."},{"pos":[1194,1206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"HRESULT","pos":[1213,1220]},{"content":"Description","pos":[1221,1232]},{"content":"S_OK","pos":[1273,1277]},{"pos":[1278,1308],"content":"<ph id=\"ph1\">`Reset`</ph> returned successfully.","source":"`Reset` returned successfully."},{"content":"HOST_E_CLRNOTAVAILABLE","pos":[1313,1335]},{"content":"The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call.","pos":[1336,1461]},{"content":"successfully","pos":[1462,1474]},{"content":"HOST_E_TIMEOUT","pos":[1479,1493]},{"content":"The call timed out.","pos":[1494,1513]},{"content":"HOST_E_NOT_OWNER","pos":[1518,1534]},{"content":"The caller does not own the lock.","pos":[1535,1568]},{"content":"HOST_E_ABANDONED","pos":[1573,1589]},{"content":"An event was canceled while a blocked thread or fiber was waiting on it.","pos":[1590,1662]},{"content":"E_FAIL","pos":[1667,1673]},{"content":"An unknown catastrophic failure occurred.","pos":[1674,1715]},{"content":"When a method returns E_FAIL, the CLR is no longer usable within the process.","pos":[1716,1793]},{"content":"Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.","pos":[1794,1860]},{"pos":[1870,1877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The CLR can recycle previously created <ph id=\"ph1\">`ICLRTask`</ph> instances to avoid the overhead of repeatedly creating new instances every time it needs a fresh task.","pos":[1881,2033],"source":"The CLR can recycle previously created `ICLRTask` instances to avoid the overhead of repeatedly creating new instances every time it needs a fresh task."},{"content":"The host enables this feature by calling <ph id=\"ph1\">`ICLRTask::Reset`</ph> instead of <bpt id=\"p1\">[</bpt>ICLRTask::ExitTask<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-exittask-method.md)</ept> when it has completed a task.","pos":[2034,2232],"source":" The host enables this feature by calling `ICLRTask::Reset` instead of [ICLRTask::ExitTask](../../../../docs/framework/unmanaged-api/hosting/iclrtask-exittask-method.md) when it has completed a task."},{"content":"The following list summarizes the normal life cycle of an <ph id=\"ph1\">`ICLRTask`</ph> instance:","pos":[2233,2311],"source":" The following list summarizes the normal life cycle of an `ICLRTask` instance:"},{"pos":[2321,2367],"content":"The runtime creates a new <ph id=\"ph1\">`ICLRTask`</ph> instance.","source":"The runtime creates a new `ICLRTask` instance."},{"pos":[2377,2566],"content":"The runtime calls <bpt id=\"p1\">[</bpt>IHostTaskManager::GetCurrentTask<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-getcurrenttask-method.md)</ept> to get a reference to the current host task.","source":"The runtime calls [IHostTaskManager::GetCurrentTask](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-getcurrenttask-method.md) to get a reference to the current host task."},{"pos":[2576,2748],"content":"The runtime calls <bpt id=\"p1\">[</bpt>IHostTask::SetCLRTask<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttask-setclrtask-method.md)</ept> to associate the new instance with the host task.","source":"The runtime calls [IHostTask::SetCLRTask](../../../../docs/framework/unmanaged-api/hosting/ihosttask-setclrtask-method.md) to associate the new instance with the host task."},{"content":"The task executes and completes.","pos":[2758,2790]},{"pos":[2800,2859],"content":"The host destroys the task by calling <ph id=\"ph1\">`ICLRTask::ExitTask`</ph>.","source":"The host destroys the task by calling `ICLRTask::ExitTask`."},{"content":"<ph id=\"ph1\">`Reset`</ph> alters this scenario in two ways.","pos":[2866,2907],"source":"`Reset` alters this scenario in two ways."},{"content":"In step 5 above, the host calls <ph id=\"ph1\">`Reset`</ph> to reset the task to a clean state, and then decouples the <ph id=\"ph2\">`ICLRTask`</ph> instance from its associated <bpt id=\"p1\">[</bpt>IHostTask<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)</ept> instance.","pos":[2908,3141],"source":" In step 5 above, the host calls `Reset` to reset the task to a clean state, and then decouples the `ICLRTask` instance from its associated [IHostTask](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md) instance."},{"content":"If desired, the host can also cache the <ph id=\"ph1\">`IHostTask`</ph> instance for reuse.","pos":[3142,3213],"source":" If desired, the host can also cache the `IHostTask` instance for reuse."},{"content":"In step 1 above, the runtime pulls a recycled <ph id=\"ph1\">`ICLRTask`</ph> from the cache instead of creating a new instance.","pos":[3214,3321],"source":" In step 1 above, the runtime pulls a recycled `ICLRTask` from the cache instead of creating a new instance."},{"content":"This approach works well when the host also has a pool of reusable worker tasks.","pos":[3328,3408]},{"content":"When the host destroys one of its <ph id=\"ph1\">`IHostTask`</ph> instances, it destroys the corresponding <ph id=\"ph2\">`ICLRTask`</ph> by calling <ph id=\"ph3\">`ExitTask`</ph>.","pos":[3409,3529],"source":" When the host destroys one of its `IHostTask` instances, it destroys the corresponding `ICLRTask` by calling `ExitTask`."},{"pos":[3538,3550],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3554,3658],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3665,3686],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> MSCorEE.h","source":"**Header:** MSCorEE.h"},{"pos":[3693,3743],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Included as a resource in MSCorEE.dll","source":"**Library:** Included as a resource in MSCorEE.dll"},{"pos":[3750,3858],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3867,3875],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3879,3971],"content":"<bpt id=\"p1\">[</bpt>ICLRTask Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md)</ept>","source":"[ICLRTask Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md)"},{"pos":[3974,4080],"content":"<bpt id=\"p1\">[</bpt>ICLRTaskManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md)</ept>","source":"[ICLRTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md)"},{"pos":[4083,4177],"content":"<bpt id=\"p1\">[</bpt>IHostTask Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)</ept>","source":"[IHostTask Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)"},{"pos":[4180,4288],"content":"<bpt id=\"p1\">[</bpt>IHostTaskManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)</ept>","source":"[IHostTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)"}]}