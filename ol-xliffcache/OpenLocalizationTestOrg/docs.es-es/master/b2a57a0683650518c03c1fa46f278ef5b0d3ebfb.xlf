<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2a57a0683650518c03c1fa46f278ef5b0d3ebfb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\building-console-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21bf20459ac6af394eda932c519334a7d5795f9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">672fa2be260f69eb1a04b4aa0bab1b6693d05d49</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Building Console Applications in the .NET Framework | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Building Console Applications in the .NET Framework</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applications in the .NET Framework can use the <ph id="ph1">&lt;xref:System.Console?displayProperty=fullName&gt;</ph> class to read characters from and write characters to the console.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Data from the console is read from the standard input stream, data to the console is written to the standard output stream, and error data to the console is written to the standard error output stream.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These streams are automatically associated with the console when the application starts and are presented as the <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Console.Error%2A&gt;</ph> properties, respectively.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref:System.Console.In%2A?displayProperty=fullName&gt;</ph> property is a <ph id="ph2">&lt;xref:System.IO.TextReader?displayProperty=fullName&gt;</ph> object, whereas the values of the <ph id="ph3">&lt;xref:System.Console.Out%2A?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Console.Error%2A?displayProperty=fullName&gt;</ph> properties are <ph id="ph5">&lt;xref:System.IO.TextWriter?displayProperty=fullName&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can associate these properties with streams that do not represent the console, making it possible for you to point the stream to a different location for input or output.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, you can redirect the output to a file by setting the <ph id="ph1">&lt;xref:System.Console.Out%2A?displayProperty=fullName&gt;</ph> property to a <ph id="ph2">&lt;xref:System.IO.StreamWriter?displayProperty=fullName&gt;</ph>, which encapsulates a <ph id="ph3">&lt;xref:System.IO.FileStream?displayProperty=fullName&gt;</ph> by means of the <ph id="ph4">&lt;xref:System.Console.SetOut%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Console.In%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=fullName&gt;</ph> properties do not need to refer to the same stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about building console applications, including examples in C#, Visual Basic, and C++, see the documentation for the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the console does not exist, as in a Windows-based application, output written to the standard output stream will not be visible, because there is no console to write the information to.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Writing information to an inaccessible console does not cause an exception to be raised.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Alternately, to enable the console for reading and writing within a Windows-based application that is developed using Visual Studio, open the project's <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> dialog box, click the <bpt id="p2">**</bpt>Application<ept id="p2">**</ept> tab, and set the <bpt id="p3">**</bpt>Application type<ept id="p3">**</ept> to <bpt id="p4">**</bpt>Console Application<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Console applications lack a message pump that starts by default.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, console calls to Microsoft Win32 timers might fail.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>System.Console<ept id="p1">**</ept> class has methods that can read individual characters or entire lines from the console.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Other methods convert data and format strings, and then write the formatted strings to the console.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information on formatting strings, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](../../docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Formatting Types<ept id="p1">](../../docs/standard/base-types/formatting-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>