{"content":"---\ntitle: \"Named and Optional Arguments - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"namedParameter_CSharpKeyword\"\n  - \"cs_namedParameter\"\nhelpviewer_keywords: \n  - \"parameters [C#], named\"\n  - \"named arguments [C#]\"\n  - \"arguments [C#], named\"\n  - \"optional arguments [C#]\"\n  - \"arguments [C#], optional\"\n  - \"parameters [C#], optional\"\n  - \"named and optional arguments [C#]\"\nms.assetid: 839c960c-c2dc-4d05-af4d-ca5428e54008\n---\n# Named and Optional Arguments (C# Programming Guide)\n[!INCLUDE[csharp_dev10_long](~/includes/csharp-dev10-long-md.md)] introduces named and optional arguments. *Named arguments* enable you to specify an argument for a particular parameter by associating the argument with the parameter's name rather than with the parameter's position in the parameter list. *Optional arguments* enable you to omit arguments for some parameters. Both techniques can be used with methods, indexers, constructors, and delegates.  \n  \n When you use named and optional arguments, the arguments are evaluated in the order in which they appear in the argument list, not the parameter list.  \n  \n Named and optional parameters, when used together, enable you to supply arguments for only a few parameters from a list of optional parameters. This capability greatly facilitates calls to COM interfaces such as the Microsoft Office Automation APIs.  \n  \n## Named Arguments  \n Named arguments free you from the need to remember or to look up the order of parameters in the parameter lists of called methods. The parameter for each argument can be specified by parameter name. For example, a function that prints order details (such as, seller name, order number & product name) can be called in the standard way by sending arguments by position, in the order defined by the function.\n  \n `PrintOrderDetails(\"Gift Shop\", 31, \"Red Mug\");`\n  \n If you do not remember the order of the parameters but know their names, you can send the arguments in any order.  \n  \n `PrintOrderDetails(orderNum: 31, productName: \"Red Mug\", sellerName: \"Gift Shop\");`\n  \n `PrintOrderDetails(productName: \"Red Mug\", sellerName: \"Gift Shop\", orderNum: 31);`\n  \n Named arguments also improve the readability of your code by identifying what each argument represents. In the example method below, the `sellerName` cannot be null or white space. As both `sellerName` and `productName` are string types, instead of sending arguments by position, it makes sense to use named arguments to disambiguate the two and reduce confusion for anyone reading the code.\n  \n Named arguments, when used with positional arguments, are valid as long as \n\n- they're not followed by any positional arguments, or\n\n `PrintOrderDetails(\"Gift Shop\", 31, productName: \"Red Mug\");`\n\n- _starting with C# 7.2_, they're used in the correct position. In the example below, the parameter `orderNum` is in the correct position but isn't explicitly named.\n\n `PrintOrderDetails(sellerName: \"Gift Shop\", 31, productName: \"Red Mug\");`\n  \n However, out-of-order named arguments are invalid if they're followed by positional arguments.\n\n ```csharp\n // This generates CS1738: Named argument specifications must appear after all fixed arguments have been specified.\n PrintOrderDetails(productName: \"Red Mug\", 31, \"Gift Shop\");\n ```\n  \n## Example  \n The following code implements the examples from this section along with some additional ones.  \n  \n [!code-csharp[csProgGuideNamedAndOptional#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguidenamedandoptional/cs/program.cs#1)]  \n  \n## Optional Arguments  \n The definition of a method, constructor, indexer, or delegate can specify that its parameters are required or that they are optional. Any call must provide arguments for all required parameters, but can omit arguments for optional parameters.  \n  \n Each optional parameter has a default value as part of its definition. If no argument is sent for that parameter, the default value is used. A default value must be one of the following types of expressions:  \n  \n-   a constant expression;  \n  \n-   an expression of the form `new ValType()`, where `ValType` is a value type, such as an [enum](../../../csharp/language-reference/keywords/enum.md) or a [struct](../../../csharp/programming-guide/classes-and-structs/structs.md);  \n  \n-   an expression of the form [default(ValType)](../../../csharp/programming-guide/statements-expressions-operators/default-value-expressions.md),  where `ValType` is a value type.  \n  \n Optional parameters are defined at the end of the parameter list, after any required parameters. If the caller provides an argument for any one of a succession of optional parameters, it must provide arguments for all preceding optional parameters. Comma-separated gaps in the argument list are not supported. For example, in the following code, instance method `ExampleMethod` is defined with one required and two optional parameters.  \n  \n [!code-csharp[csProgGuideNamedAndOptional#15](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguidenamedandoptional/cs/optional.cs#15)]  \n  \n The following call to `ExampleMethod` causes a compiler error, because an argument is provided for the third parameter but not for the second.  \n  \n `//anExample.ExampleMethod(3, ,4);`  \n  \n However, if you know the name of the third parameter, you can use a named argument to accomplish the task.  \n  \n `anExample.ExampleMethod(3, optionalint: 4);`  \n  \n IntelliSense uses brackets to indicate optional parameters, as shown in the following illustration:  \n  \n ![Screenshot showing IntelliSense quick info for the ExampleMethod method.](./media/named-and-optional-arguments/optional-examplemethod-parameters.png)  \n  \n> [!NOTE]\n>  You can also declare optional parameters by using the .NET <xref:System.Runtime.InteropServices.OptionalAttribute> class. `OptionalAttribute` parameters do not require a default value.  \n  \n## Example  \n In the following example, the constructor for `ExampleClass` has one parameter, which is optional. Instance method `ExampleMethod` has one required parameter, `required`, and two optional parameters, `optionalstr` and `optionalint`. The code in `Main` shows the different ways in which the constructor and method can be invoked.  \n  \n [!code-csharp[csProgGuideNamedAndOptional#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguidenamedandoptional/cs/optional.cs#2)]  \n  \n## COM Interfaces  \n Named and optional arguments, along with support for dynamic objects and other enhancements, greatly improve interoperability with COM APIs, such as Office Automation APIs.  \n  \n For example, the <xref:Microsoft.Office.Interop.Excel.Range.AutoFormat%2A> method in the Microsoft Office Excel <xref:Microsoft.Office.Interop.Excel.Range> interface has seven parameters, all of which are optional. These parameters are shown in the following illustration:  \n  \n ![Screenshot showing IntelliSense quick info for the AutoFormat method.](./media/named-and-optional-arguments/autoformat-method-parameters.png)  \n  \n In C# 3.0 and earlier versions, an argument is required for each parameter, as shown in the following example.  \n  \n [!code-csharp[csProgGuideNamedAndOptional#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguidenamedandoptional/cs/namedandoptcom.cs#3)]  \n  \n However, you can greatly simplify the call to `AutoFormat` by using named and optional arguments, introduced in C# 4.0. Named and optional arguments enable you to omit the argument for an optional parameter if you do not want to change the parameter's default value. In the following call, a value is specified for only one of the seven parameters.  \n  \n [!code-csharp[csProgGuideNamedAndOptional#13](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguidenamedandoptional/cs/namedandoptcom.cs#13)]  \n  \n For more information and examples, see [How to: Use Named and Optional Arguments in Office Programming](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md) and [How to: Access Office Interop Objects by Using Visual C# Features](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md).  \n  \n## Overload Resolution  \n Use of named and optional arguments affects overload resolution in the following ways:  \n  \n-   A method, indexer, or constructor is a candidate for execution if each of its parameters either is optional or corresponds, by name or by position, to a single argument in the calling statement, and that argument can be converted to the type of the parameter.  \n  \n-   If more than one candidate is found, overload resolution rules for preferred conversions are applied to the arguments that are explicitly specified. Omitted arguments for optional parameters are ignored.  \n  \n-   If two candidates are judged to be equally good, preference goes to a candidate that does not have optional parameters for which arguments were omitted in the call. This is a consequence of a general preference in overload resolution for candidates that have fewer parameters.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## See also\n\n- [How to: Use Named and Optional Arguments in Office Programming](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)\n- [Using Type dynamic](../../../csharp/programming-guide/types/using-type-dynamic.md)\n- [Using Constructors](../../../csharp/programming-guide/classes-and-structs/using-constructors.md)\n- [Using Indexers](../../../csharp/programming-guide/indexers/using-indexers.md)\n","nodes":[{"pos":[4,465],"embed":true,"restype":"x-metadata","content":"title: \"Named and Optional Arguments - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"namedParameter_CSharpKeyword\"\n  - \"cs_namedParameter\"\nhelpviewer_keywords: \n  - \"parameters [C#], named\"\n  - \"named arguments [C#]\"\n  - \"arguments [C#], named\"\n  - \"optional arguments [C#]\"\n  - \"arguments [C#], optional\"\n  - \"parameters [C#], optional\"\n  - \"named and optional arguments [C#]\"\nms.assetid: 839c960c-c2dc-4d05-af4d-ca5428e54008","nodes":[{"content":"Named and Optional Arguments - C# Programming Guide","nodes":[{"pos":[0,51],"content":"Named and Optional Arguments - C# Programming Guide","nodes":[{"content":"Named and Optional Arguments - C# Programming Guide","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[472,523],"content":"Named and Optional Arguments (C# Programming Guide)","linkify":"Named and Optional Arguments (C# Programming Guide)","nodes":[{"content":"Named and Optional Arguments (C# Programming Guide)","pos":[0,51]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[csharp_dev10_long](~/includes/csharp-dev10-long-md.md)]</ph> introduces named and optional arguments.","pos":[524,630],"source":"[!INCLUDE[csharp_dev10_long](~/includes/csharp-dev10-long-md.md)] introduces named and optional arguments."},{"content":"<bpt id=\"p1\">*</bpt>Named arguments<ept id=\"p1\">*</ept> enable you to specify an argument for a particular parameter by associating the argument with the parameter's name rather than with the parameter's position in the parameter list.","pos":[631,828],"source":"*Named arguments* enable you to specify an argument for a particular parameter by associating the argument with the parameter's name rather than with the parameter's position in the parameter list."},{"content":"<bpt id=\"p1\">*</bpt>Optional arguments<ept id=\"p1\">*</ept> enable you to omit arguments for some parameters.","pos":[829,899],"source":"*Optional arguments* enable you to omit arguments for some parameters."},{"content":"Both techniques can be used with methods, indexers, constructors, and delegates.","pos":[900,980]},{"content":"When you use named and optional arguments, the arguments are evaluated in the order in which they appear in the argument list, not the parameter list.","pos":[987,1137]},{"content":"Named and optional parameters, when used together, enable you to supply arguments for only a few parameters from a list of optional parameters.","pos":[1144,1287]},{"content":"This capability greatly facilitates calls to COM interfaces such as the Microsoft Office Automation APIs.","pos":[1288,1393]},{"pos":[1402,1417],"content":"Named Arguments","linkify":"Named Arguments","nodes":[{"content":"Named Arguments","pos":[0,15]}]},{"content":"Named arguments free you from the need to remember or to look up the order of parameters in the parameter lists of called methods.","pos":[1421,1551]},{"content":"The parameter for each argument can be specified by parameter name.","pos":[1552,1619]},{"content":"For example, a function that prints order details (such as, seller name, order number &amp; product name) can be called in the standard way by sending arguments by position, in the order defined by the function.","pos":[1620,1827],"source":" For example, a function that prints order details (such as, seller name, order number & product name) can be called in the standard way by sending arguments by position, in the order defined by the function."},{"content":"If you do not remember the order of the parameters but know their names, you can send the arguments in any order.","pos":[1885,1998]},{"content":"Named arguments also improve the readability of your code by identifying what each argument represents.","pos":[2181,2284]},{"content":"In the example method below, the <ph id=\"ph1\">`sellerName`</ph> cannot be null or white space.","pos":[2285,2361],"source":" In the example method below, the `sellerName` cannot be null or white space."},{"content":"As both <ph id=\"ph1\">`sellerName`</ph> and <ph id=\"ph2\">`productName`</ph> are string types, instead of sending arguments by position, it makes sense to use named arguments to disambiguate the two and reduce confusion for anyone reading the code.","pos":[2362,2572],"source":" As both `sellerName` and `productName` are string types, instead of sending arguments by position, it makes sense to use named arguments to disambiguate the two and reduce confusion for anyone reading the code."},{"content":"Named arguments, when used with positional arguments, are valid as long as","pos":[2577,2651]},{"content":"they're not followed by any positional arguments, or","pos":[2656,2708]},{"content":"<bpt id=\"p1\">_</bpt>starting with C# 7.2<ept id=\"p1\">_</ept>, they're used in the correct position.","pos":[2776,2837],"source":"_starting with C# 7.2_, they're used in the correct position."},{"content":"In the example below, the parameter <ph id=\"ph1\">`orderNum`</ph> is in the correct position but isn't explicitly named.","pos":[2838,2939],"source":" In the example below, the parameter `orderNum` is in the correct position but isn't explicitly named."},{"content":"However, out-of-order named arguments are invalid if they're followed by positional arguments.","pos":[3020,3114]},{"pos":[3315,3322],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code implements the examples from this section along with some additional ones.","pos":[3326,3419]},{"pos":[3572,3590],"content":"Optional Arguments","linkify":"Optional Arguments","nodes":[{"content":"Optional Arguments","pos":[0,18]}]},{"content":"The definition of a method, constructor, indexer, or delegate can specify that its parameters are required or that they are optional.","pos":[3594,3727]},{"content":"Any call must provide arguments for all required parameters, but can omit arguments for optional parameters.","pos":[3728,3836]},{"content":"Each optional parameter has a default value as part of its definition.","pos":[3843,3913]},{"content":"If no argument is sent for that parameter, the default value is used.","pos":[3914,3983]},{"content":"A default value must be one of the following types of expressions:","pos":[3984,4050]},{"content":"a constant expression;","pos":[4060,4082]},{"pos":[4092,4319],"content":"an expression of the form <ph id=\"ph1\">`new ValType()`</ph>, where <ph id=\"ph2\">`ValType`</ph> is a value type, such as an <bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](../../../csharp/language-reference/keywords/enum.md)</ept> or a <bpt id=\"p2\">[</bpt>struct<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/structs.md)</ept>;","source":"an expression of the form `new ValType()`, where `ValType` is a value type, such as an [enum](../../../csharp/language-reference/keywords/enum.md) or a [struct](../../../csharp/programming-guide/classes-and-structs/structs.md);"},{"pos":[4329,4505],"content":"an expression of the form <bpt id=\"p1\">[</bpt>default(ValType)<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/default-value-expressions.md)</ept>,  where <ph id=\"ph1\">`ValType`</ph> is a value type.","source":"an expression of the form [default(ValType)](../../../csharp/programming-guide/statements-expressions-operators/default-value-expressions.md),  where `ValType` is a value type."},{"content":"Optional parameters are defined at the end of the parameter list, after any required parameters.","pos":[4512,4608]},{"content":"If the caller provides an argument for any one of a succession of optional parameters, it must provide arguments for all preceding optional parameters.","pos":[4609,4760]},{"content":"Comma-separated gaps in the argument list are not supported.","pos":[4761,4821]},{"content":"For example, in the following code, instance method <ph id=\"ph1\">`ExampleMethod`</ph> is defined with one required and two optional parameters.","pos":[4822,4947],"source":" For example, in the following code, instance method `ExampleMethod` is defined with one required and two optional parameters."},{"pos":[5101,5243],"content":"The following call to <ph id=\"ph1\">`ExampleMethod`</ph> causes a compiler error, because an argument is provided for the third parameter but not for the second.","source":"The following call to `ExampleMethod` causes a compiler error, because an argument is provided for the third parameter but not for the second."},{"content":"However, if you know the name of the third parameter, you can use a named argument to accomplish the task.","pos":[5292,5398]},{"content":"IntelliSense uses brackets to indicate optional parameters, as shown in the following illustration:","pos":[5457,5556]},{"content":"Screenshot showing IntelliSense quick info for the ExampleMethod method.","pos":[5565,5637]},{"pos":[5722,5917],"content":"[!NOTE]\n You can also declare optional parameters by using the .NET <xref:System.Runtime.InteropServices.OptionalAttribute> class. `OptionalAttribute` parameters do not require a default value.","leadings":["","> "],"nodes":[{"content":"You can also declare optional parameters by using the .NET <xref:System.Runtime.InteropServices.OptionalAttribute> class. `OptionalAttribute` parameters do not require a default value.","pos":[9,193],"nodes":[{"content":"You can also declare optional parameters by using the .NET <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.OptionalAttribute&gt;</ph> class.","pos":[0,121],"source":"You can also declare optional parameters by using the .NET <xref:System.Runtime.InteropServices.OptionalAttribute> class."},{"content":"<ph id=\"ph1\">`OptionalAttribute`</ph> parameters do not require a default value.","pos":[122,184],"source":"`OptionalAttribute` parameters do not require a default value."}]}]},{"pos":[5926,5933],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, the constructor for <ph id=\"ph1\">`ExampleClass`</ph> has one parameter, which is optional.","pos":[5937,6035],"source":"In the following example, the constructor for `ExampleClass` has one parameter, which is optional."},{"content":"Instance method <ph id=\"ph1\">`ExampleMethod`</ph> has one required parameter, <ph id=\"ph2\">`required`</ph>, and two optional parameters, <ph id=\"ph3\">`optionalstr`</ph> and <ph id=\"ph4\">`optionalint`</ph>.","pos":[6036,6169],"source":" Instance method `ExampleMethod` has one required parameter, `required`, and two optional parameters, `optionalstr` and `optionalint`."},{"content":"The code in <ph id=\"ph1\">`Main`</ph> shows the different ways in which the constructor and method can be invoked.","pos":[6170,6265],"source":" The code in `Main` shows the different ways in which the constructor and method can be invoked."},{"pos":[6419,6433],"content":"COM Interfaces","linkify":"COM Interfaces","nodes":[{"content":"COM Interfaces","pos":[0,14]}]},{"content":"Named and optional arguments, along with support for dynamic objects and other enhancements, greatly improve interoperability with COM APIs, such as Office Automation APIs.","pos":[6437,6609]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:Microsoft.Office.Interop.Excel.Range.AutoFormat%2A&gt;</ph> method in the Microsoft Office Excel <ph id=\"ph2\">&lt;xref:Microsoft.Office.Interop.Excel.Range&gt;</ph> interface has seven parameters, all of which are optional.","pos":[6616,6830],"source":"For example, the <xref:Microsoft.Office.Interop.Excel.Range.AutoFormat%2A> method in the Microsoft Office Excel <xref:Microsoft.Office.Interop.Excel.Range> interface has seven parameters, all of which are optional."},{"content":"These parameters are shown in the following illustration:","pos":[6831,6888]},{"content":"Screenshot showing IntelliSense quick info for the AutoFormat method.","pos":[6897,6966]},{"content":"In C# 3.0 and earlier versions, an argument is required for each parameter, as shown in the following example.","pos":[7045,7155]},{"content":"However, you can greatly simplify the call to <ph id=\"ph1\">`AutoFormat`</ph> by using named and optional arguments, introduced in C# 4.0.","pos":[7313,7432],"source":"However, you can greatly simplify the call to `AutoFormat` by using named and optional arguments, introduced in C# 4.0."},{"content":"Named and optional arguments enable you to omit the argument for an optional parameter if you do not want to change the parameter's default value.","pos":[7433,7579]},{"content":"In the following call, a value is specified for only one of the seven parameters.","pos":[7580,7661]},{"pos":[7821,8200],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>How to: Use Named and Optional Arguments in Office Programming<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Access Office Interop Objects by Using Visual C# Features<ept id=\"p2\">](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)</ept>.","source":"For more information and examples, see [How to: Use Named and Optional Arguments in Office Programming](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md) and [How to: Access Office Interop Objects by Using Visual C# Features](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)."},{"pos":[8209,8228],"content":"Overload Resolution","linkify":"Overload Resolution","nodes":[{"content":"Overload Resolution","pos":[0,19]}]},{"content":"Use of named and optional arguments affects overload resolution in the following ways:","pos":[8232,8318]},{"content":"A method, indexer, or constructor is a candidate for execution if each of its parameters either is optional or corresponds, by name or by position, to a single argument in the calling statement, and that argument can be converted to the type of the parameter.","pos":[8328,8587]},{"content":"If more than one candidate is found, overload resolution rules for preferred conversions are applied to the arguments that are explicitly specified.","pos":[8597,8745]},{"content":"Omitted arguments for optional parameters are ignored.","pos":[8746,8800]},{"content":"If two candidates are judged to be equally good, preference goes to a candidate that does not have optional parameters for which arguments were omitted in the call.","pos":[8810,8974]},{"content":"This is a consequence of a general preference in overload resolution for candidates that have fewer parameters.","pos":[8975,9086]},{"pos":[9095,9120],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[9192,9200],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[9204,9388],"content":"<bpt id=\"p1\">[</bpt>How to: Use Named and Optional Arguments in Office Programming<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)</ept>","source":"[How to: Use Named and Optional Arguments in Office Programming](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)"},{"pos":[9391,9474],"content":"<bpt id=\"p1\">[</bpt>Using Type dynamic<ept id=\"p1\">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept>","source":"[Using Type dynamic](../../../csharp/programming-guide/types/using-type-dynamic.md)"},{"pos":[9477,9574],"content":"<bpt id=\"p1\">[</bpt>Using Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/using-constructors.md)</ept>","source":"[Using Constructors](../../../csharp/programming-guide/classes-and-structs/using-constructors.md)"},{"pos":[9577,9655],"content":"<bpt id=\"p1\">[</bpt>Using Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/using-indexers.md)</ept>","source":"[Using Indexers](../../../csharp/programming-guide/indexers/using-indexers.md)"}]}