{"content":"---\ntitle: \"How to: Label Statements (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"colons (:)\"\n  - \"statements [Visual Basic], labels\"\n  - \": separator character\"\n  - \"Visual Basic code, labeling statements\"\nms.assetid: 38f1ff43-2054-42cb-963b-1998e60c6ed4\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Label Statements (Visual Basic)\nStatement blocks are made up of lines of code delimited by colons. Lines of code preceded by an identifying string or integer are said to be *labeled*. Statement labels are used to mark a line of code to identify it for use with statements such as `On Error Goto`.  \n  \n Labels may be either valid Visual Basic identifiers—such as those that identify programming elements—or integer literals. A label must appear at the beginning of a line of source code and must be followed by a colon, regardless of whether it is followed by a statement on the same line.  \n  \n The compiler identifies labels by checking whether the beginning of the line matches any already-defined identifier. If it does not, the compiler assumes it is a label.  \n  \n Labels have their own declaration space and do not interfere with other identifiers. A label's scope is the body of the method. Label declaration takes precedence in any ambiguous situation.  \n  \n> [!NOTE]\n>  Labels can be used only on executable statements inside methods.  \n  \n### To label a line of code  \n  \n-   Place an identifier, followed by a colon, at the beginning of the line of source code.  \n  \n     For example, the following lines of code are labeled with `Jump` and `120`, respectively:  \n  \n     [!code-vb[VbVbalrStatements#708](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/how-to-label-statements_1.vb)]  \n  \n## See Also  \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)   \n [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)   \n [Program Structure and Code Conventions](../../../visual-basic/programming-guide/program-structure/program-structure-and-code-conventions.md)","nodes":[{"pos":[4,686],"embed":true,"restype":"x-metadata","content":"title: \"How to: Label Statements (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"colons (:)\"\n  - \"statements [Visual Basic], labels\"\n  - \": separator character\"\n  - \"Visual Basic code, labeling statements\"\nms.assetid: 38f1ff43-2054-42cb-963b-1998e60c6ed4\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Label Statements (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,56],"content":"How to: Label Statements (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Label Statements (Visual Basic) | Microsoft Docs","pos":[0,56]}]}],"path":["title"]}],"yml":true},{"pos":[693,732],"content":"How to: Label Statements (Visual Basic)","linkify":"How to: Label Statements (Visual Basic)","nodes":[{"content":"How to: Label Statements (Visual Basic)","pos":[0,39]}]},{"content":"Statement blocks are made up of lines of code delimited by colons.","pos":[733,799]},{"content":"Lines of code preceded by an identifying string or integer are said to be <bpt id=\"p1\">*</bpt>labeled<ept id=\"p1\">*</ept>.","pos":[800,884],"source":" Lines of code preceded by an identifying string or integer are said to be *labeled*."},{"content":"Statement labels are used to mark a line of code to identify it for use with statements such as <ph id=\"ph1\">`On Error Goto`</ph>.","pos":[885,997],"source":" Statement labels are used to mark a line of code to identify it for use with statements such as `On Error Goto`."},{"content":"Labels may be either valid Visual Basic identifiers—such as those that identify programming elements—or integer literals.","pos":[1004,1125]},{"content":"A label must appear at the beginning of a line of source code and must be followed by a colon, regardless of whether it is followed by a statement on the same line.","pos":[1126,1290]},{"content":"The compiler identifies labels by checking whether the beginning of the line matches any already-defined identifier.","pos":[1297,1413]},{"content":"If it does not, the compiler assumes it is a label.","pos":[1414,1465]},{"content":"Labels have their own declaration space and do not interfere with other identifiers.","pos":[1472,1556]},{"content":"A label's scope is the body of the method.","pos":[1557,1599]},{"content":"Label declaration takes precedence in any ambiguous situation.","pos":[1600,1662]},{"pos":[1670,1745],"content":"[!NOTE]\n Labels can be used only on executable statements inside methods.","leadings":["","> "],"nodes":[{"content":"Labels can be used only on executable statements inside methods.","pos":[9,73]}]},{"pos":[1755,1778],"content":"To label a line of code","linkify":"To label a line of code","nodes":[{"content":"To label a line of code","pos":[0,23]}]},{"content":"Place an identifier, followed by a colon, at the beginning of the line of source code.","pos":[1788,1874]},{"pos":[1885,1974],"content":"For example, the following lines of code are labeled with <ph id=\"ph1\">`Jump`</ph> and <ph id=\"ph2\">`120`</ph>, respectively:","source":"For example, the following lines of code are labeled with `Jump` and `120`, respectively:"},{"pos":[2137,2145],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept><ph id=\"ph1\"> </ph>","pos":[2149,2235],"source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md) "},{"content":"<bpt id=\"p1\">[</bpt>Declared Element Names<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept><ph id=\"ph1\"> </ph>","pos":[2239,2367],"source":"[Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md) "},{"content":"<bpt id=\"p1\">[</bpt>Program Structure and Code Conventions<ept id=\"p1\">](../../../visual-basic/programming-guide/program-structure/program-structure-and-code-conventions.md)</ept>","pos":[2371,2512],"source":"[Program Structure and Code Conventions](../../../visual-basic/programming-guide/program-structure/program-structure-and-code-conventions.md)"}]}