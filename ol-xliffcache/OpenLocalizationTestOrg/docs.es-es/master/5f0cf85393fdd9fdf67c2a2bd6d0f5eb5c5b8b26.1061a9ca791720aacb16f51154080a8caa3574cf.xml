{"content":"---\ntitle: \"Windows Communication Foundation Glossary for .NET Framework 4.5 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Windows Communication Foundation [WCF], glossary\"\n  - \"WCF [WCF], glossary\"\nms.assetid: 39cd36f4-8a28-4d0b-a830-98d55c9d30ae\ncaps.latest.revision: 243\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Windows Communication Foundation Glossary for .NET Framework 4.5\nThe following terms are defined for Windows Communication Foundation documentation.  \n  \n## Terms  \n  \n|Term|Definition|  \n|----------|----------------|  \n|address|Specifies the location where messages are received. It is specified as a Uniform Resource Identifier (URI). The URI schema part names the transport mechanism to use to reach the address, such as HTTP and TCP. The hierarchical part of the URI contains a unique location whose format is dependent on the transport mechanism.|  \n|application endpoint|An endpoint exposed by the application and that corresponds to a service contract implemented by the application.|  \n|behavior|A behavior is a component that controls various run-time aspects of a service, an endpoint, a particular operation, or a client. Behaviors are grouped according to scope: common behaviors affect all endpoints globally, service behaviors affect only service-related aspects, endpoint behaviors affect only endpoint-related properties, and operation-level behaviors affect particular operations.|  \n|binding|Defines which communication protocols are used to communicate with WCF services. It is constructed of a set of components called binding elements that stack one on top of the other to create the communication infrastructure.  See endpoint.|  \n|channel|A concrete implementation of a binding element. The binding represents the configuration, and the channel is the implementation associated with that configuration. Therefore, there is a channel associated with each binding element. Channels stack on top of each other to create the concrete implementation of the binding: the channel stack.|  \n|claims-based security|Allows authorized access to protected resources based on claims.|  \n|client application|A client application is a program that exchanges messages with one or more endpoints. The client application begins by creating an instance of a WCF client and calling methods of the WCF client. It is important to note that a single application can be both a client and a service.|  \n|coding|Allows the developer to retain strict control over all components of the service or client, and any settings done through the configuration can be inspected and if needed overridden by the code. Control of an application can be done either through coding, through configuration, or through a combination of both.|  \n|configuration|Configuration has the advantage of allowing someone other than the developer (for example, a network administrator) to set client and service parameters after the code is written and without having to recompile. Configuration not only enables you to set values like endpoint addresses, but also allows further control by enabling you to add endpoints, bindings, and behaviors. Control of an application can be done either through configuration, through coding, or through a combination of both.|  \n|contract|A contract is a specification of support for the particular type of contract that it is. A service contract, for example, is a specification for a group of operations. In WCF, contracts have a hierarchy that is mirrored in the description objects located in the System.ServiceModel.Description namespace. A service contract is the largest contract scope in WCF. Each service operation in a service contract has an operation contract, which specifies the messages -- including fault messages -- the operation can exchange, and in which direction. Each message in an operation has a message contract, a specification for the structure of the SOAP message envelope, and each message contract has a data contract, which specifies the data structures contained in the messages.|  \n|data contract|The data types a service uses must be described in metadata to enable others to interoperate with the service. The descriptions of the data types are known as the data contract, and the types can be used in any part of a message, for example, as parameters or return types. If the service is using only simple types, there is no need to explicitly use data contracts.|  \n|declarative application|An application that is described sufficiently to be created at runtime without running imperative instructions.|  \n|endpoint|Consists of an address, a binding, and a contract used for communicating with a WCF service.|  \n|endpoint address|Enables you to create unique endpoint addresses for each endpoint in a service, or under certain conditions share an address across endpoints.|  \n|fault contract|A fault contract can be associated with a service operation to denote errors that can be returned to the caller. An operation can have zero or more faults associated with it. These errors are SOAP faults that are modeled as exceptions in the programming model. The exception is converted into a SOAP fault that can then be sent to the client.|  \n|hosting|A service must be hosted in some process. A host is an application that controls the lifetime of the service. Services can be self-hosted or managed by an existing hosting process.|  \n|hosting process|A hosting process is an application that is designed to host services. These include Internet Information Services (IIS), Windows Activation Services (WAS), and Windows Services. In these hosted scenarios, the host controls the lifetime of the service. For example, using IIS you can set up a virtual directory that contains the service assembly and configuration file. When a message is received, IIS starts the service and controls its lifetime.|  \n|initiating operation|An operation that is called as the first operation of a new session. Non-initiating operations can be called only after at least one initiating operation has been called.|  \n|instancing model|A service has an instancing model. There are three instancing models: &quot;single,&quot; in which a single CLR object services all the clients; &quot;per call,&quot; in which a new CLR object is created to handle each client call; and &quot;per session,&quot; in which a set of CLR objects are created, one for each separate session. The choice of an instancing model depends on the application requirements and the expected usage pattern of the service.|  \n|message|A message is a self-contained unit of data that may consist of several parts, including a body and headers.|  \n|message contract|A message contact describes the format of a message. For example, it declares whether message elements should go in headers versus the body, what level of security should be applied to what elements of the message, and so on.|  \n|message security mode|Message security mode specifies that security is provided by implementing one or more of the security specifications. Each message contains the necessary mechanisms to provide security during its transit, and to enable the receivers to detect tampering and to decrypt the messages. In this sense, the security is encapsulated within every message, providing end-to-end security across multiple hops. Because security information becomes part of the message, it is also possible to include multiple kinds of credentials with the message (these are referred to as claims). This approach also has the advantage of enabling the message to travel securely over any transport, including multiple transports between its origin and destination. The disadvantage of this approach is the complexity of the cryptographic mechanisms employed, resulting in performance implications.|  \n|metadata|The metadata of a service describes the characteristics of the service that an external entity needs to understand to communicate with the service. Metadata can be consumed by the ServiceModel Metadata Utility Tool (Svcutil.exe) to generate a WCF client and accompanying configuration that a client application can use to interact with the service.  The metadata exposed by the service includes XML schema documents, which define the data contract of the service, and WSDL documents, which describe the methods of the service.  When enabled, metadata for the service is automatically generated by WCF by inspecting the service and its endpoints. To publish metadata from a service, you must explicitly enable the metadata behavior.|  \n|operation contract|An operation contract defines the parameters and return type of an operation. When creating an interface that defines the service contract, you signify an operation contract by applying the T:System.ServiceModel.OperationContractAttribute attribute to each method definition that is part of the contract. The operations can be modeled as taking a single message and returning a single message, or as taking a set of types and returning a type. In the latter case, the system determines the format for the messages that are exchanged for that operation.|  \n|projection|The representation of data on the wire. For example, a SOAP projection sends messages as SOAP envelopes and a Web projection sends messages in JSON format.|  \n|security|Security in WCF includes confidentiality (encryption of messages to prevent eavesdropping), integrity (the means for detection of tampering with the message), authentication (the means for validation of servers and clients), and authorization (the control of access to resources). These functions are provided by either leveraging existing security mechanisms, such as TLS over HTTP (also known as HTTPS), or by implementing one or more of the various WS-* security specifications.|  \n|self-hosted service|A self-hosted service is one that runs within a process application that the developer created. The developer controls its lifetime, sets the properties of the service, opens the service (which sets it into a listening mode), and closes the service.|  \n|service|A program or process that exposes one or more endpoints, with each endpoint exposing one or more operations.|  \n|service contract|The service contract ties together multiple related operations into a single functional unit. The contract can define service-level settings, such as the namespace of the service, a corresponding callback contract, and other such settings. In most cases, the contract is defined by creating an interface in the programming language of your choice and applying the T:System.ServiceModel.ServiceContractAttribute attribute to the interface. The actual service code results by implementing the interface.|  \n|service operation|A service operation is a procedure defined in a service's code that implements the functionality for an operation. This operation is exposed to clients as methods on a WCF client. The method may return a value, and may take an optional number of arguments, or take no arguments, and return no response. For example, an operation that functions as a &quot;Hello&quot; can be used as a notification of a client's presence and to begin a series of operations.|  \n|system-provided bindings|WCF includes a number of system-provided bindings. These are collections of binding elements that are optimized for specific scenarios. For example, the T:System.ServiceModel.WSHttpBinding is designed for interoperability with services that implement various WS-* specifications. These bindings save time by presenting only those options that can be correctly applied to the specific scenario. If one of these bindings does not meet your requirements, you can create your own custom binding.|  \n|terminating operation|An operation that is called as the last message in an existing session. In the default case, WCF recycles the service object and its context after the session with which the service was associated is closed.|  \n|transport security mode|Security can be provided by one of three modes: transport mode, message security mode, and transport with message credential mode. The transport security mode specifies that confidentiality, integrity, and authentication are provided by the transport layer mechanisms (such as HTTPS). When using a transport like HTTPS, this mode has the advantage of being efficient in its performance, and well understood because of its prevalence on the Internet. The disadvantage is that this kind of security is applied separately on each hop in the communication path, making the communication susceptible to a &quot;man in the middle&quot; attack.|  \n|transport with message credential security mode|This mode uses the transport layer to provide confidentiality, authentication, and integrity of the messages, while each of the messages can contain multiple credentials (claims) required by the receivers of the message.|  \n|type converter|A CLR type can be associated with one or more System.ComponentModel.TypeConverter derived types that enable converting instances of the CLR type to and from instances of other types. A type converterr is associated with a CLR type using the System.ComponentModel.TypeConverterAttribute attribute.  A TypeConverterAttribute can be specified directly on the CLR type or on a property. A type converter specified on a property always takes precedence over a type converter specified on the CLR type of the property.|  \n|WCF client|A WCF client is a client-application construct that exposes the service operations as methods (in the .NET Framework programming language of your choice, such as Visual Basic or Visual C#). Any application can host a WCF client, including an application that hosts a service. Therefore, it is possible to create a service that includes WCF clients of other services.  A WCF client can be automatically generated by using the ServiceModel Metadata Utility Tool (Svcutil.exe) and pointing it at a running service that publishes metadata.|  \n|workflow services|A workflow service is a WCF service that is implemented as a workflow. The workflow contains messaging activities that send and/or receive WCF messages.|  \n|WS-*|Shorthand for the growing set of Web Service (WS) specifications, such as WS-Security, WS-ReliableMessaging, and so on, that are implemented in WCF.|  \n|XAML|eXtensible Application Markup Language|  \n|XAML schema|A markup schema used to define custome types in XAML.|","nodes":[{"pos":[12,93],"content":"Windows Communication Foundation Glossary for .NET Framework 4.5 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Windows Communication Foundation Glossary for .NET Framework 4.5 | Microsoft Docs","pos":[0,81]}]},{"pos":[496,560],"content":"Windows Communication Foundation Glossary for .NET Framework 4.5","linkify":"Windows Communication Foundation Glossary for .NET Framework 4.5","nodes":[{"content":"Windows Communication Foundation Glossary for .NET Framework 4.5","pos":[0,64]}]},{"content":"The following terms are defined for Windows Communication Foundation documentation.","pos":[561,644]},{"pos":[653,658],"content":"Terms","linkify":"Terms","nodes":[{"content":"Terms","pos":[0,5]}]},{"content":"Term","pos":[665,669]},{"content":"Definition","pos":[670,680]},{"content":"address","pos":[717,724]},{"content":"Specifies the location where messages are received.","pos":[725,776]},{"content":"It is specified as a Uniform Resource Identifier (URI).","pos":[777,832]},{"content":"The URI schema part names the transport mechanism to use to reach the address, such as HTTP and TCP.","pos":[833,933]},{"content":"The hierarchical part of the URI contains a unique location whose format is dependent on the transport mechanism.","pos":[934,1047]},{"content":"application endpoint","pos":[1052,1072]},{"content":"An endpoint exposed by the application and that corresponds to a service contract implemented by the application.","pos":[1073,1186]},{"content":"behavior","pos":[1191,1199]},{"content":"A behavior is a component that controls various run-time aspects of a service, an endpoint, a particular operation, or a client.","pos":[1200,1328]},{"content":"Behaviors are grouped according to scope: common behaviors affect all endpoints globally, service behaviors affect only service-related aspects, endpoint behaviors affect only endpoint-related properties, and operation-level behaviors affect particular operations.","pos":[1329,1593]},{"content":"binding","pos":[1598,1605]},{"content":"Defines which communication protocols are used to communicate with WCF services.","pos":[1606,1686]},{"content":"It is constructed of a set of components called binding elements that stack one on top of the other to create the communication infrastructure.","pos":[1687,1830]},{"content":"See endpoint.","pos":[1832,1845]},{"content":"channel","pos":[1850,1857]},{"content":"A concrete implementation of a binding element.","pos":[1858,1905]},{"content":"The binding represents the configuration, and the channel is the implementation associated with that configuration.","pos":[1906,2021]},{"content":"Therefore, there is a channel associated with each binding element.","pos":[2022,2089]},{"content":"Channels stack on top of each other to create the concrete implementation of the binding: the channel stack.","pos":[2090,2198]},{"content":"claims-based security","pos":[2203,2224]},{"content":"Allows authorized access to protected resources based on claims.","pos":[2225,2289]},{"content":"client application","pos":[2294,2312]},{"content":"A client application is a program that exchanges messages with one or more endpoints.","pos":[2313,2398]},{"content":"The client application begins by creating an instance of a WCF client and calling methods of the WCF client.","pos":[2399,2507]},{"content":"It is important to note that a single application can be both a client and a service.","pos":[2508,2593]},{"content":"coding","pos":[2598,2604]},{"content":"Allows the developer to retain strict control over all components of the service or client, and any settings done through the configuration can be inspected and if needed overridden by the code.","pos":[2605,2799]},{"content":"Control of an application can be done either through coding, through configuration, or through a combination of both.","pos":[2800,2917]},{"content":"configuration","pos":[2922,2935]},{"content":"Configuration has the advantage of allowing someone other than the developer (for example, a network administrator) to set client and service parameters after the code is written and without having to recompile.","pos":[2936,3147]},{"content":"Configuration not only enables you to set values like endpoint addresses, but also allows further control by enabling you to add endpoints, bindings, and behaviors.","pos":[3148,3312]},{"content":"Control of an application can be done either through configuration, through coding, or through a combination of both.","pos":[3313,3430]},{"content":"contract","pos":[3435,3443]},{"content":"A contract is a specification of support for the particular type of contract that it is.","pos":[3444,3532]},{"content":"A service contract, for example, is a specification for a group of operations.","pos":[3533,3611]},{"content":"In WCF, contracts have a hierarchy that is mirrored in the description objects located in the System.ServiceModel.Description namespace.","pos":[3612,3748]},{"content":"A service contract is the largest contract scope in WCF.","pos":[3749,3805]},{"content":"Each service operation in a service contract has an operation contract, which specifies the messages -- including fault messages -- the operation can exchange, and in which direction.","pos":[3806,3989]},{"content":"Each message in an operation has a message contract, a specification for the structure of the SOAP message envelope, and each message contract has a data contract, which specifies the data structures contained in the messages.","pos":[3990,4216]},{"content":"data contract","pos":[4221,4234]},{"content":"The data types a service uses must be described in metadata to enable others to interoperate with the service.","pos":[4235,4345]},{"content":"The descriptions of the data types are known as the data contract, and the types can be used in any part of a message, for example, as parameters or return types.","pos":[4346,4508]},{"content":"If the service is using only simple types, there is no need to explicitly use data contracts.","pos":[4509,4602]},{"content":"declarative application","pos":[4607,4630]},{"content":"An application that is described sufficiently to be created at runtime without running imperative instructions.","pos":[4631,4742]},{"content":"endpoint","pos":[4747,4755]},{"content":"Consists of an address, a binding, and a contract used for communicating with a WCF service.","pos":[4756,4848]},{"content":"endpoint address","pos":[4853,4869]},{"content":"Enables you to create unique endpoint addresses for each endpoint in a service, or under certain conditions share an address across endpoints.","pos":[4870,5012]},{"content":"fault contract","pos":[5017,5031]},{"content":"A fault contract can be associated with a service operation to denote errors that can be returned to the caller.","pos":[5032,5144]},{"content":"An operation can have zero or more faults associated with it.","pos":[5145,5206]},{"content":"These errors are SOAP faults that are modeled as exceptions in the programming model.","pos":[5207,5292]},{"content":"The exception is converted into a SOAP fault that can then be sent to the client.","pos":[5293,5374]},{"content":"hosting","pos":[5379,5386]},{"content":"A service must be hosted in some process.","pos":[5387,5428]},{"content":"A host is an application that controls the lifetime of the service.","pos":[5429,5496]},{"content":"Services can be self-hosted or managed by an existing hosting process.","pos":[5497,5567]},{"content":"hosting process","pos":[5572,5587]},{"content":"A hosting process is an application that is designed to host services.","pos":[5588,5658]},{"content":"These include Internet Information Services (IIS), Windows Activation Services (WAS), and Windows Services.","pos":[5659,5766]},{"content":"In these hosted scenarios, the host controls the lifetime of the service.","pos":[5767,5840]},{"content":"For example, using IIS you can set up a virtual directory that contains the service assembly and configuration file.","pos":[5841,5957]},{"content":"When a message is received, IIS starts the service and controls its lifetime.","pos":[5958,6035]},{"content":"initiating operation","pos":[6040,6060]},{"content":"An operation that is called as the first operation of a new session.","pos":[6061,6129]},{"content":"Non-initiating operations can be called only after at least one initiating operation has been called.","pos":[6130,6231]},{"content":"instancing model","pos":[6236,6252]},{"content":"A service has an instancing model.","pos":[6253,6287]},{"content":"There are three instancing models: <ph id=\"ph1\">&amp;quot;</ph>single,<ph id=\"ph2\">&amp;quot;</ph> in which a single CLR object services all the clients; <ph id=\"ph3\">&amp;quot;</ph>per call,<ph id=\"ph4\">&amp;quot;</ph> in which a new CLR object is created to handle each client call; and <ph id=\"ph5\">&amp;quot;</ph>per session,<ph id=\"ph6\">&amp;quot;</ph> in which a set of CLR objects are created, one for each separate session.","pos":[6288,6587],"source":" There are three instancing models: &quot;single,&quot; in which a single CLR object services all the clients; &quot;per call,&quot; in which a new CLR object is created to handle each client call; and &quot;per session,&quot; in which a set of CLR objects are created, one for each separate session."},{"content":"The choice of an instancing model depends on the application requirements and the expected usage pattern of the service.","pos":[6588,6708]},{"content":"message","pos":[6713,6720]},{"content":"A message is a self-contained unit of data that may consist of several parts, including a body and headers.","pos":[6721,6828]},{"content":"message contract","pos":[6833,6849]},{"content":"A message contact describes the format of a message.","pos":[6850,6902]},{"content":"For example, it declares whether message elements should go in headers versus the body, what level of security should be applied to what elements of the message, and so on.","pos":[6903,7075]},{"content":"message security mode","pos":[7080,7101]},{"content":"Message security mode specifies that security is provided by implementing one or more of the security specifications.","pos":[7102,7219]},{"content":"Each message contains the necessary mechanisms to provide security during its transit, and to enable the receivers to detect tampering and to decrypt the messages.","pos":[7220,7383]},{"content":"In this sense, the security is encapsulated within every message, providing end-to-end security across multiple hops.","pos":[7384,7501]},{"content":"Because security information becomes part of the message, it is also possible to include multiple kinds of credentials with the message (these are referred to as claims).","pos":[7502,7672]},{"content":"This approach also has the advantage of enabling the message to travel securely over any transport, including multiple transports between its origin and destination.","pos":[7673,7838]},{"content":"The disadvantage of this approach is the complexity of the cryptographic mechanisms employed, resulting in performance implications.","pos":[7839,7971]},{"content":"metadata","pos":[7976,7984]},{"content":"The metadata of a service describes the characteristics of the service that an external entity needs to understand to communicate with the service.","pos":[7985,8132]},{"content":"Metadata can be consumed by the ServiceModel Metadata Utility Tool (Svcutil.exe) to generate a WCF client and accompanying configuration that a client application can use to interact with the service.","pos":[8133,8333]},{"content":"The metadata exposed by the service includes XML schema documents, which define the data contract of the service, and WSDL documents, which describe the methods of the service.","pos":[8335,8511]},{"content":"When enabled, metadata for the service is automatically generated by WCF by inspecting the service and its endpoints.","pos":[8513,8630]},{"content":"To publish metadata from a service, you must explicitly enable the metadata behavior.","pos":[8631,8716]},{"content":"operation contract","pos":[8721,8739]},{"content":"An operation contract defines the parameters and return type of an operation.","pos":[8740,8817]},{"content":"When creating an interface that defines the service contract, you signify an operation contract by applying the T:System.ServiceModel.OperationContractAttribute attribute to each method definition that is part of the contract.","pos":[8818,9044]},{"content":"The operations can be modeled as taking a single message and returning a single message, or as taking a set of types and returning a type.","pos":[9045,9183]},{"content":"In the latter case, the system determines the format for the messages that are exchanged for that operation.","pos":[9184,9292]},{"content":"projection","pos":[9297,9307]},{"content":"The representation of data on the wire.","pos":[9308,9347]},{"content":"For example, a SOAP projection sends messages as SOAP envelopes and a Web projection sends messages in JSON format.","pos":[9348,9463]},{"content":"security","pos":[9468,9476]},{"content":"Security in WCF includes confidentiality (encryption of messages to prevent eavesdropping), integrity (the means for detection of tampering with the message), authentication (the means for validation of servers and clients), and authorization (the control of access to resources).","pos":[9477,9757]},{"content":"These functions are provided by either leveraging existing security mechanisms, such as TLS over HTTP (also known as HTTPS), or by implementing one or more of the various WS-* security specifications.","pos":[9758,9958]},{"content":"self-hosted service","pos":[9963,9982]},{"content":"A self-hosted service is one that runs within a process application that the developer created.","pos":[9983,10078]},{"content":"The developer controls its lifetime, sets the properties of the service, opens the service (which sets it into a listening mode), and closes the service.","pos":[10079,10232]},{"content":"service","pos":[10237,10244]},{"content":"A program or process that exposes one or more endpoints, with each endpoint exposing one or more operations.","pos":[10245,10353]},{"content":"service contract","pos":[10358,10374]},{"content":"The service contract ties together multiple related operations into a single functional unit.","pos":[10375,10468]},{"content":"The contract can define service-level settings, such as the namespace of the service, a corresponding callback contract, and other such settings.","pos":[10469,10614]},{"content":"In most cases, the contract is defined by creating an interface in the programming language of your choice and applying the T:System.ServiceModel.ServiceContractAttribute attribute to the interface.","pos":[10615,10813]},{"content":"The actual service code results by implementing the interface.","pos":[10814,10876]},{"content":"service operation","pos":[10881,10898]},{"content":"A service operation is a procedure defined in a service's code that implements the functionality for an operation.","pos":[10899,11013]},{"content":"This operation is exposed to clients as methods on a WCF client.","pos":[11014,11078]},{"content":"The method may return a value, and may take an optional number of arguments, or take no arguments, and return no response.","pos":[11079,11201]},{"content":"For example, an operation that functions as a <ph id=\"ph1\">&amp;quot;</ph>Hello<ph id=\"ph2\">&amp;quot;</ph> can be used as a notification of a client's presence and to begin a series of operations.","pos":[11202,11355],"source":" For example, an operation that functions as a &quot;Hello&quot; can be used as a notification of a client's presence and to begin a series of operations."},{"content":"system-provided bindings","pos":[11360,11384]},{"content":"WCF includes a number of system-provided bindings.","pos":[11385,11435]},{"content":"These are collections of binding elements that are optimized for specific scenarios.","pos":[11436,11520]},{"content":"For example, the T:System.ServiceModel.WSHttpBinding is designed for interoperability with services that implement various WS-* specifications.","pos":[11521,11664]},{"content":"These bindings save time by presenting only those options that can be correctly applied to the specific scenario.","pos":[11665,11778]},{"content":"If one of these bindings does not meet your requirements, you can create your own custom binding.","pos":[11779,11876]},{"content":"terminating operation","pos":[11881,11902]},{"content":"An operation that is called as the last message in an existing session.","pos":[11903,11974]},{"content":"In the default case, WCF recycles the service object and its context after the session with which the service was associated is closed.","pos":[11975,12110]},{"content":"transport security mode","pos":[12115,12138]},{"content":"Security can be provided by one of three modes: transport mode, message security mode, and transport with message credential mode.","pos":[12139,12269]},{"content":"The transport security mode specifies that confidentiality, integrity, and authentication are provided by the transport layer mechanisms (such as HTTPS).","pos":[12270,12423]},{"content":"When using a transport like HTTPS, this mode has the advantage of being efficient in its performance, and well understood because of its prevalence on the Internet.","pos":[12424,12588]},{"content":"The disadvantage is that this kind of security is applied separately on each hop in the communication path, making the communication susceptible to a <ph id=\"ph1\">&amp;quot;</ph>man in the middle<ph id=\"ph2\">&amp;quot;</ph> attack.","pos":[12589,12776],"source":" The disadvantage is that this kind of security is applied separately on each hop in the communication path, making the communication susceptible to a &quot;man in the middle&quot; attack."},{"content":"transport with message credential security mode","pos":[12781,12828]},{"content":"This mode uses the transport layer to provide confidentiality, authentication, and integrity of the messages, while each of the messages can contain multiple credentials (claims) required by the receivers of the message.","pos":[12829,13049]},{"content":"type converter","pos":[13054,13068]},{"content":"A CLR type can be associated with one or more System.ComponentModel.TypeConverter derived types that enable converting instances of the CLR type to and from instances of other types.","pos":[13069,13251]},{"content":"A type converterr is associated with a CLR type using the System.ComponentModel.TypeConverterAttribute attribute.","pos":[13252,13365]},{"content":"A TypeConverterAttribute can be specified directly on the CLR type or on a property.","pos":[13367,13451]},{"content":"A type converter specified on a property always takes precedence over a type converter specified on the CLR type of the property.","pos":[13452,13581]},{"content":"WCF client","pos":[13586,13596]},{"content":"A WCF client is a client-application construct that exposes the service operations as methods (in the .NET Framework programming language of your choice, such as Visual Basic or Visual C#).","pos":[13597,13786]},{"content":"Any application can host a WCF client, including an application that hosts a service.","pos":[13787,13872]},{"content":"Therefore, it is possible to create a service that includes WCF clients of other services.","pos":[13873,13963]},{"content":"A WCF client can be automatically generated by using the ServiceModel Metadata Utility Tool (Svcutil.exe) and pointing it at a running service that publishes metadata.","pos":[13965,14132]},{"content":"workflow services","pos":[14137,14154]},{"content":"A workflow service is a WCF service that is implemented as a workflow.","pos":[14155,14225]},{"content":"The workflow contains messaging activities that send and/or receive WCF messages.","pos":[14226,14307]},{"content":"WS-*","pos":[14312,14316]},{"content":"Shorthand for the growing set of Web Service (WS) specifications, such as WS-Security, WS-ReliableMessaging, and so on, that are implemented in WCF.","pos":[14317,14465]},{"content":"XAML","pos":[14470,14474]},{"content":"eXtensible Application Markup Language","pos":[14475,14513]},{"content":"XAML schema","pos":[14518,14529]},{"content":"A markup schema used to define custome types in XAML.","pos":[14530,14583]}]}