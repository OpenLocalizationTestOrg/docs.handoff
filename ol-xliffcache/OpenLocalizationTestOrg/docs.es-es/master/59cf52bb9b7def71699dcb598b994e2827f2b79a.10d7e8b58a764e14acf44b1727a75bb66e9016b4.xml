{"content":"---\ntitle: \"Using a Custom Expression Editor | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0901b58b-e037-44a8-8281-f6f54361cfca\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Using a Custom Expression Editor\nA custom expression editor can be implemented to provide a richer or simpler expression editing experience. There are several scenarios in which you might want to use a custom expression editor:  \n  \n-   To provide support for IntelliSense and other rich editing features in a rehosted workflow designer. This functionality must be provided because the default [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)] expression editor cannot be used in rehosted applications.  \n  \n-   To simplify the expression editing experience for the business analyst users, so that they are not, for example, required to learn [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)] or deal with [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)] expressions.  \n  \n Three basic steps are needed to implement a custom expression editor:  \n  \n1.  Implement the <xref:System.Activities.Presentation.View.IExpressionEditorService> interface. This interface manages the creation and destruction of expression editors.  \n  \n2.  Implement the <xref:System.Activities.Presentation.View.IExpressionEditorInstance> interface. This interface implements the UI for expression editing UI.  \n  \n3.  Publish the <xref:System.Activities.Presentation.View.IExpressionEditorService> in your rehosted workflow application.  \n  \n## Implementing a Custom Expression Editor in a Class Library  \n Here is a sample of code for a (proof of concept) `MyEditorService` class that implements the <xref:System.Activities.Presentation.View.IExpressionEditorService> interface is contained in a MyExpressionEditorService library project.  \n  \n```  \n  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Activities.Presentation.View;  \nusing System.Activities.Presentation.Hosting;  \nusing System.Activities.Presentation.Model;  \n  \nnamespace MyExpressionEditorService  \n{  \n    public class MyEditorService : IExpressionEditorService  \n    {  \n        public void CloseExpressionEditors()  \n        {  \n  \n        }  \n        public IExpressionEditorInstance CreateExpressionEditor(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces, List<ModelItem> variables, string text)  \n        {  \n            MyExpressionEditorInstance instance = new MyExpressionEditorInstance();  \n            return instance;  \n        }  \n        public IExpressionEditorInstance CreateExpressionEditor(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces, List<ModelItem> variables, string text, System.Windows.Size initialSize)  \n                {  \n            MyExpressionEditorInstance instance = new MyExpressionEditorInstance();  \n            return instance;  \n        }  \n        public IExpressionEditorInstance CreateExpressionEditor(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces, List<ModelItem> variables, string text, Type expressionType)  \n            {  \n            MyExpressionEditorInstance instance = new MyExpressionEditorInstance();  \n            return instance;  \n        }  \n        public IExpressionEditorInstance CreateExpressionEditor(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces, List<ModelItem> variables, string text, Type expressionType, System.Windows.Size initialSize)  \n        {  \n            MyExpressionEditorInstance instance = new MyExpressionEditorInstance();  \n            return instance;  \n        }  \n        public void UpdateContext(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces)  \n        {  \n  \n        }  \n  \n    }  \n}  \n  \n```  \n  \n Here is the code for a `MyExpressionEditorInstance` class that implements the <xref:System.Activities.Presentation.View.IExpressionEditorInstance> interface in a MyExpressionEditorService library project.  \n  \n```  \n  \nusing System;  \nusing System.Activities.Presentation.View;  \nusing System.Windows;  \nusing System.Reflection;  \nusing System.Windows.Controls;  \n  \nnamespace MyExpressionEditorService  \n{  \n    public class MyExpressionEditorInstance : IExpressionEditorInstance  \n    {  \n        private TextBox textBox = new TextBox();  \n  \n        public bool AcceptsReturn { get; set; }  \n        public bool AcceptsTab { get; set; }  \n        public bool HasAggregateFocus {  \n            get  \n            {  \n                return true;  \n            }  \n        }  \n  \n        public System.Windows.Controls.ScrollBarVisibility HorizontalScrollBarVisibility { get; set; }  \n        public System.Windows.Controls.Control HostControl {  \n            get  \n            {  \n                return textBox;  \n            }  \n        }  \n        public int MaxLines { get; set; }  \n        public int MinLines { get; set; }  \n        public string Text { get; set; }  \n        public System.Windows.Controls.ScrollBarVisibility VerticalScrollBarVisibility { get; set; }  \n  \n        public event EventHandler Closing;  \n        public event EventHandler GotAggregateFocus;  \n        public event EventHandler LostAggregateFocus;  \n        public event EventHandler TextChanged;  \n  \n        public bool CanCompleteWord()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanCopy()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanCut()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanDecreaseFilterLevel()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanGlobalIntellisense()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanIncreaseFilterLevel()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanParameterInfo()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanPaste()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanQuickInfo()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanRedo()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool CanUndo()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n  \n        public void ClearSelection()  \n        {  \n            MessageBox.Show(MethodBase.GetCurrentMethod().Name);  \n        }  \n        public void Close()  \n        {  \n            MessageBox.Show(MethodBase.GetCurrentMethod().Name);  \n        }  \n        public bool CompleteWord()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool Copy()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool Cut()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool DecreaseFilterLevel()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public void Focus()  \n        {  \n            MessageBox.Show(MethodBase.GetCurrentMethod().Name);  \n        }  \n        public string GetCommittedText()  \n        {  \n            return \"CommittedText\";  \n        }  \n        public bool GlobalIntellisense()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool IncreaseFilterLevel()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool ParameterInfo()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool Paste()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool QuickInfo()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool Redo()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n        public bool Undo()  \n        {  \n            return (MessageBox.Show(MethodBase.GetCurrentMethod().Name, \"TestEditorInstance\", MessageBoxButton.YesNo) == MessageBoxResult.Yes);  \n        }  \n    }  \n}  \n  \n```  \n  \n### Publishing a Custom Expression Editor in a WPF Project  \n Here is the code that shows how to rehost the designer in a [!INCLUDE[avalon2](../../../includes/avalon2-md.md)] application and how to create and publish the `MyEditorService` service. Before using this code, add a reference to the MyExpressionEditorService library project from the project that contains the avalon2 application.  \n  \n```  \n  \nusing System.Windows;  \nusing System.Windows.Controls;  \nusing System.Activities.Presentation;  \nusing System.Activities.Statements;  \nusing System.Activities.Core.Presentation;  \nusing System.Activities.Presentation.View;  \nusing MyExpressionEditorService;  \n  \nnamespace WpfApplication1  \n{  \n    /// <summary>  \n    /// Interaction logic for MainWindow.xaml  \n    /// </summary>  \n    public partial class MainWindow : Window  \n    {  \n  \n        private MyEditorService expressionEditorService;  \n        public MainWindow()  \n        {  \n            InitializeComponent();  \n            new DesignerMetadata().Register();  \n            createDesigner();  \n        }  \n  \n        public void createDesigner()  \n        {  \n            WorkflowDesigner designer = new WorkflowDesigner();  \n            Sequence root = new Sequence()  \n            {  \n                Activities = {  \n                new Assign(),  \n                new WriteLine()}  \n            };  \n  \n            designer.Load(root);  \n  \n            Grid.SetColumn(designer.View, 0);  \n  \n            // Create ExpressionEditorService   \n            this.expressionEditorService = new MyEditorService();  \n  \n            // Publish the instance of MyEditorService.  \n            designer.Context.Services.Publish<IExpressionEditorService>(this.expressionEditorService);  \n  \n            MyGrid.Children.Add(designer.View);  \n        }  \n    }  \n}  \n  \n```  \n  \n### Notes  \n If you are using an **ExpressionTextBox** control in a custom activity designer, it is not necessary to create and destroy expression editors using the <xref:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor%2A> and <xref:System.Activities.Presentation.View.IExpressionEditorService.CloseExpressionEditors%2A> methods of the <xref:System.Activities.Presentation.View.IExpressionEditorService> interface. The <xref:System.Activities.Presentation.View.ExpressionTextBox> class manages this for you.  \n  \n## See Also  \n <xref:System.Activities.Presentation.View.IExpressionEditorService>   \n <xref:System.Activities.Presentation.View.IExpressionEditorInstance>   \n [Using the ExpressionTextBox in a Custom Activity Designer](../../../docs/framework/windows-workflow-foundation/samples/using-the-expressiontextbox-in-a-custom-activity-designer.md)","nodes":[{"pos":[4,319],"embed":true,"restype":"x-metadata","content":"title: \"Using a Custom Expression Editor | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0901b58b-e037-44a8-8281-f6f54361cfca\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"Using a Custom Expression Editor | Microsoft Docs","nodes":[{"pos":[0,49],"content":"Using a Custom Expression Editor | Microsoft Docs","nodes":[{"content":"Using a Custom Expression Editor | Microsoft Docs","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[326,358],"content":"Using a Custom Expression Editor","linkify":"Using a Custom Expression Editor","nodes":[{"content":"Using a Custom Expression Editor","pos":[0,32]}]},{"content":"A custom expression editor can be implemented to provide a richer or simpler expression editing experience.","pos":[359,466]},{"content":"There are several scenarios in which you might want to use a custom expression editor:","pos":[467,553]},{"content":"To provide support for IntelliSense and other rich editing features in a rehosted workflow designer.","pos":[563,663]},{"content":"This functionality must be provided because the default <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> expression editor cannot be used in rehosted applications.","pos":[664,829],"source":" This functionality must be provided because the default [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)] expression editor cannot be used in rehosted applications."},{"pos":[839,1097],"content":"To simplify the expression editing experience for the business analyst users, so that they are not, for example, required to learn <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> or deal with <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> expressions.","source":"To simplify the expression editing experience for the business analyst users, so that they are not, for example, required to learn [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)] or deal with [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)] expressions."},{"content":"Three basic steps are needed to implement a custom expression editor:","pos":[1104,1173]},{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.View.IExpressionEditorService&gt;</ph> interface.","pos":[1183,1275],"source":"Implement the <xref:System.Activities.Presentation.View.IExpressionEditorService> interface."},{"content":"This interface manages the creation and destruction of expression editors.","pos":[1276,1350]},{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.View.IExpressionEditorInstance&gt;</ph> interface.","pos":[1360,1453],"source":"Implement the <xref:System.Activities.Presentation.View.IExpressionEditorInstance> interface."},{"content":"This interface implements the UI for expression editing UI.","pos":[1454,1513]},{"pos":[1523,1641],"content":"Publish the <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.View.IExpressionEditorService&gt;</ph> in your rehosted workflow application.","source":"Publish the <xref:System.Activities.Presentation.View.IExpressionEditorService> in your rehosted workflow application."},{"pos":[1650,1708],"content":"Implementing a Custom Expression Editor in a Class Library","linkify":"Implementing a Custom Expression Editor in a Class Library","nodes":[{"content":"Implementing a Custom Expression Editor in a Class Library","pos":[0,58]}]},{"pos":[1712,1944],"content":"Here is a sample of code for a (proof of concept) <ph id=\"ph1\">`MyEditorService`</ph> class that implements the <ph id=\"ph2\">&lt;xref:System.Activities.Presentation.View.IExpressionEditorService&gt;</ph> interface is contained in a MyExpressionEditorService library project.","source":"Here is a sample of code for a (proof of concept) `MyEditorService` class that implements the <xref:System.Activities.Presentation.View.IExpressionEditorService> interface is contained in a MyExpressionEditorService library project."},{"pos":[3978,4182],"content":"Here is the code for a <ph id=\"ph1\">`MyExpressionEditorInstance`</ph> class that implements the <ph id=\"ph2\">&lt;xref:System.Activities.Presentation.View.IExpressionEditorInstance&gt;</ph> interface in a MyExpressionEditorService library project.","source":"Here is the code for a `MyExpressionEditorInstance` class that implements the <xref:System.Activities.Presentation.View.IExpressionEditorInstance> interface in a MyExpressionEditorService library project."},{"pos":[10518,10572],"content":"Publishing a Custom Expression Editor in a WPF Project","linkify":"Publishing a Custom Expression Editor in a WPF Project","nodes":[{"content":"Publishing a Custom Expression Editor in a WPF Project","pos":[0,54]}]},{"content":"Here is the code that shows how to rehost the designer in a <ph id=\"ph1\">[!INCLUDE[avalon2](../../../includes/avalon2-md.md)]</ph> application and how to create and publish the <ph id=\"ph2\">`MyEditorService`</ph> service.","pos":[10576,10761],"source":"Here is the code that shows how to rehost the designer in a [!INCLUDE[avalon2](../../../includes/avalon2-md.md)] application and how to create and publish the `MyEditorService` service."},{"content":"Before using this code, add a reference to the MyExpressionEditorService library project from the project that contains the avalon2 application.","pos":[10762,10906]},{"pos":[12360,12365],"content":"Notes","linkify":"Notes","nodes":[{"content":"Notes","pos":[0,5]}]},{"content":"If you are using an <bpt id=\"p1\">**</bpt>ExpressionTextBox<ept id=\"p1\">**</ept> control in a custom activity designer, it is not necessary to create and destroy expression editors using the <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.Presentation.View.IExpressionEditorService.CloseExpressionEditors%2A&gt;</ph> methods of the <ph id=\"ph3\">&lt;xref:System.Activities.Presentation.View.IExpressionEditorService&gt;</ph> interface.","pos":[12369,12806],"source":"If you are using an **ExpressionTextBox** control in a custom activity designer, it is not necessary to create and destroy expression editors using the <xref:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor%2A> and <xref:System.Activities.Presentation.View.IExpressionEditorService.CloseExpressionEditors%2A> methods of the <xref:System.Activities.Presentation.View.IExpressionEditorService> interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.View.ExpressionTextBox&gt;</ph> class manages this for you.","pos":[12807,12899],"source":" The <xref:System.Activities.Presentation.View.ExpressionTextBox> class manages this for you."},{"pos":[12908,12916],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Using the ExpressionTextBox in a Custom Activity Designer<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/using-the-expressiontextbox-in-a-custom-activity-designer.md)</ept>","pos":[13065,13246],"source":"[Using the ExpressionTextBox in a Custom Activity Designer](../../../docs/framework/windows-workflow-foundation/samples/using-the-expressiontextbox-in-a-custom-activity-designer.md)"}]}