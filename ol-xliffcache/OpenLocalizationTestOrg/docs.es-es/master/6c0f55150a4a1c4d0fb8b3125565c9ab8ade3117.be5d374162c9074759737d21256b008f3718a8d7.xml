{"content":"---\ntitle: Analyze dependencies to port code to .NET Core\ndescription: Learn how to analyze external dependencies in order to port your project from .NET Framework to .NET Core.\nauthor: cartermp\nms.date: 12/07/2018\nms.custom: seodec18\n---\n# Analyze your dependencies to port code to .NET Core\n\nTo port your code to .NET Core or .NET Standard, you must understand your dependencies. External dependencies are the [NuGet packages](#analyze-referenced-nuget-packages-in-your-projects) or [DLLs](#analyze-dependencies-that-arent-nuget-packages) you reference in your project, but that you don't build. Evaluate each dependency and develop a contingency plan for the ones that aren't compatible with .NET Core. Here's how to determine if a dependency is compatible with .NET Core.\n\n## Analyze referenced NuGet packages in your projects\n\nIf you reference NuGet packages in your project, you need to verify if they're compatible with .NET Core.\nThere are two ways to accomplish that:\n\n* [Using the NuGet Package Explorer app](#analyze-nuget-packages-using-nuget-package-explorer)\n* [Using the nuget.org site](#analyze-nuget-packages-using-nugetorg)\n\nAfter analyzing the packages, if they're not compatible with .NET Core and only target .NET Framework, you can check if the [.NET Framework compatibility mode](#net-framework-compatibility-mode) can help with your porting process.\n\n### Analyze NuGet packages using NuGet Package Explorer\n\nA NuGet package is itself a set of folders that contain platform-specific assemblies. So you need to check if there's a folder that contains a compatible assembly inside the package.\n\nThe easiest way to inspect NuGet Package folders is to use the [NuGet Package Explorer](https://github.com/NuGetPackageExplorer/NuGetPackageExplorer) tool. After installing it, use the following steps to see the folder names:\n\n1. Open the NuGet Package Explorer.\n2. Click **Open package from online feed**.\n3. Search for the name of the package.\n4. Select the package name from the search results and click **open**.\n5. Expand the *lib* folder on the right-hand side and look at folder names.\n\nLook for a folder with any of the following names:\n\n```\nnetstandard1.0\nnetstandard1.1\nnetstandard1.2\nnetstandard1.3\nnetstandard1.4\nnetstandard1.5\nnetstandard1.6\nnetstandard2.0\nnetcoreapp1.0\nnetcoreapp1.1\nnetcoreapp2.0\nnetcoreapp2.1\nnetcoreapp2.2\nportable-net45-win8\nportable-win8-wpa8\nportable-net451-win81\nportable-net45-win8-wpa8-wpa81\n```\n\nThese values are the [Target Framework Monikers (TFMs)](../../standard/frameworks.md) that map to versions of the [.NET Standard](../../standard/net-standard.md), .NET Core, and traditional Portable Class Library (PCL) profiles that are compatible with .NET Core.\n\n> [!IMPORTANT]\n> When looking at the TFMs that a package supports, note that `netcoreapp*`, while compatible, is for .NET Core projects only and not for .NET Standard projects.\n> A library that only targets `netcoreapp*` and not `netstandard*` can only be consumed by other .NET Core apps.\n\n### Analyze NuGet packages using nuget.org\n\nAlternatively, you can see the TFMs that each package supports on [nuget.org](https://www.nuget.org/) under the **Dependencies** section of the package page.\n\nAlthough using the site is an easier method to verify the compatibility, **Dependencies** information is not available on the site for all packages.\n\n### .NET Framework compatibility mode\n\nAfter analyzing the NuGet packages, you might find that they only target the .NET Framework, as most NuGet packages do.\n\nStarting with .NET Standard 2.0, the .NET Framework compatibility mode was introduced. This compatibility mode allows .NET Standard and .NET Core projects to reference .NET Framework libraries. Referencing .NET Framework libraries doesn't work for all projects, such as if the library uses Windows Presentation Foundation (WPF) APIs, but it does unblock many porting scenarios.\n\nWhen you reference NuGet packages that target the .NET Framework in your project, such as [Huitian.PowerCollections](https://www.nuget.org/packages/Huitian.PowerCollections), you get a package fallback warning ([NU1701](/nuget/reference/errors-and-warnings/nu1701)) similar to the following example:\n\n`NU1701: Package ‘Huitian.PowerCollections 1.0.0’ was restored using ‘.NETFramework,Version=v4.6.1’ instead of the project target framework ‘.NETStandard,Version=v2.0’. This package may not be fully compatible with your project.`\n\nThat warning is displayed when you add the package and every time you build to make sure you test that package with your project. If your project is working as expected, you can suppress that warning by editing the package properties in Visual Studio or by manually editing the project file in your favorite code editor.\n\nTo suppress the warning by editing the project file, find the `PackageReference` entry for the package you want to suppress the warning for and add the `NoWarn` attribute. The `NoWarn` attribute accepts a comma-separated list of all the warning IDs. The following example shows how to suppress the `NU1701` warning for the `Huitian.PowerCollections` package by editing your project file manually:\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Huitian.PowerCollections\" Version=\"1.0.0\" NoWarn=\"NU1701\" />\n</ItemGroup>\n```\n\nFor more information on how to suppress compiler warnings in Visual Studio, see [Suppressing warnings for NuGet packages](/visualstudio/ide/how-to-suppress-compiler-warnings#suppress-warnings-for-nuget-packages).\n\n## Port your packages to `PackageReference`\n\n.NET Core uses [PackageReference](/nuget/consume-packages/package-references-in-project-files) to specify package dependencies. If you are using [packages.config](/nuget/reference/packages-config) to specify your packages, you will need to convert over to `PackageReference`.\n\nYou can learn more at [Migrate from packages.config to PackageReference](/nuget/reference/migrate-packages-config-to-package-reference).\n\n## What to do when your NuGet package dependency doesn't run on .NET Core\n\nThere are a few things you can do if a NuGet package you depend on doesn't run on .NET Core:\n\n1. If the project is open source and hosted somewhere like GitHub, you can engage the developers directly.\n2. You can contact the author directly on [nuget.org](https://www.nuget.org/). Search for the package and click **Contact Owners** on the left-hand side of the package's page.\n3. You can search for another package that runs on .NET Core that accomplishes the same task as the package you were using.\n4. You can attempt to write the code the package was doing yourself.\n5. You could eliminate the dependency on the package by changing the functionality of your app, at least until a compatible version of the package becomes available.\n\nRemember that open-source project maintainers and NuGet package publishers are often volunteers. They contribute because they care about a given domain, do it for free, and often have a different daytime job. So be mindful of that when contacting them to ask for .NET Core support.\n\nIf you can't resolve your issue with any of the above, you may have to port to .NET Core at a later date.\n\nThe .NET Team would like to know which libraries are the most important to support with .NET Core. You can send an email to dotnet@microsoft.com about the libraries you'd like to use.\n\n## Analyze dependencies that aren't NuGet packages\n\nYou may have a dependency that isn't a NuGet package, such as a DLL in the file system. The only way to determine the portability of that dependency is to run the [.NET Portability Analyzer](https://github.com/Microsoft/dotnet-apiport) tool. The tool can analyze assemblies that target the .NET Framework and identify APIs that aren't portable to other .NET platforms such as .NET Core. You can run the tool as a console application or as a [Visual Studio extension](../../standard/analyzers/portability-analyzer.md).\n\n>[!div class=\"step-by-step\"]\n>[Next](libraries.md)\n","nodes":[{"pos":[4,234],"embed":true,"restype":"x-metadata","content":"title: Analyze dependencies to port code to .NET Core\ndescription: Learn how to analyze external dependencies in order to port your project from .NET Framework to .NET Core.\nauthor: cartermp\nms.date: 12/07/2018\nms.custom: seodec18","nodes":[{"content":"Analyze dependencies to port code to .NET Core","nodes":[{"pos":[0,46],"content":"Analyze dependencies to port code to .NET Core","nodes":[{"content":"Analyze dependencies to port code to .NET Core","pos":[0,46]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to analyze external dependencies in order to port your project from .NET Framework to .NET Core.","nodes":[{"pos":[0,106],"content":"Learn how to analyze external dependencies in order to port your project from .NET Framework to .NET Core.","nodes":[{"content":"Learn how to analyze external dependencies in order to port your project from .NET Framework to .NET Core.","pos":[0,106]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[241,292],"content":"Analyze your dependencies to port code to .NET Core","linkify":"Analyze your dependencies to port code to .NET Core","nodes":[{"content":"Analyze your dependencies to port code to .NET Core","pos":[0,51]}]},{"content":"To port your code to .NET Core or .NET Standard, you must understand your dependencies.","pos":[294,381]},{"content":"External dependencies are the <bpt id=\"p1\">[</bpt>NuGet packages<ept id=\"p1\">](#analyze-referenced-nuget-packages-in-your-projects)</ept> or <bpt id=\"p2\">[</bpt>DLLs<ept id=\"p2\">](#analyze-dependencies-that-arent-nuget-packages)</ept> you reference in your project, but that you don't build.","pos":[382,597],"source":" External dependencies are the [NuGet packages](#analyze-referenced-nuget-packages-in-your-projects) or [DLLs](#analyze-dependencies-that-arent-nuget-packages) you reference in your project, but that you don't build."},{"content":"Evaluate each dependency and develop a contingency plan for the ones that aren't compatible with .NET Core.","pos":[598,705]},{"content":"Here's how to determine if a dependency is compatible with .NET Core.","pos":[706,775]},{"pos":[780,830],"content":"Analyze referenced NuGet packages in your projects","linkify":"Analyze referenced NuGet packages in your projects","nodes":[{"content":"Analyze referenced NuGet packages in your projects","pos":[0,50]}]},{"content":"If you reference NuGet packages in your project, you need to verify if they're compatible with .NET Core.","pos":[832,937]},{"content":"There are two ways to accomplish that:","pos":[938,976],"source":"\nThere are two ways to accomplish that:"},{"pos":[980,1072],"content":"<bpt id=\"p1\">[</bpt>Using the NuGet Package Explorer app<ept id=\"p1\">](#analyze-nuget-packages-using-nuget-package-explorer)</ept>","source":"[Using the NuGet Package Explorer app](#analyze-nuget-packages-using-nuget-package-explorer)"},{"pos":[1075,1141],"content":"<bpt id=\"p1\">[</bpt>Using the nuget.org site<ept id=\"p1\">](#analyze-nuget-packages-using-nugetorg)</ept>","source":"[Using the nuget.org site](#analyze-nuget-packages-using-nugetorg)"},{"pos":[1143,1373],"content":"After analyzing the packages, if they're not compatible with .NET Core and only target .NET Framework, you can check if the <bpt id=\"p1\">[</bpt>.NET Framework compatibility mode<ept id=\"p1\">](#net-framework-compatibility-mode)</ept> can help with your porting process.","source":"After analyzing the packages, if they're not compatible with .NET Core and only target .NET Framework, you can check if the [.NET Framework compatibility mode](#net-framework-compatibility-mode) can help with your porting process."},{"pos":[1379,1430],"content":"Analyze NuGet packages using NuGet Package Explorer","linkify":"Analyze NuGet packages using NuGet Package Explorer","nodes":[{"content":"Analyze NuGet packages using NuGet Package Explorer","pos":[0,51]}]},{"content":"A NuGet package is itself a set of folders that contain platform-specific assemblies.","pos":[1432,1517]},{"content":"So you need to check if there's a folder that contains a compatible assembly inside the package.","pos":[1518,1614]},{"content":"The easiest way to inspect NuGet Package folders is to use the <bpt id=\"p1\">[</bpt>NuGet Package Explorer<ept id=\"p1\">](https://github.com/NuGetPackageExplorer/NuGetPackageExplorer)</ept> tool.","pos":[1616,1771],"source":"The easiest way to inspect NuGet Package folders is to use the [NuGet Package Explorer](https://github.com/NuGetPackageExplorer/NuGetPackageExplorer) tool."},{"content":"After installing it, use the following steps to see the folder names:","pos":[1772,1841]},{"content":"Open the NuGet Package Explorer.","pos":[1846,1878]},{"pos":[1882,1922],"content":"Click <bpt id=\"p1\">**</bpt>Open package from online feed<ept id=\"p1\">**</ept>.","source":"Click **Open package from online feed**."},{"content":"Search for the name of the package.","pos":[1926,1961]},{"pos":[1965,2032],"content":"Select the package name from the search results and click <bpt id=\"p1\">**</bpt>open<ept id=\"p1\">**</ept>.","source":"Select the package name from the search results and click **open**."},{"pos":[2036,2108],"content":"Expand the <bpt id=\"p1\">*</bpt>lib<ept id=\"p1\">*</ept> folder on the right-hand side and look at folder names.","source":"Expand the *lib* folder on the right-hand side and look at folder names."},{"content":"Look for a folder with any of the following names:","pos":[2110,2160]},{"pos":[2453,2716],"content":"These values are the <bpt id=\"p1\">[</bpt>Target Framework Monikers (TFMs)<ept id=\"p1\">](../../standard/frameworks.md)</ept> that map to versions of the <bpt id=\"p2\">[</bpt>.NET Standard<ept id=\"p2\">](../../standard/net-standard.md)</ept>, .NET Core, and traditional Portable Class Library (PCL) profiles that are compatible with .NET Core.","source":"These values are the [Target Framework Monikers (TFMs)](../../standard/frameworks.md) that map to versions of the [.NET Standard](../../standard/net-standard.md), .NET Core, and traditional Portable Class Library (PCL) profiles that are compatible with .NET Core."},{"pos":[2720,3007],"content":"[!IMPORTANT]\nWhen looking at the TFMs that a package supports, note that `netcoreapp*`, while compatible, is for .NET Core projects only and not for .NET Standard projects.\nA library that only targets `netcoreapp*` and not `netstandard*` can only be consumed by other .NET Core apps.","leadings":["","> ","> "],"nodes":[{"content":"When looking at the TFMs that a package supports, note that `netcoreapp*`, while compatible, is for .NET Core projects only and not for .NET Standard projects.\nA library that only targets `netcoreapp*` and not `netstandard*` can only be consumed by other .NET Core apps.","pos":[13,283],"nodes":[{"content":"When looking at the TFMs that a package supports, note that <ph id=\"ph1\">`netcoreapp*`</ph>, while compatible, is for .NET Core projects only and not for .NET Standard projects.","pos":[0,159],"source":"When looking at the TFMs that a package supports, note that `netcoreapp*`, while compatible, is for .NET Core projects only and not for .NET Standard projects."},{"content":"A library that only targets <ph id=\"ph1\">`netcoreapp*`</ph> and not <ph id=\"ph2\">`netstandard*`</ph> can only be consumed by other .NET Core apps.","pos":[160,270],"source":"\nA library that only targets `netcoreapp*` and not `netstandard*` can only be consumed by other .NET Core apps."}]}]},{"pos":[3013,3051],"content":"Analyze NuGet packages using nuget.org","linkify":"Analyze NuGet packages using nuget.org","nodes":[{"content":"Analyze NuGet packages using nuget.org","pos":[0,38]}]},{"pos":[3053,3210],"content":"Alternatively, you can see the TFMs that each package supports on <bpt id=\"p1\">[</bpt>nuget.org<ept id=\"p1\">](https://www.nuget.org/)</ept> under the <bpt id=\"p2\">**</bpt>Dependencies<ept id=\"p2\">**</ept> section of the package page.","source":"Alternatively, you can see the TFMs that each package supports on [nuget.org](https://www.nuget.org/) under the **Dependencies** section of the package page."},{"pos":[3212,3360],"content":"Although using the site is an easier method to verify the compatibility, <bpt id=\"p1\">**</bpt>Dependencies<ept id=\"p1\">**</ept> information is not available on the site for all packages.","source":"Although using the site is an easier method to verify the compatibility, **Dependencies** information is not available on the site for all packages."},{"pos":[3366,3399],"content":".NET Framework compatibility mode","linkify":".NET Framework compatibility mode","nodes":[{"content":".NET Framework compatibility mode","pos":[0,33]}]},{"content":"After analyzing the NuGet packages, you might find that they only target the .NET Framework, as most NuGet packages do.","pos":[3401,3520]},{"content":"Starting with .NET Standard 2.0, the .NET Framework compatibility mode was introduced.","pos":[3522,3608]},{"content":"This compatibility mode allows .NET Standard and .NET Core projects to reference .NET Framework libraries.","pos":[3609,3715]},{"content":"Referencing .NET Framework libraries doesn't work for all projects, such as if the library uses Windows Presentation Foundation (WPF) APIs, but it does unblock many porting scenarios.","pos":[3716,3899]},{"pos":[3901,4200],"content":"When you reference NuGet packages that target the .NET Framework in your project, such as <bpt id=\"p1\">[</bpt>Huitian.PowerCollections<ept id=\"p1\">](https://www.nuget.org/packages/Huitian.PowerCollections)</ept>, you get a package fallback warning (<bpt id=\"p2\">[</bpt>NU1701<ept id=\"p2\">](/nuget/reference/errors-and-warnings/nu1701)</ept>) similar to the following example:","source":"When you reference NuGet packages that target the .NET Framework in your project, such as [Huitian.PowerCollections](https://www.nuget.org/packages/Huitian.PowerCollections), you get a package fallback warning ([NU1701](/nuget/reference/errors-and-warnings/nu1701)) similar to the following example:"},{"content":"That warning is displayed when you add the package and every time you build to make sure you test that package with your project.","pos":[4433,4562]},{"content":"If your project is working as expected, you can suppress that warning by editing the package properties in Visual Studio or by manually editing the project file in your favorite code editor.","pos":[4563,4753]},{"content":"To suppress the warning by editing the project file, find the <ph id=\"ph1\">`PackageReference`</ph> entry for the package you want to suppress the warning for and add the <ph id=\"ph2\">`NoWarn`</ph> attribute.","pos":[4755,4926],"source":"To suppress the warning by editing the project file, find the `PackageReference` entry for the package you want to suppress the warning for and add the `NoWarn` attribute."},{"content":"The <ph id=\"ph1\">`NoWarn`</ph> attribute accepts a comma-separated list of all the warning IDs.","pos":[4927,5004],"source":" The `NoWarn` attribute accepts a comma-separated list of all the warning IDs."},{"content":"The following example shows how to suppress the <ph id=\"ph1\">`NU1701`</ph> warning for the <ph id=\"ph2\">`Huitian.PowerCollections`</ph> package by editing your project file manually:","pos":[5005,5151],"source":" The following example shows how to suppress the `NU1701` warning for the `Huitian.PowerCollections` package by editing your project file manually:"},{"pos":[5280,5492],"content":"For more information on how to suppress compiler warnings in Visual Studio, see <bpt id=\"p1\">[</bpt>Suppressing warnings for NuGet packages<ept id=\"p1\">](/visualstudio/ide/how-to-suppress-compiler-warnings#suppress-warnings-for-nuget-packages)</ept>.","source":"For more information on how to suppress compiler warnings in Visual Studio, see [Suppressing warnings for NuGet packages](/visualstudio/ide/how-to-suppress-compiler-warnings#suppress-warnings-for-nuget-packages)."},{"pos":[5497,5537],"content":"Port your packages to <ph id=\"ph1\">`PackageReference`</ph>","linkify":"Port your packages to `PackageReference`","source":"Port your packages to `PackageReference`"},{"content":".NET Core uses <bpt id=\"p1\">[</bpt>PackageReference<ept id=\"p1\">](/nuget/consume-packages/package-references-in-project-files)</ept> to specify package dependencies.","pos":[5539,5666],"source":".NET Core uses [PackageReference](/nuget/consume-packages/package-references-in-project-files) to specify package dependencies."},{"content":"If you are using <bpt id=\"p1\">[</bpt>packages.config<ept id=\"p1\">](/nuget/reference/packages-config)</ept> to specify your packages, you will need to convert over to <ph id=\"ph1\">`PackageReference`</ph>.","pos":[5667,5814],"source":" If you are using [packages.config](/nuget/reference/packages-config) to specify your packages, you will need to convert over to `PackageReference`."},{"pos":[5816,5952],"content":"You can learn more at <bpt id=\"p1\">[</bpt>Migrate from packages.config to PackageReference<ept id=\"p1\">](/nuget/reference/migrate-packages-config-to-package-reference)</ept>.","source":"You can learn more at [Migrate from packages.config to PackageReference](/nuget/reference/migrate-packages-config-to-package-reference)."},{"pos":[5957,6027],"content":"What to do when your NuGet package dependency doesn't run on .NET Core","linkify":"What to do when your NuGet package dependency doesn't run on .NET Core","nodes":[{"content":"What to do when your NuGet package dependency doesn't run on .NET Core","pos":[0,70]}]},{"content":"There are a few things you can do if a NuGet package you depend on doesn't run on .NET Core:","pos":[6029,6121]},{"content":"If the project is open source and hosted somewhere like GitHub, you can engage the developers directly.","pos":[6126,6229]},{"pos":[6233,6405],"content":"You can contact the author directly on <bpt id=\"p1\">[</bpt>nuget.org<ept id=\"p1\">](https://www.nuget.org/)</ept>. Search for the package and click <bpt id=\"p2\">**</bpt>Contact Owners<ept id=\"p2\">**</ept> on the left-hand side of the package's page.","source":"You can contact the author directly on [nuget.org](https://www.nuget.org/). Search for the package and click **Contact Owners** on the left-hand side of the package's page."},{"content":"You can search for another package that runs on .NET Core that accomplishes the same task as the package you were using.","pos":[6409,6529]},{"content":"You can attempt to write the code the package was doing yourself.","pos":[6533,6598]},{"content":"You could eliminate the dependency on the package by changing the functionality of your app, at least until a compatible version of the package becomes available.","pos":[6602,6764]},{"content":"Remember that open-source project maintainers and NuGet package publishers are often volunteers.","pos":[6766,6862]},{"content":"They contribute because they care about a given domain, do it for free, and often have a different daytime job.","pos":[6863,6974]},{"content":"So be mindful of that when contacting them to ask for .NET Core support.","pos":[6975,7047]},{"content":"If you can't resolve your issue with any of the above, you may have to port to .NET Core at a later date.","pos":[7049,7154]},{"content":"The .NET Team would like to know which libraries are the most important to support with .NET Core.","pos":[7156,7254]},{"content":"You can send an email to <ph id=\"ph1\">dotnet@microsoft.com</ph> about the libraries you'd like to use.","pos":[7255,7339],"source":" You can send an email to dotnet@microsoft.com about the libraries you'd like to use."},{"pos":[7344,7391],"content":"Analyze dependencies that aren't NuGet packages","linkify":"Analyze dependencies that aren't NuGet packages","nodes":[{"content":"Analyze dependencies that aren't NuGet packages","pos":[0,47]}]},{"content":"You may have a dependency that isn't a NuGet package, such as a DLL in the file system.","pos":[7393,7480]},{"content":"The only way to determine the portability of that dependency is to run the <bpt id=\"p1\">[</bpt>.NET Portability Analyzer<ept id=\"p1\">](https://github.com/Microsoft/dotnet-apiport)</ept> tool.","pos":[7481,7634],"source":" The only way to determine the portability of that dependency is to run the [.NET Portability Analyzer](https://github.com/Microsoft/dotnet-apiport) tool."},{"content":"The tool can analyze assemblies that target the .NET Framework and identify APIs that aren't portable to other .NET platforms such as .NET Core.","pos":[7635,7779]},{"content":"You can run the tool as a console application or as a <bpt id=\"p1\">[</bpt>Visual Studio extension<ept id=\"p1\">](../../standard/analyzers/portability-analyzer.md)</ept>.","pos":[7780,7910],"source":" You can run the tool as a console application or as a [Visual Studio extension](../../standard/analyzers/portability-analyzer.md)."},{"pos":[7913,7962],"content":"[!div class=\"step-by-step\"]\n[Next](libraries.md)","leadings":["",">"],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Next<ept id=\"p1\">](libraries.md)</ept>","pos":[28,48],"source":"[Next](libraries.md)"}]}]}