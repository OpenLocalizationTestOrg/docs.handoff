{"content":"---\ntitle: \"How to: Write Messages to and Read Messages from a Dataflow Block\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, reading and writing messages\"\nms.assetid: 1a9bf078-aa82-46eb-b95a-f87237f028c5\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Write Messages to and Read Messages from a Dataflow Block\nThis document describes how to use the TPL Dataflow Library to write messages to and read messages from a dataflow block. The TPL Dataflow Library provides both synchronous and asynchronous methods for writing messages to and reading messages from a dataflow block. This document uses the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601?displayProperty=nameWithType> class. The <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> class buffers messages and behaves as both a message source and as a message target.  \n\n[!INCLUDE [tpl-install-instructions](../../../includes/tpl-install-instructions.md)]\n\n## Writing to and Reading from a Dataflow Block Synchronously  \n The following example uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> method to write to a <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> dataflow block and the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Receive%2A> method to read from the same object.  \n  \n [!code-csharp[TPLDataflow_ReadWrite#2](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_readwrite/cs/dataflowreadwrite.cs#2)]\n [!code-vb[TPLDataflow_ReadWrite#2](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_readwrite/vb/dataflowreadwrite.vb#2)]  \n  \n You can also use the <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> method to read from a dataflow block, as shown in the following example. The <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> method does not block the current thread and is useful when you occasionally poll for data.  \n  \n [!code-csharp[TPLDataflow_ReadWrite#3](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_readwrite/cs/dataflowreadwrite.cs#3)]\n [!code-vb[TPLDataflow_ReadWrite#3](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_readwrite/vb/dataflowreadwrite.vb#3)]  \n  \n Because the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> method acts synchronously, the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> object in the previous examples receives all data before the second loop reads data. The following example extends the first example by using <xref:System.Threading.Tasks.Parallel.Invoke%2A> to read from and write to the message block concurrently. Because <xref:System.Threading.Tasks.Parallel.Invoke%2A> performs actions concurrently, the values are not written to the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> object in any specific order.  \n  \n [!code-csharp[TPLDataflow_ReadWrite#4](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_readwrite/cs/dataflowreadwrite.cs#4)]\n [!code-vb[TPLDataflow_ReadWrite#4](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_readwrite/vb/dataflowreadwrite.vb#4)]  \n  \n## Writing to and Reading from a Dataflow Block Asynchronously  \n The following example uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A> method to asynchronously write to a <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> object and the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync%2A> method to asynchronously read from the same object. This example uses the [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) operators ([Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) in Visual Basic) to asynchronously send data to and read data from the target block. The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A> method is useful when you must enable a dataflow block to postpone messages. The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync%2A> method is useful when you want to act on data when that data becomes available. For more information about how messages propagate among message blocks, see the section Message Passing in [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md).  \n  \n [!code-csharp[TPLDataflow_ReadWrite#5](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_readwrite/cs/dataflowreadwrite.cs#5)]\n [!code-vb[TPLDataflow_ReadWrite#5](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_readwrite/vb/dataflowreadwrite.vb#5)]  \n  \n## A Complete Example  \n The following example shows the complete code for this document.  \n  \n [!code-csharp[TPLDataflow_ReadWrite#1](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_readwrite/cs/dataflowreadwrite.cs#1)]\n [!code-vb[TPLDataflow_ReadWrite#1](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_readwrite/vb/dataflowreadwrite.vb#1)]  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `DataflowReadWrite.cs` (`DataflowReadWrite.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.  \n  \n Visual C#  \n  \n **csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowReadWrite.cs**  \n  \n Visual Basic  \n  \n **vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowReadWrite.vb**  \n  \n## Next Steps  \n This example shows how to read from and write to a message block directly. You can also connect dataflow blocks to form *pipelines*, which are linear sequences of dataflow blocks, or *networks*, which are graphs of dataflow blocks. In a pipeline or network, sources asynchronously propagate data to targets as that data becomes available. For an example that creates a basic dataflow pipeline, see [Walkthrough: Creating a Dataflow Pipeline](../../../docs/standard/parallel-programming/walkthrough-creating-a-dataflow-pipeline.md). For an example that creates a more complex dataflow network, see [Walkthrough: Using Dataflow in a Windows Forms Application](../../../docs/standard/parallel-programming/walkthrough-using-dataflow-in-a-windows-forms-application.md).  \n  \n## See also\n\n- [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)\n","nodes":[{"pos":[4,372],"embed":true,"restype":"x-metadata","content":"title: \"How to: Write Messages to and Read Messages from a Dataflow Block\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, reading and writing messages\"\nms.assetid: 1a9bf078-aa82-46eb-b95a-f87237f028c5\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Write Messages to and Read Messages from a Dataflow Block","nodes":[{"pos":[0,65],"content":"How to: Write Messages to and Read Messages from a Dataflow Block","nodes":[{"content":"How to: Write Messages to and Read Messages from a Dataflow Block","pos":[0,65]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[379,444],"content":"How to: Write Messages to and Read Messages from a Dataflow Block","linkify":"How to: Write Messages to and Read Messages from a Dataflow Block","nodes":[{"content":"How to: Write Messages to and Read Messages from a Dataflow Block","pos":[0,65]}]},{"content":"This document describes how to use the TPL Dataflow Library to write messages to and read messages from a dataflow block.","pos":[445,566]},{"content":"The TPL Dataflow Library provides both synchronous and asynchronous methods for writing messages to and reading messages from a dataflow block.","pos":[567,710]},{"content":"This document uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601?displayProperty=nameWithType&gt;</ph> class.","pos":[711,824],"source":" This document uses the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601?displayProperty=nameWithType> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> class buffers messages and behaves as both a message source and as a message target.","pos":[825,968],"source":" The <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> class buffers messages and behaves as both a message source and as a message target."},{"pos":[1061,1119],"content":"Writing to and Reading from a Dataflow Block Synchronously","linkify":"Writing to and Reading from a Dataflow Block Synchronously","nodes":[{"content":"Writing to and Reading from a Dataflow Block Synchronously","pos":[0,58]}]},{"pos":[1123,1414],"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A&gt;</ph> method to write to a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> dataflow block and the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Receive%2A&gt;</ph> method to read from the same object.","source":"The following example uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> method to write to a <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> dataflow block and the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Receive%2A> method to read from the same object."},{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> method to read from a dataflow block, as shown in the following example.","pos":[1707,1880],"source":"You can also use the <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> method to read from a dataflow block, as shown in the following example."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> method does not block the current thread and is useful when you occasionally poll for data.","pos":[1881,2056],"source":" The <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> method does not block the current thread and is useful when you occasionally poll for data."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A&gt;</ph> method acts synchronously, the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> object in the previous examples receives all data before the second loop reads data.","pos":[2349,2592],"source":"Because the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> method acts synchronously, the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> object in the previous examples receives all data before the second loop reads data."},{"content":"The following example extends the first example by using <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.Invoke%2A&gt;</ph> to read from and write to the message block concurrently.","pos":[2593,2756],"source":" The following example extends the first example by using <xref:System.Threading.Tasks.Parallel.Invoke%2A> to read from and write to the message block concurrently."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.Invoke%2A&gt;</ph> performs actions concurrently, the values are not written to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> object in any specific order.","pos":[2757,2963],"source":" Because <xref:System.Threading.Tasks.Parallel.Invoke%2A> performs actions concurrently, the values are not written to the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> object in any specific order."},{"pos":[3258,3317],"content":"Writing to and Reading from a Dataflow Block Asynchronously","linkify":"Writing to and Reading from a Dataflow Block Asynchronously","nodes":[{"content":"Writing to and Reading from a Dataflow Block Asynchronously","pos":[0,59]}]},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A&gt;</ph> method to asynchronously write to a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> object and the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync%2A&gt;</ph> method to asynchronously read from the same object.","pos":[3321,3644],"source":"The following example uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A> method to asynchronously write to a <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> object and the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync%2A> method to asynchronously read from the same object."},{"content":"This example uses the <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id=\"p2\">[</bpt>await<ept id=\"p2\">](~/docs/csharp/language-reference/keywords/await.md)</ept> operators (<bpt id=\"p3\">[</bpt>Async<ept id=\"p3\">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id=\"p4\">[</bpt>Await<ept id=\"p4\">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> in Visual Basic) to asynchronously send data to and read data from the target block.","pos":[3645,4033],"source":" This example uses the [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) operators ([Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) in Visual Basic) to asynchronously send data to and read data from the target block."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A&gt;</ph> method is useful when you must enable a dataflow block to postpone messages.","pos":[4034,4180],"source":" The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A> method is useful when you must enable a dataflow block to postpone messages."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync%2A&gt;</ph> method is useful when you want to act on data when that data becomes available.","pos":[4181,4333],"source":" The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync%2A> method is useful when you want to act on data when that data becomes available."},{"content":"For more information about how messages propagate among message blocks, see the section Message Passing in <bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept>.","pos":[4334,4531],"source":" For more information about how messages propagate among message blocks, see the section Message Passing in [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)."},{"pos":[4826,4844],"content":"A Complete Example","linkify":"A Complete Example","nodes":[{"content":"A Complete Example","pos":[0,18]}]},{"content":"The following example shows the complete code for this document.","pos":[4848,4912]},{"pos":[5207,5225],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[5229,5484],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`DataflowReadWrite.cs`</ph> (<ph id=\"ph2\">`DataflowReadWrite.vb`</ph> for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `DataflowReadWrite.cs` (`DataflowReadWrite.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window."},{"content":"Visual C#","pos":[5491,5500]},{"pos":[5507,5578],"content":"<bpt id=\"p1\">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowReadWrite.cs<ept id=\"p1\">**</ept>","source":"**csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowReadWrite.cs**"},{"content":"Visual Basic","pos":[5585,5597]},{"pos":[5604,5675],"content":"<bpt id=\"p1\">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowReadWrite.vb<ept id=\"p1\">**</ept>","source":"**vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowReadWrite.vb**"},{"pos":[5684,5694],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"content":"This example shows how to read from and write to a message block directly.","pos":[5698,5772]},{"content":"You can also connect dataflow blocks to form <bpt id=\"p1\">*</bpt>pipelines<ept id=\"p1\">*</ept>, which are linear sequences of dataflow blocks, or <bpt id=\"p2\">*</bpt>networks<ept id=\"p2\">*</ept>, which are graphs of dataflow blocks.","pos":[5773,5929],"source":" You can also connect dataflow blocks to form *pipelines*, which are linear sequences of dataflow blocks, or *networks*, which are graphs of dataflow blocks."},{"content":"In a pipeline or network, sources asynchronously propagate data to targets as that data becomes available.","pos":[5930,6036]},{"content":"For an example that creates a basic dataflow pipeline, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating a Dataflow Pipeline<ept id=\"p1\">](../../../docs/standard/parallel-programming/walkthrough-creating-a-dataflow-pipeline.md)</ept>.","pos":[6037,6229],"source":" For an example that creates a basic dataflow pipeline, see [Walkthrough: Creating a Dataflow Pipeline](../../../docs/standard/parallel-programming/walkthrough-creating-a-dataflow-pipeline.md)."},{"content":"For an example that creates a more complex dataflow network, see <bpt id=\"p1\">[</bpt>Walkthrough: Using Dataflow in a Windows Forms Application<ept id=\"p1\">](../../../docs/standard/parallel-programming/walkthrough-using-dataflow-in-a-windows-forms-application.md)</ept>.","pos":[6230,6462],"source":" For an example that creates a more complex dataflow network, see [Walkthrough: Using Dataflow in a Windows Forms Application](../../../docs/standard/parallel-programming/walkthrough-using-dataflow-in-a-windows-forms-application.md)."},{"pos":[6471,6479],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6483,6572],"content":"<bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept>","source":"[Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)"}]}