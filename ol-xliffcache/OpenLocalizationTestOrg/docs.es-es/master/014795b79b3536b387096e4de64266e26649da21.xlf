<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="activity-tree-inspection.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">014795b79b3536b387096e4de64266e26649da21</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\activity-tree-inspection.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8add5c792f22848adf6295106e74db0ecfffa79</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">520d375a78ff7baf59708c59cb6b47e7cabb63c5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Activity Tree Inspection</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Activity Tree Inspection</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Activity tree inspection is used by workflow application authors to inspect the workflows hosted by the application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices&gt;</ph>, workflows can be searched for specific child activities, individual activities and their properties can be enumerated, and runtime metadata of the activities can be cached at a specific time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices&gt;</ph> and how to use it to inspect an activity tree.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using WorkflowInspectionServices</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> method is used to enumerate all of the activities in the specified activity tree.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> returns an enumerable that touches all activities within the tree including children, delegate handlers, variable defaults, and argument expressions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the following example, a workflow definition is created by using a <ph id="ph1">&lt;xref:System.Activities.Statements.Sequence&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.Statements.While&gt;</ph>, <ph id="ph3">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph>, <ph id="ph4">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph>, and expressions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>After the workflow definition is created, it is invoked and then the <ph id="ph1">`InspectActivity`</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To enumerate the activities, the <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> is called on the root activity, and again recursively on each returned activity.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Activities.Activity.DisplayName%2A&gt;</ph> of each activity and expression in the activity tree is written to the console.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This sample code provides the following output.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>List Item 1<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>List Item 2<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>List Item 3<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>List Item 4<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>List Item 5<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Items added to collection.<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sequence<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Literal&lt;List<ph id="ph1">\&lt;</ph>String&gt;&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>While<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AddToCollection<ph id="ph1">\&lt;</ph>String&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VariableValue&lt;ICollection<ph id="ph1">\&lt;</ph>String&gt;&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LambdaValue<ph id="ph1">\&lt;</ph>String&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LocationReferenceValue&lt;List<ph id="ph1">\&lt;</ph>String&gt;&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LambdaValue<ph id="ph1">\&lt;</ph>Boolean&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LocationReferenceValue&lt;List<ph id="ph1">\&lt;</ph>String&gt;&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ForEach<ph id="ph1">\&lt;</ph>String&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VariableValue&lt;IEnumerable<ph id="ph1">\&lt;</ph>String&gt;&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WriteLine<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DelegateArgumentValue<ph id="ph1">\&lt;</ph>String&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sequence<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WriteLine<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Literal<ph id="ph1">\&lt;</ph>String&gt;<ept id="p1">**</ept>  To retrieve a specific activity instead of enumerating all of the activities, <ph id="ph2">&lt;xref:System.Activities.WorkflowInspectionServices.Resolve%2A&gt;</ph> is used.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices.Resolve%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> perform metadata caching if <ph id="ph3">`WorkflowInspectionServices.CacheMetadata`</ph> has not been previously called.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph> has been called then <ph id="ph2">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> is based on the existing metadata.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Therefore, if tree changes have been made since the last call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> might give unexpected results.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If changes have been made to the workflow after calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph>, metadata can be re-cached by calling the <ph id="ph2">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> <ph id="ph3">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Caching metadata is discussed in the next section.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Caching Metadata</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Caching the metadata for an activity builds and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Metadata, by default, is cached by the runtime when an activity is prepared for execution.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If a workflow host author wants to cache the metadata for an activity or activity tree before this, for example to take all of the cost upfront, then <ph id="ph1">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph> can be used to cache the metadata at the desired time.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>