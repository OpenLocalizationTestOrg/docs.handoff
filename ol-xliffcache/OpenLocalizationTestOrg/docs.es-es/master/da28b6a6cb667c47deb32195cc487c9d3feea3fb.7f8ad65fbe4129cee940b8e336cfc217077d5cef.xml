{"content":"---\ntitle: \"ISymUnmanagedWriter::SetScopeRange Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ISymUnmanagedWriter.SetScopeRange\"\napi_location: \n  - \"diasymreader.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ISymUnmanagedWriter::SetScopeRange\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SetScopeRange method [.NET Framework debugging]\"\n  - \"ISymUnmanagedWriter::SetScopeRange method [.NET Framework debugging]\"\nms.assetid: d4d98676-444b-46ca-bfe6-0d827385cd22\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 11\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ISymUnmanagedWriter::SetScopeRange Method\nDefines the offset range for the specified lexical scope. The scope becomes the new current scope and is pushed onto a stack of scopes. Scopes must form a hierarchy. Siblings are not allowed to overlap.  \n  \n## Syntax  \n  \n```  \nHRESULT OpenScope(  \n    [in] ULONG32  scopeID,  \n    [in] ULONG32  startOffset,  \n    [in] ULONG32  endOffset);  \n```  \n  \n#### Parameters  \n `scopeId`  \n [in] The scope identifier for the scope.  \n  \n `startOffset`  \n [in] The offset, in bytes, of the first instruction in the lexical scope from the beginning of the method.  \n  \n `endOffset`  \n [in] The offset, in bytes, of the last instruction in the lexical scope from the beginning of the method.  \n  \n## Return Value  \n S_OK if the method succeeds; otherwise, E_FAIL or some other error code.  \n  \n## Remarks  \n [ISymUnmanagedWriter::OpenScope](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-openscope-method.md) returns an opaque scope identifier that can be used with `ISymUnmanagedWriter::SetScopeRange` to define a scope's starting and ending offset at a later time. In this case, the offsets passed to `ISymUnmanagedWriter::OpenScope` and [ISymUnmanagedWriter::CloseScope](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closescope-method.md) are ignored. Scope identifiers are only valid in the current method.  \n  \n## Requirements  \n **Header:** CorSym.idl, CorSym.h  \n  \n## See Also  \n [ISymUnmanagedWriter Interface](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)","nodes":[{"pos":[12,70],"content":"ISymUnmanagedWriter::SetScopeRange Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ISymUnmanagedWriter::SetScopeRange Method | Microsoft Docs","pos":[0,58]}]},{"pos":[737,778],"content":"ISymUnmanagedWriter::SetScopeRange Method","linkify":"ISymUnmanagedWriter::SetScopeRange Method","nodes":[{"content":"ISymUnmanagedWriter::SetScopeRange Method","pos":[0,41]}]},{"content":"Defines the offset range for the specified lexical scope.","pos":[779,836]},{"content":"The scope becomes the new current scope and is pushed onto a stack of scopes.","pos":[837,914]},{"content":"Scopes must form a hierarchy.","pos":[915,944]},{"content":"Siblings are not allowed to overlap.","pos":[945,981]},{"pos":[990,996],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1137,1147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The scope identifier for the scope.","pos":[1164,1204]},{"content":"[in] The offset, in bytes, of the first instruction in the lexical scope from the beginning of the method.","pos":[1228,1334]},{"content":"[in] The offset, in bytes, of the last instruction in the lexical scope from the beginning of the method.","pos":[1356,1461]},{"pos":[1470,1482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if the method succeeds; otherwise, E_FAIL or some other error code.","pos":[1486,1558]},{"pos":[1567,1574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<bpt id=\"p1\">[</bpt>ISymUnmanagedWriter::OpenScope<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-openscope-method.md)</ept> returns an opaque scope identifier that can be used with <ph id=\"ph1\">`ISymUnmanagedWriter::SetScopeRange`</ph> to define a scope's starting and ending offset at a later time.","pos":[1578,1862],"source":"[ISymUnmanagedWriter::OpenScope](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-openscope-method.md) returns an opaque scope identifier that can be used with `ISymUnmanagedWriter::SetScopeRange` to define a scope's starting and ending offset at a later time."},{"content":"In this case, the offsets passed to <ph id=\"ph1\">`ISymUnmanagedWriter::OpenScope`</ph> and <bpt id=\"p1\">[</bpt>ISymUnmanagedWriter::CloseScope<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closescope-method.md)</ept> are ignored.","pos":[1863,2077],"source":" In this case, the offsets passed to `ISymUnmanagedWriter::OpenScope` and [ISymUnmanagedWriter::CloseScope](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closescope-method.md) are ignored."},{"content":"Scope identifiers are only valid in the current method.","pos":[2078,2133]},{"pos":[2142,2154],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2158,2190],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorSym.idl, CorSym.h","source":"**Header:** CorSym.idl, CorSym.h"},{"pos":[2199,2207],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2211,2329],"content":"<bpt id=\"p1\">[</bpt>ISymUnmanagedWriter Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)</ept>","source":"[ISymUnmanagedWriter Interface](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)"}]}