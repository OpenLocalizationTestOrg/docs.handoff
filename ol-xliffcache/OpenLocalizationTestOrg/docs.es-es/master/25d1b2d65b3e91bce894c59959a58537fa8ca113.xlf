<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dotnet-vstest.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25d1b2d65b3e91bce894c59959a58537fa8ca113</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\dotnet-vstest.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8b8335d92ed9f6061bd7828e5cb010202f53bd1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5079993fd6b0566f9a51e0f26c0fc8977298061b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>dotnet vstest command</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>The dotnet vstest command builds a project and all of its dependencies.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>dotnet vstest</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet-vstest`</ph> - Runs tests from the specified files.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 2.1<ept id="p1">](#tab/netcore21)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 2.0<ept id="p1">](#tab/netcore20)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 1.x<ept id="p1">](#tab/netcore1x)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet-vstest`</ph> command runs the <ph id="ph2">`VSTest.Console`</ph> command-line application to run automated unit tests.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Run tests from the specified assemblies.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Separate multiple test assembly names with spaces.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Options</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 2.1<ept id="p1">](#tab/netcore21)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Settings to use when running tests.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Run tests with names that match the provided values.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Separate multiple values with commas.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use custom test adapters from a given path (if any) in the test run.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Target platform architecture used for test execution.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Valid values are <ph id="ph1">`x86`</ph>, <ph id="ph2">`x64`</ph>, and <ph id="ph3">`ARM`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Target .NET Framework version used for test execution.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Examples of valid values are <ph id="ph1">`.NETFramework,Version=v4.6`</ph> or <ph id="ph2">`.NETCoreApp,Version=v1.0`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Other supported values are <ph id="ph1">`Framework40`</ph>, <ph id="ph2">`Framework45`</ph>, <ph id="ph3">`FrameworkCore10`</ph>, and <ph id="ph4">`FrameworkUap10`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Execute tests in parallel.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, all available cores on the machine are available for use.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specify an explicit number of cores by setting the MaxCpuCount property under the RunConfiguration node in the runsettings file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Run tests that match the given expression.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;Expression&gt;`</ph> is of the format <ph id="ph2">`&lt;property&gt;Operator&lt;value&gt;[|&amp;&lt;Expression&gt;]`</ph>, where Operator is one of <ph id="ph3">`=`</ph>, <ph id="ph4">`!=`</ph>, or <ph id="ph5">`~`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Operator <ph id="ph1">`~`</ph> has 'contains' semantics and is applicable for string properties like <ph id="ph2">`DisplayName`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parenthesis <ph id="ph1">`()`</ph> are used to group sub-expressions.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Prints out a short help for the command.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Specify a logger for test results.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To publish test results to Team Foundation Server, use the <ph id="ph1">`TfsPublisher`</ph> logger provider:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To log results to a Visual Studio Test Results File (TRX), use the <ph id="ph1">`trx`</ph> logger provider.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This switch creates a file in the test results directory with given log file name.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`LogFileName`</ph> isn't provided, a unique file name is created to hold the test results.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Lists all discovered tests from the given test container.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Process ID of the parent process responsible for launching the current process.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Specifies the port for the socket connection and receiving the event messages.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Enables verbose logs for the test platform.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Logs are written to the provided file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Runs the tests in blame mode.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This option is helpful in isolating the problematic tests causing test host to crash.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It creates an output file in the current directory as <bpt id="p1">*</bpt>Sequence.xml<ept id="p1">*</ept> that captures the order of tests execution before the crash.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Runs the tests in an isolated process.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This makes <bpt id="p1">*</bpt>vstest.console.exe<ept id="p1">*</ept> process less likely to be stopped on an error in the tests, but tests may run slower.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Reads response file for more options.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifies extra arguments to pass to the adapter.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Arguments are specified as name-value pairs of the form <ph id="ph1">`&lt;n&gt;=&lt;v&gt;`</ph>, where <ph id="ph2">`&lt;n&gt;`</ph> is the argument name and <ph id="ph3">`&lt;v&gt;`</ph> is the argument value.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use a space to separate multiple arguments.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 2.0<ept id="p1">](#tab/netcore20)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Settings to use when running tests.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Run tests with names that match the provided values.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Separate multiple values with commas.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Use custom test adapters from a given path (if any) in the test run.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Target platform architecture used for test execution.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Valid values are <ph id="ph1">`x86`</ph>, <ph id="ph2">`x64`</ph>, and <ph id="ph3">`ARM`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Target .NET Framework version used for test execution.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Examples of valid values are <ph id="ph1">`.NETFramework,Version=v4.6`</ph> or <ph id="ph2">`.NETCoreApp,Version=v1.0`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Other supported values are <ph id="ph1">`Framework40`</ph>, <ph id="ph2">`Framework45`</ph>, and <ph id="ph3">`FrameworkCore10`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Execute tests in parallel.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>By default, all available cores on the machine are available for use.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Specify an explicit number of cores by setting the MaxCpuCount property under the RunConfiguration node in the runsettings file.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Run tests that match the given expression.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;Expression&gt;`</ph> is of the format <ph id="ph2">`&lt;property&gt;Operator&lt;value&gt;[|&amp;&lt;Expression&gt;]`</ph>, where Operator is one of <ph id="ph3">`=`</ph>, <ph id="ph4">`!=`</ph>, or <ph id="ph5">`~`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Operator <ph id="ph1">`~`</ph> has 'contains' semantics and is applicable for string properties like <ph id="ph2">`DisplayName`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Parenthesis <ph id="ph1">`()`</ph> are used to group sub-expressions.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Prints out a short help for the command.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Specify a logger for test results.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To publish test results to Team Foundation Server, use the <ph id="ph1">`TfsPublisher`</ph> logger provider:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To log results to a Visual Studio Test Results File (TRX), use the <ph id="ph1">`trx`</ph> logger provider.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This switch creates a file in the test results directory with given log file name.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`LogFileName`</ph> isn't provided, a unique file name is created to hold the test results.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Lists all discovered tests from the given test container.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Process ID of the parent process responsible for launching the current process.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Specifies the port for the socket connection and receiving the event messages.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Enables verbose logs for the test platform.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Logs are written to the provided file.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Specifies extra arguments to pass to the adapter.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Arguments are specified as name-value pairs of the form <ph id="ph1">`&lt;n&gt;=&lt;v&gt;`</ph>, where <ph id="ph2">`&lt;n&gt;`</ph> is the argument name and <ph id="ph3">`&lt;v&gt;`</ph> is the argument value.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use a space to separate multiple arguments.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 1.x<ept id="p1">](#tab/netcore1x)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Settings to use when running tests.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Run tests with names that match the provided values.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Separate multiple values with commas.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use custom test adapters from a given path (if any) in the test run.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Target platform architecture used for test execution.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Valid values are <ph id="ph1">`x86`</ph>, <ph id="ph2">`x64`</ph>, and <ph id="ph3">`ARM`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Target .NET Framework version used for test execution.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Examples of valid values are <ph id="ph1">`.NETFramework,Version=v4.6`</ph> or <ph id="ph2">`.NETCoreApp,Version=v1.0`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Other supported values are <ph id="ph1">`Framework40`</ph>, <ph id="ph2">`Framework45`</ph>, and <ph id="ph3">`FrameworkCore10`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Execute tests in parallel.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>By default, all available cores on the machine are available for use.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Specify an explicit number of cores by setting the MaxCpuCount property under the RunConfiguration node in the runsettings file.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Run tests that match the given expression.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;Expression&gt;`</ph> is of the format <ph id="ph2">`&lt;property&gt;Operator&lt;value&gt;[|&amp;&lt;Expression&gt;]`</ph>, where Operator is one of <ph id="ph3">`=`</ph>, <ph id="ph4">`!=`</ph>, or <ph id="ph5">`~`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Operator <ph id="ph1">`~`</ph> has 'contains' semantics and is applicable for string properties like <ph id="ph2">`DisplayName`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Parenthesis <ph id="ph1">`()`</ph> are used to group sub-expressions.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Prints out a short help for the command.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Specify a logger for test results.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To publish test results to Team Foundation Server, use the <ph id="ph1">`TfsPublisher`</ph> logger provider:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To log results to a Visual Studio Test Results File (TRX), use the <ph id="ph1">`trx`</ph> logger provider.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This switch creates a file in the test results directory with given log file name.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`LogFileName`</ph> isn't provided, a unique file name is created to hold the test results.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Lists all discovered tests from the given test container.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Process ID of the parent process responsible for launching the current process.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Specifies the port for the socket connection and receiving the event messages.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Enables verbose logs for the test platform.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Logs are written to the provided file.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Specifies extra arguments to pass to the adapter.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Arguments are specified as name-value pairs of the form <ph id="ph1">`&lt;n&gt;=&lt;v&gt;`</ph>, where <ph id="ph2">`&lt;n&gt;`</ph> is the argument name and <ph id="ph3">`&lt;v&gt;`</ph> is the argument value.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Use a space to separate multiple arguments.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Run tests in <ph id="ph1">`mytestproject.dll`</ph>:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Run tests in <ph id="ph1">`mytestproject.dll`</ph>, exporting to custom folder with custom name:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Run tests in <ph id="ph1">`mytestproject.dll`</ph> and <ph id="ph2">`myothertestproject.exe`</ph>:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`TestMethod1`</ph> tests:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`TestMethod1`</ph> and <ph id="ph2">`TestMethod2`</ph> tests:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>