<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-create-a-class-using-codedom.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99fa1fcb300d523d74a07da09e5a04848364607e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\how-to-create-a-class-using-codedom.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f5a5f23cc7d3c772f63f73754819d04578686ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e62f915e58d9fdb6ed520a8c062df5c3db3c25c5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Create a Class Using CodeDOM</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Class Using CodeDOM</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following procedures illustrate how to create and compile a CodeDOM graph that generates a class containing two fields, three properties, a method, a constructor, and an entry point.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create a console application that will use CodeDOM code to generate the source code for a class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this example, the generating class is named <ph id="ph1">`Sample`</ph>, and the generated code is a class named <ph id="ph2">`CodeDOMCreatedClass`</ph> in a file named SampleCode.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the generating class, initialize the CodeDOM graph and use CodeDOM methods to define the members, constructor, and entry point (<ph id="ph1">`Main`</ph> method) of the generated class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In this example, the generated class has two fields, three properties, a constructor, a method, and a <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the generating class, create a language-specific code provider and call its <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph> method to generate the code from the graph.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Compile and execute the application to generate the code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this example, the generated code is in a file named SampleCode.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Compile and execute that code to see the sample output.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To create the application that will execute the CodeDOM code</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Create a console application class to contain the CodeDOM code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Define the global fields that are to be used in the class to reference the assembly (<ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>) and class (<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>), specify the name of the generated source file, and declare the <ph id="ph3">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To initialize the CodeDOM graph</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the constructor for the console application class, initialize the assembly and class, and add the appropriate declarations to the CodeDOM graph.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To add members to the CodeDOM graph</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Add fields to the CodeDOM graph by adding <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberField&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property of the class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Add properties to the CodeDOM graph by adding <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberProperty&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property of the class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add a method to the CodeDOM graph by adding a <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberMethod&gt;</ph> object to the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property of the class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add a constructor to the CodeDOM graph by adding a <ph id="ph1">&lt;xref:System.CodeDom.CodeConstructor&gt;</ph> object to the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property of the class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Add an entry point to the CodeDOM graph by adding a <ph id="ph1">&lt;xref:System.CodeDom.CodeEntryPointMethod&gt;</ph> object to the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property of the class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To generate the code from the CodeDOM graph</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generate source code from the CodeDOM graph by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To create the graph and generate the code</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add the methods created in the preceding steps to the <ph id="ph1">`Main`</ph> method defined in the first step.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Compile and execute the generating class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code example shows the code from the preceding steps.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When the preceding example is compiled and executed, it produces the following source code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The generated source code produces the following output when compiled and executed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This code example requires the <ph id="ph1">`FullTrust`</ph> permission set to execute successfully.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using the CodeDOM<ept id="p1">](../../../docs/framework/reflection-and-codedom/using-the-codedom.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generating and Compiling Source Code from a CodeDOM Graph<ept id="p1">](../../../docs/framework/reflection-and-codedom/generating-and-compiling-source-code-from-a-codedom-graph.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>