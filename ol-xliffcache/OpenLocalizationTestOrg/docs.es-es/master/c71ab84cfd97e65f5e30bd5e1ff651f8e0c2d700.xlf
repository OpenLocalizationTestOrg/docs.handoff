<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="deploy-with-cli.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c71ab84cfd97e65f5e30bd5e1ff651f8e0c2d700</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\deploying\deploy-with-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f748986aae398775fb789fdb21639b2040a8bfb2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d454cfc75b88dbdc679d135e8afee5126cdff4dc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Publish .NET Core apps with the CLI</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn to publish a .NET Core app with the .NET Core SDK command-line interface (CLI) tools.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Publish .NET Core apps with the CLI</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article demonstrates how you can publish your .NET Core application from the command line.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET Core provides three ways to publish your applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Framework-dependent deployment produces a cross-platform .dll file that uses the locally installed .NET Core runtime.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Framework-dependent executable produces a platform-specific executable that uses the locally installed .NET Core runtime.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Self-contained executable produces a platform-specific executable and includes a local copy of the .NET Core runtime.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For an overview of these publishing modes, see <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Looking for some quick help on using the CLI?</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table shows some examples of how to publish your app.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can specify the target framework with the <ph id="ph1">`-f &lt;TFM&gt;`</ph> parameter or by editing the project file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Publishing basics<ept id="p1">](#publishing-basics)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Publish Mode</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>SDK Version</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Command</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Framework-dependent deployment</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>2.x</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Framework-dependent executable</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>2.2</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>3.0</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>3.0*</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Self-contained deployment</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>2.1</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>2.2</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>3.0</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\*</ph>When using SDK version 3.0, framework-dependent executable this is the default publishing mode when running the basic <ph id="ph2">`dotnet publish`</ph> command.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This only applies to projects that target <bpt id="p1">**</bpt>.NET Core 2.1<ept id="p1">**</ept> or <bpt id="p2">**</bpt>.NET Core 3.0<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Publishing basics</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;TargetFramework&gt;`</ph> setting of the project file specifies the default target framework when you publish your app.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can change the target framework to any valid <bpt id="p1">[</bpt>Target Framework Moniker (TFM)<ept id="p1">](../../standard/frameworks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, if your project uses <ph id="ph1">`&lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;`</ph>, a binary that targets .NET Core 2.2 is created.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The TFM specified in this setting is the default target used by the <bpt id="p1">[</bpt><ph id="ph1">`dotnet publish`</ph><ept id="p1">](../tools/dotnet-publish.md)</ept> command.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you want to target more than one framework, you can set the <ph id="ph1">`&lt;TargetFrameworks&gt;`</ph> setting to more than one TFM value separated by a semicolon.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can publish one of the frameworks with the <ph id="ph1">`dotnet publish -f &lt;TFM&gt;`</ph> command.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, if you have <ph id="ph1">`&lt;TargetFrameworks&gt;netcoreapp2.1;netcoreapp2.2&lt;/TargetFrameworks&gt;`</ph> and run <ph id="ph2">`dotnet publish -f netcoreapp2.1`</ph>, a binary that targets .NET Core 2.1 is created.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Unless otherwise set, the output directory of the <bpt id="p1">[</bpt><ph id="ph1">`dotnet publish`</ph><ept id="p1">](../tools/dotnet-publish.md)</ept> command is <ph id="ph2">`./bin/&lt;BUILD-CONFIGURATION&gt;/&lt;TFM&gt;/publish/`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default <bpt id="p1">**</bpt>BUILD-CONFIGURATION<ept id="p1">**</ept> mode is <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> unless changed with the <ph id="ph1">`-c`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`dotnet publish -c Release -f netcoreapp2.1`</ph> publishes to <ph id="ph2">`myfolder/bin/Release/netcoreapp2.1/publish/`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you use .NET Core SDK 3.0, the default publish mode for apps that target .NET Core versions 2.1, 2.2, or 3.0 is framework-dependent executable.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you use .NET Core SDK 2.1, the default publish mode for apps that target .NET Core versions 2.1, 2.2 is framework-dependent deployment.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Native dependencies</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If your app has native dependencies, it may not run on a different operating system.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, if your app uses the native Windows API, it won't run on macOS or Linux.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You would need to provide platform-specific code and compile an executable for each platform.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Consider also, if a library you referenced has a native dependency, your app may not run on every platform.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>However, it's possible a NuGet package you're referencing has included platform-specific versions to handle the required native dependencies for you.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When distributing an app with native dependencies, you may need to use the <ph id="ph1">`dotnet publish -r &lt;RID&gt;`</ph> switch to specify the target platform you want to publish for.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For a list of runtime identifiers, see <bpt id="p1">[</bpt>Runtime Identifier (RID) catalog<ept id="p1">](../rid-catalog.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>More information about platform-specific binaries is covered in the <bpt id="p1">[</bpt>Framework-dependent executable<ept id="p1">](#framework-dependent-executable)</ept> and <bpt id="p2">[</bpt>Self-contained deployment<ept id="p2">](#self-contained-deployment)</ept> sections.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Sample app</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can use either the following app to explore the publishing commands.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The app is created by running the following commands in your terminal:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Program.cs`</ph> or <ph id="ph2">`Program.vb`</ph> file that is generated by the console template needs to be changed to the following:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When you run the app (<bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept>), the following output is displayed:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Framework-dependent deployment</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For the .NET Core SDK 2.x CLI, framework-dependent deployment (FDD) is the default mode for the basic <ph id="ph1">`dotnet publish`</ph> command.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you publish your app as an FDD, a <ph id="ph1">`&lt;PROJECT-NAME&gt;.dll`</ph> file is created in the <ph id="ph2">`./bin/&lt;BUILD-CONFIGURATION&gt;/&lt;TFM&gt;/publish/`</ph> folder.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To run your app, navigate to the output folder and use the <ph id="ph1">`dotnet &lt;PROJECT-NAME&gt;.dll`</ph> command.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Your app is configured to target a specific version of .NET Core.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>That targeted .NET Core runtime is required to be on the machine where you want to run your app.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, if your app targets .NET Core 2.2, any machine that your app runs on must have the .NET Core 2.2 runtime installed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>As stated in the <bpt id="p1">[</bpt>Publishing basics<ept id="p1">](#publishing-basics)</ept> section, you can edit your project file to change the default target framework or to target more than one framework.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Publishing an FDD creates an app that automatically rolls-forward to the latest .NET Core security patch available on the system that runs the app.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information on version binding at compile time, see <bpt id="p1">[</bpt>Select the .NET Core version to use<ept id="p1">](../versions/selection.md#framework-dependent-apps-roll-forward)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Framework-dependent executable</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For the .NET Core SDK 3.x CLI, framework-dependent executable (FDE) the default mode for the basic <ph id="ph1">`dotnet publish`</ph> command.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You don't need to specify any other parameters as long as you want to target the current operating system.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In this mode, a platform-specific executable host is created to host your cross-platform app.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This mode is similar to FDD as FDD requires a host in the form of the <ph id="ph1">`dotnet`</ph> command.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The host executable filename varies per platform, and is named something similar to <ph id="ph1">`&lt;PROJECT-FILE&gt;.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can run this executable directly instead of calling <ph id="ph1">`dotnet &lt;PROJECT-FILE&gt;.dll`</ph> which is still an acceptable way to run the app.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Your app is configured to target a specific version of .NET Core.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>That targeted .NET Core runtime is required to be on the machine where you want to run your app.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, if your app targets .NET Core 2.2, any machine that your app runs on must have the .NET Core 2.2 runtime installed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>As stated in the <bpt id="p1">[</bpt>Publishing basics<ept id="p1">](#publishing-basics)</ept> section, you can edit your project file to change the default target framework or to target more than one framework.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Publishing an FDE creates an app that automatically rolls-forward to the latest .NET Core security patch available on the system that runs the app.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information on version binding at compile time, see <bpt id="p1">[</bpt>Select the .NET Core version to use<ept id="p1">](../versions/selection.md#framework-dependent-apps-roll-forward)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You must (except for .NET Core 3.x when you target the current platform) use the following switches with the <ph id="ph1">`dotnet publish`</ph> command to publish an FDE:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-r &lt;RID&gt;`</ph> This switch uses an identifier (RID) to specify the target platform.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For a list of runtime identifiers, see <bpt id="p1">[</bpt>Runtime Identifier (RID) catalog<ept id="p1">](../rid-catalog.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`--self-contained false`</ph> This switch tells the .NET Core SDK to create an executable as an FDE.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Whenever you use the <ph id="ph1">`-r`</ph> switch, the output folder path changes to: <ph id="ph2">`./bin/&lt;BUILD-CONFIGURATION&gt;/&lt;TFM&gt;/&lt;RID&gt;/publish/`</ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">[</bpt>example app<ept id="p1">](#sample-app)</ept>, run <ph id="ph1">`dotnet publish -f netcoreapp2.2 -r win10-x64 --self-contained false`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This command creates the following executable: <ph id="ph1">`./bin/Debug/netcoreapp2.2/win10-x64/publish/apptest1.exe`</ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can reduce the total size of your deployment by enabling <bpt id="p1">**</bpt>globalization invariant mode<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This mode is useful for applications that are not globally aware and that can use the formatting conventions, casing conventions, and string comparison and sort order of the <bpt id="p1">[</bpt>invariant culture<ept id="p1">](xref:System.Globalization.CultureInfo.InvariantCulture)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information about <bpt id="p1">**</bpt>globalization invariant mode<ept id="p1">**</ept> and how to enable it, see <bpt id="p2">[</bpt>.NET Core Globalization Invariant Mode<ept id="p2">](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/globalization-invariant-mode.md)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Self-contained deployment</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When you publish a self-contained deployment (SCD), the .NET Core SDK creates a platform-specific executable.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Publishing an SCD includes all  required .NET Core files to run your app but it doesn't include the <bpt id="p1">[</bpt>native dependencies of .NET Core<ept id="p1">](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These dependencies must be present on the system before the app runs.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Publishing an SCD creates an app that doesn't roll-forward to the latest available .NET Core security patch.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information on version binding at compile time, see <bpt id="p1">[</bpt>Select the .NET Core version to use<ept id="p1">](../versions/selection.md#self-contained-deployments-include-the-selected-runtime)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You must use the following switches with the <ph id="ph1">`dotnet publish`</ph> command to publish an SCD:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-r &lt;RID&gt;`</ph> This switch uses an identifier (RID) to specify the target platform.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For a list of runtime identifiers, see <bpt id="p1">[</bpt>Runtime Identifier (RID) catalog<ept id="p1">](../rid-catalog.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`--self-contained true`</ph> This switch tells the .NET Core SDK to create an executable as an SCD.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can reduce the total size of your deployment by enabling <bpt id="p1">**</bpt>globalization invariant mode<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This mode is useful for applications that are not globally aware and that can use the formatting conventions, casing conventions, and string comparison and sort order of the <bpt id="p1">[</bpt>invariant culture<ept id="p1">](xref:System.Globalization.CultureInfo.InvariantCulture)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information about <bpt id="p1">**</bpt>globalization invariant mode<ept id="p1">**</ept> and how to enable it, see <bpt id="p2">[</bpt>.NET Core Globalization Invariant Mode<ept id="p2">](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/globalization-invariant-mode.md)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Application Deployment Overview<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Runtime IDentifier (RID) catalog<ept id="p1">](../rid-catalog.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>