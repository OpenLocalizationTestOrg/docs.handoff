<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-determine-whether-a-string-represents-a-numeric-value.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcba1651c736b58b2c95bac21f086c46417629df</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\strings\how-to-determine-whether-a-string-represents-a-numeric-value.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">018763ad923273aa42bd0b2cf7cba8bb8aa9eb9e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd96c5aa43f47d78d0f8059b5455556630b4e3fe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Determine Whether a String Represents a Numeric Value - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To determine whether a string is a valid representation of a specified numeric type, use the static <ph id="ph1">`TryParse`</ph> method that is implemented by all primitive numeric types and also by types such as <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.IPAddress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following example shows how to determine whether "108" is a valid <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the string contains nonnumeric characters or the numeric value is too large or too small for the particular type you have specified, <ph id="ph1">`TryParse`</ph> returns false and sets the out parameter to zero.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns true and sets the out parameter to the numeric value of the string.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A string may contain only numeric characters and still not be valid for the type whose <ph id="ph1">`TryParse`</ph> method that you use.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, "256" is not a valid value for <ph id="ph1">`byte`</ph> but it is valid for <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>"98.6" is not a valid value for <ph id="ph1">`int`</ph> but it is a valid <ph id="ph2">`decimal`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following examples show how to use <ph id="ph1">`TryParse`</ph> with string representations of <ph id="ph2">`long`</ph>, <ph id="ph3">`byte`</ph>, and <ph id="ph4">`decimal`</ph> values.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Primitive numeric types also implement the <ph id="ph1">`Parse`</ph> static method, which throws an exception if the string is not a valid number.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TryParse`</ph> is generally more efficient because it just returns false if the number is not valid.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>.NET Framework Security</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Always use the <ph id="ph1">`TryParse`</ph> or <ph id="ph2">`Parse`</ph> methods to validate user input from controls such as text boxes and combo boxes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Convert a byte Array to an int<ept id="p1">](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Convert a String to a Number<ept id="p1">](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Convert Between Hexadecimal Strings and Numeric Types<ept id="p1">](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing Numeric Strings<ept id="p1">](../../../standard/base-types/parsing-numeric.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting Types<ept id="p1">](../../../standard/base-types/formatting-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>