{"content":"---\ntitle: \"Refactoring Into Pure Functions (C#)\"\nms.date: 07/20/2015\nms.assetid: 2944a0d4-fd33-4e2e-badd-abb0f9be2fcc\n---\n# Refactoring Into Pure Functions (C#)\n\nAn important aspect of pure functional transformations is learning how to refactor code using pure functions.  \n  \n> [!NOTE]\n>  The common nomenclature in functional programming is that you refactor programs using pure functions. In Visual Basic and C++, this aligns with the use of functions in the respective languages. However, in C#, functions are called methods. For the purposes of this discussion, a pure function is implemented as a method in C#.  \n  \n As noted previously in this section, a pure function has two useful characteristics:  \n  \n-   It has no side effects. The function does not change any variables or the data of any type outside of the function.  \n  \n-   It is consistent. Given the same set of input data, it will always return the same output value.  \n  \n One way of transitioning to functional programming is to refactor existing code to eliminate unnecessary side effects and external dependencies. In this way, you can create pure function versions of existing code.  \n  \n This topic discusses what a pure function is and what it is not. The [Tutorial: Manipulating Content in a WordprocessingML Document (C#)](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md) tutorial shows how to manipulate a WordprocessingML document, and includes two examples of how to refactor using a pure function.  \n  \n## Eliminating Side Effects and External Dependencies  \n The following examples contrast two non-pure functions and a pure function.  \n  \n### Non-Pure Function that Changes a Class Member  \n In the following code, the `HyphenatedConcat` function is not a pure function, because it modifies the `aMember` data member in the class:  \n  \n```csharp  \npublic class Program  \n{  \n    private static string aMember = \"StringOne\";  \n  \n    public static void HyphenatedConcat(string appendStr)  \n    {  \n        aMember += '-' + appendStr;  \n    }  \n  \n    public static void Main()  \n    {  \n        HyphenatedConcat(\"StringTwo\");  \n        Console.WriteLine(aMember);  \n    }  \n}  \n```  \n  \n This code produces the following output:  \n  \n```  \nStringOne-StringTwo  \n```  \n  \n Note that it is irrelevant whether the data being modified has `public` or `private` access, or is a `static` member or an instance member. A pure function does not change any data outside of the function.  \n  \n### Non-Pure Function that Changes an Argument  \n Furthermore, the following version of this same function is not pure because it modifies the contents of its parameter, `sb`.  \n  \n```csharp  \npublic class Program  \n{  \n    public static void HyphenatedConcat(StringBuilder sb, String appendStr)  \n    {  \n        sb.Append('-' + appendStr);  \n    }  \n  \n    public static void Main()  \n    {  \n        StringBuilder sb1 = new StringBuilder(\"StringOne\");  \n        HyphenatedConcat(sb1, \"StringTwo\");  \n        Console.WriteLine(sb1);  \n    }  \n}  \n```  \n  \n This version of the program produces the same output as the first version, because the `HyphenatedConcat` function has changed the value (state) of its first parameter by invoking the <xref:System.Text.StringBuilder.Append%2A> member function. Note that this alteration occurs despite that fact that `HyphenatedConcat` uses call-by-value parameter passing.  \n  \n> [!IMPORTANT]\n>  For reference types, if you pass a parameter by value, it results in a copy of the reference to an object being passed. This copy is still associated with the same instance data as the original reference (until the reference variable is assigned to a new object). Call-by-reference is not necessarily required for a function to modify a parameter.  \n  \n### Pure Function  \nThis next version of the program shows how to implement the `HyphenatedConcat` function as a pure function.  \n  \n```csharp  \nclass Program  \n{  \n    public static string HyphenatedConcat(string s, string appendStr)  \n    {  \n        return (s + '-' + appendStr);  \n    }  \n  \n    public static void Main(string[] args)  \n    {  \n        string s1 = \"StringOne\";  \n        string s2 = HyphenatedConcat(s1, \"StringTwo\");  \n        Console.WriteLine(s2);  \n    }  \n}  \n```  \n  \n Again, this version produces the same line of output: `StringOne-StringTwo`. Note that to retain the concatenated value, it is stored in the intermediate variable `s2`.  \n  \n One approach that can be very useful is to write functions that are locally impure (that is, they declare and modify local variables) but are globally pure. Such functions have many of the desirable composability characteristics, but avoid some of the more convoluted functional programming idioms, such as having to use recursion when a simple loop would accomplish the same thing.  \n  \n## Standard Query Operators  \n An important characteristic of the standard query operators is that they are implemented as pure functions.  \n  \n For more information, see [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md).  \n  \n## See also\n\n- [Introduction to Pure Functional Transformations (C#)](../../../../csharp/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)\n- [Functional Programming vs. Imperative Programming (C#)](../../../../csharp/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)\n","nodes":[{"pos":[4,118],"embed":true,"restype":"x-metadata","content":"title: \"Refactoring Into Pure Functions (C#)\"\nms.date: 07/20/2015\nms.assetid: 2944a0d4-fd33-4e2e-badd-abb0f9be2fcc","nodes":[{"content":"Refactoring Into Pure Functions (C#)","nodes":[{"pos":[0,36],"content":"Refactoring Into Pure Functions (C#)","nodes":[{"content":"Refactoring Into Pure Functions (C#)","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[125,161],"content":"Refactoring Into Pure Functions (C#)","linkify":"Refactoring Into Pure Functions (C#)","nodes":[{"content":"Refactoring Into Pure Functions (C#)","pos":[0,36]}]},{"content":"An important aspect of pure functional transformations is learning how to refactor code using pure functions.","pos":[163,272]},{"pos":[280,617],"content":"[!NOTE]\n The common nomenclature in functional programming is that you refactor programs using pure functions. In Visual Basic and C++, this aligns with the use of functions in the respective languages. However, in C#, functions are called methods. For the purposes of this discussion, a pure function is implemented as a method in C#.","leadings":["","> "],"nodes":[{"content":"The common nomenclature in functional programming is that you refactor programs using pure functions. In Visual Basic and C++, this aligns with the use of functions in the respective languages. However, in C#, functions are called methods. For the purposes of this discussion, a pure function is implemented as a method in C#.","pos":[9,335],"nodes":[{"content":"The common nomenclature in functional programming is that you refactor programs using pure functions.","pos":[0,101]},{"content":"In Visual Basic and C++, this aligns with the use of functions in the respective languages.","pos":[102,193]},{"content":"However, in C#, functions are called methods.","pos":[194,239]},{"content":"For the purposes of this discussion, a pure function is implemented as a method in C#.","pos":[240,326]}]}]},{"content":"As noted previously in this section, a pure function has two useful characteristics:","pos":[624,708]},{"content":"It has no side effects.","pos":[718,741]},{"content":"The function does not change any variables or the data of any type outside of the function.","pos":[742,833]},{"content":"It is consistent.","pos":[843,860]},{"content":"Given the same set of input data, it will always return the same output value.","pos":[861,939]},{"content":"One way of transitioning to functional programming is to refactor existing code to eliminate unnecessary side effects and external dependencies.","pos":[946,1090]},{"content":"In this way, you can create pure function versions of existing code.","pos":[1091,1159]},{"content":"This topic discusses what a pure function is and what it is not.","pos":[1166,1230]},{"content":"The <bpt id=\"p1\">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept> tutorial shows how to manipulate a WordprocessingML document, and includes two examples of how to refactor using a pure function.","pos":[1231,1549],"source":" The [Tutorial: Manipulating Content in a WordprocessingML Document (C#)](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md) tutorial shows how to manipulate a WordprocessingML document, and includes two examples of how to refactor using a pure function."},{"pos":[1558,1608],"content":"Eliminating Side Effects and External Dependencies","linkify":"Eliminating Side Effects and External Dependencies","nodes":[{"content":"Eliminating Side Effects and External Dependencies","pos":[0,50]}]},{"content":"The following examples contrast two non-pure functions and a pure function.","pos":[1612,1687]},{"pos":[1697,1742],"content":"Non-Pure Function that Changes a Class Member","linkify":"Non-Pure Function that Changes a Class Member","nodes":[{"content":"Non-Pure Function that Changes a Class Member","pos":[0,45]}]},{"pos":[1746,1884],"content":"In the following code, the <ph id=\"ph1\">`HyphenatedConcat`</ph> function is not a pure function, because it modifies the <ph id=\"ph2\">`aMember`</ph> data member in the class:","source":"In the following code, the `HyphenatedConcat` function is not a pure function, because it modifies the `aMember` data member in the class:"},{"content":"This code produces the following output:","pos":[2241,2281]},{"content":"Note that it is irrelevant whether the data being modified has <ph id=\"ph1\">`public`</ph> or <ph id=\"ph2\">`private`</ph> access, or is a <ph id=\"ph3\">`static`</ph> member or an instance member.","pos":[2325,2464],"source":"Note that it is irrelevant whether the data being modified has `public` or `private` access, or is a `static` member or an instance member."},{"content":"A pure function does not change any data outside of the function.","pos":[2465,2530]},{"pos":[2540,2582],"content":"Non-Pure Function that Changes an Argument","linkify":"Non-Pure Function that Changes an Argument","nodes":[{"content":"Non-Pure Function that Changes an Argument","pos":[0,42]}]},{"pos":[2586,2711],"content":"Furthermore, the following version of this same function is not pure because it modifies the contents of its parameter, <ph id=\"ph1\">`sb`</ph>.","source":"Furthermore, the following version of this same function is not pure because it modifies the contents of its parameter, `sb`."},{"content":"This version of the program produces the same output as the first version, because the <ph id=\"ph1\">`HyphenatedConcat`</ph> function has changed the value (state) of its first parameter by invoking the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> member function.","pos":[3095,3338],"source":"This version of the program produces the same output as the first version, because the `HyphenatedConcat` function has changed the value (state) of its first parameter by invoking the <xref:System.Text.StringBuilder.Append%2A> member function."},{"content":"Note that this alteration occurs despite that fact that <ph id=\"ph1\">`HyphenatedConcat`</ph> uses call-by-value parameter passing.","pos":[3339,3451],"source":" Note that this alteration occurs despite that fact that `HyphenatedConcat` uses call-by-value parameter passing."},{"pos":[3459,3822],"content":"[!IMPORTANT]\n For reference types, if you pass a parameter by value, it results in a copy of the reference to an object being passed. This copy is still associated with the same instance data as the original reference (until the reference variable is assigned to a new object). Call-by-reference is not necessarily required for a function to modify a parameter.","leadings":["","> "],"nodes":[{"content":"For reference types, if you pass a parameter by value, it results in a copy of the reference to an object being passed. This copy is still associated with the same instance data as the original reference (until the reference variable is assigned to a new object). Call-by-reference is not necessarily required for a function to modify a parameter.","pos":[14,361],"nodes":[{"content":"For reference types, if you pass a parameter by value, it results in a copy of the reference to an object being passed.","pos":[0,119]},{"content":"This copy is still associated with the same instance data as the original reference (until the reference variable is assigned to a new object).","pos":[120,263]},{"content":"Call-by-reference is not necessarily required for a function to modify a parameter.","pos":[264,347]}]}]},{"pos":[3832,3845],"content":"Pure Function","linkify":"Pure Function","nodes":[{"content":"Pure Function","pos":[0,13]}]},{"pos":[3848,3955],"content":"This next version of the program shows how to implement the <ph id=\"ph1\">`HyphenatedConcat`</ph> function as a pure function.","source":"This next version of the program shows how to implement the `HyphenatedConcat` function as a pure function."},{"content":"Again, this version produces the same line of output: <ph id=\"ph1\">`StringOne-StringTwo`</ph>.","pos":[4324,4400],"source":"Again, this version produces the same line of output: `StringOne-StringTwo`."},{"content":"Note that to retain the concatenated value, it is stored in the intermediate variable <ph id=\"ph1\">`s2`</ph>.","pos":[4401,4492],"source":" Note that to retain the concatenated value, it is stored in the intermediate variable `s2`."},{"content":"One approach that can be very useful is to write functions that are locally impure (that is, they declare and modify local variables) but are globally pure.","pos":[4499,4655]},{"content":"Such functions have many of the desirable composability characteristics, but avoid some of the more convoluted functional programming idioms, such as having to use recursion when a simple loop would accomplish the same thing.","pos":[4656,4881]},{"pos":[4890,4914],"content":"Standard Query Operators","linkify":"Standard Query Operators","nodes":[{"content":"Standard Query Operators","pos":[0,24]}]},{"content":"An important characteristic of the standard query operators is that they are implemented as pure functions.","pos":[4918,5025]},{"pos":[5032,5188],"content":"For more information, see <bpt id=\"p1\">[</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.","source":"For more information, see [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)."},{"pos":[5197,5205],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5209,5366],"content":"<bpt id=\"p1\">[</bpt>Introduction to Pure Functional Transformations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept>","source":"[Introduction to Pure Functional Transformations (C#)](../../../../csharp/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)"},{"pos":[5369,5529],"content":"<bpt id=\"p1\">[</bpt>Functional Programming vs. Imperative Programming (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept>","source":"[Functional Programming vs. Imperative Programming (C#)](../../../../csharp/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)"}]}