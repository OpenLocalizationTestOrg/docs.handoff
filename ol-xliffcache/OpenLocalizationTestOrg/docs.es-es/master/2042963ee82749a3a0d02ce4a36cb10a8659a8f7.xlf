<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2042963ee82749a3a0d02ce4a36cb10a8659a8f7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\advanced\com-interop-by-displaying-a-windows-form-shadow.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97d69b9d1619bc952b71989a9a354196dd2c1ee8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63c3a3470346457e3fefc9d7ce12552f5cc2b004</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Support COM Interop by Displaying a Windows Form with the ShowDialog Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Support COM Interop by Displaying a Windows Form with the ShowDialog Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can resolve Component Object Model (COM) interoperability problems by displaying your Windows Form on a <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> message loop, which is created by using the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To make a form work correctly from a COM client application, you must run it on a Windows Forms message loop.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To do this, use one of the following approaches:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName&gt;</ph> method to display the Windows Form;</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Display each Windows Form on a separate thread.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-support-com-interop-by-displaying-each-windows-form-on-its-own-thread.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Procedure</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName&gt;</ph> method can be the easiest way to display a form on a <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> message loop because, of all the approaches, it requires the least code to implement.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName&gt;</ph> method suspends the unmanaged application's message loop and displays the form as a dialog box.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because the host application's message loop has been suspended, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName&gt;</ph> method creates a new <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> message loop to process the form's messages.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The disadvantage of using the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName&gt;</ph> method is that the form will be opened as a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This behavior blocks any user interface (UI) in the calling application while the Windows Form is open.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When the user exits the form, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> message loop closes and the earlier application's message loop starts running again.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can create a class library in Windows Forms which has a method to show the form, and then build the class library for COM interop.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use this DLL file from Visual Basic 6.0 or Microsoft Foundation Classes (MFC), and from either of these environments you can call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName&gt;</ph> method to display the form.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To support COM interop by displaying a windows form with the ShowDialog method</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Replace all calls to the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Show%2A?displayProperty=fullName&gt;</ph> method with calls to the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName&gt;</ph> method in your <ph id="ph3">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> component.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exposing .NET Framework Components to COM<ept id="p1">](../../../../docs/framework/interop/exposing-dotnet-components-to-com.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-support-com-interop-by-displaying-each-windows-form-on-its-own-thread.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Windows Forms and Unmanaged Applications<ept id="p1">](../../../../docs/framework/winforms/advanced/windows-forms-and-unmanaged-applications.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>