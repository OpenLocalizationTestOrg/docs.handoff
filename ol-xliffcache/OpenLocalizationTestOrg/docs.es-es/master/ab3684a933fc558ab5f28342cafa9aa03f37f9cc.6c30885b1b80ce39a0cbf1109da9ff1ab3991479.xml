{"content":"---\ntitle: \"Trace Listeners | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"Listener object types\"\n  - \"listeners\"\n  - \"Trace class, listeners\"\n  - \"trace listeners, about trace listeners\"\n  - \"Listeners collection\"\n  - \"trace listeners\"\n  - \"tracing [.NET Framework], trace listeners\"\n  - \"logs, trace listeners\"\nms.assetid: 444b0d33-67ea-4c36-9e94-79c50f839025\ncaps.latest.revision: 13\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# Trace Listeners\nWhen using **Trace**, **Debug** and <xref:System.Diagnostics.TraceSource>, you must have a mechanism for collecting and recording the messages that are sent. Trace messages are received by *listeners*. The purpose of a listener is to collect, store, and route tracing messages. Listeners direct the tracing output to an appropriate target, such as a log, window, or text file.  \n  \n Listeners are available to the **Debug**, **Trace**, and <xref:System.Diagnostics.TraceSource> classes, each of which can send its output to a variety of listener objects. The following are the commonly used predefined listeners:  \n  \n-   A <xref:System.Diagnostics.TextWriterTraceListener> redirects output to an instance of the <xref:System.IO.TextWriter> class or to anything that is a <xref:System.IO.Stream> class. It can also write to the console or to a file, because these are <xref:System.IO.Stream> classes.  \n  \n-   An <xref:System.Diagnostics.EventLogTraceListener> redirects output to an event log.  \n  \n-   A <xref:System.Diagnostics.DefaultTraceListener> emits **Write** and **WriteLine** messages to the **OutputDebugString** and to the **Debugger.Log** method. In Visual Studio, this causes the debugging messages to appear in the Output window. **Fail** and failed **Assert** messages also emit to the **OutputDebugString** Windows API and the **Debugger.Log** method, and also cause a message box to be displayed. This behavior is the default behavior for **Debug** and **Trace** messages, because **DefaultTraceListener** is automatically included in every `Listeners` collection and is the only listener automatically included.  \n  \n-   A <xref:System.Diagnostics.ConsoleTraceListener> directs tracing or debugging output to either the standard output or the standard error stream.  \n  \n-   A <xref:System.Diagnostics.DelimitedListTraceListener> directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream. The trace output is in a delimited text format that uses the delimiter specified by the <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> property.  \n  \n-   An <xref:System.Diagnostics.XmlWriterTraceListener> directs tracing or debugging output as XML-encoded data to a <xref:System.IO.TextWriter> or to a <xref:System.IO.Stream>, such as a <xref:System.IO.FileStream>.  \n  \n If you want any listener besides the <xref:System.Diagnostics.DefaultTraceListener> to receive **Debug**, **Trace** and <xref:System.Diagnostics.TraceSource> output, you must add it to the `Listeners` collection. For more information, see [How to: Create and Initialize Trace Listeners](../../../docs/framework/debug-trace-profile/how-to-create-and-initialize-trace-listeners.md) and [How to: Use TraceSource and Filters with Trace Listeners](../../../docs/framework/debug-trace-profile/how-to-use-tracesource-and-filters-with-trace-listeners.md). Any listener in the **Listeners** collection gets the same messages from the trace output methods. For example, suppose you set up two listeners: a **TextWriterTraceListener** and an **EventLogTraceListener**. Each listener receives the same message. The **TextWriterTraceListener** would direct its output to a stream, and the **EventLogTraceListener** would direct its output to an event log.  \n  \n The following example shows how to send output to the **Listeners** collection.  \n  \n```vb  \n' Use this example when debugging.  \nDebug.WriteLine(\"Error in Widget 42\")  \n' Use this example when tracing.  \nTrace.WriteLine(\"Error in Widget 42\")  \n```  \n  \n```csharp  \n// Use this example when debugging.  \nSystem.Diagnostics.Debug.WriteLine(\"Error in Widget 42\");  \n// Use this example when tracing.  \nSystem.Diagnostics.Trace.WriteLine(\"Error in Widget 42\");  \n```  \n  \n Debug and trace share the same **Listeners** collection, so if you add a listener object to a **Debug.Listeners** collection in your application, it gets added to the **Trace.Listeners** collection as well.  \n  \n The following example shows how to use a listener to send tracing information to a console:  \n  \n```vb  \nTrace.Listeners.Clear()  \nTrace.Listeners.Add(New TextWriterTraceListener(Console.Out))  \n```  \n  \n```csharp  \nSystem.Diagnostics.Trace.Listeners.Clear();  \nSystem.Diagnostics.Trace.Listeners.Add(  \n   new System.Diagnostics.TextWriterTraceListener(Console.Out));  \n```  \n  \n## Developer-Defined Listeners  \n You can define your own listeners by inheriting from the **TraceListener** base class and overriding its methods with your customized methods. For more information on creating developer-defined listeners, see <xref:System.Diagnostics.TraceListener> in the .NET Framework reference.  \n  \n## See Also  \n <xref:System.Diagnostics.TextWriterTraceListener>   \n <xref:System.Diagnostics.EventLogTraceListener>   \n <xref:System.Diagnostics.DefaultTraceListener>   \n <xref:System.Diagnostics.TraceListener>   \n [Tracing and Instrumenting Applications](../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)   \n [Trace Switches](../../../docs/framework/debug-trace-profile/trace-switches.md)","nodes":[{"pos":[12,44],"content":"Trace Listeners | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Trace Listeners | Microsoft Docs","pos":[0,32]}]},{"pos":[667,682],"content":"Trace Listeners","linkify":"Trace Listeners","nodes":[{"content":"Trace Listeners","pos":[0,15]}]},{"content":"When using <bpt id=\"p1\">**</bpt>Trace<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept> and <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph>, you must have a mechanism for collecting and recording the messages that are sent.","pos":[683,840],"source":"When using **Trace**, **Debug** and <xref:System.Diagnostics.TraceSource>, you must have a mechanism for collecting and recording the messages that are sent."},{"content":"Trace messages are received by <bpt id=\"p1\">*</bpt>listeners<ept id=\"p1\">*</ept>.","pos":[841,884],"source":" Trace messages are received by *listeners*."},{"content":"The purpose of a listener is to collect, store, and route tracing messages.","pos":[885,960]},{"content":"Listeners direct the tracing output to an appropriate target, such as a log, window, or text file.","pos":[961,1059]},{"content":"Listeners are available to the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Trace<ept id=\"p2\">**</ept>, and <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes, each of which can send its output to a variety of listener objects.","pos":[1066,1237],"source":"Listeners are available to the **Debug**, **Trace**, and <xref:System.Diagnostics.TraceSource> classes, each of which can send its output to a variety of listener objects."},{"content":"The following are the commonly used predefined listeners:","pos":[1238,1295]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> redirects output to an instance of the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter&gt;</ph> class or to anything that is a <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph> class.","pos":[1305,1485],"source":"A <xref:System.Diagnostics.TextWriterTraceListener> redirects output to an instance of the <xref:System.IO.TextWriter> class or to anything that is a <xref:System.IO.Stream> class."},{"content":"It can also write to the console or to a file, because these are <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> classes.","pos":[1486,1583],"source":" It can also write to the console or to a file, because these are <xref:System.IO.Stream> classes."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogTraceListener&gt;</ph> redirects output to an event log.","pos":[1593,1677],"source":"An <xref:System.Diagnostics.EventLogTraceListener> redirects output to an event log."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> emits <bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>WriteLine<ept id=\"p2\">**</ept> messages to the <bpt id=\"p3\">**</bpt>OutputDebugString<ept id=\"p3\">**</ept> and to the <bpt id=\"p4\">**</bpt>Debugger.Log<ept id=\"p4\">**</ept> method.","pos":[1687,1843],"source":"A <xref:System.Diagnostics.DefaultTraceListener> emits **Write** and **WriteLine** messages to the **OutputDebugString** and to the **Debugger.Log** method."},{"content":"In Visual Studio, this causes the debugging messages to appear in the Output window.","pos":[1844,1928]},{"content":"<bpt id=\"p1\">**</bpt>Fail<ept id=\"p1\">**</ept> and failed <bpt id=\"p2\">**</bpt>Assert<ept id=\"p2\">**</ept> messages also emit to the <bpt id=\"p3\">**</bpt>OutputDebugString<ept id=\"p3\">**</ept> Windows API and the <bpt id=\"p4\">**</bpt>Debugger.Log<ept id=\"p4\">**</ept> method, and also cause a message box to be displayed.","pos":[1929,2098],"source":"**Fail** and failed **Assert** messages also emit to the **OutputDebugString** Windows API and the **Debugger.Log** method, and also cause a message box to be displayed."},{"content":"This behavior is the default behavior for <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Trace<ept id=\"p2\">**</ept> messages, because <bpt id=\"p3\">**</bpt>DefaultTraceListener<ept id=\"p3\">**</ept> is automatically included in every <ph id=\"ph1\">`Listeners`</ph> collection and is the only listener automatically included.","pos":[2099,2314],"source":" This behavior is the default behavior for **Debug** and **Trace** messages, because **DefaultTraceListener** is automatically included in every `Listeners` collection and is the only listener automatically included."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> directs tracing or debugging output to either the standard output or the standard error stream.","pos":[2324,2468],"source":"A <xref:System.Diagnostics.ConsoleTraceListener> directs tracing or debugging output to either the standard output or the standard error stream."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.DelimitedListTraceListener&gt;</ph> directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream.","pos":[2478,2650],"source":"A <xref:System.Diagnostics.DelimitedListTraceListener> directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream."},{"content":"The trace output is in a delimited text format that uses the delimiter specified by the <ph id=\"ph1\">&lt;xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A&gt;</ph> property.","pos":[2651,2814],"source":" The trace output is in a delimited text format that uses the delimiter specified by the <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> property."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Diagnostics.XmlWriterTraceListener&gt;</ph> directs tracing or debugging output as XML-encoded data to a <ph id=\"ph2\">&lt;xref:System.IO.TextWriter&gt;</ph> or to a <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph>, such as a <ph id=\"ph4\">&lt;xref:System.IO.FileStream&gt;</ph>.","pos":[2824,3036],"source":"An <xref:System.Diagnostics.XmlWriterTraceListener> directs tracing or debugging output as XML-encoded data to a <xref:System.IO.TextWriter> or to a <xref:System.IO.Stream>, such as a <xref:System.IO.FileStream>."},{"content":"If you want any listener besides the <ph id=\"ph1\">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> to receive <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Trace<ept id=\"p2\">**</ept> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> output, you must add it to the <ph id=\"ph3\">`Listeners`</ph> collection.","pos":[3043,3255],"source":"If you want any listener besides the <xref:System.Diagnostics.DefaultTraceListener> to receive **Debug**, **Trace** and <xref:System.Diagnostics.TraceSource> output, you must add it to the `Listeners` collection."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Create and Initialize Trace Listeners<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/how-to-create-and-initialize-trace-listeners.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Use TraceSource and Filters with Trace Listeners<ept id=\"p2\">](../../../docs/framework/debug-trace-profile/how-to-use-tracesource-and-filters-with-trace-listeners.md)</ept>.","pos":[3256,3590],"source":" For more information, see [How to: Create and Initialize Trace Listeners](../../../docs/framework/debug-trace-profile/how-to-create-and-initialize-trace-listeners.md) and [How to: Use TraceSource and Filters with Trace Listeners](../../../docs/framework/debug-trace-profile/how-to-use-tracesource-and-filters-with-trace-listeners.md)."},{"content":"Any listener in the <bpt id=\"p1\">**</bpt>Listeners<ept id=\"p1\">**</ept> collection gets the same messages from the trace output methods.","pos":[3591,3689],"source":" Any listener in the **Listeners** collection gets the same messages from the trace output methods."},{"content":"For example, suppose you set up two listeners: a <bpt id=\"p1\">**</bpt>TextWriterTraceListener<ept id=\"p1\">**</ept> and an <bpt id=\"p2\">**</bpt>EventLogTraceListener<ept id=\"p2\">**</ept>.","pos":[3690,3800],"source":" For example, suppose you set up two listeners: a **TextWriterTraceListener** and an **EventLogTraceListener**."},{"content":"Each listener receives the same message.","pos":[3801,3841]},{"content":"The <bpt id=\"p1\">**</bpt>TextWriterTraceListener<ept id=\"p1\">**</ept> would direct its output to a stream, and the <bpt id=\"p2\">**</bpt>EventLogTraceListener<ept id=\"p2\">**</ept> would direct its output to an event log.","pos":[3842,3985],"source":" The **TextWriterTraceListener** would direct its output to a stream, and the **EventLogTraceListener** would direct its output to an event log."},{"pos":[3992,4071],"content":"The following example shows how to send output to the <bpt id=\"p1\">**</bpt>Listeners<ept id=\"p1\">**</ept> collection.","source":"The following example shows how to send output to the **Listeners** collection."},{"pos":[4462,4668],"content":"Debug and trace share the same <bpt id=\"p1\">**</bpt>Listeners<ept id=\"p1\">**</ept> collection, so if you add a listener object to a <bpt id=\"p2\">**</bpt>Debug.Listeners<ept id=\"p2\">**</ept> collection in your application, it gets added to the <bpt id=\"p3\">**</bpt>Trace.Listeners<ept id=\"p3\">**</ept> collection as well.","source":"Debug and trace share the same **Listeners** collection, so if you add a listener object to a **Debug.Listeners** collection in your application, it gets added to the **Trace.Listeners** collection as well."},{"content":"The following example shows how to use a listener to send tracing information to a console:","pos":[4675,4766]},{"pos":[5058,5085],"content":"Developer-Defined Listeners","linkify":"Developer-Defined Listeners","nodes":[{"content":"Developer-Defined Listeners","pos":[0,27]}]},{"content":"You can define your own listeners by inheriting from the <bpt id=\"p1\">**</bpt>TraceListener<ept id=\"p1\">**</ept> base class and overriding its methods with your customized methods.","pos":[5089,5231],"source":"You can define your own listeners by inheriting from the **TraceListener** base class and overriding its methods with your customized methods."},{"content":"For more information on creating developer-defined listeners, see <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> in the .NET Framework reference.","pos":[5232,5370],"source":" For more information on creating developer-defined listeners, see <xref:System.Diagnostics.TraceListener> in the .NET Framework reference."},{"pos":[5379,5387],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Tracing and Instrumenting Applications<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)</ept><ph id=\"ph1\"> </ph>","pos":[5591,5720],"source":" [Tracing and Instrumenting Applications](../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Trace Switches<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/trace-switches.md)</ept>","pos":[5723,5803],"source":" [Trace Switches](../../../docs/framework/debug-trace-profile/trace-switches.md)"}]}