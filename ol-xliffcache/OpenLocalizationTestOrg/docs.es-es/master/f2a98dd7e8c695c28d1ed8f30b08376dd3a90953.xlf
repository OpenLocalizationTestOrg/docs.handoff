<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2a98dd7e8c695c28d1ed8f30b08376dd3a90953</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\nopersistscope-activity.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c1333bf9f6e7ce9500aa2340981140935af2396</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ca73d73f00c78edb1663f6c19e784451d2dc7fc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>NoPersistScope Activity | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>NoPersistScope Activity</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample shows how to manipulate a non-serializable and disposable state within a workflow.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is important that workflows do not attempt to persist non-serializable state and it is also important for disposable objects to be cleaned up after they are used in workflow.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Demonstrates</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NoPersistScope`</ph> custom activity and designer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using the NoPersistZone activity</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When the sample workflow runs, a custom activity called <ph id="ph1">`CreateTextWriter`</ph> creates an object of type <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> and saves it into a workflow variable.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> is an <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>, which is configured to write to a file named ‘out.txt’ in the directory in which the sample runs, is used by a <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity as it echoes any text you type in at the console.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The echo logic runs within a <ph id="ph1">`NoPersistScope`</ph> activity (the code for which is also part of this sample), which prevents the workflow from being persisted.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you type in <ph id="ph1">`unload`</ph> at the console, the host attempts to persist the workflow instance but this operation times out because the workflow remains within a <ph id="ph2">`NoPersistScope`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The workflow also utilizes a custom activity called <ph id="ph1">`Dispose`</ph> to dispose the <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> object when the workflow is finished using it.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dispose`</ph> activity is placed within the <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch.Finally%2A&gt;</ph> block of the <ph id="ph3">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity in which the <ph id="ph4">&lt;xref:System.IO.TextWriter&gt;</ph> variable is declared, to ensure that it runs even if an exception should occur during execution of the Try block.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can type in <ph id="ph1">`exit`</ph> to complete the workflow instance and exit the program.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To run the sample</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Open the NoPersistZone.sln solution in <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To build the solution, press CTRL+SHIFT+B or select <bpt id="p1">**</bpt>Build Solution<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Once the build has succeeded, press F5 or select <bpt id="p1">**</bpt>Start Debugging<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu alternatively, you can press CTRL+F5 or select <bpt id="p3">**</bpt>Start Without Debugging<ept id="p3">**</ept> from the <bpt id="p4">**</bpt>Debug<ept id="p4">**</ept> menu to run without debugging.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To cleanup (optional)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To remove the SQL Instance Store, run Cleanup.cmd.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>