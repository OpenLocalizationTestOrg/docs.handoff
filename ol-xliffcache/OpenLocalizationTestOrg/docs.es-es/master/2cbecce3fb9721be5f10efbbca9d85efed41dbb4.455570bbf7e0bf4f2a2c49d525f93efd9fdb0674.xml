{"content":"---\ntitle: \"&#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39; | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc30921\"\n  - \"BC30921\"\nhelpviewer_keywords: \n  - \"BC30921\"\nms.assetid: b0dd971a-80e2-4d37-925b-854d17411546\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# &#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39;\nA derived class or interface attempts to expand the access level of an internal type by using it as a type argument to a base class or interface.  \n  \n The following code can generate this error.  \n  \n```  \nPublic Class containingClass  \n    Public Class baseClass(Of t)  \n    End Class  \n    Friend Class derivedClass  \n        Inherits baseClass(Of internalStructure)  \n    End Class  \n    Private Structure internalStructure  \n        Dim firstMember As Integer  \n    End Structure  \nEnd Class  \n```  \n  \n Code outside `containingClass` is not allowed to access `internalStructure`. However, `derivedClass` can be accessed from any code in the same assembly. Therefore, `derivedClass` cannot inherit `baseClass` if it uses `internalStructure` as a type argument, because that could expose `internalStructure` throughout the defining code region.  \n  \n **Error ID:** BC30921  \n  \n## To correct this error  \n  \n-   Adjust the access levels of the classes or interfaces so that the derived type does not expand the access level of the internal type.  \n  \n     -or-  \n  \n-   If you cannot adjust the access levels, then do not use the internal type as a type argument when constructing the base class or interface.  \n  \n## See Also  \n [Inherits Statement](../../visual-basic/language-reference/statements/inherits-statement.md)   \n [Inheritance Basics](../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)   \n [Access Levels in Visual Basic](../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)   \n [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Type List](../../visual-basic/language-reference/statements/type-list.md)","nodes":[{"pos":[4,767],"nodes":[{"content":"&#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39; | Microsoft Docs","nodes":[{"pos":[0,245],"content":"&#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39; | Microsoft Docs","nodes":[{"content":"&amp;#39;<ph id=\"ph1\">&amp;lt;</ph>derivedtypename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; cannot inherit from <ph id=\"ph3\">&amp;lt;</ph>type<ph id=\"ph4\">&amp;gt;</ph> &amp;#39;<ph id=\"ph5\">&amp;lt;</ph>constructedbasetypename<ph id=\"ph6\">&amp;gt;</ph>&amp;#39; because it expands the access of type &amp;#39;<ph id=\"ph7\">&amp;lt;</ph>internaltypename<ph id=\"ph8\">&amp;gt;</ph>&amp;#39; to <ph id=\"ph9\">&amp;lt;</ph>region<ph id=\"ph10\">&amp;gt;</ph> &amp;#39;<ph id=\"ph11\">&amp;lt;</ph>regionname<ph id=\"ph12\">&amp;gt;</ph>&amp;#39; | Microsoft Docs","pos":[0,245],"source":"&#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39; | Microsoft Docs"}]}],"pos":[6,254],"yaml":true}],"content":"title: \"&#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39; | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc30921\"\n  - \"BC30921\"\nhelpviewer_keywords: \n  - \"BC30921\"\nms.assetid: b0dd971a-80e2-4d37-925b-854d17411546\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[774,1002],"content":"&#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39;","linkify":"&#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39;","nodes":[{"content":"&amp;#39;<ph id=\"ph1\">&amp;lt;</ph>derivedtypename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; cannot inherit from <ph id=\"ph3\">&amp;lt;</ph>type<ph id=\"ph4\">&amp;gt;</ph> &amp;#39;<ph id=\"ph5\">&amp;lt;</ph>constructedbasetypename<ph id=\"ph6\">&amp;gt;</ph>&amp;#39; because it expands the access of type &amp;#39;<ph id=\"ph7\">&amp;lt;</ph>internaltypename<ph id=\"ph8\">&amp;gt;</ph>&amp;#39; to <ph id=\"ph9\">&amp;lt;</ph>region<ph id=\"ph10\">&amp;gt;</ph> &amp;#39;<ph id=\"ph11\">&amp;lt;</ph>regionname<ph id=\"ph12\">&amp;gt;</ph>&amp;#39;","pos":[0,228],"source":"&#39;&lt;derivedtypename&gt;&#39; cannot inherit from &lt;type&gt; &#39;&lt;constructedbasetypename&gt;&#39; because it expands the access of type &#39;&lt;internaltypename&gt;&#39; to &lt;region&gt; &#39;&lt;regionname&gt;&#39;"}]},{"content":"A derived class or interface attempts to expand the access level of an internal type by using it as a type argument to a base class or interface.","pos":[1003,1148]},{"content":"The following code can generate this error.","pos":[1155,1198]},{"content":"Code outside <ph id=\"ph1\">`containingClass`</ph> is not allowed to access <ph id=\"ph2\">`internalStructure`</ph>.","pos":[1512,1588],"source":"Code outside `containingClass` is not allowed to access `internalStructure`."},{"content":"However, <ph id=\"ph1\">`derivedClass`</ph> can be accessed from any code in the same assembly.","pos":[1589,1664],"source":" However, `derivedClass` can be accessed from any code in the same assembly."},{"content":"Therefore, <ph id=\"ph1\">`derivedClass`</ph> cannot inherit <ph id=\"ph2\">`baseClass`</ph> if it uses <ph id=\"ph3\">`internalStructure`</ph> as a type argument, because that could expose <ph id=\"ph4\">`internalStructure`</ph> throughout the defining code region.","pos":[1665,1851],"source":" Therefore, `derivedClass` cannot inherit `baseClass` if it uses `internalStructure` as a type argument, because that could expose `internalStructure` throughout the defining code region."},{"pos":[1858,1879],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC30921","source":"**Error ID:** BC30921"},{"pos":[1888,1909],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Adjust the access levels of the classes or interfaces so that the derived type does not expand the access level of the internal type.","pos":[1919,2052]},{"content":"-or-","pos":[2063,2067]},{"content":"If you cannot adjust the access levels, then do not use the internal type as a type argument when constructing the base class or interface.","pos":[2077,2216]},{"pos":[2225,2233],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2237,2330],"source":"[Inherits Statement](../../visual-basic/language-reference/statements/inherits-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Inheritance Basics<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept><ph id=\"ph1\"> </ph>","pos":[2334,2453],"source":"[Inheritance Basics](../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md) "},{"content":"<bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept><ph id=\"ph1\"> </ph>","pos":[2457,2580],"source":"[Access Levels in Visual Basic](../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md) "},{"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2584,2700],"source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../visual-basic/language-reference/statements/type-list.md)</ept>","pos":[2704,2778],"source":"[Type List](../../visual-basic/language-reference/statements/type-list.md)"}]}