{"content":"---\ntitle: \"Custom Tracking\"\nms.date: \"03/30/2017\"\nms.assetid: 2d191c9f-62f4-4c63-92dd-cda917fcf254\n---\n# Custom Tracking\nThis sample demonstrates how to create a custom tracking participant and write the contents of the tracking data to console. In addition, the sample demonstrates how to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects populated with user defined data. The console-based tracking participant filters the <xref:System.Activities.Tracking.TrackingRecord> objects emitted by the workflow using a tracking profile object created in code.\n\n## Sample Details\n Windows Workflow Foundation (WF) provides a tracking infrastructure to track execution of a workflow instance. The tracking runtime implements a workflow instance to emit events related to the workflow lifecycle, events from workflow activities and custom tracking events. The following table details the primary components of the tracking infrastructure.\n\n|Component|Description|\n|---------------|-----------------|\n|Tracking runtime|Provides the infrastructure to emit tracking records.|\n|Tracking participants|Consumes the tracking records. [!INCLUDE[netfx40_short](../../../../includes/netfx40-short-md.md)] ships with a tracking participant that writes tracking records as Event Tracing for Windows (ETW) events.|\n|Tracking profile|A filtering mechanism that allows a tracking participant to subscribe for a subset of the tracking records emitted from a workflow instance.|\n\n The following table details the tracking records that the workflow runtime emits.\n\n|Tracking Record|Description|\n|---------------------|-----------------|\n|Workflow instance tracking records.|Describes the life cycle of the workflow instance. For example, an instance record is emitted when the workflow starts or completes.|\n|Activity state Tracking Records.|Details activity execution. These records indicate the state of a workflow activity such as when an activity is scheduled or when the activity completes or when a fault is thrown.|\n|Bookmark resumption record.|Emitted whenever a bookmark within a workflow instance is resumed.|\n|Custom Tracking Records.|A workflow author can create Custom Tracking Records and emit them within the custom activity.|\n\n The tracking participant subscribes for a subset of the emitted <xref:System.Activities.Tracking.TrackingRecord> objects using tracking profiles. A tracking profile contains tracking queries that allow subscribing for a particular tracking record type. Tracking profiles can be specified in code or in configuration.\n\n### Custom Tracking Participant\n The tracking participant API allows extension of the tracking runtime with a user provided tracking participant that can include custom logic to handle <xref:System.Activities.Tracking.TrackingRecord> objects emitted by the workflow runtime.\n\n To write a tracking participant the user must implement <xref:System.Activities.Tracking.TrackingParticipant>. Specifically, the <xref:System.Activities.Tracking.TrackingParticipant.Track%2A> method has to be implemented by the custom participant. This method is called when a <xref:System.Activities.Tracking.TrackingRecord> is emitted by the workflow runtime.\n\n```csharp\npublic abstract class TrackingParticipant\n{\n    protected TrackingParticipant();\n\n    public virtual TrackingProfile TrackingProfile { get; set; }\n    public abstract void Track(TrackingRecord record, TimeSpan timeout);\n}\n```\n\n The complete tracking participant is implemented in the ConsoleTrackingParticipant.cs file.The following code example is the <xref:System.Activities.Tracking.TrackingParticipant.Track%2A> method for the custom tracking participant.\n\n```csharp\nprotected override void Track(TrackingRecord record, TimeSpan timeout)\n{\n    ...\n    WorkflowInstanceRecord workflowInstanceRecord = record as WorkflowInstanceRecord;\n    if (workflowInstanceRecord != null)\n    {\n        Console.WriteLine(String.Format(CultureInfo.InvariantCulture,\n            \" Workflow InstanceID: {0} Workflow instance state: {1}\",\n            record.InstanceId, workflowInstanceRecord.State));\n    }\n\n    ActivityStateRecord activityStateRecord = record as ActivityStateRecord;\n    if (activityStateRecord != null)\n    {\n        IDictionary<String, object> variables = activityStateRecord.Variables;\n        StringBuilder vars = new StringBuilder();\n\n        if (variables.Count > 0)\n        {\n            vars.AppendLine(\"\\n\\tVariables:\");\n            foreach (KeyValuePair<string, object> variable in variables)\n            {\n                vars.AppendLine(String.Format(\n                    \"\\t\\tName: {0} Value: {1}\", variable.Key, variable.Value));\n            }\n        }\n        Console.WriteLine(String.Format(CultureInfo.InvariantCulture,\n            \" :Activity DisplayName: {0} :ActivityInstanceState: {1} {2}\",\n                activityStateRecord.Activity.Name, activityStateRecord.State,\n            ((variables.Count > 0) ? vars.ToString() : String.Empty)));\n    }\n\n    CustomTrackingRecord customTrackingRecord = record as CustomTrackingRecord;\n\n    if ((customTrackingRecord != null) && (customTrackingRecord.Data.Count > 0))\n    {\n        ...\n    }\n    Console.WriteLine();\n\n}\n```\n\n The following code example adds the console participant to the workflow invoker.\n\n```csharp\nConsoleTrackingParticipant customTrackingParticipant = new ConsoleTrackingParticipant()\n{\n    ...\n    // The tracking profile is set here, refer to Program.CS\n...\n}\n\nWorkflowInvoker invoker = new WorkflowInvoker(BuildSampleWorkflow());\ninvoker.Extensions.Add(customTrackingParticipant);\n```\n\n### Emitting Custom Tracking Records\n This sample also demonstrates the ability to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects from a custom workflow activity:\n\n-   The <xref:System.Activities.Tracking.CustomTrackingRecord> objects are created and populated with user-defined data that is desired to be emitted with the record.\n\n-   The <xref:System.Activities.Tracking.CustomTrackingRecord> is emitted by calling the track method of the <xref:System.Activities.ActivityContext>.\n\n The following example demonstrates how to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects within a custom activity.\n\n```csharp\n// Create the Custom Tracking Record\nCustomTrackingRecord customRecord = new CustomTrackingRecord(\"OrderIn\")\n{\n    Data =\n    {\n        {\"OrderId\", 200},\n        {\"OrderDate\", \"20 Aug 2001\"}\n    }\n};\n\n// Emit custom tracking record\ncontext.Track(customRecord);\n```\n\n#### To use this sample\n\n1.  Using Visual Studio 2010, open the CustomTrackingSample.sln solution file.\n\n2.  To build the solution, press CTRL+SHIFT+B.\n\n3.  To run the solution, press CTRL+F5.\n\n> [!IMPORTANT]\n>  The samples may already be installed on your computer. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Basic\\Tracking\\CustomTracking`  \n  \n## See also\n\n- [AppFabric Monitoring Samples](https://go.microsoft.com/fwlink/?LinkId=193959)\n","nodes":[{"pos":[4,99],"embed":true,"restype":"x-metadata","content":"title: \"Custom Tracking\"\nms.date: \"03/30/2017\"\nms.assetid: 2d191c9f-62f4-4c63-92dd-cda917fcf254","nodes":[{"content":"Custom Tracking","nodes":[{"pos":[0,15],"content":"Custom Tracking","nodes":[{"content":"Custom Tracking","pos":[0,15]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[106,121],"content":"Custom Tracking","linkify":"Custom Tracking","nodes":[{"content":"Custom Tracking","pos":[0,15]}]},{"content":"This sample demonstrates how to create a custom tracking participant and write the contents of the tracking data to console.","pos":[122,246]},{"content":"In addition, the sample demonstrates how to emit <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects populated with user defined data.","pos":[247,392],"source":" In addition, the sample demonstrates how to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects populated with user defined data."},{"content":"The console-based tracking participant filters the <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> objects emitted by the workflow using a tracking profile object created in code.","pos":[393,573],"source":" The console-based tracking participant filters the <xref:System.Activities.Tracking.TrackingRecord> objects emitted by the workflow using a tracking profile object created in code."},{"pos":[578,592],"content":"Sample Details","linkify":"Sample Details","nodes":[{"content":"Sample Details","pos":[0,14]}]},{"content":"Windows Workflow Foundation (WF) provides a tracking infrastructure to track execution of a workflow instance.","pos":[594,704]},{"content":"The tracking runtime implements a workflow instance to emit events related to the workflow lifecycle, events from workflow activities and custom tracking events.","pos":[705,866]},{"content":"The following table details the primary components of the tracking infrastructure.","pos":[867,949]},{"content":"Component","pos":[952,961]},{"content":"Description","pos":[962,973]},{"content":"Tracking runtime","pos":[1012,1028]},{"content":"Provides the infrastructure to emit tracking records.","pos":[1029,1082]},{"content":"Tracking participants","pos":[1085,1106]},{"content":"Consumes the tracking records.","pos":[1107,1137]},{"content":"<ph id=\"ph1\">[!INCLUDE[netfx40_short](../../../../includes/netfx40-short-md.md)]</ph> ships with a tracking participant that writes tracking records as Event Tracing for Windows (ETW) events.","pos":[1138,1311],"source":"[!INCLUDE[netfx40_short](../../../../includes/netfx40-short-md.md)] ships with a tracking participant that writes tracking records as Event Tracing for Windows (ETW) events."},{"content":"Tracking profile","pos":[1314,1330]},{"content":"A filtering mechanism that allows a tracking participant to subscribe for a subset of the tracking records emitted from a workflow instance.","pos":[1331,1471]},{"content":"The following table details the tracking records that the workflow runtime emits.","pos":[1475,1556]},{"content":"Tracking Record","pos":[1559,1574]},{"content":"Description","pos":[1575,1586]},{"content":"Workflow instance tracking records.","pos":[1631,1666]},{"content":"Describes the life cycle of the workflow instance.","pos":[1667,1717]},{"content":"For example, an instance record is emitted when the workflow starts or completes.","pos":[1718,1799]},{"content":"Activity state Tracking Records.","pos":[1802,1834]},{"content":"Details activity execution.","pos":[1835,1862]},{"content":"These records indicate the state of a workflow activity such as when an activity is scheduled or when the activity completes or when a fault is thrown.","pos":[1863,2014]},{"content":"Bookmark resumption record.","pos":[2017,2044]},{"content":"Emitted whenever a bookmark within a workflow instance is resumed.","pos":[2045,2111]},{"content":"Custom Tracking Records.","pos":[2114,2138]},{"content":"A workflow author can create Custom Tracking Records and emit them within the custom activity.","pos":[2139,2233]},{"content":"The tracking participant subscribes for a subset of the emitted <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> objects using tracking profiles.","pos":[2237,2382],"source":"The tracking participant subscribes for a subset of the emitted <xref:System.Activities.Tracking.TrackingRecord> objects using tracking profiles."},{"content":"A tracking profile contains tracking queries that allow subscribing for a particular tracking record type.","pos":[2383,2489]},{"content":"Tracking profiles can be specified in code or in configuration.","pos":[2490,2553]},{"pos":[2559,2586],"content":"Custom Tracking Participant","linkify":"Custom Tracking Participant","nodes":[{"content":"Custom Tracking Participant","pos":[0,27]}]},{"pos":[2588,2829],"content":"The tracking participant API allows extension of the tracking runtime with a user provided tracking participant that can include custom logic to handle <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> objects emitted by the workflow runtime.","source":"The tracking participant API allows extension of the tracking runtime with a user provided tracking participant that can include custom logic to handle <xref:System.Activities.Tracking.TrackingRecord> objects emitted by the workflow runtime."},{"content":"To write a tracking participant the user must implement <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph>.","pos":[2832,2942],"source":"To write a tracking participant the user must implement <xref:System.Activities.Tracking.TrackingParticipant>."},{"content":"Specifically, the <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingParticipant.Track%2A&gt;</ph> method has to be implemented by the custom participant.","pos":[2943,3079],"source":" Specifically, the <xref:System.Activities.Tracking.TrackingParticipant.Track%2A> method has to be implemented by the custom participant."},{"content":"This method is called when a <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> is emitted by the workflow runtime.","pos":[3080,3193],"source":" This method is called when a <xref:System.Activities.Tracking.TrackingRecord> is emitted by the workflow runtime."},{"pos":[3433,3664],"content":"The complete tracking participant is implemented in the ConsoleTrackingParticipant.cs file.The following code example is the <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingParticipant.Track%2A&gt;</ph> method for the custom tracking participant.","source":"The complete tracking participant is implemented in the ConsoleTrackingParticipant.cs file.The following code example is the <xref:System.Activities.Tracking.TrackingParticipant.Track%2A> method for the custom tracking participant."},{"content":"The following code example adds the console participant to the workflow invoker.","pos":[5199,5279]},{"pos":[5587,5619],"content":"Emitting Custom Tracking Records","linkify":"Emitting Custom Tracking Records","nodes":[{"content":"Emitting Custom Tracking Records","pos":[0,32]}]},{"pos":[5621,5766],"content":"This sample also demonstrates the ability to emit <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects from a custom workflow activity:","source":"This sample also demonstrates the ability to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects from a custom workflow activity:"},{"pos":[5772,5934],"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects are created and populated with user-defined data that is desired to be emitted with the record.","source":"The <xref:System.Activities.Tracking.CustomTrackingRecord> objects are created and populated with user-defined data that is desired to be emitted with the record."},{"pos":[5940,6086],"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> is emitted by calling the track method of the <ph id=\"ph2\">&lt;xref:System.Activities.ActivityContext&gt;</ph>.","source":"The <xref:System.Activities.Tracking.CustomTrackingRecord> is emitted by calling the track method of the <xref:System.Activities.ActivityContext>."},{"pos":[6089,6224],"content":"The following example demonstrates how to emit <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects within a custom activity.","source":"The following example demonstrates how to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects within a custom activity."},{"pos":[6507,6525],"content":"To use this sample","linkify":"To use this sample","nodes":[{"content":"To use this sample","pos":[0,18]}]},{"content":"Using Visual Studio 2010, open the CustomTrackingSample.sln solution file.","pos":[6531,6605]},{"content":"To build the solution, press CTRL+SHIFT+B.","pos":[6611,6653]},{"content":"To run the solution, press CTRL+F5.","pos":[6659,6694]},{"pos":[6698,6831],"content":"[!IMPORTANT]\n The samples may already be installed on your computer. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your computer. Check for the following (default) directory before continuing.","pos":[14,131],"nodes":[{"content":"The samples may already be installed on your computer.","pos":[0,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[6885,7195],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[7196,7246]},{"pos":[7331,7339],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7343,7421],"content":"<bpt id=\"p1\">[</bpt>AppFabric Monitoring Samples<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=193959)</ept>","source":"[AppFabric Monitoring Samples](https://go.microsoft.com/fwlink/?LinkId=193959)"}]}