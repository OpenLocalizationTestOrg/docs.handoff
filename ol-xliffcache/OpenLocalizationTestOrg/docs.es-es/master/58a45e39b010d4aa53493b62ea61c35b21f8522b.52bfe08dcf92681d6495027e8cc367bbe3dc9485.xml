{"content":"---\ntitle: \"Overrides (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"Overrides\"\n  - \"vb.Overrides\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"properties [Visual Basic], redefining\"\n  - \"procedures, overriding\"\n  - \"procedures, redefining\"\n  - \"overriding\"\n  - \"Overrides keyword\"\n  - \"overriding, Overrides keyword\"\n  - \"properties [Visual Basic], overriding\"\nms.assetid: 9f5e6144-ce10-465e-842b-1a8f8760af90\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Overrides (Visual Basic)\nSpecifies that a property or procedure overrides an identically named property or procedure inherited from a base class.  \n  \n## Remarks  \n  \n## Rules  \n  \n-   **Declaration Context.** You can use `Overrides` only in a property or procedure declaration statement.  \n  \n-   **Combined Modifiers.** You cannot specify `Overrides` together with `Shadows` or `Shared` in the same declaration. Because an overriding element is implicitly overridable, you cannot combine `Overridable` with `Overrides`.  \n  \n-   **Matching Signatures.** The signature of this declaration must exactly match the *signature* of the property or procedure that it overrides. This means the parameter lists must have the same number of parameters, in the same order, with the same data types.  \n  \n     In addition to the signature, the overriding declaration must also exactly match the following:  \n  \n    -   The access level  \n  \n    -   The return type, if any  \n  \n-   **Generic Signatures.** For a generic procedure, the signature includes the number of type parameters. Therefore, the overriding declaration must match the base class version in that respect as well.  \n  \n-   **Additional Matching.** In addition to matching the signature of the base class version, this declaration must also match it in the following respects:  \n  \n    -   Access-level modifier (such as [Public](../../../visual-basic/language-reference/modifiers/public.md))  \n  \n    -   Passing mechanism of each parameter ([ByVal](../../../visual-basic/language-reference/modifiers/byval.md) or [ByRef](../../../visual-basic/language-reference/modifiers/byref.md))  \n  \n    -   Constraint lists on each type parameter of a generic procedure  \n  \n-   **Shadowing and Overriding.** Both shadowing and overriding redefine an inherited element, but there are significant differences between the two approaches. For more information, see [Shadowing in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md).  \n  \n If you use `Overrides`, the compiler implicitly adds `Overloads` so that your library APIs work with C# more easily.  \n  \n The `Overrides` modifier can be used in these contexts:  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See Also  \n [MustOverride](../../../visual-basic/language-reference/modifiers/mustoverride.md)   \n [NotOverridable](../../../visual-basic/language-reference/modifiers/notoverridable.md)   \n [Overridable](../../../visual-basic/language-reference/modifiers/overridable.md)   \n [Keywords](../../../visual-basic/language-reference/keywords/index.md)   \n [Shadowing in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)   \n [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Type List](../../../visual-basic/language-reference/statements/type-list.md)","nodes":[{"pos":[4,785],"nodes":[{"content":"Overrides (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,41],"content":"Overrides (Visual Basic) | Microsoft Docs","nodes":[{"content":"Overrides (Visual Basic) | Microsoft Docs","pos":[0,41]}]}],"pos":[6,50],"yaml":true}],"content":"title: \"Overrides (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"Overrides\"\n  - \"vb.Overrides\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"properties [Visual Basic], redefining\"\n  - \"procedures, overriding\"\n  - \"procedures, redefining\"\n  - \"overriding\"\n  - \"Overrides keyword\"\n  - \"overriding, Overrides keyword\"\n  - \"properties [Visual Basic], overriding\"\nms.assetid: 9f5e6144-ce10-465e-842b-1a8f8760af90\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[792,816],"content":"Overrides (Visual Basic)","linkify":"Overrides (Visual Basic)","nodes":[{"content":"Overrides (Visual Basic)","pos":[0,24]}]},{"content":"Specifies that a property or procedure overrides an identically named property or procedure inherited from a base class.","pos":[817,937]},{"pos":[946,953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[962,967],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Declaration Context.<ept id=\"p1\">**</ept>","pos":[977,1001],"source":"**Declaration Context.**"},{"content":"You can use <ph id=\"ph1\">`Overrides`</ph> only in a property or procedure declaration statement.","pos":[1002,1080],"source":" You can use `Overrides` only in a property or procedure declaration statement."},{"content":"<bpt id=\"p1\">**</bpt>Combined Modifiers.<ept id=\"p1\">**</ept>","pos":[1090,1113],"source":"**Combined Modifiers.**"},{"content":"You cannot specify <ph id=\"ph1\">`Overrides`</ph> together with <ph id=\"ph2\">`Shadows`</ph> or <ph id=\"ph3\">`Shared`</ph> in the same declaration.","pos":[1114,1205],"source":" You cannot specify `Overrides` together with `Shadows` or `Shared` in the same declaration."},{"content":"Because an overriding element is implicitly overridable, you cannot combine <ph id=\"ph1\">`Overridable`</ph> with <ph id=\"ph2\">`Overrides`</ph>.","pos":[1206,1313],"source":" Because an overriding element is implicitly overridable, you cannot combine `Overridable` with `Overrides`."},{"content":"<bpt id=\"p1\">**</bpt>Matching Signatures.<ept id=\"p1\">**</ept>","pos":[1323,1347],"source":"**Matching Signatures.**"},{"content":"The signature of this declaration must exactly match the <bpt id=\"p1\">*</bpt>signature<ept id=\"p1\">*</ept> of the property or procedure that it overrides.","pos":[1348,1464],"source":" The signature of this declaration must exactly match the *signature* of the property or procedure that it overrides."},{"content":"This means the parameter lists must have the same number of parameters, in the same order, with the same data types.","pos":[1465,1581]},{"content":"In addition to the signature, the overriding declaration must also exactly match the following:","pos":[1592,1687]},{"content":"The access level","pos":[1701,1717]},{"content":"The return type, if any","pos":[1731,1754]},{"content":"<bpt id=\"p1\">**</bpt>Generic Signatures.<ept id=\"p1\">**</ept>","pos":[1764,1787],"source":"**Generic Signatures.**"},{"content":"For a generic procedure, the signature includes the number of type parameters.","pos":[1788,1866]},{"content":"Therefore, the overriding declaration must match the base class version in that respect as well.","pos":[1867,1963]},{"content":"<bpt id=\"p1\">**</bpt>Additional Matching.<ept id=\"p1\">**</ept>","pos":[1973,1997],"source":"**Additional Matching.**"},{"content":"In addition to matching the signature of the base class version, this declaration must also match it in the following respects:","pos":[1998,2125]},{"pos":[2139,2241],"content":"Access-level modifier (such as <bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>)","source":"Access-level modifier (such as [Public](../../../visual-basic/language-reference/modifiers/public.md))"},{"pos":[2255,2433],"content":"Passing mechanism of each parameter (<bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/byval.md)</ept> or <bpt id=\"p2\">[</bpt>ByRef<ept id=\"p2\">](../../../visual-basic/language-reference/modifiers/byref.md)</ept>)","source":"Passing mechanism of each parameter ([ByVal](../../../visual-basic/language-reference/modifiers/byval.md) or [ByRef](../../../visual-basic/language-reference/modifiers/byref.md))"},{"content":"Constraint lists on each type parameter of a generic procedure","pos":[2447,2509]},{"content":"<bpt id=\"p1\">**</bpt>Shadowing and Overriding.<ept id=\"p1\">**</ept>","pos":[2519,2548],"source":"**Shadowing and Overriding.**"},{"content":"Both shadowing and overriding redefine an inherited element, but there are significant differences between the two approaches.","pos":[2549,2675]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Shadowing in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)</ept>.","pos":[2676,2820],"source":" For more information, see [Shadowing in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)."},{"pos":[2827,2943],"content":"If you use <ph id=\"ph1\">`Overrides`</ph>, the compiler implicitly adds <ph id=\"ph2\">`Overloads`</ph> so that your library APIs work with C# more easily.","source":"If you use `Overrides`, the compiler implicitly adds `Overloads` so that your library APIs work with C# more easily."},{"pos":[2950,3005],"content":"The <ph id=\"ph1\">`Overrides`</ph> modifier can be used in these contexts:","source":"The `Overrides` modifier can be used in these contexts:"},{"pos":[3012,3107],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[3114,3209],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[3216,3301],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[3310,3318],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MustOverride<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept><ph id=\"ph1\"> </ph>","pos":[3322,3405],"source":"[MustOverride](../../../visual-basic/language-reference/modifiers/mustoverride.md) "},{"content":"<bpt id=\"p1\">[</bpt>NotOverridable<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept><ph id=\"ph1\"> </ph>","pos":[3409,3496],"source":"[NotOverridable](../../../visual-basic/language-reference/modifiers/notoverridable.md) "},{"content":"<bpt id=\"p1\">[</bpt>Overridable<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept><ph id=\"ph1\"> </ph>","pos":[3500,3581],"source":"[Overridable](../../../visual-basic/language-reference/modifiers/overridable.md) "},{"content":"<bpt id=\"p1\">[</bpt>Keywords<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3585,3656],"source":"[Keywords](../../../visual-basic/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Shadowing in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)</ept><ph id=\"ph1\"> </ph>","pos":[3660,3778],"source":"[Shadowing in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md) "},{"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3782,3901],"source":"[Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept>","pos":[3905,3982],"source":"[Type List](../../../visual-basic/language-reference/statements/type-list.md)"}]}